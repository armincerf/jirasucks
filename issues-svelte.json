{"number":9173,"title":"Debounced Binding","body":"### Describe the problem\r\n\r\nWhile creating [this example REPL](https://svelte.dev/repl/6f543749f2f24e4fb28427dec562fd8a?version=4.2.0) about how to create a timer, I came to realize that directly binding an input field to the variable that triggers the start of the timer results in an immediate start of the timer.  But what if the user is not done typing?  Then the timer continuously restarts with every keystroke.\r\n\r\nNot only does this look \"bad\" in a sense, but it is a performance hit.\r\n\r\nSo what's the usual option?  To debounce the `input` event, but oh oh!  I'm not handling the input event.  I am using value binding.  I have no place to debounce.\r\n\r\n### Describe the proposed solution\r\n\r\nIt would be ideal if Svelte could provide debouncing on binding.  Something like this:\r\n\r\n```html\r\n<input type=\"number\" bind:value|debounced={variable} /> <!-- default debounce time.  400ms? -->\r\n<input type=\"number\" bind:value|debounced={[variable, debounceTime]} />\r\n```\r\n\r\nIn the example, `variable` is the bound variable, while `debouncedTime` is a variable containing the number of milliseconds to debounce the binding event.\r\n\r\n### Alternatives considered\r\n\r\n### Drop Binding\r\n\r\nThe obvious one:  Renounce the excellent Svelte feature and instead handle the `input` event in the \"classic\" way.\r\n\r\n### Bind to another Variable.\r\n\r\nIn the example REPL, the bound variable is `countFrom`.  This is passed to the Timer component, which triggers the timer.  In order to debounce this, bind the input field to a new variable, and then use reactivity (`$:`) to start the debounce.  On timeout, the variable `countFrom` would be updated.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-09-03T06:24:27Z","created_at":"2023-09-03T06:23:18Z","creator_user_login":"webJose"}
{"number":9172,"title":"Memory leak and unresponsive app when using bind and key block on same variable","body":"### Describe the bug\n\nIs this expected behaviour? There is no reason to use bind within key block like this, I accidentally used it, this leads to app being completely unresponsive and memory completely fills within minutes.\n\n### Reproduction\n\napp.svelte:\r\n```\r\n<script>\r\n  import Comp from \"./component.svelte\"\r\n  let arr=Array(10).fill(0);\r\n</script>\r\n\r\n{#key arr}\r\n    <Comp bind:arr />\r\n{/key}\r\n```\r\ncomponent.svelte:\r\n```\r\n<script>\r\n    export let arr;\r\n<script>\r\n{arr.length}\r\n```\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```Shell\nBinaries:\r\n    Node: 20.5.1 - /usr/bin/node\r\n    npm: 9.8.1 - /usr/bin/npm\r\n  Browsers:\r\n    Chromium: 115.0.5790.102\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^2.0.0 => 2.1.0 \r\n    @sveltejs/kit: ^1.20.4 => 1.24.0 \r\n    svelte: ^4.0.5 => 4.2.0 \r\n    vite: ^4.4.2 => 4.4.9\n```\n\n\n### Severity\n\nannoyance\n\n### Additional Information\n\n_No response_","state":"open","updated_at":"2023-09-02T16:28:07Z","created_at":"2023-09-02T15:31:18Z","creator_user_login":"sriramk1n1"}
{"number":9168,"title":"Reactive may not work on nested component slots","body":"### Describe the bug\n\nThere are cases where reactives do not work properly inside the slots of nested components.\n\n### Reproduction\n\nReproduced REPL:\r\nhttps://svelte.dev/repl/82ea195768214f75b408409b12e26e01?version=4.2.0\r\n\r\nApp.svelte has an object \"data\" containing propA, propB, and propC.\r\nvalueD is updated from propA and propC with reactive declarations.\r\n\r\nComponentA.svelte receives propA and propB from App.svelte and propB is bidirectionally bind.\r\nComponentA.svelte updates propB from propA.\r\n\r\nComponentB.svelte has ComponentC.svelte and has a slot in it.\r\n\r\nComponentC.svelte simply has a slot.\r\n\r\nNow, the valueD placed in the slot of ComponentC is correctly updated as propA is updated.\r\nHowever, the valueD placed in the slot of ComponentB does not respond when propA is updated.\r\n\r\nThis reproduction is as simplified as possible, although it occurred in a much more complex situation in my project.\n\n### Logs\n\n```shell\nno repl console log\n```\n\n\n### System Info\n\n```shell\nrepl system info?\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-09-01T10:58:15Z","created_at":"2023-09-01T03:17:33Z","creator_user_login":"sinbino"}
{"number":9167,"title":"(Type) Comments in {:then } ","body":"### Describe the problem\r\n\r\nCurrently, when using typescript and having a promise that returns an object.\r\n\r\nWhen using `{:then result}` the result itself looses all known properties. \r\n\r\n### Describe the proposed solution\r\n\r\nCurrently (in WebStorm, haven't tested it yet in VSCode) if you add a type comment before the result variable you'll get the code completion and types of that result\r\n\r\nExample\r\n\r\n`{:then /** TResult */ result  }`\r\n\r\nBut, writing that, the compiler just stops with `Expected identifier or destructure pattern`\r\n\r\n### Alternatives considered\r\n\r\nAlternatives would be to extend the Svelte LSP to get that automatically but I guess that takes more time so the first solution might be a quick win\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-09-01T00:00:35Z","created_at":"2023-08-31T23:59:52Z","creator_user_login":"negue"}
{"number":9163,"title":"Support <svelte:head> with nested Component with <svelte:head> in SSR","body":"### Describe the problem\n\nWhen a parent component has a `<svelte:head>` tag and a nested component inside it with a also a `<svelte:head>`, the content of the head tag of the nested component is stripped out in SSR.\r\n\r\nExample:\r\n\r\n**Parent component**\r\n```javascript\r\n<script>\r\n\timport ChildNested from './ChildNested.svelte'\r\n</script>\r\n\r\n<svelte:head> _PREFIX_ <ChildNested /> _SUFFIX_</svelte:head>\r\n```\r\n\r\n**Child component**\r\n```javascript\r\n<svelte:head>_NESTED_HEAD_</svelte:head>\r\n_NESTED_BODY_\r\n```\r\n\r\nSimple reproduction [REPL](https://svelte.dev/repl/3a0d30d3a33248aea94d47be8afcd0f0?version=4.2.0), you can see the generated code for SSR at JS output tab.\r\n\r\nPseudo equivalent generated code to understand the problem within the browser console:\r\n\r\n```javascript\r\nconst $$result = { head: '' };\r\n\r\nfunction $$render(result) {\r\n    result.head += '_NESTED_HEAD_';\r\n    return '_NESTED_BODY_';\r\n}\r\n\r\n$$result.head += `_PREFIX_ ${$$render($$result)} _SUFFIX_`;\r\n\r\nconsole.log($$result.head); // Logs \"_PREFIX_ _NESTED_BODY_  _SUFFIX_\"\r\n```\r\n\r\n[Related issues / discussions](https://github.com/sveltejs/svelte/pull/7745#discussion_r937249643).\r\n\n\n### Describe the proposed solution\n\nAt `$$render` if parent is a `svelte:head` return head content as body.\n\n### Alternatives considered\n\nMaybe changing what `create_ssr_component` returns (return both head and body) or separate head and body rendering in different statements.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-09-01T03:54:45Z","created_at":"2023-08-31T12:56:51Z","creator_user_login":"maxiruani"}
{"number":9161,"title":"TypeScript unions used for $$Props are not checked correctly when the component is used","body":"### Describe the bug\n\nGiven the following two components...\r\n\r\n`Test.svelte`\r\n```svelte\r\n<script lang=\"ts\">\r\n  type $$Props = {\r\n    a: string;\r\n  } | {\r\n    a: number;\r\n    b: number;\r\n  }\r\n</script>\r\n\r\n<pre><code>{JSON.stringify($$props, null, 2)}</code></pre>\r\n```\r\n\r\n`TestWrapper.svelte`\r\n```svelte\r\n<script lang=\"ts\">\r\n  import Test from \"./Test.svelte\";\r\n</script>\r\n\r\n<Test a=\"abc\" b={1} />\r\n```\r\n\r\n...running `svelte-check ./TestWrapper.svelte` says the following:\r\n\r\n```\r\nsvelte-check found 0 errors and 0 warnings\r\n```\r\n\r\nThe problem is that this should be a type error - the props should _either_ be `{ a: string }` or `{ a: number; b: number }`, but _not_ `{ a: string; b: number }`.\n\n### Reproduction\n\nTo reproduce, clone [my reproduction repo](https://github.com/Benaiah/repro-svelte-prop-types-bug) and then run `npm run check`.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.4.1\r\n    CPU: (8) arm64 Apple M1 Pro\r\n    Memory: 188.14 MB / 32.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.12.1 - ~/.nvm/versions/node/v18.12.1/bin/node\r\n    Yarn: 1.22.19 - ~/.nvm/versions/node/v18.12.1/bin/yarn\r\n    npm: 9.7.1 - ~/.nvm/versions/node/v18.12.1/bin/npm\r\n    pnpm: 7.5.2 - ~/.nvm/versions/node/v18.12.1/bin/pnpm\r\n  Browsers:\r\n    Safari: 16.5.2\r\n  npmPackages:\r\n    svelte: ^4.0.5 => 4.2.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-09-01T03:54:55Z","created_at":"2023-08-30T21:00:37Z","creator_user_login":"Benaiah"}
{"number":9158,"title":"docs: \"What's new in Svelte\" September newsletter","body":"Let me know if I missed anything!","state":"open","updated_at":"2023-08-31T19:51:40Z","created_at":"2023-08-30T02:15:06Z","creator_user_login":"DreaminDani"}
{"number":9155,"title":"Better HTMLDialogElement support for transitions","body":"### Describe the problem\n\nI've been trying to implement HTMLDialogElements with their native APIs. Adding transitions was a frustrating experience.\r\n\r\n[This is a minimal working example, without transitions](https://svelte.dev/repl/0cd212b524b94dc78fbd7a50134ae2b3?version=4.2.0). It uses no Svelte, only the native [HTMLDialogElement API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement): ` showModal()` displays the modal with its backdrop. `close()` and `cancel()` close the dialog. The element's methods also take care of all ARIA roles, focus and other accessibility tools. The backdrop can be styled with the dialog' s `::backdrop` pseudo-class.\r\n\r\n#### Problem\r\n - It cannot use Svelte transition or easing because `in:`, `out:`, `fade:`, etc., all rely on the addition/removal from the DOM. This is incompatible to the HTMLDialogElement API, as the element must remain in the DOM at all times, or you must do a full implementation, which defeats the purpose of the feature-rich HTMLDialogElement.\n\n### Describe the proposed solution\n\nIf Svelte would support transitions of elements between the `display:none` and other display states, and also apply them to the backdrop pseudo-class, most if not all of these problems would be solved (including the problems with the alternative solutions below)\r\n\r\n\n\n### Alternatives considered\n\n[This is a minimal example fo the workaround](https://svelte.dev/repl/2090b78756d24e05b2bd5895aa1539cd?version=4.2.0). By using an if-condition we remove the HTMLDialogElement from the DOM. An additional variable (e.g., `visible`) is used to remember if the dialogs visibility. We also have to implement a custom `showModal()` and `closeModal()` that changes not only the dialogs state, but also the independently managed visibility. Then we have to export the custom `showModal()` to the parent, resulting in an additional variable. All together that is quite a jump in complexity. Now we can add a transition to the dialog and it will work, because the element is actually removed and re-added to the DOM.\r\n\r\n#### Problem\r\n- The transition is applied only to the modal, not to the backdrop.\r\n- The transition is janky. It is not applied correctly every time. Sometimes the transition is applied twice or more times resulting in flickering.\r\n- Enormous complexity requiring manual implementations of some native HTMLDialogFeatures.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-09-01T09:59:08Z","created_at":"2023-08-28T22:13:54Z","creator_user_login":"danielniccoli"}
{"number":9149,"title":"Support `<template>` as custom element root for class directives, event handlers etc","body":"### Describe the bug\n\nWith a Svelte custom element, if you export variables and then bind them to attributes on a root `<template>` tag, then those attributes are automatically reflected to the host element (i.e. this works):\r\n\r\n```svelte\r\n<svelte:options customElement={{ tag: \"my-tab\" }} />\r\n\r\n<script>\r\n  export let role = \"tab\"\r\n</script>\r\n\r\n<template {role}>\r\n  <svelte:element this=\"slot\" />\r\n</template>\r\n```\r\n\r\nThis results in...\r\n\r\n```html\r\n<my-tab role=\"tab\">The \"[role='tab']\" bit is automatically reflected.</my-tab>\r\n```\r\n\r\nIf you try to leverage this binding behavior further in ways that follow conventional Svelte patterns, the consistency ends there.\n\n### Reproduction\n\nJudging from the initial binding behavior, I would then expect all of the following to also work with the root `<template>` element.\r\n\r\n```svelte\r\n<svelte:options customElement={{ tag: \"my-tab\", props: {\r\n  expanded: { reflect: true, type: 'Boolean' }\r\n}}} />\r\n\r\n<script>\r\n  export let expanded = false;\r\n\r\n  function onClick() {\r\n    expanded = !expanded;\r\n    console.log(\"my-tab was clicked!\");\r\n  }\r\n</script>\r\n\r\n<template\r\n  {expanded}\r\n  class:expanded\r\n  aria-expanded={expanded ? \"true\" : undefined}\r\n  on:click={() => expanded = !expanded}\r\n  on:click={onClick}\r\n  >\r\n  <svelte:element this=\"slot\" />\r\n</template>\r\n```\r\n\r\nThe only one that *did* work for me was the first feature (the `{expanded}` bit):\r\n\r\n- No class named \"expanded\" was added or removed from the `my-tab` element's `class` attribute in response to state changes.\r\n- Attempting to do so with attributes that include dashes, like `aria-expanded`, merely has no effect whatsoever.\r\n- Attempting to bind an inline event handler actually resulted in some sort of parse error in my experience. All text after the `=>` just ends becoming part of a text node prepended to the element's shadow DOM (in this case, it would contain `expanded = !expanded}>`, including the curly brace and angled bracket). I could only fix it by switching to a direct function reference; however...\r\n- Attempting to bind an event handler with a direct function reference never actually triggers the event handler.\r\n\r\nAs it stands, I am having to fetch a reference to the host element via the new `extends` feature and do a bunch of reactive statements to handle the desired sync operations, but it would be ideal if I could make use of the declarative and succinct Svelte syntax I'm used to.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (20) x64 13th Gen Intel(R) Core(TM) i9-13900H\r\n    Memory: 16.82 GB / 63.66 GB\r\n  Binaries:\r\n    Node: 20.2.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - C:\\Program Files\\nodejs\\yarn.CMD\r\n    npm: 9.6.6 - C:\\Program Files\\nodejs\\npm.CMD\r\n    pnpm: 8.6.9 - C:\\Program Files\\nodejs\\pnpm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (115.0.1901.203)\r\n    Internet Explorer: 11.0.22000.120\r\n  npmPackages:\r\n    svelte: ^4.0.0 => 4.1.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-28T09:36:39Z","created_at":"2023-08-28T04:56:14Z","creator_user_login":"willnationsdev"}
{"number":9147,"title":"Enhance the slide transition to support sliding from the right or the bottom","body":"### Describe the problem\r\n\r\nWhile working in a Proof of Concept for my company in the REPL, I wanted to show how informative animations are for the end user, which is something not easily accomplished with React (the company's choice).\r\n\r\nI have the UI diagramed below:\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/25540842/9973969c-e604-44bc-8bff-0d6fda3adaca)\r\n\r\nAs expained in the image, the top box slides from left to right.  Now, if a new operation is started by interacting with the lower boxes, I wanted the top box to now slide to the right, and then a new box would appear as before:  Sliding from the left:\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/25540842/fa62393a-788c-44aa-9b40-8bae1f413f64)\r\n\r\nThe current implementation of the `slide()` transition, as far as I can tell, is incapable of giving me this behavior because:\r\n\r\n1. You can only select the axis (`x` or `y`), but not which side of it to anchor:  It is always **left** for `x` and **top** for `y`.\r\n2. While the transition takes place, the space is not shared between the outgoing and the incoming elements being transitioned.\r\n\r\n### Describe the proposed solution\r\n\r\nIn my REPL, I quickly made a new `slide()` function and applied the following:\r\n\r\n1. The `axis` values can be: `x`, `-x`, `y`, `-y`, `+x`, `+y`.  The `+` versions are the same as the original versions; the `-` versions anchor the animation to the right or to the bottom.\r\n2. I managed to solve the space issue by setting `position: absolute` to the outgoing element.  I also added a small delay so there will be blank space between the outgoing and the incoming elements.\r\n\r\nThis is the quick-n-dirty code I made:\r\n\r\n```js\r\n\tfunction slideEx(node, { delay = 0, duration = 400, easing = undefined, axis = 'y' }) {\r\n\t\tconst o = getComputedStyle(node).position;\r\n\t\tconst invert = axis[0] === '-';\r\n\t\taxis = axis.length > 1 ? axis[1] : axis;\r\n\t\tlet anchor;\r\n\t\tif (axis === 'x') {\r\n\t\t\tanchor = invert ? 'right' : 'left';\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanchor = invert ? 'bottom' : 'top';\r\n\t\t}\r\n\t\tconst slideTo = slide(node, {\r\n\t\t\tdelay,\r\n\t\t\tduration,\r\n\t\t\teasing,\r\n\t\t\taxis\r\n\t\t});\r\n\t\tlet finalT;\r\n\t\treturn {\r\n\t\t\tdelay,\r\n\t\t\tduration,\r\n\t\t\tcss: (t, u) => {\r\n\t\t\t\tif (!finalT) {\r\n\t\t\t\t\tnode.style.position = 'absolute';\r\n\t\t\t\t\tnode.style[anchor] = 0;\r\n\t\t\t\t\tfinalT = t === 0 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (t === finalT) {\r\n\t\t\t\t\tnode.style.position = o;\r\n\t\t\t\t}\r\n\t\t\t\treturn slideTo.css(t, u);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n```\r\n\r\nIn light of the fact that the `position` thing was only needed in the outro, I applied `in:slide` and `out:slideEx`.  I suppose that, for this to work, `slide()` would require an extra option to only set `position` on-demand.\r\n\r\n**NOTE**:  The code is not perfect.  Setting `position` has undesired effects.  For example:  By changing my axis to `Y`, absolute positioning brings the element all the way down to the bottom of the page.  I am no UI expert (I'm a back-end developer), so I think I should let this in the hands of people that know better than me.\r\n\r\n### Alternatives considered\r\n\r\nSince I was able to make it work, I did not explore alternatives.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-09-01T04:00:24Z","created_at":"2023-08-27T20:39:13Z","creator_user_login":"webJose"}
{"number":9146,"title":"Clarify the behaviour of how the `bind:` directive can cause dependencies to be invalidated recursively","body":"### Describe the problem\n\nUsing the `bind:` directive can cause reactive dependencies to be invalidated recursively:\r\n\r\n```svelte\r\n<script>\r\n\t$:items = [{enabled:true,value:1},{enabled:true,value:2},{enabled:true,value:3}];\r\n\t$:filtered = items.filter(item=>item.enabled);\r\n</script>\r\n{#each filtered as item(item.value)}\r\n\t<div>\r\n\t\t<input type=\"checkbox\" bind:checked={item.enabled} />\r\n\t\t{item.value}\r\n\t</div>\r\n{/each}\r\n```\r\n\r\nIn this example, when disabling an item, `items` is invalidated, causing `filtered` to be recalculated, and so the interface updates correctly. Without this behaviour, the data binding would have to be done manually like this:\r\n\r\n```svelte\r\n\t\t<input type=\"checkbox\" checked={item.enabled} on:input={e=>{\r\n\t\t\titem.enabled = e.target.checked;\r\n\t\t\titems = items;\r\n\t\t}}>\r\n```\r\n\r\nThis behaviour was added with commit https://github.com/tanhauhau/svelte/commit/562f23a87bb8412d1a81117de4ac1ee1e611ffb6 (in 2019), to fix the issue\r\nhttps://github.com/sveltejs/svelte/issues/2444 where we want to `bind:` to a filtered list, and have the original list be automatically invalidated.\r\n\r\nAs far as I am aware, this behaviour is not documented in the Svelte tutorial or the Svelte docs, and so it is hard to know if it is behaving precisely as intended in other situations.\r\n\r\nTo analyse the behaviour, the simplest example that I could create is the following:\r\n\r\n```svelte\r\n<script>\r\n\t$:a = {value:2};\r\n\t$:b = a; \r\n</script>\r\n\r\n<div>b = <input bind:value={b.value} /></div>\r\n<div>a.value = {a.value}</div>\r\n```\r\n\r\nWhen `b.value` is altered through the `bind:value` statement, `a` is invalidated and so the displayed value of `a.value` is updated. This is working as intended.\r\n\r\nUnexpectedly though, the invalidation will not occur if `a` is a var:\r\n\r\n```svelte\r\nvar a = {value:2};\r\n```\r\n\r\nA more surprising aspect of this, is that this type of dependency invalidation behaviour can occur without using the `bind:` directive at all. This is a trivial example:\r\n\r\n```svelte\r\n<script>\r\n\t$:a = {value:2}; \r\n\t$:b = a; \r\n\t$:console.log(b);\r\n\r\n\tfunction change_b(){\r\n\t\tb.value++;\r\n\t\tb = b;\r\n\t}\r\n</script>\r\n\r\n<button on:click={change_b}>Change b</button>\r\n<div>a.value = {a.value}</div>\r\n```\r\n\r\nWhen `b.value` is altered, the displayed value of `a.value` is updated. This behaviour might be desired, but I don't think it would be generally expected, and again I can't find it documented anywhere.\r\n\r\nThe requirements are quite specific though, and appear to be as follows:\r\n\r\n1. `a` must be a reactively declared variable, or an export prop (not a regular var)\r\n2. `a` must be an object or array\r\n3. `b` must be a reactively declared variable, with a dependency on `a`\r\n4. `b` must be in another reactive statement, or be added to the template (so that it can be invalidated, I think)\r\n5. `b` must then be precisely self-assigned at some point (note https://github.com/sveltejs/svelte/pull/9089 to make this less fragile)\r\n\r\nIt seems likely that this behaviour should not occur at all though, since the commit appears to have been designed to \r\nfix an issue that is specifically related to `bind:`.\r\n\r\nBut, if the behaviour is intended, then I would expect it to occur under more general conditions. Specifically:\r\n\r\n1. It should occur if `a` is a regular var\r\n2. It should occur without `b` having to be in a reactive statement, or in the template\r\n3. It should occur without the additional self-assignment\r\n\r\nThese changes would allow the following code to work:\r\n\r\n```svelte\r\n<script>\r\n\tlet a = {value:2};\r\n\t$:b = a; \r\n\r\n\tfunction change_b(){\r\n\t\tb.value++;\r\n\t}\r\n</script>\r\n\r\n<button on:click={change_b}>Change b</button>\r\n<div>a.value = {a.value}</div>\r\n```\r\n\r\nI think that this might not be desired though. `bind:` is allowed to break the rules a bit here, but I'm much less certain that other code should be allowed to do the same.\n\n### Describe the proposed solution\n\nFirstly, I think that it should be agreed on what the behaviour should be, both when it occurs with `bind:`, and also when it occurs without `bind:`.\r\n\r\nThen, implement any appropriate changes to the behaviour, and in either case add documentation.\n\n### Alternatives considered\n\nDon't modify reactively declared variables, so that this type of behaviour is never encountered. \r\n\r\nI find thinking of reactively declared variables as being read only a bit simpler to reason about anyway, but it could just be that dependency invalidation doesn't occur _enough_ for it to fit nicely into my mental model of how Svelte works.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-09-01T03:55:58Z","created_at":"2023-08-27T15:00:45Z","creator_user_login":"robertadamsonsmith"}
{"number":9145,"title":"Passing optional props causes all `$set` calls to require them (TS)","body":"### Describe the bug\r\n\r\nWhen a component with only optional props is instantiated without any props, this bug does not manifest. However, when specifying a component with some of its optional props, e.g. `new Component({props: {Beta: 'Beta'}})`, TypeScript now becomes aware that *Component* has a prop called *Beta*, and any and all `$set` calls will suddenly require `Beta` to be present, otherwise a fatal TS compilation error is thrown:\r\n\r\n>TS2345: Argument of type '{ Charlie: string; }' is not assignable to parameter of type 'Partial<{ Beta: string }>'.\r\n  Object literal may only specify known properties, and 'Charlie' does not exist in type 'Partial<{ Beta: string; }>'.\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<!-- Component.svelte -->\r\n<script lang=\"ts\">\r\n    export let Beta: string|null = null;\r\n    export let Charlie: string|null = null;\r\n</script>\r\n```\r\n\r\n```ts\r\n// My.ts\r\nconst c = new Component({\r\n    target: Alfa,\r\n    props: {\r\n        Beta: 'Beta',\r\n    },\r\n});\r\n\r\nc.$set({\r\n    // TS2345!\r\n    Charlie: 'Charlie',\r\n});\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```\r\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\r\n    Memory: 9.99 GB / 31.94 GB\r\n  Binaries:\r\n    Node: 18.14.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.3.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 116.0.5845.111\r\n    Edge: Spartan (44.19041.1266.0), Chromium (116.0.1938.54)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^4.2.0 => 4.2.0\r\n    webpack: ^5.11.0 => 5.88.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2023-09-01T03:56:08Z","created_at":"2023-08-26T19:26:47Z","creator_user_login":"Bilge"}
{"number":9142,"title":"A11y warnings do not account for destructured attributes.","body":"### Describe the bug\r\n\r\nI haven't tested with different cases yet, but assigning an anchor tag's `href` using a destructured object does not appear to mitigate missing attribute warnings.\r\n\r\n### Reproduction\r\n\r\nFor illustration:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  const attributes = {\r\n    href: '/about'\r\n  }\r\n</script>\r\n\r\n<nav>\r\n  <a {...attributes}>About</a> <!-- A11y: <a> element should have an href attributesvelte(a11y-missing-attribute) -->\r\n</nav>\r\n```\r\n\r\nCases like the above will quickly be met when using an approach similar to melt-ui's builders to manage an element's attributes. For example, in my app I have a series of small i18n helpers that localize anchor `hrefs` (prepending the locale param) and specify their corresponding `hreflang` attribute:\r\n\r\n```svelte\r\n<nav>\r\n  <a {...$i18nlink('/about')}>{t('about')}</a> <!-- A11y: <a> element should have an href attributesvelte(a11y-missing-attribute) -->\r\n  <a href={$i18nhref('/projects')} hreflang={$page.data.locale}>{t('projects')}</a>\r\n</nav>\r\n```\r\n\r\nwhere `i18nlink` is a derived store returning an object `{href: string, hreflang: string}`.\r\n\r\n### Expected behaviour\r\n\r\nIf destructured object used for element attributes contains expected attribute keys (for example `href` on an anchor tag), omit warning.\r\n\r\n### System Info\r\n\r\n- OS: MacOS\r\n- IDE: VSCode\r\n\r\n\r\n### Which package is the issue about?\r\n\r\nSvelte for VS Code extension\r\n\r\n### Additional Information, eg. Screenshots\r\n\r\n_No response_","state":"open","updated_at":"2023-08-24T18:48:34Z","created_at":"2023-08-24T16:15:36Z","creator_user_login":"iolyd"}
{"number":9141,"title":"Svelte spring store continuously adding values when switching tabs ","body":"### Describe the bug\n\nWhen a spring animation is in progress and the user switches tabs in Chrome, an unexpected behavior occurs where the spring value is continuously applied to the associated element. Subsequently, upon returning to the original page, the spring animation plays back at an accelerated pace. For visual reference, I have attached a video demonstrating this issue.\n\n### Reproduction\n\nhttps://svelte.dev/repl/6807679be5754699814ba39af6c6c9be?version=4.2.0\r\n\r\nhttps://github.com/sveltejs/svelte/assets/24212703/b498dd41-2cb5-4ea3-b7e5-65484164adf2\r\n\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.4\r\n    CPU: (8) arm64 Apple M1 Pro\r\n    Memory: 181.75 MB / 16.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.16.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /opt/homebrew/bin/yarn\r\n    npm: 8.11.0 - /usr/local/bin/npm\r\n    pnpm: 7.17.0 - ~/Library/pnpm/pnpm\r\n  Browsers:\r\n    Chrome: 116.0.5845.110\r\n    Edge: 114.0.1823.55\r\n    Safari: 16.5\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-24T15:43:31Z","created_at":"2023-08-24T09:35:33Z","creator_user_login":"eriksachse"}
{"number":9137,"title":"ReferenceError when running SSR version of a component","body":"### Describe the bug\r\n\r\nThe following component:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport MyComponent from './MyComponent.svelte';\r\n</script>\r\n\r\n<MyComponent>\r\n<slot name=\"otherComponentSlot\" slot=\"myComponentSlot\" let:props {...props}></slot>\r\n</MyComponent>\r\n```\r\n\r\nis transformed into the following JS when using SSR:\r\n\r\n```js\r\n/* OtherComponent.svelte generated by Svelte v4.2.0 */\r\nimport { create_ssr_component, validate_component } from \"svelte/internal\";\r\n\r\nimport MyComponent from './MyComponent.svelte';\r\n\r\nconst OtherComponent = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\treturn `${validate_component(MyComponent, \"MyComponent\").$$render($$result, {}, {}, {\r\n\t\tmyComponentSlot: () => {\r\n\t\t\treturn `${slots.otherComponentSlot\r\n\t\t\t? slots.otherComponentSlot({ slot: \"myComponentSlot\", ...props })\r\n\t\t\t: ``}`;\r\n\t\t}\r\n\t})}`;\r\n});\r\n\r\nexport default OtherComponent;\r\n```\r\n\r\nNote that the `prop` variable used in `myComponentSlot` is not defined anywhere, which results in a ReferenceError at runtime.\r\nWhen using normal (browser not SSR) compilation, the component works fine as expected.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/e9dad6e75c8041c1be79c2e07a82fc51?version=4.2.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte v4.2.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-23T15:02:28Z","created_at":"2023-08-23T14:35:49Z","creator_user_login":"divdavem"}
{"number":9133,"title":"Ability to change styling of elements inside other component's `<slot>` ","body":"### Describe the bug\r\n\r\nScoped styling allows to encapsulate styling for the component it's written in.\r\nHowever, if you use a `<slot>` in a Component `A`, you then use it in some other Component `B` and fill some elements inside the it, you're able to change how those elements are being rendered in the final output from the Component `B`.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/0111a06f3d4d435f8719e01a09ce0401?version=4.2.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 6.4 Pop!_OS 22.04 LTS\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-11370H @ 3.30GHz\r\n    Memory: 4.93 GB / 15.30 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 18.17.1 - /usr/local/bin/node\r\n    npm: 9.6.7 - /usr/local/bin/npm\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-21T17:17:39Z","created_at":"2023-08-21T17:15:22Z","creator_user_login":"LunaeSomnia"}
{"number":9130,"title":"Make TS Discriminating Unions Props Possible","body":"### Describe the problem\r\n\r\n```ts\r\n<script context=\"module\" lang=\"ts\">\r\n  export type Props = {\r\n    name: string;\r\n  } & (\r\n    | { iconType?: 'default'; icon?: typeof SvelteComponent }\r\n    | {\r\n        iconType?: 'featured';\r\n        icon?: typeof SvelteComponent;\r\n        featuredIconProps?: FeaturedIconProps;\r\n      }\r\n  );\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n  type $$Props = Props;\r\n\r\n  export let name: $$Props['name'];\r\n  export let iconType: $$Props['iconType'] = undefined;\r\n  export let icon: $$Props['icon'] = undefined;\r\n</script>\r\n\r\n{#if iconType === 'default'}\r\n  <svelte:component this={icon} />\r\n{:else if iconType === 'featured'}\r\n  <FeaturedIcon {icon} {...featuredIconProps}  />\r\n{/if}\r\n```\r\nIt doesn't seem possible to access unique props from discriminated unions\r\n\r\n### Describe the proposed solution\r\n\r\nAttempted to access a unique prop.\r\n\r\n```ts\r\n<script lang=\"ts\">\r\n  let props: $$Props;\r\n  if (iconType === 'featured') {\r\n    props. // featuredIconProps doesn't show up.\r\n  }\r\n</script>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nNone\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2023-08-27T17:29:42Z","created_at":"2023-08-21T12:03:27Z","creator_user_login":"arkmech"}
{"number":9129,"title":"Inconsistencies with exclude_internal_props ($-prefixed props disappear, $$slots and $$scope bleed through to initial mount)","body":"### Describe the bug\r\n\r\nIf you use `$$props` (or `$$restProps`) in a reactive statement/block then svelte uses `exclude_internal_props` to exclude internal stuff like `$$slots` and `$$scope`. However, there are two issues with this:\r\n\r\n1. This only seems to apply to updates, on the initial mount `$$props` includes everything.\r\n2. If the application tries to use a prop name like `$x` then the prop doesn't show up in `$$props` and `$$restProps` (except on the initial mount).\r\n\r\nIdeally it would seem that svelte should be passing internal stuff around as a separate argument so that it's not mixed with the props in the first place. That would avoid having to run this exclude at all, which would fix this confusion and might help with some of the performance implications of using `$$props`?\r\n\r\n### Reproduction\r\n\r\nPlease see https://svelte.dev/repl/42b1cdf4da0243c19d43d6910cc7017b?version=4.2.0.\r\n\r\nNotice that `initialProps` includes `$x`, `$$slots` and `$$scope`, but `updatedProps` and a direct render of `$$props` is empty.\r\n\r\n### Logs\r\n\r\n```shell\r\nN/A (see REPL).\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nN/A. See REPL example. Tested with version=3.55.1 and version=4.2.0 (same results).\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-21T11:45:26Z","created_at":"2023-08-21T11:44:09Z","creator_user_login":"SystemParadox"}
{"number":9128,"title":"`style` being spread via `$$restProps` is reset by `bind:value` in `<textarea>`","body":"### Describe the bug\n\nWhen a `style` is set on a component and the style of the element is being modified by `resize` (which sets `width`/`height`), those style changes can be lost on component update of due to another property, even though the passed in `style` did not actually change (e.g. if it is set to be a constant value).\r\n\r\n(A workaround is to export a `style` property explicitly, so it is not part of the spread attributes.)\n\n### Reproduction\n\n```svelte\r\n<!-- TextArea.svelte -->\r\n<script>\r\n\texport let value = '';\r\n</script>\r\n\r\n<textarea bind:value {...$$restProps} />\r\n```\r\n```svelte\r\n<TextArea bind:value={someValue} style=\"width: 100%\" />\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/68e14743e4044b2aaf1746f08b144933?version=4.2.0)\r\n\r\nSteps:\r\n- Resize textarea\r\n- Type into textarea\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz\r\n    Memory: 7.14 GB / 31.69 GB\r\n  Binaries:\r\n    Node: 18.16.0 - ~\\AppData\\Local\\Programs\\NodeJS\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Local\\Programs\\NodeJS\\yarn.CMD\r\n    npm: 9.5.1 - ~\\AppData\\Local\\Programs\\NodeJS\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (115.0.1901.203)\r\n    Internet Explorer: 11.0.22000.120\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-21T08:55:14Z","created_at":"2023-08-21T08:23:58Z","creator_user_login":"brunnerh"}
{"number":9127,"title":"Consider excluding `::view-transition-` from CSS scoping logic","body":"### Describe the problem\n\nFrom https://github.com/sveltejs/kit/pull/9605:\r\n\r\n> Note that we need to add the :root selector before the pseudo-element, otherwise Svelte will scope it to the component.\r\n\r\nI'm not that familiar with these APIs or whether this is a good idea, but wanted to note it here so that we don't lose track of it\n\n### Describe the proposed solution\n\nAlso from https://github.com/sveltejs/kit/pull/9605:\r\n\r\n> We may want to omit ::view-transition-{old,new,group} from the CSS scoping logic in Svelte 4, so that idiomatic uses of the view transitions API are covered.\n\n### Alternatives considered\n\nStatus quo of adding the :root selector before the pseudo-element\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-08-21T04:06:15Z","created_at":"2023-08-21T04:06:11Z","creator_user_login":"benmccann"}
{"number":9126,"title":"fix: prevent animation keyframes being deleted before animation execution end","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n\r\nFixes: sveltejs/kit#2044\r\n\r\nUse the CSSAnimation object to detect when an animation is really finished and avoid the keyframes being deleted ahead of time causing the animation to abort. (The issue is noticeable only for \"in\" transitions that run right after page load)","state":"open","updated_at":"2023-08-20T23:57:15Z","created_at":"2023-08-20T23:57:13Z","creator_user_login":"raythurnevoid"}
{"number":9125,"title":"fix: spreading attributes on option value attribute get's replaced by option's inner text","body":"fixes #9107\r\nApart from the problem with the option the same happens with the textarea.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-20T18:35:06Z","created_at":"2023-08-20T18:35:03Z","creator_user_login":"teobgeno"}
{"number":9122,"title":"fix: do not add module declared variables as dependencies","body":"closes https://github.com/sveltejs/svelte/issues/5943\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-20T16:02:53Z","created_at":"2023-08-20T12:11:56Z","creator_user_login":"gtm-nayan"}
{"number":9121,"title":"Version Packages","body":"This PR was opened by the [Changesets release](https://github.com/changesets/action) GitHub action. When you're ready to do a release, you can merge this and the packages will be published to npm automatically. If you're not ready to do a release yet, that's fine, whenever you add more changesets to master, this PR will be updated.\n\n\n# Releases\n## svelte@4.2.1\n\n### Patch Changes\n\n-   fix: css sourcemap generation with unicode filenames ([#9120](https://github.com/sveltejs/svelte/pull/9120))\n\n-   fix: head duplication when binding is present ([#9124](https://github.com/sveltejs/svelte/pull/9124))\n\n-   fix: take custom attribute name into account when reflecting property ([#9140](https://github.com/sveltejs/svelte/pull/9140))\n","state":"open","updated_at":"2023-08-31T15:37:18Z","created_at":"2023-08-20T10:35:03Z","creator_user_login":"github-actions[bot]"}
{"number":9118,"title":"chore: document init parameters","body":"closes #7200\r\n\r\nThe internal types aren't exposed as a public API and shouldn't be relied on but figured it'd be nice to document these anyway just so no one forgets what these are when we context switch to the next major\r\n\r\nA few left to do still as I couldn't quite describe them, feel free to make suggestions as review comments or push\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-24T18:45:46Z","created_at":"2023-08-19T14:04:19Z","creator_user_login":"gtm-nayan"}
{"number":9116,"title":"site: quicker redirects to appease the SEO deities","body":"pls work\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-24T18:44:50Z","created_at":"2023-08-18T17:50:43Z","creator_user_login":"gtm-nayan"}
{"number":9112,"title":"fix: svelte:element with dynamic this and spread attributes throws error","body":"fixes #9092\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-19T03:55:45Z","created_at":"2023-08-17T17:33:17Z","creator_user_login":"teobgeno"}
{"number":9108,"title":"docs: remove typescript FAQ","body":"This FAQ seems outdated now that we have https://svelte.dev/docs/typescript. @PuruVJ do we have any redirect functionality setup that we can use to point https://svelte.dev/docs/faq#what-about-typescript-support to the new location at https://svelte.dev/docs/typescript? I know you recently redirected some FAQ links on kit.svelte.dev, but I couldn't remember if we were doing any here yet.","state":"open","updated_at":"2023-08-25T15:33:27Z","created_at":"2023-08-17T03:45:17Z","creator_user_login":"benmccann"}
{"number":9107,"title":"Spreading attributes (containing value) on <option>, value attribute get's replaced by option's inner text","body":"### Describe the bug\n\nSpreading attributes with a `value` attribute on `<option>` elements get's replaced with the option's inner text\r\n\r\nso the following \r\n```svelte\r\n<select>\r\n\t<option {...{ value: 'sms', class: 'option' }}>SMS</option>\r\n\t<option {...{ value: 'email', class: 'option' }}>E-mail</option>\r\n\t<option {...{ value: 'letter', class: 'option' }}>Letter</option>\r\n</select>\r\n```\r\n\r\nrenders as \r\n```html\r\n<select>\r\n\t<option value=\"SMS\" class=\"option\">SMS</option>\r\n\t<option value=\"E-mail\" class=\"option\">E-mail</option>\r\n\t<option value=\"Letter\" class=\"option\">Letter</option>\r\n</select>\r\n```\r\n\r\nWhen you would expect\r\n```html\r\n<select>\r\n\t<option value=\"sms\" class=\"option\">SMS</option>\r\n\t<option value=\"email\" class=\"option\">E-mail</option>\r\n\t<option value=\"letter\" class=\"option\">Letter</option>\r\n</select>\r\n```\r\n\r\nI tried looking to see if this is expected behaviour as it seem's svelte intentionally replaces the value with the inner text, but I couldn't find anything or any bugs related to this issue.\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/4d0c421a2c77451e8ef7e4c4db7a9ca6?version=4.2.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.4\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 3.50 GB / 32.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 19.8.1 - /opt/homebrew/bin/node\r\n    npm: 9.5.1 - /opt/homebrew/bin/npm\r\n    pnpm: 8.6.3 - ~/Library/pnpm/pnpm\r\n  Browsers:\r\n    Chrome: 115.0.5790.170\r\n    Chrome Canary: 118.0.5949.0\r\n    Safari: 16.5\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-16T14:13:15Z","created_at":"2023-08-15T08:56:13Z","creator_user_login":"yusaf"}
{"number":9099,"title":"`svelte:element` dynamic `this` SVG bug","body":"### Describe the bug\n\nI'm not sure if this is still considered a bug or just a \"won't fix\" type of thing. If it's the latter, please just close this issue. It has already been discussed in #7613 and several others as well.\r\n\r\nBasically, if `svg` is passed as the dynamic `this` in `svelte:element`, it won't render due to the wrong namespace.\n\n### Reproduction\n\nhttps://svelte.dev/repl/fb3c89e8979540cebdcea910cafa52f5?version=4.2.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 6.1 Manjaro ARM\r\n    CPU: (4) arm64 Cortex-A72\r\n    Memory: 1.27 GB / 3.72 GB\r\n    Container: Yes\r\n    Shell: 3.6.1 - /usr/bin/fish\r\n  Binaries:\r\n    Node: 20.2.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.19.2 - /usr/bin/npm\r\n    pnpm: 8.6.0 - ~/.bin/pnpm\r\n  Browsers:\r\n    Chromium: 113.0.5672.126\r\n  npmPackages:\r\n    svelte: ^4.0.5 => 4.0.5\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-12T06:37:37Z","created_at":"2023-08-12T06:37:37Z","creator_user_login":"onlyfortesting"}
{"number":9098,"title":"feat: `@import` CSS at-rule supports both `layer` and `supports`","body":"Implements #8670.\r\n\r\nRight now, `layer` is supported on all major browsers, but `supports` is supported by Firefox only. Also, I decided to implement this CSS rule on the `css-tree` fork on this repo so that we can have this now, until `css-tree` has a better way to support this rule. 🙃 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-12T15:41:00Z","created_at":"2023-08-12T03:26:34Z","creator_user_login":"ngtr6788"}
{"number":9097,"title":"Enhancing Svelte's Context Reactivity","body":"### Describe the problem\r\n\r\nTo establish reactivity for a passed prop within a context, we need to create a store variable that mirrors the prop's updates:\r\n\r\n### Parent\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport Child from './Child.svelte';\r\n\timport Grandchild from './Grandchild.svelte';\r\n\r\n\tlet disabled: boolean = false;\r\n</script>\r\n\r\n<button on:click={() => (disabled = !disabled)}>toggle</button>\r\n<Child {disabled}><Grandchild /></Child>\r\n```\r\n\r\n### Child\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { setContext } from 'svelte';\r\n\timport { writable, type Writable } from 'svelte/store';\r\n\r\n\texport let disabled: boolean;\r\n\r\n\tlet disabledStore: Writable<boolean> = writable(disabled);\r\n\t$: disabledStore.set(disabled);\r\n\r\n\tsetContext('child', disabledStore);\r\n</script>\r\n\r\n<slot />\r\n```\r\n\r\n### Grandchild\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport type { Writable } from 'svelte/store';\r\n\timport { getContext } from 'svelte';\r\n\r\n\tlet disabledStore: Writable<boolean> = getContext('child');\r\n</script>\r\n\r\n<p>{$disabledStore}</p>\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nUsing the passed prop directly in this manner would be quite convenient:\r\n\r\n### Parent\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport Child from './Child.svelte';\r\n\timport Grandchild from './Grandchild.svelte';\r\n\r\n\tlet disabled: boolean = false;\r\n</script>\r\n\r\n<button on:click={() => (disabled = !disabled)}>toggle</button>\r\n<Child {disabled}><Grandchild /></Child>\r\n```\r\n\r\n### Child\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { setContext } from 'svelte';\r\n\timport { writable, type Writable } from 'svelte/store';\r\n\r\n\texport let disabled: boolean;\r\n\r\n\t$: setContext('child', disabled);\r\n</script>\r\n\r\n<slot />\r\n```\r\n\r\n### Grandchild\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport type { Writable } from 'svelte/store';\r\n\timport { getContext } from 'svelte';\r\n\r\n\t$: disabled = getContext<boolean>('child');\r\n</script>\r\n\r\n<p>{disabled}</p>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nThe problem contains the solution. Yet, implementing this proposed solution might necessitate additional code. This alternative could involve making Svelte's context fully reactive, which might eliminate the need for extra code and it should not introduce any breaking changes.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-08-14T19:45:05Z","created_at":"2023-08-11T19:00:38Z","creator_user_login":"WailAbou"}
{"number":9095,"title":"chore: some changes to eliminate eslint error messages","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [X] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [X] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [X] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n\r\n---\r\n\r\n**1. change tsconfig:** just changes to eliminate TS errors.\r\n**2. `node:` prefix and `\"`:** just changes to eliminate TS errors too.\r\n**3. change rollup.config:** internal_exports.js is subject to eslint exclusion, but I modified it as well.\r\n**4. add `@ts-ignore` :** just changes to eliminate TS errors too.\r\n**5. using optional and for of:** recommendations have been followed at a level that does not affect functionality.","state":"open","updated_at":"2023-08-14T17:21:08Z","created_at":"2023-08-11T13:22:07Z","creator_user_login":"Artxe2"}
{"number":9094,"title":"fix: false reactive component warning","body":"fixes #9082 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-11T12:51:05Z","created_at":"2023-08-11T12:36:43Z","creator_user_login":"gtm-nayan"}
{"number":9092,"title":"`svelte:element` with dynamic `this` and spread attributes","body":"### Describe the bug\n\nIn the code example below, when I use `...props`, there is no problem:\r\n```svelte\r\n<svelte:element this=\"div\" {...props}>\r\n    this is div !\r\n</svelte:element>\r\n```\r\nBut when I try to make `this` dynamic, even with a simple string, I get an error saying `props is not defined`.\r\n```svelte\r\n<svelte:element this={\"div\"} {...props}>\r\n    this is div !\r\n</svelte:element>\r\n```\n\n### Reproduction\n\nhttps://svelte.dev/repl/1c5c200152784ab9802b2333b01124f1?version=4.1.2\n\n### Logs\n\n```shell\nUncaught ReferenceError: props is not defined\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6.7\r\n    CPU: (8) arm64 Apple M2\r\n    Memory: 113.55 MB / 8.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 20.4.0 - ~/.nvm/versions/node/v20.4.0/bin/node\r\n    Yarn: 1.22.19 - ~/.nvm/versions/node/v20.4.0/bin/yarn\r\n    npm: 9.7.2 - ~/.nvm/versions/node/v20.4.0/bin/npm\r\n    pnpm: 8.6.10 - ~/.nvm/versions/node/v20.4.0/bin/pnpm\r\n  Browsers:\r\n    Brave Browser: 115.1.56.14\r\n    Safari: 15.6.1\r\n  npmPackages:\r\n    rollup: ^3.27.2 => 3.27.2 \r\n    svelte: ^4.0.5 => 4.1.2\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2023-08-11T09:36:36Z","created_at":"2023-08-11T09:22:59Z","creator_user_login":"hamidreza4dev"}
{"number":9091,"title":"chore: refactor get_directive_type function","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-14T03:35:02Z","created_at":"2023-08-10T20:49:53Z","creator_user_login":"Link-the-elf"}
{"number":9089,"title":"fix: nodes match when right expression has trailing comments","body":"partially fix #9088\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-18T17:16:06Z","created_at":"2023-08-10T17:03:54Z","creator_user_login":"teobgeno"}
{"number":9088,"title":"Adding a comment changes the semantics of the code significantly, as well a related potential reactivity bug","body":"### Describe the bug\r\n\r\nAdding a comment changes the semantics of the code. In fact, adding a comment fixes another presumed reactivity bug.\r\n\r\nLet's walk through the original presumed bug first, then I'll explain the bizarre comment behavior.\r\n\r\nFor the rest of this report, I'll be referring to [this](https://svelte.dev/repl/0dd63d22d975452687d3e13523cbfa12?version=4.1.2) REPL which replicates the issue.\r\n\r\nNote: I have also replicated this with a running svelte-kit application as well.\r\n\r\nReplication:\r\n1. some prop (so far I've only gotten it to work with a list) get's passed to a component\r\n2. a copy or a mapping of that component is made\r\n3. the copy is displayed in markup (I'm guessing if it's not, then the compiler doesn't deem it necessary to update it)\r\n3. at some later point, a function manually triggers reactivity on the copy (in this case the clickAction handler)\r\n\r\nBug:\r\nThe original list will have reactivity triggered on it even though it's been copied by value. The expected behavior is that the original list should not have reactivity triggered on it all. This is validated in the JS output, showing that the clickAction handler invalidates both names and namesCopy.\r\n\r\nFindings:\r\n1. this only happens if names is a prop, if you toggle the comments on the lines defining the names list in DataTable.svelte,\r\nthe behavior works as expected\r\n2. adding a comment to the side of the line that manually triggers reactivity on the copy changes the behavior of the\r\ncode (this is also reflected in the JS output)\r\n\r\n### Reproduction\r\n\r\nReplication is mentioned in tandem with bug description.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 4.18 CentOS Stream 8\r\n    CPU: (16) x64 11th Gen Intel(R) Core(TM) i9-11900K @ 3.50GHz\r\n    Memory: 44.25 GB / 62.44 GB\r\n    Container: Yes\r\n    Shell: 4.4.20 - /bin/bash\r\n  Binaries:\r\n    Node: 18.16.0 - /usr/bin/node\r\n    npm: 9.5.1 - /usr/bin/npm\r\n    pnpm: 8.4.0 - /usr/bin/pnpm\r\n  Browsers:\r\n    Chrome: 114.0.5735.90\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-10T17:42:04Z","created_at":"2023-08-09T21:49:04Z","creator_user_login":"Kcwidman"}
{"number":9085,"title":"feat: Generate blog RSS feed with full content rather than a description","body":"In the Svelte blog, only a short description is being generated for each post. This PR changes that to use the full content instead. This has a few benefits including letting people read the blog post offline (imagine you have a spotty connection or are traveling) and it also avoids a browser click. This PR also adds author information to the feed.\r\n\r\nI've tested locally on [NetNewsWire](https://netnewswire.com/) and it works well with a localhost feed.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-09T01:59:08Z","created_at":"2023-08-09T01:00:27Z","creator_user_login":"martgnz"}
{"number":9084,"title":"Reorder the type parameters of `derived`","body":"### Describe the problem\r\n\r\nWhen declaring a derived store that has `null` as the initial value and has two or more stores as dependencies, I can't specify\r\nthe type that the derived store contains without first having so specify the type of the dependency array, which is somewhat frustrating.\r\n\r\n```ts\r\n\r\n// ideal situation (does not currently work)\r\n// the type of the the store's value is `DerivedData | null`\r\n// and the type of the dependecies is inferred\r\nconst myData = derived<DerivedData | null>([a, b, c], ([$a, $b, $c], set) => {\r\n  if(!$a || !$b || !$c) {\r\n    set(null);\r\n    return;\r\n  }\r\n  const { data, dispose } = generateData($a, $b, $c);\r\n  set(data);\r\n  return dispose;\r\n});\r\n\r\n// reality\r\n\r\n// one way to work around the problem\r\n// manually typing the `set` parameter will yield the same result, but it's more verbose\r\nconst myData = derived([a, b, c], ([$a, $b, $c], set: (value: DerivedData | null) => void) => {\r\n  if(!$a || !$b || !$c) {\r\n    set(null);\r\n    return;\r\n  }\r\n  const { data, dispose } = generateData($a, $b, $c);\r\n  set(data);\r\n  return dispose;\r\n});\r\n\r\n// another workaround\r\n// like before, it yields the same result, but it's also more verbose than it should be\r\nconst deps = [a, b, c] as const\r\nconst myData = derived<typeof deps, DerivedData | null>(deps, ([$a, $b, $c], set) => {\r\n  if(!$a || !$b || !$c) {\r\n    set(null);\r\n    return;\r\n  }\r\n  const { data, dispose } = generateData($a, $b, $c);\r\n  set(data);\r\n  return dispose;\r\n});\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nSwapping the order of the generic parameters of the `derived` function would solve the problem.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/f4c4d99e136831934364d89f032922881feb7bc0/packages/svelte/src/runtime/store/index.js#L124-L132\r\n\r\n\r\n### Alternatives considered\r\n\r\nThe alternatives were listed above.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-08-09T12:23:14Z","created_at":"2023-08-08T18:28:59Z","creator_user_login":"JeanJPNM"}
{"number":9082,"title":"Component reactivity warning when component is dependency in reactive statement","body":"### Describe the bug\n\nI've been having this weird warning about reactivity for one of the external components (SVG as Svelte component) I use from a library:\r\n```\r\n[vite-plugin-svelte] /src/routes/+page.svelte:184:4 <CodeBracket/> will not be reactive if CodeBracket changes. Use <svelte:component this={CodeBracket}/> if you want this reactivity.\r\n182:         before:absolute before:inset-0 before:-z-10 before:rounded-full before:bg-black before:opacity-[0.35] before:blur-lg before:content-[''] before:-translate-z-28\"\r\n183:       >\r\n184:         <CodeBracket class=\"h-full w-full\" />\r\n             ^\r\n185:       </div>\r\n186:       <div\r\n```\r\nIt's weird because this solution wouldn't work as I cannot pass `class`es to a `<svelte:component` as far as I know and it ONLY warns me on this specific line, not the 2 other siblings that have exactly the same structure:\r\n```svelte\r\n<Mouse3DTilting\r\n\tinitialX={-32}\r\n\tinitialY={-13}\r\n\tintensity={0.05}\r\n\tscope={\"#hero\"}\r\n\tclass=\"relative hidden aspect-square max-h-full items-center justify-center child:absolute lg:ml-20 xl:flex\"\r\n>\r\n\t<Window class=\"h-full w-full text-dominant\" />\r\n\t<div\r\n\t\tclass=\"bottom-10 left-10 w-36 perspective-[312rem] transform-style-3d translate-z-28\r\n\t\tbefore:absolute before:inset-0 before:-z-10 before:rounded-full before:bg-black before:opacity-[0.35] before:blur-lg before:content-[''] before:-translate-z-28\"\r\n\t>\r\n\t\t<CodeBracket class=\"h-full w-full\" /> <!-- Warning here -->\r\n\t</div>\r\n\t<div\r\n\t\tclass=\"left-1/2 top-0 w-36 perspective-[312rem] transform-style-3d translate-z-20\r\n\t\tbefore:absolute before:inset-0 before:-z-10 before:rounded-full before:bg-black before:opacity-50 before:blur-lg before:content-[''] before:-translate-z-20\"\r\n\t>\r\n\t\t<Sparkles class=\"h-full w-full\" /> <!-- But no warning here -->\r\n\t</div>\r\n\t<div\r\n\t\tclass=\"-right-10 bottom-0 w-36 perspective-[312rem] transform-style-3d translate-z-16\r\n\t\tbefore:absolute before:inset-0 before:-z-10 before:rounded-full before:bg-black before:opacity-[0.55] before:blur-lg before:content-[''] before:-translate-z-16\"\r\n\t>\r\n\t\t<DevicePhoneMobile class=\"h-full w-full\" /> <!-- No warning here either -->\r\n\t</div>\r\n</Mouse3DTilting>\r\n```\r\nAs I mentioned, these components (`Window`, `CodeBracket`, `Sparkles` & `DevicePhoneMobile`) are just SVGs in Svelte files from [`@inqling/svelte-icons`](https://github.com/Inqling/svelte-icons) I cannot do anything about and have no need for any reactivity.\r\n\r\nI don't know if it's a bug or a problem in my code as I'm not a Svelte expert, but it looks like a bug.\n\n### Reproduction URL\n\nhttps://github.com/EmeraldHQ/Website/actions/runs/5790267552/job/15693026456#step:7:20\n\n### Reproduction\n\n1) Use my repo\r\n2) Run `vite` (sometimes does not appear) or `vite build` (100% reliable)\r\n3) Notice the warning\n\n### Logs\n\n```shell\nSee the main text above\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.5\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 95.34 MB / 16.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 20.5.0 - /opt/homebrew/bin/node\r\n    npm: 9.8.1 - /opt/homebrew/bin/npm\r\n    pnpm: 8.6.12 - /opt/homebrew/bin/pnpm\r\n  Browsers:\r\n    Chrome: 114.0.5735.198\r\n    Safari: 16.6\r\n    Safari Technology Preview: 17.0\r\n  npmPackages:\r\n    @sveltejs/adapter-static: ^2.0.3 => 2.0.3 \r\n    @sveltejs/kit: ^1.22.4 => 1.22.4 \r\n    svelte: ^4.1.2 => 4.1.2 \r\n    vite: ^4.4.9 => 4.4.8\n```\n","state":"open","updated_at":"2023-08-07T23:53:36Z","created_at":"2023-08-07T22:41:18Z","creator_user_login":"WarningImHack3r"}
{"number":9081,"title":"SSR generating JS","body":"### Describe the problem\n\nI want to use Svelte for a sort of \"traditional\" kind of apps -- just multi-page apps, where dynamic HTML and immutable CSS and JS files are served. Basically I want to use server-side rendering for rendering Svelte components on server side, storing CSS and JS files as static assets, and serving dynamic HTML on requests. (And a key part is that these JS files don't contain all the Svelte library and all components, only just that Svelte parts needed for the run-time, e.g. transitions)\n\n### Describe the proposed solution\n\nIt would be really useful if Svelte's SSR would be able to support components containing JS -- the simplest being just components using event listeners. The generated JS could go into a new `js` field of the `.render()` result or go into the `head` field.\n\n### Alternatives considered\n\nAn alternative would be to use the current SSR for generating HTML and CSS and then making a JS bundle that contains Svelte and the required components and generates them on the client side using hydration. But that offloads that work from the server, where it can be done once (or maybe not in case of dynamic HTML), to the client side, and makes the JS bundle much much larger than it really needs to be.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-08-10T16:01:28Z","created_at":"2023-08-07T18:52:24Z","creator_user_login":"LeviPesin"}
{"number":9080,"title":"fix: allow setting `files` binding for `<input type=\"file\" />`","body":"fixes https://github.com/sveltejs/svelte/issues/8316\r\n\r\nThis PR allows setting the `files` binding for file inputs to allow for common operations such as setting the `files` to a drag and drop file, or clearing the file input selection. Currently, this is not possible because `bind:files` is read-only in Svelte. The redundant alternative is to bind the input element instead and set the files property there.\r\n```svelte\r\n<script>\r\n  let files;\r\n</script>\r\n\r\n<input type=\"file\" bind:files />\r\n\r\n<!-- Reset file input -->\r\n<button on:click={() => files = new DataTransfer().files}>Reset</button>\r\n\r\n<!-- Set file input as the dragged file -->\r\n<svelte:window\r\n\ton:drop|preventDefault={(event) => {\r\n\t\tconst { dataTransfer } = event;\r\n\t\tif (!dataTransfer) return;\r\n\r\n\t\tfiles = dataTransfer.files;\r\n\t}}\r\n\ton:dragover|preventDefault\r\n/>\r\n```\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-14T11:40:02Z","created_at":"2023-08-06T15:51:29Z","creator_user_login":"s3812497"}
{"number":9078,"title":"Clarify difference between initial value and default value in Svelte tutorial","body":"### Describe the bug\r\n\r\nAppreciating the decision to stick with[ legacy behavior](https://github.com/sveltejs/svelte/issues/4442) for \"initial value\" syntax:\r\n```\r\nexport let myProp = \"initialValue\";\r\n``` \r\nversus true default value syntax:\r\n```\r\nexport let myProp;\r\n$: myProp ??= 'defaultValue';\r\n```\r\n\r\nCould the distinction be made clearer in the [Svelte tutorial for default values](https://svelte.dev/tutorial/default-values) as it currently teaches that a default value is achieved using the \"initial value\" syntax?\r\n\r\nThis difference explains why my TS typing was always complaining that it could not execute functions that were optional props since they could be undefined. And here I am thinking, but they are not undefined since I gave them default values. But typescript knew that those initial values could be over-written back to undefined!!! So now I have to go update all my code.\r\n\r\n\r\n### Reproduction\r\n\r\nexport let myProp = \"initialValue\";\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.3.1\r\n    CPU: (8) arm64 Apple M2\r\n    Memory: 34.16 MB / 8.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.17.0 - ~/Library/pnpm/nodejs_current/bin/node\r\n    npm: 9.6.7 - ~/Library/pnpm/npm\r\n    pnpm: 8.6.6 - ~/Library/pnpm/pnpm\r\n  Browsers:\r\n    Chrome: 115.0.5790.170\r\n    Safari: 16.4\r\n  npmPackages:\r\n    svelte: ^4.1.2 => 4.1.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-11T23:08:54Z","created_at":"2023-08-06T01:19:15Z","creator_user_login":"kenbankspeng"}
{"number":9076,"title":"Animations & Transitions are not working on display:contents","body":"### Describe the bug\r\n\r\nAnimations & Transitions are not working on HTML element with `display: contents`.\r\n \r\nIt's normal since `display: contents` replaces the element with its contents, so the element isn't really an element anymore.\r\nBut it gives strange and unexpected behavior for a basic feature of Svelte.\r\n\r\n\r\nExpected behavior : it should work (e.g. animations/transitions could be applied to all its children).\r\n\r\n### Reproduction\r\n\r\nThis demo display a list of user using an `ul/li` and `display:grid` on each `<li>` :\r\n\r\nhttps://svelte.dev/repl/fefc7e40d4264fb7af10130fb2c52fa3?version=4.1.2\r\n\r\nClick on *\"SHUFFLE\"*, *\"DROP ONE\"* or *\"ADD ONE\"* to trigger animations/transitions on the `<li>` elements.\r\nAll is ok.\r\n\r\nNow check the checkbox *\"Use display:contents\"* to change the CSS in order to use `display:contents` on the `<li>` elements.\r\nThis allows, with `display:grid` is set on the `<ul>`, to have an alignment of each parts of the list.\r\n\r\nNow click on *\"SHUFFLE\"*, *\"DROP ONE\"* or *\"ADD ONE\"* to trigger animations/transitions on the `<li>` elements.\r\nThe animations/transitions are not triggered...\r\n\r\nAnimation is just ignored.\r\nTransition do nothing, but delay the deletion of the element, which causes lag.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (12) x64 Intel(R) Core(TM) i5-10500 CPU @ 3.10GHz\r\n    Memory: 7.63 GB / 15.78 GB\r\n  Binaries:\r\n    Node: 16.17.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 9.7.2 - C:\\Program Files\\nodejs\\npm.CMD\r\n    pnpm: 7.26.1 - ~\\AppData\\Local\\pnpm\\pnpm.EXE\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1992.0), Chromium (115.0.1901.183)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    svelte: file:../svelte/packages/svelte => 4.1.2 \r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-05T06:54:59Z","created_at":"2023-08-05T06:54:32Z","creator_user_login":"adiguba"}
{"number":9066,"title":"wrong server-side rendering of attributes with true value when spreading props","body":"### Describe the bug\r\n\r\n**As is**\r\nThe combination of prop spreading and passing attributes that should have an explicit true value leads to wrong server-side rendering. The same issue is described here: https://github.com/sveltejs/svelte/issues/6121 but the bug reappears when using the spread props, for example, when passing ```{...$$restProps}```.  It seems like this behavior is violated here: https://github.com/sveltejs/svelte/blob/abf257306b7d534b3ea22113397ece7b0066dfb4/packages/svelte/src/runtime/internal/ssr.js#L39\r\n\r\n**Expected to be**\r\nRender attr=\"\" when the value passed to it is true if it's a boolean attribute. In the case of any other attribute, attr=\"true\" should be rendered instead (as it is when using DOM rendering).\r\n\r\n### Reproduction\r\n\r\n```\r\n<script>\r\n\tlet disabled = true;\r\n</script>\r\n\r\n<button {...$$restProps} aria-disabled={disabled}>\r\n<slot/>\r\n</button>\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nDoesn't matter for this bug\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-02T13:05:01Z","created_at":"2023-08-02T13:02:03Z","creator_user_login":"wild-dino"}
{"number":9065,"title":"Correct interpretation of mediaquerries","body":"### Describe the problem\r\n\r\nI have defined my breakpoints in app.scss. The singe condition breakpoints works as intended, but the one where is in condition minimal and maximal width that is probably the problem atleast according to the error: Identifier is expected.\r\n\r\nthe place -> '(min-width: 567px) and (max-width: 767px)'.\r\n\r\nIn bellow are code and images what I tried and discovered and hopefully the problem will be fixed and I will learn something from it.\r\n\r\nThank you for your time.\r\n\r\nFirst my code. Here I define breakpoints and mixin so I can use it in app. The mixin takes as input the breakpoint key like xs, sm etc.\r\n\r\napp.scss file\r\n// screen sizes media queries\r\n$breakpoints: (\r\n  'xs': 'max-width: 575.98px',\r\n  'sm': '(min-width: 567px) and (max-width: 767px)',\r\n  'md': '(min-width: 768px) and (max-width: 991px)',\r\n  'lg': '(min-width: 992px) and (max-width: 1199px)',\r\n  'xl': '(min-width: 1200px) and (max-width: 1399px)',\r\n  'xxl': 'min-width: 1400px',\r\n);\r\n\r\n// mixin that takes as input breakpoint names such as xs, sm etc.\r\n@mixin breakpoint($user-value) {\r\n  $my-map: map-get($breakpoints, $user-value);\r\n  @if $my-map {\r\n    @media (#{$my-map}) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @error \"Breakpoint #{$user-value} is not defined\";\r\n  }\r\n}\r\n\r\nUsage of created mixin in +page.svelte file\r\n\r\n<style lang=\"scss\">\r\n:global(body) {\r\n  background-size: 100%;\r\n  @include breakpoint(xs) {\r\n    background-color: red;\r\n  }\r\n  @include breakpoint(sm) {\r\n    background-color: blue;\r\n  }\r\n  @include breakpoint(md) {\r\n    background-color: green;\r\n  }\r\n  @include breakpoint(lg) {\r\n    background-color: yellow;\r\n  }\r\n  @include breakpoint(xl) {\r\n    background-color: white;\r\n  }\r\n  @include breakpoint(xxl) {\r\n    background-color: black;\r\n  }\r\n}\r\n</style>\r\n\r\nIn images are error image and same code correctly working in codepen. I am asuming that this is the svelte problem othervise it would also not work in non svelte html css project.\r\n![error](https://github.com/sveltejs/svelte/assets/117277122/01ce63f6-715e-4174-a197-5d6d220bb05a)\r\n![working code in codepen](https://github.com/sveltejs/svelte/assets/117277122/2d39586f-e9b6-4063-9af5-ccde15ec60bf)\r\n\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nSvelte should correclty interpret the css generated from scss.\r\n\r\n### Alternatives considered\r\n\r\nThere is probably no alternative to this\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-08-04T21:12:54Z","created_at":"2023-08-02T11:13:36Z","creator_user_login":"stano561"}
{"number":9064,"title":"fix: stale ctx for await block in slot","body":"fixes #9058 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-02T08:33:36Z","created_at":"2023-08-02T08:33:33Z","creator_user_login":"gtm-nayan"}
{"number":9063,"title":"fix: @html mismatch in hydration","body":"fixes #9057 \r\nfixes #8213\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-05T17:19:27Z","created_at":"2023-08-02T06:58:26Z","creator_user_login":"gtm-nayan"}
{"number":9058,"title":"{#await then} not working properly with slot props","body":"### Describe the bug\r\n\r\nIn the following example, the `physicalWidth` inside the `{#await}` block isn't updated (see the REPL linked below).\r\n```svelte\r\n<Wrapper let:physicalWidth>\r\n    {physicalWidth}\r\n    {#await getWhatever() then result}\r\n        {physicalWidth}\r\n    {/await}\r\n</Wrapper>\r\n\r\n```\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/d0732e9de86747f7981fd11d575177ac?version=4.1.1\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\n-\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2023-08-02T06:26:51Z","created_at":"2023-07-30T00:26:25Z","creator_user_login":"aradalvand"}
{"number":9057,"title":"SSR hydration bug with @html and localStorage","body":"### Describe the bug\n\nI have a custom Table.svelte component that renders a table given an array of column definitions and an array of row data objects. This Table component supports sorting by clicking on the headers of the column and it saves that sort preference in localStorage.\r\n\r\nWhen this component hydrates on the client you will see the table update to sort properly based on the last saved settings in localStorage. This is expected and works fine unless:\r\n\r\nIf any of the cells render using {@html cellValue}, the client-side sort will not update that column on initial render. This will leave some columns sorted properly and others not sorted and now associated with the wrong row.\r\n\r\nIt took a while to isolate this to the @html tag. I've tried all of the tricks for reactivity like [...data] array copying, {#key} and indexes on {#each} blocks. The only thing that fixed the sorting problem is to not use @html.\r\n\r\nI'm working around this now by exposing a slot in my table component where I don't need to use @html, but this is definitely a problem for situations that require rendering HTML from a string.\n\n### Reproduction\n\nhttps://www.sveltelab.dev/oksrlmbygtswbzd\r\n\r\n1. Load the sveltelab project and click on the Name column to sort by name. You should see the sorting working properly.\r\n![image](https://github.com/sveltejs/kit/assets/2222254/5b7f4eca-24b6-4d9e-983b-3cfea201abe2)\r\n\r\n2. Click the UI view refresh to SSR and hydrate the page and you'll see the name sort kick in, but the names don't match the emails anymore.\r\n![image](https://github.com/sveltejs/kit/assets/2222254/0bb5c67b-6fd1-410a-9beb-fca6e27e97c0)\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```Shell\nNew sveltelab.dev running on Chrome browser.\r\n\r\n  System:\r\n    OS: Linux 5.0 undefined\r\n    CPU: (8) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 0 Bytes / 0 Bytes\r\n    Shell: 1.0 - /bin/jsh\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.4.2 - /usr/local/bin/npm\r\n    pnpm: 8.6.3 - /usr/local/bin/pnpm\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^2.0.0 => 2.1.0 \r\n    @sveltejs/kit: ^1.20.4 => 1.22.3 \r\n    svelte: ^4.0.0 => 4.1.1 \r\n    vite: ^4.3.6 => 4.4.7\n```\n\n\n### Severity\n\nserious, but I can work around it\n\n### Additional Information\n\nThis was confirmed by a few other users on the Svelte discord. See this thread for reference.\r\n\r\nhttps://discord.com/channels/457912077277855764/1134549192174489630\r\n","state":"open","updated_at":"2023-08-16T11:50:42Z","created_at":"2023-07-29T03:47:10Z","creator_user_login":"formula349"}
{"number":9056,"title":"feat: parameter for running outro transitions on `$destroy`","body":"Make it possible to run outro transitions when manually calling $destroy on a component.\r\n\r\nIn Svelte 4, [the workaround](https://github.com/sveltejs/svelte/issues/4056#issuecomment-791317426) mentioned in #4056 no longer works because those APIs are not public / exported.\r\n\r\nFixes #4056 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-31T06:56:57Z","created_at":"2023-07-28T14:38:25Z","creator_user_login":"ehrencrona"}
{"number":9054,"title":"Svelte Custom Element `disconnectedCallback` throws errors when inside an `async` block","body":"### Describe the bug\r\n\r\nI have a Svelte Custom Element (using <svelte:options customElement=\"...\"/>) that I'm projecting into another element. That element has a default slot that is shown after a promise is resolved (using an await block). \r\n\r\nEvery time that custom element is _mounted_ into an `async` block, an error message is logged to the console saying `Cannot read properties of undefined (reading '$destroy')`.\r\n\r\nThis behavior does not happen when the custom element is mounted in a regular `if` block (even when the condition is false.\r\n\r\n### Reproduction\r\n\r\nSee reproduction here: https://stackblitz.com/edit/vitejs-vite-8f6txm?file=src%2FApp.svelte\r\n\r\nWhen the App component is first rendered, a `Cannot read properties of undefined (reading '$destroy')` error is caught and logged.\r\n\r\nClick the \"Toggle async host\" once to hide it, and once again to show. The same error will be logged.\r\n\r\nClick the 'Toggle sync host' button twice.  Notice no errors are logged.\r\n\r\n---\r\n\r\nI set up a simpler reproduction here: https://stackblitz.com/edit/vitejs-vite-sgazgn?file=src%2FApp.svelte\r\n\r\nIn this one, the error is logged only once - when the App component is initially loaded. Toggling the promise doesn't re-trigger the error message.\r\n\r\n### Logs\r\n\r\n```shell\r\nchunk-TG5ZCBZ3.js?v=c5f2595f:2344 \r\n Uncaught (in promise) TypeError: Cannot read properties of undefined (reading '$destroy')\r\n    at chunk-TG5ZCBZ3.js?v=c5f2595f:2344:20\r\n(anonymous)\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:2344\r\nPromise.then (async)\t\t\r\ndisconnectedCallback\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:2342\r\ndetach\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:432\r\ndetach_dev\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:2505\r\ndestroy\t@\tApp.svelte:24\r\nupdate2\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:1683\r\nhandle_promise\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:1715\r\nupdate\t@\tApp.svelte:20\r\nupdate\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:1325\r\nflush\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:1291\r\ninit\t@\tchunk-TG5ZCBZ3.js?v=c5f2595f:2191\r\nApp\t@\tApp.svelte:26\r\ncreateProxiedComponent\t@\tsvelte-hooks.js?v=c5f2595f:341\r\nProxyComponent\t@\tproxy.js?v=c5f2595f:242\r\nProxy<App>\t@\tproxy.js?v=c5f2595f:349\r\n(anonymous)\t@\tmain.ts:4\r\n```\r\n\r\n\r\n### System Info\r\nTested in Firefox and Edge.\r\n```shell\r\nSystem:\r\n    OS: Linux 5.0 undefined\r\n    CPU: (8) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 0 Bytes / 0 Bytes\r\n    Shell: 1.0 - /bin/jsh\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.4.2 - /usr/local/bin/npm\r\n    pnpm: 8.6.3 - /usr/local/bin/pnpm\r\n  npmPackages:\r\n    svelte: ^4.0.5 => 4.1.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-27T17:29:55Z","created_at":"2023-07-27T17:26:14Z","creator_user_login":"ComradeCow"}
{"number":9050,"title":"custom elements in v4 don't register tag with customElements.define","body":"### Describe the bug\n\nUpgrading from v3 to v4 when I instruct compiler to compile a svelte file as custom element `customElements.define(\"some-tag\",Element);` is not created anymore , where tag is the tag name provided in compiler options.\r\n\r\n```\r\nsvelte.compile(source, {\r\n                name:'Example',\r\n                tag:'some-tag',\r\n                css: 'injected',\r\n                customElement:true\r\n            });\r\n```\r\n\r\nDid something changed or is this a bug?\n\n### Reproduction\n\ncompiling as custom element with tag field provided, doesn't register the custom element\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz\r\n    Memory: 2.98 GB / 15.94 GB\r\n  Binaries:\r\n    Node: 18.16.0 - D:\\sdk\\nodejs\\node.EXE\r\n    npm: 9.6.5 - D:\\sdk\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (115.0.1901.183)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    rollup: ^3.10.1 => 3.26.3\r\n    svelte: ^4.1.1 => 4.1.1\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-07-29T12:54:24Z","created_at":"2023-07-26T23:43:02Z","creator_user_login":"catapop84"}
{"number":9046,"title":"chore: bump jsdom to address word-wrap vulnerability","body":"fixes the dependabot alert: https://github.com/sveltejs/svelte/security/dependabot","state":"open","updated_at":"2023-08-22T22:01:42Z","created_at":"2023-07-26T18:30:16Z","creator_user_login":"benmccann"}
{"number":9043,"title":"add radiofrance logo","body":"We are using Svelte/Sveltekit at Radiofrance, and we love it !\r\n","state":"open","updated_at":"2023-07-27T07:58:58Z","created_at":"2023-07-26T11:59:19Z","creator_user_login":"bleucitron"}
{"number":9029,"title":"feat: add `|nonself` event modifier for non-interactive elements with event listeners","body":"Fixes https://github.com/sveltejs/svelte/issues/8964\r\n\r\nCurrently, a few a11y warnings fire for the false positive scenario of non-interactive elements listening to bubbled events.\r\n\r\nThis PR adds a new `|nonself` event modifier, that ignores events emmited by the listener's own element (eg. only listens to bubbling events)\r\n\r\nThis improves the following:\r\n\r\n* Avoids inexperienced developers blindly following warnings and adding a `tabindex` to non-interactive divs\r\n* Complements the existing [`self modifier`](https://github.com/sveltejs/svelte/issues/3372), reducing the amount of boiler-plate code to ensure an event has bubbled from a child\r\n* Gives a pathway to resolve false positive warnings safely, rather than ignoring them\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-28T03:32:36Z","created_at":"2023-07-23T06:45:25Z","creator_user_login":"oscarhermoso"}
{"number":9028,"title":"transition property on any element breaks navigation scroll preservation","body":"### Describe the bug\r\n\r\nWhen navigating _from_ a page that has a `transition` defined on any component, scroll preservation of a previously visited site is broken, and the scroll is \"all over the place\" (depending on browser and kind of navigation [e.g. to anchor tag]). This only occurs if the element with the `transition` property is unmounted during the navigation. If the `transition` property was defined on e.g. a navbar that is in a parent layout between the navigated pages, the bug will not occur.\r\n\r\nThis came up as an issue here: https://github.com/themesberg/flowbite-svelte/issues/950\r\n\r\n### Reproduction\r\n\r\nhttps://stackblitz.com/edit/sveltejs-kit-template-default-atnnds\r\n\r\nPlease scroll down until you find the test buttons and wait for hydration on first load (scroll position will not show as `undefined`) :)\r\n\r\n#### Simple example\r\n\r\nAny element with a transition:\r\n```svelte\r\n<div transition:fade></div>\r\n```\r\n\r\nEven if the transition is empty (null):\r\n```svelte\r\n<script>\r\n  const null_trans = () => null\r\n</script>\r\n<div transition:null_trans></div>\r\n```\r\n\r\n(Examples taken from @jjagielka)\r\n\r\n### Logs\r\n\r\n```shell\r\nn.a.\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nThis is the StackBlitz instance:\r\n\r\nSystem:\r\n    OS: Linux 5.0 undefined\r\n    CPU: (8) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 0 Bytes / 0 Bytes\r\n    Shell: 1.0 - /bin/jsh\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.4.2 - /usr/local/bin/npm\r\n    pnpm: 8.6.3 - /usr/local/bin/pnpm\r\n  npmPackages:\r\n    svelte: ^4.0.4 => 4.0.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-05T00:02:42Z","created_at":"2023-07-22T20:35:14Z","creator_user_login":"Coronon"}
{"number":9017,"title":"Event Handler registration & slot mounting order causes issues","body":"### Describe the bug\r\n\r\nWhen there are 2 nested components\r\n\r\n```\r\n<Master>\r\n    <Minion />\r\n</Master>\r\n```\r\n\r\n\r\na Minion, which uses an action that dispatches a [Custom Event](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent) on mount\r\n```\r\n// Minion.svelte\r\n\r\n<script>\r\n    const dispatchSomeEvent = (node) => {\r\n        // This is called on mount\r\n        console.log('marco')\r\n\t\r\n        const someEvent = new CustomEvent('someEvent', { bubbles: true });\r\n        node.dispatchEvent(someEvent);\r\n    }\r\n</script>\r\n\r\n<div use:dispatchSomeEvent />\r\n\r\n```\r\nand a Master, which handles the event.\r\n```\r\n// Master.svelte\r\n\r\n<div on:someEvent={(event) => {\r\n    // This SHOULD be called on mount of the child\r\n    console.log('polo')\r\n}}>\r\n    <slot />\r\n</div>\r\n```\r\n\r\nThe console printout should be \"marco\" \"polo\" - but it is not. The Master never handles the event on initial mount.\r\n\r\nLooking at the generated code\r\n```\r\nm(target, anchor) {\r\n\tinsert(target, div, anchor);\r\n\r\n\tif (default_slot) {\r\n\t\tdefault_slot.m(div, null);\r\n\t}\r\n\r\n\tcurrent = true;\r\n\r\n\tif (!mounted) {\r\n\t\tdispose = listen(div, \"someEvent\", /*someEvent_handler*/ ctx[2]);\r\n\t\tmounted = true;\r\n\t}\r\n}\r\n```\r\nthe mounting of the slot happens before the event handlers are registered.\r\n\r\nIs there are reason for this order?\r\n\r\n### Reproduction\r\n\r\n[Link to REPL](https://svelte.dev/repl/b19ccc1471e3405aa1e4483f667869f1?version=4.1.1)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem independent\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-24T12:13:26Z","created_at":"2023-07-21T14:20:37Z","creator_user_login":"peterkogo"}
{"number":9016,"title":"chore: fix dynamic component update test","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-21T06:18:57Z","created_at":"2023-07-21T06:18:54Z","creator_user_login":"gtm-nayan"}
{"number":9015,"title":"parser ignores interpolated strings for svelte:element this value","body":"### Describe the bug\n\nhttps://github.com/sveltejs/svelte/blob/60cd0ec950c808673d0838c5f9403d5c31ca48b3/packages/svelte/src/compiler/parse/state/tag.js#L197 only considers the first part of the value so in something like `this=\"h{n}\"` only the h goes through to the rest of the compiler\r\n\r\nshould validating the `this` attribute even be a parser level concern?\n\n### Reproduction\n\nhttps://svelte.dev/repl/15037b5ec509427194da142928430965?version=3.59.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nn/a\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-07-21T05:51:41Z","created_at":"2023-07-21T05:51:41Z","creator_user_login":"gtm-nayan"}
{"number":9011,"title":"Store `tweened` not updating correctly if initiated with nullish value","body":"### Describe the bug\r\n\r\nStore `tweened` not updating correctly if initiated with nullish value. Happens only if one `set` was called after creating.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/6827709373faf01245d0284968b365b7e032058c/packages/svelte/src/runtime/motion/tweened.js#L66-L70 https://github.com/sveltejs/svelte/blob/6827709373faf01245d0284968b365b7e032058c/packages/svelte/src/runtime/motion/tweened.js#L113 This lines of code is showing the reason of the bug, `target_value` equal to initial value after first `set`.\r\n\r\n---\r\n\r\n_And I found that `set` with duration 0 is immediate, but set with duration 0.00001 is using `raf`. I found this strange for me._\r\n\r\n### Reproduction\r\n\r\n```js\r\nconst store = tweened(undefined, { duration: 0 });\r\nstore.set(10);\r\nstore.update(v => v + 10);\r\nconsole.log(get(store));\r\n```\r\n\r\n### Logs\r\n\r\n```shell\r\nLogging: NaN.\r\nExpected: 20.\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nrepl 4.4.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-24T12:12:01Z","created_at":"2023-07-20T23:35:21Z","creator_user_login":"davydhyk"}
{"number":8999,"title":"fix: wait a longer tick before checking slots","body":"It seems that browser resolve \"await Promise.resolve()\" extra fast (close to synchronous) so the DOM isn't actually updated further. This fixes an issue where web component slots don't appear when the script registering the web components is invoked before them being added to the DOM fixes #8997\r\n\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-19T13:53:22Z","created_at":"2023-07-19T13:29:34Z","creator_user_login":"dummdidumm"}
{"number":8997,"title":"Unable to get \"slots\" and \"extend\" working with Custom Element API","body":"### Describe the bug\r\n\r\nHello,\r\n\r\nI am having difficulties getting the slot feature working for Svelte Components that are compiled as Custom Elements.  When I compile the component into a custom element and use it as follows\r\n\r\n```html\r\n<head>\r\n  <script src=\"./counter-component-wc.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <counter-component>\r\n    <p slot=\"middle\">blue world</p>\r\n  </counter-component/>\r\n</body>\r\n```\r\n\r\nI expected \"blue world\" to replace the default slot content of `<counter-component>`. However, the default slot content (i.e. `<span>This is the default slot </span>` still gets rendered:\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/57124305/dfe8d8d1-1ebf-4e91-95b3-8996071c9c2e)\r\n\r\nIn addition, I can't seem to get the `extend` keyword to work with the Custom Element API:\r\n\r\n```svelte\r\n<svelte:options\r\n  customElement={{\r\n    tag: 'counter-component',\r\n    extend: (customElementConstructor) => {\r\n      return class extends customElementConstructor {\r\n        constructor() {\r\n          super();\r\n          console.log('hello world')\r\n        }\r\n      };\r\n    }\r\n  }},\r\n/>\r\n```\r\n\r\nSpecifically, I extended the customElementConstructor with a class that simply prints \"hello world\" in its constructor body. However, \"hello world\" doesn't show up in the console whenever the custom element `<counter-component>` is mounted on the web page.\r\n\r\nCheck out the reproduction instructions below for details. The bottom of the instructions includes a .zip of the repository that you can use as well if it's more convenient.\r\n\r\nAm I doing something wrong, or is this a bug?\r\n\r\nThanks for your time!\r\n\r\n### Reproduction\r\n\r\n```bash\r\n# Create a new project. Specify \"SvelteKit demo app\", \"Typescript\", and \"Prettier\" when prompted.\r\nnpm create svelte@latest my-app \r\ncd my-app\r\nnpm install\r\n\r\nnpm install \\\r\n  @rollup/plugin-commonjs \\\r\n  @rollup/plugin-node-resolve \\\r\n  @rollup/plugin-replace \\\r\n  @rollup/plugin-typescript \\\r\n  rollup-plugin-css-only \\\r\n  rollup-plugin-scss \\\r\n  rollup-plugin-svelte\r\n```\r\n\r\nIn the included `src/routes/Counter.svelte`, insert a `<svelte:options>` element to mark the component as a custom element with a custom element constructor that simply prints \"hello world\". In addition, add an arbitrary `<slot>` element in the component's template:\r\n\r\n```svelte\r\n<!-- src/routes/Counter.svelte -->\r\n\r\n<svelte:options\r\n  customElement={{\r\n    tag: 'counter-component',\r\n    extend: (customElementConstructor) => {\r\n      return class extends customElementConstructor {\r\n        constructor() {\r\n          super();\r\n          console.log('hello world')\r\n        }\r\n      };\r\n    }\r\n  }},\r\n/>\r\n\r\n...\r\n...\r\n\r\n<div class=\"counter\">\r\n\r\n  <slot name=\"header\">\r\n    <span>This is the default slot</span>\r\n  </slot>\r\n\r\n  ...\r\n  ...\r\n</div>\r\n```\r\n\r\nCreate a file called `counter-component-wc.ts` in the `src/` directory that imports the .svelte file that we want to compile into a custom element:\r\n\r\n```typescript\r\n// src/counter-component-wc.ts\r\n\r\nimport Counter from './routes/Counter.svelte';\r\n```\r\n\r\nCreate a rollup.config.js file in the root of the repository, which is used to compile `counter-component-wc.ts` into a standalone `counter-component-wc.js` file:\r\n\r\n```javascript\r\n// rollup.config.js \r\n\r\nimport resolve from '@rollup/plugin-node-resolve';\r\nimport svelte from 'rollup-plugin-svelte';\r\nimport scss from 'rollup-plugin-scss'\r\nimport typescript from '@rollup/plugin-typescript';\r\nimport commonjs from '@rollup/plugin-commonjs';\r\nimport sveltePreprocess from 'svelte-preprocess';\r\n\r\nexport default {\r\n  input: 'src/counter-component-wc.ts',\r\n  output: {\r\n    file: 'public/counter-component-wc.js',\r\n    format: 'iife',\r\n    name: 'app',\r\n  },\r\n  plugins: [\r\n    resolve({\r\n      // Allow browser-specific functionality like onMount() to be \r\n      // included in bundle.\r\n      browser: true\r\n    }),\r\n    commonjs(),\r\n    scss(),\r\n    typescript(),\r\n    svelte({\r\n      preprocess: sveltePreprocess({scss: true}),\r\n      compilerOptions: {customElement: true}\r\n    }),\r\n  ]\r\n};\r\n```\r\n\r\nRun `npx rollup -c rollup.config.js`. `counter-component-wc.js`  should be generated in the `public/` directory.\r\n\r\nAfterwards, create a simple index.html file that uses the custom element that we just compiled. The `<counter-component>` has an arbitrary `<p>` nested with a `slot=\"header\"` attribute.\r\n\r\n```html\r\n<!--  public/index.html -->\r\n\r\n<!doctype html>\r\n<html>\r\n<head>\r\n  <title>Web Component Sandbox</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <script src=\"./counter-component-wc.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Hello World. This is a Web Component Demo.</h1>\r\n  <br/>\r\n  <counter-component>\r\n    <p slot=\"header\">blue world</p>\r\n  </counter-component/>\r\n</body>\r\n</html>\r\n```\r\n\r\nThen open public/index.html in your browser.\r\n\r\nI also have a .zip of the repository with the above edits. Extract the zip, run `npm install`, `npx rollup -c rollup.config.js`, and then open `public/index.html` in your browser.\r\n\r\n[my-app.zip](https://github.com/sveltejs/svelte/files/12089372/my-app.zip)\r\n\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz\r\n    Memory: 5.91 GB / 15.96 GB\r\n  Binaries:\r\n    Node: 16.17.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.15.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n    pnpm: 8.6.6 - ~\\AppData\\Local\\pnpm\\pnpm.EXE\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (114.0.1823.82)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^4.0.5 => 4.0.5\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-19T13:55:14Z","created_at":"2023-07-18T22:33:06Z","creator_user_login":"phasetri"}
{"number":8995,"title":"feat: Copy code button","body":"Related https://github.com/sveltejs/site-kit/pull/175\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-26T14:16:04Z","created_at":"2023-07-18T19:27:21Z","creator_user_login":"PuruVJ"}
{"number":8992,"title":"fix: #4265 prevent double update when bind to object","body":"fix #4265 \r\n\r\nThis is a long standing issue that's been reported multiple times, see #4430 #4447 #5555 #6590, the list goes on...It was once partially fixed in #7981 but then reverted in #8114.\r\n\r\n## Main idea of the fix\r\n\r\nThe thing that bugs ppl the most is *double firing update* when bind to non-primitive value at component init phase. This fix targets this scenario specifically.\r\n\r\n```html\r\n<script> // Parent.svelte\r\nimport Child from './Child.svelte';\r\nlet value = ['foo']\r\n$: console.log('parent value', value);\r\n</script>\r\n\r\n<Child bind:value />\r\n```\r\n\r\n```html\r\n<script> // Child.svelte\r\nexport let value = ['zoo'] \r\n$: console.log('child value', value);\r\n</script>\r\n\r\n<div>{JSON.stringify(value)}</div>\r\n```\r\n\r\nI'm gonna use the term \"backflow\" to refer to the process of `child_value_binding() -> invalidate(parent_value)`. Backflow is necessary to sync child value back to parent. But it could be unnecessary in some cases. Because `safe_not_equal` conservatively invalidates non-primitive value, it's a failed guard. So this fix propose an extra flag `skip_binding` to guard against unnecessary backflow.\r\n\r\nNoted that first backflow happen at `flush -> binding_callbacks.pop()() -> bind -> child_value_binding`. By this time we've completed init phase, and every component is `ready`. \r\n\r\nNow focus on init phase and consider the following cases (✅ = necessary backflow,  ❌ = unnecessary backflow)\r\n\r\n1. ✅ first to tick off the obvious, when Parent value is `undefined`, Child shall backflow to populate Parent value.\r\nBelow we discuss cases where Parent pass non-undefined down to Child.\r\n2. ❌ Child does not touch the value at all, then value is already at-sync after init, no backflow needed. \r\nThis is also THE MOST COMMON USE CASE which current PR seek to fix.\r\n3. ✅ Child reactively (within `$:` statements) modifies the value, during `child.$$.update()` call, need backflow.\r\n4. ✅ Child imperatively modifies the value at init phase, during `init -> instance` call, need backflow. \r\nThis case should be further broken down to 2 sub-cases:\r\n  4.1. Immutable modification, value's reference changed, e.g. `export let value; value = [\"default\"];`\r\n  4.2. Mutable modification, e.g. `export let value; value.foo = \"bar\";`\r\n\r\n<del>Proposed fix correctly handles backflow in all above cases EXCEPT sub-case 4.2.</del>\r\n\r\nProposed fix correctly handles backflow in all above cases.\r\n\r\n## Implementation\r\n\r\nChanges made to three places:\r\n1. The `$$invalidate` runtime function, when `ready == false` sets `$$.bound[i] = true` in order to cater for case 3. This mark is essentially the same as `$$.dirty` which is not available before `ready`.\r\n2. The `bind` runtime function triggers the first backflow during `flush`, here I pass a `skip_binding` flag to `child_value_binding`. The flag is determined by `$$.bound[i]` dirty mark. This takes care of case 2 and 3.\r\n3. The generated `child_value_binding` function, I add `if (!#skip_binding || ${lhs} !== #value)` guard. It prevents the unnecessary backflow of case 2, also `${lhs} !== #value` check allows backflow for case 1 and 4.1. \r\n\r\nCase 4.2. needs backflow <del>but is unfortunately left out, because a) `$$invalidate` is not called, b) `${lhs} !== #value` fails to detect, we don't have the tool to distinguish this case.</del> and is now detected by inserting `$$invalidate` call on prop assignment at `instance` top level context.\r\n\r\n---\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-01T08:53:30Z","created_at":"2023-07-18T13:34:25Z","creator_user_login":"hackape"}
{"number":8988,"title":"de-bloating custom-elements by using Constructable Stylesheets","body":"### Describe the problem\n\nEvery time a custom element with styling is created it creates a <style> tag what also adds a dom element.\r\nCustom elements already adds more dom elements so allowing to remove one  that is mostly there always would realy make a big difference in dom node creation and also performance.\r\n\r\nif any more information needed i can help :)\n\n### Describe the proposed solution\n\nSolution is like LIT implementing usage of Constructable Stylesheets.\r\nConstructable Stylesheets are implementend now in every browser.\r\nsvelte beeing all about performance this would be a great step in the right direction for custom element creation with svelte\r\n\r\npreventing an excessive DOM size: https://developer.chrome.com/docs/lighthouse/performance/dom-size/\r\nInformation on Constructable Stylesheets: https://web.dev/constructable-stylesheets/ and https://github.com/WICG/construct-stylesheets/blob/main/explainer.md\n\n### Alternatives considered\n\nnot really \n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-18T09:02:04Z","created_at":"2023-07-18T08:32:49Z","creator_user_login":"pascalvos"}
{"number":8987,"title":"context api not working with custom-elements","body":"### Describe the bug\r\n\r\ni tried to implement https://svelte.dev/docs/svelte#getcontext with custom elements after the svelte 4 release.\r\ni thought it was fixed in #3422 and #8457 but it looks like its still doesnt work.\r\n\r\nif i can help in any way let me know, because this currently blocks my implementation\r\n\r\nif this cant be fixed it might be an idea to update https://svelte.dev/docs/custom-elements-api#caveats-and-limitations until it is fixed \r\n\r\n### Reproduction\r\n\r\nreproduction of the actual code using svelte 4.0.5 https://stackblitz.com/edit/vitejs-vite-gk4rsr\r\nin uc-button-group.svelte i commented out these lines\r\n<!-- <UcButton value=\"1\" operator=\"decrement\">Button value </UcButton> -->\r\n<!-- <UcButton value=\"2\" operator=\"increment\">Button value </UcButton> -->\r\nthey use the svelte component directly and work without any problem :)\r\n\r\ni made the reproduction on stackblitz because some issues with the repl i already reported in discord :)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.3.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\n    Memory: 1.39 GB / 32.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.16.0 - ~/.nvm/versions/node/v18.16.0/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.5.1 - ~/.nvm/versions/node/v18.16.0/bin/npm\r\n  Browsers:\r\n    Chrome: 114.0.5735.198\r\n    Chrome Canary: 117.0.5895.0\r\n    Safari: 16.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2023-07-18T17:16:16Z","created_at":"2023-07-18T08:19:26Z","creator_user_login":"pascalvos"}
{"number":8978,"title":"Flag to wait for out transition to finish before 'in' start","body":"### Describe the problem\r\n\r\nHaving an element inside a key tag plays both its in and out transition. I feel most of the time you want them to play after each other and not simultaneously. It can easily be done by setting the delay on the in transition for the duration of the out transition, however when the duration varies for example on the text's length a lot of extra steps are needed to overcome this challange and does not scale at all. \r\n\r\nExample: \r\n```\r\n{#key random_text}\r\n    <h3 out:typewriter in:typewriter> {random_text} </h3>\r\n{/key}\r\n```\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nAn easy solution would be to add a flag to the in transition to wait for the out transition.\r\n\r\n\r\n### Alternatives considered\r\n\r\nAnother fix could be to have the old value of the key accessable in the block, then the same calculations could be performed and it would give more flexibility. \r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-07-23T21:33:01Z","created_at":"2023-07-15T12:17:32Z","creator_user_login":"Moonlander1"}
{"number":8975,"title":"fix: define `role=\"application\"` as an interactive ARIA role","body":"Interactive elements that are not described by existing ARIA widget roles should have `role=\"application\"`, and should resolve warning [no-interactive-element-to-noninteractive-role](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-interactive-element-to-noninteractive-role.md)\r\n\r\nFor example, the `Cropper` component from [Svelte Easy Crop](https://github.com/ValentinH/svelte-easy-crop) does match any of the other ARIA widget role descriptions.\r\n\r\nSee spec: https://www.w3.org/TR/wai-aria-1.1/#application\r\n\r\nFixes #8943\r\n\r\n","state":"open","updated_at":"2023-07-20T10:27:57Z","created_at":"2023-07-15T03:37:31Z","creator_user_login":"oscarhermoso"}
{"number":8973,"title":"Adopt the Explicit Resource Management API","body":"### Describe the problem\r\n\r\nThe [Explicit Resource Management API](https://github.com/tc39/proposal-explicit-resource-management) is nearing Stage 4 and is implemented in TypeScript 5.2\r\n\r\nI propose that Svelte 5 make use of patterns added by this proposal.\r\n\r\n### Describe the proposed solution\r\n\r\nSpecifically, we could use `Symbol.dispose` instead of `$destroy`\r\n```typescript\r\nconst svelteComponent = new MyComponent(options);\r\nsvelteComponent.$destroy();\r\n\r\n// becomes\r\n\r\nconst svelteComponent = new MyComponent(options);\r\nsvelteComponent[Symbol.dispose]();\r\n```\r\n\r\n\r\nAdditionally, `using` declarations in the global scope of a script tag should be tied to the component's lifecycle.\r\n```typescript\r\nusing resource = createResource();\r\n\r\n// same as\r\n\r\nconst resource = createResource();\r\nonDestroy(() => {\r\n    resource[Symbol.dispose]();\r\n});\r\n```\r\n\r\n### Alternatives considered\r\n\r\nNA\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-07-17T20:12:51Z","created_at":"2023-07-14T19:57:26Z","creator_user_login":"TheCymaera"}
{"number":8963,"title":"Allow slot content in custom elements when shadow root is disabled","body":"### Describe the problem\n\nSince slots are already supported when compiling to custom elements (via shadow DOM) and Svelte can now natively utilize the light DOM (thanks to #8457), one might naturally also want slot support when in the light DOM. This is not currently possible, but  would be awesome if Svelte had a way of natively supporting slot content when not using a shadow root.\r\n\r\nFor example, given `ExampleElement.svelte`:\r\n```svelte\r\n<svelte:options\r\n\tcustomElement={{\r\n\t\ttag: 'example-element',\r\n\t\tshadow: 'none',\r\n\t}}\r\n/>\r\n\r\n<h1>My Heading</h1>\r\n<slot/>\r\n```\r\n\r\nAnd `index.html` containing:\r\n```html\r\n<example-element>\r\n\t<p>Hello world!</p>\r\n</example-element>\r\n```\r\n\r\nThe final rendered version in the light DOM might look _**something**_ like this:\r\n\r\n```html\r\n<example-element>\r\n\t<h1>My Heading</h1>\r\n\t<p>Hello world!</p>\r\n</example-element>\r\n```\r\n\r\n**Note:** This is a reopening/variant of #8686 where this was originally reported as a bug.\r\n\n\n### Describe the proposed solution\n\nTaking inspiration from experimentation already done in [`svelte-retag`](https://github.com/patricknelson/svelte-retag/), I'd propose two approaches, each of which are necessary depending on how the compiled component is shipped (e.g. `esm` or `umd`/`iife`)\r\n\r\n1. Module + UMD/IIFE: Parse out elements with named `slot=\"...\"` attributes and populate into Svelte component slots. Use remaining content as \"default\" content for the default slot.\r\n2. UMD/IFFE only: Do the above, but also watch for changes using `MutationObserver` since the custom `HTMLElement` will connect early while the parser appends new nodes (i.e. slot content) as it moves across the DOM. Practically, this can be accomplished by temporarily (or permanently) isolating rendered component HTML to prevent recursion. `svelte-retag` accomplishes this by tucking that HTML into a no-op custom element called `<svelte-retag>` where we can be certain that rendered HTML lives in a separate hierarchy that will not be confused with newly appended child nodes as the parser progresses.\r\n\r\nOne might also want to ensure they account for changes to slot content beyond `document.readyState === 'complete'` (`svelte-retag` doesn't yet do this so I haven't tried it yet). But this is just one possible approach.\n\n### Alternatives considered\n\nThis concept is already readily [demonstrated here](https://svelte-retag.vercel.app/) in Svelte using light DOM custom elements via [`svelte-retag`](https://github.com/patricknelson/svelte-retag/).\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-13T07:20:49Z","created_at":"2023-07-13T01:34:47Z","creator_user_login":"patricknelson"}
{"number":8964,"title":"Accessibility warnings that rely on event directives are wrong","body":"### Describe the bug\r\n\r\nThis perfectly legit code...\r\n```svelte\r\n<div on:click={handler}><slot/></div>\r\n```\r\n\r\n...produces these a11y errors...\r\n\r\n```\r\nA11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event. svelte(a11y-click-events-have-key-events)\r\nA11y: <div> with click handler must have an ARIA role svelte(a11y-no-static-element-interactions)\r\n```\r\nThis is wrong in two ways:\r\n\r\n- Events propagate. Simply attaching an event to a non-interactive element has no effect _in and of itself_ on a11y or the semantics on which AT relies. (If it does -- if user agents do indeed infer the role of an element from the event listeners that have been attached to it -- then I'm wrong. But that would be...ugh...their problem?)\r\n- More importantly. The a11y errors and suggestions Svelte displays encourage, rather than discourage, bad a11y practices. \"Sure buddy, it's ok to make your div a link. Just mess around until you hit on the right combination.\" This can easily lead to the following...\r\n\r\n```svelte\r\n<div on:click={handler} role=\"button\" tabindex=\"0\" on:keyup={() => {}}>\r\n  <slot/>\r\n</div>\r\n```\r\n...which passes Svelte's a11y linting with flying colors even though it is obviously tripe. Less obviously, if my intention was  simply to have the `div` listen for clicks, rather than turn it into a button, then the linter, rather than helping, has done significant harm, both to the accessibility of the end product and to my (the developer's) understanding of a11y and javascript.\r\n\r\nFix: A11y linting rules that rely on Svelte event directives (e.g. `on:eventName`) should be gotten rid of. There's no way (at least that I can think of) to divine what the presence of a listener implies. \r\n\r\nThere's an [issue on this repo](https://github.com/sveltejs/language-tools/issues/650) where folks have been talking about ways to disable a11y warnings in VsCode, etc. It's been open for two and a half years. Wouldn't it be better just to fix the the underlying problems rather than continue to tell people that they can skirt around the defects by doing this, that and the other?\r\n","state":"open","updated_at":"2023-08-25T23:17:52Z","created_at":"2023-07-13T00:18:12Z","creator_user_login":"cdcarson"}
{"number":8958,"title":"Relax `bind:group` to accept any elements","body":"### Describe the problem\r\n\r\n```svelte\r\n<style>\r\nbutton {\r\n\tdisplay: block;\r\n\tmargin-top: 1em;\r\n}\r\n</style>\r\n\r\n<script>\r\nconst items = [\r\n\t'Apple',\r\n\t'Banana',\r\n];\r\n\r\nlet buttons = [];\r\n</script>\r\n\r\n{#each items as item}\r\n\t<button bind:group={buttons}>{item}</button>\r\n{/each}\r\n```\r\n\r\n```\r\n'group' is not a valid binding on <button> elements (18:9)\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nRelax `bind:group` so it's possible to access HTMLButtonElement. This way we can call `.focus()` when user presses arrows (in a menu).\r\n\r\n### Alternatives considered\r\n\r\n~~Wrapping it in a parent and using `parent.children`.~~ This won't work when buttons are grouped into sections.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-08-02T15:22:25Z","created_at":"2023-07-12T09:58:27Z","creator_user_login":"szmarczak"}
{"number":8950,"title":"fix: improve types for props when using Client-side component API","body":"fix for https://github.com/sveltejs/language-tools/issues/1578\r\n\r\nIn theory this is a breaking change. So maybe it needs to wait for version 5 of `Svelte`.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-07-10T11:15:03Z","creator_user_login":"ivanhofer"}
{"number":8949,"title":"Binding focus state to elements","body":"### Describe the problem\n\nI hope i'm not missing something but it would be cool if we were able to bin variables to focusable elements abd find out this way if there focused or not, furthermore if we set this bound variable to true it should focus this element and blur in case its turned to false.\n\n### Describe the proposed solution\n\nA property like this `bind:focused`\n\n### Alternatives considered\n\nUsing the focus and blur functions for focusable elements and the activeElement property of the document.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-08-07T05:58:43Z","created_at":"2023-07-10T08:31:01Z","creator_user_login":"Maximinodotpy"}
{"number":8944,"title":"Allow css variables in transitions","body":"### Describe the problem\r\n\r\nSome transitions already allow the use of values in css units like vh and vw. But that value needs to be declared as a javascript string, which creates the need for variable manipulation and the creation of multiple event handlers to react to states that could be easily observable with css\r\n\r\n### Describe the proposed solution\r\n\r\nDetect javascript variables, extract using getComputedStyle and use the css values\r\n\r\n### Alternatives considered\r\n\r\nIn this example I added the following lines in the split_css_unit function, and added the computed style as a second parameter\r\n```javascript\r\nconst cssVariableName = typeof value === 'string' && value.match(/var\\((--(.*))\\)/);\r\nif (cssVariableName) value = style.getPropertyValue(cssVariableName[1]);\r\n```\r\nIn the example the changes occur only with the size of the viewport, but considering the possible combinations of css selectors it is something much more convenient to react using css than javascript\r\n\r\n![Code_EmBfg8vhEq](https://github.com/sveltejs/svelte/assets/84819630/92a48c85-12da-4909-aa46-8593f976f400)\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-07-10T00:14:43Z","created_at":"2023-07-09T23:49:59Z","creator_user_login":"Thiagolino8"}
{"number":8943,"title":"Allow `role=\"application\"` as an interactive ARIA role","body":"### Describe the problem\r\n\r\nUnable to resolve accessibility warnings ([no-interactive-element-to-noninteractive-role](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-interactive-element-to-noninteractive-role.md)) for elements that are not described by [exisiting ARIA widget roles](https://www.w3.org/TR/wai-aria-1.1/#widget_roles)\r\n\r\nFor example, the `Cropper` component from [Svelte Easy Crop](https://github.com/ValentinH/svelte-easy-crop) does match any of the other ARIA widget role descriptions.\r\n\r\n### Describe the proposed solution\r\n\r\nThis can be resolved by also allowing `role=\"application\"` as an interactive role.\r\n\r\nThis is allowed by [the spec](https://www.w3.org/TR/wai-aria-1.1/#application):\r\n\r\n> When there is a need to create an element with an interaction model that is not supported by any of the WAI-ARIA `widget` roles, authors **_MAY_** give that element role `application`.\r\n\r\nAnd also an see example of it out in the wild:\r\n\r\nhttps://www.darins.page/articles/screen-readers-drag-drop-1#what-were-testing\r\n\r\n### Alternatives considered\r\n\r\nN/A\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-07-13T02:48:06Z","created_at":"2023-07-09T07:14:33Z","creator_user_login":"oscarhermoso"}
{"number":8941,"title":"Use injection key to type setContext and getContext","body":"### Describe the problem\r\n\r\nCurrently `getContext` returns `unknown` if no explicit type is provided.\r\n<img width=\"246\" alt=\"image\" src=\"https://github.com/sveltejs/svelte/assets/29802592/6a43ce63-2277-466e-b399-943d726751b1\">\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nTaking inspiration from [`svelte-typed-context`](https://www.npmjs.com/package/svelte-typed-context), `getContext` can accept an ~~`InjectionKey<T>`~~`ContextKey<T>` and return `T`:\r\n<img width=\"329\" alt=\"image\" src=\"https://github.com/sveltejs/svelte/assets/29802592/f0184feb-031f-41ac-bd13-606769af1c00\">\r\n\r\nThis will improve type safety and can be done in a backwards compatible way.\r\n\r\nThe implementation would be just to add a new signature to `getContext`, `setContext` and `hasContext`\r\n```ts\r\nexport interface ContextKey<T = unknown> { }\r\nexport function setContext<T>(key: ContextKey<T>, context: T): void\r\n// getContext ...\r\n// hasContext ...\r\n// check for full implementation here:\r\n// https://github.com/KamenKolev/svelte-typed-context/blob/master/index.ts\r\n// (published npm package does not include `hasContext`, so install only from github)\r\n```\r\n\r\n\r\n### Alternatives considered\r\n\r\n-\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-08-13T08:13:17Z","created_at":"2023-07-08T16:31:32Z","creator_user_login":"olehmisar"}
{"number":8936,"title":"Typescript Error when defining custom elements as a consumer in Svelte v4","body":"### Describe the bug\r\n\r\nWhen enabling custom elements compiler option, defining a custom element tag name using `Component.element` (as per the v4 docs) produces a type error.  The `__SvelteComponent_` type cannot resolve `element`.\r\n\r\n### Reproduction\r\n\r\nStackblitz: https://stackblitz.com/edit/vitejs-vite-3sffk2?file=src%2Fmain.ts\r\n\r\n### Logs\r\n\r\n```shell\r\n❯ npm run check\r\n\r\n> vite-svelte-ts-starter@0.0.0 check\r\n> svelte-check --tsconfig ./tsconfig.json\r\n\r\n\r\n====================================\r\nLoading svelte-check in workspace: /home/projects/vitejs-vite-3sffk2\r\nGetting Svelte diagnostics...\r\n\r\n/home/projects/vitejs-vite-3sffk2/src/main.ts:4:45\r\nError: Property 'element' does not exist on type 'typeof Counter__SvelteComponent_'. \r\n\r\ncustomElements.define(\"my-counter\", Counter.element);\r\n\r\n\r\n\r\n====================================\r\nsvelte-check found 1 error and 0 warnings in 1 file\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.0 undefined\r\n    CPU: (2) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 0 Bytes / 0 Bytes\r\n    Shell: 1.0 - /bin/jsh\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.4.2 - /usr/local/bin/npm\r\n    pnpm: 8.6.3 - /usr/local/bin/pnpm\r\n  npmPackages:\r\n    svelte: ^4.0.3 => 4.0.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-08T07:22:17Z","created_at":"2023-07-07T21:14:11Z","creator_user_login":"afreidz"}
{"number":8931,"title":"docs: improve component binding examples","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-17T07:28:14Z","created_at":"2023-07-06T17:30:10Z","creator_user_login":"Pacheco95"}
{"number":8930,"title":"fix: bind:this on changing transitioning element","body":"Fixes https://github.com/sveltejs/svelte/issues/8891\r\n\r\nWhen an outro starts, a bind:this variable is now nulled immediately, instead of when the element is destroyed. This is a breaking change. \r\n\r\nThis makes the behaviour consistent with, and appropriate for, the case where the bind:this value is swapping from one transitioning element to another (such as in an if/else block), and avoids the bug in that situation where the outroing component nulls the bind:this variable which has since been bound to another element. This bug specifically breaks snapshotting in SvelteKit when using transitions on pages.\r\n\r\nThe new `binding-this-transition-js-if-else-block` test highlights the bug most simply (in practice the bug is more subtle - since the unwanted nulling doesn't cause the element to be invalidated, it isn't usually until some other change occurs that the change in the value is reactively apparent).\r\n\r\nThings to do still (if appropriate):\r\n\r\n- Three existing transition tests, that relied on bind:this not being nulled for an outroing component, have been modified so that they succeed. They are less thorough as a result though, and so further changes may be appropriate to those tests. \r\n- It may also be suitable to add a test that proves that unmounting an element with a local transition, but such that the transition doesn't fire, also causes bind:this to be nulled appropriately (I am not sure if any existing tests would prove that.)\r\n- Also, in `bind_this.js`, the branch for when there are contextual_dependencies, would likely need similar changes if this approach is appropriate.\r\n\r\nBecause this pull request affects code that is possibly undergoing considerable change for Svelte 5, as well as it being a breaking change, it may be appropriate for this pull request to inform that process rather than be used directly.","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-07-06T16:47:57Z","creator_user_login":"robertadamsonsmith"}
{"number":8923,"title":"Don't self-close void elements, because invalid when using HTML5","body":"The [W3C validator](https://validator.w3.org/) complains about SvelteKit's built HTML, given it uses an HTML5 doc type.\r\n\r\n![w3c](https://github.com/sveltejs/prettier-plugin-svelte/assets/50032291/f9c8f839-369a-4134-9b78-32c9f441951e)\r\n\r\nThese items clean up after removing the closing slash from sample HTML input.  \r\n\r\nBrowsers also automatically convert it from that format into correct HTML format after interpreting it, but it'd be good to have prettier aligned with the correct version.\r\n\r\nFrom MDN: https://developer.mozilla.org/en-US/docs/Glossary/Void_element \"Self-closing tags (`<tag />`) do not exist in HTML. The void elements are as follows\":\r\n\r\n- [\\<area>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)\r\n- [\\<base>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)\r\n- [\\<br>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br)\r\n- [\\<col>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col)\r\n- [\\<embed>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed)\r\n- [\\<hr>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr)\r\n- [\\<img>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\r\n- [\\<input>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\r\n- [\\<link>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)\r\n- [\\<meta>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta)\r\n- [\\<param>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param) Deprecated\r\n- [\\<source>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source)\r\n- [\\<track>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)\r\n- [\\<wbr>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr)\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-07-09T02:12:08Z","created_at":"2023-07-06T01:05:38Z","creator_user_login":"jasongitmail"}
{"number":8908,"title":"fix `::selection` in chrome","body":"### Describe the bug\n\nI'm tiered of re-writing and reporting the same issue to multiple services about the use of root variables inside of `::selection`\r\nSo i'm just going to link to same github issue that explains it:\r\n\r\nhttps://github.com/primer/css/pull/2472\r\nhttps://www.azabani.com/2022/09/01/meet-the-css-highlight-pseudos.html#accessing-global-constants\r\n\r\nit's very annoying to not be able to select anything.\n\n### Reproduction\n\nalways in chrome with exp flag.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nchrome\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-10T19:54:27Z","created_at":"2023-07-04T15:25:41Z","creator_user_login":"jimmywarting"}
{"number":8907,"title":"fix: transition slide not smooth with min height and min width","body":"### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n\r\ncloses: #8533\r\n\r\ntransition slide will become not smooth with min-height and min-width.\r\nhttps://svelte.dev/repl/90fdf9a3faa645aaa1e18201cf29e9cf?version=4.0.3\r\n\r\n\r\ntransition slide not smooth when with min height or min width.\r\n\r\nI think we can set `min-height` or `min-width` to be 0 to keep slide smooth when run animation.\r\n\r\nI didn't add a test case because I don't know how to test this case.\r\n\r\nI'd be happy to add test cases, if any suggestions can be given.\r\n\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-07-04T15:11:28Z","creator_user_login":"xxkl1"}
{"number":8905,"title":"Clarification on the behavior of two-way bindings","body":"### Describe the problem\n\nThe documentation regarding two-way bindings for component properties is very vague. It says you can [bind to component props using the same syntax as for elements](https://svelte.dev/docs/component-directives#bind-property), but doesn't mention how these bindings interact with the parent component and other reactive variables.\r\n\r\nI created some test apps and stepped through the debugger until I had a decent idea of what was happening. Here's my understanding of what goes on in this [REPL](https://svelte.dev/repl/a20240416ccb4513a8a5b89c1104d2c9?version=4.0.3):\r\n\r\nApp.svelte\r\n\r\n```html\r\n<script>\r\n\timport Inner from \"./Inner.svelte\";\r\n\r\n\tlet value = { v: \"initial\" };\r\n\r\n\t$: console.log(\"Outer.value.v\", value.v);\r\n</script>\r\n\r\n<Inner bind:outValue={value} />\r\n```\r\n\r\nInner.svelte\r\n\r\n```html\r\n<script>\r\n\tlet localTrig = 0;\r\n\texport let outValue;\r\n\r\n\tfunction onClick() {\r\n\t\tconsole.log(\"click\");\r\n\t\tlocalTrig++;\r\n\t}\r\n\r\n\t$: outValue = { v: `abc${localTrig}` };\r\n\t$: console.log(\"Inner.outValue.v\", outValue.v);\r\n</script>\r\n\r\n<button on:click={onClick}>Click</button>\r\n```\r\n\r\nFor readability, component.\\$$.dirty is not an array of bitfields but a Set of strings and component.\\$$.bound uses strings (prop names) as keys.\r\n\r\n```\r\nButton clicked in Inner\r\n    $$invalidate for local reactive variable \"localTrig\"\r\n        dirty_components.push(Inner)\r\n        schedule_update()\r\n        Inner.$$.dirty.add(\"localTrig\")\r\n\r\nMicrotask to update dirty components is called (flush)\r\n    dirty_components, flushidx: [->Inner<-]\r\n        .$$.dirty.has(\"localTrig\")\r\n            $$invalidate for exported variable \"outValue\"\r\n                Two-way binding detected, call $$.bound[\"outValue\"](outValue)\r\n                    $$invalidate for App's reactive variable \"value\"\r\n                        dirty_components.push(App)\r\n                        app.$$.dirty.add(\"value\")\r\n                .$$.dirty.add(\"outValue\")\r\n        .$$.dirty.has(\"outValue\")\r\n            console.log(...)\r\n\r\n    dirty_components, flushidx: [Inner, ->App<-]\r\n        .$$.dirty.has(\"value\")\r\n            console.log(...)\r\n    \r\n    app.$$.fragment.p\r\n        inner_changes = {}\r\n        !updating_outValue && dirty.has(\"value\")\r\n            updating_outValue = true\r\n            inner_changes[\"outValue\"] = value\r\n            add_flush_callback(() => updating_outValue = false)\r\n        inner.$set(inner_changes)\r\n            Check that inner_changes is not empty\r\n            inner.$$.skip_bound = true\r\n            inner.$$set(inner_changes)\r\n                $$invalidate for Inner's exported variable \"outValue\"\r\n                    Two-way binding detected but skipped due to being called by SvelteComponent.$set\r\n                    dirty_components.push(Inner)\r\n                    inner.$$.dirty.add(\"outValue\")\r\n            inner.$$.skip_bound = false\r\n    \r\n    dirty_components, flushidx: [Inner, App, ->Inner<-]\r\n        .$$.dirty.has(\"outValue\")\r\n            console.log(...)\r\n    \r\n    Run flush callbacks:\r\n        updating_outValue = false\r\n```\r\n\r\nI'd like to know how much of this is:\r\n\r\n- Wrong\r\n- Internal behavior that shouldn't be relied upon\r\n- Guaranteed to keep working after an update\r\n\r\nAnd if #5689 and #8184 ever get fixed, will it be considered a breaking change or a \"you brought this on yourself by relying on unspecified behavior\" change?\r\n\r\nThe second [REPL](https://svelte.dev/repl/5b2230c42d1149308488e83168970e86?version=4.0.3) tests how many updates can be sent between the parent and child components, and the answer seems to be two updates from the child and one update from the parent.\r\n\r\nNot limiting the number of updates would allow something that looks a bit like a `useEffect` cascade if you squint, so this might be intentional. The presence of `updating_outValue` in App's `$$.fragment.p` also suggests it's intentional, but it might serve another purpose. Since this isn't documented, I'd still like a clarification.\r\n\r\nThe third [REPL](https://svelte.dev/repl/08ea41dfd0d046d69e8f32575959460b?version=4.0.3) tests how the order of assignments in code outside the child component's `$$.update` function (for example, in an event handler) affects the order of reactive statements in the parent and the child.\r\n\r\nSince bound variables are updated synchronously at the time of the assignment, the order of reactive variable assignments affects the order of component updates. Assigning a bound variable first will cause the parent component to be updated first, and assigning some other reactive variable will cause the child to be updated first.\r\n\r\nThe fourth [REPL](https://svelte.dev/repl/bf123754ac464714b57603b08493d3aa?version=4.0.3) demonstrates how assignments to bound variables can be detected before the parent's `$$.update` function runs by binding the child's prop to a store with a custom `set` function.\r\n\n\n### Describe the proposed solution\n\nDocumentation addressing the following points (i.e. a guarantee the documented behavior won't silently break when the internals change):\r\n\r\n- What happens when a component with a `bind:` prop is mounted by a parent component? Is it guaranteed to cause a reactive update for the parent, even if the child doesn't change the value?\r\n- What happens when a child component updates a bound variable?\r\n  - If updating outside a reactive statement, do the child's reactive statements run first or do the parent's?\r\n  - Can the parent observe intermediate (i.e. not the final update to this particular variable in `$$.update`) changes to bound reactive variables?\r\n  - If not, what happens when the parent component receives an event? Does it see the old values, or the new ones? Currently, this doesn't matter since the parent _can_ observe changes, but if the behavior of two-way bindings is changed, this is something that should be addressed.\r\n  - The order of `on:` and `bind:` props on \"native\" elements affects which version of the values are available to the event handlers. Currently, this does not apply to Svelte components.\r\n- Can the parent and child use two-way binding to update each other's reactive variables in a potentially infinite loop? If not, what's the limit?\r\n\n\n### Alternatives considered\n\nN/A - this feature request is for documentation regarding two-way binding, and whether or not the current observable behavior is likely to change after an update.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-07-04T12:56:17Z","created_at":"2023-07-04T12:19:12Z","creator_user_login":"mpopovic4116"}
{"number":8891,"title":"Transitions cause bind:this bindings to be incorrect","body":"### Describe the bug\n\nWhen bind:this is used on an element with a transition, and the element is subsequently removed, the bound value is not nulled correctly, but may become null at a later point on time instead such as when the element is invalidated for some other reason.\r\n```\r\n{#if show}\r\n\t<span bind:this={displayed_element} transition:fade>Element Content</span>\t\t\r\n{/if}\r\n```\r\nWhen  `show` changes to false, then `displayed_element` does not become null when the transition starts, or even when it ends. Instead, it only becomes null when something else later causes the element to be invalidated (such as changing an unrelated variable).\r\n\r\nThis can be seen here: https://svelte.dev/repl/24ea8a9355584e8e9c1ad6b4f31bb0df?version=4.0.1\r\n\r\nLooking at the compiled code, the problem is that the binding function (called `span_binding` in the repl example) is called when the element is destroyed on `d()` (not when the transition starts in `o()` as I would have expected), and then the function added to the `binding_callbacks` stack doesn't get called until something is later invalidated.\r\n\r\nThis can create the additional problem of incorrectly nulling the bound value, in situations where the variable has since been bound to another element. This specifically stops SvelteKit snapshots from working along with page transitions: https://github.com/sveltejs/kit/issues/10224\r\n\r\nI think that the solution might be to, in the case of blocks with an `o()` and `i()`, move the `span_binding(null)` call from `d()` to `o()`, and possibly add an additional `span_binding(span)` call to `i()` (so that the bound value is still correct when an outro is cancelled). I don't know if the `binding_callbacks` stack would then be reliably processed though, and I don't understand the compiler well enough to have a stab at implementing such a fix myself (or indeed if it would even be appropriate, considering that the compiler is undergoing a rewrite currently.)\n\n### Reproduction\n\nhttps://svelte.dev/repl/24ea8a9355584e8e9c1ad6b4f31bb0df?version=4.0.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n4.0.1\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-06-30T17:03:36Z","created_at":"2023-06-30T17:03:36Z","creator_user_login":"robertadamsonsmith"}
{"number":8886,"title":"feat(site): New Search","body":"\n### Before submitting the PR, please make sure you do the following\n\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\n- [ ] This message body should clearly illustrate what problems it solves.\n- [ ] Ideally, include a test that fails without this PR but passes with it.\n\n### Tests and linting\n\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-06-30T12:32:39Z","creator_user_login":"PuruVJ"}
{"number":8885,"title":"Allow disabling warning about props which look like directives","body":"Would be nice too have a way to disable that specific warning. In svelte-native we use `prop:` and `ios:` and `android:`. Maybe there could even be a way to define which props would be allowed without warning","state":"open","updated_at":"2023-07-01T12:13:44Z","created_at":"2023-06-30T11:29:51Z","creator_user_login":"farfromrefug"}
{"number":8861,"title":"Docs: REPL history entry broken","body":"### Describe the bug\n\nThe REPL page does not show when navigating there via browser back/forward.\n\n### Reproduction\n\n- Navigate: \"Docs\" => \"REPL\" => \"Blog\"\r\n- Browser back (URL updates, page does not)\r\n- Browser back (now back at \"Docs\")\r\n- Browser forward (URL updates, page does not)\r\n- Browser forward (now back at \"Blog\")\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nTested on:\r\nWin 10, 64bit\r\nFirefox 113.0.2 (64-bit) & Chrome 114.0.5735.134 (Official Build) (64-bit)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-27T23:21:18Z","created_at":"2023-06-27T16:24:20Z","creator_user_login":"brunnerh"}
{"number":8857,"title":"Animations display incorrectly on SVGs with a viewbox set","body":"### Describe the bug\n\nI'm trying to animate a list of SVG elements; fly in works fine, but when I start inserting into the middle of the list it's completely wrong - the animation starts from the top of the whole list, rather than the previous position.\r\n\r\n\r\nFor now, I have gotten around this by simply not specifying a view box - I have no idea why this makes a difference, but it does. This is quite annoying however as I cannot size my SVGs properly - advice on further work arounds would also be appreciated.\n\n### Reproduction\n\nA minimal example on svelte playground here:\r\nhttps://svelte.dev/repl/31c7bc6e76324c3c8ea013d5fd62e78a?version=4.0.0\n\n### Logs\n\n```shell\nNo logs, nothing technically goes wrong.\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (6) x64 Intel(R) Core(TM) i5-9400F CPU @ 2.90GHz\r\n    Memory: 5.30 GB / 15.93 GB\r\n  Binaries:\r\n    Node: 16.15.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 9.6.7 - C:\\Program Files\\nodejs\\npm.CMD\r\n    pnpm: 8.5.1 - ~\\AppData\\Local\\pnpm\\pnpm.EXE\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1848.0), Chromium (114.0.1823.58)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    svelte: ^3.55.0 => 3.59.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-27T14:59:17Z","created_at":"2023-06-27T12:08:32Z","creator_user_login":"JakeTrevor"}
{"number":8850,"title":"Add a `component` scope to transitions","body":"### Describe the problem\n\nIt would be useful to have a `component` scope for transitions so that we can limit our transitions to the component.\r\n\r\nThis would let us be confident how a transition will behave without knowing anything about how the component is being used.\r\n\r\nThe issue with `global` scope is the behaviour depends on whether the component is inside a block or not.\r\nWith `local` scope, we cannot animate within nested blocks.\r\n\r\nI've created a REPL playground:\r\n\r\nhttps://svelte.dev/repl/30f6e9d08aa2466daab7eaa0f739076f?version=4.0.0\r\n\r\nAnd recorded a short video explaining the idea / issue:\r\n\r\nhttps://www.loom.com/share/a25fc70f3987474ea3fbe647e1716a10\n\n### Describe the proposed solution\n\nAdding `transition:slide|component` that limits the scope of transitions to the current component.\n\n### Alternatives considered\n\nNone\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-24T12:30:24Z","created_at":"2023-06-26T12:20:48Z","creator_user_login":"oodavid"}
{"number":8846,"title":"fix: refactor 'invalidate' to work with store variables that are not first on object destructuring","body":"Fixes #8559 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-06T15:59:49Z","created_at":"2023-06-26T02:54:40Z","creator_user_login":"ngtr6788"}
{"number":8842,"title":"The new version of the document on the official website is not as good as the old version","body":"### Describe the problem\n\nThe new version of the document on the official website is not as good as the old version. Now it is difficult to do this. The old version of the document is clear at a glance, and you can see what interface you want at a glance.\n\n### Describe the proposed solution\n\nHope to restore the old version of the document, the api is clear at a glance\n\n### Alternatives considered\n\nhttps://www.svelte.cn/\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-06-29T07:57:06Z","created_at":"2023-06-25T10:20:04Z","creator_user_login":"allmors"}
{"number":8837,"title":"Update launch.json","body":"Improvements Made:\r\n\r\nAdded the \"webRoot\" property to the browser configuration to specify the web root directory as the workspace folder. Modified the \"program\" property in the server configuration to use an absolute path for the start.js script. Added the \"restart\" property to the server configuration to enable automatic restarts. Set the \"console\" property to \"integratedTerminal\" for the server configuration to use an integrated terminal for debugging. These improvements aim to enhance the functionality and usability of the launch configurations. Adjust the paths and properties according to your project's structure and requirements.\r\n\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests and linting\r\n\r\n- [ ] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-06-24T17:20:37Z","creator_user_login":"KARTHIK07GUPTA"}
{"number":8826,"title":"Svelte 4.0.0 custom-element build bundle size is way larger than Svelte 3.58.0","body":"### Describe the bug\n\nI created a plugin as a custom element with **Svelte 3** it was generating a small bundle size around `70kb` but after migration to **Svelte 4** its now around `120kb`, that's almost double the size .. nothing changed at all just svelte version.\r\n\r\nI provided a quick example from svelte's own examples that's generating `22.67kb` with **Svelte 3** and `27.21kb` with **Svelte 4** .. and added sass support and imported a few sass modules from bootstrap just for testing purposes.\n\n### Reproduction\n\n[REPL](https://svelte.dev/repl/a39326e65daf47f2b312933ade932428)\n\n### Logs\n\n```shell\nSvelte 3:\r\n✓ 8 modules transformed.\r\ndist/index.html                 0.40 kB │ gzip: 0.28 kB\r\ndist/assets/index-e5819c2c.js  22.67 kB │ gzip: 8.95 kB\r\n✓ built in 4.75s\r\n\r\nSvelte 4:\r\n✓ 29 modules transformed.\r\ndist/index.html                 0.40 kB │ gzip: 0.28 kB\r\ndist/assets/index-d63461f3.js  27.21 kB │ gzip: 9.97 kB\r\n✓ built in 5.19s\n```\n\n\n### System Info\n\n```shell\nWindows 10, Node v16.15.1, Google chrome.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-07-04T15:12:42Z","created_at":"2023-06-23T18:15:58Z","creator_user_login":"sherifsalah"}
{"number":8825,"title":"since svelte 4.0.0, wrong a11y warnings for <summary> element with click handler","body":"### Describe the bug\n\nAdding `on:click` to a `<summary>` element is causing these two warnings:\r\n\r\n```\r\nA11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event. (6:1)\r\nA11y: <summary> with click handler must have an ARIA role (6:1)\r\n```\r\n\r\nThey are both wrong, because `<summary>` is interactive and its default role is `button`: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\n\n### Reproduction\n\nhttps://svelte.dev/repl/941151732b1c4e32922a5a44232cf980?version=4.0.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-17T12:42:29Z","created_at":"2023-06-23T16:25:15Z","creator_user_login":"raythurnevoid"}
{"number":8815,"title":"Add option to specify a preferred slot","body":"### Describe the problem\r\n\r\nIt is not uncommon that a component is filled up using specific subcomponents, consider the following: \r\n```html\r\n<Modal>\r\n   <ModalHeader>...</ModalHeader>\r\n   <ModalContent>...</ModalContent>\r\n   <ModalFooter>...</ModalFooter>\r\n</Modal>\r\n```\r\n\r\nin order to ensure everything is on it's place, the `Modal` component would use slots:\r\n```html\r\n<div class=\"modal\">\r\n   <div class=\"modal_header\"><slot name=\"header\" /></div>\r\n   <div class=\"modal_content\"><slot name=\"content\" /></div>\r\n   <div class=\"modal_footer\"><slot name=\"footer\" /></div>\r\n</div>\r\n```\r\n\r\nThis would in turn mean that the original code becomes\r\n```html\r\n<Modal>\r\n   <ModalHeader slot=\"header\">...</ModalHeader>\r\n   <ModalContent slot=\"content\">...</ModalContent>\r\n   <ModalFooter slot=\"footer\">...</ModalFooter>\r\n</Modal>\r\n```\r\nwhich is not very developer friendly for the consumer of the component.\r\n\r\nIt would be nice to have a way to say that a specific component should always be rendered into a specific slot.\r\n\r\n\r\n### Describe the proposed solution\r\n\r\none possibility would be to expose this as a prop from the component, I would expect in the \"context module\" since this is a property common to all instances.\r\n```html\r\n<script context=\"module\">\r\n   export const slot = \"header\";\r\n</script>\r\n```\r\n\r\na better (subjectively) might be to allow it to be set in `svelte:options`\r\n\r\n```html\r\n<svelte:options slot=\"header\" />\r\n```\r\n\r\nThings to consider here is that maybe this should be possible to override ? Like a \"prefered slot\" option.\r\n\r\n### Alternatives considered\r\n\r\nDo nothing.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-06-23T19:30:19Z","created_at":"2023-06-23T10:19:31Z","creator_user_login":"stephane-vanraes"}
{"number":8804,"title":"feat: add a way to compile from an AST","body":"Allows the developer to compile directly from an AST, returned previously from `svelte.parse`.\r\n\r\nThere is currently no way to compile a modified AST to source code, this adds a function, `compileAST`, that provides that functionality.\r\n\r\nNotes:\r\n- The second argument to `new Component` is currently set to null, this might break something, but for our purposes seems to be working.\r\n- `@param {object}` could be typed better.\r\n- `compile` could call `compileAST` underneath so we don't have to copy/paste code.\r\n\r\nHopefully someone has useful feedback!","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-06-22T16:40:42Z","creator_user_login":"benjamingwynn"}
{"number":8791,"title":"await in keyed each triggers rerender on every update","body":"### Describe the bug\n\nAs described in the [link](https://svelte.dev/tutorial/keyed-each-blocks), if you assign a key to an `each` tag, you must maintain the current structure without re-rendering for fixed key, even if the list changes. However, the await tag in this will trigger re-rendering each time the list is updated.\n\n### Reproduction\n\nhttps://svelte.dev/repl/9dc6c277301b4ad7bb40aac0c4f0fcd5?version=3.59.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nEdge Latest, REPL Latest\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-22T09:39:48Z","created_at":"2023-06-22T09:26:31Z","creator_user_login":"seo-rii"}
{"number":8784,"title":"v4 site polish","body":"### Describe the bug\r\n\r\n- [x] update renderer (https://github.com/sveltejs/svelte/pull/8757)\r\n- [ ] ensure text in buttons on homepage hero is vertically centered\r\n- [ ] can't switch tabs on https://svelte.dev/repl/bf0a554a82a7431caec86b1e234caa52?version=4.0.0\r\n- [ ] https://github.com/sveltejs/kit/pull/10187#issuecomment-1603121591\r\n- [x] https://github.com/sveltejs/sites/issues/496\r\n- [x] check that migration guide code blocks render well for everyone after renderer is updated\r\n- [ ] do something scroll bar on windows/linux on accessibility warnings page. e.g. hide as vite does\r\n- [ ] remove glow on aside/highlight blocks\r\n- [x] test that deep links scroll properly after renderer is updated\r\n- [x] search needs to scroll to selected item. it's currently going to top of page\r\n- [x] remove text blurring when search overlay is up. just match kit.svelte.dev's current behavior\r\n- [x] double link highlighting. go to https://svelte.dev/blog and hover blog in the header\r\n- [x] copyright notice on homepage should probably span the full width on mobile\r\n- [ ] https://github.com/sveltejs/sites/issues/493\r\n- [x] https://github.com/sveltejs/svelte/issues/8816\r\n- [x] https://github.com/sveltejs/sites/issues/492\r\n- [x] console output in dark mode on https://svelte.dev/repl/148aad2fd19941e091128aaba4170b6e?version=4.0.0\r\n- [ ] when on docs, should menu open up to docs sub-menu? it's semi-convenient, but felt confusing at first that menu is different on homepage and docs page\r\n\r\nPotential new functionality\r\n- [x] mobile \"on this page\" - should be collapsed by default if included\r\n- [ ] REPL code doesn't load until switching to output tab. could load it sooner\r\n\r\n### Reproduction\r\n\r\nlocally or vercel preview\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\n`master`\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-09T09:36:45Z","created_at":"2023-06-22T00:24:16Z","creator_user_login":"benmccann"}
{"number":8765,"title":"Slot forwarding doesn't work as it were","body":"### Describe the bug\r\n\r\nSlot forwarding doesn't work as it were in 3.28. When middle component merely forwards named (or even default) slot, deeper component thinks that this slot is occupied. But it's not.\r\n\r\n### Reproduction\r\n\r\n[Correct behavior](https://svelte.dev/repl/a1721d0621fa4c119d645d5a12597d9b?version=3.28.0)\r\n[Broken in 3.29](https://svelte.dev/repl/a1721d0621fa4c119d645d5a12597d9b?version=3.59.1)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.19 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\r\n    Memory: 3.72 GB / 15.36 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/bin/node\r\n    Yarn: 3.5.0 - /usr/bin/yarn\r\n    npm: 8.19.4 - /usr/bin/npm\r\n  Browsers:\r\n    Chrome: 114.0.5735.133\r\n    Chromium: 114.0.5735.106\r\n    Firefox: 113.0.2\r\n  npmPackages:\r\n    svelte: 3.53.1 => 3.53.1 \r\n    webpack: 5.76.2 => 5.76.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2023-07-11T14:42:20Z","created_at":"2023-06-20T09:27:46Z","creator_user_login":"kkarpeev"}
{"number":8750,"title":"$: reactive statement ignored during beforeUpdate","body":"### Describe the bug\r\n\r\n$: reactive statements are ignored if values are modified in beforeUpdate.\r\n\r\n### Reproduction\r\n\r\nSolve https://learn.svelte.dev/tutorial/update\r\nand add\r\n```\r\n\t$: {\r\n\t\tconsole.log(\"autoscroll\", autoscroll)\r\n\t}\r\n\r\n```\r\nYou'll see that nothing will be logged. If you add some variable changes like\r\n```\r\n\r\nlet st = true\r\n\t$: {\r\n\t\tconsole.log(\"autoscroll\", autoscroll)\r\n\t\tst = !st\r\n\t}\r\n\r\n```\r\nyou'll see they don't change\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nhttps://learn.svelte.dev/tutorial/update on Chrome\r\n```\r\n\r\n\r\n### Severity\r\n\r\nPretty serious bug","state":"open","updated_at":"2023-07-02T22:21:42Z","created_at":"2023-06-17T10:32:03Z","creator_user_login":"ibmua"}
{"number":8726,"title":"Svelte supports rxjs observables but it is not reflected in types","body":"### Describe the bug\r\n\r\nI cannot use an `rxjs.Observable` with `derived` because svelte's `Unsubscriber` is not typed properly:\r\nhttps://github.com/sveltejs/svelte/blob/3bc791bcba97f0810165c7a2e215563993a0989b/src/runtime/store/index.ts#L6-L7\r\n\r\nIt should be typed as \r\n```ts\r\nexport type Unsubscriber = { unsubscribe(): void; } | (() => void);\r\n```\r\n\r\n### Reproduction\r\n\r\n```ts\r\nimport { of } from 'rxjs'\r\nconst value = of(0);\r\nderived(value, value => value + 2) // type error\r\n```\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nnot relevant\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-26T10:33:01Z","created_at":"2023-06-13T09:57:20Z","creator_user_login":"olehmisar"}
{"number":8707,"title":"More documentation about non working reactivity","body":"### Describe the bug\n\nI often hear from other developers having issues with *reactive statements doing nothing*. For instance:\r\n\r\n```svelte\r\n<script>\r\n\texport let data; // We use sveltekit\r\n\t\r\n\t$: me = data.me;\r\n\t$: hasThing = me.things.length > 0\r\n\r\n\tsetContext('hasThing', hasThing); // hasThing is always undefined??\r\n</script>\r\n```\r\n\r\nThis won't work, and this behavior is documented:\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/48261497/40e15589-de7d-4a13-b8e0-2eafae326429)\r\n\r\nhttps://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive\r\n\r\nI feel that this documentation is a bit underwhelming considering how often I hear about this problem.\r\n\r\nWhat could help:\r\n\r\n* A compiler warning\r\n* A dedicated tutorial page\r\n* A dedicated block in the documentation, around https://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive\r\n* An eslint rule\r\n* You name it\r\n\n\n### Reproduction\n\n-\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n-\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-08T09:43:29Z","created_at":"2023-06-08T09:43:29Z","creator_user_login":"GauBen"}
{"number":8688,"title":"Multiple checkboxes inside a component with bind group values mentioned in reactive statement","body":"### Describe the bug\n\n**Scenario**\r\nThere are 2 sets checkboxes inside the same component. \r\nThe requirement is that if all the checkboxes in the first set are cleared - then the checks on the second set of checkboxes should get cleared as well. Implemented this using a reactive statement which works.\r\n\r\n**Issue**\r\nWhen second set of checkboxes is updated - the variable bound to the first set of checkboxes seems to be getting modified as well. The actual value does not change - but any reactive statements that reference it are getting triggered.\n\n### Reproduction\n\nhttps://svelte.dev/repl/625566f3568e4b258fa4e9ba018ac9a4?version=3.59.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.4\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n    Memory: 453.67 MB / 16.00 GB\r\n    Shell: 3.3.1 - /usr/local/bin/fish\r\n  Binaries:\r\n    Node: 18.15.0 - /usr/local/bin/node\r\n    npm: 9.5.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 114.0.5735.90\r\n    Firefox: 113.0.2\r\n    Safari: 16.5\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-03T12:18:32Z","created_at":"2023-06-03T12:18:32Z","creator_user_login":"yparwani"}
{"number":8689,"title":"Unable to bubble up 'Uncaught in promise' exception","body":"### Describe the bug\n\nIt is not possible to catch an error within an `await-then block`.\r\n\r\n```\r\n<script>\r\n  import { createBoundary } from './ErrorBoundary.js';\r\n  import FirestackError from './FirestackError.svelte';\r\n  \r\n  let Boundary = createBoundary(FirestackError);\r\n  \r\n  async function getUsers() {\r\n    return [\"aaa\", \"sss\"];\r\n  }\r\n</script>\r\n  \r\n<Boundary>\r\n  {#await getUsers() then users}\r\n    {users.error()}\r\n  {/await}\r\n</Boundary>\r\n```\r\n\r\nIf I remove the async declaration on the `getUsers` function, the error is caugth and handled by the boundary error handler.\n\n### Reproduction\n\nhttps://github.com/tonprince/uncaught-in-promise\n\n### Logs\n\n```Shell\nUncaught (in promise) TypeError: ctx[1].error is not a function\r\n    create_then_block +page.svelte:14\r\n    update2 index.mjs:1655\r\n    handle_promise index.mjs:1690\r\n    promise callback*handle_promise index.mjs:1688\r\n    create_default_slot +page.svelte:118\r\n    guarded ErrorBoundary.js:24\r\n    default ErrorBoundary.js:38\r\n    create_slot index.mjs:71\r\n    create_else_block FirestackError.svelte:42\r\n    create_fragment FirestackError.svelte:211\r\n    init index.mjs:2180\r\n    FirestackError FirestackError.svelte:318\r\n    createProxiedComponent svelte-hooks.js:341\r\n    ProxyComponent proxy.js:242\r\n    Proxy<FirestackError> proxy.js:349\r\n    ErrorBoundaryComponent ErrorBoundary.js:52\r\n    create_fragment +page.svelte:162\r\n    init index.mjs:2180\r\n    Page +page.svelte:250\r\n    createComponent svelte-hooks.js:206\r\n    $replace svelte-hooks.js:269\r\n    refreshComponent proxy.js:171\r\n    rerender proxy-adapter-dom.js:77\r\n    reload proxy.js:408\r\n    reload proxy.js:406\r\n    applyHmr hot-api.js:150\r\n    accept client.ts:542\r\n    fetchUpdate client.ts:459\r\n    queueUpdate client.ts:306\r\n    queueUpdate client.ts:306\r\n    handleMessage client.ts:159\r\n    handleMessage client.ts:157\r\n    setupWebSocket client.ts:90\r\n    setupWebSocket client.ts:89\r\n    <anonymous> client.ts:67\r\n+page.svelte:14:13\n```\n\n\n### System Info\n\n```Shell\nSystem:\r\n    OS: macOS 13.3.1\r\n    CPU: (8) arm64 Apple M2\r\n    Memory: 88.41 MB / 8.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.13.0 - ~/.nvm/versions/node/v18.13.0/bin/node\r\n    npm: 8.19.3 - ~/.nvm/versions/node/v18.13.0/bin/npm\r\n  Browsers:\r\n    Chrome: 114.0.5735.90\r\n    Firefox: 113.0.2\r\n    Safari: 16.4\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^2.1.0 => 2.1.0 \r\n    @sveltejs/kit: ^1.20.1 => 1.20.1 \r\n    svelte: ^3.59.1 => 3.59.1 \r\n    vite: ^4.3.9 => 4.3.9\n```\n\n\n### Severity\n\nannoyance\n\n### Additional Information\n\n_No response_","state":"open","updated_at":"2023-06-03T13:25:10Z","created_at":"2023-06-02T08:36:50Z","creator_user_login":"tonprince"}
{"number":8685,"title":"transiton make delay when ondestroy the component","body":"### Describe the bug\n\nif I use any page transition like the below one,\r\n\r\n`<div in:slide class=\"px-3 py-2 block\">search</div>`\r\n\r\nwhen I navigate to any other page what happen s first navigate to the next page after that it will destroy the preview page where I used to transition.\r\n\n\n### Reproduction\n\nyou can reproduce use in one-page transitions like slide and use navigate to next page anchor tag also add onmount and ondestroy to every and add logs then run and when it will destroy the when you used transition one-page\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.15 Ubuntu 20.04.6 LTS (Focal Fossa)\r\n    CPU: (4) x64 Intel(R) Core(TM) i3-3210 CPU @ 3.20GHz\r\n    Memory: 677.77 MB / 3.73 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 18.16.0 - /usr/local/bin/node\r\n    Yarn: 1.22.18 - ~/node_modules/.bin/yarn\r\n    npm: 9.5.1 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 113.0.5672.126\r\n    Firefox: 113.0.2\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.56.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-01T16:49:11Z","created_at":"2023-06-01T16:49:11Z","creator_user_login":"Vibeesarma"}
{"number":8680,"title":"Allow if statement under keyed each block when using the animate directive","body":"### Describe the problem\n\nI get the usual `An element that uses the animate directive must be the immediate child of a keyed each block` error when attempting to do this:\r\n\r\n```svelte\r\n<script>\r\n\timport { scale } from 'svelte/transition';\r\n\timport { flip } from 'svelte/animate';\r\n\r\n\tlet values = [1, 2, 3, 4, 5];\r\n\tconst duration = 300;\r\n</script>\r\n\r\n{#each values as value, i (value)}\r\n\t{#if value > 2}\r\n\t\t<span in:scale|local={{ duration, delay: i * 10 }} animate:flip={{ duration }}>\r\n\t\t\t{value}\r\n\t\t</span>\r\n\t{/if}\r\n{/each}\r\n```\r\n\r\nREPL: https://svelte.dev/repl/9a63f6ad0066480a93d31729ed959577?version=3.59.1\r\n\r\nThat doesn't work, but the same logic refactored into a filter of the each'd array does work:\r\n\r\n```svelte\r\n<script>\r\n\timport { scale } from 'svelte/transition';\r\n\timport { flip } from 'svelte/animate';\r\n\r\n\tlet values = [1, 2, 3, 4, 5];\r\n\tconst duration = 300;\r\n</script>\r\n\r\n{#each values.filter(value => value > 2) as value, i (value)}\r\n\t<span in:scale|local={{ duration, delay: i * 10 }} animate:flip={{ duration }}>\r\n\t\t{value}\r\n\t</span>\r\n{/each}\r\n```\r\n\r\nREPL: https://svelte.dev/repl/b9a2dec8a0fc474b819e905a79b08b43?version=3.59.1\n\n### Describe the proposed solution\n\nMaybe the second is more straightforward for the compiler, but if this restriction could be loosened, I think it would greatly improve the developer experience of working with the animate directive.\n\n### Alternatives considered\n\nThe only foreseeable workaround would be to continue using the filtered approach which sometimes requires redundant logic, like this:\r\n\r\n```svelte\r\n<script>\r\n\timport { scale } from 'svelte/transition';\r\n\timport { flip } from 'svelte/animate';\r\n\r\n\tlet values = ['tom', 'frank', 'george'];\r\n\tconst duration = 300;\r\n</script>\r\n\r\n{#each values.filter(name => {\r\n\tconst upperName = name.toUpperCase();\r\n\treturn upperName.startsWith('T');\r\n}) as value, i (value)}\r\n\t{@const upperName = value.toUpperCase()}\r\n\t<span in:scale|local=\"{{ duration, delay: i * 10 }}\" animate:flip=\"{{ duration }}\">\r\n\t\t{upperName}\r\n\t</span>\r\n{/each}\r\n```\r\n\r\nREPL: https://svelte.dev/repl/9a63f6ad0066480a93d31729ed959577?version=3.59.1\r\n\r\nwhen the desire was just to do this:\r\n\r\n```svelte\r\n<script>\r\n\timport { scale } from 'svelte/transition';\r\n\timport { flip } from 'svelte/animate';\r\n\r\n\tlet values = ['tom', 'frank', 'george'];\r\n\tconst duration = 300;\r\n</script>\r\n\r\n{#each values as value, i (value)}\r\n\t{@const upperName = value.toUpperCase()}\r\n\t{#if upperName.startsWith('T')}\r\n\t\t<span in:scale|local=\"{{ duration, delay: i * 10 }}\" animate:flip=\"{{ duration }}\">\r\n\t\t\t{upperName}\r\n\t\t</span>\r\n\t{/if}\r\n{/each}\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-06-01T02:54:52Z","created_at":"2023-06-01T02:40:55Z","creator_user_login":"brandonmcconnell"}
{"number":8679,"title":"Logical (writing direction aware) transitions","body":"### Describe the problem\r\n\r\nI recently had to translate an app I'm writing to different languages, with different writing directions.\r\nSo I had to replace all of my `fly` transitions to use this `logical_fly` function instead of the `fly` transition provided by svelte.\r\n\r\n```typescript\r\nimport { fly } from \"svelte/transition\";\r\n\r\nexport const logical_fly: typeof fly = (node, params = {}) => {\r\n  let { x, ...rest } = params;\r\n  if(getComputedStyle(node).direction === \"rtl\") x = -x; \r\n  return fly(node, {\r\n    ...rest,\r\n    x,\r\n  })\r\n}\r\n```\r\n\r\nThis a little example for explanaition only, a better approach could be taken, like handling vertical wiritng modes.\r\n\r\n### Describe the proposed solution\r\n\r\nExtend the transitions with logical parameters that are writing direction aware.\r\n\r\n```typescript\r\nexport type FlyParams = {\r\n   /// same old x, y, duration, etc\r\n   /// and the new ones\r\n  inline?: number,\r\n  block?: number\r\n}\r\n```\r\n\r\nThis won't be a breaking change because if not provided, the logical parameters could be ignored\r\n\r\n### Alternatives considered\r\n\r\nDo nothing and let this be solved in user code.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-06-02T16:24:40Z","created_at":"2023-05-31T21:40:44Z","creator_user_login":"ramiroaisen"}
{"number":8678,"title":"fix: allow boolean in tweened instead of throwing an error","body":"When tweening arrays of objects, boolean properties can be useful (e.g. for toggling classes), and it makes no sense (in my opinion) to prevent developers from using boolean values in tweened stores.\r\n\r\nThis simple fix simply updates any boolean value without trying to interpolate it or throwing a `Cannot interpolate boolean values` error.\r\n\r\nSee issue: https://github.com/sveltejs/svelte/issues/7543\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2023-05-31T21:09:18Z","creator_user_login":"TomFevrier"}
{"number":8676,"title":"Binding to object value in store eagerly updates","body":"### Describe the bug\r\n\r\nWhen binding a deep object value to an input, the value is updated before the set function runs.\r\n\r\nIn the repro below, when toggling the checkbox directly from false to true, instead of using the button, I expect to see false -> true in the logs, not true -> true \r\n\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/797713750f334a0eb3e21a83eff4e4c4?version=3.59.1\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nWindows 10 x64, Firefox\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-05-31T17:17:06Z","created_at":"2023-05-31T16:42:44Z","creator_user_login":"TGlide"}
{"number":8674,"title":"replace examples page","body":"per https://github.com/sveltejs/svelte/pull/8578#issuecomment-1569083255","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-05-31T15:19:08Z","creator_user_login":"Rich-Harris"}
{"number":8673,"title":"fix: infinite loop caused by having bind:this in an each loop","body":"Fixes #4317 \r\n\r\nI did some digging and the infinite loop occurs when the array or iterable in the each-loop is a literal array, a (pure or impure, it depends) array from a regular function or generator function (iterable), containing objects or more arrays. The exact internal reasons on how the infinite loop came to be is ~confusing and hard to describe, even for me digging this 😁, so, uh, yeah...~\r\n\r\nHere's my attempt to explain what's going on with the bug. I'll use this https://svelte.dev/repl/c0a3494b41f14ebd84a5f2f3f9747fa1?version=3.59.1, courtesy of the original bug report, as an example.\r\n\r\nWhen the component is created and mounted, the binding functions are called (from the example, it is the `div_binding` functions), which add callbacks to the `binding_callbacks` list. After the component is mounted, the internal `flush()` function is called. The callbacks in `bindings_callbacks` are called, which invalidates the `working_array`. When it invalidates the `working_array`, it causes the component to update. When updating, we compare each array element with the previous array element, decide that they're different, which causes us to call the `div_binding` functions again, adding callbacks to the `binding_callbacks` list, again, and we're back to where we started, causing an infinite loop. (Thanks browser debugger!)\r\n\r\nTo get the infinite loop, at the stage where we compare the array elements, they are different. This could be caused by having a function returning an array of objects/arrays, or an impure function returning different things every time you call it, or a literal array of objects, or whatever. We comparing two objects (different in memory but same in what it contains), or two different values because the function is impure and we erroneously call the function that returns the array but the function is not invalidated. We don't need to do this, because we are not invalidating the actual array to be iterated, and requiring us to get the new array. Therefore, this PR adds a `dirty` check around arrays, or if the array is literal, no need to get a new literal array because we already defined it already. \r\n\r\nHope this comment is clear enough!\r\n\r\n# HEADS UP: BIG RESTRUCTURING UNDERWAY\r\n\r\nThe Svelte repo is currently in the process of heavy restructuring for Svelte 4. After that, work on Svelte 5 will likely change a lot on the compiler aswell. For that reason, please don't open PRs that are large in scope, touch more than a couple of files etc. In other words, bug fixes are fine, but feature PRs will likely not be merged.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n- [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-06T15:59:17Z","created_at":"2023-05-31T13:36:42Z","creator_user_login":"ngtr6788"}
{"number":8670,"title":"Missing support for @import urls with layer() functions.","body":"### Describe the bug\n\nCSS now has pretty [wide support](https://caniuse.com/css-cascade-layers) for `@layer`/layer(). However Svelte chokes on `@import` statements assigned to a particular layer.\r\n\r\n```css\r\n@import url(\"bootstrap.css\") layer(framework);\r\n```\r\n\r\nYou can work around by putting the styles in a CSS file then import that file instead, but this only works if you do not preprocess your code to inline CSS brought in via `@import` or by using JS imports.\n\n### Reproduction\n\nhttps://svelte.dev/repl/0bf3cf34781c4dfa8968cdba3fc1644d?version=3.59.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-08T02:38:39Z","created_at":"2023-05-31T05:04:17Z","creator_user_login":"kwangure"}
{"number":8669,"title":"Suggestion for in-built styles / styled components","body":"### Describe the problem\n\nCurrently, the styling can be done using external css, using `:global`  or internally(via components) and using styles scoped to the component.\r\n\r\nHowever, IMO, there could be in-built styled components like in Quasar.\r\n\r\nThis would prevent installing css libraries and configuring them, etc.\n\n### Describe the proposed solution\n\nWe could have different styled components, like:\r\n\r\n`App`\r\n\r\nThe `root` component\r\n\r\n```\r\n<svApp>\r\n  -- other components-- \r\n  <svPanel>\r\n    <div slot=\"header\">-- header --</div>\r\n    <div slot=\"content\">\r\n       <slot />\r\n    </div>\r\n  </svPanel>\r\n</svApp>\r\n```\r\n\r\n`Panel`\r\n\r\n```\r\n<svPanel height=\"300\" width=\"600\">\r\n  <div class=\"header\">\r\n    <slot name=\"header\"></slot>\r\n  </div>\r\n  <div class=\"content\">\r\n    <slot-name=\"content\"></slot>\r\n  </div>\r\n  <slot name=\"footer\"></slot>\r\n</svPanel>\r\n```\r\n\r\nThe attributes like `height`, `width`, `bg` (background-color) could have default values.\r\n\n\n### Alternatives considered\n\nAlternatively, some basic stylesheet could be provided by default, when the application is created.\r\n\r\n```\r\n.sv-app\r\n\r\n.sv-panel\r\n\r\n.sv-input\r\n\r\n.sv-button\r\n```\r\n\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-05-31T06:21:46Z","created_at":"2023-05-31T03:52:05Z","creator_user_login":"srikantgudi"}
{"number":8663,"title":"Add <svelte:html> special element","body":"### Describe the problem\n\nI need to change <html> tag's attributes dynamically.\n\n### Describe the proposed solution\n\n Only I can do is document.querySelector('html').setAttribute('data-theme','dark') and document.querySelector('html').setAttribute('lang','kz') for every attribute\n\n### Alternatives considered\n\nPlease add <svelte:html> special element for that\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-05-31T03:29:31Z","created_at":"2023-05-30T14:01:46Z","creator_user_login":"KKKaisar"}
{"number":8660,"title":"Two way bind with question mark","body":"### Describe the problem\r\n\r\nI have input field with nested object properties, but sometimes the properties was null,  i don't want to add variables to passing it.\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nPlease allow, <input bind:value={foo?.bar} />\r\n\r\nhttps://svelte.dev/repl/5db9ddbb548042ad97398f47fb1a6ae0?version=3.59.1\r\n\r\n### Alternatives considered\r\n\r\ni didn't know\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-06-03T03:22:58Z","created_at":"2023-05-30T00:30:02Z","creator_user_login":"sciefylab"}
{"number":8656,"title":"feat: Pass changed boolean array to derived callbacks","body":"This allows the callbacks to easily run complex update logic based on which store changed most recently.\r\n\r\nFixes #6777.\r\n\r\nThis replaces PR #6786, which was targeting Svelte 3.\r\n\r\n# HEADS UP: BIG RESTRUCTURING UNDERWAY\r\n\r\nThe Svelte repo is currently in the process of heavy restructuring for Svelte 4. After that, work on Svelte 5 will likely change a lot on the compiler aswell. For that reason, please don't open PRs that are large in scope, touch more than a couple of files etc. In other words, bug fixes are fine, but feature PRs will likely not be merged.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [X] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [X] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [X] This message body should clearly illustrate what problems it solves.\r\n- [X] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [X] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-08-05T17:23:30Z","created_at":"2023-05-29T07:27:34Z","creator_user_login":"rmunn"}
{"number":8655,"title":"getContext on a child component returns `undefined` when HMR is triggered with context in the parent's `context=\"module\"` exports","body":"### Describe the bug\n\nI tried to edit a child component that uses `getContext` where the context key is imported from the parent svelte component's `context=\"module\"`. When I edit the child component and save, HMR is triggered and I get an error in the console. I have to refresh the page to be able to keep working\r\n\r\nIt's just `getContext` returning `undefined`. But I do `setContext` in the parent and it works until the HMR happens.\n\n### Reproduction\n\nhttps://github.com/space-nuko/svelte-context-hmr-issue\r\n\r\n1. Click the buttons a few times\r\n2. Edit the child component that's currently being displayed and save\r\n3. Watch the console for errors\n\n### Logs\n\n```shell\nOne.svelte?t=1685287937140:91 Uncaught (in promise) TypeError: Cannot destructure property 'func' of 'getContext(...)' as it is undefined.\r\n    at instance (One.svelte?t=1685287937140:91:10)\r\n    at init (chunk-UVEMIUTC.js?v=45af3e07:1890:23)\r\n    at new One (One.svelte?t=1685287937140:105:3)\r\n    at createProxiedComponent (svelte-hooks.js?v=45af3e07:341:9)\r\n    at new ProxyComponent (proxy.js?v=45af3e07:242:7)\r\n    at new Proxy<One> (proxy.js?v=45af3e07:349:11)\r\n    at Array.create_if_block (Child.svelte?t=1685287888134:114:8)\r\n    at Object.update [as p] (Child.svelte?t=1685287888134:198:98)\r\n    at update (chunk-UVEMIUTC.js?v=45af3e07:1140:32)\r\n    at flush (chunk-UVEMIUTC.js?v=45af3e07:1106:9)\n```\n\n\n### System Info\n\n```shell\nVersion 110.0.5481.177 (Official Build, ungoogled-chromium) (64-bit)\r\n\r\ndevDependencies:\r\n@fontsource/fira-mono 4.5.10\r\n@neoconfetti/svelte 1.0.0\r\n@sveltejs/adapter-auto 2.1.0\r\n@sveltejs/kit 1.20.0\r\n@types/cookie 0.5.1\r\nsvelte 3.59.1\r\nsvelte-check 3.4.3\r\ntslib 2.5.2\r\ntypescript 5.0.4\r\nvite 4.3.9\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-31T12:46:14Z","created_at":"2023-05-28T15:39:06Z","creator_user_login":"space-nuko"}
{"number":8653,"title":"fix(internal): parse let directive alias as pattern instead of expression","body":"\r\n\r\n# HEADS UP: BIG RESTRUCTURING UNDERWAY\r\n\r\nThe Svelte repo is currently in the process of heavy restructuring for Svelte 4. After that, work on Svelte 5 will likely change a lot on the compiler aswell. For that reason, please don't open PRs that are large in scope, touch more than a couple of files etc. In other words, bug fixes are fine, but feature PRs will likely not be merged.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [ ] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-05-28T11:52:46Z","creator_user_login":"gtm-nayan"}
{"number":8649,"title":"Inconsistency in attribute shorthand and mustache attribute value AST","body":"### Describe the bug\n\nGiven the following element:\r\n\r\n```html\r\n<div {a} b={b}/>\r\n```\r\nSvelte outputs the following in the AST:\r\nFor `{a}`:\r\n```javascript\r\nvalue: [{\r\n\tstart: 6,\r\n\tend: 7,\r\n\ttype: \"AttributeShorthand\",\r\n\texpression: {\r\n\t\tstart: 6,\r\n\t\tend: 7,\r\n\t\ttype: \"Identifier\",\r\n\t\tname: \"a\",\r\n\t}\r\n}]\r\n```\r\nFor `{b}`:\r\n```javascript\r\nvalue: [{\r\n\tstart: 11,\r\n\tend: 14,\r\n\ttype: \"MustacheTag\",\r\n\texpression: {\r\n\t\ttype: \"Identifier\",\r\n\t\tstart: 12,\r\n\t\tend: 13\r\n\t\tloc: {\r\n\t\t\tstart: { line: 1, column: 12 },\r\n\t\t\tend: { line: 1, column: 13 }\r\n\t\t}\r\n\t\tname: \"b\"\r\n\t}\r\n}]\r\n```\r\n1) According to the AST `AttributeShorthand` is one character long while `MustacheTag` is 3 characters long. `AttributeShorthand` should start at `5` and end at `8`.\r\n2) The identifier in `{a}` is missing location information. This should be included.\n\n### Reproduction\n\nhttps://svelte.dev/repl/70a05ac9584e40c2a0589d7d46ab237e?version=3.59.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-27T12:53:29Z","created_at":"2023-05-27T12:53:29Z","creator_user_login":"kwangure"}
{"number":8647,"title":"Inconsistency in quoted and mustache attribute value AST","body":"### Describe the bug\n\nGiven the following element:\r\n```html\r\n<div class='a' value={a}/>\r\n```\r\nSvelte outputs the following in the AST.\r\nFor `'a'`:\r\n```javascript\r\nvalue: [{\r\n\tstart: 12,\r\n\tend: 13,\r\n\ttype: \"Text\",\r\n\t...\r\n}]\r\n```\r\nFor `{a}`:\r\n```javascript\r\nvalue: [{\r\n\tstart: 21,\r\n\tend: 24,\r\n\ttype: \"MustacheTag\",\r\n\t...\r\n}]\r\n```\r\nNote how according the AST one attribute value is one character long and other is three characters long. They should both be three characters long, where for `'a'`, the quotes are included, resulting in:\r\n```javascript\r\nvalue: [{\r\n\tstart: 11,\r\n\tend: 14,\r\n\ttype: \"Text\",\r\n\t...\r\n}]\r\n```\r\nThis aligns with how other parsers like Acorn JSX and Babel parse attribute values too.\n\n### Reproduction\n\nCompare Svelte, Acorn JSX, Babel JSX and friends here. https://astexplorer.net/#/gist/43f92f399852b126ac6d21755f65cd6f/317b9a09a9af33f93fbbbed822d59b0429d852d4\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-27T12:36:34Z","created_at":"2023-05-27T00:38:13Z","creator_user_login":"kwangure"}
{"number":8646,"title":"fix: dealt with var declarations in bracket issue","body":"\"Successor\" to #8442, fixes #6706 (because I closed it and deleted the branch)\r\n\r\nThis PR simplifies the solution done in the previous PR, up to date with version 4, and keeps most of the tests. However, I do not expect this PR to be merged, as per #8442, it is best to hold off until version 5. Therefore, this PR would be more of a reference for potential version 5 compiler output overhaul on how to solve this issue, so feel free to put this in One Day, I don't really mind.\r\n\r\n# HEADS UP: BIG RESTRUCTURING UNDERWAY\r\n\r\nThe Svelte repo is currently in the process of heavy restructuring for Svelte 4. After that, work on Svelte 5 will likely change a lot on the compiler aswell. For that reason, please don't open PRs that are large in scope, touch more than a couple of files etc. In other words, bug fixes are fine, but feature PRs will likely not be merged.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `pnpm test` and lint the project with `pnpm lint`\r\n","state":"open","updated_at":"2023-08-06T15:58:14Z","created_at":"2023-05-26T23:51:01Z","creator_user_login":"ngtr6788"}
{"number":8652,"title":"Content passed through multiple slots behaves unexpectedly","body":"### Describe the bug\n\nWhen a value is instantiated on a `+page.svelte` file and passed through multiple slots, it behaves unexpectedly.\r\n\r\nIn this example reproduction, I have a counter component that loops through an array of values by simply incrementing the index. The currentValue and the index are bound so they can be referenced externally.\r\n\r\nThe bound variables are then passed through for observation in two different ways, and the combination of slots causes ONE of the values to no longer update, but one continues to update correctly.\r\n\r\n![image](https://github.com/sveltejs/kit/assets/5702154/5d6c72d4-9fa7-41e4-8ac8-e20e1352eb15)\r\n\n\n### Reproduction\n\nhttps://github.com/LukeHagar/svelte-min-repro\n\n### Logs\n\n_No response_\n\n### System Info\n\n```Shell\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (32) x64 AMD Ryzen 9 5950X 16-Core Processor\r\n    Memory: 6.41 GB / 31.93 GB\r\n  Binaries:\r\n    Node: 18.14.2 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.6.4 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1702.0), Chromium (113.0.1774.50)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^2.0.0 => 2.1.0\r\n    @sveltejs/kit: ^1.5.0 => 1.19.0\r\n    svelte: ^3.54.0 => 3.59.1\r\n    vite: ^4.3.0 => 4.3.9\n```\n\n\n### Severity\n\nblocking an upgrade\n\n### Additional Information\n\nI'm honestly quite confused regarding this issue and am frankly amazed at how simply it could be recreated.\r\n\r\nThank you all for all the work you do!\r\nI'm a big fan of svelte and sveltekit","state":"open","updated_at":"2023-05-28T05:49:57Z","created_at":"2023-05-26T15:27:10Z","creator_user_login":"LukeHagar"}
{"number":8640,"title":"Input type=\"range\" value is not updated properly on load","body":"### Describe the bug\r\n\r\nOn the first show (when page is loaded), the slider is not updated if used in this form:\r\n```\r\n<input type=\"range\" {value} min=\"100\" max=\"200\" step=\"1\"/><br/>\r\n```\r\nWhen value within slider is bound:\r\n```\r\nSlider bound: <input type=\"range\" bind:value min=\"100\" max=\"200\" step=\"1\"/>\r\n```\r\nIt behaves correctly.\r\nWhen value is changed, it is also updated correctly, the problem is only in initial show.\r\n\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/afc56e4bb5ad43d1b1013e668a701280?version=3.59.1\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.15 Ubuntu 20.04.6 LTS (Focal Fossa)\r\n    CPU: (12) x64 AMD Ryzen 5 5600H with Radeon Graphics\r\n    Memory: 17.38 GB / 62.67 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.20.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.19.4 - /usr/bin/npm\r\n  Browsers:\r\n    Brave Browser: 113.1.51.118\r\n    Chrome: 113.0.5672.126\r\n    Chromium: 113.0.5672.126\r\n    Firefox: 113.0.2\r\n  npmPackages:\r\n    svelte: ^3.59.1 => 3.59.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-01T14:38:02Z","created_at":"2023-05-26T10:31:09Z","creator_user_login":"lopisan"}
{"number":8638,"title":"Update `data-sveltekit-` attribute types to allow `boolean | \"true\" | \"false\"`","body":"### Describe the problem\n\nSee https://github.com/sveltejs/kit/pull/10039 for context\n\n### Describe the proposed solution\n\nWe need to be more permissive here: https://github.com/sveltejs/svelte/blob/3bc791bcba97f0810165c7a2e215563993a0989b/elements/index.d.ts#L554-L560\r\n\r\nAfter making this change, we should deprecate the use of `off` in SvelteKit.\r\n\r\n(Open question: do we remove `'off'` from the types here immediately, or leave it for now?\n\n### Alternatives considered\n\nn/a\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-05-25T21:38:43Z","created_at":"2023-05-25T21:38:43Z","creator_user_login":"Rich-Harris"}
{"number":8637,"title":"fix: enable renaming object keys in destructured slot variables","body":"Fixes https://github.com/sveltejs/svelte/issues/8556.\r\n\r\nWhen an object key is renamed, the `names` array contains both the previous name and the new name while `context_lookup` only contains the new name. This fix ensures that the lookup succeeds with the new key. \r\n\r\nWith this fix, all the examples in this repl now work: https://svelte.dev/repl/98917cf206794f20a4d3c45d012583be?version=3.58.0.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2023-05-25T21:11:27Z","creator_user_login":"joelmukuthu"}
{"number":8635,"title":"Scope css styles to a different Svelte component","body":"### Describe the problem\n\nThe existing ways of scoping css styles to a child component don't feel right. Either they require customisable components to expose a lot of properties for styling purposes, which does not feel right, or for ```:global()``` to be used in a way that can cause styles that are designed to target a child component to leak into other descendant components.\n\n### Describe the proposed solution\n\nJust as ```:global()``` is used to strip the prefix from selectors, we could allow the name of a component such as ```:MyButton()``` to be used to add the appropriate prefix to a selector, so that it can target elements in a descendant component. It would look like this:\r\n```\r\n<script>\r\n\timport MyButton from \"./MyButton.svelte\"\r\n</script>\r\n\r\n<div>\r\n\t<MyButton>Click Me!</MyButton>\r\n</div>\r\n\r\n<style>\r\n\tdiv :MyButton(button){\r\n\t\tbackground-color:red;\r\n\t}\r\n</style>\r\n```\r\nI think that a containing element would usually be necessary, to avoid the style from being applied 'globally' to all instances of MyButton (much like how ```:global()``` is generally used).\n\n### Alternatives considered\n\nThe usual approach is to use ```:global()```, but that can cause a descendant component to be accidentally targeted as well, such as illustrated here, since the selector in the :global() section cannot be restricted to just the component that we really want to style:\r\n```\r\n<script>\r\n\timport MySheet from \"./MySheet.svelte\"\r\n\timport MySection from \"./MySection.svelte\"\r\n</script>\r\n\r\n<div>\r\n\t<MySheet>\r\n\t\t<MySection>First Section</MySection>\r\n\t\t<MySection>Second Section</MySection>\r\n\t</MySheet>\r\n</div>\r\n\r\n<style>\r\n\tdiv :global(div){\r\n\t\tbackground-color:red;\r\n\t}\r\n</style>\r\n```\r\nA child selector can stop the style leaking beyond the child (i.e. ```div > :global(div)```), but then it makes the relationship more fragile. Another way to stop the style leaking is to add uncommon class names to elements so that they can be more precisely targeted from ancestors (i.e. ```div > :global(.mysheet-div)```), but that feels very verbose.\r\n\r\nAnother approach is to expose styles through attributes, but that requires a lot of repetitive work, and prevents styling from being expressed through css, and so doesn't feel like the correct approach.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-11T17:44:02Z","created_at":"2023-05-25T16:29:04Z","creator_user_login":"robertadamsonsmith"}
{"number":8630,"title":"Document resize observer bindings?","body":"### Describe the problem\r\n\r\nThe feature itself appears to be just briefly mentioned in the changelog and the only sort of documentation can be found in the PR (#8022), which also does not explain what exactly the bindings refer to or what the objects contain.\r\n\r\n### Describe the proposed solution\r\n\r\nAdd explanations for the different bindings to the main documentation.\r\n\r\n### Alternatives considered\r\n\r\nN/A\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-05-25T10:09:01Z","created_at":"2023-05-25T03:40:27Z","creator_user_login":"brunnerh"}
{"number":8623,"title":"feat: automatically skip to `{:then}`/`{:catch}` in `{#await}` blocks if promise has already been rejected or resolved","body":"Implements a solution for https://github.com/sveltejs/svelte/issues/981\r\n\r\nAs far as i know, there is no way to detect if a JavaScript Promise has been fulfilled just by checking the raw object (https://stackoverflow.com/questions/35716275/how-to-tell-if-a-promise-is-resolved).\r\n\r\nThis means that Svelte must have seen the Promise _once_ before being able to skip the `await` block. So if you have a Promise that has been resolved, but not used in any components yet, then the `await` block will still be triggered the first time.\r\n\r\nChanged a previous test where the expected behaviour was the old one, added a new test to check if the promise has been rejected before as well, and a test for the expected initial `await` rendering for fresh Promises.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-08-12T14:11:20Z","created_at":"2023-05-23T18:20:24Z","creator_user_login":"MathiasWP"}
{"number":8621,"title":"Element with slot attribute retains it when rendered","body":"### Describe the bug\n\nThe slot attribute shouldn't be added since it's not a custom element.\n\n### Reproduction\n\nhttps://svelte.dev/repl/17cb875938d545329c37b88b00a0d98a?version=3.59.1\r\n\r\nLine 27 of the JS output contains an `attr` call to set the slot attribute on the h1.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nnot relevant\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-23T17:17:24Z","created_at":"2023-05-23T17:17:24Z","creator_user_login":"gtm-nayan"}
{"number":8607,"title":"clientWidth/clientHeight require 'unsafe-hashes' as CSP rule","body":"### Describe the bug\r\n\r\n`bind:clientWidth` and `bind:clientHeight` sets a style attribute via javascript using `setAttribute` method.\\\r\nThis triggers a CSP violation when used with `style-src: 'self'` rule.\\\r\n`bind:clientWidth` and `bind:clientHeight` require to add `'unsafe-hashes'` to `style-src`,  which reduces CSP protection. \r\n\r\n### Reproduction\r\n\r\n[bug reproduction](https://github.com/Jerboas86/clientwidth-repro)\r\n1- npm run build\r\n2- npm run preview\r\n3- open console to see CSP error messages\r\n\r\n### Logs\r\n\r\nIn chrome console:\r\n\r\n```Shell\r\nRefused to apply inline style because it violates the following Content Security Policy directive: \"style-src 'self'\". Either the 'unsafe-inline' keyword, a hash ('sha256-lJ7/G2Js+ZVE8z76tKAxfzSKR8TjT9mYsP+sBJmuNtI='), or a nonce ('nonce-...') is required to enable inline execution. Note that hashes do not apply to event handlers, style attributes and javascript: navigations unless the 'unsafe-hashes' keyword is present.\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: Linux 5.19 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)\r\n    CPU: (16) x64 AMD Ryzen 9 5900HX with Radeon Graphics\r\n    Memory: 7.18 GB / 15.02 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 20.1.0 - ~/.nvm/versions/node/v20.1.0/bin/node\r\n    npm: 9.6.4 - ~/.nvm/versions/node/v20.1.0/bin/npm\r\n  Browsers:\r\n    Chrome: 113.0.5672.126\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^2.0.0 => 2.1.0 \r\n    @sveltejs/kit: ^1.5.0 => 1.18.0 \r\n    svelte: ^3.54.0 => 3.59.1 \r\n    vite: ^4.3.0 => 4.3.8\r\n```\r\n\r\n\r\n### Severity\r\n\r\nserious, but I can work around it\r\n\r\n### Additional Information\r\n\r\ntested on chrome and FF","state":"open","updated_at":"2023-05-20T11:25:33Z","created_at":"2023-05-19T15:48:27Z","creator_user_login":"Jerboas86"}
{"number":8606,"title":"Crossfade without |local directive inside component prevents unmounting","body":"### Describe the bug\n\nThis is a hard bug to describe. I ran into a *very* specific scenario where having a crossfade animation inside a component would prevent it from unmounting.\n\n### Reproduction\n\nhttps://github.com/TGlide/crossfade-bug-svelte-repro\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.10 Ubuntu 20.04.4 LTS (Focal Fossa)\r\n    CPU: (12) x64 11th Gen Intel(R) Core(TM) i5-11400F @ 2.60GHz\r\n    Memory: 17.21 GB / 24.97 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 16.16.0 - ~/.nvm/versions/node/v16.16.0/bin/node\r\n    Yarn: 1.22.19 - ~/.nvm/versions/node/v16.16.0/bin/yarn\r\n    npm: 8.11.0 - ~/.nvm/versions/node/v16.16.0/bin/npm\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.54.0\r\n\r\n(This is on WSL, I'm running Windows 10 x64. The bug was found to occur both in Firefox 113.0.1 and Chrome)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-24T09:16:57Z","created_at":"2023-05-19T14:38:50Z","creator_user_login":"TGlide"}
{"number":8615,"title":"Component styles flicker/blink with SSR mode on","body":"### Describe the bug\r\n\r\nWhen applying stylings to components or pages, on SSR mode, first server stylings get rendered, and then client ones.\r\n\r\nIn some cases, when components / pages use more 'dynamic' data like slots, $$restProps with class names, lists, etc., what oddly happens is that there is a 'flicker', where server stylings do not seem to match client ones.\r\n\r\nBelow is a video with two examples of when this happens:\r\n\r\nhttps://github.com/sveltejs/kit/assets/61620873/e5688342-1c23-4994-a4ba-807fc1247e1b\r\n\r\n\r\n\r\n### Reproduction\r\n\r\nAbout twenty lines: https://www.sveltelab.dev/vg1t4x2cb8n84f4\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nI've spoken to a number of people so I don't think that it is a device-specific thing. But anyway:\r\n\r\n\r\n  System:\r\n    OS: macOS 13.3.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 83.23 MB / 16.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 19.6.0 - /opt/homebrew/bin/node\r\n    Yarn: 1.22.11 - /opt/homebrew/bin/yarn\r\n    npm: 9.4.0 - /opt/homebrew/bin/npm\r\n  Browsers:\r\n    Brave Browser: 113.1.51.114\r\n    Safari: 16.4\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0-next.91 => 1.0.0-next.91 \r\n    @sveltejs/kit: next => 1.0.0-next.589 \r\n    svelte: ^3.55.1 => 3.55.1 \r\n    vite: ^4.0.0 => 4.1.1 \r\n```\r\n\r\n### Severity\r\n\r\nannoyance\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-07-09T16:12:42Z","created_at":"2023-05-19T09:22:37Z","creator_user_login":"Destaq"}
{"number":8597,"title":"Issue selecting multiple `<option>` during hydration","body":"### Describe the bug\r\n\r\nKind of a tricky bug:\r\n\r\nWhen rendering `<select multiple>` with _multiple_ selected options. For initial render only the last one is selected. \r\n\r\nNote: When hot reloading the code, all selected items are selected correctly.\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<script>\r\nlet options = [4,1,2,3];\r\n</script>\r\n\r\n<select size=\"5\" multiple> \r\n  {#each options as n (n)}\r\n  <option value={n} selected>#{n}</option>\r\n  {/each}\r\n</select>\r\n```\r\n\r\nAll options should be selected. Only the last one will be. \r\n\r\n### Logs\r\n\r\n```Shell\r\nNo errors in console\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz\r\n    Memory: 641.27 MB / 15.80 GB\r\n  Binaries:\r\n    Node: 18.6.0 - ~\\AppData\\Local\\fnm_multishells\\18968_1684333032878\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Local\\fnm_multishells\\18968_1684333032878\\yarn.CMD\r\n    npm: 8.13.2 - ~\\AppData\\Local\\fnm_multishells\\18968_1684333032878\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1702.0), Chromium (112.0.1722.68)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    @sveltejs/adapter-node: ^1.2.4 => 1.2.4\r\n    @sveltejs/kit: ^1.5.0 => 1.16.3\r\n    svelte: ^3.54.0 => 3.59.1\r\n    vite: ^4.3.0 => 4.3.7\r\n```\r\n\r\n### Severity\r\n\r\nblocking all usage of SvelteKit\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-05-17T21:40:22Z","created_at":"2023-05-17T14:19:42Z","creator_user_login":"mskocik"}
{"number":8595,"title":"Create svelte latest command not working","body":"### Describe the bug\n\nWhen i try to run the command  **npm create svelte@latest my-app** i getting below error\r\n\r\ncreate-svelte version 4.2.0\r\n\r\nT  Welcome to SvelteKit!\r\nnode:internal/errors:464\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nSystemError [ERR_TTY_INIT_FAILED]: TTY initialization failed: uv_tty_init returned EBADF (bad file descriptor)\r\n\n\n### Reproduction\n\ncreate-svelte version 4.2.0\r\n\r\nT  Welcome to SvelteKit!\r\nnode:internal/errors:464\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nSystemError [ERR_TTY_INIT_FAILED]: TTY initialization failed: uv_tty_init returned EBADF (bad file descriptor)\r\n\n\n### Logs\n\n```shell\nWelcome to SvelteKit!\r\nnode:internal/errors:464\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nSystemError [ERR_TTY_INIT_FAILED]: TTY initialization failed: uv_tty_init returned EBADF (bad file descriptor)\r\n    at new SystemError (node:internal/errors:233:5)\r\n    at new NodeError (node:internal/errors:336:7)\r\n    at new WriteStream (node:tty:94:11)\r\n    at sD.prompt (file:///C:/Users/sankaran/AppData/Local/npm-cache/_npx/50a6160ffc29bafc/node_modules/@clack/core/dist/index.mjs:9:693)\r\n    at Module.Q (file:///C:/Users/sankaran/AppData/Local/npm-cache/_npx/50a6160ffc29bafc/node_modules/@clack/prompts/dist/index.mjs:22:7)\r\n    at file:///C:/Users/sankaran/AppData/Local/npm-cache/_npx/50a6160ffc29bafc/node_modules/create-svelte/bin.js:33:25\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:195:25)\r\n    at async Promise.all (index 0)\r\n    at async ESMLoader.import (node:internal/modules/esm/loader:337:24)\r\n    at async loadESM (node:internal/process/esm_loader:88:5) {\r\n  code: 'ERR_TTY_INIT_FAILED',\r\n  info: {\r\n    errno: -4083,\r\n    code: 'EBADF',\r\n    message: 'bad file descriptor',\r\n    syscall: 'uv_tty_init'\r\n  },\r\n  errno: [Getter/Setter],\r\n  syscall: [Getter/Setter]\r\n}\r\nnpm ERR! code 1\r\nnpm ERR! path C:\\sankaran\\official\\projects\\ayata\r\nnpm ERR! command failed\r\nnpm ERR! command C:\\WINDOWS\\system32\\cmd.exe /d /s /c create-svelte \"my-app\"\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     C:\\Users\\sankaran\\AppData\\Local\\npm-cache\\_logs\\2023-05-17T13_30_55_446Z-debug-0.log\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\r\n    Memory: 16.17 GB / 31.74 GB\r\n  Binaries:\r\n    Node: 16.14.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.17 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 8.3.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1702.0), Chromium (113.0.1774.35)\r\n    Internet Explorer: 11.0.22621.1\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2023-05-24T08:04:33Z","created_at":"2023-05-17T13:38:41Z","creator_user_login":"sankaran-t"}
{"number":8594,"title":"Update lifecycle `onMount` docs","body":"Clarify `onDestroy` behavior for async `onMount` callbacks.\r\n\r\nFixes https://github.com/sveltejs/svelte/issues/4927.","state":"open","updated_at":"2023-07-17T07:21:34Z","created_at":"2023-05-17T12:53:03Z","creator_user_login":"Lootwig"}
{"number":8592,"title":"troubles during build process of sites","body":"### Describe the bug\n\nCan you @PuruVJ help me with this?\r\n\r\nI am doing the localization of the content of the site to Portuguese, but I am having this problem when I am trying to build the site at Vercel:\n\n### Reproduction\n\nI am building the source code on the [`f3396cfd4ce6f26ead0930f37ea7a73d551cf2cf`](https://github.com/sveltejs/svelte/commit/f3396cfd4ce6f26ead0930f37ea7a73d551cf2cf) commit\n\n### Logs\n\n```shell\n[14:32:10.768] Running build in Cleveland, USA (East) – cle1\r\n[14:32:10.830] Cloning github.com/nazarepiedady/svelte-docs-pt (Branch: main, Commit: d01018c)\r\n[14:32:11.083] Previous build cache not available\r\n[14:32:11.975] Cloning completed: 1.145s\r\n[14:32:12.945] Running \"vercel build\"\r\n[14:32:13.496] Vercel CLI 29.2.0\r\n[14:32:14.232] Detected `pnpm-lock.yaml` version 6 generated by pnpm 8...\r\n[14:32:14.245] Installing dependencies...\r\n[14:32:14.799] Scope: all 2 workspace projects\r\n[14:32:14.949] ../..                                    | Progress: resolved 1, reused 0, downloaded 0, added 0\r\n[14:32:15.103] ../..                                    | +721 ++++++++++++++++++++++++++++++++\r\n[14:32:15.543] Packages are hard linked from the content-addressable store to the virtual store.\r\n[14:32:15.544]   Content-addressable store is at: /vercel/.local/share/pnpm/store/v3\r\n[14:32:15.544]   Virtual store is at:             ../../node_modules/.pnpm\r\n[14:32:15.953] ../..                                    | Progress: resolved 721, reused 0, downloaded 48, added 47\r\n[14:32:16.955] ../..                                    | Progress: resolved 721, reused 0, downloaded 128, added 126\r\n[14:32:17.966] ../..                                    | Progress: resolved 721, reused 0, downloaded 230, added 228\r\n[14:32:18.963] ../..                                    | Progress: resolved 721, reused 0, downloaded 304, added 299\r\n[14:32:19.965] ../..                                    | Progress: resolved 721, reused 0, downloaded 409, added 410\r\n[14:32:20.973] ../..                                    | Progress: resolved 721, reused 0, downloaded 458, added 459\r\n[14:32:21.973] ../..                                    | Progress: resolved 721, reused 0, downloaded 536, added 537\r\n[14:32:22.974] ../..                                    | Progress: resolved 721, reused 0, downloaded 621, added 619\r\n[14:32:23.979] ../..                                    | Progress: resolved 721, reused 0, downloaded 691, added 690\r\n[14:32:25.001] ../..                                    | Progress: resolved 721, reused 0, downloaded 719, added 721, done\r\n[14:32:25.260] .../es5-ext@0.10.62/node_modules/es5-ext postinstall$  node -e \"try{require('./_postinstall')}catch(e){}\" || exit 0\r\n[14:32:25.279] .../sharp@0.32.1/node_modules/sharp install$ (node install/libvips && node install/dll-copy && prebuild-install) || (node install/can-compile && node-gyp rebuild && node install/dll-copy)\r\n[14:32:25.293] .../node_modules/bufferutil install$ node-gyp-build\r\n[14:32:25.310] .../node_modules/utf-8-validate install$ node-gyp-build\r\n[14:32:25.327] .../node_modules/svelte-preprocess postinstall$ echo \"[svelte-preprocess] Don't forget to install the preprocessors packages that will be used: sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\"\r\n[14:32:25.353] .../node_modules/svelte-preprocess postinstall: [svelte-preprocess] Don't forget to install the preprocessors packages that will be used: sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\r\n[14:32:25.357] .../node_modules/svelte-preprocess postinstall: Done\r\n[14:32:25.361] .../es5-ext@0.10.62/node_modules/es5-ext postinstall: Done\r\n[14:32:25.507] .../node_modules/bufferutil install: Done\r\n[14:32:25.513] .../sharp@0.32.1/node_modules/sharp install: sharp: Downloading https://github.com/lovell/sharp-libvips/releases/download/v8.14.2/libvips-8.14.2-linux-x64.tar.br\r\n[14:32:25.533] .../node_modules/utf-8-validate install: Done\r\n[14:32:26.059] .../sharp@0.32.1/node_modules/sharp install: sharp: Integrity check passed for linux-x64\r\n[14:32:26.522] .../sharp@0.32.1/node_modules/sharp install: Done\r\n[14:32:26.613] .../esbuild@0.17.19/node_modules/esbuild postinstall$ node install.js\r\n[14:32:26.691] .../esbuild@0.17.19/node_modules/esbuild postinstall: Done\r\n[14:32:26.734] .../node_modules/puppeteer postinstall$ node install.js\r\n[14:32:32.798] .../node_modules/puppeteer postinstall: Chromium (1108766) downloaded to /vercel/.cache/puppeteer/chrome/linux-1108766\r\n[14:32:32.799] .../node_modules/puppeteer postinstall: Done\r\n[14:32:32.805] .../node_modules/@sveltejs/kit postinstall$ node postinstall.js\r\n[14:32:33.373] .../node_modules/@sveltejs/kit postinstall: Done\r\n[14:32:33.530] \r\n[14:32:33.530] dependencies:\r\n[14:32:33.530] + @supabase/supabase-js 2.21.0\r\n[14:32:33.530] + @sveltejs/repl 0.5.0-next.3\r\n[14:32:33.530] + cookie 0.5.0\r\n[14:32:33.530] + devalue 4.3.0\r\n[14:32:33.530] + do-not-zip 1.0.0\r\n[14:32:33.530] + flexsearch 0.7.31\r\n[14:32:33.530] + flru 1.0.2\r\n[14:32:33.530] \r\n[14:32:33.530] devDependencies:\r\n[14:32:33.530] + @resvg/resvg-js 2.4.1\r\n[14:32:33.530] + @sveltejs/adapter-vercel 2.4.3\r\n[14:32:33.530] + @sveltejs/kit 1.16.3\r\n[14:32:33.530] + @sveltejs/site-kit 5.0.4\r\n[14:32:33.530] + @types/marked 4.3.0\r\n[14:32:33.530] + @types/node 20.1.3\r\n[14:32:33.530] + degit 2.8.4\r\n[14:32:33.530] + dotenv 16.0.3\r\n[14:32:33.531] + jimp 0.22.8\r\n[14:32:33.531] + magic-string 0.30.0\r\n[14:32:33.531] + marked 5.0.2\r\n[14:32:33.531] + node-fetch 3.3.1\r\n[14:32:33.531] + prettier 2.8.8\r\n[14:32:33.531] + prettier-plugin-svelte 2.10.0\r\n[14:32:33.531] + rollup 3.21.7\r\n[14:32:33.531] + rollup-plugin-dts 5.3.0\r\n[14:32:33.531] + sass 1.62.1\r\n[14:32:33.531] + satori 0.8.1\r\n[14:32:33.531] + satori-html 0.3.2\r\n[14:32:33.531] + shelljs 0.8.5\r\n[14:32:33.531] + shiki 0.14.2\r\n[14:32:33.531] + shiki-twoslash 3.1.2\r\n[14:32:33.531] + svelte 4.0.0-next.0 <- ../..\r\n[14:32:33.531] + svelte-check 3.3.2\r\n[14:32:33.531] + tiny-glob 0.2.9\r\n[14:32:33.531] + ts-morph 18.0.0\r\n[14:32:33.531] + typescript 5.0.4\r\n[14:32:33.531] + vite 4.3.5\r\n[14:32:33.531] + vite-imagetools 5.0.3\r\n[14:32:33.532] \r\n[14:32:33.533] ../.. prepare$ npm run build\r\n[14:32:33.950] ../.. prepare: > svelte@4.0.0-next.0 build\r\n[14:32:33.951] ../.. prepare: > rollup -c && npm run tsd\r\n[14:32:34.475] ../.. prepare: \r\n[14:32:34.475] ../.. prepare: src/runtime/action/index.ts, src/runtime/animate/index.ts, src/runtime/easing/index.ts, src/runtime/internal/index.ts, src/runtime/motion/index.ts, src/runtime/store/index.ts, src/runtime/transition/index.ts, src/runtime/index.ts, src/runtime/ssr.ts → ., ....\r\n[14:32:35.159] ../.. prepare: (!) Generated empty chunks\r\n[14:32:35.159] ../.. prepare: \"action\" and \"action\"\r\n[14:32:35.160] ../.. prepare: created ., . in 686ms\r\n[14:32:35.160] ../.. prepare: \r\n[14:32:35.160] ../.. prepare: src/compiler/index.ts → compiler.js, compiler.mjs...\r\n[14:32:40.511] ../.. prepare: (!) Circular dependencies\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/nodes/shared/map_children.ts -> src/compiler/compile/nodes/AwaitBlock.ts -> src/compiler/compile/nodes/PendingBlock.ts -> src/compiler/compile/nodes/shared/map_children.ts\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/nodes/ThenBlock.ts -> src/compiler/compile/nodes/shared/get_const_tags.ts -> src/compiler/compile/nodes/shared/map_children.ts -> src/compiler/compile/nodes/AwaitBlock.ts -> src/compiler/compile/nodes/ThenBlock.ts\r\n[14:32:40.512] ../.. prepare: ...and 19 more\r\n[14:32:40.512] ../.. prepare: created compiler.js, compiler.mjs in 5.3s\r\n[14:32:40.968] ../.. prepare: > svelte@4.0.0-next.0 tsd\r\n[14:32:40.968] ../.. prepare: > tsc -p src/compiler --emitDeclarationOnly && tsc -p src/runtime --emitDeclarationOnly\r\n[14:32:48.155] ../.. prepare: Done\r\n[14:32:48.156] Done in 33.8s\r\n[14:32:48.234] Running \"pnpm run build\"\r\n[14:32:48.770] \r\n[14:32:48.770] > svelte.dev@1.0.0 build /vercel/path0/sites/svelte.dev\r\n[14:32:48.770] > node scripts/update.js && pnpm run generate && vite build\r\n[14:32:48.771] \r\n[14:32:50.470] 1 / 24: Rich-Harris\r\n[14:32:50.655] 2 / 24: Conduitry\r\n[14:32:50.879] 3 / 24: tanhauhau\r\n[14:32:50.999] 4 / 24: dummdidumm\r\n[14:32:51.090] 5 / 24: benmccann\r\n[14:32:51.195] 6 / 24: baseballyama\r\n[14:32:51.266] 7 / 24: Swatinem\r\n[14:32:51.330] 8 / 24: jacwright\r\n[14:32:51.426] 9 / 24: lukeed\r\n[14:32:51.620] 10 / 24: mindrones\r\n[14:32:51.698] 11 / 24: mrkishi\r\n[14:32:51.791] 12 / 24: DreaminDani\r\n[14:32:52.078] 13 / 24: pngwn\r\n[14:32:52.132] 14 / 24: ekhaled\r\n[14:32:52.218] 15 / 24: EmilTholin\r\n[14:32:52.276] 16 / 24: geoffrich\r\n[14:32:52.337] 17 / 24: antony\r\n[14:32:52.389] 18 / 24: ignatiusmb\r\n[14:32:52.448] 19 / 24: tivac\r\n[14:32:52.619] 20 / 24: zxbodya\r\n[14:32:52.686] 21 / 24: btk5h\r\n[14:32:52.783] 22 / 24: jches\r\n[14:32:52.838] 23 / 24: gtm-nayan\r\n[14:32:53.071] 24 / 24: PaulBGD\r\n[14:32:53.316] remember to additionally optimize the resulting /static/contributors.jpg image file via e.g. https://squoosh.app \r\n[14:32:57.214] 1 / 24: Datawrapper\r\n[14:32:57.256] 2 / 24: Vercel\r\n[14:32:57.618] 3 / 24: Cohere\r\n[14:32:57.639] 4 / 24: Chrome Frameworks Fund\r\n[14:32:57.639] Skipping Chrome Frameworks Fund: no image data\r\n[14:32:57.640] 4 / 24: Dabble\r\n[14:32:57.684] 5 / 24: Frontend Masters\r\n[14:32:57.933] 6 / 24: Monogram\r\n[14:32:57.952] 7 / 24: PQINA\r\n[14:32:58.165] 8 / 24: Hugging Face\r\n[14:32:58.449] 9 / 24: Raster\r\n[14:32:58.679] 10 / 24: Avast\r\n[14:32:58.701] 11 / 24: INVISR\r\n[14:32:58.889] 12 / 24: Matt\r\n[14:32:59.405] 13 / 24: Layer0\r\n[14:32:59.572] 14 / 24: Guest\r\n[14:32:59.572] Skipping Guest: no image data\r\n[14:32:59.572] 14 / 24: Metafy\r\n[14:32:59.838] 15 / 24: Threema Open Source Fund\r\n[14:32:59.958] 16 / 24: Changelog\r\n[14:33:00.292] 17 / 24: Stack Cats\r\n[14:33:00.556] Skipping Stack Cats: no image data\r\n[14:33:00.556] 17 / 24: Clancy Digital\r\n[14:33:00.812] 18 / 24: John Engstrom\r\n[14:33:00.812] Skipping John Engstrom: no image data\r\n[14:33:00.812] 18 / 24: Kenoxa GmbH\r\n[14:33:01.085] 19 / 24: Level Up Tutorials\r\n[14:33:01.244] 20 / 24: The Pudding\r\n[14:33:01.684] 21 / 24: Jason Hetherington\r\n[14:33:01.743] 22 / 24: Zev Averbach\r\n[14:33:01.824] 23 / 24: Donovan Dikaio\r\n[14:33:02.366] 24 / 24: Christian Bertschy\r\n[14:33:02.366] Skipping Christian Bertschy: no image data\r\n[14:33:02.366] 24 / 24: multi\r\n[14:33:02.966] remember to additionally optimize the resulting /static/donors.jpg image file via e.g. https://squoosh.app \r\n[14:33:04.267] > cloned sveltejs/template#HEAD to scripts/svelte-app\r\n[14:33:04.883] \r\n[14:33:04.884] > svelte.dev@1.0.0 generate /vercel/path0/sites/svelte.dev\r\n[14:33:04.884] > node scripts/type-gen/index.js && node scripts/generate_examples.js\r\n[14:33:04.884] \r\n[14:33:17.261] ▲ [WARNING] Cannot find base config file \"./.svelte-kit/tsconfig.json\" [tsconfig.json]\r\n[14:33:17.262] \r\n[14:33:17.262]     tsconfig.json:2:12:\r\n[14:33:17.262]       2 │   \"extends\": \"./.svelte-kit/tsconfig.json\",\r\n[14:33:17.262]         ╵              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[14:33:17.262] \r\n[14:33:18.073] \r\n[14:33:18.073] \u001b[36mvite v4.3.5 \u001b[32mbuilding SSR bundle for production...\u001b[36m\u001b[39m\r\n[14:33:18.127] transforming...\r\n[14:33:20.036] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/components/Nav.svelte:54:1 A11y: <div> with click, keydown handlers must have an ARIA role\r\n[14:33:20.037] 52: \r\n[14:33:20.037] 53: {#if open}\r\n[14:33:20.037] 54:   <div\r\n[14:33:20.037]       ^\r\n[14:33:20.038] 55:     class=\"modal-background hide-if-desktop\"\r\n[14:33:20.038] 56:     on:click={() => (open = false)}\r\n[14:33:20.251] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:120:1 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:20.252] 118: \r\n[14:33:20.252] 119: {#if $searching && ready}\r\n[14:33:20.252] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.252]        ^\r\n[14:33:20.252] 121: \r\n[14:33:20.252] 122:   <div\r\n[14:33:20.253] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:120:1 A11y: <div> with click handler must have an ARIA role\r\n[14:33:20.253] 118: \r\n[14:33:20.253] 119: {#if $searching && ready}\r\n[14:33:20.253] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.253]        ^\r\n[14:33:20.254] 121: \r\n[14:33:20.254] 122:   <div\r\n[14:33:20.254] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:171:5 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:20.254] 169:       <div class=\"results\">\r\n[14:33:20.254] 170:         {#if search?.query}\r\n[14:33:20.254] 171:           <div class=\"results-container\" on:click={() => ($searching = false)}>\r\n[14:33:20.255]                ^\r\n[14:33:20.255] 172:             <SearchResults\r\n[14:33:20.255] 173:               results={search.results}\r\n[14:33:20.256] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:171:5 A11y: <div> with click handler must have an ARIA role\r\n[14:33:20.257] 169:       <div class=\"results\">\r\n[14:33:20.257] 170:         {#if search?.query}\r\n[14:33:20.257] 171:           <div class=\"results-container\" on:click={() => ($searching = false)}>\r\n[14:33:20.257]                ^\r\n[14:33:20.257] 172:             <SearchResults\r\n[14:33:20.258] 173:               results={search.results}\r\n[14:33:20.258] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:122:1 A11y: <div> with keydown handler must have an ARIA role\r\n[14:33:20.258] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.258] 121: \r\n[14:33:20.258] 122:   <div\r\n[14:33:20.258]        ^\r\n[14:33:20.259] 123:     bind:this={modal}\r\n[14:33:20.259] 124:     class=\"modal\"\r\n[14:33:20.435] 1:33:20 PM [vite-plugin-svelte] /src/routes/(authed)/repl/[id]/UserMenu.svelte:14:0 A11y: <div> with mouseenter, mouseleave handlers must have an ARIA role\r\n[14:33:20.435] 12: </script>\r\n[14:33:20.436] 13: \r\n[14:33:20.436] 14: <div class=\"user\" on:mouseenter={() => (showMenu = true)} on:mouseleave={() => (showMenu = false)}>\r\n[14:33:20.436]     ^\r\n[14:33:20.436] 15:   <span>{name}</span>\r\n[14:33:20.436] 16:   <img alt=\"{name} avatar\" src={user.github_avatar_url} />\r\n[14:33:20.492] 1:33:20 PM [vite-plugin-svelte] /src/lib/utils/Tooltip.svelte:21:0 A11y: <div> with mouseenter, mouseleave handlers must have an ARIA role\r\n[14:33:20.492] 19: \r\n[14:33:20.493] 20: <!-- svelte-ignore a11y-mouse-events-have-key-events -->\r\n[14:33:20.493] 21: <div\r\n[14:33:20.493]     ^\r\n[14:33:20.493] 22:   on:mouseenter\r\n[14:33:20.494] 23:   on:mouseleave\r\n[14:33:20.928] No name was provided for external module \"flexsearch\" in \"output.globals\" – guessing \"flexsearch\".\r\n[14:33:21.011] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:212:6 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:21.011] 210:             />\r\n[14:33:21.012] 211:           {:else}\r\n[14:33:21.012] 212:             <div\r\n[14:33:21.012]                  ^\r\n[14:33:21.012] 213:               class=\"editable\"\r\n[14:33:21.012] 214:               title=\"edit component name\"\r\n[14:33:21.013] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:221:6 A11y: <span> with click, keyup handlers must have an ARIA role\r\n[14:33:21.013] 219:             </div>\r\n[14:33:21.013] 220: \r\n[14:33:21.013] 221:             <span\r\n[14:33:21.014]                  ^\r\n[14:33:21.014] 222:               class=\"remove\"\r\n[14:33:21.014] 223:               on:click={() => remove(index)}\r\n[14:33:21.014] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:167:2 A11y: <div> with dblclick handler must have an ARIA role\r\n[14:33:21.015] 165: <div class=\"component-selector\">\r\n[14:33:21.015] 166:   {#if $files.length}\r\n[14:33:21.015] 167:     <div class=\"file-tabs\" on:dblclick={add_new}>\r\n[14:33:21.015]          ^\r\n[14:33:21.015] 168:       {#each $files as file, index (file)}\r\n[14:33:21.015] 169:         <div\r\n[14:33:21.207] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Message.svelte:32:2 A11y: Non-interactive element <p> should not be assigned mouse or keyboard event listeners.\r\n[14:33:21.207] 30: <div transition:slide={{ duration: 100 }} class=\"message {kind}\" class:truncate>\r\n[14:33:21.207] 31:   {#if details}\r\n[14:33:21.208] 32:     <p\r\n[14:33:21.208]         ^\r\n[14:33:21.208] 33:       class:navigable={details.filename}\r\n[14:33:21.208] 34:       on:click={() => go_to_warning_pos(details)}\r\n[14:33:21.309] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/PaneWithPanel.svelte:48:2 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:21.309] 46: \r\n[14:33:21.310] 47:   <section slot=\"b\">\r\n[14:33:21.310] 48:     <div class=\"panel-header\" on:click={toggle} on:keyup={(e) => e.key === ' ' && toggle()}>\r\n[14:33:21.310]         ^\r\n[14:33:21.310] 49:       <h3>{panel}</h3>\r\n[14:33:21.311] 50:       <slot name=\"panel-header\" />\r\n[14:33:24.087] No name was provided for external module \"acorn\" in \"output.globals\" – guessing \"acorn\".\r\n[14:33:24.087] No name was provided for external module \"estree-walker\" in \"output.globals\" – guessing \"estreeWalker\".\r\n[14:33:24.344] 1:33:24 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/console/ConsoleLine.svelte:29:2 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:24.344] 27: \r\n[14:33:24.345] 28:   {#if log.level === 'trace' || log.level === 'assert'}\r\n[14:33:24.345] 29:     <div\r\n[14:33:24.345]         ^\r\n[14:33:24.345] 30:       class=\"arrow\"\r\n[14:33:24.345] 31:       class:expand={!log.collapsed}\r\n[14:33:24.346] 1:33:24 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/console/ConsoleLine.svelte:18:0 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:24.346] 16: {/if}\r\n[14:33:24.346] 17: \r\n[14:33:24.346] 18: <div\r\n[14:33:24.346]     ^\r\n[14:33:24.346] 19:   class=\"log console-{log.level}\"\r\n[14:33:24.347] 20:   style=\"padding-left: {level * 15}px\"\r\n[14:33:27.023] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:40:2 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.023] 38:   <slot name=\"summary\" />\r\n[14:33:27.023] 39: {:else}\r\n[14:33:27.023] 40:   <span class=\"root\" on:click={toggleExpand}>\r\n[14:33:27.023]       ^\r\n[14:33:27.024] 41:     {#if root}\r\n[14:33:27.024] 42:       <JSONArrow {expanded} />\r\n[14:33:27.024] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:40:2 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.024] 38:   <slot name=\"summary\" />\r\n[14:33:27.024] 39: {:else}\r\n[14:33:27.024] 40:   <span class=\"root\" on:click={toggleExpand}>\r\n[14:33:27.024]       ^\r\n[14:33:27.024] 41:     {#if root}\r\n[14:33:27.024] 42:       <JSONArrow {expanded} />\r\n[14:33:27.024] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:54:12 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.026] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.026] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.026] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.026]                 ^\r\n[14:33:27.026] 55:               <JSONArrow /><slot name=\"item_key\" {key} {index} />{#if !shouldShowColon || shouldShowColon(key)}<span class=\"operator\">:</span>{/if}\r\n[14:33:27.026] 56:             </span><slot name=\"item_value\" {key} {index} />\r\n[14:33:27.026] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:54:12 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.026] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027]                 ^\r\n[14:33:27.027] 55:               <JSONArrow /><slot name=\"item_key\" {key} {index} />{#if !shouldShowColon || shouldShowColon(key)}<span class=\"operator\">:</span>{/if}\r\n[14:33:27.027] 56:             </span><slot name=\"item_value\" {key} {index} />\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:52:8 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.027] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.027] 51:       {#each keys as key, index}\r\n[14:33:27.027] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027]             ^\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:52:8 A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.\r\n[14:33:27.027] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.027] 51:       {#each keys as key, index}\r\n[14:33:27.027] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027]             ^\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:50:4 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.027] 48: \r\n[14:33:27.028] 49:   {#if $expanded}\r\n[14:33:27.028] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.028]         ^\r\n[14:33:27.028] 51:       {#each keys as key, index}\r\n[14:33:27.028] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.028] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:50:4 A11y: Non-interactive element <ul> should not be assigned mouse or keyboard event listeners.\r\n[14:33:27.028] 48: \r\n[14:33:27.028] 49:   {#if $expanded}\r\n[14:33:27.028] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.028]         ^\r\n[14:33:27.028] 51:       {#each keys as key, index}\r\n[14:33:27.028] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.056] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/ErrorStack.svelte:8:0 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.056]  6: </script>\r\n[14:33:27.056]  7: \r\n[14:33:27.056]  8: <span on:click={() => ($expanded = !$expanded)}>\r\n[14:33:27.057]     ^\r\n[14:33:27.057]  9:   {#if $expanded}\r\n[14:33:27.057] 10:     {#each stack as line, index}\r\n[14:33:27.057] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/ErrorStack.svelte:8:0 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.057]  6: </script>\r\n[14:33:27.057]  7: \r\n[14:33:27.057]  8: <span on:click={() => ($expanded = !$expanded)}>\r\n[14:33:27.057]     ^\r\n[14:33:27.057]  9:   {#if $expanded}\r\n[14:33:27.057] 10:     {#each stack as line, index}\r\n[14:33:27.168] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONArrow.svelte:7:2 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.168]  5: \r\n[14:33:27.169]  6: {#if $expandable}\r\n[14:33:27.169]  7:   <span\r\n[14:33:27.169]       ^\r\n[14:33:27.169]  8:     class=\"container\"\r\n[14:33:27.169]  9:     on:click={(event) => {\r\n[14:33:27.169] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONArrow.svelte:7:2 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.169]  5: \r\n[14:33:27.169]  6: {#if $expandable}\r\n[14:33:27.169]  7:   <span\r\n[14:33:27.169]       ^\r\n[14:33:27.169]  8:     class=\"container\"\r\n[14:33:27.170]  9:     on:click={(event) => {\r\n[14:33:56.438] \u001b[32m✓\u001b[39m 347 modules transformed.\r\n[14:33:56.438] 1:33:56 PM [vite-plugin-svelte] WARNING: The following packages use a svelte resolve configuration in package.json that has conflicting results and is going to cause problems future.\r\n[14:33:56.438] \r\n[14:33:56.438] svelte-json-tree@1.0.0\r\n[14:33:56.438] \r\n[14:33:56.438] Please see https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#conflicts-in-svelte-resolve for details.\r\n[14:33:56.438] \u001b[31m\"LOCAL_SVELTE_PATH\" is not exported by \"\n```\n\n\n### System Info\n\n```shell\n[14:32:10.768] Running build in Cleveland, USA (East) – cle1\r\n[14:32:10.830] Cloning github.com/nazarepiedady/svelte-docs-pt (Branch: main, Commit: d01018c)\r\n[14:32:11.083] Previous build cache not available\r\n[14:32:11.975] Cloning completed: 1.145s\r\n[14:32:12.945] Running \"vercel build\"\r\n[14:32:13.496] Vercel CLI 29.2.0\r\n[14:32:14.232] Detected `pnpm-lock.yaml` version 6 generated by pnpm 8...\r\n[14:32:14.245] Installing dependencies...\r\n[14:32:14.799] Scope: all 2 workspace projects\r\n[14:32:14.949] ../..                                    | Progress: resolved 1, reused 0, downloaded 0, added 0\r\n[14:32:15.103] ../..                                    | +721 ++++++++++++++++++++++++++++++++\r\n[14:32:15.543] Packages are hard linked from the content-addressable store to the virtual store.\r\n[14:32:15.544]   Content-addressable store is at: /vercel/.local/share/pnpm/store/v3\r\n[14:32:15.544]   Virtual store is at:             ../../node_modules/.pnpm\r\n[14:32:15.953] ../..                                    | Progress: resolved 721, reused 0, downloaded 48, added 47\r\n[14:32:16.955] ../..                                    | Progress: resolved 721, reused 0, downloaded 128, added 126\r\n[14:32:17.966] ../..                                    | Progress: resolved 721, reused 0, downloaded 230, added 228\r\n[14:32:18.963] ../..                                    | Progress: resolved 721, reused 0, downloaded 304, added 299\r\n[14:32:19.965] ../..                                    | Progress: resolved 721, reused 0, downloaded 409, added 410\r\n[14:32:20.973] ../..                                    | Progress: resolved 721, reused 0, downloaded 458, added 459\r\n[14:32:21.973] ../..                                    | Progress: resolved 721, reused 0, downloaded 536, added 537\r\n[14:32:22.974] ../..                                    | Progress: resolved 721, reused 0, downloaded 621, added 619\r\n[14:32:23.979] ../..                                    | Progress: resolved 721, reused 0, downloaded 691, added 690\r\n[14:32:25.001] ../..                                    | Progress: resolved 721, reused 0, downloaded 719, added 721, done\r\n[14:32:25.260] .../es5-ext@0.10.62/node_modules/es5-ext postinstall$  node -e \"try{require('./_postinstall')}catch(e){}\" || exit 0\r\n[14:32:25.279] .../sharp@0.32.1/node_modules/sharp install$ (node install/libvips && node install/dll-copy && prebuild-install) || (node install/can-compile && node-gyp rebuild && node install/dll-copy)\r\n[14:32:25.293] .../node_modules/bufferutil install$ node-gyp-build\r\n[14:32:25.310] .../node_modules/utf-8-validate install$ node-gyp-build\r\n[14:32:25.327] .../node_modules/svelte-preprocess postinstall$ echo \"[svelte-preprocess] Don't forget to install the preprocessors packages that will be used: sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\"\r\n[14:32:25.353] .../node_modules/svelte-preprocess postinstall: [svelte-preprocess] Don't forget to install the preprocessors packages that will be used: sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\r\n[14:32:25.357] .../node_modules/svelte-preprocess postinstall: Done\r\n[14:32:25.361] .../es5-ext@0.10.62/node_modules/es5-ext postinstall: Done\r\n[14:32:25.507] .../node_modules/bufferutil install: Done\r\n[14:32:25.513] .../sharp@0.32.1/node_modules/sharp install: sharp: Downloading https://github.com/lovell/sharp-libvips/releases/download/v8.14.2/libvips-8.14.2-linux-x64.tar.br\r\n[14:32:25.533] .../node_modules/utf-8-validate install: Done\r\n[14:32:26.059] .../sharp@0.32.1/node_modules/sharp install: sharp: Integrity check passed for linux-x64\r\n[14:32:26.522] .../sharp@0.32.1/node_modules/sharp install: Done\r\n[14:32:26.613] .../esbuild@0.17.19/node_modules/esbuild postinstall$ node install.js\r\n[14:32:26.691] .../esbuild@0.17.19/node_modules/esbuild postinstall: Done\r\n[14:32:26.734] .../node_modules/puppeteer postinstall$ node install.js\r\n[14:32:32.798] .../node_modules/puppeteer postinstall: Chromium (1108766) downloaded to /vercel/.cache/puppeteer/chrome/linux-1108766\r\n[14:32:32.799] .../node_modules/puppeteer postinstall: Done\r\n[14:32:32.805] .../node_modules/@sveltejs/kit postinstall$ node postinstall.js\r\n[14:32:33.373] .../node_modules/@sveltejs/kit postinstall: Done\r\n[14:32:33.530] \r\n[14:32:33.530] dependencies:\r\n[14:32:33.530] + @supabase/supabase-js 2.21.0\r\n[14:32:33.530] + @sveltejs/repl 0.5.0-next.3\r\n[14:32:33.530] + cookie 0.5.0\r\n[14:32:33.530] + devalue 4.3.0\r\n[14:32:33.530] + do-not-zip 1.0.0\r\n[14:32:33.530] + flexsearch 0.7.31\r\n[14:32:33.530] + flru 1.0.2\r\n[14:32:33.530] \r\n[14:32:33.530] devDependencies:\r\n[14:32:33.530] + @resvg/resvg-js 2.4.1\r\n[14:32:33.530] + @sveltejs/adapter-vercel 2.4.3\r\n[14:32:33.530] + @sveltejs/kit 1.16.3\r\n[14:32:33.530] + @sveltejs/site-kit 5.0.4\r\n[14:32:33.530] + @types/marked 4.3.0\r\n[14:32:33.530] + @types/node 20.1.3\r\n[14:32:33.530] + degit 2.8.4\r\n[14:32:33.530] + dotenv 16.0.3\r\n[14:32:33.531] + jimp 0.22.8\r\n[14:32:33.531] + magic-string 0.30.0\r\n[14:32:33.531] + marked 5.0.2\r\n[14:32:33.531] + node-fetch 3.3.1\r\n[14:32:33.531] + prettier 2.8.8\r\n[14:32:33.531] + prettier-plugin-svelte 2.10.0\r\n[14:32:33.531] + rollup 3.21.7\r\n[14:32:33.531] + rollup-plugin-dts 5.3.0\r\n[14:32:33.531] + sass 1.62.1\r\n[14:32:33.531] + satori 0.8.1\r\n[14:32:33.531] + satori-html 0.3.2\r\n[14:32:33.531] + shelljs 0.8.5\r\n[14:32:33.531] + shiki 0.14.2\r\n[14:32:33.531] + shiki-twoslash 3.1.2\r\n[14:32:33.531] + svelte 4.0.0-next.0 <- ../..\r\n[14:32:33.531] + svelte-check 3.3.2\r\n[14:32:33.531] + tiny-glob 0.2.9\r\n[14:32:33.531] + ts-morph 18.0.0\r\n[14:32:33.531] + typescript 5.0.4\r\n[14:32:33.531] + vite 4.3.5\r\n[14:32:33.531] + vite-imagetools 5.0.3\r\n[14:32:33.532] \r\n[14:32:33.533] ../.. prepare$ npm run build\r\n[14:32:33.950] ../.. prepare: > svelte@4.0.0-next.0 build\r\n[14:32:33.951] ../.. prepare: > rollup -c && npm run tsd\r\n[14:32:34.475] ../.. prepare: \r\n[14:32:34.475] ../.. prepare: src/runtime/action/index.ts, src/runtime/animate/index.ts, src/runtime/easing/index.ts, src/runtime/internal/index.ts, src/runtime/motion/index.ts, src/runtime/store/index.ts, src/runtime/transition/index.ts, src/runtime/index.ts, src/runtime/ssr.ts → ., ....\r\n[14:32:35.159] ../.. prepare: (!) Generated empty chunks\r\n[14:32:35.159] ../.. prepare: \"action\" and \"action\"\r\n[14:32:35.160] ../.. prepare: created ., . in 686ms\r\n[14:32:35.160] ../.. prepare: \r\n[14:32:35.160] ../.. prepare: src/compiler/index.ts → compiler.js, compiler.mjs...\r\n[14:32:40.511] ../.. prepare: (!) Circular dependencies\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/nodes/shared/map_children.ts -> src/compiler/compile/nodes/AwaitBlock.ts -> src/compiler/compile/nodes/PendingBlock.ts -> src/compiler/compile/nodes/shared/map_children.ts\r\n[14:32:40.512] ../.. prepare: src/compiler/compile/nodes/ThenBlock.ts -> src/compiler/compile/nodes/shared/get_const_tags.ts -> src/compiler/compile/nodes/shared/map_children.ts -> src/compiler/compile/nodes/AwaitBlock.ts -> src/compiler/compile/nodes/ThenBlock.ts\r\n[14:32:40.512] ../.. prepare: ...and 19 more\r\n[14:32:40.512] ../.. prepare: created compiler.js, compiler.mjs in 5.3s\r\n[14:32:40.968] ../.. prepare: > svelte@4.0.0-next.0 tsd\r\n[14:32:40.968] ../.. prepare: > tsc -p src/compiler --emitDeclarationOnly && tsc -p src/runtime --emitDeclarationOnly\r\n[14:32:48.155] ../.. prepare: Done\r\n[14:32:48.156] Done in 33.8s\r\n[14:32:48.234] Running \"pnpm run build\"\r\n[14:32:48.770] \r\n[14:32:48.770] > svelte.dev@1.0.0 build /vercel/path0/sites/svelte.dev\r\n[14:32:48.770] > node scripts/update.js && pnpm run generate && vite build\r\n[14:32:48.771] \r\n[14:32:50.470] 1 / 24: Rich-Harris\r\n[14:32:50.655] 2 / 24: Conduitry\r\n[14:32:50.879] 3 / 24: tanhauhau\r\n[14:32:50.999] 4 / 24: dummdidumm\r\n[14:32:51.090] 5 / 24: benmccann\r\n[14:32:51.195] 6 / 24: baseballyama\r\n[14:32:51.266] 7 / 24: Swatinem\r\n[14:32:51.330] 8 / 24: jacwright\r\n[14:32:51.426] 9 / 24: lukeed\r\n[14:32:51.620] 10 / 24: mindrones\r\n[14:32:51.698] 11 / 24: mrkishi\r\n[14:32:51.791] 12 / 24: DreaminDani\r\n[14:32:52.078] 13 / 24: pngwn\r\n[14:32:52.132] 14 / 24: ekhaled\r\n[14:32:52.218] 15 / 24: EmilTholin\r\n[14:32:52.276] 16 / 24: geoffrich\r\n[14:32:52.337] 17 / 24: antony\r\n[14:32:52.389] 18 / 24: ignatiusmb\r\n[14:32:52.448] 19 / 24: tivac\r\n[14:32:52.619] 20 / 24: zxbodya\r\n[14:32:52.686] 21 / 24: btk5h\r\n[14:32:52.783] 22 / 24: jches\r\n[14:32:52.838] 23 / 24: gtm-nayan\r\n[14:32:53.071] 24 / 24: PaulBGD\r\n[14:32:53.316] remember to additionally optimize the resulting /static/contributors.jpg image file via e.g. https://squoosh.app \r\n[14:32:57.214] 1 / 24: Datawrapper\r\n[14:32:57.256] 2 / 24: Vercel\r\n[14:32:57.618] 3 / 24: Cohere\r\n[14:32:57.639] 4 / 24: Chrome Frameworks Fund\r\n[14:32:57.639] Skipping Chrome Frameworks Fund: no image data\r\n[14:32:57.640] 4 / 24: Dabble\r\n[14:32:57.684] 5 / 24: Frontend Masters\r\n[14:32:57.933] 6 / 24: Monogram\r\n[14:32:57.952] 7 / 24: PQINA\r\n[14:32:58.165] 8 / 24: Hugging Face\r\n[14:32:58.449] 9 / 24: Raster\r\n[14:32:58.679] 10 / 24: Avast\r\n[14:32:58.701] 11 / 24: INVISR\r\n[14:32:58.889] 12 / 24: Matt\r\n[14:32:59.405] 13 / 24: Layer0\r\n[14:32:59.572] 14 / 24: Guest\r\n[14:32:59.572] Skipping Guest: no image data\r\n[14:32:59.572] 14 / 24: Metafy\r\n[14:32:59.838] 15 / 24: Threema Open Source Fund\r\n[14:32:59.958] 16 / 24: Changelog\r\n[14:33:00.292] 17 / 24: Stack Cats\r\n[14:33:00.556] Skipping Stack Cats: no image data\r\n[14:33:00.556] 17 / 24: Clancy Digital\r\n[14:33:00.812] 18 / 24: John Engstrom\r\n[14:33:00.812] Skipping John Engstrom: no image data\r\n[14:33:00.812] 18 / 24: Kenoxa GmbH\r\n[14:33:01.085] 19 / 24: Level Up Tutorials\r\n[14:33:01.244] 20 / 24: The Pudding\r\n[14:33:01.684] 21 / 24: Jason Hetherington\r\n[14:33:01.743] 22 / 24: Zev Averbach\r\n[14:33:01.824] 23 / 24: Donovan Dikaio\r\n[14:33:02.366] 24 / 24: Christian Bertschy\r\n[14:33:02.366] Skipping Christian Bertschy: no image data\r\n[14:33:02.366] 24 / 24: multi\r\n[14:33:02.966] remember to additionally optimize the resulting /static/donors.jpg image file via e.g. https://squoosh.app \r\n[14:33:04.267] > cloned sveltejs/template#HEAD to scripts/svelte-app\r\n[14:33:04.883] \r\n[14:33:04.884] > svelte.dev@1.0.0 generate /vercel/path0/sites/svelte.dev\r\n[14:33:04.884] > node scripts/type-gen/index.js && node scripts/generate_examples.js\r\n[14:33:04.884] \r\n[14:33:17.261] ▲ [WARNING] Cannot find base config file \"./.svelte-kit/tsconfig.json\" [tsconfig.json]\r\n[14:33:17.262] \r\n[14:33:17.262]     tsconfig.json:2:12:\r\n[14:33:17.262]       2 │   \"extends\": \"./.svelte-kit/tsconfig.json\",\r\n[14:33:17.262]         ╵              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n[14:33:17.262] \r\n[14:33:18.073] \r\n[14:33:18.073] \u001b[36mvite v4.3.5 \u001b[32mbuilding SSR bundle for production...\u001b[36m\u001b[39m\r\n[14:33:18.127] transforming...\r\n[14:33:20.036] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/components/Nav.svelte:54:1 A11y: <div> with click, keydown handlers must have an ARIA role\r\n[14:33:20.037] 52: \r\n[14:33:20.037] 53: {#if open}\r\n[14:33:20.037] 54:   <div\r\n[14:33:20.037]       ^\r\n[14:33:20.038] 55:     class=\"modal-background hide-if-desktop\"\r\n[14:33:20.038] 56:     on:click={() => (open = false)}\r\n[14:33:20.251] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:120:1 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:20.252] 118: \r\n[14:33:20.252] 119: {#if $searching && ready}\r\n[14:33:20.252] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.252]        ^\r\n[14:33:20.252] 121: \r\n[14:33:20.252] 122:   <div\r\n[14:33:20.253] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:120:1 A11y: <div> with click handler must have an ARIA role\r\n[14:33:20.253] 118: \r\n[14:33:20.253] 119: {#if $searching && ready}\r\n[14:33:20.253] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.253]        ^\r\n[14:33:20.254] 121: \r\n[14:33:20.254] 122:   <div\r\n[14:33:20.254] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:171:5 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:20.254] 169:       <div class=\"results\">\r\n[14:33:20.254] 170:         {#if search?.query}\r\n[14:33:20.254] 171:           <div class=\"results-container\" on:click={() => ($searching = false)}>\r\n[14:33:20.255]                ^\r\n[14:33:20.255] 172:             <SearchResults\r\n[14:33:20.255] 173:               results={search.results}\r\n[14:33:20.256] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:171:5 A11y: <div> with click handler must have an ARIA role\r\n[14:33:20.257] 169:       <div class=\"results\">\r\n[14:33:20.257] 170:         {#if search?.query}\r\n[14:33:20.257] 171:           <div class=\"results-container\" on:click={() => ($searching = false)}>\r\n[14:33:20.257]                ^\r\n[14:33:20.257] 172:             <SearchResults\r\n[14:33:20.258] 173:               results={search.results}\r\n[14:33:20.258] 1:33:20 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+site-kit@5.0.4_@sveltejs+kit@1.16.3_svelte@/node_modules/@sveltejs/site-kit/dist/search/SearchBox.svelte:122:1 A11y: <div> with keydown handler must have an ARIA role\r\n[14:33:20.258] 120:   <div class=\"modal-background\" on:click={close} />\r\n[14:33:20.258] 121: \r\n[14:33:20.258] 122:   <div\r\n[14:33:20.258]        ^\r\n[14:33:20.259] 123:     bind:this={modal}\r\n[14:33:20.259] 124:     class=\"modal\"\r\n[14:33:20.435] 1:33:20 PM [vite-plugin-svelte] /src/routes/(authed)/repl/[id]/UserMenu.svelte:14:0 A11y: <div> with mouseenter, mouseleave handlers must have an ARIA role\r\n[14:33:20.435] 12: </script>\r\n[14:33:20.436] 13: \r\n[14:33:20.436] 14: <div class=\"user\" on:mouseenter={() => (showMenu = true)} on:mouseleave={() => (showMenu = false)}>\r\n[14:33:20.436]     ^\r\n[14:33:20.436] 15:   <span>{name}</span>\r\n[14:33:20.436] 16:   <img alt=\"{name} avatar\" src={user.github_avatar_url} />\r\n[14:33:20.492] 1:33:20 PM [vite-plugin-svelte] /src/lib/utils/Tooltip.svelte:21:0 A11y: <div> with mouseenter, mouseleave handlers must have an ARIA role\r\n[14:33:20.492] 19: \r\n[14:33:20.493] 20: <!-- svelte-ignore a11y-mouse-events-have-key-events -->\r\n[14:33:20.493] 21: <div\r\n[14:33:20.493]     ^\r\n[14:33:20.493] 22:   on:mouseenter\r\n[14:33:20.494] 23:   on:mouseleave\r\n[14:33:20.928] No name was provided for external module \"flexsearch\" in \"output.globals\" – guessing \"flexsearch\".\r\n[14:33:21.011] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:212:6 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:21.011] 210:             />\r\n[14:33:21.012] 211:           {:else}\r\n[14:33:21.012] 212:             <div\r\n[14:33:21.012]                  ^\r\n[14:33:21.012] 213:               class=\"editable\"\r\n[14:33:21.012] 214:               title=\"edit component name\"\r\n[14:33:21.013] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:221:6 A11y: <span> with click, keyup handlers must have an ARIA role\r\n[14:33:21.013] 219:             </div>\r\n[14:33:21.013] 220: \r\n[14:33:21.013] 221:             <span\r\n[14:33:21.014]                  ^\r\n[14:33:21.014] 222:               class=\"remove\"\r\n[14:33:21.014] 223:               on:click={() => remove(index)}\r\n[14:33:21.014] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Input/ComponentSelector.svelte:167:2 A11y: <div> with dblclick handler must have an ARIA role\r\n[14:33:21.015] 165: <div class=\"component-selector\">\r\n[14:33:21.015] 166:   {#if $files.length}\r\n[14:33:21.015] 167:     <div class=\"file-tabs\" on:dblclick={add_new}>\r\n[14:33:21.015]          ^\r\n[14:33:21.015] 168:       {#each $files as file, index (file)}\r\n[14:33:21.015] 169:         <div\r\n[14:33:21.207] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Message.svelte:32:2 A11y: Non-interactive element <p> should not be assigned mouse or keyboard event listeners.\r\n[14:33:21.207] 30: <div transition:slide={{ duration: 100 }} class=\"message {kind}\" class:truncate>\r\n[14:33:21.207] 31:   {#if details}\r\n[14:33:21.208] 32:     <p\r\n[14:33:21.208]         ^\r\n[14:33:21.208] 33:       class:navigable={details.filename}\r\n[14:33:21.208] 34:       on:click={() => go_to_warning_pos(details)}\r\n[14:33:21.309] 1:33:21 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/PaneWithPanel.svelte:48:2 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:21.309] 46: \r\n[14:33:21.310] 47:   <section slot=\"b\">\r\n[14:33:21.310] 48:     <div class=\"panel-header\" on:click={toggle} on:keyup={(e) => e.key === ' ' && toggle()}>\r\n[14:33:21.310]         ^\r\n[14:33:21.310] 49:       <h3>{panel}</h3>\r\n[14:33:21.311] 50:       <slot name=\"panel-header\" />\r\n[14:33:24.087] No name was provided for external module \"acorn\" in \"output.globals\" – guessing \"acorn\".\r\n[14:33:24.087] No name was provided for external module \"estree-walker\" in \"output.globals\" – guessing \"estreeWalker\".\r\n[14:33:24.344] 1:33:24 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/console/ConsoleLine.svelte:29:2 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:24.344] 27: \r\n[14:33:24.345] 28:   {#if log.level === 'trace' || log.level === 'assert'}\r\n[14:33:24.345] 29:     <div\r\n[14:33:24.345]         ^\r\n[14:33:24.345] 30:       class=\"arrow\"\r\n[14:33:24.345] 31:       class:expand={!log.collapsed}\r\n[14:33:24.346] 1:33:24 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/@sveltejs+repl@0.5.0-next.3_@codemirror+lang-html@6.4.3_@lezer+common@1.0.2_@lezer+javascript_e3ue6634kbpatvbh556537a6nm/node_modules/@sveltejs/repl/dist/Output/console/ConsoleLine.svelte:18:0 A11y: <div> with click, keyup handlers must have an ARIA role\r\n[14:33:24.346] 16: {/if}\r\n[14:33:24.346] 17: \r\n[14:33:24.346] 18: <div\r\n[14:33:24.346]     ^\r\n[14:33:24.346] 19:   class=\"log console-{log.level}\"\r\n[14:33:24.347] 20:   style=\"padding-left: {level * 15}px\"\r\n[14:33:27.023] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:40:2 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.023] 38:   <slot name=\"summary\" />\r\n[14:33:27.023] 39: {:else}\r\n[14:33:27.023] 40:   <span class=\"root\" on:click={toggleExpand}>\r\n[14:33:27.023]       ^\r\n[14:33:27.024] 41:     {#if root}\r\n[14:33:27.024] 42:       <JSONArrow {expanded} />\r\n[14:33:27.024] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:40:2 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.024] 38:   <slot name=\"summary\" />\r\n[14:33:27.024] 39: {:else}\r\n[14:33:27.024] 40:   <span class=\"root\" on:click={toggleExpand}>\r\n[14:33:27.024]       ^\r\n[14:33:27.024] 41:     {#if root}\r\n[14:33:27.024] 42:       <JSONArrow {expanded} />\r\n[14:33:27.024] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:54:12 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.026] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.026] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.026] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.026]                 ^\r\n[14:33:27.026] 55:               <JSONArrow /><slot name=\"item_key\" {key} {index} />{#if !shouldShowColon || shouldShowColon(key)}<span class=\"operator\">:</span>{/if}\r\n[14:33:27.026] 56:             </span><slot name=\"item_value\" {key} {index} />\r\n[14:33:27.026] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:54:12 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.026] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027]                 ^\r\n[14:33:27.027] 55:               <JSONArrow /><slot name=\"item_key\" {key} {index} />{#if !shouldShowColon || shouldShowColon(key)}<span class=\"operator\">:</span>{/if}\r\n[14:33:27.027] 56:             </span><slot name=\"item_value\" {key} {index} />\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:52:8 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.027] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.027] 51:       {#each keys as key, index}\r\n[14:33:27.027] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027]             ^\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:52:8 A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.\r\n[14:33:27.027] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.027] 51:       {#each keys as key, index}\r\n[14:33:27.027] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.027]             ^\r\n[14:33:27.027] 53:           <Expandable key={expandKey(key)} expanded={child_expanded[index]}>\r\n[14:33:27.027] 54:             <span class=\"label\" on:click={() => child_expanded[index].update((value) => !value)}>\r\n[14:33:27.027] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:50:4 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.027] 48: \r\n[14:33:27.028] 49:   {#if $expanded}\r\n[14:33:27.028] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.028]         ^\r\n[14:33:27.028] 51:       {#each keys as key, index}\r\n[14:33:27.028] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.028] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONNested.svelte:50:4 A11y: Non-interactive element <ul> should not be assigned mouse or keyboard event listeners.\r\n[14:33:27.028] 48: \r\n[14:33:27.028] 49:   {#if $expanded}\r\n[14:33:27.028] 50:     <ul on:click|stopPropagation={toggleExpand}>\r\n[14:33:27.028]         ^\r\n[14:33:27.028] 51:       {#each keys as key, index}\r\n[14:33:27.028] 52:         <li class:indent={$expanded} on:click|stopPropagation={() => {}}>\r\n[14:33:27.056] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/ErrorStack.svelte:8:0 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.056]  6: </script>\r\n[14:33:27.056]  7: \r\n[14:33:27.056]  8: <span on:click={() => ($expanded = !$expanded)}>\r\n[14:33:27.057]     ^\r\n[14:33:27.057]  9:   {#if $expanded}\r\n[14:33:27.057] 10:     {#each stack as line, index}\r\n[14:33:27.057] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/ErrorStack.svelte:8:0 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.057]  6: </script>\r\n[14:33:27.057]  7: \r\n[14:33:27.057]  8: <span on:click={() => ($expanded = !$expanded)}>\r\n[14:33:27.057]     ^\r\n[14:33:27.057]  9:   {#if $expanded}\r\n[14:33:27.057] 10:     {#each stack as line, index}\r\n[14:33:27.168] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONArrow.svelte:7:2 A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n[14:33:27.168]  5: \r\n[14:33:27.169]  6: {#if $expandable}\r\n[14:33:27.169]  7:   <span\r\n[14:33:27.169]       ^\r\n[14:33:27.169]  8:     class=\"container\"\r\n[14:33:27.169]  9:     on:click={(event) => {\r\n[14:33:27.169] 1:33:27 PM [vite-plugin-svelte] /vercel/path0/node_modules/.pnpm/svelte-json-tree@1.0.0/node_modules/svelte-json-tree/_/JSONArrow.svelte:7:2 A11y: <span> with click handler must have an ARIA role\r\n[14:33:27.169]  5: \r\n[14:33:27.169]  6: {#if $expandable}\r\n[14:33:27.169]  7:   <span\r\n[14:33:27.169]       ^\r\n[14:33:27.169]  8:     class=\"container\"\r\n[14:33:27.170]  9:     on:click={(event) => {\r\n[14:33:56.438] \u001b[32m✓\u001b[39m 347 modules transformed.\r\n[14:33:56.438] 1:33:56 PM [vite-plugin-svelte] WARNING: The following packages use a svelte resolve configuration in package.json that has conflicting results and is going to cause problems future.\r\n[14:33:56.438] \r\n[14:33:56.438] svelte-json-tree@1.0.0\r\n[14:33:56.438] \r\n[14:33:56.438] Please see https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#conflicts-in-svelte-resolve for details.\r\n[14:33:56.438] \u001b[31m\"LOCAL_SVELTE_PATH\" is not exported by \"\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-24T22:24:16Z","created_at":"2023-05-16T13:49:21Z","creator_user_login":"nazarepiedady"}
{"number":8589,"title":"Error when destructuring variables in slotted `{@const}`","body":"### Describe the bug\r\n\r\nI can reference properties from a store like this in my template code:\r\n```\r\n$engagementsContext.sortedBy\r\n$engagementsContext.toggleSort\r\n$engagementsContext.sortActionTitle\r\n$engagementsContext.sortIcon\r\n$engagementsContext.sortedByInverse\r\n```\r\n\r\n…but if I first try to destructure those properties using `{@const}`, I get this error:\r\n\r\n`ReferenceFrror: sortedBy is not defined at Array.create_after_title_slot` (and so on)\r\n\r\n** My hunch is this has to do with the `{@const being considered part of the default slot of its parent's component, while I'm technically trying to use its destructured values in another slot.\r\n\r\n### Addtl referential screenshots\r\n\r\n| Working code sample (w/o destructuring) | Broken code screenshot (w/ destructuring) | Resulting error |\r\n| - | - | - |\r\n| <img width=\"1624\" alt=\"Screenshot 2023-05-14 at 9 08 04 PM\" src=\"https://github.com/sveltejs/svelte/assets/5913254/d2c32060-785c-4463-9094-f6a749534e62\"> | <img width=\"1624\" alt=\"Screenshot 2023-05-14 at 9 07 46 PM\" src=\"https://github.com/sveltejs/svelte/assets/5913254/7251d1bf-10ef-4d3d-aeef-8f3ab3d99e53\"> | <img width=\"358\" alt=\"Screenshot 2023-05-14 at 9 07 36 PM\" src=\"https://github.com/sveltejs/svelte/assets/5913254/87025adf-7bd7-4fda-a33f-9e95b52b46dd\"> |\r\n\r\n### Reproduction\r\n\r\n* Basic reproduction: https://svelte.dev/repl/102dbd6fe6bc441180fa59d8fd2e2c03?version=3.59.1\r\n* Attempted workaround: https://svelte.dev/repl/717d0debe4464481aa9280bbbe0d5708?version=3.59.1\r\n* Attempted workaround #​2: https://svelte.dev/repl/ace70bae29574258847f64e4d033bdd0?version=3.59.1\r\n  ☝🏼 this one actually works and appears to confirm my above hunch\r\n\r\n### Logs\r\n\r\n```\r\n[HMR][Svelte] Failed to rerender <+page>\r\n\r\nReferenceError: sortedBy is not defined\r\n    at Array.create_after_title_slot (https://dev.carevoyance.com:5001/src/routes/app/(:5001/app/field/providers/search)/field/providers/[providerId]/+page.svelte?t=1684125015357:1729:17)\r\n    at create_slot (index.mjs:71:28)\r\n    at fallback_block_2 (MiniDossierSection.svelte:68:53)\r\n    at create_if_block_4 (MiniDossierSection.svelte:68:53)\r\n    at create_if_block_1 (MiniDossierSection.svelte:69:22)\r\n    at create_fragment (MiniDossierSection.svelte:67:19)\r\n    at init (index.mjs:2113:37)\r\n    at new MiniDossierSection (MiniDossierSection.svelte:50:21)\r\n    at createProxiedComponent (svelte-hooks.js?v=ddc96c07:341:9)\r\n    at new ProxyComponent (proxy.js?v=ddc96c07:242:7)\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```\r\nSystem:\r\n  OS: macOS 13.1\r\n  CPU: (10) arm64 Apple M1 Pro\r\n  Memory: 535.67 MB / 32.00 GB\r\n  Shell: 5.8.1 - /bin/zsh\r\nBinaries:\r\n  Node: 18.14.2 - ~/.nvm/versions/node/v18.14.2/bin/node\r\n  Yarn: 1.22.19 - /opt/homebrew/bin/yarn\r\n  npm: 9.5.0 - ~/.nvm/versions/node/v18.14.2/bin/npm\r\nBrowsers:\r\n  Chrome: 113.0.5672.92\r\n  Chrome Canary: 115.0.5771.0\r\n  Firefox: 112.0.2\r\n  Firefox Nightly: 111.0a1\r\n  Safari: 16.2\r\n  Safari Technology Preview: 16.4\r\nnpmPackages:\r\n  svelte: ~3.57.0 => 3.57.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-05-15T05:03:24Z","created_at":"2023-05-15T04:35:32Z","creator_user_login":"brandonmcconnell"}
{"number":8587,"title":"Support Native CSS Nesting","body":"### Describe the problem\n\nNative CSS Nesting without a pre-processor is stable since Chromium 112 (March 2023), and is in technical preview of Safari 16.5.\r\n\r\nHowever, this syntax is _not_ supported by Svelte's processor in `<style>` tags.  Especially in instances like using Svelte in third-party web containers where you might not have control over the availability of additional pre-processors, this makes writing the style rules far simpler/easier than using complex selectors or a multitude of classes, allowing more rapid and readable prototyping.\r\n\r\nSurprisingly, there's no open or closed issue covering this topic.\r\n\r\nSources:\r\nhttps://caniuse.com/css-nesting\r\nhttps://web.dev/web-platform-04-2023/\r\nhttps://developer.chrome.com/articles/css-nesting/\r\nhttps://webkit.org/blog/13813/try-css-nesting-today-in-safari-technology-preview/\n\n### Describe the proposed solution\n\nTreat nested selectors as valid syntax.  Given this html:\r\n```html\r\n<p>\r\n  We really <span>should</span> support this\r\n  <strong class=\"red\">because it's part of the web platform...</strong>\r\n</p>\r\n```\r\nAll of these syntaxes should work without error:\r\n```html\r\n<style>\r\n  /* p strong */\r\n  p {\r\n    strong {\r\n      line-height: 1.2;\r\n    }\r\n  }\r\n  /* strong.red */\r\n  strong {\r\n    &.red {\r\n       color: red;\r\n    }\r\n  }\r\n  /* p > span */\r\n  p {\r\n    > span {\r\n      color: orange;\r\n    }\r\n  }\r\n</style>\r\n```\n\n### Alternatives considered\n\nUsing a pre-processor is the alternative, but it adds unnecessary bloat to the DX.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-07-13T16:44:18Z","created_at":"2023-05-14T10:28:57Z","creator_user_login":"jrmoynihan"}
{"number":8583,"title":"Resize observer `contentBoxSize` binding is undefined","body":"### Describe the bug\r\n\r\nI am trying to use the new resize observer bindings that were released in 3.59.0. `bind:borderBoxSize` is working as expected, but I have not been able to get `bind:contentBoxSize` to work. Its value stays undefined. I've tested in Safari, Chrome, and Firefox on macOS.\r\n\r\nI'm not familiar with the Svelte codebase, but I wonder if the issue might be in [these lines](https://github.com/sveltejs/svelte/blob/3bc791bcba97f0810165c7a2e215563993a0989b/src/compiler/compile/render_dom/wrappers/Element/index.ts#L73-L77):\r\n\r\n```js\r\n{\r\n\tevent_names: ['elementresizecontentbox'],\r\n\tfilter: (_node: Element, name: string) =>\r\n\t\tregex_content_rect.test(name) ?? regex_content_box_size.test(name)\r\n},\r\n```\r\n\r\nI think the check should be `regex_content_rect.test(name) || regex_content_box_size.test(name)`. The regex `test()` method returns either true or false. The righthand side of `??` is only evaluated if the lefthand side is null or undefined, which can't happen here. I would be happy to submit a PR if this is the fix.\r\n\r\n### Reproduction\r\n\r\n[REPL](https://svelte.dev/repl/1d03a63e4c1e48d89e5c6404fa6b9bea?version=3.59.1) demo showing that `bind:borderBoxSize` works, but `bind:contentBoxSize` does not.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.2.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 53.31 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.9.0 - ~/.nvm/versions/node/v18.9.0/bin/node\r\n    Yarn: 3.5.1 - ~/.nvm/versions/node/v18.9.0/bin/yarn\r\n    npm: 8.19.1 - ~/.nvm/versions/node/v18.9.0/bin/npm\r\n  Browsers:\r\n    Chrome: 113.0.5672.92\r\n    Firefox: 112.0.2\r\n    Safari: 16.3\r\n  npmPackages:\r\n    svelte: ^3.59.0 => 3.59.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-05-12T22:35:23Z","created_at":"2023-05-12T22:34:20Z","creator_user_login":"DanielKerrigan"}
{"number":8576,"title":"Out transition blocks update to component props, even when outro is cancelled","body":"### Describe the bug\n\nIf a component is outroing while a prop value is updated, it never receives the updated value, even if the outro is cancelled. This means the child's prop values will be inconsistent and out of sync with the values of the parent where they were passed in.\n\n### Reproduction\n\nhttps://svelte.dev/repl/88c6aeb7daab45519bab0315d38f5d9d?version=3.59.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nnpmPackages:\r\n  svelte: ^3.59.1 => 3.59.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-10T16:35:51Z","created_at":"2023-05-10T16:34:52Z","creator_user_login":"jrouleau"}
{"number":8568,"title":"`autocomplete=\"webauthn\"` attribute for <input> element causes false positive autocomplete A11y warning","body":"### Describe the bug\r\n\r\nUsing \"webauthn\" or combinations with \"webauthn\" as first token (\"webauthn username\" or \"webauthn current-password\") on an <input> element causes the false positive A11y warning.\r\n\r\nChange the order (\"username webauthn\"/\"current-password webauthn\") shadows these misbehaviour.\r\n\r\nThe \"webauthn\" token is required for the \"conditional UI\" feature:\r\nhttps://github.com/w3c/webauthn/wiki/Explainer:-WebAuthn-Conditional-UI#api-layer\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/764933c9d9154d33b23291304a3be380?version=3.59.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n  OS: Linux 6.2 Fedora Linux 38 (KDE Plasma)\r\n  CPU: (16) x64 AMD Ryzen 7 6800HS Creator Edition\r\n  Memory: 2.56 GB / 13.32 GB\r\n  Container: Yes\r\n  Shell: 5.9 - /usr/bin/zsh\r\nBinaries:\r\n  Node: 18.15.0 - /run/user/1004/fnm_multishells/4620_1683544166787/bin/node\r\n  npm: 9.6.6 - /run/user/1004/fnm_multishells/4620_1683544166787/bin/npm\r\nBrowsers:\r\n  Firefox: 112.0.2\r\nnpmPackages:\r\n  svelte: 3.59.0 => 3.59.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-05-09T12:55:42Z","created_at":"2023-05-08T14:56:30Z","creator_user_login":"SourceR85"}
{"number":8560,"title":"docs: Add escaping of curly braces to docs","body":"Minor addition to the docs specifying the way to include curly braces in .svelte HTML just to show there isn't a built magic escape sequence to use. Is very simple information, but just handy to have if your mind is somewhere else.\r\n\r\nAdded to the bottom of the [Text Expressions](https://svelte.dev/docs#template-syntax-text-expressions) section.\r\n","state":"open","updated_at":"2023-07-18T22:07:31Z","created_at":"2023-05-05T12:50:25Z","creator_user_login":"bytesnz"}
{"number":8559,"title":"compiler produces invalid JS code","body":"### Describe the bug\n\nThe Svelte compiler produces an invalid JavaScript output if a store **and** a regular variable get destructured.\r\n\r\nThe code\r\n```js\r\n;({\tnonStore, store } = getExports())\r\n```\r\nproduces this snippet\r\n```js\r\nlet store, nonStore;\r\n{ nonStore, store } = getExports() // ! this should be wrapped into parentheses `({ nonStore, store } = getExports())`\r\n$$subscribe_store(store)\r\nreturn [store, nonStore, $store];\r\n```\r\nwhich is invalid JavaScript.\r\n\r\n---\r\n\r\nBut this only happens if the store get's destructured **after** the regular variable. When destructring `store` before `nonStore` the ouput is valid.\r\n```js\r\n;({\tstore , nonStore } = getExports())\r\n```\r\n\r\nproduces the following snippet:\r\n```js\r\nlet store, nonStore;\r\n$$subscribe_store({ store, nonStore } = getExports());\r\nreturn [store, nonStore, $store];\r\n```\r\n\r\nWhile it is valid JavaScript, it produces invalid runtime code. `subscribe_store` should probably only be called with `store`. But the code still works (at least for my use case).\r\n\r\n---\r\n\r\nAs a workaround I currently always check if I destructure all stores before all other variables.\n\n### Reproduction\n\nhttps://svelte.dev/repl/0a6390c4f3bb40869b032124c4e937f9?version=3.58.0\r\n\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte REPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-05T12:50:46Z","created_at":"2023-05-05T12:40:31Z","creator_user_login":"ivanhofer"}
{"number":8558,"title":"Handle warning emitted from the Svelte compiler","body":"### Describe the problem\n\nNow, `vite-plugin-svelte` and `svelte-check` provide their own warning filter.\r\n\r\nhttps://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#onwarn\r\nhttps://github.com/sveltejs/language-tools/tree/master/packages/svelte-check\r\n\r\nAnd now, ESLint users requested to filter warnings.\r\n\r\nhttps://github.com/sveltejs/eslint-plugin-svelte/issues/311\r\n\r\nIf Svelte compiler itself provides a warning filter, these 3 tools don't need to have this and it will be better in terms of maintainability.\n\n### Describe the proposed solution\n\nProvide warning filter by Svelte compiler.\n\n### Alternatives considered\n\nImplement warning filter by ESLint plugin.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-08-23T07:59:46Z","created_at":"2023-05-05T02:35:08Z","creator_user_login":"baseballyama"}
{"number":8556,"title":"Attempting to rename destructured slot variable keys results in a compilation error","body":"### Describe the bug\r\n\r\nWhen using slot variables, if you have a variable that's an object and you try to destructure it there's no problem:\r\n\r\n```sv\r\n<!-- this is fine: -->\r\n<Component let:data={{ foo, bar, baz }} />\r\n```\r\n\r\nHowever, if you try to rename some key in the object, or destructure a nested object, a compilation error is thrown:\r\n\r\n```sv\r\n<!-- this fails: -->\r\n<Component let:data={{ foo: fooRenamed }} />\r\n<!-- so does this: -->\r\n<Component let:data={{ bar: { nestedInBar } }} />\r\n```\r\n\r\nInterestringly, the Svelte for VS Code extension doesn't show any errors on the destructured code, perhaps because it's valid javascript.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/98917cf206794f20a4d3c45d012583be?version=3.58.0\r\n\r\n### Logs\r\n\r\n```shell\r\nStack trace from svelte.repl:\r\n\r\nTypeError: Cannot read properties of undefined (reading 'index')\r\n    at get_slot_definition.ts:60:88\r\n    at Array.map (<anonymous>)\r\n    at get_slot_definition (get_slot_definition.ts:60:33)\r\n    at new SlotTemplateWrapper (SlotTemplate.ts:57:4)\r\n    at index.ts:92:52\r\n    at Array.map (<anonymous>)\r\n    at new InlineComponentWrapper (index.ts:92:39)\r\n    at new FragmentWrapper (Fragment.ts:124:21)\r\n    at new Renderer (Renderer.ts:90:19)\r\n    at dom (index.ts:23:19)\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte: v3.58.0\r\nAll browsers\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-01T08:02:55Z","created_at":"2023-05-04T11:37:43Z","creator_user_login":"joelmukuthu"}
{"number":8551,"title":"Reactive statement triggers although nothing changes","body":"### Describe the bug\n\nIn the REPL below:\r\n1. Open the console\r\n2. Open `Indirect.svelte`\r\n3. Use the buttons 'Version1' and 'Version2' in the rendered UI and watch the console output\r\n\r\n`arr` does not change, but nevertheless the output is triggered.\r\nNot sure if binding to a reactive variable is supported, but if not it might be good if it threw an error or something.\n\n### Reproduction\n\nhttps://svelte.dev/repl/5e19ac3aeacf46a0a6067280f7deae84?version=3.58.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 6.1 undefined\r\n    CPU: (12) x64 AMD Ryzen 5 3600X 6-Core Processor\r\n    Memory: 35.36 GB / 62.73 GB\r\n    Container: Yes\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.19.0 - /bin/node\r\n    Yarn: 1.22.18 - /bin/yarn\r\n    npm: 8.19.3 - /bin/npm\r\n  Browsers:\r\n    Chromium: 112.0.5615.49\r\n    Firefox: 112.0.2\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.58.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-03T09:14:59Z","created_at":"2023-05-03T07:13:56Z","creator_user_login":"inzanez"}
{"number":8547,"title":"Getting the current order of renderless components","body":"### Describe the problem\n\nVarious ways of how to iterate/get all children of a Svelte component have been discussed in #5381 or #4455. However, there does not seem to be a way to determine the current order of the children in svelte if the children are renderless. In case of children which render stuff to the DOM you can simply use the DOM-tree to infer the ordering. The same goes for virtual DOM frameworks, where you just use the virtual DOM.\r\n\r\nThe reason I need this information is that I'm currently converting an imperative HTML 5 2D canvas library into a declarative svelte component library using renderless components. The resulting usage would roughly look like this:\r\n```svelte\r\n<Stage>\r\n  <Layer>\r\n    <Rectangle />\r\n\r\n    {#each circles as circle}\r\n      <Circle />\r\n    {/each}\r\n\r\n    {#if showLine}\r\n      <Line />\r\n    {/if}\r\n  </Layer>\r\n  <Layer>\r\n    <Star />\r\n  </Layer>\r\n</Stage>\r\n```\r\nIdeally, the actual component order of the shapes in svelte would match the draw order on the canvas, so the user does not have to worry about doing the ordering manually but simply rely on the svelte-native way of ordering components. To achieve this, I need to be able to not only know the children of the Layer component but also their current order.\r\n\n\n### Describe the proposed solution\n\nIt would be nice if there was a way to determine the current order of components. I understand that this is very much a niche use case, but this is also the first time I truly ran into a limitation of Svelte. I've tried various things in the past days to achieve this but looking at the Svelte source I don't think it is currently possible to do any of this. If it is, please let me know how :)\n\n### Alternatives considered\n\nA considered way to infer the order of components was to listen to the before/afterUpdate hooks and notify the parent component on each call (using stores). The parent component then saves the order of the incoming child notifications, which corresponds to the current child order. This works well enough for stuff inside each blocks apart from #7001 which I also observed. This way of inferring the order fails in more complex cases where if blocks are used. In cases where this if block's condition initializes to false, there is no way of knowing where it belongs in the current order once it gets mounted.\r\n\r\nIn my use case, the alternative is that the user has to manage ordering of the shapes manually and simply ignore svelte ordering for most parts. This unfortunately complicates things for the user quite a bit compared to other libraries using vue or react which can directly rely on the order of the components. \n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-05-01T13:48:17Z","created_at":"2023-05-01T13:48:17Z","creator_user_login":"TeyKey1"}
{"number":8541,"title":"If I have any empty `<svelte:fragment></svelte:fragment>` the slot is not rendered.","body":"### Describe the bug\r\n\r\nIf I have in the parent:\r\n\r\n```ts\r\n//...\r\n\r\n{#if $$slots.head}\r\n  <PlayerHead {title}>\r\n    <slot name=\"head\" {data} />\r\n  </PlayerHead>\r\n{/if}\r\n```\r\n\r\nand I use the empty:\r\n\r\n```svelte\r\n<svelte:fragment slot=\"head\"></svelte:fragment>\r\n```\r\n\r\nthe `head` slot is not rendered.\r\n\r\nIf I use the below instead:\r\n\r\n```svelte\r\n<div slot=\"head\"></div>\r\n```\r\n\r\nthe slot is rendered.\r\n\r\nWhy I cannot use `svelte:fragment` if empty?\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10\r\n  Binaries:\r\n    Node: 18.16.0\r\n    npm: 9.6.5\r\n  Browsers:\r\n    Chromium (107.0.1418.62)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2023-05-01T13:28:54Z","created_at":"2023-04-28T11:16:59Z","creator_user_login":"frederikhors"}
{"number":8538,"title":"Component style exposure mechanism","body":"## Describe the ~~problem~~ context\r\n\r\n\r\nI've been playing with Svelte for nearly a year now and it has been a major game changer for me. I'm absolutely in love with it 😍.\r\nHowever, I'm still struggling when it comes to style generic components.\r\n\r\n### **Long story short** \r\n\r\nCouple of month ago, I've started to build a component library for myself. Everything was going great until the question of styling. How do I allow future library users to style each component to benefit from mechanics but adapt them entirely to their application interface.\r\nStyling is a big part of frontend development and so far, despite some funny stereotypes, I find CSS a pretty cool tool to achieve beautiful and intuitive interfaces. However, with svelte and scope-style, I can't use css out of the box to style the component wherever I use them. I have to either use javascript/typescript to expose style purpose variables, expose classes to do in DOM styling or break style scope (or multiply css variables in a specific and tricky way, I'll talk about it further as a workaround).\r\n\r\nFirst, I really wish to keep styles scoped as much as possible. Second, exposing multiple css variables as component props is such a bad idea as it won't work without javascript, induces hard-to-read structure and is just unpleasant. So the only way to achieve components styling is to expose classes in a tailwind like way... Which kind of break style scoping, is unpleasant in my humble opinion and to summarize NOT CSS.\r\n\r\nThis is an issue that many svelte users are facing, and many ideas were proposed, mainly based on allowing component to be styled from outside. All these proposals were rejected, and rightly so. A list of some proposals and discussions is available below but I think that [**RFCs @pngwn comment**](https://github.com/sveltejs/rfcs/pull/22#issuecomment-664047806) beautifully summarizes maintainers opinion and the problems with the approaches so far proposed (**I strongly suggest you to read it**).\r\n\r\n\r\n### **Long story LONG**\r\n\r\nI do understand the desire of maintainers to keep svelte **opiniated** to avoid misuse.\r\n\r\n> \"Make the right thing easy, and the wrong thing possible.\" - [RFCs @pngwn comment](https://github.com/sveltejs/rfcs/pull/22#issuecomment-664047806)\r\n\r\nAlso, I share the vision that components should remain \"their own bosses\" meaning self-explainatory and aware of its exposed part. A component variable setting must be explicitly exposed by the component. This way, users can easily understand how the component works and how it should be used.\r\n\r\nTherefore I completely agree with the negative response to the last feature requests regarding the opening of components to CSS class injection or similar concepts.\r\n\r\nThat said, I strongly disagree with the statement \"component should not accept styles from outside\". Waging war against parent styling children is waging war against theming and more generally genericity. Not having parent able to style components is drastically limiting component reuse which is one of the main advantage of Svelte and similar frameworks. CSS and styling of a component can't be isolated from context. \r\n\r\nIn the current state svelte does not allow to expose the styles of a component in a comfortable way. HTML structure can be exposed using slot API. JS code can be exposed using props. But CSS styles have no exposure mechanism; understand self-explainatory, explicit and comfortable mechanism.\r\n\r\nOf course we can still expose styles by exposing props to use in style attribute. It works but it present major drawbacks :\r\n* it does not work without javascript,\r\n* it's big boilerplate,\r\n* it induces big component structure, multiplying props with a majority for styling purpose and not logic,\r\n* it makes reading of styles harder,\r\n* it implies working outside of the `<style>` tag whereas styling should just be modifiying `<style>` tag only.\r\n\r\nAnother way around is to use `:global()`. After reading many comments on the subject, at least everyone seems to agree that this is not a good and practical thing to do : This is equivalent to using global naming and does not take advantage of Svelte scoping. That's a problem everybody seems aware of.\r\n\r\n> \"This API (component styling API) should not open the flood gates of global cascading CSS, and it should offer excellent ergonomics, preferably taking advantage of the recent language tooling developments. We need a theming solution.\" - @pngw\r\n\r\n**Related issues :**\r\n * [Introduce `<style module>` #6972](https://github.com/sveltejs/svelte/issues/6972)\r\n * [Passing class to components #2870](https://github.com/sveltejs/svelte/issues/2870)\r\n * [Support classes on nested components #2888](https://github.com/sveltejs/svelte/pull/2888)\r\n * [Allow scoped class to be passed to the child components #4843](https://github.com/sveltejs/svelte/issues/4843)\r\n * [Styles get uncorrectly removed / how to pass down styles? #4281](https://github.com/sveltejs/svelte/issues/4281)\r\n * [Allow parent to impact child component CSS rfcs#22](https://github.com/sveltejs/rfcs/pull/22)\r\n * [Provide classname utility for style encapsulation between parent/child component](https://github.com/sveltejs/svelte/issues/7776)\r\n * [CSS Component Selector](https://github.com/sveltejs/svelte/issues/7694)\r\n\r\n**Related comments :**\r\n * [@pngwn comment, please read it 😂](https://github.com/sveltejs/rfcs/pull/22#issuecomment-664047806)\r\n * [@tncrazvan comment about exposing css](https://github.com/sveltejs/svelte/issues/6972#issuecomment-987711868)\r\n * [@geirmarius comment about css styles requiring parent control](https://github.com/sveltejs/svelte/pull/2888#issuecomment-554782656)\r\n * [@idoros comment about bypassing component style encapsulation](https://github.com/sveltejs/rfcs/pull/13#issuecomment-653936666)\r\n * [@aradalvand comment about recent hopes and potential solution](https://github.com/sveltejs/svelte/issues/6972#issuecomment-1371679372)\r\n * [@AdaptingAFM comment on slot style tag](https://github.com/sveltejs/rfcs/pull/66#issuecomment-1372325987)\r\n\r\n---\r\n\r\n## Describe the proposed ~~solution~~ concept\r\n\r\n\r\nInspired by [@tncrazvan idea](https://github.com/sveltejs/svelte/issues/6972#issuecomment-987711868), multiple comments and my own researches, I here present what I think would be the ideal mechanism to adress those problems. Keep in mind that by \"Ideal mechanism\" I only suggest that it addresses the previously presented problems while respecting Svelte opiniated philosophy.\r\nThe main idea is to allow a component to describe explicitly and precisely through CSS which styles are exposed to parent(s).\r\n\r\nIn `component.svelte`\r\n```html\r\n<div id=\"root\" class=\"container\">\r\n\t<span class=\"item\">Hi</span>\r\n\t<span class=\"item everyone\">Everyone !</span>\r\n</div>\r\n\r\n<style>\r\n\r\n\t#root{\r\n\t\tposition : absolute;\r\n\t\ttop : 50%;\r\n\t\tleft : 50%;\r\n\t\ttransform : translate(-50%,-50%);\r\n\t}\r\n\r\n\tspan.item{\r\n\t\tfont-family : Arial;\r\n\t}\r\n\r\n// The css styles inside the :expose directive are exposed to parent styling\r\n\r\n\t:expose(span.item){\r\n\t\tcolor : red;\r\n\t}\r\n\t\r\n\t:expose(#root){\r\n\t\twidth : 20vw; \r\n\t\theight : 20vw;\r\n\t}\r\n</style>\r\n```\r\n\r\nNote that we could also imagine styles completely exposed with a `<style expose>` tag in similar way of `<style global>`.\r\n\r\nIn `parent.svelte`\r\n```html\r\n\r\n\t<div id=\"parent\">\r\n\t\t<Component>\r\n\t</div>\r\n\r\n\t<style>\r\n\r\n\t\t#parent div{\r\n\t\t\twidth : 13vw;\r\n\t\t\theight : 13vw; // Overrides the root exposed styles\r\n\t\t\tposition : fixed; // Is ignored as position is not exposed\r\n\t\t}\r\n\r\n\t\t// What's important is the selected DOM element not the selector\r\n\t\t#parent #root{\r\n\t\t\tleft : 43%; // Still ignored\r\n\t\t\theight : 14vw; // Still overriding default 20vw\r\n\t\t}\r\n\r\n\t\t#parent span.item.everyone{\r\n\t\t\tcolor : blue; // Overriding the color just for the second span with everyone class\r\n\t\t}\r\n\t</style>\r\n```\r\n\r\nOf course the exposed/overrided styles would benefit from scoping and hash naming. I don't know exactly how to achieve that at compilation but I do understand that it requires additional and potentially complex logic. However I could imagine compilation to give something like below, with overriding based on CSS rules position. \r\n\r\n\r\n```html\r\n\r\n\t<div id=\"parent\">\r\n\t\t<div id=\"root\" class=\"container hash1 hashExposed1\">\r\n\t\t\t<span class=\"item hash2\">Hi</span>\r\n\t\t\t<span class=\"item everyone hash2 hashExposed2\">Everyone !</span>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<style>\r\n\t\thash1{\r\n\t\t\tposition : absolute;\r\n\t\t\ttop : 50%;\r\n\t\t\tleft : 50%;\r\n\t\t\ttransform : translate(-50%,-50%);\r\n\t\t\twidth : 20vw; \r\n\t\t\theight : 20vw;\r\n\t\t}\r\n\r\n\t\thash2{\r\n\t\t\tfont-family : Arial;\r\n\t\t\tcolor : red;\r\n\t\t}\r\n\r\n\t\thashExposed1 {\r\n\t\t\twidth : 13vw;\r\n\t\t\theight : 14vw;\r\n\t\t}\r\n\r\n\t\thashExposed2{\r\n\t\t\tcolor : blue;\r\n\t\t}\r\n\t</style>\r\n```\r\n\r\nOr we could imagine an even more precise overriding based on the css rules comparison, which would require even more complex compilation logic, but no pain no gain 😁\r\n\r\nI would be happy to work on this more deeply when time comes, but I think this is sufficient to understand the concept of my proposal.\r\n\r\nThis solution would allow CSS exposition through CSS which make a lot of more sense than exposing CSS variables through props.\r\n\r\n---\r\n\r\n## Describe the Alternative\r\n\r\n\r\n### Description\r\n\r\nIn this journey of svelte css styling, I gradually developed an alternative solution based on native css variables. Although it works in most use cases, it is quite heavy.\r\n It looks more like a best practice guide.\r\n\r\n> \"This *-the solution-* does not exist today. **You can do an awful lot with css variables, more than people give them credit for**, but this isn't a solved problem\" - @pngw\r\n\r\nWhenever I create a component destined to be used in multiple context with different styles, I use css native variables to expose the css property that I consider stylable. For each 'exposed' css property, I define 2 native variable, one to be used outside by parent and one default variable which can store default value (quite handy for theming).\r\n\r\nIt gives me a pretty simple component that I can style from parent with default styles depending on global template. Paired with exposed class, we can also define multiple default templates.\r\n\r\nIn `component.svelte`\r\n```html\r\n<div id=\"root\" component=\"component\" class=\"container\">\r\n\t<span class=\"item\">Hi</span>\r\n\t<span class=\"item everyone\">Everyone !</span>\r\n</div>\r\n\r\n<style>\r\n\r\n\t#root{\r\n\t\tposition : var(--componentname-position, var(--default-componentname-position));\r\n\t\ttop : var(--componentname-top, var(--default-componentname-top));\r\n\t\tleft : var(--componentname-left, var(--default-componentname-left));\r\n\t\ttransform : translate(-50%,-50%);\r\n\t}\r\n\r\n\tspan.item{\r\n\t\tfont-family : Arial;\r\n\t}\r\n</style>\r\n```\r\n\r\nIn a template global file `template.css`\r\n```css\r\n\r\ndiv[component=\"component\"]{\r\n\t--default-componentname-position : relative;\r\n\t--default-componentname-left : 50%;\r\n\t--default-componentname-right : 50%;\r\n}\r\n\r\n```\r\n\r\nIn `parent.svelte`\r\n```html\r\n\r\n\t<div id=\"parent\">\r\n\t\t<Component>\r\n\t</div>\r\n\r\n\t<style>\r\n\r\n\t\t#parent{\r\n\t\t\t--componentname-top: 40%; // Overriding the default top value of component\r\n\t\t}\r\n\t</style>\r\n```\r\n\r\nThis technique has numerous advantages :\r\n* uses native features,\r\n* do not break css scoping,\r\n* do not use `:global()` in most cases,\r\n* allows css rule inheritance,\r\n* only concerns CSS and `<style>` tag,\r\n* lets the component control its exposition,\r\n* offers new ways of defining theme (through default variables). \r\n\r\nThese are the main reasons that pushed me to introduce this solution as a pretty neat alternative to a css exposure mechanism. HOWEVER, some limitations remain (remember when I said *\"an almost complete solution\"* 😁)\r\n\r\n#### Limitations\r\n\r\nThis alternative perfectly works when we use components inside native DOM elements but things get tricky when you wan't to use your stylable component inside other stylable component without having to add DOM elements.\r\n\r\n#### Parent context\r\n\r\nThe first limitation is about parent context. If I use my component inside another and I want to apply a specific style depending on its parent context (focused, hovered or with a special class), I need to anticipate all of that inside the child component :\r\n\r\nSay I have an `Icon` and a `Button` components.\r\n\r\n`Icon.svelte`\r\n```html\r\n\r\n<svg class=\"icon\" ... />\r\n\r\n<style>\r\n\tsvg{\r\n\t\tstroke : var(--icon-stroke, var(--default-icon-stroke));\r\n\t}\r\n</style>\r\n```\r\n\r\n`Button.svelte`\r\n```html\r\n<div class=\"button\">\r\n<slot />\r\n</div>\r\n\r\n<style>\r\n\t.button{\r\n\t\tcolor : var(--button-color, var(--default-button-color));\r\n\t}\r\n\r\n\t.button:hover{\r\n\t\tcolor : var(--button-hover-color, var(--default-button-hover-color, var(--button-color), var(--default-button-color))) \r\n\t\t// Note the ability to define fallbacks... \r\n\t}\r\n</style>\r\n```\r\n\r\nI can change the `Button` color depending on its context : hover or not. But if I wan't to use an `Icon` directly inside the `Button`, I can't change its stroke color depending on `Button` context.\r\n\r\n`anywhere`\r\n```html\r\n<div class=\"root\">\r\n\t<Button>\r\n\t\t<Icon />\r\n\t</Button>\r\n</div>\r\n\r\n<style>\r\n\t.root{\r\n\t\t--button-color : white;\r\n\t\t--button-hover-color: grey;\r\n\t\t--icon-stroke : white;\r\n\t}\r\n</style>\r\n```\r\n\r\nI actually found a solution which works for 1 level but kind of break the idea of component \"independancy\" and agnostic of its context :\r\n\r\n`Icon.svelte`\r\n```html\r\n<style>\r\n\tsvg{\r\n\t\tstroke : var(--icon-stroke, var(--default-icon-stroke));\r\n\t}\r\n\r\n\t:global(*:hover) > svg{\r\n\t\tstroke : var(--icon-parent-hover-stroke, var(--default-icon-parent-hover-stroke));\r\n\t}\r\n</style>\r\n```\r\n\r\n`anywhere`\r\n```html\r\n<style>\r\n\t.root{\r\n\t\t--button-color : white;\r\n\t\t--button-hover-color: grey;\r\n\t\t--icon-stroke : white;\r\n\t\t--icon-parent-hover-stroke : grey;\r\n\t}\r\n</style>\r\n```\r\n\r\nNote that it won't work as such if Icon is not a direct children of Button and also that this solution adds a ton of global css rules...\r\n\r\n\r\n#### Component variants\r\n\r\nSimilarly, multiple questions arise when we wan't to use stylable components inside others without adding native DOM element. For example when I wan't to create a new stylable component based on a combination of others such as a `Button` variant with an Icon, several questions remain about how to treat their css variables :\r\n\r\n`IconButton.svelte`\r\n```html\r\n<Button>\r\n\t<Icon />\r\n\t<slot />\r\n</Button>\r\n```\r\n\r\n* Should I expose Icon prop class to be able to apply specific template to it ?\r\n* Should default styles of Icon written inside IconButton selector ?\r\n* Should I override Icon css variables ? By wrapping them.\r\n\r\nMost of the time the answer depends on the usecase and induce tradeoffs.\r\n\r\nAlso, the idea of default styles works great for 1 level composition but gets harder when using mutliple ones...\r\n\r\nThis limitation in composition can be avoided with additional native html tag addition which is not catastrophic but not ideal either. It might also disappear with the apparition of `:has()` css selector.\r\n\r\n\r\n## Importance\r\n\r\nwould make my life easier. However, crucial to talk about at least.\r\n\r\n## Final words\r\n\r\nI don't pretend to offer the perfect solution. But the mechanism I propose has the advantage of meeting a specification that respects the vision of the maintainers while enhancing developer experience :\r\n\r\n* Components control their exposition.\r\n* Styles are scoped.\r\n* CSS style has its own exposition API.\r\n\r\nThis mechanism would drastically enhances svelte potential by unblocking component genericity and, at the same time, reduces bad practices such as using `:global()`.\r\n\r\nNote that my goal is not to revive aggressive debates ! I do not have the energy to reply to aggressive thoughts. I'm not particularly attached to my proposal either, I just want to refocus debates on finding an acceptable solution to this aknowledged problem of styling... Maybe the solution relies in the alternative I've presented which I would happily discuss. I've opened a new issue as I wanted to regroup discussions about styling issues while providing a fresh start and stepping out of the aging huge general issue [#6972](https://github.com/sveltejs/svelte/issues/6972). However, if the maintainers prefer, I can close it and change it as an answer.","state":"open","updated_at":"2023-09-02T18:52:52Z","created_at":"2023-04-26T09:09:25Z","creator_user_login":"Tyrenn"}
{"number":8533,"title":"Slide Transition should have min-height/width set to 0","body":"### Describe the bug\n\n`min-height` or `min-width` will break the behavior of `transition:slide`, it will slide until the minimum value then stop\n\n### Reproduction\n\n```svelte\r\n<script lang=\"ts\">\r\n    import { slide } from 'svelte/transition';\r\n</script>\r\n<div class=\"has-min-width\">\r\n    this will not slide properly\r\n</div>\r\n<style>\r\n    .has-min-width {\r\n        padding: 10px;\r\n        color: white;\r\n        background-color: black;\r\n        min-height: 100px;\r\n        height: 200px;\r\n    }\r\n</style>\r\n```\r\nmy temporary fix:\r\n```ts\r\nimport {\r\n    slide as originalSlide,\r\n    type SlideParams,\r\n    type TransitionConfig\r\n} from 'svelte/transition';\r\n\r\nexport function slide(node: HTMLElement, options: SlideParams = {}): TransitionConfig {\r\n    const config = originalSlide(node, options);\r\n    return {\r\n        ...config,\r\n        css: (t: number, u: number) => `${config.css!(t, u)};min-height: 0;`\r\n    };\r\n}\r\n\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (16) x64 AMD Ryzen 7 5700G with Radeon Graphics\r\n    Memory: 10.36 GB / 31.85 GB\r\n  Binaries:\r\n    Node: 18.12.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.4.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (112.0.1722.58)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.58.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-25T11:43:42Z","created_at":"2023-04-25T11:43:42Z","creator_user_login":"eslym"}
{"number":8529,"title":"role=\"menu\" incorrectly marked as rendundant and no-interactive-to-interactive when used on menu element","body":"### Describe the bug\n\n![image](https://user-images.githubusercontent.com/53383860/233819233-2fe7072a-bd04-4a9b-93dc-361f1927b255.png)\r\n\r\nHas per [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu) the `menu` element is like the ul element but more semantically correct for interactive content, and the implicit role is `list` not `menu`.\n\n### Reproduction URL\n\nN/A\n\n### Reproduction\n\n_No response_\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (16) x64 AMD Ryzen 9 4900H with Radeon Graphics\r\n    Memory: 16.49 GB / 31.42 GB\r\n  Binaries:\r\n    Node: 18.14.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 9.3.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1555.0), Chromium (112.0.1722.58)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    @sveltejs/adapter-static: ^2.0.1 => 2.0.2 \r\n    @sveltejs/kit: ^1.15.2 => 1.15.5 \r\n    svelte: ^3.58.0 => 3.58.0 \r\n    vite: ^4.2.1 => 4.2.1\n```\n","state":"open","updated_at":"2023-04-26T02:56:31Z","created_at":"2023-04-23T04:07:15Z","creator_user_login":"raythurnevoid"}
{"number":8522,"title":"`@const` erroneous rerender on slot prop update","body":"### Describe the bug\n\nWhen using the `@const` directive with a component that accepts slot props, as the slot prop changes & the component rerenders, the `@const` directive attached to it rerenders no matter what. Whilst that alone could be acceptable, the issue arrises when it **doesn't trigger rerenders for its dependents**, which creates desynch, especially when using side-effects.\r\n\r\nCurrently, the workaround I'm using is just to wrap what the `@const` directive would've had as its value, into a component, & using slot props. This is not very sustainable, once the number of directives increase.\n\n### Reproduction\n\nhttps://svelte.dev/repl/80b36627ebea4c95beac69da22df90fd?version=3.58.0\r\n\r\nIn the REPL console, you can see `const 1` constantly being logged, erroneously. Subsequently, even though `const 1` is logged, `const 2` isn't, even though it depends on `a`.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nn/a (tested fully on REPL)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-21T06:47:16Z","created_at":"2023-04-20T13:34:23Z","creator_user_login":"Sxxov"}
{"number":8518,"title":"Bug report: no error when using `@const` variable before initialization","body":"### Describe the bug\r\n\r\nI was trying to include a space after a comma in an if-statement. Consider this repro:\r\n\r\n```svelte\r\n<script>\r\n  const length = 10;\r\n</script>\r\n\r\n{#each { length } as _, i}\r\n  {@const nth = i + 1}\r\n  {nth}{#if nth !== length}, {/if}\r\n{/each}\r\n```\r\n[REPL](https://svelte.dev/repl/4837f323d81a43dd8bd5580b4f6f530f?version=3.58.0)\r\n\r\nI did want the space to be a breaking space, so `&nbsp;` wouldn't work here. I tried `&#32;` which I believe is the equivalent code for a traditional breaking space, but that did not work either. (e.g. `{nth}{#if nth !== length},&#32;{/if}`).\r\n\r\nFinally, I did something accidentally and reordered the two lines inside the enclosing `{#each}` block, only to find that change did achieve what I was trying to do even without a space or special char, but I feel like it shouldn't since the variable is now declared after it's used.\r\n\r\n```svelte\r\n<script>\r\n  const length = 10;\r\n</script>\r\n\r\n{#each { length } as _, i}\r\n  {nth}{#if nth !== length},{/if}\r\n  {@const nth = i + 1}\r\n{/each}\r\n```\r\n[REPL](https://svelte.dev/repl/d794180c6972432ba6375bc058e964c7?version=3.58.0)\r\n\r\n### Reproduction\r\n\r\nREPL links above\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nmacOS v13.1 (22C65)\r\nSvelte v3.58.0 (in REPL)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-04T17:03:02Z","created_at":"2023-04-18T21:55:01Z","creator_user_login":"brandonmcconnell"}
{"number":8513,"title":"@const is evaluated twice when used in keyed each","body":"### Describe the bug\n\nWhen using `@const` in a keyed `#each` block the `@const` expression is evaluated twice.\n\n### Reproduction\n\nhttps://svelte.dev/repl/2638afb0ae634b7d82c6515a1a56ac6a?version=3.58.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n-\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-18T15:40:29Z","created_at":"2023-04-18T14:46:40Z","creator_user_login":"pbvahlst"}
{"number":8511,"title":"change on behavior with Chrome on bound width keyed","body":"### Describe the bug\r\n\r\nI found a different behavior from svelte v3.55.1 to V3.56 applying on Chrome but not Firefox:\r\n\r\nwith such code:\r\n\r\n```svelte\r\n<script>\r\n  let width;\r\n  let mystore;\r\n  $: console.log(width, $mystore);\r\n</script>\r\n<div bind:clientWidth={width}>\r\n  {#key width}\r\n    <MyStore bind:store={mystore} />\r\n  {/key}\r\n</div>\r\n```\r\n\r\nEventually the store in MyStore will ends up as undefined using Chrome with svelte 3.56 while with previous versions of svelte mystore would have held the store defined in MyStore.\r\n\r\n\r\n\r\n### Reproduction\r\n\r\n[https://codesandbox.io/s/svelte-clientwidth-key-3-55-1-forked-1nt7oc?file=/App.svelte](https://codesandbox.io/s/svelte-clientwidth-key-3-55-1-forked-1nt7oc?file=/App.svelte)\r\n\r\n[https://codesandbox.io/s/svelte-clientwidth-key-3-56-bbghxr?file=/App.svelte](https://codesandbox.io/s/svelte-clientwidth-key-3-56-bbghxr?file=/App.svelte)\r\n\r\nTo see the real behavior on codesandbox: \"Open In New Window\" and open the Console.\r\n\r\n### Logs\r\n\r\nFirefox - 3.55.1:\r\n```\r\nundefined undefined\r\n1904 0\r\n1904 1\r\n```\r\n\r\nFirefox - 3.56:\r\n```\r\nundefined undefined\r\n1904 0\r\n1904 1\r\n```\r\n\r\nChrome - 3.55.1:\r\n```\r\nundefined undefined\r\n1904 0\r\n1904 1\r\n```\r\n\r\nChrome - 3.56\r\n```\r\nundefined undefined\r\n1904 undefined\r\n1904 0\r\nMyStore.svelte? [sm]:6 Uncaught TypeError: Cannot read properties of undefined (reading 'update')\r\n    at eval (MyStore.svelte? [sm]:6:24)\r\neval @ MyStore.svelte? [sm]:6\r\nMyStore.svelte? [sm]:6 Uncaught TypeError: Cannot read properties of undefined (reading 'update')\r\n    at eval (MyStore.svelte? [sm]:6:24)\r\neval @ MyStore.svelte? [sm]:6\r\n```\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.15 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz\r\n    Memory: 6.07 GB / 15.44 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 18.16.0 - ~/.nvm/versions/node/v18.16.0/bin/node\r\n    npm: 9.5.1 - ~/.nvm/versions/node/v18.16.0/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.74\r\n    Firefox 112.0\r\n  npmPackages:\r\n    svelte: ^3.58.0 => 3.58.0 \r\n    webpack: ^5.79.0 => 5.79.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-04-17T15:07:16Z","created_at":"2023-04-17T14:49:27Z","creator_user_login":"tipy01"}
{"number":8495,"title":"docs: clarify let: directives","body":"This tries to clarify the explanation of `let:` directives through 3 changes:\r\n\r\n* use a name other than `prop` for the specific prop in the example. Using the generic name `prop` might make a reader wonder if this is a keyword or magic name choice that needs to be used\r\n* add some comments to the example \r\n* re-phrases the explanation to avoid the reader having to think about which direction is backwards\r\n\r\nI found the statement \"Slots can be rendered zero or more times and can pass values *back* to the parent\" initially unclear because there are two dfferent child-parent relationships to consider  (a component definition with a child `<slot>`, and a use of the component with a child slot template).\r\n\r\nI think these changes are helpful because this syntax is inherently somewhat confusing: as noted in https://github.com/sveltejs/svelte/pull/4125, `let:foo={bar}` defines `bar` to be a new variable set to the value of `foo`, which is counter-intuitive.","state":"open","updated_at":"2023-07-17T07:39:25Z","created_at":"2023-04-12T16:15:39Z","creator_user_login":"jamesscottbrown"}
{"number":8481,"title":"Apply generated per component style class at the beginning of the class list","body":"### Describe the problem\n\nI'm using `<style>` section for the first time today in my components.\r\n\r\nI noticed a bad thing and I searched but found nothing about it.\r\n\r\nREPL: https://svelte.dev/repl/ea3542c537904c57b554ab126fdbd6c9?version=3.58.0\r\n\r\nAs you can see if you open the REPL I have two custom buttons.\r\n\r\nOne is called with `class=\"hidden\"` the other nope.\r\n\r\nThe hidden class doesn't work because **the generated svelte class is used at the end** of the class of the generated button.\r\n\r\nWhy is that?\n\n### Describe the proposed solution\n\nI would like to have it in the first place.\r\n\r\nExample:\r\n\r\n- svelte generates this:\r\n\r\n    `<button class=\"hidden svelte-1erawrz\">...`\r\n\r\n- I would like to have this instead:\r\n\r\n    `<button class=\"svelte-1erawrz hidden\">...`\r\n\r\nAm I wrong?\n\n### Alternatives considered\n\nNot use `style` section, but this is really bad!\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-04-12T07:21:57Z","created_at":"2023-04-11T14:17:07Z","creator_user_login":"frederikhors"}
{"number":8476,"title":"Is there a way to allow in my custom component the `data-*` props?","body":"### Describe the problem\r\n\r\nI'm not a fan of `{...$$restProps}` because:\r\n\r\n1. if I'm creating a component I would like to handle the possible props\r\n\r\n1. when using my custom component and I have a prop like `isDisabled` and by mistake I use `disabled` nor my IDE nor `npm run check` can alert me about this error\r\n\r\nSo I would like to remove `{...$$restProps}` from my custom component even because the only need I have now is because I need to pass this:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport Button from '$lib/Button.svelte';\r\n\r\n\texport let stat = false;\r\n</script>\r\n\r\n<Button\r\n\ton:click={() => something}\r\n\tdata-stat={stat ? 'something' : undefined}\r\n>\r\n  Hello\r\n</Button>\r\n```\r\n\r\nIs there a way to allow in `Button` (my custom component) the `data-*` props?\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-05-01T11:35:06Z","created_at":"2023-04-11T09:51:20Z","creator_user_login":"frederikhors"}
{"number":8470,"title":"Ability to select store properties to filter reactivity / derived","body":"### Describe the problem\r\n\r\nWhen a store exposes a complex object, we may want to selectively rebuild based on properties.\r\n\r\nFor example, a store may expose a User:\r\n\r\n```ts\r\ninterface User {\r\n\tname: string;\r\n\temail: string;\r\n\tdob: Date;\r\n};\r\nconst user = writable<User>();\r\n```\r\n\r\nWe may calculate our age from the date.\r\nIf we only want to recalculate if the dob property has changed, we have to put extra checks in place.\r\n\r\n```ts\r\nlet age: number | undefined;\r\nlet lastDobTime: number | undefined;\r\n$: {\r\n\t// Check that the properties we're interested in haven't changed\r\n\tconst dobTime = $user.dob.getTime();\r\n\tif (dobTime != lastDobTime) {\r\n\t\tlastDobTime = dobTime;\r\n\t\t// The actual logic\r\n\t\tvar diff_ms = Date.now() - dobTime;\r\n\t\tvar age_dt = new Date(diff_ms);\r\n\t\tage = Math.abs(age_dt.getUTCFullYear() - 1970);\r\n\t}\r\n}\r\n```\r\n\r\n_...you could see how these checks could bloat with more complex logic_\r\n\r\n### Describe the proposed solution\r\n\r\nHave a way to `select` properties from stores, like so:\r\n\r\n```ts\r\nlet age: number | undefined;\r\n$: dobTime = user.select(($user) => $user.dob.getTime());\r\n$: {\r\n\tvar diff_ms = Date.now() - dobTime;\r\n\tvar age_dt = new Date(diff_ms);\r\n\tage = Math.abs(age_dt.getUTCFullYear() - 1970);\r\n}\r\n```\r\n\r\n---\r\n\r\nNB, if #8469 was implemented, we could do this with a reactive store:\r\n\r\n```ts\r\n\r\nconst age = reactive<number>((set) => {\r\n\tconst dobTime = user.select(($user) => $user.dob.getTime());\r\n\tvar diff_ms = Date.now() - dobTime;\r\n\tvar age_dt = new Date(diff_ms);\r\n\tset(Math.abs(age_dt.getUTCFullYear() - 1970));\r\n});\r\n```\r\n\r\n### Alternatives considered\r\n\r\nOnce again, I'm taking inspiration from the Riverpod package for Dart / Flutter. It has a lot of similar goals and behaviours as svelte stores.\r\n\r\nhttps://riverpod.dev/docs/concepts/reading#using-select-to-filter-rebuilds\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-05-04T02:56:50Z","created_at":"2023-04-10T10:21:29Z","creator_user_login":"oodavid"}
{"number":8469,"title":"Derived stores can feel boilerplatey. Proposal for new `reactive` store","body":"### Describe the problem\r\n\r\nComparing reactive code to derived stores makes derived stores look not-very-sveltey.\r\n\r\nHere's the same logic (with added types, to show verbosity)\r\n\r\n1. Using svelte $reactivity:\r\n\r\n```ts\r\nlet numerator: number = 1;\r\nlet denominator: number = 1;\r\nlet fraction: number;\r\n$: fraction = numerator / denominator;\r\n```\r\n\r\n2. Using a derived store:\r\n\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = derived<\r\n  [number, number],\r\n  number\r\n>([numerator, denominator], ([$numerator, $denominator], set) => {\r\n  set($numerator / $denominator);\r\n});\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nI would love to see the same ast / dependency \"magic\" with reactive stores.\r\n\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = reactive<number>((set) => {\r\n  set($numerator / $denominator);\r\n});\r\n```\r\n\r\n### Alternatives considered\r\n\r\nI have not considered any alternatives.\r\n\r\nI have experience using the Dart package \"Riverpod\" which has a similar approach to dependency checking at compile time. It may be a distraction.\r\n\r\nhttps://riverpod.dev/docs/concepts/combining_providers\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-07-15T12:51:05Z","created_at":"2023-04-09T19:04:56Z","creator_user_login":"oodavid"}
{"number":8465,"title":"scoped style doesn't work if compile component with css option 'none'","body":"### Describe the bug\n\nAs #7914 said: \r\n> When hydrating SSR components, the styles are commonly already generated and there is no need to generate it again for the client side bundle.\r\n\r\nHowever, `{css:\"none\"}` does not work well with scoped styles.\n\n### Reproduction\n\nCurrently, the [REPL](https://svelte.dev/repl/) doesn't support `none` (and I created a PR to support it https://github.com/sveltejs/sites/pull/460).\r\n\r\nLet's just consider the following code snippet:\r\n\r\n```svelte\r\n<div> red </div>\r\n<style> div { color: red } </style>\r\n```\r\n\r\nWe can compile this code using `{generate: \"dom\", css: \"external\"}` to obtain two output that are used for CSR:\r\n```css\r\n/* output.css */\r\ndiv.svelte-d8zsiy{color:red }\r\n```\r\n```html\r\n/* output.csr.html */\r\n<div class=\"svelte-d8zsiy\">red</div>\r\n```\r\n\r\nAnd then we re-compile this code using `{generate: \"ssr\", css: \"none\"}`, there will be no CSS or scoped class name generated.\r\nAs a result, the `output.css` file will not be applied to the SSR HTML:\r\n```html\r\n# output.ssr.html\r\n<div>red </div>\r\n```\r\nWith `{css: \"none\"}`, the style is completely ignored, which means that Svelte cannot calculate the hash for the scoped class name.\r\n\r\n---\r\n\r\nA simple solution to this problem is to use `{generate: \"ssr\", css: \"external\"}` to generate the HTML for SSR.\r\nBut, as you can see in the REPL, all CSS are contained in the JS output, resulting in a larger bundle size.\r\nAlthough bundle size for SSR might not be a problem in many cases, it could be beneficial to remove these unused CSS in JS output. (TBH, in my case, I run svelte inside the service worker, which means bundle size is critical.)\r\n\r\nI propose that we reopen #2360 as it provides a simple and effective solution to remove CSS from the JS output.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nsvelte 3.58.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-07-05T14:15:52Z","created_at":"2023-04-08T16:31:04Z","creator_user_login":"dhcmrlchtdj"}
{"number":8461,"title":"add a test for  #8459","body":"See https://github.com/sveltejs/svelte/issues/8459\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [ ] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [ ] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [ ] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2023-04-07T09:32:34Z","creator_user_login":"lovasoa"}
{"number":8459,"title":"await blocks unnecessarily unmount and remount their children when the promise changes","body":"### Describe the bug\r\n\r\nWhen the promise of an `{#await ... }` block changes from a resolved Promise to another resolved Promise, svelte unnecessarily unmounts and then remounts all the contents of the \"then\" fragment of the await block.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/b70b678cc4304ccdac16419e6a979168?version=3.58.0\r\n\r\n```svelte\r\n<script>\r\n  \timport ShowValue from \"./ShowValue.svelte\"\r\n\t\r\n\tconst promise_a = Promise.resolve('a')\r\n\tconst promise_b = Promise.resolve('b')\r\n\r\n\tlet current_promise = promise_a;\r\n</script>\r\n\r\n{#await current_promise then value}\r\n\t<ShowValue {value} />\r\n{/await}\r\n\r\n<button on:click={()=>{current_promise = promise_a}}>Show Promise A</button>\r\n<button on:click={()=>{current_promise = promise_b}}>Show Promise B</button>\r\n```\r\n\r\nHere, I wouldn't expect ShowValue to be unmounted and remounted when the buttons are clicked.\r\nIn more complex cases, when `ShowValue` is expensive to mount (when it has to do many DOM operations, for instance), this becomes a performance problem.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nTested in svelte 3.58.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-04-07T12:57:39Z","created_at":"2023-04-07T08:07:06Z","creator_user_login":"lovasoa"}
{"number":8455,"title":"`{@debug}` doesn't work with dynamic block type in `{#if}` if exception is thrown","body":"### Describe the bug\r\n\r\nIf I write code like this I expect the data to be printed, but because accessing `.missingTypeProp` throws an exception it doesn't work.\r\n\r\nIt's because `select_block_type` preempts the block creation, which is where the console log is output\r\n\r\nHowever if I replace `{@debug}` with `{(console.log({ item }), '')}` it does work\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n{#each state[id] as item, i}\r\n    {@debug item}\r\n    {#if item.missingTypeProp == \"combo\"}\r\n        <Combo />\r\n    {:else}\r\n        <OtherWidget />\r\n    {/if}\r\n{/each}\r\n```\r\n\r\n### Logs\r\n\r\n```shell\r\nUncaught (in promise) TypeError: Cannot read properties of undefined (reading 'missingTypeProp')\r\n    at select_block_type (ComfyPane.svelte?t=1680709132477:391:31)\r\n    at create_each_block_1 (ComfyPane.svelte?t=1680709132477:397:35)\r\n    at Array.create_default_slot (ComfyPane.svelte?t=1680709132477:527:20)\r\n    at create_slot (chunk-PUOMPBAM.js?v=69346b91:70:25)\r\n    at create_dynamic_element (Block.svelte:40:23)\r\n    at create_fragment (Block.svelte:161:42)\r\n    at init (chunk-PUOMPBAM.js?v=69346b91:1874:35)\r\n    at new Block (Block.svelte:356:3)\r\n    at createProxiedComponent (svelte-hooks.js?v=69346b91:341:9)\r\n    at new ProxyComponent (proxy.js?v=69346b91:242:7)\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.20348\r\n    CPU: (16) x64 AMD Ryzen 7 5800X 8-Core Processor\r\n    Memory: 9.33 GB / 63.93 GB\r\n  Binaries:\r\n    Node: 18.15.0 - ~\\AppData\\Local\\pnpm\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.5.0 - ~\\AppData\\Local\\pnpm\\npm.CMD\r\n  Browsers:\r\n    Internet Explorer: 11.0.20348.380\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.58.0\r\n    vite: ^4.2.0 => 4.2.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-04-05T15:46:16Z","created_at":"2023-04-05T15:44:03Z","creator_user_login":"space-nuko"}
{"number":8448,"title":"not possible to use own style with transition","body":"### Describe the bug\r\n\r\nTransition generate own \"style\", which do not respect my style added to style-attribute.\r\nstyle & transition style \"collides\" somehow and the transition breaks.\r\n\r\n### Reproduction\r\n\r\nResize window, so green sidebar is shown or hidden.\r\n\r\nIf you do this very quick (hide & show), you will see, that default size (200) is used instead of 400. This should not happen.\r\n\r\nRemove style={style} in Side.svelte - and you will see, that it works like expected - but now, i am not able to set style this way (sidebar becomes default red).\r\n\r\nSo... if change happen slowly... style is merged correctly\r\nif change happen quickly... style:width is not set.\r\n\r\n\r\nApp.svelte:\r\n```\r\n<script>\r\n\timport Side from './Side.svelte'\r\n</script>\r\n\r\n<Side size={400} style=\"background:#6c6;\">\r\n\tcontent\r\n</Side>\r\n```\r\n\r\n\r\nSide.svelte:\r\n```\r\n<script>\r\n\timport {fly} from 'svelte/transition'\r\n\r\n\texport let size = 200\r\n\texport let style = ''\r\n\t\r\n\tlet trigger = 800\r\n\tlet width = window.innerWidth\r\n</script>\r\n\r\n<svelte:window bind:innerWidth={width} />\r\n\r\n{#if width >= trigger}\r\n\t<div\r\n\t\tstyle={style}\r\n\t\tstyle:width={size ? size + 'px' : undefined}\r\n\t\ttransition:fly={{duration: 2000, x: -size}}\r\n\t>\r\n\t\t<slot/>\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\tleft:0;\r\n\t\twidth: 200px;\r\n\t\tbackground: #c66;\r\n\t}\r\n</style>\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nsvelte 3.58.0\r\nvite 4.1.3\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-04-05T15:52:13Z","created_at":"2023-04-03T11:38:33Z","creator_user_login":"dm-de"}
{"number":8446,"title":"input color displays a warning in Chrome console","body":"### Describe the bug\n\nWhen adding an input color such as:\r\n\r\n```\r\n<input type=\"color\" value=\"#123456\" />\r\n```\r\n\r\nthere is a warning poping in the Chrome console (doing fine in Firefox):\r\n\r\n```\r\nThe specified value \"\" does not conform to the required format.  The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\r\nindex.mjs:582\r\n```\r\n\r\nI reported this issue because someone reported it in my library project: https://github.com/Ennoriel/svelte-awesome-color-picker/issues/29\n\n### Reproduction\n\nThis is **not** hapenning on a REPL and has only been reproduced on a fresh SK project: \r\n\r\nhttps://github.com/Ennoriel/svelte-bug-color-picker.git\n\n### Logs\n\n```shell\nindex.mjs:582 The specified value \"\" does not conform to the required format.  The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\r\n\r\n(anonymous)\t@\tindex.mjs:582\r\n(anonymous)\t@\tindex.mjs:582\r\n(anonymous)\t@\tindex.mjs:531\r\nclaim_node\t@\tindex.mjs:568\r\nclaim_element_base\t@\tindex.mjs:574\r\nclaim_element\t@\tindex.mjs:587\r\nclaim\t@\t+page.svelte:28\r\nclaim_component\t@\tindex.mjs:1931\r\nclaim\t@\troot.svelte:42\r\nclaim\t@\tlayout.svelte?v=1006474b:28\r\nclaim_component\t@\tindex.mjs:1931\r\nclaim\t@\troot.svelte:41\r\nclaim\t@\troot.svelte:48\r\ninit\t@\tindex.mjs:2023\r\nRoot\t@\troot.svelte:20\r\ncreateProxiedComponent\t@\tsvelte-hooks.js?v=1006474b:341\r\nProxyComponent\t@\tproxy.js?v=1006474b:242\r\nProxy<Root>\t@\tproxy.js?v=1006474b:349\r\ninitialize\t@\tclient.js?v=1006474b:432\r\n_hydrate\t@\tclient.js?v=1006474b:1730\r\nawait in _hydrate (async)\t\t\r\nstart\t@\tstart.js:33\r\n(anonymous)\t@\t(index):19\r\n```\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\r\n    Memory: 7.72 GB / 15.85 GB\r\n  Binaries:\r\n    Node: 16.19.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 7.24.2 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (111.0.1661.62)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.54.0\r\n```\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-07-23T07:50:54Z","created_at":"2023-04-03T06:35:59Z","creator_user_login":"Ennoriel"}
{"number":8443,"title":"fix: call all event handlers even if an exception occurs in one","body":"Error in Svelte event dispatcher is inconsistant with the browser event handling.\r\n\r\nI think that Svelte should mimic the browser event handling : if an error occurs on an event-handler, it should be stopped, but it should not impact the others event-handlers.\r\n\r\nFixes https://github.com/sveltejs/svelte/issues/8403\r\n\r\nNote that I try to write an unit-test, but it fails because of the exception on the handler, and I don't know how to ignore that.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [X] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [X] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [X] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [X] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2023-04-01T10:01:24Z","creator_user_login":"adiguba"}
{"number":8440,"title":"Support a mechanism to suspend layout when appending lots of children to a node (createDocumentFragment).","body":"### Describe the problem\n\nRight now, when managing a list using an `{#each}` block, a lot of the frame is taken up by layout recalculating every time a `appendChild` fires (Lazily loading more items as you scroll).\n\n### Describe the proposed solution\n\nSome way to have svelte automatically create a document fragment, append the newly created nodes to that fragment, then, append the fragment itself as the child so that layout calculation only has to happen one time.\n\n### Alternatives considered\n\nManually doing it and component registration / destruction, but this can be messy and uses internal apis.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-03-31T17:23:09Z","created_at":"2023-03-31T17:23:09Z","creator_user_login":"dtzxporter"}
{"number":8433,"title":"Delay transition until after onMount","body":"### Describe the problem\n\nWhen using the slide transition Svelte calculates the end height based on the computed styles when onMount is fired (from what I gather). I am initializing another library within my onMount (TipTap) which further increases the height of my component. However the height used by slide transition doesn't take this into consideration since TipTap is initialized under onMount which results in an incorrect end transition height. \r\n\r\nHere is a replication of the issue:\r\nhttps://svelte.dev/repl/d193adecf8d44337a2ebd05b59238296?version=3.57.0\n\n### Describe the proposed solution\n\nA way to use transitions when initializing third-party libraries under onMount. Not sure how this would work. Maybe a delay in height calculation?\n\n### Alternatives considered\n\nWriting my own slide transition function but I couldn't figure out a way to delay the height calculation\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-08-30T15:48:49Z","created_at":"2023-03-30T12:05:04Z","creator_user_login":"nCrafts"}
{"number":8426,"title":"Make Svelte metadata available on custom platforms","body":"### Describe the problem\r\n\r\nThe [inspector option](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md) is a very useful tool which shows the names of the Svelte component over which we are hovering. It uses metadata which are injected by the Svelte compiler into every HTML element.\r\n\r\nMore precisely, every HTML element gets an attribute `__svelte_meta` whose value is an object of type `{ loc : { char, column, file, line } }`, and the file is what interests me here the most. The injection is done in the function `add_location` in [`src/runtime/internal/utils.ts`](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/utils.ts).\r\n\r\n```javascript\r\nexport function add_location(element, file, line, column, char) {\r\n\telement.__svelte_meta = {\r\n\t\tloc: { file, line, column, char }\r\n\t};\r\n}\r\n```\r\n\r\nThis function is then used in [`src/compiler/compile/render_dom/wrappers/Element/index.ts`](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_dom/wrappers/Element/index.ts):\r\n\r\n```javascript\r\nif (renderer.options.dev) {\r\n\tconst loc = renderer.locate(this.node.start);\r\n\tblock.chunks.hydrate.push(\r\n\t\tb`@add_location(${this.var}, ${renderer.file_var}, ${loc.line - 1}, ${loc.column}, ${this.node.start});`\r\n\t);\r\n}\r\n```\r\n\r\nThe if-condition means that these metadata are only available during development, if I understand this correctly.\r\n\r\nIt would be very useful to have these metadata (and hence use the inspector) also in other platforms, in particular in staging resp. preproduction platforms. I work on a quite large codebase where we often need to look up the component names somehow via the devtools, and while this problem is now (after a custom implementation of the Svelte inspector, because we do not use Vite) fixed during development, it is still open for staging. The solution should work not just with Vite-based Svelte projects.\r\n\r\n### Describe the proposed solution\r\n\r\nPlease add a render option in the [compile function ](https://svelte.dev/docs#compile-time-svelte-compile) which lets us add a boolean-valued function which determines if the metadata are injected by the compiler or not. Let us say this function is stored as `renderer.options.meta_data`. Then replace (in the code above) `if(renderer.options.dev)` by `if(renderer.options.meta_data())`.\r\n\r\n### Alternatives considered\r\n\r\nMaybe I can use the Svelte metadata to inject my own metadata and remove them in production. But this is obviously very cumbersome.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-03-27T18:17:30Z","created_at":"2023-03-27T17:52:47Z","creator_user_login":"ScriptRaccoon"}
{"number":8419,"title":"Typed CSS Custom Properties","body":"### Describe the problem\r\n\r\nWe've got great support prop types in Svelte but we don't have support for CSS Custom Properties types. It would be great if we could somehow get guard rails when we pass in values to these as well.\r\n\r\n### Describe the proposed solution\r\n\r\nAn example of what I would want to happen:\r\n\r\n```svelte\r\n<!-- MyButton.svelte -->\r\n\r\n<button>Some Text</button>\r\n\r\n<style>\r\n  @property --bg-color {\r\n    syntax: \"<color>\";\r\n    inherits: false;\r\n    initial-value: blue;\r\n  }\r\n  @property --text-color {\r\n    syntax: \"<color>\";\r\n    inherits: false;\r\n    initial-value: white;\r\n  }\r\n  button {\r\n    background: var(--bg-color);\r\n    color: var(--text-color)\r\n  }\r\n</style>\r\n```\r\n```svelte\r\n<!-- Parent.svelte -->\r\n\r\n<MyButton --bg-color=\"100\" /> <!-- Results in error, type is not correct -->\r\n\r\n<MyButton --bg-color=\"blue\" /> <!-- OK! No Error -->\r\n```\r\n\r\nIf possible we could maybe even infer the types from the CSS Rule itself and skip the `@property` stuff.\r\n\r\n### Alternatives considered\r\n\r\nThe alternative is just having no types. I don't see any other solutions to the problem here.\r\n\r\n### Importance\r\n\r\nnice to have\r\n\r\nEdit: I realize now this should've maybe have gone in the language-tools repo 🤦‍♂️","state":"open","updated_at":"2023-03-25T10:11:58Z","created_at":"2023-03-25T10:07:35Z","creator_user_login":"kevmodrome"}
{"number":8406,"title":"Disabling $$invalidate for deep property assignment","body":"### Describe the problem\n\nSometimes I do not want assignments to automatically trigger svelte's internal `$$invalidate`. My biggest concern is trying to incorporate my own custom store class:\r\n```javascript\r\n$: foo = $mystore + 10;\r\nmystore.some_internal_setting = \"bar\";\r\n```\r\nThe last statement should not invalidate.\n\n### Describe the proposed solution\n\nAt the very least, I feel stores should not trigger `$$invalidate` on deep property access. E.g. only an assignment such as `mystore = another_store` should invalidate. I also find deep property invalidation for non-stores can be undesirable as well, but I think many users may rely on that. So perhaps best to just keep it to stores. To determine a store, we just need to see if all the reactive references are prefixed by $.\r\n\r\nMaybe an alternative could be an annotation, something like:\r\n```\r\n// @svelte-no-deep-assign\r\nconst myvalue;\r\n```\r\nwhich would work for non-store values as well in a backwards-compatible way. That would get annoying with many stores. But you could have a compiler option that defaults \"no-deep-assign\" for stores.\n\n### Alternatives considered\n\nModify `mystore` so that all properties have to go through setter methods: e.g. `mystore.updateInternalSetting()`. I won't go into extensive detail, but that breaks the design for my store class so not viable (store wraps JSON and acta as transparent proxy for the JSON).\n\n### Importance\n\ni cannot use svelte without it","state":"open","updated_at":"2023-03-21T18:31:31Z","created_at":"2023-03-21T17:16:13Z","creator_user_login":"Azmisov"}
{"number":8404,"title":"`{@const}` inside `{#key}` block","body":"### Describe the problem\n\nSince the current `{#key}` block operates like a 1-element `{#each}` block, it should make sense to allow using `{@const}` inside of `{#key}` as well.\n\n### Describe the proposed solution\n\nAllow the usage of `{@const}` inside `{#key}`\n\n### Alternatives considered\n\nUse a dummy `{#if true}` block\r\n```svelte\r\n{#key ...}\r\n    {#if true}\r\n        {@const ...}\r\n    {/if}\r\n{/key}\r\n```\r\n\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-03-21T15:55:07Z","created_at":"2023-03-21T15:54:47Z","creator_user_login":"longnguyen2004"}
{"number":8403,"title":"Inconsistent exception handling with multiple event handlers","body":"### Describe the bug\n\nThere is a difference in exceptions handling when multiple handlers are added on the same event of an element/component.\r\n\r\nImagine we add 3 handlers on the same element, like this :\r\n```svelte\r\n    <button on:click={handler_01} on:click={handler_02} on:click={handler_03}> ... \r\n```\r\nOn a HTML node, if a handler fails for some reason and throw an error, its execution will logically be interrupted, but it has no impact on others handlers.\r\n\r\nOn a Svelte Component, a handler that throw an error will be interrupted, but will also prevent subsequent handlers from executing.\r\n\r\n\r\nI think Svelte Components should mimic how native events work.\n\n### Reproduction\n\nYou can see a reproduction of this bug on this REPL : \r\n\r\nhttps://svelte.dev/repl/a4c8c154000142b695f2a4011184dd12?version=3.57.0\r\n\r\nThere a 3 counters and 3 handlers that increments theses counters.\r\nBut the second handler will fail by throwing an error.\r\n\r\nIf these handlers are added to a `<button>`, they will all be executed (and all counter will increment)\r\nIf these handlers are added to a Component (via event bubbling (on:click) or createEventDispatcher), the last handler will never be executed (and his counter will not be incremented).\r\n\n\n### Logs\n\n```shell\nSee reproduction\n```\n\n\n### System Info\n\n```shell\nSvelte v3.57.0 (in REPL)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-21T11:17:48Z","created_at":"2023-03-21T09:11:33Z","creator_user_login":"adiguba"}
{"number":8401,"title":"Multiple variabels in `{#key}`","body":"### Describe the problem\n\nI want to use multiple variables in a `{#key variable}` like this:\r\n\n\n### Describe the proposed solution\n\n```\r\n{#key variable1, variable2, variable3}\r\n  ...\r\n{/key}\r\n```\r\n\n\n### Alternatives considered\n\nI have four variables that I want to use in `key` blocks.\r\n\r\nSo what I have done right now is this:\r\n```\r\n{#key variable1}\r\n  {#key variable2}\r\n    {#key variable3}\r\n      {#key variable4}\r\n        ....\r\n      {/key}\r\n    {/key}\r\n  {/key}  \r\n{/key}\r\n```\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-03-24T21:12:52Z","created_at":"2023-03-20T13:15:18Z","creator_user_login":"Addeuz"}
{"number":8399,"title":"Inconsistent invalidation between in-html callbacks and in-script callbacks.","body":"### Describe the bug\n\nI was looking at function passing in components and saw some inconsistencies. With some seemingly insignificant changes Svelte is either too conservative or too optimistic. It is sort of covered by [$: marks a statement as reactive](https://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive) in the docs. But this section only really focuses on value recomputation in the script section, not prop passing in the HTML. Maybe a more direct example is just needed? I think that most people probably just pick between defining functions in the JS or HTML parts of a component based on what is most convenient, I think that the difference in reactivity would be surprising.\r\n\r\nFor testing I'll be using this simple component:\r\n\r\n```svelte\r\n<!-- Button.svelte -->\r\n<script>\r\n\texport let onClick;\r\n\texport let getMessage;\r\n</script>\r\n<button on:click={onClick}>\r\n\tMessage is {getMessage()}\r\n</button>\r\n```\r\n\r\n---\r\n\r\nPassing a prop inline such as `<Button onClick={() => { thing = \"foo\" }}>` causes the prop to be invalidated whenever `foo` changes. This is unnecessary as the binding of `thing` isn't changed so the set still works completely. Note that the function is not actually re-created, it is simply passed down to `Button` again as the same object (like `button.$set({onClick})` ).\r\n\r\nRight now this invalidation can be avoided by defining the callback in the `<script>` section of the component. This is surprising to me as I wouldn't expect any change in behaviour.\r\n\r\n```svelte\r\n<script>\r\n\timport Button from \"./Button.svelte\";\r\n\tlet thing = \"\";\r\n\tfunction onClick() {\r\n\t\tthing = \"foo\";\r\n\t}\r\n</script>\r\n\r\n<Button onClick={onClick}/>\r\n```\r\n\r\nThis is now more optimized which is good. But I see that in some cases this invalidation may be desirable. For example let's look at `getMessage`.\r\n\r\n```svelte\r\n<script>\r\n\timport Button from \"./Button.svelte\";\r\n\tlet msg = \"Hi\"\r\n\tfunction getMessage() {\r\n\t\treturn msg;\r\n\t}\r\n\tfunction onClick() {\r\n\t\tmsg = \"Bye\";\r\n\t}\r\n</script>\r\n\r\n<p>{msg}</p>\r\n<Button {getMessage} {onClick}/>\r\n```\r\n\r\nThis doesn't work! `getMessage` is never invalidated so the message displayed in the child component never changes (even though the message in the `<p>` does).\r\n\r\nThis can be fixed by moving `getMessage` inline `<Button getMessage={() => msg} {onClick}/>`.\r\n\r\n---\r\n\r\nI don't really know what the answer is here. I guess ideally would be invalidating the function iff the return value depends on the values (so that the child knows when to call it again). However that doesn't fit into Svelte's general reactivity pattern. It would also be nice to be able to use inline functions without causing unnecessary invalidations but that would likely break existing users. So maybe for now the best answer is a documentation update to clarify how this \"mentioned in block\" form of reactivity can cause both too few and too many re-renders if you aren't careful. There are many examples of inline handlers in the docs and no clear mention of this behaviour (although I think they are all actually fine since they are `on:*` listeners which seem to not be invalidated like other props). Basically the docs are entirely focused on the `<script>` section of a component and it is probably a good idea to highlight that these also apply to the HTML section such as `<p>{formatMessage()}</p>`.\n\n### Reproduction\n\nhttps://svelte.dev/repl/405529c83fab46749462dcff6508ae35?version=3.57.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nhttps://svelte.dev/repl/405529c83fab46749462dcff6508ae35?version=3.57.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-19T23:59:14Z","created_at":"2023-03-19T23:59:14Z","creator_user_login":"kevincox"}
{"number":8367,"title":"class directive does not allow special characters in class name","body":"### Describe the bug\n\nI noticed while using the class directive it does not allow to use of special characters in the class name. \r\nfor example: `class:w-1/2=\"{current === 'foo'}\"` won't work.\r\n\r\nSpecial characters are actually legit and allowed in CSS class names. [specs](https://www.w3.org/TR/CSS21/syndata.html#characters)\n\n### Reproduction\n\nhttps://svelte.dev/repl/6474e3592d14417cb74ee06a5b6453c1?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nREPL env\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-20T13:47:22Z","created_at":"2023-03-09T06:35:17Z","creator_user_login":"Youhan"}
{"number":8358,"title":"Prop-based attribute value not changing","body":"### Describe the bug\n\nIn the example shared as reproduction link, the `attr1` value for `<div>` in `BtnComp` is not changing based on checkbox value. However, it works if I do either of the following:\r\n\r\n1. Change `<svelte:element>` to a static element like `<button>`.\r\n2. OR remove the `{#if iconName.length}` block that I have.\r\n\r\nThe weird part is, the text content is changing perfectly fine in all the conditions.\r\n\r\nThis was also discussed on Discourse: https://discord.com/channels/457912077277855764/1082691900504559646/1082755066987024414\n\n### Reproduction\n\nhttps://svelte.dev/repl/4a5b815ea2434ef793e761666427ebe6\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nNot applicable, was reproduced on Svelte REPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-07T20:32:11Z","created_at":"2023-03-07T20:23:55Z","creator_user_login":"Hrishikesh-K"}
{"number":8356,"title":"feat: Forward all events (on:*)","body":"Hello,\r\n\r\nI make a prototype that implement event forwarding via `on:*`, described in issue https://github.com/sveltejs/svelte/issues/2837\r\nIn order to work it require some rewrite of the way Svelte manager the event's listener.\r\n\r\nThe main changes are as follows : \r\n\r\n * `on:event={handler}` remove the listener when handler is null/undefined/invalid.\r\n * `on:event|modifiers={handler}` on component accepts the same modifiers as HTML node.\r\n * Forwarding with `on:event` add a listener on the node/component only when it's listened on the component.\r\n * Forwarding with `on:event|alias` allows us to forward an event under another name (alias).\r\n * Forwarding with `on:*` allow us to forward all events. In fact when any handler is registered to the component, it will be added to the sub node/component.\r\n * Forwarding with `on:*|prefix-*` or `on:*|*-suffix` will allows us to forward alls events using a prefix or suffix.\r\n   This will allow us to distinctly forward all event from distinct node/component.\r\n * A new lifecycle function `onEventListener` that allows to manually manage an handler.\r\n\r\n\r\nThere are still some jobs required (including tests and docs), and I have problems on some type-checking error with Components.\r\n\r\n\r\nI will add comments here with details about my implementation.\r\n\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [ ] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-08-18T19:29:16Z","created_at":"2023-03-06T14:09:48Z","creator_user_login":"adiguba"}
{"number":8354,"title":"Component or module-level css compiler options","body":"### Describe the problem\r\n\r\nWhile exploring new ways of providing theming flexibility to a component library, I noticed there isn't an easy way to replace or unload a component's styles without adding extra steps for the developer consuming the library (described in 'alternatives' below).\r\n\r\nRelates to #6859, #1550.\r\n\r\n### Describe the proposed solution\r\n\r\nI have a few unrefined ideas, and would appreciate any other novel solutions to add to this discussion. \r\n\r\nSince the component library comes with styles, I feel the 'happy path' would be importing components onto a page and setting up a single library-provided `global.css` file for typography and resets. Users who want to supply their own themes would ideally only have to encounter some trivial configuration.\r\n\r\n#### Proposal 1: pass module paths to compiler options\r\n\r\n1. User imports component onto page. By default, it comes with CSS in its `<style>` and works without extra configuration.\r\n2. User can 'unload' all component styles by providing a compiler options such as:\r\n```js\r\nconst config = {\r\n  css: [\r\n    { 'module-name/ComponentName.svelte': 'none' }, // one component\r\n    { 'library-name', 'none' } // entire library\r\n  ]\r\n}\r\n```\r\n\r\nThis has an all-or-nothing drawback; we cannot specify compiler options on a per-instance-of-component basis.\r\n\r\n#### Proposal 2: dynamic `<svelte:options>`\r\n\r\nI thought about using `setContext` via a wrapper component to pass context to set the `css` option in `<svelte:options>`, but I realize `<svelte:options>` should only accept string literals since it cannot know dynamic settings at compile time:\r\n\r\n<details>\r\n<summary>Here's how dynamic &lt;svelte:options&gt; could have looked</summary>\r\n\r\n**+page.svelte***\r\n```html\r\n<script>\r\n  import { Button, Theme } from 'component-library'\r\n</script>\r\n\r\n<Theme overrideCSS>\r\n  <Button>Do the thing</Button>\r\n</Theme>\r\n```\r\n\r\n**Button.svelte**\r\n```html\r\n<svelte:options css={overrideCSS} />\r\n\r\n<script>\r\n  import { getContext } from 'svelte'\r\n  const overrideCSS = getContext('overrideCSS')\r\n</script>\r\n\r\n<button class=\"btn\"><slot /></button>\r\n\r\n<style>\r\n  .btn { /* ... */ }\r\n</style>\r\n```\r\n\r\n</details>\r\n\r\nOr perhaps it can be made possible to wrap individual components with `<svelte:options>` so that a single instance of the component can be changed, while remaining instances use provided styles.\r\n\r\n```html\r\n<svelte:options css=\"none\">\r\n  <Button>Button without CSS</Button>\r\n</svelte:options>\r\n\r\n<Button>Button with CSS</Button>\r\n```\r\n\r\nThough this would necessarily create a copy of `<Button>` at build time. Button styles can be overridden with selectors like `:where(.btn)` so that they do not impact plain usage of `<Button>`.\r\n\r\n#### Proposal 3: dynamic `<style>`\r\n\r\nHave `<style>` load conditionally:\r\n\r\n```html\r\n<script>\r\n  import { getContext } from 'svelte'\r\n  const overrideCSS = getContext('overrideCSS')\r\n</script>\r\n\r\n<button class=\"btn\"><slot /></button>\r\n\r\n<style load={overrideCSS}>\r\n  .btn {/* */}\r\n</style>\r\n```\r\n\r\nBut this has the drawback of shipping all bytes of CSS whether or not they're being used.\r\n\r\n### Alternatives considered\r\n\r\n1. `<style>` is completely unused in every component in the library, and users must either import library-supplied CSS or SCSS, or their own CSS.\r\n2. Only expose certain styles via CSS variables so that users may override via `--style-props`. Any custom theming would have to be provided with global CSS selectors that have high specificity.\r\n3. Using `setContext` to conditionally `import()` .css files; but this loads styles onto a page that would impact all instances of a component when only 1 particular instance is meant to be overridden.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-03-06T03:26:47Z","created_at":"2023-03-06T02:14:37Z","creator_user_login":"theetrain"}
{"number":8351,"title":"Bug: \"Out\" transition blocks component from unmounting indefinitely, caused by update to store","body":"### Describe the bug\r\n\r\nDiscovered this while making my own app which has a global array of objects as state. I noticed that my elements weren't unmounting due to {#if} statements as I was used to, and narrowed it down to it being due to transitions. It's a bit strange to explain, but I tried my best isolating the bug.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/83c9ee0103da430aa199daadbee12318?version=3.55.1\r\n\r\n**Notes:**\r\n\r\nThe bug goes away when you remove the out transition (in Comp)\r\nThe bug does not happen if you inlined the Comp component into App.svelte\r\n\r\nThis is one of several transition bugs I've run into while using Svelte and I have to say, it really makes it hard to love or use. My project is full of transitions and animations, and this stuff not working is a huge deal-breaker and kinda makes me wanna use something else because I simply cannot realize my vision with Svelte. It would be great if the Svelte team could look into this and provide a fix. \r\n\r\n### System Info\r\n\r\n```shell\r\nmacOS Ventura 13.1\r\nGoogle Chrome Version 110.0.5481.177 (Official Build) (arm64)\r\nSvelte 3.55.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2023-06-22T19:30:54Z","created_at":"2023-03-04T01:30:15Z","creator_user_login":"Vanilagy"}
{"number":8348,"title":"Allow omitting the `as` clause in `each` statement","body":"### Describe the problem\n\nIt would be nice if we could forego the `as` part of an `#each` statement, if we don't need it.\r\n\r\nCurrently we have to write it [like this](https://svelte.dev/repl/608ec2f7b06247e29004dd3a97615fdf?version=3.55.1).\r\n\r\nThis is probably a `good first issue`\n\n### Describe the proposed solution\n\nInstead we could just write `{#each param}{/each}`\n\n### Alternatives considered\n\nJust assign to `_`, as I have done above.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-07-27T10:02:43Z","created_at":"2023-03-03T15:56:16Z","creator_user_login":"hgiesel"}
{"number":8346,"title":"Default ESLint config results in errors when using anything from the global App namespace","body":"### Describe the bug\n\nIn my `+error.svelte` page I want to import a component, and then pass in the error object.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { page } from \"$app/stores\";\r\n  const error = $page.error;\r\n</script>\r\n\r\n<RenderError {error} />\r\n```\r\n\r\nIn my `RenderError` component I have this simple variable which triggers an error in ESLint:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let error: App.Error;\r\n</script>\r\n```\r\n\r\nError: `'App' is not defined. eslint(no-undef)`\r\n\r\nThe `App` namespace is global, but it is not added to the default `.eslintrc.cjs` file when creating a new project. Adding this solves the problem:\r\n\r\n```\r\n  globals: {\r\n    App: \"writable\",\r\n  },\r\n```\n\n### Reproduction\n\nJust create a new component with this code, in a new project:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let error: App.Error;\r\n</script>\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.2.1\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 59.16 MB / 32.00 GB\r\n    Shell: 3.5.1 - /opt/homebrew/bin/fish\r\n  Binaries:\r\n    Node: 16.17.0 - ~/Library/pnpm/node\r\n    npm: 8.15.0 - ~/Library/pnpm/npm\r\n  Browsers:\r\n    Firefox: 110.0\r\n    Safari: 16.3\r\n  npmPackages:\r\n    svelte: ^3.55.0 => 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-07T10:48:18Z","created_at":"2023-03-02T12:35:59Z","creator_user_login":"kevinrenskers"}
{"number":8345,"title":"A way to declare a scoped class for the CSS compiler (ex use:class)","body":"### Describe the problem\r\n\r\nSvelte's CSS scoping is great and allow to avoids a lot of mistakes/conflicts.\r\n\r\nBut it is logically limited to the `class` attribute and the `class:` directive.\r\nObviously the CSS compiler can't detect classes defined outside of these attribute/directive...\r\n\r\nIt cannot detect:\r\n* The classes set inside an use:action.\r\n* The classes set via the DOM (for ex. via an external library).\r\n\r\nAnd in this case, we got the famous warning \"Unused CSS selector\" :\r\n\r\n```svelte\r\n<div class=\"btn\" use:anActionThatCanAddClasses>\r\n\t...\r\n</div>\r\n\r\n<style>\r\n\t.btn {\r\n\t\tbackground: blue;\r\n\t}\r\n\r\n\t/* WARNING : Unused CSS selector */\r\n\t.important { \r\n\t\tbackground: red;\r\n\t\tborder: 3px solid black;\r\n\t}\r\n</style>\r\n```\r\n\r\nThe actual solution is to use the `:global(...)` modifier, but if it's misused it can break the scoping and have non-intuitive behavior on the selector specificity.\r\n\r\nExample :\r\n```css\r\n\t.btn {\r\n\t\tbackground: blue;\r\n\t}\r\n\r\n\t/* NO warning, but\r\n\t\t- style is not scoped, and can affect other nodes\r\n\t\t- some properties are not applied, as the class \".important\"\r\n\t\t  is less relevant than the \".btn.svelte-XXXX\" scoped CSS.\r\n \t*/\r\n\t:global(.important) { \r\n\t\tbackground: red; /* NOT applied */\r\n\t\tborder: 3px solid black;\r\n\t}\r\n```\r\n\r\nThe correct way to do this is to bundle the scoped and global CSS , like this :\r\n```css\r\n\t.btn:global(.important) { \r\n\t\t...\r\n\t}\r\n```\r\n\r\nBut it's verbose and not intuitive.\r\n\r\n### Describe the proposed solution\r\n\r\nIt should be possible to declare classes that \"could\" be added to a node.\r\n\r\nThis would only serve the CSS compiler and would have no impact on the generated JavaScript code.\r\n\r\nI think we could give a special meaning to the `use:class=\"names\"` directive.\r\nIt's a non-breaking change as `class` is a keyword, and so it cannot be used as an action.\r\n\r\nSo `use:class=\"names\"` could be a special case, which would expect a string containing the class names (like a normal `class` attribute).\r\n\r\nEx: \r\n```svelte\r\n<div class=\"btn\" use:class=\"important\"> ... </div>\r\n```\r\nWhich means that this `<div>` only has the \"btn\" class, but it can have the \"important\" class.\r\n\r\nThe CSS compiler would use this in addition to the class attribute/directive to determine the scope of CSS rules, which will avoids the need of `:global`.\r\n\r\nExample : \r\n```svelte\r\n<div class=\"btn\" use:class=\"important\" use:anActionThatCanAddClasses>\r\n\t...\r\n</div>\r\n\r\n<style>\r\n\t.btn {\r\n\t\tbackground: blue;\r\n\t}\r\n\t/* It just work ! */\r\n\t.important { \r\n\t\tbackground: red;\r\n\t\tborder: 3px solid black;\r\n\t}\r\n</style>\r\n```\r\n\r\n### Alternatives considered\r\n\r\ncontinue to use `:global()`\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-03-20T16:22:10Z","created_at":"2023-03-02T08:43:22Z","creator_user_login":"adiguba"}
{"number":8343,"title":"leading slash of compileOptions.filename is stripped in output, breaking absolute paths","body":"### Describe the bug\n\nThe svelte compiler adds information about the compiled files filename to the output. While doing so, it strips cwd and  a leading slash.\r\n\r\nStripping the leading slash breaks absolute paths that don't start with cwd as the result would be \r\n\r\n```\r\nhome/user/some/path/to/Component.svelte\r\n```\r\nwhich is relative and does not exist within cwd (/home/user/elsewhere/)\r\n\r\nThis results in svelte-inspector not being able to open components referenced via absolute paths, which can happen in a monorepo setup, see vite discord: https://discord.com/channels/804011606160703521/1075471833442287677\r\n\r\nStrip happens here: https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/Component.ts#L144\r\nIntroduced here: https://github.com/sveltejs/svelte/issues/1499\r\n\r\nMy best guess for a fix is that it should only strip the slash if it has stripped cwd, leaving other absolute paths alone.\n\n### Reproduction\n\nNot reproducible in repl as `process` isn't defined there\r\n\r\ngo to https://vite.new/svelte , inspect the site with the counter button, enter `document.getElementsByTagName('button')[0].__svelte_meta.loc.file` in console and note that the path does not start with a /\r\n\r\n```shell\r\ndocument.getElementsByTagName('button')[0].__svelte_meta.loc.file\r\n'src/lib/Counter.svelte'\r\n```\r\n\n\n### Logs\n\n```shell\nn/a\n```\n\n\n### System Info\n\n```shell\nlinux, svelte 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-02T12:41:06Z","created_at":"2023-03-01T22:50:51Z","creator_user_login":"dominikg"}
{"number":8340,"title":"fix: Handle read-only properties on DOM nodes","body":"There might be cases where there are properties that are read-only and setting their value would trigger an exception. Address that by querying the descriptor and figuring out if the property is writable.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2023-02-28T19:48:44Z","creator_user_login":"ledzepFan"}
{"number":8333,"title":"Getting Uncaught (in promise) TypeError: tr is not a function while form submit","body":"### Describe the bug\n\nI have integrated a contact form using svelte. The form is submitted properly from local system and I am able to display all the error and success message. Also the `update()` function is calling properly.\r\n\r\n**But when I deploy and created a build on AWS CDK (Lambda serverless).** The form is able to submit but `update()` function is working and the success message is showing after the form submit.\r\n\r\nHere I am using **'@sveltejs/adapter-auto'** adapter to deploy it on AWS.\r\n\r\nI used the same codebase from svelete official doc.\r\n\r\nHere is my code:\r\n\r\n![code_screen](https://user-images.githubusercontent.com/46454781/221483791-6565f77d-b58f-4091-9441-cbc2e0fa5e5f.png)\r\n\r\n\r\nHere is the form action:\r\n`<form\r\n            action=\"?/contact\"\r\n            method=\"post\"\r\n            class=\"php-email-form\"\r\n            use:enhance={formvali}\r\n          >`\r\nBelow code is to show the messages:\r\n`<p class=\"success\">{form?.success || \"\"}</p>`\r\n\r\nAfter the form submit, I am facing below error code attached in screenshot.\r\n\r\n![error_console](https://user-images.githubusercontent.com/46454781/221483100-66375479-432f-48a7-b4bd-d265d8e02b79.png)\r\n\r\nThe success message can be seen from browser network but not on the page.\r\n![success_message](https://user-images.githubusercontent.com/46454781/221483221-f2705e4f-efb5-44b5-a8a8-ab5d8c89e0ac.png)\r\n\n\n### Reproduction\n\nGetting the error message after form submit and `update()` function is not seems to be working.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 4.4 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-6300U CPU @ 2.40GHz\r\n    Memory: 8.31 GB / 15.89 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 16.19.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /home/jitender/node_modules/.bin/yarn\r\n    npm: 9.4.0 - /usr/bin/npm\r\n  npmPackages:\r\n    svelte: 3.50.1 => 3.50.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-27T13:58:05Z","created_at":"2023-02-27T05:49:38Z","creator_user_login":"manassingh64"}
{"number":8332,"title":"Expose the $$.callbacks just like $$props","body":"### Describe the problem\r\n\r\nHi,\r\n\r\nMy scenario is to create a Svelte component to dispatch events I used internally. Since the events I developed before is from another system, eg, signal systems from threejs editor. I need to convert the signals into svelte's events.\r\n\r\nSo I am trying to design a svelte component like this:\r\n\r\n```\r\n// App_a.svelte\r\n<Signals on:event_a={callback}\r\n  on:event_b={callback}\r\n  on:event_c={callback}\r\n></Signals>\r\n```\r\n\r\n```\r\n// App_b.svelte\r\n<Signals on:event_c={callback}\r\n  on:event_d={callback}\r\n  on:event_e={callback}\r\n></Signals>\r\n```\r\n\r\n```\r\n// Signal.svelte\r\n// not sure how to implement it\r\n```\r\n\r\nFor Signal.svelte, I need to know which on:XXXX is called from parent. However, the current svelte can only know $$props, but no something like $$callbacks or $$on.\r\n\r\n\r\n### Describe the proposed solution\r\n\r\n\r\nI would suggest to expose the component.$$.callbacks. But using that value, I can know what on:XXXX parent component is listening to in a child component.\r\n\r\n### Alternatives considered\r\n\r\nProbably something like $$on\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-02-27T14:09:37Z","created_at":"2023-02-26T15:12:33Z","creator_user_login":"nine-fox"}
{"number":8323,"title":"numeric data binding with trailing decimal results in null value","body":"### Describe the bug\n\nA numeric value ending with a `.` results in a `null` value when using Safari.  Firefox/Chrome appear ok.\n\n### Reproduction\n\nhttps://svelte.dev/tutorial/numeric-inputs\r\n\r\nAdd a decimal to one of the numeric values.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSafari Version 16.2 (17614.3.7.1.7, 17614)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-24T23:33:28Z","created_at":"2023-02-24T23:33:28Z","creator_user_login":"donl"}
{"number":8320,"title":"SSR does not match CSR HTML when {#each} block next to inline elements. (Extra spaces inserted.)","body":"### Describe the bug\r\n\r\nServer-side-rendered HTML does not match client-side-rendered HTML when an {#each} block is next to inline elements. (Extra spaces inserted.) This causes the layout to \"jump.\"\r\n\r\nIt seems to matter if there are inline elements before and/or after the {#each} block.\r\n\r\n### Reproduction\r\n\r\n1. Go to https://kit-demos-git-ssr-csr-bug-leftium.vercel.app/.\r\n2. Observe button layout.\r\n\r\n**Expected:** Button layout doesn't shift and is consistent between cases.\r\n\r\n**Actual:** Button layout shifts and spacing is inconsistent between cases. (Specifically case A vs case D)\r\n\r\nSource: https://github.com/Leftium/kit-demos/tree/ssr-csr-bug\r\n\r\n---\r\n\r\nReal-world example of bug: https://multi-launch-lusvcmx44-leftium.vercel.app/\r\nSource: https://github.com/Leftium/multi-launch/tree/7017891858fcb8f8a495a4a4dbc208f83402c7be\r\n\r\n\r\n\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz\r\n    Memory: 8.38 GB / 23.86 GB\r\n  Binaries:\r\n    Node: 18.9.0 - D:\\dropbox\\a\\nodejs\\64v18.9.0\\node.EXE\r\n    Yarn: 1.22.18 - D:\\dropbox\\home\\.yarn\\bin\\yarn.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1105.0), Chromium (110.0.1587.50)\r\n    Internet Explorer: 11.0.22621.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-02-24T13:57:52Z","created_at":"2023-02-23T17:04:55Z","creator_user_login":"Leftium"}
{"number":8316,"title":"Input with type=\"file\" and two-way binding doesn't track empty fileList","body":"### Describe the bug\n\nIf you have an input like so:\r\n```\r\n<input type=\"file\" bind:files bind:this={input}>\r\n```\r\n\r\nAnd set files to `null` or `(new DataTransfer()).files`, after having chosen a file, input.files still contains the file chosen. The only way to properly reset both `files` and `input.files` is setting them both to `(new DataTransfer()).files`.\n\n### Reproduction\n\nhttps://svelte.dev/repl/c0813e09c2f744e499e86975c9eea13f?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nBrowsers: Firefox 110.0; Chrome 110.0.5481.177\r\nOS: Window 10\r\nSvelte Version: 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-24T01:50:38Z","created_at":"2023-02-23T16:39:16Z","creator_user_login":"TGlide"}
{"number":8313,"title":"Provide types for forms using static analysis","body":"### Describe the problem\n\nTypescript is kinda bad at knowing what is in a form; Which makes sense since it can't deduce what types certain fields have without having access to the markup. \r\n\r\nBut, this makes form-handling code very frustrating to write. After doing `const data = new FormData(form)`, you then have to manually type-check every single entry in that form data. This adds a **lot** of code.\r\n\r\nSvelte offers the alternative of binding to an input's value, and then using that value instead of a FormData object, but this also has it's problems. Mainly duplication, and all the dangers that come with that.\r\nAdding `bind:value={data.name}` to every single input is very cumbersome on large forms, as well as error-prone. \r\n\r\nFor example: When doing the client-side form handling as a progressive enhancement step over a regular form-submit, it is very easy to change a `name` attribute on an input, while forgetting to change it on the manual value binding, leading to nasty bugs. \n\n### Describe the proposed solution\n\n## What Svelte could do\r\nAs a compiler, Svelte has a (more or less) God's eye view of all the input-elements that *could* be in the DOM, as well as what attributes they could have. What type are they?, Are they required?, What's the name?, Are they disabled? etc.\r\n\r\nThis could allow Svelte to statically figure out what Types of key/value pairs can be in a form, even if the inputs are abstracted away very far down in the Component Tree and nested in conditional statements.\r\nIt would be nice if such Type-information could be exposed to the developer somehow. This would drastically reduce the amount of redundant type-checking code.\r\n\r\n## Caveat\r\nIf the DOM gets tampered with from outside Svelte's eyes, then static analysis is no longer possible, and types can't be guaranteed. \r\nHowever, as long as developers are made aware of this, I think they can be trusted to handle the generated types responsibly.\n\n### Alternatives considered\n\nSimply live with the pain\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-06-26T18:52:31Z","created_at":"2023-02-23T09:43:26Z","creator_user_login":"LorisSigrist"}
{"number":8310,"title":"Jerky behavior when using crossfade on text nodes","body":"### Describe the bug\n\nMy understanding is crossfade transition is to allow two elements to gracefully enter/exit the viewport. However, that's not what happens when I'm using crossfade on text nodes. \r\n\r\nThis is the how the transition now looks like:\r\n\r\nhttps://user-images.githubusercontent.com/87104229/220582705-2534d2b1-d0e7-49c4-a981-753cf1494f95.mov\r\n\r\nI feel this experience is janky..the text is abruptly moving back to initial position.\r\n\r\nA better experience would be to just fade out one element and fade in the other one. Using fade:in, fade:out had similar affect (they caused a jank in the screen)\n\n### Reproduction\n\nhttps://svelte.dev/repl/33f6e8f2a3864b7b85d59d797f4013b9?version=3.50.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte version: 3.50.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-22T09:47:47Z","created_at":"2023-02-22T09:47:47Z","creator_user_login":"rzp-goutam"}
{"number":8305,"title":"Key block freezes website","body":"### Describe the bug\r\n\r\nWhen assigning to a value while that value is undefined before (and referencing the value in a component in the key block), the browser freezes (chrome & firefox, latest versions). In the REPL it prevents even closing the tab.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/836df591797e420e8cc6fdb1f2df3a6c?version=3.55.1\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nPlain Svelte installation\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-03-22T08:49:49Z","created_at":"2023-02-21T21:07:52Z","creator_user_login":"Pluriscient"}
{"number":8304,"title":"feat: conditional slots","body":"Implementing https://github.com/sveltejs/rfcs/pull/64\r\n\r\n- Fixes https://github.com/sveltejs/svelte/issues/5604\r\n- Fixes https://github.com/sveltejs/svelte/issues/6059\r\n- Fixes https://github.com/sveltejs/svelte/issues/7651\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `feat:`, `fix:`, `chore:`, or `docs:`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2023-02-21T16:51:52Z","creator_user_login":"tanhauhau"}
{"number":8302,"title":"Reactivity triggered in parent element on data sent up from slot","body":"### Describe the bug\n\nI have Producent component which is sending array of objects to parent component, where I want to be able to update it. It works, if you click on a button you can see data updated, but I don't understand how - and whether this is intended behavior or side effect.\r\n\r\nI have found out that local reference for data has to exist, I suppose because I have to be able to write `local = local` to trigger reactivity - this didn't work if I sent original data as a parameter to update function.\r\n\r\nOutside of <Producent> body, local is empty - even when I log it from inside the update function, but it does trigger reactivity anyway.\r\n\r\nI have originally posted this to Discord, where it was suggested that this might be bug. I think this should be able to work though. Workaround for this is separating the content of the slot to its own component, where it then works as I would think it would. Another suggested workaround was for Producent component to expose update function, but to me that seems less clear.\r\n\n\n### Reproduction\n\nBug(?) example: https://svelte.dev/repl/34cdcb4c9c9d40d0acfaca6dac92d39d?version=3.55.1\r\n\r\nWorkaround with extra component: https://svelte.dev/repl/31b003485963407d87e5b5da853c9d5f?version=3.55.1\r\n\r\nWorkaround with exposed update function: https://svelte.dev/repl/09358d8391994cd6ade75935de82d1c5?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-21T14:37:02Z","created_at":"2023-02-21T14:37:02Z","creator_user_login":"tfedor"}
{"number":8301,"title":"on:load does not trigger on <script src=...> tags","body":"### Describe the bug\n\nIn order to add external scripts (such as https://apis.google.com/js/api.js), we need to trigger some execution once they are loaded, such as in this example:  \r\n```html\r\n<!-- source: https://developers.google.com/sheets/api/quickstart/js ->\r\n...\r\n<script>\r\n...\r\n/**\r\n  * Callback after api.js is loaded.\r\n  */\r\nfunction gapiLoaded() {\r\n  gapi.load('client', initializeGapiClient);\r\n}\r\n...\r\n</script>\r\n<script async defer src=\"https://apis.google.com/js/api.js\" onload=\"gapiLoaded()\"></script>\r\n```\r\n\r\nThe way to do it would be something such as below:\r\n\r\n```html\r\n<!-- Component.svelte -->\r\n<script lang=\"ts\">\r\n  import { onMount } from \"svelte\";\r\n\r\n  console.log('component loaded')\r\n  \r\n  onMount(() => console.log('component mounted'))\r\n\r\n  const onGapiloaded = (e) => console.log('gapi loaded'); \r\n  const onGISLoaded = (e) => console.log('google loaded'); \r\n</script>\r\n\r\n<svelte:head>\r\n  <script src=\"https://apis.google.com/js/api.js\" on:load={onGapiloaded}></script>\r\n  <script async defer src=\"https://accounts.google.com/gsi/client\" on:load={onGISLoaded} />\r\n</svelte:head>\r\n```\r\n\r\nHowever it doesn't work and currently results in the following:\r\n```js\r\ncomponent loaded\r\ncomponent mounted\r\n```\r\n\r\nAs you can see, onGapiloaded and onGISLoaded are not triggered.\n\n### Reproduction\n\n1. Create a new project using `npm create svelte@latest`.\r\nCurrent `package.json` looks like below:\r\n```json\r\n{\r\n\t\"name\": \"testfolder\",\r\n\t\"version\": \"0.0.1\",\r\n\t\"scripts\": {\r\n\t\t\"dev\": \"vite dev\",\r\n\t\t\"build\": \"vite build\",\r\n\t\t\"preview\": \"vite preview\",\r\n\t\t\"check\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json\",\r\n\t\t\"check:watch\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch\",\r\n\t\t\"lint\": \"prettier --plugin-search-dir . --check . && eslint .\",\r\n\t\t\"format\": \"prettier --plugin-search-dir . --write .\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"@fontsource/fira-mono\": \"^4.5.10\",\r\n\t\t\"@neoconfetti/svelte\": \"^1.0.0\",\r\n\t\t\"@sveltejs/adapter-auto\": \"^2.0.0\",\r\n\t\t\"@sveltejs/kit\": \"^1.5.0\",\r\n\t\t\"@types/cookie\": \"^0.5.1\",\r\n\t\t\"@typescript-eslint/eslint-plugin\": \"^5.45.0\",\r\n\t\t\"@typescript-eslint/parser\": \"^5.45.0\",\r\n\t\t\"eslint\": \"^8.28.0\",\r\n\t\t\"eslint-config-prettier\": \"^8.5.0\",\r\n\t\t\"eslint-plugin-svelte3\": \"^4.0.0\",\r\n\t\t\"prettier\": \"^2.8.0\",\r\n\t\t\"prettier-plugin-svelte\": \"^2.8.1\",\r\n\t\t\"svelte\": \"^3.54.0\",\r\n\t\t\"svelte-check\": \"^3.0.1\",\r\n\t\t\"tslib\": \"^2.4.1\",\r\n\t\t\"typescript\": \"^4.9.3\",\r\n\t\t\"vite\": \"^4.0.0\"\r\n\t},\r\n\t\"type\": \"module\"\r\n}\r\n\r\n```\r\n2. Copy/Paste the code below in a +page.svelte of your choice and load it in your browser.\r\n```html\r\n<script lang=\"ts\">\r\n  import { onMount } from \"svelte\";\r\n\r\n  console.log('component loaded')\r\n  \r\n  onMount(() => console.log('component mounted'))\r\n\r\n  const onGapiloaded = (e) => console.log('gapi loaded'); \r\n  const onGISLoaded = (e) => console.log('google loaded'); \r\n</script>\r\n\r\n<svelte:head>\r\n  <script src=\"https://apis.google.com/js/api.js\" on:load={onGapiloaded}></script>\r\n  <script async defer src=\"https://accounts.google.com/gsi/client\" on:load={onGISLoaded} />\r\n</svelte:head>\r\n```\r\n3. Check the console to see the following:\r\n```js\r\ncomponent loaded\r\ncomponent mounted\r\n```\r\n\r\n---\r\nPS: Same issue with the following versions:\r\n```\r\n\"@sveltejs/kit\": \"^1.8.3\",\r\n\"svelte\": \"^3.55.1\",\r\n\"svelte-check\": \"^3.0.3\",\r\n\"svelte-preprocess\": \"^5.0.1\",\r\n\"vite\": \"^4.0.4\",\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz\r\n    Memory: 226.09 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.18.1 - /usr/local/bin/node\r\n    Yarn: 1.22.11 - /usr/local/bin/yarn\r\n    npm: 8.19.2 - /usr/local/bin/npm\r\n  Browsers:\r\n    Brave Browser: 71.0.58.21\r\n    Chrome: 110.0.5481.100\r\n    Firefox: 97.0.1\r\n    Safari: 15.1\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-29T10:59:54Z","created_at":"2023-02-21T11:09:48Z","creator_user_login":"Micka33"}
{"number":8298,"title":"Improve documentation on Stores internals","body":"### Describe the problem\n\nI'm frustrated that it is not clear for a newbie what a `start` callback is.  It is clear that a `Readable` that doesn't change is not useful, but there is no metaphor in the documentation explaining `start`. There are good examples, though.\r\n\r\nBesides, the source code doesn't help either. For example:\r\nhttps://github.com/sveltejs/svelte/blob/5a3a1e488a2df94c1d56a04429015ad7125b9b23/src/runtime/store/index.ts#L12\r\n```\r\n/** Cleanup logic callback. */\r\ntype Invalidator<T> = (value?: T) => void;\r\n```\r\nWhat information does this description give?\r\n\r\nAfter a long time trying to understand what an Invalidator is, I think it is about making `stores` compatible with `rxjs`, but this is not clear from the documentation nor the source code.\n\n### Describe the proposed solution\n\nI would like to see a better `metaphor` about the `start` callback in the documentation.  And references in the source-code to what  `Invalidator`, `StartStopNotifier` are.  The current definitions in the source code are \"tautologic\", for example:\r\nA StartStopNotifier  `Start and stop notification callbacks.`. \n\n### Alternatives considered\n\nA blog post.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-08-16T22:55:46Z","created_at":"2023-02-21T01:14:32Z","creator_user_login":"fredguth"}
{"number":8294,"title":"Component state should be frozen when outro is playing","body":"### Describe the bug\n\nI have Breadcrumbs component, which updates based on breadcrumbs store. Store updates when +layout.svelte gets mounted or destroyed.\r\n\r\nProblem is that breadcrumbs gets updated when outro animation starts, so user sees new bradcrumbs on old page. I think that outgoing component should have its state frozen, so it can not update while animation out. Or there should be at least option to enable this behavior (possibly param in transition function)\r\n\r\nThis could also fix this issue: [Store updates break transitions and components #3685](https://github.com/sveltejs/svelte/issues/3685) which is wrongfully closed.\n\n### Reproduction\n\nhttps://github.com/ToP29/svelte-transitions-repro\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22621\r\n    CPU: (32) x64 AMD Ryzen 9 7950X 16-Core Processor\r\n    Memory: 1.11 GB / 31.73 GB\r\n  Binaries:\r\n    Node: 18.12.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.19.2 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22621.1265.0), Chromium (110.0.1587.50)\r\n    Internet Explorer: 11.0.22621.1\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.55.1\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2023-02-19T16:20:23Z","created_at":"2023-02-19T16:20:23Z","creator_user_login":"ToP29"}
{"number":8293,"title":"True & False conditions are simultaneously shown.","body":"### Describe the bug\n\nTrue & False conditions are simultaneously shown when using local transitions inside a cancelled parent transtion.\n\n### Reproduction\n\nhttps://svelte.dev/repl/64b0c8c1f55941d6b9b0a51eb4596bb1?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nRepl\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-21T08:30:41Z","created_at":"2023-02-19T04:47:49Z","creator_user_login":"RickRyan26"}
{"number":8287,"title":"[Feature request] Svelte testing library","body":"### Describe the problem\r\n\r\nThere are a lot of testing libraries out there but none of them work well with Svelte. For example all the the testing methods [recommended in the FAQs](https://svelte.dev/faq#how-do-i-test-svelte-apps) are not workable solutions since none of them allow the use of slots. Given that Svelte is not a framework but a compiler it needs it's own testing library so we can *write tests the Svelte way*. It's also extremely important that we're using the same compiler in our tests that we're using in production.\r\n\r\n### Proposed solution\r\n\r\nTests could be written as Svelte components like this:\r\n\r\n#### `button.tests.svelte`\r\n\r\n```svelte\r\n<script>\r\n\r\n\timport {Describe, It, Before, After, expect, userEvent} from '@svelte/test'\r\n\timport {Button} from 'my-button-component'\r\n\timport {sum} from 'my-utils'\r\n\r\n       const clickHandler = (e) => {}\r\n\r\n\tconst buttonTest = (canvas) => {\r\n\t\tconst button = canvas.getByRole('button');\r\n\t\texpect(button).toBeInDocument()\r\n\t\texpect(button.innerText).toBe('Yay slots!!')\r\n\t\tuserEvent.click(button);\r\n\t        expect(clickHandler).toHaveBeenCalled();\r\n\t}\r\n\t\r\n\tconst sumTest = (node, args) => {\r\n\t\tconst result = sum(args[0], args[1]);\r\n\t\texpect(result).toBe(4);\r\n\t}\r\n\t\r\n</script>\r\n\r\n<Describe title='Component tests'>\r\n\r\n\t<Before each={ () => {} } all={ () => {} } />\r\n\r\n\t<After each={ () => {} } all={ () => {} } />\r\n\r\n\t<It title='should create a new button component' test={buttonTest} >\r\n\t\t<Button color=\"green\" on:click={clickHandler}>Yay slots!!</Button>\r\n\t</It>\r\n\r\n</Describe>\r\n\r\n<Describe title='Unit tests'>\r\n\r\n\t<It title='should add two numbers together (Maybe something like this)' use:sumTest={[2, 2]} />\r\n\r\n</Describe>\r\n```\r\n\r\n### Alternatives considered\r\n\r\n#### [svelte-testing-library](https://github.com/testing-library/svelte-testing-library)\r\nGreat for handling user events but [`render`](https://testing-library.com/docs/svelte-testing-library/api#render) function doesn't work with slots and you can't pass data back to parent components.\r\n\r\n#### [svelte-csf for Storybook](https://www.npmjs.com/package/@storybook/addon-svelte-csf)\r\nThis is experimental and pretty buggy. Only works is Storybook which is great for component development and not so great for business logic.\r\n\r\n#### [svelte-htm](https://www.npmjs.com/package/svelte-htm)\r\nThis is an okay solution but  we're forced to use components in our tests differently than they're intended to be used and the compiler is not the same one that is used in production. e.g.: ```render(html`<${Button} on:click=${() => (clicked += 1)}>Click Me!<//>`)```\r\n","state":"open","updated_at":"2023-02-18T16:02:57Z","created_at":"2023-02-15T19:05:08Z","creator_user_login":"jwerre"}
{"number":8283,"title":"`a11y-click-events-have-key-events` incorrectly repoted on `<dialog>` elements.","body":"### Describe the bug\n\nBy default, a dialog element shown via `dialog.showModal()` can be closed by pressing escape.\r\n\r\nIf I add an `on:click` handler to the dialog to enable clicking the background to dismiss it, I get an `a11y-click-events-have-key-events` warning on the dialog, despite being able to interact with the dialog via keyboard.\r\n\r\nI wouldn't mind needing to explicitly disable the warning, but I can't just use\r\n```svelte\r\n<!-- svelte-ignore a11y-click-events-have-key-events -->\r\n```\r\nas that also disables the warnings for all *children* of the dialog as well.\n\n### Reproduction\n\n```svelte\r\n<script>\r\n  let modal;\r\n  const clickBackdrop = (event) => {\r\n    if (event.target === modal) {\r\n      close();\r\n    }\r\n  }\r\n</script>\r\n\r\n<button on:click={() modal.showModal()}>\r\n\tOpen\r\n</button>\r\n<dialog bind:this={modal} style:overflow=\"none\" on:click={clickBackdrop}>\r\n  <div>\r\n    <button on:click={() => modal.close()} >Close</button>\r\n  </div>\r\n</dialog>\r\n\r\n<style>\r\n  div {\r\n    background-color: white;\r\n    height: 3em;\r\n    width: 6ch;\r\n    padding: 1em;\r\n  }\r\n  dialog {\r\n    border: 0;\r\n    padding: 0;\r\n  }\r\n  dialog::backdrop {\r\n    background-color: rgba(10, 10, 10, 0.86);\r\n  }\r\n</style>\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nnpmPackages:\r\n    svelte: ^3.55.1 => 3.55.1 \r\n```\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-18T08:21:36Z","created_at":"2023-02-14T01:20:36Z","creator_user_login":"tomprince"}
{"number":8279,"title":"fix a11y: don't destroy/rebuild form elements","body":"### Describe the bug\r\n\r\nAFAIK, it is bad for a11y & performance if you destroy then attach a new form element if you just want to change the text label of said element.  If you keep the same form element around, the tab focus doesn't get lost. \r\n\r\nEven the `on:click` function stays the same in the example.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/tutorial/else-blocks\r\n```svelte\r\n{#if user.loggedIn}\r\n\t<button on:click={toggle}>\r\n\t\tLog out\r\n\t</button>\r\n{:else}\r\n\t<button on:click={toggle}>\r\n\t\tLog in\r\n\t</button>\r\n{/if}\r\n```\r\nvs [my proposed](https://github.com/tomByrer/svelte/blob/patch-1/site/content/tutorial/04-logic/02-else-blocks/text.md)\r\n\r\n```svelte\r\n<button on:click={toggle}>\r\n\t{#if user.loggedIn}\r\n\t\tLog out\r\n\t{:else}\r\n\t\tLog in\r\n\t{/if}\r\n</button>\r\n```\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-18T15:02:35Z","created_at":"2023-02-12T06:11:40Z","creator_user_login":"tomByrer"}
{"number":8277,"title":"CSS is emitted even if `css: 'injected'` is used, it should not?","body":"### Describe the bug\r\n\r\nI was playing with the compiler and found this, I noticed the generated JS contains the used CSS, but also the `css` property is emitted on the result value.\r\n\r\n\r\n### Reproduction\r\n\r\n```js\r\nconst Svelte = require('svelte/compiler');\r\n\r\nconst source = `\r\n  <style>\r\n    b { color: red }\r\n  </style>\r\n  <b>OSOM</b>\r\n`;\r\n\r\nconst { js, css } = Svelte.compile(source, { css: 'injected' });\r\n\r\nconsole.log(js.code.includes(css.code)); // true?\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nsvelte: ^3.55.1 => 3.55.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-11T17:26:43Z","created_at":"2023-02-11T17:25:21Z","creator_user_login":"pateketrueke"}
{"number":8273,"title":"Aliases for certain type of key press events","body":"### Describe the problem\n\nI get this a11y message all the time when I put a `on:click` on an element that isn't normally clickable. It says I also need to have a `on:keydown` etc... so if someone is navigating with their keyboard, it will still work.\r\n\r\nThe problem is the code for this is extremely verbose:\r\n\r\n```ts\r\non:click={clickHandler} on:keydown={(e:KeyboardEvent) => { if(e.key === 'Enter') return clickHandler(e) }}\r\n```\r\n\r\nYes, it is possible to write an abstraction that would cut down on it a bit, but then everybody's creating different solutions to the same issue.\n\n### Describe the proposed solution\n\nNavigation by keyboard is usually only a few keys: Tab, Shift + Tab, Enter, Arrow Keys.\r\n\r\nThe same way Svelte has a lot of things like conditional attributes to tighten up the render markup, I think it would be cool if there were aliases that could be used. For example: `on:click={clickHandler} on:enter={clickHandler}`\r\n\r\nI feel like this is the actual intent 99% of the time, and if this alias existed and satisfied the a11y warning I bet people would use it.\n\n### Alternatives considered\n\nTrying to combine the event handlers like `on:click:enter` - but I think that would be messy looking, and they are still two different events (the functions would receive a [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) for click and a [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) for enter, so should be handled separately.\n\n### Importance\n\nwould make my life easier\n\n### Additional Information\n\nI know I can create my own use actions. I will try to do `<svelte:window use:enter />` and see if that lets me implement this on all elements. I hope I don't have to do `use:enter on:enter={}` for each time.","state":"open","updated_at":"2023-05-24T20:46:53Z","created_at":"2023-02-10T00:59:28Z","creator_user_login":"danielimmke"}
{"number":8271,"title":"Danger suggestion in basic recommendations","body":"### Describe the bug\r\n\r\nWhen you have `<video>` tag in your component we have suggestion to add `<track>` inside as recommended.\r\nBut from [support table at MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track) you can find that Safari doesn't support `<track>` Actually WebRTC video doesn't work in safari if you have `<track>` inside.\r\n\r\n### Reproduction\r\n\r\nUnfortunately don't have now. Already fixed on prod\r\n\r\n### Expected behaviour\r\n\r\nRemove that recommendation, or say that it's dangerous to use it in svelte.\r\n\r\n### System Info\r\n\r\n- OS: Safari 16\r\n\r\n### Which package is the issue about?\r\n\r\nsvelte-check\r\n\r\n### Additional Information, eg. Screenshots\r\n\r\n_No response_","state":"open","updated_at":"2023-02-21T17:57:48Z","created_at":"2023-02-09T20:45:42Z","creator_user_login":"nosovk"}
{"number":8264,"title":"[Feature Request] Reactive statements that run after mount","body":"### Describe the problem\n\nIt's common to use a value inside a reactive statement that is only defined after mount. For example, here is a date-input component:\r\n```svelte\r\n<script lang=\"ts\">\r\nexport let value: Date;\r\nlet input: HTMLInputElement;\r\n\r\n$: if (input) input.valueAsDate = value;\r\n\r\n</script>\r\n<input type=\"date\" bind:this={input} on:change={()=>value = input.valueAsDate} />\r\n```\r\n\r\nNote that the reactive statement needs to check if `input` is defined, as it is only avalible after mount.\n\n### Describe the proposed solution\n\nA reactive-statement that runs for the first time after mount:\r\n```typescript\r\n$ready: input.valueAsDate = value;\r\n```\n\n### Alternatives considered\n\nNA\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-02-18T15:58:37Z","created_at":"2023-02-08T19:16:50Z","creator_user_login":"TheCymaera"}
{"number":8266,"title":"Input resets when page fully loads","body":"### Describe the bug\n\nIf you load a page which contains an `input` element with value binded to a variable, the `input` will reset all the user edits when page load finishes.\r\n```\r\n# Timeline\r\n- Page starts loading\r\n- `input` becomes visible on screen\r\n- user edits the `input` to some value\r\n- Page finishes loading. Edits are gone.\r\n```\r\n\r\nI'm not sure if this falls exactly into svelte-kit and will this be considered a bug or not. But it sure is little annoying sometimes.\n\n### Reproduction\n\nRepo: https://github.com/nkitsaini/svelte-bug-repro\r\nVideo: https://github.com/nkitsaini/svelte-bug-repro/raw/main/repro.mkv\r\nSnippet:\r\n```svelte\r\n<script lang=\"ts\">\r\n\tlet a = \"234\"\r\n</script>\r\n\r\n<input bind:value={a}>\r\n```\n\n### Logs\n\n```Shell\n-- No Logs --\n```\n\n\n### System Info\n\n```Shell\nSystem:\r\n    OS: Linux 6.1 Arch Linux\r\n    CPU: (16) x64 AMD Ryzen 7 5825U with Radeon Graphics\r\n    Memory: 30.83 GB / 38.02 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 19.6.0 - /usr/bin/node\r\n    npm: 8.19.2 - /usr/bin/npm\r\n  Browsers:\r\n    Chromium: 109.0.5414.119\r\n    Firefox: 109.0.1\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0 => 1.0.2\r\n    @sveltejs/kit: ^1.0.0 => 1.3.10\r\n    svelte: ^3.54.0 => 3.55.1\r\n    vite: ^4.0.0 => 4.1.1\n```\n\n\n### Severity\n\nannoyance\n\n### Additional Information\n\n_No response_","state":"open","updated_at":"2023-08-30T09:50:21Z","created_at":"2023-02-06T05:29:57Z","creator_user_login":"nkitsaini"}
{"number":8249,"title":"Docs on `$$props`/`$$restProps` optimisation are vague","body":"### Describe the bug\r\n\r\nThe docs state:\r\n> `$$props` references all props that are passed to a component, including ones that are not declared with export. It is not generally recommended, as it is difficult for Svelte to optimise.\r\n\r\n> `$$restProps` contains only the props which are not declared with export. It can be used to pass down other unknown attributes to an element in a component. It shares the same optimisation problems as `$$props`, and is likewise not recommended.\r\n\r\nWhat exactly does that mean?\r\nWhat are the consequences to expect?\r\nDoes the type of usage matter, e.g. `$$props.something` in JS vs `<element {...$$props} />`?\r\n\r\nFor `$$restProps`, would it be better to collect additional data in a single property when used in a spread?\r\n\r\n```svelte\r\n<element {...$$restProps} />\r\nvs\r\n<script>export let attributes;</script>\r\n<element {...attributes} />\r\n```\r\n\r\n### Reproduction\r\n\r\nN/A\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\n-\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-18T16:14:56Z","created_at":"2023-02-04T07:47:52Z","creator_user_login":"brunnerh"}
{"number":8245,"title":"Component based Top-level Scope option","body":"### Describe the problem\n\nI want this works by default like this without any prefix because root one creates enough isolation for me. Isn't it for you? Why should I cascade the same random class everywhere?\r\n\r\n`ml9.svelte-1wixgsp span>span{background-color:yellow}`\r\n\r\nNot like;\r\nml9.svelte-1wixgsp span.svelte-1wixgsp>span.svelte-1wixgsp{background-color:yellow}\r\n\r\nhttps://github.com/sveltejs/svelte/issues/8241\n\n### Describe the proposed solution\n\n* Create option for scss `<style lang=\"scss\" scoped=\"top-level\">` or  `<style lang=\"scss\" scoped=\"cascade\">`\r\n* Implement the core functionality\r\n\n\n### Alternatives considered\n\nProposed seems good and flexible.\r\n\r\nWorkaround is:\r\n\r\n```\r\n<style lang=\"scss\" scoped>\r\n\tdiv {\r\n\t\tposition: relative;\r\n\t\tfont-weight: 200;\r\n\r\n\t\t:global(span) {\r\n\t\t\tposition: relative;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tpadding-top: 0.2em;\r\n\t\t\tpadding-right: 0.05em;\r\n\t\t\tpadding-bottom: 0.1em;\r\n\t\t\toverflow: hidden;\r\n\r\n\t\t\t& > :global(span) {\r\n\t\t\t\ttransform-origin: 50% 100%;\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t\tline-height: 1em;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</style>\r\n\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-02-18T16:32:27Z","created_at":"2023-02-02T10:40:09Z","creator_user_login":"emircanerkul"}
{"number":8243,"title":"Select value binding invalidates everything inside","body":"### Describe the bug\r\n\r\n`value` bindings on the `<select>` element cause invalidation of just about every variable that is used within the element, even though they are not changed.\r\n\r\nRelated:\r\n#6210\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<script>\r\n\timport Component from './Component.svelte';\r\n\r\n\tlet numbers = [\r\n\t  { name: 'one' },\r\n\t  { name: 'two' },\r\n\t  { name: 'three' },\r\n\t];\r\n\tlet selected = { index: 0 };\r\n\tlet selectedChar;\r\n\r\n\tlet test;\r\n\t// Assignment marks variable as potentially changing\r\n\t// so it appears in $$self.$$.update\r\n\ttest = new class { toString() { return 'test'; } };\r\n\r\n\t$: console.log(\"selected\", selected);\r\n\t$: console.log(\"selectedChar\", selectedChar);\r\n\t$: console.log(\"test\", test);\r\n</script>\r\n\r\n<select bind:value={selected.index}>\r\n\t{#each numbers as number, i}\r\n\t\t<option value={i}>{number.name}</option>\r\n\t{/each}\r\n</select>\r\n\r\n<select bind:value={selectedChar}>\r\n\t{#each numbers[selected.index].name as char}\r\n\t\t<option>{char} {test}</option>\r\n\t{/each}\r\n</select>\r\n\r\n<!-- Checking if a component would behave the same -->\r\n<Component bind:value={selectedChar}>\r\n \t{#each numbers[selected.index].name as char}\r\n\t\t<option>{char} {test}</option>\r\n\t{/each}\r\n</Component>\r\n```\r\n```svelte\r\n<!-- ./Component.svelte -->\r\n<script>\r\n    export let value;\r\n    value = 64;\r\n</script>\r\n<slot />\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/f01fc74ff0bb4053a51f6232eb84bc16?version=3.55.1)\r\n\r\nThe compiled code for the various binding handlers is:\r\n\r\n```js\r\n// <select bind:value={selected.index}>\r\n//     {#each numbers as number, i}\r\n//         <option value={i}>{number.name}</option>\r\n//     {/each}\r\n// </select>\r\nfunction select0_change_handler() {\r\n    selected = select_value(this);\r\n    $$invalidate(0, selected);\r\n}\r\n\r\n// <select bind:value={selectedChar}>\r\n//     {#each numbers[selected.index].name as char}\r\n//         <option>{char} {test}</option>\r\n//     {/each}\r\n// </select>\r\nfunction select1_change_handler() {\r\n    selectedChar = select_value(this);\r\n    $$invalidate(1, selectedChar);\r\n    $$invalidate(3, numbers);  // only read\r\n    $$invalidate(0, selected); // only read\r\n    $$invalidate(2, test);     // only read\r\n}\r\n\r\n// <Component bind:value={selectedChar}>\r\n//     {#each numbers[selected.index].name as char}\r\n//        <option>{char} {test}</option>\r\n//    {/each}\r\n// </Component>\r\nfunction component_value_binding(value) {\r\n    selectedChar = value;\r\n    $$invalidate(1, selectedChar);\r\n}\r\n```\r\n\r\n(Using the `number` each element for the option value in the first select rather than the each index would also cause `numbers` to be invalidated in the first select change handler.)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL, Svelte 3.55.1, Windows 10, Chrome\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-18T16:35:01Z","created_at":"2023-02-02T00:07:46Z","creator_user_login":"brunnerh"}
{"number":8239,"title":"Style attribute not rendered if semi colon is in a conditional expression","body":"### Describe the bug\n\nThe REPL below shows it, but let me know if you need any more information.\n\n### Reproduction\n\nhttps://svelte.dev/repl/468121c989c9473784293ccf9614b0c7?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nLatest chrome on windows 11. User agent is: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\"\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-18T16:59:49Z","created_at":"2023-01-31T17:37:21Z","creator_user_login":"JohnnyFun"}
{"number":8235,"title":"Why are css comments being stripped out?","body":"### Describe the bug\r\n\r\nComments in CSS are being stripped out, and there seem to be no options to stop it. The use case is to allow 3rd-party tools like vite that uses vitePreprocess, and allow postcss plugins to process the comments correctly. e.g. disable certain features.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/44822de64b7040369b5bf4d95fcf7da0?version=3.55.1\r\n\r\nCheck \"CSS output\" tab\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 33.45 GB / 64.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.13.0 - ~/.nvm/versions/node/v18.13.0/bin/node\r\n    Yarn: 1.22.19 - ~/.nvm/versions/node/v18.13.0/bin/yarn\r\n    npm: 8.19.3 - ~/.nvm/versions/node/v18.13.0/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.119\r\n    Firefox: 107.0.1\r\n    Safari: 16.2\r\n```\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking certain usages","state":"open","updated_at":"2023-07-09T07:57:32Z","created_at":"2023-01-30T20:52:45Z","creator_user_login":"shirotech"}
{"number":8234,"title":"[Feature Request] An alternative way to create component props with an interface","body":"### Describe the problem\r\n\r\nThere's times when the same `interface` you're using for a component's props, is used in multiple other places in the application.\r\n\r\nI hate that you can't use `interfaces` with Svelte props, since you have you declare `props` one by one. Example:\r\n\r\n```ts\r\nexport let count: number = 0\r\nexport let name: string = ''\r\n```\r\n\r\nIt would be nice if you could pass in `interfaces`, like the following:\r\n\r\n```ts\r\ninterface Props {\r\n  count: number\r\n  name: string\r\n}\r\n```\r\n\r\n*Obviously a contrived example, as the type can be inferred, but please ignore that for this sake.*\r\n\r\n### Describe the proposed solution\r\n\r\nSomething like [Vue 3 Reactivity Transform](https://vuejs.org/guide/extras/reactivity-transform.html#reactive-props-destructure) (which incidentally won't be supported natively to destructure, despite being an experimental feature):\r\n\r\n```ts\r\ninterface Props {\r\n  count: number\r\n  name: string\r\n}\r\n\r\nconst { count = 0, name = '' } = defineProps<Props>()\r\n```\r\n\r\nThe interface would then control whether or not a prop is optional, like so:\r\n\r\n```ts\r\ninterface Props {\r\n  count?: number\r\n  name?: string\r\n}\r\n```\r\n\r\n### Alternatives considered\r\n\r\nI'm not aware of any alternatives that currently exist to solve this issue. It's one of the rare things I feel like Svelte is lacking, which is an otherwise delightful library to use.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-08-28T00:28:29Z","created_at":"2023-01-30T07:34:53Z","creator_user_login":"D-Marc1"}
{"number":8232,"title":"Changing classes during transition:slide, broken on out transition","body":"### Describe the bug\n\nYou can change i.e classes on a domElement while `transition:in`, but not while `transition:out`.\r\n\r\nIs related to: [#8150](https://github.com/sveltejs/svelte/issues/8150) and [#8035](https://github.com/sveltejs/svelte/issues/8035) \n\n### Reproduction\n\nIn this example i have a common transition:slide and as you can see, you can change the class and background color changes with it, while transitioning in. But nothing is affected while transitioning out.\r\n\r\nhttps://svelte.dev/repl/cf4eb9b61a01477d8df58e6abc8641cf?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.1\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 82.38 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.12.1 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 9.3.1 - ~/Development/moment77/test/node_modules/.bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.119\r\n    Safari: 16.2\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.55.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-29T11:49:26Z","created_at":"2023-01-29T11:48:20Z","creator_user_login":"torrfura"}
{"number":8224,"title":"Error thrown when using custom defered transition as a bidirectional transition","body":"### Describe the bug\r\n\r\nUsing a defered bidirectional transition throws an error:\r\n```shell\r\nUncaught (in promise) TypeError: outros is undefined\r\n    go chunk-K6MJRMI7.js?v=2acd031f:1227\r\n    run chunk-K6MJRMI7.js?v=2acd031f:1278\r\n```\r\n\r\nIt works fine if implemented as a non-defered transition.\r\n\r\nThe code from the repro case below:\r\n```javascript\r\n<script lang=\"ts\">\r\n  function customTransition() {\r\n    return () => {\r\n      return {\r\n        duration: 2000\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<button on:click transition:customTransition>\r\n  <slot></slot>\r\n</button>\r\n```\r\n\r\n\r\n### Reproduction\r\n\r\n[Stackbliz example here.](https://stackblitz.com/edit/vitejs-vite-bqbend?file=src/lib/Counter.svelte)\r\n\r\nTo reproduce, click on the button and the error is thrown.\r\n\r\n\r\n### Logs\r\n\r\n```shell\r\nUncaught (in promise) TypeError: outros is undefined\r\n    go chunk-K6MJRMI7.js?v=2acd031f:1227\r\n    run chunk-K6MJRMI7.js?v=2acd031f:1278\r\n    promise chunk-K6MJRMI7.js?v=2acd031f:1276\r\n    outro /src/lib/Counter.svelte:89\r\n    transition_out chunk-K6MJRMI7.js?v=2acd031f:1073\r\n    outro /src/App.svelte:68\r\n    transition_out chunk-K6MJRMI7.js?v=2acd031f:1073\r\n    update /src/App.svelte:327\r\n    update chunk-K6MJRMI7.js?v=2acd031f:1021\r\n    flush chunk-K6MJRMI7.js?v=2acd031f:987\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.0 undefined\r\n    CPU: (8) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 0 Bytes / 0 Bytes\r\n    Shell: 1.0 - /bin/jsh\r\n  Binaries:\r\n    Node: 16.14.2 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 7.17.0 - /usr/local/bin/npm\r\n  npmPackages:\r\n    svelte: ^3.55.1 => 3.55.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-24T11:44:37Z","created_at":"2023-01-24T11:30:36Z","creator_user_login":"oskar-koli"}
{"number":8220,"title":"<input type=\"reset\" /> clears form instead of respecting values","body":"### Describe the bug\r\n\r\nUsing `<input type=\"reset\" />` on a form with hardcoded values clears the form when it shouldn't.\r\n\r\n### Reproduction\r\n\r\nRepl here: https://svelte.dev/repl/fa8b042ada144734b1814685f918f1db?version=3.55.1\r\n\r\nForm is reset, but values shouldn't change. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reset\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nrepl\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-09T18:31:05Z","created_at":"2023-01-23T09:24:15Z","creator_user_login":"angrytongan"}
{"number":8218,"title":"Require props to be bound","body":"### Describe the problem\n\nWhen creating a component, I notice that there are essentially three types of props: \r\n\r\n1. Those that **should** be bound with `bind:name`, otherwise the component doesn't work properly\r\n2. Those that *could* be bound with `bind:name`\r\n3. Those that should be static data or configuration: `key=\"configValue\"`\r\n\r\nBut when someone is consuming the component, they won't know which kind each prop should be, or at least if it should be type 1 or not.\n\n### Describe the proposed solution\n\nIt would be nice if Svelte provided a way to make component props required to be bound, to ensure that type 1 is used. \r\n\r\nI understand it would be hard though to add this kind of metadata within the javascript syntax. For typescript, maybe it could be something like:\r\n\r\n```typescript\r\nimport type { Bound } from 'svelte';\r\n\r\nexport let data: Bound<string[]>\r\n```\r\n\n\n### Alternatives considered\n\nA convention like capitalized props for type 1 is my poor man's fix for now, but that requires people to know that convention, so of course a built-in language feature would be the best!\r\n\r\nIn the documentation for component libraries like [this one](https://carbon-components-svelte.onrender.com/components/FileUploader), they added a \"Reactive\" tag to the props that could be reactive, so that covers types 1 and 2, but not just 1.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-01-24T20:37:10Z","created_at":"2023-01-21T14:00:42Z","creator_user_login":"ciscoheat"}
{"number":8217,"title":"External scripts in templates are imported two times","body":"### Describe the bug\r\n\r\nHaving `<script src=\"https://domain.com/s.js\"></script>'`inside of template will inject its content at svelte to the build via Vite and everytime when component is mounted, the script is called from the domain. If external script is updated, the svelte app is still using the old version, but loading a new one externally without having any effect. \r\n\r\nIf the external script is built into Svelte app, then it shouldn't be called if its external change doesn't have any impact.\r\n\r\n### Reproduction\r\n\r\nAs described.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nDoesn't matter.\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-21T08:25:11Z","created_at":"2023-01-21T08:23:34Z","creator_user_login":"step135"}
{"number":8216,"title":"Callback of derived stores evaluates on every subscription using $store syntax in SSR, not just the first","body":"### Describe the bug\n\nPer [the documentation](https://svelte.dev/docs#run-time-svelte-store-derived) about the `derived` store, the callback should be evaluated lazily:\r\n\r\n> The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.\r\n\r\nHowever, [in my repro](https://github.com/fzembow/svelte-context-store-bug) I am seeing that on the backend/SSR, the callback is being evaluated for every subscription.\r\n\r\n```\r\ncalculating the derived store, attempt 1\r\ncalculating the derived store, attempt 2\r\ncalculating the derived store, attempt 3\r\ncalculating the derived store, attempt 4\r\n```\r\n\r\nThe store dependencies here never change, so I would not expect any re-calculation.\r\n\r\nCompare those console logs with those seen on the browser, where only a single evaluation of the derived callback happens, which I would consider to be the correct behavior given the documentation.\r\n\r\n**NOTES**\r\n\r\n* This DOES NOT reproduce if the `$derivedStore` subscription happens within the same component in which the store is defined (in this case, directly within `+page` as opposed to in a child component.\r\n* This DOES NOT reproduce if `derivedStore.subscribe()` is used rather than the `$derivedStore` syntax.\r\n* This DOES reproduce if the `$derivedStore` is defined as an export in a standalone ts file and imported directly by the child components.\r\n* It DOES reproduce if the `$derivedStore` is passed using context, and not props\r\n* It DOES reproduce on `yarn build && yarn preview` instead of just `yarn dev`\r\n* I am happy to try and submit a PR for this issue if someone can provide pointers on where I might get started.\n\n### Reproduction\n\nSee https://github.com/fzembow/svelte-context-store-bug\r\n\r\nThe `+page` creates a trivial derived store:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { derived, writable } from 'svelte/store';\r\n\timport ChildComponent from './ChildComponent.svelte';\r\n\tconst numberStore = writable<number>(21);\r\n\tlet calcCount = 0;\r\n\tconst derivedStore = derived([numberStore], ([number]) => {\r\n\t\tcalcCount += 1;\r\n\t\tconsole.log(`calculating the derived store, attempt ${calcCount}`);\r\n\t\treturn number * 2;\r\n\t});\r\n</script>\r\n\r\n<ChildComponent store={derivedStore} />\r\n<ChildComponent store={derivedStore} />\r\n<ChildComponent store={derivedStore} />\r\n<ChildComponent store={derivedStore} />\r\n```\r\n\r\nAnd the child component just reads the current value\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport type { Readable } from 'svelte/store';\r\n\texport let store: Readable<number>;\r\n</script>\r\n\r\n<h1>The number is {$store}</h1>\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```Shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 25.54 GB / 64.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.15.0 - ~/.volta/tools/image/node/16.15.0/bin/node\r\n    Yarn: 1.22.17 - ~/.volta/tools/image/yarn/1.22.17/bin/yarn\r\n    npm: 8.5.5 - ~/.volta/tools/image/npm/8.5.5/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.87\r\n    Firefox: 108.0.2\r\n    Safari: 16.0\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0 => 1.0.2 \r\n    @sveltejs/kit: ^1.0.0 => 1.2.0 \r\n    svelte: ^3.54.0 => 3.55.1 \r\n    vite: ^4.0.0 => 4.0.4\n```\n\n\n### Severity\n\nserious, but I can work around it\n\n### Additional Information\n\nin my project, the derived callback is somewhat calculation-intensive, so I would rather that the calculation does not happen so many times :)\r\n\r\nI'm sure there is _some_ way to work around this, but this feels buggy to me","state":"open","updated_at":"2023-01-20T19:13:31Z","created_at":"2023-01-20T04:09:10Z","creator_user_login":"fzembow"}
{"number":8211,"title":"Reactive variable not updating as expected when assigned to store value","body":"### Describe the bug\n\nReactive variables assigned to the value of a store do not correctly update if the reactive declaration is defined in the code before the store value itself is changed. The store value itself does change, but reactivity is never triggered for any variable reacting to changes in the store value. The strangest thing is that the where the directly reactive statement is defined changes the semantics of the code. Reproducing this bug is very simple, see the attached REPL. \n\n### Reproduction\n\nhttps://svelte.dev/repl/8aecf4ef60f345fcacf6de3880beb7d1?version=3.35.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 4.18 CentOS Stream 8\r\n    CPU: (16) x64 11th Gen Intel(R) Core(TM) i9-11900K @ 3.50GHz\r\n    Memory: 21.09 GB / 62.44 GB\r\n    Container: Yes\r\n    Shell: 4.4.20 - /bin/bash\r\n  Binaries:\r\n    Node: 18.7.0 - ~/.nvm/versions/node/v18.7.0/bin/node\r\n    npm: 8.15.0 - ~/.nvm/versions/node/v18.7.0/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.74\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-03-21T15:10:10Z","created_at":"2023-01-19T21:21:02Z","creator_user_login":"Kcwidman"}
{"number":8213,"title":"{@html} tag is broken during hydration","body":"### Describe the bug\r\n\r\nThere is some weird behaviour with the {@html} tag when:\r\n- `ssr` is `true`\r\n- the value used in the {@html} tag is updated during component initialization in the browser\r\n- the {@html} tag has text or element siblings\r\n\r\nI have created a minimal repro (see below). Here's code that causes the weird behaviour:\r\n\r\n```svelte\r\n<script>\r\n    import { browser } from \"$app/environment\";\r\n\r\n    let greeting = \"You should not see me after hydration...\";\r\n\r\n    /**\r\n     * Using the onMount approach will fix the issue,\r\n     * so it seems like there is something wrong\r\n     * in the component initialization\r\n    */\r\n    // import { onMount } from \"svelte\";\r\n    // onMount(() => greeting = \"G'day mate!\");\r\n    \r\n    if (browser) {\r\n        greeting = \"G'day mate!\";\r\n    }\r\n</script>\r\n\r\n<h2>Working:</h2>\r\n<div>\r\n    {@html greeting}\r\n</div>\r\n<h2>Broken:</h2>\r\n<div>\r\n    I don't work: {@html greeting}\r\n</div>\r\n<div>\r\n    <span>And neither do i:</span>\r\n    {@html greeting}\r\n</div>\r\n```\r\n\r\nI tried to reproduce the bug in a svelte REPL, but with no luck. This makes me feel that the bug is a hydration and/or initialization problem, but i don't know enough of svelte-kit's inner behaviour to know for sure.\r\n\r\n### Reproduction\r\nLink to minimal repro: https://github.com/MathiasWP/svelte-kit-at-html-bug\r\nLink to Stackblitz: https://stackblitz.com/edit/sveltejs-kit-template-default-qdzjsc\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: macOS 11.6.7\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-8259U CPU @ 2.30GHz\r\n    Memory: 54.57 MB / 8.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\nBinaries:\r\n    Node: 18.12.0 - /usr/local/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 8.19.2 - /usr/local/bin/npm\r\nBrowsers:\r\n    Brave Browser: 108.1.46.144\r\n    Chrome: 109.0.5414.87\r\n    Firefox: 104.0.2\r\n    Safari: 15.5\r\nnpmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0 => 1.0.2 \r\n    @sveltejs/kit: ^1.0.0 => 1.1.4 \r\n    svelte: ^3.54.0 => 3.55.1 \r\n    vite: ^4.0.0 => 4.0.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nserious, but I can work around it\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-07-14T18:01:43Z","created_at":"2023-01-19T19:51:20Z","creator_user_login":"MathiasWP"}
{"number":8210,"title":"Typescript doesn't catch using nonexistent fields on refs","body":"### Describe the bug\r\n\r\nWhen using refs gotten through `bind:this`, typescript doesn't alert you if you access properties that don't exist. I'm guessing it's because interface `SvelteComponentDev` has `[accessor: string]: any`.\r\n\r\n### Reproduction\r\n\r\n```\r\n// ComponentA.svelte\r\n<script lang=\"ts\">\r\n  export function log() {\r\n    console.log(5)\r\n  }\r\n<script>\r\n\r\n<div>hello</div>\r\n\r\n// ComponentB.svelte\r\n<script lang=\"ts\">\r\n  import ComponentA from './ComponentA';\r\n\r\n  let componentARef: ComponentA;\r\n\r\n  onMount(() => {\r\n    componentARef.logWithTypo(); // should error\r\n  })\r\n<script>\r\n\r\n<ComponentA bind:this={componentARef} />\r\n```\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.19 Ubuntu 22.10 22.10 (Kinetic Kudu)\r\n    CPU: (16) x64 12th Gen Intel(R) Core(TM) i7-1260P\r\n    Memory: 5.46 GB / 15.33 GB\r\n    Container: Yes\r\n    Shell: 5.2.2 - /bin/bash\r\n  Binaries:\r\n    Node: 18.7.0 - /tmp/xfs-bd4c206b/node\r\n    Yarn: 3.3.0 - /tmp/xfs-bd4c206b/yarn\r\n    npm: 8.18.0 - /usr/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.74\r\n    Firefox: 109.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-19T17:43:07Z","created_at":"2023-01-19T17:42:27Z","creator_user_login":"erezarnon"}
{"number":8209,"title":"Hydration sometimes causes static elements to be recreated rather than attached, causing animations to rerun","body":"### Describe the bug\r\n\r\nSome combinations of elements causes hydration to recreate a static element, causing animations to rerun.\r\n\r\nI have provided the minimal example that I can produce. Changing any of the elements of this example causes the failure to no longer occur.\r\n\r\n### Reproduction\r\n\r\nhttps://stackblitz.com/edit/sveltejs-kit-template-default-m8q8da?file=src%2Froutes%2F%2Bpage.svelte\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: macOS 13.1\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 75.61 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.17.1 - ~/.nvm/versions/node/v16.17.1/bin/node\r\n    Yarn: 1.22.19 - ~/.yarn/bin/yarn\r\n    npm: 8.15.0 - ~/.nvm/versions/node/v16.17.1/bin/npm\r\n  Browsers:\r\n    Chrome: 109.0.5414.87\r\n    Firefox: 103.0.1\r\n    Safari: 16.2\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0 => 1.0.1 \r\n    @sveltejs/kit: ^1.0.0 => 1.1.3 \r\n    svelte: ^3.54.0 => 3.55.1 \r\n    vite: ^4.0.0 => 4.0.4 \r\n```\r\n\r\n\r\n### Severity\r\n\r\nserious, but I can work around it\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-01-19T16:30:10Z","created_at":"2023-01-19T15:23:59Z","creator_user_login":"fnimick"}
{"number":8207,"title":"Infinite loop and dev server and ssr freezes","body":"### Describe the bug\r\n\r\nBindings between components may cause an infinite loop of updates.\r\nAlthough simplified in the reproduction repository, in reality they often occur in a larger number of component combinations, and the lack of errors and warnings makes it difficult to identify the cause or bad pattern.\r\n\r\nupdate:\r\nActual situations may occur in situations that are more complex than a reproduction repository.\r\nThe dev server does not produce any errors, it simply freezes and developers tend to waste time trying to locate it.\r\nsvelte is a great tool. But this is clearly not a \"fast\" and \"fun\" developer experience.\r\nI think it would be better to at least output an error or warning in situations like this where freezes occur.\r\n\r\nupdate:\r\nFreezes occur not only on the dev server, but also during the SSR process in the production build.\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/sinbino/issue-sveltekit-reactive\r\nSee repository above.\r\n\r\nsrc/routes/test/Component0.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  import Component1 from './Component1.svelte'\r\n\r\n  export let data = { value: undefined }\r\n\r\n  let value: any = undefined\r\n  const setValue = (v: any) => { \r\n    value = v\r\n    console.log('UPDATE!')\r\n  }\r\n  $: { setValue(data.value) }\r\n</script>\r\n\r\n<Component1 bind:value></Component1>\r\n```\r\n\r\nsrc/routes/test/Component1.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let value: any = ''\r\n</script>\r\n\r\n<input bind:value />\r\n```\r\n\r\nThe setValue function of Component0.svelte is executed infinitely.\r\nThis only occurs when SSR occurs.\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.15 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n    CPU: (10) x64 Intel(R) Core(TM) i5-10600 CPU @ 3.30GHz\r\n    Memory: 5.36 GB / 14.18 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 18.12.1 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.19.2 - /usr/bin/npm\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.55.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-20T01:27:03Z","created_at":"2023-01-18T01:32:20Z","creator_user_login":"sinbino"}
{"number":8202,"title":"Child inside the `svelte:head` is not removed from DOM when the parent is unmounted","body":"### Describe the bug\n\nIf the following component is included and subsequently removed, the document head still contains whatever `Child` is.\r\n\r\n```svelte\r\n<!-- MyComponent.svelte -->\r\n<script>\r\n    import Child from './Child.svelte'\r\n</script>\r\n\r\n<svelte:head>\r\n    <Child />\r\n</svelte:head>\r\n```\r\n\r\nI see a lot of similar bugs in this and Kit's issue history, but this still seems present in the latest release.\n\n### Reproduction\n\nhttps://svelte.dev/repl/54395e0587fc49cebf931d11f57f22dc?version=3.55.1\r\n\r\nClick the button in the REPL to repeatedly add and remove a `Head` element, which has the following HTML:\r\n\r\n```html\r\n<svelte:head>\r\n\t<Title {title} />  <!-- this contains <title>{title}</title> -->\r\n\t<meta name=\"test\">\r\n</svelte:head>\r\n```\r\n\r\nYou'll see that when `Head` is added, the `title` and `meta` are both added to DOM (inspect it or just look at the counters). When `Head` is removed the `title` still remains (but it shouldn't) while `meta` is correctly cleaned up.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte 3.55.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-17T11:27:04Z","created_at":"2023-01-17T10:41:11Z","creator_user_login":"tontonsb"}
{"number":8267,"title":"Unexpected DOM mutations during hydration","body":"### Describe the bug\r\n\r\nWhen hydrating a server-side-rendered page, Svelte applies numerous unexpected mutations—mainly removing and adding empty text nodes. The number of mutations seems to grow linearly with the number of components.\r\n\r\nHere, for example, mutation logs from a bare-bone https://node.new/sveltekit project:\r\n\r\n<img width=\"1630\" alt=\"CleanShot 2023-01-17 at 15 35 17@2x\" src=\"https://user-images.githubusercontent.com/5859177/212848572-5875dc2c-f136-4a66-98ac-a7b680f9ea94.png\">\r\n\r\n\r\nThe expected behavior is to observe no mutations, unless something has changed. Please note that the issue I am describing is observed in production build, not only in development (where some mutations are justified).\r\n\r\n\r\n### Reproduction\r\n\r\nTo reproduce, one can just add a `MutationObserver` to app.html:\r\n```html\r\n<body data-sveltekit-preload-data=\"hover\">\r\n  <div style=\"display: contents\" id=\"kit-body\">%sveltekit.body%</div>\r\n</body>\r\n<script>\r\n  // Callback function to execute when mutations are observed\r\n  const callback = (mutationList, observer) => {\r\n    for (const mutation of mutationList) {\r\n      console.log(mutation);\r\n    }\r\n  };\r\n\r\n  // Create an observer instance linked to the callback function\r\n  const observer = new MutationObserver(callback);\r\n\r\n  // Start observing the target node for configured mutations\r\n  observer.observe(document.getElementById('kit-body'), {\r\n    attributes: true,\r\n    childList: true,\r\n    subtree: true,\r\n    attributeOldValue: true\r\n  });\r\n</script>\r\n```\r\n\r\nReproduction in [github repo](https://github.com/ebeloded/kit-mutations-bug) (contains SvelteKit skeleton, with mutation observer in app.html)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: macOS 13.1\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 92.84 MB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.19.0 - ~/.nvm/versions/node/v16.19.0/bin/node\r\n    npm: 8.19.3 - ~/.nvm/versions/node/v16.19.0/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.124\r\n    Firefox: 108.0.1\r\n    Safari: 16.2\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: ^1.0.0 => 1.0.1 \r\n    @sveltejs/kit: ^1.0.0 => 1.1.1 \r\n    svelte: ^3.54.0 => 3.55.1 \r\n    vite: ^4.0.0 => 4.0.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nPerforming DOM manipulations on load can have unpleasant side effects. I discovered the issue while trying to figure out, why CSS animation on a server-rendered element was being reset during hydration.\r\n","state":"open","updated_at":"2023-06-26T01:48:54Z","created_at":"2023-01-17T08:42:41Z","creator_user_login":"ebeloded"}
{"number":8198,"title":"Spread attributes reapply on every store update or re-render","body":"### Describe the bug\r\n\r\nApplying [spread attributes](https://svelte.dev/repl/1b3257d4624d4b4b80d45c182310a486?version=3.55.1) to an element during component initialization causes those attributes to get reapplied during any store update or component re-render.\r\n\r\nTypically this isn't noticeable, but I recently came across this in a somewhat tricky situation where I have a listener on an input element that checks and updates an `$errors` store on blur, causing the `value` of the input element to always reset to its original value as set from a spread attribute.\r\n\r\nFor context, this is about what I have:\r\n\r\n```html\r\n<script>\r\n  const { attrs, errors } = sampleForm.init();\r\n</script>\r\n\r\n<form method=\"post\">\r\n\r\n  <label for=\"username\">Name</label><br />\r\n  <input type=\"text\" {...attrs('username')} />\r\n  {#if $errors.username}{$errors.username}{/if}\r\n\r\n  <label for=\"name\">Email</label><br />\r\n  <input type=\"email\" {...attrs('email')} />\r\n  {#if $errors.email}{$errors.email}{/if}\r\n\r\n  <!-- ... -->\r\n</form>\r\n```\r\n\r\nI could in theory grab the input element and `input.setAttribute(value, 'something')`, but that's not ideal as it wouldn't work without JS. I could also set these attributes with something like `<input type=\"text\" id={attrs.username.id} name={attrs.username.name} value={attrs.username.value} />` but that's much more verbose.\r\n\r\nI would consider this unexpected behavior, because I wouldn't expect updating a store to have this kind of side effect and it's not mentioned in the documentation.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/1b3257d4624d4b4b80d45c182310a486?version=3.55.1\r\n\r\nIf you uncomment line 16 or 17, edit the value of the input, and then tab to the submit button you'll see the input's value reset to what was set by the spread operator. If you uncomment 17 and comment out line 27 (so `toggle` no longer is in the template), the value doesn't get cleared when toggle updates.\r\n\r\nMy impression is the value attribute is only getting reapplied from the spread operator either when a store updates, or the component re-renders.\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-17T19:40:29Z","created_at":"2023-01-15T08:27:32Z","creator_user_login":"dslatkin"}
{"number":8196,"title":"addEventListener, object with a handleEvent() method support.","body":"### Describe the problem\n\nI'm not sure this is a bug or the framework's intention.\r\n\r\n\r\nAccording to the DOM API specification document\r\n\r\n_addEventListener(type, listener)_\r\n\r\nlistener could be an object that has a handleEvent() method.\r\n**Ref:** [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\r\n![event object](https://user-images.githubusercontent.com/1311673/212449506-1c70f084-46bc-40b7-82d5-b1955dc22801.jpg)\r\n\r\nI tried writing the following code in the svelte REPL:\r\n**Svelte REPL**: [https://svelte.dev/repl/538e3dbe765947a9b0a04a88cb050c6a?version=3.55.1](https://svelte.dev/repl/538e3dbe765947a9b0a04a88cb050c6a?version=3.55.1)\r\n\r\nSvelte compiler seems to work with listener objects via handleEvent(), but it produce different results when referencing by object name and \"this\" including to reactive ui.\r\n\r\n\n\n### Describe the proposed solution\n\nsvelte compiler should support addEventListener object  with handleEvent()\n\n### Alternatives considered\n\nsvelte compiler should support addEventListener object  with handleEvent()\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-01-17T01:51:56Z","created_at":"2023-01-14T05:08:20Z","creator_user_login":"tanangular"}
{"number":8187,"title":"A11y: a tabindex of \"0\" on a overflow: scroll* element should not warn","body":"### Describe the bug\n\nAdding `tabindex=\"0\"` to a div with `overflow-y: scroll;` generates the warning message:\r\n\r\n> A11y: noninteractive element cannot have positive tabIndex value\r\n\r\nI don't believe this warning is appropriate. For example, https://www.a11yproject.com/posts/how-to-use-the-tabindex-attribute/ says:\r\n\r\n> tabindex=\"0\" should be applied to any non-interactive element that has had [CSS’ overflow property](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow) applied to it. This will allow people using a keyboard to navigate to, and scroll around the overflowed content.\r\n\r\nThe \"should\" suggests that this is correct practice. \n\n### Reproduction\n\nAn extract of the code is as follows. Note that the log can be long, so we want to allow focus in the scrollable element. \r\n\r\n```\r\n<div class=\"aa-body\" bind:this=\"{component}\" tabindex=\"0\">\r\n  <div\r\n    class=\"aa-body-container\"\r\n    role=\"log\"\r\n    aria-live=\"polite\"\r\n    aria-relevant=\"additions\"\r\n    aria-label=\"Label\"\r\n  >\r\n    {#each messages as message, i (message.id)}\r\n      <Message message=\"{message}\" />\r\n    {/each}\r\n  </div>\r\n</div>\r\n```\n\n### Logs\n\n```shell\n4:42:04 p.m. [vite-plugin-svelte] /src/components/chat/ChatBody.svelte:18:0 A11y: noninteractive element cannot have positive tabIndex value\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6.2\r\n    CPU: (8) arm64 Apple M1 Pro\r\n    Memory: 110.73 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.16.0 - ~/.nvm/versions/node/v16.16.0/bin/node\r\n    Yarn: 1.22.19 - /opt/homebrew/bin/yarn\r\n    npm: 8.11.0 - ~/.nvm/versions/node/v16.16.0/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.124\r\n    Firefox: 91.13.0\r\n    Safari: 16.2\r\n    Safari Technology Preview: 16.4\r\n  npmPackages:\r\n    svelte: ^3.53.1 => 3.54.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-11T22:52:16Z","created_at":"2023-01-11T22:52:16Z","creator_user_login":"morungos"}
{"number":8194,"title":"Restart css animations after hydration in dev mode","body":"### Describe the bug\r\n\r\nThere was a closer issue, but I can't find it.\r\n\r\n### Reproduction\r\n\r\nThe issue can be reproduced only in a specified elements order. \r\nIf change the elements order, the issue will solved.\r\n\r\n**issue order**\r\n```html\r\n<svelte:head/>   \r\n<Comp />\r\n<div />  ← css animation\r\n```\r\n\r\n**no issue orders**\r\n```html\r\n<svelte:head/>   \r\n<div />\r\n<Comp />\r\n\r\n~or~\r\n\r\n<Comp />\r\n<div />\r\n<svelte:head/>\r\n```\r\n\r\nOr without `<Comp />` or `<svelte:head/>`\r\n\r\n[Stackblitz reproduction](https://stackblitz.com/edit/sveltejs-kit-template-default-1wfeuu?file=src/routes/+page.svelte)\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-03-30T00:38:48Z","created_at":"2023-01-11T04:03:39Z","creator_user_login":"rodshtein"}
{"number":8184,"title":"Binding causes extra reactive call in child","body":"### Describe the bug\n\nWhen a reactive statement is triggered in a child component, if another non-primitive dependency of that statement is bound to the parent component, the reactive statement will be run an extra time.\r\n\r\nRan into this when trying to use the Broadcast Channel API to sync bound Svelte variables across tabs. The extra call would cause infinite loops in sending messages between tabs.\r\n\r\nSimilar to #5720 but without the slot.\r\n\r\nOne workaround is to add `<svelte:options immutable/>` to the child component.\n\n### Reproduction\n\nhttps://svelte.dev/repl/2b38363381f6400b9b9a8a870fbb7b24?version=3.55.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 6.1 Arch Linux\r\n    CPU: (16) x64 AMD Ryzen 7 5700G with Radeon Graphics\r\n    Memory: 27.82 GB / 30.74 GB\r\n    Container: Yes\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.19.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.19.2 - /usr/bin/npm\r\n  Browsers:\r\n    Chromium: 108.0.5359.124\r\n    Firefox: 108.0.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-11T09:26:50Z","created_at":"2023-01-10T20:50:20Z","creator_user_login":"zqianem"}
{"number":8174,"title":"Warning in VScode for `svelte(unused-export-let)` when the prop is passed via `<svelte:component>`","body":"### Describe the bug\r\n\r\nI have a filtered array of components to display, so I use\r\n`<svelte:component {id} this={tab} />` in the parent.\r\n\r\nIn the child components I have `export let id = \"\";`\r\nHowever, vscode is telling me:\r\n\r\n```\r\nComponent has unused export property 'id'. If it is for external reference only, please consider using `export const id`svelte(unused-export-let)\r\n```\r\n\r\nI am unsure where the warning is coming from, but the code does compile and the value can be read correctly on the front-end.\r\nThe only solution I've found to suppress the warning in my vscode editor is to add `<!-- svelte-ignore unused-export-let -->` to the top of every affected child component.\r\n\r\nThank you.\r\n\r\n### Reproduction\r\n\r\nParent\r\n```svelte\r\n<script>\r\n     import tab from './tab.svelte';\r\n</script>\r\n\r\n<svelte:component id='myid' this={tab} />\r\n```\r\nChild\r\n```svelte\r\n<script>\r\n     export let id = '';\r\n</script>\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n    CPU: (16) x64 AMD Ryzen 7 2700X Eight-Core Processor\r\n    Memory: 17.17 GB / 31.95 GB\r\n  Binaries:\r\n    Node: 19.3.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.21.1 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.2.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 108.0.5359.125\r\n    Edge: Spartan (44.19041.1266.0), Chromium (108.0.1462.76)\r\n    Internet Explorer: 11.0.19041.1566\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-04-07T12:23:59Z","created_at":"2023-01-07T16:27:56Z","creator_user_login":"laztheripper"}
{"number":8173,"title":"toObservable or fromSvelteStore function to bridge ","body":"### Describe the problem\r\n\r\nI'm always frustrated when I have to rewrite svelte store to RXJS's BehaviorSubject (or use another library) to get access to RXJS operators on my data streams. Creating these streams with svelte-store suffices and is very easy, and the creator syntax for the equivalent in RXJs is a bit tedious \r\n\r\nSo\r\n\r\n```\r\nimport {writable} from 'svelte/store'\r\n\r\nconst mystore=writabe<number>(0);\r\n\r\n```\r\n\r\nShould first become below, in order to add RXJS operators to create powerful transformations on the data stream\r\n\r\n```\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\nconst mystore= new BehaviorSubject<number>(0);\r\n\r\n```\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nI would like to see a function added to the svelte-store library, or maybe a separate library within the svelte-organisation that allows me to easily transform all sorts of svelte stores I have, into RXJS observables.\r\n\r\nI am suggesting a function like `fromSvelteStore` in below example:\r\n\r\n```\r\n<script lang=\"ts\">\r\n\timport { writable, type Writable, type Readable, type Unsubscriber } from 'svelte/store';\r\n\r\n\timport { Observable, from } from 'rxjs';\r\n\r\n\tfunction fromSvelteStore<T>(svelteStore: Writable<T> | Readable<T>): Observable<T> {\r\n\t\tlet unsub: Unsubscriber;\r\n\t\tconst obs = new Observable<T>((subscriber) => {\r\n\t\t\tunsub = svelteStore.subscribe((val) => {\r\n\t\t\t\t// console.log('Next on value');\r\n\t\t\t\tsubscriber.next(val);\r\n\t\t\t});\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\t// console.log('Unsubscribing the svelte store');\r\n\t\t\t\tunsub();\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn obs;\r\n\t}\r\n\r\n\timport { map } from 'rxjs/operators';\r\n\tconst w = writable<number>(0);\r\n\tconst stuff = fromSvelteStore<number>(w).pipe(map((x) => x + 10));\r\n\tsetTimeout(() => {\r\n\t\tw.set(2);\r\n\t}, 3000);\r\n</script>\r\n\r\n<h1>The count is {$stuff} or {$w}</h1>\r\n<a href=\"/other\">Go to other page so we can see unsubscribe run</a>\r\n```\r\n\r\nThis function takes a svelte store and converts it into an RXJS observable, so the developer can apply RXJS operators to it. As Svelte subscription mechanism already works very nicely with Observables, it could be a real addition to the ecosystem.\r\n\r\nThe alternative name could be something like `toRXJS` or `toObservable`, as the `fromSvelteStore` would be better fit for placement in RXJS.  See comments by Ben Lesh in https://github.com/sveltejs/svelte/issues/2549 that they rather see such things placed with Svelte-org\r\n\r\n### Alternatives considered\r\n\r\nAlternatives I see are -\r\n\r\nhttps://github.com/timdeschryver/timdeschryver.dev/issues/121#issuecomment-1374486867\r\nhttps://github.com/sveltejs/svelte/issues/2549\r\nSvelteSubject - but, this is almost the same as creating BehaviorSubject myself.. so no DX win\r\n\r\nhttps://svelte-fuse-rx.netlify.app/\r\nWhich may look nice, as it replaces svelte/store with another library, but creates a strong dependency.\r\n\r\nCreating all the require data transformation in a derived store\r\nBut that imho creates lots of (imperative) code, which can be easily replaced with rxjs operators\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-01-07T14:01:36Z","created_at":"2023-01-07T13:58:28Z","creator_user_login":"Tommertom"}
{"number":8166,"title":"Variable event names","body":"### Describe the problem\n\nCorrect me if I'm wrong but I don't think there is a way around hard coding event names. It would be nice to be able to use variables as event names. This way, if I ever want to change the event name, it would be a relatively trivial thing to do. \r\n\r\n\n\n### Describe the proposed solution\n\nPerhaps you could wrap event names in curly braces. For example:\r\n\r\n`Button.svelte`\r\n```html\r\n<script context=\"module\">\r\n    export const MY_CUSTOM_EVENT = 'MyCustomEvent'\r\n</script>\r\n\r\n<script>\r\n    import {createEventDispatcher } from 'svelte';\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    const clickHandler = (event) => dispatch(MY_CUSTOM_EVENT, event);\r\n</script>\r\n\r\n<button on:click|preventDefault={clickHandler}> Click Me! </button>\r\n```\r\n\r\n`App.svelte`\r\n\r\n```html\r\n<script>\r\n    import Button, {MY_CUSTOM_EVENT} from './Button.svelte';\r\n\r\n    const onMyCustomEvent = (event) => {\r\n        console.log(event.detail);\r\n    } \r\n</script>\r\n\r\n<Button  on:{MY_CUSTOM_EVENT}={onMyCustomEvent} />\r\n```\n\n### Alternatives considered\n\nI'm not sure there is a clear alternative. I think you are forced to hard code event names into components.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-01-20T16:47:57Z","created_at":"2023-01-04T20:42:22Z","creator_user_login":"jwerre"}
{"number":8164,"title":"src_url_equal is slow when dealing with large base64 encoded images","body":"### Describe the bug\n\n[This discussion on Discord](https://discord.com/channels/457912077277855764/1059955493994508308/1059955493994508308) made us realize that trying to remove an element from an each block containing images with large base64 encoded images takes a long time.\r\n\r\nThis is because the `src_url_equal` check in the generated code is slow for these types of images.\r\n\r\n```js\r\nif (dirty & /*images*/ 1 && !src_url_equal(img.src, img_src_value = /*image*/ ctx[3].src)) {\r\n\tattr(img, \"src\", img_src_value);\r\n}\r\n```\r\n\r\nhttps://github.com/sveltejs/svelte/blob/4b84c4df3a8c07f0a992e255350eb97db36c5cf6/src/runtime/internal/utils.ts#L45-L53\n\n### Reproduction\n\n[REPL](https://svelte.dev/repl/67e9237b78464af39e616299f38ba984?version=3.55.0)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nREPL, v3.55.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-04T08:56:01Z","created_at":"2023-01-04T00:07:55Z","creator_user_login":"EmilTholin"}
{"number":8151,"title":"Order of Component-Updates when more than one store has a new value","body":"### Describe the bug\r\n\r\nI think I found a case in which Svelte updates components in the wrong order.\r\n\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/207e33065bdb41dcb53bfe8ebcfb8ced?version=3.55.0\r\nClick the Button \"remove\".\r\n\r\nThere is an Error on the console: \"Cannot read properties of undefined (reading 'points')\"\r\n\r\nIn handleClick() (App.svelte):\r\nBecause of selected.set(...) all instances of ConnectionPoint will update in the next microtask.\r\nBecause of connections.set(...), some of these instances of ConnectionPoint should not exist any more, but Svelte tries to update them, before it updates the instances of Connection. This leads to the Error.\r\n\r\nThe problem would be solved, if Svelte would update the components in this order:\r\n- first: App\r\n- then: all instances of Connection (this should remove all instances of ConnectionPoints, that should not exist any more)\r\n- then: all instances of ConnectionPoints\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nrepl, Svelte 3.55.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-26T07:55:01Z","created_at":"2022-12-28T21:04:40Z","creator_user_login":"michAtEl"}
{"number":8150,"title":"Non-transitioned elements in a container block don't hide until out-transitions are done","body":"### Describe the bug\n\nYou have a container block (such as an `{#if}`) with multiple elements inside it. Some of them have transitions and some don't.\r\n\r\nWhen the block is hidden, the elements that don't have transitions won't hide until all the other elements' transitions are done. It doesn't look right to me.\r\n\r\nBy contrast, when the block is shown, those elements are displayed right away--as I think they should be--before the other elements' transitions begin.\n\n### Reproduction\n\nhttps://svelte.dev/repl/a0db2e66316c46ec84132f2a2c3d5484?version=3.55.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nI only tested this in the REPL. No system info available.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-28T15:33:45Z","created_at":"2022-12-28T15:33:45Z","creator_user_login":"BMorearty"}
{"number":8144,"title":"Width and height values non-functional on \"this\" bindings tutorial","body":"### Describe the bug\r\n\r\nOn the [tutorial section](https://svelte.dev/tutorial/bind-this) that explains how to use `bind:this`, there is a bug in that the reactive width and height values set for the canvas are overridden by the canvas CSS section.\r\n\r\nI found this confusing as I felt something was supposed to be demonstrated by binding these values reactively.\r\n\r\n### Reproduction\r\n\r\nSee the style section of the `App.svelte` file is as such:\r\n```\r\n\r\n<style>\r\n\tcanvas {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground-color: #666;\r\n\t\t-webkit-mask: url(/svelte-logo-mask.svg) 50% 50% no-repeat;\r\n\t\tmask: url(/svelte-logo-mask.svg) 50% 50% no-repeat;\r\n\t}\r\n</style>\r\n```\r\n\r\nRemove the `width` and `height` parameters as such:\r\n\r\n```\r\n<style>\r\n\tcanvas {\r\n\t\tbackground-color: #666;\r\n\t\t-webkit-mask: url(/svelte-logo-mask.svg) 50% 50% no-repeat;\r\n\t\tmask: url(/svelte-logo-mask.svg) 50% 50% no-repeat;\r\n\t}\r\n</style>\r\n```\r\n\r\nSee that the canvas element now appropriately sizes to a `width` and `height` of `32` as described here (which is clearly too small):\r\n\r\n```\r\n<canvas\r\n\tbind:this={canvas}\r\n\twidth={32}\r\n\theight={32}\r\n></canvas>\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-28T18:39:53Z","created_at":"2022-12-25T05:45:08Z","creator_user_login":"BraydonS"}
{"number":8248,"title":"SVG path does not display correctly when lazy loaded","body":"### Describe the bug\r\n\r\nIf I load a component with an SVG file and path in it, it loads correctly. However, if I only load it on the browser, hence, lazy loading the component until rendering, it does not load correctly. The components look the same in the DOM, but the browser version does not load correctly.\r\n\r\n**+page.svelte**\r\n```js\r\n{#if browser}\r\n\t<Test />\r\n{/if}\r\n<Test />\r\n```\r\n\r\nThis will only load correctly once, instead of two times.  The `TEST` component contains this basic SVG code:\r\n\r\n**components/test.svelte**\r\n```js\r\n<button>\r\n\t<svg viewBox=\"0 0 16 16\" xmlns=\"https://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\">\r\n\t\t<path\r\n\t\t\td=\"M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13H8.21zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z\"\r\n\t\t/>\r\n\t</svg>\r\n</button>\r\n<br />\r\n```\r\n\r\n### Reproduction\r\n\r\n[Github](https://github.com/jdgamble555/svelte-svg)\r\n\r\n[StackBlitz](https://stackblitz.com/github/jdgamble555/svelte-svg?file=src%2Fcomponents%2Ftest.svelte)\r\n\r\nYou will see it only displays the `B` button once. However, when you remove `xmlns=\"https://www.w3.org/2000/svg\"` from the `svg` component, it renders correctly two times.\r\n\r\nI assume there is some odd way Svelte renders \"createElement\" versus \"createElementNS\" on the client side.\r\n\r\n\r\nNotice the preview shows one `B`.  Delete the `xmlns` key / value from the svg tag in `components/test.svelte` and you will see it displays two `B`s.\r\n\r\n\r\n\r\n### System Info\r\n\r\n```Shell\r\nSvelteKit 1.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance\r\n\r\n### Additional Information\r\n\r\nWhile there is an easy work-around for this, if someone lazy imports a package that uses the `xmlns` key, it could cause issues.","state":"open","updated_at":"2023-02-03T19:12:52Z","created_at":"2022-12-24T17:09:54Z","creator_user_login":"jdgamble555"}
{"number":8141,"title":"Value bound to select element isn't updated when options are changed","body":"### Describe the bug\n\nIf I have a variable bound to the value of a select element and then I remove the option that was selected, the variable isn't updated with the new value of the option that replaced the one that was removed.\r\n\r\nIn the reproduction, `selected` should be updated to the first value of the new options but it instead remains as -1 until the option is changed.\n\n### Reproduction\n\nhttps://svelte.dev/repl/77ac88b1e9d64461a69ef6312582b567?version=3.55.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n  OS: Windows 10 10.0.19045\r\n  CPU: (12) x64 AMD Ryzen 5 3600 6-Core Processor\r\n  Memory: 7.62 GB / 15.91 GB\r\nBinaries:\r\n  Node: 18.12.0 - C:\\Program Files\\nodejs\\node.EXE\r\n  Yarn: 1.22.19 - C:\\Program Files\\nodejs\\yarn.CMD\r\n  npm: 9.2.0 - ~\\AppData\\Roaming\\npm\\npm.CMD\r\nBrowsers:\r\n  Chrome: 108.0.5359.125\r\n  Edge: Spartan (44.19041.1266.0), Chromium (108.0.1462.54)\r\n  Internet Explorer: 11.0.19041.1566\r\nnpmPackages:\r\n  svelte: ^3.55.0 => 3.55.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-23T04:17:20Z","created_at":"2022-12-23T04:17:20Z","creator_user_login":"Rayn322"}
{"number":8140,"title":"Passing `String.raw`-style ","body":"### Describe the problem\r\n\r\nI'm trying to either **(A)** add classnames that are node-aware so they can also add inline styles using the `style` attr, or **(B)** develop a svelte-action that can add those classes but will need to make use of a custom `String.raw`-style function.\r\n\r\nThe issue with **(A)** is that—to my knowledge—it's not possible. The closest you can get is…\r\n```svelte\r\n<Component class={raw`prefix-${variable}`} />\r\n```\r\n…which will allow you to use the raw action on the string literal it is used on, but will not permit any addtl reach into the component, so the inline styles are a no-go.\r\n\r\nThe issue with **(B)** is that actions do not natively support `String.raw`-style functions, so they would require two imports for a single use, like this, which I want to avoid:\r\n```svelte\r\n<Component use:xClass={xClassRaw`prefix-${variable}`} />\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\n☝🏼 Option B would **_work_** (string airquotes here) AFAIK, but as I mentioned, it requires two functions simply to preserve the interpolated variable values from the literal.\r\n\r\nIt'd be convenient if Svelte—being the compiler that it is—natively supported passing raw strings to custom actions as their broken up parts instead of as string primitives.\r\n\r\nThe ideal API for this, in my opinion, would be to implement ✨ a way for actions themselves to communicate to Svelte that they're expecting the raw parts of a literal rather than a primitive string and have Svelte handle the rest: ✨ ← this is KEY 🔑💡\r\n```xml\r\n<Component use:xClass=`prefix-${variable}` />\r\n```\n\nmaybe like this ☝🏼\r\n\r\n### Alternatives considered\r\n\r\nThe only alternative I am aware of that would work here is the unideal option **(B)** mentioned above, requiring a action variable as well as a string helper function to work together and communicate simply to extract the raw parts of the literal string and use them within the action.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-04-27T07:25:50Z","created_at":"2022-12-22T23:55:28Z","creator_user_login":"brandonmcconnell"}
{"number":8139,"title":"Slot property change triggers object invalidation in child component","body":"### Describe the bug\r\n\r\n\r\n1. If you use some slot-property: \r\n```<slot {prop} />```\r\n2. ...and passes inside that slot a component (e.g. `Content.svelte`), which receives some `object` as a prop, and that object was extracted from `store` in that component:\r\n```html\r\n<script>\r\n  ...\r\n  $: object = $store\r\n</script>\r\n\r\n<Wrapper> <!-- slot props are in Wrapper, but we even don't need to use them outside -->\r\n  <Content {object} />\r\n</Wrapper>\r\n```\r\n3. ...and that `store` was somewhere updated based on other store, even just once (via subscription or somehow else):\r\n```js\r\n// simple update\r\nstore.update(state => {\r\n  $someOtherStore // use other store anyhow in our first store update\r\n  return state\r\n})\r\n\r\n// or subscription\r\nconst unsub = someOtherStore.subscribe(() => {\r\n  store1.update(state => state)\r\n})\r\n// immediately unsubscribe\r\n// (but if `someOtherStore` just doesn`t update — you don`t need unsubscription)\r\nunsub()\r\n```\r\n4. ...then your `object` invalidates _every_ time slot prop updates, and triggers all reactivity statements based on it in child component:\r\n```html\r\n// Content.svelte\r\n\r\n<script>\r\n  export let object\r\n\r\n  // store was not changed, but reactive statement fires every time, when slot property on parent slot updates\r\n  $: console.log({ object })\r\n</script>\r\n```\r\n\r\nAs workaround you can pass object via context.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/106356ce31de4abd85b52f3a577fada9?version=3.55.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.0.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 692.20 MB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.10.0 - /usr/local/bin/node\r\n    Yarn: 1.22.17 - /usr/local/bin/yarn\r\n    npm: 8.19.2 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.124\r\n    Firefox: 104.0\r\n    Safari: 16.1\r\n  npmPackages:\r\n    svelte: 3.54.0 => 3.54.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoying","state":"open","updated_at":"2022-12-23T08:01:15Z","created_at":"2022-12-22T21:35:43Z","creator_user_login":"stanf0rd"}
{"number":8130,"title":"Window / DOM Ready pain","body":"### Describe the problem\n\nThe context:\r\nSometimes I need to make use of the `onMount` function or the `browser` variable to check or stop some code until `window` is available. This can be found with `DOM` events and reading elements, among others.\r\n\r\nThe problem:\r\nDepending on the particularity of the case, different solutions can be found, but I always have the feeling that none of them are quite correct, based on the way of thinking or philosophy of `Svelte.js`.\r\n\r\nI think the \"use the platform\" can also be applied to `Svelte.js` itself, and the use of `EventListeners` or `DOM`, should be (as far as possible) framework, library and compiler agnostic.\n\n### Describe the proposed solution\n\n`Svelte.js` already has control over when an action is available on the `DOM`, and I think this part of the job could be handled by the compiler itself and not by the developer (with obvious exception cases).\n\n### Alternatives considered\n\nI don't know what procedure the compiler follows internally to give other alternatives, but if a plausible implementation of the self-management of the `DOM` state is not possible, another option could be to unify methods and create a clear and optimized explanation for possible cases.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-12-21T08:52:03Z","created_at":"2022-12-19T10:15:41Z","creator_user_login":"verdulife"}
{"number":8127,"title":"Error handling - was created without expected prop","body":"### Describe the problem\r\n\r\nI have two problems with catch errors in my code.\r\n\r\n1) I would like catch all warnings when developer write property with incorect name. \r\n\r\n`<component1 masage={myMessage}/>` - error in name masage, warnings its good, but i would like Fatal error. Will be better have compile options for that. (  #475 )\r\n\r\n2) The same problem with SSR, developer make mistake and send another param name. SSR didn't have any warnings, only filtering.\r\n\r\nThank you.\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\n1) Instead console.warn i would like throw Error.\r\n2) For SSR i would like Error also if props not matched.\r\n\r\n### Alternatives considered\r\n\r\nMake option \"strictProps\": true for both cases.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-12-18T21:52:10Z","created_at":"2022-12-18T21:43:03Z","creator_user_login":"StagnantIce"}
{"number":8125,"title":"Tutorial - Expand Part 1 / Stores / Derived stores ","body":"### Describe the problem\n\nDerived stores explanation is short and cuts off with this suggestion box:\r\n\r\nIt's possible to derive a store from multiple inputs, and to explicitly set a value instead of returning it (which is useful for deriving values asynchronously). Consult the [API reference](https://svelte.dev/docs#run-time-svelte-store-derived) for more information.\n\n### Describe the proposed solution\n\nInclude in the tutorial the suggestion box from above and expand the tutorial\n\n### Alternatives considered\n\nN/A\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-12-19T00:49:16Z","created_at":"2022-12-18T17:49:52Z","creator_user_login":"cobriensr"}
{"number":8124,"title":"Tutorial - Part 1 / Lifecycle / beforeUpdate and afterUpdate is broken","body":"### Describe the bug\n\nhttps://learn.svelte.dev/tutorial/update\r\n\r\nError for the chatbox is located here:\r\n\r\nhttps://imgur.com/a/vssCVl4\n\n### Reproduction\n\nJust refresh the page and you will see the error, it just never works\n\n### Logs\n\n```shell\n[dev] ERR!: runScript Failed to run `dev`. Script is missing.\r\n\r\nstderr @ index-390faaf7.js:1\r\nindex-390faaf7.js:1 [dev] \r\n\r\nindex-390faaf7.js:1 [dev] error Command failed with exit code 1\r\n\r\n9The resource <URL> was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally.\n```\n\n\n### System Info\n\n```shell\nNot applicable as this is within Chrome\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-18T17:38:06Z","created_at":"2022-12-18T17:38:06Z","creator_user_login":"cobriensr"}
{"number":8123,"title":"CSS scoping inconsistency when the same element is present in both classed and non-classed parents","body":"### Describe the bug\r\n\r\nTake this HTML for example:\r\n```html\r\n<main>\r\n  <section class=\"a\">\r\n    <ul>\r\n      <li>a</li>\r\n    </ul>\r\n  </section>\r\n  <section>\r\n    <ul>\r\n      <li>a</li>\r\n    </ul>\r\n  </section>\r\n</main>\r\n```\r\n\r\nIf I make a CSS ruleset that targets `.a ul li`, Svelte doesn't hash the first `ul`, which is understandable, since the class name and the hash of the parent `section` alone is enough to differentiate the `ul`, so I'd expect the transformed selector to be `.a.svelte-xxxxxx ul li.svelte-xxxxxx`. However, the actual transformed selector is `.a.svelte-xxxxxx ul.svelte-xxxxxx li.svelte-xxxxxx`, with a hashed `ul`, so it doesn't apply to the transformed HTML.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/7a6866307f124c48ab9194c67082bf40?version=3.55.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte v3.55.0 from svelte.dev REPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-10T04:49:39Z","created_at":"2022-12-18T12:37:56Z","creator_user_login":"longnguyen2004"}
{"number":8112,"title":"Duplicate `head` elements occur when html comments are stripped","body":"### Describe the bug\r\n\r\nThe [solution](https://github.com/sveltejs/svelte/pull/7745) to the duplicate content `svelte:head` element [bug](https://github.com/sveltejs/svelte/issues/6463) (and also [this one](https://github.com/sveltejs/svelte/issues/6463)) requires HTML comments to be present in order to function correctly. Many [minification tools strip HTML comments](https://github.com/sveltejs/kit/issues/7493#issuecomment-1303218382), and as does CloudFlare by default in many environments.\r\n\r\nDuplicating the `head` element is a fairly insidious bug because it isn't immediately obvious that anything is wrong, but for our project (in SvelteKit) it decreased performance by loading analytics scripts multiple times. We also suspect that it may have broken some web indexing, but couldn't be sure.\r\n\r\nIf there is a better way to solve this than relying on comments, that would be great. I've marked the `Severity` as `annoyance`, but only because we have found a highly unsatisfactory workaround that I would rather not have in place long term.\r\n\r\n### Reproduction\r\n\r\nOne straightforward way to reproduce this would be to use the [reproduction repo](https://github.com/thousandsofraccoons/double-meta) provided in [this issue](https://github.com/sveltejs/kit/issues/7493), which minifies the html response and strips comments: when comments are stripped, the duplicate header bug is present.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 90.36 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.15.1 - ~/.nvm/versions/node/v16.15.1/bin/node\r\n    npm: 8.11.0 - ~/.nvm/versions/node/v16.15.1/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.98\r\n    Firefox: 105.0.2\r\n    Safari: 16.1\r\n  npmPackages:\r\n    svelte: ^3.55.0 => 3.55.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-31T01:51:54Z","created_at":"2022-12-14T22:26:09Z","creator_user_login":"ryans-usafacts"}
{"number":8111,"title":"`<title>` in `<slot>` is appended, it should be replaced","body":"### Describe the bug\n\nWhen a slot is passed to a component that modifies the head via `<svelte:head>`, special cases like `<title>` is not being respected.\n\n### Reproduction\n\nWorks:\r\n\r\n```svelte\r\n<svelte:head>\r\n  <title>Changed title</title>\r\n</svelte:head>\r\n```\r\n\r\nDoes not work:\r\n\r\n```svelte\r\n<svelte:head>\r\n  <slot />\r\n</svelte:head>\r\n```\r\n\r\nwhere `<slot />` contains `<title>Changed title</title>`\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 13.0.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 30.09 GB / 64.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.19.0 - ~/.nvm/versions/node/v16.19.0/bin/node\r\n    Yarn: 1.22.19 - /usr/local/bin/yarn\r\n    npm: 8.19.3 - ~/.nvm/versions/node/v16.19.0/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.98\r\n    Firefox: 107.0\r\n    Safari: 16.1\r\n```\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-02-11T09:37:35Z","created_at":"2022-12-14T19:54:09Z","creator_user_login":"shirotech"}
{"number":8109,"title":"eslint reporting no-unused-vars when variable is declared as @const and used in the key of an #each","body":"### Describe the bug\n\nI'm not sure if this belongs here or on the eslint issues, but I suspect here is more accurate.\r\n\r\nI have a generic `Grid` component that has the ability to have sub-rows within it. I have a piece of logic that looks like:\r\n```\r\n            {#each _rows as row, i (rowKey(row))}\r\n              {@const _subRows = subRows(row)}\r\n              {@const hasSubRows = row !== _subRows}\r\n              {@const rowspan = hasSubRows ? getCount(_subRows) : null}\r\n              {@const __rows = hasSubRows ? _subRows : [row]}\r\n              {@const keyFunc = hasSubRows ? subRowKey : rowKey}\r\n              {#each __rows as subRow, j (keyFunc(subRow))}\r\n                <tr\r\n                  ...attributes>\r\n                    ...inner HTML content\r\n                </tr>\r\n              {/each}\r\n```\r\nand eslint is reporting:\r\n```\r\n  69:23  error  'keyFunc' is assigned a value but never used  no-unused-vars\r\n```\r\nThis will unfortunately prevent our build pipeline from accepting this build. I've tried adding `<!-- eslint-disable-next-line no-unused-vars -->` before, but that doesn't seem to fix it.\r\n\r\nBy the way, the code does compile and run perfectly.\r\n\r\nThanks!\n\n### Reproduction\n\nHere's a fairly minimal reproduction: [REPL](https://svelte.dev/repl/688ca5b8a4cc420a9c9873b8f638bfc9?version=3.55.0) -- if the REPL supports eslint, I couldn't figure out how to enable it.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (16) x64 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz\r\n    Memory: 7.67 GB / 31.73 GB\r\n  Binaries:\r\n    Node: 18.10.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 7.19.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (108.0.1462.46)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.53.0 => 3.52.0\r\n    webpack: ^5.75.0 => 5.74.0\r\n```\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-14T16:59:58Z","created_at":"2022-12-14T16:59:58Z","creator_user_login":"OlsonDev"}
{"number":8108,"title":"<svelte:window on:error /> callback is typed incorrectly, event is `Event` when it should be `ErrorEvent`.","body":"### Describe the bug\n\nThe typescript type for `on:error` should be `event: ErrorEvent` not `event: Event`.\n\n### Reproduction\n\n```ts\r\n\tconst handleUncaughtError = (event: ErrorEvent) => {\r\n\t\t//\r\n\t};\r\n```\r\n\r\n```html\r\n<svelte:window on:error={handleUncaughtError} />\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6.1\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 25.71 GB / 64.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.12.1 - ~/Library/Caches/fnm_multishells/7179_1670872455760/bin/node\r\n    npm: 8.19.2 - ~/Library/Caches/fnm_multishells/7179_1670872455760/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.98\r\n    Firefox: 106.0.3\r\n    Safari: 16.1\r\n  npmPackages:\r\n    svelte: ^3.0.0 => 3.53.1 \r\n    webpack: ^5.35.0 => 5.75.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-22T12:07:46Z","created_at":"2022-12-13T18:35:33Z","creator_user_login":"dtzxporter"}
{"number":8107,"title":"`invalid-binding` error in odd places","body":"### Describe the bug\n\nI tried to fix a typing issue [here](https://github.com/sveltejs/svelte/issues/4701#issuecomment-1346460300) by extracting the index access to a `@const` but this raised an `invalid-binding` in a place where I would not expect it and also did not raise it where I would have expected it.\n\n### Reproduction\n\n```svelte\r\n<script lang=\"ts\">\r\n    import Attribute from './attribute.svelte';\r\n\r\n    type Field = string | number | boolean;\r\n    type FieldArray = Array<Field>;\r\n\r\n    function isFieldArray(value: Field | FieldArray): value is FieldArray {\r\n        return Array.isArray(value);\r\n    }\r\n\r\n    type ExampleObject = {\r\n        document: Record<string, Field | FieldArray>;\r\n    };\r\n\r\n    const obj: ExampleObject = {\r\n        document: {\r\n            name: 'John',\r\n            age: 30,\r\n            isMarried: true,\r\n            hobbies: ['coding', 'reading', 'gaming']\r\n        }\r\n    };\r\n</script>\r\n\r\n{#each Object.keys(obj.document) as k}\r\n    {@const value = obj.document[k]}\r\n    {#if isFieldArray(value)}\r\n        {#each value as _, index}\r\n            <!-- Cannot bind to a variable declared with {@const ...} -->\r\n            <input bind:value={value[index]} />\r\n        {/each}\r\n    {:else}\r\n        <!-- No error here -->\r\n        <Attribute bind:value={value} />\r\n    {/if}\r\n{/each}\r\n```\r\n```svelte\r\n<!-- attribute.svelte -->\r\n<script lang=\"ts\">\r\n\texport let value: string | number | boolean;\r\n</script>\r\n{value}\r\n```\r\n\r\nThe first binding accesses `value[index]` and thus does not try to re-assign `value` itself, yet there is an error.  \r\nThe second binding should try to re-assign `value`, yet there is no error.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz\r\n    Memory: 18.14 GB / 31.92 GB\r\n  Binaries:\r\n    Node: 16.16.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.17 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.13 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 108.0.5359.99\r\n    Edge: Spartan (44.19041.1266.0), Chromium (108.0.1462.46)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.54.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-12T22:13:34Z","created_at":"2022-12-12T22:13:34Z","creator_user_login":"brunnerh"}
{"number":8102,"title":"Support attaching two different svelte apps in one html file.","body":"### Describe the problem\n\nCompiled two different svelte apps cannot be attached into a single html file because the compiled js files declare the variables with the same names making conflict.\r\n\r\n\n\n### Describe the proposed solution\n\nTo create an option under compilerOptions to give a prefix for each global variable inside minified js file.\n\n### Alternatives considered\n\nMakes the compiler not generate any global variable.\r\n\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-04-05T14:26:36Z","created_at":"2022-12-11T09:27:18Z","creator_user_login":"yulduck"}
{"number":8101,"title":"Proposal to include `prettier-plugin-svelte`","body":"### Proposal\r\nInclude a minimal VSCode settings snippet at project root or in the README:\r\n\r\nMy *.vscode/settings.json* looks like this:\r\n```\r\n{\r\n  \"editor.formatOnSave\": true,\r\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\r\n  \"[svelte]\": {\r\n    \"editor.defaultFormatter\": \"svelte.svelte-vscode\"\r\n  },\r\n  \"editor.wordWrap\": \"wordWrapColumn\",\r\n  \"editor.rulers\": [100],\r\n  \"editor.wordWrapColumn\": 100\r\n}\r\n```\r\n\r\nSince we are using prettier, most developers will have their default formatter set to use `esbenp.prettier-vscode`. We also need to specify to use `svelte.svelte-vscode` for .svelete files. It took me a while to figure this out. I hope having a small snippet with at least these 3 lines (line 4,5,6) would save a ton of minutes for many new developers who are starting with Svelete.\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-12-16T12:53:59Z","created_at":"2022-12-10T13:40:54Z","creator_user_login":"mislam"}
{"number":8099,"title":"Add missing fetchpriority property to img on html element","body":"### Describe the problem\n\nHere the bug: \r\n\r\n```html\r\nObject literal may only specify known properties, and 'fetchpriority' does not exist in type 'HTMLProps<\"img\", HTMLAttributes<any>>'.\r\n```\r\n\r\n\n\n### Describe the proposed solution\n\nJust add the missing peace? 😆\n\n### Alternatives considered\n\nI actually don't have enough knowledge to think of an alternative solution 🥹. Hope anyone can help.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-25T15:24:02Z","created_at":"2022-12-09T10:09:28Z","creator_user_login":"harrytran998"}
{"number":8095,"title":"`input type=\"number\"` bindings can be `null` and `undefined`","body":"### Describe the bug\r\n\r\nThe documentation says:\r\n> If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\r\n\r\nWhen the value is initialized, it is indeed `undefined`. However, when later emptying the input, it becomes `null`. In previous versions it did become `undefined` - https://github.com/sveltejs/svelte/issues/1701 seems to be what changed it in order to fix a warning.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/58ce9182263245d0b646d115d7e5e1e7?version=3.54.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 10.15.7\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz\r\n    Memory: 1.92 GB / 32.00 GB\r\n    Shell: 3.5.1 - /usr/local/bin/fish\r\n  Binaries:\r\n    npm: 8.19.2 - ~/Library/Application Support/Volta/tools/image/node/18.12.1/bin/npm\r\n  Browsers:\r\n    Brave Browser: 107.1.45.131\r\n    Chrome: 108.0.5359.94\r\n    Firefox: 107.0\r\n    Firefox Developer Edition: 108.0\r\n    Safari: 15.6.1\r\n  npmPackages:\r\n    svelte: ^3.54.0 => 3.54.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-02-05T00:10:18Z","created_at":"2022-12-08T06:16:53Z","creator_user_login":"probablykasper"}
{"number":8091,"title":"[docs] SvelteKit for a whole app vs embedding Svelte in an existing app","body":"### Describe the problem\r\n\r\nI've been coding for 35 years, all manner of stuff. Regarding web, I'm coming from .NET of 17 years. I've been keeping an eye on Svelte for more than a year.\r\n\r\nI normally build either MPAs with Knockout for small bits of interactivity. I've never really been \"into\" SPAs, though I've built the backends for them for years. Svelte looked interesting because it affords a mix of approaches.\r\n\r\nThe page transitions stuff Jake Archibald is working on will be big for mixed mode apps, I think.\r\n\r\nA couple of weeks ago, I began to learn a whole new stack based on TypeScript front and back. I went for Deno and that has a tiny \"framework\" called oak for server-side routing and some HTTP bits.\r\n\r\nI'm ready to learn Svelte. I began by heading to the official docs where I started reading everything and typing up notes (on a public GitHub repo). I _hate_ fumbling in the dark so I tend to pre-cache the docs in my brain before I start coding.\r\n\r\nWhat struck me was that there doesn't seem to be anything discussing how it works; it's all about syntax and coding, and interactively selling how cool it is.\r\n\r\nActually, what I first did was begin reading the docs on SvelteKit, not realising it's different to Svelte. I assumed people just said \"Svelte\" for short.\r\n\r\nMy \"feature\" request is for some documentation to explain and establish a vivid mental model of how Svelte works, in the mind of a complete noob.\r\n\r\nBelow are the honest dumb questions whizzing through my mind as I try to evaluate whether Svelte will be a bountiful investment of my time.\r\n\r\nThese are not to be answered here, but I hope for them to inspire the foundational documentation upon which I think any beginner can build their knowledge. In no particular order and just focusing on Svelte at svelte.dev:\r\n\r\n - Should I use Svelte, or SvelteKit?\r\n - What source files are used in compilation and what are the output files?\r\n - What is the compiler? Is it JS in an NPM package? How do I run it?\r\n - If it's using Node, should I stick to Node for my server or can I use Deno?\r\n - How does it find the source files to compile?\r\n - What doesn't it output or copy? What about static files like images? Paths to images?\r\n - Am I likely to need Gulp, or is that not needed anymore? Can Gulp run the compiler?\r\n - Does a browser visit an .html file to see the Sveltey part of my website?\r\n - Does Svelte make that .html file?\r\n - Or does my Deno app serve the layout HTML page and the Svelte part is \"injected\" into an element? \r\n - How will it work with Deno, or Node and the way that serves static files?\r\n - How would I structure my source for an app with mixed Deno-served content and Svelte ...HTML?\r\n \r\nYou see, without knowing this, my mind boggles. I can't even begin to think about .svelte files and the three sections, and yet that is what the documentation focuses on.\r\n\r\nBy January, I'll probably have The Curse of Knowledge. Today, I'm in that special naive time when I see the real slope of the learning curve. I hope you'll receive this in the highly useful spirit with which it is intended.\r\n\r\nI also posted to Discord. Again, this was new to me. I've never used Discord. I'm not even _that_ old, either :-D\r\n\r\nhttps://discord.com/channels/457912077277855764/1049811603433988226\r\n\r\nThanks\r\n\r\n### Describe the proposed solution\r\n\r\nI would like to see official written docs on how Svelte goes from source files a, b, c to output files x, y, z, and then how a browser requests and renders a page with Svelte markup, via whatever is serving that HTTP response.\r\n\r\n### Alternatives considered\r\n\r\nGoogling unofficial blog posts. Asking in Discord. I have not asked in StackOverflow as it feels like a question that will get me beaten up.\r\n\r\nDiscord seems like chat for people who know what they're doing and have no incentive to provide the long and tedious answers for a noob like me. Sorry, but that's the vibe I get from it.\r\n\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2022-12-09T14:45:36Z","created_at":"2022-12-06T23:42:47Z","creator_user_login":"lukepuplett"}
{"number":8089,"title":"`a11y-mouse-events-have-key-events` warning when using focusin/focusout","body":"### Describe the bug\r\n\r\nI get an IDE warning for `a11y-mouse-events-have-key-events` when using `mouseover` and `mouseout` events along with `focusin` and `focusout`. In my opinion they should be treated the same as `focus` and `blur` for the purpose of this warning.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/7caf1284da9c410eb6d20f8bb0293749?version=3.53.1\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n    Memory: 28.23 MB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.17.0 - ~/.nvm/versions/node/v16.17.0/bin/node\r\n    npm: 8.15.0 - ~/.nvm/versions/node/v16.17.0/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.121\r\n    Firefox: 107.0.1\r\n    Safari: 16.0\r\n  npmPackages:\r\n    svelte: 3.53.1 => 3.53.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-12-06T14:49:58Z","created_at":"2022-12-06T14:49:44Z","creator_user_login":"f-elix"}
{"number":8086,"title":"Unfinished transition does not update bound variable","body":"### Describe the bug\n\nWhen you use {#if} to transition out an element, but negate the if mid-transition, the transition does not finish and re-transitions to the shown state. If this happens, the variables that are bound to child components do not get updated when they were updated mid-transition.\n\n### Reproduction\n\nhttps://svelte.dev/repl/0949cb362a444e5ca5792b1323b23af0?version=3.53.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.15 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n    CPU: (16) x64 AMD Ryzen 7 3800X 8-Core Processor\r\n    Memory: 15.18 GB / 31.30 GB\r\n    Container: Yes\r\n    Shell: 5.8.1 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 16.15.1 - ~/.nvm/versions/node/v16.15.1/bin/node\r\n    Yarn: 3.2.1 - ~/.yarn/bin/yarn\r\n    npm: 8.19.2 - ~/.nvm/versions/node/v16.15.1/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.110\r\n  npmPackages:\r\n    svelte: ^3.53.1 => 3.53.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-05T17:06:23Z","created_at":"2022-12-05T17:02:17Z","creator_user_login":"Roboroads"}
{"number":8084,"title":"Bug > Transition out / slide uses the OLD height from transition in...","body":"### Describe the bug\n\nThe REPL is best, here's my best description\r\n\r\nWhen using `transition:slide`, the transition OUT will use the height calculated for the IN transition, even if the element has since changed size. This causes a jump in the OUT animation.\n\n### Reproduction\n\nhttps://svelte.dev/repl/5744add750c14629bbd0494df7ce0367?version=3.53.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nReplicatable with REPL\r\n\r\n\r\n  System:\r\n    OS: macOS 12.3.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 64.07 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.18.1 - ~/.nvm/versions/node/v16.18.1/bin/node\r\n    npm: 8.19.2 - ~/.nvm/versions/node/v16.18.1/bin/npm\r\n  Browsers:\r\n    Chrome: 108.0.5359.94\r\n    Edge: 107.0.1418.68\r\n    Firefox: 105.0.1\r\n    Safari: 15.4\r\n  npmPackages:\r\n    svelte: ^3.46.0 => 3.53.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-30T23:25:35Z","created_at":"2022-12-05T11:09:47Z","creator_user_login":"oodavid"}
{"number":8074,"title":"<svelte:webcomponent> to create a special place for webcomponents in Svelte  - but with severe limitations","body":"### Describe the problem\n\nI'm not frustrated with Svelte - it brings lots of fun. :) \r\n\r\nBut I do would like to see a solution to my tries to create svelte components for a webcomponent library where I am able to use the same DX for styling these as I would for regular DOM elements (in style part, with encapsulation)\r\n\r\nI would like to create these svelte wrappers in order to solve for a number of other issues with webcomponents in svelte. One at least being that binding of values are not working. This I can solve with an dispatcher and export let.\r\n\r\nNext, I can create nice typings this way (even though that can also be done in a different way via *.d.ts)\r\n\r\n\n\n### Describe the proposed solution\n\nAs a very bold idea I would like to propose a new directive called `<svelte:webcomponent>`. This directive would allow the svelte component containing it to have it's parents styles directly injected as if those were defined to itself.\r\n\r\nBecause this idea fully goes against the whole idea of encapsulation - and probably is not considered as a very pretty idea - there should be a punishment for each svelte component that uses this.\r\n- the component cannot define own styles\r\n- the component may have all sorts of script code, but operators like `bind:this` \r\n- the template part of the component may only contain 1 dom element (webcomponent ideally) and named slots, nothing more, nothing less\r\n- the directive will allow binding of events and props, transitions and use (maybe more?)\r\n\r\nPseudo code:\r\n\r\nParent.svelte\r\n\r\n```\r\n<script>\r\nimport SpecialChild from ...\r\n</script>\r\n\r\n<SpecialChild fill=\"outline\">Some content</SpecialChild>\r\n\r\n<style>\r\n\r\nion-button {\r\n --background:red;\r\n}\r\n</style>\r\n```\r\n\r\nSpecialChild.svelte\r\n```\r\n<script>\r\nexport let fill=\"outlined\" | \"block\" = undefined\r\n</script>\r\n\r\n<svelte:webcomponent>\r\n<ion-button {fill}><slot></ion-button>\r\n</svelte:webcomponent>\r\n```\r\n\r\nWill render a button with a red background given the style defined in Parent.svelte.\r\n\r\nI guess this solution will create a warning about unused styles in Parent. So that makes it also less elegant. \r\n\r\nMy thinking is - while webcomponents may or may not be fully liked by many svelte developers, they have a place in the ecosystem. By creating some sort of special place for them (behind \"bars\"), the sveltecompiler can deal with them separately without breaking many APIs that makes Svelte what it is is. \r\n\r\nSo, my assumption is also that this will help enlarging ecosystem for svelte by allowing people to port/embed webcomponent libraries into Svelte.\r\n\r\nHope this makes sense.\r\n\r\n\r\n\r\n \n\n### Alternatives considered\n\n1. Not making svelte wrappers, but using webcomponents directly (with or without type definitions)\r\nThen I cannot fix the binding problem. And maybe a bit more compatibility things? And tree-shaking goes away.\r\n\r\n2. Realising a wrapper that takes a \"style\" prop which contains the css. The Svelte wrapper then uses that content to apply styles to the DOM element.\r\nThis seems to me a bit clunky DX, as I need to create a different API for applying style, where the encapsulated way is already great.\r\n\r\n3. Putting the component's specific styles in the global style definition\r\nThat imho makes the whole styling a horror as I then need to manage namespaces etc. Which we wanted to get rid of with encapsulation in the first place. \r\n\r\nOther alternatives that have been proposed in a more generic way are related to the topic style inheritance, access to parents' style, parents access childs' style,etc.  For reasons I understand those have been rejected (I couldn't find the issues anymore, but there are some raised).\r\n\r\nHappy to start drawing an RFC or so, but let's try to pass this stagegate first \r\n\r\nThx for your great work!\r\n\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-12-02T22:24:25Z","created_at":"2022-12-02T22:24:25Z","creator_user_login":"Tommertom"}
{"number":8073,"title":"svelte.compile does not always strip cwd from file path in \"generated by\" comment on windows","body":"### Describe the bug\n\nsvelte adds a banner comment like this \r\n```js\r\n/* src/Dummy.svelte generated by Svelte v3.53.1 */\r\n```\r\nto it's js output.\r\n\r\nwhen `filename` option is an absolute path, it automatically removes a leading cwd here: https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/Component.ts#L142\r\n\r\nThis code fails on windows if filename uses forward slashes as directory separators, eg. a normalized path from vite\r\n\r\n\r\n\n\n### Reproduction\n\nsee failed test in vite-plugin-svelte suite\r\n https://github.com/sveltejs/vite-plugin-svelte/actions/runs/3593633128/jobs/6050845079#step:9:226\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\neffin windows\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-02T09:59:10Z","created_at":"2022-12-02T09:57:49Z","creator_user_login":"dominikg"}
{"number":8072,"title":"allow arbitrary expressions in `@debug` statements","body":"### Describe the problem\n\ni often want to debug arbitrary expressions without having to create a new variable for them\r\n```svelte\r\n{@debug foo(value)}\r\n```\r\n```\r\nParsing error: {@debug ...} arguments must be identifiers, not arbitrary expressions\r\n```\n\n### Describe the proposed solution\n\nallow arbitrary expressions in `@debug` statements\n\n### Alternatives considered\n\ncreating a new variable\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-12-02T08:00:25Z","created_at":"2022-12-02T08:00:25Z","creator_user_login":"DetachHead"}
{"number":8070,"title":"Issue with reactivity on store binding of _this_ outside .svelte in custom element.","body":"### Describe the bug\n\nWhen binding a component's _this_ attribute to a store in a typescript file I am able to set its CSS from another component by simply importing the store variable and assigning a new value. This works properly when running in dev. But when I generate the custom element, the bound HTMLElement loses its reactivity (changing the CSS doesn't reflect on the dom). When debugging using the browser debugger, I see everything working perfectly. Even the CSS attribute gets set, but it just refuses to update. This is just an annoyance because I've found a workaround by setting an object and making the component subscribe to that object and then updating with the changes.\r\n\r\n\n\n### Reproduction\n\nI've created an example repository that reproduces the issue: [demo](https://github.com/RamAddict/svelte-issue-demo).\r\nI have a Counter component in the demo whose _this_ I bind to a local variable. Then, I bind the local variable to the father's component's variable which I import from the store. I then import that store into the ChangeColor component's _on:click_ function to tell it to change the background color.\r\n\r\nThe repository has instructions on how to run and generate the custom element. You will see that it works running in dev but not in the custom element.\n\n### Logs\n\n```shell\nNo logs were seen for this issue :(\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.15 Ubuntu 20.04.4 LTS (Focal Fossa)\r\n    CPU: (16) x64 AMD Ryzen 7 5800X3D 8-Core Processor\r\n    Memory: 4.37 GB / 15.58 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.16.0 - ~/.nvm/versions/node/v16.16.0/bin/node\r\n    npm: 8.15.0 - ~/.nvm/versions/node/v16.16.0/bin/npm\r\n  npmPackages:\r\n    svelte: ^3.53.1 => 3.53.1\r\n    vite: ^3.2.3\r\nI use OperaGx, but its the same with chrome\r\nLVL4 (core: 92.0.4561.71)\r\nSystem:Windows 11 64-bit\r\nChromium version:106.0.5249.119\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-05-23T15:58:38Z","created_at":"2022-12-01T18:33:36Z","creator_user_login":"RamAddict"}
{"number":8067,"title":"Obtaining slots as function or SvelteComponent","body":"### Describe the problem\n\nI get frustrated when I have to use the slot block somewhere else on the page or try to dynamically create it. An overlay that runs every time the page loads, or a loading page that creates the slot elsewhere on the page in a layout, would be examples.\n\n### Describe the proposed solution\n\nInstead of returning a Boolean, $$slots returns a function or a SvelteComponent, allowing you to pass a target argument from either return.\n\n### Alternatives considered\n\nThe ability to design unique svelte blocks would be useful for developing svelte libraries or project libraries.\n\n### Importance\n\ni cannot use svelte without it","state":"open","updated_at":"2023-04-03T15:34:08Z","created_at":"2022-11-30T19:19:19Z","creator_user_login":"Eudritch"}
{"number":8066,"title":"Svelte Function Block, or Rework on Svelte Each Block","body":"### Describe the problem\r\n\r\nWhen I use each block and an await import component to dynamically create components, all of my components end up being destroyed and then recreated, which irritates me. Faster and better dynamic components are what this request fixes.\r\n\r\nPotential uses:\r\n![Potential uses](https://user-images.githubusercontent.com/32845411/204882024-293de56a-64a6-4af6-88be-8e6edb1c2a41.png)\r\nas:\r\n```\r\n{#func name [arg1, arg2, etc]}\r\n    <div>First argument {arg1}</div>\r\n{/func}\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nA slim function block that can be called dynamically with arguments and runs everything inside while returning the passed arguments and returns a destroy function for when you want to destroy everything inside is my suggested solution.\r\n\r\n### Alternatives considered\r\n\r\nA better keyed each block with a writable index that you can subscribe to changes is an alternative that only runs everything inside it once (including \"@const result = functions\").\r\nAdditionally, a const block that responds well to writables is required because it might be required to subscribe to the index writable.\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2022-11-30T20:47:42Z","created_at":"2022-11-30T18:47:59Z","creator_user_login":"Eudritch"}
{"number":8065,"title":"$$events to expose events used in a component","body":"## Describe the problem\r\n\r\nIn some cases, it would be very helpful to know which events are declared within a component, especially when wanting to conditionally render a different element or content depending on which events are used.\r\n\r\nThere's not currently a native way to do this, at least during component initialization, so a common alternative is to also expose a prop indicating whether an event is used or to pass the event itself as a prop instead of using Svelte's magic `on:` event binding.\r\n\r\n## Describe the proposed solution\r\n\r\nSince Svelte is a compiler, these events should already be exposed, so while the callbacks themselves might not yet be registered at that point, the event names and the count of how many times each event name is used for that component instance is used should already be available and could be exposed to the component via a reserved keyword like `$$events`.\r\n\r\n```svelte\r\n<script>\r\n  // No fancy logic needed here ✨\r\n</script>\r\n\r\n{#if $$events.click}\r\n  Join today and get started.\r\n  <button on:click>Sign up</button>\r\n{/if}\r\n```\r\n\r\nThe functionality I'm proposing here is already possible by hooking into `get_current_component().$$.callbacks`, but this only works after the component has finished mounting, where the event names are the object's keys with an array of their callback functions as each key's value.\r\n\r\n`get_current_component().$$.callbacks`:\r\n\r\n> ```js\r\n> {\r\n>   click: [f(), f()],\r\n>   custom: [f()],\r\n> }\r\n> ```\r\n\r\nproposed `$$events`:\r\n\r\n> ```js\r\n> {\r\n>   click: 2,\r\n>   custom: 1,\r\n> }\r\n> ```\r\n\r\n…or if for some reason there's some gotcha to using the count instead of a boolean, the values could just be `true` for each, though there could be an advantage to including the count (maybe… maybe not 🤷🏻‍♂️).\r\n\r\n## Pseudo-implementation of proposed solution\r\n\r\n— a polyfill more-or-less for `$$events` using `get_current_component().$$.callbacks` after mounting\r\n\r\nFor the sake of this example, I've mocked this up in a REPL using `_$$events` (since the `$$` prefix is reserved):\r\nhttps://svelte.dev/repl/f05fe3637b3c47a38dedcc303f75dd0c?version=3.53.1\r\n\r\nThis is the gist of the implementation (screenshot below):\r\n\r\n```svelte\r\n<script>\r\n  import { onMount } from 'svelte';\r\n  import { get_current_component } from 'svelte/internal';\r\n\r\n  let _$$events = {};\r\n\r\n  const currentComponent = get_current_component();\r\n  onMount(() => {\r\n    _$$events = Object.fromEntries(\r\n      Object.entries(currentComponent.$$.callbacks).map(\r\n        ([event, { length: count }]) => {\r\n          return [event, count];\r\n        }\r\n      )\r\n    );\r\n  });\r\n</script>\r\n\r\n{#if _$$events.eventName} Event-specific conditionally rendered content {/if}\r\n```\r\n\r\n[![screenshot of REPL](https://user-images.githubusercontent.com/5913254/204884669-d38e6cb0-d431-4cee-b447-3a6461bfd6e9.png)](https://svelte.dev/repl/f05fe3637b3c47a38dedcc303f75dd0c?version=3.53.1)\r\n\r\nHere is another REPL I put together which demonstrates another—potentially more realistic—use case, using the presence of events to conditionally render buttons associated with each declared event (even with multiple handlers for some events):\r\nhttps://svelte.dev/repl/be01c4b5a9df4295a9ddc1968532dab2?version=3.53.1\r\n\r\n[![screenshot of REPL](https://user-images.githubusercontent.com/5913254/204881390-c15300af-e066-4d3b-8b4e-5a76d228ad2b.png)](https://svelte.dev/repl/be01c4b5a9df4295a9ddc1968532dab2?version=3.53.1)\r\n\r\n## Alternatives considered\r\n\r\nI briefly mentioned this above as well, but some viable alternatives may be to…\r\n* expose a prop indicating whether an event is used\r\n  \r\n  ```svelte\r\n  <Component on:click={doSomething} showButton={true} />\r\n  ```\r\n* pass the event itself as a prop instead of using Svelte's magic `on:` event binding\r\n  \r\n  ```svelte\r\n  <Component onClick={doSomething} />\r\n  ```\r\n* hook into `get_current_component().$$.callbacks` after the component has mounted\r\n  \r\n  (the same implementation outlined in this proposal, but implemented manually as needed)\r\n\r\n## Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-04-11T12:30:24Z","created_at":"2022-11-30T18:42:48Z","creator_user_login":"brandonmcconnell"}
{"number":8062,"title":"Broken dependency detection in @const block","body":"### Describe the bug\n\nIn a `{@const ...}` block, the dependencies are resolved by variable name. If there's shadowing, the dependency might not match the actual variable being used. This may lead to a circular dependency.\r\n\r\nExample:\r\n```svelte\r\n<script>\r\n    let arr = [...'abc'];\r\n</script>\r\n\r\n<h1>\r\n    {#if true}\r\n        {@const a = arr.map(b => b.toUpperCase()).join('')}\r\n        {@const b = a.toLowerCase()}\r\n        Hello {a} & {b}!\r\n    {/if}\r\n</h1>\r\n```\r\n[REPL](https://svelte.dev/repl/6e24a11aaa71484eb09986dbb158d8be?version=3.53.1)\n\n### Reproduction\n\n1. Create an `{@if}` or `{@each}` block\r\n2. Inside it, create a const block with a variable named `a`, and in its definition use an arrow function that takes a parameter named `b`\r\n3. Next to it, create a const block named `b` that uses the variable `a` in its definition\r\n4. Svelte claims it's a circular dependency, or the compiler crashes with \"Maximum call stack exceeded\"\n\n### Logs\n\n```shell\n19:31:06 [vite] Internal server error: Error while preprocessing /home/csha/Dokumenty/sa-overview-svelte/src/lib/MetricTable.svelte - Maximum call stack size exceeded\r\n  Plugin: vite-plugin-svelte\r\n  File: ~/proj/src/lib/App.svelte\r\n      at ~/proj/node_modules/svelte/compiler.js:31576:36\r\n      at Set.forEach (<anonymous>)\r\n      at add_node (/home/csha/Dokumenty/sa-overview-svelte/node_modules/svelte/compiler.js:31576:28)\r\n      at Array.forEach (<anonymous>)\r\n      at ~/proj/node_modules/svelte/compiler.js:31581:32\r\n      at Set.forEach (<anonymous>)\r\n      at add_node (~/proj/node_modules/svelte/compiler.js:31576:28)\r\n      at Array.forEach (<anonymous>)\r\n      at ~/proj/node_modules/svelte/compiler.js:31581:32\r\n      at Set.forEach (<anonymous>)\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 6.0 undefined\r\n    CPU: (2) x64 AMD A4-9120 RADEON R3, 4 COMPUTE CORES 2C+2G\r\n    Memory: 3.12 GB / 11.16 GB\r\n    Container: Yes\r\n    Shell: 5.9 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 19.0.1 - /usr/bin/node\r\n    Yarn: 1.22.19 - ~/.yarn/bin/yarn\r\n    npm: 8.19.2 - /usr/bin/npm\r\n  Browsers:\r\n    Brave Browser: 107.1.45.118\r\n    Chromium: 107.0.5304.87\r\n    Firefox: 106.0.5\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.52.0 \r\n    vite: ^3.1.1 => 3.2.3\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-11-27T19:09:13Z","created_at":"2022-11-27T19:09:13Z","creator_user_login":"m93a"}
{"number":8061,"title":"Parent element behavior when transitioning out a child","body":"### Describe the bug\n\nI have a conditionally-rendered container with one child element. The child has a transition, and the parent has a dynamic class dependent on the same value as the conditional rendering. Something like this:\r\n\r\n```svelte\r\n{#if visible}\r\n  <div class:visible>\r\n    <div out:fade />\r\n  </div>\r\n{/if}\r\n```\r\n\r\nWhen I set `visible = false`, I would expect the parent to lose its `visible` class, the child to transition out, and then both elements to be removed from the DOM. (In the repl, I would expect the parent element's background to turn green during the transition.) Instead, the parent keeps the `visible` class during the transition.\n\n### Reproduction\n\nhttps://svelte.dev/repl/b46d1c0bf0224f269313783d01dc6e25?version=3.53.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nAlso reproduces in https://svelte.dev/repl.\r\n\r\n\r\n  System:\r\n    OS: macOS 13.0.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 45.73 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.10.0 - /opt/homebrew/bin/node\r\n    Yarn: 1.22.17 - /opt/homebrew/bin/yarn\r\n    npm: 8.19.2 - /opt/homebrew/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.121\r\n    Firefox: 107.0\r\n    Safari: 16.1\r\n  npmPackages:\r\n    svelte: ^3.52.0 => 3.52.0\r\n```\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-11-27T18:49:24Z","created_at":"2022-11-27T18:49:24Z","creator_user_login":"zakj"}
{"number":8060,"title":"Allow to pass non-promise value to `#await` block as a parameter, will also fix SSR compatibility","body":"### Describe the problem\n\nYou can't pass non-promise values to `#await` blocks.\r\nThis makes it hard to share the same code both for SSR and CSR.\r\n\r\nA general use-case:\r\nIf the Svelte user wants to build an optimistic UI for example, he will wish to use the `#await` blocks very quite often. But if the user wishes to support also SSR, he would obviously will wait until the promise is resolved before rendering the page (e.g. by a SvelteKit `load` functions), and then pass the resolved promise to the `#await` block.\r\nHowever, by the design of Svelte, the parameter of `#await` blocks in SSR mode is always considered to be \"unresolved\" (which I support this logic, since otherwise there might be unpredictable rendering results).\n\n### Describe the proposed solution\n\nThe problem in the SSR use-case can be solved very easily, if Svelte will officially allow to pass to the `#await` block also a non-promise JS value as a parameter.\r\n\r\nThe logic: If `!(parameter instanceof Promise)`, then the parameter is considered to be in the \"resolved\" state, **even on SSR mode**.\r\n\r\nMaybe an alternative to #981.\n\n### Alternatives considered\n\nEncapsulate this logic in a custom written `Await` component in the user-land.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-11-26T19:23:35Z","created_at":"2022-11-26T19:23:35Z","creator_user_login":"Tal500"}
{"number":8055,"title":"Proposal for svelte:dense","body":"### Describe the problem\n\nWriting HTML code, spaces are sometimes intrusive. In general, you only need to modify the styling a little, but in the case of the \"pre\" tag, styling alone cannot solve it. These problems are very annoying when you use a formatting program such as prettier.\n\n### Describe the proposed solution\n\nI propose a component called svelte:dense. Spaces, tabs, and new line characters created within this are ignored. This is specific to these components and does not apply to children. It also does not apply to rendering variables or directly rendering html elements using @html grammar. In other words, if you must use a space within it, you can use it like ```{' '}```. This is just a syntax sugar that allows you to maintain consistent styling where there should be no spaces.\n\n### Alternatives considered\n\nIf you write all the code in one line without styling, you can solve this problem, but the code becomes messy.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-11-25T18:52:31Z","created_at":"2022-11-25T18:52:31Z","creator_user_login":"seo-rii"}
{"number":8052,"title":"components render with outdated state when using `let:*` on `slots`","body":"### Describe the bug\n\nI try to describe the example, but I think it is easier to take a look at the code 😅\r\n\r\nI have a Wrapper component that provides a slot prop via `let:x`.\r\nInside the Wrapper component another \"List\" component is repsonsible for iterating over a list of items and adding new items to the list.\r\nThe \"List\" provides a `default slot` so the \"Parent\" can decide how he wants to render the item.\r\n\r\nThe problem I have is that, I can't bind directly to the item provided by the \"List\"s slot props. Therefore I need to use two-way binding and then directly access the item in the \"Parent\" component.\r\n\r\nAs soon as a new item gets added, the \"List\" and the \"Parent\" knows about it. So the newly added item will be renderd.\r\nBut the items were not yet updated inside the scope of the \"List\" where it tries to render it. So the code tries to access an element that should be there, but isn't because  that scope uses an outdated state.\r\n\r\nAs soon as I remove `let:x` everything works fine.\n\n### Reproduction\n\nSvelte REPL: https://svelte.dev/repl/1f1ee60fbd4a41b7942241f828589ed9?version=3.53.1\r\n\r\n1. click on the \"add item\" button\r\n2. open the console to see the error\r\n3. reload the page\r\n4. remove `let:x` from the `Wrapper` component\r\n5. click on the \"add item\" button\r\n6. it works now\r\n\r\nI have logged the values of all variables from step 2:\r\n![image](https://user-images.githubusercontent.com/21335119/203609755-990cb8cc-377d-4df4-9853-f4ed34f3f442.png)\r\n\r\nIn line 4 you can see that the `values` array already has two items but in line 5 `items` only contains a single item. It uses an older version of the state.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte REPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-04-28T08:31:59Z","created_at":"2022-11-23T17:48:04Z","creator_user_login":"ivanhofer"}
{"number":8049,"title":"Regression: Svelte `:global()` parsing doesn't play nicely with SASS parent selectors: &[attr='value']","body":"### Describe the bug\r\n\r\n## Background\r\n\r\nWhen using `svelte` with `svelte-preprocess` and `sass`, it should be possible to use SASS [parent selector](https://sass-lang.com/documentation/style-rules/parent-selector) `&` in the way we're used to, with the same semantics of being able to \"take the parent selector and add something more specific to it\" (my paraphrase). \r\n\r\nExtending the semantics of SASS `&` to the Svelte world of `:global()`ness... It would seem to me that **if a `&` occurs within a block that is _already_ `:global()`, that the globalness of the resulting CSS selector should be preserved**. Shouldn't it?\r\n\r\n(Which has me wondering if this should actually be the responsibility of `svelte-preprocess`, which is supposed to be what takes SCSS input, and while preserving its meaning/intent, translates it to \"bare Svelte\" syntax that Svelte can understand.)\r\n\r\nFor example, let's say we have a list, where each element has a unique class or attribute...\r\n\r\n```svelte\r\n<ul>\r\n  <li data-i=\"0\">...</li>\r\n  <li data-i=\"1\">...</li>\r\n</li>\r\n```\r\n\r\nWe may want to use some SCSS like this to group them together and style each of those unique elements...\r\n\r\n```scss\r\nli {\r\n  /* Styles common to all li elements. And then styles for unique elements... */\r\n  &[data-i='0'] {\r\n    background-color: red;\r\n  }\r\n  &[data-i='1'] {\r\n    background-color: blue;\r\n  }\r\n}\r\n```\r\n\r\nThis produces the following CSS:\r\n\r\n```css\r\nli {\r\n  /* Styles common to all li elements. */\r\n}\r\nli[data-i=\"0\"] {\r\n  background-color: red;\r\n}\r\nli[data-i=\"1\"] {\r\n  background-color: blue;\r\n}\r\n```\r\n\r\n## The Problem\r\n\r\nUntil I upgraded svelte recently, this was working as expected in my Svelte components, too:\r\n\r\n```svelte\r\n<ul>\r\n  <Item data-i=\"0\">...</Item>\r\n  <Item data-i=\"1\">...</Item>\r\n</li>\r\n\r\n<style lang=\"scss\">\r\n:global(li) {\r\n  &[data-i='1'] {\r\n    background-color: blue;\r\n  }\r\n}\r\n</style>\r\n```\r\n\r\nIn **Svelte 3.37.0**, this produced a `<style>` tag with this CSS:\r\n```css\r\nli[data-i=\"1\"]{background-color:blue}\r\n```\r\n\r\nIt wasn't necessary to wrap the parent selector (`&[data-i='1']`) with `:global()`. In fact, doing so actually broke things because it caused the `&` to come through as-is, which is invalid CSS:\r\n```css\r\nli &[data-i=\"1\"]{background-color:blue}\r\n```\r\n\r\nFast-forward to **Svelte 3.38.0** or later, and we get somewhat opposite behavior and a breaking change... Try to keep doing this:\r\n\r\n```svelte\r\n:global(li) {\r\n  &[data-i='1'] {\r\n    background-color: blue;\r\n  }\r\n}\r\n```\r\n\r\nand you get scolded:\r\n```\r\nUnused CSS selector \":global(li)[data-i=\"1\"]\"\r\n```\r\nand the selector **removed**.\r\n\r\nTry to change it to this:\r\n```css\r\n:global(li) {\r\n  :global(&[data-i='1']) {\r\n    background-color: blue;\r\n  }\r\n}\r\n```\r\n\r\nand you get the same **invalid** CSS as previous versions:\r\n```css\r\nli &[data-i=\"1\"]{background-color:blue}\r\n```\r\n\r\nEither way, it doesn't work! (Meaning, it broke my component when I upgraded.)\r\n\r\n## Workarounds\r\n\r\nOf course I searched for a workaround...\r\n\r\n**Workaround 1**: Don't use SASS — or at least not `&` — when dealing with a `:global()` style.\r\n\r\nObviously this works...\r\n```scss\r\n:global(li[data-i='1']) {\r\n    background-color: blue;\r\n  }\r\n}\r\n```\r\n\r\nbut I'd prefer to use `&`.\r\n\r\n**Workaround 2**:  Use `:global {}` feature from svelte-preprocess\r\n\r\n... which lets you mark entire blocks as global (which is pretty useful, and preferable to workaround 1):\r\n\r\n```scss\r\n:global {\r\n  li {\r\n    &[data-i='1'] {\r\n      background-color: blue;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Root cause\r\n\r\nThe only [documented change](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3380) to `:global()` behavior between 3.37.0 and 3.38.0 was #6222, so of course I assume that changeset (#6223) is what inadvertently broke this for SASS users.\r\n\r\n> What I would like to do is `p:global(.xxx)`, while still scoped to `p` within the component, it will treat `.xxx` as global (ie, do not go and match any selector written within `:global()`)\r\n\r\nI don't _quite_ understand #6222 enough to  say why it should have broken it for this use case, but I would guess that in order to make it still add a `.svelte-xyz` scoping class for cases like this:\r\n```css\r\n\tdiv:global(.bar) {\r\n\t\tcolor: red;\r\n\t}\r\n```\r\nand result in this (from this [diff](https://github.com/sveltejs/svelte/pull/6223/files#diff-88732a4f76ca756e31117efd014b712ec7d95b82a13900e567568348d227d262)):\r\n```css\r\ndiv.svelte-xyz.svelte-xyz.bar{color:red}\r\n```\r\n, it was necessary to change the logic to add the `.svelte-xyz` part if any _part_ of a selector did not have a `:global()`. And in my examples, the `[attr]` that svelte-preprocess _currently_ gives us is outside of a `:global()`.\r\n\r\nIndeed, it looks like the root cause of this breaking change might go back as far as 3.18.1 and https://github.com/sveltejs/svelte/issues/4314#issuecomment-579011806:\r\n\r\n> As mentioned above, you need to use `:global()` around any portion of the selector that doesn't refer to this component, whether it's above us or below us in the tree.\r\n\r\n\r\n\r\n## Proposed solutions\r\n\r\nI'm not entirely sure yet whether a solution for this would belong in...\r\n- `svelte-preprocess` (in order to preserve the intended globalness of the original SASS input when converting to CSS output that Svelte will understand)\r\n- or here in `svelte` (to be more tolerant of certain CSS input)\r\n\r\nI noticed that among the use cases that #6223 was adding support for:\r\n\r\n```\r\n\tdiv:global(.bar) {\r\n\t\tcolor: red;\r\n\t}\r\n\r\n\t.foo:global(.bar) {\r\n\t\tcolor: red;\r\n\t}\r\n```\r\n\r\n, none of them involve a `[attr]` selector.\r\n\r\nIs it possible that changing it so that it doesn't add the `.svelte-xyz` to selectors that contain _only_ `:global(...)[attr]` would be enough to solve thing both for the #6223 use cases and the SASS use case presented here?\r\n\r\nThen again, I might argue that even if you add a _class_ to a `&`, that the intended/desired outcome from a SASS user would be that anything within a `:global(anything) {` block _stays_ global:\r\n\r\n```scss\r\n:global(li) {\r\n  &.item1 {\r\n    background-color: red;\r\n  }\r\n  &.item2 {\r\n    background-color: blue;\r\n  }\r\n}\r\n```\r\n\r\nIt's open to interpretation. But if we interpret the `&` as saying \"exactly the same as the parent selector, but with...\", then it should preserve the globalness and give us `:global(li.item1)`.\r\n\r\nDoes that sound right?\r\n\r\nAnd is it even possible to support that while also supporting the intent of #6222?\r\n\r\n(I see a related report from a SASS user [here](https://github.com/sveltejs/svelte/issues/6306#issuecomment-957342152)  about a regression from 3.37.0 that also involves an `[attr]` selector, `:global(div[row=one]`, but that's not quite the same problem since they actually get an error in that case:\r\n```\r\nglobal(...) can be at the start or end of a selector sequence, but not in the middle\r\n```\r\n)\r\n\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/TylerRick/svelte-sass_global_attr_regression\r\n\r\n### Logs\r\n\r\n```shell\r\nUnused CSS selector \":global(li)[data-i=\"1\"]\"\r\n```\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2022-11-23T07:24:01Z","created_at":"2022-11-23T07:20:17Z","creator_user_login":"TylerRick"}
{"number":8043,"title":"Add: on:view and improvements to svelte animations","body":"### Describe the problem\n\nthere are good transitions/animations that svelte provides and I feel like it's also fitting for svelte to help me fire these animations at the right time svelte animations helped me a lot while creating my UI, but today I was gonna make a \"Reveal elements on scroll\" effect and I really believed that svelte will make this very easy for me, in the end, it already made the slide animation, I just need to fire it in the right time\r\n\r\nwell... I was surprised to find that svelte didn't give me any way of doing that so my first thought since I'm animating the first part of the website I'll let it fire onMount instead\r\n\r\nhere is where I got into the second issue svelte didn't give me much control over when to start, the docs tell me to wrap my component in an if statement, but that's not good because that just made the element hidden altogether until the website is mounted, animation works good but the element pops into place because it was hidden before it was mounted\r\n\r\nand I quickly found out as you might have guessed that onMount approach wasn't a good idea because the sections under won't animate when scrolled to\r\n\r\nMy fix:\r\n\r\n1- I had to go back to tailwind/css because it gave me more flexibility when to fire the animation using the Ternary conditional operator instead of wrapping the whole element with an if statement and I had to build the slide effect myself there and since it was css instead of making the element hidden, I just changed the opacity to 0 before it fires then to 100 while it animates so it doesn't just pop into place like how it used to\r\n\r\n2- to make the Intersection Observer effect it was complicated enough and it will add a lot of code, so I imported a 3rd party package https://github.com/metonym/svelte-intersection-observer , still added some boilerplate but at least it works now.\n\n### Describe the proposed solution\n\n1- give svelte animations a functionality similar to the Ternary conditional operator so we have more control over when to make it animate\r\n\r\n2- Adding an on:View when an element is visible on the user's screen?\n\n### Alternatives considered\n\n if that's not possible maybe a bind:BoundingClientRectHeight={} to make making the functionality easier?\r\n\r\nknowing when the element is in the user's screen is helpful for Front-End while I know it's not the framework's job, but since it already made the animations might as well make using them easier.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-11-21T10:26:10Z","created_at":"2022-11-21T08:53:48Z","creator_user_login":"azezsan"}
{"number":8041,"title":"PDF docs for offline reading","body":"### Describe the problem\r\n\r\nI'm sometimes offline and I needed to read the Svelte/SvelteKit docs. \r\nSo I generated a PDF docs for Svelte and SvelteKit.\r\nI will be happy to generate them when a new docs version is released.\r\nI think some other developers may benefit to have PDF docs as well.\r\n\r\n### Describe the proposed solution\r\n\r\nYou can find the PDF for [Svelte](https://github.com/shinokada/markdown-docs-as-pdf/blob/main/pdf/svelte/en/svelte-en.pdf) and [SvelteKit](https://github.com/shinokada/markdown-docs-as-pdf/blob/main/pdf/sveltekit/en/sveltekit-en.pdf) from these links.\r\nI will be happy to create a PR if you are interested.\r\n\r\n### Alternatives considered\r\n\r\n- Add epub or PDF version to download it in [the website](https://read-html-download-pdf.vercel.app/).\r\n- Add a link to the above GitHub repo.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-06-09T05:50:31Z","created_at":"2022-11-20T11:42:31Z","creator_user_login":"shinokada"}
{"number":8040,"title":"[feature req]: awareness of tags in `<head>` to prevent duping","body":"### Describe the problem\n\nSay I have some component which adds elements to `<svelte:head>`. It doesn't matter what those elements are, just that they're either generated from `export let` inputs or are entirely static.\r\n```svelte\r\n<script>\r\n  export let title;\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>{title}</title>\r\n  <meta name=\"description\" content=\"Static\">\r\n<svelte:head/>\r\n```\r\nLet's call this element `LowEffortSEO.svelte` and use it as such;\r\n```svelte\r\n<script>\r\n  import LoSEO from \"./LowEffortSEO.svelte\";\r\n</script>\r\n\r\n<LoSEO title=\"My Title\" />\r\n<LoSEO title=\"My Title\" />\r\n<LoSEO title=\"Changed My Mind\" />\r\n```\r\nThis will generate both of the titles and both of the meta tags;\r\n\r\n```html\r\n<head>\r\n  <title>My Title</title>\r\n  <meta name=\"description\" content=\"Static\">\r\n  <title>My Title</title>\r\n  <meta name=\"description\" content=\"Static\">\r\n  <title>Changed My Mind</title>\r\n  <meta name=\"description\" content=\"Static\">\r\n<head/>\r\n```\r\nIgnoring this stupid practice for the sake of demonstration, the content of `<head>` contains duplicates; twice `<title>My Title</title>`, and thrice `<meta name=\"description\" content=\"Static\">`.\r\n\r\nIf we're prerendering, this is excess data we're sending to the client which is entirely functionless, if we're dynamically injecting this at runtime, we're telling the browser \"hey something new just popped up and you need to deal with it\", only for the resulting effect to be the same.\r\n\r\nI'm currently building out some components. I can't make any assumptions about the DOM they're in, only that they must work when there's anything there or nothing there.\r\nThis means that if I depend on something external to the site, say an icon lib or a font, I have to do it within a component.\r\nIt's pretty nice on the consumer of components if things \"just work\" without any additional setup. There's no bug hunting, less documentation to go through, and they can get straight to the point of building their website without having to deal with adjacent tasks caused by the components.\n\n### Describe the proposed solution\n\nCurrently, if you want to do this you need to maintain your own internal graph of components and head elements, abusing stores and actions and getting fairly messy.\r\n\r\nThe solution I'm thinking of involves some sort of middle man between calls in `<svelte:head>` and calls to the DOM.\r\n\r\nThis middle man would have several challenges to overcome. Taking the example from earlier, what happens when we bind the `title` of the second `LoSEO` to a user input? How do we make sure that we maintain the resulting `<title>` tag for the first `LoSEO` when the second is telling us \"hey, this has changed and you need to replace it\"?\r\n\r\nWorking with literal data is a bit easier, but also a lot less common. If you're the author of both your site and your components, then why put literal `<svelte:head>` data in anything that would appear more than once at a time?\r\n\r\nThis middle man would have to maintain some dependency structure, possible a key-value store where each key is the element's data (excluding svelte-generated classnames) and each value is a set of component instance references who require this element to exist.\r\nOnce that set is empty, the element should be destroyed.\r\nComponent instances are removed from the set when an update causes the desired element to be different from the keyed element, or when the component is outright destroyed.\r\n\r\nThis would require a total separation between components and their `<svelte:head>`, so calls such as `append(document.head, meta0);` would be replaced by something like `sveltehead.append(meta0)`, which would run through handling the graph, then run the appropriate `append` call if necessary.\n\n### Alternatives considered\n\n**Svelte users should handle this themselves**\r\n\r\nThis leaves us where we are, anyone wanting to do this has to implement pretty much all of this feature request, and then stop using `<svelte:head>` if they can't figure out the action magic for it.\r\n\r\n**Only do this for non-dynamic elements**\r\n\r\nI'd be okay with this, although by implementing that you're either already most of the way to the full solution, or you've made compiler output more complicated.\r\n\r\n**Don't handle this, it's fine**\r\n\r\nIt's not fine. Duplicate elements can be a hit to performance, especially on slow connections or slow devices, even in good conditions you can reach a point where excess HTML is visibly slowing your application.\r\n\r\n---\r\n\r\n[Here's some mediocre code to demonstrate what the proposed `sveltehead` may do.](https://gist.github.com/willster277/a0e44fbe8ee3486c80d04c1511331974) I've made notable errors such as being incredibly slow with the `__cleanup()` function, I don't expect the code in this gist to ever see the light of day but it serves as an example of how this feature might work. At the very least is a messy and rough prototype to refine and improve for a real implementation.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-12-07T22:58:00Z","created_at":"2022-11-19T18:39:48Z","creator_user_login":"WillsterJohnson"}
{"number":8037,"title":"Inline style cannot reference scoped `@keyframes`","body":"### Describe the bug\r\n\r\nIf `@keyframes` are defined in a local `<style>` and an `animation` using the key frames is defined via a `style` attribute, the compiler does not adjust the name in the attribute and the key frames will not be referenced correctly.\r\n\r\nA workaround is to use a global `@keyframes` name using the `-global-` prefix.\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<h1 style=\"animation: rainbow 2s linear infinite\">Hello World!</h1>\r\n\r\n<style>\r\n\th1 { color: red; }\r\n\r\n\t@keyframes rainbow {\r\n\t\tfrom { filter: hue-rotate(0); }\r\n\t\tto { filter: hue-rotate(360deg); }\r\n\t}\r\n</style>\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/edf81b9034bb483cb6c59abfbfe8e3ea?version=3.53.1)\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL, Svelte v3.53.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-11-18T14:55:56Z","created_at":"2022-11-18T14:54:09Z","creator_user_login":"brunnerh"}
{"number":8035,"title":"Props fail to update if component visibility is changed during transition","body":"### Describe the bug\n\nProps are not updated correctly when the visibility state of a component changes during a transition. \n\n### Reproduction\n\n[REPL](https://svelte.dev/repl/c6802d3a0b4c4fe2abe0c089f1182784?version=3.53.1)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 916.34 MB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.8.0 - ~/.nvm/versions/node/v18.8.0/bin/node\r\n    Yarn: 1.22.19 - ~/.nvm/versions/node/v18.8.0/bin/yarn\r\n    npm: 8.18.0 - ~/.nvm/versions/node/v18.8.0/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.110\r\n    Firefox: 106.0.3\r\n    Safari: 16.0\r\n  npmPackages:\r\n    svelte: ^3.50.0 => 3.50.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-11-16T16:21:49Z","created_at":"2022-11-16T16:21:49Z","creator_user_login":"Jolaxs"}
{"number":8030,"title":"Transitions causing error thrown: Cannot read properties of null (reading 'p')","body":"### Describe the bug\n\nI'm aware a REPL would be helpful, but I couldn't reproduce the issue in the REPL, even though trying for several hours. So, posting this here with the best details I can give:\r\n\r\nA fade-transition in a deeply nested component caused `Uncaught (in promise) TypeError: Cannot read properties of null (reading 'p')` when attempting to navigate to another page on our app.\r\n\r\nThe error-causing-transition is inside a `Card`-component, repeated within a `{#each}` block inside a larger `Page`-component.\r\n\r\n_Relevant part of the `Card` -component:_\r\n\r\n```svelte\r\n<div class=\"carousel\">\r\n    <div class=\"nav\">\r\n      <button class=\"prev\" on:click={(e) => e.preventDefault()}>\r\n        {#if $index > 0}\r\n          <div class=\"nav-btn\" transition:fade={{ duration: 200 }}> <!-- <<THESE TRANSITIONS -->\r\n            <slot name=\"prev\" />\r\n          </div>\r\n        {/if}\r\n      </button>\r\n      <button class=\"next\" on:click={(e) => e.preventDefault()}>\r\n        {#if $index < maxIndex}\r\n          <div class=\"nav-btn\" transition:fade={{ duration: 200 }}> <!-- <<THESE TRANSITIONS -->\r\n            <slot name=\"next\" />\r\n          </div>\r\n        {/if}\r\n      </button>\r\n    </div>\r\n...\r\n```\r\n\r\nThe stacktrace wasn't very helpful.\r\n\r\n<img width=\"608\" alt=\"Screenshot 2022-11-14 at 15 25 59\" src=\"https://user-images.githubusercontent.com/17210302/201671577-b063fab4-cdbe-47d5-837f-b2a04d05c689.png\">\r\n\r\nAfter disabling source maps I could see the exact line throwing, which originated from the Page-component, more specifically from a very simple `<div><slot/></div>` type of component used on the `Page`:\r\n\r\n```js\r\nfunction create_default_slot_13\r\n....\r\n   const block = {\r\n   ....\r\n   p: function update(ctx, dirty) {\r\n      \tlet previous_block_index = current_block_type_index;\r\n      \tcurrent_block_type_index = select_block_type_1(ctx, dirty);\r\n\r\n      \tif (current_block_type_index === previous_block_index) {\r\n      \t\tif (~current_block_type_index) {\r\n      \t\t\tif_blocks[current_block_type_index].p(ctx, dirty); // <<< trying to read `p` from null\r\n      \t\t}\r\n```\r\n\r\nIf I remove the transitions from the `Card`-component, the problem disappears, so we can work around it.\r\n\r\nSorry for the crappy bug report. I'll keep trying to reproduce the problem in the REPL, but it seems challenging. \n\n### Reproduction\n\nNot available, yet.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte 3.53.1, Chrome 107\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-11-16T07:45:58Z","created_at":"2022-11-14T13:38:35Z","creator_user_login":"arggh"}
{"number":8006,"title":"Binded volume parameter returning undefined","body":"### Describe the bug\r\n\r\nWhen using `bind:volume` on video (did not test on audio track), it returns undefined instead of a number from 0-1.\r\n\r\n### Reproduction\r\n\r\nREPL for reproduction based on media element bindings tutorial\r\nREPL: https://svelte.dev/repl/d4acb0c4bf3e42efbc41d289f33ee359?version=3.52.0\r\n^ Click on video and check console, you can keep clicking to see that it only returns undefined.\r\nTutorial: https://svelte.dev/tutorial/media-elements\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 13.0\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 687.88 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.0.0 - /usr/local/bin/node\r\n    Yarn: 1.22.19 - ~/.yarn/bin/yarn\r\n    npm: 8.6.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.110\r\n    Safari: 16.1\r\n  npmPackages:\r\n    svelte: ^3.52.0 => 3.52.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-11-12T08:35:42Z","created_at":"2022-11-09T17:12:21Z","creator_user_login":"Layendan"}
{"number":8001,"title":"Improve click event handler accessibility warning","body":"### Describe the problem\r\n\r\nThere is a this warning when adding a `click` event handler to non-interactive elements:\r\n\r\n> A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event.\r\n\r\nFor users that do not know what this is really about, the only clear instruction here is: Add *more* event handlers.\r\n\r\nWhich is backwards and will not even work half of the time because the element would also have to be focusable and semantics will still be missing for screen readers.\r\n\r\n### Describe the proposed solution\r\n\r\nStart the warning with a suggestion to use the appropriate elements:\r\nUse a `button` element for actions, use an `a` element for navigation.\r\n\r\nA note on `button` behavior in forms may be helpful. I.e. the default `type` of buttons is `submit` and that one might want to add `type=\"button\"` to change this.\r\n\r\n(The documentation for the warning should also include this as the primary suggestion.)\r\n\r\n### Alternatives considered\r\n\r\nN/A\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-01-10T14:27:53Z","created_at":"2022-11-08T12:19:30Z","creator_user_login":"brunnerh"}
{"number":7991,"title":"CSS specificity with imported components vs local ones","body":"### Describe the bug\n\nCSS specificity rules seems to be different for imported components vs local ones. For example the generated styles for imported component `svelte-select` has the same class selector repeated 3 times...\r\n\r\n`.svelte-select.svelte-15ynnp5.svelte-15ynnp5.svelte-15ynnp5` which wins the CSS specificity race vs the generated `:global(...)` css `section.svelte-6ogvl1 .svelte-select`\r\n\r\nRef:\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#increasing_specificity_by_duplicating_selector\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/753f97bc774c4488b4aa2c70fde73ee3?version=3.52.0\n\n### Logs\n\n```shell\nN/A\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 157.03 MB / 8.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.10.0 - ~/.nvm/versions/node/v18.10.0/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 8.19.2 - ~/.nvm/versions/node/v18.10.0/bin/npm\r\n  Browsers:\r\n    Chrome: 107.0.5304.87\r\n    Firefox: 104.0.2\r\n    Firefox Nightly: 106.0a1\r\n    Safari: 16.0\r\n    Safari Technology Preview: 16.0\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-02-26T07:26:34Z","created_at":"2022-11-01T21:25:28Z","creator_user_login":"rob-balfre"}
{"number":7990,"title":"scoping class is incorrectly added to element","body":"### Describe the bug\r\n\r\nUnlike `npm run dev` (gonna call it \"dev\" from now on), `npm run build` (call it \"build\") does not seem to generate all HTML classes required for styling.\r\n\r\nWhen comparing the markup generated, build does omit many classes - probably because it has other rules for checking if a class is needed than dev? Anyway: in most cases that seems to be okay. In some, it leads to broken styles.\r\n\r\n### Reproduction\r\n\r\nA simple table with some CSS:\r\n\r\n    <table>\r\n    <thead>\r\n        <tr>\r\n            <th>Head 1</th>\r\n            <th>Head 2</th>\r\n            <th>Head 3</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <th>Field 1</th>\r\n            <td>Field 2</td>\r\n            <td>Field 3</td>\r\n        </tr>\r\n        <tr>\r\n            <th>Field 1</th>\r\n            <td>Field 2</td>\r\n            <td>Field 3</td>\r\n        </tr>\r\n    </tbody>\r\n    </table>\r\n\r\n    <style>\r\n        tbody tr:hover th,\r\n        tbody tr:hover td {\r\n            background-color: red;\r\n        }\r\n    </style>\r\n\r\nNote that the table body contains both `th` and `td`.\r\n\r\n### npm run dev\r\n\r\nDev adds a class to the `tr`, but only adds it to one of the child elements: `th`. This _looks_ fine, but is already inconsistent. [Screenshot](https://raw.githubusercontent.com/Florinstruct/svelte-table/main/dev.webp)\r\n\r\n\r\n### npm run build\r\n\r\nBuild does not add a class to the `tr` and shows the same inconsistent behaviour with the child elements. The missing class makes this look broken: on hover, the first cell (`th`) does not change background. [Screenshot](https://raw.githubusercontent.com/Florinstruct/svelte-table/main/build.webp)\r\n\r\n\r\n### npm run build without thead\r\n\r\nRemoving the `thead` from the table, `npm run build`, will leave out generated classes from both the HTML and CSS. This looks fine and is probably what the compiler output should be. [Screenshot](https://raw.githubusercontent.com/Florinstruct/svelte-table/main/build_without_thead.webp)\r\n\r\n(I would have linked Stackblitz but this bug applies to `npm run build` only and not `yarn dev`. Sorry, if there's a way to simulate this online and I missed it.)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```Shell\r\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\r\n    Memory: 7.93 GB / 15.71 GB\r\n  Binaries:\r\n    Node: 16.17.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.15 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 8.18.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (106.0.1370.37)\r\n    Internet Explorer: 11.0.22000.120\r\n  npmPackages:\r\n    @sveltejs/adapter-auto: next => 1.0.0-next.86 \r\n    @sveltejs/kit: next => 1.0.0-next.531 \r\n    svelte: ^3.50.1 => 3.52.0 \r\n    vite: ^3.2.0 => 3.2.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nserious, but I can work around it\r\n\r\n### Additional Information\r\n\r\n_No response_","state":"open","updated_at":"2023-02-26T07:25:59Z","created_at":"2022-11-01T18:44:17Z","creator_user_login":"Florinstruct"}
{"number":7983,"title":"function behaves differently if a variable with bindings to a `select` is passed to it","body":"### Describe the bug\r\n\r\nwhen passing a variable that has bindings to a function when iterating over it with an `each` block, even if the parameter is not used in the function, it somehow changes the behavior of the function\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<script>\r\n    const options = ['a', 'b']\r\n    const data1 = [undefined, undefined]\r\n    const data2 = [undefined, undefined]\r\n\r\n    const filter1 = (index, _unused) => {\r\n        console.log(data1)\r\n        return options.filter((env) => [-1, index].includes(data1.indexOf(env)))\r\n    }\r\n    const filter2 = (index) => {\r\n        console.log(data2)\r\n        return options.filter((env) => [-1, index].includes(data2.indexOf(env)))\r\n    }\r\n</script>\r\n\r\n<select bind:value={data1[0]}>\r\n    {#each filter1(0, data1) as option}\r\n        <option value={option}>{option}</option>\r\n    {/each}\r\n</select>\r\n<select bind:value={data1[1]}>\r\n    {#each filter1(1, data1) as option}\r\n        <option value={option}>{option}</option>\r\n    {/each}\r\n</select>\r\n<br />\r\n<select bind:value={data2[0]}>\r\n    {#each filter2(0) as option}\r\n        <option value={option}>{option}</option>\r\n    {/each}\r\n</select>\r\n<select bind:value={data2[1]}>\r\n    {#each filter2(1) as option}\r\n        <option value={option}>{option}</option>\r\n    {/each}\r\n</select>\r\n```\r\n\r\nthe dropdowns behave completely differently, even though the code is exactly the same except for the unused function parameter\r\n\r\n![image](https://user-images.githubusercontent.com/57028336/198509038-74b6d5a0-2858-4484-bb49-8d8c76305821.png)\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (12) x64 11th Gen Intel(R) Core(TM) i5-11500T @ 1.50GHz\r\n    Memory: 3.53 GB / 15.73 GB\r\n  Binaries:\r\n    Node: 18.10.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.19.2 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (103.0.1264.62)   \r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.52.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance (this was the only relevant option, but it seems like a serious issue with the compiler)","state":"open","updated_at":"2022-10-28T08:10:28Z","created_at":"2022-10-28T05:21:55Z","creator_user_login":"DetachHead"}
{"number":7980,"title":"Export node from Component (or Component delegating)","body":"### Describe the problem\n\n_Caution : I am not an English speaker. Sorry in advance in case of misunderstanding._\r\n\r\nA lot of component are wrapper that enhance HTML node.\r\n\r\nBut using a component will restricts access to the node, and we must use event bubbling and restProps to compensate, with limited functionality :\r\n\r\nButton.svelte :\r\n```\r\n<button class=\"btn\" on:click on:mouseover on:mouseout on:focus on:blur {...$$restProps}>\r\n\t<i class='icon'></i>\r\n\t<span><slot/></span>\r\n</button>\r\n```\r\n\r\nBut there are a lot of limitations :\r\n * If the event bubbling is not declared on the component, the handler cannot be used. Here for exemple it's impossible to add a touchstart/touchstop/... event on the button, because these events are not bubbling...\r\n * **$$restProps** allow us to pass any attributes to the button, but without any checks or autocompletion from the compiler/EDI. The attributes are just passed without controls...\r\n * We cannot set a class-name via `class=\"xx\"`\r\n * Others directives cannot be used, like class:name, style:property, use:action, transition:fn/in:fn/out:fn or animate:fn\r\n * We can't directly bind an attribute of the node\n\n### Describe the proposed solution\n\nComponents should be able to delegate this to their base node, by exemple with a special directive **export:this** :\r\n\r\nButton.svelte :\r\n```\r\n<button class=\"btn\" export:this>\r\n\t<i class='icon'></i>\r\n\t<span><slot/></span>\r\n</button>\r\n```\r\n\r\n**export:this** should only be used on the root node of the component.\r\n\r\nWhen a component has an export:this on his root node, it will be associated with the element (for exemple via an attribute of the SvelteComponent class).\r\n\r\nThen, the following rule are applied :\r\n\r\n### Events\r\n\r\n```\r\n<Button on:click={clickHandler} on:touchStart={touchHandler}>click me</Button>\r\n```\r\nWhen an event is attached to the component, it will be added at once : \r\n* to the component via $on() (like normal components, for use with dispatchEvent)\r\n* directly to the node marked via **export:this**\r\n\r\nBonus : prefixing the directive with an '@' should apply the handler only on the node.\r\n```\r\n<Button @on:click={clickHandler}>click me</Button>\r\n```\r\n\r\n### Class\r\n\r\n```\r\n<Button class=\"red\">a red button</Button>\r\n\r\n<style>\r\n    .red {\r\n        background: red;\r\n        color: white;\r\n    }\r\n</style>\r\n```\r\n\r\nUsing a class attribute on the class should add it to the class of the exported node.\r\nIf the component already use a class attribute on the node, it should be merged.\r\n\r\nExemple in this case the button will finally have the following class : \"btn svelte-XXXXX red svelte-YYYYY\"\r\n(where svelte-XXXXX and svelte-YYYYY are the class-marker defined by the Component and the caller).\r\n\r\n### class:name\r\n\r\n```\r\n<script>\r\n    let active = true;\r\n</script>\r\n<Button class:active>click here</Button>\r\n```\r\n\r\nThe class \"active\" will be added/removed on the exported node.\r\nNothing special here except a possible conflict if the component and the caller use the same classname.\r\nI think that the call must be orderer (first the component, and after the caller).\r\nMaybe the compiler could detect it and generate a warning, but i don't think it's such a big deal.\r\n\r\n### style:property\r\n\r\n```\r\n<Button style:border=\"3px solid #000\">click here</Button>\r\n```\r\n\r\nSame thing here that for class:name. Call should be ordered and a possible warning from the compiler in case of conflicts.\r\n\r\n\r\n### use:action\r\n\r\n```\r\n<Button use:mysuperaction={args}>click here</Button>\r\n```\r\n\r\nThe action will be applied on the node.\r\nNothing special here since we can already use several actions on the same node.\r\n\r\n\r\n### transition:fn / in:fn / out:fn\r\n\r\n```\r\n<Button transition:fade>click here</Button>\r\n```\r\nHere it is more complex.\r\nI don't know if it is possible to merge several transitions, or what it will result...\r\nBut I think there's no need to complicate that : I think it's best to use this only on the caller.\r\n\r\nSo if a node is marked with **export:this**, then we can't define a transition on it on the component.\r\n=> Only the caller can do this\r\n\r\nButton.svelte :\r\n```\r\n<!-- ERROR : An element that uses export:this cannot use the transition directive -->\r\n<button class=\"btn\" export:this transition:fade>\r\n     ...\r\n</button>\r\n```\r\n\r\n```\r\n<Button transition:fade>click here</Button> <!-- OK -->\r\n```\r\n\r\n### animate:fn\r\n\r\n```\r\n{#each actions as a(a.id)}\r\n     <Button animate:flip>{a.name}</Button>\r\n{/each}\r\n```\r\n\r\nSame rule as for transitions : only the caller can put an animate directive.\r\nIt's even more obvious here...\r\n\r\n```\r\n<!-- ERROR : An element that uses export:this cannot use the animate directive -->\r\n<button class=\"btn\" export:this animate:flip>\r\n     ...\r\n</button>\r\n```\r\n\r\n### Unknow props\r\n\r\n```\r\n<Button title=\"hello\">click here</Button>\r\n```\r\n\r\nAll unknow props will be directly passed to the node.\r\nEDI should allow autocompletion with all the props of the Component, AND all the attributes of the node.\r\n\r\nBonus : prefixing the attribute with an '@' should pas it directly to the node, event if the component has a similar props.\r\n```\r\n<Button @title=\"hello\" @disabled>click here</Button>\r\n```\r\n\r\n### Read-only binding\r\n\r\nThere are a number of read-only bindings : \r\n* All nodes : `clientWidth`, `clientHeight`, `offsetWidth`, `offsetHeight`\r\n* Media element : `duration`, `buffered`, `played`, `seekable`, `seeking`, `ended`\r\n* Input type files : `files`\r\n\r\nUnless I'm mistaken, I don't see any problem with these binds being performed multiple times.\r\nSo this should be allowed both in the component and from the caller : \r\n\r\nButton.svelte :\r\n```\r\n<button class=\"btn\" export:this \r\n  bind:offsetWidth={width}\r\n  bind:offsetHeight={height}>\r\n  ...\r\n</button>\r\n```\r\nAnd the caller :\r\n```\r\n<Button bind:offsetWidth={width} bind:offsetHeight={height}>click here</Button>\r\n```\r\n\r\n### Two-way binding\r\n\r\nHowever, I don't think it's possible to use several two-way binding on the same attribute.\r\n\r\nI think that the component should have priority.\r\n\r\nInput.svelte :\r\n```\r\n<script>\r\n    let text = ...;\r\n</script>\r\n<input export:this  bind:value={text}>\r\n```\r\n\r\nIf an node marked with export:this has a two-way binding, the caller should not use a binding :\r\n\r\n```\r\n   <!-- ERROR : \"value\" cannot be binded -->\r\n   <Input bind:value={value} /> \r\n```\r\n\r\nIn fact, it shouldn't be able to affect the attribute at all :\r\n\r\n```\r\n   <!-- ERROR : \"value\" cannot be set -->\r\n   <Input value={value} /> \r\n```\r\n\r\nThese restrictions are not so problematic, since we could use the classic binding instead, simply by exporting a variable of the same name.\r\n\r\nInput.svelte :\r\n```\r\n<script>\r\n    export let value;\r\n</script>\r\n<input export:this  bind:value={value}>\r\n```\r\n\r\nAnd then : \r\n```\r\n   <Input bind:value={value} /> <!-- OK -->\r\n```\r\nHere we use the binding to the 'value' field of the component, witch is binded to the node...\r\n\r\n\r\n### Delegate the component\r\n\r\nAs for other directive, the **export:this** directive should be usable on a component (if it's the root element) : \r\n\r\nButton.svelte :\r\n```\r\n<button class=\"btn\" export:this>\r\n     <slot/>\r\n</button>\r\n```\r\n\r\nIconButton.svelte\r\n```\r\n<script>\r\n    import Button from './Button.svelte';\r\n</script>\r\n<Button class=\"with-icon\" export:this>\r\n     <i class=\"icon\"></i>\r\n     <slot/>\r\n</Button>\r\n```\r\n\r\nCaller :\r\n```\r\n<IconButton class=\"my-button\"\r\n   on:click={click} transition:fade\r\n   disabled title=\"Title\">\r\n       click\r\n</IconButton>\r\n```\r\n\r\n\r\n## Named Delegation\r\n\r\nWe can even extend that for any node/component, even if it's not the root node/component, using a name to differentiate them.\r\n\r\nConfirmPanel.svelte\r\n```\r\n<div class=\"panel\" export:this>\r\n\r\n   <div class=\"main\">\r\n        <slot/>\r\n   <div>\r\n\r\n   <div class=\"actions\">\r\n       <button class=\"cancel\" export:this=\"cancel\">Cancel</button>\r\n       <button class=\"valid\" export:this=\"valid\">Ok</button>\r\n   </div>\r\n</div>\r\n```\r\n\r\nIn order to modify the named delegate éléments, we can use a prefix like \"name@\" (where name is the name of the exported element).\r\nExemple :\r\n```\r\n<ConfirmPanel \r\n  class=\"panel-class\" on:click={clickOnPanel}\r\n  cancel@class=\"red\" cancel@on:click={clickOnCancel}\r\n  valid@class=\"blue\" valid@on:click={clickOnValid}>\r\n...\r\n</ConfirmPanel>\r\n```\r\n\r\nOr a specific tag :\r\n\r\n```\r\n<ConfirmPanel>\r\n  <delegate:default class=\"panel-class\" on:click={clickOnPanel} />\r\n  <delegate:cancel class=\"red\" on:click={clickOnCancel} />\r\n  <delegate:valid class=\"blue\" on:click={clickOnValid} />\r\n...\r\n</ConfirmPanel>\r\n```\n\n### Alternatives considered\n\nThe current solution is to use event bubbling, specifics props and/or restProps to compensante.\r\n\r\n```\r\n<script>\r\n    export let clazz = '';\r\n    export let red = false;\r\n    export let border = null;\r\n    export let color = null;\r\n    export let background = null;\r\n    export let offsetWidth;\r\n    export let offsetHeight;\r\n</script>\r\n<button class=\"btn ${clazz}\" class:red\r\n    style:border style:color style:background\r\n    on:click on:mouseover on:mouseout on:focus on:blur\r\n    bind:offsetWidth bind:offsetHeight\r\n    {...$$restProps}>\r\n\t<slot />\r\n</button>\r\n```\r\n\r\nBut : \r\n* it's more verbose, and need specific code in order to simulate each functionnality.\r\n* There is no support for actions, transition or animate.\r\n\r\n\r\nThis could advantageously be replaced by this, while increasing the possibilities :\r\n\r\n```\r\n<button class=\"btn\" export:this>\r\n\t<slot />\r\n</button>\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-10-27T18:03:40Z","created_at":"2022-10-27T14:01:21Z","creator_user_login":"adiguba"}
{"number":7976,"title":"On:mouseenter and on:mouseleave not working in brave browser.","body":"### Describe the bug\r\nThe below code works perfectly in google chrome, but not in the brave browser. The events are only fired once the mouse is clicked.\r\n\r\n```\r\n<style>\r\n  main {\r\n    width: 100px;\r\n    height: 100px;\r\n    background-color: #000000;\r\n  }\r\n</style>\r\n<main\r\n  on:mouseenter={() => console.log('enter')}\r\n  on:mouseleave={() => console.log('leave')}\r\n>\r\n</main>\r\n\r\n```\r\n\r\n\r\n### Reproduction\r\n\r\nClone the following repo, run the server with `npm run dev`, then open the local host instance in both brave and chrome, open the console, and hover over the black box. You should see how chrome prints to console but brave doesn't.\r\n\r\nhttps://gitlab.com/peytonhanel/svelte-on-mouse-enter-bug\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\n$ npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers\r\n\r\n  System:\r\n    OS: Linux 5.15 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz\r\n    Memory: 2.25 GB / 30.91 GB\r\n    Container: Yes\r\n    Shell: 5.8.1 - /usr/bin/zsh\r\n  Browsers:\r\n    Brave Browser: 106.1.44.112\r\n    Chrome: 106.0.5249.119\r\n  npmPackages:\r\n    svelte: ^3.52.0 => 3.52.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2022-10-27T17:42:33Z","created_at":"2022-10-26T20:46:09Z","creator_user_login":"PeytonHanel"}
{"number":7975,"title":"Missing whitespace between elements if one has non-executed \"if\" branch","body":"### Describe the bug\n\nI'm seeing something weird with whitespace... if I add an \"if\" block that won't execute, i.e. the condition is false, it messes up the whitespace collapsing logic somehow. Best to see the repl.\n\n### Reproduction\n\nhttps://svelte.dev/repl/2014f35ca35a47f387d62c2bb510332c?version=3.52.0\r\n\r\nSee example 2 in there. The \"jewel\" components run together.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 5.56 GB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.0 - ~/.nvm/versions/node/v16.14.0/bin/node\r\n    Yarn: 1.22.17 - /opt/brew/bin/yarn\r\n    npm: 8.3.1 - ~/.nvm/versions/node/v16.14.0/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.119\r\n    Firefox: 99.0.1\r\n    Safari: 16.0\r\n    Safari Technology Preview: 16.4\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.50.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-27T19:01:33Z","created_at":"2022-10-26T19:10:39Z","creator_user_login":"johnnysprinkles"}
{"number":7972,"title":"Inline component definitions","body":"### Describe the problem\n\nIntegrating Svelte with certain vanilla JS libraries or components from other systems can be cumbersome due to how only a single component can be defined per file.\r\n\r\nConsider e.g. a data table component that allows rendering its cells via callback functions that get passed data which is fetched asynchronously from a server. To use Svelte for rendering the cells, you can define a new component for each cell or bundle all the logic into one component and use an `{#if}` cascade with some flag that identifies the cell to render.\r\n\r\nA hypothetical example:\r\n```js\r\nimport NameCell from './NameCell.svelte';\r\nimport DescriptionCell from './DescriptionCell.svelte';\r\nimport ActionsCell from './ActionsCell.svelte';\r\n\r\nfunction tableAction(node) {\r\n\tcreateDataTable({\r\n\t\ttable: node,\r\n\t\tdataSource: '/api/data',\r\n\t\tcolumns: [\r\n\t\t\t{ title: 'Name', render: row => renderCell(row, NameCell) },\r\n\t\t\t{ title: 'Description', render: row => renderCell(row, DescriptionCell) },\r\n\t\t\t{ title: 'Actions', render: row => renderCell(row, ActionsCell) },\r\n\t\t],\r\n\t});\r\n}\r\n\r\nfunction renderCell(row, component) {\r\n\tconst cell = document.createElement('div');\r\n\tnew component({ target: cell, props: { row } });\r\n\r\n\treturn cell;\r\n}\r\n```\r\n\r\n```svelte\r\n<!-- NameCell.svelte -->\r\n<script>\r\n\texport let row;\r\n</script>\r\n{row.first} {row.last}\r\n```\r\n\r\n```svelte\r\n<!-- DescriptionCell.svelte -->\r\n<script>\r\n\texport let row;\r\n</script>\r\n{row.description}\r\n```\r\n\r\n```svelte\r\n<!-- ActionsCell.svelte -->\r\n<script>\r\n\texport let row;\r\n</script>\r\n<a href=\"/user/{row.id}\">Details</a>\r\n```\n\n### Describe the proposed solution\n\nAllow defining components within a Svelte file, e.g. by reusing `svelte:fragment` or another special element:\r\n\r\n```svelte\r\n<script>\r\n\tlet NameCell, DescriptionCell, ActionsCell;\r\n\t\r\n\tfunction tableAction(node) {\r\n\t\tcreateDataTable({\r\n\t\t\ttable: node,\r\n\t\t\tdataSource: '/api/data',\r\n\t\t\tcolumns: [\r\n\t\t\t\t{ title: 'Name', render: row => renderCell(row, NameCell) },\r\n\t\t\t\t{ title: 'Description', render: row => renderCell(row, DescriptionCell) },\r\n\t\t\t\t{ title: 'Actions', render: row => renderCell(row, ActionsCell) },\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n\t\r\n\tfunction renderCell(row, component) {\r\n\t\tconst cell = document.createElement('div');\r\n\t\tnew component({ target: cell, props: { row } });\r\n\t\r\n\t\treturn cell;\r\n\t}\r\n</script>\r\n\r\n<svelte:fragment bind:this={NameCell} let:row>\r\n\t{row.first} {row.last}\r\n</svelte:fragment>\r\n<svelte:fragment bind:this={DescriptionCell} let:row>\r\n\t{row.description}\r\n</svelte:fragment>\r\n<svelte:fragment bind:this={ActionsCell} let:row>\r\n\t<a href=\"/user/{row.id}\">Details</a>\r\n</svelte:fragment>\r\n```\r\n\r\n- `bind:this` would cause the fragment to be compiled to a component that is then assigned to the referenced variable.\r\n- `let` bindings are analogous to props (`export let ...` ) on regular components\r\n- Events forwarded with `on:event` could be handled on the component instance via `$on` and the other API instance functions should work the same as for any component if possible\r\n\r\nIdeally it would be possible to also use this to just extract elements locally, e.g. if the hierarchy needs to be dynamic but you do not want to separate common parts into extra files, e.g.:\r\n\r\n```svelte\r\n<script>\r\n\texport let data;\r\n\r\n\tlet Content;\r\n\tlet inList = /* some logic */;\r\n</script>\r\n\r\n<svelte:fragment bind:this={Content}>\r\n\t<h2>{data.title}</h2>\r\n\r\n\t<p>Items: {data.length}</p>\r\n\t{#each data as item}\r\n\t\t<div>...</div>\r\n\t{/each}\r\n</svelte:fragment>\r\n\r\n{#if inList}\r\n\t<ul>\r\n\t\t<li><svelte:component this={Content} /></li>\r\n\t</ul>\r\n{:else}\r\n\t<svelte:component this={Content} />\r\n{/if}\r\n```\r\n\r\nOr maybe it would be possible to assign a `name` so the extra binding and `svelte:component` becomes unnecessary:\r\n\r\n```svelte\r\n<script>\r\n\texport let data;\r\n\r\n\tlet inList = /* some logic */;\r\n</script>\r\n\r\n<svelte:fragment name=\"Content\">\r\n\t<h2>{data.title}</h2>\r\n\t...\r\n</svelte:fragment>\r\n\r\n{#if inList}\r\n\t<ul>\r\n\t\t<li><Content /></li>\r\n\t</ul>\r\n{:else}\r\n\t<Content />\r\n{/if}\r\n```\n\n### Alternatives considered\n\nThe `{#if}` cascade in a single component is probably the best current workaround if many separate components would have to be created otherwise.\r\n\r\nFor the above example that would be something like:\r\n\r\n```svelte\r\n<script>\r\n\texport let row;\r\n\texport let cell;\r\n</script>\r\n\r\n{#if cell == 'name'}\r\n\t{row.first} {row.last}\r\n{:else if cell == 'description'}\r\n\t{row.description}\r\n{:else if cell == 'action'}\r\n\t<a href=\"/user/{row.id}\">Details</a>\r\n{/if}\r\n```\r\n\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-10-24T14:53:49Z","created_at":"2022-10-24T14:18:12Z","creator_user_login":"brunnerh"}
{"number":7969,"title":"Add identifier to accessibility warnings","body":"### Describe the problem\n\nSome accessibility warnings have to be ignored because the compiler might produce false positives. Right now the identifier required to disable the warning is not included in the warning message, which makes it harder to disable it if you do not have additional IDE support (e.g. in the REPL).\r\n\r\n![image](https://user-images.githubusercontent.com/834235/197364266-ebbafa00-d943-4753-a065-355327a8012d.png)\r\n\n\n### Describe the proposed solution\n\nInclude the identifier (e.g. `a11y-label-has-associated-control`) directly in the warning message.\n\n### Alternatives considered\n\nSearching for the warning in the [docs section](https://svelte.dev/docs#accessibility-warnings) and getting the ID from there.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-10-22T22:17:09Z","created_at":"2022-10-22T22:17:09Z","creator_user_login":"brunnerh"}
{"number":7968,"title":"Uncaught TypeError: Cannot read properties of undefined (reading '$$')","body":"### Describe the bug\n\nWhen referencing an external component library no longer works.\r\nThis used to work i previous version of Svelte.\r\n\r\nNow, referencing an external component library throws this error at run time:\r\n\"Uncaught TypeError: Cannot read properties of undefined (reading '$$')\"\r\n\n\n### Reproduction\n\nRepro code is here https://github.com/damianof/large-scale-apps-my-svelte-project/tree/debug-%24%24-issue\r\nSteps:\r\n- npm install and build ./my-component-library\r\n- npm install ./my-svelte-project\r\n- run my-svelte-project with npm start\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (8) arm64 Apple M2\r\n    Memory: 253.02 MB / 8.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.17.0 - /usr/local/bin/node\r\n    npm: 8.19.2 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.119\r\n    Safari: 16.0\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2022-11-10T15:40:16Z","created_at":"2022-10-22T13:34:12Z","creator_user_login":"damianof"}
{"number":7967,"title":"fix: `onDestroy` runs after the component is detached from DOM","body":"Fix: #7888 \r\nThe idea is if there is a parent node instead of push, append an item to the first, and in the case of nested components, the last child will be at the first index.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-10-21T18:01:16Z","creator_user_login":"RaiVaibhav"}
{"number":7962,"title":"Easy workaround to put component classes to childs (without global)","body":"### Describe the problem\r\n\r\nSometimes, we need to use :global() styles\r\nto modify child components\r\nOtherwise, it would not work.\r\n\r\n```\r\n<div>\r\n    <Icon class=\"extra\" />\r\n</div>\r\n\r\n<style>\r\n:global(.extra) {\r\n    color: red;\r\n}\r\n</style>\r\n```\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nMAGIC value $HASH\r\n$HASH is replaced with the value (for example: svelte-urs9w7) of component hash\r\n\r\nThe code could look so:\r\n\r\n```\r\n<div>\r\n    <Icon class=\"{$HASH} extra\" />\r\n</div>\r\n\r\n<style>\r\n.extra {\r\n    color: red;\r\n}\r\n</style>\r\n```\r\n\r\nfinally - Icon class turn to:\r\nclass=\"svelte-urs9w7 extra\"\r\n\r\n\r\n### Alternatives considered\r\n\r\nAlternative: do it automatic\r\n\r\nAdd $HASH to any child component, that use class, defined in style-block\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2022-12-05T00:38:20Z","created_at":"2022-10-19T17:00:27Z","creator_user_login":"dm-de"}
{"number":7961,"title":"`{@append }`, it's `{@html }` but you you use Node.prototype.append()","body":"### Describe the problem\r\n\r\ncurrently use this:\r\n![image](https://user-images.githubusercontent.com/72785466/196729687-1417c7f8-4393-4220-930e-b7ae061060fd.png)\r\n\r\n\r\n### Describe the proposed solution\r\n\r\n`{@append variable}` would use `Node.prototype.append()` or `prepend()` depending on where `{@append }` is located\r\n`append()` and `prepend()` inserts a Node or TextNode depending on the argument passed...\r\n![image](https://user-images.githubusercontent.com/72785466/197351983-ec1eb2ab-87ec-4b63-b802-34d51cbf21ed.png)\r\n\r\n### Alternatives considered\r\n\r\nnone?\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-10-22T16:43:48Z","created_at":"2022-10-19T15:07:03Z","creator_user_login":"cyan-2048"}
{"number":7954,"title":"Proposing expanded use of Modifier","body":"### Describe the problem\r\n\r\nCurrently, the modifier is limited in event handling. Although the Modifier is a very good way to convey attributes of different personalities, it has yet to be applied elsewhere in the opinion that this could lead to fragmentation of coding conventions. I did a little research on this, and there was a place before that asked me to introduce the modifier elsewhere.\r\n\r\nRequest to introduce action modifier:\r\nhttps://github.com/sveltejs/svelte/issues/5759\r\n\r\nRequest to introduce class modifier (slightly different purpose):\r\nhttps://github.com/sveltejs/svelte/issues/6046\r\n\r\nHowever, these issues are all in stale due to the above mentioned problem of fragmentation of conventions. I suggest actively introducing modifiers to many places and making them a new \"convention.\"\r\n\r\n### Describe the proposed solution\r\n\r\nThe proposed conventions below are just examples. I just think it's better to extend the concept of modifier to other places than events, and if you think of better examples or new types of modifier than these examples, please let me know in the comments.\r\n\r\n1. action modifier\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    function action(node: HTMLElement, params: any, modifiers: { [key: string]: boolean }){\r\n        if (modifiers.foo) {\r\n            // // do something special\r\n        }\r\n    }\r\n</script>\r\n\r\n<div use:action|foo|bar />\r\n<div use:action|leet />\r\n```\r\nIt was taken from https://github.com/sveltejs/svelte/issues/5759.\r\n\r\nPassing factors separated by \"|\" is passed to the third factor of the action.\r\n\r\nThis example makes it easy to solve the following issues: https://github.com/sveltejs/svelte/issues/7332\r\n\r\nOf course, you just need to modify your own code on that issue, but the problem occurs when you use an external library (for example, an \"enhance\" from the svelteKit). In the case of an action that receives a function as a prop, such as Enhance, the code will become very dirty to pass on other options. However, if we introduce action modifier, we can solve it very neatly.\r\n\r\n2. class modifier\r\n\r\n```svelte\r\n<div class='whatever-other-classes' class:on|off={isOn} />\r\n<div class:bg-gray-400|bg-red-400={active}>...</div>\r\n```\r\nIt was taken from https://github.com/sveltejs/svelte/issues/6046.\r\n\r\nIf you add an \"|\" after the class and create another class, the class is toggled according to the value of the equation being passed.\r\n\r\n3. style modifier\r\n\r\n```svelte\r\n<div style:content|before=\"*\" style:color|important=\"red\">...</div>\r\n<div style:background|hover=\"red\">...</div>\r\n```\r\n\r\nYou can modify the properties of other selectors inline by attaching selectors such as before and hover after a style, and you can use important to express !important a little more neatly. (It will be more useful when values are passed to variables.)\r\n\r\nIn addition, it will be possible to shorten it more neatly by using the modifier in many places like \"catch\" proposed in https://github.com/sveltejs/svelte/issues/3733. (Introducing modifier to catch specific error)\r\n\r\n### Alternatives considered\r\n\r\nEven if the modifier is not introduced, we will be able to turn over the option in a different way. However, if you introduce a modifier, you will be able to write code in a cleaner way.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-10-16T20:57:21Z","created_at":"2022-10-16T17:38:53Z","creator_user_login":"seo-rii"}
{"number":7953,"title":"A11y: noninteractive element cannot have positive tabIndex value when using tabindex=\"0\"","body":"### Describe the bug\n\nI don't really know where to post this bug but I keep getting the same warning when using tabindex=\"0\":\r\n\r\n![20221015_104155](https://user-images.githubusercontent.com/14960414/195995347-aebf4155-0001-45df-9528-24a331cfdc9b.png)\r\n\r\n![20221015_104249](https://user-images.githubusercontent.com/14960414/195995366-e9637ade-a41e-4450-ad1e-84f5934bbbc2.png)\r\n\r\nIf you know where I should report this bug, let me know!\n\n### Reproduction\n\nAdd a tabindex=\"0\" to any div element and see for yourself :)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 6.0 Arch Linux\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz\r\n    Memory: 29.44 GB / 31.31 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 18.11.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.19.2 - /usr/bin/npm\r\n  Browsers:\r\n    Chromium: 106.0.5249.119\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-01-05T14:22:53Z","created_at":"2022-10-15T15:45:42Z","creator_user_login":"charbelnicolas"}
{"number":7950,"title":"--style-props on SVG components don’t work when passed as slot content","body":"### Describe the bug\n\nWhen a SVG component is passed as slot content, then `--style-props` wraps the markup in a `<div />`, not a `<g />`, which breaks the SVG.\r\n\r\nFor example, say I have a `<Circle />` component that renders a `<circle />`, then this works:\r\n\r\n```svelte\r\n<svg width=50 height=50>\r\n\t<Circle --fill=\"orange\" />\r\n</svg>\r\n```\r\n\r\nBut when I have a `<Svg />` component with a slot, and pass `<Circle />` as slot content:\r\n\r\n```svelte\r\n<Svg>\r\n\t<Circle --fill=\"orange\" />\r\n</Svg>\r\n```\r\n\r\nthen `<circle />` is wrapped in a `<div />`, not a `<g />`, which breaks the SVG.\r\n\n\n### Reproduction\n\nREPL: https://svelte.dev/repl/936c0e4352e249f69747c6635d8b58c0?version=3.51.0\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSee REPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-24T20:13:57Z","created_at":"2022-10-15T06:59:53Z","creator_user_login":"sophiamersmann"}
{"number":7943,"title":"`innerHTML` optimization is not enabled in dev mode","body":"### Describe the bug\n\nIf an element has entirely static contents, Svelte compiles it to a simple component that uses innerHTML in prod mode.\r\nBut in dev mode doesn't use `innerHTML`.\r\nDev and prod mode should generate same runtime code. Otherwise it will be bit difficult to find bugs during dev.\r\n\r\n```svelte\r\n<div>\r\n\t<p>Hi!</p>\r\n</div>\r\n```\n\n### Reproduction\n\nhttps://svelte.dev/repl/33acf2c678134daf9abb68059cc34aa7?version=3.51.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 77.67 MB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.19.0 - ~/.nodenv/versions/14.19.0/bin/node\r\n    Yarn: 1.22.17 - /opt/homebrew/bin/yarn\r\n    npm: 8.18.0 - ~/.nodenv/versions/14.19.0/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.119\r\n    Firefox: 104.0.1\r\n    Safari: 16.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.60.0 \r\n    svelte: ^3.50.1 => 3.51.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-19T19:57:52Z","created_at":"2022-10-14T12:17:46Z","creator_user_login":"baseballyama"}
{"number":7940,"title":"class attributes on meta elements in head are useless","body":"### Describe the bug\r\n\r\nWe have class attributes on meta elements in head.\r\nThe class attributes on meta elements are  useless since head in not visible\r\n\r\n\r\n\r\n### Reproduction\r\n\r\nYou can reproduce the problem using the 'SvelteKit demo app' template => `npm create svelte@latest head-attr-bug`\r\n\r\n<img width=\"566\" alt=\"demo bug svelte class attr head\" src=\"https://user-images.githubusercontent.com/721912/195739380-d0691d2b-af2e-4f54-b4e0-a96efee47939.png\">\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.3.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8557U CPU @ 1.70GHz\r\n    Memory: 87.93 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.17.0 - ~/.nvm/versions/node/v16.17.0/bin/node\r\n    npm: 8.15.0 - ~/.nvm/versions/node/v16.17.0/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.119\r\n    Firefox: 103.0\r\n    Safari: 15.4\r\n  npmPackages:\r\n    svelte: ^3.46.0 => 3.50.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-10-19T20:05:51Z","created_at":"2022-10-14T01:11:32Z","creator_user_login":"enda"}
{"number":7935,"title":"document invalid code when inline svelte bundle in html","body":"### Describe the bug\n\nSee https://github.com/sveltejs/svelte/pull/6822\r\n\r\nMaybe add this add some list of common troubleshooting guide\n\n### Reproduction\n\n-\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n-\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-13T13:07:36Z","created_at":"2022-10-13T13:07:36Z","creator_user_login":"tanhauhau"}
{"number":7929,"title":"Compiler warnings on trying to set styles and classes on <svelte:body />","body":"### Describe the problem\n\nFor the time being while features like changing `<body>` class (#3105) and styles\r\n\r\n```\r\n<svelte:body style=\"max-width: 50em; margin: auto;\" />\r\n```\r\n\r\nare not supported, would be nice if the Svelte compiler showed a warning when people try to do this.\n\n### Describe the proposed solution\n\nRed squiggly lines below and a tooltip saying \r\n\r\n> The <svelte:body> element _only_ allows listening for events that fire on `document.body`. It does not support modifying `document.body`.\r\n\r\n on hovering lines like:\r\n\r\n```\r\n<svelte:body style=\"max-width: 50em; margin: auto;\" />\r\n\r\n<svelte:body class:foo={is_bar} />\r\n```\n\n### Alternatives considered\n\nCurrent state of no compiler warning requires people to search GitHub.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-10-11T20:34:57Z","created_at":"2022-10-11T19:56:31Z","creator_user_login":"janosh"}
{"number":7926,"title":"Removing element from DOM via ‘if’ with ‘bind:value’ and ‘on:change’","body":"### Describe the bug\r\n\r\nDepending on the order of `bind:value` and `on:change`, sometimes the `on:change` won't be called if the element is removed from the DOM.\r\n\r\nIn my example you can see the first select has the `bind` first, and the `on:change` second. When you change the value to `2`, `firstSelectValue` updates to `2` but the function is never called.\r\nFor the second select I reversed the order of the `bind` and the `on:change`, in this example the function gets called as you would expect.\r\n\r\nI know the order of `bind` vs `on:change` matters, but that's not what is being questioned.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/84c4a6a7dc784c8d8b2e7910f55c4acc?version=3.51.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 2.41 GB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.2 - /usr/local/bin/node\r\n    npm: 8.1.2 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.103\r\n    Edge: 106.0.1370.42\r\n    Firefox: 102.3.0\r\n    Safari: 16.0\r\n  npmPackages:\r\n    svelte: 3.44.0 => 3.44.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-10-20T16:48:58Z","created_at":"2022-10-10T22:25:07Z","creator_user_login":"cohansen"}
{"number":7925,"title":"Property syntax using curly braces and quotes is inconsistent.","body":"### Describe the bug\r\n\r\nThere is this special syntax `prop=\"{value}\"` that does not cause string interpolation but instead just passes the value of the expression as is. This is inconsistent with how properties and string interpolation behave in all other cases.\r\n\r\nAs I see it, as soon as quotes are used, the value should be an interpolated string, no magic. Obviously, this would be a significant breaking change, so this is more of a suggestion for the future.\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<Child value=\"42\" /> <!-- string -->\r\n<Child value={42} /> <!-- number -->\r\n<Child value=\"{42}\" /> <!-- (magically) number -->\r\n<Child value=\"{42} \" /> <!-- string -->\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/f1adeee762434b258741b8c562baa3dc?version=3.51.0)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL (Svelte Version 3.51.0)\r\nWindows 10, 64bit\r\nChrome 106.0.5249.103\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-22T12:31:32Z","created_at":"2022-10-10T18:36:49Z","creator_user_login":"brunnerh"}
{"number":7917,"title":"Issue with spring, setting a hard value then immediately setting a regular transition","body":"### Describe the bug\n\nI'm using a spring to scroll a particular line of a song into view. If they scroll more than 1000px it's a little slow, so I jump it ahead 90% of the way immediately and let the last 10% animate. I made a similar repro case animating a red box.\r\n\r\nThe issue is, intermittently, the \"non-hard\" setting doesn't animate. See the repro below.\n\n### Reproduction\n\nhttps://svelte.dev/repl/74f1dbcfe96e4a7b8408ab9e8c0abdd3?version=3.50.1\r\n\r\nIf you move the box less than half way across its range, it just animates normally. If you're moving more than 50, it'll jump it immediately to 90% of the destination value. This works some of the time but not all of the time. Sometimes it snaps and freezes without animating that last 10%. Try clicking between 10 and 90 and 10 and 90, you'll see what I mean.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.6\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 2.02 GB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.0 - ~/.nvm/versions/node/v16.14.0/bin/node\r\n    Yarn: 1.22.17 - /opt/brew/bin/yarn\r\n    npm: 8.3.1 - ~/.nvm/versions/node/v16.14.0/bin/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.103\r\n    Firefox: 99.0.1\r\n    Safari: 16.0\r\n    Safari Technology Preview: 16.4\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-19T19:58:33Z","created_at":"2022-10-07T22:55:43Z","creator_user_login":"johnnysprinkles"}
{"number":7916,"title":"Context functions documentation is misleading/incomplete","body":"### Describe the bug\n\nThe documentation for the various context functions does not really communicate that contexts are inherited by all descendants, referring to \"parent\" and \"children\" rather than ancestors and descendants.\r\n\r\nAdditionally, for context retrieval the *current component* is used as reference *not* the parent or another ancestor.\r\n\r\n[`setContext`](https://svelte.dev/docs#run-time-svelte-setcontext)\r\n> The context is then available to **children** of the component (including slotted content) with `getContext`.\r\n\r\n[`getContext`](https://svelte.dev/docs#run-time-svelte-getcontext)\r\n> Retrieves the context that belongs to the **closest parent** component with the specified `key`.\r\n\r\n[`hasContext`](https://svelte.dev/docs#run-time-svelte-hascontext)\r\n> Checks whether a given `key` has been set in the context of a **parent** component.\r\n\r\n[`getAllContexts`](https://svelte.dev/docs#run-time-svelte-getallcontexts)\r\n> Retrieves the whole context map that belongs to the **closest parent** component.\r\n\r\nI am unsure how exactly this should be phrased instead.\r\n\r\nFor `setContext` I considered the use of \"descendants\" instead of \"children\" but maybe it would be unclear that is referring to the component hierarchy.\r\n\r\nFor the get-functions maybe something along the lines of \"current component or any of its ancestors\" would be better.\r\n\n\n### Reproduction\n\nSee:\r\n- `site/content/docs/04-run-time.md`\r\n- `src/runtime/internal/lifecycle.ts`\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n-\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-19T19:59:04Z","created_at":"2022-10-07T15:09:33Z","creator_user_login":"brunnerh"}
{"number":7913,"title":"Variable is not reactive in several nested slots","body":"### Describe the bug\n\nFor several nested components with slots, the variable stops being reactive.\n\n### Reproduction\n\nhttps://svelte.dev/repl/39bafbb43d2a44af874156720f6e1cad?version=3.50.1\r\n\r\nWhen you click on the first checkbox, the number `3` does not change to `2` everywhere.\r\n\r\nThe correct functionality is probably dependent on the number of nested slots.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nREPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-24T07:43:35Z","created_at":"2022-10-06T08:52:55Z","creator_user_login":"Jahoda"}
{"number":7908,"title":"an option to not use innerHTML and create elements using document.createElement","body":"### Describe the problem\r\n\r\nfor some reason on older browsers, rendering DOM Elements using text is actually slow(this is based on my experience with KaiOS 2.5 app development).\r\n\r\nanother problem with using innerHTML is that it preserves the whitespace and won't minify the html.\r\n```JS\r\ndiv1 = element(\"div\");\r\ndiv1.innerHTML = `<div class=\"cubesLoading svelte-768m3i\"><span></span> \r\n\t\t\t\t\t<span></span></div>`;\r\nattr(div1, \"class\", \"loading svelte-768m3i\");\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\ncreate elements\r\n```JS\r\ndiv1 = element(\"div\");\r\ndiv2 = element(\"div\");\r\nattr(div2, \"class\", \"cubesLoading svelte-768m3i\");\r\ndiv1.appendChild(div2);\r\ndiv2.appendChild(element(\"span\"));\r\ndiv2.appendChild(element(\"span\"));\r\nattr(div1, \"class\", \"loading svelte-768m3i\");\r\n```\r\n\r\n### Alternatives considered\r\n\r\nkeep using innerHTML, but use a template and minify the html... This way a string can still be used, but without having to re-render it.\r\n```JS\r\nconst template = element(\"template\");\r\ntemplate.innerHTML = `<div class=\"cubesLoading svelte-768m3i\"><span></span><span></span></div>`;\r\n\r\n// function context\r\ndiv1 = element(\"div\");\r\ndiv1.appendChild(template.cloneNode(true).content);\r\nattr(div1, \"class\", \"loading svelte-768m3i\");\r\n```\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-10-12T18:37:41Z","created_at":"2022-10-03T12:44:25Z","creator_user_login":"cyan-2048"}
{"number":7907,"title":"Possible for component to modify a CSS selector in its own style block?","body":"### Describe the problem\r\n\r\nMy [`svelte-multiselect`](https://github.com/janosh/svelte-multiselect) component uses the [`:where()` selector](https://caniuse.com/mdn-css_selectors_where) to [make it's default CSS recessive](https://github.com/sveltejs/svelte/issues/6859), i.e. easily overridable with [global CSS](https://github.com/janosh/svelte-multiselect#with-global-css) without having to use the `!important` CSS flag. E.g.\r\n\r\n```css\r\n:where(div.multiselect) {\r\n  ...\r\n}\r\n```\r\n\r\nThe problem is `:where()` is unsupported in [Edge v87 and below](https://caniuse.com/mdn-css_selectors_where), meaning the component default styles are completely missing there.\r\n\r\n### Describe the proposed solution\r\n\r\n[MDN has a neat example](https://developer.mozilla.org/docs/Web/CSS/@supports) showing how to define fall back CSS in case the similar `:is()` selector is unsupported:\r\n\r\n```css\r\n/* This rule won't be applied in browsers which don't support :is() */\r\n:is(ul, ol) > li {\r\n  /* CSS applied when the :is(…) selector is supported */\r\n}\r\n\r\n@supports not selector(:is(a, b)) {\r\n  /* Fallback for when :is() is unsupported */\r\n  ul > li,\r\n  ol > li {\r\n    /* The above expanded for browsers which don't support :is(…) */\r\n  }\r\n}\r\n```\r\n\r\nThe only problem with this solution is I would have to duplicate the component's entire set of default styles (~140 lines) breaking SSOT.\r\n\r\nIs it possible to wrap all of a component's CSS selectors in `:where()` conditional on browser support? I.e. could I check for support in the `script` block and then apply some modification to the `style` block that wraps every selector in `:where()`?\r\n\r\n### Alternatives considered\r\n\r\nIs there a way of making CSS rules easily overridable other than `:where()` with better browser support?\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-10-05T15:33:44Z","created_at":"2022-10-03T01:49:15Z","creator_user_login":"janosh"}
{"number":7905,"title":"Reactivity issue with slot","body":"### Describe the bug\n\nIn this scenario:\r\n\r\nA component \"Composite\" with two levels of slots\r\nA component \"App\" using Composite and implementing the slot with a property P\r\nAn unrelated property is indirectly updated when P change\r\n\r\nThen the slot is not updated properly when P change.\r\n\r\nThis description is probably wrong, has I doesn't understand clearly the cause of this issue. I don't have however a workaround on this (and I don't want to use a key block because the child composant shouldn't be rerendered when P change)\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/cc6a600165ac44da8947dd69c9f3379a?version=3.50.1\r\n\r\nClick on the button: the child component doesn't see the new value of the property.\r\n\r\nIf you remove some element, then it works:\r\n\r\n- The unrelated \"else\" branch\r\n- The dynamic update of the unrelated \"selectedItems\" property\r\n- The \"sub\" slot in \"Composite\" (replaced by a real slot)\r\n\n\n### Logs\n\n```shell\nN/A\n```\n\n\n### System Info\n\n```shell\nREPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-19T12:11:58Z","created_at":"2022-09-30T13:51:11Z","creator_user_login":"j3rem1e"}
{"number":7902,"title":"Transitioning many items in `#each` causes layout thrashing","body":"### Describe the bug\r\n\r\nDuring the creation and running of the transition animations, the DOM is read from and written to. As this happens in sequence for each element in an `#each` block, this causes style recalculation and layout over and over.\r\n\r\nInterestingly this does *not* happen in Firefox.\r\n\r\n\r\n### Reproduction\r\n\r\n```svelte\r\n<script>\r\n\timport { scale } from 'svelte/transition';\r\n\tconst count = 1000;\r\n\tlet show = false;\r\n</script>\r\n\r\n<button on:click={() => show = !show}>Toggle</button>\r\n\r\n{#each { length: count } as i}\r\n\t{#if show}\r\n\t\t<div transition:scale={{duration: 300}}>Item</div>\r\n\t{/if}\r\n{/each}\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/20038d15b718426d972412d824151d7b?version=3.50.1)\r\n\r\n---\r\n\r\nI tried splitting the transition code into two phases: Create animations & run animations\r\n\r\n```patch\r\n  add_render_callback(() => {\r\n  \tif (!div_transition) div_transition = create_bidirectional_transition(div, scale, { duration: 300 }, true);\r\n-  \tdiv_transition.run(1);\r\n+  \tqueueMicrotask(() => div_transition.run(1));\r\n  });\r\n```\r\n\r\nThis fixes the recalc/layout issue (though the creation of the 1000 animations still causes a noticeable delay).\r\n\r\n[REPL](https://svelte.dev/repl/9cb88a850b2447679ff7a3449f14ad47?version=3.50.1)\r\n\r\n### Logs\r\n\r\nFlame chart for transitioning 1000 items at the same time in Chrome:\r\n![image](https://user-images.githubusercontent.com/834235/192903620-76e77bf9-e709-4106-bff4-19d83e796c54.png)\r\n\r\nClose up on the bottom part (small purple blocks are *recalculate style*):\r\n![image](https://user-images.githubusercontent.com/834235/192903741-08e7bc2c-158f-4688-a5bc-cf0a3524805d.png)\r\n\r\n### System Info\r\n\r\nBrowsers:\r\n- ❌ Chrome: 105.0.5195.127 | Windows 10\r\n- ❌ Edge: 105.0.1343.53 | Windows 10\r\n- ❌ Safari: 15.1 & 16.0 | MacOS Monterey/Ventura\r\n- ✔ Firefox: 105.0.1 (64-bit) | Windows 10\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-09-28T23:36:37Z","created_at":"2022-09-28T23:34:18Z","creator_user_login":"brunnerh"}
{"number":7900,"title":"[Bug] Nested mount transition with onMount state update causes double render","body":"### Describe the bug\n\n1. I was making a page `Transition` component using `fly` transition to make pages fly in and out when user navigates.\r\n2. I re-used that component inside one of my pages to animate some content.\r\n3. I added `onMount` hook to the `Transition` component that checks if user prefers reduced motion and disables animation\r\n4. Now If I reload browser window on a page that has nested `Transition` components, page's contents are rendered twice.\n\n### Reproduction\n\nhttps://codesandbox.io/s/spring-star-qllh4m?file=/App.svelte\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 113.00 MB / 32.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.0 - /usr/local/bin/node\r\n    npm: 8.3.1 - /usr/local/bin/npm\r\n  Browsers:\r\n    Firefox Developer Edition: 105.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-09-28T23:04:37Z","created_at":"2022-09-28T14:37:58Z","creator_user_login":"Fxlr8"}
{"number":7897,"title":"Date binding misbehaves (probably depending on locale)","body":"### Describe the bug\r\n\r\nDate binding `input type=date bind:value={date}` behaves weird if system locale (at least on Windows) is not set to MM/DD/YY (so it is broken for DD/MM/YY or YY/MM/DD) when EDITING an existing date. It seems to be working fine when the input is null.\r\n\r\nI tested Chrome, Edge and Firefox.\r\n\r\nWhen it is 1-way bound but instead only `value={date}`, no issue there.\r\n\r\nUsing `on:input={e => date=e}` or `on:change` will not work either, making it even worse/almost impossible to finish entering the date. \r\n\r\n### Reproduction\r\n\r\nWith locale DD/MM/YY I would like to type 30 09 2022 into an already existing date. Make sure there is already some date, eg 20-02-2022, focus out, focus back in, type 30 and the fields start playing up, \"randomly\" resetting. \r\n\r\nUse eg any REPL\r\nhttps://svelte.dev/repl/d1d31660c6414c22ad755bebd862f453?version=3.50.1\r\n\r\n### Logs\r\nNo particular logs, in some cases I was able to make it log\r\n\r\n```\r\nThe specified value \"[object Event]\" does not conform to the required format, \"yyyy-MM-dd\".\r\nprop_dev\t@\tVM233:350\r\nupdate\t@\tVM233:426\r\nupdate\t@\tVM233:177\r\nflush\t@\tVM233:144\r\nPromise.then (async)\t\t\r\nschedule_update\t@\tVM233:109\r\nmake_dirty\t@\tVM233:222\r\neval\t@\tVM233:260\r\nchange_handler\t@\tVM233:472\r\n```\r\n\r\n\r\n### System Info\r\nWindows 11, regional settings set to Czech. Newest Chrome and Firefox. Svelte 3.55.1\r\n\r\n### Severity\r\n\r\nannoyance\r\n\r\n### Workaround\r\n\r\nAs a workaround, use two variables instead of one.\r\n\r\n```\r\n<input type=date value={initialDate} on:change={handleDateChange}>\r\n```\r\n\r\n```\r\nlet otherDate\r\nconst handleDateChange = () => {\r\n    otherDate = event.target.value\r\n}\r\n```","state":"open","updated_at":"2023-02-23T09:01:39Z","created_at":"2022-09-27T14:31:22Z","creator_user_login":"tosinek"}
{"number":7889,"title":"animate directive with duration:0 should be completely disabled / Programmatically disable animate directive","body":"### Describe the problem\r\n\r\nWhen using animate directive I want to be able to programmatically disable it.\r\nUsing duration:0 or even swapping the animate function with an empty one does not completely disable it:\r\n\r\n```\r\nimport { flip } from 'svelte/animate';\r\n$: Flip = animate? flip : () => { return {}}; // tried with null / undefined with no luck\r\n```\r\n\r\n\r\nYou can see in the video that, when using these strategies, there is still something going on that produces a jump when scrolling.\r\n\r\nhttps://user-images.githubusercontent.com/83719715/192047019-64091214-bddc-44e5-a531-a9fa2dcdf100.mov\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nCompletely disable animate directive when there is no animation to play.\r\n\r\n### Alternatives considered\r\n\r\nAllow animate:null or animate:undefined\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-09-27T19:31:18Z","created_at":"2022-09-23T19:55:56Z","creator_user_login":"JuanDouek"}
{"number":7888,"title":"onDestroy runs after the component is detached from DOM when it is wrapped in a DOM element","body":"### Describe the bug\n\nHi!\r\n\r\nIf you have something like:\r\n\r\n```\r\n{#if show}\r\n  <div>\r\n    <CustomComponent />\r\n  </div>\r\n{/if}\r\n```\r\n\r\nand `show` becomes `false`, the `onDestroy` method of `CustomComponent` will fire after it has disappeared from the DOM.\r\nIt works as expected if we remove the wrapping `div`.\r\n\r\nThe reason is that the `if` block calls `node.parentNode.removeChild(node)` on the `div` element before destroying the custom component. When the `div` element is removed from the DOM also the custom component is removed.\r\n\r\n#### Our use case\r\n\r\nWe listen for `blur` events on a component within a list, we remove the listeners in `onDestroy`. \r\nIf the component is removed from the list while holding the focus, the `blur` event will be fired. The event is captured because `onDestroy` has not been called yet, we instead expected the `blur` event to be ignored.\n\n### Reproduction\n\nFull repro (see `App.svelte`, `lib/CustomComponent.svelte` and the instructions below): https://stackblitz.com/edit/vitejs-vite-aaxjzf?file=src/App.svelte\r\n\r\n#### Instructions:\r\n-  add a breakpoint inside Svelte's `detach` function (we search for `node.parentNode.removeChild(node)` in the \"Source\" tab of Chrome DevTools to find it)\r\n- click the \"Hide\" button\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.4 Ubuntu 20.04.5 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz\r\n    Memory: 18.60 GB / 31.24 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 16.17.0 - ~/.asdf/installs/nodejs/16.17.0/bin/node\r\n    npm: 8.15.0 - ~/.asdf/installs/nodejs/16.17.0/bin/npm\r\n  Browsers:\r\n    Brave Browser: 86.1.16.68\r\n    Chrome: 105.0.5195.125\r\n    Chromium: 105.0.5195.125\r\n    Firefox: 104.0\r\n  npmPackages:\r\n    svelte: ^3.50.1 => 3.50.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-23T12:34:57Z","created_at":"2022-09-21T18:37:39Z","creator_user_login":"giacomoran"}
{"number":7881,"title":"Allow slots to forward events","body":"### Describe the problem\r\n\r\nWhen it comes to event forwarding via `createEventDispatcher`, I understand events do not bubble on purpose (citation: #149). A component can fire an event, and consumers of that component can forward the event via `on:eventname`.\r\n\r\nWhen events are fired from a component within a slot, I don't see a way for the slot or wrapping component to receive that event (or forward it further). \r\n\r\n```html\r\n<!-- ComponentOne.svelte -->\r\n<p>This is a page.</p>\r\n<slot on:customevent /> <!-- doesn't forward event -->\r\n\r\n<!-- ComponentTwo.svelte -->\r\n<script>\r\nimport { createEventDispatcher } from 'svelte'\r\nimport ComponentOne from './ComponentOne.svelte'\r\n\r\nconst dispatch = createEventDispatcher()\r\n\r\nconst runCustomEvent = () => dispatch('customevent')\r\n</script>\r\n<ComponentOne>\r\n  <button on:click={runCustomEvent}>Click me!</button>\r\n</ComponentOne>\r\n\r\n<!-- Page.svelte -->\r\n<script>\r\nimport ComponentTwo from './ComponentTwo.svelte'\r\n</script>\r\n\r\n<ComponentTwo />\r\n```\r\n\r\nAbove example as a REPL: https://svelte.dev/repl/5b85c9289d1b4c55baa09a4fc1a8b93c?version=3.50.1\r\n\r\nThe use case I'm facing is in SvelteKit: I have a layout that has an interactive element, the element dispatches an event and the layout has logic to handle that. I want one of the layout's nested pages to dispatch the same event so that the event handler in the layout can receive the dispatched event. \r\n\r\n### Describe the proposed solution\r\n\r\nIf there was a way for slotted components to forward their events, then parent components or pages could listen to those dispatched events. Something like `<slot on:customevent />` could bring a couple of benefits:\r\n\r\n1. Wrapping components can intentionally listen to custom events\r\n2. SvelteKit layouts can listen to events forwarded from pages or page components\r\n\r\n### Alternatives considered\r\n\r\nThe proposed solution is yet another way for children to communicate with their parents, in addition to the alternatives:\r\n\r\n1. Stores consumed by the child and parent. I'm guessing the child would set a flag in the store, and the parent would react to that flag and then unset it\r\n2. Svelte Context API\r\n3. The standard browser [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent) constructor that can bubble events up the DOM\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-06-29T22:17:21Z","created_at":"2022-09-19T19:25:14Z","creator_user_login":"theetrain"}
{"number":7872,"title":"Add support for boolean attribute webkitdirectory","body":"### Describe the problem\n\nFor some reason Svelte doesn't treat all HTML boolean attributes equally.\r\n\r\nThis:\r\n\r\n```\r\n<input type=\"file\" webkitdirectory={true} multiple={true}>\r\n```\r\n\r\nProduces this:\r\n\r\n```\r\n<input type=\"file\" webkitdirectory=\"true\" multiple>\r\n```\r\n\r\nMaybe because of the property having `webkit` in its name, it sounds like it's something unique for Safari or Chrome, but it has been supported in all browsers for many years already.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\r\n\r\nhttps://caniuse.com/mdn-api_htmlinputelement_webkitdirectory\r\n\r\nOf course most browsers will accept `webkitdirectory=\"true\"` but this goes [against the spec](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes):\r\n\r\n> The values \"true\" and \"false\" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether.\n\n### Describe the proposed solution\n\nThis:\r\n\r\n```\r\n<input type=\"file\" webkitdirectory={true} multiple={true}>\r\n```\r\n\r\nShould produce this:\r\n\r\n```\r\n<input type=\"file\" webkitdirectory multiple>\r\n```\n\n### Alternatives considered\n\nRight now the only alternative I can think of is doing like this which is quite bad:\r\n\r\n```\r\n{#if acceptDirectories}\r\n  <input type=\"file\" webkitdirectory>\r\n{:else}\r\n  <input type=\"file\">\r\n{/if}\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-06-30T14:17:46Z","created_at":"2022-09-15T19:54:14Z","creator_user_login":"PierBover"}
{"number":7870,"title":"Svelte Runtime Error when rendering `innerHTML` with `@html`","body":"### Describe the bug\r\n\r\nA Svelte Runtime Error occurs when updating a value with the `innerHTML` of a `contenteditable` element and rendering it with `{@html value}`.\r\n\r\nMy goal is to sync the content of the `contenteditable` div with a global store that stores the `innerHTML` of the div element.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/82e690504d9a4c099ce349022b9a8d4a?version=3.50.1\r\n\r\nStep 1: input a letter into the `contenteditable` field (it will duplicate the letter)\r\nStep 2: Clear the input field\r\nNow the error appears in the console\r\n\r\n### Logs\r\n\r\n```shell\r\nError: Uncaught (in promise): Cannot read properties of null (reading 'removeChild')\r\n```\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.15 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n    CPU: (16) x64 12th Gen Intel(R) Core(TM) i5-12500H\r\n    Memory: 20.54 GB / 31.03 GB\r\n    Container: Yes\r\n    Shell: 5.8.1 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 16.15.1 - ~/.volta/tools/image/node/16.15.1/bin/node\r\n    npm: 8.11.0 - ~/.volta/tools/image/node/16.15.1/bin/npm\r\n  Browsers:\r\n    Brave Browser: 105.1.43.89\r\n    Firefox: 104.0.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-09-16T11:24:28Z","created_at":"2022-09-15T15:48:59Z","creator_user_login":"macmillen"}
{"number":7868,"title":"JS access to --style-props","body":"### Describe the problem\r\n\r\nSometimes I want to take a passed in `--style-prop` and use that value to compute a new value. `--style-props` currently can be used to override values set in a component's `<style>`, and the only way to override them (that I know of) is via `window.getComputedStyle()` that cannot run during Serverside Rendering.\r\n\r\nExample: \r\n\r\n```html\r\n<!-- Page.svelte -->\r\n<Component --text-color=\"red\">Some text</Component>\r\n\r\n<!-- Component.svelte -->\r\n<script>\r\nconst createHighContrastBG = () => { /* ... */ }\r\n</script>\r\n<div \r\n  style=\"color: var(--text-color);\r\n  background-color: {createHighContrastBG(--text-color)}\"> <!-- not possible -->\r\n  <slot />\r\n</div>\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nA way to access `--style-props` via JS, such as `$$styleProps` or within `$$restProps`. This way, CSS variables can be exposed via `--style-props`, and can be potentially SSR-friendly.\r\n\r\n```diff\r\n<!-- Page.svelte -->\r\n<Component --text-color=\"red\">Some text</Component>\r\n\r\n<!-- Component.svelte -->\r\n<script>\r\nconst createHighContrastBG = () => { /* ... */ }\r\n</script>\r\n<div \r\n  style=\"color: var(--text-color);\r\n+ background-color: {createHighContrastBG($$styleProps['--text-color'])}\">\r\n  <slot />\r\n</div>\r\n```\r\n\r\n### Alternatives considered\r\n\r\n1. Here's a workaround REPL using `window.getComputedStyle()`: https://svelte.dev/repl/7b566ad5f79a403291106ae3bf048057?version=3.50.1\r\n2. Use regular props and define styles inline. For the above example, that could mean setting a `textColor` prop.\r\n3. Concede that `--style-props` is meant to expose overridable component CSS variables, to be kept simple and SSR-friendly. The concept of 'computed style props' may be regarded as a 'second set of props' and I can see how that may conflate the responsibilities of props and `--style-props` leading to potentially confusing component APIs in UI libraries.\r\n\r\nThanks for having this discussion.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-09-16T17:36:00Z","created_at":"2022-09-15T04:33:09Z","creator_user_login":"theetrain"}
{"number":7866,"title":"Reactive statement that performs cleanup","body":"### Describe the problem\n\nI often have code that looks a bit like this:\r\n\r\n```typescript\r\nconst myStore = getMyStore();\r\n\r\nlet cleanup;\r\nlet value;\r\n\r\nasync function initialize(myValue: MyType) {\r\n    cleanup?.();\r\n\r\n    /* do some stuff with myValue */\r\n\r\n    cleanup = () => {/* cleanup performed on next call */};\r\n    value = myValue;\r\n}\r\n\r\n$: initialize($myStore);\r\n```\r\n\r\nTypically, MyType will be an HTMLElement, and I attach event listeners. Other times, I subscribe to stores inside of the initialize functions, or I set up Mutation observers, etc. etc.\r\n\r\nI wonder if this is a common pattern that warrants a bit syntactic sugar.\n\n### Describe the proposed solution\n\nTo simplify this, you could write the following:\r\n\r\n```typescript\r\nconst myStore = getMyStore();\r\n\r\nlet value;\r\n\r\nasync function initialize(myValue: MyType) {\r\n    /* do some stuff with myValue */\r\n\r\n    value = myValue;\r\n\r\n    return () => {/* cleanup performed on next call */};\r\n}\r\n\r\n$$: initialize($myStore);\r\n```\r\n\r\n`$$` here behaves very similiar to `$`, except that if you return a value to it, it will automatically invoke it on the next time it is called.\r\n\r\nIn cases where there's no return value, it behaves identically to `$`.\n\n### Alternatives considered\n\nJust continue writing the boilerplate\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-12-24T12:50:18Z","created_at":"2022-09-13T21:19:28Z","creator_user_login":"hgiesel"}
{"number":7864,"title":"feat: disallow calling `getContext` inside element","body":"Fixes #7549\r\n\r\nThrowing error when using `getContext` inside element, eg: attribute, text content, ...\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [ x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:27Z","created_at":"2022-09-13T06:02:59Z","creator_user_login":"tanhauhau"}
{"number":7851,"title":"Introduce svelte:composable","body":"### Describe the problem\n\nSvelte handles composability on the logic level quite well, with first-class support for stores. But composability on the HTML element level is a little bit lacking. The `use:action` feature is great for adding composable features, but to define an action you just write a function, without the benefit of any sveltiness. But things like classes and event listeners are inherently composable, so it's a shame that it's not simple to make use of that in an ergonomic way.\r\n\r\nAlong with this, IMO we think too quickly of reusable *components* instead of *composition*. For an example, consider the [Svelte Material UI](https://github.com/hperrin/svelte-material-ui) library (not trying to pick on this, it just illustrates the point). If you look at the [svelte component](https://github.com/hperrin/svelte-material-ui/blob/master/packages/button/src/Button.svelte) for a `MaterialButton`, you'll see all the hallmarks of a *component* that should be a *composable*; things like:\r\n\r\n* `<svelte:component this={component}`\r\n* `use={[/* ..., */ forwardEvents, ...use ]}`\r\n* The dreaded `{...$$restProps}`\r\n* `{href}` (*just in case* the consumer wants to use a link, etc.)\r\n\r\nIn summary, the author of this reusable component had to consider: what are all the ways a consumer of this component might conceivably want to use it? I need to make sure I make the underlying semantic element dynamic, *pass down* all the correct attributes and *forward* all the expected events, merge all the internal and external classes, etc etc. This should not be.\n\n### Describe the proposed solution\n\nI would like the ability to write a svelte composable in a similar way to the way we write svelte components, with full compiler support, that compiles to an Action function instead of a Component. For type reasons, it would probably have to be a separate file extension, something like `.svelte-composable` (way too long, I know). In composable files, I would envision that we can have `<script>`, `<script context=\"module\">`, and `<style>` blocks as normal, but instead of other HTML elements we would have a single `<svelte:composable>` element. Here's a simplified example of the code I would want to write when defining something like a material button:\r\n\r\n```svelte\r\n<!-- ripple.svelte-composable -->\r\n\r\n<script>\r\nfunction handleClick(event) {\r\n  // Do the ripple\r\n}\r\n</script>\r\n\r\n<svelte:composable class=\"ripple-container\" on:click={handleClick} />\r\n\r\n<style>\r\n.ripple-container {\r\n  /* ... */\r\n}\r\n</style>\r\n```\r\n\r\n```svelte\r\n<!-- button.svelte-composable -->\r\n\r\n<script>\r\nimport ripple from \"./ripple.svelte-composable\";\r\n</script>\r\n\r\n<svelte:composable class=\"material-button\" use:ripple />\r\n\r\n<style>\r\n.material-button {\r\n  /* ... */\r\n}\r\n</style>\r\n```\r\n\r\n```svelte\r\n<!-- raisedButton.svelte-composable -->\r\n\r\n<script>\r\nimport button from \"./button.svelte-composable\";\r\n</script>\r\n\r\n<svelte:composable class=\"material-button--raised\" use:button />\r\n\r\n<style>\r\n.material-button--raised {\r\n  /* ... */\r\n}\r\n</style>\r\n```\r\n\r\n```svelte\r\n<!-- userland.svelte -->\r\n\r\n<script>\r\nimport raisedButton from \"some-material-lib/raisedButton.svelte-composable\";\r\n</script>\r\n\r\n<button use:raisedButton>\r\n  I'm a button\r\n</button>\r\n\r\n<a use:raisedButton href=\"#\">\r\n  I'm a link\r\n</a>\r\n```\n\n### Alternatives considered\n\nNo alternatives that I've personally considered, but there's a lot of considerations that would be non-trivial. Here's a few:\r\n\r\n1. How would style scoping be handled?\r\n2. Could a `<svelte:composable>` element have children? What exactly would that mean (order of insertion, etc)?\r\n3. How difficult would it be to update the compiler to handle this?\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-09-10T10:28:12Z","created_at":"2022-09-10T06:09:03Z","creator_user_login":"mimbrown"}
{"number":7850,"title":"Clearing bind:this array race condition?","body":"### Describe the bug\n\nClearing a bind:this array results in the array being leftover with nulls for each item it used to have. \r\n\r\nThis may be some sort of race condition.  I observed adding a timeout to the Clear which reversed the log order. \r\n\r\n```\r\n<button on:click=\"{()=> {\r\n  items = [];\t\t\r\n\r\n  setTimeout(() => {\r\n    elements = [];\r\n  }, 0);\r\n}}\">\r\n\tClear\r\n</button>\r\n```\r\n```\r\n(3) [ null ,null ,null ]\r\n(0) [ ]\r\n```\n\n### Reproduction\n\nhttps://svelte.dev/repl/77380002b11848b687b527dcec13649e?version=3.50.1\n\n### Logs\n\n```shell\nLogging the array will show 2 entries. The first item is what I would have expected the result to be, but it was left with 3 null items from what it used to have instead.\r\n\r\n(0) [ ]\r\n(3) [ null ,null ,null ]\n```\n\n\n### System Info\n\n```shell\nNA\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-09-10T15:17:15Z","created_at":"2022-09-09T19:50:13Z","creator_user_login":"Jojoshua"}
{"number":7844,"title":"Batched store updates","body":"### Describe the problem\n\n(Copied from my [stackoverflow post](https://stackoverflow.com/questions/73588111/changing-multiple-parents-of-svelte-derived-store-at-same-time))\r\n\r\nI have a Svelte app with a relatively complex reactivity model. Data for different parts of the app is loaded from an API based on the state of potentially many parts of the UI, and changing one part of that state often requires simultaneous changes to other parts.\r\n\r\nA simple example would be a UI with a search box, loaded results, and pagination. If you search for something, click through a few pages of results, and then change your search query, the new results should start back at page 1.\r\n\r\nIn terms of Svelte stores, `results` is a derived store with dependencies on writable stores `searchText` and `page`:\r\n\r\n```svelte\r\n<script>\r\n\timport { writable, derived } from 'svelte/store';\r\n\t\r\n\tlet searchEl;\r\n\t\r\n\tconst searchText = writable('');\r\n\tconst page = writable(1);\r\n\t\r\n\tconst results = derived([searchText, page], ([theSearchText, thePage], set) => {\r\n\t\tconsole.log(`calling API with \"${theSearchText}\", page ${thePage}`);\r\n\t\t// network request to API happens here\r\n\t\tset([]);\r\n\t}, []);\r\n\t\r\n\tfunction doSearch() {\r\n\t\t$searchText = searchEl.value;\r\n\t\t$page = 1;\r\n\t}\r\n\t\r\n\tfunction advancePage() {\r\n\t\t$page = $page + 1;\r\n\t}\r\n</script>\r\n\r\n<p>\r\n\t<label>\r\n\t\tsearch text:\r\n\t\t<input type=\"text\" on:keyup=\"{doSearch}\" bind:this=\"{searchEl}\" />\r\n\t</label>\r\n</p>\r\n\r\n<p>\r\n\t(results for page {$page} of \"{$searchText}\" would go here)\r\n\t{$results}\r\n</p>\r\n\r\n<p>\r\n\tpage: {$page} <button type=\"button\" on:click=\"{advancePage}\">next</button>\r\n</p>\r\n```\r\n\r\nREPL: https://svelte.dev/repl/17ac70e4d4144616aa8af5c01e67a4cc?version=3.50.0\r\n\r\nNote what happens in the console if you enter a search term, advance the page, and then search for something else:\r\n\r\n```\r\ncalling API with \"a\", page 1\r\ncalling API with \"a\", page 2\r\ncalling API with \"a\", page 3\r\ncalling API with \"b\", page 3\r\ncalling API with \"b\", page 1\r\n```\r\n\r\nYou can see that when the search text is changed from \"a\" to \"b\", the derived store triggers an unnecessary update for page 3 of \"b\". While this makes perfect sense (nothing in my code says that the updates to the two writable stores should happen simultaneously), it's obviously inefficient and in my case causes an extra network request.\r\n\n\n### Describe the proposed solution\n\nOther reactivity libraries like [SolidJS](https://www.solidjs.com/tutorial/reactivity_batch), [effector](https://effector.dev/docs/advanced-guide/computation-priority/), and [Preact Signals](https://github.com/preactjs/signals#batchfn) include utilities that let you batch updates to stores, effectively solving this problem.\r\n\r\nIs this something that could be easily added to Svelte? Right now I'd be thrilled just to have a utility function I could drop in to my app to approximate other libraries' batch update solution if this is possible.\n\n### Alternatives considered\n\n* Combine `searchText` and `page` into a single writable object. That kind of design pattern isn't going to be sustainable or efficient in a more complicated app as \"global\" state objects must become more numerous/bigger.\r\n* Use `$: ` blocks instead of stores, which again isn't a good solution for complicated apps where reactive data is extracted from components into external JS/TS files.\r\n* Debounce derived store updates using locks and timeouts. This introduces small, unnecessary delays in setting derived values.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-09-23T00:01:36Z","created_at":"2022-09-07T14:16:38Z","creator_user_login":"dpmccabe"}
{"number":7829,"title":"Svelte Magic","body":"### Describe the problem\n\nSvelte statements execute on any variable change, do not adhere to the rules of if statements or logical operators, which causes unnecessary processing and is misleading. For example, having a sort of timeout or interval within a svelte reactive statement.\r\n<br/>\r\n\r\n```js\r\nlet scrollbarHidden, animationFrameId\r\n\r\n// runs when scrollbarHidden or animationFrameId changes \r\n$: if (scrollbarHidden) cancelAnimationFrame(animationFrameId);\r\n\r\nfunction animationFrame() {\r\n    animationFrameId = requestAnimationFrame(animationFrame);\r\n}\r\n```\r\n```js\r\n// runs when scrollbarHidden or animationFrameId changes \r\n$: scrollbarHidden && cancelAnimationFrame(animationFrameId);\r\n```\r\n\r\n```js\r\n// runs when scrollbarHidden or animationFrameId changes \r\n$: scrollbarHidden ? cancelAnimationFrame(animationFrameId) : {}\r\n```\n\n### Describe the proposed solution\n\na svelte, smarter magic that knows what to look out for It would comprehend If else statements, Logical operators (**||**, **&&**, or **??**), and Nullish coalescing operator (**??** or position. x **??=** '10px')\n\n### Alternatives considered\n\nAnother option would be to tell Svelte what to look out for.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-09-13T04:21:58Z","created_at":"2022-09-03T01:58:19Z","creator_user_login":"Eudritch"}
{"number":7824,"title":"Help coverage instrumenters exclude compiler's helper functions","body":"### Describe the problem\r\n\r\nWhen transpiled Svelte code is instrumented with `istanbul`, there are a lot of unrelated statements and branches in the coverage report. The source maps received from `svelte/compiler` include mappings which I think are intended for debugging breakpoints. However when we instrument the transpiled svelte code with `istanbul`, these unnecessary if-blocks and other statements end up getting instrumented. See https://github.com/vitest-dev/vitest/issues/1893.\r\n\r\nFor inspecting sourcemaps of transpiled and instrumented svelte file, see https://gist.github.com/AriPerkkio/8399007031cb747b2811c07358b8daa2.\r\n\r\nHere is one example where the file is completely covered by a test. However statements and branches are not 100%. We can see uncovered code highlighted in results.\r\n\r\n![coverage-list svelte](https://user-images.githubusercontent.com/14806298/187742638-e2535366-f59a-4b68-aec2-bb32c9409d0e.png)\r\n\r\nThe reason why there is an if-block in middle of `<li>{user}</li>` is due to having an actual if-statement in transpiled code.\r\n\r\n![svelte-coverage-mapping](https://user-images.githubusercontent.com/14806298/187742662-6205ec9c-cadc-4730-8f67-25776a3b9ac8.png)\r\n\r\nThose other red-highlighted blocks are marked as uncovered, as source map points to a helper function which is not executed. \r\n\r\n### Describe the proposed solution\r\n\r\nIf those source mappings are unnecessary, those could be just removed from the mappings. But as I think those are indeed used for debugging, those cannot be simply removed.\r\n\r\nBut svelte compiler could be placing hints from instrumenters. I'm 99% sure I've seen some code transformation tools placing `/* istanbul ignore, c8 ignore */` comments around their internal helper functions. Could svelte do the same?\r\n\r\n```js\r\n// This is the if-block from example above\r\n\r\np(ctx, dirty) {\r\n  /* istanbul ignore, c8 ignore */ // <---- This would be added by svelte\r\n  if (dirty & /*users*/ 1 && t_value !== (t_value = /*user*/ ctx[1] + \"\")) set_data(t, t_value);\r\n},\r\n```\r\n\r\nSvelte is already adding some extra comments, e.g. variable names, in the transpiled code. Adding some more comments should not be an issue.\r\n\r\nI have zero knowledge about svelte's internals so I'm not sure whether these cases can easily be identified.\r\n\r\n### Alternatives considered\r\n\r\nI don't think any coverage tool is currently working perfectly for svelte. \r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-01-24T19:02:43Z","created_at":"2022-08-31T17:43:37Z","creator_user_login":"AriPerkkio"}
{"number":7823,"title":"Support `bind:value` for `selectmenu`","body":"### Describe the problem\r\n\r\nWhen trying to use `bind:value` for the HTMLElement `selectmenu` ([link](https://open-ui.org/prototypes/selectmenu)), i get an `invalid-binding` error message: 'value' is not a valid binding on <selectmenu> elements.\r\n\r\n### Describe the proposed solution\r\n\r\nAdd support for the `selectmenu` element\r\n\r\n### Alternatives considered\r\n\r\n```js\r\n<script>\r\n  let selected;\r\n</script>\r\n\r\n<selectmenu on:change={(e) => (selected = e.target.value)}>\r\n  <option>Option 1</option>\r\n  <option>Option 2</option>\r\n  <option>Option 3</option>\r\n</selectmenu>\r\n```\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-09-04T03:38:28Z","created_at":"2022-08-31T11:52:58Z","creator_user_login":"tbdrz"}
{"number":7822,"title":"Make `context` type less specific","body":"### Describe the problem\n\nCurrently the `context` property of the component constructor is typed as `Map<any, any>`, however at runtime this is not actually required.\r\n\r\nAn array of tuples is also sufficient, but to appease the TypeScript compiler a new `Map` has to be constructed or the error has to be ignored using a `@ts-` directive. Arrays are less verbose and allow contexts to be easily combined using `concat`.\r\n\r\nBoth of these work in practice:\r\n\r\n```ts\r\nnew Child({\r\n\ttarget: document.body,\r\n\tcontext: [['value', 'Child 1']],\r\n});\r\nnew Child({\r\n\ttarget: document.body,\r\n\tcontext: new Map([['value', 'Child 2']]),\r\n});\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/18e4509781724bb7a9703d21dbb461c6?version=3.49.0)\r\n\r\nThe TS error for the array is:\r\n\r\n> Type `[string, string][]` is missing the following properties from type `Map<any, any>`: clear, delete, get, has, and 3 more. ts(2740)\n\n### Describe the proposed solution\n\nMaybe `context` could be typed as `Iterable<readonly [any, any]>`, this would fit an array of tuples and `Map`.\r\n\n\n### Alternatives considered\n\nMaybe the type could be overridden locally somehow\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-08-30T18:42:57Z","created_at":"2022-08-30T18:24:33Z","creator_user_login":"brunnerh"}
{"number":7821,"title":"Unexpected reactivity behaviour when using conditional assignments","body":"### Describe the bug\r\n\r\nWhen using conditional assignments (eg. `a ??= b`) inside functions, the output JavaScript will invalidate the assigned variable regardless of whether the conditional for the assignment, was met (eg. `a == null`).\r\n\r\n[REPL](https://svelte.dev/repl/6a156fbab8064754acf42425447dba12?version=3.49.0)\r\n\r\n### Reproduction\r\n\r\n```html\r\n<script>\r\n\t/* Repro 1 ----------------------------------------------- */\r\n\tlet name = 'world';\r\n\t\r\n\tfunction a() {\r\n\t\tname ??= {}; \r\n\t\t// ^ outputs:\r\n\t\t//   `$$invalidate(0, name ??= {});`\r\n\t\t//   instead of:\r\n\t\t//   `name ?? $$invalidate(0, name = {});`\r\n\t}\r\n\r\n\t/* Repro 2 (Same as REPL) -------------------------------- */\r\n\tlet a1;\r\n\tlet b1;\r\n\t\r\n\t$: console.log('a1: ', a1);\r\n\t$: console.log('b1: ', b1);\r\n\t\r\n\ta(); // should log 'a1: {}'\r\n\tsetTimeout(a, 100); // shouldn't log, but logs 'a1: {}'\r\n\t\r\n\tb(); // should log 'b1: {}'\r\n\tsetTimeout(b, 100); // shouldn't log, doesn't log\r\n\t\r\n\tfunction a() {\r\n\t\ta1 ??= {};\r\n\t}\r\n\t\r\n\tfunction b() {\r\n\t\tb1 ?? (b1 = {});\r\n\t}\r\n</script>\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (16) x64 AMD Ryzen 9 4900HS with Radeon Graphics\r\n    Memory: 3.93 GB / 15.42 GB\r\n  Binaries:\r\n    Node: 16.14.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.3.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (104.0.1293.70)\r\n    Internet Explorer: 11.0.22000.120\r\n  npmPackages:\r\n    svelte: ^3.49.0 => 3.49.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-08-30T18:29:19Z","created_at":"2022-08-30T18:09:22Z","creator_user_login":"Sxxov"}
{"number":7807,"title":"SVG elements not displaying when passed as slot content","body":"### Describe the bug\n\nIf you have an SVG component that allows you to pass in child content as a slot like so...\r\n\r\n```html\r\n<svg width=\"150\" height=\"50\">\r\n  <slot></slot>\r\n</svg>\r\n```\r\n\r\n...no content will display if you pass in content wrapped in an anchor tag like so...\r\n\r\n```html\r\n<script>\r\n  import Svg from './Svg.svelte';\r\n</script>\r\n\r\n<Svg>\r\n  <a href=\"https://example.com\">\r\n    <path d=\"M0,0L50,50Z\" stroke=\"#000\" stroke-width=\"2\"></path>\r\n  </a>\r\n</Svg>\r\n```\r\n\r\n However, if you don't use an SVG component and simply write plain SVG, everything displays fine.\r\n\r\n```html\r\n<svg width=\"150\" height=\"50\">\r\n  <a href=\"https://example.com\">\r\n    <path d=\"M0,0L50,50Z\" stroke=\"#000\" stroke-width=\"2\"></path>\r\n  </a>\r\n</svg>\r\n```\r\n\r\nIt seems that something is breaking when the child content gets sent through the slot. \n\n### Reproduction\n\nhttps://svelte.dev/repl/08270639a2154ea18192cbdf30861da8?version=3.49.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nREPL\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2022-12-25T16:57:03Z","created_at":"2022-08-25T06:25:53Z","creator_user_login":"mhkeller"}
{"number":7806,"title":"Await blocks not behaving as expected","body":"### Describe the bug\r\n\r\nAt random times, await blocks bugs and show the double number of columns in a table. This persists after the data is loaded.\r\n\r\n![image](https://user-images.githubusercontent.com/16574952/186059588-17ceae17-f5c7-437c-b7bd-085d291dbaaa.png)\r\n\r\nThe behaviour seems to reproduce in production only, but not for now in local development servers. Maybe something with cache??\r\n\r\n\r\n### Reproduction\r\n\r\n1. Build the application\r\n2. Start application\r\n3. Access the application throw a browser (ie: Chrome)\r\n4. Refresh the browser\r\n5. Wait for data updates.\r\n![image](https://user-images.githubusercontent.com/16574952/186059876-7c23c415-15cf-4bd5-9806-fd4f940a8a03.png)\r\n\r\n\r\n### Logs\r\n\r\n```shell\r\nBoth server and browser console logs show no errors.\r\n```\r\n\r\n\r\n### System Info\r\n\r\nUser context:\r\n```shell\r\nUbuntu 20.04.4 (64-bit)\r\nChrome Version 101.0.4951.54 (Official Build) (64-bit)\r\n```\r\n\r\nServer context:\r\nI'm running the application in an EC2 t2.small Instance with Amazon Linux.\r\n (npm 6.14.15\r\n\"svelte\": \"^3.17.3\"\r\n\"rollup\": \"^2.3.4\"\r\n\"webpack\": \"^4.46.0\"\r\nnode v12.22.9\r\nnpx 6.14.15)\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-10-19T20:17:14Z","created_at":"2022-08-23T03:08:37Z","creator_user_login":"codewithpatelo"}
{"number":7804,"title":"Changing the Svelte-inserted comments in the DOM","body":"### Describe the problem\n\nSvelte seems to insert the names of the components (based on the file name) above where the component appears in the DOM\r\n![image](https://user-images.githubusercontent.com/5701052/185780045-03069c84-b7cb-49cc-9b5a-14a32f60d190.png)\r\n\r\nFor people that organize their components with folders (with the actual component being named index.svelte), this ends up not being a helpful feature.\r\n\r\nI was looking for a place to configure this but it doesn't seem to be mentioned anywhere in the docs (is it actually already possible?)\n\n### Describe the proposed solution\n\nExpose the ability to configure this in <svelte:options> (I thought the 'tag' option might have been it, but I've tried changing that and it doesn't affect the comment).\n\n### Alternatives considered\n\nMaybe it already exists but I couldn't figure it out from the docs.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-08-21T07:17:35Z","created_at":"2022-08-21T07:17:35Z","creator_user_login":"DoisKoh"}
{"number":7794,"title":"Reactive operator is invoked when a store variable and an assignment to the bound variable are present","body":"### Describe the bug\r\n\r\nThe reactive operator `$:` is invoked on text input when a store variable (but not local variable) and an assignment to the bound variable are present. This means that I can't just change a local variable to a store variable as part of the refactoring because that will break my code.\r\n\r\n### Reproduction\r\n\r\n**App.svelte:**\r\n```\r\n<script>\r\n\timport {modal} from './store.js'\r\n\tlet name = ''\r\n\t$: if ($modal.opened) {\r\n\t\tname = 'test'\r\n\t\tconsole.log('invoked')\r\n\t}\r\n</script>\r\n\r\n<input bind:value={name}>\r\n```\r\n\r\n**store.js:**\r\n```\r\nimport {writable} from 'svelte/store'\r\n\r\nexport const modal = writable({\r\n\topened: true,\r\n})\r\n```\r\n\r\nREPL: https://svelte.dev/repl/624e932ca8d74649a0c8f3a0a65c2c49?version=3.49.0\r\n\r\n# Steps to reproduce\r\n1. Type something to the &lt;input&gt;\r\n\r\n# Expected result\r\n`console.log('invoked')` is not invoked\r\n\r\n# Actual result\r\n`console.log('invoked')` is invoked on every type\r\n\r\n# But ...\r\n\r\nBut in the next two examples `console.log('invoked')` is not invoked.\r\n\r\n## Example 1\r\n**App.svelte:**\r\n```\r\n<script>\r\n\tlet opened = true\r\n\tlet name = ''\r\n\t$: if (opened) {\r\n\t\tname = 'test'\r\n\t\tconsole.log('invoked')\r\n\t}\r\n</script>\r\n\r\n<input bind:value={name}>\r\n```\r\nREPL: https://svelte.dev/repl/4dc52fa5e027438c9e744fd347789d36?version=3.49.0\r\n\r\n## Example 2\r\n**App.svelte:**\r\n```\r\n<script>\r\n\timport {modal} from './store.js'\r\n\tlet name = ''\r\n\t$: if ($modal.opened) {\r\n\t\tconsole.log('invoked')\r\n\t}\r\n</script>\r\n\r\n<input bind:value={name}>\r\n```\r\nREPL: https://svelte.dev/repl/0aa66028eb924709bf4a1d402931fd3c?version=3.49.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\nREPL from svelte.dev\r\n\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-01-13T22:23:34Z","created_at":"2022-08-18T22:27:36Z","creator_user_login":"mihaon"}
{"number":7782,"title":"(minor) unquoted slash in attributes throws \"attempted to close an element that was not open\"","body":"### Describe the bug\n\n`<a href=/>Home</a>` is valid HTML5, but fails in Svelte.\n\n### Reproduction\n\n`<a href=/>go home</a>`\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nrepl\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-09-12T11:28:50Z","created_at":"2022-08-13T11:08:22Z","creator_user_login":"mustafa0x"}
{"number":7776,"title":"Provide classname utility for style encapsulation between parent/child component","body":"### Describe the problem\r\n\r\nSometimes style switching logic is placed in the parent component and controlled by switching the classNames. To avoid using the global CSS className, we need a utility to create a unique className and mark it as used.\r\n\r\n### Describe the proposed solution\r\n\r\nThere is a proposal API:\r\n\r\n```html\r\n// Parent.svelte\r\n<script>\r\nimport Child from './Child.svelte'\r\nimport { classname } from 'svelte/classname'\r\n\r\nconst luckyClassName = classname('lucky')\r\nconst unluckyClassName = classname('unlucky')\r\n\r\nlet isLucky = false\r\n\r\n</script>\r\n\r\n<Child class={isLucky ? luckyClassName : unluckyClassName} on:click={() => isLucky = !isLucky} />\r\n\r\n<style>\r\n// mark as used\r\n.lucky {\r\n  color: red;\r\n}\r\n\r\n// mark as used\r\n.unlucky {\r\n  color: blue;\r\n}\r\n</style>\r\n\r\n```\r\n\r\n### Alternatives considered\r\n\r\nNo\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-08-11T08:11:41Z","created_at":"2022-08-09T11:45:46Z","creator_user_login":"zheeeng"}
{"number":7774,"title":"fix: add a11y configuration for checking through control and input component","body":"Fixes #6469\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-08-09T11:01:19Z","creator_user_login":"tanhauhau"}
{"number":7773,"title":"Reactive binding for Context API values","body":"### Describe the problem\r\n\r\nPlease note there is a workaround to this issue currently, but requires a lot of extra boilerplate in which you create and pass a writable store down the component tree. I feel this goes against the nature of Svelte's simplicity-first approach.\r\n\r\nPer real-world use cases, this actually affects a number of components created for my UI component library. Especially those that are utilized within forms. I've drawn sample code from my Radio Group component to illustrate the problem:\r\nhttps://skeleton.brainandbonesllc.com/components/radio-groups\r\n\r\nFirst, Users are required to import writable, create a new writable store (per component instance set), and pass the store to the component via a prop:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nimport { writable } from \"svelte/store\";\r\nconst storeJustify = writable(0); // this is require PER instance set\r\nlet formData: any = {\r\n    justify: $storeJustify\r\n};\r\n</script>\r\n\r\n<RadioGroup selected={storeJustify}>\r\n    <RadioItem value={0}>Left</RadioItem>\r\n    <RadioItem value={1}>Center</RadioItem>\r\n    <RadioItem value={2}>Right</RadioItem>\r\n</RadioGroup>\r\n```\r\n\r\nThen, the parent component (RadioGroup) must again import the writable (for type handling), import setContext, then accept the prop value, as well as provide this prop value to context using the `setContext` method:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import type { Writable } from \"svelte/store\";\r\n    import { setContext } from \"svelte\";\r\n\r\n    export let selected: Writable<any>;\r\n    setContext('selected', selected);\r\n    \r\n    // ...\r\n</script>\r\n\r\n<nav><slot /></nav>\r\n```\r\n\r\nFinally, for the child components (RadioItem) we once again must import the writable type, import getContext, grab the store value with `getContext`, as well as take in a new `value` prop which defines the child element's unique value. I can then use these to values to compare and set the appropriate \"highlighted\" CSS styling.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import type { Writable } from \"svelte/store\";\r\n    import { getContext } from \"svelte\";\r\n\r\n    export let value: any;\r\n    export let selected: Writable<any> = getContext('selected');\r\n    \r\n    $: selected = value === $selected ? `(set highlight CSS styles)` : `(set base CSS styles)`;\r\n</script>\r\n\r\n<li>\r\n    <label>\r\n        <input class=\"hidden\" type=\"radio\" {value} bind:group={$selected} />\r\n        <slot />\r\n    </label>\r\n</li>\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nMy suggestion would be to either make Context values reactive by default, or allow for some kind of per-instance configuration to enable this as an optional feature. Though I would understand there may be some performance or technical limitations preventing this.\r\n\r\nIf we imagine a scenario where this was enabled by default, then the resulting code would be much simpler overall for developers implementing my library's components.\r\n\r\nWe need only define a value that represents the currently selected value. Then pass a reference to the parent:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nlet formData: any = {\r\n    justify: 0\r\n};\r\n</script>\r\n\r\n<RadioGroup selected={formData.justify}>\r\n    <RadioItem value={0}>Left</RadioItem>\r\n    <RadioItem value={1}>Center</RadioItem>\r\n    <RadioItem value={2}>Right</RadioItem>\r\n</RadioGroup>\r\n```\r\n\r\nWe drop the extra writable type import here.\r\n> Note my proposed `setContextReactive` syntax.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { setContextReactive } from \"svelte\";\r\n\r\n    export let selected: any;\r\n    setContextReactive('selected', selected);\r\n</script>\r\n\r\n<!-- ... -->\r\n```\r\n\r\nWe drop the extra writable type import here too.\r\n> Note my proposed `getContextReactive` syntax.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { getContextReactive } from \"svelte\";\r\n\r\n    export let value: any;\r\n    export let selected: any = getContextReactive('selected');\r\n    \r\n    // ...\r\n</script>\r\n\r\n<!-- ... -->\r\n```\r\n\r\nThis proposed update provides an exponential improvement if you have a page with a lot of custom form component, since you no longer have to maintain an extra set of store definitions per component set.\r\n\r\n### Alternatives considered\r\n\r\nAlternatively, it might be great if there was some way to use a `bind`-like syntax and tap directly into Context and is reactive by default. Something like this:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nlet formData: any = {\r\n    justify: 0\r\n};\r\n</script>\r\n\r\n<RadioGroup context:selected={formData.justify}>\r\n    <RadioItem value={0}>A</RadioItem>\r\n    <RadioItem value={1}>B</RadioItem>\r\n    <RadioItem value={2}>C</RadioItem>\r\n</RadioGroup>\r\n```\r\n\r\nYou could then skip the extra boilerplate for `setContext` within the parent component definition. Then use something like the proposed `getContextBinding` syntax to retrieve the value within the child.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-09-07T23:35:03Z","created_at":"2022-08-08T18:37:33Z","creator_user_login":"endigo9740"}
{"number":7758,"title":"Binding to store on select element doesn't work with on:input event.","body":"### Describe the bug\r\n\r\nIn the event listener of input event of select which bind to store value, if the value of the same store but different property was changed, the bind itself doesn't work at all.\r\n\r\n1. Create a store with object: i.e. `const s = writable({a:0, b: 0})`\r\n2. Create a `<select>` element with `bind:value={$s.a}` and `on:input={()=>$s.b++}`.\r\n3. Change select element's value. It won't change the `$s.a`\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/6520010283474705a76372d5a2569e16?version=3.49.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.5\r\n    CPU: (20) arm64 Apple M1 Ultra\r\n    Memory: 46.50 GB / 128.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.2 - ~/.nvm/versions/node/v16.14.2/bin/node\r\n    Yarn: 1.22.18 - ~/.nvm/versions/node/v16.14.2/bin/yarn\r\n    npm: 8.9.0 - ~/.nvm/versions/node/v16.14.2/bin/npm\r\n  Browsers:\r\n    Chrome: 103.0.5060.134\r\n    Safari: 15.6\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-07T20:03:24Z","created_at":"2022-08-05T01:21:36Z","creator_user_login":"basuke"}
{"number":7752,"title":"Infinite loop when binding to an item in a for loop","body":"### Describe the bug\r\n\r\nThe page freezes when I attempt to iterate through a map containing a class and bind a freshly created element using data from that class into a field of that class. This appears to be related to #6921\r\nConsidering that one of my cores spikes up to 100%, there is probably some infinite loop going on.\r\n*I am a beginner, so I am sorry if I am making some rookie mistake*\r\n\r\n### Reproduction\r\n\r\nI have this example:\r\n```svelte\r\n<script lang=\"ts\">\r\n    import \"../app.css\";\r\n    import {NavbarRoute} from \"../lib/NavbarRoute.ts\";\r\n    import {onMount} from \"svelte\";\r\n\r\n    let beforeShop = new Map<string, NavbarRoute>;\r\n\r\n    beforeShop.set(\"/\", new NavbarRoute(\"Home\"));\r\n    beforeShop.set(\"/tos\", new NavbarRoute(\"Pravidla a GDPR\"));\r\n\r\n    let afterShop = new Map<string, NavbarRoute>;\r\n\r\n    afterShop.set(\"/team\", new NavbarRoute(\"Tým\"));\r\n    afterShop.set(\"/hire\", new NavbarRoute(\"Nábory\"))\r\n    afterShop.set(\"/contact\", new NavbarRoute(\"Kontakt\"));\r\n\r\n    onMount(function () {\r\n        let route;\r\n\r\n        route = beforeShop.get(window.location.pathname);\r\n        if (route == undefined) route = afterShop.get(window.location.pathname);\r\n\r\n        if (route) {\r\n            let div = route.div;\r\n\r\n            div.classList.add(\"tab-active\");\r\n        }\r\n    })\r\n</script>\r\n\r\n<header>\r\n    <div class=\"bg-base-100 w-screen inline-flex items-center pt-2 pb-2\">\r\n        <div class=\"w-1/2 justify-start\"></div>\r\n        <div class=\"flex-shrink-0 inline-flex\">\r\n            <div>\r\n                {#each [...beforeShop] as [path, route]}\r\n                    <nav-el bind:this={route.div}>{route.name}</nav-el>\r\n                {/each}\r\n                <nav-el>Wiki</nav-el>\r\n            </div>\r\n            <div>\r\n                <nav-el class=\"bg-primary text-base-100 rounded-box\">Shop</nav-el>\r\n            </div>\r\n            <div>\r\n                {#each [...afterShop] as [path, route]}\r\n                    <nav-el bind:this={route.div}>{route.name}</nav-el>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n        <div class=\"w-1/2 justify-end flex\">\r\n            <nav-el class=\"\">Přihlásit se</nav-el>\r\n        </div>\r\n    </div>\r\n</header>\r\n```\r\nNavbarRoute:\r\n```ts\r\nexport class NavbarRoute {\r\n\r\n    public div: any | undefined;\r\n\r\n    constructor(public name: string) {\r\n        this.div = undefined;\r\n    }\r\n}\r\n```\r\n\r\nBy commenting out some parts of the code, I've found out, that it hangs due to: `bind:this={route.div}`\r\n\r\n### Logs\r\n\r\n```shell\r\nNothing showed up in the server and browser logs.\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.18 Arch Linux\r\n    CPU: (24) x64 AMD Ryzen 9 5900X 12-Core Processor\r\n    Memory: 44.10 GB / 62.71 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 16.16.0 - /usr/bin/node\r\n    Yarn: 1.22.19 - /usr/bin/yarn\r\n    npm: 8.15.1 - /usr/bin/npm\r\n  Browsers:\r\n    Chromium: 104.0.5112.79\r\n    Firefox: 103.0.1\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.49.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2022-10-26T11:48:36Z","created_at":"2022-08-03T19:37:51Z","creator_user_login":"kyngs"}
{"number":7749,"title":"Is this a bug or is this a feature of Svelte reactivity statements?","body":"### Describe the bug\r\n\r\nApp.svelte:\r\n```js\r\n<script>\r\n  import Child from './Child.svelte';\r\n\t\r\n  let data = {};\t\r\n  let dataNew = {};\r\n</script>\r\n\r\n<Child\r\n  bind:data\r\n  bind:dataNew\r\n/>\r\n```\r\n\r\nChild.svelte:\r\n```js\r\n<script>\r\n  export let data;\r\n  export let dataNew;\r\n\t\r\n  $: if (data) {\r\n    console.log('--- WTF? ---');\r\n  }\r\n\t\r\n  $: if (data) {\r\n    console.log('--- WTF Trigger ---');\r\n    dataNew = {};\r\n  }\r\n\r\n</script>\r\n\r\n<button on:click={()=>{console.log('Clicked');dataNew=dataNew}}>\r\n  Click me\r\n</button>\r\n```\r\n\r\nOutput on button click:\r\n```\r\n\"Clicked\"\r\n\"--- WTF? ---\"\r\n\"--- WTF Trigger ---\"\r\n```\r\n\r\n[Related StackOverflow](https://stackoverflow.com/questions/73204149/is-this-a-bug-or-feature-of-svelte-two-way-bindings)\r\n\r\nIt seems that this only happens when passing (binding) a non primitive values (objects, arrays).\r\nThe data of \"data\" not changed, why both statements have been triggered in Child.svelte component?\r\nLooks like a bug...\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/87031a5efc554b7fba7ea177b6b30b81?version=3.49.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte version: 3.49.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-09-20T13:45:26Z","created_at":"2022-08-03T08:03:46Z","creator_user_login":"siroBS"}
{"number":7735,"title":"onMount within action will not fire for initially hidden component","body":"### Describe the bug\r\n\r\nIf `onMount` is invoked from within a `use:action` function, and is declared on a child node within an initially unmounted component, the code within `onMount` will not run when said component is mounted.\r\n\r\nHowever, if the component is set to mount when `App.svelte` is mounted, the code within `use:action`'s `onMount` will run, though the returned function intended to be called through `onDestroy` will not run when the component is destroyed.\r\n\r\n_This issue originates from this [discord thread](https://discord.com/channels/457912077277855764/1002080198075883520)_\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/7aa63b40621344c1a7459516c2ca03a4?version=3.49.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-08-06T16:03:34Z","created_at":"2022-07-28T07:08:04Z","creator_user_login":"FireMakeThunder"}
{"number":7721,"title":"Add to `Readme.md` details about the environment variable `PUBLISH` for exporting the package","body":"### Describe the problem\n\nIt took me couple of hours to understand why `npm ci && npm pack` doesn't produce a valid NPM package.\r\nAfter digging into [`rollup.config.js`](https://github.com/sveltejs/svelte/blob/master/rollup.config.js) I have found that you should set the environment variable `PUBLISH=1` for having external dependencies be compiled into your package internally.\n\n### Describe the proposed solution\n\nI suggest to write on [`README.md`](https://github.com/sveltejs/svelte/blob/master/README.md) a section about how to export the package to a tarball for global usage, by setting the environment variable `PUBLISH=1` and then `npm ci && npm pack`(or `npm install && npm pack`).\n\n### Alternatives considered\n\nI know that the `README.md` file states that the recomended way to build locally and use it, is by using `npm link`.\r\nHowever as free software it is always advised to tell in the `README.md` how to build the package for global usage (here it is by tarball).\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-08-06T18:08:03Z","created_at":"2022-07-25T18:06:25Z","creator_user_login":"Tal500"}
{"number":7720,"title":"infinite loop w/ async statements in afterUpdate","body":"### Describe the bug\r\n\r\nWhen using promise based functions (in my case, fetching data from Firebase) in the afterUpdate hook, an infinite update loop is triggered.\r\n\r\n### Reproduction\r\n\r\nafterUpdate:\r\n\r\nBug: [repl](https://svelte.dev/repl/151f56c4a6f24e568ef939870dc97a14?version=3.49.0)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (16) x64 Intel(R) Core(TM) i7-10700K CPU @ 3.80GHz  \r\n    Memory: 23.21 GB / 31.92 GB\r\nBinaries:\r\n    Node: 14.17.3 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 6.14.13 - C:\\Program Files\\nodejs\\npm.CMD\r\nBrowsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (103.0.1264.71)\r\n    Internet Explorer: 11.0.19041.1566\r\nnpmPackages:\r\n    svelte: ^3.49.0 => 3.49.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-08-06T18:17:48Z","created_at":"2022-07-25T17:10:02Z","creator_user_login":"Tormak9970"}
{"number":7719,"title":"<font/> tag compiles as SVG","body":"### Describe the bug\r\n\r\nWhen using a `<font/>` tag, it compiles as SVG. \r\n\r\nAt first I thought it was just getting parsed out, but Mlocik97 in discord pointed out: \r\n>it compiles as if it's SVG element, see compiled JS.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/b5e833987ab041ddafff2dc1d4b7d4ab?version=3.49.0\r\n\r\n### Logs\r\n\r\n```shell\r\n- -\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\n- -\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-08-06T18:31:03Z","created_at":"2022-07-25T16:31:07Z","creator_user_login":"acoyfellow"}
{"number":7718,"title":"The getContext function has incorrect type signature","body":"### Describe the bug\n\nThe `getContext` function returns `undefined` if no parent component provides a context. You can't guarantee for a component to have a context without checking with `hasContext` in prior. Thus, by default the return type is expected to include `undefined`\r\n\r\nExpected result:\r\n`declare function getContext<T>(key: any): T | undefined`\r\nActual result:\r\n`declare function getContext<T>(key: any): T`\n\n### Reproduction\n\nhttps://svelte.dev/repl/718b6e5da6e64a06be7165a86965cfeb?version=3.49.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.4\r\n    CPU: (8) arm64 Apple M1 Pro\r\n    Memory: 60.47 MB / 16.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.1 - ~/Library/Caches/fnm_multishells/61915_1657654538285/bin/node\r\n    Yarn: 1.22.17 - ~/Library/Caches/fnm_multishells/61915_1657654538285/bin/yarn\r\n    npm: 8.5.0 - ~/Library/Caches/fnm_multishells/61915_1657654538285/bin/npm\r\n  Browsers:\r\n    Chrome: 103.0.5060.134\r\n    Safari: 15.5\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-08-30T18:31:07Z","created_at":"2022-07-25T15:24:40Z","creator_user_login":"SoundAsleep192"}
{"number":7712,"title":"Allow specifying non-special bindings as readonly","body":"### Describe the problem\r\n\r\nCurrently there appears to be no way to define a components binding as readonly, this is supported on special inbuilt elements, such as `input`, `video` and `audio` (for example, for \"read_only_media_attributes\") but Svelte currently lacks support for specifying anything outside of inbuilt elements as a readonly binding.\r\n\r\nLooking through the source, it looks like the binding type is decided around here, and is conditioned based on the type of element:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/master/src/compiler/compile/nodes/Binding.ts#L88\r\n\r\nSorry if this has already been discussed but I couldn't find an existing issue covering this topic.\r\n\r\n### Describe the proposed solution\r\n\r\nWe should have some way of specifying a readonly binding, for example, by using the reserved `export let $variable` syntax:\r\n\r\nFoo.svelte:\r\n```svelte\r\n<script>\r\n  import {onMount} from 'svelte';\r\n  export let $foo = 0;\r\n  \r\n  onMount(() => {\r\n   const t = setTimeout(() => {\r\n     foo++;\r\n   }, 100);\r\n   return (() => {\r\n     clearTimeout(t)\r\n   });\r\n  });\r\n</script>\r\n```\r\n\r\nApp.svelte\r\n```svelte\r\n<script>\r\n  import Foo from './Foo.svelte';\r\n  let foo;\r\n</script>\r\n<Foo bind:foo />\r\n<h1>{foo}</h1>\r\n```\r\n\r\nI'm not aware of if this syntax is intended for something else, someone might be able to chime in and suggest something that might be better suited and fit in better with the general design of Svelte.\r\n\r\n### Alternatives considered\r\n\r\nWe'd like this to warn developers not to write to certain values to components as they won't affect anything, since the component that's providing those bindings is doing some side effect that isn't controllable from the parent component.\r\n\r\nIf they do, it doesn't directly affect any result (nothing happens), so our alternative solution is just to mark these bindings as readonly in our JSDoc.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-07-26T12:32:53Z","created_at":"2022-07-22T14:49:33Z","creator_user_login":"benjamingwynn"}
{"number":7704,"title":"Bind handler incorrectly invalidates other variables.","body":"### Describe the bug\n\n[REPL](https://svelte.dev/repl/74c723c64b704f4e8177dd53b3361333?version=3.49.0)\r\n\r\nExpected behaviour: `program` never changes so it is never invalidated.\r\nActual behaviour: `program` is invalidated inside adder_x_binding, so every time the counter is increased.\r\n\r\nExpected compiler output:\r\n`\tfunction adder_x_binding(value) {\r\n\t\tcounter = value;\r\n\t\t$$invalidate(1, counter);\r\n\t}`\r\nActual compiler output:\r\n`\tfunction adder_x_binding(value) {\r\n\t\tcounter = value;\r\n\t\t($$invalidate(1, counter), $$invalidate(0, program));\r\n\t}`\r\n\r\nSeverity marked as \"blocking an upgrade\" as the [REPL works in 3.0.1](https://svelte.dev/repl/74c723c64b704f4e8177dd53b3361333?version=3.0.1)\n\n### Reproduction\n\n[REPL](https://svelte.dev/repl/74c723c64b704f4e8177dd53b3361333?version=3.49.0)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nExample REPL tested in Firefox 104 on Windows 10.\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2023-02-25T07:24:59Z","created_at":"2022-07-20T18:21:05Z","creator_user_login":"discapes"}
{"number":7703,"title":"chore: micro-optimizations to reduce generated bundle size","body":"### Before submitting the PR, please make sure you do the following\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n\r\nRe-work of #5702. But this time without optimizations that make the code less readable.\r\n\r\nThis PR refactors some parts of the codebase to use shared functionality instead of rewriting the same code block over and over again.\r\n\r\n\r\n| code                 | branch        | bundle size | gzipped size |\r\n| -------------------- | ------------- | ----------- | ------------ |\r\n| vite starter example | master        | 5.330 bytes | 2.475 bytes   |\r\n| vite starter example | optimizations (originally with `{}`) | 5.266 bytes | 2.464 bytes   |\r\n| vite starter example | optimizations (with `Object.create(null)`) | 5.310 bytes | 2.475 bytes   |\r\n| empty Svelte file    | master        | 3.260 bytes | 1.557 bytes   |\r\n| empty Svelte file    | optimizations (originally with `{}`) | 3.198 bytes | 1.542 bytes   |\r\n| empty Svelte file    | optimizations (with `Object.create(null)`) | 3.240 bytes | 1.554 bytes   |\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2022-07-20T15:12:22Z","creator_user_login":"ivanhofer"}
{"number":7701,"title":"Automatically remove leading zeros in number inputs","body":"### Describe the problem\n\nThe problem:\r\n The displayed value of the number input field can be: 000100\r\nBut I want: 100\r\nSvelte automatically converts `number`-inputs from `string` to `number`, which is awesome.\r\nHowever, converting it to a `string` to remove the leading zeros and then to a number again, which usually solves the issue, results in the same value and thus Svelte does not trigger a render of the \"new \" value.\r\n\r\n\n\n### Describe the proposed solution\n\nIt should just work automatically.\n\n### Alternatives considered\n\nI am still searching for ways to solve this problem.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-07-20T16:08:13Z","created_at":"2022-07-20T11:52:36Z","creator_user_login":"Visual-Dawg"}
{"number":7696,"title":"Text input not updating when only the case changes","body":"### Describe the bug\n\nIf you change only the case of the first letter of the value of a textbox, it fails to update. For example if you have \"Bob\" and you manually type \"bob\" but programmatically change back to Bob, the change never appears.\n\n### Reproduction\n\nhttps://svelte.dev/repl/bdb30ab3c1dd4e0bb3afd97265a03e68?version=3.49.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.4\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 3.41 GB / 32.00 GB\r\n    Shell: 5.8.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.0 - ~/.nvm/versions/node/v16.14.0/bin/node\r\n    Yarn: 1.22.17 - /opt/brew/bin/yarn\r\n    npm: 8.3.1 - ~/.nvm/versions/node/v16.14.0/bin/npm\r\n  Browsers:\r\n    Chrome: 103.0.5060.114\r\n    Firefox: 99.0.1\r\n    Safari: 15.5\r\n    Safari Technology Preview: 15.4\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-19T07:54:37Z","created_at":"2022-07-18T20:22:25Z","creator_user_login":"johnnysprinkles"}
{"number":7694,"title":"CSS Component Selector","body":"### Describe the problem\n\nIt's a common thing using components to have personalized HTML elements.\r\nFor example `<img />` element, i can make a `<Image>` component that uses `<picture>` by default or `loading=\"lazy\"` attribute. So it's easier to re-use or change.\r\n\r\nThe problem is its still common to add custom styles to image element, like `background-color` `object-fit` and many other stuff, like `aspect-ratio`, `width` etc.\r\n\r\nSvelte components doesn't allow that unless you make somehow `:global()` hacks. Which doesn't give warnings when invalid and looks hacky. And when you not try to use `:global()` it becomes even more hacky and makes you use a lot of boilerplate code.\n\n### Describe the proposed solution\n\nA CSS component selector to select all of the root elements in the component.\r\n\r\n**Example:**\r\n*foo.svelte*\r\n```svelte\r\n<div>\r\n  <img />\r\n<div/>\r\n<a />\r\n```\r\n<br />\r\n\r\n*bar.svelte*\r\n```svelte\r\n<div>\r\n  <Foo />\r\n</div>\r\n<Foo />\r\n\r\n<style>\r\n  div > $Foo { /* Selects `div` and `a` element in the `Foo` component, because they are in the root  */\r\n    ...\r\n  }\r\n<style />\r\n```\r\nsyntax can change.\n\n### Alternatives considered\n\nAn option to bind everything(attributes(class), events...) in a root element in the component.\r\n\r\n**Example:**\r\n*foo.svelte*\r\n```svelte\r\n<div bind:$$root>\r\n   <img />\r\n<div />\r\n<div />\r\n```\r\n\r\n<br />\r\n\r\n*bar.svelte*\r\n```svelte\r\n<Foo class=\"thing\" on:click={() => alert()}>\r\n\r\n<style>\r\n.thing { /* this would only select the first `div` element in the `Foo` component\r\n  ...\r\n}\r\n<style />\r\n```\r\n\r\n<br />\r\n<br />\r\n\r\nif none of these are applicable at least having a way to bind/pass/inherit all of the events would be cool.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-10-13T11:49:21Z","created_at":"2022-07-18T06:57:04Z","creator_user_login":"DeepDoge"}
{"number":7677,"title":"Transition function does not run on destroy","body":"### Describe the bug\r\n\r\n[`transition:fn`](https://svelte.dev/docs#template-syntax-element-directives-transition-fn) does not run when an element gets destroyed.\r\n\r\nIf the computed style of an element changes between creation and destruction, the transition can break.\r\n\r\n### Reproduction\r\n\r\nIn this [REPL](https://svelte.dev/repl/9e1a743a5f41430fb22f2e0caef79c20?version=3.49.0)\r\n\r\n- Click on the lower box (`2`)\r\n- Click on the upper box (`1`)\r\n- Click on the upper box (`2`)\r\n\r\nTransition functions of boxes `3` and `0` run on creation, but not on destruction.\r\n\r\n```shell\r\n\"clicked 2\"\r\n\"0 will be destroyed\"\r\n\"3 will be created\"\r\n\"0 css is calculated\"\r\n\"3 css is calculated\"\r\n\r\n\"clicked 1\"\r\n\"3 will be destroyed\"\r\n\"0 will be created\"\r\n# Missing \"3 css is calculated\"\r\n\"0 css is calculated\"\r\n\r\n\"clicked 2\"\r\n\"0 will be destroyed\"\r\n\"3 will be created\"\r\n# Missing \"0 css is calculated\"\r\n\"3 css is calculated\"\r\n```\r\n\r\n---\r\n\r\nIn this [REPL](https://svelte.dev/repl/1eb9053c3bcc4e6a8ce184ef6240c284?version=3.49.0)\r\n\r\n- Click on the right box (`2`)\r\n- Change the Result width\r\n- Click on the left box (`1`)\r\n\r\nDestruction transition of box `3` breaks only after the viewport is resized.\r\n\r\nhttps://user-images.githubusercontent.com/47051820/178408233-6d8a25b9-9d2f-445f-b082-fa1f382219d3.mp4\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n  OS: Windows 10 10.0.19044\r\nBrowsers:\r\n  Chromium (103.0.1264.49)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-07-18T05:20:45Z","created_at":"2022-07-12T04:31:36Z","creator_user_login":"hyunbinseo"}
{"number":7674,"title":"Parameter to control the state of transitions without necessarily using If.","body":"### Describe the problem\r\n\r\nSometimes it is not necessary to place an If to control transitions, in specific cases the layout may break.\r\n\r\n### Describe the proposed solution\r\n\r\n`<div transition:fade={{ show: true }}>`\r\n\r\n### Alternatives considered\r\n\r\nSet a parameter to control the state of the transition.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-07-11T13:25:17Z","created_at":"2022-07-11T02:57:34Z","creator_user_login":"caesar-exploit"}
{"number":7670,"title":"Add a svelte compilation option that guarantees a component only has a single root DOM node or component.","body":"### Describe the problem\r\n\r\nIf I see a component being used with a syntax that indicates it is more or less just like any other built-in DOM node, then I expect it to actually fulfill all of the same basic requirements that a DOM node would have. Components that have more than 1 root DOM node in their markup are a code smell to me.\r\n\r\nFor example, if you have a \"container\" like a `<div>`, then I would generally expect that placing that component in the tree will insert a single node into the DOM, alongside whatever descendants it might have to help manage its contents. However, there is nothing in the tooling that ensures that such an expectation is maintained.\r\n\r\n```svelte\r\n// Container.svelte\r\n<script>\r\nexport let title = \"\";\r\n</script>\r\n\r\n<h3>{title}</h3> <!-- node 1 -->\r\n<div> <!-- node 2 -->\r\n    <slot></slot>\r\n</div>\r\n\r\n// App.svelte\r\n<body> <!-- Expected to have 1 child, but actually has two -->\r\n  <Container title=\"hello\"> \r\n    <p>testing</p>\r\n  </Container>\r\n</body>\r\n```\r\n\r\nObviously, this is something that can easily be enforced manually with code reviews if that's all you want, but it would be convenient if that kind of stuff could just be off-loaded to the tooling that builds the code.\r\n\r\n### Describe the proposed solution\r\n\r\nI would like to see some sort of compiler option that I could configure globally for my project that would ensure that all components are required to have only a single top-level node in their markup.\r\n\r\n### Alternatives considered\r\n\r\nThe only other thing I can think of to do this (and which I could probably figure out how to do if I dove in and tinkered with it) would be to implement a Svelte preprocessor plugin that makes the check for me and then just publish it separately. But given that this seems like something that betrays core expectations for the object model, I get the feeling it would be better implemented as a supported feature in the core tool rather than as an optional, separately installed plugin.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-07-12T12:27:46Z","created_at":"2022-07-09T21:48:21Z","creator_user_login":"willnationsdev"}
{"number":7665,"title":"Add option to preserve legal comments in production","body":"### Describe the problem\r\n\r\nFor the purpose of attribution of external FOSS dependencies I would like to keep some comments intact.\r\n\r\nFor HTML, CSS and JavaScript I don't think there is a way to tell the parser to preserve it during production. If this issue is too big I can split it up into smaller issues.\r\n\r\n### Describe the proposed solution\r\n\r\nFor HTML, CSS and JS comments I would propose adding an extra exclamation mark to indicate it shouldn't be removed. I am not that knowledgeable with the parser, so I am not sure if this would be viable. \r\n**HTML**\r\n```html\r\n<!--!  Copyright (c) <YEAR> <COPYRIGHT HOLDER> -->\r\n```\r\n**JS and CSS**\r\n```\r\n/*! Copyright (c) <YEAR> <COPYRIGHT HOLDER> */\r\n```\r\n\r\n### Alternatives considered\r\n\r\nIn #6805 the following solution is proposed for html comments:\r\n```\r\n{@html `\r\n<!-- \r\n* Copyright (c) <YEAR> <COPYRIGHT HOLDER>\r\n-->\r\n`}\r\n```\r\nThis does work, however it also adds a comment to the minified JavaScript bundle which is not my intention because only the HTML is from another author. I am not sure if this is intended behavior. If it isn't I can open a new issue in the relevant repository and offer a reproducible example.\r\n\r\n**HTML**\r\n![image](https://user-images.githubusercontent.com/51972581/177775474-db7f9b16-17d0-44bb-a4f8-8172d93a4fdc.png)\r\n**Minified JS**\r\n![image](https://user-images.githubusercontent.com/51972581/177777038-c543680d-21c2-4b27-8950-ac53f133af0c.png)\r\n\r\n`preserveComments` only seems to work for SSR, so that isn't an option either.\r\n\r\n### Importance\r\n\r\nI cannot use svelte without it.","state":"open","updated_at":"2022-07-07T20:31:38Z","created_at":"2022-07-07T13:19:07Z","creator_user_login":"tony1658"}
{"number":7661,"title":"A rotated element's crossfade animation goes in wrong direction","body":"### Describe the bug\r\n\r\nAn element with a css transform rotation will move in the wrong direction when transitioning using `crossfade`.\r\nThe result is that the illusion (of one element moving from one place to the other) breaks, and instead it looks like two separate elements appearing from and disappearing into different locations.\r\n\r\nI love the `crossfade` feature :heart:. I'll just have to avoid using it with rotated elements until this is fixed.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/7683202144db47858ab63591919ae131?version=3.48.0\r\n\r\nBy removing the rotation from the css transform, everything looks normal again:\r\nhttps://svelte.dev/repl/19da212e1b9446338b05ab73091d1cee?version=3.48.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte 3.48.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-03T12:35:46Z","created_at":"2022-07-06T13:21:34Z","creator_user_login":"ffossum"}
{"number":7656,"title":"svelte:head does not remove title tag","body":"### Describe the bug\n\nA title tag added using `<svelte:head>`, cannot be removed? like you can with any other tag i have tested (meta, script).\n\n### Reproduction\n\n```html\r\n<svelte:head>\r\n\t{#if toggleBool}\r\n\t<!-- stays put even if toggleBool is false  -->\r\n\t\t<title>Title injected!!!</title>\r\n\r\n\t<!-- gets removed as expected  -->\r\n\t\t<meta name=\"description\" content=\"I am ALIVE\" />\r\n\r\n\t<!-- gets removed as expected  -->\r\n\t\t<script>\r\n\t\t\tconsole.log('I am alive!');\r\n\t\t</script>\r\n\t{/if}\r\n</svelte:head>\r\n```\r\n\r\nRelevant repl: <https://svelte.dev/repl/2ecf81b43d0d4b2eaa02d80adf803929?version=3.48.0>\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nWindows 10, Firefox & Edge, svelte repl 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-08T19:55:09Z","created_at":"2022-07-04T12:31:24Z","creator_user_login":"mallsoft"}
{"number":7655,"title":"feat: first steps for adding switch-case blocks","body":"## {#switch} {:case} syntax\r\nThere has been discussions about adding switch case syntax to svelte (https://github.com/sveltejs/svelte/issues/530), and Rich Harris himself discussed how it could look like in his latest video [Annoying things about svelte](https://www.youtube.com/watch?v=dB_YjuAMH3o).\r\n\r\nI tried to keep things simple when implementing this. I see the switch-case syntax as sugar for if-else, so it is definitely a goal to re-use the existing if-else logic instead of introducing a lot of new code. \r\n\r\nThis PR contains the branch I've been working on for the last couple of days, and it has the following:\r\n\r\n### 1. parser implementation\r\nI've implemented a SwitchBlock and CaseBlock node and the necessary logic in the parser to read the following syntax and produce an AST:\r\n\r\n```svelte\r\n{#switch foo}\r\n\tI am default!\r\n{:case \"bar\"}\r\n\tI am bar!\r\n{/switch}\r\n```\r\nand\r\n```svelte\r\n{#switch foo case \"bar\"}\r\n\tI am bar!\r\n{:case \"burger\"}\r\n\tI am burger!\r\n{/switch}\r\n```\r\n\r\nI've written tests for both cases: \r\n- [with default case](https://github.com/MathiasWP/svelte/tree/switch-case/test/parser/samples/switch-case-block)\r\n- [without default case](https://github.com/MathiasWP/svelte/tree/switch-case/test/parser/samples/switch-case-block-no-default)\r\n\r\nI've structured the SwitchBlock with the following interface...\r\n\r\n```ts\r\ninterface SwitchBlock {\r\n\ttype: 'SwitchBlock';\r\n\tcases: CaseBlock[];\r\n\tdiscriminant: Expression;\r\n\tscope: TemplateScope;\r\n}\r\n```\r\n\r\n...and the CaseBlock with the following interface\r\n\r\n```ts\r\ninterface CaseBlock {\r\n\ttype: 'CaseBlock';\r\n\tis_default: boolean;\r\n\ttest?: Expression;\r\n\tchildren?: any[]\r\n}\r\n```\r\n\r\nThe SwitchBlock has a `discriminant` value, which is the value that the cases depend on. The CaseBlock can either be a default case or have a test defined. If it is the default case, then it should be added last in the list of the branches for the SwitchBlock. If it has a test, then it can be used to create a condition with the discriminant.\r\n\r\n### 2. refactoring existing if-else logic in `render_dom`\r\n\r\nI saw that the `IfBlockWrapper` class used `IfBlockBranch` classes to define what should be rendered, so i wanted to try and refactor these concepts and make them more generic. So i extracted these classes from the `IfBlockWrapper` and created two new classes, `ConditionalBlockWrapper` and `ConditionalBlockBranch`. Now the `IfBlockWrapper` and `SwitchBlockWrapper` wrappers both extend the `ConditionalBlockWrapper` to share the rendering functionality.\r\n\r\n\r\n## hitting the wall...\r\n\r\nI want to manipulate the expression of a case-branch so that it goes from being \r\n```ts\r\ncase_block.test // E.g. \"bar\" if the test-node was a \"Literal\" node\r\n``` \r\n\r\nto \r\n\r\n```ts\r\nswitch_block.discriminant === case_block.test\r\n``` \r\n\r\nThis is pretty much the only difference between if-else and switch-case blocks. If-else blocks already have the condition in place, while the case-blocks need to manipulate their expressions so that they add the strict equality operator to the discriminant.\r\n\r\nHowever, i am not sure on what layer i should do this, and i also don't know how to set up dependencies correctly. I feel that this should be done in the `Expression.manipulate` method.\r\n\r\nThis is my current progress, but i am beginning to get stuck. I don't know all the in and outs of the Svelte codebase, and a lot of the code for the if-else logic is kinda hairy. I would appreciate any guidance on how to achieve this, and also feedback if the current progress is wrong.\r\n\r\n\r\n## todo\r\nThis list is probably incomplete, but these are the next steps that i know of:\r\n\r\n- Finish `render_dom` logic\r\n- SSR\r\n- Hydration\r\n- Better error messages\r\n- Language tools support\r\n- Documentation/Tutorial\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [X] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [X] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [X] This message body should clearly illustrate what problems it solves.\r\n- [X] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [X] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-07-03T14:05:16Z","creator_user_login":"MathiasWP"}
{"number":7651,"title":"Slots information disappear, when using {#if} inside parent componet","body":"### Describe the bug\r\n\r\nIf we put named slot in {#if} block on parent component, child will not receive the named slot, but only default slot.\r\nPlease check NavBar.svelte $$slots\r\nExample:\r\n\r\n<details><summary>App.svelte</summary>\r\n\r\n```svelte\r\n<Header title=\"Hello World!\" left=\"Left\" right=\"right\"/>\r\n```\r\n</details>\r\n\r\n<details><summary>Header.svelte</summary>\r\n\r\n```svelte\r\n<script>\r\n  import NavBar from './NavBar.svelte';\r\n  import Btn from './Btn.svelte';\r\n\r\n  export let left;\r\n  export let right;\r\n  export let title;\r\n</script>\r\n\r\n<div>\r\n  <NavBar {title}>\r\n    {#if left}\r\n      <Btn slot=\"left\" text=\"{left}\" />\r\n    {/if}\r\n    {#if right}\r\n      <Btn slot=\"right\" text=\"{right}\" />\r\n    {/if}\r\n  </NavBar>\r\n</div>\r\n\r\n```\r\n</details>\r\n\r\n<details><summary>NavBar.svelte</summary>\r\n\r\n```svelte\r\n<script>\r\n  export let title;\r\n</script>\r\n\r\n{JSON.stringify($$slots)} <!-- {\"default\":true} -->\r\n\r\n{#if $$slots.left}\r\n  [Left slot]<slot name=\"left\"/>\r\n{/if}\r\n\r\n{#if title}\r\n  <h1>{title}</h1>\r\n{/if}\r\n\r\n{#if $$slots.right}\r\n  [Right slot]<slot name=\"right\"/>\r\n{/if}\r\n```\r\n</details>\r\n\r\n<details><summary>Btn.svelte</summary>\r\n\r\n```svelte\r\n<script>\r\n  export let text\r\n</script>\r\n\r\n[{text}]\r\n```\r\n</details>\r\n\r\n\r\n\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/c0de4395f6ad4f7c9093a660225e7110?version=3.48.0\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.4\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\r\n    Memory: 196.32 MB / 16.00 GB\r\n    Shell: 5.1.12 - /usr/local/bin/bash\r\n  Binaries:\r\n    Node: 16.15.0 - /usr/local/bin/node\r\n    Yarn: 1.22.18 - ~/.local/bin/yarn\r\n    npm: 6.14.16 - ~/.local/bin/npm\r\n  Browsers:\r\n    Brave Browser: 102.1.39.122\r\n    Chrome: 104.0.5112.29\r\n    Edge: 101.0.1210.53\r\n    Firefox: 101.0\r\n    Safari: 15.5\r\n  npmPackages:\r\n    svelte: ^3.48.0 => 3.48.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-09-13T02:41:04Z","created_at":"2022-07-02T16:08:39Z","creator_user_login":"borgius"}
{"number":7653,"title":"Hydration breaks with conditional browser rendering and slot fallback","body":"### Describe the bug\n\nI'm running into a pretty mysterious bug involving the use `browser` to conditionally render and (in a separate component!) a slot with fallback content.\r\n\r\nHere's my setup:\r\n\r\nAn array is used to render one of two components:\r\n`routes/index.svelte`:\r\n```svelte\r\n<script>\r\n  import BreakHydration from '$lib/BreakHydration.svelte';\r\n  import Text from '$lib/Text.svelte';\r\n\r\n  const blocks = [\r\n    { type: `text`, text: `text one` },\r\n    { type: `breakhydration`, text: `this breaks hydration` },\r\n    { type: `text`, text: `text two` },\r\n    { type: `text`, text: `text three` }\r\n  ];\r\n</script>\r\n\r\n{#each blocks as { type, text }, index (index)}\r\n  <div>index: {index}</div>\r\n  <div>should be: {text}</div>\r\n  {#if type === `breakhydration`}\r\n    <BreakHydration {text} />\r\n  {:else}\r\n    <Text {text} />\r\n  {/if}\r\n  <div style:height=\"2rem\" />\r\n{/each}\r\n```\r\n\r\n`Text.svelte` uses a slot with fallback content:\r\n```svelte\r\n<script>\r\n  export let text;\r\n</script>\r\n\r\n<p style:border=\"1px dashed black\">\r\n  <slot>\r\n    {@html text}\r\n  </slot>\r\n</p>\r\n```\r\n\r\n`BreakHydration.svelte` renders different things depending on `browser`:\r\n```svelte\r\n<script>\r\n  import { browser } from '$app/env';\r\n  export let text;\r\n</script>\r\n\r\n{#if browser}\r\n  <div style:border=\"1px dashed black\">{text}</div>\r\n{:else}\r\n  <ul>\r\n    <li>{text}</li>\r\n  </ul>\r\n{/if}\r\n```\r\n\r\nAnd the result:\r\n<img width=\"532\" alt=\"Screen Shot 2022-07-01 at 10 49 38 AM\" src=\"https://user-images.githubusercontent.com/688617/176919856-ae4dc6fe-58d6-4381-afa2-15f0eeebf8ea.png\">\r\n\r\n\n\n### Reproduction\n\n[StackBlitz](https://stackblitz.com/edit/sveltekit-hydration-bug?file=src%2Froutes%2Findex.svelte,src%2Flib%2FBreakHydration.svelte)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nStackBlitz\n```\n\n\n### Severity\n\nserious, but I can work around it\n\n### Additional Information\n\n_No response_","state":"open","updated_at":"2022-08-03T15:34:25Z","created_at":"2022-07-01T15:02:16Z","creator_user_login":"plmrry"}
{"number":7644,"title":"export combined props","body":"### Describe the problem\n\nIt would be nice to just use an \"export * from\" to reuse props that are the same for multiple components (but not all!).\r\n\r\nI know this can be done by using $$restProps and filtering, but it would still be more beneficial this way and then exclude them from the $$restProps. Also would be nice to have them show up in the IntelliSense.\n\n### Describe the proposed solution\n\ndepends\n\n### Alternatives considered\n\n$$restProps\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-09-13T03:09:22Z","created_at":"2022-06-30T07:42:12Z","creator_user_login":"s1ghn"}
{"number":7634,"title":"svelte:content","body":"### Describe the problem\n\nEach page has a different page header. Need a way to pass data from the main page view to a child of the layout view. Currently complicated using stores. Would clean things up using a method like Ruby on Rails content_for by allowing svelte:fragment to accept a name, and be able to call it later with svelte:content\n\n### Describe the proposed solution\n\nIn the page view:\r\n\r\n```\r\n<svelte:fragment name=\"page-header-title\">\r\n  Test\r\n</svelte:fragment>\r\n\r\n<svelte:fragment name=\"page-header-action\">\r\n  <a href=\"...\"></a>\r\n</svelte:fragment>\r\n```\r\n\r\nIn the page banner component:\r\n\r\n```\r\n<div>\r\n  <h1>\r\n    <svelte:content from=\"page-header-title\" />\r\n  </h1>\r\n\r\n  <div class=\"actions\">\r\n    <svelte:content from=\"page-header-action\" />\r\n  </div>\r\n</div>\r\n```\n\n### Alternatives considered\n\nOpen to suggestions\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-07-02T13:57:26Z","created_at":"2022-06-25T04:40:28Z","creator_user_login":"KieranP"}
{"number":7632,"title":"Defining a new variable in a switch statement without a new block scope causes Svelte compiler ICE","body":"### Describe the bug\n\nThe following code cases the Svelte compiler to emit the error `Not implemented undefined`.\r\n\r\n```js\r\nswitch(name) {\r\n    case 'a':\r\n        const value = 5;\r\n}\r\n```\r\n\r\nAdding a new block scope around the variable definition (which I believe is best practice anyway) makes everything work.\r\n\r\n```js\r\n// Works\r\nswitch(name) {\r\n    case 'a': {\r\n        const value = 5;\r\n    }\r\n}\r\n```\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/db401693980144a88836eb4539fadde4?version=3.48.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte REPL, Svelte 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-06-24T23:42:25Z","created_at":"2022-06-24T23:42:25Z","creator_user_login":"dimfeld"}
{"number":7625,"title":"Spread Props for on:<event> directives","body":"### Describe the problem\r\n\r\nCurrently it's possible to spread only non-event props, because `on:` and other directives, such as `bind:`, do not work inside a spread object.\r\n\r\nExample [REPL](https://svelte.dev/repl/758500824a2b426fa5bf1ea228f87dc2?version=3.48.0).\r\n\r\nUse case: I'm converting an existing application from React that creates [UI from JSON files](https://eisgroup.github.io/ui-render/examples) to Svelte. Events, such as `onChange`, `onClick` are created dynamically at runtime and passed to components during their render lifecycle using spread props (for encapsulation/abstraction purposes due to recursive nature of the framework).\r\n\r\n### Describe the proposed solution\r\n\r\nEnable spread props for all prop directives, including modifiers, so that this code would work:\r\n```html\r\n<script>\r\n  let props = {'on:click|once': (e) => {alert(e)}}\r\n</script>\r\n<div {...props}>Click Me</div>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nEnable spread props for event bindings without directives\r\n```html\r\n<script>\r\n  let props = {'onClick': (e) => {alert(e)}}\r\n</script>\r\n<div {...props}>Click Me</div>\r\n```\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2022-06-30T20:40:49Z","created_at":"2022-06-21T20:25:13Z","creator_user_login":"ecoinomist"}
{"number":7624,"title":"Compiler crashes on odd case of passing back slot values","body":"### Describe the bug\r\n\r\nOne of my many cases of using `<slot passBackValue={{prop1, prop2, etc.}} />` is crashing the compiler. All other cases have compiled just fine.  Here is the exception:\r\n\r\n```\r\n[!] (plugin svelte) TypeError: Cannot read properties of null (reading 'type')\r\nsrc/frontend/dialogs/BrowseTaxaDialog.svelte\r\nTypeError: Cannot read properties of null (reading 'type')\r\n    at Object.leave (/Users/joe/repos/cavesite/node_modules/svelte/src/compiler/compile/nodes/shared/Expression.ts:326:17)\r\n    at SyncWalker.visit (/Users/joe/repos/cavesite/node_modules/svelte/node_modules/estree-walker/src/sync.js:96:16)\r\n    at SyncWalker.visit (/Users/joe/repos/cavesite/node_modules/svelte/node_modules/estree-walker/src/sync.js:86:11)\r\n    at SyncWalker.visit (/Users/joe/repos/cavesite/node_modules/svelte/node_modules/estree-walker/src/sync.js:79:18)\r\n    at walk (/Users/joe/repos/cavesite/node_modules/svelte/node_modules/estree-walker/src/index.js:20:18)\r\n    at Expression.manipulate (/Users/joe/repos/cavesite/node_modules/svelte/src/compiler/compile/nodes/shared/Expression.ts:198:16)\r\n    at /Users/joe/repos/cavesite/node_modules/svelte/src/compiler/compile/utils/get_slot_data.ts:31:85\r\n    at Array.map (<anonymous>)\r\n    at get_value (/Users/joe/repos/cavesite/node_modules/svelte/src/compiler/compile/utils/get_slot_data.ts:31:4)\r\n    at /Users/joe/repos/cavesite/node_modules/svelte/src/compiler/compile/utils/get_slot_data.ts:20:19\r\n```\r\n\r\nHere is the case:\r\n\r\n```svelte\r\n            <div class=\"row mb-1\">\r\n              <div class=\"col\" style=\"margin-left: {ANCESTOR_ITEM_LEFT_MARGIN * i}em\">\r\n                <slot\r\n                  selectableConfig={{\r\n                    // ERROR: svelte compiler crashes with above exception\r\n                    prefixed: false,\r\n                    selection: selectedAncestorUniques[spec.unique],\r\n                    spec,\r\n                    containingSpecNodes: containingTaxa.slice(0, i),\r\n                    clickable: !!spec.hasChildren && spec.unique != parentUnique,\r\n                    gotoTaxon,\r\n                    addSelection: () => _addSelection(spec),\r\n                    removeSelection: () => _removeSelection(spec)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n```\r\n\r\nRevising this code as follows makes the compiler happy:\r\n\r\n```svelte\r\n            {@const selectableConfig = {\r\n              // svelte compiler is happy\r\n              prefixed: false,\r\n              selection: selectedAncestorUniques[spec.unique],\r\n              spec,\r\n              containingSpecNodes: containingTaxa.slice(0, i),\r\n              clickable: !!spec.hasChildren && spec.unique != parentUnique,\r\n              gotoTaxon,\r\n              addSelection: () => _addSelection(spec),\r\n              removeSelection: () => _removeSelection(spec)\r\n            }}\r\n            <div class=\"row mb-1\">\r\n              <div class=\"col\" style=\"margin-left: {ANCESTOR_ITEM_LEFT_MARGIN * i}em\">\r\n                <slot {selectableConfig} />\r\n              </div>\r\n            </div>\r\n```\r\n\r\nMind you, in this same file, though in a different `each` loop, I have the following code working just fine:\r\n\r\n```svelte\r\n            <slot\r\n              selectableConfig={{\r\n                prefixed: false,\r\n                selection:\r\n                  allChildrenSelected || selectionsTree.isSelected(spec.unique),\r\n                spec,\r\n                containingSpecNodes: containingTaxa,\r\n                gotoTaxon,\r\n                addSelection: () => _addSelection(spec),\r\n                removeSelection: () => _removeSelection(spec)\r\n              }}\r\n            />\r\n```\r\n\r\nRegardless of whether I'm doing anything wrong, the compiler shouldn't be crashing. But given the logical equivalence of the above two code snippets, I don't think I'm doing anything wrong.\r\n\r\nI experimented with hardcoding the various properties within the `{{...}}` block, but nothing eliminated the error. I also experimented with commenting out each of the slot inclusions, but the problem only occurs with the above slot inclusion, regardless of whether the other is commented out.\r\n\r\n### Reproduction\r\n\r\nYou may check out [this branch](https://github.com/ut-entomology/cavesite/tree/svelte-slot-passback-error) of my repo to reproduce the error. Type `yarn run dev` to attempt to launch the site. The site will not run without additional backend configuration, but it doesn't even that far, as the compiler bombs out with the above error.\r\n\r\nThe error occurs on [this line](https://github.com/ut-entomology/cavesite/blob/3b96ce94130c567f5c13fa93b175b23a72bfa5de/src/frontend/dialogs/BrowseTaxaDialog.svelte#L151) of code, in `src/frontend/dialogs/BrowseTaxaDialog.svelte`.\r\n\r\nUnfortunately, I have no idea how to provide a tiny repo that recreates the error.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 10.15.5\r\n    CPU: (4) x64 Intel(R) Core(TM) i3-8100B CPU @ 3.60GHz\r\n    Memory: 5.43 GB / 32.00 GB\r\n    Shell: 5.0.11 - /usr/local/bin/bash\r\n  Binaries:\r\n    Node: 16.14.2 - /usr/local/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 8.5.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 102.0.5005.115\r\n    Safari: 13.1.1\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.75.6 \r\n    svelte: ^3.0.0 => 3.48.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-07-03T05:18:31Z","created_at":"2022-06-21T16:12:28Z","creator_user_login":"jtlapp"}
{"number":7620,"title":"A way to suppress outros for all descendents of a component","body":"### Describe the problem\r\n\r\nOutro transitions are great, but sometimes they are also \"in the way\". There can be cases (for example at a frontend router component) where it is very undesirable if a component that gets replaced with something else still stays around for a while because one of its descendants has an outro transition. In the router example, this can result in situations where for a short amount of time _two_ pages are rendered at once (spectacularily breaking the layout) because some accordion, tooltip or whatever deep inside the old page stalled the destruction of the page's view component for half a second to show its outro. Even if the \"two pages at once\" issue was not the a problem, by showing the new page only after `outroend`, we'd still be forced to wait for some descendant if it has an outro.\r\n\r\nI know that `local` exists, but that's not a real solution to this problem, for two reasons: Firstly, it may be some third-party component that has the outro, and we can't easily add `local` to it. Secondly, it may actually be intentional that it's not local because within a certain subtree (the page's view component in my router example) parents _should_ wait for the outro, but beyond that subtree they shouldn't.\r\n\r\n### Describe the proposed solution\r\n\r\nPerhaps something like `<svelte:outrofence> .. </svelte:outrofence>` around the relevant subtree. (Maybe something similar could be considered for intros as well...)\r\n\r\n### Alternatives considered\r\n\r\nI have a workaround, but it's obviously a huge hack:\r\n\r\n**OutroBlocker.svelte**\r\n```html\r\n<script>\r\n    import { onMount } from 'svelte'\r\n    import { get_current_component } from 'svelte/internal'\r\n    \r\n    const thisComponent = get_current_component()\r\n    onMount(() => {\r\n        delete thisComponent.$$.fragment.o\r\n    })\r\n</script>\r\n\r\n<slot />\r\n```\r\n\r\nUsage: Just wrap whatever subtree that you want to suppress outros on in `<OutroBlocker> ... </OutroBlocker>`.\r\n\r\nDemo: https://svelte.dev/repl/d73d23f868ff4de49e2c42648dfa52c7?version=3.48.0\r\n\r\nOf course it would be much better if this was natively supported.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-06-20T16:10:43Z","created_at":"2022-06-19T17:29:08Z","creator_user_login":"CherryDT"}
{"number":7618,"title":"Throwing in a store subscriber nukes all stores, globally.","body":"### Describe the bug\n\nIf a subscriber of any store from [`svelte/store`](https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts) throws an error, all stores immediately stop working – even if they're in an entirely different component.\r\n\r\nThis is because the [`subscriber_queue`](https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts#L46) doesn't get cleared, but new subscribers are, for some bizarre reason, called [only if the queue is empty](https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts#L72).\n\n### Reproduction\n\nFor a detailed look, go to [this REPL](https://svelte.dev/repl/781d5978585a42df94a0d70ff10fe2f9?version=3.48.0) and follow instructions therein.\r\n\r\nHowever the basic idea can be understood from the following code:\r\n```typescript\r\nimport { writable } from 'svelte/store';\r\n\r\nlet a = writable(1);\r\nlet b = writable(1);\r\n\r\na.subscribe(x => { if (x > 1) throw new Error(); });\r\ntry { a.set(42); } catch {}\r\n\r\nb.set(2); // doesn't update\r\n```\r\n[REPL](https://svelte.dev/repl/80ab146cd3db42aeb409b43f7d6cde78?version=3.48.0)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nBrowsers:\r\n    Brave Browser: 101.1.38.119\r\nPackages:\r\n    svelte: 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-09-23T00:39:32Z","created_at":"2022-06-18T23:14:34Z","creator_user_login":"m93a"}
{"number":7616,"title":"Moving an element calls `afterUpdate` but not `beforeUpdate`, which is not documented","body":"### Describe the bug\r\n\r\nIf a component is moved to a different place in the DOM tree, [`beforeUpdate`](https://svelte.dev/docs#run-time-svelte-beforeupdate) is never called, but [`afterUpdate`](https://svelte.dev/docs#run-time-svelte-afterupdate) is. This is not documented anywhere. Either this behavior should be documented, or it should be changed to the more intuitive.\r\n\r\n### Reproduction\r\n\r\nMinimal pseudocode:\r\n```svelte\r\n{#each list as item (item)}\r\n  <Foo {item} />\r\n{/each}\r\n\r\n<button on:click={swapItems}>Click</button>\r\n```\r\nClicking the button will cause `afterUpdate` to be called on `Foo`, but not `beforeUpdate`.\r\n\r\n[Full working example in the REPL.](https://svelte.dev/repl/e545749a30304a2d980c874692154e56?version=3.48.0)\r\n\r\n### System Info\r\n\r\n```\r\nBrowsers:\r\n    Brave Browser: 101.1.38.119\r\nPackages:\r\n    svelte: 3.48.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-06-27T14:42:06Z","created_at":"2022-06-18T12:22:14Z","creator_user_login":"m93a"}
{"number":7614,"title":"Scoped keyframes don't work with css variables","body":"### Describe the bug\n\nDeclaring keyframes in a `style` tag inside a svelte component, and then trying to apply it like so:\r\n```\r\ndiv {\r\n  --base-animation: move 1s linear infinite;\r\n  animation: var(--base-animation);\r\n}\r\n```\r\nResults in the animation not working. This happens since the var doesn't actually use the scoped animation name. A solution is to use global keyframes, but it would be nice to have a way to get the scoped animation name and use it in the var.   \n\n### Reproduction\n\nhttps://svelte.dev/repl/4d9a73a5c141460a980e3e08d5f741ad?version=3.48.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 86.50 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.0 - /usr/local/bin/node\r\n    Yarn: 1.22.17 - /usr/local/bin/yarn\r\n    npm: 8.1.0 - /usr/local/bin/npm\r\n    Watchman: 2022.02.28.00 - /opt/homebrew/bin/watchman\r\n  Browsers:\r\n    Chrome: 102.0.5005.115\r\n    Firefox: 101.0.1\r\n    Safari: 15.1\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-02T16:03:44Z","created_at":"2022-06-17T13:04:38Z","creator_user_login":"TGlide"}
{"number":7607,"title":"Define static properties/methods against a component","body":"### Describe the problem\n\nUsing `context='module'` we can declare module-level properties for a component.\r\n\r\nHowever, you then have to assign new variables to address the exported properties. If you import multiple components using a similar pattern then you also have to rename them like this:\r\n\r\n```\r\nimport FooModal, { events as fooEvents } from './FooModal';\r\nimport BarModal, { events as barEvents } from './BarModal';\r\n// fooEvents.on(...)\r\n// barEvents.on(...)\r\n// <FooModal />\r\n// <BarModal />\r\n```\n\n### Describe the proposed solution\n\nIt would be much nicer if we could declare static properties/methods against a component so that we can use them like this:\r\n\r\n```\r\nimport FooModal from './FooModal';\r\nimport BarModal from './BarModal';\r\n// FooModal.on(...)\r\n// BarModal.on(...)\r\n// <FooModal />\r\n// <BarModal />\r\n```\n\n### Alternatives considered\n\n- Currently using `import FooModal, { events as fooEvents }`, but it's clumsy and verbose.\r\n- Could set the static properties in an import file outside the component but this is very hacky and even more clumsy.\r\n- Not aware of any other way to set static properties on a component.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-07-11T17:30:04Z","created_at":"2022-06-15T11:43:13Z","creator_user_login":"SystemParadox"}
{"number":7606,"title":"Context value received in wrong order if `bind:this` is set on a slot","body":"### Describe the bug\r\n\r\nGiven this structure:\r\n``` svelte\r\n<Wrapper>\r\n  <Comp>\r\n    <Cont/>\r\n    <Comp/>\r\n  </Comp>\r\n</Wrapper>\r\n```\r\nwhere:\r\n- `<Wrapper>` : shares a store via context\r\n- `<Comp>` : gets the store / a value from it + has a `<slot/>`\r\n- `<Cont>` : contains `<Comp>` with two slots populated\r\n\r\nFor simplicity, let's call the `<Comp>` inside `<Cont>`: _Child-Comp_\r\n\r\n If `bind:this` is set on any of  _Child-Comp_'s slots: the _Child-Comp_ will always get context / store value **first**, before anything else / it's higher parent components.\r\n\r\n### Reproduction\r\n\r\nREPL [getContext order (ok)](https://svelte.dev/repl/a8a93aa720a8452f90217ee2770b5e9e?version=3.48.0)\r\nREPL [getContext order (bad)](https://svelte.dev/repl/343d8a5daab24897bc35208c13830d1b?version=3.48.0)\r\n\r\n### Logs\r\n\r\n```shell\r\nno error\r\n\r\nREPL console log (order ok):\r\n\r\n\"wrapper--child-0 got store value\"\r\n\"wrapper--child-0--slot-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-0--child-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-0--child-1 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-1--child-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-1--child-1 got store value\"\r\n\"wrapper--child-0--slot-1 got store value\"\r\n\r\nREPL console log (order bad):\r\n\r\n\"wrapper--child-0--slot-0--child-0 got store value\"\r\n\"wrapper--child-0 got store value\"\r\n\"wrapper--child-0--slot-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-0--child-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-0--child-1 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-1--child-0 got store value\"\r\n\"wrapper--child-0--slot-0--child-0--slot-1--child-1 got store value\"\r\n\"wrapper--child-0--slot-1 got store value\"\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz    \r\n    Memory: 24.02 GB / 31.93 GB\r\n  Binaries:\r\n    Node: 17.9.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.15 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD \r\n    npm: 8.7.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 102.0.5005.115\r\n    Edge: Spartan (44.19041.1266.0), Chromium (102.0.1245.39)\r\n    Internet Explorer: 11.0.19041.1566\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-06-21T07:58:29Z","created_at":"2022-06-14T23:48:37Z","creator_user_login":"vatro"}
{"number":7605,"title":"TypeScript no way to define that component props implement a certain interface","body":"### Describe the problem\r\n\r\nI'm not sure if there's a solution to this problem, but when I want to spread an object into a component, I'm finding the currently way of declaring those props a little verbose and unsafe.\r\n\r\n```svelte\r\n<!-- List.svelte -->\r\n<script lang=\"ts\" context=\"module\">\r\n  export interface ItemData {\r\n    x: number\r\n    y: number\r\n    z: number\r\n  }\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n  import ListItem from './ListItem.svelte'\r\n\r\n  let list: ItemData[] = [\r\n    { x: 1, y: 1, z: 1 },\r\n    { x: 1, y: 1, z: 1 },\r\n  ]\r\n</script>\r\n\r\n<ul>\r\n  {#each list as item}\r\n    <ListItem {...item} />\r\n  {/each}\r\n</ul>\r\n```\r\n\r\n```svelte\r\n<!-- ListItem.svelte -->\r\n<script lang=\"ts\">\r\n  import type { ItemData } from './List.svelte'\r\n  // Is there a better way to define these props?\r\n  export let x: ItemData['x']\r\n  export let y: ItemData['y']\r\n  export let z: ItemData['z']\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\n\r\nI say unsafe because when I defined the props, I get no indicator that I've exhausted all the props or if I add more props to my data interface, same problem, it's not going to give me a type error in the component that I haven't declared component props for all the props types from the interface.\r\n\r\n### Describe the proposed solution\r\n\r\nIt looks like svelte generates types when I define a component\r\n<img width=\"373\" alt=\"Screen Shot 2022-06-14 at 4 26 43 PM\" src=\"https://user-images.githubusercontent.com/31900513/173682315-2af02096-4f0d-4dc1-8abd-6cafd00c1d07.png\">\r\n\r\nBut it would be nice if there was some  to manipulate the types svelte generated with some sort of generics slots over overload.\r\n\r\nA couple possibilities:\r\n\r\n```svelte\r\n<script lang=\"ts\" context=\"module\">\r\n  import type { ItemData } from './List.svelte'\r\n\r\n  function render(): {\r\n    props: ItemData\r\n    slots: {}\r\n    getters: {}\r\n    events: {}\r\n  }\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n  export let x // these would be inferred by the overload above\r\n  export let y\r\n  export let z\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\n\r\n```svelte\r\n<script lang=\"ts\" context=\"module\">\r\n  import type { ItemData } from './List.svelte'\r\n</script>\r\n\r\n<script lang=\"ts\" props=\"{ItemData}\">\r\n  export let x\r\n  export let y\r\n  export let z\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\n\r\n```svelte\r\n<script lang=\"ts\" props=\"{import('./List.svelte').ItemData}\">\r\n  export let x\r\n  export let y\r\n  export let z\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\n\r\nThe argument I'm making is mainly pertaining to props, but it would probably be nice to be able to manipulate all types the typescript compiler is generating for the component (slots, getters, events). From my experience, the TSC is great at type inference, but sometimes it needs a little help.\r\n\r\n### Alternatives considered\r\n\r\nInstead of spreading the object into the component, just pass it as a whole prop\r\n\r\n\r\n```svelte\r\n<!-- List.svelte -->\r\n<script lang=\"ts\" context=\"module\">\r\n  export interface ItemData {\r\n    x: number\r\n    y: number\r\n    z: number\r\n  }\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n  import ListItem from './ListItem.svelte'\r\n\r\n  let list: ItemData[] = [\r\n    { x: 1, y: 1, z: 1 },\r\n    { x: 1, y: 1, z: 1 },\r\n  ]\r\n</script>\r\n\r\n<ul>\r\n  {#each list as itemData}\r\n    <ListItem {itemData} />\r\n  {/each}\r\n</ul>\r\n```\r\n\r\n```svelte\r\n<!-- ListItem.svelte -->\r\n<script lang=\"ts\">\r\n  import type { ItemData } from './List.svelte'\r\n\r\n  // Alternative choice\r\n  export let itemData: ItemData\r\n  $: ({ x, y, z } = itemData)\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-01-27T16:13:37Z","created_at":"2022-06-14T21:00:35Z","creator_user_login":"seeker-3"}
{"number":7583,"title":"Improve performance of bind:clientWidth using ResizeObserver api","body":"### Describe the problem\r\n\r\nThe `bind:clientWidth` directive is very useful when you need to programmatically control the size of an element, but its current implementation suffers heavy performance issues.\r\n\r\nPresently, it seems that an iframe is created to compute the element size. Adding a new element like an iframe is not a light operation, and if a developper starts to setup `bind:clientWidth` everywhere, its application will become very laggy.\r\n\r\nThere exists is an official and quite simple API to deal with these kind of situations: the [ResizeObserver API](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver). Its purpose is to listen to any change of the element size and trigger a callback function.\r\n\r\nI tested the performance some time ago compared to Svelte's current approach, and when having a lot of `bind:clientWidth`, the performance gain is huge.\r\n\r\n### Describe the proposed solution\r\n\r\nI am personally using these 24 lines of code instead of `bind:clientWidth` to create a directive named `resizeObserver`:\r\n\r\n```ts\r\nlet observer: ResizeObserver;\r\nlet callbacks: WeakMap<Element, (element: Element) => any>;\r\n\r\nexport function resizeObserver(element: Element, onResize: (element: Element) => any) {\r\n   if (!observer) {\r\n      callbacks = new WeakMap();\r\n      observer = new ResizeObserver(entries => {\r\n         for (const entry of entries) {\r\n            const onResize = callbacks.get(entry.target);\r\n            if (onResize) onResize(entry.target);\r\n         }\r\n      });\r\n   }\r\n\r\n   callbacks.set(element, onResize);\r\n   observer.observe(element);\r\n\r\n   return {\r\n      destroy: () => {\r\n         callbacks.delete(element);\r\n         observer.unobserve(element);\r\n      },\r\n   };\r\n}\r\n```\r\n\r\nThen you can use it this way to mimic `bind:clientWidth` but without having to create an iframe:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n   let clientWidth = 0\r\n</script>\r\n\r\n<div use:resizeObserver={element => clientWidth = element.clientWidth}>\r\n   My width is: {clientWidth}\r\n</div>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nChecking size changes is tricky. The ResizeObserver api is native and well-supported by browsers so I see no reason to not use it.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-06-04T13:44:41Z","created_at":"2022-06-04T11:16:10Z","creator_user_login":"Gin-Quin"}
{"number":7582,"title":"Styling subcomponents based on import","body":"### Describe the problem\n\nI'd like to be able to override some styles (margins, paddings, colors) for a component I import in a higher order component. \r\n\n\n### Describe the proposed solution\n\nStyled components allow for higher level components to override styles (as long as they all are styled components). \r\nI think we could add something similar to svelte, since we know what generated classname a component has on compiletime, so we'd be able to replace the selector with the proper classname.\r\n\r\n```\r\n<style>\r\nimport Link from './Link.svelte'\r\n</style>\r\n\r\n<Link ... />\r\n\r\n<style>\r\n  {Link}:hover {\r\n    fill: rebeccapurple;\r\n  </style>\r\n```\n\n### Alternatives considered\n\nPassing custom property solutions are available, but that would require the imported component to expose all the possible values.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-04-23T04:55:04Z","created_at":"2022-06-03T16:38:37Z","creator_user_login":"dxlbnl"}
{"number":7576,"title":"Issue with Svelte component wrapping web components and forwarding 1:n slots","body":"### Describe the bug\n\nThis is probably connected to #7428. I created a detailed REPL showing the issue and some findings, see below.\r\n\r\nI am using a UI library based on web components. I wrap the web components into Svelte components so that I can stick to the \"programming model\" of Svelte in the application.\r\n\r\nThere is also a web component for tables, which includes two 1:n slots: `columns` for table columns and the default slot for table rows. When wrapping the respective web components (table, table column, ...) into Svelte components, the components for the table columns are rendered into the wrong slot.\r\n\r\nI tried the workarounds from #7428 and #1689. The one using `{...$$restProps}` does not work, maybe because the `columns` slot is 1:n. And wrapping the components into `<div>` does not work because that breaks the rendering of the web components. See the linked REPL below for details.\r\n\r\nThe only way I could make this work so far was by _not_ wrapping the web components for table and table columns into Svelte components but using the web components directly. That works but is not really what I want to do.\r\n\r\nIs there any other workaround that lets me use the wrapped components?\n\n### Reproduction\n\nSvelte REPL:\r\nhttps://svelte.dev/repl/1e420a118cac4b53b52cba49a2b29f34?version=3.48.0\r\n\r\nIt includes:\r\n- A working example using the web components directly, without wrapping Svelte components.\r\n- Using the wrapping Svelte components with the incorrect output.\r\n- The two workarounds I tried, both failing.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte REPL, version 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-06-01T08:22:22Z","created_at":"2022-06-01T08:22:22Z","creator_user_login":"winterkind"}
{"number":7575,"title":"`svelte:element` doesn't work as expected with `svelte` namespaced elements","body":"### Describe the bug\n\nSvelte seems to process svelte namespaced elements like `svelte:head` before `svelte:element`, causing elements like\r\n```html\r\n<svelte:element this=\"svelte:head\">\r\n  <title>Should be in head</title>\r\n</svelte:element>\r\n```\r\nto be directly output into the body of the DOM as \r\n```html\r\n<svelte:head>\r\n  <title>Should be in head</title>\r\n</svelte:head>\r\n```\n\n### Reproduction\n\n[REPL here](https://svelte.dev/repl/f1e4bd6e7b024feeac3fbcd0c3542d88?version=3.48.0) to show how elements don't get placed into `head` or `body` correctly.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.10 Ubuntu 21.10 21.10 (Impish Indri)\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-1035G1 CPU @ 1.00GHz\r\n    Memory: 2.40 GB / 3.68 GB\r\n    Container: Yes\r\n    Shell: 5.1.8 - /bin/bash\r\nBinaries:\r\n    Node: 16.15.0 - ~/.local/share/pnpm/node\r\n    npm: 8.5.5 - ~/.local/share/pnpm/npm\r\nBrowsers:\r\n    Edge: Spartan (44.22621.1.0), Chromium (98.0.1108.55)\r\n    Internet Explorer: 11.0.22621.1\r\nnpmPackages:\r\n    svelte: ^3.48.0 => 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-06-12T19:10:45Z","created_at":"2022-05-31T21:04:56Z","creator_user_login":"jack-weilage"}
{"number":7574,"title":"Cannot change $:-computed variable when it is computed from props","body":"### Describe the bug\n\n$: expression should track source variables and execute only when they change.\r\nThis works with local component state, but not when the state is passed to another component.\r\n\r\nThis is a consistency and developer usability issue. As a developer, I expect exported variables to work exactly the same as internal ones, especially if they are not bound in parent. As a result, a lot of \"strange\" code needs to be written to workaround the issue.\n\n### Reproduction\n\nhttps://svelte.dev/repl/1d4698e72d614e0e96450b52c33f8665?version=3.48.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nNot relevant\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-21T15:14:55Z","created_at":"2022-05-31T07:58:18Z","creator_user_login":"tenor-dev"}
{"number":7567,"title":"Using a ref inside a {#key} block turns it undefined or null","body":"### Describe the bug\r\n\r\nWhen I use a `{#key}` block that has a reactive variable from a store (let's call it `someVar`), my binding for a component will get lost. On initial render this variable is bound and I can interact with my component. But when `someVar` changes, I cannot longer use the component, the binding turns `undefined` or `null`.\r\n\r\nIs this intended? Or is there a workaround?\r\nWhen I just put the component outside that block it will work, but will cause me some \"flickering\" in the UI that I want to prevent.\r\n\r\n### Reproduction\r\n\r\nThis this [REPL](https://svelte.dev/repl/bbef7e7043744e9eb9467c9197d63727?version=3.48.0).\r\n\r\n### Logs\r\n\r\nThis is a dialog component with a click handler that calls a `show` function.\r\n\r\n```Uncaught TypeError: Cannot read properties of null (reading 'show') at HTMLDivElement.click_handler```\r\n\r\n### System Info\r\n\r\n```shell\r\n- macOS v12.4\r\n- Chrome v102\r\n- vscode\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-09-13T04:43:33Z","created_at":"2022-05-29T06:21:29Z","creator_user_login":"kevinXmichael"}
{"number":7563,"title":"<foreignObject> elements do not render when inserted via a <slot>","body":"### Describe the bug\n\nWhen a foreignObject (i.e nested HTML) is inserted into a `<slot>` of an SVG-based component, it will not render correctly. However, if the foreignObject appears _directly_ in the component, it renders as expected.\r\n\r\nThis bug may have the same underlying cause as [this issue](https://github.com/sveltejs/svelte/issues/6385), which was closed despite not being fixed.\n\n### Reproduction\n\n[The issue is reproduced here.](https://svelte.dev/repl/7f208580fc7e469c804532bda1b2f42b?version=3.48.0) I've defined two components which _should_ produce the same HTML. But as it so happens, only the first component renders correctly.\r\n\r\nNote: if you remove the outermost `<div>` in App.svelte, both components render correctly. I have no idea why.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 121.45 MB / 8.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.2 - /usr/local/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 8.5.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 101.0.4951.64\r\n    Firefox: 98.0.2\r\n    Safari: 15.1\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.46.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-08-25T07:13:41Z","created_at":"2022-05-27T06:25:51Z","creator_user_login":"nmsmith"}
{"number":7561,"title":"Passing \"null\" to on:\"eventname\" still adds event listener.","body":"### Describe the bug\r\n\r\nPassing \"export let\" variable to on: directives still creates event listener.\r\nPlain \"let\" variable works..\r\nBut It also doesn't work if I use \"on:click|stopPropagation\"\r\n\r\n### Reproduction\r\n\r\nThis adds event listener.\r\n\r\n![image](https://user-images.githubusercontent.com/87828192/170546913-96cd9480-ac65-478c-92e0-607f20f7a68e.png)\r\n\r\nThis also add event listener..\r\n\r\n![image](https://user-images.githubusercontent.com/87828192/170548697-3befe653-370d-4f76-84d1-aa02bc445d55.png)\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nMac, Chrome\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-06-14T13:21:27Z","created_at":"2022-05-26T17:55:44Z","creator_user_login":"humbleCoder1990"}
{"number":7553,"title":"Custom components nested inside a container with a transition can enter an inconsistent state","body":"### Describe the bug\n\nThis issue occurs for structures like this:\r\n\r\n```svelte\r\n{#if foo}\r\n  <div transition:fade>\r\n    {#if bar}\r\n      <CustomComp1 />\r\n    {:else}\r\n      <CustomComp2 />\r\n    ....\r\n```\r\n\r\nIn other words, it happens when there is a conditionally rendered parent with a transition, and that parent contains custom components that are conditionally rendered.\r\n\r\nThe bug is, if the inner conditionals change during the outer container's transition, the DOM can wind up in an internal state, such that some of the container's children are rendered even though their rendering conditional is no longer true.\r\n\r\nIt's hard to describe, but it's pretty obvious in the REPL demo. Thanks for considering!\n\n### Reproduction\n\n[reproduction in REPL](https://svelte.dev/repl/250bc5a352d54888929a621ec1decb3b?version=3.48.0)\r\n\r\nThe intention here is to show a tooltip-style label when each button is hovered, with the tooltip parent fading in and out, and the inner content of the tooltip changing depending on which button was hovered.\r\n\r\nIf you hover each button in and out slowly, everything works as expected. However if you hover two different buttons before the container's fade transition finishes, you wind up with multiple custom components being rendered. This shouldn't be possible, since the custom components appear in mutually exclusive `if..else` blocks.\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n(whatever is in the REPL)\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2022-05-23T06:12:29Z","created_at":"2022-05-23T06:12:29Z","creator_user_login":"fenomas"}
{"number":7549,"title":"getContext is undefined when called inside an element attribute.","body":"### Describe the bug\n\nI have some text put into the context of a page. When reading it with `getContext` in a child component into the href of a link, the value is `undefined`.\r\n\r\nThe SSR handles it as expected but in the client it becomes `undefined` (only during hydration I think, not sure).\r\n\r\nNote that it is only undefined when called inside an href or other html attribute. When called as part of some text it is the expected value.\r\n\n\n### Reproduction\n\nhttps://github.com/schurhammer/sveltekit-context-bug\n\n### Logs\n\n```shell\nServer logs\r\nexample\r\nexample\r\n\r\nBrowser logs\r\nTest.svelte? [sm]:5 example\r\nTest.svelte? [sm]:5 undefined\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.15 Manjaro Linux\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz\r\n    Memory: 9.27 GB / 31.04 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.2 - ~/.nvm/versions/node/v16.13.2/bin/node\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v16.13.2/bin/npm\r\n  Browsers:\r\n    Chromium: 101.0.4951.54\r\n    Firefox: 100.0\r\n  npmPackages:\r\n    @sveltejs/adapter-node: next => 1.0.0-next.73 \r\n    @sveltejs/kit: next => 1.0.0-next.335 \r\n    svelte: ^3.44.0 => 3.48.0\n```\n\n\n### Severity\n\nserious, but I can work around it\n\n### Additional Information\n\n_No response_","state":"open","updated_at":"2022-05-19T17:23:03Z","created_at":"2022-05-18T21:50:10Z","creator_user_login":"schurhammer"}
{"number":7543,"title":"Cannot interpolate boolean values in tweened","body":"### Describe the problem\n\nWhen working with tweened, I often get the error `Cannot interpolate boolean values`. Obviously, boolean values cannot be interpolated, but it seems weird to throw an error instead of just ignoring booleans altogether.\r\n\r\nWhen tweening arrays of objects, boolean properties can be useful (e.g. for toggling classes), and it makes no sense in my opinion to prevent developers from using boolean values in tweened stores.\n\n### Describe the proposed solution\n\nAdding this line in the tweened function would fix the issue, by updating any boolean value without trying to interpolate it or throwing an error:\r\n```js\r\nif (type === 'boolean') return () => b;\r\n```\n\n### Alternatives considered\n\nWell, for now I can write my own custom version of tweened, but I think that would be a nice improvement to the function, without breaking any functionality from what I can see.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-05-18T11:05:38Z","created_at":"2022-05-18T11:05:38Z","creator_user_login":"TomFevrier"}
{"number":7532,"title":"web component properties are not passed unless all lowercase","body":"### Describe the bug\r\n\r\nIf a web component has a property, it is not set from markup *unless* it's entirely lowercase. \r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/833b65a684ac497db2209d43a9a7e41d?version=3.48.0 \r\n\r\nThe setter for `incrementAmount` does not fire. If you change it in both places to `incrementamount` then it works.\r\n\r\nThis is *probably* a duplicate of https://github.com/sveltejs/svelte/issues/7381, but I think spells out the bug a little more clearly. \r\n\r\n### Logs\r\n\r\n```shell\r\nn/a\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-05-14T03:09:53Z","created_at":"2022-05-14T03:09:13Z","creator_user_login":"arackaf"}
{"number":7525,"title":"Bindable, bound & unbound properties","body":"Hey!\r\nI'm a long-time React developer who just started learning Svelte, so my view might be a little skewed, but I just wanted to share my thoughts. So far, I love Svelte, but I'm extremely confused by the seeming **lack of distinction between ordinary properties and `bind:`-able properties**.\r\n\r\n * Ordinary props serve as an **input** for a component and change only if the **parent** changes them. It is my understanding that one should never assign a value to props that aren't supposed to be `bind:`'ed.\r\n\r\n * Meanwhile, state variables are intended to be **internal** variables that cannot be read nor set by the parent. They are only changed by the component itself.\r\n\r\n * Bindable props seem like a blend of ordinary props and state variables to me – they are assigned an initial value by the parent, but then they act like an _observable_ state variable.\r\n\r\nHowever, both ordinary props and bindable props are denoted with the same syntax\r\n```typescript\r\nexport let prop;\r\n```\r\nand Svelte does not differentiate between them. If I wanted, I could add `bind:` to any prop on a component and Svelte would show no indication that I'm not supposed to, that it will never change. On the other hand, I could take a property that is supposed to be bound and use it as an ordinary property, which would result in no error or warning, but an [extremely unintuitive behavior](https://svelte.dev/repl/bf5ade02a58a4983b44a4af1675c4052?version=3).\r\n\r\nPersonally, I would very much prefer for ordinary properties to be read-only and for `bind:` props to have a different syntax – for example:\r\n```svelte\r\n<script>\r\n  bind: myProp;\r\n  bind: optionalBindProp = 42;\r\n</script>\r\n```\r\nor using [decorators](https://github.com/tc39/proposal-decorators):\r\n```svelte\r\n<script>\r\n  @bind\r\n  export let myProp;\r\n</script>\r\n```\r\n\r\nDo I just misunderstand the ideas behind bound props? Or would Svelte really benefit from distinguishing the two?","state":"open","updated_at":"2022-12-06T10:17:13Z","created_at":"2022-05-11T10:11:35Z","creator_user_login":"m93a"}
{"number":7524,"title":"Drag & Drop Support built into Svelte","body":"### Describe the problem\r\n\r\nSvelte has already Transitions built in and since Drag & Drop is a HTML Core feature I think Svelte should have it built in since we all love HTML and should be close to it. I believe we need a Svelte solution for Drag & Drop with features on top like easy drag/drop zones touch support & animations, since svelte has transitions built in it will be a breeze to animate it.\r\n\r\n### Describe the proposed solution\r\n\r\nInspiration from existing popular Svelte libraries can be taken like [https://www.npmjs.com/package/svelte-dnd-action](https://www.npmjs.com/package/svelte-dnd-action) and maybe built on top of them.\r\n\r\n### Alternatives considered\r\n\r\nI don't see any alternatives, the native HTML d&d is too barebones and sticking to external libraries would only make sense if HTML didn't have d&d but since it is a HTML thing I believe it belongs into Svelte and just like Transitions it should be a first class feature, just Svelter. \r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-05-19T13:14:44Z","created_at":"2022-05-11T09:36:40Z","creator_user_login":"ivanjeremic"}
{"number":7520,"title":"Provide current value of store in second argument of stores","body":"### Describe the problem\n\nThis is similar to https://github.com/sveltejs/svelte/issues/6737 but 'different'.\r\n\r\nWhen using the current setup to create a store, you are in the following situation:\r\n\r\n```js\r\nconst store = writable(0, (set) => {\r\n  // current store value not available here\r\n  return () => {\r\n    // final store value not available here\r\n  }\r\n}\r\n```\r\n\r\nYou cannot use `get(store)` in the final return as this would trigger a sub/unsub cycle, which in turn would trigger this block again and cause an infinite loop. Not 100% sure if you could use it in the first part (the setter).\r\n\r\nHaving this final value can be interesting if you want to make an api call storing the value but only when all subscribers are gone.\n\n### Describe the proposed solution\n\nGet an extra argument to either signatures: \r\n```js\r\nconst store = writable(0, (set, current) => {\r\n  return (current) => {\r\n  }\r\n})\r\n```\r\n\r\nThis will probably be a breaking change (maybe not if we only provide it on the `stop` function), so might be put as a consideration for Svelte v4.\n\n### Alternatives considered\n\nThis is possible with a custom store, that holds an extra variable to store the current value.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-19T04:39:43Z","created_at":"2022-05-09T11:34:36Z","creator_user_login":"stephane-vanraes"}
{"number":7518,"title":"Cannot use Tailwind's `@apply` on a selector within a media query","body":"### Describe the bug\r\n\r\nIt seems that you cannot use the Tailwind `@apply` syntax to add styles to a selector that is nested within a media query. An example use-case would be applying a Tailwind background color to the `body` tag for dark mode, which is currently a little challenging since `<svelte:body>` does not accept a `class` attribute.\r\n\r\nFor example, this code causes a build error\r\n\r\n```css\r\n@media (prefers-color-scheme: dark) {\r\n  :global(body) {\r\n    @apply bg-gray-900;\r\n  }\r\n}\r\n```\r\n\r\nWhile these are fine\r\n\r\n```css\r\n@media (prefers-color-scheme: dark) {\r\n  :global(body) {\r\n    background: red;\r\n  }\r\n}\r\n```\r\n\r\n```css\r\n:global(body) {\r\n  @apply bg-gray-900;\r\n}\r\n```\r\n\r\nI believe that this is the same error, but that issue was closed by the opener without a resolution\r\n\r\nhttps://github.com/sveltejs/svelte/issues/6638\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/alexlafroscia/__demo-tailwind-mq-apply-error\r\n\r\n### Logs\r\n\r\n```shell\r\nend must be greater than start\r\nError: end must be greater than start\r\n    at MagicString.remove (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:29632:27)\r\n    at file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:30648:26\r\n    at Array.forEach (<anonymous>)\r\n    at Atrule$1.minify (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:30646:27)\r\n    at file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:30801:23\r\n    at Array.forEach (<anonymous>)\r\n    at Stylesheet.render (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:30798:23)\r\n    at ssr (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:28574:30)\r\n    at compile (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/svelte/compiler.mjs:32273:15)\r\n    at compileSvelte2 (file:///Users/alexlafroscia/Code/github.com/alexlafroscia/demo-tailwind-mq-apply-error/node_modules/@sveltejs/vite-plugin-svelte/dist/index.js:320:20)\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.3.1\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 147.81 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.2 - ~/.volta/tools/image/node/16.14.2/bin/node\r\n    npm: 8.5.0 - ~/.volta/tools/image/node/16.14.2/bin/npm\r\n    Watchman: 2022.03.21.00 - /opt/homebrew/bin/watchman\r\n  Browsers:\r\n    Chrome: 101.0.4951.54\r\n    Safari: 15.4\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.48.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-11-07T12:05:09Z","created_at":"2022-05-08T22:38:17Z","creator_user_login":"alexlafroscia"}
{"number":7517,"title":"SSR-safe ID generation","body":"### Describe the problem\r\n\r\nThere are many cases where an application needs to connect DOM nodes with IDs:\r\n* form fields and labels (`for`)\r\n* accessible names (`aria-labelledby`)\r\n* more [presented here](https://github.com/reactwg/react-18/discussions/111#discussioncomment-1517265)\r\n\r\nGiven that these IDs do not need any semantic meaning, and given that humans are pretty terrible at coming up with app-level unique IDs, this is a job wonderfully suited for a framework. Taking SSR into consideration, we cannot simply use counter-based solutions or randomly generated IDs.\r\n\r\n### Describe the proposed solution\r\n\r\nReact 18 shipped its new [`useId()` hook](https://github.com/reactwg/react-18/discussions/111) which allows utilizing all the component tree knowledge of the framework and using that to generate IDs that are stable across SSR and unique across component instances.\r\n\r\nI would like to see a similar thing in Svelte. It could look like this (`createInstanceId`):\r\n```svelte\r\n<!-- sign-in-form.svelte -->\r\n<script lang=\"ts\">\r\n  import { createInstanceId } from 'svelte';\r\n  \r\n  const id = createInstanceId();\r\n  const usernameID = `${id}-username`;\r\n  const passwordID = `${id}-password`;\r\n</script>\r\n\r\n<label for={usernameID}>Username</label>\r\n<input id={usernameID} />\r\n\r\n<label for={passwordID}>Password</label>\r\n<input id={passwordID} type=\"password\" />\r\n```\r\n\r\n### Alternatives considered\r\n\r\n#### Variable\r\n\r\nThe ID could come from a compiler-populated instance-specific variable:\r\n```svelte\r\n<label for={$$id}>Username</label>\r\n<input id={$$id} />\r\n```\r\n\r\nAnother name could be `$$instanceId`, to reflect its instance-dependency. This isn't perfect though, as it still doesn't communicate clearly enough that this isn't a component-specific variable, but rather an instance-specific one. A function call communicates that much better, similarly to `createEventDispatcher()`\r\n\r\n#### Userland solution\r\n\r\nI have used naive ID-generation solutions in the past (namely, [`lukeed/uid`](https://github.com/lukeed/uid)) and they didn't seem to cause any visible issues, but it's very likely that I simply haven't run into a use-case where a mismatch between the client and the server would be a problem.\r\n\r\nOther userland solutions involve contexts, which is not great for developer experience, and might be problematic for asynchronous rendering (see https://github.com/reactwg/react-18/discussions/111#discussioncomment-1517189)\r\n\r\n### Importance\r\n\r\nwould make my life easier\r\n\r\n### Relevant mentions\r\n\r\nhttps://github.com/sveltejs/svelte/issues/6932","state":"open","updated_at":"2023-08-02T01:31:18Z","created_at":"2022-05-08T07:48:55Z","creator_user_login":"illright"}
{"number":7512,"title":"Optionally emit Performance.measure entries when updating components to analyze performance","body":"### Describe the problem\n\nIt's currently complicated to link \"there's a lot of javascript running\" to \"these components are rerendering\".\r\n\n\n### Describe the proposed solution\n\nIf Svelte would emit Performanc.measure entries, we'd see them in profilers (eg the Firefox Profiler but I believe Chrome too) and it would make it easier to analyze performance problems.\r\n\r\nReact < 17 had this in their development version, this was super helpful. They removed it for (IMO) no good reason.\n\n### Alternatives considered\n\nI don't know the svelte environment well enough to propose alternatives. There might be different ways to get the same result.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-05-05T13:16:18Z","created_at":"2022-05-05T13:16:18Z","creator_user_login":"julienw"}
{"number":7509,"title":"update of bound value happens to late when used inside slots ","body":"### Describe the bug\n\nI get an error when trying to conditionally render a `slot`. I check if a `item` is `truthy`, iff yes the `slot` should be rendered.\r\nThe parent component binds to that `item` and uses it to render something inside the `slot`.\r\nBecause the rendering process of the `slot` happens before the parent gets notified that the `item` has canged, the `item` is still `falsy` and an error will be thrown when accessing a value on the `item`.\r\n\r\nI can workaround the issue by using `let:` bindings on the slot insted of using `bind:`.\n\n### Reproduction\n\nhttps://svelte.dev/repl/a90607ce8dc840328d0756918fd0b736?version=3.48.0\r\n\r\nThe app crashes on line `#10` because `item` is `undefined`\n\n### Logs\n\n```shell\nCannot read properties of undefined (reading 'value')\n```\n\n\n### System Info\n\n```shell\nSvelte REPL, Svelte Version 3.48.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-05-04T19:59:54Z","created_at":"2022-05-04T19:59:54Z","creator_user_login":"ivanhofer"}
{"number":7503,"title":"Style directives don't work inside SVGs inside Svelte files","body":"### Describe the bug\n\n`style=\"font: bold 6px '{theme.numerals.fontFamily}', sans-serif;\"`\r\n\r\nThe above code works, but this:\r\n\r\n`style:font=\"bold 6px '{theme.numerals.fontFamily}', sans-serif;\"`\r\n\r\ndoes not.\r\n\r\nThe style directive works fine in other locations.\n\n### Reproduction\n\n```svg\r\n<svg id=\"clock\" viewBox=\"0 0 64 64\">\r\n<text\r\nstyle=\"font: bold 6px sans-serif;\"\r\nx=\"32\"\r\ny=\"8\">\r\nhello\r\n</text>\r\n</svg>\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19044\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\r\n    Memory: 4.64 GB / 15.65 GB\r\n  Binaries:\r\n    Node: 16.13.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.1.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (101.0.1210.32)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.43.1 => 3.46.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-05-02T09:55:25Z","created_at":"2022-05-02T00:31:20Z","creator_user_login":"justingolden21"}
{"number":7500,"title":"a11y inert","body":"### Describe the problem\n\nCan Svelte have the [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) property inert?\r\n![image](https://user-images.githubusercontent.com/147320/166142578-ed0aa0e6-73f0-4ee1-9cd8-901779068743.png)\r\n \n\n### Describe the proposed solution\n\nIt can be done like `checked`, `readonly`, and `disabled`.\n\n### Alternatives considered\n\nAdd support for [wicg-inert](https://github.com/WICG/inert).\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-03-10T00:51:44Z","created_at":"2022-05-01T10:49:06Z","creator_user_login":"shinokada"}
{"number":7493,"title":"`<slot>` fallback content failing to render during SSR","body":"### Describe the bug\r\n\r\nThis might be a bit of an edge case, but if you put a comment followed by a line break within a `<slot>`, which is itself contained within an `#each` block, the fallback content of the `<slot>` will fail to render during SSR. e.g.\r\n\r\n```svelte\r\n{#each items as item}\r\n  <Widget>\r\n    <!-- Comment -->\r\n  </Widget>\r\n{/each}\r\n```\r\n\r\nI believe this is because the line break is not trimmed within the `#each` block and is therefore returned as a valid node. As per L27 below.  It's not clear to me why this differs between DOM and SSR. https://github.com/sveltejs/svelte/blob/11ada9856512bd7d344be2ce4683cf1a1e30f522/src/compiler/compile/render_ssr/handlers/utils/remove_whitespace_children.ts#L23-L32\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/298847408f584478969c7fdab9eceadb?version=3.47.0\r\n\r\nThis is an issue with SSR, so it won't show up in the **Results** tab, but if you navigate to **JS Output** and select `generate: ssr` you'll see the following:\r\n\r\n```js\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\tconst items = Array.from({ length: 1 });\r\n\r\n\treturn `${each(items, item => {\r\n\t\treturn `${validate_component(Widget, \"Widget\").$$render($$result, {}, {}, {\r\n\t\t\tdefault: () => {\r\n\t\t\t\treturn `\r\n\t`;\r\n\t\t\t}\r\n\t\t})}`;\r\n\t})}`;\r\n});\r\n```\r\n\r\nWithout the offending comment (or the line break), you get the expected result:\r\n\r\n```js\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\tconst items = Array.from({ length: 1 });\r\n\r\n\treturn `${each(items, item => {\r\n\t\treturn `${validate_component(Widget, \"Widget\").$$render($$result, {}, {}, {})}`;\r\n\t})}`;\r\n});\r\n```\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nChrome: Version 100.0.4896.88 (Official Build) (x86_64)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-04-29T10:24:09Z","created_at":"2022-04-29T10:11:29Z","creator_user_login":"bayre"}
{"number":7490,"title":"Two-way binded select doesn't correctly updates its validity state","body":"### Describe the bug\n\n[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) property of a select reference doesn't seem to update correctly when the value of a select is binded.\r\n\r\nFor example, when I use a required on a select (multiple or not) and bind the value, the validity property works properly when selecting options but doesn't update normally when value is modified outside the select.\r\nThis particular case is recreated in the REPL below\n\n### Reproduction\n\n[REPL link](https://svelte.dev/repl/670c513930be49e1b2efab07e0046008?version=3.47.0)\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-11370H @ 3.30GHz\r\n    Memory: 6.61 GB / 15.69 GB\r\n  Binaries:\r\n    Node: 17.1.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.1.3 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (100.0.1185.50)\r\n    Internet Explorer: 11.0.22000.120\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.47.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-04-27T15:01:08Z","created_at":"2022-04-27T15:01:08Z","creator_user_login":"Tyrenn"}
{"number":7474,"title":"Unknown prop using export let and export function - error comeback","body":"### Describe the bug\r\n\r\nIt's the same problem:\r\nhttps://github.com/sveltejs/svelte/issues/4323\r\n\r\n### Reproduction\r\n\r\nThis is the REPL from that bug:\r\nhttps://svelte.dev/repl/79aa242f7e6d4af684099868189d3cb4?version=3.18.0\r\n\r\n> If you click on button \"toggle modal\" in console you should have this warning:\r\n> \r\n> \"<Form> was created with unknown prop 'saveForm'\"\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Arch Linux\r\n    CPU: (4) x64 AMD Athlon(tm) X4 950 Quad Core Processor\r\n    Memory: 1.73 GB / 15.07 GB\r\n    Container: Yes\r\n    Shell: 5.1.8 - /bin/bash\r\n  Binaries:\r\n    Node: 16.3.0 - /usr/bin/node\r\n    Yarn: 1.22.10 - /usr/bin/yarn\r\n    npm: 7.17.0 - /usr/bin/npm\r\n  Browsers:\r\n    Brave Browser: 100.1.37.109\r\n    Firefox: 87.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-04-21T05:04:46Z","created_at":"2022-04-20T15:31:05Z","creator_user_login":"lukaszpolowczyk"}
{"number":7469,"title":"fix: do not reuse claimed nodes if the html does not match","body":"Fixes https://github.com/sveltejs/kit/issues/2977\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-04-19T15:53:09Z","creator_user_login":"tanhauhau"}
{"number":7465,"title":"[Syntax] `set-layer:name` and `get-layer:name` attributes for the `<style>` tag and CSS `@layer` - pass style to subcomponent","body":"### Describe the problem\r\n\r\nPassing CSS styles between components.\r\nSometimes I have a style in a parent component and can't conveniently pass it to the subordinate components.\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nThe `set-layer` and `get-layer` attributes for the `<style>` tag + use of the CSS standard [`@layer`](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer).\r\nThe `set-layer` and `get-layer` attributes are analogous to Svelte [`set`/`getContext`](https://svelte.dev/docs#run-time-svelte-setcontext).\r\n\r\nExample:\r\n```svelte\r\n<!-- Com.svelte -->\r\n<script>\r\nimport SubCom from \"./SubCom.svelte\";\r\n</script>\r\n<style set-layer:name>\r\n\t@layer name {\r\n\t\t.class1 {}\r\n\t}\r\n</style>\r\n<div class=\"class1\"></div>\r\n<SubCom/>\r\n```\r\n```svelte\r\n<!-- SubCom.svelte -->\r\n<div class=\"class1 class2\"></div>\r\n<style get-layer:name>\r\n\t@layer self, name;\r\n\t\r\n\t@layer self {\r\n\t\t.class2 {}\r\n\t}\r\n</style>\r\n```\r\n\r\n### Features\r\n* The use of `@layer`, besides (following the standard) setting the order of styles, has the function of naming the style fragment, so that it can be passed to the subcomponent more easily.\r\n* Both `set-layer` and `get-layer` can be used multiple times when you want to split and pass more style fragments.\r\n* The style passed by `set`/`get-layer` must be available only for those components where these attributes are used. This is not supposed to work like `:global` or have any leakage.\r\n* Layer names shouldn't leak either, they should only be visible to the components where they are used, and not available in an external CSS file for example.\r\n\r\n(name `set-layer` and `get-layer` - temporary, something to think of)\r\n\r\n**EDIT**: after experimenting I think using `@layer` is a bad idea, or at least problematic. You need to use your own at-rule e.g. `@module` `@fragment` `@expose` - unfortunately this is a non-standard syntax and I'm not happy about it.\r\n\r\n### Alternatives considered\r\n\r\nThis is a new version of that idea - https://github.com/sveltejs/svelte/issues/6422\r\n\r\nAnd the rest that everyone knows about like `:global`, various CSS preprocessors.\r\n\r\nI think ideas like \"passing classes\" is much worse than my proposal.\r\nPassing CSS variables is not that at all.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-05-01T10:56:58Z","created_at":"2022-04-16T04:40:46Z","creator_user_login":"lukaszpolowczyk"}
{"number":7458,"title":"Svelte throws exception due to apparent race condition when a component sets a store when first loading","body":"### Describe the bug\r\n\r\nIn some cases, a component that immediately modifies a store when loading (or in `onMount` apparently) can cause exceptions in other components that use that store if they haven't finished mounting yet.\r\n\r\nFrom what I've been able to figure out, the timeline is something like this:\r\n\r\n1. A component loads that uses the store\r\n2. Another component loads that writes the store when it starts\r\n3. Writing the store causes the first component to be marked dirty even though the component hasn't actually mounted yet.\r\n4. A third component loads and calls `flush` at the end of its init function.\r\n5. `flush` goes through and calls `update`  on all the dirty components, which in turn calls `$$.fragment.p`. But since the first component hasn't actually mounted yet, it's dealing with elements that either don't exist or are not yet added to the DOM and so these may throw exceptions.\r\n\r\nI'm not entirely sure if using the client component API is necessary to make this happen. It is necessary in my reproduction, and I'm using it in my real SvelteKit project as well where I first encountered this bug, but in a very different place so I'm not entirely sure.\r\n\r\nThis can be worked around by waiting a `tick` to set the store:\r\n\r\n```\r\nlet destroyed = false;\r\nonDestroy(() => (destroyed = true));\r\ntick().then(() => {\r\n  if (!destroyed) {\r\n    $s = true;\r\n  }\r\n});\r\n```\r\n\r\nThis workaround succeeds in both my reproduction here and in my actual much more complicated app.\r\n\r\nIt feels like the proper fix is not set `ready` in the component until it has actually finished mounting, but I'm kind of guessing here and am not sure if that might mess up something else.\r\n\r\n### Reproduction\r\n\r\nREPL: https://svelte.dev/repl/1d363ab12dc84315a38472e29f5b2ed3?version=3.47.0\r\nSvelteKit: https://github.com/dimfeld/svelte-update-bug\r\n\r\nThe code is pretty much the same in the above two.\r\n\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte REPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-04-14T08:48:39Z","created_at":"2022-04-14T08:28:59Z","creator_user_login":"dimfeld"}
{"number":7456,"title":"`/* */` comments don't work in inline functions","body":"### Describe the bug\n\n\"Expected }\" syntax error when attempting to use `/*` comments\r\n![image](https://user-images.githubusercontent.com/57028336/163321179-a4243dc1-b317-4959-9d4a-2436d4f8fda1.png)\r\n\n\n### Reproduction\n\n```svelte\r\n<button on:click=\"{() => {} /* asdf */}\" />\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (6) x64 Intel(R) Core(TM) i5-8600 CPU @ 3.10GHz    \r\n    Memory: 2.71 GB / 15.78 GB\r\n  Binaries:\r\n    Node: 16.9.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 7.24.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 99.0.4844.84\r\n    Edge: Spartan (44.19041.1266.0), Chromium (99.0.1150.55)\r\n    Internet Explorer: 11.0.19041.1566\r\n  npmPackages:\r\n    svelte: ^3.47.0 => 3.47.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-05-19T13:11:37Z","created_at":"2022-04-14T05:45:17Z","creator_user_login":"DetachHead"}
{"number":7437,"title":"Feature Suggestion: Improve versatility of `<svelte:component>` and `<svelte:element>` by treating them as a `<svelte:fragment>` when the `this` prop value is present but is a falsy or nullish value","body":"## Describe the problem\r\n\r\nIn some cases, I would like to conditionally render some content in a component or element.\r\n\r\n## Describe the proposed solution\r\n\r\nFor these cases, it would be useful if we were able to conditionally omit the component or element by using a nullish or falsy value in the `this` prop. So this example (below) would simply render `Some text` since the `this` prop is a falsy value:\r\n\r\n```svelte\r\n<svelte:component this={false && MyComponent}>\r\n  Some text\r\n</svelte:component>\r\n```\r\n\r\nIn such cases, the `<svelte:component>` or `<svelte:element>` would simply be treated as a `<svelte:fragment>`.\r\n\r\n## Alternatives considered\r\n\r\nThe main alternative is see is similar but essentially creating my own `Fragment` component which simply returns the slotted content in this format:\r\n\r\n```svelte\r\n<slot {...$$restProps} />\r\n```\r\n\r\nIn practice, it could be used like this:\r\n\r\n```svelte\r\n<svelte:component\r\n  this={condition\r\n    ? WrapperComponent\r\n    : Fragment\r\n  }\r\n>\r\n  Some text\r\n</svelte:component>\r\n```\r\n\r\nThe downside to this, aside from having to import another custom component is that it would not work at all for `<svelte:element>`. In those cases, I would actually have to create a Svelte component counterpart for every single element so I could use them against my new `Fragment` component like this:\r\n\r\n```svelte\r\n<script>\r\n  import { Fragment, Div } from './customComponents.js';\r\n  const condition = Math.random() < 0.5;\r\n</script>\r\n\r\n<svelte:component\r\n  this={condition\r\n    ? Div\r\n    : Fragment\r\n  }\r\n>\r\n  Some text\r\n</svelte:component>\r\n```\r\n\r\n## Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-02-26T03:28:24Z","created_at":"2022-04-08T20:01:42Z","creator_user_login":"brandonmcconnell"}
{"number":7428,"title":"A component wrapping a custom element is not rendered into a slot correctly","body":"### Describe the bug\n\nSee the link to the REPL below...\r\n\r\nI have two components, Input and Icon, which both wrap imported custom elements:\r\n- `Icon.svelte` is a wrapper for [ui5-icon](https://sap.github.io/ui5-webcomponents/playground/components/Icon/) and simply forwards a `name` attribute.\r\n- `Input.svelte` is a wrapper for [ui5-input](https://sap.github.io/ui5-webcomponents/playground/components/Input/). Input.svelte forwards one named slots of ui5-input: `icon`.\r\n\r\nIn my main component, `App.svelte`, I use `Input.svelte` twice. Both times I try to set an icon to the input by using the `icon` slot. When I fill the slot with `ui5-icon` directly, that works fine. But when I try the same with the `Icon.svelte` component, no icon shows.\r\n\r\nAm I overlooking something obvious or is this a bug? From what I can see in the rendered DOM, one ui5-icon is added as a child of ui5-input in both cases. But in the second case, ui5-icon is missing the `slot=\"icon\"` attribute.\n\n### Reproduction\n\nREPL:\r\nhttps://svelte.dev/repl/6e8a7f1a4dc64fdba71aa72be8b17be9?version=3.46.6\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSvelte REPL, version 3.46.6\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-19T10:01:37Z","created_at":"2022-04-07T16:32:57Z","creator_user_login":"winterkind"}
{"number":7424,"title":"[Feature] Bind to text nodes with `svelte:element`","body":"### Describe the problem\r\n\r\nHaving the ability to bind to text or comment nodes would be valuable for people developing CMS tools, page builders and other content-editing related projects.\r\n\r\nRelated issues:\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4544\r\n\r\n### Describe the proposed solution\r\n\r\nAbility to bind to a special svelte element type such as `<svelte:text>` or `<svelte:comment>` or the proposed `<svelte:element tag=\"#text\">`\r\n\r\nText Nodes are a valid [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) in HTML, and come with all the properties and methods that people will find valuable to be able to bind to, such as `.after()` `.nextSibling` `.parentNode` and so on.\r\n\r\nEditors like Prose mirror attach metadata to nodes in order to count cursor offsets and lengths, and being able to do this would be valuable.\r\n\r\n### Alternatives considered\r\n\r\nCreating a useless element and binding to that in order to get to the text node, eg:\r\n```\r\n<script>\r\n  let ref;\r\n\r\n  onMount(() => {\r\n    const child = ref.nextElementSibling;\r\n  });\r\n</script>\r\n<span bind:this={ref} style=\"display:none\"></span>\r\n<slot>\r\n```\r\n\r\n### Importance\r\n\r\n- [x] Allows binding to `#text` nodes, useful for page-builders, without needing to wrap in a useless element which may affect content-flow.\r\n","state":"open","updated_at":"2022-04-16T07:38:42Z","created_at":"2022-04-07T01:03:51Z","creator_user_login":"AlbertMarashi"}
{"number":7404,"title":"Unexpected behavior using spread attributes.","body":"### Describe the bug\n\nSpread attributes will result into different attributes rather than regular ones.\r\n\r\n[Documentation](https://svelte.dev/docs#template-syntax-attributes-and-props) provides for similar behavior:\r\n1. Using boolean attributes like this:\r\n<img width=\"739\" alt=\"image\" src=\"https://user-images.githubusercontent.com/49815452/161017434-6fcef0e2-1e68-4a9d-9770-6df4196138e0.png\">\r\n2. Using spread attributes _(not props)_ like this:\r\n<img width=\"751\" alt=\"image\" src=\"https://user-images.githubusercontent.com/49815452/161017630-d28a6e8a-e862-491a-9fd5-ad7731684bb0.png\">\r\n\r\nBut combining this two use cases will result into unexpected behavior.\r\n\r\nOriginal issue: #7346\n\n### Reproduction\n\n```svelte\r\n<script>let readonly = false;</script>\r\n<input {readonly} />\r\n<input {...{readonly}} />\r\n```\r\n\r\nwill result into:\r\n\r\n```html\r\n<input>\r\n<input readonly=\"false\">\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.2.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 80.64 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\nBinaries:\r\n    Node: 17.7.1 - /opt/homebrew/bin/node\r\n    Yarn: 1.22.15 - /opt/homebrew/bin/yarn\r\n    npm: 8.5.2 - /opt/homebrew/bin/npm\r\nBrowsers:\r\n    Chrome Canary: 102.0.4974.2\r\n    Firefox Developer Edition: 99.0\r\n    Safari: 15.3\r\n    Safari Technology Preview: 15.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-03-31T09:02:53Z","created_at":"2022-03-31T09:02:53Z","creator_user_login":"ZerdoX-x"}
{"number":7403,"title":"Selector Lists Break `:global` When Attributes Are Targeted (`3.46.5`)","body":"### Describe the bug\n\nIt seems that when #6435 got merged to resolve #6434, some loose ends still remained untied. In particular, there seem to be specific scenarios where `:global(:where(selector-list))` and the like still do not work.\r\n\r\nIn my case, I cannot perform the following:\r\n\r\n```scss\r\nmain :global([href], [href] + p) {\r\n  color: red !important;\r\n}\r\n```\r\n\r\nor anything similar.\r\n\r\n---\r\n\r\nFrom what I can tell so far, the issue seems to occur particularly when `:global` is the last part of a selector _and_ it is passed a pseudo-class with a selector list that targets attributes.\r\n\r\nRegarding the above example, you'll see that the selector is able to work properly when `main >` is removed or when `[href]` is changed to a non-attribute selector. But, of course, this means that a dev's set of options for styling their elements is noticeably restricted by this.\n\n### Reproduction\n\nhttps://svelte.dev/repl/0d8c724d28b04840a9faaf36769047ec?version=3.46.5\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.2.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-1068NG7 CPU @ 2.30GHz\r\n    Memory: 56.29 MB / 32.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.14.0 - ~/.nvm/versions/node/v16.14.0/bin/node\r\n    npm: 8.4.1 - ~/.nvm/versions/node/v16.14.0/bin/npm\r\n    Watchman: 2022.02.14.00 - /usr/local/bin/watchman\r\n  Browsers:\r\n    Chrome: 99.0.4844.84\r\n    Firefox: 98.0.2\r\n    Safari: 15.3\r\n  npmPackages:\r\n    svelte: ^3.46.5 => 3.46.5\r\n```\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2022-03-30T19:39:22Z","created_at":"2022-03-30T19:39:22Z","creator_user_login":"ITenthusiasm"}
{"number":7400,"title":"Media element's `buffered` binding doesn't update frequently enough to match native `TimeRange` object","body":"### Describe the bug\r\n\r\nIt seems that the current [`buffered`](https://svelte.dev/docs#template-syntax-element-directives-bind-property-media-element-bindings) binding [relies on the `progress` event](https://github.com/sveltejs/svelte/pull/819#issuecomment-328282736) to update its `TimeRange` object (or rather, its \"array of `{start, end}` objects\"). \r\n\r\nIn my experience, however, the `progress` event doesn't actually fire frequently enough to reflect the state of the native `HTMLMediaElement.buffered`'s `TimeRange` object.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/a7c0417e5a204ef8b3a295e5c7881645?version=3.46.4\r\n\r\nNote: swapping line 11 for line 10 is actually a more accurate representation of the native players buffer state. In line 11 the reactive statement has `buffered` as a dependency as well.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n  OS: macOS 12.3\r\n  CPU: (8) arm64 Apple M1\r\n  Memory: 820.17 MB / 16.00 GB\r\n  Shell: 5.8 - /bin/zsh\r\nBinaries:\r\n  Node: 16.13.0 - ~/.nvm/versions/node/v16.13.0/bin/node\r\n  Yarn: 1.22.17 - /opt/homebrew/bin/yarn\r\n  npm: 8.5.2 - ~/.nvm/versions/node/v16.13.0/bin/npm\r\nBrowsers:\r\n  Chrome: 99.0.4844.84\r\n  Firefox: 98.0.2\r\n  Safari: 15.4\r\nnpmPackages:\r\n  rollup: ^2.3.4 => 2.70.1 \r\n  svelte: ^3.0.0 => 3.46.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-03-31T01:25:29Z","created_at":"2022-03-30T00:18:52Z","creator_user_login":"fartinmartin"}
{"number":7399,"title":"Access target/anchor properties from within component","body":"### Describe the problem\n\nWhen a component is created it must specify a `target`, and optionally, an `anchor`. Collaborating libraries that interact with the DOM may wish to have a handle to either the `target` or `anchor` elements, but there is currently no way to access either of these from within the component, even though the component could be made aware by some mechanism at runtime.\r\n\r\n\n\n### Describe the proposed solution\n\nNot sure what the best way to access this information from within the component would be. Perhaps `$$props.anchor`?\n\n### Alternatives considered\n\nSince `target` and `anchor` are unavailable, but arbitrary parameters can be passed, we can duplicate the element using `props` instead.\r\n\r\n```ts\r\nnew MyComponent({\r\n    target: el.parentElement!,\r\n    anchor: el,\r\n    props: {\r\n        element: el,\r\n    },\r\n});\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-03-30T05:34:39Z","created_at":"2022-03-29T20:32:10Z","creator_user_login":"Bilge"}
{"number":7379,"title":"Custom Elements Hydrated Incorrectly","body":"### Describe the bug\r\n\r\nI was able to get custom elements for our video player library (https://github.com/vidstack/player) to render server-side, but noticed strange behaviour when elements are hydrated. You can observe in the repro link provided. \r\n\r\nEssentially the element is parsed and rendered by the browser when the initial HTML is served, however, after the element is claimed by Svelte whilst hydrating, it wipes the entire state out and sets all attributes/properties to `null` that were not set by the user ([traced to this line](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts#L442-L445)). \r\n\r\nThis means all default prop values are set to an unexpected `null` value,  and the `style` property is also reset which means all CSS variables that are set on the custom element itself are removed.\r\n\r\nThis behaviour is inconsistent between client-side and server-side rendering with Svelte. I'd expect the custom element to work mostly the same way regardless of how it's rendered.\r\n\r\n\r\nI'm not entirely sure why the claiming process removes all attributes in the way it does so I can't suggest a solution. Maybe if it's a custom element leaving the attributes as-is?\r\n\r\n**NOTE:** To clarify this only occurs with SSR (not an SPA), and only if the elements are registered before they're claimed by Svelte. As mentioned, it's because (1) the browser parses the HTML delivered from the server, (2) the element is registered, (3) the element is \"upgraded\" to a custom element, and then (4) Svelte in the claiming process wipes all attrs/props by resetting them to `null`.\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/mihar-22/svelte-custom-elements-hydration-bug\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 76.64 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.1 - ~/.volta/tools/image/node/16.13.1/bin/node\r\n    Yarn: 1.22.17 - ~/.volta/tools/image/yarn/1.22.17/bin/yarn\r\n    npm: 8.1.2 - ~/.volta/tools/image/node/16.13.1/bin/npm\r\n  Browsers:\r\n    Chrome: 98.0.4758.102\r\n    Firefox: 97.0.2\r\n    Safari: 15.1\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.46.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-21T22:27:55Z","created_at":"2022-03-21T07:40:18Z","creator_user_login":"mihar-22"}
{"number":7378,"title":"Feature Request: Template guard clauses","body":"### Describe the problem\n\nSince svelte templates lack a return statement, it can lead to \"[arrow code]\" which has many levels of indentation. Such code can be hard to reason about.  \r\n\r\n[arrow code]: https://blog.codinghorror.com/flattening-arrow-code/\r\n\r\nFor example, a check like this might require you to add a level of indentation to your entire page:\r\n\r\n```\r\n{#if user == null}\r\n    Error: Must be logged in to view this page\r\n{: else}\r\n    <!-- page content here -->\r\n{/if}\r\n```\r\n\r\nAnd the problem gets worse as you have more and more conditions to check. \r\n\r\nFor example, if you need to use an `await` block, now you have two levels:\r\n\r\n```\r\n{#await foo}\r\n    Waiting ...\r\n{:then loaded}\r\n    {#if loaded.someCondition}\r\n        Error: someCondition happened.\r\n    {:else}\r\n        <!-- possibly large block of code -->\r\n    {/if}\r\n{:catch e}\r\n    <!-- error handling -->\r\n{/await}\r\n```\r\n\n\n### Describe the proposed solution\n\nIt would be nice if svelte templates had something synonymous to guard clauses in code that would help you: \r\n\r\n* Check for some condition\r\n* Display some error message\r\n* Bail out of the rest of the current template scope.\r\n\r\n\r\nSomething like this:\r\n\r\n```\r\n{#guard if !someRequredCondition}\r\n    Error Message\r\n{/guard}\r\n\r\n<!-- main template-->\r\n```\r\n\r\nWhich is just syntax sugar for the equivalent code:\r\n```\r\n{#if !someRequriedCondition}\r\n    Error Message\r\n{:else}\r\n    <!-- main template -->\r\n{/if}\r\n```\r\n\r\nWhen used inside other scopes, the guard would only apply the syntax sugar to the rest of the template in that scope.  So, for example, the `await` example from above would become:\r\n\r\n```\r\n{#await foo}\r\n    Waiting ...\r\n{:then loaded}\r\n    {#guard if loaded.someCondition}\r\n        Error: someCondition happened.\r\n    {/guard}\r\n    <!-- possibly large block of code -->\r\n{:catch e}\r\n    <!-- error handling -->\r\n{/await}\r\n```\r\n\r\nIn templates that need to do lots of checking like this, guard block could save several layers of indentation and really help simplify things.  \r\n\n\n### Alternatives considered\n\nI briefly thought about proposing something like {#return} so that you could make any block a guard block, but I don't feel like that maps well to templates. Happy to hear alternative proposals here!\r\n\r\n---\r\n\r\n**Out of scope for this request**, but brainstorming further into the future where we have `guard`:\r\n\r\nIf guards become a common idiom in Svelte, it might even be worth applying them to things like the await block pattern to remove indentation there too.\r\n\r\nFor example, if we had guard, but not special await syntax, I'd be tempted to write something like this to avoid the await block indentation:\r\n\r\n```\r\n{#guard if !awaitHelper.resolved}\r\n    Waiting ...\r\n{:if awaitHelper.exception}\r\n    Error loading foo...\r\n{:if awaitHelper.resolvedValue.someCondition}\r\n    Loaded value has some error: ...\r\n{/guard}\r\n\r\n<!-- possibly large block of code -->\r\n```\r\n\r\nBut that requires me/Svelte writing some (admittedly, probably simple) AwaitHelper class to uncouple promise state from the `{#await}` handling.\r\n\r\nMaybe it would be simpler to extend the guard syntax into await with something like:\r\n\r\n```\r\n{#guard await foo}\r\n   Waiting ...\r\n{:catch e}\r\n    Error ...\r\n{/guard}\r\n\r\n<!-- TBD ... how do we make the resolved value available here?  Hmm.  -->\r\n<!-- possibly large block of code -->\r\n```\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-03-20T17:42:41Z","created_at":"2022-03-20T17:42:41Z","creator_user_login":"NfNitLoop"}
{"number":7376,"title":"docs: add component comments","body":"I find `@component` comments to be highly useful. I actually wasn't aware it was supported by the Svelte Language Server until recently.\r\n\r\nWhen visiting the documentation site, I cannot find documentation on component comments using a `command + f` search. Currently, component comments are only documented in the [FAQs section](https://svelte.dev/faq#how-do-i-document-my-components).\r\n\r\nThis PR adds documentation for component comments to the Comments section.\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-03-19T01:17:29Z","creator_user_login":"metonym"}
{"number":7367,"title":"bind:this in each block not working with Array.splice","body":"### Describe the bug\n\nWhen using `array.splice(...)` to edit an array, followed by `array = array` to trigger a UI update, bind:this throws an error while other bind:... work just fine.\r\n\r\n\r\nA workaround is to use `array = array.slice(...)`. It has the same effect, but has the overhead of creating a new array.\n\n### Reproduction\n\nYou can check this behavior in the REPL linked here:\r\n\r\nhttps://svelte.dev/repl/cab0349e43bb4d9abaed188e0e1bc606?version=3.46.4\r\n\r\nTry to click Add a couple of times and then click one of the two Remove buttons. The one that uses `splice` should throw an error in Console, while the the one that uses `slice` should work.\n\n### Logs\n\n```shell\nError: Uncaught (in promise): Cannot set properties of undefined (setting 'component')\n```\n\n\n### System Info\n\n```shell\nREPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-03-17T11:42:31Z","created_at":"2022-03-14T11:36:34Z","creator_user_login":"cdellacqua"}
{"number":7363,"title":"{#each} with immutable values","body":"### Describe the problem\n\nThe \"update\" method of **{#each}** blocks is not optimized for immutable object.\r\n\r\nWhen updating a single element of the array, all the elements of the array are reinterpreted (even if the DOM is not modified).\r\n\r\nFor exemple if we have something like this :\r\n```svelte\r\n<ul>\r\n{#each names as name}\r\n\t<li>{name.toUpperCase()}</li>\r\n{/each}\r\n</ul>\r\n```\r\nIt will produce the following update method for the each-block :\r\n```svelte\r\np(ctx, dirty) {\r\n\tif (dirty & /*names*/ 1 && t_value !== (t_value = /*name*/ ctx[4].toUpperCase() + \"\"))\r\n\t\tset_data(t, t_value);\r\n},\r\n```\r\n\r\nAs a result, the method **toUpperCase()** will be called on all elements of the array, even if they have not been modified. \r\n\r\n\r\nAnother exemple with this REPL that show an array of 10 names displayed via **{#each}**, and editable via an <input>.\r\nEach edition generates 10 calls to the format() method...\r\n\r\nREPL : https://svelte.dev/repl/49cf048b227647deb9fd46bab489dbd0?version=3.46.4\r\n\r\n\r\nThese examples are simplistic and do not cause problems, but on larger arrays this could cause performance issues... \n\n### Describe the proposed solution\n\nIt would be nice to be able to tell **{#each}** that we are using immutable objects.\r\n\r\nFor exemple by using a keywork like **immutable** :\r\n```svelte\r\n{#each immutable names as name}\r\n\t<li>{name.toUpperCase()}</li>\r\n{/each}\r\n```\r\nOr by using a new template syntaxe like **{#lazyeach}** or other :\r\n```svelte\r\n{#lazyeach names as name}\r\n\t<li>{name.toUpperCase()}</li>\r\n{/lazyeach}\r\n```\r\n\r\nIt will produce the following update method, with a location on **dirty** which indicates if the current index has been modified \r\n```svelte\r\np(ctx, dirty) {\r\n\tif (dirty & /*names[i] was modified*/ 9999 && t_value !== (t_value = /*name*/ ctx[4].toUpperCase() + \"\"))\r\n\t\tset_data(t, t_value);\r\n},\r\n```\r\n\r\nThis way the each-block will do nothing at-all if the value has not been modified, without having to regenerate the values to control them.\n\n### Alternatives considered\n\nUsing a child &lt;Component&gt; with `<svelte:options immutable/>`, but this moves the logic to a child component, while the data is modified in the parent.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-03-12T15:52:03Z","created_at":"2022-03-12T15:52:03Z","creator_user_login":"adiguba"}
{"number":7361,"title":"Discrepancy of `<select value>` from `<option selected>`","body":"### Describe the bug\n\nBut there is still a problem with changing the value of `<select value={value}>`.\r\n1. If you give focus to `<select>`, and then change the value of `value` using a keyboard shortcut, the highlight changes.\r\nBut the `<option selected>` does not change.\r\n2. Then when you press the up-down, left-right arrows afterwards, it jumps to the wrong `<option>` as needed.\r\n3. t's like just the `<option selected>` attribute is more important to the up-down, left-right arrows.\r\n\r\nI'm thinking, isn't this a broader issue of just combining `<select value={value}>` with `<option selected>`?\r\n\n\n### Reproduction\n\nExample:\r\nhttps://svelte.dev/repl/d1011a8c700148d19041f684a6eeeaf3?version=3.46.4\r\nUsage:\r\n1. load repl - the value `\"he1\"` will be highlighted. (and `autofocus` on `<select>`)\r\n2. press the down arrow - the value `\"he2\"` will be highlighted\r\n3. press the z key (this is shortcut) - the value `\"he1\"` will be highlighted.\r\n4. press the down arrow - **the value `\"he3\"` will be highlighted**.\r\n\r\nIn step 4, the value `\"he2\"` should be highlighted, but the value `\"he3\"` is highlighted.\r\n**What should I do to make it highlight `\"he2\"` then?**\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.10 Arch Linux\r\n    CPU: (4) x64 AMD Athlon(tm) X4 950 Quad Core Processor\r\n    Memory: 445.45 MB / 15.07 GB\r\n    Container: Yes\r\n    Shell: 5.1.8 - /bin/bash\r\n  Binaries:\r\n    Node: 16.3.0 - /usr/bin/node\r\n    Yarn: 1.22.10 - /usr/bin/yarn\r\n    npm: 7.17.0 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 87.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-03-23T17:39:28Z","created_at":"2022-03-12T03:45:27Z","creator_user_login":"lukaszpolowczyk"}
{"number":7358,"title":"fix: export types needed for defining custom stores","body":"I wrote a custom store to have a more flexible `derived` store. The function signatures looks like:\r\n\r\n```typescript\r\nexport function derivedWritable<S extends Stores, T>(\r\n  stores: S,\r\n  fn: (values: StoresValues<S>, set: (value: T) => void) => Unsubscriber | void,\r\n  initial_value?: T\r\n): Writable<T> { ... }\r\n```\r\n\r\nBoth `Stores` and `StoresValues` are not exported in `svelte/store`. I had to copy paste the type definition from this file and duplicate code. Unless I'm using TypeScript wrong (I'm still quite new to it), I think these types plus few others should be exported.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [ ] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-03-10T23:05:52Z","creator_user_login":"vrde"}
{"number":7352,"title":"Support optional transitions","body":"### Describe the problem\n\nIt is possible to set transitions via props when creating Svelte components:\r\n\r\n```svelte\r\n<script>\r\nexport let transition;\r\n</script>\r\n\r\n<p transition:transition|local>Hi!</p>\r\n```\r\n\r\nHowever, they cannot be optional:\r\n```svelte\r\n<script>\r\nexport let transition = undefined;\r\n</script>\r\n\r\n<p transition:transition|local>Hi!</p>\r\n```\r\n\r\nError thrown if transition is undefined:\r\n![Screenshot 2022-03-09 at 11 41 32](https://user-images.githubusercontent.com/48158184/157425729-eff22f22-d987-467f-ae5b-280b42b9a617.png)\r\n\n\n### Describe the proposed solution\n\nCheck if transition is a function before running it. \r\n\r\nThe current implementation does not check if fn is of type `\"function\"`\r\n![Screenshot 2022-03-09 at 11 42 50](https://user-images.githubusercontent.com/48158184/157425967-bf88ecea-dc6d-4779-b194-6b69919c5498.png)\n\n### Alternatives considered\n\nSetting a default empty empty function:\r\n\r\n```svelte\r\n<script>\r\nexport let transition = () => {};\r\n</script>\r\n\r\n<p transition:transition|local>Hi!</p>\r\n```\r\n\r\nHowever, this is a potential memory leak until [this pr](https://github.com/sveltejs/svelte/pull/7260) is merged.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-04-11T17:09:05Z","created_at":"2022-03-09T10:49:08Z","creator_user_login":"MathiasWP"}
{"number":7349,"title":"Use alternate in and out transition values using an array","body":"### Describe the problem\n\nTransitions are wonderful but get a bit difficult to work with when you need them to be very similar but slightly different during the in transition vs. the out.\n\n### Describe the proposed solution\n\nA solution that several libraries have used prior is to optionally take an array that contains two values where the first will be used during the in transition and the second is used during the out transition. Here's an example\r\n\r\n```svelte\r\n<script>\r\n    import { scale} from 'svelte/transition';\r\n    import { quintIn, quintOut } from 'svelte/easing';\r\n</script>\r\n\r\n<article transition:scale={{ duration: 500, start: 0.5, opacity: 0.5, easing: [quintOut, quintIn] }}>\r\n    Content goes here...\r\n</article>\r\n```\r\n\r\nIn this example, the `quintOut` easing would be applied during the in transition and the `quintIn` easing would be applied during the out transition.\n\n### Alternatives considered\n\nYou already can do this by using the `in` and `out` transition directives but it leads to a lot more (repetitive) code. Here's how you would implement this in modern svelte:\r\n\r\n```svelte\r\n<article in:scale={{ duration: 500, start: 0.5, opacity: 0.5, easing: quintOut }} out:scale={{ duration: 500, start: 0.5, opacity: 0.5, easing: quintIn }}>\r\n    Content goes here...\r\n</article>\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-03-08T10:01:40Z","created_at":"2022-03-08T00:40:57Z","creator_user_login":"GavHern"}
{"number":7342,"title":"Svelte reports incorrect types for the `buffered` binding on media elements","body":"### Describe the bug\r\n\r\nWhen you bind to the `buffered` property of an `<audio>` element, for instance, the value that comes from this property has the type `Array<{ start: number; end: number; }>`. If you use that type on a bound variable, however, `svelte-check` will report its incompatibility with `TimeRanges`, which is what the type of this property should be.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  let buffered: Array<{ start: number; end: number; }>;  // Type error!\r\n</script>\r\n\r\n<audio bind:buffered />\r\n```\r\n\r\n<details><summary>Opinion on these types</summary>\r\n\r\nIn my opinion, this conversion from `TimeRanges` to a custom type is unjustified. Yes, `TimeRanges` is ridiculous, but it's standardized. Learning to operate this new type (the documentation of which is buried deep within the tutorial) is an unpleasant experience by itself. In this regard, I really like the approach of the Remix web framework that goes to great lengths to ensure _transferability of knowledge_. This type conversion is one of the few examples where knowledge of Svelte is not tranferable, and in my opinion it trumps the convenience of writing a `for .. of` loop instead of an index-based one.\r\n\r\n</details>\r\n\r\n### Reproduction\r\n\r\nhttps://stackblitz.com/edit/sveltejs-kit-template-default-8p9wht?file=src/routes/index.svelte\r\n\r\n### Logs\r\n\r\n```shell\r\nError: Type 'TimeRanges' is missing the following properties from type '{ start: number; end: number; }[]': pop, push, concat, join, and 28 more. (ts)\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nStackBlitz doesn't play well with `envinfo`, but it's a fresh install, so all the versions are the latest\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-03-18T15:05:23Z","created_at":"2022-03-05T10:09:06Z","creator_user_login":"illright"}
{"number":7341,"title":"`{@html ...}` tag is populated too late","body":"### Describe the bug\n\nBear with me, this is a bit of an edge case.\r\n\r\nIf you have code like [this](https://svelte.dev/repl/d28fe0d4900d4a88b297c0f806d12067?version=3.46.4)...\r\n\r\n```svelte\r\n<script>\r\n\tlet h = 0;\r\n\r\n\tconst html = '<div style=\"height: 50vh\"></div><div style=\"height: 100vh; background: salmon\"><h3 id=\"foo\">this should be at the top of the page</h3></div>';\r\n</script>\r\n\r\n<div bind:clientHeight={h} /><main>{@html html}</main>\r\n```\r\n\r\nit will compile with `hydratable: true` to this:\r\n\r\n```js\r\n\t\t/* omitted */\r\n\t\tl(nodes) {\r\n\t\t\tdiv = claim_element(nodes, \"DIV\", {});\r\n\t\t\tchildren(div).forEach(detach);\r\n\t\t\tmain = claim_element(nodes, \"MAIN\", {});\r\n\t\t\tvar main_nodes = children(main);\r\n\t\t\tmain_nodes.forEach(detach);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\th() {\r\n\t\t\tadd_render_callback(() => /*div_elementresize_handler*/ ctx[1].call(div));\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert_hydration(target, div, anchor);\r\n\t\t\tdiv_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[1].bind(div));\r\n\t\t\tinsert_hydration(target, main, anchor);\r\n\t\t\tmain.innerHTML = html;\r\n\t\t},\r\n\t\t/* omitted */\r\n```\r\n\r\nBetween `main_nodes.forEach(detach)` and `main.innerHTML = html`, the addition of the resize listener causes a reflow that, long story short, results in you losing your scroll position if you were previously scrolled to `#foo` and there's not much content on the page other than the contents of `{@html ...}`. This is currently visible on the SvelteKit docs: https://github.com/sveltejs/kit/issues/4216. (Only on Chrome, not Firefox.)\r\n\r\nRemoving the `bind:clientHeight` (or placing it below the `{@html ...}`) prevents the bug, as would using a `ResizeObserver` instead of the resize listener hack. But the biggest mystery is why we're waiting until the mount phase (`m`) to do `innerHTML = html` instead of the claim phase (`l`).\r\n\r\n(Aside: it would be nice if there was a way to say 'you don't need to replace me, I promise my contents won't have changed since SSR' — `{@html:leavemealone post.html}` or whatever.)\n\n### Reproduction\n\nOpen this [StackBlitz repro](https://stackblitz.com/edit/sveltejs-kit-template-default-pm2sdq?file=src%2Froutes%2Ffails.svelte&terminal=dev) and go to the standalone version: https://sveltejs-kit-template-default-pm2sdq--3000.local.webcontainer.io/\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.0.1\r\n    CPU: (10) arm64 Apple M1 Max\r\n    Memory: 90.30 MB / 32.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.1 - ~/.nvm/versions/node/v16.13.1/bin/node\r\n    Yarn: 1.22.17 - ~/.nvm/versions/node/v16.13.1/bin/yarn\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v16.13.1/bin/npm\r\n  Browsers:\r\n    Chrome: 98.0.4758.109\r\n    Firefox: 97.0.1\r\n    Safari: 15.1\r\n  npmPackages:\r\n    svelte: ^3.43.0 => 3.44.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-26T12:13:58Z","created_at":"2022-03-04T22:20:52Z","creator_user_login":"Rich-Harris"}
{"number":7337,"title":"DatePicker example","body":"### Describe the problem\n\nLooking through your extensive gallery of [examples](https://svelte.dev/examples/hello-world), I didn't really find anything resembling a conventional custom stateful UI control - I've never really felt like even \"7 GUIs\" covers this use case very well, and it is, in my opinion, one of the most important motivations for even using a UI framework in the first place.\r\n\n\n### Describe the proposed solution\n\nI have this fairly small, but fully functional, custom date-picker UI control, which I've been porting between UI frameworks for quite a few years. I ported it to Svelte about 3 years ago, and today I decided to update it to Svelte 3.\r\n\r\nHave a look at my [DatePicker example](https://svelte.dev/repl/f391b3186f804fb0bb0931e73388553a?version=3.46.4), which you may include in the \"Examples\" gallery, if you like - no credit necessary, no strings attached, I just always try this first with any new framework to see how they stack up.\r\n\r\nPerhaps the most important thing demonstrated by this component, is the ability to validate and conditionally accept a `value` into the control's internal `date` state - and the ability to modify the control's view state by navigating through months without changing the value.\r\n\r\n(it was quite a departure from the [old version](https://gist.github.com/mindplay-dk/d85fbf5427d5e4436fadc70ce46d9ac2/545c62a647e23a5ffcc5147d8e6af0696169fcf8), in case you'd like to compare.)\r\n\n\n### Alternatives considered\n\nEverything in the \"Examples\" menu. 😅\r\n\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-03-10T13:39:09Z","created_at":"2022-03-03T16:08:32Z","creator_user_login":"mindplay-dk"}
{"number":7335,"title":"Add option to see all registered event handlers","body":"### Describe the problem\n\nHaving a component like this:\r\n```svelte\r\n<Button on:click={changeToRandomColor}>\r\n  Click Me\r\n</Button>\r\n```\r\nIt would be great to have to be able to check if `on:click` is set in the `Button` component.\r\n\r\nThis would enable us to \"register\" the functions to handle to `on:click` only when needed. \r\nFor (an abstract) example I could request a list of colors from a database only if the `on:click` is registered, otherwise I don't need to enable this.\n\n### Describe the proposed solution\n\n```svelte\r\n<script>\r\n// something like this which returns an array of all registered `on:*` \r\nimport { getEventDispatchers } from 'svelte'\r\n</script>\r\n```\r\n\r\n```svelte\r\n<script>\r\n// something like this which returns an array of all attributes, that have been added to the component, similar to $$props\r\nconsole.log($$attributes)\r\n</script>\r\n```\n\n### Alternatives considered\n\nOne can always implement custom functions and pass them as attributes. It's easy to check if they're defined or not.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-03-03T08:19:12Z","created_at":"2022-03-03T08:19:12Z","creator_user_login":"Myrmod"}
{"number":7332,"title":"Event modifiers on forwarded events?","body":"### Describe the problem\r\n\r\nCurrently events from components cannot be modified, with the exception of `once`:\r\n\r\n> ValidationError: Event modifiers other than 'once' can only be used on DOM elements\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nThis makes sense, to some degree, for custom events which do not really have a default, for example. But for forwarded events it would be nice to have the convenience of using the modifiers.\r\n\r\nConsider [for example](https://svelte.dev/repl/ed8f0946dfa84c3289b40e3ee61c0a6a?version=3.46.4) a generic form component, which depending on how it is used would need to have the default of `submit` prevented or not.\r\n\r\n```svelte\r\n<!-- Form.svelte -->\r\n<form on:submit><slot/></form>\r\n```\r\n\r\n```svelte\r\n<Form on:submit|preventDefault={onSubmit}> <!-- Error right now -->\r\n   <!-- ... -->\r\n</Form>\r\n```\r\n\r\nI do not know if the compiler can easily determine whether the event is custom or not (could be forwarded from multiple levels down), so maybe this is just technically not possible right now.\r\n\r\n\r\n### Alternatives considered\r\n\r\nOne can always use the event object and manually call `preventDefault()` as a workaround.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-10-21T18:48:00Z","created_at":"2022-03-02T20:01:31Z","creator_user_login":"brunnerh"}
{"number":7325,"title":"Can Add a contributor guideline in readme file","body":"### Describe the problem\n\ncontributor guidelines\n\n### Describe the proposed solution\n\nadd that to readme\n\n### Alternatives considered\n\n.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-02-28T19:40:18Z","created_at":"2022-02-28T19:29:08Z","creator_user_login":"Ash-KODES"}
{"number":7320,"title":"Bound buffered property stops to update","body":"### Describe the bug\r\n\r\nI do have this binding on `audio` element like this :\r\n```\r\n<script type=\"ts\">\r\n let player;\r\n let buffered;\r\n<script>\r\n<audio\r\n    bind:buffered\r\n    bind:this={player}\r\n    ...\r\n  />\r\n```\r\nIn Firefox after short moment after playback starts  buffered variable stops to follow updated on player buffered data. It works for for first few updates, but then it stops updating. In Chromium it works better, but I've seen similar problem occationally.\r\n\r\nWhen I later stop the code via breakpoint I see following situation in console (ogg with opus codec):\r\n\r\n```\r\nbuffered\r\nArray [ {…} ]\r\n​\r\n0: Object { start: 0, end: 591.9935 }\r\n​\r\nlength: 1\r\n​\r\n<prototype>: Array []\r\n\r\nplayer.buffered\r\nTimeRanges { length: 1 }\r\non:error={playerError}\r\n    on:ended={tryNextFile}\r\nplayer.buffered.end(0)\r\n3021.466125\r\n```\r\n\r\nor  (mp3)\r\n```\r\nbuffered\r\nArray [ {…} ]\r\n​\r\n0: Object { start: 0, end: 1339.849624 }\r\n​\r\nlength: 1\r\n​\r\n<prototype>: Array []\r\n\r\nplayer.buffered\r\nTimeRanges { length: 1 }\r\n\r\nplayer.buffered.end(0)\r\n2437.757284\r\n```\r\n\r\nAs you can see bound buffered variable is significantly difference between player.buffered and bound buffered variable, which should be the same.\r\n\r\n\r\n\r\n### Reproduction\r\n\r\nOn firefox create audio element with binding to of buffered property to `buffered` variable, set source to opus. \r\n\r\nCheck if it follows current playback position an also it should be same as `buffered` property of appropriate HTMLAudioElement.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nOn Ubuntu 20.04\r\nFirefox 97.0\r\n\r\n------ envinfo ---\r\n$ npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers\r\nnpx: installed 1 in 0.976s\r\n\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.4 LTS (Focal Fossa)\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7300U CPU @ 2.60GHz\r\n    Memory: 461.27 MB / 15.39 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 14.19.0 - /usr/bin/node\r\n    Yarn: 1.22.11 - /usr/bin/yarn\r\n    npm: 6.14.16 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 97.0\r\n  npmPackages:\r\n    rollup: ^2.68.0 => 2.68.0 \r\n    svelte: ^3.46.4 => 3.46.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-02-27T20:19:13Z","created_at":"2022-02-27T20:17:53Z","creator_user_login":"izderadicka"}
{"number":7317,"title":"bind:clientHeight not updating as expected","body":"### Describe the bug\n\nOn load the value is often set to zero while the element does have a height, the behavior seems to be random. The REPL below almost always shows 0 for me, outside of the REPL in a project setup it is more hit and miss.\r\n\r\nSeems to be related to: \r\nhttps://github.com/sveltejs/svelte/issues/7099\r\n\r\nThe issue is confirmed by two others on discord:\r\nhttps://discord.com/channels/457912077277855764/939868205869072444/946476600365568001\n\n### Reproduction\n\nhttps://svelte.dev/repl/7b16f85496e24bca88c198753f005a61?version=3.46.4\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.13 Manjaro Linux\r\n    CPU: (16) x64 AMD Ryzen 7 1700X Eight-Core Processor\r\n    Memory: 3.11 GB / 15.56 GB\r\n    Container: Yes\r\n    Shell: 5.1.16 - /bin/bash\r\n  Binaries:\r\n    Node: 17.3.0 - /usr/bin/node\r\n    Yarn: 1.22.17 - /usr/bin/yarn\r\n    npm: 8.3.1 - /usr/bin/npm\r\n  Browsers:\r\n    Brave Browser: 97.1.34.81\r\n    Chromium: 97.0.4692.99\r\n  npmPackages:\r\n    svelte: ^3.44.0 => 3.46.3 \r\n    svelte repl: 3.46.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-06-06T21:54:12Z","created_at":"2022-02-25T06:13:39Z","creator_user_login":"nodra-vr"}
{"number":7314,"title":"Add note on how to add fragment to slot","body":"### Describe the problem\r\n\r\nOn the discord channel I described this problem:\r\n\r\nusing `marked` to fill slot throws an error:\r\n```\r\n<Alert>\r\n    {@html marked(text)}\r\n</Alert>\r\n```\r\nwhere my Alert component boils down to a slot with some divs around it.\r\n\r\nError looked like this:\r\n```\r\nproxy.js:15 [HMR][Svelte] Unrecoverable error in <Root>: next update will trigger a full reload\r\nlogError @ proxy.js:15\r\nProxy<Root> @ proxy.js:377\r\n_init @ start.js:997\r\nstart @ start.js:844\r\nawait in start (async)\r\nstart @ start.js:1531\r\n\r\nindex.mjs:373 Uncaught (in promise) TypeError: Cannot read properties of null (reading 'removeChild')\r\n    at detach (index.mjs:373:21)\r\n    at claim_html_tag (index.mjs:620:5)\r\n    at Object.claim [as l] (index.svelte? [sm]:27:42)\r\n    at Object.claim [as l] (Alert.svelte:13:43)\r\n    at claim_component (index.mjs:1794:20)\r\n    at Object.claim [as l] (index.svelte? [sm]:25:47)\r\n    at Object.claim [as l] (index.svelte? [sm]:23:8)\r\n    at Object.claim [as l] (index.svelte? [sm]:21:27)\r\n    at claim_component (index.mjs:1794:20)\r\n    at Object.claim [as l] (root.svelte? [sm]:46:42)\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nTell readers of the docs that when using the html directive is used in a slot it should be wrapped with an element or used with the fragment directive.\r\n\r\n### Alternatives considered\r\n\r\nAsk the friendly people on Discord :)\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-04-08T00:22:42Z","created_at":"2022-02-24T16:03:48Z","creator_user_login":"hmt"}
{"number":7308,"title":"Colliding animations","body":"### Describe the bug\n\nWhen there are two animations running at the same time and the animations are running into each other, the animations stops and become jaggy. \n\n### Reproduction\n\nhttps://svelte.dev/repl/6f5e0947bf4e4231adf2ca973e21c476?version=3.46.4\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-07T18:13:00Z","created_at":"2022-02-23T23:15:53Z","creator_user_login":"Xeronic"}
{"number":7305,"title":"In the video tag, the muted binding does not work 100%","body":"### Describe the bug\n\nI have an accordeon which I can open and close.\r\nWhen it is open, a slider with a video is visible.\r\nThe video is set to autoplay and should be muted.\r\n\r\nWhen I open the accordeon the first time, the video is playing and muted.\r\nWhen I close it and reopen it, the sound is playing.\r\n\r\nHere is a link:\r\n[https://sveltekit-prismic-theme-dev.netlify.app/projects](https://sveltekit-prismic-theme-dev.netlify.app/projects)\r\n\r\n––––––––\r\n\r\nI know that this has been mentioned here before and I went through all the reports here.\r\nIn one report it says that I should use the TICK event. But I do not really understand of how this should work.\r\n\r\n––––––––\r\n\r\nThank you! I love Svelte!\n\n### Reproduction\n\nHere is the code for the slide-item which contains the video:\r\n`````\r\n<script>\r\n    // Get data from parent Component\r\n    export let item\r\n    export let height // Shared height\r\n\r\n    // Check if it is a vimeo link or a file from prismic\r\n    let videoUrl = item.slider_video.url\r\n    let videoVimeo = item.slider_video_link[0]\r\n\r\n    if(videoVimeo) {\r\n        videoUrl = item.slider_video_link[0].text\r\n    }\r\n\r\n   let muted = true\r\n</script>\r\n\r\n<div class=\"{height}\">\r\n    {#if item.slider_image.url}\r\n        <img src=\"{item.slider_image.Big.url}\" alt=\"{item.slider_image.alt}\" class=\"{height} w-full object-cover\">\r\n    {/if}\r\n\r\n    {#if videoUrl || videoVimeo}\r\n        <!-- svelte-ignore a11y-media-has-caption -->\r\n        <video class=\"{height} w-full object-cover\" playsinline poster=\"{item.slider_video_poster.Big.url}\" autoplay loop bind:muted>\r\n            <source src={videoUrl} type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n        </video>\r\n    {/if}\r\n</div>\r\n````\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 10.15.7\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-3740QM CPU @ 2.70GHz\r\n    Memory: 5.99 GB / 16.00 GB\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.2 - /usr/local/bin/node\r\n    npm: 8.4.1 - /usr/local/bin/npm\r\n  Browsers:\r\n    Brave Browser: 98.1.35.103\r\n    Safari: 15.3\r\n  npmPackages:\r\n    svelte: ^3.46.4 => 3.46.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-06-28T07:54:30Z","created_at":"2022-02-23T10:11:28Z","creator_user_login":"marius-jopen"}
{"number":7304,"title":"bundler error when exporting from a svelte component module context script","body":"### Describe the bug\r\n\r\nExports ( inside `<script lang=\"ts\" context=\"module\"></script>` cannot be imported outside of a svelte component, without a `@rollup/plugin-typescript` error being thrown.\r\n\r\nIt doesn't stop the build [by default](https://github.com/rollup/plugins/tree/master/packages/typescript/#noemitonerror) (on rollup, it does on webpack) and it still works in the end, however a warning will still be logged for each export on every build. This is not only annoying (100+ warnings on each save when developing) but it also make real errors harder to spot.\r\n\r\nThis issue is a follow-up to #5817, which is 2 years old.\r\nPossible fix would be to make svelte declare each `.svelte` `context=\"module\"` exports in a `.d.ts` file. \r\nI'm not very knowledgeable on how svelte works under the hood but since we're using a bundler I'm guessing this is possible with a pre-processor.\r\n\r\nEDIT: a way to hide these specific warnings would be a great hack if this is not going to be fixed.\r\n\r\n### Reproduction\r\n\r\n`git clone https://github.com/Alexandre-Fernandez/svelte-rollup-typescript-bug`\r\n`cd svelte-rollup-typescript-bug`\r\n`npm i`\r\n`npm run dev`\r\n`check build log`\r\n\r\n### Logs\r\n\r\n```shell\r\n(!) Plugin typescript: @rollup/plugin-typescript TS2614: Module '\"*.svelte\"' has no exported member 'Product'. Did you mean to use 'import Product from \"*.svelte\"' instead?\r\nsrc/stores/products.ts: (2:10)\r\n\r\n2 import { Product } from \"../components/Product.svelte\"\r\n           ~~~~~~~\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.15 Manjaro Linux\r\n    CPU: (24) x64 AMD Ryzen 9 3900X 12-Core Processor\r\n    Memory: 24.25 GB / 31.34 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /bin/zsh\r\nBinaries:\r\n    Node: 17.3.0 - /usr/bin/node\r\n    npm: 8.4.1 - /usr/bin/npm\r\nBrowsers:\r\n    Brave Browser: unknown\r\n    Firefox: 97.0.1\r\nnpmPackages:\r\n    rollup: ^2.3.4 => 2.67.3 \r\n    svelte: ^3.0.0 => 3.46.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-08-15T21:30:04Z","created_at":"2022-02-22T20:20:36Z","creator_user_login":"Alexandre-Fernandez"}
{"number":7294,"title":"Dynamic conditional CSS classes","body":"### Describe the problem\n\nIn components that want to support use with CSS frameworks like Tailwind, it would be nice to allow users to pass in custom class names as props which are applied depending on an internal condition in the component:\r\n\n\n### Describe the proposed solution\n\n`MyComponent.svelte`:\r\n\r\n```svelte\r\nexport let dynamicClass = ''\r\n\r\nlet cond = false\r\n\r\n<button class:{dynamicClass}={cond} on:click={() => cond = true}>click me</button>\r\n```\n\n### Alternatives considered\n\nThis already works\r\n\r\n```svelte\r\n<button class={cond ? dynamicClass : ''} on:click={() => cond = true}>click me</button>\r\n```\r\n\r\nbut it looks cleaner here than in the real world where you might already have class attr in which case you need to manually combine classes before applying.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-03-20T21:04:26Z","created_at":"2022-02-19T21:27:04Z","creator_user_login":"janosh"}
{"number":7282,"title":"Reactive-statement updates are triggered wrong, when using objects in it?  [with example repo]","body":"### Describe the bug\r\n\r\ni have noticed, that when you have e.g. a textarea in a component and if you also have a `$:{}`reactive-statement, which uses an object, that is passed to the component, then this is called on every keystroke, even if there is no change on the data.\r\n\r\nsee this example: https://github.com/QuickMick/svelte-computed-with-object-bug\r\n\r\nthe `$:{}` in `text-field.svelte` should work similar to the one in `text-field-with-update-function.svelte` and should not be triggered, when there is no change. This behavior has started in svelte `v3.2.1` i think. If you downgrade the the svelte versions in the `package.json` to e.g. `v3.0.0`, it works fine.\r\nit seems, when you use an object in a reactive-statement, the some observers (?) to the object are create which get triggerd by some events? i don't know...\r\n\r\nas you see in the 3rd example the `inputText` is always cleared because of the empty value of value.s. this update should not happen in my opinion, because data nor data.s was changed - so this somehow gets triggered bei the input-event\r\n\r\nthis is propably related to my other issue: https://github.com/sveltejs/svelte/issues/7266\r\n\r\n### Reproduction\r\n\r\ncheckout this: https://github.com/QuickMick/svelte-computed-with-object-bug\r\ninstall and try to use the textareas, the 3rd example shows the error - i have tried out different scenarios, all of them work, except when you access the object directly in the reactive-statement. it works, when you have it wrapped to a function.\r\n\r\nwhen you have a look at the console output, you see, that the update of the reactive-statement is done on each keystroke.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Manjaro Linux\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz\r\n    Memory: 14.19 GB / 31.27 GB\r\n    Container: Yes\r\n    Shell: 5.1.0 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.0 - ~/.nvm/versions/node/v16.13.0/bin/node\r\n    npm: 8.1.0 - ~/.nvm/versions/node/v16.13.0/bin/npm\r\n  Browsers:\r\n    Chromium: 90.0.4430.72\r\n    Firefox: 87.0\r\n  npmPackages:\r\n    svelte: 3.2.1 => 3.2.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2022-02-18T10:35:54Z","created_at":"2022-02-17T16:55:42Z","creator_user_login":"QuickMick"}
{"number":7266,"title":"bind and computed bug since v3.2.1 [with example repo]","body":"### Describe the bug\r\n\r\nif you have svelte:self, bind to an object and use computed to update it or trigger render updates, svelte gets stuck in an endless loop or the rendering is blocked. ( see repository https://github.com/QuickMick/svelte-bind-computed-bug )\r\n\r\nif you outsource this code to a function, behaviour changes: the rendering continues, but i think it still has kind of a memory leak and does a lot of stuff in the background.\r\n\r\nThis behavior has started in svelte v3.2.1. If you downgrade the svelte version in the package.json to e.g. v3.0.0, it works fine.\r\n\r\n### Reproduction\r\nsee here https://github.com/QuickMick/svelte-bind-computed-bug\r\nthere are two versions - you need to change something in the comp.svelte - one that crashes and one that does not crash but seems laggy to me. (the computed is called twice instead of once - in the example i use a recursive structure, because that is how i noticed the behavior change, but i think it is not necessary ) - uncomment version 1 and comment version 2 in comp.svelte\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Manjaro Linux\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz\r\n    Memory: 14.19 GB / 31.27 GB\r\n    Container: Yes\r\n    Shell: 5.1.0 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.0 - ~/.nvm/versions/node/v16.13.0/bin/node\r\n    npm: 8.1.0 - ~/.nvm/versions/node/v16.13.0/bin/npm\r\n  Browsers:\r\n    Chromium: 90.0.4430.72\r\n    Firefox: 87.0\r\n  npmPackages:\r\n    svelte: 3.2.1 => 3.2.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2022-02-17T10:09:10Z","created_at":"2022-02-15T15:14:05Z","creator_user_login":"QuickMick"}
{"number":7265,"title":"Add property pipes/transforms","body":"### Describe the problem\r\n\r\nSometimes a value does not quite fit a property, or the component does not quite fit the value, so the value needs to be pre-processed before passing it in. Likewise, for `bind`-able properties, the output may not be in the correct format, so some post-processing is required.\r\n\r\nThis is especially prone to happen with third-party components which cannot be easily changed.\r\n\r\nSo instead of being able to just use a property or `bind` directly, one may have to rely on additional events or pass the value through a temporary variable instead.\r\n\r\n### Describe the proposed solution\r\n\r\nTo make this easier a pipe/transform syntax could be added to properties, to concisely perform pre-/post-processing in a reusable fashion. I would suggest using the `|` symbol, similar to how it used for event modifiers e.g.\r\n\r\n```svelte\r\n<script>\r\n  let value;\r\n  const trim = x => x == null ? null : x.trim();\r\n</script>\r\n\r\n<input value|trim={value} /> <!-- one-directional, there may not be a sensible shorthand -->\r\n<input bind:value|trim /> <!-- bind shorthand -->\r\n<input bind:value|trim={value} /> <!-- bind longhand -->\r\n```\r\n\r\nThis would perform a trimming operation in both directions when used with `bind`. Alternatively an object could be supplied of the form:\r\n\r\n```ts\r\n{\r\n  in?: (value: any) => any,\r\n  out?: (value: any) => any,\r\n}\r\n```\r\n\r\ne.g.\r\n\r\n```svelte\r\n<script>\r\n  let value;\r\n  const trim = {\r\n    out: x => x == null ? null : x.trim();\r\n  };\r\n</script>\r\n<input bind:value|trim /> <!-- only trims output -->\r\n```\r\n\r\n`in` would be called when passing the value into the component/element, `out` when a value is provided from a property with `bind`. If a function is not supplied, it acts as the identity function, i.e. the value is just passed through.\r\n\r\nWhen multiple pipes are supplied (`|` separated, like events), they would be executed left to right on input and right to left on output.\r\n\r\n---\r\n\r\nThe piping functions could potentially also be provided with the current element/component to make it even more flexible:\r\n\r\n```ts\r\ntype PipeFunction = (value: any, self: HTMLElement | SvelteComponent | undefined) => any;\r\ntype Pipe = PipeFunction | { in?: PipeFunction, out?: PipeFunction };\r\n```\r\n\r\nIt could probably not be supplied in all cases, like when setting properties on `<svelte:options>`.\r\n\r\n### Alternatives considered\r\n\r\nWrapping components is always an alternative, but not a very good one. It produces a lot of overhead and strongly couples the API if all component features should be exposed.\r\n\r\nTemporary, intermediary variables tend to have problems with cyclical dependencies, as the updates should run both ways. If a component offers sufficient events this can be circumvented more easily.\r\n\r\nI cannot really think of a good alternative but am happy to hear of any, if they exist.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-04-12T09:19:55Z","created_at":"2022-02-14T22:20:56Z","creator_user_login":"brunnerh"}
{"number":7253,"title":"make it clearer that @html is dangerous","body":"### Describe the problem\r\n\r\nWe just started a hackaton for the weekend, and decided to use svelte. 2 out of 4 of us had never used it before, so I recommended going through the [tutorial](https://svelte.dev/tutorial/).\r\n\r\nThe first reaction was (translated) \"Happy to see that they tell users how to setup for xss attacks at the 4th page of the tutorial\"\r\n\r\nFollowed by \"In react they make you write `__dangerousInnerHTML` to make it clear that it's a bad idea, but here they are almost selling it as 'look how simple it is'\".\r\n\r\nThey were talking about the `@html` tag and [its corresponding page in the tutorial.](https://svelte.dev/tutorial/html-tags)\r\n\r\n### Describe the proposed solution\r\n\r\nthe `@html` tag **is** a great feature, but with great powers...\r\n\r\nI would take three steps: \r\n\r\n1) Move the page to the end of the tutorial. Imo it has nothing to do in the introduction.\r\n2) Issue an error when `@html` is used, with an option to disable it.\r\n2) In svelte 4, deprecate `@html` for `@dangerousInnerHtml` or something alike.\r\n\r\n\r\n\r\n### Alternatives considered\r\n\r\nEDIT: Bad alternative\r\n\r\n<details>\r\n\r\nadd a sanitize option to `@html` blocks\r\n\r\n```svelte\r\n<div>{@html:sanitize content}</div>\r\n```\r\n\r\nThat would filter `<script>` tags and other \"dangerous\" elements.\r\nThat is probably too complex/dangerous to implement.\r\n</details>\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2023-05-10T01:43:07Z","created_at":"2022-02-12T05:31:25Z","creator_user_login":"ecstrema"}
{"number":7243,"title":"background video no auto play on loaded in firefox on mobile device like smartphone and tablet","body":"### Describe the bug\r\n\r\nI have a background video on a webpage, the video is `av1` inside `mp4` container and supported by `firefox`\r\nOnly poster image is displayed, video never starts playing \r\n\r\nthis is the code\r\n\r\n```\r\n<script lang=\"ts\">\r\n  import vi from './assets/videofile.mp4'\r\n  import posterimg from './assets/PosterImage.png'\r\n</script>\r\n\r\n<main>\r\n  <video\r\n  autoplay \r\n  muted \r\n  loop\r\n  Playsinline\r\n  src={vi}\r\n  poster={posterimg}>\r\n  </video>\r\n</main>\r\n\r\n<style>\r\nvideo \r\n{\r\n  width: 100%;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n  pointer-events: none;\r\n}\r\n</style>\r\n```\r\n\r\n### Reproduction\r\n\r\nUnable to reproduce the issue while development in `responsive design mode` in firefox.\r\n\r\nYou can create a `svelte app` using `vite`, with simple video playing in background.\r\n\r\n`built` it and host it on `github pages` once for free and access it from a `mobile device` like `smartphone` or `tablet` from `firefox` check it\r\n\r\nThe issue only on `firefox` when opened on mobile device, works fine `Chrome` & `Opera` on both computer and mobile device.\r\n\r\n### Logs\r\n\r\n```shell\r\nfirefox browser log details from android browser\r\n\r\n\r\nMedia resource https://mywebsite.com/assets/videofile.87f84cd1.mp4 could not be decoded. mywebsite.com\r\nSome cookies are misusing the recommended “SameSite“ attribute 2\r\nCookie “_ga” will be soon rejected because it has the “SameSite” attribute set to “None” or an invalid value, without the “secure” attribute. To know more about the “SameSite“ attribute, read https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie/SameSite analytics.js:35:486\r\nCookie “_gid” will be soon rejected because it has the “SameSite” attribute set to “None” or an invalid value, without the “secure” attribute. To know more about the “SameSite“ attribute, read https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie/SameSite analytics.js:35:486\r\nMedia resource https://mywebsite.com/assets/videofile.87f84cd1.mp4 could not be decoded, error: Error Code: NS_ERROR_DOM_MEDIA_METADATA_ERR (0x806e0006)\r\n```\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\n$ npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers\r\n\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.3 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz\r\n    Memory: 406.05 MB / 3.72 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 17.4.0 - /usr/local/bin/node\r\n    Yarn: 1.22.17 - /usr/bin/yarn\r\n    npm: 8.3.1 - /usr/local/bin/npm\r\n  Browsers:\r\n    Firefox: 96.0\r\n\r\n\r\n```\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-02-11T08:41:58Z","created_at":"2022-02-10T17:34:12Z","creator_user_login":"santhoshnumberone"}
{"number":7240,"title":"Allow defining global to avoid 'FOO is not defined' warnings","body":"### Describe the problem\n\nI'm injecting globals using esbuild (https://esbuild.github.io/api/#define) and am flooded with warnings.\n\n### Describe the proposed solution\n\nAllow configuring globals in addition to the hard coded list https://github.com/sveltejs/svelte/blob/5665f711fd699d8b7d2e07524b19cab194951d11/src/compiler/compile/Component.ts#L1445\r\n\r\nI'm already defining them in my eslint `globals` config but it appears there is no such things for Svelte?\n\n### Alternatives considered\n\n1. Sprinkling `<!-- svelte-ignore missing-declaration -->` all over the place. Depending on how fine grained I (can) do this it might mask legit warnings (the comment applies to the entire element and subtree, while I only want a specific thing to be known)\r\n2. Instead of injecting sth. like `MY_GLOBAL` I could hack around and use `window.MY_GLOBAL`. This gets rid of the warning but introduces a new problem: if esbuild fails to replace this would leave the literal `window.MY_GLOBAL` in the code (which would be undefined).\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-07-31T11:26:58Z","created_at":"2022-02-10T10:24:16Z","creator_user_login":"Prinzhorn"}
{"number":7238,"title":"Add support for \"focus-visible\"","body":"### Describe the problem\r\n\r\n`:focus-visible` pseudo selector throws a console warning when used in style blocks.\r\n\r\n```\r\n[vite-plugin-svelte] /.../components.svelte:188:0 Unused CSS selector \".button.focus-visible\"\r\n```\r\n\r\nThe error is coming from vite-plugin-svelte, but I think it is originating in the compiler. Could be wrong.\r\n\r\nEither way, it's valid CSS that works as expected. But the console is getting a bit noisy.\r\n\r\n```\r\n// example:\r\nbutton:focus-visible {\r\n    outline: blue;\r\n}\r\n```\r\n\r\nThanks for your consideration.\r\n\r\n### Describe the proposed solution\r\n\r\nI don't have a deep understanding of the source of the issue, but if someone wants to point me in the right direction I would be happy to pr.\r\n\r\n### Alternatives considered\r\n\r\n`:focus` and `:focus-visible` have different behavior. There is no alternative to achieve the same functionality to my knowledge.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-02-10T19:18:30Z","created_at":"2022-02-09T22:50:27Z","creator_user_login":"jameygleason"}
{"number":7236,"title":"clientWidth clientHeight offsetWidth offsetHeight cause block to be raised unexpectedly","body":"### Describe the bug\n\nAdding any of \r\nbind:clientWidth\r\nclientHeight\r\noffsetWidth\r\noffsetHeight\r\nto a div cause it to be raised above other blocks.\n\n### Reproduction\n\nSee this REPL:\r\n\r\nhttps://svelte.dev/repl/a74a224404d1495c8c08d36da06890a0?version=3.46.4\r\n\r\nIt uses `margin-top: -75px` to put the second div on top of the first div. But after apply `bind:clientHeight` to the first div, it goes to the top and covers the second div.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nlatest REPL\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-02-09T08:29:20Z","created_at":"2022-02-09T08:15:17Z","creator_user_login":"shaozi"}
{"number":7227,"title":"Svelte updating `<input>` selection range at weird timing","body":"### Describe the bug\n\nIn fairness, this happens when dynamically changing an input type for showing/hiding password field contents, a feature I realize is not properly supported in Svelte. However I'm not sure how to get around this without having two separate fields and manually managing their selection range, which is what I'm going to do despite its clumsiness. Nevertheless, this seemed worth pointing out.\r\n\r\nEssentially, when I change the type, Svelte sets the input's selection range to the beginning of the input regardless of its previous position, and after `afterUpdate` and `tick` are resolved. I can't find where to log the selection after it resets, everywhere I look I see the selection preserved; except that when the dust settles the selection is reset. So I'd like the last logs to be as they are and the selection to match the logs, but I expect the observed behavior to be logged as `0-0`.\n\n### Reproduction\n\nhttps://svelte.dev/repl/652b18ceee754aef886a7b16b75ac851?version=3\n\n### Logs\n\n```shell\n\"no inputEl when logging\"\r\n\"password selection beforeUpdate:\"\r\n\"password selection afterUpdate:\"\r\n\"0-0\"\r\n\"password selection beforeUpdate:\"\r\n\"0-0\"\r\n2x\r\n\"password selection after tick:\"\r\n\"0-0\"\r\n\"password selection beforeUpdate:\"\r\n\"0-0\"\r\n\"password selection afterUpdate:\"\r\n\"0-0\"\r\n\"password selection after tick:\"\r\n\"0-0\"\r\n\"password selection beforeUpdate:\"\r\n\"1-1\"\r\n\"password selection afterUpdate:\"\r\n\"1-1\"\r\n\"password selection after tick:\"\r\n\"1-1\"\r\n\"password selection beforeUpdate:\"\r\n\"2-2\"\r\n\"password selection afterUpdate:\"\r\n\"2-2\"\r\n\"password selection after tick:\"\r\n\"2-2\"\r\n\"text selection beforeUpdate:\"\r\n\"2-2\"\r\n\"text selection afterUpdate:\"\r\n\"2-2\"\r\n\"text selection after tick:\"\r\n\"2-2\"\r\n```\n```\n\n\n### System Info\n\n```shell\nReproduces in REPL, so I'm not sure why my dev environment matters, but mine is:\r\n\r\n  System:\r\n    OS: Linux 5.13 Ubuntu 21.10 21.10 (Impish Indri)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\r\n    Memory: 831.21 MB / 15.29 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 16.13.1 - ~/.nvm/versions/node/v16.13.1/bin/node\r\n    Yarn: 1.22.15 - ~/.nvm/versions/node/v16.13.1/bin/yarn\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v16.13.1/bin/npm\r\n  Browsers:\r\n    Chromium: 98.0.4758.80\r\n    Firefox: 96.0.3\r\n  npmPackages:\r\n    svelte: ^3.46.3 => 3.46.3 \r\n```\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-02-05T17:47:54Z","created_at":"2022-02-05T16:48:11Z","creator_user_login":"eden-omb"}
{"number":7226,"title":"Inefficient code created for hydration of static components","body":"### Describe the bug\r\n\r\nIf there's a big block of static HTML or even the entire component is static, the Svelte compiler still creates a separate variable for every element when `hydratable: true`. Compare to when `hydratable: false` and it will just set the entire block with `innerHTML`. This results in worse time-to-interactive on blogs with large posts using MDSveX, which is a fairly common use case - though this example is a particularly large one.\r\n\r\nThis is yet another reason we would benefit from something like `repair: false`: https://github.com/sveltejs/svelte/issues/780#issuecomment-324635182\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/a197647b669249f0a1d7a249b7c00044?version=3.46.4\r\n\r\nTurn the `hydratable` flag to `true` and the output JS will have 10x as many lines. It both takes longer to transfer over the network and longer to run after it's been transferred\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte 3.46.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-03-08T20:27:00Z","created_at":"2022-02-05T03:27:39Z","creator_user_login":"benmccann"}
{"number":7212,"title":"Using on:input with bind:group","body":"## Describe the bug\r\n\r\n### TL;DR\r\n\r\nThe second `on:input` handler logs the old value.\r\n\r\n```svelte\r\n<script>\r\n  let value = 'A';\r\n</script>\r\n\r\n<input\r\n  type=\"radio\"\r\n  name=\"alphabet\"\r\n  on:input={() => console.log('Old value:', value)}\r\n  bind:group={value}\r\n  on:input={() => console.log('New value:', value)}\r\n/>\r\n```\r\n\r\nThe second `on:change` handler logs the new value.\r\n\r\n```svelte\r\n<script>\r\n  let value = 'A';\r\n</script>\r\n\r\n<input\r\n  type=\"radio\"\r\n  name=\"alphabet\"\r\n  on:change={() => console.log('Old value:', value)}\r\n  bind:group={value}\r\n  on:change={() => console.log('New value:', value)}\r\n/>\r\n```\r\n\r\nThis is expected since `bind:group` uses `change` event.\r\n\r\nReference https://github.com/sveltejs/svelte/issues/7212#issuecomment-1028381419 for more detail.\r\n\r\n### Note\r\n\r\n- Above code is based on `TEMPLATE SYNTAX > Element directives > bind:property` [docs](https://svelte.dev/docs#template-syntax-element-directives-bind-property).\r\n- For clarification, `bind:` is changed to `bind:property` in the following blockquote.\r\n- There is a separate `bind:group` [docs](https://svelte.dev/docs#template-syntax-element-directives-bind-group) which does not mention the usage of `on:` directives.\r\n\r\n> `bind:property` can be used together with `on:` directives. The order that they are defined in determines the value of the bound variable when the event handler is called.\r\n\r\n```svelte\r\n<script>\r\n  let value = 'Hello World';\r\n</script>\r\n\r\n<input\r\n  on:input=\"{() => console.log('Old value:', value)}\"\r\n  bind:value\r\n  on:input=\"{() => console.log('New value:', value)}\"\r\n/>\r\n```\r\n\r\n## Reproduction\r\n\r\n### Guide\r\n1. Open the reproduction REPL.\r\n2. Toggle between two radio buttons.\r\n\r\n### REPL1\r\n\r\nhttps://svelte.dev/repl/f893aa23a92c4bcd8b5a29bcd8dc5528?version=3.46.3\r\n\r\n```\r\n// Set to 'A' on load\r\nReactive value: A\r\n\r\n// Change to 'B'\r\nOld value: A\r\nNew value: A // Should be 'B'\r\nReactive value: B\r\n\r\n// Change to 'A'\r\nOld value: B\r\nNew value: B // Should be 'A'\r\nReactive value: A\r\n```\r\n\r\n### REPL2\r\n\r\nhttps://svelte.dev/repl/cd819a38bab64c4ab55fdb7d39989f77?version=3.46.3\r\n\r\nIf the elements with `bind:group` is removed in `on:input` handler, `value` is not updated.\r\n\r\n```\r\n// Set to 'A' on load\r\nReactive value: A\r\n\r\n// Change to 'B'\r\nNew value: A // Should be 'B'\r\n// Reactive value: B // Should be logged\r\n```\r\n\r\nRelated to https://github.com/sveltejs/svelte/issues/3249 and https://github.com/sveltejs/svelte/issues/4225.\r\n\r\n## System Info\r\n\r\n```shell\r\nSystem:\r\n  OS: macOS 12.1\r\n  CPU: (8) arm64 Apple M1\r\nBrowsers:\r\n  Chrome: 97.0.4692.99\r\n  Safari: 15.2\r\nnpmPackages:\r\n  svelte: 3.46.3\r\n```\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-02-03T02:59:56Z","created_at":"2022-02-01T18:59:49Z","creator_user_login":"hyunbinseo"}
{"number":7210,"title":"Adding transition breaks bind:this (component inside if block)","body":"## Describe the bug\r\n\r\n### TL;DR\r\n\r\nComponent inside `if` block does not update its `bind:this` value to `null` when removed.\r\n\r\n### Example\r\n\r\nCheck Reproduction section and REPL for full description and code.\r\n\r\n#### With transition\r\n\r\n```svelte\r\n{#if elementExists}\r\n  <h1 bind:this={elementNode} transition:fade>\r\n    Exists!\r\n  </h1>\r\n{/if}\r\n```\r\n\r\n| elementExists | elementNode                 |\r\n| ------------- | --------------------------- |\r\n| `true`        | `<h1>Exists!</h1>`          |\r\n| `false`       | `<h1 style=\"\">Exists!</h1>` |\r\n\r\n#### Without transition\r\n\r\n```svelte\r\n{#if elementExists}\r\n  <h1 bind:this={elementNode}>\r\n    Exists!\r\n  </h1>\r\n{/if}\r\n```\r\n\r\n| elementExists | elementNode        |\r\n| ------------- | ------------------ |\r\n| `true`        | `<h1>Exists!</h1>` |\r\n| `false`       | `null`             |\r\n\r\n---\r\n\r\n## Reproduction\r\n\r\n### Guide\r\n1. Open devtools (Console)\r\n2. Open the reproduction [REPL](https://svelte.dev/repl/b36775e8c1e84fc7ab08cf8e10a14c4b?version=3.46.3).\r\n3. Keep or remove `transition:fade`.\r\n4. Press `Toggle` button multiple times.\r\n\r\n### Console\r\n\r\n#### With transition\r\n\r\nPressing `Log` button when `elementExists` is `false` logs `<h1 style>​Exists!​</h1>​`.\r\n\r\n```\r\n// 1st press\r\ntrue undefined\r\ntrue <h1>​Exists!​</h1>​\r\n\r\n// 2nd press\r\nfalse <h1>​Exists!​</h1>​\r\n// false null is missing here\r\n```\r\n\r\n#### Without transition\r\n\r\n```\r\n// 1st press\r\ntrue undefined\r\ntrue <h1>​Exists!​</h1>​\r\n\r\n// 2nd press\r\nfalse <h1>​Exists!​</h1>​\r\nfalse null\r\n```\r\n\r\n---\r\n\r\n## System Info\r\n\r\n```shell\r\nSystem:\r\n  OS: macOS 12.1\r\n  CPU: (8) arm64 Apple M1\r\nBrowsers:\r\n  Chrome: 97.0.4692.99\r\n  Safari: 15.2\r\nnpmPackages:\r\n  svelte: 3.46.3\r\n```\r\n\r\n---\r\n\r\n## Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-03-31T20:02:33Z","created_at":"2022-02-01T09:10:55Z","creator_user_login":"hyunbinseo"}
{"number":7209,"title":"An element that uses the animate directive must be the immediate child of a keyed each block","body":"### Describe the problem\n\nThe animate directive is only allowed to an immediate child of a keyed each block.\r\n```svelte\r\n{#each todos.filter(t => !t.done) as todo (todo.id)}\r\n\t<label animate:flip>{todo.description}</label>\r\n{/each}\r\n```\r\n\r\nAs soon as the child might become more complex, the child element might be wrapped in its own component. That breaks the animate directive with the well known error message.\r\n\r\n```svelte\r\n{#each todos.filter(t => !t.done) as todo (todo.id)}\r\n\t<Todo {todo} />\r\n{/each}\r\n```\r\n\r\nSo from a developer experience perspective, this should be possible as well because inside that component the first element is technically still an immediate child of that each block.\r\n\r\nI prepared two REPLs.\r\n\r\n1. Without child component https://svelte.dev/repl/e1c1f2459ed74d96a9de082c0be01741?version=3.46.3\r\n2. With child component, animate directive not working https://svelte.dev/repl/b4a879ed63b64d2baaebd023d2209cc0?version=3.46.3\r\n\r\n\n\n### Describe the proposed solution\n\nI can't fix this myself as the animate directive is resolved within the compiler I'm not so familiar with, yet.\r\n\r\n1. Proposed solutions is that the element in the component is recognized correctly as immediate child of the each block.\r\n\r\n```svelte\r\n{#each todos.filter(t => !t.done) as todo (todo.id)}\r\n\t<Todo {todo} />\r\n{/each}\r\n```\r\n\r\nAnd in Todo.svelte\r\n```svelte\r\n\t<script>\r\n\t\texport let todo;\r\n\t</script>\r\n\t<label animate:flip>{todo.description}</label>\r\n```\r\n\r\n2. Or allow the animate directive on Components instead of elements.\r\n\r\n```svelte\r\n{#each todos.filter(t => !t.done) as todo (todo.id)}\r\n\t<Todo {todo} animate:flip={{element}} bind:element/>\r\n{/each}\r\n```\r\n\r\nAnd in Todo.svelte\r\n```svelte\r\n\t<script>\r\n\t\texport let todo;\r\n\t\texport let element;\r\n\t</script>\r\n\t<label bind:this={element}>{todo.description}</label>\r\n```\r\n\n\n### Alternatives considered\n\nAlternatives are quite tough.\r\nAs I will also use `in:receive` and `out:send` crossfade transitions, I could try to identify the remaining items of the each loop by myself and put an animation on them.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-05-11T01:52:55Z","created_at":"2022-02-01T07:40:35Z","creator_user_login":"matths"}
{"number":7207,"title":"fix: correct FLIP animations in scaled parent","body":"The issue #7205 describes how FLIP animations occurring inside a parent with `transform: scale(n)` are wonky, this PR resolves that issue by;\r\n- Geting the scale factor by comparing against node.clientWidth\r\n- Dividing all the positions/dimensions by the scale to get the correct deltas\r\n\r\n---\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n\r\n### Tests\r\n- [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n_(I haven't added a test, as I don't really understand how the animate tests are working, and I couldn't find an example in the #6658 commit which caused this regression. If anyone wants to walk me through creating a test, or help append a test to this PR, please let me know! :))_\r\n\r\n---\r\n\r\n- resolves #7205\r\n- fixes regression from #6658\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2022-01-31T03:23:48Z","creator_user_login":"simeydotme"}
{"number":7205,"title":"FLIP Animations inside a Scaled Parent are calculated incorrectly","body":"### Describe the bug\r\n\r\nWhen a FLIP animation is declared inside a parent with `transform: scale(n)` _(`n !== 1`)_ then the animations start in the wrong position, with the wrong dimensions, exacerbated by the scale factor.\r\n\r\nThis is a regression of a previous bugfix (#3555 , #3627) introduced/regressed by the merge of #6658 (#6657) \r\n\r\n### Reproduction\r\n\r\nHere's a REPL with the bug demonstrated;\r\nhttps://svelte.dev/repl/b42dbb56e1cf490ca57870d86dd93caa?version=3.46.3\r\nUse the **\"scale\" slider to see the effect** at different scales.  \r\nIt should be OK at `scale === 1` but varying degrees of broken on other scales.\r\n\r\n---\r\n\r\nAnd here is a version of the REPL with a fix I will submit **(change the dropdown to see differences)**\r\nhttps://svelte.dev/repl/ab91bfc09cf845d5aceaf42b092a7e3d?version=3.46.3\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Ubuntu 20.04 LTS (Focal Fossa)\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9900KF CPU @ 3.60GHz\r\n    Memory: 22.65 GB / 25.00 GB\r\n    Container: Yes\r\n    Shell: 5.0.16 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.2 - ~/.nvm/versions/node/v16.13.2/bin/node\r\n    Yarn: 1.22.4 - /usr/bin/yarn\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v16.13.2/bin/npm\r\n  npmPackages:\r\n    rollup: ^1.27.14 => 1.27.14\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-01-30T08:03:36Z","created_at":"2022-01-30T07:58:38Z","creator_user_login":"simeydotme"}
{"number":7200,"title":"append_styles s/b typed as an optional parameter in function init(...)","body":"### Describe the bug\n\nIf the generated JavaScript code (for the simplest Hello World case) is given a .ts extension and analyzed by the TypeScript compiler, the error is \"Expected 7-8 arguments, but got 6.\" This is because the current prototype of the init function in Component.ts requires append_styles.\n\n### Reproduction\n\nYou can see this in my STEMCstudio browser-based application (an online coding environment for education that supports Svelt).\r\n\r\nhttps://stemcstudio.com/gists/078c883495d81d6976ae798c9e243b76\r\n\r\nSelecting the \"Workspace Settings\" menu (cog wheel) and the \"Show Intermediate (TypeScript) Code\" menu item shows that the call to init has six arguments. The append_styles parameter is not required (as evidence in the Svelt source code).\r\n\r\nThe fix would be to change the append_styles type in src/runtime/internal/Component.ts to something like:\r\n\r\nappend_styles?: (root: Element | ShadowRoot) => void,\r\n\r\nOR\r\n\r\nappend_styles?: (root: Node) => void\r\n\r\nI'm not quite sure which is best or what the intent is.\r\n\r\nI can make a recommendation if rectifying this issue is given favorable consideration.\r\n\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nVersion 3.46.3 of Svelte and below.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-02-01T14:45:39Z","created_at":"2022-01-28T23:07:38Z","creator_user_login":"stemcstudio"}
{"number":7197,"title":"bind:this on select not setting selected option when options are set after component is mounted","body":"### Describe the bug\n\nWhen using `bind:this` on a `<select>`-element and the options are set after component is mounted the option matching the value is not selected.\r\n\r\nGot a select component where I needed to `bind:this` for some simple DOM manipulation.\r\nThe selectable options are fetched dynamically and not avaliable immediately but the selected value for the select is known before the options are available.\r\n\r\nNot critical and I could simply use `bind:this` on the parent div instead as a workaround and get the element I need from there.\n\n### Reproduction\n\nhttps://svelte.dev/repl/7bc7f38ff3bf4231a0b8e8461efe27b6?version=3.46.3\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\r\n    Memory: 3.33 GB / 15.79 GB\r\n  Binaries:\r\n    Node: 16.13.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.15 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 8.1.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 97.0.4692.99\r\n    Edge: Spartan (44.19041.1266.0), Chromium (97.0.1072.69)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    svelte: ^3.46.2 => 3.46.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-01-28T06:31:14Z","created_at":"2022-01-28T06:31:14Z","creator_user_login":"kling90"}
{"number":7193,"title":"Provide the default store implementations as classes","body":"### Describe the problem\r\n\r\n# Rationale:\r\n\r\nAs someone who has written quite a number of rather complex [custom stores](https://svelte.dev/tutorial/custom-stores), two *fundamental* pain points have been **the lack of polymorphism** and **lack of access to the store's current value** in the custom store's implementation.\r\n\r\nBecause of this, I'm proposing that the [default store implementation](https://github.com/babichjacob/svelte-localstorage/blob/main/projects/svelte-localstorage/base.js) be provided as a class, precisely because this makes possible the two aforementioned scenarios.\r\n\r\nSome real-world use cases wherein polymorphism and current value access would be essential to building certain custom stores are described below:\r\n\r\n## 1. Access to the current value without subscription\r\nThis is a very common requirement. Imagine a `timer` function that returns a custom store that represents a countdown timer:\r\n```typescript\r\nexport function createTimer(shouldElapseMs: number, percisionMs = 50) {\r\n    let state = {\r\n        running: false,\r\n        finished: false,\r\n        remainingMs: shouldElapseMs,\r\n        elapsedMs: 0,\r\n    };\r\n\r\n    const store = writable(state, () => stop);\r\n\r\n    function start() {\r\n        if (get(store).running)\r\n            return;\r\n\r\n        if (get(store).finished)\r\n            reset();\r\n\r\n        setInterval(() => {\r\n            store.set({\r\n                ...get(store),\r\n                remainingMs: get(store).remainingMs - percisionMs,\r\n                elapsedMs: shouldElapseMs - get(store).remainingMs,\r\n                finished: get(store).remainingMs - percisionMs <= 0,\r\n            });\r\n            if (get(store).finished) stop();\r\n        }, percisionMs);\r\n\r\n        store.set({\r\n            ...get(store),\r\n            running: true,\r\n        });\r\n    }\r\n\r\n    function stop() {\r\n        // irrelevant...\r\n    }\r\n\r\n    function reset() {\r\n        // irrelevant...\r\n    }\r\n\r\n    return {\r\n        subscribe: store.subscribe,\r\n        start,\r\n        stop,\r\n        reset,\r\n    };\r\n}\r\n```\r\n\r\nAs you can see, we're using the `get()` function here (imported from `svelte/store`) each time we need the current value of the underlying store. However, the `get()` function is inefficient, as explained [here in the docs](https://svelte.dev/docs#run-time-svelte-store-get):\r\n> This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.\r\n\r\nSo, in an example like the timer where we do have a \"hot code path\", (namely inside the `setInterval` callback, which is going to be executed every 50 milliseconds), this inefficiency is especially significant.\r\n\r\nYou might also think: \"Well, we can't we just subscribe to the underlying store in our function?!\"\r\nWell, we can, but that would mean the underlying store will always have at least one subscriber, which in turn means that the function you return from the `start` callback, which only runs once [when the last subscriber unsubscribes](https://svelte.dev/tutorial/readable-stores#:~:text=its%20first%20subscriber%3B-,stop%20is%20called%20when%20the%20last%20subscriber%20unsubscribes.,-export%20const%20time), will never be called. So this is certainly not a feasible solution either.\r\n\r\nThe `writable` function currently does store the current value as a local variable:\r\nhttps://github.com/sveltejs/svelte/blob/e460acc8f1aa76e66234393c6380e2f6b5e57272/src/runtime/store/index.ts#L68-L70\r\nwhich of course means it doesn't expose it to the outside. If this, however, was a class, this variable could've been exposed as a [`protected`](https://www.typescriptlang.org/docs/handbook/2/classes.html#understanding-protected) property, which would give access to it to deriving classes, and that would beautifully solve this problem.\r\n\r\nNote that various (ugly) workarounds like this are currently being used across the Svelte ecosystem, [here's an example](https://github.com/babichjacob/svelte-localstorage/blob/main/projects/svelte-localstorage/base.js#L31).\r\n\r\n## 2. Polymorphism\r\nSuppose you want to write a function that creates a writable store whose value is synchronized across all the open tabs (or [browsing contexts](https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context), to be more accurate).\r\n```typescript\r\nimport { writable, type Writable, type StartStopNotifier } from 'svelte/store';\r\n\r\nexport function crossTabStore<T>(channelName: string, initValue: T, start?: StartStopNotifier<T>): Writable<T> {\r\n    const underlyingStore = writable(initValue, start);\r\n\r\n    const channel = new BroadcastChannel(channelName);\r\n    channel.addEventListener('message', (e: MessageEvent<T>) => underlyingStore.set(e.data));\r\n\r\n    return {\r\n        ...underlyingStore,\r\n        set(value) {\r\n            underlyingStore.set(value);\r\n            channel.postMessage(value);\r\n        },\r\n    };\r\n}\r\n```\r\nThis looks simple and straightforward. There is, however, a subtle bug in here: If the user of the returned store uses the `update` function to set a new value for the store, the value would NOT be synchronized. Why? Because our overridden custom `set` method, which in turn calls `channel.postMessage(...)` isn't called, even though the built-in `update` method does call `set` internally:\r\nhttps://github.com/sveltejs/svelte/blob/e460acc8f1aa76e66234393c6380e2f6b5e57272/src/runtime/store/index.ts#L87-L89\r\nsince there's no polymorphism when we're dealing with plain objects like this, it's actually the default `set` function that `update` is calling, and not the overridden/custom one.\r\n\r\nThis means we'd have to implement a very awkward custom `update` function too:\r\n```typescript\r\nimport { writable, type Writable, type StartStopNotifier } from 'svelte/store';\r\n\r\nexport function crossTabStore<T>(channelName: string, initValue: T, start?: StartStopNotifier<T>): Writable<T> {\r\n    const underlyingStore = writable(initValue, start);\r\n\r\n    const channel = new BroadcastChannel(channelName);\r\n    channel.addEventListener('message', (e: MessageEvent<T>) => underlyingStore.set(e.data));\r\n\r\n    return {\r\n        subscribe: underlyingStore.subscribe,\r\n        update(updater) {\r\n            let newValue: T;\r\n            underlyingStore.update(currentValue => {\r\n                newValue = updater(currentValue);\r\n                return newValue;\r\n            });\r\n            channel.postMessage(newValue);\r\n        },\r\n        set(value) {\r\n            underlyingStore.set(value);\r\n            channel.postMessage(value);\r\n        },\r\n    };\r\n}\r\n```\r\n\r\nIf, however, the default store implementation was a class that could be extended, we could've simply overridden the `set` function, and then whenever the `update` function calls `set` internally, polymorphism would kick in and everything would work as expected:\r\n```typescript\r\nclass CrossTabStore<T> extends Store<T> {\r\n    private channel: BroadcastChannel;\r\n\r\n    constructor(channelName: string, initialValue: T, start?: StartStopNotifier<T>) {\r\n        super(initialValue, start);\r\n        this.channel = new BroadcastChannel(channelName);\r\n    }\r\n    \r\n    set(value) {\r\n        super.set(value);\r\n        this.channel.postMessage(value);\r\n    }\r\n}\r\n```\r\nWhich one is cleaner? I reckon the difference is clear.\r\n\r\n### Describe the proposed solution\r\n\r\nWhat I'd suggest we do is extract the default store implementation, which currently resides in the `writable` function [here](https://github.com/sveltejs/svelte/blob/e460acc8f1aa76e66234393c6380e2f6b5e57272/src/runtime/store/index.ts#L64), into two classes (`Store`, and `ReadonlyStore` to differentiate them from the `Writable` and `Readable` interfaces, maybe? This is debatable though), and also keep the `writable` and `readable` functions, so as to avoid any breaking-change.\r\n\r\nThe `writable` function could still continue to be used whenever you want to simply create a store, and the new class, on the other hand, would be meant to be extended and used for creating custom stores. \r\n\r\nAnd again, this change would not be breaking.\r\n\r\nRegarding what would change in the tutorial, all I would change is the tutorial on [custom stores](https://svelte.dev/tutorial/custom-stores), to start talking about these classes and how they are what should be used when creating custom stores.\r\n\r\n### Alternatives considered\r\n\r\nAs I mentioned, currently you have to utilize dirty workarounds to make up for these fundamental limitations, such as the ones I demonstrated above. So, this would indeed make creating custom stores much more efficient and developer-friendly.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-02-01T14:46:35Z","created_at":"2022-01-27T14:06:29Z","creator_user_login":"ponderingexistence"}
{"number":7175,"title":"Invalid hydration in IE11","body":"### Describe the bug\r\n\r\n IE11 is not hydrated correctly\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/janvotava/svelte-hydration-bug\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 12.2\r\n    CPU: (10) arm64 Apple M1 Pro\r\n    Memory: 1.75 GB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.2 - /opt/homebrew/opt/node@16/bin/node\r\n    Yarn: 1.22.17 - /opt/homebrew/bin/yarn\r\n    npm: 8.1.2 - /opt/homebrew/opt/node@16/bin/npm\r\n    Watchman: 2021.12.20.00 - /opt/homebrew/bin/watchman\r\n  Browsers:\r\n    Brave Browser: 97.1.34.80\r\n    Chrome: 97.0.4692.99\r\n    Chrome Canary: 99.0.4840.0\r\n    Firefox: 96.0.1\r\n    Safari: 15.3\r\n    Safari Technology Preview: 15.4\r\n  npmPackages:\r\n    svelte: ^3.46.2 => 3.46.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2022-02-10T19:33:07Z","created_at":"2022-01-23T02:39:43Z","creator_user_login":"janvotava"}
{"number":7170,"title":"Allow multiple classes in class: directive","body":"### Describe the problem\r\n\r\nUtility-first CSS frameworks like [Tailwind](https://tailwindcss.com/) use very granular CSS classes (e.g. `bg-red-500` for a red background, `shadow-lg` for a large box-shadow, ...). You often want to apply styles conditional with the `class:` directive. Unfortunately, it only works for a single class at the moment which means you have to duplicate it quite often. A very simple example for a Button component with Svelte and Tailwind might look like this:\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let color: 'primary' | 'danger' = 'primary';\r\n</script>\r\n\r\n<button\r\n\ton:click\r\n\tclass=\"px-3 py-2 text-white rounded shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2\"\r\n\tclass:bg-blue-700={color === 'primary'}\r\n\tclass:hover:bg-blue-800={color === 'primary'}\r\n\tclass:ring-blue-400={color === 'primary'}\r\n\tclass:bg-red-600={color === 'danger'}\r\n\tclass:hover:bg-red-700={color === 'danger'}\r\n\tclass:ring-red-500={color === 'danger'}\r\n>\r\n\t<slot />\r\n</button>\r\n```\r\n![image](https://user-images.githubusercontent.com/5033001/150512782-4805f7f1-8948-4507-b677-ed56b2165c1d.png)\r\n\r\nThis is very boiler-plate-heavy and annoying to work with. It's also just a very simple example for showcasing and usually gets even uglier in real-world examples. When using a utility-first framework you run into this issue a lot.\r\n\r\n### Describe the proposed solution\r\n\r\nAllow the use of multiple CSS classes in the `class:` directive with a `class:\"x y z\"={true}` syntax. This would allow the example above to be simplified like this:\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let color: 'primary' | 'danger' = 'primary';\r\n</script>\r\n\r\n<button\r\n\ton:click\r\n\tclass=\"px-3 py-2 text-white rounded shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2\"\r\n\tclass:\"bg-blue-700 hover:bg-blue-800 ring-blue-400\"={color === 'primary'}\r\n\tclass:\"bg-red-600 hover:bg-red-700 ring-red-500\"={color === 'danger'}\r\n>\r\n\t<slot />\r\n</button>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nThere's been a very similar issue (https://github.com/sveltejs/svelte/issues/3376) which unfortunately has been closed and not been re-opened despite getting a lot of follow-up comments that argue for its usefulness. In this issue, some alternatives have been discussed:\r\n\r\n#### Using Tailwind's `@apply` directive\r\n\r\nTailwind does provide a `@apply` directive to extract multiple Tailwind-classes into a custom CSS class. For the example above, this could look like this:\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let color: 'primary' | 'danger' = 'primary';\r\n</script>\r\n\r\n<button\r\n\ton:click\r\n\tclass=\"px-3 py-2 text-white rounded shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2\"\r\n\tclass:primary={color === 'primary'}\r\n\tclass:danger={color === 'danger'}\r\n>\r\n\t<slot />\r\n</button>\r\n\r\n<style lang=\"postcss\">\r\n\t.danger {\r\n\t\t@apply bg-red-600 hover:bg-red-700 ring-red-500;\r\n\t}\r\n\r\n\t.primary {\r\n\t\t@apply bg-blue-700 hover:bg-blue-600 ring-blue-400;\r\n\t}\r\n</style>\r\n```\r\nWhile this appears to be a good solution (and is used by many to circumvent the issue), using the `@apply` directive goes against the utility-first workflow. Adam Wathan (the creator of Tailwind) advised against using it ([Source](https://twitter.com/adamwathan/status/1226511611592085504)):\r\n> Confession: The `apply` feature in Tailwind basically only exists to trick people who are put off by long lists of classes into trying the framework.\r\n> \r\n> You should almost never use it 😬\r\n\r\nAdditionally, there are other Utility-CSS frameworks that usually don't have this feature.\r\n\r\n#### Using the ternary operator\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let color: 'primary' | 'danger' = 'primary';\r\n</script>\r\n\r\n<button\r\n\ton:click\r\n\tclass=\"px-3 py-2 text-white rounded shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2\r\n\t{color === 'primary' ? 'bg-blue-700 hover:bg-blue-800 ring-blue-400' : ''}\r\n\t{color === 'danger' ? 'bg-red-600 hover:bg-red-700 ring-red-500' : ''}\r\n\t\"\r\n>\r\n\t<slot />\r\n</button>\r\n```\r\n\r\nThis does work, but obviously also introduces a lot of boilerplate code. The whole point of the `class:` directive is to eliminate this kind of code.\r\n\r\n#### Writing a Svelte Preprocessor\r\n\r\nI'm not familiar with preprocessors, but this has been a frequent suggestion in the original issue. There even exists one already: https://github.com/paulovieira/svelte-preprocess-class-directive\r\n\r\nThis might be a viable option but I would much rather prefer support out-of-the-box instead of relying on a third-party library. Besides not being actively maintained, the linked preprocessor uses an alternative, non-ideal syntax like described in the next section \"Alternative syntaxes\".\r\n\r\n#### Alternative syntaxes\r\n\r\nMany other syntaxes have been suggested, e.g. `class:x,y,z={true)`, `.x.y.z={true}`, `class:{\"x y z\"}={true}`, ...\r\nThe problem with most of them is that they either introduce breaking changes (e.g., `class:x,y,z={true}` is already valid syntax for the class `x,y,z`) and/or limit it to a sub-set of CSS-classes because `,` and `.` are valid characters in CSS class names. While not very common in \"classic\" CSS classes, they are often used by utility frameworks like Tailwind (e.g. `gap-[2.75rem]`, `grid-rows-[200px_minmax(900px,_1fr)_100px]`, or `row-[span_16_/_span_16]`). `class:{\"x y z\"}={true}` would work and should be supported as an alternative syntax (just like `class={\"x y z\"}` also works) but is also unnecessary (yet small) boilerplate in most cases.\r\n\r\n### Importance\r\n\r\nwould make my life easier\r\n\r\n### Final words\r\n\r\nAs mentioned above, this is technically a duplicate of https://github.com/sveltejs/svelte/issues/3376. However, since there have been no responses from any maintainers (even when pinging them) on the original issue, I've decided to open this issue with a summary of the discussion in the original issue. I would very much appreciate a re-evaluation of the original decision to not support this feature, either in this issue or by re-opening the original one. Thank you for the awesome work on Svelte!","state":"open","updated_at":"2023-07-23T06:37:29Z","created_at":"2022-01-21T11:45:22Z","creator_user_login":"Bastian"}
{"number":7166,"title":"Tween and transitions don't work together ","body":"### Describe the bug\n\nelement with tweened location moves as its being transitioned in but not  as its being transitioned out.\n\n### Reproduction\n\nhttps://svelte.dev/repl/5b90bd8c3dda45c495df799dd2a5172e?version=3.46.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\r\n    Memory: 930.31 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 17.3.0 - /usr/local/bin/node\r\n    Yarn: 1.22.11 - /usr/local/bin/yarn\r\n    npm: 8.3.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 97.0.4692.99\r\n    Firefox: 96.0.1\r\n    Safari: 15.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-01-20T20:12:03Z","created_at":"2022-01-20T20:12:03Z","creator_user_login":"lofsigma"}
{"number":7160,"title":"<select> element has wrong initial value in SSR","body":"### Describe the bug\r\n\r\nWhen using code like the following, the SSR output does not generate the `selected` attribute on the `<option>` corresponding to the value. This means that the initial displayed value is incorrect until hydration takes place.\r\n\r\nThe behavior is similar when just using `value` instead of `bind:value`. In that case SSR generates a `value` attribute on the `select`, but the browser doesn't honor it.\r\n\r\n```svelte\r\n<script>\r\n  let theValue = 'def';\r\n</script>\r\n<select bind:value={theValue}>\r\n  <option>abc</option>\r\n  <option>def</option>\r\n</select>\r\n```\r\n\r\nI've worked around this in my own project by writing this:\r\n\r\n```svelte\r\n<select bind:value={theValue}>\r\n  <option selected={theValue === 'abc'}>abc</option>\r\n  <option selected={theValue === 'def'}>def</option>\r\n</select>\r\n```\r\n\r\n### Reproduction\r\n\r\nSee the JS output of https://svelte.dev/repl/39c922f259564703ba7b8adc83c256f1?version=3.46.2 with `generate` set to `ssr`.\r\n\r\nReproduced here for reference.\r\n\r\n```js\r\n/* App.svelte generated by Svelte v3.46.2 */\r\nimport { create_ssr_component } from \"svelte/internal\";\r\n\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\tlet theValue = \"Def\";\r\n\treturn `<select><option value=\"${\"Abc\"}\">Abc</option><option value=\"${\"Def\"}\">Def</option><option value=\"${\"Ghi\"}\">Ghi</option></select>`;\r\n});\r\n\r\nexport default App;\r\n```\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte REPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-06-06T23:53:01Z","created_at":"2022-01-19T07:15:58Z","creator_user_login":"dimfeld"}
{"number":7157,"title":"Apply transition modifier local conditionally","body":"### Describe the problem\r\n\r\nIs there a way to make transitions local conditionally?\r\n\r\n### Describe the proposed solution\r\n\r\nCould become a transition param:\r\n\r\n```svelte\r\n<h1 transition:fade={{ local: cond }}>Hello world!</h1>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nMaybe this?\r\n\r\n```svelte\r\n<h1 transition:fade|local:cond>Hello world!</h1>\r\n```\r\n\r\nThough that seems bad as people might then expect this to work:\r\n\r\n```svelte\r\n<h1 transition:fade|local={cond}>Hello world!</h1>\r\n```\r\n\r\nwhich conflicts with current param passing mechanism.\r\n\r\n[REPL](https://svelte.dev/repl/e292ff8935dc4f5d97e5373f9f611c1b?version=3.46.2) for testing if any of these already work.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2022-01-17T12:11:22Z","created_at":"2022-01-17T11:18:32Z","creator_user_login":"janosh"}
{"number":7151,"title":"Outros undefined when loading component from URL","body":"### Describe the bug\r\n\r\nI load a Select.svelte component from an URL using context=\"module\":\r\n```\r\n<script context=\"module\">\r\n  let settings = null;\r\n  let modulePromise = async () => {\r\n    if (settings == null) {\r\n      let data = await fetch(\"//pricelist.a3:5000/components/component.json\");\r\n\r\n      settings = await data.json();\r\n\r\n      console.log(settings.path);\r\n\r\n      return import(settings.path);\r\n    }\r\n  };\r\n</script>\r\n```\r\n\r\nThen I await in the body of parent Options.svelte component:\r\n```\r\n{#await modulePromise()}\r\n      loading\r\n    {:then module}\r\n      {console.log(module)}\r\n      <svelte:component\r\n        this={module?.default}\r\n        on:selectionMade={selectionMade}\r\n        {element}\r\n      />\r\n    {/await}\r\n```\r\n\r\nAnd if I then drag & drop the Options component I get the `outros.c.push(() => {` error in the dist/index.js of the bundled Select.svelte component.\r\n\r\nI'll add that I'm using npm link of the Svelte app in Select.svelte project, but Svelte versions are the same, and in both projects I have this in my rollup.config.js:\r\n```\r\nresolve({\r\n    browser: true,\r\n    dedupe: ['svelte']\r\n}),\r\n```\r\n<img width=\"706\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2500267/149650542-4eb7c942-be36-4aba-a7cb-332afc235e4d.png\">\r\n\r\n### Reproduction\r\n\r\nThis is hard to reproduce, because the loaded component actually renders and responds to actions, but fails only when its parent component is drag&dropped inside my editor.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Ubuntu 20.04.3 LTS (Focal Fossa)\r\n    CPU: (20) x64 12th Gen Intel(R) Core(TM) i7-12700K\r\n    Memory: 8.07 GB / 15.53 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.1 - ~/.nvm/versions/node/v16.13.1/bin/node\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v16.13.1/bin/npm\r\n  Browsers:\r\n    Chrome: 97.0.4692.71\r\n  npmPackages:\r\n    rollup: >=2.3.4 => 2.64.0 \r\n    svelte: >=3.39.0 => 3.46.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2022-02-01T14:49:51Z","created_at":"2022-01-16T06:51:31Z","creator_user_login":"nine-2-five"}
{"number":7150,"title":"Inconsistent element attributes when value is undefined","body":"### Describe the bug\n\nThe docs say that:\r\n> Boolean attributes are included on the element if their value is truthy and excluded if it's falsy.\r\n> All other attributes are included unless their value is nullish (null or undefined).\r\n\r\nI encountered two cases where this is not the case. A `Button` component with an optional `value` prop might be defined as:\r\n```html\r\n<!-- Button.svelte -->\r\n <script>\r\n   export let value = undefined;\r\n </script>\r\n\r\n<button {value}></button>\r\n ```\r\n and will render:\r\n ```html\r\n  <button value=\"undefined\"></button>\r\n  ```\r\n  The same is true for the new style directive:\r\n  ```html\r\n  <!-- Icon.svelte -->\r\n<script>\r\n  export let name = \"heart\";\r\n  export let color = undefined;\r\n</script>\r\n\r\n<svg style:--icon-color={color}>\r\n  <use href=\"#icon-{name}\" />\r\n</svg>\r\n```\r\nwill result in:\r\n```html\r\n<svg style=\"--icon-color: undefined;\"> \r\n  <use href=\"#icon-heart\" />\r\n</svg>\r\n ```\r\n The expected behavior in both cases would be that the attributes are not added to the element at all when they are `undefined`. It seems like some values/attributes are always stringified. I'm not entirely sure if this behavior is intended. If it is then it should probably be clarified in the docs and if it is not then we might want to fix this.\n\n### Reproduction\n\nhttps://svelte.dev/repl/ca1b34d3cd454b01ad15aa3e5e025caf?version=3.46.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.4 Ubuntu 20.04.3 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i3-10100 CPU @ 3.60GHz\r\n    Memory: 480.74 MB / 15.57 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.13.2 - /usr/bin/node\r\n    npm: 8.1.2 - /usr/bin/npm\r\n  Browsers:\r\n    Chrome: 97.0.4692.71\r\n    Firefox: 95.0.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-26T18:26:44Z","created_at":"2022-01-15T18:20:48Z","creator_user_login":"ghost"}
{"number":7143,"title":"Support for Exclusively Special Characters in Component Filenames","body":"### Describe the bug\r\n\r\nCertain component filenames will throw the error: `Could not derive component name from file {FILENAME}.svelte`.\r\n\r\nExamples of filenames that will throw an error:\r\n@.svelte\r\n&.svelte\r\n...\r\n\r\nExamples of filenames that will not throw an error:\r\n%.svelte\r\n$.svelte\r\n\r\nThe reason for why this is happening is that function [get_name_from_filename](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/utils/get_name_from_filename.ts) replaces certain characters with underscores and if these underscores happen to be leading characters, then they get deleted. \r\n\r\nThe behavior is somewhat inconsistent, because certain equivalent filenames, but with a different special character do work just fine. \r\n\r\nAdditionally, this is not how HTML and the web generally work. You may very well have a file named just \"@\" if you want.\r\n\r\nThis is a bigger issue in SvelteKit, because now urls like `example.com/something/@` are essentially second class citizens (yes the problem can be fixed by creating a directory and a index.svelte file, but this is in some cases extra boilerplate).\r\n\r\n**Potential fix**\r\n\r\nIt is relatively easy to fix this problem. In the function [get_name_from_filename](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/utils/get_name_from_filename.ts) the following code is the culprit:\r\n\r\n```\r\nconst base = parts.pop()\r\n  .replace(/%/g, 'u')\r\n  .replace(/\\.[^.]+$/, '')\r\n  .replace(/[^a-zA-Z_$0-9]+/g, '_')        // This line replaces \"@\" => \"_\"\r\n  .replace(/^_/, '')                       // This line replaces leading \"_\" => \"\" and thus causes the bug\r\n  .replace(/_$/, '')\r\n  .replace(/^(\\d)/, '_$1');\r\n```\r\n\r\nTo fix this problem, either change `.replace(/%/g, 'u')` to take in other special characters as well, like so:  `.replace(/[%@#]/g, 'u')`. However, this leads to the question of what special characters are to be supported. Maybe there is some way to regex them all? Additionally, should all of these be replaced with \"u\"?\r\n\r\nAlternatively, leading \"_\" should not be discarded if they are the only characters.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/392f9371025f48f88a6274a5f6e6d8ee?version=3.46.2\r\n\r\n### Logs\r\n\r\n```shell\r\nCould not derive component name from file @.svelte\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-03-10T00:42:02Z","created_at":"2022-01-15T05:48:10Z","creator_user_login":"Acmion"}
{"number":7131,"title":"Each blocks with animate don't account for \"empty\" children","body":"### Describe the bug\r\n\r\n> This issue is for tying together fixes and issues that would be closed when it's fixed so we can get this sorted \r\n\r\nCurrently a each block with a animate directive only allows for a single child, this check doesn't account for \"empty\" children, here I am defining a empty child as one that contains only tabs/line breaks/whitespaces\r\n\r\nThe issues presented below are essentially due to how the code author formats their dom, anything completely inline fixes all the issues below but when a author adds indentation/formatting to their code the each block detects as that a child despite it being \"empty\"\r\n\r\n@ehrencrona Proposed a solution below which essentially filters through the children to remove the empty ones.\r\n\r\n@tanhauhau [posted a video](https://www.youtube.com/watch?v=IyCFv8_mvk8) on issue #5415 (which if fixed fixes the other issues) and his conclusion was a internal discussion needs to take place on how the whitespace is handled - but I am unsure what happened to this\r\n\r\nPotential Fixes:\r\n- ~~#5477~~ [FIXED]\r\n\r\nIssues closed by a fix occurring:\r\n#3999 - Comments not allowed\r\n#5415 - ~~Inline each block believes it has multiple children~~ [FIXED]\r\n#7124 - ~~{@const} tag causes each block to believe it has multiple children~~ [FIXED]\r\n\r\n### Reproduction\r\n\r\nSee each issue linked above\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-19T13:38:16Z","created_at":"2022-01-13T12:07:17Z","creator_user_login":"ghostdevv"}
{"number":7129,"title":"Reactive statement re-run even though dependency (exported prop) didn't change","body":"## Describe the bug\r\n\r\nSee my repro (based on actual problem I ran into):\r\nhttps://svelte.dev/repl/ff6e69e975df44f3821cc4ed956881f8\r\n\r\n```svelte\r\n<script>\r\n  export let filters;\r\n\r\n  export function fetchItems(filters) {\r\n    return [{name: 'B'}, {name: 'A'}]\r\n  }\r\n\r\n  let items = []\r\n  $: console.log('filters changed?', filters)\r\n  $: {\r\n    items = fetchItems(filters)\r\n    console.log('re-fetched, overwriting sorted array with unsorted array')\r\n  }\r\n  $: console.log('items is now:', items.map(el => el.name))  \r\n\r\n  function handleSort() {\r\n    items.sort((a,b) => -1)\r\n    console.log('items is now sorted:', items.map(el => el.name))\r\n    items = items\r\n  }\r\n</script>\r\n\r\n{#each items as item}\r\n  <ol>\r\n    <li>{item.name}</li>\r\n  </ol>\r\n{/each}\r\n\r\n<button on:click={handleSort}>Sort!</button>\r\n```\r\n\r\n**Expected behavior:** When handleSort is called, it should sort `items`, and render the updated list with [A, B]. Because the `$: items = fetchItems(filters)` block depends _only_ on `filters` and `filters` has not changed, it should not be re-run.\r\n\r\n**Actual behavior**: When handleSort updates `items = items`, it re-runs the `$: items = fetchItems(filters)` block (why???), causing an extra unnecessary `fetch`, and worse, causing the results of the sort to be lost and replaced with unsorted list, [B, A].\r\n\r\nYou can see from the console that after it sorts the items, it erroneously triggers both of these to re-run, even though `filters` has not — and could not have — changed.\r\n```js\r\n  $: console.log('filters changed?', filters)\r\n  $: items = fetchItems(filters)\r\n```\r\n\r\n## Similar issues\r\n\r\nLooks similar to Test 1 from https://svelte.dev/repl/58570a9e05a240f591a76b4eeab09598?version=3.46.1 (https://github.com/sveltejs/svelte/issues/5731).\r\n\r\nJust like in that issue, I only _expect_ my reactive statement to be triggered (re-fetch data based on filters) if the exported `filters` prop changes.\r\n\r\nBut unlike in that issue, where it was [put forth](https://github.com/sveltejs/svelte/issues/5731#issuecomment-739064251) (but not _confirmed_ that this was the reason) that\r\n\r\n> Seems, Svelte sees these two statements together and decide that model depending on selected assignment.\r\n> \r\n> ```svelte\r\n> $: if (model) { <-- this \r\n>   selected = []; <-- and this in the same expression\r\n> }\r\n> ```\r\n> \r\n> After that, when Svelte finds any selected assignments it will invalidates the model as well.\r\n\r\n, I didn't see anything quite the same in my example.\r\n\r\n---\r\nLooks similar to #7045 . As in that case, if I run my repro on Svelte 3.2.0 (https://svelte.dev/repl/ff6e69e975df44f3821cc4ed956881f8?version=3.2.0) pre-#2444, it works as intended.\r\n\r\n---\r\nAnd of course it looks similar to #4933, which seems to be the canonical issue for all bugs like this... but is also too broad and confusing and possibly out-of-date (the linked-to REPL doesn't actually reproduce any bug). I'm guessing my issue would fall under Condition 1 of #4933?\r\n\r\n---\r\n\r\nIs the issue like @Rich-Harris said in https://stackoverflow.com/questions/61730267/reactive-statements-triggered-too-often, that\r\n> Objects are treated differently from primitives meaning Svelte will assume that they could have been mutated\r\n\r\nSo I'm guessing somehow it invalidates \"too much\" because it pessimistically assumes that `filters` _may_ have changed? —\r\n\r\nEven though it seems abundantly clear from any _possible_ static analysis of my repro code that `filters` _cannot_ have changed simply by triggering `handleSort`. The _only_ way for `filters` to have changed is if the exported _prop_ changed, and it didn't. (So how do I prevent it from thinking it did?)\r\n","state":"open","updated_at":"2022-01-16T23:45:43Z","created_at":"2022-01-13T06:15:17Z","creator_user_login":"TylerRick"}
{"number":7119,"title":"Transition not removing extra DOM nodes after completion","body":"### Describe the bug\r\n\r\nWhen you have an element with a transition and destroy it, but then recreate it before the transition is done, you can end up with old elements not being removed.\r\n\r\n### Reproduction\r\n\r\n[REPL](https://svelte.dev/repl/a9b4cdc7fcd642e8887c3c59bcd50f8a?version=4.1.2)\r\n\r\nWhen you type in the input field, the `value` is set to what you typed if the `value` is empty, otherwise the `value` is cleared. Try randomly spamming your keyboard, and a bunch of extra elements should be left there.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 10.15.7\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz\r\n    Memory: 1.35 GB / 32.00 GB\r\n    Shell: 3.2.2 - /usr/local/bin/fish\r\n  Binaries:\r\n    Node: 16.13.1 - /var/folders/gs/3qcm1mc918s08sxvkj6zj2rr0000gp/T/fnm_multishells/87890_1641758181492/bin/node\r\n    Yarn: 1.22.17 - /var/folders/gs/3qcm1mc918s08sxvkj6zj2rr0000gp/T/fnm_multishells/87890_1641758181492/bin/yarn\r\n    npm: 8.1.2 - /var/folders/gs/3qcm1mc918s08sxvkj6zj2rr0000gp/T/fnm_multishells/87890_1641758181492/bin/npm\r\n  Browsers:\r\n    Brave Browser: 96.1.32.106\r\n    Chrome: 96.0.4664.110\r\n    Firefox: 95.0.2\r\n    Safari: 15.2\r\n  npmPackages:\r\n    svelte: ^3.45.0 => 3.45.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-08-07T05:55:33Z","created_at":"2022-01-10T19:16:13Z","creator_user_login":"probablykasper"}
{"number":7101,"title":"Make let: directive illegal when not used with slot","body":"### Describe the bug\n\nCurrently, the compiler will accept `let:` directive on any element, no matter if it makes sense or not.\n\n### Reproduction\n\nhttps://svelte.dev/repl/2a03fe9cfbd843aab96aa13e225dbfcc?version=3.44.3\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-01-05T19:17:22Z","created_at":"2022-01-05T18:29:41Z","creator_user_login":"iacore"}
{"number":7100,"title":"Support for plugins","body":"### Describe the problem\n\nI was considering testing svelte on a project. But it has no support for plugins (other than compilation preprocessors) which I could use to, for example, patch in runtime dependency handling.\r\n\r\n\n\n### Describe the proposed solution\n\nA plugin would require an API for registering hooks globally like synchronous `beforeCreate`, `afterCreate`, `afterDestroy` for doing initializations and cleanup. With that one could integrate runtime state management libraries like mobx and have functions like `watch(handler)` that unregister the handlers when the component is destroyed.\r\nWithout such global hooks one could maybe resort to using an existing instance to add `on_destroy` handlers like `watch(closure, currentInstance)` but it seems the official svelte build refuses to provide an api for that (#5517).\r\n\r\nIn addition a way to integrate observable arrays with template features like `#each` could be helpful.\r\nAnd did I mention JSX For when templates don't cut it?\r\n\r\nBtw, I saw it mentioned somewhere that svelte is just a compiler that can be combined with more serious frameworks like react, angular, ... but I'd like to see how that could be accomplished considering all serious frameworks themselves have components and compilation steps.\n\n### Alternatives considered\n\n-\n\n### Importance\n\ni cannot use svelte without it","state":"open","updated_at":"2022-01-14T23:31:34Z","created_at":"2022-01-05T12:19:04Z","creator_user_login":"brandon942"}
{"number":7099,"title":"bind:offsetWidth and acync css loading bug","body":"### Describe the bug\r\n\r\nHello. I am having a problem with this code:\r\n\r\n```svelte\r\n<div\r\n  class=\"container\"\r\n  bind:offsetWidth={containerWidth}\r\n  bind:offsetHeight={containerHeight}\r\n></div>\r\n\r\n<style>\r\n  .container {\r\n    position: absolute;\r\n  }\r\n</style>\r\n```\r\n\r\nI am loading the css of the component asynchronously:\r\n```html\r\n<link rel=\"preload\" href=\"/build/component.css\" as=\"style\">\r\n<link rel=\"stylesheet\" href=\"/build/component.css\">\r\n```\r\n\r\nAnd so the svelte code below is executed before the css is loaded and sets the unnecessary style `position: relative` and rewrite my style `position: absolute`:\r\n```js\r\nfunction add_resize_listener(node, fn) {\r\n    const computed_style = getComputedStyle(node);\r\n    if (computed_style.position === 'static') {\r\n        node.style.position = 'relative';\r\n    }\r\n```\r\nhttps://github.com/sveltejs/svelte/blob/fc4797c6f84cf299117243e7193bf77d96914e85/src/runtime/internal/dom.ts#L589\r\n\r\nIs it possible to fix it or should I not use asynchronous loading of css, or use `position:absolute!important`?\r\n\r\n\r\n### Reproduction\r\n\r\nI'm not sure if this should be reproduced. It seems that everything is obvious from the description.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-3610QM CPU @ 2.30GHz\r\n    Memory: 1.91 GB / 15.89 GB\r\n  Binaries:\r\n    Node: 14.17.6 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.17 - C:\\Users\\User\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.15 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1023.0), Chromium (96.0.1054.62)\r\n    Internet Explorer: 11.0.19041.906\r\n  npmPackages:\r\n    rollup: ^2.41.2 => 2.60.1\r\n    svelte: ^3.44.3 => 3.44.3\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-01-04T16:57:41Z","created_at":"2022-01-04T16:35:38Z","creator_user_login":"NikolayMakhonin"}
{"number":7096,"title":"Ability to watch object property change","body":"### Describe the problem\n\nI have a list of events \r\n\r\n    let searchedEvents=[] // events array which will be filled with search results later\r\n\r\nWhen this array is populated(with say `n` results), the ui will show `n` forms which user will be able to edit. The first form (`searchedEvents[0]`) edited is supposed to update all other forms(e.g. say there is a field `num` in form 1. If first form's `num` field is updated, all other forms should show same value for this field).\r\n\r\nTo achieve this, I am having an `eventZero = searchedEvents[0]`(and this statement is run whenever `searchedEvents` array is updated. \r\n\r\nThen I am watching this `eventZero.num` like this:\r\n\r\n`$: myWatch(eventZero.num)` \r\n\r\nBut whenever user edits the num field in the form, this does not fire `myWatch`.\r\n\r\nEven watching directly like `$: myWatch(eventZero)` does not work.\r\n\r\nI couldn't find a way to watch an object in svelte. So it would be nice to have.\n\n### Describe the proposed solution\n\nSomething like a vue watcher that allows us to watch an object property change.\n\n### Alternatives considered\n\nNothing much I can think of at this stage. Ability to watch an object property change is something that angular, react and vue all provide, so there is no reason I can think that svelte must not allow this. (Or probably I might be missing how to do it with already existing features).\n\n### Importance\n\ni cannot use svelte without it","state":"open","updated_at":"2023-05-22T22:32:42Z","created_at":"2022-01-03T10:33:08Z","creator_user_login":"rahulserver"}
{"number":7089,"title":"Event-callback shorthand","body":"### Describe the problem\n\nWhen the name of event handler and event itself is same:\r\n`<Component  on:changeNum={changeNum}   />`\n\n### Describe the proposed solution\n\nIs nice to have a shorthand:\r\n`<Component  on: {changeNum}   />`\r\n`<domElem on: {click}   />`\n\n### Alternatives considered\n\nver: 3.44.3\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-01-10T06:06:10Z","created_at":"2022-01-01T13:25:27Z","creator_user_login":"si4-mtg"}
{"number":7085,"title":"Add support for <script context=\"test\"> for writing component tests","body":"### Describe the problem\r\n\r\nTesting does not currently feel like a first-class feature in Svelte, but I believe it should be. One way we could improve this is by adding support for a `test` context within components, which could be run by `svelte-check`. \r\n\r\nOnce tests are written in `.svelte` files, we open up the possibilities of the compiler to make test cases even easier to read and write and integrate directly with our svelte components.\r\n\r\n### Describe the proposed solution\r\n\r\nHere's an example of how a component could look with tests:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let isLoading = false\r\n\texport let disabled = false\r\n\texport let type = \"button\"\r\n</script>\r\n\r\n<template>\r\n\t<button {type} disabled={disabled || isLoading} on:click>\r\n\t\t<slot />\r\n\t</button>\r\n</template>\r\n\r\n<style lang=\"stylus\">\r\n\tbutton {\r\n\t\tbackground: none;\r\n\t\tcolor: var(--color, var(--primary));\r\n\t\tborder: 2px solid var(--color, var(--primary));\r\n\t\tpadding: 8px 16px;\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 16px;\r\n\t\tcursor: pointer;\r\n\t\twidth: var(--width);\r\n\t\tmargin: var(--margin-top) var(--margin-right) var(--margin-bottom) var(--margin-left);\r\n\t\tgrid-area: var(--grid-area);\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tgap: 8px;\r\n\t\t\r\n\t\t&:disabled {\r\n\t\t\tcolor: var(--dark-grey);\r\n\t\t\tborder-color: var(--dark-grey);\r\n\t\t\tcursor: default;\r\n\t\t}\r\n\t}\r\n</style>\r\n\r\n<script context=\"test\">\r\n\timport { render, fireEvent } from \"@testing-library/svelte\"\r\n\r\n        // Svelte could automatically wrap these in `describe(\"<Button />\")`\r\n        \r\n        it(\"renders a button\", async () => {\r\n\t        const { getByRole } = render(Button)\r\n\t        expect(getByRole(\"button\")).toBeInTheDocument()\r\n        })\r\n        \r\n        it(\"fires click event\", async () => {\r\n\t        const { component, getByRole } = render(Button)\r\n\t        const handleClick = jest.fn()\r\n\t        component.$on(\"click\", handleClick)\r\n\t        const button = getByRole(\"button\")\r\n\t        fireEvent.click(button)\r\n\t        expect(handleClick).toHaveBeenCalled()\r\n        })\r\n        \r\n        it(\"is disabled while loading\", async () => {\r\n\t        const { getByRole } = render(Button, { isLoading: true })\r\n\t        expect(getByRole(\"button\")).toHaveAttribute(\"disabled\")\r\n        })\r\n        \r\n        it(\"sets the type attribute\", async () => {\r\n\t        const { getByRole } = render(Button, { type: \"submit\" })\r\n\t        expect(getByRole(\"button\")).toHaveAttribute(\"type\", \"submit\")\r\n        })\r\n        \r\n        it(\"can be disabled\", async () => {\r\n\t        const { getByRole } = render(Button, { disabled: true })\r\n\t        expect(getByRole(\"button\")).toBeDisabled()\r\n        })\r\n</script>\r\n```\r\n\r\n### Alternatives considered\r\n\r\nThe current alternative is to write test cases in `js` or `ts` files, using a test runner like `jest`. \r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2021-12-31T02:18:33Z","created_at":"2021-12-30T20:16:06Z","creator_user_login":"NEO97online"}
{"number":7083,"title":"Store with object doesn't work correctly with checkbox","body":"### Describe the bug\n\nIf I have a store that uses an object, it doesn't bind to a checkbox correctly.\r\n\r\n```\r\n<!--App.svelte-->\r\n<script>\r\n\timport {store} from './store.js'\r\n\t\r\n\t$: $store.checked, console.log('store.checked is', $store.checked), console.log('store.clicked is', $store.clicked)\r\n\t\r\n\tconst handleCheckboxClick = _ => {\r\n\t\t$store.clicked = true\r\n\t}\r\n</script>\r\n\r\n<input type=\"checkbox\" on:click={handleCheckboxClick} bind:checked={$store.checked} />\r\nThis is a checkbox\r\n```\r\n\r\n```\r\n//store.js\r\nimport { writable } from \"svelte/store\";\r\n\r\nexport const store = writable({checked: false, clicked: false}); // set the default values to false\r\n```\r\n\r\nYou can't check/uncheck the checkbox from the original value. Is this expected behaviour?\n\n### Reproduction\n\nhttps://svelte.dev/repl/16f53677136e4a2eac8c0a6065d3ad7d?version=3.44.3\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSee the REPL, not dependent on the system\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-02-08T08:34:09Z","created_at":"2021-12-30T18:40:49Z","creator_user_login":"ianengelbrecht"}
{"number":7082,"title":"[feature] Add `Portal`s to Svelte","body":"### Describe the problem\n\nI'm aware that this discussion has been split across a few issues.  However, none of those issues have been _explicit_ feature requests for portals. Some issues have been closed early, or been distracted from the original topic, or been too narrow (e.g., `<:Body>` tags). Thus, I'm creating this guy to make a central, focused issue around portals (with new thoughts).\r\n\r\nThe problem that this feature would address is the need for _clean_, _well-supported_ `portal`s in `svelte`. I believe @arggh caught most of the common use cases in [their comment on another issue](https://github.com/sveltejs/svelte/issues/4036#issuecomment-562122592), such as modals and popovers. These use cases are pretty common and therefore can't really be ignored.\r\n\r\nI'm aware of other solutions that have spun off from other discussions, such as @ThomasJuster's [solution](https://github.com/sveltejs/svelte/issues/3088#issuecomment-505785516), and the solution that gained inspiration from it: [`svelte-portal`](https://github.com/romkor/svelte-portal). While these solutions are clever, they are still flawed for multiple reasons:\r\n\r\n1. **They pollute the DOM unnecessarily.** Regarding the first solution, it _permanently_ pollutes the DOM unnecessarily. (The wrapping `<div class=\"portal-clone\">` empties its children, but the node still remains). Regarding `svelte-portal`, it _temporarily_ pollutes the DOM unnecessarily. (More accurately, it temporarily renders to an \"_incorrect_\" location in the DOM, then moves the node to the correct location.)\r\n2. As many have pointed out, **the existing solutions are a bit hackish**. They basically render hidden content, move the content, and then unhide the content.\r\n3. Because **the existing approaches** are workarounds/hacks and not native features, **they have their own sets of bugs**. Last month a bug was reported at romkor/svelte-portal#101. It seems that issue may not be addressable.\r\n4. Because **the existing approaches** basically do \"DOM dancing\", **they can run the risk of temporarily creating invalid HTML**. For instance, I'm working on a `form` where people can add items which get rendered to a `table`. Each row of the table is clickable, opening up a modal for editing (this isn't the place to debate table edit approaches). I can circumvent the need for creating state variables by using another form in the modal that \"submits\" (saves) the data. But [nesting `form`s is forbidden](https://developer.mozilla.org/en-US/docs/Learn/Forms/How_to_structure_a_web_form). I know the nested `form` would appear only temporarily with the existing approaches, but that still shouldn't be necessary.\r\n\r\nArguments can be made for workarounds, workarounds, and more workarounds to defer responsibility to devs. (\"Why are you using modal edits for tables?\" \"Is using a `form` to avoid state variables really _that_ advantageous?\" [\"Maybe you can try some tricks with `position: fixed` for modals?\"](https://github.com/sveltejs/svelte/issues/1133#issuecomment-508947411) etc.) But ultimately these workarounds ignore the real question, and they fail because:\r\n\r\n1. They put `svelte` users in an unnecessarily inconvenient situation. (For example, I shouldn't have to create external, self-closing `form` elements and tediously pollute my DOM elements with `form` attributes.)\r\n2. They can't get away from valid [edge cases](https://github.com/sveltejs/svelte/issues/1133#issuecomment-653119003).\r\n\r\nOther well-established frameworks like `React` and `Vue` have supported `portal` features because this is a common, basic use case. `Svelte` would benefit from this as well.\n\n### Describe the proposed solution\n\nA clear new feature like `<svelte:portal to={LOCATION}>CONTENT</svelte:portal>` would be sufficient. This solution should render `CONTENT` _directly_ to the correct `LOCATION`, instead of doing an awkward \"DOM dance\". If it's an unnecessary amount of effort to support selectors [like Vue](https://v3.vuejs.org/guide/teleport.html), it should be sufficient to require explicit DOM Nodes [like React](https://reactjs.org/docs/portals.html). After all, it's easy enough to say `document.getElementById(\"ID\")`, and this would give the user more granular control over what node is used. (I'd probably prefer selectors.)\r\n\r\nThis solution would automatically resolve the request for `<:Body />` tags (#1133). And it has the added bonus of providing flexibility for where the portal sends content.\r\n\r\n---\r\n\r\nI'm aware that @Conduitry has [brought up SSR concerns](https://github.com/sveltejs/svelte/issues/4036#issuecomment-562085797) across a few of these floating issues. I agree with @arggh that ignoring portals would be fine (and even desirable) in SSR.\r\n\r\nOther well-respected frameworks like `Next.js` seem to avoid it altogether. For instance, timneutkens himself [pointed to](https://github.com/vercel/next.js/issues/3493#issuecomment-443732002) the [official example for portals](https://github.com/vercel/next.js/blob/canary/examples/with-portals/components/Modal.js), which still _only runs client-side_. (If the component name wasn't obvious, `useEffect` never runs server-side.) `Nuxt.js 3` is still in beta, so I don't know what they'll do about `teleport`. But I'm assuming it's possible they'll ignore `teleport` too. As has been said previously, most users are expecting to use portals client-side anyway.\n\n### Alternatives considered\n\nThe alternatives I considered were already mentioned in the opening problem statement. However, none of these alternatives seem sufficient on their own.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2023-08-15T14:10:01Z","created_at":"2021-12-30T18:33:56Z","creator_user_login":"ITenthusiasm"}
{"number":7078,"title":"Pure CSS Transition","body":"### Describe the problem\r\n\r\nHi,\r\nis there any built-in way to use pure CSS transition in Svelte?\r\n\r\n### Describe the proposed solution\r\n\r\nSolution in Vue.js: https://v3.vuejs.org/guide/transitions-enterleave.html#transitioning-single-elements-components\r\n\r\n```\r\n<transition name=\"sidebar\">\r\n    <p>hello</p>\r\n</transition>\r\n\r\n<style>\r\n.sidebar-enter-active,\r\n.sidebar-leave-active {\r\n    @apply transition duration-300\r\n}\r\n\r\n.sidebar-enter-from,\r\n.sidebar-leave-to {\r\n    @apply opacity-0 translate-x-36\r\n}\r\n</style>\r\n```\r\n_TailwindCSS_ is used in example.\r\n\r\n### Alternatives considered\r\n\r\n-\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-01-02T03:07:43Z","created_at":"2021-12-30T16:06:41Z","creator_user_login":"honzahana"}
{"number":7072,"title":"\"Cancelling\" a fade transition before it completes makes reactive prop values passed to component incorrect","body":"### Describe the bug\n\nIf a conditional block with a fade transition is removed then added back before the fade completes, the prop values passed to components in the conditional block show old values.\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/e3e147969caa4bcea606100ee49f7897?version=3.44.3\r\nClick the first button. While the conditional block is still fading, click the second button. Notice that the second \"Prop passed count:\" has the wrong value, while everything else shows the right value.\r\n\n\n### Logs\n\n```shell\nrunning Svelte compiler version 3.44.3\n```\n\n\n### System Info\n\n```shell\nWindows, Chrome\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-29T19:08:38Z","created_at":"2021-12-29T19:07:48Z","creator_user_login":"doom-goober"}
{"number":7071,"title":"Interrupting a transition breaks reactivity for nested objects","body":"### Describe the bug\n\nWhen a transition is running, the objects under that transition is not reacting to updates.\r\n\r\n(Severity is annoyance, as it can be worked around)\r\n\n\n### Reproduction\n\nSee\r\nhttps://svelte.dev/repl/a8394ee987714bb1a452574709562ea1?version=3.44.3\r\n\r\nWhen 'Click Me' is pressed, the fade transition is started (as visible flag is turned off).\r\nWhen 'Cancel' is pressed, the visible flag is turned on again, but the nested object has not been updated.\r\nIf fade is allowed to run to the end, and 'Click Me' is pressed again (visible flag is not changed, as it is already off), the nested object is updated, as can be seen in Cancel is pressed to turn on visibility again.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nREPL reproducible, so don't think it's system dependent.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-29T18:51:59Z","created_at":"2021-12-29T18:51:59Z","creator_user_login":"jagenheim"}
{"number":7053,"title":"Allow lazy loading of rendering dependencies on ssr mode","body":"### Describe the problem\n\nSveltekit currently has an issue where components that have dependencies using browser features such as the `window` and `document` objects throw errors during the component module initialization, preventing the framework from checking the component's module exports and deciding whether the component is suitable for server-side rendering.\n\n### Describe the proposed solution\n\nAdding a compiler option to lazily load the dependencies of a component's regular `<script>`, allowing the framework to read the configuration of a page without loading modules that may be incompatible with the current environment.\n\n### Alternatives considered\n\n[Additional configuration options](https://github.com/sveltejs/kit/pull/2529) and [special handler parameters](https://github.com/sveltejs/kit/pull/2804)\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-01-09T18:23:28Z","created_at":"2021-12-26T01:51:05Z","creator_user_login":"JeanJPNM"}
{"number":7045,"title":"object on right side of = operant in reactive statement is updated, when variable on left side is changed by bind:value, while variable doesn't change","body":"### Describe the bug\r\n\r\n```html\r\n<script>\r\n\tlet bar = {a:\"hello\"}\r\n\t$: foo = bar.a;\r\n\t$: console.log(`bar updated ${bar.a}`);\r\n</script>\r\n\r\nbar: <input type=\"text\" bind:value={bar.a}/>\r\n<br>\r\nfoo: <input type=\"text\" bind:value={foo}/>\r\n```\r\n\r\nchange `foo` (type something to input foo), it will update `bar.a`, `foo` is blocked, will not change text in input.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/60487dd8d6f941b3bc2e0d72124a2abb?version=3.44.3\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-01-13T05:11:43Z","created_at":"2021-12-23T14:22:13Z","creator_user_login":"Mlocik97"}
{"number":7044,"title":"...$$props overrides class list","body":"### Describe the bug\r\n\r\nWhen I use the `$$props` to pass every given prop to an element:\r\n\r\n```html\r\n<button class=\"some-class\" {...$$props}></button>\r\n```\r\n\r\nThe element will clear all classes if the elements component state changes which are set via javascript after the component .\r\n\r\n### Reproduction\r\n\r\nUse this REPL https://svelte.dev/repl/23dae347f532427ea77e95192dd6c466?version=3.44.3.\r\n\r\n1. See how both classes are effecting the button (its `color: blue;` and `background: red;`).\r\n2. Click on the button (so the component state is changed)\r\n3. The `.new-class` is not effecting anymore (its removed from the classList of the element).\r\n\r\n### System Info\r\n\r\n```shell\r\nGoogle Chrome Version 96.0.4664.110 (Official Build) (x86_64)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-12-25T11:20:02Z","created_at":"2021-12-23T10:47:49Z","creator_user_login":"tiloio"}
{"number":7040,"title":"More granular control of accessors ","body":"### Describe the problem\n\nI'm currently working on a little component library and I've begun making wrappers around various form elements.\r\n\r\nFor inputs, I want to be able to `bind:value` on my svelte component just like I would on a vanilla `<input />` element, so I add in `<svelte:options accessors />` to allow it.\r\n\r\nHowever this adds getters and setters for every prop, it doesn't cost a great deal on the smaller components with only a few props, but I can see that when I have many components with many props all doing this, it's going to cost a fair amount.\n\n### Describe the proposed solution\n\nI'm unsure what the best approach to this is, I'll leave some ideas below.\r\n\r\n I'd like to have more granular control over which props receive accessors. Ideally some way of informing the compiler exactly which props to give accessors to and to let the rest have no accessors.\n\n### Alternatives considered\n\nHere's where I'm going to list a few ideas I've had.\r\n\r\n#### Use a label\r\n\r\nSvelte has already take the `$:` label to make a reactive statement, maybe there's some other label that could be used for accessors.\r\nThe biggest issue with this is that it immediately kills TypeScript support on those props.\r\n\r\n```ts\r\n$accessor: bar: string = \"bar\";\r\n//           ^ 'string' only refers to a type, but is being used as a value here.ts(2693)\r\n```\r\n\r\nThis is a much bigger issue than it is for reactive statements, as typing props is one of the main reasons to be using TypeScript with Svelte in the first place.\r\n\r\n---\r\n\r\n#### Use some other syntax\r\n\r\n*Maybe* there's some magic to be done with `export default`? It seems like that would be a lot more work than it's worth though.\r\n\r\nBut some other syntax might be much easier to implement. I have no ideas as to what that syntax might look like.\r\n\r\n---\r\n\r\n#### `compileOptions.accessors` accepts a list of props to include\r\n\r\nIn any form, really. Whatever has the best balance of dev experience and ease of implementation.\r\n\r\nHere's some possible options I've come up with\r\n\r\n```jsx\r\n<svelte:options accessors=\"prop1,prop2,prop3\" /> // this one sucks imo\r\n<svelte:options accessors={[\"prop1\", \"prop2\", \"prop3\"]} /> // viable, though difficult to maintain in your components\r\n<svelte:options accessors={[prop1, prop2, prop3]} /> // viable, using the variables would give hinting\r\n<svelte:options accessors={{prop1, prop2, prop3}} /> // my favorite, having an object also provides names and values to the compiler which might be useful\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-01-01T05:51:32Z","created_at":"2021-12-22T13:36:31Z","creator_user_login":"WillsterJohnson"}
{"number":7037,"title":"set_custom_element_data: Cannot use 'in' operator to search for 'item' in undefined","body":"### Describe the bug\r\n\r\nAfter upgrading from 3.44.2 to 3.44.3 one of the components I work on has broken with this error.\r\n\r\nWe use svelte to output custom elements.\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/TommasoAmici/svelte-error\r\n\r\n### Logs\r\n\r\n```shell\r\nUncaught TypeError: Cannot use 'in' operator to search for 'item' in undefined\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/424525/146931291-9bccb921-a4a7-45d1-86cc-b36a8aec8062.png)\r\n\r\n```js\r\nfunction set_custom_element_data(node, prop, value) {\r\n    if (prop in node) {\r\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\r\n    }\r\n    else {\r\n        attr(node, prop, value);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 11.6\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 706.83 MB / 32.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.1 - /usr/local/Cellar/node@16/16.13.1/bin/node\r\n    Yarn: 1.22.17 - /usr/local/bin/yarn\r\n    npm: 8.1.2 - /usr/local/Cellar/node@16/16.13.1/bin/npm\r\n    Watchman: 2021.12.20.00 - /usr/local/bin/watchman\r\n  Browsers:\r\n    Chrome: 96.0.4664.110\r\n    Edge: 96.0.1054.62\r\n    Firefox Developer Edition: 96.0\r\n    Safari: 15.2\r\n    Safari Technology Preview: 15.4\r\n  npmPackages:\r\n    rollup: ^2.61.1 => 2.61.1 \r\n    svelte: ^3.44.3 => 3.44.3\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2023-06-19T10:02:02Z","created_at":"2021-12-21T13:14:08Z","creator_user_login":"TommasoAmici"}
{"number":7036,"title":"Ability to rename events when forwarding","body":"### Describe the problem\r\n\r\nSvelte has an elegant API for forwarding events without much overhead, but there is one feature i would love to see along with the current API: The ability to rename the events when they are forwarded. I often find myself having to add a handler to a forwarded event, only to create a new function where the event is dispatched under a new name. \r\n\r\nThis approach feels very \"heavy\" compared to how lightweight and elegant the event-forwarding API is in Svelte:\r\n\r\n```svelte\r\n<script>\r\nimport { createEventDispatcher } from \"svelte\";\r\n\r\nconst dispatch = createEventDispatcher()\r\n\r\nfunction wrapCommentEvent(e) {\r\n\tdispatch(\"comment-save\", e.detail)\r\n}\r\n\r\nfunction wrapTaskEvent(e) {\r\n\tdispatch(\"task-save\", e.detail)\r\n}\r\n</script>\r\n\r\n\r\n<Comment on:save={wrapCommentEvent} />\r\n<Task on:save={wrapTaskEvent} />\r\n```\r\n\r\nThe reason i need to rename the events is because of contexts. For the comment component, it feels redundant that the original dispatched event would be called \"comment-save\", because the event is dispatched from a Comment-component. The same with the Task-component.\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nHere are some ideas of how the sugar-syntax could look like for renaming forwarding events:\r\n\r\n## 1: Extending the forwarded event\r\n```svelte\r\n<Comment on:save:comment-save/>\r\n<Task on:save:task-save />\r\n```\r\n\r\n## 2: \"Dispatch\" out from the event\r\n```svelte\r\n<Comment on:save^comment-save />\r\n<Task on:save^task-save />\r\n```\r\n\r\n\r\n### Alternatives considered\r\n\r\nAlternatives considered are mostly variations of the setup in the introduction. I haven't found a very elegant solution.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-02-02T18:05:01Z","created_at":"2021-12-21T13:11:44Z","creator_user_login":"MathiasWP"}
{"number":7030,"title":"Await blocks force rerender and break animations","body":"### Describe the bug\n\nissues with await blocks, that i dont remember from the past. If i wrap something in await, then any state change forces a complete remount and breaks any animation\n\n### Reproduction\n\n https://svelte.dev/repl/c934103ff062419687dd6389ac934b26?version=3.44.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nsee repl\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-19T18:08:05Z","created_at":"2021-12-19T18:08:05Z","creator_user_login":"lucidNTR"}
{"number":7021,"title":"Slot Forwarding Reactivity","body":"### Describe the bug\n\nWhen Component A uses a slot from Component B, which forwards the slot to Component C, reactivity breaks if the Component A reassigns a variable that is passed in two separate props to Component B.\r\n\r\nThis is pretty hard to explain abstractly, but is easy to see in the provided reproduction.\r\n\n\n### Reproduction\n\nshows bug instantly (bug automatically triggered in `onMount`): https://svelte.dev/repl/09e21fce26c948258928f17b1545a21b?version=3.44.3\r\n\r\nshows bug on user interaction (clicking the button triggers the bug): https://svelte.dev/repl/e09c2a49a4f344d8b81eb03f9dce251e?version=3.44.3\r\n\r\nThis bug is caused by `App` passing `thing` inside the `things` property as well as reassigning `thing` in the `onOptionsChange` callback property.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 11.2.3\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 56.49 MB / 32.00 GB\r\n    Shell: 5.0.18 - /usr/local/bin/bash\r\n  Binaries:\r\n    Node: 14.17.0 - /usr/local/bin/node\r\n    npm: 6.14.13 - /usr/local/bin/npm\r\n  Browsers:\r\n    Brave Browser: 94.1.30.89\r\n    Chrome: 96.0.4664.110\r\n    Firefox: 94.0.2\r\n    Safari: 14.0.3\r\n  npmPackages:\r\n    svelte: ^3.37.0 => 3.37.0 \r\n    webpack: ^4.44.2 => 4.44.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-01-06T16:04:38Z","created_at":"2021-12-16T19:30:10Z","creator_user_login":"scottgonzalez"}
{"number":7020,"title":"Uncaught TypeError: node.parentNode is null","body":"### Describe the bug\n\nSee: https://github.com/sveltejs/kit/issues/3056\r\n\n\n### Reproduction\n\nCan't save my REPL right now due to: https://github.com/sveltejs/sites/issues/189\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 12.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz\r\n    Memory: 1.34 GB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.13.1 - /usr/local/Cellar/node@16/16.13.1/bin/node\r\n    Yarn: 1.22.17 - /usr/local/bin/yarn\r\n    npm: 8.1.2 - /usr/local/Cellar/node@16/16.13.1/bin/npm\r\n  Browsers:\r\n    Brave Browser: 95.1.31.91\r\n    Chrome: 96.0.4664.110\r\n    Firefox: 95.0\r\n    Safari: 15.2\r\n  npmPackages:\r\n    @sveltejs/kit: ^1.0.0-next.196 => 1.0.0-next.202 \r\n    svelte: ^3.44.2 => 3.44.3\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-16T20:21:42Z","created_at":"2021-12-16T19:27:07Z","creator_user_login":"MarcGodard"}
{"number":7011,"title":"fix: more predictable spring behaviour","body":"Fix for bug described here: https://github.com/sveltejs/svelte/issues/7010\r\n\r\nThe proposed solution is that 'tick' should be added to the spring options. If the elapsed frame time is greater than this, then multiple tick calculations are carried out instead of the usual 1.\r\n\r\nTo prevent the number of rounds of calculations in a frame from increasing high enough to cause high cpu load (principally from when the user switches tab during a spring animation), it is proposed that there should be a configurable 'limit', which sets a limit on the number of ticks calculated per frame.\r\n\r\nAs this issue effects all springs, and is unlikely to cause issues with any existing usage, I think it may be appropriate for this to be the standard behaviour with sensible defaults.\r\n\r\nI don't know if the proposed variable names are appropriate (it is hard to reduce a complex idea to a simple memorable term without losing some nuance.)\r\n\r\nI haven't indented the existing code that should be indented to be in a loop, in order to make the changes clear. I've also not attempted to write any tests until I know that it would be worthwhile. This is my first attempt at submitting a pull request, so please let me know if I'm going about this at all wrong.","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2021-12-13T00:45:57Z","creator_user_login":"robertadamsonsmith"}
{"number":7010,"title":"Erratic spring behaviour","body":"### Describe the bug\n\nIf the time between frames is high (i.e. more than a small fraction of a second), it can cause springs to rapidly jump to unexpectedly large or small values. This creates a poor user experience, and can cause error conditions (such as when it wasn't anticipated that an overdamped spring could overshoot the target.)\r\n\r\nThe time between frames can increase for three main reasons:\r\n\r\n - The computer is under heavy load, and unable to process ticks in a timely fashion\r\n - The svelte app is itself running heavy calculations or a garbage collection cycle is occurring which temporarily blocks the thread\r\n - The user switches tab while a spring is running, and then returns to the tab at some point\r\n\r\nI've experienced all 3 cases, and this effects all uses of springs to varying extents.\r\n\r\n(I will submit a pull request separately that is intended to fix this)\n\n### Reproduction\n\nhttps://svelte.dev/repl/8a52664675434394899f3e58d8f542a3?version=3.44.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-4670K CPU @ 3.40GHz\r\n    Memory: 6.92 GB / 15.93 GB\r\n  Binaries:\r\n    Node: 16.0.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.13.0 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 7.10.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1266.0), Chromium (96.0.1054.53)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.61.0\r\n    svelte: C:/Projects/svelte => 3.44.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-13T00:20:41Z","created_at":"2021-12-13T00:20:41Z","creator_user_login":"robertadamsonsmith"}
{"number":7009,"title":"Exploring the use of the CSS `contain` property to reduce layout rendering times","body":"### Describe the problem\r\n\r\nI was just recently made aware of the CSS `contain` property after it was added to the new Safari TP (136). It helps reduce layout rendering times when changing styles by containing the \"layout\" event to smaller portions of the page. the[ MDN docs ](https://developer.mozilla.org/en-US/docs/Web/CSS/contain) explain it quite well:\r\n\r\n> The contain CSS property allows an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. This allows the browser to recalculate layout, style, paint, size, or any combination of them for a limited area of the DOM and not the entire page, leading to obvious performance benefits.\r\n\r\nI've found [an article](https://css-tricks.com/lets-take-a-deep-dive-into-the-css-contain-property/#performance-benefits) showing some pretty significant performance improvements. From 28ms to 14ms going from `none` to `strict`.\r\n\r\n### Describe the proposed solution\r\n\r\nIt would be neat if Svelte could somehow do this automatically somehow. Maybe a compiler option that lets you turn on aggressively adding the property to elements inside of components or even wrapping them using the same solution we're using for custom CSS properties.\r\n\r\n### Alternatives considered\r\n\r\nDoing it manually.\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2021-12-15T01:20:56Z","created_at":"2021-12-12T09:37:14Z","creator_user_login":"kevmodrome"}
{"number":7003,"title":"Advanced page and component animations","body":"### Describe the problem\r\n\r\nI've been using Svelte for a couple of weeks and really love it. I'm mainly working on animated and highly interactive experiences and I bumped into a couple of \"problems\" with Svelte here:\r\nI'm used to having control over all the elements in the DOM, no matter if its the page itself or it's children. Svelte's transition and animation possibilities are great but in my opinion lacks a bit if you want more control then just animating a page/component DOM node's in and out. \r\n- How can I control how components animate/behave when their parent page is animating out\r\n- How can I access the page component itself during transition, for example to tell it to stop a certain action\r\n\r\nThis is the only way for example I was able to not have the page jump on pagechange (using sveltekit) and it feels quite hacky...\r\n\r\n// Pagetransition.svelte\r\n\r\n```svelte\r\n<script>\r\n\timport { fly } from 'svelte/transition';\r\n\texport let refresh = '';\r\n\tlet scrollY = 0;\r\n\r\n\tlet prevScrollY = 0;\r\n\tlet toScroll = 0;\r\n\r\n\t$: {\r\n\t\ttoScroll = 0;\r\n\t\tif (refresh === '/') {\r\n\t\t\ttoScroll = prevScrollY;\r\n\t\t\tprevScrollY = 0;\r\n\t\t} else if (refresh.includes('products')) {\r\n\t\t\tstoreScroll();\r\n\t\t} else {\r\n\t\t\tprevScrollY = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction storeScroll() {\r\n\t\tprevScrollY = scrollY;\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:scrollY />\r\n\r\n{#key refresh}\r\n\t<div\r\n\t\tin:fly={{ y: 5, duration: 1000, delay: 400 }}\r\n\t\tout:fly={{ y: 5, duration: 500 }}\r\n\t\ton:introstart={(event) => {\r\n\t\t\t// 'intro started';\r\n\t\t\tevent.target.style.position = null;\r\n\t\t\tevent.target.style.top = null;\r\n\t\t\tevent.target.style.left = null;\r\n\t\t\tevent.target.style.right = null;\r\n\r\n\t\t\twindow.scrollTo(0, toScroll);\r\n\t\t}}\r\n\t\ton:outrostart={(event) => {\r\n\t\t\t// 'outro started';\r\n\t\t\tevent.target.style.position = 'fixed';\r\n\t\t\tevent.target.style.top = -scrollY + 'px';\r\n\t\t\tevent.target.style.left = 0 + 'px';\r\n\t\t\tevent.target.style.right = 0 + 'px';\r\n\t\t\t// scrollY = 0;\r\n\t\t}}\r\n\t\ton:introend={() => {\r\n\t\t\t// 'intro ended'\r\n\t\t}}\r\n\t\ton:outroend={(event) => {\r\n\t\t\t// 'outro ended';\r\n\t\t\tevent.target.style.position = null;\r\n\t\t\tevent.target.style.top = null;\r\n\t\t\tevent.target.style.left = null;\r\n\t\t\tevent.target.style.right = null;\r\n\t\t}}\r\n\t>\r\n\t\t<slot />\r\n\t</div>\r\n{/key}\r\n```\r\n\r\n### Describe the proposed solution\r\n\r\nI'm not sure what the best approach in Svelte would be, but what could be great is calling specific hooks/functions within the transitioning/animating component: something like onIntroStart, onIntroEnd,...  a bit like on:introstart, on:introend which already exist on the parent level for the transitions, but you can't access or trigger anything within the component, it's purely accessing the top level node from the outside.\r\nI think it's good not to have to use these all the time, but I would love to have full control over how every element behaves during a transition.\r\nIt could be hooks/functions like described above with a done callback, which tells the component \"your ready to be detached/unmounted\" now.\r\n\r\n### Alternatives considered\r\n\r\nIt's hard for me to figure out an alternative as I don't know what Svelte does under the hood, but any way to have full control and access to the components transition states and children would be great.\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2021-12-09T13:04:06Z","created_at":"2021-12-09T09:06:02Z","creator_user_login":"benbesen"}
{"number":7001,"title":"afterUpdate callbacks fire in different order in onMount vs later updates","body":"### Describe the bug\r\n\r\nWhile working on https://github.com/sveltejs/svelte/pull/6920, I discovered that the order of calling `afterUpdate` callbacks is inconsistent. During initial component mounting, `afterUpdate` callbacks from child components will be called before `afterUpdate` callbacks from parent components. But during updates that happen after mounting (e.g., adding 1 to a count variable), the `afterUpdate` callbacks from parent components are called first, then `afterUpdate` callbacks from child components are called later.\r\n\r\nThis may or may not be intended behavior, but it seems strange to me that the callback order is different at mount time vs. when \"regular\" updates happen.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/4b285f9150ed4812a7205291e10b3b86?version=3.44.2\r\n\r\nExpected:\r\n\r\n```text\r\n\"Registering callbacks in parent\"\r\n\"Parent beforeUpdate, count is 0\"\r\n\"Registering callbacks in child #1\"\r\n\"Child #1 beforeUpdate, count is 0\"\r\n\"Registering callbacks in child #2\"\r\n\"Child #2 beforeUpdate, count is 0\"\r\n\"Child #1 onMount\"\r\n\"Child #1 afterUpdate, count is 0\"\r\n\"Child #2 onMount\"\r\n\"Child #2 afterUpdate, count is 0\"\r\n\"Parent onMount\"\r\n\"Parent afterUpdate, count is 0\"\r\n(At this point I clicked the \"Add 1 to count\" button)\r\n\"Parent beforeUpdate, count is 1\"\r\n\"Child #1 beforeUpdate, count is 1\"\r\n\"Child #2 beforeUpdate, count is 1\"\r\n\"Child #1 afterUpdate, count is 1\"\r\n\"Child #2 afterUpdate, count is 1\"\r\n\"Parent afterUpdate, count is 1\"\r\n```\r\n\r\nActual: almost identical to what I expected to see, except for the last three lines, which were:\r\n\r\n```text\r\n\"Parent afterUpdate, count is 1\"\r\n\"Child #1 afterUpdate, count is 1\"\r\n\"Child #2 afterUpdate, count is 1\"\r\n```\r\n\r\nSee Logs section below for the full logs from the Svelte REPL console.\r\n\r\n### Logs\r\n\r\n```text\r\n\"Registering callbacks in parent\"\r\n\"Parent beforeUpdate, count is 0\"\r\n\"Registering callbacks in child #1\"\r\n\"Child #1 beforeUpdate, count is 0\"\r\n\"Registering callbacks in child #2\"\r\n\"Child #2 beforeUpdate, count is 0\"\r\n\"Child #1 onMount\"\r\n\"Child #1 afterUpdate, count is 0\"\r\n\"Child #2 onMount\"\r\n\"Child #2 afterUpdate, count is 0\"\r\n\"Parent onMount\"\r\n\"Parent afterUpdate, count is 0\"\r\n(At this point I clicked the \"Add 1 to count\" button)\r\n\"Parent beforeUpdate, count is 1\"\r\n\"Child #1 beforeUpdate, count is 1\"\r\n\"Child #2 beforeUpdate, count is 1\"\r\n\"Parent afterUpdate, count is 1\"\r\n\"Child #1 afterUpdate, count is 1\"\r\n\"Child #2 afterUpdate, count is 1\"\r\n```\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL. Svelte version 3.44.2.\r\n```\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-12-09T04:26:24Z","created_at":"2021-12-09T03:50:21Z","creator_user_login":"rmunn"}
{"number":6998,"title":"bind does not work with actions in Firefox","body":"### Describe the bug\r\n\r\nWhen using an action on an input component in Firefox, where the input component has a bound value, the value does not properly get set.\r\n\r\nEdit: ITenthusiasm has noticed the issue is due to position of the `bind:` and `use:` attributes.\r\n\r\nDoes not work:\r\n```\r\n<input bind:value use:format={cardNumber} maxlength=\"19\" />\r\n```\r\n\r\nWorks:\r\n```\r\n<input use:format={cardNumber} bind:value maxlength=\"19\" />\r\n```\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/5c1abf5d24c94960a267124662e11a8d?version=3.44.2\r\n\r\nTo replicate the issue:\r\n* Load FireFox (works OK on Chrome and Safari) and go to https://svelte.dev/repl/5c1abf5d24c94960a267124662e11a8d?version=3.44.2\r\n* Move the `bind:value` attribute to be the first attribute in the `<input>` markup.\r\n* Type in some alphabetic letters in the input box. Note that they do appear.\r\n* Move the `bind:value` attribute back to the original position, after the `use:`\r\n* Type in some alphabetic letters in the input box. The letters no longer appear, as expected.\r\n\r\nPlease note I did not write this code. It was part of a Twitter thread. I also did not find the issue listed on GitHub. Please close if a duplicate.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\nBug is reproducible on Firefox for Mac. It works properly on Chrome and Safari. I did not test with Windows or Linux. \r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-12-14T14:06:02Z","created_at":"2021-12-08T06:08:13Z","creator_user_login":"BryIsTheGuy"}
{"number":6997,"title":"[Site]: Explain How to Format Inputs in the Tutorials","body":"### Describe the problem\n\nIt's not readily apparent from the docs how to format `input`s (at least not for beginners). This can be a significant source of frustration/confusion. I think this is especially true for devs coming from other frameworks, where people are used to easily forcing inputs to adhere to state variables.\r\n\r\nI've spent a good few hours between days trying to figure out how to make a money-formatted `input` element in `Svelte`. I almost opened a new issue in ignorance asking for one-way data-binding from `state` to `element` (like in React for `input`s) until I saw #6197, and then saw Rich mention masking in #2446.\n\n### Describe the proposed solution\n\nI believe the `Tutorials` would benefit greatly from a brief explanation on this. Intuitively, when I was trying to figure out how to format my `input`s, I searched the part of the tutorials that talked about inputs. Perhaps a new section could be added called `Formatted Inputs` or `Masked Inputs`. I know this is under the `binding`s section, but since it relates to `binding` and to the order of directives, I think this is a proper location.\r\n\r\nWhatever comments are made, the markup would probably include something like\r\n```html\r\n<input type=\"text\" on:input={handleInput} bind:value={value} />\r\n```\r\n\r\nwith the script being something like\r\n\r\n```js\r\nlet value;\r\n\r\nfunction handleInput(event) {\r\n  if (someConditionIsMet) {\r\n    value = event.target.value; // or event.currentTarget.value\r\n    // Maybe also apply formatting\r\n    return;\r\n  }\r\n\r\n  // Do not change the input's value if condition is not met\r\n  event.target.value = value;\r\n}\r\n```\n\n### Alternatives considered\n\nAlternatively, something like `action`s could be used in the tutorial... which might influence the location of this section. The important thing to me would be whatever makes things clearer/easier. I would think that the previous approach would require less of an established foundation for beginners.\r\n\r\nThis information could also be placed somewhere outside of the docs. But it would be great to have some kind of clear base example easily accessible for all people.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-02-04T19:09:00Z","created_at":"2021-12-07T13:32:10Z","creator_user_login":"ITenthusiasm"}
{"number":6979,"title":"When use slot, #key directive and  transition together  transition|local doesn't work","body":"### Describe the bug\r\n\r\nI've wrapped `Container` in `key` directive in order to re-render it under certain condition and passed element with `transition:fade|local` in the slot. Tried to place span  in another `.svelte` component and expected, that `local` transition would't be affected by parent's behaviour, but the glitch is still there.\r\n\r\nIt seems like the new instance of a component because of key has already been rendered, but the old one is still there, because of it has been hold by the transition\r\n\r\n```\r\n{#key key}\r\n  <Container>\r\n\t  <span transition:fade|local>\r\n\t\t  Error example\r\n\t  </span>\r\n  </Container>\r\n{/key}\t\r\n```\r\n\r\n\r\n![ezgif-6-7d0a1b46fe63](https://user-images.githubusercontent.com/37497663/144438129-1e422e34-07ac-485e-8789-351cbdbbd99e.gif)\r\n\r\n### Reproduction\r\n\r\nHere is a reproduction:\r\n\r\nhttps://svelte.dev/repl/f5de3baa974f4d4bb8f830e1e0b59e63?version=3.44.2\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nnope\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-12-11T17:07:56Z","created_at":"2021-12-02T14:11:23Z","creator_user_login":"MrWaip"}
{"number":6972,"title":"Introduce `<style module>` — update: `forward` directive","body":"_Also see [the update](https://github.com/sveltejs/svelte/issues/6972#issuecomment-1371679372)_\r\n\r\n### Describe the problem\r\n\r\nCurrently, Svelte's default mechanism for handling scoped styles is limited in many ways, and literally dozens if not hundreds of issues have been created over the years complaining about different aspects of it. One thing that stands out however, is the inability to pass down scoped classes to child components.\r\n\r\nHere are just a number of issues surrounding this:\r\n- https://github.com/sveltejs/svelte/issues/2870\r\n- https://github.com/sveltejs/svelte/pull/2888\r\n- https://github.com/sveltejs/svelte/issues/4843\r\n- https://github.com/sveltejs/svelte/issues/4281\r\n- https://github.com/sveltejs/rfcs/pull/22\r\n\r\nStack Overflow questions:\r\n- https://stackoverflow.com/questions/62903705/style-children-from-parent-using-a-class\r\n- https://stackoverflow.com/questions/67049219/class-styling-on-a-custom-component-in-svelte-does-not-register\r\n\r\nSome notable comments that beautifully describe this problem:\r\n- https://github.com/sveltejs/svelte/pull/2888#issuecomment-554782656\r\n- https://github.com/sveltejs/rfcs/pull/13#issuecomment-653936666\r\n- https://github.com/sveltejs/svelte/pull/2888#issuecomment-554768219\r\n- https://github.com/sveltejs/svelte/pull/2888#issuecomment-569168419\r\n- https://github.com/sveltejs/svelte/pull/2888#issuecomment-586576769\r\n- https://github.com/sveltejs/svelte/issues/2870#issuecomment-496023106\r\n- https://github.com/sveltejs/svelte/issues/2870#issuecomment-497237943\r\n- https://github.com/sveltejs/svelte/issues/2870#issuecomment-1161082065\r\n\r\nArguably, the biggest pain point right now when it comes to Svelte's scoped styling is precisely this, namely the inability to send scoped classes down to child components, and this is a big deal.\r\nThis is something that has made me (and I'm pretty sure many others) seriously consider using Vue (although I love other aspects of Svelte too much I can't bring myself to do that), so this isn't trivial, and the workarounds are almost universally terrible.\r\n\r\nThere's an argument that has been repeatedly made by some (which has also been consistently downvoted by users, the number of thumbs-downs on those comments is very telling) claiming that this would break encapsulation. This is a horrible argument, if you have this in mind, I refer you to the comments I linked above, please take some time to read those and reflect. They debunk this myth eloquently. I'm not going to boringly reiterate what's already been said and discussed ad nauseam; instead, I'm going to focus on the solution I think would solve the aforementioned shortcomings.\r\n\r\n### Describe the proposed solution\r\n\r\nI would propose Svelte add a feature that [Vue has had for some time](https://v3.vuejs.org/api/sfc-style.html#style-module), namely `<style module>`, which solves nearly all of those problems that users have been suffering over for years now in the Svelte community.\r\nNote that this would be an opt-in feature, meaning that it would be entirely backward-compatible and optional.\r\n\r\n```svelte\r\n<script>\r\n    import Icon from './Icon.svelte';\r\n</script>\r\n\r\n<button class={$$styles.button}>\r\n    <!-- This is a component that receives a \"class\" prop and adds the classes to the root element: -->\r\n    <Icon class={$$styles.icon} />\r\n    <slot />\r\n</button>\r\n\r\n<style module>\r\n    .button {\r\n        /* styles */\r\n    }\r\n    .icon {\r\n        /* styles */\r\n    }\r\n</style>\r\n```\r\n\r\nNote the special `$$styles` variables, this fits Svelte's syntax neatly as we already have things like `$$props`, `$$slots`, etc. The name could be anything, `$$classes` is another option, `$$styles` is just similar to what Vue uses (`$styles`). See [this in Vue docs](https://v3.vuejs.org/api/sfc-style.html#style-module).\r\n\r\nThe other important bit here is that this only works with classes (and also animation names., for that matter), complying with the [CSS Modules specs](https://github.com/css-modules/css-modules). So any other selectors (e.g. element selectors, IDs, attribute selectors) will be left untouched (or could cause an error, we can decide on this later), and will also not be included in `$$styles`.\r\n\r\nThis would give developers the freedom that's currently lacking, it:\r\n- Enables developers to pass down scoped classes to child components. **(FINALLY!)**\r\n- Requires no special treatment for the `class` prop on components - which was the solution most people were suggesting to solve the problem mentioned above, but this was consistently opposed by the maintainers.\r\n\r\n### Alternatives considered\r\n\r\nCurrently, I and many others have had to ditch Svelte's scoped styles entirely because of this limitation.\r\n\r\nThe alternative approach I've personally taken is I'm essentially using [BEM naming](http://getbem.com/naming/) and always making the styles global, this of course works, but obviously I'm deprived of all the advantages of using scoped styles. and I also have to deal with name clashes and stuff all over again. So it's a huge bummer to have to do this.\r\n\r\nI also want to ask you guys not to dismiss this proposal out of hand, please consider the fact that the problem this intends to solve is a real one, which has affected countless users, and you can tell by simply looking at the sheer number of issues created over the years surrounding this very topic.\r\nThe problem we're solving here is by no means uncommon or niche, and it's already been solved in other popular frameworks like Vue and React for years, so it must be taken with due seriousness, in my opinion. The current Svelte CSS scoping mechanism is effectively unusable for many people and projects precisely because of this particular limitation.\r\n\r\nAs I mentioned above, the solution I'm proposing is not a breaking change, as it doesn't intend to modify the current behavior of scoped styles, which means it won't interfere with the workflow of the users who are already using the default scoped styles. They can continue to do so if so they wish. So this is a big pro as well. As far as I've seen, most proposals addressing this problem involves some form of a breaking-change.\r\n\r\nWould love to know your thoughts and opinions on this.\r\nThank you in advance.\r\n\r\n### Importance\r\n\r\ncrucial, big pain point","state":"open","updated_at":"2023-09-03T10:30:54Z","created_at":"2021-12-01T13:49:20Z","creator_user_login":"aradalvand"}
{"number":6971,"title":"Boolean attributes passed from $$props are not removed.","body":"### Describe the bug\n\nWhen using boolean attributes, like readonly from $$props. svelte doesn't remove the property.\n\n### Reproduction\n\nhttps://svelte.dev/repl/1c5a54ece6c94c66a73faa110a28478d?version=3.44.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nnpx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers\r\n\r\n  System:\r\n    OS: Linux 5.15 Debian GNU/Linux bookworm/sid\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz\r\n    Memory: 31.58 GB / 46.73 GB\r\n    Container: Yes\r\n    Shell: 5.1.12 - /bin/bash\r\n  Binaries:\r\n    Node: 17.1.0 - ~/.nvm/versions/node/v17.1.0/bin/node\r\n    npm: 8.1.2 - ~/.nvm/versions/node/v17.1.0/bin/npm\r\n  Browsers:\r\n    Brave Browser: 96.1.32.113\r\n    Firefox: 94.0.2\r\n  npmPackages:\r\n    svelte: ^3.42.6 => 3.44.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-01T14:11:01Z","created_at":"2021-12-01T13:16:49Z","creator_user_login":"dxlbnl"}
{"number":6967,"title":"<iframe on:load> does not trigger in all browsers","body":"### Describe the bug\r\n\r\niframes should trigger the [onload event](https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload) when they are finished loading, however in at least some browsers, an event handler for that event fails to trigger.\r\n\r\nI have tested the following configurations:\r\n\r\n- Linux, Firefox, Svelte: works\r\n- Linux, Chromium, Svelte: doesn't work\r\n- Linux, Firefox, SvelteKit: doesn't work\r\n- Linux, Chromium, SvelteKit: doesn't work\r\n\r\nThe results were the same using `npm run dev` and `npm run start`/`npm run preview`, and also in the Svelte REPL.\r\n\r\nI'm holding back on also reporting in the SvelteKit repo, as I was able to reproduce this using Svelte only in at least one case - let me know if I should create an issue there too.\r\n\r\n### Reproduction\r\n\r\nCreate a new Svelte(Kit) project (or skip this and paste the file contents below into a REPL):\r\n\r\n```bash\r\nnpx degit sveltejs/template my-svelte-project\r\ncd my-svelte-project\r\n# or\r\nnpm init svelte@next my-sveltekit-project\r\ncd my-sveltekit-project\r\n\r\nnpm i\r\n```\r\n\r\nReplace the contents of `src/App.svelte`/`src/routes/index.svelte` with the following:\r\n\r\n```svelte\r\n<iframe on:load={() => console.log(\"iframe loaded\")} />\r\n```\r\n\r\nRun using `npm run dev` or do a full build; open the site in a browser. Not all browsers show \"iframe loaded\" in the console.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.11 Ubuntu 20.04.3 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\r\n    Memory: 965.66 MB / 15.35 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.6.1 - ~/.nvm/versions/node/v16.6.1/bin/node\r\n    npm: 8.1.4 - ~/.nvm/versions/node/v16.6.1/bin/npm\r\n  Browsers:\r\n    Chromium: 96.0.4664.45\r\n    Firefox: 94.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.60.1 \r\n    svelte: ^3.0.0 => 3.44.2 \r\n  npmPackages - SvelteKit version:\r\n    @sveltejs/adapter-auto: next => 1.0.0-next.3 \r\n    @sveltejs/kit: next => 1.0.0-next.201 \r\n    svelte: ^3.44.0 => 3.44.2 \r\n```\r\n\r\nREPL: `running Svelte compiler version 3.44.2`\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-07-07T06:00:26Z","created_at":"2021-11-29T17:29:00Z","creator_user_login":"SillyFreak"}
{"number":6960,"title":"Custom binding handlers - bind|commaSeparatedDecimal:value - bind|commaSeparatedTags:value - etc","body":"### Describe the problem\n\nCurrently we can use inpút type number to bind to decimal numbers but browser support is inconsistent regarding different locales and decimal separators.\n\n### Describe the proposed solution\n\nIt would be nice to be able to customize the binding process using custom binding handlers as shown below:\r\n\r\n<input type=\"text\" bind|commaSeparatedDecimal:value={someDecimalNumber} />\r\n\r\nThe (two way) binding handler should be able to check the element kind (html input, svelte component, etc), attach event handlers to limit allowed characters and provide formatting as well.\r\n\r\nThis could be useful in many other scenarios:\r\n\r\n<input type=\"text\" bind|commaSeparatedTags:value={tagsArray} />\n\n### Alternatives considered\n\nI thing the current alternative is to use a different property for the binding, but I might be wrong.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2021-11-24T11:51:16Z","created_at":"2021-11-24T11:43:11Z","creator_user_login":"agrinei"}
{"number":6955,"title":"Setting currentTime for video element not always working while playing (on Firefox)","body":"### Describe the bug\n\nThere seems to be a race condition when setting currentTime while it is binded\n\n### Reproduction\n\nUse firefox then try to seek while the video is playing. Try to seek multiple times as it might work some of the time.\r\n\r\nhttps://svelte.dev/repl/0487f38a3e7c491983ba97b039f1b674?version=3.44.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n3.44.2\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-10-13T02:47:40Z","created_at":"2021-11-22T18:12:17Z","creator_user_login":"lazarcf"}
{"number":6942,"title":"Allow directives (actions/transitions/animations) to be more dynamic","body":"### Describe the problem\n\nSvelte encourages reactivity at many levels, but when it comes to actions, transitions, or animations, it's rather static:\r\n- you are not allowed to swap out one directive for another at runtime. Doesn't work for actions, does work for transitions/animations only when they are not rendered\r\n- you can't conditionally apply a directive by setting it to undefined; it will throw a runtime error\r\n- attributes are not always updated, related to #3633\r\n\n\n### Describe the proposed solution\n\nSupport swapping out directives\n\n### Alternatives considered\n\nWorkaround code involving `#if`s\n\n### Importance\n\nnice to have","state":"open","updated_at":"2023-08-28T05:48:39Z","created_at":"2021-11-19T17:12:12Z","creator_user_login":"dummdidumm"}
{"number":6932,"title":"Allow scoped IDs equivalent to scoped classnames","body":"### Describe the problem\n\nLike class names, IDs are global in vanilla HTML, which is fundamentally at odds with a component-based way of writing code. Compliant HTML code with labels, for example, is supposed to use matching ids on the for= attribute of the label and the id= attribute of the input.\r\n\r\nIdeally, one could write a labelled input component like this in svelte:\r\n```\r\n<div>\r\n<label for=\"text-input\"><slot/></label>\r\n<input id=\"text-input\">\r\n</div>\r\n```\r\n\r\nUnfortunately, if you use more than one instance of this component, it will break, so svelte-users have to roll-their-own ID generating solution to insure IDs do not conflict.\r\n\r\nCurrently, I believe the recommended solution is something like this:\r\n```\r\n<script context=\"module\">\r\n   let counter = 0\r\n</script>\r\n<script>\r\n  counter += 1;\r\n  let id = 'text-input-'+counter\r\n</script>\r\n<div>\r\n  <label for={id}><slot/></label>\r\n  <input id={id}>\r\n</div>\r\n```\r\nThat's a lot of boilerplate just to create a label and an input, and it's still fragile code since there remains the potential for id-collision with other components. What's more, it requires using a module-level script, which is a somewhat advanced feature of svelte, to accomplish a simple task required in just about any forms-based app.\n\n### Describe the proposed solution\n\nIdeally, id= and for= attributes would work in a scoped way out of the box, just as classes do.\r\n\r\n```\r\n<div>\r\n  <label for=\"text-input\"><slot/></label>\r\n  <input id=\"text-input\">\r\n</div>\r\n```\r\nWould generate code with hashed prefixes added to id= and for= attributes automatically.\r\n```\r\n<!-- output -->\r\n<div>\r\n  <label for=\"svelte-e9wl34-text-input\"><slot/></label>\r\n  <input id=\"svelte-e9wl34-text-input\">\r\n</div>\r\n```\r\n\r\nThat would then require syntax to allow global values to be used when wanted, like so:\r\n```\r\n<div>\r\n  <label for|global=\"text-input\"><slot/></label>\r\n  <input id|global=\"text-input\">\r\n</div>\r\n```\r\nGenerates code *without* hashed prefixes added.\r\n```\r\n<!-- output -->\r\n<div>\r\n  <label for=\"text-input\"><slot/></label>\r\n  <input id=\"text-input\">\r\n</div>\r\n```\n\n### Alternatives considered\n\n## Require special syntax to use scoped IDs\r\nThe above solution would be a breaking change. To avoid a breaking change, we could instead introduce a syntax for specifying local IDs. This would leave all existing code alone, but would mean that working with ids and classes would feel different.\r\n\r\n```\r\n<div>\r\n  <label for|local=\"text-input\"><slot/></label>\r\n  <input id|local=\"text-input\">\r\n</div>\r\n```\r\n\r\n\r\n## Provide some utility functions for generating IDs on the fly securely\r\n```\r\n<script>\r\n   import {generateId} from 'svelte/future-magic';\r\n</script>\r\n<div>\r\n  <label for={generateId(\"text-input\")}><slot/></label>\r\n  <input id={generateId(\"text-input\")}>\r\n</div>\r\n```\r\n\r\nThis one is easy to do project-by-project if need be, so it would just be a convenience to add it to svelte. It doesn't feel nearly as elegant as building it into the syntax. That said, it would still be nice to standardize a way to do this and to implement it in a way that would prevent collisions between component libraries in the future.\r\n\n\n### Importance\n\nnice to have","state":"open","updated_at":"2021-11-16T13:32:09Z","created_at":"2021-11-15T15:40:09Z","creator_user_login":"thinkle"}
{"number":6928,"title":"feat: `class` directive on `<svelte:body>`","body":"Closes #3105\r\n\r\nSupports ``class`` directive on ``<svelte:body>``. The following works:\r\n\r\n```svelte\r\n<script>\r\n  let one = false;\r\n</script>\r\n\r\n<button on:click={e => one = !one}>Toggle one</button>\r\n\r\n<svelte:body class:one />\r\n\r\n<style>\r\n  :global(.one) {\r\n    background: black;\r\n  }\r\n</style>\r\n```\r\n\r\nNote that the class is global. Without ``:global`` the compiler will produce a warning.\r\n\r\nP/S: Codes are copied from ``src\\compiler\\compile\\render_dom\\wrappers\\Element\\index.ts`` 😋\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2021-11-14T16:31:07Z","creator_user_login":"andirady"}
{"number":6923,"title":"ParseError: Unexpected end of input","body":"### Describe the bug\r\n\r\nCompilation error `ParseError: Unexpected end of input` happens when you have a Svelte component with the following contents:\r\n\r\n```\r\n<script lang=\"ts\">\r\n\timport '../app.css';\r\n</script>\r\n\r\n<!-- <style lang=\"scss\"> -->\r\n<style>\r\n    /* :global {\r\n\t\t@import './lib/shared/drawer/Drawer.css';\r\n\t} */\r\n\r\n\t:global(body) {\r\n\t\tpadding: 1rem;\r\n\t}\r\n\r\n</style>\r\n```\r\n\r\nThe issue here is the commented line `<!-- style lang=\"scss\"> -->`. If this line is removed compilation error is gone.\r\n\r\nI often comment out parts of markup when working and continously run into this issue.\r\n\r\n### Reproduction\r\n\r\n<script lang=\"ts\">\r\n\timport '../app.css';\r\n</script>\r\n\r\n<!-- <style lang=\"scss\"> -->\r\n<style>\r\n\t:global(body) {\r\n\t\tpadding: 1rem;\r\n\t}\r\n\r\n</style>\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (8) ia32 Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\r\n    Memory: 3.61 GB / 15.78 GB\r\n  Binaries:\r\n    Node: 14.17.0 - C:\\Program Files (x86)\\nodejs\\node.EXE\r\n    npm: 7.22.0 - C:\\Program Files (x86)\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 95.0.4638.69\r\n    Edge: Spartan (44.19041.1266.0), Chromium (95.0.1020.44)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    svelte: ^3.43.1 => 3.43.1\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-01-23T17:08:49Z","created_at":"2021-11-13T08:33:33Z","creator_user_login":"brgrz"}
{"number":6914,"title":"Cursor jumps to end in search box in Safari","body":"### Describe the bug\n\nThe cursor in a search box (`input[type=\"search\"]`) with a two-way value binding jumps to the end when typing in Safari.  I don't know my way around the Svelte code base, but looking at previous cursor issues, I think `'search`' would have to be added to the `if` condition [here](https://github.com/sveltejs/svelte/blob/fc4797c6f84cf299117243e7193bf77d96914e85/src/compiler/compile/render_dom/wrappers/Element/Attribute.ts#L207).\n\n### Reproduction\n\n```svelte\r\n<script>\r\n  let foo: string = '';\r\n</script>\r\n\r\n<input type=\"search\" bind:value={foo}>\r\n```\r\n\r\nhttps://svelte.dev/repl/ede78dee46f74e088fcc07241a389363?version=3.44.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nn/a\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-07-25T12:02:04Z","created_at":"2021-11-10T08:11:47Z","creator_user_login":"layday"}
{"number":6890,"title":"Trojan Source Attack checks","body":"### Describe the problem\r\n\r\nI just discovered this and it looks like a potential attack vector.\r\n\r\nA TLDR is something along the lines of using unicode characters to reorder source tokens enabling the attacker to \"say\" one thing but execute something else. More here: https://www.trojansource.codes\r\n\r\nSelected the highest priority importance, not entirely sure that one makes sense though :shrug\r\n\r\n### Describe the proposed solution\r\n\r\nQuoting the Trojan Codes website:\r\n\r\n> Compilers, interpreters, and build pipelines supporting Unicode should throw errors or warnings for unterminated bidirectional control characters in comments or string literals, and for identifiers with mixed-script confusable characters.\r\n\r\n### Alternatives considered\r\n\r\nI am not 100% this is an issue, maybe someone more knowledgable can chime in?\r\n\r\n### Importance\r\n\r\ni cannot use svelte without it","state":"open","updated_at":"2021-11-01T20:24:40Z","created_at":"2021-11-01T20:05:42Z","creator_user_login":"kevmodrome"}
{"number":7112,"title":"HTML white space entities &ensp;/&emsp; not rendered correctly","body":"### Describe the bug\r\n\r\nPutting `&emsp;` or `&ensp;` at the start of lines seems to be mishandled in the latest version of `kit`\r\n\r\n```json\r\n\"devDependencies\": {\r\n  \"@sveltejs/kit\": \"^1.0.0-next.190\",\r\n  \"svelte\": \"^3.42.6\",\r\n},\r\n```\r\n\r\n### Reproduction\r\n\r\n```sh\r\nnpm init svelte@next test-html-ents\r\n```\r\n\r\nPick the skeleton project, install deps, start dev server, then paste\r\n\r\n```svelte\r\n<p>\r\n\t&emsp;&emsp;\r\n\t{#each [1, 2, 3] as idx}\r\n\t\t<span>{idx}</span>\r\n\t{/each}\r\n</p>\r\n```\r\n\r\ninto `src/routes/index.svelte`. The white space that should be inserted by `&emsp;&emsp;` in front of the numbers only briefly flashes on reloading the page.\r\n\r\n### Logs\r\n\r\nIf you then delete one `&emsp;`, the compiler warns\r\n\r\n```sh\r\n[vite-plugin-svelte] ignoring compiler output js change for /repos/test-html-ents/src/routes/index.svelte as it is equal to previous output after normalization\r\n```\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 11.6\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 475.04 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 17.0.1 - /usr/local/bin/node\r\n    Yarn: 1.22.17 - /usr/local/bin/yarn\r\n    npm: 8.1.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Brave Browser: 95.1.31.87\r\n    Safari: 15.0\r\n  npmPackages:\r\n    @sveltejs/adapter-static: ^1.0.0-next.21 => 1.0.0-next.21 \r\n    @sveltejs/kit: ^1.0.0-next.190 => 1.0.0-next.190 \r\n    svelte: ^3.42.6 => 3.44.0\r\n```\r\n\r\n### Severity\r\n\r\nannoyance\r\n","state":"open","updated_at":"2022-01-08T16:24:25Z","created_at":"2021-10-27T10:02:20Z","creator_user_login":"janosh"}
{"number":6882,"title":"Styling single element components while retaining element API","body":"### Describe the problem\r\n\r\nI might be missing something but it seems very difficult in Svelte to create components that do nothing more than style basic HTML elements. This makes creating component libraries hard because single element components (buttons, inputs, hr, etc) are the  foundation layer of creating a component library. Let's say you want to create a component that does nothing but apply some styles to a button or input. Those styles might also be affected by props. At first it seems trivial:\r\n\r\n```html\r\n<script>\r\n  export let primary\r\n</script>\r\n\r\n<button class:primary ><slot/></button>\r\n\r\n<style>\r\n  .primary {\r\n    background: brown;\r\n    color: white;\r\n  }\r\n</style>\r\n```\r\n\r\nThe problem is the button can't be clicked ... easily fixed:\r\n\r\n```html\r\n<button class:primary on:click><slot/></button>\r\n```\r\n\r\nActually there are a bunch of handlers our users might need. I hope I do not miss any and no new ones get added to the HTML spec:\r\n\r\n```html\r\n<button\r\n  class:primary\r\n  on:click\r\n  on:mouseup\r\n  on:mousedown\r\n  on:mouseenter\r\n  on:mouseleave\r\n  on:touchdown\r\n  on:touchup\r\n  on:touchmove\r\n  on:pointerdown\r\n  on:pointerup\r\n  on:pointermove\r\n  on:focus\r\n  on:blur\r\n  on:keydown\r\n  on:keyup\r\n  on:transitionstart\r\n  on:transitionend\r\n><slot/></button>\r\n```\r\n\r\nNow we have added these handlers the compiled output to my component is massive. It shows I am creating a bunch of listeners that most of my consumers won't use so this is using up memory for each instance. So Svelte is no longer feeling very svelte:\r\n\r\n```javascript\r\nif (!mounted) {\r\ndispose = [\r\n    listen(button, \"click\", /*click_handler*/ ctx[4]),\r\n    listen(button, \"mouseup\", /*mouseup_handler*/ ctx[5]),\r\n    listen(button, \"mousedown\", /*mousedown_handler*/ ctx[6]),\r\n    listen(button, \"mouseenter\", /*mouseenter_handler*/ ctx[7]),\r\n    listen(button, \"mouseleave\", /*mouseleave_handler*/ ctx[8]),\r\n    listen(button, \"touchdown\", /*touchdown_handler*/ ctx[9]),\r\n    listen(button, \"touchup\", /*touchup_handler*/ ctx[10]),\r\n    listen(button, \"touchmove\", /*touchmove_handler*/ ctx[11]),\r\n    listen(button, \"pointerdown\", /*pointerdown_handler*/ ctx[12]),\r\n    listen(button, \"pointerup\", /*pointerup_handler*/ ctx[13]),\r\n    listen(button, \"pointermove\", /*pointermove_handler*/ ctx[14]),\r\n    listen(button, \"focus\", /*focus_handler*/ ctx[15]),\r\n    listen(button, \"blur\", /*blur_handler*/ ctx[16]),\r\n    listen(button, \"keydown\", /*keydown_handler*/ ctx[17]),\r\n    listen(button, \"keyup\", /*keyup_handler*/ ctx[18]),\r\n    listen(button, \"transitionstart\", /*transitionstart_handler*/ ctx[19]),\r\n    listen(button, \"transitionend\", /*transitionend_handler*/ ctx[20])\r\n];\r\n\r\n...\r\n```\r\n\r\nThen we need things like ids and data attributes ... but then there is that warning in the docs that spreading props is not ideal and can't be optimized:\r\n\r\n```html\r\n<button {...{$$props}} on: ... ...>Click me!</button>\r\n```\r\n\r\nSo now I have a deoptimized component and all the cool stuff in Svelte does not work on my Button\r\n\r\n```html\r\n<Button use:proximityFetch transition:fade><slot/></Button>\r\n```\r\n\r\n```\r\nError:\r\nTransitions can only be applied to DOM elements, not components\r\nActions can only be applied to DOM elements, not components\r\n```\r\n\r\nFor inputs binding does not work if you do a props spread:\r\n\r\n```html\r\n<Input bind:{value} />\r\n```\r\nI just wanted to make the button brown when it was primary and I had to do a ton of boilerplate for every event an element might receive and I lost a lot of functionality (use, transition). It means creating a styled button is for advanced users not beginners. Styled buttons, links, inputs is the bread and butter of building websites and it feels hard to do this well in Svelte.\r\n\r\nAt the moment because single elements wrapped in components lose Svelte powers I find myself reapplying utility classes to basic elements rather than consolidating style logic into reusable atoms in a component library. \r\n\r\n### Describe the proposed solution\r\n\r\nIt would be great to have a special `thing` that was just for styled elements. I'd be happy if all it could do was modify `style` and `class` props and perhaps enforce a `type` for `input`. All other props, event handlers, actions, bindings get automatically forwarded to the element. I.e. it allows users to create things that have the same API as Svelte elements not Svelte components. Think of them as middleware or a proxy. They may need a different file extension or compiler options. They might look like this but I am open to other ways of achieving the same thing: \r\n\r\n```html\r\n<script>\r\n  export let primary\r\n  export let x\r\n</script>\r\n\r\n<svelte:element\r\n  default='button' \r\n  style={style => `tranform: translate3d(${x}px,0,0);${style};`}\r\n  class:primary\r\n/> \r\n\r\n<style>\r\n  .primary {\r\n    background: brown;\r\n    color: white;\r\n  }\r\n</style>\r\n```\r\nIt can then be used to apply styling logic to an element\r\n\r\n```js\r\nimport {Button} from \"./Button.svelte\"\r\nimport {foo} from \"./foo.js\"\r\n\r\n<Button on:mouseenter={console.log} use:foo />Click</Button>\r\n```\r\n\r\n## Nice to have but not essential\r\n\r\nAn `as` prop:\r\n\r\n```html\r\n<Button as=\"a\" href=\"/\">Ok</Button>\r\n```\r\n\r\nThere might be an allow list and disallow list for element types. \r\n\r\n### Alternatives considered\r\n\r\nIn some cases allowing multiple supporting elements would be handy e.g. checkboxes are often wrapped in a label however once we allow multiple elements we do not know which element to send which forwarded which attributes to. Typically you would want values to go to the hidden input and animations and transitions to be forwarded to the container. So it seems best to limit this to single element components only.\r\n\r\nAnother alternative might be middleware components, they do not render anything but parents can manipulate the props, handlers and styles of their children until finally the props, handlers and styles reach a single element. So the source of an Input `elementComponent` might look like this:\r\n\r\n```html\r\n<focusStyles>\r\n  <inputStyles>\r\n    <eventLogger>\r\n      <forceType type=\"number\">\r\n         <input />\r\n       <forceType>\r\n     <eventLogger>\r\n  </inputStyles>\r\n</focusStyles>\r\n```\r\n\r\nThis requires two new kinds of components `elementComponents` and `propMiddleware` components.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-09-01T14:12:56Z","created_at":"2021-10-26T21:54:55Z","creator_user_login":"philholden"}
{"number":6876,"title":"feat: dynamic event bindings","body":"This PR provides a means to pass a {...spread} operator with bindings so they can be handled dynamically.\r\n\r\nIt's highly likely this will need rework and some guidance. It's POC and my first contribution towards svelte.\r\n\r\nIll write tests once this is implemented with agreement.\r\n\r\ntest.svelte\r\n```\r\n<script lang=\"ts\">\r\n    import {createEventDispatcher} from 'svelte';\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    function sayHello() {\r\n        dispatch('testevent', {\r\n            test: 'food'\r\n        });\r\n    }\r\n</script>\r\n\r\n<div on:click={sayHello}>test</div>\r\n```\r\n\r\nApp.svelte\r\n```\r\n<script lang=\"ts\">\r\n    import test from \"./test.svelte\";\r\n\r\n    function testFn() {\r\n        console.log('testing');\r\n    }\r\n\r\n    function testFn2() {\r\n        console.log('testing2');\r\n    }\r\n\r\n    export let blah = {\r\n        'event:bindings': {\r\n            'testevent' : testFn\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n<svelte:component this={test} {...blah} on:testevent={testFn2} />\r\n```\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2021-10-22T20:43:23Z","creator_user_login":"flipkickmedia"}
{"number":6868,"title":"Transition:draw shows weird behaviour when vector-effect: non-scaling-stroke is applied.","body":"### Describe the bug\n\nWhen applying `vector-effect: non-scaling-stroke` to a svg path, svelte's `transition:draw` shows weird behaviour. Instead of starting the animation from the beggining, it splits it into multiple parts, animating each part separately.\r\n\r\nI noticed this behaviour while testing animating Rich Harris Pancake library, since it applies `non-scaling-stroke` on the charts. (https://github.com/Rich-Harris/pancake)\n\n### Reproduction\n\nLine in blue doesn't have any vector effect (`vector-effect: none`).\r\nLine in red has `vector-effect: non-scaling-stroke` applied to it.\r\n\r\nhttps://svelte.dev/repl/177e5996f77e4870b1579bc91ecc53b3?version=3.44.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (12) x64 AMD Ryzen 5 3600 6-Core Processor\r\n    Memory: 5.28 GB / 15.95 GB\r\n  Binaries:\r\n    Node: 14.8.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.4 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.14.7 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 94.0.4606.81\r\n    Edge: Spartan (44.19041.1266.0), Chromium (94.0.992.50)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    rollup: ^2.47.0 => 2.58.0\r\n    svelte: ^3.38.2 => 3.44.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-01-04T15:29:53Z","created_at":"2021-10-20T22:51:39Z","creator_user_login":"gdagosto"}
{"number":6866,"title":"Scrollbar fails to respond on <svelte:window> bindings example on Safari 15","body":"### Describe the bug\n\nThe scrollbar does not respond to dragging or scrolling the mouse wheel on the <svelte:window> bindings example when run on Safari 15. Scrolling behaviour inside the window is correct, but clicking and dragging the y-axis scrollbar, or attempting to mouse scroll while over the scrollbar, doesn't move the scrollbar nor scroll the window.\n\n### Reproduction\n\n1. Safari 15 on Mac OS X with mouse attached\r\n2. https://svelte.dev/examples#svelte-window-bindings\r\n3. Resize window so you get a scrollbar\r\n4. Try and drag scrollbar\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nThis is out of the repl.\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-10-22T12:56:05Z","created_at":"2021-10-20T20:32:05Z","creator_user_login":"angrytongan"}
{"number":6859,"title":"Recessive CSS rules","body":"### Describe the problem\n\nEvery CSS rule applied internally to a component that you want to override from the outside with global CSS requires the `!important` keyword. See [REPL](https://svelte.dev/repl/ca005ed42d044cc5b194e5b153a4c165?version=3.44.0).\n\n### Describe the proposed solution\n\nRecessive CSS rules, i.e. rules with lowest possible specificity no matter with what selector they were set with inside the component.\r\n\r\nNot sure what's the word to use here. Just using recessive in the style of genes where the dominant allele is the one expressed in the phenotype while recessive alleles are masked.\r\n\r\nSuch rules could be placed inside a special scope (similar to `:root {}`) or perhaps applied through a class with a special keyword so the svelte compiler knows to apply these rules with low specificity.\n\n### Alternatives considered\n\nCreating CSS variables for every CSS rule in a component gets old fast. Plus changing these CSS props is quite verbose. E.g. to specify just four colors:\r\n\r\n```svelte\r\n<MultiSelect\r\n  --sms-options-bg=\"white\"\r\n  --sms-li-active-bg=\"cornflowerblue\"\r\n  --sms-li-disabled-bg=\"gray\"\r\n  --sms-readonly-bg=\"lightgray\" />\r\n```\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2021-11-23T09:04:31Z","created_at":"2021-10-19T16:18:54Z","creator_user_login":"janosh"}
{"number":6858,"title":"fix: `beforeUpdate` called twice with bound reference","body":"Fixes: https://github.com/sveltejs/svelte/issues/6016\r\nFixes: https://github.com/sveltejs/svelte/issues/3290\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n\r\n\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2021-10-19T12:43:50Z","creator_user_login":"RaiVaibhav"}
{"number":6856,"title":"Initialized variables are not updated during SSR, when bound to a child component","body":"### Describe the bug\r\n\r\nVariables that are initialized to a value and passed to a child component are not being updated for SSR.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/c3bf2fa592004e21b0ff22a791dc81f5?version=3.44.0\r\nUse two components:\r\n\r\nFile: _child.svelte\r\n```svelte\r\n<script>\r\nimport Child from './_child.svelte'\r\n\r\nlet count\r\ncount = 0 // Removing this line produces the output expected\r\n</script>\r\n\r\n<Child bind:count />\r\nOutside: { count }\r\n```\r\n\r\nFile: index.svelte\r\n```svelte\r\n<script>\r\nexport let count\r\ncount = 5\r\n</script>\r\n\r\nInside: { count }\r\n```\r\n\r\nDuring SSR of `index.svelte`, you would expect the output to read:\r\n```\r\nInside: 5\r\nOutside: 5\r\n```\r\n\r\nActual output is\r\n```\r\nInside: 5\r\nOutside: 0\r\n```\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (12) x64 AMD Ryzen 5 1600 Six-Core Processor\r\n    Memory: 8.96 GB / 15.95 GB\r\n  Binaries:\r\n    Node: 14.15.5 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 7.20.3 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 94.0.4606.81\r\n    Edge: Spartan (44.19041.1266.0), Chromium (94.0.992.50)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    svelte: ^3.42.6 => 3.44.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-10-18T20:05:05Z","created_at":"2021-10-18T19:32:57Z","creator_user_login":"WaltzingPenguin"}
{"number":6850,"title":"transition:slide inconsistent height change if child elements use transition:slide|local","body":"### Describe the bug\r\n\r\ntransition:slide inconsistent height change if child elements use transition:slide|local . \r\nAfter last click the animation starts at wrong height as you can see in gif. https://svelte.dev/repl/ef045cd9fc954e75836d6f8a945dc87b?version=3.44.0\r\n![](https://s7.gifyu.com/images/qwe.gif)\r\n![](https://snipboard.io/9uZqOG.jpg)\r\n### Reproduction\r\n\r\nTo reproduce:\r\n1. Click me \r\n2. Click me 2\r\n3. Click me\r\n4. Click me\r\n5. Click me 2\r\n6. Click me\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19041\r\n    CPU: (4) x64 AMD Ryzen 3 1200 Quad-Core Processor\r\n    Memory: 9.96 GB / 15.93 GB\r\n  Binaries:\r\n    Node: 14.13.0 - C:\\games\\nodejs\\node.EXE\r\n    npm: 6.14.8 - C:\\games\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 94.0.4606.81\r\n    Edge: Spartan (44.19041.1266.0), Chromium (94.0.992.50)\r\n    Internet Explorer: 11.0.19041.1202\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.58.0\r\n    svelte: ^3.0.0 => 3.43.2\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2022-03-16T15:12:45Z","created_at":"2021-10-18T09:31:32Z","creator_user_login":"zxcq544"}
{"number":6848,"title":"Inconsistent bind:this value on svelte:component this=undefined","body":"### Describe the bug\n\n```html\r\n{#if show}\r\n  <svelte:component this={comp} bind:this={instance} />\r\n{/if}\r\n```\r\n\r\nStart with `show=true`, `comp=Foo`. Instance correctly contains the props and state of the component. Now do `comp=undefined` (or any falsy value, according to docs), the component is unmounted from DOM, state is removed from the instance object, but the rest (such as `export function` and various internal methods) remains on the object from the last `comp` before the falsy value.\r\n\r\nIn the repl linked below, this is checked by calling the exported function - in console you can see it repeatedly logging.\r\n\r\nNow if you do `show=false`, the component is uninitialized and `instance` becomes `null` - same as when you have a normal component with `bind:this`. Now if you do `show=true` again, `instance` remains `null`, until you change `comp` to an actual component again.\r\n\r\nI'd expect that the component should be fully removed and `bind:this={instance}` set to null as soon as the `this={comp}` is unset (set to falsy value).\r\n\r\n---\r\nRelated to #1489 (old, then fixed - was svelte v2?)\n\n### Reproduction\n\nhttps://svelte.dev/repl/c477b15230e347e19436325f2589665c?version=3.43.2\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nRepl: v3.43.2\r\n\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.3 LTS (Focal Fossa)\r\n    CPU: (4) x64 Intel(R) Core(TM) i3-3110M CPU @ 2.40GHz\r\n    Memory: 227.30 MB / 7.35 GB\r\n    Container: Yes\r\n    Shell: 3.1.0 - /usr/bin/fish\r\n  Binaries:\r\n    Node: 14.18.1 - /usr/bin/node\r\n    Yarn: 1.22.11 - ~/.local/bin/yarn\r\n    npm: 7.24.1 - ~/.local/bin/npm\r\n  Browsers:\r\n    Chromium: 94.0.4606.81\r\n    Firefox: 93.0\r\n  npmPackages:\r\n    svelte: ^3.43.2 => 3.43.2 \r\n    vite: ^2.6.7 => 2.6.7\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-10-16T19:21:56Z","created_at":"2021-10-16T19:21:56Z","creator_user_login":"mvolfik"}
{"number":6844,"title":"Adding and removing a comment changes result of build process.","body":"### Describe the bug\r\n\r\nA comment apparently impacts the result of the build process. Everything beneath a comment in the script tag, in a component, is not transpiled, why the build process does not yield the desired result. Removing the comment solve the issue (all code in the script tag is transpiled). So the comment changes the build result.\r\n\r\nNote that there are other comments in the file. It is only '// A comment' that results in this behaviour.\r\n\r\nThe issue only seems to exist on macOS. We have not been able to reproduce it on Windows.\r\nPulling a version of the project which builds as expected on Windows and building it on macOS (after running 'npm install' as the only change to the project) results in the behaviour elaborated beneath.\r\n\r\n### Reproduction\r\n\r\nEverything beneath a '// A comment '  in the script tag is apparently not transpiled. See log 1 beneath.\r\n(Matrix.svelte)\r\n____________________________________________________\r\n\r\n```svelte\r\n<script>\r\n    export let triggered;\r\n    \r\n    /** Save details about output */\r\n    export let gesture = undefined;\r\n    \r\n    let matrix = gesture.output?.matrix || [];\r\n\r\n    // If matrix is new.\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i<25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n    \r\n    // A comment\r\n    \r\n    let setElementTo = true;\r\n\r\n    function elementClick(i){\r\n        setElementTo=!matrix[i];\r\n        elementHover(i);\r\n    }\r\n    function elementHover(i,e=undefined){\r\n        if(e){\r\n            if(e.buttons !== 1) return;\r\n        }\r\n        matrix[i] = setElementTo;;\r\n    }\r\n    \r\n    $: act(triggered);\r\n\r\n    function act(t){\r\n        if(!t) return;\r\n\r\n        setMatrixTo(matrix);\r\n    }\r\n</script>\r\n\r\n<main class=\"buttonGrid h-24 w-24 select-none ml-4\">\r\n    {#each matrix as button, i}\r\n        <div class=\"{button ? 'bg-blue-400':'bg-gray-300'} rounded transition ease\" class:turnedOn={button} class:turnedOff={!button} on:mousedown={()=>{elementClick(i)}} on:mouseenter={(e)=>{elementHover(i,e)}}>\r\n\r\n        </div>\r\n    {/each}\r\n</main>\r\n```\r\n\r\n_______________________________________________\r\n\r\nEverything is transpiled after removing the comment. see log 2.\r\n(Matrix.svelte)\r\n_______________________________________________\r\n\r\n```svelte\r\n<script>\r\n    export let triggered;\r\n    \r\n    /** Save details about output */\r\n    export let gesture = undefined;\r\n    \r\n    let matrix = gesture.output?.matrix || [];\r\n\r\n    // If matrix is new.\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i<25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n    \r\n    let setElementTo = true;\r\n\r\n    function elementClick(i){\r\n        setElementTo=!matrix[i];\r\n        elementHover(i);\r\n    }\r\n    function elementHover(i,e=undefined){\r\n        if(e){\r\n            if(e.buttons !== 1) return;\r\n        }\r\n        matrix[i] = setElementTo;;\r\n    }\r\n    \r\n    $: act(triggered);\r\n\r\n    function act(t){\r\n        if(!t) return;\r\n\r\n        setMatrixTo(matrix);\r\n    }\r\n</script>\r\n\r\n<main class=\"buttonGrid h-24 w-24 select-none ml-4\">\r\n    {#each matrix as button, i}\r\n        <div class=\"{button ? 'bg-blue-400':'bg-gray-300'} rounded transition ease\" class:turnedOn={button} class:turnedOff={!button} on:mousedown={()=>{elementClick(i)}} on:mouseenter={(e)=>{elementHover(i,e)}}>\r\n\r\n        </div>\r\n    {/each}\r\n</main>\r\n```\r\n\r\n### Logs\r\n\r\n```shell\r\nLog 1:\r\n\r\n> svelte-app@1.0.0 build /Users/au524252/Dev/ml-microbit-browser\r\n> rollup -c\r\n\r\n\r\nsrc/main.js → public/build/bundle.js...\r\n^[[A(!) Plugin svelte: 'elementClick' is not defined\r\nsrc/components/output/Matrix.svelte\r\n23:       class:turnedOff=\"{!button}\"\r\n24:       on:mousedown=\"{() => {\r\n25:         elementClick(i);\r\n            ^\r\n26:       }}\"\r\n27:       on:mouseenter=\"{(e) => {\r\n(!) Plugin svelte: 'elementHover' is not defined\r\nsrc/components/output/Matrix.svelte\r\n26:       }}\"\r\n27:       on:mouseenter=\"{(e) => {\r\n28:         elementHover(i, e);\r\n            ^\r\n29:       }}\">\r\n30:     </div>\r\n(!) Plugin svelte: Matrix has unused export property 'triggered'. If it is for external reference only, please consider using `export const triggered`\r\nsrc/components/output/Matrix.svelte\r\n1: <script>\r\n2: import { setMatrixTo } from \"../../script/output\";\r\n3: export let triggered;\r\n              ^\r\n4:\r\n5: /** Save details about output */\r\ncreated public/build/bundle.js in 2.1s\r\n\r\n____________________________\r\n\r\nLog 2:\r\n\r\n\r\n> svelte-app@1.0.0 build /Users/au524252/Dev/ml-microbit-browser\r\n> rollup -c\r\n\r\n\r\nsrc/main.js → public/build/bundle.js...\r\ncreated public/build/bundle.js in 2.1s\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 11.5.2\r\n    CPU: (8) arm64 Apple M1\r\n    Memory: 149.48 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.10.0 - /opt/homebrew/bin/node\r\n    Yarn: 1.22.15 - /opt/homebrew/bin/yarn\r\n    npm: 7.24.0 - /opt/homebrew/bin/npm\r\n  Browsers:\r\n    Chrome: 94.0.4606.81\r\n    Firefox: 72.0.2\r\n    Safari: 14.1.2\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.56.3\r\n    svelte: ^3.0.0 => 3.42.4\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-10-20T04:39:24Z","created_at":"2021-10-13T12:02:48Z","creator_user_login":"Karlo-Emilo"}
{"number":6832,"title":"Buggy @html tag on page load/refresh","body":"### Describe the bug\n\nThe @html tag is buggy on initial page load/refresh. \r\n\r\nFor example, in the reproduction repo (https://github.com/kelvinsjk/sveltekitHTMLTag), we have `const a = 1, b = 2, c = 3` and `{a} {@html b} {c}`.\r\n\r\nThe SSR rendered page correctly shows `123` but upon page load and hydration it becomes `13` instead.\r\n\r\nOn HMR it then works as intended, and certain combination of text around those tags could lead it to work as well, but other times it doesn't.\n\n### Reproduction\n\nhttps://github.com/kelvinsjk/sveltekitHTMLTag\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Linux 5.11 Pop!_OS 20.04 LTS\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz\r\n    Memory: 4.05 GB / 14.60 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 16.9.0 - ~/.nvm/versions/node/v16.9.0/bin/node\r\n    Yarn: 1.22.11 - ~/.nvm/versions/node/v16.9.0/bin/yarn\r\n    npm: 7.21.1 - ~/.nvm/versions/node/v16.9.0/bin/npm\r\n  Browsers:\r\n    Firefox: 88.0.1\r\n  npmPackages:\r\n    @sveltejs/kit: next => 1.0.0-next.180 \r\n    svelte: ^3.42.6 => 3.43.1\n```\n\n\n### Severity\n\nannoyance\n\n### Additional Information\n\nCan be worked around by re-assigning the variable in action onMount, but rather annoying as I haven't been able to discern a pattern as to when this will strike.","state":"open","updated_at":"2023-08-22T09:57:46Z","created_at":"2021-10-09T17:08:29Z","creator_user_login":"kelvinsjk"}
{"number":6825,"title":"No error for missing directives `=`","body":"### Describe the bug\n\nHi\r\nThere was a typo in my code and I didn't notice it for a while. Svelte needs to show an error if the `=` was missing. Please check the [REPL](https://svelte.dev/repl/ef6b6fb2c44e4bf3b2ce656641676985?version=3.43.1).\r\nThanks\n\n### Reproduction\n\nhttps://svelte.dev/repl/ef6b6fb2c44e4bf3b2ce656641676985?version=3.43.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz\r\n    Memory: 7.85 GB / 15.84 GB\r\n  Binaries:\r\n    Node: 14.17.6 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.15 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.15 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.22000.120.0), Chromium (94.0.992.38)\r\n    Internet Explorer: 11.0.22000.120\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.58.0\r\n    svelte: ^3.0.0 => 3.43.1\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2023-05-23T16:05:10Z","created_at":"2021-10-08T19:47:03Z","creator_user_login":"babakfp"}
{"number":6821,"title":"cssHash's hash() function may generate invalid CSS identifiers","body":"### Describe the bug\n\n`cssHash: ({hash}) => hash('foo'),` returns `2nhsez`, which is an invalid CSS identifier since it starts with a number, unless the identifier is escaped, which Svelte does not do.\n\n### Reproduction\n\n```js\r\n{\r\n    test: /\\.svelte$/,\r\n    loader: 'svelte-loader',\r\n    options: {\r\n        compilerOptions: {\r\n            cssHash: ({hash}) => hash('foo'),\r\n        },\r\n    },\r\n},\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.18363\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\r\n    Memory: 11.64 GB / 31.94 GB\r\n  Binaries:\r\n    Node: 14.15.3 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.9 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 94.0.4606.71\r\n    Edge: Spartan (44.18362.1593.0)\r\n    Internet Explorer: 11.0.18362.1766\r\n  npmPackages:\r\n    svelte: ^3.43.1 => 3.43.1\r\n    webpack: ^5.11.0 => 5.53.0\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-10-08T17:55:12Z","created_at":"2021-10-08T09:39:27Z","creator_user_login":"Bilge"}
{"number":6820,"title":"Slot prop passed to function prop is not dynamic","body":"### Describe the bug\r\n\r\nI know this is not exactly the best pattern to use, but:\r\n\r\nIf you use a slot prop inside of a function that's passed to the prop of another component, the component will not update when the slot prop updates:\r\n\r\n```svelte\r\n<HasSlot let:foo>\r\n  <!-- does not update: -->\r\n  <TakesFunction func={() => foo} />\r\n</HasSlot>\r\n```\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/9cf9e97e8a4148c48d87bf163295879a?version=3.43.1\r\n\r\n### Possible Workarounds\r\n\r\nYou can force the function prop to update by including the slot prop before the function expression:\r\n\r\n```svelte \r\n<HasSlot let:foo>\r\n  <!-- does update: -->\r\n  <TakesFunction func={foo, () => foo} />\r\n</HasSlot>\r\n```\r\n\r\n### System Info\r\n\r\n```shell\r\nn/a (Svelte REPL)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nprevents usage of function props within slots","state":"open","updated_at":"2021-10-10T16:43:48Z","created_at":"2021-10-07T20:14:31Z","creator_user_login":"plmrry"}
{"number":6805,"title":"HTML comments are being stripped from output","body":"### Describe the bug\n\nIt seems that HTML comments are being stripped from output. This is problematic when using tools that rely on HTML comments as directives.\n\n### Reproduction\n\n1. Add HTML comment to Svelte component.\r\n2. View DOM in browser.\r\n3. Comment is gone.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nmacOS\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2022-03-07T06:49:15Z","created_at":"2021-10-04T07:45:10Z","creator_user_login":"thelucid"}
{"number":6802,"title":"Bug: assigning a value to a readable store inside the template masks the actual store value within the rest of the template","body":"### Describe the bug\n\nProbaby, nobody would code svelte in this way and I can't think of any realworld use cases right now. But svetle currently allows assigning any kind of stores in the template and doesn't compile them with `set_store_value`, so `{$readableStore += 1}` is valid Svelte code. By compiling them with `set_store_value`, this will not be valid as does currently, which should the correct behavior.\nEdit: update the REPL with more important details\n\n### Reproduction\n\nhttps://svelte.dev/repl/291bf77f6f8949ca8ccc0349d6f4f690?version=3.43.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nN/A\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-10-04T12:25:51Z","created_at":"2021-10-03T14:49:20Z","creator_user_login":"mdynnl"}
{"number":6779,"title":"<svelte:component this={page} /> adds a component instead of replacing it","body":"### Describe the bug\n\nWhen using transitions and stores in a svelte component the directive <svelte:component this={page} /> does add the component to the bottom when 'page' changes.\n\n### Reproduction\n\nhttps://svelte.dev/repl/4484e9f2c4214cc6a85e8371bac76dbc?version=3.43.0\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nfirefox and chrome...\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-12-01T01:08:19Z","created_at":"2021-09-27T20:23:23Z","creator_user_login":"hcrohland"}
{"number":6777,"title":"Provide \"what changed\" array (of Booleans) to derived stores","body":"### Describe the problem\r\n\r\nWhen a derived store has multiple parent stores, its callback might sometimes want to know which parent store changed and triggered the callback. This would mostly be useful in advanced callbacks that use `set` (and, if #6750 is merged, `update`) to calculate their value.\r\n\r\n### Describe the proposed solution\r\n\r\nThe derived store's callback could take an optional parameter after `set` (and after `update`, if #6750 is merged), which would be an array of Booleans describing which parent store(s) were updated. The Booleans would be in the same order as the parent stores, i.e. if `stores[i]` was updated, then `updated[i]` (or `changed[i]`, see naming discussion below) would be true.\r\n\r\nThis would actually be quite simple to implement, looking something like this:\r\n\r\n```diff\r\ndiff --git a/src/runtime/store/index.ts b/src/runtime/store/index.ts\r\nindex 51a13b85e..a67f11fe2 100644\r\n--- a/src/runtime/store/index.ts\r\n+++ b/src/runtime/store/index.ts\r\n@@ -182,6 +182,7 @@ export function derived<T>(stores: Stores, fn: Function, initial_value?: T): Rea\r\n                const values = [];\r\n \r\n                let pending = 0;\r\n+               let changed = [];\r\n                let cleanup = noop;\r\n \r\n                const sync = () => {\r\n@@ -189,7 +190,8 @@ export function derived<T>(stores: Stores, fn: Function, initial_value?: T): Rea\r\n                                return;\r\n                        }\r\n                        cleanup();\r\n-                       const result = fn(single ? values[0] : values, set, update);\r\n+                       const result = fn(single ? values[0] : values, set, update, single ? changed[0] : changed);\r\n+                       changed.fill(false);\r\n                        if (auto) {\r\n                                set(result as T);\r\n                        } else {\r\n@@ -202,6 +204,7 @@ export function derived<T>(stores: Stores, fn: Function, initial_value?: T): Rea\r\n                        (value) => {\r\n                                values[i] = value;\r\n                                pending &= ~(1 << i);\r\n+                               changed[i] = true;\r\n                                if (inited) {\r\n                                        sync();\r\n                                }\r\n```\r\n\r\nOf course, type definitions would also need to change, so the actual PR would have more to it than that. But the core of this feature can be implemented in just four lines of code.\r\n\r\n### Alternatives considered\r\n\r\nSome use cases for this feature can be handled with the status quo:\r\n\r\n```js\r\n// Can't do this yet:\r\nconst discountedPrice = derived(\r\n  [price, discount],\r\n  ([$price, $discount], set, [priceChanged, discountChanged]) => {\r\n  if (priceChanged) {\r\n    console.log('we promise to keep discounted price the same even when regular price changes');\r\n  }\r\n  if (discountChanged) {\r\n    console.log('new discount is calculated from current price');\r\n    set($price - $discount);\r\n  }\r\n});\r\n\r\n// Have to do this instead:\r\nconst manualDiscounts = (() => {\r\n  let currentPrice;\r\n  price.subscribe(p => currentPrice = p);\r\n  return derived(discount, $discount => currentPrice - $discount);\r\n})();\r\n```\r\n\r\nPerhaps not the best example, as the manualDiscounts store is simpler to read than the version with a `changed` array. But imagine a complex state being stored in the derived store: the current user, the shopping cart contents, and data about the product being viewed right now (product description, review scores, top five reviews...).\r\n\r\n### Importance\r\n\r\nnice to have\r\n\r\n### Miscellaneous information\r\n\r\nThe first version of this proposal asked for a bitmap instead of a Boolean array. But once I realized that array destructuring would allow giving names to the items in the array, so that you could write `[priceChanged, discountChanged]` and then reference `priceChanged` instead of `changed[0]`, the Boolean array version of the idea became much, much better, so I abandoned the bitmap idea.","state":"open","updated_at":"2023-05-29T23:33:11Z","created_at":"2021-09-27T09:19:42Z","creator_user_login":"rmunn"}
{"number":6771,"title":"Use actions on Svelte components","body":"### Describe the problem\r\n\r\nThere's some things I often find myself doing:\r\n\r\n* dispatching events when component is mounted:\r\n\r\n```js\r\nimport { onMount, createEventDispatcher } from \"svelte\";\r\nconst dispatch = createEventDispatcher();\r\nonMount(() => dispatch(\"mount\"));\r\n```\r\n\r\n* dispatching events when destroying:\r\n\r\n```js\r\nimport { onMount, createEventDispatcher } from \"svelte\";\r\nconst dispatch = createEventDispatcher();\r\nonDestroy(() => dispatch(\"destroy\"));\r\n```\r\n\r\nE.g. I have one component `WithShortcut`, which exports a `let:` binding to create a shortcut, e.g. like this:\r\n\r\n```svelte\r\n<WithShortcut shortcut=\"Control+C\" let:createShortcut let:shortcutLabel>\r\n    <Button title={shortcutLabel} on:click={doThing} on:mount={(event) => createShortcut(event.detail.button)}>Click me!</Button>\r\n</WithShortcut>\r\n```\r\n\r\nThat's quite the boilerplate, imo, and it leads to code which doesn't _feel_ good, as we're using events, just to be able to listen to the lifecycle event outside of the component. Also, using `on:` feels more correct, if you're _reacting_ to events, but what we're doing here is extending the component, for which `use:` would feel better.\r\n\r\nThere's other issues here. The cleanup for the button happens in `Button`, but the cleanup code for the shortcut happens in `WithShortcut`.\r\n\r\n### Describe the proposed solution\r\n\r\nWhat would be much nicer imo, is if we could use `use:` actions on components.\r\nThe semantics would be similar to HTML elements: the action's`mount` corresponds to `onMount`, and `destroy` corresponds to `onDestroy`.\r\n\r\nThis means that the whole thing is basically just syntax sugar. I've built an example here, where I'm recreating a Component `use:` action with props:\r\n\r\n[UseAction.svelte REPL](https://svelte.dev/repl/18a4636c7fe74109b40a1a9745318ac3?version=3.43.0)\r\n\r\nI'll also copy it over here. `<MyComponent use:action={param} />` translates to:\r\n\r\n```svelte\r\n// MyComponent.svelte\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n  import { get_current_component } from \"svelte/internal\"\r\n  \r\n  export let action;\r\n  export let param;\r\n  \r\n  let elementUpdate;\r\n  \r\n  function update() {\r\n    if (elementUpdate) {\r\n      elementUpdate(param);\r\n    }\r\n  }\r\n  \r\n  $: param, update();\r\n  \r\n  const component = get_current_component();\r\n  \r\n  onMount(() => {\r\n    const { destroy, update } = action(component, param);\r\n    elementUpdate = update;\r\n    return destroy;\r\n  })\r\n</script>\r\n```\r\n\r\nThe above code could then be rewritten as (I know `{@const` is not a thing yet, but it's also a nice feature):\r\n```svelte\r\n<WithShortcut shortcut=\"Control+C\" let:createShortcut let:shortcutLabel>\r\n    {@const createButtonShortcut = component => createShortcut(component.state.button)}\r\n    <Button title={shortcutLabel} use:createButtonShortcut on:click={doThing}>Click me!</Button>\r\n</WithShortcut>\r\n```\r\n\r\nSee [here](https://svelte.dev/repl/6fdd156423714deca51f7a15b96003ac?version=3.43.0) for a REPL of how I wish I could do it.\r\n\r\nI believe this makes it more semantic.\r\n\r\nThis would also be easy to teach new users, as it mirrors how they behave on elements:\r\n```svelte\r\n<div bind:this={myElement} use:actionOnElement />\r\n<Component bind:this={myComponent} use:actionOnComponent />\r\n```\r\n\r\n(This feature seems quite natural to me, and I was surprised to have not found this feature suggestion. If it has been suggested before, I'd appreciate a link.)\r\n\r\n### Alternatives considered\r\n\r\n1. As I mentioned above, I currently use `onMount(() => dispatch(\"mount\", { button }));`. See [here](https://svelte.dev/repl/34355bf4683443dd88fd13e5d3bd0e95?version=3.43.0) for a REPL.\r\n\r\n2. One might say, I could import `registerShortcut` from `Button.svelte` and use it there directly, but I don't want to teach every component that might get a shortcut how to create them, and eventually how to assign tooltips (`title`).\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-03-20T12:38:54Z","created_at":"2021-09-25T23:29:56Z","creator_user_login":"hgiesel"}
{"number":6763,"title":"<svelte:component> not properly destroyed when inside of an Element with transition:fn","body":"### Describe the bug\r\n\r\nIf a `<svelte:component>` tag is used inside of a element with a svelte transition (like in the code below) and the `this` prop is changed while the transition is playing then the old component will stay mounted alongside the new one. \r\n\r\n```svelte\r\n{#if open}\r\n  <div transition:fade>\r\n    {#if component}\r\n      <svelte:component this={component} />\r\n    {/if}\r\n  </div>\r\n{/if}\r\n```\r\n**Edit:** This behavior also seems to occur if a there is a transition inside the component that is provided to the `this` prop.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/c3000501dc154b88b93cf37c58b350b7?version=3.43.0\r\n\r\nTo reproduce click the *Open* button followed by clicking the *Confirm* buttons.\r\n\r\nOnly one component should be visible at a time but all components stay mounted. \r\n\r\nRemove `transition:fade` in `Container.svelte` to get the proper behavior. \r\n\r\n\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nLinux 5.13.13-arch1-1, Brave Version 1.26.74 Chromium: 91.0.4472.124 (Official Build) (64-bit)\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-09-24T15:08:08Z","created_at":"2021-09-23T22:15:45Z","creator_user_login":"icalvin102"}
{"number":6755,"title":"[examples] Canvas Scatter Plot Tween Animation ","body":"### Describe the problem\n\nI am trying to get a canvas scatter plot to have tweened points.\r\n\r\nI am using this  (example from repl) for canvas: https://svelte.dev/repl/8265c051bf754f8aba6f5d6ed9d0d74f?version=3.42.6\r\n\r\nand this one for tweening: https://svelte.dev/repl/b4c485ee69484fd8a63b8dc07c3b20a2?version=3.4.1\r\nand mashing them together but it isn't working >.<\n\n### Describe the proposed solution\n\nMake an example where it works\n\n### Alternatives considered\n\nMake two examples?\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2021-12-15T16:52:43Z","created_at":"2021-09-22T13:07:53Z","creator_user_login":"SumNeuron"}
{"number":6754,"title":"Reassigning variable used as action should be reactive and destroy old action","body":"### Describe the bug\r\n\r\nWhen I change a function in `use:action` to something else, destroy neither executes nor adds the other action.\r\n\r\nPutting an item in `#key` helps.\r\n\r\n\r\nActually, I'd like to be able to replace a function in `use:action` without a `#key`, because `#key` is a more drastic solution than simply executing `destroy` and adding a new action. \r\n\r\n### Reproduction\r\n\r\nDescribed example:\r\nhttps://svelte.dev/repl/730c59ca84e8486aa67108a0d4544bbc?version=3.42.6\r\n\r\n1. Click \"remove action\" in First case - does nothing and should execute `destroy`.\r\n\r\n2. Click \"remove action\" in Second case - When you use `#key`, `destroy` is executed.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.10 Arch Linux\r\n    CPU: (4) x64 AMD Athlon(tm) X4 950 Quad Core Processor\r\n    Memory: 2.60 GB / 15.07 GB\r\n    Container: Yes\r\n    Shell: 5.1.8 - /bin/bash\r\n  Binaries:\r\n    Node: 16.3.0 - /usr/bin/node\r\n    Yarn: 1.22.10 - /usr/bin/yarn\r\n    npm: 7.17.0 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 87.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-09-23T14:18:05Z","created_at":"2021-09-22T00:04:05Z","creator_user_login":"lukaszpolowczyk"}
{"number":6735,"title":"<select> doesn't update selected value when options change","body":"### Describe the bug\r\n\r\nConsider this example:\r\n\r\n```svelte\r\n<script>\r\n\tlet value = 'foo';\r\n\tlet options = {};\r\n\t\r\n\tfunction loadOptions() {\r\n\t\toptions = {\r\n\t\t\t'': 'Please choose...',\r\n\t\t\tfoo: 'Foo',\r\n\t\t\tbar: 'Bar',\r\n\t\t\tbaz: 'Baz',\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<select {value}>\r\n\t{#each Object.entries(options) as [key, value] (key)}\r\n\t\t<option value={key}>\r\n\t\t\t{value}\r\n\t\t</option>\r\n\t{/each}\r\n</select>\r\n\r\n<button on:click={loadOptions}>\r\n\tLoad options\r\n</button>\r\n```\r\n\r\nThe `value` of `<select>` is set to the local `value` variable which can only hold `\"foo\"`. The options of the `<select>` are loaded dynamically (here simulated with a button). When you press the button instead of `Foo` being selected the last element (`Baz` in this case) gets selected.\r\n\r\n![Peek 2021-09-16 12-12](https://user-images.githubusercontent.com/1752683/133594534-bb3d3a94-f955-49b3-a2eb-34ec9392c508.gif)\r\n\r\nInterestingly, adding this code to the `<script>` section fixes the issue, even if it's never executed.\r\n\r\n```js\r\n// This function is never executed but it being there changes the behavior of the program\r\nfunction updateValue() {\r\n\tvalue = 'foo';\r\n}\r\n```\r\n\r\n![Peek 2021-09-16 12-12_2](https://user-images.githubusercontent.com/1752683/133594671-fee553d4-7e6d-4a41-9f67-9da7baeafb8f.gif)\r\n\r\nAdding a `bind:value` also makes it work but it's not always applicable. Setting the given variable to itself after changing the options also works.\r\n\r\nI'm not completely sure if this is by design (not using `bind:` allows the two values to go out of sync after all) but the presence of the `updateValue` function changing the output seems weird.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/18feecd418f74b719d6fdac9b575ad46?version=3.42.5\r\nhttps://svelte.dev/repl/300c97ba35e94b73b6ad292e1f1c09e7?version=3.42.5\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nReproducible on all modern browsers, also in the repl.\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-09-22T18:16:25Z","created_at":"2021-09-16T10:16:29Z","creator_user_login":"iluuu1994"}
{"number":6733,"title":"flip animation causes layout thrashing","body":"### Describe the bug\n\nI have a grid with a large number of elements that I'm animating using flip.  It looks great, but it causes the page to freeze up for a few seconds.  It seems like `fix_position()` and `create_rule()` are causing forced reflows every time they run: fix_position() by interleaving reads to getElementBoundingRect() and getComputedStyle().width, and writes to style.position, and create_rule() by interleaving reads to getElementBoundingRect() and adding style rules.\n\n### Reproduction\n\nhttps://svelte.dev/repl/06ac8d7e24264c5998082b168364df7d?version=3.42.4\n\n### Logs\n\n```shell\nhttps://share.firefox.dev/3l28BC1\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 10.15.7\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-4750HQ CPU @ 2.00GHz\r\n    Memory: 64.80 MB / 8.00 GB\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 16.9.0 - /usr/local/bin/node\r\n    Yarn: 1.22.11 - /usr/local/bin/yarn\r\n    npm: 7.21.1 - /usr/local/bin/npm\r\n    Watchman: 2021.08.30.00 - /usr/local/bin/watchman\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.56.3\r\n    svelte: ^3.0.0 => 3.42.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-09-21T20:58:15Z","created_at":"2021-09-16T03:30:05Z","creator_user_login":"wartmanm"}
{"number":6732,"title":"Reactive blocks run only once per tick, losing changes and allowing fast pace apps to get out of sync","body":"### Describe the bug\n\n### TLDR: Reactive blocks that need to stay up to speed with multiple state changes during the same tick basically break the application in subtle, hard to reason about ways (because things \"randomly\" go out of sync). _This bug breaks the basic guarantee of reactivity._ \r\n- This bug goes all the way back to version 3.0.0.\r\n- I am giving it high severity because at least for us, it is a huge factor in deciding whether to use Svelte for future projects and I think it will be the same for other teams the encounter these behaviours. \r\n\r\n### More Info and context (skip to the next section for REPLs):\r\n- My team is using Svelte in production to build some highly graphic and complex interactive experiences (game like), which sometimes mean rapid state updates and ideally a lot of reactive blocks to keep different pieces separate.  \r\n- This bug happens with stores as well, **even though store subs behave differently as they do fire multiple times per tick** (which is a good thing). This adds to the confusion and overall feeling of inconsistency (people in my team initially thought stores are causing this issue).\r\n- **Anything async also behaves differently** (because it is not in the same tick), it leads to consistent state and potentially introduces infinite loops in a surprising manner (because the code \"worked just fine\" because of this bug when there was no async behaviour) which adds to the confusion and inconsistency of the DX.\r\n- Because of how puzzling it is when it happens in a complex app (I change state but it doesn't render), devs in my team were constantly puzzled by why one way of doing something works while another sends the app to hell. We started thinking about reactive blocks as strange foot guns 😢 . Now that I know the root cause we can find (ugly) ways around it by being extra vigilant at all times, but I am sure others will encounter it too. \r\n- I was told by some on #6730 (I thought it is the same issue at first) that this is a built in protection from possible infinite loops. If that's the case **this is at minimum a bug in the documentation** and in my opinion not a good design decision for the framework. App consistency is more important and this defence mechanism is very limited and confusing anyway. It also means svelte is not well suited for the type of apps that could benefit the most from its full feature-set, performance, small size and elegance (== complex apps built by devs who can easily defend from infinite loops with normal code or the conditionals of the reactive blocks). \r\n- I know that changing this can break existing apps that rely on it. **Could this behaviour be made opt-out** via some compiler option or otherwise (Ideally something we can pass in via the rollup config)? \r\n- **I am willing to allocate resources to fixing it if that helps** (and if we can get some guidance for where to start from)\r\n\n\n### Reproduction\n\n**Expected behaviour**: isSmallerThan10 should be false.\r\n**Actual behaviour**: isSmallerThan10 stays true, which is out of sync with the app state (and **breaks the contract of reactivity**)\r\n- [Clean example without a store](https://svelte.dev/repl/b417aec1edd94811ad87b9e0c039790d?version=3.42.6)\r\n- [The same example with a store](https://svelte.dev/repl/4a4ad0e819f54eb987f986d29c285e22?version=3.42.6) \r\n- [How timeout \"fixes\" it](https://svelte.dev/repl/f6eaee13453e440fad094201858fa358?version=3.42.5)\n\n### Logs\n\n```shell\nN/A\n```\n\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 11.5.2\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\n    Memory: 39.63 GB / 64.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 12.16.2 - ~/.nvm/versions/node/v12.16.2/bin/node\r\n    Yarn: 1.22.10 - ~/.nvm/versions/node/v12.16.2/bin/yarn\r\n    npm: 7.16.0 - ~/.nvm/versions/node/v12.16.2/bin/npm\r\n  Browsers:\r\n    Brave Browser: 86.1.15.76\r\n    Chrome: 93.0.4577.82\r\n    Firefox: 89.0.2\r\n    Safari: 14.1.2\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2021-09-25T03:19:47Z","created_at":"2021-09-15T22:23:33Z","creator_user_login":"isaacHagoel"}
{"number":6730,"title":"$: reactive shortcut is not current with multiple sync updates to a writeable store","body":"### Describe the bug\r\n\r\n$: does not reliably fire with a writeable store, while store.subscribe does. \r\n\r\nIt seems like all initial writeable store updates within the same tick are gathered, with only the last, most recent one firing for the `$:` reactive handler, usually. However, it seems like it can be possible for the `$:` handler to fire pre-maturely, when there are still other state updates to happen within the same tick, which wind up going un-reported.\r\n\r\nSee repro link below.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/57dbee8266d840d09611daebee226b91?version=3.42.5\r\n\r\nI get the following in the dev console. Note that the `{loading: \"true\"}` update is not reported from the $: handler, with the XXX, until the NEXT update happens. This results in the wrong state being reported, initially. \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/11261266/133365485-9beaca66-4cb9-4c18-a3c3-37fb1843767f.png)\r\n\r\nNote that moving the call to sync up, fixes this. It seems like Svelte's analysis of the code is missing an odd edge case.\r\n\r\nhttps://svelte.dev/repl/e88c70d6fd224b0d84656f83afd7e63c?version=3.42.5 \r\n\r\n### Logs\r\n\r\n```shell\r\nN/A\r\n```\r\n\r\n\r\n### System Info\r\n\r\n```shell\r\nREPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2023-08-03T14:13:42Z","created_at":"2021-09-15T03:25:36Z","creator_user_login":"arackaf"}
{"number":6728,"title":"feat: loose parsing mode","body":"Related to #4818\r\n\r\nAdds a `loose` parsing mode which will continue parsing no matter what. In `loose` mode, the first error that is encountered is part of the return in case subsequent analysis of the result cannot be performed and a fallback to the original error is needed.\r\nThis would enable https://github.com/sveltejs/language-tools/pull/1177 \r\nIt's up to discussion whether the naming is good and whether or not additional parsing fallbacks should be applied in loose mode (this is the simplest implementation as a start for now).\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [ ] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2021-09-14T11:52:47Z","creator_user_login":"dummdidumm"}
{"number":6720,"title":"Why the checkbox doesn't work in this reactive inner object?","body":"### Describe the bug\r\n\r\nWhy is the checkbox not working here?\r\n\r\nI think Svelte is re-evaluating `innerTeam` on change, but I don't understand why: I'm changing `innerTeam` not `team`.\r\n\r\nI'm using that reactive syntax to change `innterTeam` only if `team` changes! Not the other way!\r\n\r\n### Reproduction\r\n\r\nREPL: https://svelte.dev/repl/1ef7657adbc545a0b595e2ab58069b4a?version=3.42.4\r\n\r\n- App.svelte:\r\n\r\n```svelte\r\n<script>\r\n\timport {onMount} from \"svelte\";\r\n\t\r\n\timport Inner from \"./Inner.svelte\"\r\n\t\r\n\tlet team = {\r\n\t\tplayer: {id: \"1\", name: \"John\"},\r\n\t\tfull: false\r\n\t}\r\n\t\r\n\t$: console.log(\"team changed:\", team);\r\n\t\r\n\tonMount(() => {\r\n\t\tsetTimeout(()=> {\r\n\t\t\tteam = {\r\n\t\t\t\tplayer: {id: \"2\", name: \"Bob\"}, full: false\r\n\t\t\t}\r\n\t\t}, 4000)\r\n\t})\r\n</script>\r\n\r\nteam: <pre>{JSON.stringify(team, null, 2)}</pre>\r\n\r\n<Inner {team}></Inner>\r\n```\r\n\r\n- Inner.svelte:\r\n\r\n```svelte\r\n<script>\t\t\r\n\texport let team = undefined;\r\n\t\r\n\tlet innerTeam;\r\n\t\r\n\t$: innerTeam = {\r\n\t\t...team,\r\n\t\tcars: []\r\n\t}\r\n\t\r\n\t$: console.log(\"innerTeam changed:\", innerTeam);\r\n\t\r\n\tfunction addCar() {\r\n\t\tinnerTeam.cars = [...innerTeam.cars, {id: \"1\", brand: \"BMW\"}]\r\n\t}\r\n</script>\r\n\r\n<button on:click={addCar}>\r\n\tAdd car to customTeam\r\n</button>\r\n\r\n<br>\r\n\r\n<input bind:checked={innerTeam.full} type=\"checkbox\"/> Full?\r\n\r\n<br>\r\n\r\ninnerTeam: <pre>{JSON.stringify(innerTeam, null, 2)}</pre>\r\n```\r\n\r\n### Additional\r\n\r\nHere a version without `Inner.svelte` component: https://svelte.dev/repl/6dd87a76d59548559b75f50103980e7a?version=3.42.4.\r\n\r\nIt's the same. But if I remove the `onMount()` it works!\r\n\r\n### System Info\r\n\r\n```shell\r\nversion=3.42.4\r\n```\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2021-09-11T08:30:55Z","created_at":"2021-09-10T15:00:59Z","creator_user_login":"frederikhors"}
{"number":6717,"title":"<select> selected option disappears on clone","body":"### Describe the bug\r\n\r\nSince svelte handles select value internaly, value disappears when node is cloned  with `Node.cloneNode()` because there is no option element having `selected` attribute and cloned select is not managed by svelte. It happened to me when using svelte-dnd-action library which clones node for dragged element. Not sure if this is bug, however maybe svelte should at least allow to set selected attribute manually?\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/da88a412b8d649869e51550fcb49cbde?version=3.42.4\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nNot system related\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-11-18T11:39:22Z","created_at":"2021-09-09T14:26:25Z","creator_user_login":"mataslib"}
{"number":6710,"title":"Keyed each  blocks with 'transition' not all blocks trigger transition","body":"### Describe the bug\n\nnot all blocks trigger transition when 'top' changed\n\n### Reproduction\n\nhttps://svelte.dev/repl/e59383ae17554625abb27be008602cf9?version=3.42.4\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n3.42.4\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-09-08T11:48:30Z","created_at":"2021-09-05T05:02:17Z","creator_user_login":"Jet-Li-Glow"}
{"number":6708,"title":"Block-level element bindings not updating when `visibility` is `hidden` or `collapsed` (in Firefox)","body":"### Describe the bug\n\n### What is expected:\r\n* Block-level element bindings (`clientHeight`, `clientWidth`, `offsetHeight`, `offsetWidth`) update regardless of `visibility` & browser.\r\n\r\n### What happens instead:\r\n* On Firefox (tested on stable 91.0.2 & dev 92.0b9), they update only when `visibility` is not `hidden` or `collapsed`.\r\n* On Chrome (tested on stable 92.0.4515.159 & dev 95.0.4630.1) & Edge (tested on stable 93.0.961.38), they update regardless of `visibility`'s value.\n\n### Reproduction\n\nhttps://svelte.dev/repl/bacc64f09063438db938745594c69d4c?version=3.42.4\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (16) x64 AMD Ryzen 9 4900HS with Radeon Graphics\r\n    Memory: 3.00 GB / 15.42 GB\r\n  Binaries:\r\n    Node: 14.17.5 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 6.14.14 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1023.0), Chromium (93.0.961.38)\r\n    Internet Explorer: 11.0.19041.906\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-09-04T21:00:35Z","created_at":"2021-09-04T14:13:11Z","creator_user_login":"Sxxov"}
{"number":6706,"title":"Not implemented undefined (List of Nodes in handle)","body":"### Describe the bug\n\nUsing svelte 3.42.4, building my project using snowpack fails with the following error:\r\n\r\n```\r\n[08:01:56] [snowpack] ! building files...\r\n[08:02:01] [snowpack] Build Result Error: There was a problem with a file build result.\r\n[08:02:01] [snowpack] Not implemented undefined\r\n[08:02:01] [snowpack] Error: Not implemented undefined\r\n    at handle (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6178:10)\r\n    at /Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6414:19\r\n    at Array.map (<anonymous>)\r\n    at handle_body (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6413:22)\r\n    at /Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6495:8\r\n    at scoped_fn (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6382:11)\r\n    at handle (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6181:18)\r\n    at IfStatement (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6532:8)\r\n    at handle (/Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6181:18)\r\n    at /Users/cpennington/personal/dicedornot/node_modules/svelte/compiler.js:6414:19\r\n```\r\n\r\nThe error is happening in this function in compiler.js\r\n\r\n```\r\n/**\r\n\t * @param {Node} node\r\n\t * @param {State} state\r\n\t * @returns {Chunk[]}\r\n\t */\r\n\tfunction handle(node, state) {\r\n\t\tconst handler = handlers[node.type];\r\n\r\n\t\tif (!handler) {\r\n\t\t\tthrow new Error(`Not implemented ${node.type}`);\r\n\t\t}\r\n\r\n\t\tconst result = handler(node, state);\r\n\r\n\t\tif (node.leadingComments) {\r\n\t\t\tresult.unshift(c(node.leadingComments.map(comment => comment.type === 'Block'\r\n\t\t\t\t? `/*${comment.value}*/${/** @type {any} */ (comment).has_trailing_newline ? `\\n${state.indent}` : ` `}`\r\n\t\t\t\t: `//${comment.value}${/** @type {any} */ (comment).has_trailing_newline ? `\\n${state.indent}` : ` `}`).join(``)));\r\n\t\t}\r\n\r\n\t\tif (node.trailingComments) {\r\n\t\t\tstate.comments.push(node.trailingComments[0]); // there is only ever one\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n```\r\n\r\nSome debugging suggests that `node` being passed into this function is in fact a list of nodes, instead.\r\n\r\nThe same build completes with svelte 3.35.0.\n\n### Reproduction\n\nCheck out https://github.com/cpennington/dicedornot/tree/package-upgrade\r\n\r\nRun\r\n```sh\r\nnpm install\r\nnpm build\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nnpx: installed 1 in 1.857s\r\n\r\n  System:\r\n    OS: macOS 11.4\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n    Memory: 399.40 MB / 16.00 GB\r\n    Shell: 3.2.1 - /usr/local/bin/fish\r\n  Binaries:\r\n    Node: 14.17.3 - ~/.nvm/versions/node/v14.17.3/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 6.14.13 - ~/.nvm/versions/node/v14.17.3/bin/npm\r\n  Browsers:\r\n    Chrome: 93.0.4577.63\r\n    Firefox: 91.0\r\n    Safari: 14.1.1\r\n  npmPackages:\r\n    snowpack: ^3.8.8 => 3.8.8 \r\n    svelte: ^3.42.4 => 3.42.4\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2022-11-12T06:39:09Z","created_at":"2021-09-04T11:38:01Z","creator_user_login":"cale-at-reify"}
{"number":6668,"title":"Crossfade opacity is incorrect","body":"### Describe the bug\r\n\r\nWhen using `crossfade` to transition between two elements, the `in` element goes from 0 to `o` (where `o` is the natural opacity) while the `out` element goes from `o` to 0.\r\n\r\nThe result is that at the midpoint, the combined opacity is less than either element's natural opacity. In the common case where both elements have a natural opacity of 1, the combined opacity at the midpoint is 1 - 0.5^2 = 0.75.\r\n\r\nThis can be solved with a quadratic blending formula with special handling for the common case (which is complicated by the need to know which element is on top of the other).\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/6dc637d0321f41f983da99907b2f451d?version=3.42.1\r\n\r\nThis also showcases a separate bug, which is a dupe of #4389. (There are [several open crossfade issues](https://github.com/sveltejs/svelte/search?p=1&q=crossfade&type=issues); the whole thing probably needs a bit of a cleanup.)\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\nSvelte 3.42.1\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2023-03-11T13:54:18Z","created_at":"2021-08-19T14:42:56Z","creator_user_login":"Rich-Harris"}
{"number":6667,"title":"Expose additional implementation details for stores","body":"### Describe the problem\r\n\r\nThe svelte store paradigm currently uses a breadth-first signaling pattern to solve the \"diamond dependency problem\".\r\nThis is a good solution, but the internal queue (subscriber_queue) is a hidden internal variable and this means that when writing a new store implementation, there will be issues with interoperability. \r\n\r\ni.e. the signaling will no longer be perfectly \"breadth first\" and thus issues like the diamond dependency will be intractable when mixing store types.\r\n\r\nSee this REPL for an illustration of the problem\r\nhttps://svelte.dev/repl/b9506f52bba44c158d4cddf996252ee0?version=3.42.1\r\n\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nI would recommend the internal signal queue (subscriber_queue) be exposed as a small API.\r\nInternally the queue could be represented as an array of actions, allowing broader extensibility.\r\nNotably svelte-immer-store internally signals with more than just new_value, and a queue of actions would allow authors to adopt their own requirements.\r\n\r\nI would be happy to develop and submit a pull request to solve this issue. But I would like guidance to make sure the effort was not wasted.\r\n\r\n### Alternatives considered\r\n\r\nThe only other alternative I can find is to avoid mixing the stores, but that means no interoperability between libraries.\r\n\r\n### Importance\r\n\r\ni cannot use svelte _stores_ without it\r\n\r\nEdit: should have said i cant use svelte stores. Svte itself is still good 😅","state":"open","updated_at":"2022-09-23T00:56:43Z","created_at":"2021-08-19T07:05:52Z","creator_user_login":"WHenderson"}
{"number":6663,"title":"afterUpdate is called before #await resolved and not called after ","body":"### Describe the bug\n\n`afterUpdate` is called before `#await` resolved and not called after.\r\nIn docs `afterUpdate` called when DOM is sync with data, but in real if use `#await` block, DOM will be update after `afterUpdate` call with empty(as example) DOM\n\n### Reproduction\n\nhttps://ru.svelte.dev/repl/87a8b1ddcb0d4d4588e75a217d28e03d?version=3.42.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nAny\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-09-15T21:04:12Z","created_at":"2021-08-17T12:44:19Z","creator_user_login":"BykhovDenis"}
{"number":6662,"title":"Change transitions to not require `style-src 'unsafe-inline'` CSP.","body":"### Describe the problem\n\nThe way CSS transitions are currently handled they inject inline attribute styles into the element. This requires the site use `style-src 'unsafe-inline'`. \n\n### Describe the proposed solution\n\nI'm not entirely sure how this works, but I've seen some inline attribute styles be accepted under `style-src 'self'` while others are not. Specifically, [these spinners](https://github.com/Schum123/svelte-loading-spinners) seem to work just fine even under a strict CSP.\r\n\r\nIt appears as though defining CSS variables inline is actually allowed? I haven't seen any documentation about that in particular, though. If true, Svelte transitions could in principle be changed to work like the above, where the transitions are defined in CSS documents, configured by inline variables, and applied by a class change.\r\n\r\nThis is essentially a cnange only in the internal handling of transitions (and possible animations?), and wouldn't have any effect on how they are used in Svelte code.\n\n### Alternatives considered\n\nDon't use transitions if you want a strict CSP.\r\n\r\nMake your own transitions by hand.\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2022-08-01T18:40:49Z","created_at":"2021-08-17T08:49:14Z","creator_user_login":"Karlinator"}
{"number":6661,"title":"Subscription prop not waiting to subscribe till mounted","body":"### Describe the bug\n\nIf a component receives a store as a prop, it is immediately trying to subscribe to the store and access it's value even if the component is rendered conditionally (see first REPL below)\r\n\r\nRelated, if a component is rendered within a slot of another component conditionally (ex. a View within a Drawer), this appears to be handled correctly on initial mount, but the View is unexpectedly receiving the updated state before it has been unmounted (see second REPL below).\r\n\r\nI believe these are related, but if not, I can open the second as a separate issue.  It was my original issue and while boiling down to a bare bones example, I discovered the more basic first problem.\n\n### Reproduction\n\n- [Conditional store subscription](https://svelte.dev/repl/ee6145641d664528b895ab75dc6ff5ac?version=3.42.1)\r\n  - Note the immediate error in the console with `View` subscribing / accessing `$selected.name`\r\n- [Slot store subscription update](https://svelte.dev/repl/abc58f213eb242579c55f34762c797b8?version=3.42.1)\r\n  - Click \"select\" and then \"de-select\" and note the error accessing `$selected.name` within `View`\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSee REPLs\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-03-04T12:47:09Z","created_at":"2021-08-17T01:31:07Z","creator_user_login":"techniq"}
{"number":6659,"title":"Inner component updates bounded props with `undefined` after being destroyed.","body":"### Describe the bug\n\nPlease see the REPL. I have tried to simplify it as much as possible.\r\n\r\nThere is a `Component` that binds a variable and 2 parent components that contain conditional blocks.\r\n\r\nWhen the conditions change in a specific order, the `Component` is destroyed first, and then the callback is executed to update the variable, which writes `undefined` to it, since the component context has already been destroyed.\n\n### Reproduction\n\nhttps://svelte.dev/repl/728fb72e4b4441e693f8912ae5e6e9fa?version=3.42.1\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nVisible in REPL with version 3.42.1\n```\n\n\n### Severity\n\nblocking an upgrade","state":"open","updated_at":"2021-09-17T07:32:32Z","created_at":"2021-08-16T18:10:10Z","creator_user_login":"vkurko"}
{"number":6642,"title":"Layout shift when transitioning between two elements.","body":"### Describe the problem\n\nWhen using transitions with a `delay`, the DOM element is created and has a size as soon as the transition starts rather than when the delay is completed.\r\n\r\nThis causes both elements to take up space o the screen. In particular when wishing to replace one element with another this causes layout shifts.\r\n\r\n[This REPL](https://svelte.dev/repl/573ce419b926471992cb2845fea79362?version=3.42.1) demonstrates the issue.\n\n### Describe the proposed solution\n\nThe element should not take up space in the document until after the delay has passed. This can alternately be configurable with an option alongside `delay`.\r\n\r\nI know this is non-trivial to accomplish with CSS transitions as `display` is not animatable. I don't have a good proposal for technical implementation I'm afraid, at least not one than uses CSS `delay`s.\n\n### Alternatives considered\n\nThere are ways to work around this. [Here is one](https://svelte.dev/repl/8292b220aad9434fb70d30a4c03488b1?version=3.42.1).\r\n\r\nThis workaround introduces another state to avoid mounting the second element until just as the first one is removed. However, it is clunky as it requires another state just to re-implement the functionality of the `delay` passed to `fly`.\r\n\r\nAnother alternative is a dedicated system of \"replacing\" one element with another through some transition similar to how `crossfade` is usd to move an element. This, however, seems over the top when the functionality is so very nearly there already.\n\n### Importance\n\nnice to have","state":"open","updated_at":"2022-10-23T09:54:32Z","created_at":"2021-08-12T18:48:48Z","creator_user_login":"Karlinator"}
{"number":6625,"title":"select input breaks in Firefox on Windows when using `{ ...$$props }`","body":"### Describe the bug\n\nWe (me and @artskydj) have only been able to reproduce this bug in Firefox (90.0.2) on Windows (Windows 10 Pro).\r\n\r\nWe have not been able to reproduce the issue in Firefox (90.0.2) on macOS, or in Safari or Chrome or Edge on Windows or macOS.\r\n\r\nIn this very specific scenario, keyboard controls stop working correctly for `select` controls.\r\n\r\nThe issue only happens when the `select` element has `{ ...$$props }` on it.  If you remove the spread, or change it to `{ ...$$restProps }` the issue does not reproduce.\n\n### Reproduction\n\nREPL: https://svelte.dev/repl/090833a91f4c4a61bb80c1366d74d8f0?version=3.42.1\r\n\r\n1. set focus in the `select` control without expanding the dropdown\r\n2. Press the down arrow key on your keyboard multiple times\r\n\r\nExpected outcome: every time you press the down arrow key on your keyboard, the next item in the control should be selected, until \"delta\" is selected.\r\n\r\nObserved outcome: pressing the down arrow key on your keyboard toggles the `select` inconsistently between the second and third values (bravo and charlie).  It seems to stay on bravo twice as long as it stays on charlie.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nFirefox, Windows\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-08-13T16:47:20Z","created_at":"2021-08-05T21:55:38Z","creator_user_login":"TehShrike"}
{"number":6611,"title":"feat: parser instead of regex for preprocessor","body":"Fixes #5900, fixes #5292, fixes #4701\r\n\r\nReplace the regex to a simple parser, allow us to fix #5292 and support #4701\r\n\r\n- allow return attributes, fixes #5900\r\n- introduce another type for preprocessor `expression` instead of reusing the existing `script`\r\n  - the returned code for expression has to be an expression, if the preprocessor transformed it into a multiline statements, it will crash the compiler later on.\r\n\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] Prefix your PR title with `[feat]`, `[fix]`, `[chore]`, or `[docs]`.\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [ ] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2021-08-03T03:10:11Z","creator_user_login":"tanhauhau"}
{"number":6603,"title":"[idea] Minimal modifications in update_keyed_each","body":"### Describe the problem\n\nThe problem that `update_keyed_each` needs to solve seems really similar to the problem `hydration` needs to solve, i.e. \"How do we reorder nodes with the minimal number of operations possible?\"\n\n### Describe the proposed solution\n\nMaybe `update_keyed_each` could also benefit from the _longest increasing subsequence_ logic from the hydration pull request #6395. Maybe both subsystems could reuse the same code, potentially reducing the code size and increasing keyed-each performance.\r\n\r\nI currently don't have a lot of free time so I thought this might be interesting for someone else willing to look into it.\n\n### Alternatives considered\n\nI have not fully analyzed the current `update_keyed_each` logic so it might be that it already does minimal operations given its requirements. In that case, I am sorry to have bothered you all :)\n\n### Importance\n\nnice to have","state":"open","updated_at":"2021-08-26T09:21:32Z","created_at":"2021-07-31T20:19:19Z","creator_user_login":"hbirler"}
{"number":6599,"title":"Change detection is overly aggressive where destructuring is used","body":"### Describe the bug\n\nIn a reactive declaration like this...\r\n\r\n```js\r\n$: a = b(c);\r\n```\r\n\r\n...Svelte correctly wraps the assignment to `a` in a call to `$$invalidate`. `b` and `c` are treated as dependents (assuming they are themselves reactive), resulting in the following code if `c` is reactive:\r\n\r\n```js\r\n$$self.$$set = $$props => {\r\n  if ('c' in $$props) $$invalidate(1, c = $$props.c);\r\n};\r\n\r\n$$self.$$.update = () => {\r\n  if ($$self.$$.dirty & /*c*/ 2) {\r\n    $: $$invalidate(0, a = b(c));\r\n  }\r\n};\r\n```\r\n\r\nBut if the assignment is destructured (and there are two or more destructured names)...\r\n\r\n```js\r\n$: ({ x, y } = b(c));\r\n```\r\n\r\n...something rather odd happens:\r\n\r\n```js\r\n$$self.$$set = $$props => {\r\n  if ('b' in $$props) $$invalidate(2, b = $$props.b);\r\n  if ('c' in $$props) $$invalidate(3, c = $$props.c);\r\n};\r\n\r\n$$self.$$.update = () => {\r\n  if ($$self.$$.dirty & /*b, c*/ 12) {\r\n    $: $$invalidate(1, { x, y } = b(c), x, (($$invalidate(0, y), $$invalidate(2, b)), $$invalidate(3, c)));\r\n  }\r\n};\r\n```\r\n\r\nIn this case `x` and `y` are correctly invalidated, but `b` and `c` are as well.\r\n\r\nIt's easy enough to work around — just don't use destructuring — but it's also a bit of a bad bug. In our case it caused a major performance headache as something intended to run rarely was instead attempting to run at 60fps (which in turn made it more like 10fps).\n\n### Reproduction\n\nThe simplest repro I've come up with is [this one](https://svelte.dev/repl/eae742827c654baf9a49d77b1467eaf5?version=3.41.0). [This more involved one](https://svelte.dev/repl/690bca10f2fb4ac187476f8c9a497879?version=3.41.0) shows a reactive statement re-running unnecessarily as a result of the bug.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 10.15.7\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\n    Memory: 8.12 GB / 64.00 GB\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.5.0 - ~/.nvm/versions/node/v16.5.0/bin/node\r\n    Yarn: 1.22.5 - /usr/local/bin/yarn\r\n    npm: 7.19.1 - ~/.nvm/versions/node/v16.5.0/bin/npm\r\n  Browsers:\r\n    Chrome: 92.0.4515.107\r\n    Firefox: 90.0.1\r\n    Safari: 13.1.3\r\n  npmPackages:\r\n    svelte: ^3.38.2 => 3.38.2 (but note that it happens in 3.41.0, per the REPL)\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-07-31T03:36:24Z","created_at":"2021-07-30T21:49:33Z","creator_user_login":"Rich-Harris"}
{"number":6584,"title":"New component `root` property may throw errors","body":"## Read this comment first\r\n\r\nThe reason why this occurs is that you are likely trying to use a pre-compiled (to JS) component that was compiled with a different Svelte version than the one you use, which is not supported. See this comment for more info and solutions:\r\nhttps://github.com/sveltejs/svelte/issues/6584#issuecomment-1019578529\r\n\r\n### Describe the bug\r\n\r\nI recently experienced issues due to new `root` property in several svelte plugins.\r\nIt seems that this line causes issues: https://github.com/sveltejs/svelte/commit/5cfefeb6e72f8085e418150b644cdc4b4f6f260d#diff-da9bae4e28c441de5ba3a074e30775fe69109100b3d921ad8f2592d93cd67b7f\r\n\r\nIt seems that a null check for `parent_component` variable is missing at that point.\r\n\r\n```\r\non_mount: [],\r\non_destroy: [],\r\non_disconnect: [],\r\nbefore_update: [],\r\nafter_update: [],\r\ncontext: new Map(parent_component ? parent_component.$$.context : options.context || []), // Here, there is a null check for parent_component variable\r\n\r\n// everything else\r\ncallbacks: blank_object(),\r\ndirty,\r\nskip_bound: false,\r\nroot: options.target || parent_component.$$.root // Here there is no check for parent_component variable\r\n```\r\n\r\n### Reproduction\r\n\r\nThis suddenly occured on certain svelte plugins.\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Linux 5.8 Debian GNU/Linux 10 (buster) 10 (buster)\r\n    CPU: (8) x64 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz\r\n    Memory: 517.19 MB / 7.47 GB\r\n    Container: Yes\r\n    Shell: 5.0.3 - /bin/bash\r\n  Binaries:\r\n    Node: 16.0.0 - ~/.n/bin/node\r\n    npm: 7.10.0 - ~/.n/bin/npm\r\n  npmPackages:\r\n    svelte: ^3.31.2 => 3.38.3 \r\n    webpack: ^5.16.0 => 5.44.0\r\n```\r\n\r\n\r\n### Severity\r\n\r\nblocking an upgrade","state":"open","updated_at":"2023-09-01T01:36:50Z","created_at":"2021-07-27T14:33:22Z","creator_user_login":"CatchABus"}
{"number":6582,"title":"namespaceURI of math tag is wrong ","body":"### Describe the bug\r\n\r\n``` HTML\r\n<math>\r\n\t<mrow>mrow</mrow>\r\n</math>\r\n```\r\n\r\n``` JavaScript\r\ndocument.querySelector(\"body > math\").namespaceURI\r\n```\r\n\r\nWhen I run this JavaScript...\r\n\r\n### Expected Result\r\n\r\n`http://www.w3.org/1998/Math/MathML`\r\n\r\n### Actual Result\r\n\r\n`http://www.w3.org/1999/xhtml`\r\n\r\n\r\nI don't know how much impact this issue has.\r\nBut just I found it, so I report it.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/f2ecf5f3aa4f4258b54fda9b2a4e39f4?version=3.42.6\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz  \r\n    Memory: 818.39 MB / 15.86 GB\r\n  Binaries:\r\n    Node: 14.17.0 - C:\\Program Files\\nodejs\\node.EXE       \r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.13 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1023.0), Chromium (92.0.902.55)\r\n    Internet Explorer: 11.0.19041.1\r\n  npmPackages:\r\n    rollup: ^1.27.14 => 1.27.14\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-09-19T06:55:11Z","created_at":"2021-07-27T09:17:01Z","creator_user_login":"baseballyama"}
{"number":6562,"title":"When triggered again before the end of the animation, there will be unexpected results","body":"### Describe the bug\n\nIn the official Animations example, if the animation is triggered quickly, it will produce a discontinuous animation\n\n### Reproduction\n\nSource Code： [Repl.txt](https://github.com/sveltejs/svelte/files/6869328/Repl.txt)\r\n\r\n\r\n![svelteAnimationBug](https://user-images.githubusercontent.com/85120828/126794865-eca2e0f7-3e24-4a3a-850f-503d997cc238.png)\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\n3.40.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-02-18T20:14:41Z","created_at":"2021-07-23T14:23:44Z","creator_user_login":"Jet-Li-Glow"}
{"number":6553,"title":"Slot defaults don't apply when using slot forwarding","body":"### Describe the bug\n\nIf a forwarded slot is omitted from the calling script, the slot's default contents are not applied.\r\nSlot defaults work in a parent-child relationship, but not a grandparent-parent-child relationship.\r\nIn the forwarded slot's case, svelte sees the slots as having been passed down from the parent to the child.\r\nThe empty forward now becomes the default (which is empty).\n\n### Reproduction\n\nSee this [repl.it](https://svelte.dev/repl/8d021a73b61f4e8b9af75023399825a2?version=3.40.0)\r\n\r\nCreate a forwarded slot (`App.svelte` calls `Parent.svelte` calls `Child.svelte` below)\r\n\r\n**App.svelte**\r\n```\r\n<script>\r\n\timport Parent from './Parent.svelte'\r\n</script>\r\n\r\n<Parent let:scoped>\r\n\t<!-- Not adding a default slot, you see that it gets applied in Parent.svelte -->\r\n\t<h3 slot=\"first\">First slot</h3>\r\n\t<!-- Remove the line below, you'll see the default doesn't apply for slot forwarding -->\r\n\t<h4 slot=\"second\">Second slot</h4>\r\n</Parent>\r\n```\r\n\r\n**Parent.svelte**\r\n```\r\n<script>\r\n\timport Child from './Child.svelte'\r\n</script>\r\n\r\n<Child>\r\n\t<slot>Default here is applied</slot>\r\n\t<slot name=\"first\" slot=\"first\"/>\r\n\t<slot name=\"second\" slot=\"second\"/>\r\n</Child>\r\n```\r\n\r\n**Child.svelte**\r\n```\r\n<slot/>\r\n<slot name=\"first\"/>\r\n<slot name=\"second\">Second slot's default text</slot>\r\n```\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nNot available\n```\n\n\n### Severity\n\nblocking all usage of svelte","state":"open","updated_at":"2021-10-19T21:18:18Z","created_at":"2021-07-21T22:46:30Z","creator_user_login":"ct-rev"}
{"number":6548,"title":"GetContext breaks when imported","body":"### Describe the bug\r\n\r\nGetContext works inside HTML\r\n```html\r\n<script>\r\n  import { setContext, getContext } from 'svelte'\t    \r\n\tsetContext('myClass', 'green')\r\n</script>\r\n\r\ncolor1: {getContext('myClass')}\r\n<br />\r\ncolor2: <input value={getContext('myClass')} />\r\n```\r\n\r\nHowever, if I import this from another file, `value` is `undefined`.\r\n\r\n### Reproduction\r\n\r\nhttps://svelte.dev/repl/34cc652504624b50954114b08bd04315?version=3.38.3\r\n\r\nhttps://svelte.dev/repl/7f9c357d5ab842b1afe464e4ccfb9e45?version=3.38.3\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSvelte: 3.38.3\r\nSystem: Svelte REPL\r\n```\r\n\r\n\r\n### Severity\r\n\r\nannoyance","state":"open","updated_at":"2021-08-24T20:33:22Z","created_at":"2021-07-20T13:49:53Z","creator_user_login":"jakobrosenberg"}
{"number":6545,"title":"Selectors inside :not are not scoped correctly","body":"### Describe the bug\n\nCSS Selectors within `:not()` are not being scoped.\r\n\r\n**input** `div:not(div > div)`\r\n**output** `div.svelte-12345:not(div > div)`\r\n**expected** `div.svelte-12345:not(div.svelte-12345 > div.svelte-12345)`\r\n\n\n### Reproduction\n\nhttps://svelte.dev/repl/b9843c52b0924de9ad43945bd9ee6b4a?version=3.38.3\r\n\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nTested in Svelte v3.83.3\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-07-21T00:58:07Z","created_at":"2021-07-20T06:07:13Z","creator_user_login":"stephane-vanraes"}
{"number":6544,"title":"Add Enum type for Node's type in compiler","body":"### Describe the problem\r\n\r\nNow, the `type` parameter's type is `string`.\r\nBut actually, this type should assign fixed values as below.\r\n\r\n```\r\nAwaitBlock\r\nBody\r\nComment\r\nDebugTag\r\nEachBlock\r\nElement\r\nFragment\r\nHead\r\nIfBlock\r\nInlineComponent\r\nKeyBlock\r\nMustacheTag\r\nOptions\r\nRawMustacheTag\r\nSlot\r\nSlotTemplate\r\nText\r\nTitle\r\nWindow\r\n```\r\n\r\n**Applicable Code**\r\nhttps://github.com/sveltejs/svelte/blob/5534b911ea9da16682d6052e641461087661c689/src/compiler/compile/nodes/shared/Node.ts#L12\r\n\r\n### Describe the proposed solution\r\n\r\nI think we should change the variable type to Enum (String Literal Types) like below.\r\n```\r\ntype Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\r\n```\r\nrefer: https://www.typescriptlang.org/docs/handbook/literal-types.html#string-literal-types\r\n\r\nBecause we can avoid making typos or other programming mistakes.\r\n\r\nIf Svelte members accept this idea, I will implement it by myself.\r\n\r\n### Alternatives considered\r\n\r\nNothing for now.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2021-07-20T05:21:37Z","created_at":"2021-07-20T04:52:45Z","creator_user_login":"baseballyama"}
{"number":6540,"title":"Trim whitespaces before control structures and variables","body":"### Describe the problem\r\n\r\nFixes #6486\r\n\r\n\r\n### Describe the proposed solution\r\n\r\nPHP Template Engine `Twig` solves it by adding a - to the curly braces\r\n\r\n\r\n{{-variable }} \r\nremoves whitespaces before the variable/control structure\r\n\r\n{{ variable -}}\r\nremoves whitespaces after the variable/control structure\r\n\r\ncombining both remove the whitespaces in front and end\r\n\r\nTake a look at: \r\nhttps://symfony.com/blog/better-white-space-control-in-twig-templates\r\n\r\n\r\nSimiliar solution for svelte could be nice as well\r\n\r\n### Alternatives considered\r\n\r\ndont write whitespaces in your code - but makes the code ugly ;-)\r\n\r\n### Importance\r\n\r\nnice to have","state":"open","updated_at":"2021-07-21T10:31:30Z","created_at":"2021-07-18T21:34:21Z","creator_user_login":"Kapsonfire-DE"}
{"number":6536,"title":"The muted attribute does not render in the video tag","body":"### Describe the bug\n\nThe muted attribute does not render in the video tag which prevents autoplay on Safari when using client side routing.\r\n\r\nInfo from @GrygrFlzr\r\n>svelte properly sets video.muted = true, and that does mute the video, the JS property that controls the muted attribute is confusingly video.defaultMuted instead\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted\r\ntl;dr this attribute needs special case handling in svelte core\r\nalso notable is that SSR svelte properly renders the muted attribute because it uses string concat, but DOM svelte does not\n\n### Reproduction\n\n- Create a video tag with ` muted` and `autoplay` attributes. E.g.: https://svelte.dev/repl/9fb1ac3f9a314bd3947fb1c62cdb1dcf\r\n- Check in dev tools what is rendered\r\n![image](https://user-images.githubusercontent.com/25438601/125884112-1ba6b015-8b94-4a8e-b21b-175c0604d2ef.png)\r\n- The muted attribute is missing\r\n\r\n\r\nWhen using client side routing in SvelteKit, when navigating through pages, the video will not automatically play on Safari.\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n    CPU: (12) x64 AMD Ryzen 5 5600X 6-Core Processor\r\n    Memory: 17.33 GB / 31.92 GB\r\n  Binaries:\r\n    Node: 14.17.3 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 7.19.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.1023.0), Chromium (91.0.864.67)\r\n    Internet Explorer: 11.0.19041.1\r\n  npmPackages:\r\n    svelte: ^3.38.3 => 3.38.3\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2023-08-17T17:36:30Z","created_at":"2021-07-16T02:58:23Z","creator_user_login":"rafaucau"}
{"number":6530,"title":"Bug with bindings across compilation units","body":"### Describe the bug\r\n\r\nFollowing scenario: we provide a base app (`App.svelte`), and some components for users to use (`Component.svelte`).\r\n\r\nThe users are supposed to provide their own add-on components (`AddOn.svelte`), which can use our components, and then add them to the base app through an interface `app.addComponent(myaddon)`. The add-ons are then inserted using `<svelte:element bind:this={myaddon} />`\r\n\r\nWhen using those provided components inside the add-on, we can set properties, but we cannot bind to them.\r\n\r\n### Reproduction\r\n\r\nhttps://github.com/hgiesel/svelte-bug-example\r\n\r\n### Logs\r\n\r\n_No response_\r\n\r\n### System Info\r\n\r\n```shell\r\nSystem:\r\n    OS: macOS 11.2.3\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-1060NG7 CPU @ 1.20GHz\r\n    Memory: 423.93 MB / 8.00 GB\r\n    Shell: 5.1.4 - /usr/local/bin/bash\r\n  Binaries:\r\n    Node: 16.0.0 - /usr/local/bin/node\r\n    Yarn: 1.22.5 - ~/.yarn/bin/yarn\r\n    npm: 7.10.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 91.0.4472.114\r\n    Firefox: 89.0.2\r\n    Safari: 14.0.3\r\n  npmPackages:\r\n    svelte: ^3.38.3 => 3.38.3\r\n```\r\n\r\n### Severity\r\n\r\nblocking all usage of svelte","state":"open","updated_at":"2021-08-24T01:14:39Z","created_at":"2021-07-14T02:06:51Z","creator_user_login":"hgiesel"}
{"number":6493,"title":"Dynamic slot names","body":"### Describe the problem\r\n\r\nI'm building an extensible data table component, it works pretty well now, but the only thing missing is slots with dynamic names.\r\nSo the way the table works is you can set column definitions and the data, the column definitions contain the key that matches the key in the data e.g. `key: \"name\"` and if there's a `name: \"something\"` in the data, the name column has values. Right now I have a button, icon and other action `types` available so when the dev. sets a column to a `button` type it shows a button, so far so good. The only problem with this is that only my predefined button styles are available and what would be a great solution is to define the column type as `custom` and when I set the key to `testColumn` it would look for a slot named `testColumn`, so in the table component:\r\n```html\r\n{#if col.type === \"custom\"}\r\n<!-- col.key will be \"testColumn\" -->\r\n\t<slot name={col.key}>\r\n\t   Custom fallback\r\n\t</slot>\r\n{/if}\r\n``` \r\nand I'd pass the matching slot outside of the component:\r\n```html\r\n<DataTable bind:cols bind:data>\r\n<!-- Could contain a button, icon div or anything we'd like -->\r\n    <div slot=\"testColumn\">\r\n        This is a custom column.\r\n    </div>\r\n</DataTable>\r\n```\r\n\r\n( There was an issue regarding this, but it was submitted as a bug rather than a feature request and lacked detailed explanation: https://github.com/sveltejs/svelte/issues/5859 )\r\n\r\n### Describe the proposed solution\r\n\r\nIt would be really awesome if we could do something like this in svelte ( if I'm correct vue has something like this: https://vuejs.org/v2/guide/components-slots.html#Dynamic-Slot-Names ), it would open up whole new possibilities for svelte components. \r\n\r\n### Alternatives considered\r\n\r\nIt doesn't necessary have to work with slots like I mentioned, I'm open to any 'svelter' solution as well.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2023-08-07T00:55:19Z","created_at":"2021-07-05T06:38:55Z","creator_user_login":"csangonzo"}
{"number":6482,"title":"Add an option to validate to force keyed each instead of allowing both","body":"### Describe the problem\n\nVue required that all looped blocks specify a key and it makes it easier to work with and less likely to run into an issue later.\n\n### Describe the proposed solution\n\nIt would be nice to have a lint option that would error when compiling a each block that isn't keyed.\n\n### Alternatives considered\n\nN/A\n\n### Importance\n\nwould make my life easier","state":"open","updated_at":"2021-07-02T16:26:25Z","created_at":"2021-07-01T19:15:52Z","creator_user_login":"dtzxporter"}
{"number":6479,"title":"Keep updating the state during out transition","body":"### Describe the problem\r\n\r\nCheck out [this REPL](https://svelte.dev/repl/5d4cfcb4c5b247f4b4558df6778e9eef?version=3.38.3).\r\nWhen you click the \"Close\" button at the top, the div at the center starts its out transition, and as soon as the transition begins, the state inside of the div stops getting updated.\r\nThis might seem trivial or unimportant; but I have encountered numerous situations where I would've preferred Svelte to keep updating the contents as the out transition is happening. (If it's not clear to you when anyone would want that, I could provide examples.)\r\n\r\n### Describe the proposed solution\r\n\r\nI'd propose that the state keeps being updated until the element is present in the DOM, either by default, or at least we should have a modifier (similar to `local`) that leaves the decision up to the developer:\r\n```svelte\r\n{#if open}\r\n    <div out:fade|keepUpdatingState> <!-- As you can see, I'm horrible at naming, but you get the idea -->\r\n        // Blah blah blah...\r\n    </div>\r\n{/if}\r\n```\r\n\r\n### Alternatives considered\r\n\r\nCurrently, you either have to come to terms with this limitation, or use CSS transitions with CSS classes and then toggle those classes on your element.\r\n\r\n### Importance\r\n\r\nwould make my life easier","state":"open","updated_at":"2022-08-26T08:10:50Z","created_at":"2021-06-30T18:06:07Z","creator_user_login":"aradalvand"}
{"number":6474,"title":"Unexpected behaviour with clientWidth and clientHeight bindings?","body":"### Describe the bug\n\nSo I'm not exactly sure I understand what's going on but I think this is a bug. So to preface. I noticed this when I had an embedded iframe video player which gave me the unwanted behavior. It restarted playing whenever what element that had clientWidth/Height bound to itself got resized. It doesn't look like the DOM remounts, however it feels like it.\r\n\r\nLooking at the repl you can see that afterUpdate is callen on every resize. According to the tutorial it says \r\n\r\n> These bindings are readonly — changing the values of w and h won't have any effect. \r\n\r\nSo just the fact that afterUpdate is called should be an indicator that something isn't right. \n\n### Reproduction\n\nhttps://svelte.dev/repl/89b195d8a5994c499be841c55ad46d05?version=3.38.3\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nwindows 10, chrome, firefox\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2021-07-01T09:06:12Z","created_at":"2021-06-29T18:44:12Z","creator_user_login":"hjalmar"}
{"number":6469,"title":"`a11y-label-has-associated-control` error for control inside of component","body":"### Describe the bug\n\nThe `a11y-label-has-associated-control` linting error is raised whenever a nested control is contained in a child component. For example, if you have a custom component, `TextInput`, which renders an `<input />`, then this produces the \"no associated control\" error.\r\n\r\n```html\r\n<label>\r\n    A label\r\n    <TextInput />\r\n</label>\r\n```\r\n\r\nThis issue is similar to #5528, where this error is generated if the input is inside a conditional statement.\n\n### Reproduction\n\nThis REPL demonstrates the issue: https://svelte.dev/repl/8396b0b08a2d460da2d7e781cc0ee4b7?version=3.38.3\n\n### Logs\n\n_No response_\n\n### System Info\n\n```shell\nSystem:\r\n    OS: macOS 11.1\r\n    CPU: (6) x64 Intel(R) Core(TM) i5-8600 CPU @ 3.10GHz\r\n    Memory: 122.49 MB / 32.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 10.22.1 - ~/.nvm/versions/node/v10.22.1/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 6.14.6 - ~/.nvm/versions/node/v10.22.1/bin/npm\r\n  Browsers:\r\n    Chrome: 91.0.4472.114\r\n    Firefox: 89.0\r\n    Safari: 14.0.2\r\n  npmPackages:\r\n    svelte: ==3.36.0 => 3.36.0 \r\n    webpack: ^5.37.1 => 5.37.1\n```\n\n\n### Severity\n\nannoyance","state":"open","updated_at":"2022-12-04T18:15:30Z","created_at":"2021-06-29T05:51:34Z","creator_user_login":"nikmolnar"}
{"number":6442,"title":"svelte(a11y-label-has-associated-control) shows incorrectly when using if-statements","body":"**Describe the bug**\r\nThe warning `A11y: A form label must be associated with a control.` shows up even if the label has an associated input inside it, when if-statements are used. Example:\r\n```svelte\r\n<!-- A11y: A form label must be associated with a control. -->\r\n<label>\r\n    {#if true}\r\n        <input type=\"text\">\r\n    {/if}\r\n</label>\r\n\r\n<!-- No warning -->\r\n<label>\r\n    <input type=\"text\">\r\n</label>\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/ab0b74aea51c44f382d2378257406a66?version=3.38.3\r\n\r\n**Expected behavior**\r\nNo warning as long as every branch is guaranteed to have a form control.\r\n\r\nThis also goes for more complicated statements like:\r\n```svelte\r\n<label>\r\n    {#if condition1}\r\n        <input type=\"text\">\r\n    {:else if condition2}\r\n        <textarea></textarea>\r\n    {:else}\r\n        <select></select>\r\n    {/if}\r\n</label>\r\n```\r\n\r\n**Information about your Svelte project:**\r\nnpmPackages:\r\n    rollup: ^2.3.4 => 2.46.0\r\n    svelte: ^3.0.0 => 3.38.1\r\n\r\n**Severity**\r\nGiven the first workaround (below), not very severe. Minor inconvience. If I couldn't disable the warning it would've been near unbearable to code with it since the warning is on every single line of the label element (which wraps everything).\r\n\r\nThat being said, when ignoring the warning it does open up to actually making mistakes by having some branch of the if-statement not including a form control.\r\n\r\n**Workarounds**\r\n1. Ignore it with a comment\r\n    ```svelte\r\n    <!-- svelte-ignore a11y-label-has-associated-control -->\r\n    <label>\r\n        {#if true}\r\n            <input type=\"text\">\r\n        {/if}\r\n    </label>\r\n    ```\r\n\r\n2. If you only have one control (or all of them share the same id)\r\n    ```svelte\r\n    <label for=\"myControl\">\r\n        {#if true}\r\n            <input type=\"text\" id=\"myControl\">\r\n        {/if}\r\n    </label>\r\n    ```","state":"open","updated_at":"2021-10-28T00:23:48Z","created_at":"2021-06-24T20:13:58Z","creator_user_login":"MarcusOtter"}
{"number":6436,"title":"Error in shrinking spaces between nodes","body":"**Describe the bug**\r\nThe same code gives different result depends of outer text\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/4fcd9f4e803246f48cd55b934ffbec18?version=3.38.3\r\n\r\n**Additional context**\r\nSvelte 3.38.3, 3.44.3\r\n","state":"open","updated_at":"2021-12-21T14:03:55Z","created_at":"2021-06-24T10:02:36Z","creator_user_login":"lega911"}
{"number":6440,"title":"Error: offset is longer than source length w/ Svelte v3.38.3","body":"Since the update to the latest Svelte version (3.38.3) an error is thrown from Vite when a request comes in.\r\n\r\n**Logs**\r\n```shell\r\n$ svelte-kit dev --port 8000\r\n\r\n  SvelteKit v1.0.0-next.116\r\n\r\n  local:   http://localhost:8000\r\n  network: not exposed\r\n\r\n  Use --host to expose server to other devices on this network\r\n\r\n\r\noffset is longer than source length!\r\nError: offset is longer than source length!\r\n    at numberToPos (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:4234:15)\r\n    at formatError (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44611:24)\r\n    at TransformContext.error (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44591:19)\r\n    at Object.transform (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44799:25)\r\n    at async transformRequest (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:60267:29)\r\n    at async instantiateModule (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:69930:10)\r\n```\r\n\r\nI traced it to an error in one of my style blocks not displaying because the offset/source length is incorrect:\r\n```shell\r\nERR:: CompileError [ValidationError]: :global(...) must contain a single selector\r\n    at error (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:16752:19)\r\n    at Component.error (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:29036:9)\r\n    at Selector$1.validate (file:///<path/to/the/project>t/node_modules/svelte/compiler.mjs:27872:35)\r\n    at file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:28369:22\r\n    at Array.forEach (<anonymous>)\r\n    at Rule$1.validate (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:28368:24)\r\n    at file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:28650:19\r\n    at Array.forEach (<anonymous>)\r\n    at Stylesheet.validate (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:28649:23)\r\n    at new Component (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:28828:25) {\r\n  code: 'css-invalid-global-selector',\r\n  start: { line: 89, column: 10, character: 2845 },\r\n  end: { line: 89, column: 58, character: 2893 },\r\n  pos: 2845,\r\n  ...\r\n  frame: '87:   }\\n' +\r\n    '88: \\n' +\r\n    '89:   .slider :global(.noUi-handle:after, .noUi-handle:before) {\\n' +\r\n    '              ^\\n' +\r\n    '90:     left: 10px !important;\\n' +\r\n    '91:     top: 4px !important;',\r\n  ...\r\n```\r\n\r\nThe offset is 2845 (offset/pos) but the source length is 2417 in that case.\r\nhttps://github.com/vitejs/vite/blob/460d1cda317e4c4d03434f2b3d8de9152620005b/packages/vite/src/node/utils.ts#L252\r\n```js\r\nexport function numberToPos(\r\n  source: string,\r\n  offset: number | { line: number; column: number }\r\n): { line: number; column: number } {\r\n  if (typeof offset !== 'number') return offset\r\n  if (offset > source.length) {\r\n    throw new Error('offset is longer than source length!')\r\n  }\r\n  const lines = source.split(splitRE)\r\n```\r\n\r\n**Information about your SvelteKit Installation:**\r\n```shell\r\nSystem:\r\n    OS: macOS 10.15.4\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n    Memory: 367.08 MB / 16.00 GB\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.0.0 - ~/.nvm/versions/node/v16.0.0/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 7.10.0 - ~/.nvm/versions/node/v16.0.0/bin/npm\r\n  Browsers:\r\n    Brave Browser: 76.0.68.132\r\n    Chrome: 91.0.4472.114\r\n    Chrome Canary: 93.0.4551.0\r\n    Edge: 91.0.864.54\r\n    Firefox: 72.0.2\r\n    Firefox Developer Edition: 89.0\r\n    Safari: 13.1\r\n  npmPackages:\r\n    @sveltejs/adapter-node: ^1.0.0-next.27 => 1.0.0-next.27 \r\n    @sveltejs/adapter-static: ^1.0.0-next.13 => 1.0.0-next.13 \r\n    @sveltejs/kit: ^1.0.0-next.116 => 1.0.0-next.116 \r\n    svelte: 3.38.3 => 3.38.3 \r\n```\r\n\r\nLet me know if this info is sufficient and reproducible with any SvelteKit app with the latest Svelte version + multiple selectors in a single `:global` like `:global(.foo, .bar)` or a repro is needed.\r\n\r\nPS: Not sure if the bug report is correct here or should be created in the svelte or vite-plugin-svelte repo.","state":"open","updated_at":"2021-08-29T11:47:54Z","created_at":"2021-06-23T13:01:52Z","creator_user_login":"akaufmann"}
{"number":6432,"title":"Intercept and suppress specific errors","body":"<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm using a library named [three-elements](https://github.com/hmans/three-elements) that creates custom elements with directives, one of those directives are `ref:xxx`. However this creates an unnecessary complication as Svelte emits a deprecation error with no way of suppressing it.\r\n\r\n```\r\nThe ref directive is no longer supported — use `bind:this={xxx}` instead\r\nParseError: The ref directive is no longer supported — use `bind:this={xxx}` instead\r\n    at error (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16746:19)\r\n    at Parser$1.error (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16822:9)\r\n    at read_attribute (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16037:20)\r\n    at tag (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:15856:25)\r\n    at new Parser$1 (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16781:21)\r\n    at parse$3 (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16913:20)\r\n    at compile (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:30006:17)\r\n    at compileSvelte (file:///home/xxx/workspace/node_modules/@sveltejs/vite-plugin-svelte/dist/index.js:264:20)\r\n    at async TransformContext.transform (file:///home/xxx/workspace/node_modules/@sveltejs/vite-plugin-svelte/dist/index.js:873:27)\r\n    at async Object.transform (/home/xxx/workspace/node_modules/vite/dist/node/chunks/dep-bc228bbb.js:44765:30)\r\n```\r\n\r\n**Describe the solution you'd like**\r\nA way to access and suppress individual error types. The purpose for this error is to give deprecation notice, but it does needlessly occupy a directive that might collide with other libraries. `ref` is not uncommon as a directive.\r\n\r\n**Describe alternatives you've considered**\r\nI've put forward a suggestion to `three-elements` of prefixing their directive to avoid collisions with frameworks/libraries.\r\n\r\n**How important is this feature to you?**\r\nAs it stands right now, I cannot use this library to create declarative 3d scenes.\r\n\r\n**Additional context**\r\nThe error in svelte code base: https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts#L394-L399","state":"open","updated_at":"2021-12-24T10:28:12Z","created_at":"2021-06-23T09:44:19Z","creator_user_login":"Kansuler"}
{"number":6396,"title":"onMount unmount callback does not fire off for nested if-block components","body":"**Describe the bug**\r\nonMount unmount callback function does not fire off when used for in if-block nested component of  unmounted parent (which is mounted in my case by svelte:component, didn't test it out using if-blocks). \r\n\r\nReferring to the documentation when looking at `onDestroy` it says that it `Schedules a callback to run immediately before the component is unmounted.` but we cannot see unmount callback output anything (as `run immediately before the component is unmounted` implies unmount event) in the REPL logs.\r\n\r\nAnalyzing the output we can see that:\r\n- onDestroy callback is not followed by an unmount callback from onMount()\r\n- onDestroy callback is fired off even before mounting the component. \r\n- onMount unmount callback never fires off\r\n\r\nThe issue may be related to #5268 but the REPL doesn't even use transitions although I saw some transition code get generated in output JS.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/9b9fca1b9c5049cbabaa47a71afb7212?version=3.38.2\r\n\r\nClick Prepare then Detonate and look at the console\r\n\r\nAs we can see console outputs\r\n\r\n\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 unmount\"\r\n    \"Inner2 mount\"\r\n    \"Inner2 unmount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 mount\"\r\n\r\n\r\n**Expected behavior**\r\nThe Inner1 component should fire off onMount -> onDestroy -> onUnmount (onMount returned function)\r\n\r\nREPL should output probably in this case\r\n\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 unmount\"\r\n    \"Inner2 mount\"\r\n    \"Inner2 unmount\"\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 ummount\"\r\n\r\nor in perfect world don't even mount Inner1 component on changing the parent component (the inner = 1 before _boom() is intended) but it probably is more of a feature request than bug report.\r\n\r\n**Workaround**\r\nUse onDestroy with tick() instead of function returned from onMount \r\n\r\n**Severity**\r\nThe bug can be really dangerous if you are not aware of this behaviour - subscribing to events and not unsubscribing on unmount may lead to hard to detect problems. The issue can be workaround so it's not a showstopper.","state":"open","updated_at":"2023-06-23T06:41:10Z","created_at":"2021-06-10T02:26:35Z","creator_user_login":"jkbz64"}
{"number":6389,"title":"Bug involving transition, value binding and \"bind:this\"","body":"**Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.**\r\n\r\nNo, it's about version 3.38.2\r\n\r\n**Describe the bug**\r\n\r\nThe reference to a child component is set to `null` after it is transitioned out, replaced by another one, and you interact with that new child. Here is a [REPL](https://svelte.dev/repl/3c86b93d4b6142979b12126cd81ed642?version=3.38.2) to try it out. The text at the very bottom indicates whether `childNode` (which is bound to a component via `bind:this`) is `null` or not. The steps to reproduce are:\r\n\r\n1. Click the button\r\n2. Click into the input that appears\r\n3. Type something\r\n4. The text changes to \"null\"\r\n\r\nI can reliably reproduce it in Firefox 89 and Safari 14.1.1, both on macOS 10.14.6\r\n\r\n**Expected behavior**\r\n\r\nThe node reference should always point to one of the components, and never be `null`\r\n\r\n**Severity**\r\n\r\nModerately severe, since there is a workaround, which is not to use transitions anywhere. I'm building an interface that has a static left column and different components for the main area. Having them fade into each other (as well as some animations inside them) is at the very least nicer than abrupt changes, so I would like to keep the transitions in place.\r\n\r\nOne of the components stores user input that I would like to notify the user about if they didn't save their changes. I do that by calling a function exposed via `export const function` before the component switch happens. At that time, the child reference (its `bind:this` value) should always point to the component. Instead, because of this bug, it turns to `null` sometimes and then the UI breaks because I'm trying to call a method on `null`:\r\n\r\n```\r\nUncaught TypeError: childNode is null\r\n```","state":"open","updated_at":"2021-09-01T09:08:06Z","created_at":"2021-06-08T10:01:14Z","creator_user_login":"elpres"}
{"number":6381,"title":"Space after conditional tag is erroneously gobbled up","body":"**Describe the bug**\r\n\r\nThe space in markup after a conditional is gobbled up. It should be left alone.\r\n\r\n**Logs**\r\n\r\nNone\r\n\r\n**To Reproduce**\r\n\r\n```svelte\r\n<script>\r\n  let truthy = true\r\n</script>\r\n\r\n<h1>Always{#if truthy} true{/if}!</h1>\r\n```\r\n\r\nhttps://svelte.dev/repl/4c6d1164f6434abaadf5c062b643d54c?version=3.38.2\r\n\r\n**Expected behavior**\r\n\r\nWhen truthy, the markup output should be:\r\n\r\n```html\r\n<h1>Always true!</h1>\r\n```\r\n\r\nInstead, it is:\r\n\r\n```html\r\n<h1>Alwaystrue!</h1>\r\n```\r\n\r\nThis is true even if the text is surrounded by a tag, e.g.\r\n\r\n```svelte\r\n<h1>Always{#if truthy}<span> true</span>{/if}!</h1>\r\n```\r\n\r\nWhen falsy, the output is as expected:\r\n\r\n```html\r\n<h1>Always!</h1>\r\n```\r\n\r\n**Workaround**\r\n\r\nAlthough not exactly equivalent, you can work around the issue by using a non-breaking space instead:\r\n\r\n```svelte\r\n<h1>Always{#if truthy}&nbsp;true{/if}!</h1>\r\n```\r\n\r\nThis will have the (possibly unwanted) side-effect of making your sentence not break at that point but it will maintain proper letter spacing.\r\n\r\nIf you can sacrifice a tiny bit of variance in proper spacing, you can also use an en space:\r\n\r\n```svelte\r\n<h1>Always{#if truthy}&#8197;true{/if}!</h1>\r\n```\r\n\r\n**Stacktraces**\r\n\r\nNot applicable.\r\n\r\n**Information about your Svelte project:**\r\n\r\nSee REPL.\r\n\r\n**Severity**\r\n\r\nQuite fundamental when formatting HTML output. Encountered while creating a Mad Libs-style (sentence-style) form.\r\n\r\n**Additional context**\r\n\r\nNot applicable.\r\n","state":"open","updated_at":"2021-12-17T17:24:49Z","created_at":"2021-06-04T10:13:29Z","creator_user_login":"aral"}
{"number":6373,"title":"Support trailing $ name convention for stores (Observables)","body":"The RxJS community has adopted trailing `$` for an observable name. Svelte supports leading `$` is naming the value of the store (observable).\r\n\r\nIt strikes me that the trailing `$` on the store would be more consistent with standard javascript naming practices, especially when working with large codebase having helper functions.\r\n\r\nSvelte\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount = writable(0)\r\n</script>\r\nYou have {$amount} comments.\r\n```\r\n\r\nRxJS\r\n\r\n```svelte\r\n<script>\r\nimport { onMount, onDestroy } from 'svelte'\r\nimport { of } from 'rxjs'\r\nconst amount$ = of(0)\r\nlet amount,subscription\r\nonMount(()=>subscription = amount$.subscribe(a=>amount = a))\r\nonDestroy(()=>supscription.unsubscribe())\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\nYes, the svelte example has less code & is easier to read, however it can be improved by also supporting trailing `$`.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\n## Helper functions in javascript modules\r\n\r\nCreating a function that takes a store or a value of a store as an argument, the programmer is faced with a quandary. What name should the value variable be?\r\n\r\nShould it be `amount` or `$amount`? In normal javascript & with observables having the trailing `$`, the name of the value would be `amount`. With the value having the `$` prefix, the name of the value is `$amount`. However, this does not work well when passing the value as a property of an object. Should all props also be named `$amount`? What about api calls? As some point, the name `amount` will be required to reperesent the value, which contradicts svelte's naming convention.\r\n\r\n## Solution\r\n\r\nSupport both the prefix `$` for values and the suffix `$` for stores. Both naming conventions can be supported by the svelte compiler.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\nconst name = writable('Mr Bean')\r\n</script>\r\n{$name} has {amount} beans.\r\n```\r\n\r\nThis will fix naming collision by making the store have the `$` suffix. The store is not passed data & if it is, would follow the convention set by RxJS. Also the additive effect of the `$` suffix implies that the observable characteristic is wrapping the value, instead of infering from the store.\r\n\r\n## Current implementation of svelte\r\n\r\nThe `$` suffix can be added to the store, but the `$` prefix of the value is still required.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\nconst name = writable('Mr Bean')\r\n</script>\r\n{$name} has {$amount$} beans.\r\n```\r\n\r\nAdding support for the `$` store suffix stripping off the `$` would fix the naming issues of support functions on the value of the store. \r\n","state":"open","updated_at":"2023-01-24T18:49:42Z","created_at":"2021-05-30T01:22:51Z","creator_user_login":"btakita"}
{"number":6360,"title":"Manually mount slots","body":"**Is your feature request related to a problem? Please describe.**\r\nI have a virtual list component `VirtualList` where it takes a little time to load each item, so that this effect is quite prevalent when scrolling:\r\n\r\nhttps://user-images.githubusercontent.com/11315492/119281916-e10ed180-bc37-11eb-8c94-b456c9b36e5e.mp4\r\n\r\nI imagine the issue here is that whenever a new item becomes visible, all visible items are re-rendered.\r\n\r\n**Describe the solution you'd like**\r\nThe fastest virtual list I've seen is VSCode's. It works by appending new elements to the view without being concerned about what order they're in, and positioning them using `position: absolute`:\r\n<img width=\"444\" alt=\"Screen Shot 2021-05-24 at 2 41 01 AM\" src=\"https://user-images.githubusercontent.com/11315492/119282328-95f5be00-bc39-11eb-83b0-67a3457c9a1d.png\">\r\n\r\nThe best way I can see to accomplish this is to be able to manually mount Svelte slots from JS.\r\n\r\nAnother possible solution would be to have an `#each` block where you could add or remove items without re-rendering any items.\r\n\r\n**Describe alternatives you've considered**\r\n1. Mounting the child components manually, instead of using slots. Should be possible, but I believe it would make it significantly more complicated to interact between the `Container` component and the `Item` components (keyboard events, drag-and-drop events, row selection), as well as sharing styles between them. Keeping slots would be great.\r\n2. I could make a big soup of a Svelte component that includes both the container and the virtual list logic\r\n3. Tried using `<svelte:options immutable/>`, but doesn't seem like something that would work here.\r\n\r\n**How important is this feature to you?**\r\nQuite important, but I understand it's an edge case.","state":"open","updated_at":"2022-10-10T21:50:43Z","created_at":"2021-05-24T13:40:36Z","creator_user_login":"probablykasper"}
{"number":6341,"title":"Uncaught TypeError: Cannot set property 'value' of undefined","body":"## **Update: Read third comment**\r\n\r\n**Describe the bug**\r\nI have an object array, binding it to each block, works well if i input values in any field that is not in the last row if is the first element to be inputed\r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/78880943/118666226-3bc7a980-b7b0-11eb-8331-d5a078f0b1b0.png)\r\n![image](https://user-images.githubusercontent.com/78880943/118669154-c01b2c00-b7b2-11eb-8677-2e0c92be8d92.png)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/06853911b2db43beb915716e8cf38faf?version=3.38.2\r\n\r\n\r\nhttps://user-images.githubusercontent.com/78880943/118670391-ceb61300-b7b3-11eb-9853-5e9903136cfb.mp4\r\n\r\n\r\n\r\n**Expected behavior**\r\nExpected to correct binding the user input without throwing exception\r\n\r\n**Information about your Svelte project:**\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (6) x64 Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz\r\n    Memory: 8.62 GB / 15.81 GB\r\n  Binaries:\r\n    Node: 14.15.5 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.11 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers: {}\r\n  npmPackages:\r\n    rollup: ^2.33.1 => 2.40.0\r\n    svelte: ^3.29.6 => 3.35.0\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n- Chrome 90.0.4430.212 (Build oficial) (64 bits) (cohort: Stable)\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n- Windows 10 OS Version 2009 (Build 19042.685)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n- Using Svelte 3.29.6 but in REPL with version 3.38.2 still throws the error.\r\n\r\n- Whether your project uses Webpack or Rollup\r\n- Rollup ^2.33.1\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nIt's annoying to create an extra field, write in the previous field to be able to write in the field was meant to do it. It is not blocking the usage of svelte entirely, happy to work with it, thank you guys.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\nEither using simple object array or stores, the problem persist, \r\n","state":"open","updated_at":"2021-11-05T13:16:20Z","created_at":"2021-05-18T14:35:56Z","creator_user_login":"moisesGarmendia"}
{"number":6336,"title":"Feature Request: Use transitions without removing the element from the DOM","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nIt seems like Svelte transitions require that the element be removed from the dom when it fades out and re-attached when it fades in.\r\n\r\nI guess it's probably fine if the element is very simple, but usually, it's not. For example, whenever I just want to show/hide a complex sidebar menu, the dom contents of that menu have to be recreated every time it's displayed (and some other stuff like event listeners, js logic has to re-run, etc.).\r\n\r\n**Describe the solution you'd like**\r\nExtending Svelte transition API to allow to fade an element in/out of view without removing/re-attaching it. So for example, instead of removing the element, set a `display: none;` style, or control the zIndex. (The latter would also be very nice, while we are at it, as in some extreme scenarios it's better performance if the element is already visible).\r\n\r\nThe ideal, most universal solution would be to let the user decide what should happen to the element on transitionStart / transitionEnd and allow that the element to stay without being removed.\r\n\r\nSo for example, this is how it's done now - the element will be removed:\r\n```\r\n{#if visible}\r\n\t<p transition:fly=\"{{ y: 200, duration: 2000 }}\">\r\n\t\tFlies in and out\r\n\t</p>\r\n{/if}\r\n```\r\n\r\nThis is how it could look like with controlling the display property - which would be done by supplying `visible` property to transition properties:\r\n```\r\n<!--Supplying the `visible` property will make the element appear / disappear\r\n      using 'display: none' visibility-->\r\n<p transition:fly=\"{{ visible, y: 200, duration: 2000 }}\">\r\n\tFlies in and out\r\n</p>\r\n```\r\n\r\nAdvanced usage: define the way in which the element should be shown/hidden.\r\n```\r\n<script>\r\nconst show = (el) => { el.style.zIndex = 10; }\r\nconst hide = (el) => { el.style.zIndex = -1; }\r\n</script>\r\n\r\n<!--Using show, hide properties means that the visibility of the element\r\n      is to be handled by the user (`display: none;` will not be applied)-->\r\n<p transition:fly=\"{{ visible, show, hide, y: 200, duration: 2000,  }}\">\r\n\tFlies in and out\r\n</p>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nDoing it manually, perhaps Svelte animations API could help (I haven't gotten to it yet).\r\n\r\n**How important is this feature to you?**\r\nOf medium importance.  It means that I cannot use Svelte transitions API (which seems awesome). It also seems to be one of those rare cases where Svelte could use some performance optimization.\r\n","state":"open","updated_at":"2023-03-01T13:36:05Z","created_at":"2021-05-17T09:20:01Z","creator_user_login":"mckravchyk"}
{"number":6332,"title":"fix: address reactivity glitches","body":"Fixes #6328 \r\n\r\nThis PR just suggests an idea. Seems like it works, may be useful.\r\n\r\nIt was tested after applying #6331 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2021-05-16T03:04:39Z","creator_user_login":"subtle-byte"}
{"number":6328,"title":"Prevents glitches?","body":"**Describe the bug**\r\nI was exploring the [test](https://github.com/sveltejs/svelte/blob/0a3be1d04128620bcb306566992eaa85d7944832/test/store/index.js#L195) and I replaced:\r\n```ts\r\nconst firstname = derived(lastname, n => n === 'Jekyll' ? 'Henry' : 'Edward');\r\n```\r\nwith:\r\n```ts\r\nconst firstname_first_letter = derived(lastname, n => n === 'Jekyll' ? 'H' : 'E');\r\nconst firstname = derived(firstname_first_letter, n => n === 'H' ? 'Henry' : 'Edward');\r\n```\r\nAnd I got the `[\"Henry Jekyll\",\"Henry Hyde\",\"Edward Hyde\"]` as the test result, while it seems like the `['Henry Jekyll', 'Edward Hyde']` is correct. Is it a bug?\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/9dee9f3797d24e20b159f677ef324530?version=3.38.2)\r\n\r\n**Expected behavior**\r\nSvelte prevents glitches (according to the test name - `prevents glitches`).\r\n","state":"open","updated_at":"2021-09-17T07:27:17Z","created_at":"2021-05-15T18:29:33Z","creator_user_login":"Heliconter"}
{"number":6326,"title":"Warning about complications with Block-level element bindings and `position: relative`","body":"Warning about complications with Block-level element bindings and `position: relative`\r\n\r\nI think the svelte compiler should warn about Block-level bindings.\r\n\r\n**Problem:**\r\n\r\nThere are situations where `bind:clientWidth/clientHeight/offsetWidth/offsetHeight` does not cause any problem.\r\n\r\nBut there are situations like:\r\n\r\nUsing or not using binding causes the items to DISPLAY differently. This is a problem.\r\nhttps://svelte.dev/repl/7bf5621911fe4719b22ec8c7161f4622?version=3\r\n![obraz](https://user-images.githubusercontent.com/16800535/118347396-5ea15600-b543-11eb-9696-c55b689d1be7.png)\r\n\r\n```\r\nwith <code>bind:clientWidth</code>:\r\n<div class=\"a\">\r\n  <div class=\"b\" bind:clientWidth>\r\n    <div class=\"c\"></div>\r\n  </div>\r\n</div>\r\n<br>\r\nvs without <code>bind:clientWidth</code>:\r\n<div class=\"a\">\r\n  <div class=\"b\">\r\n    <div class=\"c\"></div>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n  let clientWidth;\r\n</script>\r\n\r\n<style>\r\n  .a {\r\n    position: relative;\r\n    size: 40px;\r\n    width: 70px;\r\n    height: 70px;\r\n    border: 1px solid green;\r\n  }\r\n  .b {\r\n    margin: 30px;\r\n  }\r\n  .c {\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n    width: 50px;\r\n    height: 30px;\r\n    background: red;\r\n  }\r\n</style>\r\n```\r\n\r\n**Solution:**\r\n\r\nPerhaps the **Svelte compiler needs to detect situations and display WARNING**, where Block-level bindings are used in an intermediate element (class b), between a positioned element (class c) and an element with any relative position (class a).\r\nThe warning can be further narrowed down to the situation that the bound item (class b) has something like margin / padding / border etc. that distorts the position - because only then is it a problem.\r\n\r\nUnfortunately, you probably have to think about what other dependencies are disturbed by Block-level bindings and detect them.\r\n\r\n**Additional/only simple solution:**\r\n\r\nThere is only a link in the [documentation](https://svelte.dev/docs#Block-level_element_bindings) about \"technique used\". but there is nothing about the potential side effects. **There should be information about side effects in certain situations.**\r\n\r\n**Bonus words:**\r\n\r\nI don't know if there are other solutions in Svelte that cause unexpected problems, but you would also need to inform the developers about them.\r\n\r\n**Related Stuff:**\r\nhttps://github.com/sveltejs/svelte/blob/6d16e9260642b1fcc70fa4a24be9fd49985112d1/src/runtime/internal/dom.ts#L266\r\nhttps://github.com/sveltejs/svelte/blob/6d16e9260642b1fcc70fa4a24be9fd49985112d1/test/js/samples/bind-width-height/expected.js#L26","state":"open","updated_at":"2021-11-22T12:44:06Z","created_at":"2021-05-15T04:06:00Z","creator_user_login":"lukaszpolowczyk"}
{"number":6325,"title":"[AGAIN] Incorrect error message \"... received an unexpected slot \"default\".","body":"**Describe the bug**\r\n\r\n`received an unexpected slot \"XXXXXX\"` for all the slots which were used in the component.\r\n\r\n**Logs**\r\n\r\n```\r\nindex.mjs:1701 <ts-divider> received an unexpected slot \"default\".\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```html\r\n<div class=\"ts-divider\">\r\n    <!-- Text -->\r\n    {#if $$slots.default}\r\n    <div class=\"ts-divider__text\">\r\n        <div class=\"ts-divider__text__start\">\r\n            <div class=\"ts-divider__text__line\"></div>\r\n        </div>\r\n        <div class=\"ts-divider__text__center\">\r\n            <slot></slot>\r\n        </div>\r\n        <div class=\"ts-divider__text__end\">\r\n            <div class=\"ts-divider__text__line\"></div>\r\n        </div>\r\n    </div>\r\n    {/if}\r\n    <!-- / Text -->\r\n\r\n    <!-- Line Only -->\r\n    {#if !$$slots.default}\r\n    <div class=\"ts-divider__line\"></div>\r\n    {/if}\r\n    <!-- / Line Only -->\r\n</div>\r\n```\r\n\r\n**Expected behavior**\r\n\r\nNo warning message should appeared.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n```\r\nindex.mjs:1701 <ts-divider> received an unexpected slot \"default\".\r\nvalidate_slots @ index.mjs:1701\r\ninstance       @ Divider.svelte:132\r\ninit           @ index.mjs:1517\r\nDivider        @ Divider.svelte:18\r\n(anonymous)    @ Divider.svelte:18\r\n(anonymous)    @ Divider.svelte:18\r\n```\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10): **Chrome 90**\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc): **Ubuntu 19.10**\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): **^3.38.1**\r\n\r\n- Whether your project uses Webpack or Rollup: **Rollup**\r\n\r\n**Severity**\r\n\r\nIt's not immediate just annoying warning messages.\r\n\r\n**Additional context**\r\n\r\nRe-open an new issue from [Incorrect error message \"... received an unexpected slot \"default\". #4546](https://github.com/sveltejs/svelte/issues/4546)\r\n","state":"open","updated_at":"2022-01-13T11:53:04Z","created_at":"2021-05-14T00:50:55Z","creator_user_login":"YamiOdymel"}
{"number":6298,"title":"Unexpected / uneccessary store.set calls when binding values from a store","body":"**Describe the bug**\r\n\r\nWhen you `bind:` values from a store inside `#each` it will call `set` for every iterated item for no reason. I'm using this pattern a lot where I have a store (that is backed by `sessionStorage`, synced via `BroadcastChannel` and persisted via `fetch()`). I love how I can pass values from inside a store around, then child components can update them and everything magically works across windows and is persisted between app restarts (Electron).\r\n\r\nBut I've just ran into an edge case where I'm seeing a lot of completely unnecessary calls to `set`, causing pointless disk and network I/O. Since this is happening inside `#each` there can easily be dozens of `set` for each item I bind to.\r\n\r\n**To Reproduce**\r\n\r\nI wrapped the `set` method so it logs every call. When you open this REPL you'll see two `set` calls for no reason.\r\n\r\nhttps://svelte.dev/repl/1e967d0310c3428989dde2ec1bf70087?version=3.38.2\r\n\r\n**Expected behavior**\r\n\r\nThere is no reason to call `set` when there was no change.\r\n\r\n**Information about your Svelte project:**\r\n\r\nREPL 3.38.2\r\n\r\n**Severity**\r\n\r\nMedium. I'll probably have to workaround this by sprinkling some `fast-deep-equal` over my stores.","state":"open","updated_at":"2023-02-01T16:00:37Z","created_at":"2021-05-04T17:25:18Z","creator_user_login":"Prinzhorn"}
{"number":6254,"title":"$$props can include the default value?","body":"<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n```js\r\n// CompoentA.svelte\r\n<script>\r\n  export let span = 24\r\n</script>\r\n\r\n// ComponentB.svelte\r\n<script>\r\n  console.log($$props) // output {}, should be { span: 24 }??\r\n</script>\r\n<CompoentA></ComponentA>\r\n```\r\n\r\n**Describe the solution you'd like**\r\n$$props can includes the default value, the default value itself is equivalent to the parameter passed in CompoentB?\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI am writing a component library. In the case of many default parameters, the inability to parse the default value from $$props caused me a lot of trouble.\r\n\r\n```js\r\n  export let span = 24\r\n  export let offset = 0\r\n  export let pull = 0\r\n  export let push = 0\r\n  export let xs: ResponseParamter = {} as SizeObject\r\n  export let sm: ResponseParamter = {} as SizeObject\r\n  export let md: ResponseParamter = {} as SizeObject\r\n  export let lg: ResponseParamter = {} as SizeObject\r\n  export let xl: ResponseParamter = {} as SizeObject\r\n  export let style = ''\r\n  export let use = []\r\n\r\n  let clazz = ''\r\n  export { clazz as class }\r\n\r\n  let gutter: number = getContext('sele-plus-row')\r\n  let __classList = []\r\n  \r\n  $: {\r\n    const ret: string[] = []\r\n    const pos = ['span', 'offset', 'pull', 'push'] as const\r\n    pos.forEach((prop) => {\r\n      const size = $$props[prop] // $$props['span'] !== 24, i must mixin $$props with all default value.\r\n      if (typeof size === 'number' && size > 0) {\r\n        ret.push(prop !== 'span' ? `el-col-${prop}-${$$props[prop]}` : `el-col-${$$props[prop]}`)\r\n      }\r\n    })\r\n    const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const\r\n    sizes.forEach((size) => {\r\n      if (typeof $$props[size] === 'number') {\r\n        ret.push(`el-col-${size}-${$$props[size]}`)\r\n      } else if (typeof $$props[size] === 'object') {\r\n        const sizeProps = $$props[size]\r\n        Object.keys(sizeProps).forEach((prop) => {\r\n          ret.push(\r\n            prop !== 'span'\r\n              ? `el-col-${size}-${prop}-${sizeProps[prop]}`\r\n              : `el-col-${size}-${sizeProps[prop]}`,\r\n          )\r\n        })\r\n      }\r\n    })\r\n    // this is for the fix\r\n    if (gutter) {\r\n      ret.push('is-guttered')\r\n    }\r\n\r\n    __classList = ret\r\n  }\r\n```\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n🔥\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","state":"open","updated_at":"2021-12-01T15:29:51Z","created_at":"2021-04-28T16:34:18Z","creator_user_login":"cbbfcd"}
{"number":6249,"title":"bind:this on a transitioned element in an #each block does not properly update the bound array ","body":"**Describe the bug**\r\nWhen you dynamically bind elements in an `#each` block to an array, and those elements have a transition on them, the bound array is not kept in sync when elements are removed.\r\n\r\nThis effectively means I cannot use `bind:this` in an each block if elements will be removed and I want to transition them out.\r\n\r\n**Logs**\r\nn/a\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/6ef0eeb08bc84f268f37281846d836e5?version=3.37.0)\r\n\r\nThe above REPL renders an array (`vals`) with four items and a button to remove each item. Each `<li>` is dynamically bound to an element in the `items` array. The `items` array is rendered below the list to illustrate what items are being bound.\r\n\r\nWhen you remove the bottom element (\"orange\") from the list, `items` is not updated. As you continue to remove elements from bottom-to-top, `items` stays one step behind and is out-of-sync.\r\n\r\n`items` is kept in sync if you remove items top-to-bottom. Also, if you remove the transition directive from the list item, the `items` array seems to be kept in sync.\r\n\r\nExample markup (see REPL for context):\r\n```html\r\n{#each vals as val, i (val)}\r\n\t<li \r\n\t\ttransition:scale\r\n\t\tbind:this={items[i]} \r\n\t\t>{val} <button on:click={() =>\r\n\t\tremove(val, i)}>Remove</button>\r\n\t</li>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nThe `items` array should be in sync with the current state of the DOM. If I remove \"orange\", the associated DOM element should be removed from the array (or replaced by null/undefined).\r\n\r\n**Stacktraces**\r\nn/a\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 88.0\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.37.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nThis issue is annoying. I can work around it by calling `querySelector`, but that doesn't feel like the most idiomatic way to do it in Svelte.\r\n\r\nFor context, I encountered this issue when trying to render a list of inputs. I need to bind to each input so that I can call `focus` on them when one of them is removed. Since the bound array is not kept in-sync, sometimes the wrong input is focused.\r\n\r\n**Additional context**\r\nhttps://github.com/sveltejs/svelte/issues/4869 seems related, but that's related to binding components instead of DOM elements.\r\n\r\nI encountered this bug when working on https://github.com/sveltejs/kit/pull/1207.\r\n","state":"open","updated_at":"2023-04-17T18:54:24Z","created_at":"2021-04-27T18:16:20Z","creator_user_login":"geoffrich"}
{"number":6143,"title":"Weird error (when modifying array) at Object.mount at update_keyed_each","body":"Hi,\r\n\r\nIve got this error:\r\n`Uncaught (in promise) TypeError: Cannot read property 'm' of null\r\n    at Object.mount [as m] (listElement.svelte:31)\r\n    at mount_component (index.mjs:1412)\r\n    at Object.mount [as m] (countryList.svelte:25)\r\n    at insert (index.mjs:1168)\r\n    at update_keyed_each (index.mjs:1210)\r\n    at Object.update [as p] (countryList.svelte:23)\r\n    at update_slot (index.mjs:91)\r\n    at Object.update [as p] (List.svelte:26)\r\n    at update (index.mjs:764)\r\n    at flush (index.mjs:732)`\r\n\r\nIt appears when I'm trying to add or remove stuff from an array.\r\nI'm trying to simulate user activity by modifying an array with an interval of five seconds. Every iteration an entry in the array is modified, like a user would have done this in the background. I'cant really trace it down to any specific circumstance, all I know it happens when the underlying array is modified. If you need any further information, let me know. Thanks for you time :)","state":"open","updated_at":"2023-01-07T13:48:30Z","created_at":"2021-03-28T12:13:33Z","creator_user_login":"m1212e"}
{"number":6134,"title":"Input element doesn't update with 1-way bind to value prop","body":"## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nWhen updating a variable via event value from on:input, and then 1-way binding the value of the <input/> element to the variable, it would be expected that when the variable updates, so does the input value.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nREPL link: https://svelte.dev/repl/6ea9d09354874ab79685d1131f7d7d77?version=3.35.0\r\n\r\n**Expected behavior**\r\nThe input updates when the variable bound to value changes\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nGoogle Chrome | 89.0.4389.90 (Official Build) (64-bit) (cohort: Stable)\r\n-- | --\r\nRevision | 62eb262cdaae9ef819aadd778193781455ec7a49-refs/branch-heads/4389@{#1534}\r\nOS | Windows 10 OS Version 2004 (Build 19041.867)\r\nJavaScript | V8 8.9.255.20\r\n\r\n\r\n\r\n**Severity:**\r\nSevere? I would really expect this to just work. I'd like to have an input with custom validation, and two-way binding causes unnecessary updates, because reacting to the two-way bound variable will always result in two updates (one from raw input update, the next via validation and reassignment to the variable)\r\n\r\n**Raw code:**\r\n\r\n```javascript\r\n<script>\r\n\tlet inputValue = 0;\r\n\tlet previousSafeValue = 0;\r\n\t\r\n\tconst onUpdate = (event) => {\r\n\t\tconst rawInput = event.target.value;\r\n\t\tif (isNaN(+rawInput)) {\r\n\t\t\tinputValue = previousSafeValue;\r\n\t\t} else {\r\n\t\t        // >>bug<< This does NOT update the input \r\n\t\t\tinputValue = previousSafeValue = Number(rawInput);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<input value={inputValue} on:input={onUpdate}/>\r\n```\r\n\r\n\r\n","state":"open","updated_at":"2021-12-21T02:15:04Z","created_at":"2021-03-27T03:57:32Z","creator_user_login":"jajabarr"}
{"number":6132,"title":"Split utility function out of crossfade transition","body":"**Is your feature request related to a problem? Please describe.**\r\nDocumentation does not make it clear how to implement our own custom functions with functionality similar to the crossfade transition.  I had to examine the source code to get a clear idea of how it worked.\r\n\r\n**Describe the solution you'd like**\r\nThe crossfade function can be easily broken out to two functions: one utility function for orchestrating the pairing of outgoing/incoming element and the actual crossfade.  If that utility function was exported and documented, it would considerably reduce the barrier to writing custom crossfade like interactions.\r\n\r\nPractical example, since that is far easier to explain than the general case:\r\nhttps://svelte.dev/repl/64e6b0c360bf4cb29704cca6b76f0f30?version=3.35.0\r\n\r\nIn the above REPL, the proposed utility function is located in `util.js`.  It accepts a single function, which is expected to return void or a transition object.  That function is passed the params:\r\n* from - HTMLElement transitioning out\r\n* to - HTMLElement transitioning in\r\n* intro - Boolean.  True if this is transitioning in, false otherwise\r\n* params - Object.  Parameters passed from the transition call in the template\r\n\r\nIn the above REPL, `crossfade.js` contains Svelte's existing crossfade animation, modified to use this utility, to verify that this does not introduce any breaking changes.  `cross-slide.js` shows a similar type of animation, using the same utility.\r\n\r\n🐃: `from` and `to` are simple and straight forward to teach.  I have had to flip them based on `intro` in every single use so far, however.\r\n\r\n**How important is this feature to you?**\r\nTrivial.  This proposal simply makes learning a feature a little easier, but that could be covered by blog posts, tutorials, etc.","state":"open","updated_at":"2021-12-25T11:11:19Z","created_at":"2021-03-26T22:26:42Z","creator_user_login":"WaltzingPenguin"}
{"number":6135,"title":"Svelte client and server components render text nodes differently","body":"**Describe the bug**\r\nText is moving up down\r\n\r\n\r\n**To Reproduce**\r\n[Repo](https://github.com/asv1/svelte_bug)\r\n\r\n**Expected behavior**\r\nText must not moving.\r\n\r\n**Information about your SvelteKit Installation:**\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of SvelteKit entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","state":"open","updated_at":"2022-01-29T03:08:20Z","created_at":"2021-03-26T20:05:03Z","creator_user_login":"asv7c2"}
{"number":6127,"title":"bind:clientWidth doesn't update for resizable element","body":"\r\n**Describe the bug**\r\n`<textarea bind:clientWidth>` doesn't update `clientWidth` when textarea is resized by user.\r\n\r\n**To Reproduce**\r\n[repl example](https://svelte.dev/repl/d5b39103f00b4176a5bf4eaad0d5e9f2?version=3.35.0)\r\n\r\n**Expected behavior**\r\nOn user resize of textarea, I expected the bound value to update. Instead, the values stay stuck at the initial size.\r\n\r\n**Severity**\r\nLow. This is easy to work around, it would just be cleaner if this worked. Or in the alternative, if the documentation made it clear this wouldn't work.\r\n\r\n","state":"open","updated_at":"2021-12-24T19:25:18Z","created_at":"2021-03-25T19:17:34Z","creator_user_login":"colah"}
{"number":6117,"title":"Inconsistent spacing between two copies of same code","body":"**Describe the bug**\r\n\r\nSpaces are added to the Svelte output causing the rendered text not to appear as expected (for example, looping over and outputting characters in a string).\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/86aa94c8350845e794b27ea9f75624e9?version=3.35.0\r\n\r\n```js\r\n<script>\r\n\tlet name = 'Hello world';\r\n</script>\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n```\r\n\r\n<img width=\"344\" alt=\"Screen Shot 2021-03-22 at 11 22 35 PM\" src=\"https://user-images.githubusercontent.com/1449259/112088074-7d97f300-8b65-11eb-8b64-0a7fc211307d.png\">\r\n\r\n**Expected behavior**\r\nThere should be no spaces in the output.\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nSafari 14.1\r\nEdge 89.0.774.57\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nmacOS 11\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\nSvelte 3.35.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nRollup, reproduced with Repl\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nThis bug is blocking a secondary feature of my website. I am building a preview of formatted text, and need to be able to loop over text and show each one in its own `<span>`. Only spaces in the source text should appear in the HTML.","state":"open","updated_at":"2021-07-12T07:01:58Z","created_at":"2021-03-23T03:20:25Z","creator_user_login":"ezfe"}
{"number":6115,"title":"Add info like stop and the fired store to cleanup an async derived store","body":"The derived store API docs states:\r\n\r\nIf you return a function from the callback, it will be called when \r\n\r\n1. the callback runs again, or \r\n2. the last subscriber unsubscribes.\r\n\r\nBut how to find out if it was called for reason one? or two?.  \r\n\r\nI created a [Repl](https://svelte.dev/repl/f13ac2c8fa3745abb37fe72af47c87e7?version=3.35.0) with a minor changed version of the derived store, which returns a value:\r\n- null : the last subscriber unsubscribes.\r\n- int : showing which store changed\r\n\r\nuse case:\r\n\r\nI make use of a RxJs data source: Firestore RxFire and use Svelte stores to cache and multicast the streamed data. But now when I switch between components I lose the subscription with te data source. Not a big deal, but if it is a lot of data ….\r\n\r\nBut there seeme to be no reason to unsubscribe from the stream if switching components if the stores did not change. The only good reason to unsubscribe and subscribe again is when the stream query changes. This stream query depends on one or more of the derived stores. \r\n","state":"open","updated_at":"2021-12-24T19:25:17Z","created_at":"2021-03-22T15:31:06Z","creator_user_login":"voscausa"}
{"number":6098,"title":"OuterWidth doesn't always update when resizing the window through fullscreen or maximizing","body":"**Describe the bug**\r\nIt appears the binding on the window for `outerWidth` doesn't update when you maximize the window, or go fullscreen. Note that this doesn't happen on all browsers. It appears certain actions simply don't trigger outerWidth to update. More specifically, if I run `<svelte:window bind:outerWidth />`, I do not see it update if I fullscreen or maximize the window. \r\n\r\nI'm on a Mac, and I find this happening only on specific browers: Chrome and Safari. It appears it cannot be reproduced on Firefox.\r\n\r\nI've noticed it's actually only semi-consistent on Chrome, but it 100% consistent on Safari.\r\n\r\n**To Reproduce**\r\n1. Use either Safari or Chrome (It's easily repro'd on Safari)\r\n2. Go to https://svelte.dev/repl/867c433fd36a463fa5bb257cec2c1766?version=3.35.0\r\n3. Manually resize the window to about half your screen. Take note of the OuterWidth value\r\n4. Either Fullscreen the window (On Mac, you would hit the green Fullscreen button in the top left), or maximize the window by double clicking the window's chrome\r\n5. Notice that the OuterWidth value has not updated, but all other window bindings have.\r\n\r\n**Expected behavior**\r\nThe outer width successfully updates for maximize and fullscreen operations\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Chrome 89.0.4389.90, Safari 14.0.3\r\n\r\n- Your operating system: OS X 10.15.7\r\n\r\n- Svelte version 3.35.0\r\n\r\n**Severity**\r\nNot too severe. There's an easy workaround to just listen for media query changes. Alternatively, innerWidth updates fine, so you could arguably react to innerWidth, and simply read window.outerWidth at that time with something like:\r\n```\r\n<script>\r\n  $: innerWidth: number;\r\n  $: outerWidth = typeof innerWidth === 'number' ? window.outerWidth : 0; \r\n</script>\r\n\r\n<svelte:window bind:innerWidth />\r\n```\r\n\r\n**Additional context**\r\nI'm happy to try and fix it myself but I'm not quite sure where this specific code lives","state":"open","updated_at":"2021-12-24T19:25:16Z","created_at":"2021-03-19T07:52:57Z","creator_user_login":"jguze"}
{"number":6085,"title":"Short syntax string parameter for directives","body":"**Is your feature request related to a problem? Please describe.**\r\nI try using integrate the third library (specifically, [https://github.com/tw-in-js/twind](https://github.com/tw-in-js/twind)) using svelte `use:action`, and the `parameters` pass to action is usually a string, in order to use directive I have to wrap the param in a bracket `{}` and a quote `''`. It seems much more than we actually need `use:action={'mystring-params'}`\r\n\r\n```js\r\n\tfunction tw(node: HTMLElement, twClass: string) {\r\n\t\tnode.className = twind(twClass)\r\n\t\treturn {\r\n\t\t\tupdate(twClass: string) {\r\n\t\t\t\tnode.className = twind(twClass)\r\n\t\t\t},\r\n\t\t\tdestroy() {},\r\n\t\t}\r\n\t}\r\n```\r\n```js\r\n\t<div use:tw={'flex items-center justify-center'}>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIt would be nice if svelte can support passing literal `string` params in the directive. Something like\r\n```js\r\n\t<div use:tw=\"flex items-center justify-center\">\r\n```\r\n\r\n**How important is this feature to you?**\r\nIn addition to the convenience short syntax, for example, I can take advantage of Tailwind IntelliSense.\r\n\r\n![image](https://user-images.githubusercontent.com/62163604/111064816-d40f8c80-84e8-11eb-936f-9da9d702b287.png)\r\n![image](https://user-images.githubusercontent.com/62163604/111064913-6f086680-84e9-11eb-9ac1-39a02d472e9c.png)\r\n\r\n","state":"open","updated_at":"2021-07-12T07:36:59Z","created_at":"2021-03-14T10:21:12Z","creator_user_login":"sondh0127"}
{"number":6082,"title":"Allow components to read compiler options","body":"**Is your feature request related to a problem? Please describe.**\r\nThere are times when a component needs to know how it is being compiled.   The default Sapper template uses `@rollup/plugin-replace` to populate `process.browser` and `process.env.NODE_ENV` and this works well, but only when the author of a component is also the one deploying it.\r\n\r\nWhen authoring components to be shared, relying on globals like these is ill advised.  There's no consistency on these names between projects (JungleJS uses `process.env.PRODUCTION` instead of `process.env.NODE_ENV === 'production'` for example).  A component can't try to detect these either since Rollup is doing string replacement, not defining them in the global scope.   Using `typeof process` will never work and just typing `process.env.NODE_ENV` in the code will prevent compilation if it is not defined.\r\n\r\n**Describe the solution you'd like**\r\nComponents should be able to access compiler options.  In particular, `generate`, `dev`, and `legacy` seem like the highest priority ones.\r\n\r\nFor discussion purposes, here are the two possible syntax solutions that have occurred to me:\r\n\r\n```<svelte:options bind:dev />```\r\n\r\n```import { dev } from 'svelte/config'```\r\n\r\nAs long as they end up compiling to `const dev = true`, then tree-shaking should still work and not increase client JS sizes.","state":"open","updated_at":"2021-12-24T19:25:15Z","created_at":"2021-03-12T22:29:21Z","creator_user_login":"WaltzingPenguin"}
{"number":6076,"title":"undefined slot props when component has slot attr","body":"Hello guys, I have encountered a problem with slot props, the scenario of the issue is:\r\nWhen component A ( which have slot element and export slot props ) inserted in the named slot of component B ( have both named and default slot elements ) using the slot property and try accessing component A's slot props will results in \"undefined\" values, however, everything works fine  if the component used as default slot\r\n\r\nI have created a reproduction of the issue in REPL, please check out this link:\r\nhttps://svelte.dev/repl/c1284a4af1eb48768a2e66ece04abe8d?version=3.35.0\r\n","state":"open","updated_at":"2023-06-11T22:02:50Z","created_at":"2021-03-11T23:47:13Z","creator_user_login":"ryu-man"}
{"number":6062,"title":"Put context=module content right after the imports","body":"**Is your feature request related to a problem? Please describe.**\r\nWe don't have const enum in TS support due to `isolatedModules` setting (more on this here: https://github.com/sveltejs/svelte-preprocess/issues/281).\r\nBut I want it so bad.\r\n\r\n**Describe the solution you'd like**\r\nA cool workaround would be to allow terser to inline const objects.\r\nHere's the code:\r\n```js\r\nconst States = { veryLongKey: 1, unusedKey: 2 }\r\n\r\nexport function blablah() {\r\n  return States.veryLongKey\r\n}\r\n```\r\nIf you run it in the [Terser REPL](https://try.terser.org/), it will turn it into this:\r\n```js\r\nconst n=1;export function blablah(){return n}\r\n```\r\n, which is more or less what const enum does (in reality it inlines the stuff, so there's no variables at all, but that doesn't matter imo).\r\n\r\nBut here's the problem. If you copy the compiled code from [this simple Svelte component](https://svelte.dev/repl/828b50323b91445c93df6592f692b25f?version=3.35.0), and run it through Terser, the `States` variable won't disappear! Here, it's highlighted in the image.\r\n![Снимок экрана 2021-03-08 в 12 03 02](https://user-images.githubusercontent.com/2846746/110298992-3f97bc80-8006-11eb-89a4-3e86a3c90df4.png)\r\nAnd the reason, I believe, is that the content of `context='module'` in the compiled version of the code goes way down to the `function instance`. But if you move the declaration up so it's right below the imports, it will be inlined! (highlighted as well)\r\n![Снимок экрана 2021-03-08 в 12 05 54](https://user-images.githubusercontent.com/2846746/110299378-a4ebad80-8006-11eb-8b1a-4c521313ebe4.png)\r\n\r\nAs far as I understand it shouldn't break anything in the components/runtime, but will help us get a little bit more optimized code. Free optimization, a very low hanging fruit and a functional replacement for `const enum`!\r\n\r\n**Describe alternatives you've considered**\r\nNone.\r\n\r\n**How important is this feature to you?**\r\nVery nice to have :)","state":"open","updated_at":"2021-12-24T19:25:14Z","created_at":"2021-03-08T09:12:36Z","creator_user_login":"dkzlv"}
{"number":6061,"title":"Duplicate slot name","body":"**Describe the bug**\r\nUsing multiple slots with the same name is now an error. Previously in version 3.34.0 this would render the slots.\r\n\r\n**To Reproduce**\r\nThe repl examples below are the same code, but with different svelte versions.\r\n\r\n * Error in 3.35.0: https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.35.0\r\n * Works in 3.34.0: https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.34.0\r\n\r\n**Expected behavior**\r\nWith all the work recently on slots, I'm not sure if this would be a regression or intended behavior moving forward.\r\n","state":"open","updated_at":"2021-12-19T18:17:34Z","created_at":"2021-03-06T18:35:33Z","creator_user_login":"larryosborn"}
{"number":6059,"title":"$$slots with slot forwarding","body":"**Describe the bug**\r\nIf you forward a slot (ex. `<slot name=\"label\" slot=\"label\" />`) the slot is always considered passed to the parent even if not passed to the child.  This breaks any conditional logic based on passed slots within the parent.\r\n\r\n**To Reproduce**\r\nHere is a REPL demonstrating the issue: https://svelte.dev/repl/d0cd92776d534349acf8e3e2deb074fa?version=3.35.0 (see console output and presence of red description `<div>`).\r\n\r\n**Expected behavior**\r\nReferencing the REPL, I would expect `$$slots.description` to not be present as a passed slot in the parent `Field` component, just like `$$slots.description` within `TextField`.  \r\n\r\n**Severity**\r\nThe only workaround is to duplicate code across components and not leverage composition with slot forward, which isn't terrible nor optimal.","state":"open","updated_at":"2022-05-06T11:13:38Z","created_at":"2021-03-06T15:17:57Z","creator_user_login":"techniq"}
{"number":6057,"title":"Allow slot='...' attribute on single top level element","body":"**Is your feature request related to a problem? Please describe.**\r\nI am working on a Component Library for myself. I would like to use the `slot='...'` attribute in a component without being a child of the component. Currently i get the following error: \r\n\r\n`Element with a slot='...' attribute must be a child of a component or a descendant of a custom element`\r\n\r\nREPL:\r\nhttps://svelte.dev/repl/9fbd3ef30184481a9edae5dbde4e574b?version=3.35.0\r\n\r\nCurrently i have to use the slot name on the Component itself like this:\r\n```html\r\n<Navbar>\r\n\t...\r\n\t<NavItem>\r\n\t\t<NavIcon slot=\"icon\">Icon 1</NavIcon>\r\n\t\t<NavLabel slot=\"label\">Label</NavLabel>\r\n\t</NavItem>\r\n\t...\r\n</Navbar>\r\n```\r\n\r\nThis feels somewhat redundant.\r\n\r\n**Describe the solution you'd like**\r\nI would like to be able to directly insert the children without the slot name, because the child itself knows the slot name:\r\n```html\r\n<Navbar>\r\n\t...\r\n\t<!-- I would like to use it like this, where the Component itself knows the slot -->\r\n\t<NavItem>\r\n\t\t<NavIcon>Icon 3</NavIcon>\r\n\t\t<NavLabel>Label 3</NavLabel>\r\n\t</NavItem>\r\n\t...\r\n</Navbar>\r\n```\r\n\r\nand in NavIcon.svelte:\r\n```html\r\n<div slot=\"icon\">\r\n\t<slot />\r\n</div>\r\n```\r\n\r\nTechnically the component **is** a child of a component or a descendant of a custom element, If the `slot='...'` attribute is restricted to be a single top level element of a component.\r\n\r\n**How important is this feature to you?**\r\nNice to have.\r\n","state":"open","updated_at":"2021-08-18T11:33:02Z","created_at":"2021-03-06T09:54:45Z","creator_user_login":"firewave-remo"}
{"number":6046,"title":"Add OR support to Class Directive","body":"**Suggested Solution:** Class Directive support for OR modifier for swapping classes easily (syntactic sugar).\r\n```\r\nclass:on|off={isOn}\r\n```\r\n**Problem and Alternatives:** We currently have to use a less optimal pattern such as a second directive like so:\r\n```\r\nclass:on={isOn} class:off={!isOn}\r\n```\r\nor something hacky like:\r\n```\r\nclass={`whatever-other-classes ${(isOn) ? 'on' : 'off'}`}\r\n```\r\n**Importance:** It isn't a deal breaker, but other directives have modifiers and it might not be a big deal to add and could possibly add some additional value to a directive people use all the time?\r\n\r\nThanks! Love ❤Svelte 👍\r\n\r\n**BONUS SUGGESTION Append and Remove Class Lists:** Have you considered:\r\n```\r\nclass+={ ...function that returns space separated classes to append to classlist if not exists... }\r\nclass-={ ...function that returns space separated classes to remove from classlist if not exists... }\r\n```\r\n(_i dislike css utility class libraries like tailwind, but that pattern would really reduce adding and removing bunches of utility classes.  again, thanks for the consideration._)","state":"open","updated_at":"2021-12-17T04:32:53Z","created_at":"2021-03-03T21:43:05Z","creator_user_login":"JoshuaJarman"}
{"number":6028,"title":"Ability to get reference of current component","body":"**Is your feature request related to a problem? Please describe.**\r\nAdd ability to get reference of current component. Something like bind:this, but bind:this works only for child component\r\n\r\nUse case:  \r\nI need to register active component to global handler. I have global menu, there is eg. command \"Refresh\" and this command should call \"export function refresh() {}\"  of current component\r\n\r\n**Describe the solution you'd like**\r\nProbably the best way would be some API, like getCurrentComponent(), similar to getContext() API. \r\n\r\n**Describe alternatives you've considered**\r\nThere are two workarounds:\r\nBind in parent component and pass down in prop:\r\n```svelte\r\n<script>\r\n  let activeComponent;\r\n</script>\r\n\r\n<Child instance={activeComponent} bind:this={activeComponent} />\r\n```\r\nOr a bit tricky solution using svelte:self  \r\nSee this REPL: https://svelte.dev/repl/3b32cfb5331843b286f02e2bb28a294a?version=3.33.0\r\n\r\n**How important is this feature to you?**\r\nThere are workarounds, but if would be nice to be able to do this directly\r\n","state":"open","updated_at":"2021-09-24T11:04:37Z","created_at":"2021-02-26T19:58:37Z","creator_user_login":"janproch"}
{"number":6024,"title":"Inconsistent bind:value behavior between <input/> and <select> on input event","body":"**Describe the bug**\r\non input event triggered by text input - binded value is actual value of input\r\non input event triggered by select - binded value is preceding (old) value of select\r\n\r\n**To Reproduce**\r\n\r\nRepl:\r\nhttps://svelte.dev/repl/b3d28512804e48a783736f3dfe29301d?version=3.32.3\r\n\r\nTo reproduce:\r\n1. in console, you see initial data\r\n2. select option opt1, you see 2x initial data (on select input - old data - without opt1 value)\r\n3. type 'a' to text input (new console line - actual data - with 'a' value)\r\n4. select option opt2, you can again see 2x preceding state (on select input - old data - opt1 value)\r\n\r\n**Expected behavior**\r\nConsistent behavior - binded value of select should be actual inside event handler.\r\n\r\n**Severity**\r\nAnnoying","state":"open","updated_at":"2021-12-24T15:16:20Z","created_at":"2021-02-25T16:03:55Z","creator_user_login":"mataslib"}
{"number":6023,"title":"impure expression in each block causes infinite loop in runtime","body":"**Describe the bug**\r\nimpure expression in each block causes infinite loop in runtime\r\n\r\n**Severity**\r\nlow priority\r\n\r\n**To Reproduce**\r\n[repl](https://svelte.dev/repl/132fec6757c94430beb3de6d4d4067ee?version=3.32.3) - uncomment `//state[key] = val;` to crash the browser tab\r\n\r\n```svelte\r\n<script>\r\n  const data = { k1: 'v1' };\r\n  const state = {};\r\n</script>\r\n{#each\r\n  ['k1'].map(key => {\r\n    const val = data[key];\r\n    console.log('step'); // should be called only once\r\n\r\n    //state[key] = val;\r\n    // this global assignment makes the each-expression impure\r\n    // and causes an infinite loop in the svelte runtime\r\n    // 'step' is printed over and over in the browser console\r\n\r\n    return [key, val];\r\n  }) as [key, val]\r\n}\r\n  <div>{key}: {val}</div>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nprobably this impurity should be detected by the svelte compiler as fatal error\r\nat least i cannot think of a use case where this should work\r\n\r\n**Possible Solutions**\r\n\r\n1\\. compile time\r\n\r\nparse the expression and look for assignments to non-local variables ([sample code](https://stackoverflow.com/a/66372081/10440128))\r\n\r\nthis would at least detect the simple case shown above.\r\nits harder to detect impure functions, that write to the global state\r\n\r\n2\\. runtime\r\n\r\nin the dev mode runtime, detect the infinite loop, stop it, and help to analyze (start devtools debugger?)\r\n\r\n**Related**\r\n\r\n* https://softwareengineering.stackexchange.com/questions/321794/programatically-determine-that-some-functions-are-pure\r\n* https://stackoverflow.com/questions/29858699/algorithmically-identifying-pure-functions-in-javascript\r\n   * i posted some sample code as a proof of concept\r\n* https://glebbahmutov.com/blog/test-if-a-function-is-pure-revisited/\r\n\r\n**Env**\r\nSvelte version 3.32.3\r\n","state":"open","updated_at":"2021-12-24T15:16:19Z","created_at":"2021-02-25T14:00:08Z","creator_user_login":"milahu"}
{"number":6016,"title":"beforeUpdate called twice with bound reference","body":"**Describe the bug**\r\nThis is a duplicate of #3290 which was closed, though the issue still exists. \r\n\r\n`beforeUpdate` is called twice when using `bind:this`.\r\n\r\n**Logs**\r\nNo errors were shown in logs\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/3381c9b40dc8441a8e4ebfa48fd8c178 (credit to beomy)\r\n\r\n```JS\r\n<script>\r\n  import { beforeUpdate, afterUpdate } from 'svelte';\r\n  let p;\r\n\r\n  beforeUpdate(() => {\r\n    console.log('beforeUpdate');\r\n  })\r\n\r\n  afterUpdate(() => {\r\n    console.log('afterUpdate');\r\n  })\r\n</script>\r\n\r\n<p bind:this={p}></p>\r\n```\r\n\r\nOpen the console to view the behavior. It produces:\r\n```\r\nbeforeUpdate\r\nafterUpdate\r\nbeforeUpdate\r\n```\r\n\r\n**Expected behavior**\r\nbeforeUpdate should only be called once during a single update cycle.\r\n```\r\nbeforeUpdate\r\nafterUpdate\r\n```\r\n\r\n**Severity**\r\nSeverity is **High**, as the the cycle should always end with an `afterUpdate` and not a repeated `beforeUpdate`.\r\n\r\n**Other**\r\nhttps://github.com/sveltejs/svelte/pull/3308, was made to potentially fix this issue but appears that it was never merged. The reason given was that it was fixed in 3.18.2, but the issue still exists. https://svelte.dev/repl/3381c9b40dc8441a8e4ebfa48fd8c178?version=3.18.2.\r\n","state":"open","updated_at":"2023-06-24T04:06:23Z","created_at":"2021-02-23T06:30:33Z","creator_user_login":"larbear"}
{"number":6001,"title":"Animate breaks when used along with fly transition","body":"**Describe the bug**\r\nThe `flip` animation and `fly` transition break when used together, not sure which one is causing the other to break however.\r\n\r\n**Logs**\r\nConsole is clear\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/46298c2514ef4215b06ddab7c7bc44e0?version=3.32.3\r\n\r\nIn the REPL, repeatedly click on `next` (fast) and this happens\r\n![Screen Shot 2021-02-18 at 10 50 27 PM](https://user-images.githubusercontent.com/46835608/108396014-6307ec80-723c-11eb-8a31-8eb3dcf14632.png)\r\n\r\n**Expected behavior**\r\nWith regards to the above screenshot, it's supposed to look something like this\r\n![Screen Shot 2021-02-18 at 10 50 33 PM](https://user-images.githubusercontent.com/46835608/108396088-774be980-723c-11eb-851f-8898b7e95f8a.png)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10): **Chrome 88.0.4324.96**\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc): **MacOS 11.2.1**\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): **3.32.3**\r\n\r\n- Whether your project uses Webpack or Rollup: **Rollup**\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nAnnoying and breaks the page\r\n\r\n**Additional context**\r\nIf required, I could share a more real world reproduction\r\n","state":"open","updated_at":"2023-01-19T02:54:26Z","created_at":"2021-02-18T17:34:19Z","creator_user_login":"shreyas44"}
{"number":6000,"title":"Event handlers held up by await in another handler?","body":"**Describe the bug**\r\nI'm seeing unexpected (to me) ordering of event handlers, and while the bug could be in my understanding rather than Svelte, I'd still like to correct it if that's the case. \r\n\r\n**To Reproduce**\r\nI've set up a small repro in [this REPL](https://svelte.dev/repl/e6651bc3057e41e090d843bc67f36f05?version=3.32.3). If you click outside the blue `div`, you'll see a series of messages that ends with \"outside.\" If you click inside it, you'll see \"inside.\" But if you click directly **on** the chevron, it will still show \"outside\" because by the time the click handler is looking at it, it's been removed from the DOM by the conditional layout.\r\n\r\n**Expected behavior**\r\nIn the bigger picture I'm trying to detect clicks outside of the colored `div`, and that can be accomplished in other ways, but I'm struggling to understand what's happening in the event loop here. By `await`-ing a `tick()` in the `buttonClickHandler` function, my understanding is that the body's click handler should get called before control returns to the button's. But if you look at the console, the button swap is happening before the body click. \r\n\r\n(The outcome here is that by the time the body click is looking at it's target, it's already been removed from the DOM, and so we can't meaningfully investigate it's place in the hierarchy.) \r\n\r\n**Severity**\r\nThis is more annoying and puzzling than problematic... there are easy workarounds for what I'm actually trying to accomplish, but I want to make sure my mental models of `await` and the event loop are correct. \r\n","state":"open","updated_at":"2021-12-24T15:16:17Z","created_at":"2021-02-18T07:36:56Z","creator_user_login":"sjml"}
{"number":5997,"title":"In some circumstances, having an exported property and a {:catch} error variable with the same name can cause weird behavior","body":"I encountered an issue which is very hard to reproduce outside of my application. I tried for quite some time now but I had to give up. I hope that the info I can provide is still helpful (the application itself can't be made public unfortunately).\r\n\r\nI have code like this:\r\n\r\n```html\r\n<script>\r\n  export let error\r\n  export let errDescription\r\n\r\n  import SomeOtherComponent from '.........'\r\n  import ErrorDisplay from '.........'\r\n\r\n  async function load () {\r\n    /* ... */\r\n  }\r\n</script>\r\n\r\n<SomeOtherComponent>\r\n  {#await load()}\r\n    ...\r\n  {:then}\r\n    <div>The error text is {error.text + (errDescription ? ` (${errDescription})` : '')}</div>\r\n  {:catch error}\r\n    <ErrorDisplay {error} />\r\n  {/await}\r\n</SomeOtherComponent>\r\n```\r\n\r\nNote that I have `error` both as exported property as well as a variable name for `{:catch}`. I'd expect the `error` inside the `catch` to be a different `error`, scoped to the `{:catch}` only.\r\n\r\nNormally, the exported property `error` contains an object like `{ text: 'Stuff' }`.\r\n\r\nI am observing a weird behavior now: Initially the component loads correctly, but in case the `{error.text + errDescription}` part is updated (for example because `errDescription` is changed), it crashes with `Cannot read property 'text' of undefined`.\r\n\r\nFurther debugging shows that the following happens:\r\n\r\n1: `ctx[4]` (`error` property) initially contains the correct value (the object with `text` in it) and this piece of code runs successfully, and the component is rendered fine:\r\n\r\n```javascript\r\n    \tlet t5_value = /*error*/ ctx[4].text + (/*errDescription*/ ctx[7]\r\n    \t? ` (${/*errDescription*/ ctx[7]})`\r\n    \t: \"\") + \"\";\r\n```\r\n2: This piece of code runs and messes up `ctx[4]` but without triggering another rendering:\r\n\r\n```javascript\r\n    \t\tp: function update(new_ctx, dirty) {\r\n    \t\t\tctx = new_ctx;\r\n\r\n    \t\t\t{\r\n    \t\t\t\tconst child_ctx = ctx.slice();\r\n    \t\t\t\tchild_ctx[4] = info_1.resolved; // <<< here, info_1 seems to be related to the {#await}\r\n    \t\t\t\tinfo_1.block.p(child_ctx, dirty);\r\n    \t\t\t}\r\n    \t\t},\r\n```\r\n\r\n<details>\r\n  <summary>Stack trace of code which overwrites `ctx[4]`</summary>\r\n\r\nupdate\t@\tbundle.js:34896\r\nupdate_slot\t@\tbundle.js:88\r\nupdate\t@\tbundle.js:7956\r\nupdate\t@\tbundle.js:452\r\nflush\t@\tbundle.js:420\r\nPromise.then (async)\t\t\r\nschedule_update\t@\tbundle.js:395\r\nmake_dirty\t@\tbundle.js:983\r\n(anonymous)\t@\tbundle.js:1018\r\n(anonymous)\t@\tbundle.js:42809\r\nset\t@\tbundle.js:6422\r\nupdate\t@\tbundle.js:6430\r\npush\t@\tbundle.js:7799\r\nopen\t@\tbundle.js:7814\r\nclick_handler_3\t@\tbundle.js:38798\r\nclick_handler_3\t@\tbundle.js:36981\r\n(anonymous)\t@\tbundle.js:382\r\nbubble\t@\tbundle.js:382\r\nclick_handler\t@\tbundle.js:2360\r\n</details>\r\n\r\n3: Whenever something else triggers an update, this piece of code runs and crashes because `ctx[4]` is now `undefined`:\r\n\r\n```javascript\r\n    \t\t\tif ((!current || dirty & /*error, errDescription*/ 144) && t5_value !== (t5_value = /*error*/ ctx[4].text + (/*errDescription*/ ctx[7]\r\n    \t\t\t? ` (${/*errDescription*/ ctx[7]})`\r\n    \t\t\t: \"\") + \"\")) set_data_dev(t5, t5_value);\r\n```\r\n\r\n<details>\r\n  <summary>Stack trace of crash</summary>\r\n\r\nbundle.js:34023 Uncaught (in promise) TypeError: Cannot read property 'text' of undefined\r\n    at Object.update [as p] (bundle.js:34023)\r\n    at Object.update [as p] (bundle.js:34897)\r\n    at update_slot (bundle.js:88)\r\n    at Object.update [as p] (bundle.js:7956)\r\n    at update (bundle.js:452)\r\n    at flush (bundle.js:420)\r\n</details>\r\n\r\nThe issues goes away if I rename the second `error` variable in the `{:catch}` block to something like `error2`.\r\n\r\n**Info about my project:**\r\nI'm on Windows 10 with WSL, and the \"browser\" is Electron 11.1.1 (Chromium 87.0.4280.88)\r\n\r\n```\r\n  System:\r\n    OS: Linux 4.4 Ubuntu 18.04.5 LTS (Bionic Beaver)\r\n    CPU: (4) x64 Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\r\n    Memory: 2.42 GB / 15.86 GB\r\n    Container: Yes\r\n    Shell: 4.4.20 - /bin/bash\r\n  Binaries:\r\n    Node: 14.15.4 - /usr/local/bin/node\r\n    Yarn: 1.12.1 - /usr/bin/yarn\r\n    npm: 6.14.7 - ~/.npm-global/bin/npm\r\n  npmPackages:\r\n    rollup: ^2.35.1 => 2.35.1\r\n    svelte: ^3.32.3 => 3.32.3\r\n```\r\n\r\n**Severity:** Not a problem, workaround available.\r\n","state":"open","updated_at":"2021-12-23T21:55:48Z","created_at":"2021-02-17T09:53:44Z","creator_user_login":"CherryDT"}
{"number":5996,"title":"Changing list with flip and scale animations causes overlap","body":"## Describe the bug\r\nWhen changing a list in a particular way, items with both `flip` animations and `scale` transitions position on top of each other:\r\n![Screenshot_2021-02-16 Svelte REPL](https://user-images.githubusercontent.com/3756309/108147470-e7236e00-709c-11eb-8edf-6ab635f77faa.png)\r\n\r\n## To Reproduce\r\n\r\nhttps://svelte.dev/repl/14baa8146a5e40778644b64d6c00a1e6?version=3.32.3\r\n\r\n## Expected behavior\r\n\r\nThe elements are positioned next to each other, like what happens when the delay on line 7 is increased to 300ms:\r\n![Screenshot_2021-02-16 Svelte REPL(1)](https://user-images.githubusercontent.com/3756309/108147558-120dc200-709d-11eb-90b9-4bc48d333031.png)\r\n\r\n## Information about your Svelte project\r\n\r\n- Firefox 85.0.2, Chrome 88.0.4324.150, WebKitGTK 2.30.5\r\n\r\n- Your operating system: Arch Linux\r\n\r\n- Svelte version: 3.32.1, 3.32.3\r\n\r\n- Whether your project uses Webpack or Rollup: Vite (Rollup), but occurs in REPL too\r\n\r\n## Severity\r\n\r\nNot too high if I manually decrease the animation duration to the point where a human can't click that fast.","state":"open","updated_at":"2023-01-21T21:06:20Z","created_at":"2021-02-17T02:28:39Z","creator_user_login":"lights0123"}
{"number":5972,"title":"Provide `print(ast: Ast): string` as compiler or svelte/printer","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nSvelte compiler has `parse(template: string): Ast` but  no `print(code: Ast) => template` printer.\r\n\r\nTypeScript compiler  (and some program languages) has this feature.\r\n\r\nhttps://learning-notes.mistermicheels.com/javascript/typescript/compiler-api/#programmatically-creating-ast-nodes.\r\n\r\n**Describe the solution you'd like**\r\n\r\nSvelte compiler provides `print(ast: Ast, optionalFormatter?: {js?: (code:string)=>string , ...} ): string`. \r\n\r\n```ts\r\nimport { parse, print } from \"svelte/compiler\";\r\nconst template = `<div {id}>foo</div>`\r\nconst parsed = parse(template);\r\nconst restored = print(parsed); // => same template\r\n```\r\n\r\n**How important is this feature to you?**\r\n\r\nI'm creating code collaboration editor for non-programmer and programmer on svelte template.\r\n\r\n![](https://i.gyazo.com/7d07de67b5f4fa368ebb529bb13a3cb8.png)\r\n\r\nLeft side pane is auto generated forms by svelte template AST for non-programmer. By rewriting this, I try to reflect svelte template by ast changes. but svelte compiler does not have printer feature.\r\n\r\nI think providing this feature helps svelte ecosystem.\r\n\r\n**Additional Context**\r\n\r\nhttps://github.com/sveltejs/prettier-plugin-svelte has code printer already. (fortunately for me, it works in browser!)\r\n\r\nBut that is `format(template: string): string`. I need formatter from ast.\r\n\r\nSo I hacked this for my workarround.\r\n\r\n```ts\r\nimport prettier from \"prettier/standalone\";\r\nimport produce from \"immer\";\r\nimport { parse } from \"svelte/compiler\";\r\nimport type { Ast } from \"svelte/types/compiler/interfaces\";\r\n// @ts-ignore\r\nimport * as sveltePlugin from \"prettier-plugin-svelte\";\r\n\r\nfunction printTemplate(ast: Ast) {\r\n  const overridePlugin = produce(sveltePlugin, (d: any) => {\r\n    d.parsers.svelte.parse = () => {\r\n      return { ...ast, __isRoot: true };\r\n    };\r\n  });\r\n  return prettier.format(\" dummy \", {\r\n    parser: \"svelte\",\r\n    plugins: [overridePlugin as any],\r\n  });\r\n}\r\n\r\nconst code = \"<div {id}>text</div>\";\r\nconst parsed = parse(code);\r\n// override ast\r\n// @ts-ignore\r\nparsed.html.children[0].name = \"span\";\r\nconst out = printTemplate(parsed);\r\nconsole.log(out); // <span {id}>text</span>\r\n```\r\n\r\nIt depend on prettier but formatting js and css are optional feature for template block. Formatters for js and css already exist but svelte html template block formatter does not exists now.\r\n\r\nI wrote simple printer (WIP) but I found prettier hack before I finished it.\r\n\r\nhttps://gist.github.com/mizchi/8d51d239bccec98408cffde5ef5b855d","state":"open","updated_at":"2021-12-24T15:16:15Z","created_at":"2021-02-09T10:47:29Z","creator_user_login":"mizchi"}
{"number":5967,"title":"This warning should be removed - A11y: Media elements must have a <track kind=\"captions\">","body":"To reproduce. Open svelte repl or any svelte project, add `audio` or `video` tag:\r\n\r\n```\r\n<audio src=\"https://media.w3.org/2010/07/bunny/04-Death_Becomes_Fur.mp4\" controls />\r\n```\r\n\r\nExpected:\r\n* it just works and compiler is happy\r\n\r\nWhat actually happens:\r\n* `A11y: Media elements must have a <track kind=\"captions\"> (1:0)`\r\n\r\nReasons this warning needs to be removed:\r\n\r\n* Browsers do not even support `<track>` for `<audio>` in any way whatsoever\r\n* Even for videos, `track` tags are not in any kind of widespread use\r\n* There's no accessibility value of empty `<track kind=\"caption\">` which linter wants people to add\r\n* As far as I can tell, what linter wants - `track` without `src` - [is not even valid according to spec!](https://www.w3.org/TR/2011/WD-html5-author-20110809/the-track-element.html) **\"The src attribute gives the address of the text track data. The value must be a valid non-empty URL potentially surrounded by spaces. This attribute must be present.\"**\r\n* (this is completely unlike empty `alt` attribute on `img` which is meaningfully different from no `alt` for historical reasons)\r\n* Vast majority of audio/video content does not have and will never have any kind of captions\r\n* For a lot of use cases, it wouldn't even make sense (same as a lot of imgs can't even have any meaningful nonempty alt)\r\n","state":"open","updated_at":"2023-04-12T01:16:17Z","created_at":"2021-02-06T19:26:28Z","creator_user_login":"taw"}
{"number":5953,"title":"Transition delay is cached and does not apply until after the next run","body":"**Describe the bug**\r\nAfter a transition has already been triggered, changing the delay of a transition does not take effect until after the transition has been triggered at least once.\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/48114260160b40d7bcb2f0d2dc148eb6?version=3.38.3\r\n\r\n1. Click `Menu` several times to toggle the default transition.\r\n**IMPORTANT:** The bug requires triggering the transition at least once before the delay is cached.\r\n2. Click `Set Delay to 1s`, the `delay` variable is now set to `1000`.\r\n3. Click `Menu` to toggle the transition, delay has not taken effect.\r\n4. Click `Menu` to toggle the transition, delay now takes effect.\r\n5. Click `Set Delay to 0`, the `delay` variable is now set to `0`.\r\n6. Click `Menu` to toggle the transition, 1s delay still applies.\r\n7. Click `Menu` to toggle the transition, delay is now updated.\r\n\r\n**Expected behavior**\r\nI expect the delay to apply immediately, or at least applied after I do `await tick()`.\r\n\r\n**Information about your Svelte project:**\r\nSvelte: 3.32.1, 3.38.3\r\nTested Browsers:\r\n- Edge: Chromium (88.0.705.50)\r\n- Chrome: 88.0.4324.104\r\n- Firefox Dev: 86.0b5 (64-bit)\r\n\r\n**Severity**\r\nLow\r\n","state":"open","updated_at":"2021-12-28T22:09:15Z","created_at":"2021-02-03T08:40:37Z","creator_user_login":"GrygrFlzr"}
{"number":5948,"title":"Conflicting two way data-binding with reactive assignment will result in unexpected result","body":"**Describe the bug**\r\nWhen a reactive assignment in a child component try to update a value bound with \"bind\" directive, and its parent try to update the same value in a \"conflicting\" reactive assignment. The value in the parent end up to be different from the one in the child component.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/71e978db32d34e25918ed2d196768ea5?version=3.32.1\r\n\r\n**Expected behavior**\r\nMaybe the best result would be to try keep update the child value with the one set by the parent paying attention that this would lead to execute the reactive declaration in the child (Imagine i would set `counter` to `2` from the parent in my example) and that would bring us a in loop.\r\nI mean, in this case probably to get and infinite loop is more correct than getting two different values.\r\nIn order to prevent infinite loop Svelte may keep track of the cause of the execution of a reactive declaration (or any other reactive expression) and throw an error if it detects cyclical updates.\r\n\r\n**Severity**\r\nIt's not a bad issue. I think you are likely to encounter this issue when in a child you use reactive assignments to check a bad input value and try to fix it.\r\n","state":"open","updated_at":"2022-05-17T16:33:19Z","created_at":"2021-02-01T23:53:01Z","creator_user_login":"raythurnevoid"}
{"number":5944,"title":" WIP 5944 Fix race condition: is Svelte generated code for on:load listener in wrong order?","body":"there are many reasons to load an external js script (like stripe, mapbox, gpt tag, ... scripts), rather than bundle it with one's own code,\r\n\r\nhttps://www.nielsvandermolen.com/external-javascript-sveltejs/\r\n\r\nsomething like this indeed works in Svelte REPL but seems doing nothing in Sapper, I copied this sample code https://svelte.dev/repl/28f4b2e36e4244b8b23cae3d584c4c88?version=3.16.6 to an exactly same page in Sapper, the `on:load={initializeRemarkable}` is not called\r\n\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/remarkable/2.0.0/remarkable.min.js\" on:load={initializeRemarkable}></script>\r\n","state":"open","updated_at":"2021-12-24T15:16:12Z","created_at":"2021-01-31T06:10:11Z","creator_user_login":"t829702"}
{"number":5943,"title":"Fix update code being generated for module variable dependencies","body":"As discussed in https://github.com/sveltejs/svelte/pull/5926#discussion_r565215770, I'm already working on this and should hopefully have a PR up soon.\r\n\r\nSvelte generates update code when a `class:` expression is dependent on a module variable but this shouldn't happen. The [docs say](https://svelte.dev/docs#script_context_module):\r\n\r\n> Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update.\r\n\r\n# Test Case\r\nhttps://svelte.dev/repl/ca93007e0e03454fbeda66bd6e2a6b9b?version=3.32.1\r\nIf you click the button, you'll see that `o` is not reactive (because it's a module var). But if you look at the JS output you'll see the component's update code isn't a `noop` like it should be, instead it's:\r\n\r\n```js\r\np(ctx, [dirty]) {\r\n  if (dirty & /*o*/ 0) set_data(t0, o);\r\n  \r\n  if (dirty & /*o*/ 0) {\r\n    toggle_class(div, \"test\", o);\r\n  }\r\n},\r\n```\r\n\r\n# Cause\r\nI'm pretty sure that this is because `is_dynamic` returns `true` for the module var. I'm looking into whether changing that behavior will break anything though.","state":"open","updated_at":"2021-12-24T15:16:11Z","created_at":"2021-01-29T20:33:18Z","creator_user_login":"j-delaney"}
{"number":5922,"title":"Fix sliding animation on table elements in Safari","body":"This is a proof-of-concept PR for comments. It is not yet cleaned up. See below for what's incomplete.\r\nThis PR fixes #4712 and fixes #4948 . \r\n\r\nThe approach is as follows:\r\n* Add the ability to add non-animatable CSS (called `staticCss` in this PR) that is present throughout animation\r\n* Before animation starts, the staticCss is applied through a className on the element\r\n* After the animation is complete, the animation is cleaned up.\r\n\r\nFor #4712 : Since the [`overflow` property](https://www.w3.org/TR/css-overflow-3/#propdef-overflow)'s Animation type is [`discrete`](https://drafts.csswg.org/web-animations/#animation-type), the behavior is actually defined as changing overflow at the 50% mark if it wasn't `overflow: hidden` to begin with. However, the sliding animations require that `overflow: hidden` throughout the animation. This PR moves the `overflow: hidden` into a `staticCss` which is applied throughout the animation.\r\n\r\nFor #4948 : The [`display` property](https://www.w3.org/TR/css-display-3/#propdef-display) is not animatable, so it can't be applied through animation keyframes. This PR adds a `display: block` if it detects that the element's `display` property contains `table. It could instead use a whitelist but I wanted to keep this simple and address #4948 before attempting to address all scenarios that the display property.\r\n\r\nI didn't think this was a large enough change to warrant an rfc. Please let me know if it is.\r\n\r\n### PR is now ready for review.\r\nI plan to add tests since this behavior adds an additional step to animations and needs to be tested.\r\n- [x] Get a rough OK to see if this approach even makes sense before moving ahead with clean up.\r\n- [x] Include a test that fails without this PR but passes with it.\r\n- [x] Fix behavior for out-transitions (this PR does not address staticCss API for that).\r\n- [x] Refactor/clean up style_manager to be able to handle \"static\" rules cleanly. Currently, this is a hack with some copy-pasta.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2021-01-24T03:47:09Z","creator_user_login":"chrisirhc"}
{"number":5915,"title":"Action parameter expression evaluation deffered on init","body":"```svelte\r\n<div use:textContent={next(value)} />\r\n<div> {next(value)} </div>\r\n```\r\nthis renders `2 1` on init, and `1 2` after update\r\nhttps://svelte.dev/repl/fd08c429bea742caa9ff104cf16eea32?version=3.31.2\r\n\r\nExpected expression evaluation order to follow markup order\r\nExpected expression evaluation order to be the same on init & on update","state":"open","updated_at":"2021-12-24T15:16:10Z","created_at":"2021-01-21T15:32:50Z","creator_user_login":"pushkine"}
{"number":5914,"title":"Paused binding on audio not working correctly","body":"## Paused binding on audio not working correctly\r\n\r\n**Describe the bug**\r\nThe binding for paused on audio elements gives the wrong results in the following two cases:\r\n- On mounting the audio element, the binding remains undefined until manually paused or unpaused, while the real property on the DOM is true.\r\n- On changing the src attribute if the element is currently playing, the actual element will pause and its paused property on the DOM is set to true, but the binding remains false.\r\n\r\n**To Reproduce**\r\n[Svelte REPL](https://svelte.dev/repl/b1c017b9a38149a0908d15e9bfa73255?version=3.31.2)\r\n\r\n**Expected behavior**\r\nThe bound variable remains bound and synced to the corresponding DOM property.\r\n\r\n**Severity**\r\nSomewhat annoying. I'm working on an audio player and though there are workarounds, it would be great if it worked as expected.\r\n\r\n**Additional context**\r\nI'm a bit new to open source and Svelte, but with a few pointers, I could take a crack at this myself.\r\n","state":"open","updated_at":"2023-06-29T21:09:25Z","created_at":"2021-01-21T15:22:29Z","creator_user_login":"carlos-marchal"}
{"number":5913,"title":"Markup rendering order changes based on whether component is reactive","body":"```svelte\r\n<script>\r\n\t// export\r\n\tlet value = 0;\r\n\tlet turn = 0;\r\n\tfunction get() {\r\n\t\treturn 1 + (++turn % 2);\r\n\t}\r\n</script>\r\n\r\n<Component>\r\n\t<div>{get(value)}</div>\r\n</Component>\r\n<div>{get(value)}</div>\r\n\r\n```\r\nBased on whether `value` is exported this will render either `1 2` or `2 1`\r\n\r\nhttps://svelte.dev/repl/41f3a5c9e6304074a90d0ca516779b28?version=3.31.2","state":"open","updated_at":"2021-12-18T16:31:15Z","created_at":"2021-01-21T14:19:33Z","creator_user_login":"pushkine"}
{"number":5904,"title":"svelte:component gets wrong context when using slotted content","body":"**Describe the bug**\r\nIf providing a `svelte:component` with slotted content the context is wrong. the `$$props` variable contains the provided props along with `$$slots` and `$$scope` under the same object.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/984c8690cf784eb6b3433ed11f0f33a5?version=3.31.0\r\n\r\n**Expected behavior**\r\n`$$props` should only contain the provided props.\r\n\r\n**Information about your Svelte project:**\r\nwindows 10\r\nchrome Version 87.0.4280.141 (Official Build) (64-bit)\r\n\r\n**Severity**\r\nApplication breaking.\r\n\r\n**Additional context**\r\nI tried some random version numbers but could not find a spot where it might have been once working properly.\r\n","state":"open","updated_at":"2021-07-12T13:14:43Z","created_at":"2021-01-19T07:31:03Z","creator_user_login":"hjalmar"}
{"number":5903,"title":"Component event and prop names too permissive","body":"Event and prop names accept all characters but space, quotes, `>` and `=`\r\n```svelte\r\n<Component on::::\\\\\\\\!!!}}]]{{{function(){return`hello_world`}}{]]])(((\\ \\\\````::\\**\\{{{}}}}}}<<<<<<Component />\r\n```\r\n```ts\r\ncomponent = new Component({\r\n\tprops: {\r\n\t\t\"\\\\\\\\````::\\\\**\\\\{{{}}}}}}<<<<<<Component\": true\r\n\t}\r\n});\r\n\r\ncomponent.$on(\":::\\\\\\\\\\\\\\\\!!!}}]]{{{function(){return`hello_world`}}{]]])(((\\\\\", \r\n/*function_return_hello_world_handler*/ ctx[0]);\r\n```\r\nhttps://svelte.dev/repl/8bff2976db80403db1affa9138c3e8dd?version=3.31.2","state":"open","updated_at":"2021-12-24T07:47:43Z","created_at":"2021-01-19T01:24:51Z","creator_user_login":"pushkine"}
{"number":5900,"title":"feature: preprocessor can change tag attributes like <script lang=\"ts\">","body":"**How important is this feature to you?**\r\nzero to low priority, mostly cosmetic. browsers ignore extra attributes like `<script lang=\"ts\">`\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\ncurrently, preprocessors can not change tag attributes\r\n\r\nfor example\r\n\r\n```html\r\n<script lang=\"ts\">export let name: string</script>\r\n```\r\n\r\ncan only be transformed to\r\n\r\n```html\r\n<script lang=\"ts\">export let name</script>\r\n```\r\n\r\nbut not to\r\n\r\n```html\r\n<script>export let name</script>\r\n```\r\n\r\nbecause preprocessors can only read attributes, but not change them\r\n\r\n<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Describe the solution you'd like**\r\nallow preprocessors to to modify attributes\r\nby returning the new attributes in `result.attributes`\r\n\r\nfor example, the typescript preprocessor could do\r\n```js\r\nif (attributes.lang != 'ts') return;\r\ndelete attributes.lang;\r\ncode = compile(code);\r\nreturn { code, map, attributes };\r\n```\r\n\r\n**Describe alternatives you've considered**\r\ndo nothing, and let browsers ignore extra attributes\r\n\r\n**related code**\r\nhttps://github.com/sveltejs/svelte/blob/32775a699dd9cbc9884ee04931c3903b832775d5/src/compiler/preprocess/index.ts#L274-L285\r\n","state":"open","updated_at":"2021-12-24T16:10:08Z","created_at":"2021-01-18T13:15:33Z","creator_user_login":"milahu"}
{"number":5894,"title":"Unnecessary Slot scope reflow","body":"```svelte\r\n<script>\r\n    let bar = 0;\r\n</script>\r\n<button on:click={()=>bar++} />\r\n<Component let:bar>\r\n    {bar}\r\n</Component>\r\n```\r\n\r\nHaving a variable named the same way as a component slot variable wrongly flags `$$scope` and updates the component everytime `bar` changes in the outer scope, which is pointless since the Component overwrites bar with its inner scope value\r\n\r\nSee repl with `<Component>`'s reflow count\r\nhttps://svelte.dev/repl/2ec2b3838cf44ed8ac3063cc5f25551c?version=3.31.2","state":"open","updated_at":"2021-12-24T15:16:07Z","created_at":"2021-01-18T02:11:34Z","creator_user_login":"pushkine"}
{"number":5842,"title":"SSR builds only insert the final item into a named slot","body":"**Describe the bug**\r\n\r\nWhen inserting two or more children into a named slot, SSR components will only insert the _final_ child into the named slot. Any previous children are silently ignored.\r\n\r\nDOM components support multiple children without issue, this only impacts the SSR build.\r\n\r\n**To Reproduce**\r\n\r\nHere's a small reproduction demo: https://svelte.dev/repl/d045f6b4265a4de4a08545cbba7def4f?version=3.31.0\r\n\r\nNote that, as this is an SSR bug, the \"Result\" will render as expected. Select \"JS output\" and change `generate:` to `\"ssr\"` and the issue is easily visible by inspecting the compiled code.\r\n\r\n**Expected behavior**\r\n\r\nBoth the DOM and the SSR builds insert all specified children into a named slot.\r\n\r\n**Severity**\r\n\r\nThe direct effects are an annoyance; I was able to rework the components to not use named slots.\r\n\r\nThe second order effects were, in my case, a nontrivial percentage of the site being suddenly absent on deploy. I added a second child to a slot which had previously only had one, which unexpectedly _replaced_ some links `sapper export` was relying on. The issue wasn't apparent in development because the DOM was repaired on hydration, I didn't notice it until I deployed to staging.\r\n\r\n**Additional context**\r\n\r\nThis came to my attention because `sapper export` wasn't discovering some links that I expected it to be able to see. Inspecting the generated HTML showed that it was missing a section of the DOM containing the links which was instead being created client-side during hydration. From there, it was straightforward to narrow down the source of the discrepancy.","state":"open","updated_at":"2021-12-24T15:16:04Z","created_at":"2020-12-31T18:28:21Z","creator_user_login":"bencates"}
{"number":5833,"title":"Trying to build Web Components for SVG should produce a warning/error","body":"Web Components are HTML only and not supported in the SVG namespace.\r\n\r\n- [Do Custom Elements / WebComponents work with SVG?](https://stackoverflow.com/questions/40436059/do-custom-elements-webcomponents-work-with-svg) (StackOverflow)\r\n- [Proposal: Allow custom elements to be in any namespace](https://github.com/WICG/webcomponents/issues/634) (WICG/webcomponents)\r\n\r\nHowever, users such as me might not know this, and it would be helpful if the Svelte compiler told us so.\r\n\r\n\r\n**Describe the bug**\r\nCurrently (Dec 2020), Svelte compiles a source with `<svelte:options namespace=\"svg\" tag=\"svsv-draggable\" />` quietly.\r\n\r\nThe output contains:\r\n\r\n```\r\nSvelteElement = class extends HTMLElement {\r\n```\r\n\r\nThis is enough to convince me that the code tries to make an HTML Web Component, but I haven't fully traced the output.\r\n\r\n**Expected behavior**\r\nGive the user a nice message, saying what we're trying to reach is not currently possible. \r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version: 3.31.0\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nNot severe. Helpful.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","state":"open","updated_at":"2021-12-24T15:16:03Z","created_at":"2020-12-28T22:42:28Z","creator_user_login":"akauppi"}
{"number":5814,"title":"Input is marked as invalid for inital null value","body":"It seems Svelte 3.23.0 introduced a regression. When binding a variable that is initially null to a text input, the input is now marked as an invalid (I'm on Firefox 83.0).\r\n\r\nWorking example:\r\nhttps://svelte.dev/repl/f1f2bf4c50cf4a75ba6ea38c3390af5b?version=3.22.3\r\n\r\nNot working:\r\nhttps://svelte.dev/repl/f1f2bf4c50cf4a75ba6ea38c3390af5b?version=3.31.0\r\n","state":"open","updated_at":"2021-11-30T14:23:51Z","created_at":"2020-12-21T15:52:16Z","creator_user_login":"MarkusKramer"}
{"number":5793,"title":"`file://` URLs should be treated as absolute when populating sourcemap sources","body":"**Describe the bug**\r\nIf you pass `filename` and `outputFilename` options to `svelte.compile`, the `sources` property of the resulting sourcemap will contain a relative path from `outputFilename` to `filename` (and likewise for `cssOutputFilename`). This is the only thing `outputFilename` is used for. \r\n\r\n`sources` is used inconsistently in the wild; it's often unclear whether it's supposed to be describing filepaths or URLs. We treat it as a an array of filepaths, but that sometimes yields unwanted results: https://github.com/snowpackjs/snowpack/discussions/1941#discussioncomment-210899.\r\n\r\nIn the case where `to` is absolute, `relative(from, to) === to` should be true. `file://` URLs are absolute, but we don't treat them as such.\r\n\r\n**To Reproduce**\r\n```js\r\nconst { pathToFileURL } = require('url');\r\nconst { compile } = require('svelte/compiler');\r\nconst assert = require('assert');\r\n\r\nconst source = `<h1>Hello world!</h1>`;\r\n\r\nconst filename = pathToFileURL('index.svelte').href;\r\nconst outputFilename = '/components/index.svelte';\r\n\r\nconst result = compile(source, {\r\n  filename,\r\n  outputFilename\r\n});\r\n\r\nassert.deepEqual(\r\n  result.js.map.sources,\r\n  [filename]\r\n);\r\n```\r\n\r\n**Expected behavior**\r\n`outputFilename` should be disregarded, `sources` should equal `[filename]`. Instead we get `../../../file:///path/to/project/index.svelte`.\r\n\r\n**Severity**\r\nNot critical — possible to workaround.","state":"open","updated_at":"2021-12-24T15:16:01Z","created_at":"2020-12-15T23:57:49Z","creator_user_login":"Rich-Harris"}
{"number":5776,"title":"Unexpected behavior with mousewheel events for input type=\"number\"","body":"**Description** \r\nMousewheel does not increment or decrement the number when running the svelte app standalone.   But it works fine in the REPL\r\n\r\n**To Reproduce**\r\nThis code works fine in the REPL with the mousewheel to increment/decrement the number in the input\r\nHowever, the mousewheel does not work when run locally after downloading the app to my computer and running locally.\r\nI have checked on Chrome, Safari, and Firefox\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\"  value=0/>\r\n```\r\n**Workaround**\r\nI have found if I bind something to the mousewheel event, it works fine e.g.\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\"  on:mousewheel={()=>{;}} value=0/>\r\n```\r\n\r\nStrangely, I only need to do this for one of the input tags and so, the mousewheel works in all three input tags in the code below\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\" value=0/>\r\n<input type=\"number\" value=0/>\r\n<input type=\"number\"  on:mousewheel={()=>{;}} value=0/>\r\n```","state":"open","updated_at":"2021-06-27T14:41:08Z","created_at":"2020-12-12T18:07:57Z","creator_user_login":"saewoonam"}
{"number":5764,"title":"@html directive doesn't work as direct child of svg","body":"**Describe the bug**\r\n\r\nIf I have a component like this\r\n```svelte\r\n  // dynamic.svelte\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n```\r\nand try to render it like this\r\n```svelte\r\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n     <Dynamic />\r\n  </svg>\r\n```\r\n\r\nThe circle isn't rendered.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/1a2ea34b898040e7bd52928331f6437b?version=3.31.0\r\n\r\n**Expected behavior**\r\nThe circle should be rendered\r\n\r\n\r\n**Severity**\r\nMinor annoyance, there are 2 workarounds (see Additional context)\r\n\r\n**Additional context**\r\n\r\nIf I wrap the html directive in a `<g>` tag like this:\r\n```svelte\r\n<g>\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n</g>  \r\n```\r\n\r\nor use it without a component\r\n```svelte\r\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n     {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n  </svg>\r\n```\r\n\r\nit works fine","state":"open","updated_at":"2022-08-14T16:04:15Z","created_at":"2020-12-09T13:45:51Z","creator_user_login":"csenio"}
{"number":5736,"title":"Fly transition jumps when element is translated","body":"**Describe the bug**\r\nIf you translate an element with a fly transition applied to it, the transition can \"jump\" and not be smooth. This mainly seems to occur if you change the translation amount after transitioning the element in and out once.\r\n\r\nHere's a GIF of the issue in action. You'll notice that it is smooth at first, but the second transition (after translating the element) starts by abruptly jumping to the right.\r\n\r\n![fly](https://user-images.githubusercontent.com/4992896/100810174-b52f3380-33ec-11eb-9401-6d4e817a9100.gif)\r\n\r\n**To Reproduce**\r\n1. Trigger a fly transition in and out on an element.\r\n2. Translate the element\r\n3. Trigger the transition again. You'll notice a \"jump\" at the start of the transition\r\n\r\nSee my [REPL](https://svelte.dev/repl/1c57f2ada7f54dee96b690d9924022c5?version=3.30.1) for an interactive demo showing the issue.\r\n\r\n**Expected behavior**\r\nThe transition is smooth and does not jump.\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Firefox 83 / Chrome 87\r\n- Operating system: Windows 10\r\n- Svelte version: 3.30.1\r\n\r\n**Severity**\r\nThis is an annoying, but not blocking, issue. It made a recent demo I made a little more janky.","state":"open","updated_at":"2021-12-24T08:17:57Z","created_at":"2020-12-01T23:54:28Z","creator_user_login":"geoffrich"}
{"number":5734,"title":"#each block doesn't change when a new state is triggered by a transitioning component inside an #if condition","body":"**Describe the bug**\r\n`#each` block doesn't change when a new state is triggered by a transitioning component.\r\nThe weird glitch is happening when the `#each` block is placed inside an `#if` in combination with a transitioning component and Promise loaded items.\r\n\r\n**To Reproduce**\r\nPlease check the following repl - https://svelte.dev/repl/638d0a980c1b47fc8b1e7c270c8e5bc2?version=3.30.1\r\nClick on \"Show menu\" and then \"Clear items\". The items array is reasigned (eg. `items = []`), but the `#each` block doesn't reflect the change.\r\n\r\n**Expected behavior**\r\nThe `#each` block to properly reflect the iterated array state and to be not affected by the transitions of unrelated components.\r\n\r\n**Workarounds**\r\nThere are a couple of workarounds I found that strangely \"fixes\" the repl:\r\nv1. Remove the transition from `Menu.svelte`\r\nv2. Move the `<Menu>` component outside the `#if` block\r\nv3. In `Menu.svelte` change the order of the calls in `function changeOption(newOption)`, aka.:\r\n```js\r\nfunction changeOption(newOption) {\r\n    hide(); // triggers the transition\r\n    option = newOption;\r\n}\r\n```\r\n\r\n**Information about your Svelte project:**\r\n- Fedora 33\r\n- Chrome 87.0.4280.66 (Official Build) (64-bit)\r\n- Svelte ^3.30.1\r\n- Rollup ^2.34.0","state":"open","updated_at":"2022-06-21T09:53:45Z","created_at":"2020-12-01T16:32:23Z","creator_user_login":"ganigeorgiev"}
{"number":5733,"title":"Crossfade transition events does not work as expected","body":"**Describe the bug**\r\nCrossfade does not dispatch `outrostart`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/444056d6706e4d16a604742a48e0d17c?version=3.30.0\r\n\r\n**Expected behavior**\r\n`introstart` should be dispatched when element is about to appear\r\n`introend` should be dispatched when element is fully visible\r\n`outrostart` should be dispatched when element is about to disappear\r\n`outroend` should be dispatched when element is fully hidden\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version 3.30.0","state":"open","updated_at":"2022-01-11T09:18:13Z","created_at":"2020-11-29T23:45:50Z","creator_user_login":"jarda-svoboda"}
{"number":5728,"title":"fix binding with map","body":"Fixes #5721 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n~~- [ ] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs~~\r\n- [x] This message body should clearly illustrate what problems it solves.\r\n- [x] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [x] Run the tests with `npm test` and lint the project with `npm run lint`\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-11-27T08:14:20Z","creator_user_login":"tanhauhau"}
{"number":5721,"title":"Bind to a Map() Object not possible","body":"**Describe the bug**\r\nI am not sure if this should work or if it's a feature request in the end.\r\n\r\nIt is easily possible to bind to a normal Object `{}` with \"keys\", but it seems not to be possible if i have a Map object. I have tried to simplify the repl as much as possible.\r\n\r\nWorks:\r\n```svelte\r\n\tconst id = 1;\r\n\t\r\n\tconst obj = {};\r\n\tobj[id] = {x: 0, y: 0};\r\n...\r\n<input type=\"range\" min=\"0\" max=\"100\" bind:value={obj[id].x} />\r\n````\r\n\r\nDoes not work:\r\n```svelte\r\n\tconst map = new Map();\r\n\tmap.set(id, {x: 50, y: 50});\r\n...\r\n<input type=\"range\" min=\"0\" max=\"100\" bind:value={map.get(id).x} />\r\n````\r\n\r\nFull repl see link.\r\n\r\n**To Reproduce**\r\nRepl:\r\nhttps://svelte.dev/repl/947950a2c1754c20a86c39f34924485a?version=3.30.0\r\n\r\n**Expected behavior**\r\nCan bind to object stored in Map\r\n\r\n**Severity**\r\nLow\r\n\r\n**Context**\r\nIn my real Application the Map object is a Store with lots of objects in it which I access by key. I wanted to do a performance comparison between Objects and Maps for my specific case.\r\n","state":"open","updated_at":"2023-07-18T00:35:11Z","created_at":"2020-11-25T12:21:54Z","creator_user_login":"firewave-remo"}
{"number":5720,"title":"Binding in slotted compoment triggers reactive statements twice","body":"**Describe the bug**\r\nWhen a variable is bound to a slotted component, changing that variable within the slotted component causes any reactive statements inside the slotted component to trigger twice.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.30.0\r\n\r\n**Expected behavior**\r\nPressing the \"Update x\" button should cause only one `console.log` call, which is what happens when the `<Wrapper>` is removed.\r\n\r\n**Severity**\r\nLow — can work around this by using a [store](https://svelte.dev/tutorial/writable-stores) instead of binding.\r\n","state":"open","updated_at":"2022-12-13T01:12:00Z","created_at":"2020-11-25T05:39:23Z","creator_user_login":"zqianem"}
{"number":5719,"title":"`bind:this={inputs[i]}` with keyed each results in never-ending reactive statement","body":"**Describe the bug**\r\nA never-ending reactive statement will occur if you add `bind:this={inputs[i]}` to the radio input in my attached REPL.\r\n\t\t\r\nThings that fix the problem:\r\n- using non-keyed `each` instead of keyed\r\n- setting `_options` inside of `buildOptions` functions instead of setting it in the reactive statement\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/d66885914acb4a02be11e43f145464e0?version=3.30.0\r\n\r\n**Expected behavior**\r\nadding `bind:this={inputs[i]}` without changing anything else in the REPL should not result in never-ending reactive statement.\r\n\r\n**Your browser and the version**: Chrome 87.0.4280.66 (Official Build) (64-bit)\r\n\r\n**Your operating system**: Win10\r\n\r\n**Severity**\r\nHas work-arounds","state":"open","updated_at":"2021-07-11T10:20:34Z","created_at":"2020-11-25T00:28:41Z","creator_user_login":"JohnnyFun"}
{"number":5694,"title":"Warn when encountering bind:clientWidth etc during SSR","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen you have a component like this...\r\n\r\n```svelte\r\n<script>\r\n  import SvgChart from './SvgChart.svelte';\r\n  let w;\r\n</script>\r\n\r\n<div bind:clientWidth={w}>\r\n  <SvgChart width={w} height={300}/>\r\n</div>\r\n```\r\n\r\n...and try to server-render it, `w` will be undefined, and anything that depends on it will appear broken. Even if you initialise `w`, it is unlikely to accurately reflect the eventual DOM, so there will be a flash upon hydration.\r\n\r\n**Describe the solution you'd like**\r\nIn general I suspect we want to discourage this sort of thing from happening. If we encounter such a binding at SSR time, we could emit a warning to that effect.\r\n\r\n**Describe alternatives you've considered**\r\nThe wrinkle is that you might have a situation like this:\r\n\r\n```svelte\r\n<div bind:clientWidth={w}>\r\n  {#if process.browser}\r\n    <SvgChart width={w} height={300}/>\r\n  {/if}\r\n</div>\r\n```\r\n\r\nIn that case, the warning would be undesirable. I'm not sure how to address that, so the alternative would be to do nothing.\r\n\r\n**How important is this feature to you?**\r\nI have coworkers who are very skilled at building charts with d3, but are less familiar with the declarative style, and in particular aren't used to considering how to build charts in such a way that they can be fully server-rendered. An emitted warning would make it possible to catch these situations automatically and offer relevant guidance. I have to imagine my situation isn't _totally_ unique.","state":"open","updated_at":"2021-12-24T15:16:00Z","created_at":"2020-11-19T02:45:43Z","creator_user_login":"Rich-Harris"}
{"number":5689,"title":"Binding to an object fires erroneous reactive update","body":"**Describe the bug**\r\nWhen binding a complex value such as an object to a component `<Component bind:value />`, additional reactive updates are fired for the bound value even when no data is changed.\r\n\r\nMay be related to https://github.com/sveltejs/svelte/issues/4430 ?\r\n\r\n**To Reproduce**\r\nSimply bind a complex value to a component property.\r\n\r\nExample:\r\nhttps://svelte.dev/repl/5e14759de70d4d39b6f3833f91db4542?version=3.29.7\r\n\r\n**Expected behavior**\r\nReactive updates should be consistent between simple and complex types\r\n\r\n**Severity**\r\nI find it irritating, but not a blocker.\r\nThis issue is most likely to cause redundant calculations without formally breaking anything. \r\nThis issue will likely snowball if components are nested, though I have not confirmed this.\r\nThe additional updates are likely to confuse people causing unnecessary work.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","state":"open","updated_at":"2023-07-24T09:48:58Z","created_at":"2020-11-18T12:13:32Z","creator_user_login":"intelcentre"}
{"number":5687,"title":"add slots option to component constructor options object","body":"This is a continuation of https://github.com/sveltejs/svelte/pull/4296, which tackles https://github.com/sveltejs/svelte/issues/2588#issuecomment-488343541\r\n\r\nThis commits also ensures that no extra code is added into `svelte/internal`. Instead, if users want to use `slots` API, they will import directly from `svelte`:\r\n\r\n```js\r\n// parent.svelte\r\nimport { createSlot, slot } from 'svelte';\r\nimport MyChild from './mychild.svelte';\r\n\r\nnew MyCmp({\r\n  slots: createSlot({\r\n    slot(MyChild)\r\n  })\r\n});\r\n```\r\n\r\n```svelte\r\n<!-- mychild.svelte -->\r\n<div>this div is in nested.svelte</div>\r\n<span>this span is in nested.svelte</span>\r\n```\r\n\r\n## Discussions\r\n- `createSlot, slot` seems really confusing, what would be good names?\r\n- see https://github.com/sveltejs/svelte/pull/5687/files#discussion_r525860067\r\n- typescript and sucrase dep bump to support null coalesce","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2020-11-18T07:05:36Z","creator_user_login":"truongsinh"}
{"number":5668,"title":"Duplicated <meta> tags on initial page using <svelte:head>","body":"Using component to compose head contents from an object as Head.svelte:\r\n\r\n```\r\n<svelte:head>\r\n  {#if title}\r\n    <title>{title}</title>\r\n  {/if}\r\n  {#if meta}\r\n    {#each Object.entries(meta) as [ name, content ]}\r\n      <meta {name} {content} />\r\n    {/each}\r\n  {/if}\r\n</svelte:head>\r\n```\r\n\r\nBy including this component on any page as:\r\n\r\n```\r\n<Head {props} />\r\n```\r\n\r\nThe initial page loaded by the user has duplicated meta tags. \r\nInteresting thing is, by navigating to other pages where such component is present, the second batch of duplicated tags are updated as expected. Title tag is not duplicated, but all meta tags has duplicate of initial page's load and persists forever.\r\n\r\nI am using sapper, but I think it is the Svelte related issue.\r\n\r\nVersions I use:\r\n -  \"sapper\": \"^0.28.10\",\r\n - \"svelte\": \"^3.29.4\".\r\n\r\nSame thing as [#4533](https://github.com/sveltejs/svelte/issues/4533), but <title> tag works fine.\r\n","state":"open","updated_at":"2021-12-24T15:15:58Z","created_at":"2020-11-10T09:52:29Z","creator_user_login":"EricRovell"}
{"number":5658,"title":"Feature Request: improve shorthand attribute syntax","body":"\r\n\r\n### **Is your feature request related to a problem? Please describe.**\r\nYes. It appears that the [shorthand attribute](https://svelte.dev/tutorial/dynamic-attributes#shorthand-attributes) functionality is attempting to provide a familiar syntax that mirrors ES2015's [shorthand property names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015) and ES2018's [spread in object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals).\r\n\r\nHowever, it appears to be incomplete, as shown in the following example:\r\n\r\n```html\r\n<script>\r\n  const src   = \"https://miro.medium.com/max/4000/1*KUy_KKExZrSpBuv9XfyBgA.png\"\r\n  const width = 300\r\n\r\n  const foo = {src, width}\r\n  const bar = {src}\r\n  const baz = {width}\r\n</script>\r\n\r\n<img {src} {width}    /> <!-- works as expected -->\r\n<img {...foo}         /> <!-- works as expected -->\r\n<img {...bar} {...baz}/> <!-- works as expected -->\r\n<img {src, width}     /> <!-- ParseError        -->\r\n<img {src, ...baz}    /> <!-- ParseError        -->\r\n<img {...bar, ...baz} /> <!-- ParseError        -->\r\n```\r\n\r\n```\r\n[!] (plugin svelte) ParseError: Expected }\r\nsrc\\App.svelte\r\n13: <img {src, width}/>\r\n               ^\r\nParseError: Expected }\r\n  at error (.\\node_modules\\svelte\\src\\compiler\\utils\\error.ts:25:16)\r\n  at Parser$1.error (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:100:3)\r\n  at Parser$1.eat (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:116:9)\r\n  at read_attribute (.\\node_modules\\svelte\\src\\compiler\\parse\\state\\tag.ts:327:11)\r\n  at tag (.\\node_modules\\svelte\\src\\compiler\\parse\\state\\tag.ts:173:22)\r\n  at new Parser$1 (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:52:12)\r\n  at parse (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:215:17)\r\n  at compile (.\\node_modules\\svelte\\src\\compiler\\compile\\index.ts:78:14)\r\n  at .\\node_modules\\rollup-plugin-svelte\\index.js:252:22\r\n```\r\n\r\n### **Describe the solution you'd like**\r\nThe shorthand attribute syntax should allow multiple attributes to provide a more seamless & intuitive developer experience.\r\n\r\nSpread resolution should match that of ES2018, e.g.\r\n```js\r\nexpect({...{a:1, b:2}, ...{a:100}})\r\n.toMatchObject({a:100, b:2})\r\n```","state":"open","updated_at":"2023-07-24T03:34:35Z","created_at":"2020-11-09T15:48:20Z","creator_user_login":"Enteleform"}
{"number":5655,"title":"binding directive causes Promise to resolve multiple times.","body":"I was having a problem with binding the checked attribute in combination with a Promise. I made a REPL that demonstates this weird behaviour: https://svelte.dev/repl/3d0a1c1ad9824764b03016cf5b759305?version=3.29.4\r\n\r\nOn my setup I even get an infinite loop which breaks the browser, but I can't reproduce that on the REPL.\r\n\r\nWhat I found out so far:\r\n\r\n* Once the checkbox (with `bind:checked`) gets klicked the object updates, but the Promise resolves again and overrides the value.\r\n* The issue only happens if `entries$` is a prop. If I declare the Promise inside the List component, it works as I expect.\r\n* The issue only happens if I use `bind:checkbox`. When using `checked={} on:input={}` it works a I expect.\r\n\r\nThis feels like a bug with the binding directive. If anyone can look into this, I would appreciate it a lot!","state":"open","updated_at":"2021-12-24T15:15:57Z","created_at":"2020-11-08T15:20:45Z","creator_user_login":"timrosskamp"}
{"number":5641,"title":"value for keyed select tag doesn't work when options are updated","body":"**Describe the bug**\r\nThe selected value is known oncreate, but the <option> values are added later. The selected value isn't set when they are added.\r\n\r\nThis problem is like #1764 but for `value` instead of `bind:value`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/63a13fa5f6e2425a970824691919b87f?version=3.29.4\r\nYou will see `three` on the select element\r\n\r\n**Expected behavior**\r\nYou should see `two` on the select element\r\n\r\n**Severity**\r\nThis is annoying but there is a workaround described on https://github.com/sveltejs/svelte/issues/1764#issuecomment-432382104\r\n\r\n\r\n","state":"open","updated_at":"2021-12-24T15:15:56Z","created_at":"2020-11-03T15:13:39Z","creator_user_login":"mynomoto"}
{"number":5637,"title":"Animation blocks transition","body":"**Describe the bug**\r\nI couldn't find an issue about it, and the docs don't mention the behaviour either. Is it expected behaviour that an animation of an element blocks a transition of it?\r\n\r\n![bug](https://user-images.githubusercontent.com/33468089/97928478-6cda1280-1d67-11eb-8b45-6185a72f8bde.gif)\r\n\r\n**To Reproduce**\r\n1. Create list of elements that changes over time, e.g. with an ephemeral list store.\r\n2. Put a transition and animation on these elements.\r\n3. Schedule the changes such that the transition happens at the same time as the animation.\r\n\r\nhttps://svelte.dev/repl/40d4bef097c645189e1a4d73d76ec79f?version=3.29.4\r\n\r\n**Expected behavior**\r\nI'd expect a transition of to not be blocked by an animation, the same way that two transitions don't block each other.","state":"open","updated_at":"2021-12-24T15:15:55Z","created_at":"2020-11-02T23:00:11Z","creator_user_login":"vwkd"}
{"number":5604,"title":"Feature: Let slots be wrapped in if statements to avoid \"must be a child of a component\" error.","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen I do something like the below, I get an error of:\r\n> Element with a slot='...' attribute must be a child of a component or a descendant of a custom element\r\n\r\n```\r\n<MyComponent>\r\n  {#if something()}\r\n    <a slot=\"right-container\">Hi</a>\r\n  {/if}\r\n</MyComponent>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI want to be able to do the first example and wrap my optional slot's in if statements. The reason for this is I actually have default slot text in my component that I want to show.\r\n\r\n**Describe alternatives you've considered**\r\nThe alternatives is doing something like this which has a lot of duplicate code.\r\n\r\n```\r\n{#if something()}\r\n  <MyComponent>\r\n  {#if something()}\r\n    <a slot=\"right-container\">Hi</a>\r\n  {/if}\r\n  </MyComponent>\r\n{:else}\r\n  <MyComponent />\r\n{/if}\r\n```\r\n\r\n**How important is this feature to you?**\r\nThis is a big hassle for me and it would make for a lot cleaner code if I could wrap this slots in if statements. However, it would not affect my ability to code and use svelte.\r\n","state":"open","updated_at":"2023-06-24T13:37:23Z","created_at":"2020-10-28T12:50:31Z","creator_user_login":"ghost"}
{"number":5603,"title":"Handling of @html in textarea tags","body":"**Describe the bug**\r\nSvelte compiler fails to handle {@html} inside `<textarea>` tags\r\n\r\n**Logs**\r\nNo output in browser console. Compiler throws error `Unexpected character '@' (7:11)`\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/001f72ee82ac4115920eaf086d785584\r\n\r\n**Expected behavior**\r\nThe compiler compiles the code successfully, the output `<textarea>` contains the child HTML elements in the string.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 82, Chrome 86 (doesn't matter)\r\n\r\n- Your operating system: Windows 10 (doesn't matter)\r\n\r\n- Svelte version: 3.29.4\r\n\r\n- Whether your project uses Webpack or Rollup: None, as I used Snowpack in dev mode.\r\n\r\n**Severity**\r\nLow. I was able to use `<div>` instead for my use case.\r\n\r\n**Additional context**\r\nI was trying to integrate TinyMCE editor into my Svelte app. On the surface, TinyMCE uses <textarea> and the content to be edited must be children of that `<textarea>`. But upon reading through their docs (it's a bit unclear) turns out `<div>` can be used too, so that's my solution for the time being.\r\n","state":"open","updated_at":"2021-12-24T15:15:53Z","created_at":"2020-10-28T11:27:34Z","creator_user_login":"ethan-tqa"}
{"number":5602,"title":"Make exporting empty functions a way to declare component event dispatchers","body":"This is a proposal to introduce a more straightforward way to declare component events, namely through the use of empty functions.\r\nExporting a named function with an empty body would declare an event, and calling that function would dispatch it.\r\n```svelte\r\n<script lang=\"ts\">\r\n    export function message(msg: string) {}\r\n    message(\"I just dispatched a message event!\");\r\n</script>\r\n```\r\nThe consumer remains the same\r\n```jsx\r\n<Component on:message={console.log} /> // \"I just dispatched a message event!\"\r\n```\r\n\r\nThis solution comes as a hybrid between prop functions and `createEventDispatcher` :\r\n\r\n|   | `export function message(){}` | `export let onMessage = noop` | createEventDispatcher |\r\n|-|---|---|---|\r\n|`on:` syntax | ✅ |❌it's a prop|✅| \r\n| Event forwarding  |✅| ❌it's a prop|✅| \r\n| Amount of listeners | ✅ Infinity |❌1|✅Infinity | \r\n| Setup | ✅ one line  |  ✅ one line |❌>3 lines |\r\n| \"Is there events ?\" | ✅ it's in the exports  |  ✅ it's in the exports |❌could be anywhere |\r\n| Arguments | ✅ like any function | ✅ like any function |❌1 argument <br> ❌wrapped in a CustomEvent|\r\n| Listener callback | ✅ like any function | ✅ like any function |❌must destructure CustomEvent <br>❌must fill type manually|\r\n| Typings | ✅ like any function | ✅ like any function|❌troublesome |\r\n| Refactoring  | ✅ like any function | ✅ like any function|❌troublesome|\r\n\r\nAs a side effect this proposal also introduces the ability to rename events when forwarding them:\r\n```svelte\r\n<script lang=\"ts\">\r\n    export function hoverLeft(event: MouseEvent) {}\r\n    export function hoverRight(event: MouseEvent) {}\r\n</script>\r\n<button on:mouseover={hoverLeft} /> \r\n<button on:mouseover={hoverRight} />\r\n```\r\n\r\nThe implementation is simple, the compiler just has to fill the body of those functions with `createEventDispatcher`'s :\r\n```ts\r\nfunction message(...args) {\r\n    const listeners = $$self.$$.callbacks.message;\r\n    if (listeners) listeners.slice().forEach((fn) => fn.apply($$self, args))\r\n}\r\n```\r\n\r\nI cannot think of any realistic scenario where this would be a breaking change.\r\n\r\n`createEventDispatcher` has been criticized multiple times #2323 #3488 #4584 #5211 #5597. I for one actively avoid using it. The go-to solution appears to be to introduce yet another reserved variable #5598, I see all of those $$variables slowly creeping up on svelte and I'm very much not looking forward to see another.","state":"open","updated_at":"2023-07-31T15:18:21Z","created_at":"2020-10-28T04:12:02Z","creator_user_login":"pushkine"}
{"number":5595,"title":"Unclear what a custom easing function should return","body":"This is about the docs.\r\n\r\nWhile I was trying to implement a particular transition in my site I've tried to implement a custom easing function. I've had difficulties because I could not figure out what my custom easing function was supposed to return based on the `t` parameter. And also the meaning of the `t` parameter is not totally clear. Although `t` is probably a fraction of the point of time we're in within the transition as a value between 0 and 1. \r\n\r\nQuestions that come to my mind about the return value:\r\n\r\n- What will Svelte do with that value? \r\n- Does it need to be a value between 0 and 1?\r\n- Can it return a value below 0? What will happen then?\r\n- Can it return a value above 1? What will happen then?\r\n- Does the value returned depend in any way on the value returned in the previous call? Maybe just the difference between the previous and the current value matters?\r\n\r\nWhen looking at the API docs (e.g. in https://svelte.dev/docs#svelte_easing) I couldn't find anything.\r\n","state":"open","updated_at":"2021-12-24T10:28:19Z","created_at":"2020-10-27T08:15:28Z","creator_user_login":"teggno"}
{"number":5593,"title":"State changes in onMount fail to trigger afterUpdate in child components","body":"**Describe the bug**\r\nThis may be by design, but I couldn't tell — when state changes are made within `onMount` (that would cause a component to update), these changes will _not_ trigger `afterUpdate` within any child components. It appears you can only depend on `afterUpdate` triggering if a state change happens outside of `onMount`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a3a7cb61eb7b4b74aed5eb1340fd0c33?version=3.29.4\r\n\r\nI would expect the `afterUpdate` logs within `Canvas.svelte` to reflect the changes made in `onMount` within `App.svelte`.\r\n\r\n**Expected behavior**\r\nIdeally all state/component changes would propagate. It'd make sense I think if in this scenario `afterUpdate` triggers twice.\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version\r\n3.29.4\r\n\r\n**Severity**\r\nIt was certainly a surprise! I know it's possible to hack around this with `tick()` (though I'm unsure if it makes more sense to do that in `onMount` or `afterUpdate`) and that may ultimately be \"the answer.\"\r\n","state":"open","updated_at":"2022-02-08T09:27:25Z","created_at":"2020-10-26T20:43:28Z","creator_user_login":"rdmurphy"}
{"number":5592,"title":"Call action.destroy immediately before unmounting nodes (like onDestroy), not after","body":"https://svelte.dev/repl/21c32360e1154f34bbfe07172d2ed826?version=3.29.4\r\n\r\n`onMount` callbacks are called _after_ mounting a component's nodes, and actions are initiated in the same timing\r\n\r\n`onDestroy` callbacks are called _before_ unmounting component nodes from the DOM, yet `action.destroy` is called _after_ the relevant node has unmounted\r\n\r\nThis is documented behavior, but is there a particular reason why it must be the case ? If not, I'd like to raise a proposal for `action.destroy` to be called before the relevant node unmounts, so as to allow them to perform last second operations if necessary","state":"open","updated_at":"2021-12-24T15:15:51Z","created_at":"2020-10-26T15:22:55Z","creator_user_login":"pushkine"}
{"number":5589,"title":"Element/component binding returns null in slot with transitions","body":"**Describe the bug**\r\nIf anything changes in the wrapper component with a slot or the slot content at any time after transition, the reference to the slot content will be `null`.\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/e769cb0153b34ee5898f4cf4a6445117?version=3.29.4).\r\n\r\nHere we have a wrapper component. Think of it as a generic modal component, that provides you with a slot and decides when we need to show it.\r\nIf we have a reference to the slotted component/element, we'll lose it as soon as the state of the slot OR the wrapper inner data will be changed.\r\n\r\nIf you push on \"trigger animation\" button, the data will be recreated (using `{#key}` directive) the refs will be ok. But as soon as you push on \"change data\" button, the refs will become `null`. In the first case this button would change the data inside the slot (so in parent component); in the second it will pass a new prop value to the wrapper component, which would be put in the DOM.\r\n\r\n**Expected behavior**\r\nThe ref should contain a link to a valid HTML element or component instance.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 85\r\n- Your operating system: OS X\r\n- Svelte version: 3.29.4\r\n\r\n**Severity**\r\nTo me it looks quite bad. Bindings is an essential thing in web dev, as well as slots. I don't have any workaround for this at this moment, tbh.","state":"open","updated_at":"2021-08-28T14:02:21Z","created_at":"2020-10-26T11:07:13Z","creator_user_login":"dkzlv"}
{"number":5579,"title":"feat: spring easing functions","body":"### Before submitting the PR, please make sure you do the following\r\n- [❌] It's really useful if your PR references an issue where it is discussed ahead of time. In many cases, features are absent for a reason. For large changes, please create an RFC: https://github.com/sveltejs/rfcs\r\n- [✅] This message body should clearly illustrate what problems it solves.\r\n- [TODO] Ideally, include a test that fails without this PR but passes with it.\r\n\r\n### Tests\r\n-  [TODO] Run the tests with `npm test` and lint the project with `npm run lint`\r\n\r\nI'm opening this PR both for early feedback, and also to get some help setting up my environment. I've tested this code locally, by modifying the Svelte source in node_modules of a running web app, but I can't get my Svelte clone to `npm i`. I get a ton of errors that look like this:\r\n\r\n![image](https://user-images.githubusercontent.com/11261266/97089129-62977600-15fb-11eb-8b47-0070a4850bc5.png)\r\n\r\n---\r\n\r\nThe changes in this PR would allow you to use spring animations inside of transitions. Rich helped me to understand how easing functions work, and how to translate them to what a transition is looking for. I took that and integrated it into your easing package, and added code to manually unpack a spring, and get the eventual values up front.\r\n\r\nThe usage would look like this\r\n\r\n```js\r\nconst { easing: modalSpringIn, duration } = springEnter(frames);\r\n\r\nfunction modalIn() {\r\n  return {\r\n    duration,\r\n    css: t => {\r\n      const transformY = modalSpringIn(t);\r\n      const opacity = expoOut(t);\r\n\r\n      return `\r\n        transform: translate3d(0px, ${transformY}px, 0px);\r\n        opacity: ${opacity};\r\n      `;\r\n    },\r\n  };\r\n}\r\n```\r\n\r\n```html\r\n<div in:modalIn out:modalOut bind:this={root}>\r\n  <slot />\r\n</div>\r\n```\r\n\r\nwhich would fade in a modal, as it bounces into place.\r\n\r\nAre these changes you're interested in?\r\n\r\nIf so, there's one other thing I need a bit of help understanding. In spring.ts, you'll see I'm running dt = 1 on all subsequent calls to spring_tick, which would be a perfect 60fps iiuc. But what should the initial value of dt be, for the first run, in a perfect world? On subsequent runs, dt is usually 0.99 or so, but on the initial run, it's usually -.2, or something. On the first run, now() is *less than* last_time, which I don't quite understand. now() seems to be provided by performance.now() (when on the front end) and is updated via what's passed to the rAF callback.  \r\n\r\nI guess what I really need to know is what dt would be initially in an ideal circumstance. 0? \r\n\r\nEDIT - setting `dt` to 1 permanently does appear to be more correct. I had doubted it initially since the initial change seemed too steep, but I think that may have been because of the spring config I had at the time. So I'm left wondering if what I described just above is a bug in the Svelte source?","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-10-24T18:27:22Z","creator_user_login":"arackaf"}
{"number":5572,"title":"Make `export const` a way to define constant unreactive props","body":"It is often the case that component props happen to be either by intent or _de facto_ constant and unreactive\r\n\r\nUnfortunately Svelte does not provide a way to define unreactive props, in doing so it outputs a substantial amount of superfluous code, makes components less shareable , and misses an otherwise fantastic opportunity for the compiler to identify \"unreactive\", so called _pure components_ on its own to optimize their output accordingly\r\n\r\nWhile Svelte features the ability to define props using `export const`, props defined by that syntax can only be _derived from other props_, and _cannot be set directly_. \r\n\r\nDescribed in the documentation as a way [to define \"readonly\" props](https://svelte.dev/docs#1_export_creates_a_component_prop), it mistakenly draws parallels for some of us to Typescript's `readonly` [class property modifier](https://www.typescriptlang.org/docs/handbook/classes.html#readonly-modifier) which, contrary to Svelte's const props, defines readonly properties that in fact _[can be set directly](https://www.typescriptlang.org/play?#code/MYGwhgzhAEDCD2BbADvAdgUzQF2gbwFgAoaaYdCbAJwFdht4qAKKjMAE3RAE9ow0IAdwxVoAXmgBmAHQBGACwBKfNAC+xdUXID4IDNJDwA5k0yC4SVJhxN5AJkXT+QkYoDcQA)_ on init\r\n\r\nFor those reasons, and because it would greatly enhance an otherwise very rarely used feature, I believe that there is a great case to make for const props to be settable on init\r\n\r\nThis proposed change asserts for the following to render `42`\r\n```svelte\r\n<script>\r\n    export const answer = 1.618;\r\n</script>\r\n{answer}\r\n```\r\n```svelte\r\n<Component answer={42} />\r\n```\r\n\r\nMost scenarios where this change would qualify as breaking also qualifies as an unintended use case as values passed to const props currently throw `unknown prop` dev warnings. With that said this is still a breaking change in cases where `export const` is used in combination with `$$props`, as the latter suppresses unknown props dev warnings. \r\n\r\nI do not expect this to be implemented as it is technically breaking, but considering the value it could hypothetically add to the framework I still think it's worth putting a proposal out there\r\n\r\nPossibly related #5183","state":"open","updated_at":"2022-12-01T01:18:06Z","created_at":"2020-10-23T11:31:26Z","creator_user_login":"pushkine"}
{"number":5568,"title":"Add localization files to your documentation","body":"Hi, I'm middle Front-End developer from Ukraine, and know already 4 frameworks: Vue.js, React, AMP, Svelte. \r\n\r\nI want to be a volunteer and popularize your framework into Russian community, so I want to start translate your documentation, tutorials, etc... So how can I make this? \r\n\r\nPlease add plugin such as \"i18n\" into your Github repo, add fully localizated English file. We will make RU file and some volunteers other languages files, that will have the same object structure as your original English file. Watching Github issues we will update and correct our translations. Also need to configure your site with doc. If in some languages we don't find required object with translation or our translation is not up to date, it will borrow actual from original translation (ENG).","state":"open","updated_at":"2023-08-28T10:53:57Z","created_at":"2020-10-23T06:23:26Z","creator_user_login":"Magistr19"}
{"number":5549,"title":"Cannot use HTML entities bigger than FFFF (&#xFFFF;)","body":"I am using custom svg font to display icons, but it doesn't render correctly when codepoints are bigger than 0xFFFF.\r\nThis works:\r\n```svelte\r\n<span class='ico'>&#xE806;<span>\r\n```\r\nThis doesn't\r\n```svelte\r\n<span class='ico'>&#xF0141;</span>\r\n```\r\nWhen I inject the icon HTML Entity (&#xF0141;) in index.html or from browser, it works fine.\r\nPlus, ```console.log(span.innerHTML.codePointAt(0)) //returns 0```\r\n\r\nI have work around which I don't want to use\r\n```svelte\r\n<span class='ico'>{'\\u{F0141}'}</span>\r\n```","state":"open","updated_at":"2021-12-24T16:16:19Z","created_at":"2020-10-20T06:04:43Z","creator_user_login":"sadespresso"}
{"number":5530,"title":"global css should be removed when component which injected it gets destroyed","body":"**To Reproduce**\r\nhttps://svelte.dev/repl/385622e1aa2d4dd1a538a649761ef50a?version=3.29.0\r\n\r\n**Expected behavior**\r\nI don't really know if this is working as expected, but in a component oriented context i would expect to work the way i'm describing here: Global CSS injected should be removed after the component that contains it is destroyed.\r\n\r\nI say so because in this way i would be allowed to style parent elements conditionally to which child is mounted (like in my repl).\r\nWith the actual implementation, i'm stuck to use props or context with store to tell in some way the parent which style should he have.\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3.29.0\r\n\r\n**Severity**\r\nAnonoying","state":"open","updated_at":"2022-10-15T09:01:52Z","created_at":"2020-10-15T13:54:56Z","creator_user_login":"raythurnevoid"}
{"number":5520,"title":"$store and store.subscribe behave differently","body":"**Describe the bug**\r\nOpen console in this [repl](https://svelte.dev/repl/eada079a48e04360b92ef3baec1591f0?version=3.29.0)\r\nin synchronous for loop `store.subscribe` runs callback for each `set`, while reactive `$:` runs only on last `set`\r\n\r\n```\r\nconst store = writable(0);\r\n\t\r\nsetTimeout(() => {\r\n\tfor (let i = 1; i <= 10; ++i) {\r\n\t\tstore.set(i); // syncronous set calls\r\n\t}\r\n});\r\n\t\r\n$: console.log('$:', $store); // logs only last value\r\nstore.subscribe(v => console.log('subscribe', v)); // logs each value\r\n```\r\n\r\n**Expected behavior**\r\nAutosubscription and manual subscription should behave the same way or explained in documentation\r\n\r\n**Severity**\r\nMight broke some logic, if you expect all callback of `set` to run in autosubscription.\r\nI think this should be clarified in documentation.\r\n\r\n","state":"open","updated_at":"2021-12-24T10:28:18Z","created_at":"2020-10-12T10:30:40Z","creator_user_login":"BulatDashiev"}
{"number":5517,"title":"Get access to a component's own class in the script and script module (\"$$self\" or else)","body":"This is a proposal to add a `$$self` ( or else ) reserved keyword that resolves into a reference to a component's own class, such as to make the following output `<h1>hello world !</h1>`\r\n```svelte\r\n<script>\r\n\texport let name;\r\n</script>\r\n\r\n{#if !name}\r\n\t<svelte:component this={$$self} name={'world'} />\r\n{:else}\r\n\t<h1>hello {name} !</h1>\r\n{/if}\r\n```\r\nNow that usecase is already covered by `svelte:self`, and even then there will always be a way to sneak that reference in to the script block or proxy it through other script modules ( see below ), yet I happen to find myself needing `$$self` more than any other supported \"escape hatch\" `$$keyword`, so while the argument for such keyword is definitely not compelling, I do think that it would be a nice to have\r\n\r\n[Script block workaround at component instantiation](https://svelte.dev/repl/17a9575281c543f59441ff22020dd5fe?version=3.29.0)\r\n```svelte\r\n<script>\r\n\texport let name;\r\n\tconst self = arguments[0].__proto__.constructor;\r\n</script>\r\n\r\n{#if !name}\r\n\t<svelte:component this={self} name={'world'} />\r\n{:else}\r\n\t<h1>hello {name} !</h1>\r\n{/if}\r\n```\r\nFor typescript users, the only way to use a component in any other way but as inlined in another component's xhtml markup is by exporting it through the script module of a proxy component, as importing from a non `.svelte` file is not yet supported by the vscode plugin\r\n```svelte\r\n<!-- Utils.svelte -->\r\n<script context=\"module\" lang=\"ts\">\r\n\timport CustomScrollbar from \"./CustomScrollbar.svelte\";\r\n\r\n\ttype SvelteProps<T> = T extends Svelte2TsxComponent<infer U> ? U : never;\r\n\r\n\texport function custom_scrollbar(target, props: SvelteProps<CustomScrollbar>) {\r\n\t\tconst instance = new CustomScrollbar({ target, props: {...props, parentNode: target} });\r\n\t\treturn { update: (props) => instance.$set(props), destroy: () => instance.$destroy() };\r\n\t}\r\n</script>\r\n\r\n<!-- MyComponent.svelte -->\r\n<script lang=\"ts\">\r\n\timport { custom_scrollbar } from \"./Utils.svelte\";\r\n</script>\r\n\r\n<div use:custom_scrollbar={{ /** autocomplete works ! */ }}>\r\n\t...\r\n</div>\r\n```","state":"open","updated_at":"2023-06-19T03:02:51Z","created_at":"2020-10-11T11:10:35Z","creator_user_login":"pushkine"}
{"number":5509,"title":"Svelte does not update the DOM as expected when binding an input to a reactive/computed property","body":"**Describe the bug**\r\n\r\nHey guys! I am failing to understand why this tweak to the starter example doesn't \"work\". Since it feels like it should, I'm filing it as a bug, but it might well just be my lack of understanding (and in that case, my apologies!)!\r\n\r\n```\r\n<script lang=\"ts\">\r\n\texport let name: string;\r\n\r\n\t$: title = `Hello, ${name}!`\r\n\r\n\tfunction updateName(e: MouseEvent) {\r\n\t\tconsole.log(`Clear name`)\r\n\t\tname = \"\"\r\n\t}\r\n</script>\r\n\r\n<main>\r\n\t<h1>{title}</h1>\r\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\r\n\t<input bind:value={title} />\r\n\t<button on:click={updateName}>Update!</button>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n</style>\r\n```\r\n\r\nHere, I've added an `<input/>` and a `<button/>`. Modifying the input changes part of the `title`. Clicking the button is supposed to erase the `name` part of the title. And it does.. the first time it's clicked. If I update the title again using the input, clicking \"Update!\" again does nothing.\r\n\r\nIs this an issue with me or with Sveltes Reactivity?\r\n\r\n","state":"open","updated_at":"2021-12-24T02:48:24Z","created_at":"2020-10-09T13:56:29Z","creator_user_login":"jsdw"}
{"number":5507,"title":"Binding DOM nodes when looping over data that depends on a store causes infinite loop.","body":"**Describe the bug**\r\nBinding DOM nodes in a loop is causing infinite updates thus hanging the component if the data iterated over depends on a store.\r\n\r\n**Logs**\r\nNo logs as the bug hangs the browser instance.\r\n\r\n**To Reproduce**\r\nUncomment line 20.\r\nhttps://svelte.dev/repl/16e4c51a54014c57a514af46097d0044?version=3.29.0\r\n\r\n**Expected behavior**\r\nA reference to a DOM node from each item.node.\r\n\r\n**Stacktraces**\r\nNA\r\n\r\n**Information about your Svelte project:**\r\n- Microsoft Edge Version 85.0.564.63\r\n\r\n- Win10 Pro\r\n\r\n- Svelte 3.29.0\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nI'm using stores (via context) to share component states to child components to keep inter-component dependencies as loose as possible. Would have to implement additional event handling as a work around so I can use non store states in parent component and be able to bind nodes.\r\n\r\n**Additional context**\r\nIf this is a known limitation I think it should be highlighted as it is intuitive in a Svelte capability context.","state":"open","updated_at":"2021-12-26T18:00:07Z","created_at":"2020-10-08T20:00:56Z","creator_user_login":"fredrikvin"}
{"number":5506,"title":"Add context to block function names in dev mode to ease debugging","body":"![chrome_2020-10-08_19-44-29](https://user-images.githubusercontent.com/30108880/95494762-b3be2d80-099e-11eb-8798-1e9e73823924.png)\r\nDebugging would be more straightforward if block functions had a little more context to their name\r\n```diff\r\n- m: function mount(target, anchor) {},\r\n+ m: function mount_Header(target, anchor) {},\r\n- p: function update(ctx, dirty) {},\r\n+ p: function update_Header_if_block(ctx, dirty) {},\r\n```","state":"open","updated_at":"2021-12-24T16:16:18Z","created_at":"2020-10-08T17:43:42Z","creator_user_login":"pushkine"}
{"number":5505,"title":"Action objects lose contextual this","body":"https://svelte.dev/repl/bd49de5726ac4426a5a56da473578de8?version=3.29.0\r\n```svelte\r\n<script>\r\n\tconst action = () => ({\r\n\t\tfoo: \"bar\",\r\n\t\tupdate() {\r\n\t\t\tconsole.log(this); // null\r\n\t\t},\r\n\t\tdestroy() {\r\n\t\t\tconsole.log(this); // undefined\r\n\t\t},\r\n\t});\r\n\tlet leet = 1337;\r\n\tPromise.resolve()\r\n\t\t.then(() => leet++)\r\n\t\t.then(() => leet++);\r\n</script>\r\n\r\n{#if leet < 1339}\r\n\t<div use:action={{ leet }} />\r\n{/if}\r\n\r\n```\r\nChanges needed:\r\n```diff\r\n- action_action.update.call(null, { leet: /*leet*/ ctx[0] })\r\n+ action_action.update({ leet: /*leet*/ ctx[0] })\r\n```\r\n```diff\r\nfunction action_destroyer(action_result) {\r\n-        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\r\n+        return action_result && is_function(action_result.destroy) ? action_result.destroy.bind(action_result) : noop;\r\n}\r\n```","state":"open","updated_at":"2021-12-24T16:16:17Z","created_at":"2020-10-08T17:28:42Z","creator_user_login":"pushkine"}
{"number":5504,"title":"Allow specifying stub document object for svelte runtime","body":"<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm frustrated when my tests use the same `document` object and (a) they have inconsistent behavior when run concurrently and (b) there is not way of isolating them from each other and so they share state. It also is explicitly recommended against putting JSDOM variables into global scope: https://github.com/jsdom/jsdom/wiki/Don't-stuff-jsdom-globals-onto-the-Node-global\r\n\r\n**Describe the solution you'd like**\r\nInstead of using https://github.com/lukechilds/browser-env for testing I would like to use https://github.com/lukechilds/window, which does not throw everything into the global scope. Runtime code like `https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts` would only use the global dom object if none was provided when creating the component.\r\n\r\n**Describe alternatives you've considered**\r\nReinitializing browser-env before every test. This does not allow concurrent testing, though.\r\n\r\n**How important is this feature to you?**\r\nNot very important, but moving into the direction of greater testability and isolation is always a good idea.\r\n","state":"open","updated_at":"2021-12-24T16:16:16Z","created_at":"2020-10-07T11:57:25Z","creator_user_login":"kim366"}
{"number":5502,"title":"Wrong dom element valorization when updating a prop from reactive expression in external component","body":"I'm trying to get the dom element value of my \"Span\" component in the main App.svelte, but for some unfortunate combination this is not possibile while using a mix of reactive declarations, slots and props.\r\nI don't find an easy way to describe it but i succeed on isolating the problem, details in the REPL.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/d91cff8ca54947e2bbc56143ec06fe04?version=3.38.3\r\n\r\n**Expected behavior**\r\nI expect the component above in the REPL to correctly export the value of its dom element.\r\n\r\n**Severity**\r\nActually it's annoying, i don't know how many people in the world came up with the same combination as me.\r\n\r\n**Information about your Svelte project:**\r\nI'm using Webpack and Svelte 3.29.0","state":"open","updated_at":"2022-05-17T16:29:50Z","created_at":"2020-10-06T03:41:32Z","creator_user_login":"raythurnevoid"}
{"number":5501,"title":"Top-level await","body":"This is continuation for #5351.\r\n\r\nThe problem is that there's no way to render an asynchronously loaded component on SSR. My use-case for asynchronously loaded components is rendering JAM-stack site's content from JSON files. My JSON-files describe page content as blocks, that are different components (type) and their props (data).\r\n\r\nI want to have top-level await support for component's `<script>` that will allow awaiting for promises before component's initialization is finished.\r\n\r\nI've done [an implementation](https://github.com/joas8211/svelte/tree/top-level-await) for this, but changing initialization asynchronous is quite a breaking change. After the change it's not possible to initialize component with constructor, but instead we have to use a static async builder method `Component.init(options)`. Not being able to initialize synchronously breaks custom elements. Component updating also becomes asynchronous so assignments to props don't get reflected to DOM synchronously. That will also break a lot of code.\r\n\r\nIf I make async initialization a compiler option, so that it doesn't trash backwards compatibility, would maintainers be willing to merge the changes? Is there any demand for this feature?","state":"open","updated_at":"2023-05-01T21:19:14Z","created_at":"2020-10-05T19:50:51Z","creator_user_login":"joas8211"}
{"number":5476,"title":"Feature: List rendered components during SSR","body":"Resolves issue: https://github.com/sveltejs/svelte/issues/4854\r\n\r\n### Done\r\n- [x] Added tests\r\n- [x] Added documentation\r\n\r\n## Feature\r\nThis feature adds a `renderedComponents` array with a list of filenames of components rendered during SSR. \r\n\r\nYou can match these filenames to client-side modules output by a bundler such as Rollup in order to preload necessary asychnronous components before the client-side realises it even needs it.\r\n\r\nThis feature is important for apps that use asynchronous components, and would like to ensure the client-side modules are loaded asynchronously instead of synchronously (waterfall effect)\r\n\r\n**Without this feature** Total time: `2,161ms`\r\n\r\n![image](https://user-images.githubusercontent.com/17972275/94671213-bf807300-0352-11eb-9fe1-f57271b2bba8.png)\r\n\r\n**With this feature** Total time: `1,645ms`\r\n![image](https://user-images.githubusercontent.com/17972275/94671251-ceffbc00-0352-11eb-9214-9fb18a6f97bc.png)\r\n\r\nThis time gains compound for each additional nested asychronous layer (eg: async components requiring async components).\r\n\r\nTime savings also be improved by implementing HTTP/2 Push, which is currently not possible without this feature.\r\n\r\n---\r\n### Use case:\r\n\r\nThis feature is essential for enterprise applications that would like to provide a fast client-side experience, with minimal loading times for asynchronous components.\r\n\r\n**Asset injection** ensures that the necessary scripts are prefetched/preloaded for the client in parallel (and enables the possibility of `http/2 PUSH` for async output files)\r\n\r\n![image](https://user-images.githubusercontent.com/17972275/82307604-bde78b80-99ff-11ea-8c1a-412b3aaefd6a.png)","state":"open","updated_at":"2023-03-14T15:10:24Z","created_at":"2020-09-30T10:00:40Z","creator_user_login":"AlbertMarashi"}
{"number":5453,"title":"Call actions directly when possible","body":"https://svelte.dev/repl/a35c87076e0d4ca48aef925ce40ff5b7?version=3.26.0\r\n```svelte\r\n<script>\r\n\timport {foo} from \"./actions\"\r\n</script>\r\n\r\n<div use:foo />\r\n```\r\nIn cases where actions are not sourced from the component `ctx` such as in imports and global variables, `.call null,` can be safely stripped\r\n```diff\r\n- dispose = action_destroyer(foo_action = foo.call(null, div));\r\n+ dispose = action_destroyer(foo_action = foo(div));\r\n```","state":"open","updated_at":"2021-12-24T16:16:13Z","created_at":"2020-09-24T10:31:26Z","creator_user_login":"pushkine"}
{"number":5365,"title":"Reactive declaration on a store, caused by a change in another store from another component is not called","body":"**Describe the bug**\r\n\r\nComponentA setting the value of a store (call it store1), which calls a function in ComponentB as it is dependent on this store. The function in componentB sets the value of another store (call it store2) and has a reactive declaration for store2 (just a console log, or anything else for that matter), the reactive declaration is NOT called. \r\n\r\nThis appears to be because the initial trigger is from ComponentA. If I update store2 from ComponentB, it calls the reactive declaration on store2.\r\n\r\n**To Reproduce**\r\n\r\nPlease click here:\r\n\r\nhttps://svelte.dev/repl/f51251e28e1a42d292de15b1a6079476?version=3.24.1\r\n\r\nTop.svelte sets setCategory (type the value in the text field and hit SetCat and it updates it). Annoying.svelte listens for this and calls on onSetCat, which console logs (to make sure it's running) and then sets setSearch, which should show an alert, but it does not (only shows on page load, when the value is set from stores.js. There is a button in Annoying.svelte, called try locally, and this DOES trigger the reactive declaration. I've included commented code for a traditional subscribe function, to show it does not work with this either.\r\n\r\n**Information about your Svelte project:**\r\n- Version 85.0.4183.83 (Official Build) (64-bit)\r\n\r\n- Windows 10\r\n\r\n- Reproduced on repl which I believe is the latest?\r\n\r\n**Severity**\r\n\r\nUmm going to be honest, I like this bug, because it actually makes my live search function work a bit better, but hey, I'm an honest guy.\r\n","state":"open","updated_at":"2021-12-30T14:32:21Z","created_at":"2020-09-07T21:25:21Z","creator_user_login":"lovetoast"}
{"number":5347,"title":"Audio Element Bindings Working Unreliably in Firefox","body":"**Describe the bug**\r\nWhen (1) Server-side rendering and (2) Browsing in firefox, Svelte fails to set bindings for values that are initialized to a value on page reload.\r\n\r\nFor instance, with code like\r\n\r\n```\r\n<audio ... bind:duration={myDuration} />\r\n```\r\n\r\nif `myDuration` is initialized to 0, then it will remain zero indefinitely.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\n\r\nA repo reproducing this issue is here: https://github.com/qstearns/audio-event-repro\r\n\r\nI used sapper to get SSR to work easily, but I suspect this is a svelte issue.\r\n\r\nTo run follow the readme or:\r\n\r\n1. npm i && npm run dev\r\n2. Navigate to localhost:3000 in Firefox\r\n3. Reload the page and observe the value is set to 0.\r\n\r\n**Expected behavior**\r\nI expected the value to be set to the value of the audio clip.\r\n\r\n**Stacktraces**\r\n\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 79.0\r\n\r\n- Your operating system: Manjaro Linux 20.1\r\n\r\n- Svelte version: 3.17.3\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nThis bug is just annoying because I can always initialize my values to undefined and adjust my application code, but a fix would make me happy.\r\n\r\n**Additional context**\r\n\r\nMay be related to #3524, which I have also noticed a regression on.\r\n","state":"open","updated_at":"2023-06-27T19:20:21Z","created_at":"2020-09-02T20:53:32Z","creator_user_login":"qstearns"}
{"number":5346,"title":"Built-in support for respecting the `prefers-reduced-motion` flag with animations/transitions","body":"<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI was thinking about new ways to honor a user's request to have a [less frustrating experience with animations](https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html) and eventually wondered if this flag is something Svelte itself could (whether as default on or default off) \"respect.\"\r\n\r\n**Describe the solution you'd like**\r\nIf Svelte respected `prefers-reduced-motion` out of the box, it could opt-out of any transitions or animations automatically without extra effort on the developer's part. Alternatively, this could be a flag to the various animation features that signal whether they should skip an animation instruction if `prefers-reduced-motion` is on.\r\n\r\n**Describe alternatives you've considered**\r\nI've done this in the past manually (in `three.js`/WebGL land) so I think it's certainly doable by the developer if left to their own devices, and can be done today in Svelte without formal support from the library.\r\n\r\n**How important is this feature to you?**\r\nI've always appreciated how Svelte helps developers do the right thing, and tries to lessen the pain of the \"right thing\" if you were left to coding it yourself. If a user is making the request to not have gratuitous or potentially harmful animations, I believe we should do whatever we can to respect that. In my opinion, this feels like a prime candidate for Svelte to encourage and enable the humane choice of respecting the user's request.\r\n","state":"open","updated_at":"2023-04-11T23:35:23Z","created_at":"2020-09-02T20:24:17Z","creator_user_login":"rdmurphy"}
{"number":5326,"title":"Using svelte's each inside contenteditable","body":"I don't know whether this is a bug or a feature request, but I discovered today that you can't use `each` reliably within a `contenteditable` element.\r\n\r\nI fathomed a technique to add elements using 3 setTimeouts and momentarily emptying the list (`list = []`), then doing `innerHTML = \"\"`, and finally setting the list again (`list = someNewList`). Alas, for deleting an item there is no such workaround.\r\n\r\nTo explain this, suppose you have a `<div>` something like the following:\r\n\r\n```svelte\r\n<div contenteditable=\"true\">\r\n    {#each items as item}\r\n        <p>{item}</p>\r\n    {/each}\r\n</div>\r\n```\r\n\r\n1. When you press return in that div, it creates a `<p>` that svelte doesn't know about. I'm solving this with an action that dispatches an event when the contenteditable blurs.\r\n\r\n2. When you delete a line, it removes a `<p>` and if that was an original item i.e. inserted by svelte's `{#each}` then you get a `cannot read property 'removeChild' of null` when you re-set the list.\r\n\r\n---\r\n\r\nIt strikes me that making svelte more aware of `contenteditable` is not the appropriate route to resolve this. So that rules out feature request. \r\n\r\nInstead I'm left thinking, is this a bug? Should svelte disregard errors when removing elements that the user already removed - irrespective how they removed them?","state":"open","updated_at":"2021-12-24T16:16:12Z","created_at":"2020-08-30T01:11:59Z","creator_user_login":"benbenbenbenbenben"}
{"number":5312,"title":"$$slots with conditional/reactive content?","body":"The new `$$slots` feature (thanks to @tanhauhau) provides information if a slot is loaded/filled or empty.\r\nHowever this only works with \"static\" content. As soon as there is a condition `{#if}` or `{#await}` involved the\r\nthe output of `$$slots` is not really useful anymore or in case of a named slot a error is thrown.\r\n\r\nIn case of an unnamed slot in combination with `{#if}` the slot is considered *filled* and `$$slots.default` results to `true`\r\neven if the condition passed to the slot is false. Additionally the fallback wont be rendered.\r\n\r\nIn case of a named slot value inside a `{#if}`  (example below) the line `<div slot=\"a\">Content</div>` will throw\r\n`ValidationError: Element with a slot='...' attribute must be a child of a component or a descendant of a custom element`\r\n\r\nExample (tested with `commit 8adb47401e7f7b420ffabf9752a8236114aaecfc`)\r\n\r\n``` svelte\r\n// App.svelte\r\n\r\n<script>\r\n    import SlotWrapper from './SlotWrapper.svelte';\r\n    let show = false; \r\n</script>\r\n\r\n<SlotWrapper>\r\n    {#if show}\r\n        <div slot=\"a\">Content</div>  <!-- throws error -->\r\n    {/if}\r\n</SlotWrapper>\r\n\r\n<button on:click=\"{()=> show = !show}\">\r\n    { show ? 'Hide' : 'Show' }\r\n</button>\r\n\r\n```\r\n\r\n``` svelte \r\n// SlotWrapper.svelte\r\n\r\n<script>\r\n    $: console.log('slots', $$slots)    \r\n</script>\r\n\r\n<slot name=\"a\">Fallback Content</slot>\r\n\r\n```\r\n\r\n**The behaviors that I would expect, want and need are:**\r\n\r\n1. Properties of `$$slot` are only set to true if the content passed to a slot is renderable.  \r\n2. Conditionally pass content to named slots like in the example above. (but that one is not as important me as the first one)\r\n\r\n\r\n**Why would I want that?**\r\n\r\nOne usecase (besides many others) is implicitly setting the state of a component with a slot.\r\n\r\nExample: \r\nI have a Card component that displays data coming from a fetch request. The Card component should have a\r\n`loading` state while it is fetching and go to its `default` state if the data is fetched and rendered.\r\nAt the moment the only way i konw of is to explicitly create a `loading` variable, set it to `true` before fetching, set it to `false`\r\nafterwards and pass it down to the  `Card` component. \r\nThis is okay if you have to do it one or twice but not if you have many components with similar structure.\r\n\r\nWith a properly reactive `$$slots` property this could be much cleaner and could look something like this:\r\n\r\n```svelte\r\n\r\n// Card.svelte\r\n<script>\r\n  $: loading = !$$slots.default;\r\n</script>\r\n\r\n<div class=\"card\" class:loading>\r\n   <slot />\r\n</div>\r\n\r\n// App.svelte\r\n// ... script, imports. etc...\r\n<Card>\r\n  {#await fetch(url).then(responseToJSON) then data}\r\n  { data.name }\r\n  {/await}\r\n</Card>\r\n```\r\n\r\nThats it. \r\nThanks you for providing such an awesome tool. \r\n","state":"open","updated_at":"2022-06-11T16:59:34Z","created_at":"2020-08-26T20:14:19Z","creator_user_login":"icalvin102"}
{"number":5296,"title":"Warn on excessive `$$invalidate` calls","body":"Example\r\n```ts\r\nfunction update() {\r\n\tlet i = 0;\r\n\tlet v;\r\n\tfor (v of el_tr) arr[i++] = v;\r\n\tarr.length = i;\r\n}\r\n```\r\n\r\nCompiled\r\n```ts\r\nfunction update() {\r\n\tlet i = 0;\r\n\tlet v;\r\n\tfor (v of el_tr) $$invalidate(1, arr[i++] = v, arr);\r\n\t$$invalidate(1, arr.length = i, arr);\r\n}\r\n```\r\n\r\nSvelte's reactivity system involves calling `$$invalidate` on every local var reassignment\r\ninjecting likely superfluous function calls in situations such as in for loops without raising user's awareness should be a huge concern\r\n\r\nI suggest adding an alternate component init function in dev mode whereby each superfluous `$$invalidate` call per update cycle is counted and reset `after_update` so as to warn the user when certain variables are invalidated hundreds of times in the span of a single tick","state":"open","updated_at":"2021-12-24T16:43:06Z","created_at":"2020-08-21T15:12:33Z","creator_user_login":"pushkine"}
{"number":5292,"title":"Preprocessing tries to process style string within script section","body":"**Describe the bug**\r\nI have a component which generates a small bit of HTML which is injected into an `iframe`. The HTML contains a `style` section which the preprocessing tries to transform, yielding a parser error because there are interpolated values in it.\r\n\r\n(Accidentally opened this issue in `svelte-preprocess` first: https://github.com/sveltejs/svelte-preprocess/issues/225\r\nThe problem is in the [wrapper code][code-ref] though.)\r\n\r\n**To Reproduce**\r\n\r\nA component like this will cause the error:\r\n\r\n```svelte\r\n<script>\r\n\tfunction getItemHtml(html)\r\n\t{\r\n\t\tconst style = window.getComputedStyle(document.documentElement);\r\n\r\n\t\tconst background = style.getPropertyValue('--background');\r\n\t\tconst foreground = style.getPropertyValue('--foreground');\r\n\r\n\t\treturn html + /*html*/`<style>\r\n\t\t\thtml\r\n\t\t\t{\r\n\t\t\t\tbackground: ${background};\r\n\t\t\t\tcolor: ${foreground};\r\n\t\t\t}\r\n\t\t</style>`;\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t:global(:root)\r\n\t{\r\n\t\t--background: #333;\r\n\t\t--foreground: #ddd;\r\n\t}\r\n</style>\r\n\r\n<div>\r\n\tHTML:\r\n\t<pre>\r\n\t\t{getItemHtml('Hello World')}\r\n\t</pre>\r\n</div>\r\n```\r\n\r\n[[Repository with Webpack config]](https://github.com/brunnerh/svelte-style-in-script-issue)\r\n\r\n**Expected behavior**\r\nNo attempted transform and thus no errors.\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n```\r\nERROR in ./src/app.svelte\r\nModule build failed (from ./node_modules/svelte-loader/index.js):\r\nCssSyntaxError: .\\src\\app.svelte:4:19: Unknown word\r\n    at Input.error (.\\node_modules\\postcss\\lib\\input.js:130:16)        \r\n    at Parser.unknownWord (.\\node_modules\\postcss\\lib\\parser.js:563:22)\r\n    at Parser.other (.\\node_modules\\postcss\\lib\\parser.js:168:12)      \r\n    at Parser.parse (.\\node_modules\\postcss\\lib\\parser.js:77:16)       \r\n    at parse (.\\node_modules\\postcss\\lib\\parse.js:17:12)\r\n    at new LazyResult (.\\node_modules\\postcss\\lib\\lazy-result.js:60:16)\r\n    at Processor.<anonymous> (.\\node_modules\\postcss\\lib\\processor.js:138:12)\r\n    at Processor.process (.\\node_modules\\postcss\\lib\\processor.js:117:23)\r\n    at transformer (.\\node_modules\\svelte-preprocess\\dist\\transformers\\globalStyle.js:55:67)\r\n    at Object.exports.runTransformer (.\\node_modules\\svelte-preprocess\\dist\\autoProcess.js:51:12)\r\n    at async style (.\\node_modules\\svelte-preprocess\\dist\\autoProcess.js:171:33)\r\n    at async .\\node_modules\\svelte\\compiler.js:27016:32\r\n    at async Promise.all (index 0)\r\n    at async replace_async (.\\node_modules\\svelte\\compiler.js:26971:52)\r\n    at async preprocess (.\\node_modules\\svelte\\compiler.js:27012:19)\r\n @ ./src/main.js 1:0-31 3:4-7\r\n @ multi ./src/main.js\r\n```\r\n\r\n</details>\r\n\r\n**Information about your project:**\r\n\r\n- Your browser and the version: -\r\n- Your operating system: Windows 10 64bit\r\n- `svelte` version: 3.24.1\r\n- Webpack\r\n\r\n**Severity**\r\n\r\nLow; workarounds exist.\r\n\r\n**Workaround**\r\n\r\nTrick the Regex looking for `<style>`, e.g.:\r\n```js\r\nreturn html + /*html*/`<${''}style>...</${''}style>`\r\n```\r\n\r\n[code-ref]: https://github.com/sveltejs/svelte/blob/master/src/compiler/preprocess/index.ts#L117","state":"open","updated_at":"2023-01-24T16:19:42Z","created_at":"2020-08-19T18:29:22Z","creator_user_login":"brunnerh"}
{"number":5281,"title":"Warnings: Add info if warning can be ignored","body":"**Is your feature request related to a problem? Please describe.**\r\nOver at the [language-tools](https://github.com/sveltejs/language-tools) repo we get bug reports that people cannot disable warnings. Most can be disabled, but some apparently can't. This is the most recent issue where someone asks how to disable the warnings for unused selectors: https://github.com/sveltejs/language-tools/issues/457 .\r\nAccording to [this PR](https://github.com/sveltejs/svelte/pull/3351) it should be possible to silence errors / prevent the compiler from returning them by adding a `svelte-ignore` comment above it, for example `<!-- svelte-ignore some-a11y-warning-code -->`.\r\n\r\n**Describe the solution you'd like**\r\nI would like the compiler to add a property like `canIgnore: false` to the warning, if the warning cannot be disabled. We could use that so that a quickfix to add the `svelte-ignore` comment no longer appears. We then could also add additional text to the message in the IDE (\"this warning cannot be ignored through a comment\").\r\n\r\n**Describe alternatives you've considered**\r\nGradually add things to a blacklist without knowing if that's really correct.\r\n\r\n**How important is this feature to you?**\r\nNice to have, would clean up confusion.\r\n\r\n**Additional context**\r\nIn order to implement this, I propose to move out all warnings into a separate, common file, where they are listed in a concise manner. People could get a nice overview of all warnings that are possible. Rich also pointed out that this would be good [in the PR](https://github.com/sveltejs/svelte/pull/3351#issuecomment-518012895) which implemented the `svelte-ignore`-comments.\r\n","state":"open","updated_at":"2021-07-06T15:09:11Z","created_at":"2020-08-16T15:40:24Z","creator_user_login":"dummdidumm"}
{"number":5274,"title":"contenteditable with removed by user html nodes inside \"if\" block throws an error on update","body":"**Describe the bug**\r\nIf you have html nodes inside `contenteditable` block, which are wrapped with `{#if}{/if}` — removing that nodes will throw an error after update.\r\n\r\n**Logs**\r\n`Uncaught (in promise) TypeError: Cannot read property 'removeChild' of null\r\n    at detach\r\n    at Array.forEach\r\n    at HtmlTag.d\r\n    at HtmlTag.p\r\n    at Object.update [as p]\r\n    at Object.update [as p]\r\n    at update\r\n    at flush`\r\n\r\n**To Reproduce**\r\nThat behavior is reproducible, here is REPL https://svelte.dev/repl/fa601199d8d345d3977bf48bdb8d14f4?version=3.24.1","state":"open","updated_at":"2021-12-24T16:16:09Z","created_at":"2020-08-15T09:28:49Z","creator_user_login":"boatincow"}
{"number":5268,"title":"onDestroy not called for nested component removed during parent nodes exit transition","body":"**Describe the bug**\r\n\r\nComponents are not destroyed when they are removed from their parent node while that node is currently running its exit transition.\r\n\r\nExample: I have a component in a div that has a fade transition, and I remove the component while that div is fading out. The component is not destroyed correctly. It is gone from the DOM, but still \"alive\" (store subscriptions not closed, onDestroy not called, etc).\r\n\r\n**To Reproduce**\r\n\r\nI have created a small REPL example that reproduces the issue.\r\n\r\nNote how the console only logs the onDestroy call for the Outer component, but NOT the inner component when you click on the \"Close\" button.\r\nIf you remove \"transition:fade\" in App.svelte:9 then everything works correctly.\r\n\r\nhttps://svelte.dev/repl/eff9e77c7d5c41059616211e46f3f021?version=3.24.1\r\n\r\nThe example is a bit artificial of course. In our actual application we have a lot of stores subscribed to realtime updates via websocket. It can frequently happen that you switch/navigate between different content (using transitions) and an update just happens to arrive for the \"old\" content while the transition is active.\r\n\r\n**Expected behavior**\r\nonDestroy should be called / component should be destroyed when using transitions.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 84.0.4147.125 (Official Build) (64-bit)\r\n\r\n- Your operating system: OSX 10.15.5\r\n\r\n- Svelte version: 3.24.1 \r\n\r\n**Severity**\r\n\r\nNow that I managed to trace down the cause of this issue it is not that severe, as it's easy to work around; it just blocks us from using transitions / some third party components that rely on them.\r\nHowever before I managed to isolate it was extremely frustrating as it appeared as seemingly \"random\" behaviour with some components not unmounting / resulting in dangling store subscriptions and associated weirdness.\r\n\r\n\r\n","state":"open","updated_at":"2023-08-13T06:45:39Z","created_at":"2020-08-13T15:37:56Z","creator_user_login":"Tharit"}
{"number":5264,"title":"Values in an outro transition are sometimes determined at render time","body":"**Describe the bug**\r\nValues in an outro (`out:`) transition are sometimes determined at render time, rather than at transition time. More specifically, this happens when the the outro is on elements in an `#each` block. I have determined that this is indeed the case by putting logs in the svelte transition code.\r\n\r\n**To Reproduce**\r\nA REPL of the bug can be found here:\r\nhttps://svelte.dev/repl/1ad9b6b4883e4b92bb679418a529ea00?version=3.24.1\r\n\r\nWhile normal behavior can be found here:\r\nhttps://svelte.dev/repl/ad9931c0bfb1420aadec3180202bf6bd?version=3.24.1\r\n\r\n**Expected behavior**\r\nIn the bug repl, the outro transition should always match the `outX` variable, which is set to a negative value when \"next\" is clicked, and a positive value when \"prev\" is clicked. This would be similar to the behavior in the second repl (demonstrating normal behavior), where the outro always matches the value of `y`.\r\nInstead, the outro always matches the previous value of `outX`, resulting in the outros occasionally moving in the wrong direction.\r\n\r\n**Severity**\r\nThis bug causes problems trying to make a carousel component. It is not blocking me personally, but it was reported on discord.\r\n\r\n**Additional context**\r\nThis bug was originally reported by @levyadams on discord.","state":"open","updated_at":"2022-01-19T03:45:59Z","created_at":"2020-08-13T13:21:45Z","creator_user_login":"mosheduminer"}
{"number":5240,"title":"fix: Set element's value attribute to default empty string if nothing is provided","body":"fix: https://github.com/sveltejs/svelte/issues/4467\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [ ] It's really useful if your PR relates to an outstanding issue, so please reference it in your PR, or create an explanatory one for discussion. In many cases, features are absent for a reason.\r\n- [x] This message body should clearly illustrate what problems it solves. If there are related issues, remember to reference them.\r\n- [x] Ideally, include a test that fails without this PR but passes with it. PRs will only be merged once they pass CI. (Remember to `npm run lint`!)\r\n### Tests\r\n-  [x] Run the tests with `npm test` or `yarn test`)\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-08-05T10:09:55Z","creator_user_login":"asvsfs"}
{"number":5218,"title":"Allow indicating component \"root\" element so actions may be used on the component tag","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI cannot augment third-party components with actions because components in Svelte do not have an implicit host/root element at runtime. The most simple example I can think of is a button component from a library that does not support tooltips, but I would like to add a tooltip to the button.\r\n\r\n```Svelte\r\n<script>\r\n    import MatButton from \"svelte-material\";\r\n    import myTooltip from \"../actions/tooltip\";\r\n</script>\r\n\r\n<!-- Obviously, tooltips are not as relevant for text buttons but I am simplifying the example -->\r\n<MatButton use:myTooltip={\"Click me!\"}>\r\n    Login\r\n</MatButton>\r\n```\r\n\r\nThe above code does not compile because there is no host element at runtime for the `MatButton` so there is no target for the action. Thus, the `MatButton` component must support a `tooltip` property or I'm out of luck.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI would like components to be able to optionally designate an element in their markup as the root/host element so that actions used on instances of the component get forwarded to that element. In my example, `MatButton.svelte` might look something like this:\r\n\r\n```Svelte\r\n<script>\r\n    // (omitted)\r\n</script>\r\n\r\n<!-- Notice this button is marked as the host -->\r\n<button svelte:host>\r\n    <slot/>\r\n    <div class=\"ripple\"></div>\r\n</button>\r\n```\r\n\r\nBecause the `MatButton` component gets replaced by a single `button` element, I think it is very intuitive for users of the library to think of the `MatButton` and the `button` element it gets replaced by as one and the same.\r\n\r\nAt first, I thought the smartest solution would be to automatically allow actions on a component provided its markup has exactly one root element. However, I realized there might be situations where a component has multiple root elements but only one is visible at runtime and is the 'primary' element while the others are there for intercepting focus or some other shenanigans, etc. Besides, it's probably better for component authors to be explicit about whether or not their component maps to a specific runtime element. Thus, I arrived at the `svelte:host` marker attribute.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n1. Implicitly creating a runtime host element for every component at runtime and injecting components' markup into their host elements. **Just kidding!** I think Svelte's approach where it replaces component instances with the component markup is vastly superior to Angular and the other frameworks. It gives the developer more control over what the DOM structure looks like at runtime—which means better performance and fewer CSS headaches, and also allows the developer to create [very powerful recursive components](https://svelte.dev/repl/347b37e18b5d4a65bbacfd097536db02?version=3.24.0). Fun Fact: Angular ended up having to work around this madness via attribute components (like `<button mat-button>` instead of `<mat-button>`) so that the resulting DOM could be less convoluted and more semantic.\r\n\r\n2. For my simple tooltip example, I could create a `TooltipHitbox` component with a `<slot/>` inside a `<div use:myTooltip={tooltipProp}>` and then wrap `MatButton` instances with that component. This would create unnecessary wrapper elements at runtime, potentially causing issues with styling, and is also needlessly verbose and obnoxious.\r\n\r\n**How important is this feature to you?**\r\n\r\nThis feature is not a dealbreaker for me as I feel it is the only bad tradeoff to Svelte's replace-with-markup approach for components. That said, it does make third-party components less extensible because you cannot use actions on them and you cannot forward stuff to their internal markup within your own templates. This means you either have to use a jank workaround (see my first alternative solution) or you end up writing your own version of a library component just because you need to apply an action to the rendered element.\r\n","state":"open","updated_at":"2023-02-05T19:03:26Z","created_at":"2020-07-30T22:29:23Z","creator_user_login":"samclaus"}
{"number":5198,"title":"Allow attributes on the `<title>` element","body":"**Is your feature request related to a problem? Please describe.**\r\nLooks like the `<title>` element is [barred from having any attributes] (https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/nodes/Title.ts). [According to MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title#Attributes), it can host any global attribute. It was a bit of a surprise that it had special treatment.\r\n\r\nThis prevents adding to it an `aria-live` attribute that would allow its announcement by assistive technology (provided it's unhidden from the accessibility tree, see experiment there: https://romaricpascal.is/posts/title-element-aria-live/).\r\n\r\n**Describe the solution you'd like**\r\nAt the moment, it looks like the attribute can be set through an `onMount()` call:\r\n\r\n```js\r\n  onMount(() => {\r\n    document.head.querySelector('title').setAttribute('aria-live', 'assertive');\r\n  });\r\n```\r\n\r\nbut it'd be great to just be able to do:\r\n\r\n```html\r\n<svelte:head>\r\n  <title aria-live=\"assertive\">{$title}</title>\r\n</svelte:head>\r\n```\r\n\r\nThis would also make updating whether the title should be announced lighter, especially if the value comes from a store:\r\n\r\n```html\r\n<svelte:head>\r\n  <title aria-live={$live}>{$title}</title>\r\n</svelte:head>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nUsing `onMount` provides a workable workaround. There's just a bit of logistics if attributes need to come from a store or multiple attributes need setting (but in my use-case, that would only be `aria-live`).\r\n\r\n**How important is this feature to you?**\r\nIt's not a dealbreaker that it's not there. It just feels less idiomatic to have all that boilerplate around. It was also confusing to have that specific tag not work as a regular tag (maybe it's a matter of documentation, though).","state":"open","updated_at":"2021-12-24T16:16:08Z","created_at":"2020-07-24T13:48:47Z","creator_user_login":"romaricpascal"}
{"number":5162,"title":"Erroneous \"Stores must be declared at the top level of the component\" error","body":"**Describe the bug**\r\nSince #5079, valid code is causing the following error:\r\n\r\n> Stores must be declared at the top level of the component (this may change in a future version of Svelte)\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/8240f1807eda4d429018826229910e48?version=3.24.0\r\n\r\nIt's coming from [this code](https://github.com/Rich-Harris/pancake/blob/master/components/Grid.svelte):\r\n\r\n```svelte\r\n<script>\r\n  import { getChartContext } from './Chart.svelte';\r\n  import { get_ticks } from '../utils/ticks.mjs';\r\n  \r\n  // ...\r\n\r\n  const { x1, y1, x2, y2, x, y } = getChartContext();\r\n  \r\n  // ...\r\n\r\n  $: style = orientation === HORIZONTAL\r\n    ? (y, i) => `width: 100%; height: 0; top: ${$y(y, i)}%`\r\n    : (x, i) => `width: 0; height: 100%; left: ${$x(x, i)}%`;\r\n</script>\r\n```\r\n\r\nThe `y` that is part of the chart context is a store; the `y` inside the closure is a number.\r\n\r\n**Expected behavior**\r\nNo error\r\n\r\n**Severity**\r\n\r\nModerate. Requires either downgrading Svelte in our project, or working around the bug in Pancake","state":"open","updated_at":"2022-05-05T10:13:24Z","created_at":"2020-07-17T15:45:55Z","creator_user_login":"Rich-Harris"}
{"number":5156,"title":"Input binding wrongly triggers reactivity of a variable used in it's bind path computation","body":"**Describe the bug**  \r\nWhen we bind an input to a object property, and if we use an expression to compute that property name, binding not only triggers reactivity of containing object, but also other other objects used in it's property-path computation. For example, if we say `<input bind:value={form[schema.name]}>`, changing input not only triggers reactivity over `form` object, but also on `schema` object used in property name computation.\r\n\r\nAnd if we declare to reset `form` on `schema` change, that will be mis-triggered on value change to above binding, and effectively resets form, and binding itself again.\r\n\r\n**To Reproduce**  \r\nHere is [REPL](https://svelte.dev/repl/db10918e1b1a4d6eb865aafc63809149?version=3.24.0). Try to input in field, and we can see reactivity mis-triggering on `schema`.\r\n\r\n**Expected behavior**  \r\nshould not trigger reactivity on other objects used in expression to compute property path.\r\n\r\n**Severity**  \r\nSeems serious.\r\n\r\n**Additional context**  \r\nPossibly related issues:  \r\n#4448 , #4933","state":"open","updated_at":"2022-10-13T19:09:14Z","created_at":"2020-07-16T17:34:39Z","creator_user_login":"damooo"}
{"number":5143,"title":"Error binding value to select with multiple attribute and $$restProps","body":"**Describe the bug**\r\n\r\nAfter upgrading to Svelte 3.24.0, seeing `undefined is not an object (evaluating 'value.indexOf')` when binding value to select with multiple attribute _and_ using `$$restProps`.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/b32539efc7824407aec09c91201a18ae?version=3.24.0\r\n\r\n```\r\n<script>\r\n  export let value = '';\r\n</script>\r\n\r\n<select\r\n  {...$$restProps}\r\n  bind:value\r\n  multiple\r\n>\r\n  <slot />\r\n</select>\r\n```\r\n\r\n**Additional context**\r\n\r\nSeems to be coming from here: https://github.com/sveltejs/svelte/blob/ce3d0461e9d6b38605f7e067feb3391686fc15ec/src/runtime/internal/dom.ts#L229\r\n","state":"open","updated_at":"2022-08-25T18:42:53Z","created_at":"2020-07-14T05:04:33Z","creator_user_login":"bestguy"}
{"number":5137,"title":"Binding spread attributes","body":"**Is your feature request related to a problem? Please describe.**\r\nI try, to create some component, and i would like use spread attributes. However we can't bind this kind of attributes. Tha's why I think about a solution\r\n\r\n**Describe the solution you'd like**\r\nbind spread like bind:{...attributes}\r\n\r\n**Describe alternatives you've considered**\r\nI don't an other alternatives\r\n\r\n**How important is this feature to you?**\r\nI think it's important, but it's not like a principal feature.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","state":"open","updated_at":"2021-08-01T00:56:42Z","created_at":"2020-07-13T10:32:12Z","creator_user_login":"RiseNet-Web"}
{"number":5112,"title":"Events in spread props","body":"**Is your feature request related to a problem? Please describe.**\r\nAt the moment, there is no way to manage component events for a dynamic component, with spread props. Let consider this example:\r\n\r\n```\r\n<script>\r\n\tconst props = {\r\n\t\t'label': 'Click me'\r\n\t\t'on:action': () => {}\r\n\t}\r\n</script>\r\n<svelte:component this={Comp} {...props} />\r\n```\r\n`on:action` will not be called.\r\n\r\n[REPL here](https://svelte.dev/repl/b2e8f113590b48e99458d0e56ae1383e?version=3.24.0)\r\n\r\n**Describe the solution you'd like**\r\nTo have the code above working 😊\r\n\r\n**Describe alternatives you've considered**\r\nThe workaround is to consider callbacks instead of events, like this :\r\n```\r\n<script>\r\n\tconst props = {\r\n\t\t'label': 'Click me'\r\n\t\t'onAction': () => {}\r\n\t}\r\n</script>\r\n<svelte:component this={Comp} {...props} />\r\n```\r\n\r\nBut then the code in Comp must be different compared to a normal dispatch usage.\r\n\r\n**How important is this feature to you?**\r\nIt's just annoying because the workaround works pretty well, but maybe it can be a useful feature to keep consistency with the spread props.\r\n","state":"open","updated_at":"2022-08-13T21:18:47Z","created_at":"2020-07-08T07:20:27Z","creator_user_login":"fbasso"}
{"number":5110,"title":"Restriction of one top level style block causing issues","body":"**Is your feature request related to a problem? Please describe.**\r\nI've created a tool which preprocesses HTML and scans class names for functional CSS. This CSS is then translated into styles using CSS variables which are inserted into the HTML using style blocks. A unique class name is also added to the element so the styles are tied to the element.\r\n\r\nThis is problematic in Svelte however, because it requires there to be only one style block. I'm aware there have been some discussions on this before but I can't remember what the outcome was and if it's intended to only support one top-level style block.\r\n\r\n**Describe the solution you'd like**\r\nIdeally, I think you should be able to use more than one style block. This is what native HTML supports and I would expect to be able to drop a style block anywhere and for it to still work. I think in this case, the error handling is doing more harm than good. In the case of this preprocessor, there isn't any need for Svelte to be able to support the style blocks it adds, other than just passing it to the browser. This error is intended to make Svelte users aware that only the top-level style block will be supported but then denies the ability to process the file because more than one style block exists in the source code.\r\n\r\nAlternatively, an easier way to solve this using a preprocessor would also be welcomed. Like the ability to traverse preprocessor content source code easier.\r\n\r\n**Describe alternatives you've considered**\r\nI've tried to create a workaround for this by combining all the style blocks created by my preprocessor and applying them as one style block but it's not easy and I encounter quite a challenges.\r\n\r\nThe first is I need to convert the content provided by the `svelte.preprocess` API into something that's easier to work with. Then I search for all the style tags, merge their contents together and prepend it to the beginning of the document.\r\n\r\nBut in converting the content from a string to a syntax tree using a library like Cheerio it causes some issues converting back to a string, for example, it escapes some symbols like ampersands.\r\n\r\nI also have the additional burden that the library I'm using to implement my tool has a [conflict with some Svelte syntax](https://github.com/phtmlorg/phtml/issues/8), so for now, I can't use pHTML on every component.\r\n\r\nThis is the progress I've made so far for combining all style blocks into one through a preprocessor.\r\n\r\n```js\r\nmarkup({ content, filename }) {\r\n        // Need to implement way code fence pHTML for now because of syntax issue\r\n\treturn phtmlUtilityClass.process(content, { from: filename }).then(result => {\r\n\r\n\t\tlet $ = cheerio.load(result.html)\r\n\r\n\t\tstyleBlocks.push($('style').html())\r\n\t\tvar styleTag = $('style')\r\n\t\tstyleTag.remove()\r\n\r\n\t\t$('body').prepend(`<style>${styleBlocks.join('')}</style>`)\r\n\r\n\t\tlet newHTML = $('body').html()\r\n\r\n\t\treturn { code: newHTML, map: null }\r\n\t});\r\n}\r\n```\r\n\r\n**How important is this feature to you?**\r\nFairly important, it's blocking me from integrating my CSS framework into Svelte. But I'm likely to be in the minority for use cases. I use style blocks for live previewing of styles in some projects so I'm not looking forward to coming up against this issue there also.\r\n\r\nI'm open to any other alternatives for how I could work around this. \r\n\r\n**Additional context**\r\nYou can view a work in progress of the project I'm trying to create. https://github.com/limitlessloop/phtml-utility-class/tree/version-3\r\n\r\nJust referencing this issue where multiple style blocks were also being discussed.\r\nhttps://github.com/sveltejs/svelte/issues/2762\r\n","state":"open","updated_at":"2021-12-24T16:16:04Z","created_at":"2020-07-07T17:38:36Z","creator_user_login":"gavinmcfarland"}
{"number":5106,"title":"Support for \"High Order Component\" / Wrapper / Forwarding","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI want to build a \"transparent\" lazy-loading component. This component should load a target component asynchronously, and when ready, delegate everything to this target.\r\n\r\nThis lazy-component should be generic: it should work for every target component. Moreover, I don't want the consumer of the component to know there is this wrapper, it should be \"transparent\" for it.\r\n\r\nToday, it doesn't seem to be possible to build such \"wrapper\" because : \r\n- There is no API to forwards slots to the delegate ;\r\n- There is no API to forwards events to the delegate ;\r\n- There is no API to forwards \"bind\" from the parent to the delegate ;\r\n\r\nThere is various issues about this : \r\n#2837 about forwardings events ;\r\n#1824 and #4295 about forwardings slots ;\r\nI found nothing about \"binding\" forwardings.\r\n#4647 is about a loadable component, closed because \"svelte-loadable\" can implements this issue. however, it's false because it doesn't supports slots or events.\r\n\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nAn official way/api to \"wrapper\" transparently another component.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI am able to prototype such wrapper with internals API, however I am not able to forwards binding from parent to child : \r\n\r\n```html\r\n<svelte:component this={cpn} {...slotsProps} {...$$restProps} bind:this={instance}/>\r\n\r\n<script>\r\n    import { get_current_component } from 'svelte/internal';\r\n    \r\n    export let provider;\r\n    \r\n    const slotsProps = {\"$$slots\":$$props.$$slots, \"$$scope\":$$props.$$scope};\r\n    const self = get_current_component();\r\n    \r\n    let cpn;\r\n    let instance;\r\n        \r\n    provider().then(result => cpn = result);\r\n    \r\n    $: if (instance) {\r\n        for (let [type, listeners] of Object.entries(self.$$.callbacks)) {\r\n            instance.$on(type, (e) => {\r\n                listeners.forEach(l => l(e));\r\n            });\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n**How important is this feature to you?**\r\n\r\nI can't today implements this kind of component. I'd like to \"wrap\" heavyweight components without updating or adding loading logic to every consumer.\r\n\r\n","state":"open","updated_at":"2021-08-01T00:57:09Z","created_at":"2020-07-06T19:40:27Z","creator_user_login":"j3rem1e"}
{"number":5104,"title":"$capture_state breaks with Babel macros","body":"**Describe the bug**\r\nThe modifications that have been made to `$capture_state` a while ago make it break when the user's code contains Babel macros. That is, an `import` that is then transformed by some tooling and the import binding (variable) is removed from code.\r\n\r\nWe've had someone report that [with Babel macros](https://github.com/sveltejs/svelte/pull/3822#issuecomment-592767853) and, more recently, [with Tailwind macros](https://github.com/rixo/svelte-hmr/issues/15) (also a Babel macro).\r\n\r\nFor example, in this user code, the `tw` binding gets removed from the code by Babel:\r\n\r\n```svelte\r\n<script>\r\n  import tw from \"twin.macro\"; // <= removed\r\n  const bigText = tw`text-xl`; // <= transformed into: const bigText = { \"fontSize\": \"1.25rem\" };\r\n</script>\r\n```\r\n\r\nBut the compiler has seen it and it is added to `$capture_state`:\r\n\r\n```js\r\n  $$self.$capture_state = () => ({\r\n    tw,\r\n    bigText,\r\n  });\r\n```\r\n\r\nSince the variable `tw` doesn't exist, it crashes at runtime.\r\n\r\n**To Reproduce**\r\nThe aforementioned issue has provided a [minimal repo](https://github.com/rixo/svelte-hmr/issues/15#issue-651127150) that reproduces the issue.\r\n\r\n**Expected behavior**\r\nApparently, the ideal solution would be to exclude `import` bindings from `$capture_state` (see [discussion in the previous issue](https://github.com/sveltejs/svelte/pull/3822#issuecomment-605404910)).\r\n\r\nBut if I haven't missed anything, we apparently can't tell from `$capture_state` which variables are imports?\r\n\r\nI don't think it's worth adding tracking of this information (if it's not already there) just for this feature. So I suppose we should settle on excluding either `hoistable` (I guess all imports have to be hoistable, right?) or `writable` variables.\r\n\r\nFor HMR it won't make a difference which one we pick. I suppose `hoistable` is preferable if it works as a fix, since previous discussion has concluded that it was desirable to capture writable state.\r\n\r\nI can make a PR but I'd like to confirm what needs to be done.\r\n\r\ncc @RedHatter @Conduitry \r\n\r\n**Severity**\r\nTailwind seems to be pretty popular in Svelte projects, so I guess it has the potential to frustrate quite a few people.\r\n","state":"open","updated_at":"2021-06-27T16:04:44Z","created_at":"2020-07-05T22:14:27Z","creator_user_login":"rixo"}
{"number":5064,"title":"bind:checked with bind:indeterminate erroneously updates checked state to false","body":"**Describe the bug**\r\nusing `bind:checked` and `bind:indeterminate` together erroneously updates the checked value\r\n\r\n**To Reproduce**\r\nUse something like `<input type=\"checked\" bind:checked bind:indeterminate>`\r\nEnsure the initial value of `checked` is `undefined` and the initial value of `indeterminate` is true.\r\nNote that the value of `checked` is immediately updated to `false` when run.\r\n\r\nSee: https://svelte.dev/repl/77d2ac1cf3764fbaa5d92640d7c45f13?version=3.23.2\r\n\r\n**Expected behavior**\r\nBound `checked` value should only be updated when checked or unchecked.\r\nIn the given examples, the objective is for `indeterminate` to be `true` if `checked` is `undefined`.\r\n\r\n**Severity**\r\nMedium/High. I'm not sure of a workaround but indeterminate checkboxes are themselves an edge case.\r\n","state":"open","updated_at":"2021-12-24T16:16:02Z","created_at":"2020-06-24T14:19:21Z","creator_user_login":"WHenderson"}
{"number":5052,"title":"Store is not being updated synchronously / store value is incorrect","body":"**Describe the bug**\r\nStore value is not up-to-date if using a `$` subscription inside a subscription function. \r\n\r\n**To Reproduce**\r\n1. Open [this REPL](https://svelte.dev/repl/a1110f77ded84950b2706760713cdf51?version=3.23.2).\r\n2. Open your browser console.\r\n3. Click on \"Increment\" a few times.\r\n4. Click on \"Cause reset\".\r\n5. Check your console.\r\n\r\nFor a real life example look at [this REPL](https://svelte.dev/repl/62bcce156ab948b69a8dae228fd73d13?version=3.23.2).\r\n\r\n![image](https://user-images.githubusercontent.com/6671521/85380947-2cab8d80-b546-11ea-816d-e38cb39281d2.png)\r\n\r\n**Expected behavior**\r\nValue should be in sync.\r\n\r\n**Severity**\r\nBlocking","state":"open","updated_at":"2022-12-01T09:47:28Z","created_at":"2020-06-22T16:26:49Z","creator_user_login":"yuliankarapetkov"}
{"number":5045,"title":"rerun reactive declarations if the reactive declared variable is mutated","body":"Fixes #2444\r\n\r\nThe [demo](https://svelte.dev/repl?version=3.0.0-beta.28&gist=9ed9950d7d729240bd4507611a261e73) in #2444 was fixed in v3.2.1 but broken again since v3.16.0\r\n\r\nThe test case added in #2694 didn't handle a particular case in the demo where there's another declaration that should be invalidated too:\r\n\r\n```svelte\r\n<script>\r\n   let foo;\r\n   $: var_a = some_fn(foo);\r\n   $: var_b = some_fn(foo);\r\n</script>\r\n{#each var_b as b}\r\n   <input bind:value={b} />\r\n{/each}\r\n{var_a.length} {var_b.length}\r\n```\r\n\r\nafter #2694 mutating `var_b`, would `$$invalidate` `var_b` & `foo`.\r\n\r\nbut because `foo` wasn't mutated anywhere, `var_a` is marked as `fixed_reactive_declarations` instead, and `$$invalidate` `foo` will not produce a new `var_a`.\r\n\r\nThis fix is to mark `foo` as mutated if `var_b` or `var_a` is mutated.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR relates to an outstanding issue, so please reference it in your PR, or create an explanatory one for discussion. In many cases features are absent for a reason.\r\n- [x] This message body should clearly illustrate what problems it solves. If there are related issues, remember to reference them.\r\n- [x] Ideally, include a test that fails without this PR but passes with it. PRs will only be merged once they pass CI. (Remember to `npm run lint`!)\r\n### Tests\r\n-  [x] Run the tests tests with `npm test` or `yarn test`)\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-06-21T04:40:05Z","creator_user_login":"tanhauhau"}
{"number":5043,"title":"Volume won't tween","body":"Volume won't tween without indirect bindings on `volume` attribute of `<audio/>` element\r\n\r\nExample that doesn't work:\r\nhttps://svelte.dev/repl/ac4ce0cc775346cfa1168cdb50ed5e1e?version=3.23.2\r\n\r\nNote how `$volume` is bound with `bind:volume={$volume}`\r\n\r\nIf you do indirect variable assignment, it starts to work:\r\nhttps://svelte.dev/repl/a970e21727ea4231ab42fb17fbaca2d4?version=3.23.2\r\n\r\nNote the reactive assignment `$: indirect_volume = $volume`.\r\n\r\n* This also true for the `<video>` tag.","state":"open","updated_at":"2021-06-27T16:05:07Z","created_at":"2020-06-20T21:00:35Z","creator_user_login":"arxpoetica"}
{"number":5018,"title":"Updating a contenteditable w/ on:input function is prepending, not replacing, if initial value is empty","body":"**Describe the bug**\r\nSorry for the mouthful of a title.  Showing is often easier than telling:\r\n\r\nhttps://svelte.dev/repl/04d08576e3db43d6a7f5c3fd7ae593a3?version=3.23.2\r\n\r\nIf the initial value is empty, typing into the contenteditable div causes the value to be prepended with the previous value after each keystroke (instead of replaced).  Eg typing \"Hello\" nets a value of:\r\n\r\nHelloHelloHellHelHeH\r\n\r\nThis does not happen if a) the initial value of the field is non-empty or b) after you complete that initial input, you select all the garbage text, delete it, and re-enter new text.\r\n\r\n**Expected behavior**\r\nThe value of the element's innerText should reflect exactly what is typed.\r\n\r\n**Information about your Svelte project:**\r\n- Chrome 81 & Safari 13.1.1\r\n- MacOS 10.15.5\r\n- Svelte 3.23.2\r\n\r\n**Severity**\r\nAnnoying / semi-blocking (I can work around this in my project, but it does prevent me from initializing the div with an empty value, which I'd prefer)\r\n\r\n**Additional context**\r\nChecked with #support on Discord and was suggested that I file a bug.  I searched and couldn't find any related issues.  Apologies in advance if this is my mistake and not actually a bug!","state":"open","updated_at":"2023-02-20T20:10:45Z","created_at":"2020-06-15T03:46:35Z","creator_user_login":"noahlh"}
{"number":5017,"title":"Async generators for components scheduled for rendering automatically based on how congested the main thread is","body":"**Is your feature request related to a problem? Please describe.**\r\nI'd like Svelte to be able to render asynchronously, a là \"React Suspense\", using [async generators](https://javascript.info/async-iterators-generators), an idea behind a new javascript framework called [Crank.js](https://crank.js.org/).\r\n\r\nIt would be amazing to have components which can be scheduled for rendering automatically based on how congested the main thread is.\r\n\r\nFor example the navigation in the various routers, scheduled between requestAnimationFrame decongesting the main thread.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great to know from @Rich-Harris if this feature has already been taken into consideration (I searched the issues before opening and found nothing), if it will be sooner or later or if it will not be at all.\r\n\r\n**Describe alternatives you've considered**\r\nI don't have enough knowledge or skills to find other solutions or to understand if Svelte can take advantage of it - not having virtual DOM.\r\n\r\n**How important is this feature to you?**\r\nI love Svelte with all my heart and I would like it to be the fastest ever.","state":"open","updated_at":"2021-12-24T16:17:10Z","created_at":"2020-06-14T19:50:01Z","creator_user_login":"frederikhors"}
{"number":4998,"title":"transition in custom element","body":"fixes #1825\r\n\r\n### The problem\r\nThe style-element containing the transition CSS is appended to the head-element which is unseeable from within the shadow dom.\r\n\r\n### The fix\r\nThis fixes that by adding the style element to the shadow DOM (for custom elements).","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-06-10T07:04:51Z","creator_user_login":"hontas"}
{"number":4974,"title":"Error in bidi transitions when returning a function","body":"https://svelte.dev/repl/283d750225684048b26cf6880dfcea2d?version=3.23.0\r\n`Cannot read property 'r' of undefined`\r\n\r\nhttps://github.com/sveltejs/svelte/blob/dba6e5efadb8aaf86ca25022cd3279bb4ea42434/src/runtime/internal/transitions.ts#L337-L342\r\n\r\n`wait.then` resolves after `check_outros` meaning that `outros` will be the reassigned to its parent group, which is `undefined` in this case","state":"open","updated_at":"2021-12-24T16:15:59Z","created_at":"2020-06-05T16:03:30Z","creator_user_login":"pushkine"}
{"number":4968,"title":"delay in transitions only applies to last change","body":"https://svelte.dev/repl/577f73063a75469292b63d384f72ea9c?version=3.23.0\r\n![Untitlesd-1](https://user-images.githubusercontent.com/30108880/83700449-2db46380-a607-11ea-8980-a12a20836119.gif)\r\n( reload to replay gif )","state":"open","updated_at":"2021-06-27T16:13:04Z","created_at":"2020-06-04T00:04:58Z","creator_user_login":"pushkine"}
{"number":4966,"title":"Make :let directive value available in slot definition","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI'd like to have the slot variables available within the definition. Currently I cannot use the variable to define value for `class` attribute\r\n\r\n**Describe the solution you'd like**\r\n\r\nie:\r\n```html\r\n<ListboxOption value={item} let:active class=\"{active ? 'i-am-active' : 'nope'}\">{item.name}</ListboxOption>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI can retrieve the `activeValue`  value, in this scenario, from another component higher up the chain and compute.\r\n\r\n```html\r\n<ListboxOption value={item} let:active class=\"{activeValue === item ? 'i-am-active' : 'nope'}\">{item.name}</ListboxOption>\r\n```\r\n\r\nalternatively, I could just nest the element\r\n\r\n**How important is this feature to you?**\r\n\r\na nice to have\r\n\r\n**Additional context**\r\n\r\nreference: https://github.com/dasDaniel/svelte-listbox/blob/master/example/src/App.svelte","state":"open","updated_at":"2022-07-16T13:54:33Z","created_at":"2020-06-03T20:39:54Z","creator_user_login":"dasDaniel"}
{"number":4948,"title":"Transitions don't work on table row addition","body":"**Describe the bug**\r\nWhen I add a row to a table, even when the table has `transition:` set, it just pops in ignoring the transition. Oddly, it works on removing the row.\r\n\r\n**Logs**\r\nNo logs.\r\n\r\n**To Reproduce**\r\nReproducible bug: https://svelte.dev/repl/f7fefbd5eb63471db69a89bf36398d38?version=3.23.0\r\n\r\nBased on demo: https://svelte.dev/tutorial/local-transitions which uses `divs`\r\n\r\n**Expected behavior**\r\nTransitions should work on both adding a removing a table row.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Google Chrome Version 83.0.4103.61 (Official Build) (64-bit)\r\n\r\n- Svelte version 3.23\r\n\r\nrepl, none\r\n\r\n**Severity**\r\nNot much, it's just some coolness in transitions with adding. But it does help the user acclimate to the changes on the screen.","state":"open","updated_at":"2021-06-27T16:13:24Z","created_at":"2020-06-01T07:19:49Z","creator_user_login":"avimar"}
{"number":4933,"title":"inconsistent behavior when updating reactive declared variable","body":"**Describe the bug**\r\nI am not sure what is the expected behavior when updating reactive declared variable, but here are the inconsistencies that I have found.\r\n\r\nFirst of all, here is what I meant by updating reactive declared variable\r\n\r\n```html\r\n<script>\r\n   let a = 1;\r\n   $: b = a * 2;\r\n\r\n   function update() {\r\n      b = 42;\r\n   }\r\n</script>\r\na: {a} b: {b}\r\n<button on:click={update}>Update b</button>\r\n<input bind:value={a} />\r\n```\r\n[REPL](https://svelte.dev/repl/2630d8569bed4c5192468a0fa9d936ca?version=3.23.0)\r\n\r\nThe intended behavior for the code snippet above is to\r\n- reactively update `b` when `a` changes\r\n- allows `b` temporarily go \"out-of-sync\" of `a` when calling `update`, setting `b` to `42`\r\n  - in this case, `b` is not always `a * 2`\r\n- however, if `a` changes again, `b` will be updated back to `a * 2`, instead of staying at `42`\r\n\r\nI used the word **\"intended\" behavior**, because that is the behavior im looking for, but I may not be expressing it correctly in Svelte. It may not be the **expected behavior** of the code.\r\n\r\nIn the example above, the REPL behaves as intended, however, it will break if all of the following conditions are met:\r\n\r\n**Condition 1: any of the dependencies of the reactive declarations is mutated, reassigned, or exported**\r\nin this case\r\n- if `a` is exported (changing the example to `export let a = 1`, or\r\n- if `a` is mutated / reassigned, eg: `<input bind:value={a} />` or having `function foo() { a = 5 };`\r\n\r\n**Condition 2: the dependencies of the reactive declarations that is mutated, reassigned or exported is not a primitive**\r\nthis is because of the behavior of `$$invalidate`, Svelte uses [safe_not_equal](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/utils.ts#L37-L39) to decide whether the updated value is the same as the current value during `$$invalidate`. comparing objects with `safe_not_equal` will always return `true`, because Svelte allows user to mutate the object / array directly, therefore should always `$$invalidate` them.\r\n- try changing the example to `a = { v: 1 }` and `$: b = a.v * 2`\r\n\r\n**Condition 3: using `bind:` or `value = value` when updating the reactive declared variable**\r\nthis is kind of the edge case that wasn't handled properly in https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_dom/Renderer.ts#L154\r\n\r\n- try changing the example to `function update() { b = 42; b = b; }` or adding `<input bind:value={b} />`\r\n\r\nThe behavior of the bug was introduced in https://github.com/sveltejs/svelte/issues/2444.\r\n\r\nThe intention of the issue #2444 was to propagate the changes of the reactive declared variables back to its dependencies. in the context of this example, would meant, updating `b` should update `a` as well. updating `a` will update `b` back again in the reactive declaration. \r\n\r\nIt works if you always want `b` to be the value deriving from `a`. However in the example above, we want the value of `b` to be temporarily out of sync of `a`.\r\n\r\nI dont know what is the expected behavior of the Svelte should be, but having inconsistencies when all the \"subtle\" conditions were met is unfriendly. it requires the user to have much deeper understanding of the nuances of the language.\r\n\r\n**Related issues that are symptom to this inconsistencies:**\r\n- https://github.com/sveltejs/svelte/issues/4613\r\n  - the base case of the 1st 2 examples is that condition 1 & 3 has met, the author reported the behavior of condition 2, changing the dependencies from primitives to object\r\n- https://github.com/sveltejs/svelte/issues/4448\r\n  - base case: condition 2 & 3 has met, author reported the behavior of condition 1\r\n- https://github.com/sveltejs/svelte/issues/5363\r\n  - base case: condition 2 & 3 has met, author reported inconsistency behavior when meeting the condition 1\r\n- https://github.com/sveltejs/svelte/issues/4933\r\n- https://github.com/sveltejs/svelte/issues/6507 + related to https://github.com/sveltejs/svelte/issues/2444 that defines the dependencies of the reactive declarations","state":"open","updated_at":"2023-07-03T18:44:23Z","created_at":"2020-05-30T03:03:25Z","creator_user_login":"tanhauhau"}
{"number":4929,"title":"Prevent unnecessary store subscriptions","body":"**Is your feature request related to a problem? Please describe.**\r\nWas just looking at https://svelte.dev/tutorial/auto-subscriptions and had a realisation. If you have a component like this...\r\n\r\n```svelte\r\n<script>\r\n  import { count } from './stores.js';\r\n\r\n  function reset() {\r\n    $count = 0;\r\n  }\r\n</script>\r\n\r\n<button on:click={reset}>\r\n  reset\r\n</button>\r\n```\r\n\r\n...a store subscription will be created, even though the component doesn't *actually* depend on the store value.\r\n\r\n**Describe the solution you'd like**\r\n\r\n```diff\r\nfunction instance($$self, $$props, $$invalidate) {\r\n-\tlet $count;\r\n-\tcomponent_subscribe($$self, count, $$value => $$invalidate(1, $count = $$value));\r\n\r\n\tfunction reset() {\r\n-\t\tset_store_value(count, $count = 0);\r\n+\t\tcount.set(0);\r\n\t}\r\n\r\n\treturn [reset];\r\n}\r\n```\r\n\r\nFor assignments other than `=` (i.e. `+= 1` etc), it would use `update` instead of `set`.\r\n\r\n**How important is this feature to you?**\r\nIt's pretty low priority. Just a nice-to-have.","state":"open","updated_at":"2021-12-24T16:15:57Z","created_at":"2020-05-29T18:44:26Z","creator_user_login":"Rich-Harris"}
{"number":4922,"title":"Events happen in a different order in Chrome vs Firefox","body":"**Describe the bug**\r\nIn an input with a `bind:value` and an `on:input`, the binding is updated before the input event handler fires in Chrome. In Firefox, it's the other way around. This can lead to observable discrepancies.\r\n\r\nVia https://twitter.com/GarethOates/status/1264854365858344961\r\n\r\n**To Reproduce**\r\nTODO simplify this REPL https://svelte.dev/repl/861ed7c446fc4586a6589714d9a863b5?version=3.22.3\r\n\r\n**Expected behavior**\r\nBoth should log 'a' then 'b' *or* both should log 'b' then 'a' (not actually sure which off the top of my head)\r\n\r\n**Severity**\r\nMedium-rare","state":"open","updated_at":"2021-12-24T16:15:57Z","created_at":"2020-05-28T13:37:31Z","creator_user_login":"Rich-Harris"}
{"number":4910,"title":"Elements (components) with transition overlap each other in an each block using flip animation","body":"**Issue**: When an each block which has `animation:flip` set contains items which have `transition:xyz` set and this each block is updated (e.g. some items removed), the items may not get the correct position if the update occurs while the previous transitions are running.\r\n\r\n**REPL**: https://svelte.dev/repl/324c3d19fe1b4648919af7b2eef7e4f3?version=3.22.3\r\n\r\n**Steps to reproduce**: click the button quickly 2-3 times, (or change the input field's value while the list is animating).\r\n\r\n**Result**: Some elements overlap each other, breaking the order.","state":"open","updated_at":"2021-11-03T14:57:05Z","created_at":"2020-05-26T11:12:34Z","creator_user_login":"Fygo"}
{"number":4891,"title":"Expose runtime types in Svelte","body":"## Visual editors\r\n\r\n@Rich-Harris has often talked about more visual ways of creating applications. Flow editors are a great way of doing this as are tools like FrameX.\r\n\r\nHowever in order to have great tools that know what can connect to what we need to expose types at runtime. Normally this information is thrown away by the compiler. But because Svelte is a compiler framework I think (with TypeScript landing soon) we should have a standard way of making type information available at runtime if requested.\r\n\r\nOne way might be to have the Svelte compiler recognise a new extension e.g. `.runtime-types`.\r\n\r\n```js\r\nexport {Coord3dType} from './geometetry.ts'\r\n```\r\nThis would tell the Svelte complier to turn the `Coord3dType` into a JS object that can be imported from another .js or .svelte file and used to tag a store so subscribers know what to expect. It may also be helpful to have a compiler option that includes runtime type information in components describing their props at runtime.\r\n\r\nIf this is built into the Svelte compiler then we can establish unified ecosystem of Svelte components and stores that can talk to each other at runtime. These can then be snapped together in visual editors and flow editors. If you combine this with dynamic imports from IPFS based CDNs you can then have applications that auto suggest stores and components based on the type of inputs and outputs you are working with for totally open-ended applications. \r\n\r\n## Inspiration\r\n\r\n### [eth.build](https://eth.build)\r\n\r\n![image](https://user-images.githubusercontent.com/1674806/82674421-2e2e2100-9c3b-11ea-8792-1530159e96f3.png)\r\nhttps://youtu.be/30pa790tIIA\r\n\r\n### Evolving the Visual Programming Environment with React at react-europe 2016\r\n\r\n![image](https://user-images.githubusercontent.com/1674806/82674496-4d2cb300-9c3b-11ea-99bc-1939b10173c0.png)\r\nhttps://youtu.be/WjJdaDXN5Vs?t=729\r\n\r\n","state":"open","updated_at":"2021-12-24T16:15:53Z","created_at":"2020-05-22T14:45:48Z","creator_user_login":"philholden"}
{"number":4890,"title":"Svelte should not register listeners when handlers are `undefined`","body":"If `on:click` is passed an `undefined` handler like so: `on:click={undefined}`. Svelte creates a listener for it in the dom regardless. Instead Svelte should not create any listeners at all. Aside from the unnecessary resource consumption, this causes an undesired side-effect: modifiers such as `preventDefault` and `stopPropagation` still run unexpectedly when there is no handler defined. This causes the situation where:\r\n\r\n```\r\non:click|preventDefault={handler}\r\n```\r\n\r\nis different from:\r\n\r\n```\r\non:click={handler}\r\n\r\nhandler (e) => {\r\n   e.preventDefault();\r\n}\r\n```\r\n\r\nIn the former, if `handler` is `undefined` the `preventDefault` still applies, whereas in the latter, neither the function, nor the `preventDefault` run.\r\n\r\n---\r\nSvelte Version: \"^3.21.0\"\r\n","state":"open","updated_at":"2021-12-24T16:15:52Z","created_at":"2020-05-22T04:34:40Z","creator_user_login":"thinkloop"}
{"number":4875,"title":"Tiny suggestion: REPL introduction instead of basic Hello World","body":"I get the feeling some users (including myself) do not realize that the Svelte REPL can be saved and forked by visitors of the REPL if their first introduction is simply the default hello world app. I'm wondering if something like [https://svelte.dev/repl/2c06d586d890466e8dc7da6fb111efb7](https://svelte.dev/repl/2c06d586d890466e8dc7da6fb111efb7) would be a better intro to the REPL? Once you are familiar with the UI of the REPL it is easy to work with, but I suspect a good amount is overlooked initially by first timers.","state":"open","updated_at":"2021-12-25T11:07:26Z","created_at":"2020-05-21T01:14:59Z","creator_user_login":"kuhlaid"}
{"number":4858,"title":"Mixing dev and prod builds","body":"**Describe the bug**\r\n\r\nMy application is developed as a kind of \"micro-front-end\". I have a core module which exposes components, routers and utilities. This module dynamically loads business modules.\r\n\r\nTheses modules are developped by differents teams and are all isolated.\r\n\r\nI'd like to use Svelte \"dev\" compiler options in a module without the core to be compiled with this options, or the other way: using a core in dev mode, and a business module without the dev options.\r\n\r\nToday it's not possible because there is a check in SvelteDevComponent :\r\n\r\nhttps://github.com/sveltejs/svelte/blob/f111cf6881d6708f0e7d0b7db9653f411dd6bab1/src/runtime/internal/dev.ts#L118\r\n\r\nThe property $$inline is set only in dev mode here (with a comment about this \"Ugly Hack\")\r\n\r\nhttps://github.com/sveltejs/svelte/blob/f111cf6881d6708f0e7d0b7db9653f411dd6bab1/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L193 \r\n\r\n**Logs**\r\n\r\n```\r\nindex.mjs:1582 Uncaught (in promise) Error: 'target' is a required option\r\n    at new de (index.mjs:1582)\r\n    at new DataBrowser (DataBrowser.svelte:17)\r\n    at a (ui-monitoring.js:1)\r\n    at Jt (index.mjs:1424)\r\n    at new s (ui-monitoring.js:1)\r\n    at Object.update [as p] (AppMain.svelte:13)\r\n    at Object.update [as p] (AppLayout.svelte:7)\r\n    at ut (index.mjs:707)\r\n    at rt (index.mjs:676)\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nIs it possible to change the \"throw\" to only a `console.warn()` ?\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Chrome 80\r\n- Windows 7\r\n- Svelte 3.22\r\n- Webpack with svelte-loader\r\n\r\n**Severity**\r\n\r\nIt can't use the dev options now because of this throw. It's not that important, however there is a lot of interessing compile-time check with the dev property.\r\n","state":"open","updated_at":"2022-09-22T14:50:15Z","created_at":"2020-05-18T14:45:32Z","creator_user_login":"j3rem1e"}
{"number":4854,"title":"Expose registered components during SSR compilation","body":"**Is your feature request related to a problem? Please describe.**\r\n@Rich-Harris https://twitter.com/PromatiaGov/status/1262183956004220928\r\n\r\nSvelte needs to expose which components the SSR compiler has come across during SSR Rendering. This will let the server-side renderer know which components have been registered, so the page can preload the necessary components on the client-side;\r\n\r\neg:\r\n```js\r\nconst { html, css, head, registeredComponents } = App.render()\r\n```\r\n\r\nRegistered components may just be a `new Set()` with the unique ID of the component (perhaps a file path) - vue-loader uses some sort of module identifier that is the same across client & server-side I think.\r\n\r\nThis can allow Svelte routers and code-split svelte apps to enable faster loading speeds, as the necessary client-side scripts can be preloaded. The svelte-loader and rollup loader can make use of these, by matching the module's ID to a client-manifest. This would mean that svelte-loader would also need to be updated I believe.\r\n\r\n`vue-loader` exposes a `_registeredComponents`, which is used by the server-side renderer and matched with the client manifest to find which async files should be preloaded on the website:\r\n```js\r\nconsole.log(context._registeredComponents) // prints below\r\n```\r\n![image](https://user-images.githubusercontent.com/17972275/82141137-f3ab3980-9872-11ea-88cb-d4986c1abef4.png)\r\n\r\n**client-manifest**\r\nThe number value of each module ID links to a specific output script\r\n![image](https://user-images.githubusercontent.com/17972275/82141145-03c31900-9873-11ea-9fe1-93f06f98bfdd.png)\r\n\r\n**client manifest generator plugin**\r\n![image](https://user-images.githubusercontent.com/17972275/82141173-38cf6b80-9873-11ea-8538-4ec3e2e34926.png)\r\n\r\nNot sure what would be the best way to go across this\r\n\r\n**Describe the solution you'd like**\r\nNot sure\r\n\r\n**Describe alternatives you've considered**\r\nHave tried to do route-level matching, but it's hard.\r\n\r\n**How important is this feature to you?**\r\nPretty important feature for SSR, could be used by Sapper as well.\r\n","state":"open","updated_at":"2023-06-02T14:01:33Z","created_at":"2020-05-18T01:25:13Z","creator_user_login":"AlbertMarashi"}
{"number":4848,"title":"SSR components not correctly updating bindings","body":"**Describe the bug**\r\n1) When using bind:property within an SSR component, the parent component is not notified of reactive assignments.\r\n2) The change notification also seems to be incorrect for simple property assignments. Notably, bindings are only updated where no initial value was supplied, even if the child component overrides it with a simple assignment.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nSee the following repl for a contrived reproduction. (Note that since the REPL isn't running SSR, reading the code will have to suffice).\r\nhttps://svelte.dev/repl/07b8db939cce4fe8a032b221a9113707?version=3.22.2\r\n\r\n1) See the below snippet from the Outer.svelte SSR code:\r\n```javascript\r\n\tdo {\r\n\t\t$$settled = true;\r\n\t\tprop = innerProp;\r\n                // Note that no call is made to $$bindings.prop(prop), and thus the parent is unaware of the updated value\r\n\r\n\t\t$$rendered = `${validate_component(Inner, \"Inner\").$$render(\r\n```\r\n\r\n2) See the below snippet from the Inner.svelte SSR code:\r\n```javascript\r\n\tlet { prop } = $$props;\r\n\r\n\tprop = \"from component\";\r\n\r\n\t// Note that if the parent supplied a value in $$props, the binding will not be updated with the new value above\r\n\tif ($$props.prop === void 0 && $$bindings.prop && prop !== void 0) $$bindings.prop(prop);\r\n```\r\n\r\n**Expected behavior**\r\nBindings should work correctly with SSR components. Specifically, changes to properties in a child component should update bindings in parent components.\r\n\r\n**Severity**\r\nThis issue is blocking our ability to use SSR as a solution, which is one of the big benefits of svelte/sapper.\r\n","state":"open","updated_at":"2022-06-18T20:05:52Z","created_at":"2020-05-17T04:21:19Z","creator_user_login":"WHenderson"}
{"number":4842,"title":"data passed to animations is always stale","body":"https://svelte.dev/repl/ddf5358e78144925b47874d8a6a558ff?version=3.22.2\r\n\r\nthe `animation-js-delay` test uses indexes to delay animations, and asserts based on stale values\r\nwill fix with #4742 ","state":"open","updated_at":"2021-12-24T19:25:09Z","created_at":"2020-05-16T06:37:54Z","creator_user_login":"pushkine"}
{"number":4839,"title":"Svelte bindings is invalidating properties that don't change causing infinite loops","body":"**Describe the bug**\r\n\r\nWhen using a component with `bind:property={property}`, the binding function generated by this is invalidating more than necessary in the parent component, and this is causing an infinite loop.\r\n\r\nI asked this on discord:\r\n\r\n> Hi, I got a simple problem, but I cannot see the end of it. I have an application with two components. The parent component includes the child component with a two way binding (`bind:property={property}`).\r\n> \r\n> Elsewhere in the parent component, I have a line with:\r\n> \r\n> `$: property = defaults.property`\r\n> \r\n> So whenever the defaults change (which is not very often, at the start of the app or when the settings are reloaded) the property will be reset to the defaults value.\r\n> \r\n> Now, I could debug that when the child component modifies the property, the generated binding function is called, and it invalidates the property (as expected) but it also invalidates the default variable (which is not expected) triggering an infinite loop.\r\n> \r\n> Removing the `$: property = defaults.property` code fixes the infinite loop, but then my app does not work as expected.\r\n> \r\n> Does anyone have ideas on how to solve infinite loops like these? I'm on it for hours and cannot find the solution.\r\n\r\nI then found a workaround:\r\n\r\n> Just taking a calm moment, I found a solution to my problem above:\r\n> \r\n> I replaced:\r\n> \r\n> ```\r\n> <script>\r\n>   ...\r\n>   $: property = defaults.property\r\n>   ...\r\n> </script>\r\n> <Child bind:property={property} />\r\n> ```\r\n> \r\n> with:\r\n> \r\n> ```\r\n> <script>\r\n>   ...\r\n>   let property = defaults.property\r\n> \r\n>   $: defaultsChanged(defaults)\r\n> \r\n>   function defaultsChanged(defaults){\r\n>     property = defaults.property\r\n>   }\r\n>   ...\r\n> </script>\r\n> <Child bind:property={property} />\r\n> ```\r\n> \r\n> And now, when the child component updates the property, defaults is no longer invalidated and no infinite loop. That's very surprising though.\r\n\r\n**To Reproduce**\r\n\r\nI don't have a small reproducible example, but I have a full repository: https://github.com/mildred/calcul-meubles/blob/svelte-bug-20200515/src/ensembles/Ensemble.svelte#L29-L43\r\n\r\n**Expected behavior**\r\n\r\nSvelte should not invalidate properties in this way\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Firefox 75.0\r\n- Your operating system: Fedora 31\r\n- Svelte version: 3.22.2\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nThis is quite problematic since it takes forever to debug, and to use the workaround, you need to find the correct variables that invalidates incorrectly. But once you know what to look for, it's easier to debug, and there is a workaround.\r\n\r\n**Additional context**\r\n\r\nMethod to debug:\r\n\r\n- don't get your computer in a bad state, prepare to kill your browser just in case\r\n- log property changes extensively, try to find the property causing the loop\r\n- refresh with developer tools closed, wait until firefox ask you to stop the script, then open the devtools\r\n- just look at `$$invalidate\\(.*, variable_name\\)` in the generated source, set breakpoints for the offending variables\r\n- notice that there are tow invalidate where there should be only one.","state":"open","updated_at":"2023-03-06T23:19:21Z","created_at":"2020-05-15T12:57:09Z","creator_user_login":"mildred"}
{"number":4838,"title":"Support two-way-data-binding with custom-input-elements","body":"Custom (Input) Elements like ui5-input uses the propname value for the inputvalue attribute. \r\n\r\nBut svelte only permit value as propname when the element's name is input, textarea or select \r\n\r\nhttps://github.com/sveltejs/svelte/blob/bdabd89f093afe06d5a4bfb8ee0362b0a9634cfc/src/compiler/compile/nodes/Element.ts#L532\r\n\r\notherwise svelte throws an error that value is not a valid binding-element\r\n\r\npls have a look here: \r\nhttps://codesandbox.io/s/divine-architecture-3qvlc?file=/App.svelte\r\n","state":"open","updated_at":"2023-06-27T05:46:21Z","created_at":"2020-05-15T07:55:26Z","creator_user_login":"knuspertante"}
{"number":4831,"title":"Slide transition jumps on the way out if height changes while it's visible","body":"**Describe the bug**\r\nWhen using a slide transition on an element thats height shrinks while it's visible, when it transitions out, it jumps back to the original height before transitioning out.\r\n\r\n![2020-05-13_20-14-00](https://user-images.githubusercontent.com/10605146/81878553-64421580-9556-11ea-886d-6a4cfd6d2a6e.gif)\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/3ffb8bc1d6714cfba17fe6f0eb168759?version=3.22.2\r\n\r\n- Expand the div\r\n- Click the \"Remove some options\" button\r\n- Collapse the div and watch it's height jump before transitioning out\r\n\r\n**Expected behavior**\r\nThe div should collapse from it's current height and not grow first.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nN/A - reproduced in the REPL\r\n\r\n**Severity**\r\nNot severe. I can do regular CSS transitions. Just wanted to report the issue.\r\n\r\n**Additional context**\r\nN/A\r\n","state":"open","updated_at":"2021-07-12T17:21:02Z","created_at":"2020-05-14T00:18:40Z","creator_user_login":"asaloff"}
{"number":4818,"title":"Make parser more robust / error forgiving","body":"**Is your feature request related to a problem? Please describe.**\r\nThe compiler is currently used as part of several language servers which attempt to provide a good intellisense for IDEs like VSCode. As a result, the content handed to the compiler is often incomplete or in an inconsistent state because the user is in the middle of typing something.\r\n\r\nSo if I hand in something like this:\r\n```html\r\n<script>\r\n   import Comp from './comp.svelte'\r\n</script>\r\n<Co\r\n```\r\nI get an error.\r\n\r\n**Describe the solution you'd like**\r\nIt should still throw an error but pass along something like a best guess of the parsed content. Mabye something like a partial output of `parse` up to the error. If some part of the input (script, style, template) is consistent, it would be great to hand back the complete parser result of that part.\r\n\r\n**Describe alternatives you've considered**\r\nDon't use the compiler and somehow extract relevant info on our own - I would like to avoid that.\r\n\r\n**How important is this feature to you?**\r\nImportant to harmonize LSPs in the long run and be able to integrate with the svelte compiler more deeply. But not that important that you should start working on it immediately. Also, if it's not just something like \"oh we have that info already, we just need to append it\" but more like \"we have to rewrite a whole lot for that\", it's ok to discuss first what other possibilities there are.\r\n\r\n","state":"open","updated_at":"2022-12-18T23:33:34Z","created_at":"2020-05-11T10:06:37Z","creator_user_login":"dummdidumm"}
{"number":4811,"title":"Reactive statement not fired","body":"**Describe the bug**\r\nIn some strange cases, the reactive statement that depends on a variable doesn't get fired when the variable changes.\r\n\r\n**To Reproduce**\r\nSee this REPL:\r\nhttps://svelte.dev/repl/4c2b3a63f4ed4b718561ba6ca7a62629?version=3.22.2\r\n\r\nIn the REPL, there is a reactive statement that will log the value of `a` to the console every time it changes (line 11). There is another reactive statement that will change the value of `a` whenever the value of `b` changes (line 13). Notice that when we change the value of `b` by clicking the button, the value of `a` does change, yet the reactive statement that depends on `a` (line 11) is not called!\r\n\r\nI'm currently running Chrome 81 on Linux.\r\n\r\n**Workaround:**\r\nWe can make the above REPL work again by moving line 13 to line 4.\r\n\r\n**Severity**\r\nMedium, since we can still workaround it.","state":"open","updated_at":"2021-12-24T10:28:17Z","created_at":"2020-05-09T18:47:05Z","creator_user_login":"null-dev"}
{"number":4794,"title":"Observer still called when unsubscribed during store update","body":"https://svelte.dev/repl/703dd3e1045543388fd5583c489bac55?version=3.22.2\r\n```js\r\nconst store = writable(0);\r\nlet is2cancelled = false;\r\nconst cancel_sub1 = store.subscribe((v) => {\r\n\tif(v === 1){\r\n\t\tcancel_sub2()\r\n\t\tis2cancelled = true\r\n\t}\r\n});\r\nconst cancel_sub2 = store.subscribe((v) => {\r\n\tif(v === 1 && is2cancelled){\r\n\t\tconsole.log('I have been cancelled already');\r\n\t}\r\n});\r\nstore.set(1); // logs 'I have been cancelled already'\r\ncancel_sub1();\r\n```\r\nwill fix with #4742 unless someone thinks this behavior is expected ?","state":"open","updated_at":"2021-12-24T02:48:11Z","created_at":"2020-05-07T01:11:32Z","creator_user_login":"pushkine"}
{"number":4787,"title":"Mutating spring store values sets the values instantly ","body":"https://svelte.dev/repl/888343d074354aff99bde5bbee55b68d?version=3.22.2\r\nUsing the `$store.key = value` syntax with springs sets the values instantly when two keys are changed in the same frame\r\nShould be fixed with #4742","state":"open","updated_at":"2021-12-24T19:25:07Z","created_at":"2020-05-06T01:14:27Z","creator_user_login":"pushkine"}
{"number":4784,"title":"Nested Transitions NOT Honored","body":"I believe I have discovered an issue where Nested Transitions are not operating correctly.\r\n\r\n**Component**:\r\n\r\nI have a simple TreeView component ([see code here](https://svelte.dev/repl/82b00644720a4ca2bdb89c6a653ec987?version=3.22.2)).\r\n  \r\n- Each node in the tree is powered through a recursion on itself (via the `<svelte:self>` element).\r\n  \r\n- The expansion state of each node is retained _(through a simple ModuleScoped state)_, so collapsing a parent does not loose the expansion of it's children _(when the parent is re-expanded)_.\r\n\r\n- The expansion/contraction of each node is animated through the standard `slide` svelte transition\r\n\r\n\r\n**Issue**:\r\n  \r\nThe **issue** I am seeing is when you expand a node that has pre-expanded children, the animated transition only occurs at the top-level.  Once the top-level transition has completed, the expanded children pop out instantly.  In other words, **the nested element transition is NOT honored**.\r\n\r\n_To see this **issue**_:\r\n\r\n1. expand all nodes in the sample (i.e. all children and grandchildren)\r\n\r\n2. collapse the top-level `USA` node\r\n\r\n3. re-expand the top-level `USA` node\r\n\r\n   **NOTICE** the direct `USA` children correctly animate, **however** the grandchildren pop out instantly, once their parent transition is complete.\r\n\r\n_In contrast_, if you expand/collapse the tree one level at a time, the transition animation is correct.\r\n\r\nAm I missing something obvious in my code, or is this in fact an issue?\r\n\r\n\r\n**More Research**:\r\n\r\nI have found references to this topic in older V2 Issues/PRs, however they are all closed/merged.  **Is this issue thought to be fixed?**\r\n\r\n- [MERGED PR 1451](https://github.com/sveltejs/svelte/pull/1451): Nested transitions #1451\r\n- [MERGED PR 1448](https://github.com/sveltejs/svelte/pull/1448): add skipIntroByDefault compiler option #1448\r\n- [CLOSED ISSUE 117](https://github.com/sveltejs/svelte-loader/issues/117): Support for svelte compiler 'cascade' option #117\r\n- [CLOSED ISSUE 547](https://github.com/sveltejs/svelte/issues/547): Skip transitions on initial render #547\r\n- [CLOSED ISSUE 1495](https://github.com/sveltejs/svelte/issues/1495): Nested components cause transitionManager to always be added if nestedTransitions: true #1495\r\n- [CLOSED ISSUE 1492](https://github.com/sveltejs/svelte/issues/1492): outroing is not defined with nestedTransitions: true #1492\r\n\r\nI realize that when dealing with multiple transitions, it can be difficult to generically determine the \"right thing to do\".  This may be a case for driving some compiler directives from the component code itself ... thoughts?\r\n\r\nYour help is greatly appreciated!\r\n\r\nThanks so much for such an awesome product, providing reactivity in an extremely simple form!!!\r\n\r\n`</Kevin>`\r\n","state":"open","updated_at":"2022-12-03T20:50:54Z","created_at":"2020-05-05T15:07:58Z","creator_user_login":"KevinAst"}
{"number":4776,"title":"Dimension bindings intermittently add inline style=\"position:relative;\" in Firefox","body":"Using dimension bindings on an element will sometimes add an inline style `position:relative;` in Firefox. This overrides any other CSS positioning that may be defined on the element. The problem doesn't happen in Chrome.\r\n\r\nThe code below (borrowed from [w3schools.com](https://www.w3schools.com/css/css_positioning.asp)) reproduces the problem on my system roughly 50% of the time (although you may have to reload 10-20 times to see it, maybe due to page caching). I'm using Svelte 3.22.1 with Rollup, Firefox 75, Windows 10.\r\n\r\nThe inner div should be positioned to the right side of the outer div. When Svelte sometimes gives it `position:relative;` it is positioned to the left.\r\n\r\n```html\r\n<script>\r\n    import { onMount } from 'svelte';\r\n\r\n    let clientWidth, clientHeight;\r\n</script>\r\n\r\n<style>\r\n    .relative {\r\n        position: relative;\r\n        width: 400px;\r\n        height: 200px;\r\n        border: 3px solid #73AD21;\r\n    } \r\n\r\n    .absolute {\r\n        position: absolute;\r\n        top: 80px;\r\n        right: 0;\r\n        width: 225px;\r\n        height: 100px;\r\n        border: 3px solid #73AD21;\r\n    }\r\n</style>\r\n\r\n<h2>position: absolute;</h2>\r\n\r\n<p>An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed):</p>\r\n\r\n<div class=\"relative\">This div has position: relative;\r\n    <div class=\"absolute\" bind:clientWidth bind:clientHeight>This div has position: absolute; and right: 0;</div>\r\n</div>\r\n```\r\n\r\nEDIT: I can't reproduce this problem in Svelte's REPL. This is another sign (along with the intermittency) that makes me think the bug is lifecycle related. If so then maybe the page loading delays caused by the REPL infrastructure avoid the problem. \r\n","state":"open","updated_at":"2023-05-11T19:14:51Z","created_at":"2020-05-04T13:08:44Z","creator_user_login":"niclasmattsson"}
{"number":4732,"title":"Animation rects need to be measured before any other updates","body":"**Describe the bug**\r\nWhen using the `animate:` directive, DOM nodes are measured immediately before updates are applied to them. But if an update to a parent element already happened, this can result in them being in the wrong place at the time of being measured.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/8c4d61bba033437bb9add90f5355df25?version=3.21.0 (via https://stackoverflow.com/questions/61430023/svelte-out-transition-in-flip-animation-in-grid-layout-flies-off-from-top-left)\r\n\r\n**Expected behavior**\r\nToggling the column should cause 3, 6 and 9 to smoothly move to their new location. To achieve this, I think we'd need to measure DOM nodes before any DOM updates happened at all, which sounds tricky to do.\r\n\r\n**Severity**\r\nMedium. It's a bad bug, but a fairly niche situation.","state":"open","updated_at":"2021-06-27T16:18:26Z","created_at":"2020-04-27T14:14:42Z","creator_user_login":"Rich-Harris"}
{"number":4726,"title":"Replacing the last item in a scrollable container with flip animation results in wrong scroller position","body":"**Describe the bug**\r\nWhen replacing the last item in a list (#each block) that is inside of a scrollable parent, \r\nWhile the scroller position is at the bottom of said scrollable container (the last item is visible),\r\nand using flip animation, \r\nthe container scrolls up to the one before last item automatically instead of staying put and showing the last item.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/2ec547f272a840639d7e483f49de3a38?version=3.21.0.\r\n(instructions inside, basically scroll the list down and click the button)\r\n\r\n**Expected behavior**\r\nthe scroll position should stay at the bottom of the container, showing the last item.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 81.0.4044.113, Firefox 75.0\r\n\r\n- Your operating system: Mac OS Catalina 10.15.4\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\nverified with 3.2.1\r\n\r\n- Whether your project uses Webpack or Rollup\r\nRollup\r\n\r\n**Severity**\r\nI have found a workaround: rather than replacing the element and the id, i keep the old id.\r\nIt is sufficient for my needs, therefore I would say that the priority for me is low. \r\nStill, this might point to a deeper issue with the animation system\r\n\r\n**Additional context**\r\nThanks :)\r\n","state":"open","updated_at":"2021-07-12T13:52:37Z","created_at":"2020-04-26T23:29:43Z","creator_user_login":"isaacHagoel"}
{"number":4723,"title":"Allow bind:open with <dialog>","body":"Attempting to use `bind:open` with `<dialog>` results in an error:\r\n```html\r\n<!-- Dialog.svelte -->\r\n<script>\r\n  export let open = false\r\n</script>\r\n\r\n<dialog bind:open />\r\n<!--\r\nError: Module build failed (from ./node_modules/svelte-loader/index.js):\r\nError: ValidationError: 'open' binding can only be used with <details> (17:46)\r\n-->\r\n```\r\n\r\n**To Reproduce**\r\n[View REPL](https://svelte.dev/repl/fdff7e9540c249ef987b0a3b211c6935?version=3.21.0)\r\n\r\n**Expected behavior**\r\nI expected `bind` to work with `<dialog>` as well as `<details>`.\r\n\r\n**Information about your Svelte project:**\r\nSvelte v3.21.0\r\n\r\n**Severity**\r\nAnnoying.\r\n","state":"open","updated_at":"2023-08-28T22:18:18Z","created_at":"2020-04-26T00:49:56Z","creator_user_login":"tvanc"}
{"number":4712,"title":"transition:slide looks different (buggy) on Safari","body":"**Describe the bug**\r\nI am using transition:slide in order to slide in a div element after the user presses the button with the arrow pointing down. With Chrome and Firefox on Windows it looks perfect, however on Safari (iPadOS) the inner contents overlap with the button during the transition. Or to be more precise, the inner elements of #lookupAreaContent do not follow the behavior of #lookupAreaContent itself.\r\n\r\n**To Reproduce**\r\nSimplified version:\r\n```html\r\n<div>\r\n\t{#if v_lookupArea}\r\n\t<div id=\"lookupAreaContent\" transition:slide>\r\n\t\t<div>\r\n\t\t\t<a href=\"https://www.google.com\" target=\"_blank\">test 1.</a>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<a href=\"https://www.google.com\" target=\"_blank\">test 2.</a>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<i>add_circle</i>\r\n\t\t</div>\r\n\t</div>\r\n\t{/if}\r\n\t<i on:click={toggleLookupArea}>expand_more</i>\r\n</div>\r\n\r\n<script>\r\nimport { slide } from \"svelte/transition\";\r\nlet v_lookupArea = false;\r\n\r\nfunction toggleLookupArea(e) {\r\n\tv_lookupArea = !v_lookupArea;\r\n}\r\n</script>\r\n```\r\n\r\n**Expected behavior**\r\nHere is what it looks like on Chrome: [https://streamable.com/crvf1n](https://streamable.com/crvf1n)\r\nAnd here is the buggy Safari behavior: [https://streamable.com/ldb1gh](https://streamable.com/ldb1gh)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 81 (correct), Safari (broken)\r\n\r\n- Your operating system: Windows 10 (correct), iPadOS 13.4.1 (broken)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): 3.20.1\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nIt is just a design flaw, nothing major.","state":"open","updated_at":"2022-05-01T17:12:27Z","created_at":"2020-04-23T17:15:48Z","creator_user_login":"palask"}
{"number":4701,"title":"[Proposal] Run js expressions in markup template through Svelte script preprocessor code","body":"**Is your feature request related to a problem? Please describe.**\r\ni would like to use babel/typescript syntax inside of Svelte markup template code. \r\n\r\nFor example, let's say i have the babel optional chaining enabled:\r\n\r\n```js\r\n// rollup.config.js\r\n    svelte({\r\n\t  // ...\r\n      preprocess: {\r\n        script: ({ content }) => {\r\n          return require(\"@babel/core\").transform(content, {\r\n            plugins: [\"@babel/plugin-proposal-optional-chaining\"],\r\n          });\r\n        },\r\n      },\r\n    }),\r\n```\r\n\r\nThis lets me use new JS syntax in my script tag:\r\n\r\n```html\r\n<script>\r\n  let foo = {\r\n\t\tbar: {\r\n\t\t\tbaz: true\r\n\t\t}\r\n\t}\r\n  let sub = foo?.ban?.baz\r\n</script>\r\n\r\n<main>\r\n  <h1>Hello {sub}!</h1>\r\n</main>\r\n```\r\n\r\nthis is great! however we try to move it down and Svelte complains:\r\n\r\n```html\r\n<script>\r\n  let foo = {\r\n\t\tbar: {\r\n\t\t\tbaz: true\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<main>\r\n  <h1>Hello {foo?.ban?.baz}!</h1>\r\n  <!-- uh oh -->\r\n</main>\r\n```\r\n\r\n<details>\r\n<summary>Error:</summary>\r\n\r\n```bash\r\n[!] (plugin svelte) ParseError: Unexpected token\r\nsrc/App.svelte\r\n 6: \r\n 7: <main>\r\n 8:   <h1>Hello {foo?.ban?.baz}!</h1>\r\n                     ^\r\n 9: </main>\r\nParseError: Unexpected token\r\n    at error (/Users/swyx/Desktop/Work/testbed/trybabelrecipe/svelte-app/node_modules/svelte/src/compiler/utils/error.ts:25:16)\r\n    at Parser$1.error (/Users/swyx/Desktop/Work/testbed/trybabelrecipe/svelte-app/node_modules/svelte/src/compiler/parse/index.ts:96:3)\r\n```\r\n\r\n</details>\r\n\r\nThis is somewhat of a break of the mental model, since Svelte should accept the same kinds of JS inside templates as it does inside script tags. You can imagine other good usecases for this, e.g. `{#if data?.foo?.bar}`\r\n\r\nin order to fix this, i would have to hook into a markup preprocessor, and then parse the template contents to sift out the js expressions, and then transpile it, and then stitch the markup back together. seems like repeat work to what Svelte already does anyway.\r\n\r\n**Describe the solution you'd like**\r\n\r\nSvelte should reuse the `script` preprocessor for in-template js expressions, as well as for `<script>` tags.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nno change\r\n\r\n**How important is this feature to you?**\r\n\r\nit's a nice to have. i dont have any proof, but i suspect this might help the TypeScript effort too in case any assertions are needed (this is rare, though; more likely the \"new syntax\" usecase is more important than the \"need to specify types in expressions\" usecase)","state":"open","updated_at":"2023-08-23T15:07:47Z","created_at":"2020-04-21T14:11:15Z","creator_user_login":"swyxio"}
{"number":4696,"title":"component with transition directive didn't update correctly when store updated ","body":"**Describe the bug**\r\n\r\nWhen store get updated, I found component with transition directive won't update. It only happens when:\r\n\r\n* `store.update()` inside Promise `then()` block, if I move `store.update()` call to outside, it works as expected.\r\n* transition directive was added in component.\r\n\r\n**To Reproduce**\r\n\r\n[demo](https://svelte.dev/repl/421b79b111344633a5f5fbda0b1c2b5f?version=3.20.1)\r\n\r\n1. click `tab2` button, text should be updated to `Hello Tab2` (can check console for store detail)\r\n2. click `tab1` button again\r\n3. click `tab2` button again, it now updates.\r\n\r\n### work around\r\n\r\n* go to `Title.svelte`, remove `transition:fade`, rerun it\r\n* move store.update() outside of `then()`, rerun it.\r\n\r\n**Expected behavior**\r\ntext should be updated.\r\n\r\n**Severity**\r\nsmall.\r\n","state":"open","updated_at":"2021-06-27T16:19:12Z","created_at":"2020-04-20T17:43:10Z","creator_user_login":"kjj6198"}
{"number":4695,"title":"Overzealous updating of components when using {#each} on array of objects","body":"There's some awkward behaviour of Svelte that looks to me like a potential performance pitfall, and it occurs when iterating over an array of objects with `{#each}` and passing an element to a child component.  For example:\r\n\r\n```svelte\r\n{#each array as item (item.id)}\r\n  <Item item={item} />\r\n{/each}\r\n```\r\n\r\nThe problem is this: if I add a new object to the end of the array, Svelte will update *all* the Item components, not just the one I added.  This is demonstrated in [this REPL](https://svelte.dev/repl/891210f748f84c41a90b04556b77d0ef?version=3.20.1) (open the JS console to see the updates).  This doesn't happen when it's an array of strings or numbers.\r\n\r\nI think that the function `safe_not_equal()` is used for this, which never sees objects as equal, even identical ones.  While I understand why this would be so in some cases (eg. `a = a;` should work for objects), it's less clear to me why this should also apply when updating a keyed \"each\" in this fashion.\r\n\r\nI understand that there are several workarounds for this.  I could destructure the object, but in my case it's very inconvenient for this component to have to know all the internals of my item model.  I could mark the Item component as `immutable`, and this certainly works as expected, but this isn't very satisfying because this applies to *all* properties, and I don't want that in my case.\r\n\r\nPerhaps there is a good technical reason for it to work like this?  If so, I think this should be documented so that others don't trip over this.  If not, please consider this my humble request to change this behaviour.\r\n\r\nOh, and thanks so much for creating such a great library!  I don't think I'll be able to ever go back to React now that I've tried Svelte.","state":"open","updated_at":"2023-02-19T02:25:37Z","created_at":"2020-04-20T12:02:59Z","creator_user_login":"rdb"}
{"number":4683,"title":"outroing if_blocks cannot receive updates","body":"outroing if_blocks will not receive any update from the tick they get outroed on\r\n`render_simple` :\r\nhttps://svelte.dev/repl/3abed636ab2d456882e49b1db35c677f?version=3.20.1\r\n`render_compound` :\r\nhttps://svelte.dev/repl/5e950ff7951f4afc9b627aa9832fae5b?version=3.20.1\r\n\r\n`render_simple` does have the following comment in the compiler\r\n```\r\n// no `p()` here — we don't want to update outroing nodes,\r\n// as that will typically result in glitching\r\n```\r\nit's been there since the initial commit 2 years ago\r\n\r\n~~I don't really see why it couldn't be fixed, might give it a try in a few days~~","state":"open","updated_at":"2021-10-27T01:46:35Z","created_at":"2020-04-17T19:00:56Z","creator_user_login":"pushkine"}
{"number":4673,"title":"Improve the tutorial table of contents accessibility","body":"**Is your feature request related to a problem? Please describe.**\r\nI feel a bit frustrated sometimes when trying o open another section of the tutorial in another tab, and invariably fail due to the table of contents being a `<select>`.\r\n\r\n**Describe the solution you'd like**\r\nIt would be more intuitive and useful if it was possible to open a new section in a new tab from the right click menu, or by Cmd+clicking (so I guess just behaving like a regular `<a>` element).\r\n\r\nHow about replacing the single selection table of contents with a more accessible one with anchor elements?\r\n\r\n**Describe alternatives you've considered**\r\nIt seems that this section is responsible for defining the DOM for this part of the page. https://github.com/sveltejs/svelte/blob/master/site/src/routes/tutorial/%5Bslug%5D/_TableOfContents.svelte#L80\r\n\r\nI imagine that the solution would be along the lines of replacing it with the usual `<nav>`, `<ol>`, `<li>`, and `<a>` elements. Or maybe just add wrapper `<a>` elements in the TOC entries themselves.\r\n\r\n**How important is this feature to you?**\r\nIt's a nice to have, but it doesn't really impact my daily work significantly.\r\n\r\nI wouldn't mind tackling this issue, but I wanted to check if I was the only one slightly frustrated by this behavior.","state":"open","updated_at":"2021-12-24T19:25:05Z","created_at":"2020-04-14T17:49:49Z","creator_user_login":"jpaquim"}
{"number":4657,"title":"Fully or Partially (with external data and/or data which can change non deterministicly) Compile Time Evaluated Components and Code","body":"The \"Hello World\" app\r\n\r\n```\r\n<h1>Hello world!</h1>\r\n```\r\n\r\ngenerates quite a bit of boilerplate JS:\r\n\r\n```\r\n/* App.svelte generated by Svelte v3.20.1 */\r\nimport {\r\n\tSvelteComponent,\r\n\tdetach,\r\n\telement,\r\n\tinit,\r\n\tinsert,\r\n\tnoop,\r\n\tsafe_not_equal\r\n} from \"svelte/internal\";\r\n\r\nfunction create_fragment(ctx) {\r\n\tlet h1;\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\th1 = element(\"h1\");\r\n\t\t\th1.textContent = \"Hello world!\";\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, h1, anchor);\r\n\t\t},\r\n\t\tp: noop,\r\n\t\ti: noop,\r\n\t\to: noop,\r\n\t\td(detaching) {\r\n\t\t\tif (detaching) detach(h1);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nclass App extends SvelteComponent {\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nFor something this simple I believe much of this can be eliminated. Ideally, there should be no JS in this case or whenever the component does not use any external data or bound to components which the data can change.\r\n\r\nThe rendered or partially rendered components can be stored in another file type and weaved together at compile time. Also, partial evaluation, tree shaking and other optimisations of the Svelte code can be done so the Svelte code used is also minimal perhaps like in [Prepack](https://prepack.io/) and [Closure Compiler](https://developers.google.com/closure/compiler/) restricted to the language used in Svelte. A similar further phase of optimisation can be done in the resulting JS code along with any linked JS libraries to eliminate and optimise the final projects JS code.\r\n\r\nThis will further optimise the framework.\r\n\r\nWhen it is external data or bound to fields which data can change then the minimal plumbing to accommodate this should be generated.","state":"open","updated_at":"2021-12-24T19:25:04Z","created_at":"2020-04-10T10:40:38Z","creator_user_login":"sirinath"}
{"number":4652,"title":"Many routers with warning `<Component> was created with unknown prop`","body":"Many routers are having this problem with this warning appearing all around:\r\n\r\n`<Component> was created with unknown prop '...'`\r\n\r\n- the amazing `svelte-spa-router`: https://github.com/ItalyPaleAle/svelte-spa-router/issues/98\r\n- the also amazing `yrv`: https://github.com/pateketrueke/yrv/issues/25\r\n\r\nCan it be avoided in any way?\r\n\r\nWhat do you think about?","state":"open","updated_at":"2023-08-06T15:20:41Z","created_at":"2020-04-08T07:48:20Z","creator_user_login":"frederikhors"}
{"number":4649,"title":"API to understand if component object has props","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nAssume that `component` is a variable that contains a Svelte component class. For example:\r\n\r\n```js\r\nimport component from './Component.svelte`\r\n```\r\n\r\nIt would be useful to have an API to get details on what props `component` exposes.\r\n\r\nThe reason for this is something that has appeared in [svelte-spa-router](https://github.com/ItalyPaleAle/svelte-spa-router) recently. Starting with a recent version of Svelte, when using:\r\n\r\n```svelte\r\n<svelte:component this=\"{component}\" params=\"{componentParams}\"  />\r\n```\r\n\r\nIf the class of `component` does not export any params/props, Svelte now shows a warning.\r\n\r\nHowever, I don't believe there's a way to know if `component` has props. I have found a workaround in the router, but that was not always ideal and has caused a couple of issues to users too.\r\n\r\n**Describe the solution you'd like**\r\n\r\nWould be great if component classes could export a list of properties (without their value). So, something like `component.props` being an array with the list of props exported.\r\n\r\n**How important is this feature to you?**\r\n\r\nAfter finding a workaround, some users of svelte-spa-router have been impacted with annoyances caused by this. For example https://github.com/ItalyPaleAle/svelte-spa-router/issues/102\r\n\r\nA better solution would require the upstream Svelte project to export that property.","state":"open","updated_at":"2022-03-22T14:21:54Z","created_at":"2020-04-08T01:56:55Z","creator_user_login":"ItalyPaleAle"}
{"number":4642,"title":"Proposal : make the \"component events\" section of the tutorial more complete","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI was going through the (great) tutorial and found out that the `component events` section was missing a crucial point about the `on:message` attribute that was set on the `App` component. Without this, it could be complicated for beginners to understand the principles of having a dispatcher & a(some) listener(s) and how they work in Svelte.\r\n\r\n**Describe the solution you'd like**\r\nI created a PR to add a section about the listener part (e.g. the `on:message` attribute on the `App` component) with an invitation to add & remove this attribute to understand what it does, and change its name: https://github.com/sveltejs/svelte/pull/4639 \r\n\r\n**Describe alternatives you've considered**\r\n\r\nMaybe having an even more explanation of the concept ? It could be interesting to provide a link to one of the multiple pages that explain this concept, however I guess that the goal is to have something as light as possible.\r\n\r\nThe section \"solution\" could also be changed - I'm up for suggestions.\r\n\r\n**How important is this feature to you?**\r\n\r\nHaving people understand matters! :)\r\n","state":"open","updated_at":"2021-12-24T19:25:02Z","created_at":"2020-04-06T13:59:32Z","creator_user_login":"MeuhMeuh"}
{"number":4599,"title":"Mechanism for bubbling all events","body":"This PR enables the use of the `on:*` directive to bubble all events to the parent. See #2837. I removed the bubble utility function and instead the `Component.$on` function delegates to `Fragment.b` which connects the appropriate listeners directly or does so after the component mounts. This has an advantage over the previous approach as it doesn't require adding an event listener to the element when no bubbled events are listened to.","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2020-03-25T09:14:44Z","creator_user_login":"RedHatter"}
{"number":4586,"title":"Reactive statements have incorrect values in functions where dependent values are updated","body":"**Describe the bug**\r\nReactive statements have incorrect values in functions where dependent values are updated.\r\n\r\nExample:\r\n```\r\nlet count = 0;\r\n$: even = count % 2 === 0\r\n\r\nfunction handleClick() {\r\n  count += 1;\r\n  console.log({ count, even }) // output => { count: 1, even: true }\r\n  // `even` will have incorrect value here, unless `tick()` is being called before it.\r\n}\r\n```\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/9c7d12357a15457bb914705702f156d1?version=3.19.2)\r\n\r\n**Expected behavior**\r\nReactive statements should have correct (updated) values even if used in a function where their dependent values are updated.\r\n\r\n**Severity**\r\nCritical - I think the current behavior is confusing and might lead to bugs. In fact, I have found this as I was having some weird bugs in production. In addition, using `tick()` to get the expected behavior in this case is odd and leads to code bloating.","state":"open","updated_at":"2021-12-24T10:28:17Z","created_at":"2020-03-20T18:21:48Z","creator_user_login":"yuliankarapetkov"}
{"number":4580,"title":"Dimension bindings (clientHeight) not updated after {#await} block resolves.","body":"**Describe the bug**\r\n\r\nDimension bindings (clientHeight) not updated after {#await} block resolves.\r\n\r\n**To Reproduce**\r\n\r\n<s>[Minimal example in REPL](https://svelte.dev/repl/8b8c2884b37749249cf565579312e118?version=3.20.1)</s> Only repros in REPL\r\n\r\n[New minimal example](https://svelte.dev/repl/85c6b7f1c87d4d19838294a23cadafe3?version=3.20.1) that repros outside REPL \r\n- Slightly modified from https://svelte.dev/tutorial/slots\r\n- The promise fires immediately. Depending on where you run it there are two behaviors:\r\n  1. Outside REPL: clientHeight does not reflect actual height until &lt;details> toggled.\r\n  2. REPL: clientHeight does not change even if &lt;details> toggled. This might be due to the sandbox.\r\n  3. Modify https://svelte.dev/tutorial/slots: behaves like outside REPL.\r\n\r\n**Expected behavior**\r\n\r\nThe dimension bindings should update after the {#await} block causes changes to the DOM.\r\n\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Chrome 80\r\n- Windows 10\r\n- Svelte 3.20.1\r\n- Rollup\r\n\r\n**Severity**\r\n\r\n- Just cosmetic problems with my program.\r\n- I think I can find a work-around.\r\n\r\n**Additional context**\r\n\r\nI am making a sticky header component. Some elements are added after fetching data. This causes the sticky header to become sticky too early, causing some jumping and/or displaying parts of the non-sticky part before the sticky header (which should be totally scrolled out of view.)","state":"open","updated_at":"2021-06-28T10:49:11Z","created_at":"2020-03-20T02:44:20Z","creator_user_login":"Leftium"}
{"number":4573,"title":"animate:flip glitches when each block is updated during animation","body":"When a list iterated in a keyed `each` block is updated while some of its elements are being animated with the `animate:flip` directive, all the current animations glitch.\r\n\r\nhttps://svelte.dev/repl/7197a0f2d51d47f8b9b2d6e7aa5d401c?version=3.20.1","state":"open","updated_at":"2023-08-06T06:33:37Z","created_at":"2020-03-17T17:06:02Z","creator_user_login":"Oreilles"}
{"number":4570,"title":"Conditional bind:this (allow undefined and conditional targets)","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nIt has a lot of possible applications. Here's the latest problem I faced today.\r\n\r\nI have a big paginated list, that has page buttons in the bottom of the list, and I want to scroll the list to the first item whenever I change the page. I want to use `scrollIntoView` method, so I need a ref to the first item of the list.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIt seems to be quite safe to allow `undefined` as a possible value for ref — it would just mean to not bind this element/component to any variable.\r\n```html\r\n{#each arr as item, index}\r\n  <p bind:this={index === 0 ? ref : undefined}>{item}</p>\r\n{/each}\r\n```\r\n\r\nIt also seems legit from developer point of view to allow dynamic ref target with code like this:\r\n```html\r\n{#each arr as item, index}\r\n  <p bind:this={cond(item) ? ref : ref2}>{item}</p>\r\n{/each}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nRight now I do this in multiple ways.\r\n\r\n*Array of refs*. [REPL](https://svelte.dev/repl/fb849bd4c802457fa3fca9baf33e55c9?version=3.20.1). In two words:\r\n\r\n```html\r\n<script>\r\n  let refs = [];\r\n</script>\r\n\r\n{#each arr as item, index}\r\n  <p bind:this={refs[index]}>{item}</p>\r\n{/each}\r\n```\r\nand then use `refs[0]` or `refs[refs.length - 1]` to get certain elements.\r\n\r\nI think:\r\n\r\n1. it is confusing\r\n2. it might have performance implications with huge lists\r\n3. it can even break business logic, because if your array gets smaller over time you'll end up with a bunch of null values in it. [REPL](https://svelte.dev/repl/3bb0b73b23704864a1317139a1fda366?version=3)\r\n\r\n*Custom class name*.  Assign a conditional class via `class:custom-name={index === 0}`, and then use `document.querySelector` to get the element with this class. It is bad because of two reasons: class name clashes (need to come up with unique name) and class name duplication (one in `<script>` and one in layout).\r\n\r\n**How important is this feature to you?**\r\nNot that much, it just seems like a good feature to have. I'm not aware of the internals of Svelte, but I assume adding any kind of dynamic code in element binding would be a lot of pain, because it most probably happens during compile time and not in the runtime.\r\n\r\n**Additional context**\r\nSame ideas were mentioned in [this comment](https://github.com/sveltejs/svelte/issues/2422#issuecomment-549101659).","state":"open","updated_at":"2021-06-28T10:49:38Z","created_at":"2020-03-17T10:32:54Z","creator_user_login":"dkzlv"}
{"number":4547,"title":"Event bindings on animate directive","body":"It would be nice to be able to bind events on the `animate:*` directive, much like the one that are available with the [transition directive](https://svelte.dev/docs#Transition_events) (`introstart`, `introend,` `outrostart`, `outroend`).\r\n\r\nThis feature would be useful in order to prevent other changes to the current component state while an animation is occuring, as a component update during an animation can make it glitch.\r\n\r\nI think two events named `animstart` and `animend` would be appropriate.\r\n\r\nIn the meantime, is there a way to emulate this feature with what svelte already offers ?","state":"open","updated_at":"2023-03-15T23:39:42Z","created_at":"2020-03-12T11:10:56Z","creator_user_login":"Oreilles"}
{"number":4535,"title":"Surgically update objects without causing mass reactivity","body":"**Is your feature request related to a problem? Please describe.**\r\nUpdating a key in an object results in re-firing all reactivity associated with that object, even if the associated reactivity did not specifically reference the specific key in the object that was changed. Any update to an object, even if the exact same data currently in the object, will also cause a re-fire. This does not happen with basic variables.\r\n\r\n**Describe the solution you'd like**\r\nOnly fire reactivity associated with the specific key that specific key is updated.\r\n\r\n**Describe alternatives you've considered**\r\nHave tried to develop a custom store to handle surgical updates, but currently cannot determine a valid method.\r\n\r\n**How important is this feature to you?**\r\nRather important. I need to maintain state sync between multiple clients and the server and passing it back and forth as an object would make things much more straightforward. Currently resorting to using basic variables.\r\n\r\n**Additional context**\r\nREPL demonstrating object reactivity behavior vs standard variable.\r\n\r\nhttps://svelte.dev/repl/8661837c43214b0e941661ab7eebac1d?version=3.19.2\r\n\r\n**Other**\r\nI may have a fundamental mis-understanding on how the reactivity works and what is possible. That said, I really like the way it feels to write Svelte and the object reactivity behavior currently feels counter-intuitive. \r\n","state":"open","updated_at":"2021-12-23T20:44:56Z","created_at":"2020-03-10T17:55:30Z","creator_user_login":"purebordem"}
{"number":4534,"title":"add $$host","body":"Fixes https://github.com/sveltejs/svelte/issues/3091\r\n\r\n- compile error if using `$$host` without using `customElement: true`","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2020-03-10T14:45:13Z","creator_user_login":"tanhauhau"}
{"number":4531,"title":"fix: ensure spring animation does not have negative start offset","body":"fixes https://github.com/sveltejs/svelte/issues/4468\r\n\r\nIn some situations animating a spring causes the spring value to animate in the wrong direction for the first tick.\r\n\r\nFor example, animating `100` to `0`, logging the value inside the spring function shows:\r\n\r\n```\r\n100.1 -> 98 -> 87 -> 80 -> all good\r\n```\r\n\r\nThat `100.1` is problematic, it causes a slight jump at the start of the animation.\r\n\r\n### \r\n\r\nAs stated in the referenced issue I wasn't able to reproduce this with a test or on the REPL, this PR did solve the issue in my project.\r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR relates to an outstanding issue, so please reference it in your PR, or create an explanatory one for discussion. In many cases features are absent for a reason.\r\n- [x] This message body should clearly illustrate what problems it solves. If there are related issues, remember to reference them.\r\n- [x] Ideally, include a test that fails without this PR but passes with it. PRs will only be merged once they pass CI. **Haven’t included a test as I don’t know what causes the issue.**\r\n- [x] Remember to `npm run lint`!\r\n\r\n### Tests\r\n-  [x] Run the tests tests with `npm test` or `yarn test`","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-03-10T08:21:19Z","creator_user_login":"rikschennink"}
{"number":4529,"title":"Render slot fallback content when there's no content","body":"**Describe the bug**\r\nWhen using `{#if}` or `{#each}` inside Component, it should render fallback content, when the logic block renders nothing\r\n\r\n\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/7757b496e0f841aab0e7958f4aa77c34?version=3.19.2\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","state":"open","updated_at":"2022-10-09T11:07:04Z","created_at":"2020-03-09T14:49:10Z","creator_user_login":"tanhauhau"}
{"number":4516,"title":"Reactive statements and unexpected line execution order","body":"The compiler reorganizes the order at which lines are run such that reactive statements are only run at the end, that already by itself creates unexpected output such as : \r\n```javascript\r\nlet value = \"hi\"\r\n$: value = \"hello\";\r\nconsole.log(value) // prints \"hi\"\r\n```\r\nbut then, when you'd expect reactive statements to at least keep the right order between themselves, this happens:\r\n```javascript\r\nlet value = \"hi\"\r\n$: console.log(value) // prints \"hello\"\r\n$: value = \"hello\";\r\n```\r\nthe current component initialization order is the following :\r\n\r\n1. run static statements\r\n2. run \"one time\" dynamic statements\r\n3. run dynamic statements\r\n\r\nrelated : #4371","state":"open","updated_at":"2021-06-28T10:50:30Z","created_at":"2020-03-06T12:25:47Z","creator_user_login":"pushkine"}
{"number":4495,"title":"Svelte fails when modifying nested writable stores","body":"**Describe the bug**\r\nSvelte chokes when altering the content of a nested store using the `$` syntax.\r\n\r\n(i.e) \r\n```html\r\n<script>\r\n   import { writable } from \"svelte/store\";\r\n\t\r\n   let store = writable({\r\n\tinner: writable(\"string\"),\r\n   });\r\n\t\r\n  $: ({ inner } = $store);\r\n  $: inner.set(\"new string\");          // this works \r\n  //$: $inner = \"other new string\";    // this doesn't\r\n  $: $inner && ($inner = \"other other new string\"); // this works!?\r\n</script>\r\n\r\n<h1>Hello {$inner}!</h1>\r\n```\r\n\r\n**Logs**\r\nResults in a `Cannot read property 'set' of undefined` error.\r\n\r\n**To Reproduce**\r\n[REPL repro](https://svelte.dev/repl/6f3f2662d58842a5a2d51eb52ff9e51a?version=3.19.1)\r\n\r\n**Expected behavior**\r\nI should be able to assign a value to a nested Svelte store using the `$` systax.\r\n\r\n**Severity**\r\nLow severity. It's only a convenience, and probably a rarely used pattern to nest stores.\r\n\r\n**Additional context**\r\nI'm not familiar with Svelte internals but I suppose this may be vaguely related to #4079 and #3637 ??","state":"open","updated_at":"2021-06-28T10:50:40Z","created_at":"2020-03-02T00:44:41Z","creator_user_login":"milkbump"}
{"number":4492,"title":"mark reassigned/mutated when done inline in the template","body":"Fixes https://github.com/sveltejs/svelte/issues/3793","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-03-01T03:52:33Z","creator_user_login":"tanhauhau"}
{"number":4484,"title":"How to contribute to Svelte?","body":"Hi,\r\nI want to contribute to svelte. Can anyone help me to get started. Is there any starter guide?\r\nI am a software engineer from India who works on React, Angular.","state":"open","updated_at":"2022-04-16T03:25:42Z","created_at":"2020-02-28T15:36:07Z","creator_user_login":"kanishk30"}
{"number":4471,"title":"Bug: media elements incorrectly fire seeking","body":"**Describe the bug**\r\nWhen `bind:currentTime` is added to a media element, if you simply play then pause the video a `seeking` event is fired. This occurs every toggle.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/366aaeab10304d11968cb72fe0896830?version=3.19.1\r\n\r\nIn the REPL simply open the console and toggle playback state on the audio player under the Fail heading.\r\n\r\n**Expected behavior**\r\nIt should not fire the `seeking` event when toggling playback.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Chrome 80.0.3987.116\r\n- OS: OSX 10.15.1\r\n- Svelte: 3.19.1\r\n- Project uses both webpack and rollup.\r\n\r\n**Severity**\r\nNot severe. I'm in the process of building a video player with Svelte and I realized this odd behavior, it's easy to work around. I don't think in general it'll cause anyone trouble.\r\n\r\n**Additional context**\r\nI tried to fix it but JSDOM is limiting when running tests on a media element, so not sure if whatever I suggest will fix it or not. My guess is that on line 49 in `Fail.svelte` in the REPL, we need to check if the media element is paused again, otherwise the currentTime is updated one last time right after it is paused and it causes a `seeking` op.\r\n","state":"open","updated_at":"2022-09-17T15:36:58Z","created_at":"2020-02-26T12:43:08Z","creator_user_login":"mihar-22"}
{"number":4470,"title":"Event is not dispatched after component is loaded","body":"**Describe the bug**\r\nEvent from component is not dispatched (from reactive function) after component is loaded.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/2b0b7837e3ba44b5aba8d7e774094bb4?version=3.19.1\r\n\r\n**Expected behavior**\r\n\r\nEvent is dispatched after component is loaded.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Google Chrome | 80.0.3987.87 (Official Build) (64-bit)\r\n- Your operating system: Ubuntu 18.04.4 LTS\r\n- Svelte version: 3.19.1\r\n\r\n**Severity**\r\n\r\n**Low**, I think.\r\n\r\n**Additional context**\r\n\r\nWhen I call dispatch in the `setTimeout()` with zero delay then it's working corectlly.\r\n\r\nIf this is desired behaviour then I think it's appropriate to write notice to documentation:\r\n- https://svelte.dev/docs#createEventDispatcher\r\n- https://svelte.dev/tutorial/component-events","state":"open","updated_at":"2022-09-01T11:04:48Z","created_at":"2020-02-26T11:29:44Z","creator_user_login":"MrSrsen"}
{"number":4468,"title":"Spring animation sometimes has negative start offset","body":"#4531 \r\n\r\n**Describe the bug**\r\nIn some situations animating a spring causes the spring value to animate in the wrong direction for the first tick.\r\n\r\nFor example, animating 100 to 0, logging the values shows:\r\n100.1 -> 98 -> 87 -> etc.\r\n\r\nThat 100.1 is problematic as it causes a slight jump.\r\n\r\n\r\n**To Reproduce**\r\nI've not been able to reproduce this in the REPL but I've debugged the [spring.ts file](https://github.com/sveltejs/svelte/blob/master/src/runtime/motion/spring.ts).\r\n\r\nIt seems the value returned by the `now()` function that is set to the `last_time` variable at line 99 can be different from the `now` value in the `loop`, which causes the first tick of the spring to be in the past resulting in a negative start point. \r\n\r\nI suspect setting now inside the animation loop will fix this.\r\n\r\n```js\r\nif (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\r\n    cancel_task = true;\r\n    last_time = null; // set to null instead of now() on line 88\r\n\r\n    // ... rest of code\r\n\r\nif (!task) {\r\n    last_time = null; // set to null instead of now() on line 99\r\n    cancel_task = false;\r\n\r\n    task = loop(now => {\r\n\r\n        // set now here, if it's not available, it's set to first frame of loop\r\n        if (last_time === null) last_time = now;\r\n\r\n        if (cancel_task) {\r\n            cancel_task = false;\r\n\r\n            // ... rest of code\r\n```\r\n\r\n\r\n\r\n\r\n**Expected behavior**\r\nThe value should not jump up before being lowered.\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Tested on Chrome latest and Firefox latest\r\n- MacOS Catalina\r\n- Svelte 3.6.1\r\n- Rollup\r\n\r\n**Severity**\r\nThis is causing animations to slightly jump when they start, I'll probably create a custom spring.ts function to work around this.","state":"open","updated_at":"2021-06-28T10:51:11Z","created_at":"2020-02-26T08:53:57Z","creator_user_login":"rikschennink"}
{"number":4467,"title":"undefined value on input and other elements","body":"**Describe the bug**\r\nThe value prop behaves differently in various situations.\r\n\r\nSuppose we have a variable `let value = undefined`.\r\n\r\nIf you use it on an input element with two-way binding `<input bind:value />`, the value is not set (this is the correct behavior, it got fixed in https://github.com/sveltejs/svelte/pull/3430).\r\nIf you use it on an input element like this: `<input {value} />`, the input elements value property is set to the string 'undefined' (not the attribute).\r\nIf you use it on any other element, like: `<option {value} />`, the value attribute is set to \"undefined\".\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/9a8cf877df9a47948eb0cd3b04ea8372?version=3.19.1\r\n\r\n**Expected behavior**\r\nI think the `value` attribute (without two-way binding) should behave like the `disabled` attribute in the repl.\r\n\r\n**Severity**\r\nlow\r\n\r\n**Additional context**\r\nYou can get around it with `<input value={value || ''} />`\r\n","state":"open","updated_at":"2021-07-12T08:00:00Z","created_at":"2020-02-26T08:11:14Z","creator_user_login":"PatrickG"}
{"number":4459,"title":"Perf: Frequently updating reactive variables cause garbage collection pressure & hitching","body":"We're seeing some hitches in a game we're developing that uses embedded webkit(Coherent GT) for the UI and I've narrowed this down to what appears to be GC pressure created when using reactive variables.\r\n\r\nWe're updating reactive variables within our components nearly every frame for things like health & positions.  In a normal web app, the GC times we're seeing(can get up to 20ms) wouldn't be an issue, but our UI has a small budget for each frame (~3ms).\r\n\r\nI'm able to repro this in latest chrome with the following component in svelte 3.18.2:\r\n```\r\n<div data-amount=\"{amount}\" />\r\n\r\n<script>\r\nlet amount = 0;\r\n\r\nsetInterval(() => {\r\n    amount = (amount + 1) % 100;\r\n}, 4);\r\n</script>\r\n```\r\nHere's what the memory looks like when profiling in chrome:\r\n![image](https://user-images.githubusercontent.com/5530727/75188494-14934100-5701-11ea-8d1c-c3d20e27dcca.png)\r\n\r\n\r\nA different approach that doesn't use reactive variables does not have this issue:\r\n```\r\n<div data-amount=\"{0}\" bind:this={amountEl}/>\r\n\r\n<script>\r\nlet amountEl;\r\n\r\nsetInterval(() => {\r\n    amountEl.setAttribute(\"data-amount\", (Number(amountEl.getAttribute(\"data-amount\")) + 1) % 100);\r\n}, 4);\r\n</script>\r\n```\r\n\r\nHere's what the memory profile in chrome looks like when not using reactive variables:\r\n![image](https://user-images.githubusercontent.com/5530727/75188851-d0547080-5701-11ea-935a-df0f58b01707.png)\r\n\r\nI've looked at the generated output and tried to narrow down what might be causing a lot of the extra allocation, but haven't been able to nail anything down yet.  Any help would be appreciated!","state":"open","updated_at":"2021-06-28T10:51:24Z","created_at":"2020-02-24T20:39:49Z","creator_user_login":"Ryan-McMillan"}
{"number":4458,"title":"way to make set_attributes faster","body":"For the context first\r\n\r\nI am using `svelte` with `svelte-native` . The idea is to use svelte with [Nativescript](https://github.com/NativeScript/NativeScript)\r\n\r\nNow i have an issue with the [attr](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts#L88) method. In our context it is slow  because it calls `getAttribute` on the node to compare and see if it should be set.\r\nThe reason is that Nativescript is using JNI and `getAttribute` will make a JNI call which is slow.\r\n\r\nFor us there is no need to check for equality in `attr` as it is in `setAttribute`\r\n\r\nWould it be possible to add a way to customize that behavior? Not sure how that could be done.\r\n\r\nBy the way `set_attributes` can also be slow because everytime it calls `getOwnPropertyDescriptors`. Wonder if there could be a way to not call it everytime.","state":"open","updated_at":"2021-06-28T10:51:32Z","created_at":"2020-02-24T14:32:26Z","creator_user_login":"farfromrefug"}
{"number":4400,"title":"Using the animate directive inside an #if block","body":"This is possible:\r\n\r\n```svelte\r\n{#each [1,2,3].filter(x => x%2) as f(f)}\r\n  <div animate:flip />\r\n{/each}\r\n```\r\n\r\nBut this isn't:\r\n\r\n```svelte\r\n{#each [1,2,3] as f(f)}\r\n  {#if f%2}\r\n    <div animate:flip />\r\n  {/if}\r\n{/each}\r\n```\r\n\r\nI'm in a situation where It would be very convenient to create different element depending on the `{#each}` block values with an `{#if}` block, while still being able to use the animate directive. \r\n\r\nThe only alternative would be to iterate the object twice (also filtering it twice), and use the crossfade transition, which wouldn't be nearly as efficient nor working as flawlessly as with the flip animation (see https://github.com/sveltejs/svelte/issues/4389).","state":"open","updated_at":"2021-12-23T23:55:58Z","created_at":"2020-02-11T15:58:12Z","creator_user_login":"Oreilles"}
{"number":4389,"title":"Strange behaviour with interrupted crossfade transitions","body":"Similar to  https://github.com/sveltejs/svelte/issues/3398\r\nHere is a very basic setup to test for the crossfade transition:\r\nhttps://svelte.dev/repl/7b633681d5a849968771c4fe9b7e7536?version=3.18.1\r\n\r\nThe duration is set to `2s` so you have time to interrupt the transition by clicking a second time on the button.\r\n\r\nOn the first interruption, the transition is working as expected: the forward transition stops, and the backward transition starts where the forward transition stopped.\r\n\r\nHowever, on second and following interruptions, the transition isn't smooth anymore. The crossfade fallback is called for the forward transition, and the backward transition doesn't start where the transition was stopped, but where it was stopped in the first interruption.\r\n\r\nYou will have to reload the script to observe the expected behaviour again.","state":"open","updated_at":"2021-07-14T09:43:33Z","created_at":"2020-02-08T15:56:31Z","creator_user_login":"Oreilles"}
{"number":4375,"title":"SSR Actions","body":"**Is your feature request related to a problem? Please describe.**\r\nIt would be nice if actions could output attributes in SSR context.\r\n\r\n**Describe the solution you'd like**\r\n```html\r\n<script>\r\n  function myAction(node, params) {\r\n    // the normal action stuff for client side\r\n  }\r\n  myAction.SSR = function (params) {\r\n    return {\r\n      'data-some-key': params.someKey,\r\n    };\r\n  }\r\n\r\n  export let someKey = 'someValue';\r\n</script>\r\n\r\n<div use:myAction={{ someKey }}>\r\n<!-- would render <div data-some-key=\"someValue\"></div> -->\r\n```\r\n\r\n**How important is this feature to you?**\r\nSomewhat. It's just an idea i had, that could play well with something like [svelte-css-vars](https://github.com/kaisermann/svelte-css-vars). Imagine that svelte-css-vars could return `{ style: '--color: red' }` when rendered on the server.","state":"open","updated_at":"2023-03-04T21:03:11Z","created_at":"2020-02-05T23:52:30Z","creator_user_login":"PatrickG"}
{"number":4374,"title":"Hash for styles of my Svelte component is doubled","body":"When I put my component to REPL I have doubled styles hash and browser could not apply styles when I write them in separate css file.\r\n\r\ncomponent code:\r\n\r\n```\r\n<style>\r\n.wpk-player {\r\n  padding: 10px 15px;\r\n}\r\n.wpk-button svg {\r\n  fill-opacity: 0.8;\r\n}\r\n</style>\r\n\r\n<div class=\"wpk-player\">\r\n  <div class=\"wpk-player__buttons-1\">\r\n    <button class=\"wpk-button\">\r\n      <svg width=\"26\" height=\"22\" viewBox=\"0 0 26 22\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M17.245 1.849c0-.92-.628-1.298-1.397-.837L.57 10.162c-.768.463-.768 1.217 0 1.678l15.278 9.148c.769.46 1.397.085 1.397-.836V1.849zm4.756 19.152H25s.956.074.994-1.001c.006-.197-.027-17.645.001-17.996.085-1.054-.996-1-.996-1h-3.001s-1.123-.059-1.001 1c.009.078.011 17.506.004 18-.016 1.161 1 .997 1 .997z\" fill=\"#fff\"/>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n</div>\r\n```\r\nCSS output:\r\n`.wpk-player.svelte-4i1jb7.svelte-4i1jb7{padding:10px 15px}.wpk-button.svelte-4i1jb7 svg.svelte-4i1jb7{fill-opacity:0.8}`\r\n\r\nAlso this component reproduce the same issue:\r\n```\r\n<div class=\"red\">\r\n  <div></div>\r\n</div>\r\n\r\n<style>\r\n.red {color:red}\r\n.red div {color: green}\r\n</style>\r\n```\r\nCSS outut:\r\n\r\n`.red.svelte-wvyici.svelte-wvyici{color:red}.red.svelte-wvyici div.svelte-wvyici{color:green}`","state":"open","updated_at":"2023-08-28T01:31:24Z","created_at":"2020-02-05T20:28:38Z","creator_user_login":"Dreaminsider"}
{"number":4371,"title":"Wrong order of execution for reactive variable","body":"When I assign a value from a standard variable to a reactive variable, accessing the reactive variable afterwards results in an \"uninitialized error\".\r\n\r\nFor example: \r\n```javascript\r\nlet val = \"onion\";\r\n\r\n$: gold = val;\r\n\r\nconsole.log(\"gold\", gold);\r\n```\r\n\r\nGenerates:\r\n```javascript\r\nlet val = \"onion\";\r\nfunction instance($$self) {\r\n\tconsole.log(\"gold\", gold);    // this comes before\r\n\tlet gold;\r\n\t$: gold = val;\r\n\treturn [];\r\n}\r\n```\r\nWhich results in a `Cannot access 'gold' before initialization` error. I would expect it to generate:\r\n```javascript\r\nlet val = \"onion\";\r\nfunction instance($$self) {\r\n\tlet gold;\r\n\t$: gold = val;\r\n        console.log(\"gold\", val);    // this comes after\r\n\treturn [];\r\n}\r\n```\r\n\r\nSee [Svelte REPL repro](https://svelte.dev/repl/df083f21721b4cb0ab7beca598f20ac2?version=3.18.1)\r\n","state":"open","updated_at":"2021-07-12T14:36:52Z","created_at":"2020-02-05T14:15:23Z","creator_user_login":"milkbump"}
{"number":4320,"title":"Issue with #each after upgrade from 3.15.0+","body":"**Describe the bug**\r\n>Background: \r\n>Creating SPA with simple menu navigation. The nav bar is represented by a list of strings and there an onclick handler on each label on the nav bar. In an attempt to fix an another issue where data on fetch would not propagate changes onto the page I upgraded to 3.18.0 as per a suggestion.\r\n\r\nOn initial load the nav bar properly displays the string labels. Clicking on any of the labels on the nav bar causes this error `Cannot read property 'length' of undefined`, meaning that the variable navLabels is somehow undefined. Console log of the value of the navLabels variable in the onclick handler does not show that it is not undefined and does have a length.\r\n\r\n**Logs**\r\nThere were no server logs.\r\nAnd below is the error shown in the console.\r\n![image](https://user-images.githubusercontent.com/3781737/73128971-b1e64280-3fa6-11ea-9e31-848720385157.png)\r\n\r\n**To Reproduce**\r\n_WIP, will attach when I get the chance to write one up_\r\n\r\n**Expected behavior**\r\nExpecting the onclick handler to update currently selected navbar \"page\"\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nChrome Version 79.0\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nOS Mojave 10.14.5\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n3.18.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\nRollup\r\n\r\n**Severity**\r\nPossibly blocking usage of app as I upgraded to resolve another issue where the component would not reload on async fetch of data. I'll look into alternatives in the mean time.\r\n\r\n**Additional context**\r\n_n/a_\r\n\r\nThanks again guys!\r\n","state":"open","updated_at":"2021-06-28T10:53:33Z","created_at":"2020-01-26T00:22:46Z","creator_user_login":"1kindjune"}
{"number":4318,"title":"#if goes to :else even if condition evaluates to true","body":"`svelte@3.18.0`\r\n\r\nHi, \r\n\r\nI have this code\r\n\r\n```\r\n{#if !isOwner}\r\n  {#if joined || !$ps.player_ids.includes(user.id)}\r\n    true == {(joined || !$ps.player_ids.includes(user.id))}\r\n  {:else}\r\n    false == {(joined || !$ps.player_ids.includes(user.id))}\r\n  {/if}\r\n  \r\n  ** skip **\r\n{/if}\r\n```\r\n\r\nThe result is\r\n\r\n```\r\ntrue == true\r\n```\r\n\r\nBut if I write this instead:\r\n\r\n```\r\n{#if !isOwner}\r\n  {#if joined || !$ps.player_ids.includes(user.id)}\r\n    true == {(joined || !$ps.player_ids.includes(user.id))}\r\n  {:else}\r\n    false == {(joined || !$ps.player_ids.includes(user.id))}\r\n    <div class=\"gbox\">\r\n      <!-- @lang -->\r\n      <LoadMsg>Get ready</LoadMsg>\r\n    </div>\r\n  {/if}\r\n ** skip **\r\n{/if}\r\n```\r\n\r\nThen the result will be \r\n\r\n```\r\nfalse == true\r\n Get ready\r\n```\r\n\r\nI do not know where to start to debug this. I think it may be a bug.","state":"open","updated_at":"2021-06-28T10:53:45Z","created_at":"2020-01-25T20:45:22Z","creator_user_login":"lud"}
{"number":4317,"title":"Cannot use yielded value in bind:this inside #each","body":"**Describe the bug**\r\nThe title is a bit of a mouthful so I think a simple example explains it better:\r\n\r\nhttps://svelte.dev/repl/2dc797d2d76b4663987a165f898fdd92?version=3.17.3\r\n\r\n```\r\n<script>\r\n\tlet name = 'world';\r\n\tfunction* foo() {\r\n\t\tyield {name: \"h\", value: 123}\r\n\t\tyield {name: 'x', value: 333}\r\n\t\t\r\n\t}\r\n\tlet things = {}\r\n</script>\r\n\r\n\r\n<h1>Things! {new Date()}</h1>\r\n\r\n{#each [...foo()] as f,i}\r\n  <!-- This will crash because of f.name: -->\r\n  <input bind:this={things[f.name]} value={f.value}> \r\n{/each}\r\n\r\n<pre>\r\n\tThis was bound: {JSON.stringify(things, undefined, 2)}\r\n</pre>\r\n```\r\n\r\n\r\n**Logs**\r\nNo logs, it just hangs\r\n\r\n**To Reproduce**\r\nRun the REPL, the bad code is commented out so it wont crash your browser: \r\nhttps://svelte.dev/repl/2dc797d2d76b4663987a165f898fdd92?version=3.17.3\r\n\r\n\r\n**Expected behavior**\r\nI would be expected to be able to bind:this using a yielded value\r\n\r\nA strange thing is if I store the list in a new variable which I then use in `#each` it works as expected:\r\n\r\n```\r\nconst fooList = [...foo()]\r\n\r\n... \r\n{#each fooList as f,i}\r\n```","state":"open","updated_at":"2021-06-28T10:53:55Z","created_at":"2020-01-25T16:43:42Z","creator_user_login":"jesperp"}
{"number":4313,"title":"CSS isolation bug when components styles is equals and have not used css rule","body":"I think it is optimization side effect.\r\nLikely it can be reproduced only if you have at least one not used css rule.\r\n[See this repl](https://svelte.dev/repl/ddc97886a98741dbbb40e58607aaa265?version=3.17.3)\r\n\r\n**See these components:**\r\n\r\nComponent1.svelte\r\n```svelte\r\n<div class=\"red\"> Red </div>\r\n\r\n<style>\r\n\t.red {\r\n\t\tbackground: red;\r\n\t}\r\n\t.yellow {\r\n\t\tbackground: yellow;\r\n\t}\r\n</style>\r\n```\r\n\r\nComponent2.svelte\r\n```svelte\r\n<div class=\"red\"> Red </div>\r\n<div class=\"yellow\"> Yellow </div>\r\n\r\n<style>\r\n\t.red {\r\n\t\tbackground: red;\r\n\t}\r\n\t.yellow {\r\n\t\tbackground: yellow;\r\n\t}\r\n</style>\r\n```\r\n\r\n**1.** For these components svelte generates different CSS with same css class suffixes\r\n\r\nComponent1.css\r\n```css\r\n.red.svelte-1q75qj7{\r\n    background:red\r\n}\r\n```\r\n\r\nComponent2.css\r\n```css\r\n.red.svelte-1q75qj7 {\r\n    background:red\r\n}\r\n.red.svelte-1q75qj7{\r\n    background:red\r\n}\r\n.yellow.svelte-1q75qj7{\r\n    background:yellow\r\n}\r\n```\r\n\r\n**2.** Depending on which component loads first, only one of these styles will be loaded. You can see in the repl that Yellow div is not yellow.\r\nSwitch the tabIndex default value to 2, and this div will be yellow.\r\n\r\nApp.svelte\r\n```svelte\r\n<script>\r\n\timport Component1 from './Component1.svelte'\r\n\timport Component2 from './Component2.svelte'\r\n\t\r\n\tlet tabIndex = 1\r\n</script>\r\n\r\n<button on:click={() => tabIndex = 1}>Tab 1</button>\r\n<button on:click={() => tabIndex = 2}>Tab 2</button>\r\n\r\n{#if tabIndex === 1}\r\n\t<Component1 />\r\n{:else}\r\n\t<Component2 />\r\n{/if}\r\n```\r\n\r\n**3.** Even if both styles will be loaded, their loading order will affect the style of the component. Thus, the styles of some components will affect others.\r\n","state":"open","updated_at":"2022-10-30T06:20:13Z","created_at":"2020-01-24T10:04:22Z","creator_user_login":"NikolayMakhonin"}
{"number":4302,"title":"Allow @html in attribute tags. ","body":"When using [@rollup/plugin-image](https://www.npmjs.com/package/@rollup/plugin-image) with svg images, it puts plain svg in an imported variable. \r\nThen it's impossible to set the data:image url as source since it's being escaped.\r\n\r\nAn possible solution is to allow @html tags inside attributes. \r\n\r\nExample:\r\n```html\r\n      <img src=\"data:image/svg+xml;utf-8,&lt;svg height=&quot;25&quot; width=&quot;25&quot; version=&quot;1.1&quot; data-name=&quot;Layer 1&quot; id=&quot;prefix__Layer_1&quot;&gt;&lt;defs id=&quot;prefix__defs4&quot;&gt;&lt;style id=&quot;style2&quot;&gt;.prefix__cls-2{fill:#fff}&lt;/style&gt;&lt;/defs&gt;&lt;g transform=&quot;translate(-.527 .475)&quot; id=&quot;prefix__g863&quot;&gt;&lt;path class=&quot;prefix__cls-2&quot; d=&quot;M13.63 17.48c-.37 0-.45-.06-.54-.15a.46.46 0 00-.37-.19.67.67 0 00-.41.16.68.68 0 01-.59.15c-1.48-.18-3.36-3-3.36-5a2.89 2.89 0 011-2.44 3.28 3.28 0 012.81-.34l.55.15a.17.17 0 00.1 0c1.74-.38 3.08-.25 3.89.38a2.68 2.68 0 01.92 2.24c0 2-2 4.88-4 5m.64-10.73a2.74 2.74 0 012.54.32c-.14.33-.36.63-1.33 1a6.28 6.28 0 01-1.89.41h-.49a1.93 1.93 0 011.17-1.79M18 12.44a3 3 0 00-1-2.54 4.82 4.82 0 00-4-.51 3.87 3.87 0 00.05-.45l.53-.07a6.61 6.61 0 002-.44c1.24-.5 1.42-.93 1.6-1.35a.17.17 0 000-.2 3 3 0 00-3.07-.48 2.13 2.13 0 00-1.21 1.22 4.17 4.17 0 00-.51-1.07.22.22 0 00-.28 0 .18.18 0 000 .27 3.64 3.64 0 01.57 2.61l-.37-.1a3.65 3.65 0 00-3.15.41A3.25 3.25 0 008 12.44c0 2 1.91 5.17 3.7 5.39a1 1 0 00.87-.22c.09-.06.13-.09.18-.09.05 0 0 0 .08.06a.81.81 0 00.7.29h.16c2.21-.18 4.37-3.25 4.37-5.42&quot; id=&quot;prefix__path12&quot; fill=&quot;#fff&quot;/&gt;&lt;path class=&quot;prefix__cls-2&quot; d=&quot;M15.85 15.03a5 5 0 01-1.17 1.21.19.19 0 000 .27.21.21 0 00.16.08.28.28 0 00.12 0 5.4 5.4 0 001.26-1.3.18.18 0 00-.05-.27.19.19 0 00-.27.05&quot; id=&quot;prefix__path14&quot; fill=&quot;#fff&quot;/&gt;&lt;path class=&quot;prefix__cls-2&quot; d=&quot;M9 12.25a.2.2 0 00-.19.19 3.53 3.53 0 00.07.7.19.19 0 00.19.15.2.2 0 00.16-.26 2.68 2.68 0 01-.07-.62.2.2 0 00-.2-.19&quot; id=&quot;prefix__path16&quot; fill=&quot;#fff&quot;/&gt;&lt;path class=&quot;prefix__cls-2&quot; d=&quot;M11 9.9a2 2 0 00-2.14 1.7.21.21 0 00.14.23.2.2 0 00.2-.15 1.59 1.59 0 011.8-1.39.2.2 0 100-.39&quot; id=&quot;prefix__path18&quot; fill=&quot;#fff&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;\" alt=\"apple\">\r\n```","state":"open","updated_at":"2022-09-09T02:29:52Z","created_at":"2020-01-22T11:16:37Z","creator_user_login":"dxlbnl"}
{"number":4296,"title":"add slots option to component constructor options object","body":"rebased https://github.com/sveltejs/svelte/pull/2684\r\n\r\nfixes #2588","state":"open","updated_at":"2023-07-11T21:36:30Z","created_at":"2020-01-21T14:06:53Z","creator_user_login":"tanhauhau"}
{"number":4270,"title":"Example contribution:  Dice","body":"I created an example which shows \"composition\" of multiple components as well as integration of audio and animation.\r\n\r\n\r\nhttps://svelte.dev/repl/d8022543eb704f2492026e013f49712b?version=3.17.1","state":"open","updated_at":"2021-06-28T10:55:13Z","created_at":"2020-01-16T00:51:32Z","creator_user_login":"rlaferla"}
{"number":4265,"title":"Reactivity update twice when bind array or object on a component.","body":"**Describe the bug**\r\nI'm trying to use double bind to retrieve values from a component. \r\nBind simple value like integer, float, string works just fine. When the value inside of the component changes, a parent gets reactivity update from component only once. \r\nBut if I want to bind an array or object, I got two updates from values changes inside of the component. \r\n\r\n**Logs**\r\nNA\r\n\r\n**To Reproduce**\r\nREPL:\r\nhttps://svelte.dev/repl/b0204a06a3f24ede8850017c8b20b998?version=3.17.1\r\n1. Press Test1 button\r\n2. updateCount1 should increase +1 but increases +2 \r\n3. Press Test2 button\r\n4. updateCount1 should increase +1 and it increases +1 \r\n\r\n**Expected behavior**\r\nDouble bind should cause reactivity update only once.\r\n\r\n**Stacktraces**\r\nNA\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome Version 79.0.3945.117 (Official Build) (64-bit)\r\n\r\n- Your operating system: OS X 10.14.6\r\n\r\n- Svelte version 3.17.1\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nThis could potentially cause problems for users who want to track more complex objects from their components.\r\n\r\n**Additional context**\r\nI'm trying to build a multi-value-selectable select component. \r\nhttps://svelte.dev/repl/4ddae394dcf841a687c76f6a9e702c8e?version=3.17.1\r\nBut I get reactivity update twice, and this can cause additional network usage if I want to hook value change(In this cause list of selected values) with an API\r\n","state":"open","updated_at":"2023-07-15T11:52:02Z","created_at":"2020-01-15T08:08:20Z","creator_user_login":"RyanK1m"}
{"number":4251,"title":"chore: save compiled output for test suites","body":"Unifying the test helper to save the compiled output for:\r\n- ssr\r\n- runtime\r\n- hydration\r\n\r\nuse the `register.extension` to also save the compiled output to filesystem.\r\n\r\n-----\r\n\r\nUpdated 2022-10-14\r\n\r\n- the output will only be saved when the test fails.\r\n  - when compiling with `register.extension` in the test, we will record the compiled output in a cache\r\n  - only write cache into the file when the test fails\r\n  - will clear the cache for each test\r\n","state":"open","updated_at":"2023-07-11T21:36:28Z","created_at":"2020-01-11T11:47:45Z","creator_user_login":"tanhauhau"}
{"number":4239,"title":"Checkbox group value is removed if it's not present in available options (pagination/infinite scroll for example)","body":"**Describe the bug**\r\nScenario: I have a checkbox list that is lazily loaded as user scrolls. So when editing, some selected values may not be in the initial list of options in the checkbox group. When I select an option, my other values (from not-loaded pages of results) get removed from the selected value of the checkbox group.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/bae11298adea464cb73e255ead0104b0?version=3.16.7\r\n\r\n**Expected behavior**\r\nConcat/push to the `value` rather than get rid of options that aren't in the list currently.\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Chrome Version 79.0.3945.88 (Official Build) (64-bit)\r\n- Operating system: Windows 10\r\n- Svelte version: 3.16.7\r\n- bundler: Webpack\r\n\r\n**Severity**\r\nI can workaround by handling on:click of the checkbox","state":"open","updated_at":"2021-06-28T10:55:35Z","created_at":"2020-01-09T23:40:36Z","creator_user_login":"JohnnyFun"}
{"number":4237,"title":"Portal in examples section","body":"Can we add this Portal repl in the examples section?\r\n\r\nhttps://github.com/sveltejs/svelte/issues/3088#issuecomment-505785516\r\n\r\n```svelte\r\n<script>\r\n// src/components/Portal.svelte\r\nimport { onMount, onDestroy } from 'svelte'\r\nlet ref\r\nlet portal\r\n\r\nonMount(() => {\r\n  portal = document.createElement('div')\r\n  portal.className = 'portal'\r\n  document.body.appendChild(portal)\r\n  portal.appendChild(ref)\r\n})\r\n\r\nonDestroy(() => {\r\n  document.body.removeChild(portal)\r\n})\r\n\r\n</script>\r\n\r\n<div class=\"portal-clone\">\r\n  <div bind:this={ref}>\r\n    <slot></slot>\r\n  </div>\r\n</div>\r\n<style>\r\n  .portal-clone { display: none; }\r\n</style>\r\n```\r\n\r\nCopyright @ThomasJuster.","state":"open","updated_at":"2023-02-26T06:02:33Z","created_at":"2020-01-09T18:20:57Z","creator_user_login":"frederikhors"}
{"number":4225,"title":"<input> elements in an {#if} that depends on the input value do not fire on:input before they disappear","body":"**Describe the bug**\r\nWhen you create an input that can be removed because of an if clause around it that depends on the input value, the last `on:input` event of the <input> is not fired because it seems to disappear too quickly.\r\n\r\n**Logs**\r\n![Console log showing only three outputs](https://user-images.githubusercontent.com/9006596/71914186-609e1c80-3179-11ea-9312-9a904c5814c1.png)\r\n\r\n\r\n**To Reproduce**\r\nMinimal example: Remove the text in the input field character by character. For the last input event (the last BackSpace keystroke), no event is fired and `onInput` is not called.\r\n\r\nhttps://svelte.dev/repl/8d8bde660dea46f6b5443fe701cabd2b?version=3.16.7\r\n\r\n**Expected behavior**\r\nBefore the input field disappears, one last input event is fired and `value: ` is output into the console.\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Google Chrome version 79.0.3945.88\r\n\r\n- Operating System: Windows 10\r\n\r\n- Svelte version: 3.16.7 (newest release)\r\n\r\n- Webpack or Rollup: not needed to reproduce the bug (REPL pad)\r\n\r\n**Severity**\r\nNot so high: It's just a bit confusing, as I would expect the last input event to fire. This can easily be fixed manually by using `display: none` CSS instead of a Svelte `{#if}` clause.\r\n\r\nManual fix with `display: none` demo (also demonstrating the expected behavior): https://svelte.dev/repl/78fd0c98c9cf4f3fab2c7e6f43cf7fe3?version=3.16.7\r\n","state":"open","updated_at":"2021-06-28T10:56:15Z","created_at":"2020-01-07T17:18:03Z","creator_user_login":"pal03377"}
{"number":4219,"title":"Unified create/claim component construction","body":"Currently compiling a component emits a lot of boring DOM mutation logic. For example, even the simple svelte.dev/repl hello world example (when hydration is enabled) emits:\r\n\r\n```\r\n\t\tc() {\r\n\t\t\th1 = element(\"h1\");\r\n\t\t\tt0 = text(\"Hello \");\r\n\t\t\tt1 = text(name);\r\n\t\t\tt2 = text(\"!\");\r\n\t\t},\r\n\t\tl(nodes) {\r\n\t\t\th1 = claim_element(nodes, \"H1\", {});\r\n\t\t\tvar h1_nodes = children(h1);\r\n\t\t\tt0 = claim_text(h1_nodes, \"Hello \");\r\n\t\t\tt1 = claim_text(h1_nodes, name);\r\n\t\t\tt2 = claim_text(h1_nodes, \"!\");\r\n\t\t\th1_nodes.forEach(detach);\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, h1, anchor);\r\n\t\t\tappend(h1, t0);\r\n\t\t\tappend(h1, t1);\r\n\t\t\tappend(h1, t2);\r\n\t\t},\r\n```\r\n\r\nI think this could instead be compiled as something like:\r\n\r\n```\r\n\tc(ctx) {\r\n\t\th1 = element(ctx, \"h1\", {}, (h1_ctx) => {\r\n\t\t\ttext(h1_ctx, \"Hello \");\r\n\t\t\ttext(h1_ctx, name);\r\n\t\t\ttext(h1_ctx, \"!\");\r\n\t\t});\r\n\t},\r\n```\r\n\r\nThe context variable `ctx` would allow abstracting away the normal create/mount mode (i.e., appending to `target` before `anchor`) or in rehydrate's claim/mount mode (i.e., appending to `target`, but trying to reuse its existing children).\r\n\r\nThe convention would be nodes would be immediately inserted into the DOM in the order they're constructed, so there's no separate `append` calls necessary. Also, in rehydrate mode, it would prefer claiming existing nodes if possible and any leftover unclaimed nodes would be automatically detached, so there's no need for the `h1_nodes.forEach(detach);` call. Finally, because the text nodes are automatically appended to the DOM, there's no need to save them as t0/t1/t2 anymore. (h1 still needs to be saved to implement `detach`.)\r\n\r\nFor example, when compiling without rehydration support, `element` and `text` might be implemented something like:\r\n\r\n    function construct(fn, target, anchor) {\r\n        const ctx = [target, archor];\r\n        fn(ctx);\r\n    }\r\n    function emit(ctx, node) {\r\n        const [target, anchor] = ctx;\r\n        target.appendChild(node, anchor);\r\n    }\r\n\r\n    function element(ctx, name, attributes, children) {\r\n        const node = document.createElement(name);\r\n        set_attributes(node, attributes);\r\n        construct(children, node);  // Recursively construct children with new context\r\n        emit(ctx, node);\r\n    }\r\n    function text(ctx, data) {\r\n        emit(ctx, document.createTextNode(data));\r\n    }\r\n\r\nAlternatively, by simply tweaking `construct` and `emit`, we could defer DOM operations until all of a node's children have been constructed (i.e., more like the current separation of create/mount):\r\n\r\n    function construct(fn, target, anchor) {\r\n        const ctx = [];\r\n        fn(ctx);\r\n        for (let child of ctx) {\r\n            target.appendChild(child, anchor);\r\n        }\r\n    }\r\n    function emit(ctx, node) {\r\n        ctx.push(node);\r\n    }\r\n\r\n**Edit:** Or using document fragments:\r\n\r\n    function construct(fn, target, archor) {\r\n        const ctx = document.createDocumentFragment();\r\n        fn(ctx);\r\n        target.appendChild(ctx, anchor);\r\n    }\r\n    function emit(ctx, node) {\r\n        ctx.appendChild(node);\r\n    }\r\n\r\nI plan on experimenting with the feasibility of this approach and its impact on JS bundle size.\r\n\r\nMy main question is whether there's a need for the current separation between node construction and mounting. E.g., is it needed for animation or something? As far as I can tell, it doesn't seem needed.\r\n\r\nFiling an issue to describe the idea in case anyone has feedback on it (e.g., further room for improvement, or issues I'm overlooking that might prevent this approach from working at all).","state":"open","updated_at":"2021-12-24T02:48:19Z","created_at":"2020-01-06T22:15:53Z","creator_user_login":"mdempsky"}
{"number":4207,"title":"Radio button group only renders correctly when using keyed #each","body":"**Describe the bug**\r\nIf a radio input group is setup with a filter, the radio button doesn't show as selected upon filtering, unless a keyed `{#each}` is used. See REPL for example: https://svelte.dev/repl/f40fe70abc134108bfe125fa111254ea?version=3.16.7\r\n\r\n![image](https://user-images.githubusercontent.com/8106379/71760017-23354880-2e74-11ea-9468-9019fb81f49b.png)\r\n\r\n**Expected behavior**\r\nUpon filtering \"bob\", \"bobby\" should be selected. \r\n\r\nOr svelte could warn about these scenarios, if possible, and instruct to use a keyed each. And svelte could fallback to re-rendering entire each block or something so that it at least gets rendered correctly. But not sure on internals...so.\r\n\r\n**Information about your Svelte project:**\r\n- Chrome Version 79.0.3945.88 (Official Build) (64-bit)\r\n\r\n- Your operating system: Win10\r\n\r\n- Svelte version: 3.16.7","state":"open","updated_at":"2021-07-12T08:08:15Z","created_at":"2020-01-04T04:56:31Z","creator_user_login":"JohnnyFun"}
{"number":4168,"title":"Allow to specify custom base class for Svelte Components","body":"Could we have an option to specify a custom base class for Svelte components?\r\n\r\n```html\r\n<script>\r\nimport {BaseSvelteComponent} from './base';\r\n</script>\r\n\r\n<svelte:options base=\"BaseSvelteComponent\"/>\r\n```\r\n\r\nbase.js:\r\n```\r\nimport {SvelteComponent} from 'svelte';\r\n\r\nexport class BaseSvelteComponent extends SvelteComponent {\r\n /* or could be completly own custom impl */\r\n}\r\n```\r\n\r\nIt would step to make Svelte a more generic compiler and could move many conflict decisions out of the scope of Svelte project.\r\n\r\nIt allows end-users of the compiler to make own decision. I think it could resolve things like [Component inheritance](https://github.com/sveltejs/svelte/issues/192), move towards a solution for [Custom element without shadow DOM](https://github.com/sveltejs/svelte/issues/1748) and  [Support attachShadow({mode: 'closed'})](https://github.com/sveltejs/svelte/issues/2972), handle [Native HTML elements](https://github.com/sveltejs/svelte/issues/1869) and \r\n[Form-associated custom elements](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-face-example) and minor things like [Define some attributes on Custom Elements ](https://github.com/sveltejs/svelte/issues/3919)\r\n\r\nAnd it seems pretty easy to implement - https://github.com/kmmbvnr/svelte/commit/4a7f3171050dea3d676bf928bbfb6644d09e0359\r\n\r\n","state":"open","updated_at":"2023-07-30T20:08:13Z","created_at":"2019-12-26T06:52:36Z","creator_user_login":"kmmbvnr"}
{"number":4165,"title":"Slot is not updated properly","body":"**Describe the bug**\r\n`create_default_slot` is generated with newer assigned `current` variable.\r\n\r\n**To Reproduce**\r\nREPL:\r\nhttps://svelte.dev/repl/c64a0a69c59544bda4a8a6dba3d0d13f?version=3.16.6\r\n\r\nSelect at least 2 times, `span` updates, `img` not.\r\n```js\r\n\t\t<span>img id:{ item.id }</span>\r\n\t\t<img src={ item.url } alt={ item.id }>\r\n```\r\n\r\n**Investigation**\r\n\r\n<details>\r\n  <summary>Investigation</summary>\r\n\r\nIf `current` is `undefined`, `img_src_value =` and `img_alt_value =` are not assigned\r\n\r\n```js\r\n// (2:0) <Nested items={ items.filter(item => item.author === value) } let:item>\r\nfunction create_default_slot(ctx) {\r\n...\r\n\tlet current;\r\n\r\n...\r\n\t\tp(ctx, dirty) {\r\n\t\t\tif ((!current || dirty & /*item*/ 128) && t2_value !== (t2_value = /*item*/ ctx[7].id + \"\")) set_data(t2, t2_value);\r\n\r\n\t\t\tif (!current || dirty & /*item*/ 128 && img.src !== (img_src_value = /*item*/ ctx[7].url)) {\r\n\t\t\t\tattr(img, \"src\", img_src_value);\r\n\t\t\t}\r\n\r\n\t\t\tif (!current || dirty & /*item*/ 128 && img_alt_value !== (img_alt_value = /*item*/ ctx[7].id)) {\r\n\t\t\t\tattr(img, \"alt\", img_alt_value);\r\n\t\t\t}\r\n...\r\n}\r\n```\r\n\r\n`current` condition generated in `AttributeWrapper` depends on `block.has_outros`\r\nhttps://github.com/sveltejs/svelte/blob/cd21acfb3cae574b81f2f417331993374222a9de/src/compiler/compile/render_dom/wrappers/Element/Attribute.ts#L150\r\n\r\n`current` assignment depends on `intro.length` and `outro.length`\r\nhttps://github.com/sveltejs/svelte/blob/a8b306f0a18775b31b57333d938090eb3934eb29/src/compiler/compile/render_dom/Block.ts#L236\r\n\r\nHere `block.has_outros` is true, but `intro.length` and `outro.length` is zero.\r\n\r\n***\r\n\r\n `<Title>` is crucial, it creates an instance of `InlineComponentWrapper` that calls  `block.add_outro()`\r\nhttps://github.com/sveltejs/svelte/blob/2cd5c2934b03c9ac3e5e984b3f1ccd3ffd657ef9/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L106\r\nwhere  `has_outros` became `true`  for **parent** node, this `has_outros` generate `current` condition and varibale but not assignment\r\nhttps://github.com/sveltejs/svelte/blob/a8b306f0a18775b31b57333d938090eb3934eb29/src/compiler/compile/render_dom/Block.ts#L196\r\n</details>\r\n\r\nThanks!","state":"open","updated_at":"2021-07-11T09:38:31Z","created_at":"2019-12-25T13:41:58Z","creator_user_login":"cvlab"}
{"number":4139,"title":"Flip animations skipped in Firefox and Chrome, but not in Safari","body":"**Describe the bug**\r\nIn rare instances, flip animations are skipped (in browsers other than Safari).\r\n\r\nI'm making a sliding puzzle. I have a fixed start position. As shown in the attached GIF, when I click 2 followed by 3, the sliding animation is skipped for the second click (i.e. the 3-piece teleports to its end position). If I slide the pieces back (by clicking 3 and then 2) and repeat the process, everything works.\r\n\r\n![Dec-21-2019 11-48-31](https://user-images.githubusercontent.com/3520744/71306959-8092b980-23df-11ea-9a39-dc9e84337ac8.gif)\r\n\r\nThe bug appears with some opening sequences, but not others. E.g.: If you click 4 and then 1, the bug appears, but not 5 and then 3. \r\n\r\nThe bug appears in Firefox and Chrome, but not Safari.\r\n\r\n**Logs**\r\n*Not included*\r\n\r\n**To Reproduce**\r\nSee this REPL; reload the page between each test: https://svelte.dev/repl/c0fdc09f46784474be2bcca4d56bd1ce?version=3.16.5\r\n\r\nI have tested all possible opening sequences, and the bug appears in the following:\r\n\r\n- 2-3\r\n- 2-1\r\n- 4-1\r\n- 4-7\r\n\r\n... but not in the following:\r\n- 8-7\r\n- 8-6\r\n- 5-6\r\n- 5-3\r\n\r\nMy suspicion is that the first tile is the deciding factor, because the bug appears when clicking 2 or 4 first, but not 8 or 5.\r\n\r\nIf you click the second piece before the first piece's slide animation has finished, the bug disappears. (This is easier to reproduce if you increase the animation duration.)\r\n\r\n**Expected behavior**\r\nI expect the animation to work in all cases (in all browsers).\r\n\r\n**Stacktraces**\r\n*Not included*\r\n\r\n**Information about your Svelte project:**\r\n- Firefox 71.0, Chrome 77.0.3865.90 and Safari 13.0.4 (15608.4.9.1.3)\r\n- MacOS 10.15.2 (19C57)\r\n- Svelte version 3.16.5\r\n\r\n**Severity**\r\nThis is just annoying and mysterious. In other words, not very severe.\r\n\r\n**Additional context**\r\nNo other context\r\n","state":"open","updated_at":"2021-06-28T10:57:26Z","created_at":"2019-12-21T10:54:46Z","creator_user_login":"Vages"}
{"number":4117,"title":"Implementing a build system for framework-agnostic UI components","body":"I have logged this in https://github.com/valueflows/vf-ui/issues/5 but am reaching out here to see if this is being attempted by anyone else. I'm unsatisfied with the provided options that increase complexity for developers integrating components into their own projects- [this thread](https://github.com/sveltejs/svelte/issues/3638) provides all necessary evidence to suggest that there is a barrier to entry present.\r\n\r\nThe user story is **\"As a developer, I can bring vf-ui components into my project of choice, without having to reconfigure my build system or bundler or [eject from CRNA](https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md)\"**. So that means I want:\r\n\r\n- separate NPM packages for the same component in runtime-dependant flavours (`mycomponentlib`, `mycomponentlib-react`, `mycomponentlib-angular` etc)\r\n- zero-config components written in the native component format of the framework (eg. `ReactComponent`) without runtime dependencies\r\n    - probably adapted via small adapter modules eg. [webcomponents-in-react](https://www.npmjs.com/package/webcomponents-in-react)\r\n- pluggable styles that work \"natively\" (at the framework's module resolution layer)\r\n- file separation between component DOM logic and styles, to promote re-styling\r\n- a default export of the component which mixes in a theme that is loaded from another file on top of the \"unstyled\" component; yielding the option to inject a custom theme if desired\r\n\r\nI've [already started working on this](https://github.com/valueflows/vf-ui/blob/3158ed4/scripts/build.js), but before I go too much further I want to see what other options I have. FWIW my next steps will be dealing with the *output* code that Svelte generates, which I don't see an API for... so expect I am going to have to do some brittle regexing to remove the CSS injection in order that the end-developer's bundler can manage it.\r\n\r\nWhile I'm here I suppose it's worth asking my related pending questions in case I need to go ahead with this:\r\n\r\n- Is there a way to make Webpack generate sane bundle sizes and clean output that is appropriate for drop-in use in a React or Angular project?\r\n- How heavy is the Svelte runtime, bytesize-wise? Would you advocate embedding `SvelteComponent` instances within React, Angular etc projects rather than `SvelteElement` ones?\r\n- What would be involved with doing this \"properly\"? It seems like a different template is used for generating the output when `customElement` is defined. Can I author my own compiler targets?\r\n","state":"open","updated_at":"2021-06-28T10:57:51Z","created_at":"2019-12-16T08:59:32Z","creator_user_login":"pospi"}
{"number":4079,"title":"Support for syntax for binding to arbitrary reactive store","body":"(Not sure if this is a feature request or a bug...)\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI've implemented a custom store that's essentially:\r\n\r\n```js\r\nfunction createMapStore(initial) {\r\n  const backingStore = writable(initial);\r\n  const { subscribe, update } = backingStore;\r\n  const set = (key, value) => update(m => Object.assign({}, m, {[key]: value}));\r\n  return {\r\n    subscribe,\r\n    set,\r\n    remove: (key) => set(key, undefined),\r\n    keys: derived(backingStore, bs => Object.keys(bs)),\r\n    values: derived(backingStore, bs => Object.values(bs)),\r\n    entries: derived(backingStore, bs => Object.entries(bs)),\r\n  }\r\n}\r\n```\r\n\r\nIn theory this would allow me to do things like\r\n\r\n```js\r\n{#each $store.values as value}\r\n```\r\n\r\nHowever, this doesn't appear to work.  I get the following error:\r\n```\r\nbundle.js:1505 Uncaught TypeError: Cannot read property 'length' of undefined\r\n    at create_fragment$4 (bundle.js:1505)\r\n    at init (bundle.js:390)\r\n    at new Home (bundle.js:1577)\r\n    at Array.create_default_slot_3 (bundle.js:2548)\r\n    at create_slot (bundle.js:48)\r\n    at create_if_block (bundle.js:1080)\r\n    at create_fragment$3 (bundle.js:1128)\r\n    at init (bundle.js:390)\r\n    at new TabPanel (bundle.js:1239)\r\n    at Array.create_default_slot$2 (bundle.js:2674)\r\n\r\nbundle.js:89 Uncaught (in promise) TypeError: Cannot read property 'removeAttribute' of undefined\r\n    at attr (bundle.js:89)\r\n    at attr_dev (bundle.js:455)\r\n    at update (bundle.js:856)\r\n    at updateProfile (<anonymous>:49:7)\r\n    at Object.block.p (<anonymous>:261:9)\r\n    at update (bundle.js:188)\r\n    at flush (bundle.js:162)\r\n```\r\n\r\nI can work around this by doing:\r\n\r\n```\r\n<script>\r\nimport { store } from './stores.js';\r\n$: values = store.values;\r\n</script>\r\n\r\n{#each $values as item}\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIdeally, I'd simply be able to do:\r\n\r\n```\r\n<script>\r\nimport { store } from './stores.js';\r\n</script>\r\n\r\n{#each store.values as item}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nSee the ```$: values = store.values;``` approach above.\r\n\r\n**How important is this feature to you?**\r\nIt's not super important, but so far Svelte has had excellent emphasis on ergonomics, so it's a bit of a shame that this doesn't work.","state":"open","updated_at":"2023-06-22T02:16:22Z","created_at":"2019-12-09T22:50:24Z","creator_user_login":"Quantumplation"}
{"number":4072,"title":"Class directive breaks with token \"/\" for TailwindCSS width classes","body":"**Describe the bug**\r\nWhen using specific classes like \"w-1/2\", which is standard tailwind class, the svelte compiler throws an error \"Expected >svelte(unexpected-token)\"\r\n\r\nI'm pretty sure it is because the compiler assumes token \">\" after the token in question \"/\".\r\n\r\n**To Reproduce**\r\nWrite any code with a class directive `class:sm:w-1/2={!contact}` in a Svelte+Tailwind project.\r\n\r\n**Expected behavior**\r\nCompiler should not assume that the closing \">\" token to succeed token \"/\" in a string after the class directive.\r\n","state":"open","updated_at":"2022-03-16T10:20:43Z","created_at":"2019-12-09T09:33:51Z","creator_user_login":"jerriclynsjohn"}
{"number":4064,"title":"Transition + slots + #if","body":"**Describe the bug**\r\nIf we update state while transition, #if statement inside transition element doesn't work with slots properly\r\n\r\n**To Reproduce**\r\n1. open [REPL example](https://svelte.dev/repl/cfdeb6bb3d034e2dbc110639b91d5ab8?version=3.15.0)\r\n2. Click once on TOGGLE button\r\n3. Slot elements inside element without transition works good. With transition - not\r\n4. `setTimeout` just emulates state change close to transition end.\r\n\r\n**Expected behavior**\r\nWith and without transition slots should work good","state":"open","updated_at":"2021-06-28T10:58:12Z","created_at":"2019-12-07T10:01:36Z","creator_user_login":"yazonnile"}
{"number":4056,"title":"$destroy don't play outro transition","body":"**Describe the bug**\r\nWhen call $destroy of a component instance, the dom node is removed imediatly without play outro transition.\r\n\r\n**Logs**\r\nnothing\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a9e6f228bf40490c843c639ef4288f38?version=3.16.0\r\n\r\n**Expected behavior**\r\nPlay outro transition before remove.\r\n","state":"open","updated_at":"2022-09-13T23:58:08Z","created_at":"2019-12-06T09:08:58Z","creator_user_login":"dishuostec"}
{"number":4039,"title":"Optionally embed styles in the DOM if the styles are in JS.","body":"**Is your feature request related to a problem? Please describe.**\r\nThere is no way to control where Svelte embeds styles in JS that are not exported using the `css: true` compile option. Styles are currently embedded in the `head` tag, though it may not always be desirable. For example, if my Svelte component is used in a custom-element with a shadow dom, styles in the head are not applied due to encapsulation.\r\n\r\nSecondly, if my element is rendered in an environment without a `head` tag, Svelte throws an error. For example, the Chrome PDF viewer is an embedded page that doesn't have a head tag. It's frustrating when embedding Svelte components in the PDF viewer through Chrome extensions. If I expect such environments, I should be able to choose where the styles go.\r\n\r\n**Describe the solution you'd like**\r\nThe best solution I could come up with was using an option\r\n```html\r\n<svelte:option css={true} />\r\n```\r\nThen when rendered will add the styles inline next to my component instead of the `head`:\r\n```html\r\n<foregn-custom-element>\r\n<div class=\"my-component svelte-123\">my div</div>\r\n<style>\r\n     div.svelte-123 {\r\n          color: red;\r\n     }\r\n</style>\r\n</foreign-custom-element>\r\n```\r\n\r\n**Describe alternative solutions you've tried**\r\nThe alternative is to render all the nested components into custom elements to force Svelte into rendering the styles in-line. This is cumbersome especially when supporting both regular components and custom elements since svelte does not handle nested components for me as described in #3520.\r\nSo I'd need to create multiple versions of the same component if deeply nested.\r\n```html\r\n//my element version 1\r\n<Parent>\r\n    ...\r\n    <Grandchild><slot/></Grandchild>\r\n    ....\r\n</Parent>\r\n\r\n// my element version 2\r\n<my-parent>\r\n    ....\r\n        <my-grandchild><slot/></my-grandchild>\r\n    ....\r\n</my-parent>\r\n```","state":"open","updated_at":"2021-12-26T16:00:04Z","created_at":"2019-12-02T15:49:06Z","creator_user_login":"milkbump"}
{"number":4036,"title":"Wrapping element breaks \"portals\"","body":"**Describe the bug**\r\nWrapping a \"[portal](https://github.com/sveltejs/svelte/issues/3088)\" component in a div breaks the app, making the portal and it's contents permanent citizens of the DOM.\r\n\r\nThis also leads to duplicated content on each cycle of tries to show/hide the portal.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/7da6fc9ebae64ff6b2011417f37588cb?version=3.16.0\r\n\r\nRemove the wrapping (commented in code) div to fix the demo.\r\n\r\n**Expected behavior**\r\nWhen I click \"Teleport\" the second time, I'd expect the content inside Portal to be removed from DOM.\r\n\r\n**Severity**\r\n💯 -  a simple `{#if}` in template doesn't do what it's expected to.\r\n\r\n**Additional context**\r\nPortals are undocumented and left to be solved in user-land, but the code in my REPL has been suggested as the way to handle this scenario since Svelte V2.\r\n\r\nAlso, adding the `onDestroy` hook to the Portal component like suggested in #1849 ...\r\n\r\n```\r\nonDestroy(() => {\r\n  document.body.removeChild(portalEl);\r\n});\r\n```\r\n\r\n...seems to \"fix\" the issue. However, **if** there is no wrapping `div` around the `Portal`, the element and it's children get removed from the DOM by Svelte without the need for a `onDestroy` hook to do it manually.\r\n\r\n**Additional suggestions**\r\n\r\nAs this is a somewhat common thing in a modern web app, it might be valuable to\r\n\r\na. figure out the proper way to handle a Portal scenario\r\nb. document it\r\nc. make a test for it","state":"open","updated_at":"2021-06-28T10:58:58Z","created_at":"2019-12-02T08:23:27Z","creator_user_login":"arggh"}
{"number":4030,"title":"Site examples: wrap text nodes instead of elements","body":"**Is your feature request related to a problem? Please describe.**\r\nThe examples aren't showing the advantage of Svelte in that it can update text nodes, it doesn't have to replace whole elements:\r\n> Svelte writes code that surgically updates the DOM\r\n\r\n**Describe the solution you'd like**\r\n```diff\r\ndiff --git a/site/content/examples/03-logic/00-if-blocks/App.svelte b/site/content/examples/03-logic/00-if-blocks/App.svelte\r\nindex 01b8867ad..16c0e2124 100644\r\n--- a/site/content/examples/03-logic/00-if-blocks/App.svelte\r\n+++ b/site/content/examples/03-logic/00-if-blocks/App.svelte\r\n@@ -6,14 +6,7 @@\r\n \t}\r\n </script>\r\n \r\n-{#if user.loggedIn}\r\n-\t<button on:click={toggle}>\r\n-\t\tLog out\r\n-\t</button>\r\n-{/if}\r\n-\r\n-{#if !user.loggedIn}\r\n-\t<button on:click={toggle}>\r\n-\t\tLog in\r\n-\t</button>\r\n-{/if}\r\n+<button on:click={toggle}>\r\n+\t{#if user.loggedIn}Log out{/if}\r\n+\t{#if !user.loggedIn}Log in{/if}\r\n+</button>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nI understand that the existing example (and related tutorials) are extremely clear because the if block is at the root column of indentation, and I think that should absolutely be kept. Maybe a separate example/tutorial would be good to explain this advantage?\r\n\r\nAlso, is this actually quicker? I'm making an assumption that replacing an element is slower than changing the content of a text node, but I might be way off. Perhaps browsers have greatly optimised the former but not the latter? Perhaps there are unpleasant side-effects of the latter?\r\n\r\n**How important is this feature to you?**\r\nWhat really impressed me about Svelte was the REPL in the examples and tutorials, how it shows the compiled JS output, and how it was a simple step for me to find functions like `set_data()` in the source and see that they are literally replacing the content of text nodes. The browser dev tools also shows what's being replaced in the DOM, and I love that the tagline is true: it really is surgically updating the DOM!\r\n\r\nSo I think it's important to advertise that feature more clearly to those who wouldn't go looking at how Svelte changes the DOM.\r\n\r\n**Additional context**\r\nI was going to submit a pull-request but then realised there are lots of examples of this, so that would be a big diff to make that may not be wanted =D\r\n","state":"open","updated_at":"2021-12-29T16:20:11Z","created_at":"2019-12-01T12:44:20Z","creator_user_login":"henrahmagix"}
{"number":4017,"title":"Instrumented `$foo= bar;` doesn't need to update `$foo` variable","body":"`$foo = bar;` currently results in `set_store_value(foo, $foo = bar);`, but this `$foo = ` is unnecessary, as `set_store_value` will result in the relevant subscription being synchronously called anyway. The `$foo = ` in the compiled code is even a bit misleading in cases (such as tweened and spring stores) where calling `.set()` on the store doesn't actually immediately update it to that value.","state":"open","updated_at":"2021-06-28T10:59:13Z","created_at":"2019-11-29T23:31:28Z","creator_user_login":"Conduitry"}
{"number":4006,"title":"Stateless lightweight components","body":"**I want svelte to handle simple stateless components better**\r\n\r\nI've always run into situations where I have lots of simple dumb components that don't have states but the compiler ends up generating a full blown svelte components instead of a simple JS function (a pure function somewhat similar to React's function component) that emits HTML string.\r\n\r\nIn other words, why can't the svelte compiler generate code for simple stateless components in SSR fashion for the front-end?\r\n\r\n**Current work-around**\r\n\r\n- Create and export a function from a Javascript module; the function emits a string with HTML code inside\r\n\r\n```\r\nexport function MyStatelessComponent(arg1, arg2) {\r\n    return `<div>Some HTML string from ${arg1}</div>`\r\n}\r\n```\r\n\r\n- Import the function from the module to consume it: \r\n\r\n```\r\nimport {MyStatelessComponent} from \"MyStatelessComponent.js\"\r\n```\r\n- All consumers of that component with call `{@html MyStatelessComponent(arg1, arg2)}`\r\n\r\n**The solution I would like**\r\n\r\nAn ideal implementation would be for svelte compiler to identify stateless components and emit an efficient code like the one above.\r\n\r\n- Create the stateless component just any other ordinary svelte component\r\n\r\n```\r\n<script>\r\n    export let arg1;\r\n    export let arg2;\r\n</script>\r\n\r\n<div>\r\n    Some HTML string from {arg1}\r\n</div>\r\n```\r\n\r\n- Consume the component as a typical svelte component\r\n\r\n```\r\nimport MyStatelessComponent from \"MyStatelessComponent.svelte\"\r\n...\r\n<MyStatelessComponent arg1={...} arg2={...} />\r\n```\r\n\r\n- Since the component is stateless, I would expect the compiler to generate a simple `{@html MyStatelessComponent(arg1, arg2)}` type of code\r\n\r\n**How important is this feature to you?**\r\n\r\nCouple of important points:\r\n\r\n- Since the project we are working on requires smaller bundle sizes, it would be great if we get svelte to compile our stateless components to simple functions\r\n- We have lots of lots of such components and converting them to a simple JS module by hand is tedious\r\n- In the current work around (using JS modules) writing the HTML using template strings gives us all sorts of problems including making tooling numb\r\n- Mixing `.svelte` file components with `.js` file components is giving us trouble when bundling (specially css purging). It would have been a lot easier if all of our components are ordinary `.svelte` components.\r\n- Svelte has always been about smaller bundle sizes and performance; why not have this extra optimization?\r\n\r\n**Additional context**\r\n\r\nDemo for the above component in REPL: https://svelte.dev/repl/eb9e018b42574c43b788af809e3e8582?version=3.15.0\r\n\r\nLook at the unnecessary JS output of the compiler in the above REPL code\r\n","state":"open","updated_at":"2021-11-12T09:32:30Z","created_at":"2019-11-27T05:19:07Z","creator_user_login":"lgirma"}
{"number":3973,"title":"Keyed each does not preserve element (re-create) when reordered","body":"**Describe the bug**\r\n\r\nI try to render a list of input element using keyed each block so that when enter key is pressed when an input is focused it will be swapped with the next input element. Likewise when shift+enter is pressed it will be swapped with the previous input element. Forward swapping works as expected and input keeps the focus. But backwards swap (shift+enter) causes the previous input to be re-created and the focus is lost.\r\n\r\nI share a sample app written with both Svelte and React. React version work as expected.\r\n\r\n**Codesandbox Repo**\r\n[svelte demo](https://codesandbox.io/s/svelte-move-focus-i49mm)\r\n[react demo](https://codesandbox.io/s/react-move-focus-piqis)\r\n\r\n**Expected behavior**\r\nKeyed list should respect the keys and matching elements should be reordered by getting detached and attached to preserve element instance.\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3\r\n\r\n","state":"open","updated_at":"2021-12-29T13:58:19Z","created_at":"2019-11-21T21:24:44Z","creator_user_login":"kutlugsahin"}
{"number":3965,"title":"Reorderable List example","body":"I'd like to contribute this example.  It does not work on mobile which would require DOM Touch support but I think it's still very useful.\r\n\r\nhttps://svelte.dev/repl/e5d53d675f444311a908121494f51aa6?version=3.15.0","state":"open","updated_at":"2021-12-29T10:51:09Z","created_at":"2019-11-20T20:45:10Z","creator_user_login":"rlaferla"}
{"number":3964,"title":"Svelte component bundled with outros throws at runtime","body":"**Describe the bug**\r\nWhen bundling a Svelte component into a module, then loading it dynamically, the `outros` function is missing and this causes a runtime error when the component is scheduled to unload.\r\n\r\n**To Reproduce**\r\nI created a live demo here:\r\nhttps://practical-bartik-9883e1.netlify.com\r\n\r\nThe source is here:\r\nhttps://github.com/caqu/import-svelte/tree/master/src\r\nhttps://github.com/caqu/import-svelte/blob/master/rollup.config.js\r\n\r\nThe issue I see is rooted here on the generated code:\r\nhttps://practical-bartik-9883e1.netlify.com/build/child_with_fade.js\r\n```\r\n...\r\nlet outros;\r\nfunction transition_in(block, local) {\r\n    if (block && block.i) {\r\n        outroing.delete(block);\r\n        block.i(local);\r\n    }\r\n}\r\nconst null_transition = { duration: 0 };\r\nfunction create_out_transition(node, fn, params) {\r\n    let config = fn(node, params);\r\n    let running = true;\r\n    let animation_name;\r\n    const group = outros;                       // <------ Outros is undefined\r\n    group.r += 1;\r\n```\r\n\r\n**Logs**\r\n```\r\nindex.mjs:762 Uncaught (in promise) TypeError: Cannot read property 'r' of undefined\r\n    at create_out_transition (index.mjs:762)\r\n    at Object.o (index.mjs:51)\r\n    at G (index.mjs:691)\r\n    at Object.p (App.svelte:47)\r\n    at q (index.mjs:638)\r\n    at P (index.mjs:612)\r\ncreate_out_transition @ index.mjs:762\r\no @ index.mjs:51\r\nG @ index.mjs:691\r\np @ App.svelte:47\r\nq @ index.mjs:638\r\nP @ index.mjs:612\r\nPromise.then (async)\r\nV @ index.mjs:591\r\n(anonymous) @ index.mjs:1337\r\nremove_child_with_fade @ App.svelte:18\r\n```\r\n**Expected behavior**\r\nI'm relatively new to Svelte and Rollup, so it's possible there's a config error in my Rollup file.\r\n\r\n**Severity**\r\nThis seems to be an issue that's impacting many developers using dynamic imports and routing. I believe it may also be the root cause of:\r\nhttps://github.com/sveltejs/svelte/issues/3448\r\nhttps://github.com/sveltejs/svelte/issues/3165\r\n\r\n**Additional Context**\r\nThe issue seems to appear when adding a `< slot / >` to the child component.\r\n","state":"open","updated_at":"2021-12-29T06:54:15Z","created_at":"2019-11-20T16:04:40Z","creator_user_login":"caqu"}
{"number":3957,"title":"Updating a keyed {#each} triggers lifecycles in reverse order","body":"**Describe the bug**\r\nUpdating a key list causes onDestroy/onMount lifecycles in reverse order\r\n\r\n**Logs**\r\n```\r\nmount {item: \"item 1\"}\r\nmount {item: \"item 2\"}\r\nmount {item: \"item 3\"}\r\nmount {item: \"item 4\"}\r\nmount {item: \"item 5\"}\r\nmount {item: \"item 1\"}\r\nmount {item: \"item 2\"}\r\nmount {item: \"item 3\"}\r\nmount {item: \"item 4\"}\r\nmount {item: \"item 5\"}\r\nswapping unkeyed list1\r\ndestroy {item: \"item 4\"}\r\ndestroy {item: \"item 5\"}\r\nswapping keyed list2\r\ndestroy {item: \"item 5\"}\r\ndestroy {item: \"item 4\"}\r\ndestroy {item: \"item 3\"}\r\ndestroy {item: \"item 2\"}\r\ndestroy {item: \"item 1\"}\r\nmount {item: \"item 8\"}\r\nmount {item: \"item 7\"}\r\nmount {item: \"item 6\"}\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/e8f06d587e3343ba8b4d1c61d94e380f?version=3.15.0\r\n\r\n**Expected Behavior**\r\nUpdating a keyed `{#each}` block calls lifecycles in natural DOM order\r\n\r\n**Additional context**\r\nI'm kind of relying on the initialization order to be \"correct\" because I have a set of components that (Parent/Child) and the child component registers itself with the parent. It would be nice if this registration happened in order so that I could use it for things like navigation, or other features.","state":"open","updated_at":"2021-12-29T05:54:14Z","created_at":"2019-11-20T02:47:40Z","creator_user_login":"farism"}
{"number":3938,"title":"Master-Detail example","body":"I'd like to contribute an example that displays a Svelte implementation of a Master->Detail pattern that also includes an example of delegation (child delegate messages parent with data).   My approach is a bit different than the CRUD example.\r\n\r\nMaster-Detail\r\nhttps://svelte.dev/repl/1fe5803ad7914054905f43910607eda1?version=3.14.1","state":"open","updated_at":"2021-12-29T03:03:51Z","created_at":"2019-11-16T19:47:01Z","creator_user_login":"rlaferla"}
{"number":3937,"title":"Input modifiers","body":"https://github.com/sveltejs/svelte/pull/3527#issuecomment-534531584\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nDate inputs have string bindings, which are rarely helpful.\r\n\r\n**Describe the solution you'd like**\r\nIt should be possible to specify the type of binding:\r\n\r\n```html\r\n<input type=\"date\" bind:value|date={date_as_date}>\r\n<input type=\"date\" bind:value|number={date_as_number}>\r\n<input type=\"date\" bind:value|string={date_as_string}>\r\n```\r\n\r\nIn v4, we can switch the default over to the `value|date` behaviour.\r\n\r\n**Describe alternatives you've considered**\r\nAdding `valueAsNumber` and `valueAsDate` bindings. There are a couple of reasons not to do this:\r\n\r\n* It would introduce an inconsistency with how `number` and `range` inputs are currently handled\r\n* Resolving that inconsistency would mean expecting people to type `valueAsNumber` instead of just `value`. It's unergonomic\r\n* Having multiple binding options makes it easy for someone to use them all simultaneously, which could lead to subtle bugs from not having a single source of truth\r\n\r\n**How important is this feature to you?**\r\nMedium","state":"open","updated_at":"2023-06-16T12:51:25Z","created_at":"2019-11-16T17:10:27Z","creator_user_login":"Rich-Harris"}
{"number":3921,"title":"Provide a way to dynamically set input type (with or without two way binding)","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI am currently making a `Input.svelte` component to manage common logic:\r\n\r\n```html\r\n<script>\r\n  export let id;\r\n  export let label;\r\n  export let type = 'text';\r\n  export let value = '';\r\n  export let revealed = false;\r\n\r\n  const revealToggle = (event) => {\r\n    const input = event.currentTarget.previousElementSibling;\r\n\r\n    if (!input) {\r\n      return;\r\n    }\r\n\r\n    input.type = input.type === 'password' ? 'text' : 'password';\r\n    revealed = !revealed;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  button:focus {\r\n    outline: 0 !important;\r\n  }\r\n</style>\r\n\r\n<label class=\"block mb-2\" for=\"{id}\">{label}</label>\r\n<div class=\"flex mb-4\">\r\n  {#if type === 'password'}\r\n    <input\r\n      {id}\r\n      type=\"password\"\r\n      placeholder=\"{label}\"\r\n      bind:value\r\n      class=\"rounded-r-none border-r-0\"\r\n    >\r\n    <button\r\n      title=\"Afficher le mot de passe\"\r\n      type=\"button\"\r\n      class=\"border border-gray-400 rounded rounded-l-none px-3 text-gray-500\"\r\n      on:click={revealToggle}\r\n    >\r\n      <i class=\"fa fa-fw {revealed ? 'fa-eye' : 'fa-eye-slash'}\"></i>\r\n    </button>\r\n  {:else}\r\n    <input {id} type=\"text\" placeholder=\"{label}\" bind:value>\r\n  {/if}\r\n</div>\r\n```\r\n\r\nIt is currently not possible to assign a prop to the `type` html attribute as you well answered here: https://stackoverflow.com/a/57393751/1731473\r\n\r\nOtherwise, it will produce this error:\r\n\r\n```\r\nError: ValidationError: 'type' attribute cannot be dynamic if input uses two-way binding\r\n```\r\nBut it is still possible to do \"dynamic\" type attribute with a basic `if`/`else` logic as you can see in my example.\r\n\r\nSo I don't understand why things are not simpler. Nowadays, with html5, we have a ton of \"text similar input\" like `date`, `email`, or `tel`: https://www.w3schools.com/html/html_form_input_types.asp\r\n\r\nI would like to avoid to make a `if` forest if I only need to change the `type` attribute.\r\n\r\nAlso, maybe a good place for an another issue, but I can't find an easier way to pass input related directly to the right DOM element in my component without declaring each of them manually (`min`, `max`, `required` etc...), but I don't know if this is doable.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAllow to do something like this:\r\n\r\n```html\r\n<input {id} {type} placeholder=\"{label}\" bind:value>\r\n```\r\n\r\nWith or without two-way binding. The goal is to quickly define what type I want from my input component:\r\n\r\n```html\r\n<script>\r\n  import Input from './Input.svelte';\r\n</script>\r\n\r\n<Input type=\"text\" ... />\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nThe only alternative I found is what you have on my example.\r\n\r\nMaybe it's a design issue from my own. In that case, some good advices on this issue and the documentation would be very welcome. :+1: \r\n\r\n**How important is this feature to you?**\r\n\r\nIt is not very urgent, but I think this is quite useful in order to avoid code repetition on big projects.\r\n","state":"open","updated_at":"2023-08-20T15:42:36Z","created_at":"2019-11-13T18:27:00Z","creator_user_login":"soullivaneuh"}
{"number":3920,"title":"Examples need documentation","body":"Some of the examples on the Svelte website are straightforward/intuitive but others need some explanation/documentation.  For example, the \"Deferred transitions\" example is excellent but there are a lot of things going on and it's difficult to understand.  In particular, what is the essential lesson of the example vs. understanding all the code needed to demonstrate it.  \r\n\r\nTherefore, I recommend:\r\n\r\n- Review of each example\r\n- Adding a README file to each example.  Perhaps a README.svelte file could be added to each example.\r\n- Adding more comments to each example.\r\n\r\ne.g.\r\n\r\n**App.svelte**\r\n\r\n```\r\n<script>\r\n\timport README from './README.svelte';\r\n\r\n\tlet name = 'world';\r\n</script>\r\n\r\n\r\n<README />\r\n\r\n<h1>Hello {name}!</h1>\r\n```\r\n\r\n**README.svelte**\r\n\r\n```\r\n<hr>\r\n<h1>\r\n\tREADME - Hello world\r\n</h1>\r\n\r\nThis example shows how a variable in the script section can be used in a HTML template.\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1135694/68781628-10399100-0606-11ea-8c45-647dec3f936e.png)\r\n","state":"open","updated_at":"2021-12-29T00:52:44Z","created_at":"2019-11-13T16:09:47Z","creator_user_login":"rlaferla"}
{"number":3898,"title":"More efficient fragment creation","body":"At present, fragments are built up programmatically one at a time. For a template like this...\r\n\r\n```html\r\n<section>\r\n  <h1>Hello {name}!</h1>\r\n  <p>{description}</p>\r\n</section>\r\n```\r\n\r\n...we get this:\r\n\r\n```js\r\nfunction create_fragment(ctx) {\r\n  let section;\r\n  let h1;\r\n  let t0;\r\n  let t1;\r\n  let t2;\r\n  let t3;\r\n  let p;\r\n  let t4;\r\n\r\n  return {\r\n    c() {\r\n      section = element(\"section\");\r\n      h1 = element(\"h1\");\r\n      t0 = text(\"Hello \");\r\n      t1 = text(ctx.name);\r\n      t2 = text(\"!\");\r\n      t3 = space();\r\n      p = element(\"p\");\r\n      t4 = text(ctx.description);\r\n    },\r\n    m(target, anchor) {\r\n      insert(target, section, anchor);\r\n      append(section, h1);\r\n      append(h1, t0);\r\n      append(h1, t1);\r\n      append(h1, t2);\r\n      append(section, t3);\r\n      append(section, p);\r\n      append(p, t4);\r\n    },\r\n    p(changed, ctx) {\r\n      if (changed.name) set_data(t1, ctx.name);\r\n      if (changed.description) set_data(t4, ctx.description);\r\n    },\r\n    i: noop,\r\n    o: noop,\r\n    d(detaching) {\r\n      if (detaching) detach(section);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nOne way we could potentially improve this is by using `<template>` and `cloneNode` to create the entire fragment in one go. This suggestion came from @martypdx, who co-authored Ractive (Svelte's predecessor): https://gist.github.com/martypdx/96b0a0900d2769a982ba36a066c1e38a. Riffing on the ideas in that gist, imagine we had a helper like this...\r\n\r\n```js\r\nconst make_renderer = html => {\r\n  const template = document.createElement('template');\r\n  template.innerHTML = html;\r\n\r\n  const text = template.content.querySelectorAll('sveltetext');\r\n  for (let i = 0; i < text.length; i += 1) {\r\n    text[i].replaceWith(document.createTextNode());\r\n  }\r\n  \r\n  return () => {\r\n    const fragment = template.content.cloneNode(true);\r\n    return fragment.querySelectorAll('[bind]');\r\n  };\r\n};\r\n```\r\n\r\n...we could then generate this code instead:\r\n\r\n```diff\r\n+const render = make_renderer(\r\n+  `<section bind><h1 bind>Hello <sveltetext/>!</h1> <p bind></p></section>`\r\n+);\r\n+\r\nfunction create_fragment(ctx) {\r\n  let section;\r\n+  let t0;\r\n+  let t1;\r\n-  let h1;\r\n-  let t0;\r\n-  let t1;\r\n-  let t2;\r\n-  let t3;\r\n-  let p;\r\n-  let t4;\r\n\r\n  return {\r\n    c() {\r\n+      [section, { childNodes: [, t0] }, { childNodes: [t1] }] = render();\r\n+      t0 = text(ctx.name);\r\n+      t1 = text(ctx.description);\r\n-      section = element(\"section\");\r\n-      h1 = element(\"h1\");\r\n-      t0 = text(\"Hello \");\r\n-      t1 = text(ctx.name);\r\n-      t2 = text(\"!\");\r\n-      t3 = space();\r\n-      p = element(\"p\");\r\n-      t4 = text(ctx.description);\r\n    },\r\n    m(target, anchor) {\r\n      insert(target, section, anchor);\r\n-      append(section, h1);\r\n-      append(h1, t0);\r\n-      append(h1, t1);\r\n-      append(h1, t2);\r\n-      append(section, t3);\r\n-      append(section, p);\r\n-      append(p, t4);\r\n    },\r\n    p(changed, ctx) {\r\n+      if (changed.name) set_data(t0, ctx.name);\r\n+      if (changed.description) set_data(t1, ctx.description);\r\n-      if (changed.name) set_data(t1, ctx.name);\r\n-      if (changed.description) set_data(t4, ctx.description);\r\n    },\r\n    i: noop,\r\n    o: noop,\r\n    d(detaching) {\r\n      if (detaching) detach(section);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nThis is less code (notwithstanding the cost of the helper), and also very possibly less work (though I haven't benchmarked anything yet).\r\n\r\nThere's also potential for further benefits in future — by putting markup in `<template>` elements that are on the page (generated during SSR), or in [HTML modules](https://github.com/w3c/webcomponents/issues/645) if we ever get those. This would mean less JavaScript, and we can take advantage of the browser's parser (which is fast!).\r\n\r\nA few things to consider:\r\n\r\n* Need to be able to insert placeholders for (if/each/etc) blocks (though this could be the same mechanism as for text)\r\n* The `bind` attributes, used for selecting nodes we need references to, would stick around in the DOM. Not the worst, but not ideal. Also, maybe we need to pick a name that's less likely to conflict with something that gets added to the DOM in future (maybe just `svelte`)\r\n* Haven't really thought about how this'd work with hydration","state":"open","updated_at":"2023-08-13T20:53:40Z","created_at":"2019-11-11T16:36:16Z","creator_user_login":"Rich-Harris"}
{"number":3895,"title":"add scrollTop and scrollLeft bindings","body":"fixes #3780. The binding code gets hairier and hairier... at some point it will probably need a bit of a spring clean","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2019-11-11T14:03:56Z","creator_user_login":"Rich-Harris"}
{"number":3852,"title":"Allow hyphenated properties to be defined in a component","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nGiven the usage of the following hypothetical component:\r\n\r\n```\r\n<Icon data-tooltip=\"foobar\" />\r\n```\r\n\r\nI receive a warning that `data-tooltip` has not been declared as a property on the `Icon` component. However, there is no way to do that since it is hyphenated.\r\n\r\n**Describe the solution you'd like**\r\n\r\nInside my component, it would be nice if I could declare the property like this:\r\n\r\n```\r\nexport let dataTooltip = null\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI know that the properties are also available in `$$props`. But that doesn't really solve the problem.\r\n\r\n```\r\nconst dataTooltip = $$props['data-tooltip']\r\n```\r\n\r\nWhile this would give me access to the value, it doesn't remove the in browser warning.\r\n\r\n**How important is this feature to you?**\r\n\r\nIt's annoying. Important? Well, certainly not a deal killer. And for now I just am using the form: `<Icon tooltip=\"foobar\" />`. And then I am passing the property to the hyphenated version inside the component.\r\n\r\nThe reason this came about was I was trying to just use a spread operator and pass props thru. But, here I cannot because I don't want to keep seeing those warnings all over the place.","state":"open","updated_at":"2023-08-22T08:39:55Z","created_at":"2019-11-05T10:53:07Z","creator_user_login":"ahopkins"}
{"number":3847,"title":"Component Unmount: Allow non-duration based outro animations","body":"I am struggling to use a spring-based animation for component outros (unmounting the DOM element). As far as I can tell, the only way to defer/delay the unmount/outro of a component is to use the `transition` or `out` [directive](https://svelte.dev/docs#in_fn_out_fn) and return an transition object with a specified duration:\r\n``` js\r\n{\r\n  duration: 400,\r\n  easing: ...\r\n}\r\n```\r\n\r\nThis works great for easing functions, but I cannot use Svelte's `spring()` function for the outro transition, because it has no fixed duration.\r\n\r\n---\r\n\r\n## Proposal/Potential solution\r\nMy proposed solution is for the `transition`, `in` and `out` directives to accept a function that optionally returns a Promise instead of a Transition object. Once the Promise fulfills (or rejects), Svelte can remove the element from the DOM.\r\n\r\nExample REPL for illustration: \r\nhttps://svelte.dev/repl/cc1467f851284051a11ca0325c2efd97?version=3.12.1\r\n\r\n## Alternative I have considered\r\n\r\nOne alternative I've considered, is pre-calculating a duration for the spring and using that as the duration value in the transition object. This approach has one disadvantage: springs are inherently dynamic, so the animation distance changes how long the spring takes to finish (its duration), which makes a static pre-calculation (i.e. one pre-calculated duration per spring-config) of the spring not possible.\r\n\r\nIt may be be possible to predict the duration relatively accurately based on the spring config (damping, stiffness, mass, ...) and the travel distance, but that is a considerable amount of work for something which Just Works™ when using normal easing transitions.\r\n\r\n## Additional context\r\nSvelte puts a lot of focus into \"making UI interactions and animations as easy as possible\". For that matter, Svelte even provides its own Spring-based animation API. So it would make sense to allow to use Svelte's `spring()` function (or third-party ones) for outro transitions.\r\n\r\nIf this addition is feasible and wanted, it may also make sense to revisit some of the built in animation functions like `fade` and `slide` to make it possible to use them also with a spring.\r\n\r\n**How important is this feature to me?**\r\nRight now, I am trying to evaluate to port an existing project to Svelte. This existing project has spring-based outro animations in a few places (pages, menus). It's not a dealbreaker, but seems like an unfortunate limitation.\r\n\r\nIn my opinion, spring interactions and animations are superior to fixed (duration based) easings and feel more intuitive. \r\n\r\n**Similar \"defered unmount\" discussion over at React**: https://github.com/reactjs/rfcs/issues/128\r\n\r\n**Potential drawback**: One drawback of the Promise based approach as I proposed it above is, that the author has to handle the animation themselves. I.e. I have to get a reference to the DOM element and do stuff with it, instead of letting Svelte handle it. But this may be necessary nontheless when the author wants to use a third-party library, such as [Popmotion](https://popmotion.io/pure/).\r\n\r\n**What about _Intro_ transitions**: In general, my proposal is also about intro animations. But it is not such a big of a problem, because you _can_ roll your own intro animation logic within an `onMount()` handler. In the case of the outro animation, there is no real workaround that I am aware of, which is why I primarily focused on that.\r\n","state":"open","updated_at":"2023-01-10T22:15:49Z","created_at":"2019-11-03T14:49:13Z","creator_user_login":"christiankaindl"}
{"number":3793,"title":"vars not reported as reassigned/mutated when directly done in template","body":"```svelte\r\n<script>\r\n\tlet foo = 0;\r\n\tlet bar = 0;\r\n</script>\r\n{() => foo = 1}\r\n{bar = 1}\r\n```\r\n\r\nThe `vars` in the compiler output reports `foo` as reassigned, but does not report `bar` as ever reassigned. I don't know what effects this might have on the compiled output, but for the ESLint plugin with `prefer-const` enabled, it does result in `bar` being erroneously turned into a `const`.","state":"open","updated_at":"2021-06-28T11:04:07Z","created_at":"2019-10-26T13:13:42Z","creator_user_login":"Conduitry"}
{"number":3787,"title":"Double bind and reactivity","body":"**Describe the bug**\r\nI cannot bind to a variable twice, i.e. with more than one component.\r\n\r\n**Logs**\r\nNo relevant logs. See REPL.\r\n\r\n**To Reproduce**\r\nSee the REPL https://svelte.dev/repl/ca37298e89694e8db83ab998bc13e6ea?version=3.12.1\r\nThere is a value, `obj`. It is bound to two components, `Proc1` and `Proc2`.\r\n`Proc1` checks if `obj` is defined. If not, set it to a value (20).\r\n`Proc2` checks if `obj` is defined. If it is, add to it's value (+30).\r\n\r\n**Expected behavior**\r\nI should get 50, but I get 20. i.e. the second component's reactive statement is not being called.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nFirefox 69.0.3\r\nWindow 10\r\nSvelte REPL 3.12.1\r\n\r\n**Severity**\r\nThis is impacting my understanding of Svelte and reactivity.\r\nMy understanding is that if I placed a dollar label `$:` in front of a statement it will execute whenever changes occur to any referenced variables. This is not the case here. I'd like to be able to put all my reactive procedures into logically separate components and pass them to various Svelte components, each processing the parent data variables when needed.\r\n\r\n```js\r\n\r\nlet var1, var2, var3;\r\n\r\n<Comp1 bind:var1 {var2} />\r\n<Comp2 bind:var1 {var2} {var3} />\r\n```\r\n\r\nIs the problem simply that one cannot bind to more than one variable at a time?\r\nWhat would be the correct way to implement an approach as above?\r\n \r\n**Additional context**\r\nSvelte is awesome. Thanks for all the work.","state":"open","updated_at":"2021-12-28T15:06:59Z","created_at":"2019-10-24T08:15:41Z","creator_user_login":"kewp"}
{"number":3780,"title":"scrollX/Y for things other than window","body":"Is there a reason why there's no `bind:scrollX` for dom nodes ? I see there are for window. I rolled my own solution, but it felt like it should be supported! ","state":"open","updated_at":"2022-06-30T19:18:50Z","created_at":"2019-10-23T19:47:56Z","creator_user_login":"weepy"}
{"number":3768,"title":"Prevent multiple style recalculations and improve performance by grouping DOM reads and writes","body":"**Is your feature request related to a problem? Please describe.**\r\nWhen requesting `offsetLeft` (or other DOM reads) in the `beforeUpdate` callback the browser has to recalculate styles when the styles are changed in a further update. See below how this looks in dev tools with multiple components (the second one is without the DOM reads, you can see the recalculation is done after every style has been updated).\r\n\r\nI've created a REPL: https://svelte.dev/repl/1977c00357cc496eae5ec1f2a9d23675?version=3.12.1\r\n\r\nMultiple recalculations because of DOM reads\r\n\r\n![Screenshot 2019-10-22 at 11 29 48](https://user-images.githubusercontent.com/1132575/67273923-b7bc1b80-f4bf-11e9-8432-071df389ab29.png)\r\n\r\nSingle recalculation\r\n\r\n![Screenshot 2019-10-22 at 11 30 38](https://user-images.githubusercontent.com/1132575/67273947-c571a100-f4bf-11e9-890c-0076633b341a.png)\r\n\r\nThis slows down the frame render.\r\n\r\n\r\n**Describe the solution you'd like**\r\nIf we can schedule all reads before the update happens DOM reads are free (the browser has prepared the frame) and don't cause additional style recalculations. This might require setting up a global draw loop so web components created with Svelte all use the same read/write order.\r\n\r\n\r\n**Describe alternatives you've considered**\r\nI've moved the DOM read to `afterUpdate` while that does group part of the writes we only get the info after the update while we need it before.\r\n\r\n![Screenshot 2019-10-22 at 11 39 18](https://user-images.githubusercontent.com/1132575/67274401-a58ead00-f4c0-11e9-8205-5e43bb50200e.png)\r\n\r\n\r\n**How important is this feature to you?**\r\nVery. It's super useful to be able to access layout information at the start of the frame (it's free at that moment) and this can be used to for example calculate the width of a component and then layout its children accordingly (simulating component queries) without affecting render performance. I use this extensively in [FilePond](https://pqina.nl/filepond/).","state":"open","updated_at":"2021-12-23T19:47:57Z","created_at":"2019-10-22T09:45:54Z","creator_user_login":"rikschennink"}
{"number":3760,"title":"Opting for a smaller bundle size by treating dynamic strings as one unit","body":"**Describe the solution you'd like**\r\nCurrently, for dynamic strings in an element, Svelte breaks the string into it's atomic parts (be it a static string or a variable), and treats each part separately. For a textual element (without other embeded elements in it), changing a part of a string in the element doesn't provide much performance value over changing the entire string. Therefor, perhaps it would be better to opt for bundle size, by treating such a string as one unit. \r\n\r\nI'll try to demonstrate the idea with the reactive assignment example from the homepage. \r\n```svelte\r\n<script>\r\n\tlet count = 0;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\nLets take a look at the `create_fragment` function in the compiled JS output. \r\n```js\r\n   function create_fragment(ctx) {\r\n\tvar button, t0, t1, t2, t3_value = ctx.count === 1 ? 'time' : 'times' + \"\", t3, dispose;\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\tbutton = element(\"button\");\r\n\t\t\tt0 = text(\"Clicked \");\r\n\t\t\tt1 = text(ctx.count);\r\n\t\t\tt2 = space();\r\n\t\t\tt3 = text(t3_value);\r\n\t\t\tdispose = listen(button, \"click\", ctx.handleClick);\r\n\t\t},\r\n\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, button, anchor);\r\n\t\t\tappend(button, t0);\r\n\t\t\tappend(button, t1);\r\n\t\t\tappend(button, t2);\r\n\t\t\tappend(button, t3);\r\n\t\t},\r\n\r\n\t\tp(changed, ctx) {\r\n\t\t\tif (changed.count) {\r\n\t\t\t\tset_data(t1, ctx.count);\r\n\t\t\t}\r\n\r\n  // ...\r\n}\r\n``` \r\n\r\nIt creates various variables, and various operations, just to insert one dynamic string. The basic idea is to treat this string as one unit. Here is a draft of what this could look like. \r\n```js\r\nfunction create_fragment(ctx) {\r\n   \tvar button, dispose,\r\n\td1 = (ctx)=>`count ${ctx.count} ${ctx.count === 1 ? 'time' : 'times' + \"\"}`\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\tbutton = element(\"button\");\r\n\t\t\tt0 = text(d1(ctx));\r\n\t\t\tdispose = listen(button, \"click\", ctx.handleClick);\r\n\t\t},\r\n\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, button, anchor);\r\n\t\t\tappend(button, t0);\r\n\t\t},\r\n\r\n\t\tp(changed, ctx) {\r\n\t\t\tif (changed.count) {\r\n\t\t\t\tset_data(t0, d1(ctx));\r\n\t\t\t}\r\n\t\t},\r\n   //...\r\n}\r\n\r\n```\r\nThis reduces the js output of this component by 20% (from 1418 chars to 1144. )\r\n\r\n**How important is this feature to you?**\r\nI'm excited about Svelte, but new to the framework. I don't currently use it in production. \r\n","state":"open","updated_at":"2022-02-05T03:39:40Z","created_at":"2019-10-21T13:40:29Z","creator_user_login":"carpben"}
{"number":3750,"title":"Revisit setAttribute vs setting properties","body":"A while back we stopped using direct property access to change attributes, and started using `setAttribute` everywhere, via the `attr` helper. The reason for this was that we want null/undefined attributes (i.e. `class={maybe_undefined}`) to be removed from the element, and there's no way to achieve that via property access (`el.className = null` doesn't remove the attribute).\r\n\r\nWhile poking around a benchmark the other day, I learned that `el.setAttribute('class', foo)` is significantly slower than `el.className = foo`.\r\n\r\nSo now I'm thinking that we need to consider secret option 3: having a separate function for each attribute that's settable via property:\r\n\r\n```js\r\nfunction remove_attribute(node, name) {\r\n  node.removeAttribute(name);\r\n}\r\n\r\nfunction set_class(node, value) {\r\n  if (value == null) remove_attribute(node, 'class');\r\n  else node.className = value;\r\n}\r\n\r\n// later...\r\nset_class(div, ctx.foo);\r\n```\r\n\r\nThis obviously means the cost of using a single `class` attribute increases, since we need the additional helper. Over the course of an app, that cost gets amortized:\r\n\r\n```js\r\n// unminified\r\nfunction set_class(node, value) {\r\n  if (value == null) remove_attribute(node, 'class');\r\n  else node.className = value;\r\n}\r\n\r\nattr(div, 'class', ctx.foo);\r\nset_class(div, ctx.foo);\r\n\r\n// minified\r\nfunction d(a,b){b==null?e(a,'class'):(a.className=b)} // 53 bytes\r\n\r\na(b,'class',c.foo);\r\nd(b,c.foo); // 8 bytes fewer per occurrence\r\n```\r\n\r\n[This benchmark shows that](https://esbench.com/bench/5daa5fc94cd7e6009ef62869), in cases where values are recalculated but *haven't* changed, caching values in memory (and only updating the property when they change) yields the best performance, followed by checking the existing property.\r\n\r\n<img width=\"1877\" alt=\"Screen Shot 2019-10-19 at 14 37 11\" src=\"https://user-images.githubusercontent.com/1162160/67149827-f6fb2a00-f27d-11e9-97fb-84f1dc50d54f.png\">\r\n\r\n\r\nOf course, in many apps, if values are being recalculated it's because they likely *have* changed, in which case not bothering with caching or comparing to the existing property value is obviously faster, but probably not by such a huge margin that it's worth penalising the alternative case. Screenshot of results here (no link because ESBench won't let me save for some reason):\r\n\r\n<img width=\"1669\" alt=\"Screen Shot 2019-10-19 at 14 33 46\" src=\"https://user-images.githubusercontent.com/1162160/67149807-bd2a2380-f27d-11e9-8e02-5708a9122cf3.png\">\r\n\r\nEither way, property access beats `setAttribute` handily. (Though I haven't tried other pairs other than `class`/`className`...)\r\n\r\nThoughts?","state":"open","updated_at":"2021-12-28T05:59:57Z","created_at":"2019-10-19T18:37:41Z","creator_user_login":"Rich-Harris"}
{"number":3733,"title":"try block, like error boundary","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI wonder would it possible to have a `{#try}` logic block, such that anything goes inside, if error would be handled in the `{:catch}` block, eg:\r\n\r\n```svelte\r\n{#try}\r\n   <Component />\r\n{:catch}\r\n   <div>Fallback uI </div>\r\n{/try}\r\n```\r\n\r\nif an error thrown during init / update in `<Component />`, then will see the Fallback UI instead.\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","state":"open","updated_at":"2023-03-13T05:21:05Z","created_at":"2019-10-18T09:46:01Z","creator_user_login":"tanhauhau"}
{"number":3719,"title":"Documentation crosslinking","body":"Following [this conversation](https://github.com/sveltejs/svelte/issues/3694#issuecomment-541454741) I've started a spreadsheet to track down what parts of the API, the tutorial and the examples can eventually be interlinked [1].\r\n\r\nOnce we'll have figured out all the links we can figure out eventually how to add links in a non-intrusive/usable way in the site, depending on the links volume.\r\n\r\nAssigning to myself but please feel free to get onboard and help as this seems quite a bit of work (we can use comments in the spreadsheet for ease of use).\r\n\r\nThe json files extracted from the site as of now are at [2].\r\n\r\n----\r\n\r\nThese are the sections of the 3 types of doc, each having 2 columns on the right to add correspondences.\r\n\r\nIf a section in `/docs` has a correspondence in `/tutorial` we can add an \"x\" in the \"Tut\" column and link it to the correspondent cell under \"Tutorial\".\r\n\r\nFor example these cells are linked:\r\n\r\n<img width=\"1020\" alt=\"Screenshot 2019-10-16 at 12 41 43\" src=\"https://user-images.githubusercontent.com/1309648/66916070-64a31e00-f012-11e9-8239-ac94e28f4034.png\">\r\n\r\nIf we'll find sections with multiple links we can add more \"x cells\", say for example like this:\r\n\r\n<img width=\"384\" alt=\"Screenshot 2019-10-16 at 12 44 53\" src=\"https://user-images.githubusercontent.com/1309648/66916286-d0858680-f012-11e9-84eb-37423b15462a.png\">\r\n\r\nFor ease of use:\r\n- Cmd-K to link it to some target cell\r\n- select the target cell or type in the target cell coordinate (`E11`)\r\n- save\r\n\r\n[1] https://docs.google.com/spreadsheets/d/14bdp_XNm-n9opbymT_F1T7t0j9Edwl8NSK5G9gweiCU/edit#gid=0\r\n\r\n[2] https://gist.github.com/mindrones/bac9331855f29476598ed274be330118","state":"open","updated_at":"2021-12-28T04:59:56Z","created_at":"2019-10-16T11:56:22Z","creator_user_login":"mindrones"}
{"number":3675,"title":"Autosubscriptions work in js files in addition to components","body":"**Is your feature request related to a problem? Please describe.**\r\nIn attempting to move logic from components to plain javascript files, I believe I've discovered that I can't use the $ syntax to autosubscribe to stores except in svelte files. Converting my code from a js file to an empty component on the page fixed the errors I was getting.\r\n\r\n**Describe the solution you'd like**\r\nI'd either like to be able to use the $ syntax within plain js files, or have that clearly documented in the tutorial.\r\n\r\n**How important is this feature to you?**\r\nIt's a very nice quality of life improvement, but doesn't seem critical yet. \r\n\r\n","state":"open","updated_at":"2021-12-28T02:11:26Z","created_at":"2019-10-09T01:29:15Z","creator_user_login":"freyley"}
{"number":3642,"title":"fix #3586 comments instead of empty text nodes (perf)","body":"Comment nodes are much faster - no styles, drawing etc...\r\n\r\nfix #3586 \r\n\r\n### Before submitting the PR, please make sure you do the following\r\n- [x] It's really useful if your PR relates to an outstanding issue, so please reference it in your PR, or create an explanatory one for discussion. In many cases features are absent for a reason.\r\n- [x] This message body should clearly illustrate what problems it solves. If there are related issues, remember to reference them.\r\n- [x] Ideally, include a test that fails without this PR but passes with it. PRs will only be merged once they pass CI. (Remember to `npm run lint`!)\r\n### Tests\r\n-  [x] Run the tests tests with `npm test` or `yarn test`)\r\n","state":"open","updated_at":"2023-07-11T21:36:29Z","created_at":"2019-10-01T01:53:00Z","creator_user_login":"neuronetio"}
{"number":3633,"title":"Transitions: dynamic attributes","body":"It seems the Outro transitions aren't respecting dynamic attributes.\r\nI am trying to have a page-slider that dynamically updates the Out / In Fly directions based on some mathematical logic.\r\nIt seems that once the Element is mounted the transition settings cannot be updated.\r\n\r\nI made a little demo here that should change the outro speed when buttons clicked, but does not:\r\n[https://svelte.dev/repl/f8a0a3d1010d4669a81940770547dabf?version=3.12.1](https://svelte.dev/repl/f8a0a3d1010d4669a81940770547dabf?version=3.12.1)\r\n\r\nBy the way - if there is currently a workaround, can someone please tell me ?","state":"open","updated_at":"2021-12-28T00:11:24Z","created_at":"2019-09-29T06:59:58Z","creator_user_login":"gotys"}
{"number":3622,"title":"Wrong url format when query params clash with html special characters","body":"**Describe the bug**\r\nWrong url format when query params clash with html special characters\r\n\r\n```html\r\n<a href=\"#/hello?foo={foo}&sect={sect}&copy={copy}\"></a>\r\n```\r\n\r\n```js\r\nattr(a, \"href\", \"#/hello?foo=\" + foo + \"§=\" + sect + \"©=\" + copy);\r\n```\r\n\r\n**To Reproduce**\r\nCheck link in example https://svelte.dev/repl/c0e786749e124757a06ad2a02c3d4c81?version=3.12.1\r\n\r\n**Expected behavior**\r\nDo not convert html special characters in hrefs\r\n\r\n**Severity**\r\nCan be worked around.\r\n","state":"open","updated_at":"2021-06-28T11:24:52Z","created_at":"2019-09-26T11:33:01Z","creator_user_login":"broadsw0rd"}
{"number":3617,"title":"Passing values from slot to parent","body":"From the documentation of slots it seems it should be possible to bind values of a component to a slot:\r\n\r\n> Slots can be rendered zero or more times, and can pass values back to the parent using props. The parent exposes the values to the slot template using the `let:` directive.\r\n\r\nbut it seems that the real situation is different: this [REPL](https://svelte.dev/repl/21a2324cc6be46348e514db137353ce8?version=3.12.1) triggers the error `Cannot bind to a variable declared with the let: directive (10:32)`.\r\n\r\n**Expected behavior**\r\nBinding a variable in a slot, which is bound to a variable in the parent component, should work normally as it would if I manually substituted the slot content inside the container.\r\n\r\n**Severity**\r\nThis underpins the possibility of developing a lot of components that take care of boilerplate code for my application, so in my case this effectively blocks my usage of Svelte for the project.","state":"open","updated_at":"2023-08-29T15:20:29Z","created_at":"2019-09-24T10:11:10Z","creator_user_login":"trenta3"}
{"number":3615,"title":"Using the context API in standalone components loaded at runtime returns undefined","body":"Edit: I've found this issue too, which I think looks like the same problem I'm describing here: https://github.com/sveltejs/svelte/issues/3422\r\n\r\n**Describe the bug**\r\nI'm trying to build a system that loads external standalone components at runtime, and I want to use the `getContext` and `setContext` functions to share a store between all of the components.\r\n\r\nI'm using webpack to build the main application which contains an `App` component that serves as the root of the application, and then I'm using a completely separate project to build another external standalone component (both an SSR version and a DOM versions), which I then load in at runtime using `require` on the Node server-side, and a `<script>` tag on the client-side within the main `App` component.\r\n\r\nThe external standalone component does load and render correctly, however within the component any calls to `getContext` return `undefined`.\r\n\r\nI'm not familiar with the Svelte codebase, but I assume this is due to the standalone component being built as a separate project and getting its own versions of the context related variables/functions at build time, rather than sharing the same variables etc. from the parent.\r\n\r\nI assume this is a bug, but if I'm just doing something wrong please let me know.\r\n\r\n**Logs**\r\nNo logs other than `getContext` printing `undefined` in the child standalone component.\r\n\r\n**To Reproduce**\r\n- Build a simple Svelte application (doesn't matter if it uses SSR or not)\r\n- Load a standalone component built from another project (using a `<script>` tag or something)\r\n- Render the component inside a component from the main application using `<svelte:component this={MyStandaloneComponent} />`\r\n- See `getContext` in the standalone component return `undefined` because it (I think) doesn't have the same context\r\n\r\n**Expected behavior**\r\nI expect to see `getContext` in the standalone component return data from the same context as the parent component from the main application.\r\n\r\n**Information about your Svelte project:**\r\n- This happens in all browsers\r\n- This happens in all OSes\r\n- Svelte version is 3.12.1\r\n- Webpack using svelte-loader 2.13.6\r\n\r\n**Severity**\r\nI can get around this issue by passing the store I want to share as a prop to the child standalone component, but it's not ideal, especially in large projects where the same store may need to be shared amonst hundreds of standalone components.\r\n\r\nThis problem is more one of code maintenance/tech debt in my specific case, so I'd much prefer to have `getContext` work correctly where the standalone child component should inherit the context from the parent component in the main application.\r\n\r\nAlthough in my specifc case I can easily work around the issue using props instead, I can imagine that for applications sharing much more than a simple store this could be prohibitive, so I'd say it's a fairly severe issue.\r\n\r\n**Additional context**\r\nI've tried various build options using Webpack, such as changing `libraryTarget`, or changing Svelte build flags, like changing `customElements` to `true` or `false`.\r\n\r\nNo matter the build options this problem always seems to occur.","state":"open","updated_at":"2021-12-24T10:28:13Z","created_at":"2019-09-24T02:19:54Z","creator_user_login":"ghost"}
{"number":3586,"title":"A lot of empty text nodes - I mean A LOT - performance issue","body":"**Describe the bug**\r\nJust check this repl https://svelte.dev/repl/902d4ccfcc5745d0b927b6db6be4f441?version=3.12.1\r\n\r\nThere are 22 000 empty text nodes that are really slowing down entire component on update.\r\n\r\n![obraz](https://user-images.githubusercontent.com/25027696/65147220-fa508b00-da1d-11e9-9838-f9fd19eea8c5.png)\r\n\r\n\r\n**Expected behavior**\r\nI know that those nodes are for a reason but maybe some virtual approach will be better?\r\nEach node must be created updated and destroyed which takes a lot of time and memory when something change.\r\n\r\n**Severity**\r\nThis behavior can lead users to leave svelte because they might not figure out what is wrong - code seems to be ok, but performance is really bad (22 000 extra nodes for 2 500 real ones :O ).\r\nFor me this is annoying because I must be careful and watch for those \"extra\" nodes that are appearing randomly in some circumstances.","state":"open","updated_at":"2021-12-23T23:56:01Z","created_at":"2019-09-18T12:12:53Z","creator_user_login":"neuronetio"}
{"number":3585,"title":"Loss of reactivity or I can't cook Svelte","body":"**Describe the bug**\r\nIn an attempt to use the flux approach in one of the projects, it turned out that reactivity is lost in certain cases. I may not be using Svelte correctly, but I think it's a bug. \r\n\r\n**To Reproduce**\r\nThere are comments in the example ([REPL](https://svelte.dev/repl/9b84db29c15a47d1adb4d5a4bf3fa418?version=3.12.1)).\r\n\r\n```javascript\r\n<script>\r\n  // dispatcher.filter calls the update method at items\r\n  import { items, dispatcher } from './store.js';\r\n  \r\n  let searchQuery = '' // bound to the input field\r\n  \r\n  /* In this sequence, reactivity does not work: */\r\n  $: list = $items.filter(item => item.active)\r\n  $: dispatcher.filter(searchQuery) // set after list\r\n  \r\n  /* It works well in this sequence: \r\n  $: dispatcher.filter(searchQuery) // set before list \r\n  $: list = $items.filter(item => item.active)\r\n  */\r\n</script>\r\n...\r\n<input type=\"text\" bind:value={searchQuery} placeholder=\"filter\"/>\r\n...\r\n{#each list as item}\r\n  <p>{item.name}</p>\r\n{:else}\r\n  <p>No data to display!</p>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nIt is expected that the list should be updated in any case as the store changes.\r\n\r\n**Information about your Svelte project:**\r\n- Svelte v3.12.1\r\n\r\n**Severity**\r\nThe problem is not critical because there are working alternatives. Doesn't affect something important.","state":"open","updated_at":"2021-12-27T23:11:24Z","created_at":"2019-09-18T10:58:23Z","creator_user_login":"a3con"}
{"number":3553,"title":"$$invalidate call not inlined","body":"This:\r\n```svelte\r\n<script>\r\n\tlet value;\r\n</script>\r\n\r\n<input type=\"text\" bind:value={value}>\r\n```\r\n\r\noutputs this as of v3.12.1:\r\n```js\r\nfunction input_input_handler() {\r\n\tvalue = this.value;\r\n\t$$invalidate('value', value);\r\n}\r\n```\r\n\r\nThis is caused by these two lines of code [here](https://github.com/sveltejs/svelte/blob/14a46a17d0ec837a66386cec0dbcd3bdabc29695/src/compiler/compile/render_dom/wrappers/Element/index.ts#L499-L500). ","state":"open","updated_at":"2021-12-27T20:38:15Z","created_at":"2019-09-11T22:50:11Z","creator_user_login":"dasZGFz"}
{"number":3492,"title":"srcObject property on video element","body":"**Is your feature request related to a problem? Please describe.**\r\n  Currently compiler transforms `srcObject` property in video element as `<video srcobject=\"[object MediaStream]\"></video>` and doesn't applies stream to it.\r\n\r\n**Describe the solution you'd like**\r\n  I would prefer if compiler will parse and apply `srcObject` to the `video` element and omit it from the attributes in the case when I'm using it like `<video srcObject={myStream}></video>` inside the template.\r\n\r\n**Describe alternatives you've considered**\r\n  To use link of `video` element and to assign srcObject directly. Ex. `videoElement.srcObject = stream`.\r\n\r\n**How important is this feature to you?**\r\n   It's not urgent to do and probably current behavior is correct but I would like to know your thoughts on this point. It could be more comfortable to use it in the way described before.\r\n\r\n**Additional context**\r\nrelated links: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject","state":"open","updated_at":"2023-07-22T08:37:58Z","created_at":"2019-09-02T21:16:24Z","creator_user_login":"qutran"}
{"number":3488,"title":"Reduce boilerplate for firing events","body":"Instead of requiring this boilerplate:\r\n\r\n```js\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\n```\r\n\r\nwith the warning that the call to `createEventDispatcher` _must_ happen at the top level, just provide a global variable `dispatch` (maybe there can be a project-level option for the name), and if you detect that it is used, emit the boilerplate during compilation, otherwise omit it.","state":"open","updated_at":"2022-05-06T10:19:24Z","created_at":"2019-08-31T20:08:29Z","creator_user_login":"thejohnfreeman"}
{"number":3448,"title":"Nested async components error when switching components","body":"**Describe the bug**\r\n\r\nWhen nesting dynamic components that are imported via `await import('/SomeComponent.js')`, when the top-most component class is changed, the following error is thrown.\r\n\r\n**Logs**\r\n\r\n`TypeError: undefined is not an object (evaluating 'outros.c')`\r\n\r\n(full traceback below)\r\n\r\n**To Reproduce**\r\n\r\nI was unable to reproduce this in the REPL (I assume it doesn't support dynamic imports), so here is a repro repository: https://github.com/taylorzane/svelte-async-import-repro\r\n\r\nJust run `yarn build && yarn start` and then open up the webpage and attempt to click the button. It will switch the to-be-imported component from `Child1` to `Child2` (both of which dynamically import `SubChild`)\r\n\r\n**Expected behavior**\r\n\r\nThe component switch/transition should not throw an error.\r\n\r\n**Stacktraces**\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n<pre>\r\n[Error] Unhandled Promise Rejection: TypeError: undefined is not an object (evaluating 'outros.c')\r\n\ttransition_out (Child1.js:150)\r\n\to (Child1.js:603)\r\n\ttransition_out (bundle.js:165)\r\n\tp (bundle.js:358)\r\n\tp (bundle.js:455)\r\n\tupdate (bundle.js:126)\r\n\tflush (bundle.js:100)\r\n\tpromiseReactionJob\r\n</pre>\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Safari 12.1.2\r\n\r\n- Your operating system: macOS 10.14.6\r\n\r\n- Svelte version: v3.9.1\r\n\r\n- Rollup\r\n\r\n**Severity**\r\n\r\nCurrently makes multi-page (sapper) svelte usage entirely unusable.\r\n\r\n**Additional context**\r\n \r\nMight be related to #3165, but seems slightly different (`outros` is definitely defined)","state":"open","updated_at":"2021-07-11T08:54:40Z","created_at":"2019-08-22T17:28:47Z","creator_user_login":"taylorzane"}
{"number":3398,"title":"strange crossfade behavior on fast update ","body":"If you click three-four times \"fast\" on the \"ToggleMe\" link you get strange behavior. Fast means before the animation is done. \r\n\r\nThe origin and destination of the animation is not the list anymore, but the upper left corner close to the button.\r\n\r\nhttps://svelte.dev/repl/60da5412b4f94920ac5d3ef48a540a5d?version=3.8.0\r\n[edit: removed some non-relevant code from the example]","state":"open","updated_at":"2021-12-29T09:03:05Z","created_at":"2019-08-12T18:04:46Z","creator_user_login":"knobo"}
{"number":3368,"title":"Site: Explain which variables can be assigned to to trigger updates","body":"There have been a number of issues opened about this, and a good deal of confusion. The docs indicate that if you mutate an object without there being a `=` involved, this doesn't trigger an update. But there's no mention that only assignments to certain variables trigger updates.\r\n\r\nThings that do trigger updates:\r\n\r\n- Assignments to top-level variables in the component\r\n- Assignments in _inline_ event handlers to the contextual item in an array from an each block (There are some nuances to be worked out around this, and some bugs, for which there are other issues open)\r\n\r\nOther assignments do not trigger updates. In particular, assignments to function arguments when the function was passed one of the above two things do not trigger updates. If you have two top-level variables, and one is an array or object containing the other, and you trigger an update on the contained variable, it does not trigger an update on the containing variable.\r\n\r\nI do not know where in the docs we should explain this, or how we should word it, but we do need to have this somewhere.","state":"open","updated_at":"2021-12-27T13:10:58Z","created_at":"2019-08-07T13:16:57Z","creator_user_login":"Conduitry"}
{"number":3313,"title":"Debugging: Decouple debug logging from breakpoints","body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently, using `{@debug}` statements to watch variables is an exercise in frustration when using Svelte to create apps (as opposed to developing Svelte itself) due to the `debugger` statements injected along with the console output unconditionally.\r\n\r\nWhile it is neat that the language includes breakpoints in generated code and super useful for tracking down framework bugs, it really should be decoupled from the act of simply logging variables.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd a directive, say, `{@watch}`, that only logs the value of vars when they change.\r\nThe `{@debug}` directive can stay as it is to prevent unintended consequences of changing the behavior.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAn alternative would be to expose the `dev` flag  or have entire blocks of conditionally compiled code available to users; however, these alternatives really go against the grain of less boilerplate code in applications.\r\n\r\n**How important is this feature to you?**\r\n\r\nI personally stay away from the debug directive because of the unconditional breakpoints and end up having to `console.log()` all the time so it would be a big help in a production environment.\r\n\r\n**Additional context**\r\n\r\nThe idea was prompted by a user asking for help regarding framework supported debugging for components. Being able to get started quickly and ramp up to being productive is a real big sell for Svelte. A major aspect of being able to do that is to iterate quickly and debug your code.\r\n","state":"open","updated_at":"2021-10-15T14:19:45Z","created_at":"2019-07-30T17:50:15Z","creator_user_login":"ghost"}
{"number":3277,"title":"Slide transition inside slide transition breaks outer transition (v3.6.4)","body":"**Describe the bug**\r\nIf you have an element A with a transition:slide, and puts another element B with transition:slide inside it, the last child of element A isn't included in the transition. Instead it just pops up at the end of the transition.\r\n\r\nThis broke with version v3.6.4, as it worked fine up until v3.6.3. \r\n\r\n**To Reproduce**\r\nv3.6.3, it's smooth:\r\nhttps://svelte.dev/repl/c688496562be4624a009ddf25bbf74e4?version=3.6.3\r\n\r\nv3.6.4, it's glitchy:\r\nhttps://svelte.dev/repl/c688496562be4624a009ddf25bbf74e4?version=3.6.4\r\nNote that it doesn't matter which child has the transition on it. It's always going to be the last child glitching out.\r\n\r\n**Expected behavior**\r\nI expect all children to slide in together, as it did in v3.6.3.\r\nAlternatively I'd expect the child with the transition on it to slide in when the others are done or something.\r\n\r\n**Information about your Svelte project:**\r\nChrome Version 75.0.3770.142 (Official Build) (64-bit)\r\n\r\nmacOS 10.13.3\r\n\r\nSvelte v3.6.4-v3.6.7 (most recent atm)\r\n\r\nSvelte REPL\r\n\r\n**Severity**\r\nJust annoying.\r\n\r\n**Additional context**\r\nChanges between v3.6.3 and v3.6.4:\r\nhttps://github.com/sveltejs/svelte/compare/v3.6.3...v3.6.4\r\n","state":"open","updated_at":"2021-06-28T11:28:48Z","created_at":"2019-07-21T21:00:46Z","creator_user_login":"henrikhermansen"}
{"number":3257,"title":"Allow binding validity on input, select and textarea elements","body":"I would like to add a read-only binding for `validity` property ([ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)) on form elements.\r\n\r\nFor Example\r\n```html\r\n<script>\r\n  let email;\r\n  let emailValidity = {};\r\n</script>\r\n\r\n<input type=\"email\" required bind:value={email} bind:validity={emailValidity}>\r\n\r\nEmail is valid: {emailValidity.valid}\r\n```\r\n\r\nI already implemented the [changes on my fork](https://github.com/sveltejs/svelte/compare/master...bbuhler:input-validity-binding?expand=1). I wanted to create a PR but there it mentions if my PR implements a new feature I should raise an issue to discuss it before. So I here it is.","state":"open","updated_at":"2021-12-27T12:22:54Z","created_at":"2019-07-17T10:29:25Z","creator_user_login":"bbuhler"}
{"number":3203,"title":"Svelte suspense (request for comments)","body":"After reading [this issue](https://github.com/sveltejs/svelte/issues/1736), I came up with a [Suspense component for Svelte](https://github.com/brucou/svelte-suspense-component), replicating the behaviour of [React Suspense](https://css-tricks.com/reacts-experimental-suspense-api-will-rock-for-fallback-ui-during-data-fetches/). No React Cache, no throwing promises, no modifying your component to fit a use case, just Svelte component composition. A demo is available in the [corresponding GitHub repository](https://github.com/brucou/svelte-suspense-app). Note that I could not have the demo running in Svelte REPL due to some issues with loading the `axios` package.\r\n\r\n![svelte suspense demo](https://github.com/brucou/svelte-suspense-app/raw/master/assets/suspense%20demo.gif)\r\n\r\nThe behaviour of the Suspense component is implemented with the [Kingly](https://github.com/brucou/kingly) state machine library. The summary of 'findings' can be found [here](https://brucou.github.io/documentation/v1/examples/svelte%20suspense.html). For info, here is the underlying state machine specifying the suspense behaviour:\r\n\r\n![suspense machine](https://github.com/brucou/svelte-suspense-app/raw/master/assets/suspense%20machine.png)\r\n\r\nThe demo showcases the API and I will quickly illustrate it here. The demo consists of loading a gallery of images. The suspense functionality is applied twice: when fetching the remote data containing the image URLs, and then for each image which is subsequently downloaded. While the remote data is fetched, a spinner will display if fetching takes more than a configurable time. Similarly, images placeholder will also display a spinner if downloading the image takes more than a configurable time.\r\n\r\nFirstly, the suspense functionality for the remote data fetching is implemented as follows:\r\n\r\n```js\r\n<script>\r\n ... a bunch of imports\r\n\r\n  const iTunesUrl = `https://itunes.apple.com/in/rss/topalbums/limit=100/json`;\r\n\r\n  function fetchAlbums(intents){\r\n      const {done, failed} = intents;\r\n      axios.get(iTunesUrl)\r\n           .then(res => res.data.feed.entry)\r\n           .then(done)\r\n           .catch(failed)\r\n    }\r\n\r\n</script>\r\n\r\n<div class=\"app\">\r\n    <Header />\r\n    <div class=\"albums\">\r\n        <Suspense task={fetchAlbums} let:data={albums} timeout=10>\r\n            <div slot=\"fallback\" class=\"album-img\">\r\n                <img alt=\"loading\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\r\n            </div>\r\n            <div slot=\"error\" class=\"album-img\">\r\n              <h1>ERROR!</h1>\r\n            </div>\r\n            <LazyLoadContainer>\r\n                {#if albums}\r\n                  {#each albums as album, i}\r\n                  <LazyLoad id=\"{i}\">\r\n                      <Album {album} />\r\n                  </LazyLoad >\r\n                  {/each}\r\n                {/if }\r\n            </LazyLoadContainer>\r\n        </Suspense>\r\n    </div>\r\n</div>\r\n```\r\n\r\nNote that the fetch task and minimum time (`timeout`) before displaying the spinner is passed as parameters of the `Suspense` component, while the fetched data is exposed to the slot component through the `data` property. Note also how the fetching function is passed the `done` and `failed` callback to signal successful completion or error of the remote fetching. \r\n\r\nThe fallback slot is displayed when the timeout is expired. The error slot is displayed when fetching the data encounters an error.\r\n\r\nSecondly, the `Album` component suspense functionality is implemented as follows:\r\n\r\n```js\r\n<ul class=\"album\">\r\n    <li class=\"album-item\">\r\n        <Suspense let:intents={{done, failed}} timeout=0>\r\n            <div slot=\"fallback\" class=\"album-img\">\r\n                <img alt=\"loading\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\r\n            </div>\r\n            <a href={link} target=\"blank\" class=\"link\">\r\n                <img class=\"album-img\"\r\n                     on:load={done}\r\n                     src={image}\r\n                     alt={'itunes' + Math.random()} />\r\n            </a>\r\n        </Suspense>\r\n    </li>\r\n    <li class=\"title album-item\">\r\n        <a href={link} target=\"blank\" class=\"link\">\r\n            {title.slice(0, 20)}..</a></li>\r\n    <li class=\"price album-item\">Price:{price}</li>\r\n    <li class=\"date album-item\">Released:{formatDate(date, \"MMM Do YY\")}</li>\r\n</ul>\r\n```\r\n\r\nThis time the `Suspense` component passes `done` and `failed` callbacks to its children slots. When the image is loaded, the `done` callback is run.\r\n\r\nThis works well and I believe the API separates well the suspense functionality or concern from the slots. What we basically have is parent and children components communicating through events, except that the event comes included in the callback. As the demo shows, there is also no issues with nesting `Suspense` components.\r\n\r\nThis GitHub issues has two purposes:\r\n- gettign feedback on the API\r\n- giving feedback on Svelte slot composition\r\n\r\nThe first point is more about hearing from you guys. \r\n\r\nAbout the second point:\r\n- slot composition is a powerful and flexible mechanism, specially in conjunction with scoped slots\r\n- however, a few things would be nice:\r\n  1. ~~being able to operate on the slot as if it were a regular html element. This mean the ability to style a slot with classes or possibly other attributes (`<slot class='...' style='...'> </slot>`).~~ Add some extra attributed to cover **generic** needs, i.e. needs that are **independent of the content of the slot**. To implement the suspense functionality I had to resort to hide the default slot with `display:none`. Unfortunately to do that I had to wrap the slot around a `div` element, which can have side effects depending on the surrounding css. A syntax like `<slot show={show}> </slot>` would have been ideal. After thinking some more, I think that slot cannot be considered as regular HTML elements but as an abstract container for such elements. The operations allowed on slots should be operation on the container, not on the elements directly. Styling or adding classes an abstract container does not carry an obvious meaning, as the container is not a DOM abstraction. The current operations I see existing on the container are `get` (used internally by Svelte to get the slot content), `show` could be another one. The idea is that if you have a Container type, and a Element type, your container is `C<E>`. If you do operations that are independents of `E`, you can do only a few things like use E (`get`), ignore E (don't use the slot), repeat E (not sure how useful that would be), conditionally use E (`show`, of type Maybe<E>). Using any knowledge about the  `E`  I think leads to crossing abstraction boundaries which might not be a good thing future-wise.\r\n  2. [having slots on component just like if components were regular elements](https://github.com/sveltejs/svelte/issues/2080)\r\n  3. having dynamic slots. In the `Suspense` component, I use `if/then/else` to pick up the slot to display, which works fine (see code below). It would be nice however to have `<slot name={expression ...}>`:\r\n\r\n```html\r\n{#if stillLoading }\r\n  <slot name=\"fallback\" dispatch={next} intents={intents} ></slot>\r\n{:else if errorOccurred }\r\n  <slot name=\"error\" dispatch={next} intents={intents} data={data}></slot>\r\n{:else if done }\r\n  <slot dispatch={next} intents={intents} data={data}></slot>\r\n{/if}\r\n<div class=\"incognito\">\r\n  <slot dispatch={next} intents={intents} ></slot>\r\n </div>\r\n```\r\n\r\nI am not really strong about the dynamic slots. It might add some complexity that may be best avoided for now. The first and second point however I believe are important for abstraction and composition purposes. My idea is to use Svelte components which only implement behaviour and delegate UI to their children slots (similar to [Vue renderless components](https://css-tricks.com/building-renderless-vue-components/)). Done well, with this technique you end up with logic in logic components, and the view in stateless ui elements. \r\n\r\nThe technique has additionally important testing benefits (the long read is [here](https://medium.com/dailyjs/user-interfaces-you-can-trust-with-state-machines-49de7fa138a6)). \r\n\r\nFor instance the behaviour of the `Suspense` state machine can be [tested independently of Svelte](https://github.com/brucou/suspense-fsm/blob/master/tests/oracle-specs.js) - and the browser, and with using a state machine, tests can even be automatically generated (finishing that up at the moment). Last, the state machine library can compile itself away just like Svelte does :-) (the implementation is actually using the [compiled machine](https://github.com/brucou/suspense-fsm/blob/master/src/compiled-fsm.js)).\r\n\r\nAbout testing stateless components, Storybook can be set to good purpose. What do you Svelte experts and non experts think? I am pretty new with Svelte by the way, so if there is any ways to do what I do better, also please let me know.\r\n","state":"open","updated_at":"2023-04-27T20:28:25Z","created_at":"2019-07-09T02:10:16Z","creator_user_login":"brucou"}
{"number":3195,"title":"Site: Some parts of the API docs expect readers to have read previous sections","body":"It seems that some parts of the API docs refer back to previous API documentation. This assumes that readers have read the whole thing or are reading in order which is highly unlikely considering it is a reference.\r\n\r\nThe the [component bindings](https://svelte.dev/docs#bind_component) section was brought to my attention (emphasis mine):\r\n\r\n>Components **_also_** support bind:this, allowing you to interact with component instances programmatically.\r\n\r\n\r\nThis is a reference to element bindings (I think, it isn't actually very clear) but there is no link back to that section.\r\n\r\nI'm guessing this happens in a few places though, I will try to read through and see where else we are doing it. \r\n\r\nWe need to either link back to the relevant section or make the documentation entries 'standalone'. I think it makes sense for API Reference entries to have enough information to be useful on their own. This will be one of the places people come when they have a specific problem that they will then search or scan for, making them jump to other parts of the Docs is probably leading to a more frustrating experience.","state":"open","updated_at":"2021-12-24T10:28:15Z","created_at":"2019-07-07T16:54:38Z","creator_user_login":"pngwn"}
{"number":3125,"title":"Function hoisting is too aggressive","body":"Functions that contain instance data are hoisted; see [REPL](https://svelte.dev/repl/67774053f6ed44df9cba94c3a7505805?version=3.6.1).\r\n\r\nNote that the DOM update code is generated even though the variable never gets invalidated.\r\n\r\nTangentially related to #2731.","state":"open","updated_at":"2021-06-28T11:30:05Z","created_at":"2019-06-27T03:55:48Z","creator_user_login":"mrkishi"}
{"number":3105,"title":"Change body class via <svelte:body />","body":"It's just an idea, but it'll be very convenient if we'll able to switch classes on body element like this:\r\n\r\n```html\r\n<svelte:body class:profile={isProfilePage} />\r\n```","state":"open","updated_at":"2023-06-22T18:10:42Z","created_at":"2019-06-25T09:55:01Z","creator_user_login":"PaulMaly"}
{"number":3080,"title":"Feature request: Option to trim whitespace between tags","body":"# Problem\r\nSvelte's handling of whitespace in templates is supposed to be consistent with HTML. However, the way HTML handles whitespace makes styling of inline blocks notoriously difficult in some cases, with [no satisfactory workaround](https://css-tricks.com/fighting-the-space-between-inline-block-elements/). There are basically two types of workarounds, each with their own frustrating problems:\r\n\r\n1) Either you change your styling so it removes the spaces. This is often requires complicated, unintuitive and fragile workarounds in your CSS. Most of the strategies I'm aware of can have unintended consequences in some situations.\r\n2) Or you change the markup to remove all the spacing. This is possible, but now you are severely impacting the readability of your component to achieve a certain styling.\r\n\r\nStrategy 2 is arguably even trickier in a Svelte template, where spaces may or may not appear inside other components or slots, or around `{#if}` or `{#each}` blocks. Blocks appear to already have some heuristics to avoid unnecessary spaces, but that also makes it harder to predict where spaces will need to be avoided or not.\r\n\r\nI'm used to JSX, where [whitespace is automatically trimmed](https://reactjs.org/docs/jsx-in-depth.html#string-literals-1), and you have to insert it manually with `{\" \"}` when you want it. While this can cause its own occasional oddities, it's always much easier to add spaces explicitly than to remove them, and it allows the formatting of a template to be optimised for readability.\r\n\r\n# Suggestion\r\nIt would be very helpful if there was a way to opt in to similar behaviour for a Svelte component. I think the natural way to do it would be by using [`<svelte:options>`](https://svelte.dev/docs#svelte_options):\r\n\r\n```html\r\n<svelte:options trimWhitespace={true} />\r\n```\r\n\r\nI don't understand the details of how whitespace is handled in the compiler, but I *think* the compiler would just need to remove any calls to `space()` from `svelte/internal`.\r\n","state":"open","updated_at":"2023-07-25T01:18:44Z","created_at":"2019-06-23T11:14:14Z","creator_user_login":"trbrc"}
{"number":3053,"title":"Docs: Add an example of modifying complex store data","body":"People seems to be asking at regular intervals about how to update complex data in a store and, while it is relatively straight forward, we could add an example somewhere. Maybe in the tutorial.","state":"open","updated_at":"2022-01-22T11:49:56Z","created_at":"2019-06-19T17:21:47Z","creator_user_login":"pngwn"}
{"number":3049,"title":"Feature request: event handlers with only modifiers, e.g. on:click|stopPropagation","body":"stopPropagation can be useful on its own, as a way of catching \"cancel when user clicks away\" functionality and preventing it from being triggered by clicks that originate within the focused thing itself.\r\n\r\nIt would be nice to be able to use the event modifier without having to supply a \"noop\" handler, e.g.\r\n\r\n```html\r\n<div on:click|stopPropagation>\r\n    ...\r\n</div>\r\n```","state":"open","updated_at":"2022-02-21T04:21:20Z","created_at":"2019-06-19T13:20:01Z","creator_user_login":"ghost"}
{"number":2979,"title":"Idle until urgent, what about a queue for improving render sense of speed?","body":"Dear @Rich-Harris your work with Svelte is amazing.\r\nI consider you a genius and an innovator like _Leonardo Da Vinci_ or _Henry Ford_.\r\nWith **Svelte 3** you gave us a bit of that fresh air that we missed for so long.\r\n\r\nSo first of all I want to give you an immense and melodious thanks.\r\n\r\n---\r\n\r\nAnd now I would like your holy opinion about a doubt, a desire that has gripped me for a long time.\r\n\r\n## **A DOUBT, A DESIRE**\r\n\r\nLet's say I have a Svelte 3 SPA (single page application) and a router (svero, navaid, svelte-routing, universal or else).\r\n\r\nWhen I move from one page to another Svelte is very fast, but when there are so many components I feel \"the weight\", \"the slowness\" of rendering the entire \"page\".\r\n\r\nIf I use the Chrome \"Performance\" tab > \"CPU throttling\" > \"6x\" or \"4x\" I can see a small, annoying \"delay\", \"lag\" before the new page rendering. All this without CSS or JS animations.\r\n\r\n\"Simply\" the page is too full of components that are all needed.\r\n\r\nAnd on those components mounting, there's a lot going on in background (query mostly and computation).\r\n\r\nThose components are needed but aren't **immediately** needed.\r\n\r\nWhat I need immediately _instead_ is the sense of speed of my SPA: to navigate from one page to another (_even if fake, empty_) must be fast!\r\n\r\nAn example (although not 100%) could be YouTube, which has done a good job on this.\r\n\r\nWhat I'd like to have is:\r\n\r\n- click from a page to another\r\n- immediately render **first of all** the new page, even without any component and maybe just a text \"Loading...\"\r\n- **and then** \"slowly\" render everything else\r\n\r\nI tried something like this:\r\n\r\n```html\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n\r\n  import { doQuery } from \"../queries\";\r\n\r\n  let canRender = false;\r\n\r\n  onMount(() => {\r\n    setTimeout(() => {\r\n      setTimeout(() => {\r\n        canRender = true;\r\n      });\r\n    });\r\n  });\r\n</script>\r\n\r\n<div>\r\n  {#if canRender}\r\n    {#await $doQuery}\r\n      Loading...\r\n    {:then result}\r\n      {#each result as player}\r\n        <div>{player.name}</div>\r\n      {:else}\r\n        No player\r\n      {/each}\r\n    {/await}\r\n  {:else}\r\n    Loading...\r\n  {/if}\r\n</div>\r\n```\r\n\r\nI tried also with `tick`:\r\n\r\n```html\r\n<script>\r\n  import { onMount, tick } from \"svelte\";\r\n\r\n  import { doQuery } from \"../queries\";\r\n\r\n  let canRender = false;\r\n\r\n  onMount(async () => {\r\n    await tick();\r\n    canRender = true;\r\n  });\r\n</script>\r\n\r\n<div>\r\n  {#if canRender}\r\n    {#await $doQuery}\r\n      Loading...\r\n    {:then result}\r\n      {#each result as player}\r\n        <div>{player.name}</div>\r\n      {:else}\r\n        No player\r\n      {/each}\r\n    {/await}\r\n  {:else}\r\n    Loading...\r\n  {/if}\r\n</div>\r\n```\r\n\r\nBut I don't know if I'm doing well.\r\n\r\nAnd maybe now the problem is just \"a tick\" away from the first render and then all the renderings happen together at the same time again (am I wrong?).\r\n\r\nSince Svelte is perfect I think there might be another different way to deal with this.\r\n\r\nI read about:\r\n\r\n- https://philipwalton.com/articles/idle-until-urgent/ and\r\n- https://medium.com/@alexandereardon/dragging-react-performance-forward-688b30d40a33\r\n\r\nSince your brain is among the most prosperous in the world, do you think it's possible to introduce something like an \"idle-task-rendering-automagically-queue-for-components-and-navigation\" in Svelte?\r\n\r\nI obviously propose myself as an undying and immediate beta-tester and wiki-docs-writer.\r\n\r\nThanks again for your commitment.\r\n\r\n---\r\n\r\nThis message is also addressed to people of very high value like @timhall, @jacwright and @lukeed.\r\n\r\nSomething wonderful can come from your minds.\r\n\r\nThanks to you too for all your wonderful work.","state":"open","updated_at":"2021-12-27T07:25:35Z","created_at":"2019-06-08T18:56:22Z","creator_user_login":"frederikhors"}
{"number":2968,"title":"{#range ...} block","body":"Never thought I'd say this but I think we need range blocks — we've had so many questions along the lines of 'how do I iterate *n* times?'.\r\n\r\nThe usual answer is one of these...\r\n\r\n```html\r\n{#each Array(n) as _, i}\r\n  <p>{i}</p>\r\n{/each}\r\n```\r\n\r\n```html\r\n{#each { length: n } as _, i}\r\n  <p>{i}</p>\r\n{/each}\r\n```\r\n\r\n...but neither is particularly satisfying.\r\n\r\nAnyway, we're a compiler, so we can add this for free, if we want to. The only real question is syntax. We could emulate Ruby's range operator:\r\n\r\n```html\r\n<!-- 1,2,3,4,5 -->\r\n{#range 1..5 as n}\r\n  {n}\r\n{/range}\r\n\r\n<!-- 1,2,3,4 -->\r\n{#range 1...5 as n}\r\n  {n}\r\n{/range}\r\n```\r\n\r\n`{#range 5 as n}` could be shorthand for `{#range 0...5 as n}`, perhaps.\r\n\r\nComplications: Ruby's operator also handles decrementing ranges (`5...1`) and strings (`'a'...'z'` and `'z'...'a'`), so if we were to steal that syntax then presumably we should also support those.\r\n\r\nAny thoughts?","state":"open","updated_at":"2023-07-05T21:50:24Z","created_at":"2019-06-07T13:22:12Z","creator_user_login":"Rich-Harris"}
{"number":2886,"title":"simplify safe_not_equal and not_equal?","body":"I was doing some profiling the other day and was mildly surprised to find that a lot of the time spent in Svelte — possibly even most? — was in `safe_not_equal`. It occurs to me that we might see some performance gains by changing the implementations thusly:\r\n\r\n```diff\r\n+function is_mutable(type) {\r\n+\treturn type === 'object' || type === 'function';\r\n+}\r\n+\r\nexport function safe_not_equal(a, b) {\r\n-\treturn a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\r\n+\treturn a !== b || a && is_mutable(typeof a);\r\n}\r\n\r\nexport function not_equal(a, b) {\r\n-\treturn a != a ? b == b : a !== b;\r\n+\treturn a !== b;\r\n}\r\n```\r\n\r\nThe downside is that setting `x` to `NaN` would trigger an update if `x` was already `NaN`. But I'm pretty sure that's a small enough edge case that we needn't worry about it","state":"open","updated_at":"2021-12-28T14:54:34Z","created_at":"2019-05-27T16:03:27Z","creator_user_login":"Rich-Harris"}
{"number":2879,"title":"Media API rough edges","body":"Hi, trying to play around Svelte, I'm having an issue with the media elements bindings, specifically `buffered`.\r\n\r\nREPL repro: https://svelte.dev/repl/021f1c1d512e49248347bfe746f037ad?version=3.4.3\r\n\r\nBasically my issue is that I'm trying to setup a reactive variable that depends on the `buffered` property, but that fails on load, because `buffered` is not yet instantiated? (maybe?)\r\n\r\nLike this (variables initialized outside the block):\r\n```js\r\n  $: {\r\n    progressBarPercent = (currentTime / duration) * 100;\r\n    loadedPercent = buffered.end(buffered.length - 1) / duration;\r\n  }\r\n```\r\n\r\nOn my machine I'm getting a: `proxy.js:135 TypeError: Cannot read property 'end' of undefined` with this kind of output:\r\n```js\r\n$$self.$$.update = ($$dirty = { currentTime: 1, duration: 1, buffered: 1 }) => {\r\n  if ($$dirty.currentTime || $$dirty.duration || $$dirty.buffered) { {\r\n  $$invalidate('progressBarPercent', progressBarPercent = (currentTime / duration) * 100);\r\n  $$invalidate('loadedPercent', loadedPercent = buffered.end / duration);\r\n  } }\r\n};\r\n```\r\n\r\nI've been able to find a workaround that is simply wrapping the `loadedPercent` assignment in an if block and then, the updating behavior seems correct.\r\n\r\nLooking in the repo I've found this #832 but this `TimeRanges` modification doesn't seem to happen in the current version, and if I were, an update to the docs would probably be nice.\r\n\r\nAm I doing something wrong or it is a bug?","state":"open","updated_at":"2021-12-27T02:49:23Z","created_at":"2019-05-27T08:47:13Z","creator_user_login":"prsdta"}
{"number":2864,"title":"Build Error if multiple incompatible versions of svelte are detected","body":"I ran into [strange issues](https://github.com/sveltejs/svelte/issues/2862) that were due to multiple versions of svelte (3.4.2 & 3.2.2) being built.\r\n\r\nIt would be useful to have a build error if multiple incompatible versions of svelte are being used.","state":"open","updated_at":"2021-12-28T14:55:41Z","created_at":"2019-05-25T16:39:26Z","creator_user_login":"btakita"}
{"number":2845,"title":"Run transitions on initial rendering on a per-transition basis","body":"I know that by default transitions do not run on the initial rendering (which is nice!) and that I can turn them on globally by setting `intro: true` when [rendering the app](https://svelte.dev/docs#Client-side_component_API).\r\n\r\nSometimes I can be handy to have an initial transition to create emphasize, so I am wondering if there's a way to selectively turn on initial transitions on a per-transition basis.\r\n\r\nI am thinking about something like this:\r\n\r\n```html\r\n{#if visible}\r\n  <div transition:fly={{ y: -20, init: true }}>hi there!</div>\r\n{/if}\r\n```\r\n\r\nThis is not a pressing issue as it's easy to work around the approach but it'd be nice to not have to add fake state to achieve this. Right now I am doing the following or is that not necessary?\r\n\r\n[See it live](https://svelte.dev/repl/5290dd52afcc428ab8cc2f48ed9843dc?version=3.4.2)\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  import Test from './Test.svelte';\r\n  let visible = true;\r\n</script>\r\n\r\n<label><input type='checkbox' bind:checked={visible}> visible</label>\r\n<Test {visible}/>\r\n\r\n\r\n<!-- Test.svelte -->\r\n<script>\r\n  import { onMount } from 'svelte';\r\n  import { fly } from 'svelte/transition';\r\n\r\n  export let visible = false;\r\n  let init = false;\r\n\t\r\n  onMount(() => {\r\n    init = true;\r\n  });\r\n</script>\r\n\r\n{#if init && visible}\r\n  <div transition:fly={{ y: -20 }}>hi there!</div>\r\n{/if}\r\n```","state":"open","updated_at":"2023-02-04T20:37:28Z","created_at":"2019-05-22T14:54:42Z","creator_user_login":"flekschas"}
{"number":2837,"title":"on:* attribute to delegate all events","body":"An `on:` attribute, or something similar, would make it convenient to delegate all events from a component or html tag, \r\n\r\n```html\r\n// All events on a are delegated through the component.\r\n<a on:>My Link</a>\r\n```","state":"open","updated_at":"2023-08-17T14:58:07Z","created_at":"2019-05-21T20:30:40Z","creator_user_login":"btakita"}
{"number":2778,"title":"afterUpdate docs should mention recursion protection","body":"In src/internal/scheduler.js, `flush()` protects against recursion caused by `afterUpdate` with its `seen_callbacks` variable.\r\n\r\nThis may lead to surprising behaviour, if the user depends on multiple but finite invocations of their `afterUpdate` callback, so it should be documented.","state":"open","updated_at":"2021-12-26T22:02:29Z","created_at":"2019-05-16T05:18:29Z","creator_user_login":"chris-morgan"}
{"number":2723,"title":"Error compiling component when <option> without value attribute contains <slot />","body":"<!--\r\nThanks for raising an issue! (For *questions*, we recommend instead using https://stackoverflow.com and adding the 'svelte' tag.)\r\n\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Make sure you include information about the browser, and which version of Svelte you're using\r\n\r\nReproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n-->\r\nA component with an `<option>` tag that has no `value` attribute and contains another tag, such as `<slot />`, will refuse to compile with a vague error:\r\n\r\n```\r\n/* Error compiling component\r\n\r\nundefined is not an object (evaluating 'this.node.start')\r\n\r\n*/\r\n```\r\n\r\nReproduction: https://svelte.dev/repl/676c6c2d7a8a4684a261935c488b763a?version=3.20.1\r\n\r\nChanging it to `<option value><slot/></option>` is enough to make it work.\r\n","state":"open","updated_at":"2021-06-28T11:34:31Z","created_at":"2019-05-08T21:03:25Z","creator_user_login":"trbrc"}
{"number":2671,"title":"<svelte:window bind:activeElement>","body":"Apparently we can track this using *captured* `focus` events:\r\n\r\nhttps://svelte.dev/repl?version=3.1.0&gist=83b2c5fc64d3eb5fb5fa0691e47bbce8\r\n\r\nWhether it belongs on `<svelte:window>` isn't totally clear, since it's `document.activeElement` rather than `window.activeElement`. Maybe we'd need a new `<svelte:document>` instead.\r\n\r\ncc @mrkishi ","state":"open","updated_at":"2023-07-30T10:35:11Z","created_at":"2019-05-04T13:09:20Z","creator_user_login":"Rich-Harris"}
{"number":2659,"title":"Resetting html form doesn't trigger input bindings","body":"I'm honestly not sure if this is something that's even possible to fix, but I just noticed that when using a `<button type=\"reset\">` on a form value bindings aren't changed accordingly.\r\n\r\nREPL: https://svelte.dev/repl?version=3.1.0&gist=5d0ced9c95afbdac3491bfb69bc591aa","state":"open","updated_at":"2023-07-03T00:49:21Z","created_at":"2019-05-02T20:47:21Z","creator_user_login":"jacobmischka"}
{"number":2588,"title":"Option to set slots when create component instance","body":"In svelte 2 it was possible to pass slots option when creating new component:\r\n```\r\nnew Component({\r\n      target: element,\r\n      slots: { slot_name1: element1, slot_name2: element2, ... },\r\n});\r\n\r\n```\r\nIn svelte 3 slots options seems doesn't work. And there is no way to set slots after component instance is created.\r\n\r\nThis is needed to properly integrate svelte components that using slots into other frameworks.\r\n","state":"open","updated_at":"2023-06-28T15:19:36Z","created_at":"2019-04-27T12:44:21Z","creator_user_login":"creaven"}
{"number":2546,"title":"Yes but does it scale?","body":"Another blog post that really needs to be on the site. Switched-on developers frequently say 'I get that the imperative update code is faster than VDOM diffing or whatever, and I understand that there's no need for a big runtime, but surely the incremental cost of a component is significantly larger? Doesn't that mean Svelte hits an inflection point where the bundle size is larger than if we'd just used a traditional framework?'\r\n\r\nIt's a good question that deserves a good answer. The bullet point version is this:\r\n\r\n* Theoretically, yes there is an inflection point. *Where* that inflection point is is the only thing that really matters. In practice, you're unlikely to hit that inflection point on any given page of your app, as long as you're using code-splitting (which Sapper gives you OOTB)\r\n* The incremental cost of Svelte components isn't that high. The code is designed to be readable, but also to minify really well, and it makes use of a shared internal library\r\n* The initial bundle size is the one that really matters. If subsequent bundles are *slightly* chunkier than they need to be, it's not the end of the world — because by that point we have service workers and preloading and so on\r\n* The beauty of the compiler-centric approach is that we can vary the target output. An example is generating string-concat code for SSR. If it ever became a real problem, we could investigate approaches like Glimmer's, where we generate bytecode instead of raw JS. We could even have different approaches within a single app — imperative JS for a fast initial load, then load the VM and use bytecode for subsequent navigations\r\n* Bundle size is only one facet of the Svelte experience\r\n\r\nOf course, the best way to show this is with demo apps, such as updating the RealWorld app.","state":"open","updated_at":"2021-06-27T09:54:28Z","created_at":"2019-04-24T12:52:31Z","creator_user_login":"Rich-Harris"}
{"number":2509,"title":"Why not JSX?","body":"I really need to write this blog post, because I'm bored of answering this question","state":"open","updated_at":"2021-06-28T11:38:26Z","created_at":"2019-04-23T11:49:27Z","creator_user_login":"Rich-Harris"}
{"number":2464,"title":"How Svelte works","body":"As of 0ff6f5b0b094e4c7e6e77f28d2211e22d7a416c0, the homepage links to the [announcement blog post](https://svelte.dev/blog/svelte-3-rethinking-reactivity). It would be better if the link after this bit...\r\n\r\n> Svelte is a radical new approach to building user interfaces. Whereas traditional frameworks like React and Vue do the bulk of their work in the *browser*, Svelte shifts that work into a *compile step* that happens when you build your app.\r\n>\r\n> Instead of using techniques like virtual DOM diffing, Svelte writes code that surgically updates the DOM when the state of your app changes.\r\n\r\n...took you to a 'How Svelte works' blog post with diagrams and whatnot instead. This is something people have asked for in the past","state":"open","updated_at":"2021-06-28T11:38:42Z","created_at":"2019-04-21T20:29:13Z","creator_user_login":"Rich-Harris"}
{"number":2374,"title":"More aggressive innerHTML optimization detection","body":"Svelte will fallback to using `innerHTML` if a block of markup is entirely static. This results in much less generated code. I noticed that if a single item in that block is dynamic, regardless of its position, the output is deopt'd and it falls back to just using `element` and `append` for everything.\r\n\r\n\r\nHere is [an example of having a single dynamic element in a list](https://v3.svelte.technology/repl?version=3.0.0-beta.22&gist=23fac9448b07f06ff5352bf47b3068e1\r\n). This can potentially result in a lot more generated code, creating local variables in `create_fragment` that don't really need to exist.\r\n\r\nInstead of falling back to the imperative DOM APIs could svelte detect if using a combination of both would be beneficial? In this example you could still use `innerHTML` to define the `n - 1` list elements and then use `element` / `append` for the one dynamic tag. This seems like it would be easiest when the dynamic element is the first or last child, but I imagine you could also do this with `element.innerHTML += \"...\"`\r\n\r\n ","state":"open","updated_at":"2022-02-05T03:42:22Z","created_at":"2019-04-08T02:58:25Z","creator_user_login":"aweary"}
{"number":2308,"title":"`bind:group` does not work with nested components","body":"I'm trying to bind a store variable to group of checkboxes and it works till I move checkbox into a separate component, after that only one checkbox can be chosen at a time, here's an example from repl: https://gist.github.com/imbolc/e29205d6901d135c8c1bd8c3eec26d67","state":"open","updated_at":"2022-01-06T13:38:38Z","created_at":"2019-03-25T07:12:20Z","creator_user_login":"imbolc"}
{"number":2226,"title":"Some way of binding bidirectionally to all props in an object, capturing all custom events.","body":"There seems to be no way of bidirectionally binding to all of a component's arbitrary props. \r\n\r\n```html\r\n<!-- pass arbitrary props, already there -->\r\n<svelte:component this={someComponent} {...itsProps} />\r\n\r\n<!-- get changes to arbitrary props, missing, various potential syntaxes follow -->\r\n<svelte:component this={someComponent} bind:{...itsProps} />\r\n\r\n<svelte:component this={someComponent} bind:$$props />\r\n\r\n<svelte:component this={someComponent} {...itsProps} on:propsChanged={propHandler} />\r\n```\r\n\r\nI would say it could/should also be available outside of `<component/>` to enable generic handling of children.\r\n\r\nThis would be useful for updating a property tree of components, which could be useful for serializing and deserializing component trees. Also for the particular situation of svelte-subdivide, which would benefit from persisting a prop configuration.\r\n\r\nFor example, at present [svelte/svelte-subdivide](https://github.com/svelte/svelte-subdivide) can receive a layout property specifying a layout geometry that will instantiate the same component in each Pane, but you can't specify the properties of this object, much less for each indivdual instance.\r\n\r\nI'm adding this capability to [it](https://github.com/saabi/svelte-subdivide/tree/child-props). In that version, you can pass arbitrary component props individually to each pane. \r\n\r\n_However_, I can't capture those arbitrary props later on if they change.\r\n\r\nIt could also be useful to capture all custom events in a similar fashion, I have no need for it at present and so far can only think of its usefulness for debugging perhaps.\r\n\r\n## Considerations\r\n\r\nShould properties from grandchild components be available for serialization as well? How would one choose child props, or props from all descendants?\r\n\r\n## Example\r\nThe closest I can achieve so far: \r\n\r\nhttps://v3.svelte.technology/repl?version=3.0.0-beta.15&gist=52549b8577ff8f3f47cd25139877d371\r\n\r\nBut in the example, I'm forced to add logic to Component3.svelte, which ideally would be a generic component with no special custom logic.","state":"open","updated_at":"2021-08-01T00:55:41Z","created_at":"2019-03-15T19:29:00Z","creator_user_login":"saabi"}
{"number":2134,"title":"Proposal: Metadata to components for documentation and creation of default behaviors (Svelte3)","body":"## Why\r\n\r\nI believe that documenting components is an important process for the proper re-usability of components. This can only be done if the code is the source of truth I think.\r\nThat's why I would like to see metadata around the API bits exposed by Svelte components.\r\n\r\n\r\n## Properties\r\n\r\n```\r\n<script>\r\n  export let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n```\r\n\r\nProperties need the following data to be documented:\r\n* Exposed (done by the export keyword)\r\n* Required\r\n* Default (done by init)\r\n* Description of the property\r\n* Type(s)\r\n* Validation\r\n\r\nSome of these metadata:\r\n- Required\r\n- Type\r\n- Validation\r\n\r\nCan automatically reject invalid input data in property with very pretty much no code\r\n\r\nWhat is available elsewhere:\r\n- Stencil decorators @Prop() https://stenciljs.com/docs/properties/\r\n- Facebook (React) prop-types https://github.com/facebook/prop-types\r\n\r\n## Slots\r\n\r\nSlots are part of the API of the component exposed to the user/dev.\r\n\r\nSlots would need the following metadata at least:\r\n* Slot Name (option)\r\n* Description\r\n* Default value (Just the innerHTML of the `<slot>` basicaly)\r\n\r\n## Events\r\n\r\nI'm not too familiar with events in Svelte, but again it's part of the API exposed by the component.\r\n\r\n* Event name\r\n* Description\r\n* Params[]\r\n\r\n## CSS custom properties\r\n\r\nMaybe optional. OK.\r\n\r\nBut they go through Shadow DOM fences. Used to style compoments from the outside.\r\nWill likely be replace by `::part` spec coming up...\r\n\r\n","state":"open","updated_at":"2021-12-26T13:30:19Z","created_at":"2019-02-25T17:17:35Z","creator_user_login":"georges-gomes"}
{"number":1857,"title":"Await expressions","body":"Just want to capture a thought I had the other day: it might be neat to have inline `await` expressions in templates. We already have `{#await ...}` blocks but they're overkill in some situations — you have to declare a name for the resolved value, which you might only be using once, and you might not need to worry about error states depending on what you're doing.\r\n\r\nImagine something like this (v3 syntax):\r\n\r\n```html\r\n<script>\r\n  async function fibonacci(n) {\r\n    return await fibonacciWorker.calculate(n);\r\n  }\r\n</script>\r\n\r\n<input type=number bind:value={n}>\r\n<p>The {n}th Fibonacci number is {await fibonacci(n)}</p>\r\n```\r\n\r\nIt would integrate with [Suspense](https://github.com/sveltejs/svelte/issues/1736), so it'd be convenient for doing this sort of thing (where `loadImage` resolves to its input, but only after ensuring that the image is loaded):\r\n\r\n```html\r\n<script>\r\n  import loadImage from './utils.js';\r\n</script>\r\n\r\n{#each thumbnails as thumbnail}\r\n  <img alt={thumbnail.description} src=\"{await loadImage(thumbnail.src)}\">\r\n{/each}\r\n```\r\n\r\nOf course, you'd need some way to have placeholder content, for situations where you're not using Suspense. Maybe this?\r\n\r\n```html\r\n<p>The {n}th Fibonacci number is {await fibonacci(n) or '...'}</p>\r\n```","state":"open","updated_at":"2022-11-10T19:21:02Z","created_at":"2018-11-20T14:03:13Z","creator_user_login":"Rich-Harris"}
{"number":1831,"title":"Chrome video autoplay bug when hydrating server-rendered component","body":"If a component contains an autoplaying video, like this:\r\n\r\n```html\r\n<video autoplay loop muted>\r\n    <source src=\"https://example.com/video.mp4\" type=\"video/mp4\">\r\n</video>\r\n```\r\n\r\nand that component is server-rendered and then hydrated in Chrome, the video starts playing for around 500ms until hydration kicks in, then the video pauses.\r\n\r\nThis only happens with server-rendered components that are hydrated in the browser. Disabling Javascript or server-rendering fixes the issue.\r\n\r\nIf I add the line\r\n\r\n```js\r\nvideo.play();\r\n```\r\n\r\nto the end of the hydration function that the Svelte compiler emits for the component, I sometimes (though not always, which seems to imply that whatever is pausing the video is being called asynchronously) get the error [1]:\r\n\r\n```\r\nUncaught (in promise) DOMException: The play() request was interrupted by a call to pause().\r\n```\r\n\r\nand the video remains paused in all cases. If, however, I add a simple timeout to that line:\r\n\r\n```js\r\nsetTimeout(() => {\r\n  video.play();\r\n}, 0);\r\n```\r\n\r\nthe video plays, which seems to rule out the hydration function as the culprit.\r\n\r\nThis bug only shows up in Chrome (tested in version 70.0.3538.77). Safari and Firefox don't seem to be affected.\r\n\r\nI've set up a Sapper project that demonstrates this [here](https://github.com/nsivertsen/svelte-video-autoplay-bug) and a Glitch project with a live demo [here](https://nsivertsen-svelte-video-autoplay-bug.glitch.me/). I've added the video to the \"Home\" and \"About\" pages. Whichever one you load first should show a paused video, and when you navigate to the other page it should play.\r\n\r\n---\r\n\r\n1. More info on the Google Developers site: [DOMException: The play() request was interrupted](https://developers.google.com/web/updates/2017/06/play-request-was-interrupted)","state":"open","updated_at":"2021-12-26T05:52:50Z","created_at":"2018-10-31T15:20:29Z","creator_user_login":"nsivertsen"}
{"number":1825,"title":"Transitions in custom Elements","body":"Seems like there is a problem with svelte-transitions in customElements, js works properly, adding css: animation, right before destroy, but there are no visual effects...\r\n\r\nSeems like it can`t set animation for Shadow CSS.","state":"open","updated_at":"2023-06-19T10:17:49Z","created_at":"2018-10-30T12:05:34Z","creator_user_login":"Stormsher"}
{"number":1824,"title":"Forwarding slots","body":"Not sure what the best way to frame this problem is, but: there currently needs to be a one-to-one (or one-to-zero) correspondence between slots in a child component, and slotted elements in the parent component, otherwise content goes missing. In some situations, that's a problem: [REPL](https://svelte.technology/repl?version=2.15.0&gist=e06db23bad52a7630d9d9eeaf9c4f383)\r\n\r\nSay we had a `<Modal>` component with a `<slot></slot>` and a `<slot name=\"header\"></slot>`. If we wanted to lazily load that with a `<Lazy>` component whose implementation looked like this...\r\n\r\n```html\r\n{#await loader() then mod}\r\n  <svelte:component this={mod.default} on:close {...props}>\r\n    <slot></slot>\r\n  </svelte:component>\r\n{/await}\r\n\r\n<script>\r\n  export default {\r\n    computed: {\r\n      props: ({ loader, ...props }) => props\r\n    }\r\n  };\r\n</script>\r\n```\r\n\r\n...there's no way to 'forward' that `header` content. ","state":"open","updated_at":"2021-12-24T02:48:15Z","created_at":"2018-10-30T02:31:49Z","creator_user_login":"Rich-Harris"}
{"number":1805,"title":"clientWidth on video tag doesn't always return proper value, doesn't change `onupdate` for percentages","body":"If I set a video to have `height: 100%` and `width: auto` so that it fills its parent div fully and auto-expands its width, the value I get back from binding `clientWidth` to it is 1.125 larger than in actuality.\r\n\r\nYou can reproduce this with the following code in the REPL. `clientWidth` should be `800` but it comes out to `900`. If you set the CSS dimensions to a fixed value, they return correctly\r\n\r\n```html\r\n<div style=\"width:800px;height:450px;background-color:#f0c;\">\r\n\t<video controls src=\"https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\" bind:clientWidth></video>\r\n</div>\r\n\r\n<style>\r\n\tvideo {\r\n\t\twidth: auto;\r\n\t\theight: 100%;\r\n\t}\r\n</style>\r\n<script>\r\nexport default {\r\n\tonupdate() {\r\n\t\tconst { clientWidth } = this.get();\r\n\t\talert(clientWidth) // Should be 800 but comes to 900\r\n\t}\r\n}\r\n</script>\r\n```\r\n\r\nAlso, viewable in [this REPL link](https://svelte.technology/repl?version=2.14.3&gist=51070954364b06e769a683c7ca4e4326), when width and height are `100%`, `onupdate` does not fire on resize.","state":"open","updated_at":"2022-05-22T10:18:26Z","created_at":"2018-10-24T22:42:51Z","creator_user_login":"mhkeller"}
{"number":1755,"title":"Hydration clobbers input into form","body":"If your form has just been server rendered and you initial bind the values to empty string, when a user starts to enter data into the form it will get clobbered by hydration.\r\n\r\nYou can disable the inputs until the page hydrates, but I like my site(s) to be snappy and don't want to block the form out until hydration, admittedly its not an eternity, but its enough for me to drag it to the table.\r\n\r\nRH has indicated that if this were standard behaviour some use cases would present weird / unsuitable UX experience, for example typing into a search input doesn't result in the autocomplete dropdown appearing.\r\n\r\nIn which case I would like to request some optin behaviour to prevent hydration from clobbering the form inputs.\r\n\r\n`<input bind:value:nohydrate=username>`\r\n\r\nor something of that ilk?","state":"open","updated_at":"2023-07-12T19:51:42Z","created_at":"2018-09-25T15:22:14Z","creator_user_login":"ispyinternet"}
{"number":1754,"title":"Transition not using new properties when changed","body":"I think that's basically the issue, configure your transition using dynamic properties from your data, and when the data changes the transition doesn't update accordingly.\r\n\r\nhttps://svelte.technology/repl?version=2.13.5&gist=48cce994fb5b4433d65cc22037499edf","state":"open","updated_at":"2021-06-28T11:43:07Z","created_at":"2018-09-21T15:34:37Z","creator_user_login":"ispyinternet"}
{"number":1689,"title":"Slotted content for Web Component nested inside of a Svelte component is not applied to the Web Component","body":"Given a Web Component which expects slotted children, which itself is nested inside of a Svelte component, as in the following:\r\n\r\n```\r\n<SvelteComponent>\r\n  <my-custom-element>\r\n    <div slot=\"slot1\">my-custom-element content</div>\r\n    <div slot=\"slot2\">more my-custom-element content</div>\r\n  </my-custom-element>\r\n</SvelteComponent>\r\n```\r\n\r\n...the slotted children are not applied to the Web Component.\r\n\r\nI have reproduced the issue here (just run ```npm install``` and ```npm run build``` and then open ```dist/index.html``` in your browser):\r\nhttps://github.com/therealnicksaunders/svelte/tree/issue/slotted-content\r\n\r\nIn a more complicated example, this actually produces an error which suggests that a slotted child is being applied to the Svelte component instead of the Web Component in which it is nested. We have this Svelte-generated code:\r\n\r\n```\r\n(0, _shared.append)(pagecontent._slotted.header, div);\r\n```\r\n\r\nThe referenced div is nested inside of a Web Component; its \"slot\" attribute of \"header\" corresponds to a slot inside of that Web Component rather than the PageContent Svelte component (which has no named slots).\r\n\r\nHopefully I have provided enough info here... Please let me know if I can clarify anything.\r\n\r\nThanks in advance for your help looking into it!","state":"open","updated_at":"2023-06-19T09:59:52Z","created_at":"2018-08-24T21:04:55Z","creator_user_login":"nsaunders"}
{"number":1686,"title":"SSR/DOM rendering discrepancy","body":"[Here's a fun one](https://svelte.technology/repl?version=2.12.0&gist=769ca76b2478805db9666899f85df47a). Svelte won't let you write malformed markup like this...\r\n\r\n```html\r\n<p>\r\n  <div>you can't have a div inside a p</div>\r\n</p>\r\n```\r\n\r\nBut you can have a component inside the `<p>` element that has a `<div>`, or any other element that causes `<p>` to auto-close.\r\n\r\nSo in the example in the REPL above, the following markup gets generated...\r\n\r\n```html\r\n<p><div>some text</div></p>\r\n```\r\n\r\n...which gets corrected by the browser's HTML parser to this...\r\n\r\n```html\r\n<p></p>\r\n<div>some text</div>\r\n<p></p>\r\n```\r\n\r\n...until the client-side renderer takes over, at which point it becomes this again:\r\n\r\n```\r\n<p><div>some text</div></p>\r\n```\r\n\r\nThis can cause some hard-to-diagnose flashes of glitchy content. I'm not sure what to do about this. Perhaps if the compiler had a birds-eye view of the component graph, it could respond accordingly.","state":"open","updated_at":"2021-12-24T02:48:23Z","created_at":"2018-08-24T18:49:40Z","creator_user_login":"Rich-Harris"}
{"number":1678,"title":"Break out individual compilers","body":"As frequenters of the Discord server will know, I'm become obsessed lately with the idea of [compiling Svelte components to WebGL code](https://github.com/Rich-Harris/svelte-gl) (not for UI, but for building 3D/VR scenes — the sort of thing you'd traditionally use Three.js or A-Frame for). The easiest way to try this out would be to create a new compile target inside Svelte itself, but that would be somewhat disruptive for something that *may* turn out to be completely impossible.\r\n\r\nAn alternative, which I think is worth doing *anyway* as it would be good for the codebase, is to break out different compilers into their own packages. So instead of every `Node` subclass implementing `build` (for the `dom` target) and `ssr` (for the `ssr` target), the program generated in the initial phase would be handed off to a compiler, which would return something like a `{ code, map }` object (or otherwise something that can be easily turned into one, if that makes more sense in terms of code reuse etc).\r\n\r\nSo we'd have `@sveltejs/compile-dom`, `@sveltejs/compile-ssr` and (eventually) `@sveltejs/compile-gl`, each implementing the same interface. In time we could even add to that list — `@sveltejs/compile-native`, `@sveltejs/compile-tty` and so on.\r\n\r\nIn all likelihood this would need to be accompanied by separate runtime libraries for the different targets — `@sveltejs/lib-dom`, `@sveltejs/lib-ssr`, `@sveltejs/lib-common` (which `dom` and `ssr` would re-export from). \r\n\r\nAside from all the speculative VR stuff, I think this would probably make the codebase less intimidating for new contributors, and it would be good discipline. (The `svelte` package would still bundle everything, we wouldn't have a nightmarish situation with peer dependencies getting out of sync.)\r\n\r\nAny thoughts?","state":"open","updated_at":"2023-02-22T11:08:35Z","created_at":"2018-08-23T14:52:25Z","creator_user_login":"Rich-Harris"}
{"number":1528,"title":"SVG baseVal","body":"It turns out that this...\r\n\r\n```js\r\nrect.x.baseVal.value = 200;\r\n```\r\n\r\n...is faster than this:\r\n\r\n```js\r\nrect.setAttribute('x', 200);\r\n```\r\n\r\nThis might be something we can use to our benefit.","state":"open","updated_at":"2021-12-26T03:09:56Z","created_at":"2018-06-06T20:13:18Z","creator_user_login":"Rich-Harris"}
{"number":1518,"title":"Better error checking and messages for beginners","body":"We should have better error checking and error messages in dev mode to make it easier to learn and develop in Svelte. IMO this is a must to increase widespread adoption since people trying it out will be frustrated and drop it if they don't understand what is going on within the template.\r\n\r\nIt's very cool to see what code the template is generating, but it should be a goal that you don't _need_ to understand what is being generated to be successful using Svelte.\r\n\r\nFor example, when you have `{#each items as item}` in your template and `items` is undefined you get the error `Cannot read property 'length' of undefined`. It would be nicer if the error was `` `items` is undefined in {#each items as item}``. It might even be nicer if we output the lines before and after this from the template into the console all fancy like. Perhaps an Error Framework to make it super easy to understand issues in your app.\r\n\r\nOther places for additional error checking:\r\n* undefined/nulls in bind, e.g. `{ person.name }` when `person` is null\r\n\r\nWhat other errors within templates we add better error checking?","state":"open","updated_at":"2021-07-11T08:48:29Z","created_at":"2018-05-31T17:31:41Z","creator_user_login":"jacwright"}
{"number":1463,"title":"Animations can't return functions","body":"It'd be useful if animations could return functions just like transitions can, so that they can coordinate among themselves.","state":"open","updated_at":"2021-12-26T02:09:55Z","created_at":"2018-05-14T21:26:20Z","creator_user_login":"Rich-Harris"}
{"number":1387,"title":"Use fuzzy matching to suggest correct bindings","body":"We should provide more useful feedback if you make minor misspellings:\r\n\r\n```html\r\n<input type=checkbox bind:chekced>\r\n<audio bind:currenttime/>\r\n<!-- etc -->\r\n```","state":"open","updated_at":"2021-12-25T22:34:33Z","created_at":"2018-04-30T00:01:51Z","creator_user_login":"Rich-Harris"}
{"number":1320,"title":"support i18n","body":"it seems like svelte does not support i18n...\r\n\r\nI mean possibility to add language files and easily translate string in templates as well as in javascript code. e.t.c: this.$t('home.wellcome') will be translated to 'Welcome guest' from file /lang/en-US.json.\r\n\r\nIs support of i18n planned?","state":"open","updated_at":"2022-06-10T17:16:49Z","created_at":"2018-04-05T17:01:44Z","creator_user_login":"tevel"}
{"number":1276,"title":"Wrap JSDOM to count DOM mutations","body":"Opening this so we don't lost @btakita's idea in #1274:\r\n\r\n> Perhaps one way to test performance regressions is to add a wrapper to the JSDOM api which records DOM operations. Then the test can assert n DOM operations were performed.","state":"open","updated_at":"2021-12-28T19:13:01Z","created_at":"2018-03-26T10:28:12Z","creator_user_login":"Rich-Harris"}
{"number":1260,"title":"Create Rows & Create Many Rows Benchmark (krause)","body":"After the keyed swap rows benchmark, the next piece of \"low hanging fruit\" is the create rows benchmarks.\r\n\r\nIs there a reason why Svelte cannot be among the fastest in these benchmarks? It seems like optimizing the create rows operation would speed up Svelte whenever the each block is being used.\r\n\r\nhttp://www.stefankrause.net/js-frameworks-benchmark7/table.html","state":"open","updated_at":"2021-07-11T09:16:35Z","created_at":"2018-03-19T15:48:23Z","creator_user_login":"btakita"}
{"number":1133,"title":"Proposal: Top-Level <:Body> Injections","body":"Imagine I have the following component, `<TopLevelThing>`.\r\n\r\n```HTML\r\n<div class=\"top-level-thing\">\r\n    <p>Top level stuff.</p>\r\n</div>\r\n```\r\n\r\nIt's intended to be used at the top-level of the `<body>`.\r\n\r\nHowever, I might want to use it as part of a component which is deep inside the `<body>`, nowhere near the top-level.\r\n\r\nThis could be achieved with a special tag like the following.\r\n\r\n```HTML\r\n<:Body>\r\n    <TopLevelThing />\r\n</:Body>\r\n```\r\n\r\nSvelte could inject this into the top-level of the `<body>` alongside other elements.\r\n\r\nThe advantage is that it would retain all the functionality of a component: the lifecycle, properties, and being part of the component organisation and structure.\r\n\r\nOne common use case for this could be modals. They can often relate very specifically to the organisation and structure of a chain of components. However, perhaps because of styling or some other reason it may be more logical for the modal structure to be located at the top-level of the `<body>`, rather than within the parent component structure.\r\n\r\nIt's quite possible that an alternative approach, using current Svelte features, is most appropriate to these kinds of use cases. However, this approach came to my mind, and I thought it was worth airing.\r\n\r\nAs an aside, this feature does raise some additional questions. For instance, if a `<:Body>`  tag sounds good, would it make more sense to have a more generic `<:Injection>` tag instead, which could be used with more than just the `<Body>`? Also, might developers find it useful in some cases, of their choosing, for  `<:Injection>` tags to persist even when their parent components are destroyed?","state":"open","updated_at":"2021-11-14T11:42:15Z","created_at":"2018-01-25T16:22:11Z","creator_user_login":"ChrisTalman"}
{"number":1102,"title":"Whole-app optimisation","body":"I keep bringing this up as a thing-we-should-do but it's probably time we had an issue for it with specific ideas about *what* it means and *how* to get there.\r\n\r\nI'll kick things off with a few ideas of things we could do:\r\n\r\n### Static properties\r\n\r\n```html\r\n<!-- App.html -->\r\n<Greeting name='world'/>\r\n\r\n<!-- Greeting.html -->\r\n<h1>Hello {{name}}!</h1>\r\n```\r\n\r\nRight now, this involves creating three separate text nodes inside the `<h1>` (which we *could* collapse into one — Scott Bedard had some good ideas in Gitter), and adding update code that waits for `state.name` to change. We could replace all that with\r\n\r\n```js\r\nh1.textContent = 'Hello world!';\r\n```\r\n\r\n### Static computed properties\r\n\r\nAs a corollary to the above, if you know the values of the inputs to a computed property, and know that the computed property function is pure, you can precompute the value.\r\n\r\n### Collapsing entire components\r\n\r\nA 'component' is really two things — the main fragment, and the interface. In a lot of cases, such as the `<Greeting>` component above, we don't actually *need* the interface — we can statically determine that there are no lifecycle hooks or events, and no way that the user could get a reference to the component.\r\n\r\n### Optimising styles\r\n\r\nComponent-level unused style removal is cool, but if we had all your styles we could start to do [Styletron](http://styletron.js.org/)-style optimisations.\r\n\r\n---\r\n\r\nWill add to this list as other things occur to me; please suggest others!\r\n","state":"open","updated_at":"2021-12-24T08:21:15Z","created_at":"2018-01-12T20:03:29Z","creator_user_login":"Rich-Harris"}
{"number":1096,"title":"Feature suggestion: error handling API","body":"This is a feature suggestion for adding an error handling API to Svelte components based on [this remark](https://twitter.com/jbmoelker/status/951362739695489024).\r\n\r\nThere is currently no built-in way to handle errors in Svelte components. [React 16 introduced the concept of Error Boundaries](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html) to standardise this:\r\n\r\n```js\r\n// Error handling life cycle in React:\r\ncomponentDidCatch(error, info) {\r\n    // Display fallback UI\r\n    this.setState({ hasError: true });\r\n    // You can also log the error to an error reporting service\r\n    logErrorToMyService(error, info);\r\n  }\r\n```\r\n\r\nI imagine a similar concept would be a good addition to Svelte components. Maybe\r\n\r\ndeclaratively, as event on element:\r\n```html\r\n<MyComponent on:error='doSomethingWith(e)' />\r\n```\r\n\r\nimperatively, as component life cycle event:\r\n```js\r\noncreate() { /* ... */ },\r\nonerror(e) { /* ... */ },\r\n```\r\n\r\nI would check if the error is handled inside the component - with the `onerror` handler - first, and only if it isn't handled there, have it bubble up and trigger `on:error`. If a developer wants to handle the error inside the component and also wants to have it bubble up, they can use `this.fire('error', e)` within `onerror`.","state":"open","updated_at":"2023-08-07T00:47:19Z","created_at":"2018-01-11T14:44:44Z","creator_user_login":"jbmoelker"}
{"number":1011,"title":"Document the architecture behind Svelte","body":"Hi,\r\nI'm really interested in how svelte internally works and which problems and challenges you had faced. I could read the whole source code but the author can provide a much better picture. Svelte is able to compile itself away this is amazing because when the API is settled you can share performant, runtime-independent web components.\r\n\r\n Interesting points\r\n- Code generation\r\n- Compile-time static analysis\r\n- Role of Typescript\r\n- Your motivation\r\n- Roadmap\r\n- .....\r\n","state":"open","updated_at":"2021-07-11T11:49:29Z","created_at":"2017-12-12T14:10:47Z","creator_user_login":"StarpTech"}
{"number":981,"title":"{{#await}} blocks with previously-resolved promises should skip to `then`","body":"In a case like this, it would be nice if we could bypass the pending stage:\r\n\r\n```html\r\n{{#if foo}}\r\n  {{#await alreadyFulfilled}}\r\n    <p>this will be rendered initially when foo becomes true</p>\r\n  {{then}}\r\n    <p>then this will immediately replace it</p>\r\n  {{catch}}\r\n    <!-- ... -->\r\n  {{/await}}\r\n{{/if}}\r\n```\r\n\r\nI'm too lazy to test this right now but I *think* that the way promises work, the user won't see any flashing. But it's still wasteful. Perhaps the await block could do something grotesque like this:\r\n\r\n```js\r\npromise.then(value => {\r\n  promise.__value = value;\r\n}, error => {\r\n  promise.__error = error;\r\n});\r\n```\r\n\r\n","state":"open","updated_at":"2023-05-23T17:18:23Z","created_at":"2017-12-05T03:06:52Z","creator_user_login":"Rich-Harris"}
{"number":958,"title":"Async/streaming SSR renderer","body":"Now that we have an `await` template primitive, it makes sense to have a streaming renderer:\r\n\r\n```js\r\nrequire('svelte/ssr/register');\r\nconst app = express();\r\n\r\nconst SomeRoute = require('./components/SomeRoute.html');\r\n\r\napp.get('/some-route', (req, res) => {\r\n  SomeRoute.renderToStream({\r\n    foo: getPromiseSomehow(req.params.foo)\r\n  }).pipe(res);\r\n});\r\n```\r\n\r\nIt would write all the markup to the stream until it encountered an `await` block (at which point it would await the promise, and render the `then` or `catch` block as appropriate) or a component (at which point it would pipe the result of `childComponent.renderToStream(...)` into the main stream).\r\n\r\nWe'd get `renderAsync` for free, just by buffering the stream:\r\n\r\n```js\r\nconst markup = await MyComponent.renderAsync({...});\r\n```\r\n\r\nDoubtless this is slightly more complicated than I'm making it sound.","state":"open","updated_at":"2023-07-01T13:11:56Z","created_at":"2017-11-25T22:41:00Z","creator_user_login":"Rich-Harris"}
{"number":955,"title":"await once","body":"Follow-up to #952 / https://github.com/sveltejs/svelte/issues/654#issuecomment-345490875. It would modify the behaviour of `await` blocks such that you'd only see the 'pending' state once — thereafter, whenever a new promise value was set, the old one would be preserved until the promise resolved. An additional argument would be passed to the `then` block, allowing the UI to indicate that the currently displayed data was out of date:\r\n\r\n```html\r\n<!-- autocomplete suggestion list — we don't want to blow away\r\n     the previous set of suggestions while we're waiting for\r\n     the server to send us some new ones -->\r\n{{#await once suggestions}}\r\n  <span>loading...</span>\r\n{{then value, pending}}\r\n  <datalist id='suggestions' style='opacity: {{pending ? 0.5 : 1}}'>\r\n    {{#each value as suggestion}}\r\n      <option>{{suggestion}}</option>\r\n    {{/each}}\r\n  </datalist>\r\n\r\n  {{#if pending}}\r\n    <span>updating...</span>\r\n  {{/if}}\r\n{{catch err}}\r\n  <span class='error'>could not get suggestions!</span>\r\n{{/await}}\r\n```\r\n\r\n","state":"open","updated_at":"2022-06-09T18:41:20Z","created_at":"2017-11-25T22:25:59Z","creator_user_login":"Rich-Harris"}
{"number":780,"title":"Remove rendering code for static component with hydration","body":"If you can trust that the server rendered a component correctly, then I think there's a decent bundle size optimization by removing the creation code for static components.\r\n\r\nFor example in one of my codebases I put several SVGs as components that are completely static and don't use any data properties to update them. So with server rendering, in theory we can completely remove the creation code for these SVGs.\r\n\r\nAnother similar smaller optimization could be used for smaller pieces of a component, such as if we know a element doesn't change (like a title or something) then we can remove that piece of the element creation.\r\n\r\nObviously these types of optimizations aren't simple, but they're probably the biggest change for making smaller bundles.","state":"open","updated_at":"2022-02-05T03:45:09Z","created_at":"2017-08-19T19:50:34Z","creator_user_login":"PaulBGD"}
{"number":646,"title":"Optimising at the AST level","body":"Second random thought after #645. In cases like [this](https://svelte.technology/repl?version=1.22.4&gist=4ad6df1f08729b203c45204336d7cce8)...\r\n\r\n```html\r\n{#if foo}\r\n  <p>foo!</p>\r\n{:else}\r\n  <p>not foo!</p>\r\n{/if}\r\n```\r\n\r\n...we have to create three blocks (`create_main_fragment`, `create_if_block` and `create_if_block_1`), totalling 74 LOC as of the current version. If we optimised it to the equivalent of this...\r\n\r\n```html\r\n<p>{foo ? 'foo!' : 'not foo!'}</p>\r\n```\r\n\r\n...we get the same result with one block (`create_main_fragment`) totalling 25 LOC, and there's less work to do to update things.\r\n\r\nThere are probably all sorts of optimisations like this we could perform. Might not be straightforward, but definitely worth investigating.","state":"open","updated_at":"2021-07-11T08:47:42Z","created_at":"2017-06-16T13:27:50Z","creator_user_login":"Rich-Harris"}
{"number":558,"title":"Browser support","body":"A few people have asked about browser support. We probably should be able to answer the question conclusively (maybe even running some tests in Browserstack or whatever?), and perhaps tell people which polyfills they'll need.\r\n\r\nFor example, `window.performance.now` isn't supported in IE9, but is used in transitions (https://github.com/sveltejs/svelte/pull/525#discussion_r114223085).","state":"open","updated_at":"2023-06-15T02:13:37Z","created_at":"2017-05-03T22:09:15Z","creator_user_login":"Rich-Harris"}
{"number":545,"title":"Staggered transitions","body":"A common requirement is to *stagger* transitions:\r\n\r\n![barchart](https://cloud.githubusercontent.com/assets/1162160/25594853/6b7732a2-2e90-11e7-9f30-09652e1109f9.gif)\r\n\r\nIn the GIF, it's been faked with an index and a delay:\r\n\r\n```html\r\n<g class='bars'>\r\n  {{#each points as point, i}}\r\n    {{#if show}}\r\n      <rect\r\n        in:grow='{delay: i*200}'\r\n        out:fade\r\n        x='{{xScale(i) + 2}}'\r\n        y='{{yScale(point.birthrate)}}'\r\n        width='{{ barWidth - 4 }}'\r\n        height='{{ height - padding.bottom - yScale(point.birthrate) }}'\r\n        ></rect>\r\n    {{/if}}\r\n  {{/each}}\r\n</g>\r\n```\r\n\r\nBut that doesn't work well if new items are added, since their indices will start at *n* rather than 0.\r\n\r\nIf the intro is aborted (`show` becomes false, in the example above), if we have staggered outros then we probably want to a) reverse the stagger (last-in-first-out), and b) ignore any intro transitions that haven't yet started, so that the subject of the most recently started intro transition starts to outro immediately. That would be very hard to do with delays.\r\n\r\nNot sure what that would look like. It probably needs to be a separate directive — something like this (means 'start each intro transition 200ms after the last one, and each outro transition 50ms after the last one but go backwards'):\r\n\r\n```html\r\n<rect\r\n  in:grow\r\n  stagger:in=200\r\n  stagger:out=-50\r\n  ...\r\n```\r\n\r\nSomething else you *might* want to do is supply a fraction rather than an absolute number. This variant means 'start each intro transition once the previous one is 80% done, but use a fixed 50ms interval for outros':\r\n\r\n```html\r\n<rect\r\n  in:grow\r\n  stagger:in=0.8\r\n  stagger:out=-50ms\r\n  ...\r\n```\r\n\r\nAny thoughts?","state":"open","updated_at":"2021-12-25T12:22:40Z","created_at":"2017-05-01T21:28:08Z","creator_user_login":"Rich-Harris"}
{"number":544,"title":"Equivalent of Vue's out-in transition mode","body":"For elements that are positioned statically or relatively, intros that happen at the same time as outros can be problematic:\r\n\r\n```html\r\n{{#if foo}}\r\n  <div transition:fade='{duration:1500}'>yep</div>\r\n{{else}}\r\n  <div transition:fade='{duration:1500}'>nope</div>\r\n{{/if}}\r\n```\r\n\r\n![yep-nope](https://cloud.githubusercontent.com/assets/1162160/25594262/c932684c-2e8d-11e7-953d-81c9d4fd08c4.gif)\r\n\r\nVue has a nice solution to this — [transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes). Since Svelte doesn't have an equivalent of `<transition>`, the concept doesn't translate directly, but it would be nice to be able to express something similar without the hacky use of `delay`.","state":"open","updated_at":"2023-05-09T10:08:06Z","created_at":"2017-05-01T20:51:24Z","creator_user_login":"Rich-Harris"}
{"number":189,"title":"Better whitespace handling","body":"While fixing #178 it occurred to me that there are some nodes, like `<datalist>`, where it doesn't make sense to have text node children. The browser agrees:\r\n\r\n```js\r\ndocument.body.innerHTML = `\r\n  <div>\r\n    <span>a</span>\r\n    <span>b</span>\r\n  </div>\r\n`;\r\n\r\nconsole.log( document.body.querySelector( 'div' ).childNodes );\r\n// [ text, span, text, span, text ]\r\n\r\ndocument.body.innerHTML = `\r\n  <datalist>\r\n    <option value='a'/>\r\n    <option value='b'/>\r\n  </datalist>\r\n`;\r\n\r\nconsole.log( document.body.querySelector( 'datalist' ).childNodes );\r\n// [ text, option, option ]\r\n```\r\n\r\nNot sure what the first text node is doing there in the second case. Anyway, Svelte should be smart enough not to create text nodes inside elements where they're meaningless.\r\n\r\nAdditionally, we could collapse excess whitespace between nodes that aren't inside a `<pre>` element, since these are equivalent:\r\n\r\n```html\r\n<p>one</p> <p>two</p>\r\n```\r\n\r\n```html\r\n<p>  one  </p>\r\n\r\n    <p>  two  </p>\r\n```\r\n\r\n(That's not *strictly* true, since it's dependent on CSS, so there probably needs to be a `preserveWhitespace: true` option if we did that.)","state":"open","updated_at":"2023-01-10T05:13:46Z","created_at":"2016-12-11T19:43:06Z","creator_user_login":"Rich-Harris"}
{"number":14,"title":"Collapse consecutive text nodes","body":"The parser generates text nodes either side of comments – they should be concatenated","state":"open","updated_at":"2021-07-11T09:37:22Z","created_at":"2016-11-21T01:39:42Z","creator_user_login":"Rich-Harris"}
