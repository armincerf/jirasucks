{"number":4884,"comment_id":"1682220285","body":">  I want to highlight that more than one background task may be executed during the idleness of the main thread\r\n\r\nI do not want this. RxDB is a database for UI apps and the purpose for the idle queue is to make it as less likely as possible for background tasks to affect the responsiveness of the application for the user.","updated_at":"2023-08-17T12:43:04Z","created_at":"2023-08-17T12:43:04Z","creator_user_login":"pubkey"}
{"number":4870,"comment_id":"1691131890","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-24T07:13:04Z","created_at":"2023-08-24T07:13:04Z","creator_user_login":"stale[bot]"}
{"number":4860,"comment_id":"1680229910","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-16T09:01:31Z","created_at":"2023-08-16T09:01:31Z","creator_user_login":"stale[bot]"}
{"number":4898,"comment_id":"1688054896","body":"Not all validation plugins return the same type of error.\r\nThe error object comes from the jsonschema library itself. If validate-z-schema does not add a description, you need to make a PR at the z-schema library, not RxDB.","updated_at":"2023-08-22T12:06:18Z","created_at":"2023-08-22T12:04:16Z","creator_user_login":"pubkey"}
{"number":4898,"comment_id":"1689965346","body":"I tried logging what error data z-schema validation returns, and it also returns `path` which is quite useful, and its not exposed right now, do you think its ok to add it to the plugin?","updated_at":"2023-08-23T13:27:17Z","created_at":"2023-08-23T13:27:17Z","creator_user_login":"arekm213"}
{"number":4877,"comment_id":"1674585107","body":"I am not sure if I understood it correctly.\r\nThe returned `idlePromiseQueue` object each time is not the same on each function call because it will be reasinged with `idlePromiseQueue = idlePromiseQueue.then...`\r\n\r\nFrom the code docs\r\n```js\r\n/**\r\n * If multiple operations wait for an requestIdlePromise\r\n * we do not want them to resolve all at the same time.\r\n * So we have to queue the calls.\r\n */\r\n```\r\n\r\nSo I think what you describe is actually the intended behavior. Can you add a test to your PR which shows the difference in behavior and ensures that in the future noone will break the correct behavior.\r\n","updated_at":"2023-08-11T11:16:34Z","created_at":"2023-08-11T11:16:34Z","creator_user_login":"pubkey"}
{"number":4877,"comment_id":"1674856514","body":"Hello,\r\n\r\nI am aware the returned idlePromiseQueue is different (the `then()` call returns a new Promise), but this new Promise belongs to a Promises' chain. I'll try to explain better why I think this is not quite right.\r\n\r\nThe comment in your code is:\r\n```\r\n/**\r\n * If multiple operations wait for an requestIdlePromise\r\n * we do not want them to resolve all at the same time.\r\n * So we have to queue the calls.\r\n */\r\n```\r\nSo, we have the following assets:\r\n1. a Promises' queue, namely the `idlePromiseQueue` variable which is initialized with a resolved Promise (i.e. idlePromiseQueue  = Promise.resolve());\r\n2. an enqueue function namely the `requestIdlePromise` function;\r\n3. a way to provided feedback to the caller once the enqueued operation has resolved: the Promise returned by the `requestIdlePromise` function.\r\n\r\nTo put it shortly, we need a mechanism to add some 'operations' into a queue, and we want to be informed **as soon as possible** when the operation was executed.\r\n\r\nWhy did I highlighted **as soon as possible**?\r\nBecause, IMO, the feedback (i.e. the returned Promise) must not be linked in any way with the the **new** `idlePromiseQueue` (`idlePromiseQueue = idlePromiseQueue.then`). \r\nOtherwise the caller is forced to wait for the whole chain up to be resolved before getting the feedback. The time span between **enqueue** moment and **resolve** moment increases directly proportional with the number of active (i.e. unresolved Promises) enqueued Promises.\r\n\r\nFor the sake of the demonstration, I composed a short test, where I use a simplified version of the `requestIdlePromise` function. You can play with it here https://jsfiddle.net/costing/Lqvsod79/.\r\n\r\n**Legend**:\r\n- the `requestIdlePromiseSlow` is the simplified version of the current `requestIdlePromise` function (i.e. rxdb >= 14.14.2);\r\n- the `requestIdlePromiseFast` is the simplified version of the previous`requestIdlePromise` function (i.e. rxdb <= 14.14.1);\r\n\r\nYou can easily observe which is the the time span between **enqueue** moment and **resolve** moment of an operation. \r\nIs this the expected behavior?\r\n\r\nThank you.\r\n\r\n\r\n\r\n","updated_at":"2023-08-11T14:11:22Z","created_at":"2023-08-11T14:08:48Z","creator_user_login":"costingeana"}
{"number":4877,"comment_id":"1675526813","body":"Yes, the behavior of your `requestIdlePromiseSlow` is correct, let me explain.\r\n`requestIdlePromise` is used in RxDB for background task. Using `requestIdlePromiseSlow` ensures that background tasks are way less likely to affect actual  user usage of the main thread.\r\n\r\nWhen multiple parts of RxDB await the next `requestIdlePromise` to run a background tasks, we do not want all background tasks to start directly on the next `requestIdlePromise`. Because that would increase the likelyness of affecting user interactions. Instead we want to start exactly one task and have the others await the next `requestIdleCallback`, so when the main thread is idle again.\r\n\r\nThe previous behavior was not correct which I detected on fixing the other bug. So it was changed in the last version.\r\n\r\n`RxDatabase.destory()` does not use the `requestIdlePromise` method from the utils package. It uses the method from the `custom-idle-queue` package.","updated_at":"2023-08-11T23:39:02Z","created_at":"2023-08-11T23:37:42Z","creator_user_login":"pubkey"}
{"number":4877,"comment_id":"1676788016","body":"Hello again and sorry for the delay,\r\n\r\nI understand perfectly the purpose of `requestIdlePromise` (the one from `plugins/utils`). However, generally speaking, I'm not very sure that is quite ok to have queued `items` that wait for about 500 ms (when the queue has about 100 active items) or worse 4-5000 ms (when the queue has about 1000 active items) before being resolved. Indeed, this may not be happening in normal scenarios, but it can happen (as it happens in my scenario). \r\n\r\nAbout my scenario. First of all, I apologize for the confusion. When I saw the degradation of the performance, I quickly checked the published versions (14.14.1 and then 14.14.2) and I saw the changes that you applied for `requestIdlePromise`. Once that I identified those changes are the cause of my problem, my focus turned to the `requestIdlePromise` itself. Moreover, the fact these 2 functions have identical names contributed to my confusion. Once again, I'm sorry for misleading you.\r\n\r\nOn the other hand, what I observed empirically (that the `requestIdlePromise` changes affected the performance in my scenario) is still true. The `requestIdlePromise` comes into play at another level.\r\nI am using the Loki's storage which uses a save queue, which turns to use the `requestIdlePromise` in its internals: https://github.com/pubkey/rxdb/blob/84035e65602ee20a3c8022127b75608bc64116a7/src/plugins/storage-lokijs/loki-save-queue.ts#L49-L73\r\nSo when a `RxDatabase.destory()` is issued, the loki's storage instance is closed, and that's that point where the save queue runs: \r\nhttps://github.com/pubkey/rxdb/blob/84035e65602ee20a3c8022127b75608bc64116a7/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L358C26-L358C26\r\n\r\nFrankly, at this point, I have no idea what can be done to get rid of the performance degradation when destroying multiple databases. \r\nIn the end I will highlight once again the scenario:\r\n- RxDB Version: 14.15.1;\r\n- RxDB storage: LokiJS with indexeddb adapter (in browser);\r\n- destroy about 100 RxDatabases (this is a real scenario);\r\n- when using RxDB 14.14.1 the time spent to dispose all the databases was T. Now, after these changes (i.e. version >= 14.14.2) the time is about 10 x T.\r\n\r\nThank you.","updated_at":"2023-08-15T14:02:47Z","created_at":"2023-08-14T07:05:06Z","creator_user_login":"costingeana"}
{"number":4877,"comment_id":"1677128844","body":"Ok I understand your point.\r\nThis is a really edgy case because most users do not have to close 100s of lokijs RxDatabases or at least do not care about the latency time when doing so.\r\nMaybe you should fork and edit the code of the lokijs RxStorage and remove the call to `requestIdlePromise` for your use case.","updated_at":"2023-08-14T11:14:33Z","created_at":"2023-08-14T11:12:02Z","creator_user_login":"pubkey"}
{"number":4877,"comment_id":"1678763416","body":"Hello,\r\n\r\nI don't think it would be a good idea to use a fork. Maybe we can do something for general availability in lokijs RxStorage because this is the place where the `requestIdlePromise` function (from `plugins/utils`) is used intensively. \r\n\r\nRegarding lokijs RxStorage I have a couple of questions. \r\nOnce again, the context is the deletion of a RxDatabase. I observed that lokijs RxStorage instance has 2 methods that are used in this context:\r\n- `close`: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L344\r\n- `remove`: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L367\r\nThe `remove` function finally calls the `close` function:\r\nhttps://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L373-L374\r\nBoth functions issue a call to the LokiSaveQueue's `run` function:\r\n- `close`: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L358-L359\r\n- `remove`: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/rx-storage-instance-loki.ts#L373-L374\r\n\r\nMoreover, the `close` method calls another function, namely `closeLokiCollections`: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/lokijs-helper.ts#L190-L199\r\nThe `closeLokiCollections` also calls the LokiSaveQueue's `run` function.\r\n\r\nPractically in a sequence like `remove` -> `close` -> `closeLokiCollections` there are 3 calls to the LokiSaveQueue's `run` function.\r\n\r\nThe first question: do you think we can do something so that we call the `saveQueue.run()` function only once when closing/removing a RxDatabase?\r\nThe second question: theoretically speaking, when removing a RxDatabase and all its data, is still needed to call the `saveQueue.run()` function?\r\n\r\nIn the end, I have a question regarding the LokiSaveQueue's `run` function. I don't fully understand the following code sequence: https://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/loki-save-queue.ts#L51-L73\r\nIs the second call to the `requestIdlePromise` function really useful?\r\nhttps://github.com/pubkey/rxdb/blob/f816c2a2146c905fab3f5ab23d7e164d004da40a/src/plugins/storage-lokijs/loki-save-queue.ts#L69-L73\r\n\r\nThank you.\r\n\r\n\r\n\r\n","updated_at":"2023-08-15T11:15:12Z","created_at":"2023-08-15T11:10:11Z","creator_user_login":"costingeana"}
{"number":4877,"comment_id":"1682216328","body":"> Is the second call to the requestIdlePromise function really useful?\r\n\r\nNo, likely not. But I did many tests back then to ensure it is not possible to lose memory-persisted data when having multiple browser tabs open. I do not want to touch that code without proper testing it again.","updated_at":"2023-08-17T12:40:25Z","created_at":"2023-08-17T12:40:25Z","creator_user_login":"pubkey"}
{"number":4877,"comment_id":"1682244239","body":"> No, likely not. But I did many tests back then to ensure it is not possible to lose memory-persisted data when having multiple browser tabs open. I do not want to touch that code without proper testing it again.\r\n\r\nHello again,\r\n\r\nI understand and I respect your decision. I was just curios. \r\n\r\nThank you.","updated_at":"2023-08-17T12:59:46Z","created_at":"2023-08-17T12:59:46Z","creator_user_login":"costingeana"}
{"number":4877,"comment_id":"1701184937","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-31T14:42:50Z","created_at":"2023-08-31T14:42:50Z","creator_user_login":"stale[bot]"}
{"number":4832,"comment_id":"1649288775","body":"Same problem for me. Any solution for this?","updated_at":"2023-07-25T07:35:27Z","created_at":"2023-07-25T07:35:27Z","creator_user_login":"EinfachHans"}
{"number":4832,"comment_id":"1649347945","body":"The problem in our case seems to be that we acidently imported a type declaration from the \"src\" folder. Does it make sense that the complete src ts files are included in the final build package?","updated_at":"2023-07-25T08:17:07Z","created_at":"2023-07-25T08:17:07Z","creator_user_login":"EinfachHans"}
{"number":4832,"comment_id":"1669198783","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-08T08:53:15Z","created_at":"2023-08-08T08:53:15Z","creator_user_login":"stale[bot]"}
{"number":4832,"comment_id":"1682224548","body":"Please reproduce the problem in the rxdb angular example which is CI testsed.","updated_at":"2023-08-17T12:46:06Z","created_at":"2023-08-17T12:46:06Z","creator_user_login":"pubkey"}
{"number":4832,"comment_id":"1700985311","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-31T12:53:34Z","created_at":"2023-08-31T12:53:34Z","creator_user_login":"stale[bot]"}
{"number":3935,"comment_id":"1238121864","body":"The CI is green but https://github.com/mafintosh/is-my-json-valid/pull/193 is not merged.\r\nI do not understand why this happens. Can you rebase this PR to the latest master?","updated_at":"2022-09-06T13:03:10Z","created_at":"2022-09-06T13:03:10Z","creator_user_login":"pubkey"}
{"number":3935,"comment_id":"1247202627","body":"@pubkey I've rebased it to latest master now.\r\nI agree, it's weird that the CI is green without the PR being merged 🤔 ","updated_at":"2022-09-14T19:21:20Z","created_at":"2022-09-14T19:21:20Z","creator_user_login":"linco95"}
{"number":3935,"comment_id":"1247332620","body":"Still green. This is so strange. `is-my-json-valid` didn't even have a release.","updated_at":"2022-09-14T21:44:19Z","created_at":"2022-09-14T21:44:19Z","creator_user_login":"pubkey"}
{"number":3935,"comment_id":"1247335693","body":"Ah I found it, I forgot to throw the error.\r\nFixed in https://github.com/pubkey/rxdb/commit/2fe1cc3fadbdcb2591f0a3786bff3d281e8f0a88\r\nCan you rebase again please?\r\nSorry for hassle.","updated_at":"2022-09-14T21:48:53Z","created_at":"2022-09-14T21:48:53Z","creator_user_login":"pubkey"}
{"number":3935,"comment_id":"1248009683","body":"@pubkey No worries. Rebase is done 👍🏻 ","updated_at":"2022-09-15T12:03:27Z","created_at":"2022-09-15T12:03:27Z","creator_user_login":"linco95"}
{"number":3935,"comment_id":"1484095827","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem.\n","updated_at":"2023-03-26T13:23:45Z","created_at":"2023-03-26T13:23:45Z","creator_user_login":"stale[bot]"}
{"number":3935,"comment_id":"1484107613","body":"Sorry the stale bot was not meant for PRs.","updated_at":"2023-03-26T14:09:23Z","created_at":"2023-03-26T14:09:23Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1523959270","body":"Can you reproduce the problem with a non-firestore replication?","updated_at":"2023-04-26T19:50:33Z","created_at":"2023-04-26T19:50:33Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1524075762","body":"@pubkey hm, I just tried this in a graphQL replication test and I'm pretty sure I'm seeing the same thing. I feel like I'm stumbling around these tests a bit, so here is the code I used:\r\n\r\n```\r\n                await c.insert(schemaObjects.humanWithTimestamp({id: 'a123456', name: '1'}));\r\n\r\n                await waitUntil(() => pushCount === 1);\r\n\r\n                await c.incrementalUpsert({id: 'a123456', name: '2'})\r\n                await c.incrementalUpsert({id: 'a123456', name: '3'})\r\n\r\n                await waitUntil(() => pushCount === 3);\r\n\r\n                const docsOnServer = server.getDocuments()[0];\r\n                assert.strictEqual(docsOnServer.name, '3');\r\n```\r\n\r\nin this the assert is getting `1` vs. the expected `3`.\r\n\r\n```\r\nAssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\r\n\r\n'1' !== '3'\r\n``` ","updated_at":"2023-04-26T21:37:37Z","created_at":"2023-04-26T21:37:37Z","creator_user_login":"chrisdrackett"}
{"number":4698,"comment_id":"1537173880","body":"@pubkey curious if you've been able to replicate this issue. I'm attempting to work around it or figure out what is going on. I want to make sure this is an RxDB issue and not something I'm doing in my code (mostly surprised I'm the first to run into this)","updated_at":"2023-05-06T16:13:58Z","created_at":"2023-05-06T16:13:58Z","creator_user_login":"chrisdrackett"}
{"number":4698,"comment_id":"1537235800","body":"No I had no time working on this.\r\nThe first step would be to reproduce this with the plain non-firebase replication-protocol to ensure that this is not a firebase issue.","updated_at":"2023-05-06T22:36:46Z","created_at":"2023-05-06T22:36:46Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1538992115","body":"I tested this with graphQL, is there a way to test it more generically?","updated_at":"2023-05-08T20:16:36Z","created_at":"2023-05-08T20:16:36Z","creator_user_login":"chrisdrackett"}
{"number":4698,"comment_id":"1539257417","body":"Can you make a PR with a failing test that uses graphql instead of firestore?\r\n","updated_at":"2023-05-09T01:15:20Z","created_at":"2023-05-09T01:15:20Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1542532934","body":"@pubkey ok, scratch that. This does work as expected in graphQL after I did the test correctly (I had an unrelated error in my test that I picked up via `ensureReplicationHasNoErrors(replicationState);`)\r\n\r\nso as far as I know this is a firestore only issue.","updated_at":"2023-05-10T17:00:57Z","created_at":"2023-05-10T17:00:57Z","creator_user_login":"chrisdrackett"}
{"number":4698,"comment_id":"1549491208","body":"Ok, this helps to understand.\r\nPlease notice that firestore replication is on beta, so I will likely not fix that by myself.","updated_at":"2023-05-16T11:34:27Z","created_at":"2023-05-16T11:34:27Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1629499061","body":"@pubkey oh, is there no plan for official firestore support? I figured the beta tag was because it was still in active development and not ready for production. Is there anyone else I can ping about this?","updated_at":"2023-07-10T18:39:19Z","created_at":"2023-07-10T18:39:19Z","creator_user_login":"chrisdrackett"}
{"number":4698,"comment_id":"1629606904","body":"There is a plan for official support. But it is an open source project, so it is assumed that the community fixes the bugs, not solely the maintainer.","updated_at":"2023-07-10T19:33:42Z","created_at":"2023-07-10T19:33:42Z","creator_user_login":"pubkey"}
{"number":4698,"comment_id":"1629617265","body":"totally get it, I spent a little over a day trying to fix this but didn't get very far as the way replication works in RxDB is over my head :D","updated_at":"2023-07-10T19:40:54Z","created_at":"2023-07-10T19:40:54Z","creator_user_login":"chrisdrackett"}
{"number":4833,"comment_id":"1667741328","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed soon. If you still have a problem, make a PR with a test case or to prove that you have tried to fix the problem. Notice that only bugs in the rxdb premium plugins are ensured to be fixed by the maintainer. Everything else is expected to be fixed by the community, likely you must fix it by yourself.\n","updated_at":"2023-08-07T12:12:36Z","created_at":"2023-08-07T12:12:36Z","creator_user_login":"stale[bot]"}
