{"number":27330,"title":"feat[devtools/extension]: add dark theme for popup","body":"## Summary\r\n\r\nIf the system/browser uses a dark theme, then the extension popup still remains with a light background. And so that the eyes do not hurt in a dark room, you need a dark theme.\r\n\r\n## How did you test this change?\r\n\r\nMake sure the dark theme is enabled on your system/browser.\r\n\r\n**Before:**\r\n\r\n![Screenshot 2023-09-02 at 22 20 56](https://github.com/facebook/react/assets/19418601/f7166ea7-f562-4d11-8851-be08fa9629a7)\r\n\r\n**After:**\r\n\r\n![Screenshot 2023-09-02 at 22 21 30](https://github.com/facebook/react/assets/19418601/e51ecd5f-3e71-4193-83ff-a548bce76bd4)","state":"open","updated_at":"2023-09-02T21:03:46Z","created_at":"2023-09-02T19:23:12Z","creator_user_login":"rakleed"}
{"number":27329,"title":"Bug: useEffect does not reset when you restart the VS Code debugger","body":"When I push the restart button in VS Code's debugger, my app/index.js's useEffect does not get called again.  I assumed that restarting the debugger would restart everything to a clean state and go from there, but this does not appear to be the case.  I have to stop the debugger, then start a new debugging session for it get called again.  Is this intended?  Its not the end of the world, just annoying.\r\n\r\nReact version: react-native@0.71.8\r\n\r\n## Steps To Reproduce\r\n\r\n1. Put printout in useEffect \r\n2. Run debugger in VS Code\r\n3. See printout\r\n4. Click restart debugger\r\n5. No printout\r\n\r\n## The expected behavior\r\nRestarting the debugger makes the react app go to a clean init state so useEffect gets called again","state":"open","updated_at":"2023-09-02T04:37:07Z","created_at":"2023-09-02T04:37:07Z","creator_user_login":"Kwillson2"}
{"number":27328,"title":"[Flight] provide property descriptors for client references","body":"Client reference proxy should implement getOwnPropertyDescriptor. One practical place where this shows up is when consuming CJS module.exports in ESM modules. Node creates named exports it statically infers from the underlying source but it only sets the named export if the CJS exports hasOwnProperty. This trap will allow the proxy to respond affirmatively.\r\n\r\nI did not add unit tests because contriving the ESM <-> CJS scenario in Jest is challenging. I did add new components to the flight fixture which demonstrate that the named exports are properly constructed with the client reference whereas they were not before.\r\n","state":"open","updated_at":"2023-09-02T04:32:49Z","created_at":"2023-09-02T04:28:50Z","creator_user_login":"gnoff"}
{"number":27327,"title":"[Fizz] Move /static build into /server builds","body":"This joins the static (prerender) builds with the server builds but doesn't change the public entry points.\r\n\r\nThe idea of two separate bundles is that we'd have a specialized build for Fizz just for the prerender that could do a lot more. However, in practice the code is implemented with a dynamic check so it's in both. It's also not a lot of code.\r\n\r\nAt the same time if you do have a set up that includes both the prerender and the render in the same build output, this just doubles the server bundle size for no reason.\r\n\r\nSo we might as well merge them into one build. However, I don't expose the `prerender` from `/server`. Instead it's just exposed from the public `/static` entry point. This leaves us with the option to go back to separate builds later if it diverges more in the future.","state":"open","updated_at":"2023-09-01T20:31:38Z","created_at":"2023-09-01T20:27:05Z","creator_user_login":"sebmarkbage"}
{"number":27326,"title":"Bug: Ternary operator shows unusual behavior ","body":"Although both code logically seems the same, React Application behaves differently while using the `ternary` and `&&` operators. \r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nTry to render the same component on different conditions using `ternary` operator. The rendered component must have a Boolean useState in it.\r\n\r\n`Hint`: Rendering the same component with the same condition using `&&` operator in two different lines will give an expected behavior.\r\n\r\n\r\nLink to code example:\r\n- [visit](https://codesandbox.io/p/github/tajpuriya27/react-bug/main?layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clm0udgt3000j3568kdzbdv5r%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clm0udgt3000e3568ktzhxi3c%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clm0udgt3000i3568f1ylvssm%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clm0udgt3000g35687kihl2ag%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clm0udgt3000e3568ktzhxi3c%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clm0udgt3000d3568kq1q2jcx%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252FREADME.md%2522%257D%255D%252C%2522id%2522%253A%2522clm0udgt3000e3568ktzhxi3c%2522%252C%2522activeTabId%2522%253A%2522clm0udgt3000d3568kq1q2jcx%2522%257D%252C%2522clm0udgt3000g35687kihl2ag%2522%253A%257B%2522id%2522%253A%2522clm0udgt3000g35687kihl2ag%2522%252C%2522activeTabId%2522%253A%2522clm0ue1qp00wh35683gum3rwl%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_PORT%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522port%2522%253A3000%252C%2522id%2522%253A%2522clm0ue1qp00wh35683gum3rwl%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522path%2522%253A%2522%252F%2522%257D%255D%257D%252C%2522clm0udgt3000i3568f1ylvssm%2522%253A%257B%2522id%2522%253A%2522clm0udgt3000i3568f1ylvssm%2522%252C%2522activeTabId%2522%253A%2522clm0udyr300lk3568yybcdw7u%2522%252C%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clm0udgt3000h3568iv4dmyp7%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522TERMINAL%2522%252C%2522shellId%2522%253A%2522clm0udgzb000je7ic3kwv9eux%2522%257D%252C%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522id%2522%253A%2522clm0udyr300lk3568yybcdw7u%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D) - Online version in CodeSandbox  \r\n\r\nOR\r\n- [GitHub](https://github.com/tajpuriya27/react-bug) repository link.\r\n\r\n## The current behavior\r\nAfter the user log-in to the application- `user` useState is updated. The application renders the second `div` from `togglable` component and shows `<h2>create....</h2>` from `NoteForm` component.\r\n![image](https://github.com/facebook/react/assets/86508931/5e95bebe-b40d-45c2-b522-29851f9bfbd2)\r\n\r\n\r\n## The expected behavior\r\nAfter the user log-in to the application- `user` useState is updated. The application must render the first `div` from the `togglable` component and show `<button>Show Note Form</button>` from `NoteForm` component.\r\n![image](https://github.com/facebook/react/assets/86508931/1ccf07d3-612c-422a-b5c8-49a5e2ae497a)\r\n\r\n## Additional Findings:\r\nIf we use the `&&` operator with the same condition to render the components, it works as expected.","state":"open","updated_at":"2023-09-02T02:37:15Z","created_at":"2023-09-01T17:31:11Z","creator_user_login":"tajpuriya27"}
{"number":27325,"title":"[Fizz] Move formatContext tracking back to the task","body":"In https://github.com/facebook/react/pull/21113 I moved this over to the segment from the task. This partially reverts this two use two fields instead. I was just trying to micro-optimize by reusing a single field.\r\n\r\nThis is really conceptually two different values. Task is keeping track of the working state of the currently executing context.\r\n\r\nThe segment just needs to keep track of which parent context it was created in so that it can be wrapped correctly when a segment is written. We just happened to rely on the working state returning to the top before completing.\r\n\r\nThe main motivation is that there is no `segment` for replaying.","state":"open","updated_at":"2023-09-01T15:44:33Z","created_at":"2023-09-01T15:38:29Z","creator_user_login":"sebmarkbage"}
{"number":27324,"title":"fix: symbol properties not iterated","body":"try to fix https://github.com/facebook/react/issues/27319\r\n","state":"open","updated_at":"2023-09-01T16:14:14Z","created_at":"2023-09-01T14:45:23Z","creator_user_login":"misaka42"}
{"number":27322,"title":"how to download","body":"","state":"open","updated_at":"2023-09-01T06:34:42Z","created_at":"2023-09-01T00:28:23Z","creator_user_login":"vasanth-code"}
{"number":27321,"title":"useFormState: Reuse state from previous form submission","body":"","state":"open","updated_at":"2023-08-31T18:42:35Z","created_at":"2023-08-31T17:32:57Z","creator_user_login":"acdlite"}
{"number":27319,"title":"Bug: Unable to Iterate over Symbol Type Properties in React Component","body":"React version: all\r\n\r\n## Steps To Reproduce\r\n\r\n```javascript\r\nimport React from \"react\";\r\n\r\nconst KEY_OF_A = Symbol.for(\"a\");\r\nconst KEY_OF_B = \"b\";\r\n\r\nexport default function App() {\r\n  return React.createElement(Foo, {\r\n    [KEY_OF_A]: \"A\",\r\n    [KEY_OF_B]: \"B\"\r\n  });\r\n}\r\n\r\nfunction Foo(props) {\r\n  return React.createElement(\r\n    \"text\",\r\n    null,\r\n    props[KEY_OF_A] + \"__\" + props[KEY_OF_B]\r\n  );\r\n}\r\n\r\n\r\n// -> undefined__B\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/jolly-wright-gzlxf7?file=/src/App.js\r\n\r\n## The current behavior\r\nhttps://github.com/facebook/react/blob/3808b01b3a6d116151b5de742866360ed70450c7/packages/react/src/ReactElement.js#L391\r\n\r\n```javascript\r\n   // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (\r\n        hasOwnProperty.call(config, propName) &&\r\n        !RESERVED_PROPS.hasOwnProperty(propName)\r\n      ) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n```\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nI'm not sure if it was intended to be designed this way, but I currently have a scenario where I need to inject some private variables into user components from the framework layer. However, these symbols are being removed during the process of passing them. So I'm wondering if it's possible to design this part to support the passing of symbol attributes?\r\n","state":"open","updated_at":"2023-09-01T14:43:01Z","created_at":"2023-08-31T02:43:42Z","creator_user_login":"misaka42"}
{"number":27315,"title":"[Flight] Implement `react-server-dom-turbopack`","body":"stacked on #27314 \r\n\r\nTurbopack requires a different module loading strategy than Webpack and as such this PR implements a new package `react-server-dom-turbopack` which largely follows the `react-server-dom-webpack` but is implemented for this new bundler","state":"open","updated_at":"2023-08-30T16:31:48Z","created_at":"2023-08-30T16:29:42Z","creator_user_login":"gnoff"}
{"number":27314,"title":"[Flight][Float] Preinitialize module imports during SSR","body":"Currently when we SSR a Flight response we do not emit any resources for module imports. This means that when the client hydrates it won't have already loaded the necessary scripts to satisfy the Imports defined in the Flight payload which will lead to a delay in hydration completing.\r\n\r\nThis change updates `react-server-dom-webpack` and `react-server-dom-esm` to emit async script tags in the head when we encounter a modules in the flight response.\r\n\r\nTo support this we need some additional server configuration. We need to know the path prefix for chunk loading and whether the chunks will load with CORS or not (and if so with what configuration).\r\n","state":"open","updated_at":"2023-09-01T14:53:32Z","created_at":"2023-08-30T16:26:34Z","creator_user_login":"gnoff"}
{"number":27312,"title":"Support incremental local builds","body":"Today if you build packages locally the previous build folder is deleted. When testing locally built packages it is slow to have to rebuild every necessary package when linking multiple. This PR adds an option `--inc` or `--incremental` which when passed and not running in CI mode will cause packages currently in the build folder to be preserved if they were not newly built.\r\n\r\nFor example let's say I want to test a custom build of `react-server-dom-webpack` with related changes in `react-dom`.\r\n\r\n```\r\nyarn build react-dom react-server-dom-webpack\r\n```\r\n\r\nNow if I make an edit to `react-server-dom-webpack` only and need to rebuild I can run\r\n\r\n```\r\nyarn build react-server-dom-webpack --inc\r\n```\r\n\r\nAfter this incremental build is done the original `react-dom` package will still be found in the build folder alongside the newly build `react-server-dom-webpack` package\r\n\r\nArguably this could actually become the default behavior and we could do something like `--clean` or `--full` to represent the case where we don't want to retain prior built packages","state":"open","updated_at":"2023-08-30T16:35:44Z","created_at":"2023-08-30T16:15:51Z","creator_user_login":"gnoff"}
{"number":27311,"title":"Bug: Sudden scroll on react website","body":"<!--\r\nSudden Scroll Behavior on React Website\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.Open the React website in a web browser.\r\n2.Attempt to scroll up or down using the scroll wheel, trackpad, or scroll bar.\r\n\r\nLink to code example:\r\n\r\n<!--\r\n\r\nhttps://github.com/facebook/react/assets/112266194/55229360-6c79-4dd0-9cae-c5aa0bad5641\r\n\r\n-->\r\n\r\n## The current behavior\r\nWhen scrolling, the screen jumps suddenly to a different position on the page, causing an unpleasant and unexpected scrolling experience. This behavior makes it difficult to navigate and interact with the website content.\r\n\r\n## The expected behavior\r\nThe scrolling should be smooth and fluid, allowing users to navigate through the website content without any sudden jumps.\r\n","state":"open","updated_at":"2023-08-30T13:51:52Z","created_at":"2023-08-30T13:49:29Z","creator_user_login":"raghchawla131"}
{"number":27310,"title":"Feat:-Add summary component instances","body":"Its just a small POC and if it gets some good response and is actually useful then makes sense\r\nCurrently we have our tree View in the React Devtools, rendering the components instances in a tree structure \r\n\r\nHow about a new tab which sort of acts like a summary  of components, like showing the number of instances of a particular component is mounted at a particular render cycle.\r\n\r\nthoughts @hoxyq \r\n\r\nhttps://github.com/facebook/react/assets/72331432/628e3c2c-2f0f-4372-b9a0-717e7f5c7532\r\n\r\n\r\nwe can do some sort of vote in twitter or somewhere what people think about this\r\n\r\n","state":"open","updated_at":"2023-08-31T15:48:16Z","created_at":"2023-08-30T07:39:17Z","creator_user_login":"Biki-das"}
{"number":27308,"title":"Bump @adobe/css-tools from 4.0.1 to 4.3.1 in /fixtures/flight","body":"Bumps [@adobe/css-tools](https://github.com/adobe/css-tools) from 4.0.1 to 4.3.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/adobe/css-tools/blob/main/History.md\"><code>@​adobe/css-tools</code>'s changelog</a>.</em></p>\n<blockquote>\n<h1>4.3.1 / 2023-03-14</h1>\n<ul>\n<li>Fix redos vulnerability with specific crafted css string - CVE-2023-26364</li>\n</ul>\n<h1>4.3.0 / 2023-03-07</h1>\n<ul>\n<li>Update build tools</li>\n<li>Update exports path and files</li>\n</ul>\n<h1>4.2.0 / 2023-02-21</h1>\n<ul>\n<li>Add <a href=\"https://github.com/container\"><code>@​container</code></a> support</li>\n<li>Add <a href=\"https://github.com/layer\"><code>@​layer</code></a> support</li>\n</ul>\n<h1>4.1.0 / 2023-01-25</h1>\n<ul>\n<li>Support ESM Modules</li>\n</ul>\n<h1>4.0.2 / 2023-01-12</h1>\n<ul>\n<li><a href=\"https://redirect.github.com/adobe/css-tools/issues/71\">#71</a> : <a href=\"https://github.com/import\"><code>@​import</code></a> does not work if url contains ';'</li>\n<li><a href=\"https://redirect.github.com/adobe/css-tools/issues/77\">#77</a> : Regression in selector parsing: Attribute selectors not parsed correctly</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/adobe/css-tools/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=@adobe/css-tools&package-manager=npm_and_yarn&previous-version=4.0.1&new-version=4.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-30T00:16:06Z","created_at":"2023-08-30T00:11:59Z","creator_user_login":"dependabot[bot]"}
{"number":27307,"title":"useFormState: Emit comment to mark whether state matches","body":"A planned feature of useFormState is that if the page load is the result of an MPA-style form submission — i.e. a form was submitted before it was hydrated, using Server Actions — the state of the hook should transfer to the next page.\r\n\r\nI haven't implemented that part yet, but as a prerequisite, we need some way for Fizz to indicate whether a useFormState hook was rendered using the \"postback\" state. That way we can do all state matching logic on the server without having to replicate it on the client, too.\r\n\r\nThe approach here is to emit a comment node for each useFormState hook. We use one of two comment types: `<!--F-->` for a normal useFormState hook, and `<!--!F-->` for a hook that was rendered using the postback state. React will read these markers during hydration. This is similar to how we encode Suspense boundaries.\r\n\r\nAgain, the actual matching algorithm is not yet implemented — for now, the \"not matching\" marker is always emitted.\r\n\r\nWe can optimize this further by not emitting any markers for a render that is not the result of a form postback, which I'll do in subsequent PRs.","state":"open","updated_at":"2023-08-30T19:40:52Z","created_at":"2023-08-29T22:23:55Z","creator_user_login":"acdlite"}
{"number":27306,"title":"Bug: Loader data causes renderer to produce null snapshot","body":"When React components rely on loader data within router, it is not possible to do snapshot testing since \"react-test-renderer\" creates `null` snapshots of those components. \r\n\r\nReact version: 18.2.0\r\nreact-test-renderer: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. **App.tsx**\r\n\r\n```TypeScript\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      let apiClient: ApiClient | undefined = undefined;\r\n\r\n      app\r\n        .initialize()\r\n        .then(async () => {\r\n          apiClient = await getApiClient();\r\n        });\r\n    };\r\n    initializeApp();\r\n  }, []);\r\n\r\n  const router = createBrowserRouter([\r\n    {\r\n      path: \"/\",\r\n      element: <Root />,\r\n      children: [\r\n        {\r\n          path: \"/person/:personId\",\r\n          element: <PersonView />,\r\n          loader: async ({ params }) => {\r\n            const personData = await apiClient!.getPersonById(params.personId);\r\n            return { personData };\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n\r\n  return (\r\n    <div className={styles.body}>\r\n        <RouterProvider router={router} />\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n2. **PersonView.tsx**\r\n\r\n```TypeScript\r\n\r\nexport const PersonView = () => {\r\n  const loaderData = useLoaderData() as { personData: Person };\r\n  const person = loaderData.personData;\r\n\r\n  return (\r\n    <div>\r\n      <span>{person.Id}</span>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n3. **PersonViewSnapshotTest.tsx**\r\n\r\n```TypeScript\r\n\r\ntest(\"renders PersonView\", () => {\r\n  const component = renderForSnapshot(<PersonView />, mockedPerson);\r\n  expect(component).toMatchSnapshot();\r\n});\r\n\r\nconst renderForSnapshot = (\r\n  ui: React.ReactElement,\r\n  mockLoaderData?: LoaderDataType,\r\n): ReactTestRenderer => {\r\n\r\n  const mainRoute: RouteObject = {\r\n    path: \"/\",\r\n    element: ui,\r\n    loader:  () => {\r\n          return { personData: mockLoaderData };\r\n    }\r\n  };\r\n\r\n  const router = createMemoryRouter([mainRoute], {\r\n    initialEntries: [\"/\"],\r\n    initialIndex: 0,\r\n  });\r\n\r\n  return renderer.create(<RouterProvider router={router} />);\r\n};\r\n\r\n```\r\n\r\n## The current behavior\r\nIt produces `null` snapshot:\r\n\r\n```TypeScript\r\n// Jest Snapshot v1, https://goo.gl/fbAQLP\r\n\r\nexports[`renders PersonView 1`] = `null`\r\n```\r\n\r\n## The expected behavior\r\nIt should produce full snapshot with mocked data that is fed to snapshot tests i.e. data within `mockedPerson`","state":"open","updated_at":"2023-08-29T20:22:08Z","created_at":"2023-08-29T20:14:06Z","creator_user_login":"rajarshi-singh"}
{"number":27303,"title":"Changes to simplify imports in react-reconciler files","body":"## Summary\r\n\r\nSimplified imports in react-reconciler/src directory to improve code legibility and keep it uniform.\r\n- Changed absolute imports to relative imports in the cases where export files are also in  react-reconciler/src, to keep consistency with other imports.\r\n- Removed a duplicate import from './ReactWorkTags' in ReactFiberErrorLogger.js, to avoid messy code.\r\n\r\n## How did you test this change?\r\n\r\nChange didn't require any testing.\r\n","state":"open","updated_at":"2023-08-29T01:41:32Z","created_at":"2023-08-29T01:25:54Z","creator_user_login":"MarceloSpessoto"}
{"number":27298,"title":"Wed","body":"<!--\n  Please provide a clear and concise description of what the bug is. Include\n  screenshots if needed. Please test using the latest version of the relevant\n  React packages to make sure your issue has not already been fixed.\n-->\n\nReact version:\n\n## Steps To Reproduce\n\n1.\n2.\n\n<!--\n  Your bug will get fixed much faster if we can run your code and it doesn't\n  have dependencies other than React. Issues without reproduction steps or\n  code examples may be immediately closed as not actionable.\n-->\n\nLink to code example:\n\n<!--\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\n  repository on GitHub, or provide a minimal code example that reproduces the\n  problem. You may provide a screenshot of the application if you think it is\n  relevant to your bug report. Here are some tips for providing a minimal\n  example: https://stackoverflow.com/help/mcve.\n-->\n\n## The current behavior\n\n\n## The expected behavior\n","state":"open","updated_at":"2023-09-01T19:00:00Z","created_at":"2023-08-28T18:41:08Z","creator_user_login":"Abelj08"}
{"number":27293,"title":"Update ReactErrorUtils.js","body":"updated the clearCaughtError function to a more readable\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-27T22:33:34Z","created_at":"2023-08-27T21:42:38Z","creator_user_login":"skh113"}
{"number":27292,"title":"Flooklnw2499 patch 1","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-27T22:33:59Z","created_at":"2023-08-27T21:22:12Z","creator_user_login":"flooklnw2499"}
{"number":27289,"title":"Bug: Memory leak for input element in react 18.2.0 and 16.14.0","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0 and 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nI can give a demo more obvious, the demo: https://codesandbox.io/s/admiring-khayyam-3s64gq?file=/src/App.tsx\r\n\r\nSteps To Reproduce:\r\n1. a simple demo can be found Here: https://codesandbox.io/s/admiring-khayyam-3s64gq?file=/src/App.tsx\r\n2. running GC and Take a heap snapshot\r\n![image](https://github.com/facebook/react/assets/6376429/b2a4c112-ff59-4a2f-ad7d-3e7df7c68189)\r\n3. Click 'open Modal click for test memory leak (has large input items)' and open modal\r\n4. focus any input item\r\n![image](https://github.com/facebook/react/assets/6376429/c00b87fa-5b4a-4213-95a2-ae97315c305e)\r\n5. close modal\r\n6. refresh state for click 'refresh state '\r\n7. running GC and Take a heap snapshot\r\n![image](https://github.com/facebook/react/assets/6376429/b0620fe4-6616-4d1b-b206-9a897f1d0cc3)\r\n\r\nand after that you can found large detached input element exist\r\n\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/admiring-khayyam-3s64gq?file=/src/App.tsx\r\n\r\n## The expected behavior\r\nhope some one can help resolve this \r\n","state":"open","updated_at":"2023-08-29T01:55:36Z","created_at":"2023-08-27T03:18:45Z","creator_user_login":"mshmyw"}
{"number":27288,"title":"fix & update react-art fixture","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe `react-art` fixture was outdated and did not run. (Babel required a newer version of webpack)\r\nI had to update webpack and it's configuration to run the fixture. Additionally, I converted the `VectorWidget` component to a functional component, as well as make some other changes that enabled react-18 (previously ran on react-17 due to `createRoot` not being used).\r\n\r\nThere is also general cleanup (example: var -> const/let)\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nPrior to updating anything (besides the build process) I opened index.html in my browser to understand the expected behavior.\r\n\r\nAfter all my updates, I ran `yarn build` in the project root directory, then moved into `fixtures/art` and ran `yarn && yarn build`\r\nUpon successfully building the app, I opened the html file in `Arc`, `Chrome`, and `Safari` to ensure the test runs the same as before.","state":"open","updated_at":"2023-08-27T02:15:32Z","created_at":"2023-08-27T01:24:05Z","creator_user_login":"V01D-NULL"}
{"number":27287,"title":"Add comment to describe \"lanes\" and \"childLanes\"","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nI am very interested in React (specifically react-fiber) and would like to become a contributor\r\nIn order to reach that goal I've been familiarizing myself with the code base and came across `lanes` on the `Fiber` type, which is the only thing left undocumented on that type.\r\n\r\nFigured this would be a good first PR.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nN/A","state":"open","updated_at":"2023-08-26T21:03:33Z","created_at":"2023-08-26T20:58:43Z","creator_user_login":"V01D-NULL"}
{"number":27286,"title":"Bug: Hydration fails in Next.js with server actions actions custom tags","body":"I'm currently testing the experimental server actions feature in Next.js. Once this feature is enabled Next.js uses React's experimental build. This however results in hydration failed error messages when using custom HTML tags with a dash like `my-tag` in JSX. The server response does not include any output for this tag and its children. Replacing the custom tag with a regular tag like `<div>` works completely fine.\r\n\r\nI previously reported this issue at vercel/next.js#51141 where they suspect this to be an issue within React itself.\r\n\r\nReact version: Experimental\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install latest next.js: npx create-[next-app](https://linear.app/vercel/issue/NEXT-app)@latest\r\n2. Enable server actions in next.config.js\r\n3. Wrap {children} in root layout with custom HTML tag like `<my-tag>`\r\n\r\nLink to code example:\r\nhttps://github.com/mritzerfeld/next-server-action-with-custom-tag\r\n\r\n## The current behavior\r\nServer-generated contents with custom HTML tags do no produce any output for such.\r\n\r\n## The expected behavior\r\nServer-generated contents within custom HTML tags to be included in server response, as using Next without server actions or with regular HTML tags.\r\n","state":"open","updated_at":"2023-08-26T13:58:05Z","created_at":"2023-08-26T13:58:05Z","creator_user_login":"mritzerfeld"}
{"number":27284,"title":"Bug:  Radio button onChange not called in current React Canary","body":"Create radio buttons that toggle disabled in onChange\r\nAfter selecting each radio button, onChange is no longer called","state":"open","updated_at":"2023-08-26T05:22:31Z","created_at":"2023-08-26T05:22:31Z","creator_user_login":"Shubhamkanskar"}
{"number":27283,"title":"Bug: input onChange function not firing after dispatchEvent","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a input component using forwardRef\r\n2. Call the import component and pass to it a ref and one onChange function.\r\n3. Create a button to set imperatively input's value and dispatch the event.\r\n4. Look how the onChange function will not be trigged\r\n\r\n\r\n![image](https://github.com/facebook/react/assets/102263444/bb2cdc68-dbd1-4fbd-b542-1ea997f8500a)\r\n\r\n\r\n\r\ncodesandbox example:\r\nhttps://codesandbox.io/p/sandbox/dreamy-fog-htzwhf?file=/src/App.tsx:18,22-18,39\r\n\r\nvanilla javascript example (functional):\r\nhttps://codepen.io/pen/?editors=1111\r\n\r\n## The current behavior\r\nAfter click the button, the input will receive a new value, but onChange is not triggered.\r\n\r\n## The expected behavior\r\nI was expecting that dispatchEvent could trigger change event.\r\n","state":"open","updated_at":"2023-08-26T01:02:30Z","created_at":"2023-08-26T01:02:30Z","creator_user_login":"jonathatargino"}
{"number":27281,"title":"TEST","body":"Hello","state":"open","updated_at":"2023-08-25T17:40:54Z","created_at":"2023-08-25T17:40:15Z","creator_user_login":"Shiva-Hiremath786"}
{"number":27280,"title":"Bug: Incorrect  'removeChild' on 'Node'","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18\r\n\r\n## Steps To Reproduce\r\n\r\n1.  There is a span dom on the page that switches based on the mouseenter event  \r\n2. After entering the page, use Google Translate\r\n3. Trigger the mouseenter event to switch span dom\r\n\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n                                       <span\r\n                                            onMouseEnter={() => setIsHover(true)}\r\n                                            className={`${isHover ? style.spanhover : ''} ${style.textspan}`}\r\n                                        >\r\n                                            {isHover ? <span className={style.hoverText}>Recommended style reference</span>\r\n                                                : chatLang === 'Chinese'\r\n                                                    ? (\r\n                                                        <>\r\n                                                            请尽量提供\r\n                                                            <span>光线明亮</span>\r\n                                                            、\r\n                                                            <span>不带阴影</span>\r\n                                                            的清晰人像。\r\n                                                        </>\r\n                                                    )\r\n                                                    : (\r\n                                                        <>\r\n                                                            {' '}\r\n                                                            Please provide a clear portrait\r\n                                                            with\r\n                                                            {' '}\r\n                                                            <span>bright lighting</span>\r\n                                                            {' '}\r\n                                                            and\r\n                                                            {' '}\r\n                                                            <span>no shadows.</span>\r\n                                                        </>\r\n                                                    )}\r\n                                        </span>\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n  Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-08-25T12:54:27Z","created_at":"2023-08-25T04:12:56Z","creator_user_login":"liuhuakawaii"}
{"number":27276,"title":"Add `--entry` argv to filter build bundles","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nReact repository contains many bundles so that building all bundles will be very timing consuming (✨ 600s+), this PR introduce `--entry` argc to filter build bundles so that we can only build specific bundles:\r\n\r\n```bash\r\nyarn build --entry=react    # ✨  Done in 27.51s.\r\n\r\n# Used with --type\r\nyarn build --entry=react --type=umd \r\n```\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nThis PR do not introduce changes in this user's perspective, and these changes are very minimal.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-24T08:10:59Z","created_at":"2023-08-24T06:37:53Z","creator_user_login":"ulivz"}
{"number":27272,"title":"Adds optional context as parameter to FiberRoot constructor","body":"## Summary\r\n\r\nI was navigating through the code and saw the TODO to be done\r\n\r\n## How did you test this change?\r\n\r\nAll tests are supposed to be still passing\r\n","state":"open","updated_at":"2023-08-24T15:06:06Z","created_at":"2023-08-22T20:01:29Z","creator_user_login":"gabemanfroi"}
{"number":27271,"title":"Optimize createElement","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nI created this PR in response to the https://github.com/facebook/react/issues/27216 issue I opened.\r\n\r\n## How did you test this change?\r\n\r\nI created a sandbox which renders a large React DOM tree with a configurable number of elements and props. These are broken up by LIST, DEPTH, and PROPS. I used the settings LIST = 500, DEPTH = 20, PROPS = 30 to emulate a complex react app and saw a 30-40% reduction in script. \r\n\r\nFor benchmarking, I used the production version of both the current 18.2.0 `createElement` and the production-built custom version of the modified `createElement` as seen in the PR.\r\n\r\nSandbox link:\r\n\r\nhttps://codesandbox.io/s/react-create-element-performance-comparison-tpp5cl?file=/src/App.js\r\n\r\nWhat the UI looks like:\r\n\r\n![image](https://github.com/facebook/react/assets/20049128/5658e7bb-c4db-4b51-80f2-f0b54b4ff696)\r\n\r\nWhat the F12 Performance Trace looks like:\r\n\r\n![image](https://github.com/facebook/react/assets/20049128/89ce9ec5-6960-4a03-89fd-fa22d968fa31)\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n \r\n","state":"open","updated_at":"2023-08-22T18:21:43Z","created_at":"2023-08-22T17:52:57Z","creator_user_login":"zackasaurus"}
{"number":27267,"title":"Bug: script inside script render with SSR + renderToPipeableStream","body":"The question/bug is about SSR + renderToPipeableStream\r\n\r\nThere is an idea, how to Inject something Into the SSR Stream in [reactwg/react-18](https://github.com/reactwg/react-18/discussions/114) by @sebmarkbage And yes, works perfectly. For example, I use it to inject to an html data, that were fetched on the server.\r\n\r\nThere can be situation, when `<script>` inside another `<script>` returns from renderToPipeableStream\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example:\r\n\r\nThere is the source code: https://github.com/artem-malko/react-ssr-template\r\nThere is my injector: https://github.com/artem-malko/react-ssr-template/blob/main/src/framework/applications/server/utils/reactStreamRenderEnhancer.ts\r\nAnd the usage: https://github.com/artem-malko/react-ssr-template/blob/main/src/framework/applications/server/createApplicationRouteHandler.tsx#L317\r\n\r\nThis project in action: http://174.138.13.187:5000/users?p=1 But it is extremely hard to repeat the bug  \r\n\r\n## The current behavior\r\n\r\nSometimes I get a quite interesting situation, when there is a script tag (just `<script>`)  inside chunk. This script contains a config for an application. And I try to add one more script to a page by using this injector pattern. So, I see that script internals (the code) on the client side cause of `<script>` inside another `<script>`. \r\n\r\n## The expected behavior\r\n\r\nActually I don't know, how to fix this problem(\r\n\r\nI can wrap the whole app with `<Suspense>` (that part, which is not in a shell. I mean https://github.com/artem-malko/react-ssr-template/blob/main/src/framework/applications/shell.tsx#L57C9-L57C19). But I'm not sure it is a good idea\r\n","state":"open","updated_at":"2023-08-23T06:59:47Z","created_at":"2023-08-22T16:19:41Z","creator_user_login":"artem-malko"}
{"number":27256,"title":"Bug: useEffect not firing when depending on hook value","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Setup a hook which returns a `ref.current` value.\r\n2. Setup a `useEffect` which depends on hooks return value.\r\n3. Have some `useState` which causes re-renders.\r\n4. The `useEffect` may not be called.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/zealous-jasper-fvynsw?file=/src/App.js\r\n\r\nBe sure to open the dev console\r\n\r\n\r\n**Relevant code:**\r\n```javascript\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const hooksValue = useHookThatReturnsRefValue();\r\n\r\n  console.info(\"Render:\", hooksValue);\r\n  useEffect(() => {\r\n    console.info(\"useEffect ran! ---------------------\", hooksValue);\r\n  }, [hooksValue]);\r\n\r\n  return <div>View dev console</div>;\r\n}\r\n\r\nfunction useHookThatReturnsRefValue() {\r\n  const [state, setState] = useState(0);\r\n  const ref = useRef(0);\r\n\r\n  useEffect(() => {\r\n    setState((old) => (old === 0 ? 1 : old));\r\n  }, [state]);\r\n\r\n  useEffect(\r\n    function loadInitialRange() {\r\n      if (state === 1) {\r\n        ref.current += 1;\r\n        const timeout = setTimeout(() => {\r\n          setState((old) => (old === 1 ? 0 : old));\r\n        }, 2000);\r\n        return () => clearTimeout(timeout);\r\n      }\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return ref.current;\r\n}\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe console output looks as follows:\r\n```\r\nindex.js:27 Render: 0\r\nindex.js:27 useEffect ran! --------------------- 0\r\nindex.js:27 Render: 0\r\nindex.js:27 Render: 1\r\nindex.js:27 Render: 1\r\nindex.js:27 Render: 1\r\nindex.js:27 Render: 2\r\nindex.js:27 Render: 2\r\nindex.js:27 Render: 2\r\nindex.js:27 Render: 3\r\nindex.js:27 Render: 3\r\nindex.js:27 Render: 3\r\nindex.js:27 Render: 4\r\nindex.js:27 Render: 4\r\nindex.js:27 Render: 4\r\nindex.js:27 Render: 5\r\n```\r\n\r\nThe `useEffect` is not called, but its impossible to know why. \r\nThis is an important issue, as there are no warnings about returning values from a hook that cannot be used in dependency arrays. \r\n\r\n## The expected behavior\r\n\r\nI would expect the console output to look as follows:\r\n\r\n```\r\nindex.js:27 Render: 0\r\nindex.js:27 useEffect ran! --------------------- 0\r\nindex.js:27 Render: 1\r\nindex.js:27 useEffect ran! --------------------- 1\r\nindex.js:27 Render: 2\r\nindex.js:27 useEffect ran! --------------------- 2\r\nindex.js:27 Render: 2\r\nindex.js:27 Render: 3\r\nindex.js:27 useEffect ran! --------------------- 3\r\nindex.js:27 Render: 4\r\nindex.js:27 useEffect ran! --------------------- 4\r\nindex.js:27 Render: 4\r\nindex.js:27 Render: 5\r\nindex.js:27 useEffect ran! --------------------- 5\r\n```","state":"open","updated_at":"2023-08-24T10:19:58Z","created_at":"2023-08-21T16:18:00Z","creator_user_login":"ThomasMorrison"}
{"number":27255,"title":"Bug: No apparent way to debug setupProxy.js","body":"I followed the instructions to set up a proxy API using `setupProxy.js`:\r\n\r\n```\r\nnpm install http-proxy-middleware --save\r\n```\r\nAnd `setupProxy.js`:\r\n```\r\nconst { createProxyMiddleware } = require('http-proxy-middleware');\r\n\r\nmodule.exports = function(app) {\r\n  app.use(\r\n    '/api',\r\n    createProxyMiddleware({\r\n      target: 'http://localhost:3000',\r\n      changeOrigin: true,\r\n    })\r\n  );\r\n};\r\n```\r\n\r\nHowever, requests starting with `/api/...` don't appear to be proxied properly and return 404s. I'd like to do further debugging to understand whether `setupProxy.js` is being loaded at all, and what is happening to the requests that are intended to be proxied. However, I can't find any documentation on how to debug proxied requests.\r\n\r\nI've tried adding logging:\r\n\r\n```\r\nonProxyRes: function(proxyRes, req, res) {\r\n                log(\"Req URL: \" + req.originalUrl);\r\n                log(\"Response status code: \" + proxyRes.statusCode);\r\n            }\r\n```\r\n\r\nBut I cannot find logs anywhere.\r\n\r\nWould it be possible to document how to add verbose logging to understand what is happening with `setupProxy.js` and how to debug proxied requests?\r\n\r\n","state":"open","updated_at":"2023-08-21T00:59:06Z","created_at":"2023-08-21T00:54:02Z","creator_user_login":"erjoalgo"}
{"number":27254,"title":"Bug: some /public resources not served when proxy is enabled in manifest.","body":"I'm using react within a Docker container with an accompanying backend. In order to minimize the number of ports exposed, I am attempting to have react proxy requests internally to the backend within the internal docker container network, as opposed to having the browser talk directly to the backend.\r\n\r\nSo I set the \"proxy\" key in `package.json`:\r\n\r\n```\r\n...\r\n\"proxy\": \"http://service:3000\",\r\n...\r\n```\r\n\r\nRequests to the backend are served correctly. Also, /public/index.html is served correctly.\r\n\r\nHowever, other resources under the react public directory, e.g. `/public/manifest.json`, `/public/favicon.ico` are also proxied to the backend, which in my case results in a 404.\r\n\r\nThough it's not explicitly stated, from the documentation I get the impression that only `unknown` requests are proxied, but I would expect the static resources under /public mentioned above should be recognized and served instead of proxied.\r\n\r\n```\r\nTo tell the development server to proxy any unknown requests to your API server in development, add a proxy field to your package.json, for example:\r\n\r\n  \"proxy\": \"http://localhost:4000\",\r\nThis way, when you fetch('/api/todos') in development, the development server will recognize that it’s not a static asset, and will proxy your request to http://localhost:4000/api/todos as a fallback. The development server will only attempt to send requests without text/html in its Accept header to the proxy.\r\n\r\nConveniently, this avoids [CORS issues](https://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\r\n```\r\n\r\nReact version:  \"react\": \"^18.0.0\",\r\n\r\n## Steps To Reproduce\r\n\r\n1. set the \"proxy\" property and start react\r\n2. attempt to fetch a non-text/html resource under /public\r\n\r\nLink to code example:\r\n\r\n\r\n## The current behavior\r\n/public/manifest.json is proxied to backend, resulting in 404\r\n\r\n\r\n## The expected behavior\r\n/public/manifest.json and other static files are recognized as a known resource and served\r\n","state":"open","updated_at":"2023-08-21T01:03:00Z","created_at":"2023-08-20T22:56:37Z","creator_user_login":"erjoalgo"}
{"number":27248,"title":"Bug: Re-rendering dynamically nested createElement() unmounts children","body":"When creating a dynamically created Component with nested createElement() calls, re-rendering causes the whole children tree to unmount and re-mount again.\r\n\r\nReact version: **18.3.0-canary-ade82b8dd-20230816** (most recent canary, as of the time of writing)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a dynamically created component, by nesting createElement:\r\n   ```javascript\r\n   const DynamicComponent = createElement(() => createElement(Demo));\r\n   ```\r\n2. Use `<DynamicComponent />` as children\r\n   ```javascript\r\n   return createElement(\"button\", null, DynamicComponent);\r\n   ``` \r\n3. Re-render the component with said children.\r\n\r\nLink **Make sure to open your console**: https://www.jaggli.com/react-mount-unmount-anomaly.html\r\nExample Source: https://github.com/jaggli/jaggli.github.io/blob/master/react-mount-unmount-anomaly.html\r\n\r\nThe relevant parts\r\n```javascript\r\nconst { createRoot } = ReactDOM;\r\nconst { createElement, useEffect, useState } = React;\r\n\r\nconst App = () => {\r\n  const [renderAmount, setRenderAmount] = useState(1);\r\n\r\n  // 🪲 this is where the bug happens 🪲\r\n  // every re-render returns a new function inside the inner createElement\r\n  const DynamicComponent = createElement(() => createElement(Demo));\r\n\r\n  return createElement(\r\n    \"button\",\r\n    // button onChange increases the state and trigger a re-render of the App\r\n    { onClick: () => setRenderAmount(renderAmount + 1) },\r\n    DynamicComponent\r\n  );\r\n};\r\n\r\n// Component for logging into console on mount and unmount\r\nconst Demo = () => {\r\n  useEffect(() => {\r\n    console.log(new Date().toLocaleTimeString(), \"Did mount\");\r\n    return () =>\r\n      console.log(\r\n        new Date().toLocaleTimeString(),\r\n        \"Did unmount\\n---\"\r\n      );\r\n  }, []);\r\n  return \"Click to change state (check the console)\";\r\n};\r\n```\r\n\r\n\r\n## The current behavior\r\nWhen re-rendering `<App />` (above), the children of `<DynamicComponent />` get unmounted and re-mounted. \r\n\r\n## The expected behavior\r\nWhen re-rendering `<App />`, children should stay mounted.","state":"open","updated_at":"2023-08-18T12:30:31Z","created_at":"2023-08-18T10:49:59Z","creator_user_login":"jaggli"}
{"number":27247,"title":"Bug: hydration fails when using Promise values with React Server Components","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: react-dom@18.3.0-experimental-1a001dac6-20230812\r\n\r\n## Steps To Reproduce\r\n\r\n1. use inlined Promise values in JSX\r\n2. hydration fails\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://stackblitz.com/edit/stackblitz-starters-u9soom?file=app%2Fpage.jsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhile rendering of HTML is correct and HTML and flight response seems to be ok, hydration fails.\r\nMaybe the issue correlates with ordering and timing replacing of suspended fragments in the DOM tree and processing the flight response for hydration.\r\n\r\n## The expected behavior\r\n\r\nReact tree gets hydrated correctly.","state":"open","updated_at":"2023-08-18T09:57:25Z","created_at":"2023-08-18T09:57:25Z","creator_user_login":"lazarv"}
{"number":27246,"title":"bypass progressive loading for the CSS","body":"# Context\r\n\r\nI moved recently to renderToPipeableStream to increase performance of our application.\r\nNevertheless my work is refused because there the product team doesn’t like the transition effect between the raw html loaded and the moment where the css is finally loaded.\r\n\r\nHere is the effect, that the product team wants to avoid : \r\n\r\n\r\nhttps://github.com/facebook/react/assets/21305034/4fb7f950-69b1-4d2e-92c9-3141d91e9815\r\n\r\n\r\n*For the example, I simulate a slow network but even with fast connection, the transition briefly appears.*\r\n\r\n\r\n# My code\r\n\r\n```typescript\r\nimport type { Response } from 'express';\r\nimport { renderToPipeableStream } from 'react-dom/server';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport App from './MainApp';\r\n\r\nexport async function render(url: string, res: Response, assets, webMain: string[]) {\r\n  const helmet = Helmet.renderStatic();\r\n  const context = { statusCode: 200 };\r\n  let didError = false;\r\n  const stream = renderToPipeableStream(<App url={url} context={context} assets={assets} helmet={helmet} />, {\r\n    bootstrapScripts: webMain,\r\n    onAllReady: () => {\r\n      res.setHeader('Content-type', 'text/html');\r\n      if (didError) {\r\n        res.status(500);\r\n      } else {\r\n        res.status(context.statusCode || 200);\r\n      }\r\n      stream.pipe(res);\r\n    },\r\n    onError: () => {\r\n      didError = true;\r\n    },\r\n    onShellError: () => {\r\n      didError = true;\r\n    },\r\n  });\r\n}\r\n```\r\n\r\n# My question\r\n\r\nIs it possible to begin to display something only when we get all the css ? (But to keep the stream strategy for all the js files and keep the hydratation) ? ","state":"open","updated_at":"2023-08-27T17:23:05Z","created_at":"2023-08-18T08:22:07Z","creator_user_login":"ahuet67"}
{"number":27245,"title":"fix: Corrected grammatical mistakes on the `README.md` file.","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n# With the following PR, I have fixed some grammatical mistakes in the `README.md` file.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n### I have run the recommended test command, i.e. `yarn test`, and ran `yarn prettier` to check the formatting issues. \r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-22T05:53:16Z","created_at":"2023-08-18T06:11:38Z","creator_user_login":"gvirus21"}
{"number":27244,"title":"[DevTools Bug]: TypeError: Cannot read properties of undefined (reading 'forEach')","body":"### Website or app\n\nthe NextJS App in development phase\n\n### Repro steps\n\nOn refreshing the web pages error being shown sometimes\r\n\r\n<img width=\"722\" alt=\"image\" src=\"https://github.com/facebook/react/assets/56193250/bc3e26a3-243b-4e02-8d45-7c2f4a838323\">\n\n### How often does this bug happen?\n\nSometimes\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n4.28.0 (7/10/2023)\n\n### Error message (automated)\n\nTypeError: Cannot read properties of undefined (reading 'forEach')\n\n### Error call stack (automated)\n\n```text\nsetup\r\nchrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backendManager.js (4073:17)\r\nwelcome\r\nchrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backendManager.js (4057:3)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-08-29T09:52:50Z","created_at":"2023-08-18T06:09:09Z","creator_user_login":"nandkishorakangire"}
{"number":27242,"title":"Could you please add a license file to the client-only package?","body":"I am checking this link in the bugs section of the [client-only package.json](https://www.npmjs.com/package/client-only?activeTab=code).\r\nSorry if I created the issue in the wrong place.\r\n\r\nThe [client-only package](https://www.npmjs.com/package/client-only?activeTab=code) does not have a license file like `LICENSE.txt`, but package.json says MIT.\r\nIs it possible to have a license file added to indicate that this package is MIT licensed?","state":"open","updated_at":"2023-08-30T12:44:56Z","created_at":"2023-08-18T01:33:16Z","creator_user_login":"nus3"}
{"number":27241,"title":"Feature request: TODO task","body":"## Issue: Implement useTransition hook for async strategy in handleChange function\r\n\r\n### File\r\nfixtures/concurrent/time-slicing/src/index.js\r\n\r\n### Problem:\r\nThe current codebase contains a TODO in the `handleChange` function where it suggests using the `useTransition` hook instead of directly calling `setState` for the 'async' strategy. This enhancement aims to optimize the rendering behavior by leveraging the benefits of `useTransition`.\r\n\r\n### Proposed Solution:\r\nReplace the existing `this.setState({value})` with a `startTransition` block that wraps the `this.setState({value})` call. This way, the asynchronous state update will be managed by the `useTransition` hook, improving rendering performance in 'async' strategy cases\r\n\r\n### Concerns\r\nSince hooks cannot be used in class components my proposed solution is to refactor the App component that is in the code to a functional component.\r\n\r\n### Steps to Implement:\r\n1. Replace the existing `this.setState({value})` with a `startTransition` block.\r\n2. Test the functionality thoroughly to ensure the behavior is consistent with the other strategies.\r\n\r\n### Benefits:\r\n- Improves rendering performance by using `useTransition` for asynchronous state updates.\r\n- Enhances codebase by adhering to best practices and leveraging React's latest features.\r\n","state":"open","updated_at":"2023-08-18T01:05:43Z","created_at":"2023-08-18T00:48:34Z","creator_user_login":"pcha07"}
{"number":27240,"title":"Update error decoder URL","body":"Updates the error decoder to the URL for the new docs site.\r\n\r\n- Switches the domain from reactjs.org to react.dev\r\n- Switches to put the error code in the URL for SSG\r\n- All params are still in the query\r\n\r\nExample without args:\r\n\r\n- Before: `https://reactjs.org/docs/error-decoder.html?invariant=200`\r\n- After: ` https://react.dev/errors/200`\r\n\r\nExample with args:\r\n- Before: `https://reactjs.org/docs/error-decoder.html?invariant=124?args[]=foo&args[]=bar `\r\n- After: ` https://react.dev/errors/124?args[]=foo&args[]=bar`\r\n\r\n\r\nRequires: https://github.com/reactjs/react.dev/pull/6214","state":"open","updated_at":"2023-08-21T17:59:40Z","created_at":"2023-08-17T21:14:51Z","creator_user_login":"rickhanlonii"}
{"number":27237,"title":"Bug: react.dev tutorial-tic-tac-toe sample project errors out in modern node versions","body":"Following the step by step instructions for tutorial-tic-tac-toe on react.dev results in errors that make the tutorial impossible to continue.\r\n\r\nReact version: `\"react\": \"^18.0.0\",` (as specified in package.json)\r\nNode version: 20.5.1\r\n\r\n## Steps To Reproduce\r\n\r\nFollow the instructions for using your local development environment at https://react.dev/learn/tutorial-tic-tac-toe#setup-for-the-tutorial and proceed through the five steps:\r\n\r\n> 1. Install [Node.js](https://nodejs.org/en/)\r\n> 2. In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose File > Export to ZIP in that menu to download an archive of the files locally\r\n> 3. Unzip the archive, then open a terminal and cd to the directory you unzipped\r\n> 4. Install the dependencies with npm install\r\n> 5. Run npm start to start a local server and follow the prompts to view the code running in a browser\r\n\r\nWhen running `npm start`, see errors in the console, and in the browser:\r\n\r\n![image](https://github.com/facebook/react/assets/139312/59adb6a0-4e67-4bf9-8a81-6b429c3b491b)\r\n\r\n![image](https://github.com/facebook/react/assets/139312/92c630c4-d992-4a11-bf98-1a04998fbada)\r\n\r\n**The process works as intended when using node versions 15 or lower, but fails in the way described above in 16 and above, including the latest, v20**\r\n\r\nIf the intention is that the tutorial files should be run in an outdated version of node, that should be specified up front in the tutorial docs, and enforced in the source code files provided, e.g.\r\n\r\n```\r\n\"engines\" : { \r\n    \"node\" : \"<=15\"\r\n  }\r\n```\r\n\r\n## The current behavior\r\n\r\nThe application errors out instead of running properly, with no useful error message for the user indicating that this is a problem with the node version.\r\n\r\n## The expected behavior\r\n\r\nThe application should _not_ error out, it should run properly, or else should properly notify the user that their node version is incorrect for this codebase.","state":"open","updated_at":"2023-08-31T19:38:33Z","created_at":"2023-08-17T00:44:33Z","creator_user_login":"mattlohkamp"}
{"number":27235,"title":"Bug: Safari gets stuck when listening to \"wheel\" event and element size changes","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18\r\n\r\n## Steps To Reproduce\r\n\r\nActually it's not a React bug, but a Safari one. I just reported it to them: https://bugs.webkit.org/show_bug.cgi?id=260253\r\n\r\nBriefly, If you are listening to the \"wheel\" event, changing the size of the element will take extremely long, even if the listener doesn't do anything. \r\n\r\nThe problem is that React automatically adds a listener to the \"wheel\" event when creating the root element, and there seems to be no way to disable it from users side.\r\n\r\nRepro steps:\r\n\r\n1. Open this [html](https://github.com/turkey1zh/Safari-Bug-Repro/blob/ff09658fa3e626b3be7bb654d6ed8c0d1df8e7d3/test-react.html) by using Safari\r\n2. Change Safari window width to the minimum size\r\n3. Open the Web Inspector\r\n4. Enable/disable the \"margin-left\" attribute of the root element\r\n   (You'll notice the rendering took a long time)\r\n\r\n<img width=\"1480\" alt=\"image\" src=\"https://github.com/facebook/react/assets/70461519/4ea8d9cf-d68c-4972-893c-e9c70785da4f\">\r\n\r\n## The current behavior\r\nWhen enabling \"margin-left\", Safari gets stuck for a while.\r\n\r\n## The expected behavior\r\nSafari won't get stuck.\r\n\r\n\r\nI'm not sure how long it will take Safari to fix this. Is it possible to remove this event from React side or give some options to disable it?","state":"open","updated_at":"2023-08-21T07:23:20Z","created_at":"2023-08-16T11:44:13Z","creator_user_login":"turkey1zh"}
{"number":27233,"title":"Bug: support `fetchPriority` in camel-case on DOM nodes.","body":"At the moment, the HTML fetchPriority is only supported written as `fetchpriority`, see https://github.com/facebook/react/issues/26810\r\n\r\nBut as per https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65972 it is required in `@types/react` to be written as `fetchPriority` as it is also for other props e.g. `imageSrcSet`. \r\n\r\nWith spelling it as camel-case, react ejects a warning:\r\n```\r\nWarning: React does not recognize the `fetchPriority` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `fetchpriority` instead. If you accidentally passed it from a parent component, remove it from the DOM element.\r\n    at link\r\n    at head\r\n    at Head (webpack-internal:///./node_modules/next/dist/pages/_document.js:258:1)\r\n    at html\r\n    at Html (webpack-internal:///./node_modules/next/dist/pages/_document.js:680:119)\r\n    at MyDocument (webpack-internal:///./pages/_document.tsx:24:1)\r\n```\r\n\r\nRelevant versions:\r\n```\r\n\"@types/react\": \"^18.2.20\",\r\n\"react\": \"^18.2.0\",\r\n\"react-dom\": \"^18.2.0\",\r\n\"next\": \"13.4.12\",\r\n\"typescript\": \"^5.1.6\", \r\n```\r\n\r\n## Steps To Reproduce\r\nExample component: \r\n```\r\nimport React from \"react\";\r\nimport NextHead from \"next/head\";\r\n\r\ntype Props = {\r\n    webP: string;\r\n};\r\n\r\nexport const ImagePreload: React.FC<Props> = React.memo(({ webP }) => (\r\n    <NextHead>\r\n        <link\r\n            key={`image-preload-${webP}`}\r\n            rel=\"preload\"\r\n            as=\"image\"\r\n            imageSrcSet={webP}\r\n            fetchPriority=\"high\"\r\n        />\r\n    </NextHead>\r\n));\r\nImagePreload.displayName = \"ImagePreload\";\r\n```","state":"open","updated_at":"2023-08-15T12:11:09Z","created_at":"2023-08-15T12:11:09Z","creator_user_login":"fmacherey"}
{"number":27231,"title":"chore(docs): updated README documentation","body":"Updated README.md based on current React website documentation description","state":"open","updated_at":"2023-08-15T01:13:11Z","created_at":"2023-08-14T19:48:11Z","creator_user_login":"lyannel"}
{"number":27228,"title":"collecting the error","body":"https://github.com/facebook/react/blame/1a001dac6220a64d98ae33a28e89dde78100d6c5/packages/react-devtools/app.js#L43\r\nfinding the error when it's going for the debuging and the major the real value isnot added and then fiding the error when it is loading ","state":"open","updated_at":"2023-08-14T04:03:59Z","created_at":"2023-08-14T04:03:59Z","creator_user_login":"Tapaskumar95"}
{"number":27227,"title":"Request Listing my New Tool on Your Project","body":"I Would Like To Request Adding My New Tool To Your Github Top List \r\nhttps://github.com/dragonked2/Egyscan\r\n\r\n![image_2023-07-22_23-40-22 (2)](https://github.com/freeCodeCamp/freeCodeCamp/assets/66541902/d0cc6f12-de02-4dee-bae3-1a9ee764d4dc)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n![[Image](og:image)](http://156.223.131.194:4444/)\r\n![[Image](og:image)](http://156.223.131.194:80/index.php)","state":"open","updated_at":"2023-08-14T02:25:21Z","created_at":"2023-08-14T02:25:21Z","creator_user_login":"dragonked2"}
{"number":27226,"title":"Bug: React event does not trigger during HMR","body":"When making changes to the DOM causing HMR, event stop functioning.\r\n\r\nTested on react 16 and 18 (likely 17 too)\r\n\r\n```tsx\r\nfunction App() {\r\n  const [inputText, setInputText] = useState('')\r\n\r\n  const onChange = useCallback((e) => setInputText(e.target.value), [])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      const input = document.getElementById('input') as any\r\n      userEvent.type(input, 'hello')\r\n    }, 1000)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Make some change to the <code>App.tsx</code> that adds a node in the DOM, e.g. add some string above this div.\r\n      </div>\r\n      <input id=\"input\" onChange={onChange} />\r\n      <div>\r\n        state value: {inputText}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://github.com/cyberuni/react-hmr-issue\r\n\r\n```sh\r\npnpm i\r\npnpm dev\r\n```\r\n\r\nFollow the steps on screen: Add a text node above the `div`\r\n\r\n## The current behavior\r\n\r\nevent not triggered\r\n\r\n## The expected behavior\r\n\r\nevent should trigger\r\n\r\n## Additional Context\r\n\r\nMay be related to https://github.com/facebook/react/issues/15461","state":"open","updated_at":"2023-08-13T19:31:55Z","created_at":"2023-08-13T19:12:12Z","creator_user_login":"unional"}
{"number":27221,"title":"Bug: Minified React error #299 | createRoot(...): Target container is not a DOM element.","body":"createRoot(...): Target container is not a DOM element.\r\n\r\nThis issue keeps showing up but I've made sure I'm using the correct DOM element which comes from the vite+react boilerplate! (root)\r\n![image](https://github.com/facebook/react/assets/78984964/01afca24-73c4-416f-b605-51252991d8b5)\r\n![image](https://github.com/facebook/react/assets/78984964/20ea5e3f-0d72-48b5-92f7-a53b6f5b616e)\r\n\r\n![image](https://github.com/facebook/react/assets/78984964/e49bcb0d-c62c-46ad-ab8e-fc835406c3b7)\r\n\r\n\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Deploy vite+react+tailwind framework as indicated in tailwindcss website:\r\nhttps://tailwindcss.com/docs/guides/vite\r\n\r\n\r\n\r\nLink to code example:\r\nhttps://tailwindcss.com/docs/guides/vite\r\n\r\n\r\n## The current behavior\r\nmessage shows up everytime!\r\n\r\n## The expected behavior\r\nno reason to show that message","state":"open","updated_at":"2023-08-16T13:10:31Z","created_at":"2023-08-13T01:30:34Z","creator_user_login":"MiguelG97"}
{"number":27219,"title":"My javascript code cannot fetch or display data from an API and I can't identify the error","body":"","state":"open","updated_at":"2023-08-28T07:18:41Z","created_at":"2023-08-12T17:38:10Z","creator_user_login":"Asare6"}
{"number":27216,"title":"Can createElement be optimized for performance?","body":"For large complex apps that have many props and a deep react DOM tree, createElement is one of the most expensive operations.\r\n\r\nI've noticed for large complex apps such as Facebook and Discord, createElement can take up 10% of the memory allocation during a basic scenario, and it can take up 2-5% of the script time, not accounting for MajorGC and MinorGC.\r\n\r\nThe issue is that the props object in createElement gets created from scratch, and the entire config that's passed in gets iterated over. Since the config object isn't used anymore after createElement, it gets marked for GC, which additionally hurts performance.\r\n\r\nI have an idea where we can just simply assign props to config for most cases, such as when the props object is not frozen, and no key or ref was passed in to createElement. I can create a PR, but I wanted to run it by the react devs first to see if there is anything I'm missing. \r\n\r\nFacebook\r\n\r\n<img width=\"1279\" alt=\"Screenshot 2023-08-11 at 11 25 34 AM\" src=\"https://github.com/facebook/react/assets/20049128/6df55010-ee2e-497b-af1c-57a694084165\">\r\n<img width=\"601\" alt=\"Screenshot 2023-08-11 at 11 25 43 AM\" src=\"https://github.com/facebook/react/assets/20049128/44ec9a09-db5a-4508-bbba-06fcd7672d0a\">\r\n<img width=\"1283\" alt=\"Screenshot 2023-08-11 at 11 24 49 AM\" src=\"https://github.com/facebook/react/assets/20049128/12fde72f-1ca7-4b32-aac9-1ace6fba0274\">\r\n\r\nDiscord\r\n\r\n<img width=\"1284\" alt=\"Screenshot 2023-08-11 at 11 17 39 AM\" src=\"https://github.com/facebook/react/assets/20049128/bb02bd70-e799-439b-b9c2-a4ff1dc351b9\">\r\n<img width=\"560\" alt=\"Screenshot 2023-08-11 at 11 17 57 AM\" src=\"https://github.com/facebook/react/assets/20049128/16d2c769-d17f-49c9-93fc-9128b56c9df1\">\r\n","state":"open","updated_at":"2023-08-11T15:41:59Z","created_at":"2023-08-11T15:41:59Z","creator_user_login":"zackasaurus"}
{"number":27214,"title":"Key","body":"Hi, Would be really great if you offered the feature of displaying key for components to help us debug when something does not have a unique key.","state":"open","updated_at":"2023-08-19T09:26:14Z","created_at":"2023-08-11T09:07:57Z","creator_user_login":"richardoptibrium"}
{"number":27213,"title":"Bug: React trigger multiple re-render by once setState (not use StrictMode)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/goofy-bogdan-3pt5h6?file=/src/App.js\r\n\r\nClick button.\r\n\r\n## The current behavior\r\n\r\nrender will trigger twice.\r\n\r\n\r\n## The expected behavior\r\n\r\nrender should be once\r\n\r\n## Ref\r\n\r\nDebug find that call setState in useEffect with same state will create a queue task which will flush in next state update:\r\n\r\nhttps://github.com/facebook/react/blob/533fc28c1b8ea2c6ed459e914849665f497755ff/packages/react-reconciler/src/ReactFiberHooks.js#L2808\r\n\r\nI'm not sure if this could be remove safely","state":"open","updated_at":"2023-08-27T14:36:30Z","created_at":"2023-08-11T07:37:27Z","creator_user_login":"zombieJ"}
{"number":27211,"title":"[DevTools Bug]: react-hooks/rules-of-hooks does not report error for function starting with _","body":"### Website or app\n\nhttps://codesandbox.io/p/sandbox/quizzical-shirley-9y2txs\n\n### Repro steps\n\nUsing ESLint rule `react-hooks/rules-of-hooks` with the following code, I would expect it to report errors for invalid usage of hooks. It does not report anything though unless I change `_isEnabled` to `isEnabled`.\r\n\r\n```js\r\nconst useFeatureEnabled = () => {\r\n  const enabled = useEnabled();\r\n  const isEnabled = enabled && _isEnabled();\r\n  return { featureEnabled: isEnabled };\r\n};\r\n\r\nconst _isEnabled = () => {\r\n  const { settingEnabled } = useSettings();\r\n  return settingEnabled;\r\n};\r\n\r\n\r\n// From https://github.com/facebook/react/blob/a20eea25197df0da80104917df414747eeab1ac9/packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js#L716\r\n// These are neither functions nor hooks.\r\nfunction _normalFunctionWithHook() {\r\n  useHookInsideNormalFunction();\r\n}\r\nfunction _useNotAHook() {\r\n  useHookInsideNormalFunction();\r\n}\r\n```\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-08-17T15:07:28Z","created_at":"2023-08-10T21:49:58Z","creator_user_login":"Hirse"}
{"number":27207,"title":"Bug: d.split(\"+\").at is not a function. (In 'd.split(\"+\").at(-1)', 'd.split(\"+\").at' is undefined) error in safari 14.1 running react js","body":"TypeError: d.split(\"+\").at is not a function. (In 'd.split(\"+\").at(-1)', 'd.split(\"+\").at' is undefined)\r\n\r\n<img width=\"1440\" alt=\"Screenshot 2023-08-09 at 11 20 10 AM\" src=\"https://github.com/facebook/react/assets/141808324/d75f71b7-fe8e-4d82-8647-c29e615f78fb\">\r\n\r\nwhile running react app on safari 14.1 i come across this error , but on safari latest versions and google chrome, react app is working fine.\r\n\r\ni tried debugging the the error and i think it's from the bundle.js file, is not please correct me.","state":"open","updated_at":"2023-08-09T06:20:19Z","created_at":"2023-08-09T06:20:19Z","creator_user_login":"samwac"}
{"number":27206,"title":"replaced the custom clz32 function with Math.clz32","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nMath.clz32 is API is supported by almost all the browsers and node12+. So we should replace the custom clz32 function with the `Math.clz32` function.\r\n<img width=\"851\" alt=\"Screenshot 2023-08-09 at 10 13 17\" src=\"https://github.com/facebook/react/assets/61848210/70033e27-e6b0-4f18-9dd9-be61c597c78c\">\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n<!-- ## How did you test this change?\r\n-->\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-31T07:09:06Z","created_at":"2023-08-09T04:52:40Z","creator_user_login":"girishsontakke"}
{"number":27204,"title":"feat: replace name with displayName in errorboundary componentStack","body":"## Summary\r\n\r\nIn React16, while component throw error, developer can get component displayName from ErrorBoundary componentStack, if error component has displayName. For production debug or monitor, displayName is useful.\r\n\r\n\r\n## How did you test this change?\r\nrun `yarn test --prod`\r\n<img width=\"464\" alt=\"image\" src=\"https://github.com/facebook/react/assets/23349174/712d01d8-25c5-4492-8fbd-b2991d03ca09\">\r\n\r\n\r\n","state":"open","updated_at":"2023-08-22T06:07:55Z","created_at":"2023-08-09T02:23:29Z","creator_user_login":"acejs"}
{"number":27203,"title":"Bug: react inspector \"inspection\" button doesn't work","body":"The arrow button for inspection doesn't work with last version of React Inspector (since nearly one year), how to make it work ?\r\n\r\n- React inspector 4.28.0\r\n- React v17.0.2\r\n\r\nhttps://github.com/facebook/react/assets/25119847/50303191-045e-4674-ad81-12ce560cd112\r\n\r\nThanks a lot for your help\r\n\r\n","state":"open","updated_at":"2023-08-23T14:35:03Z","created_at":"2023-08-08T16:41:22Z","creator_user_login":"Aarbel"}
{"number":27197,"title":"Bug: `react-server-dom-esm` package is empty","body":"I thought it would be helpful to use [`react-server-dom-esm`](https://www.npmjs.com/package/react-server-dom-esm) for an RSC test integration, but the package appears to be empty for parking purposes.\r\n\r\nPlease consider publishing it as I'd prefer to use official implementations of servers to encourage testing practices that are supported by React. I'm also unable to build from source, it appears as the version of this package on `main` isn't in working condition outside of some internal fixtures yet.\r\n\r\n**Note:** I originally thought this issue also applied to [`react-server-dom-webpack`](https://www.npmjs.com/package/react-server-dom-webpack), but later realized I was installing the wrong channel, and that only the `latest` channel was empty. If there are resources to document this package, please clarify channel usage in the installation instructions.\r\n\r\n<!--\r\n\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.3 (canary)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install [`react-server-dom-esm`](https://www.npmjs.com/package/react-server-dom-esm)\r\n2. `import \"react-server-dom-esm/server\";`\r\n3. Run with `node --conditions react-server`\r\n\r\nAlternative you can look up the [code on npm](https://www.npmjs.com/package/react-server-dom-esm?activeTab=code), which has no JavaScript files.\r\n\r\n## The current behavior\r\n\r\nPackage fails to resolve modules because they're missing.\r\n\r\n## The expected behavior\r\n\r\nPackage contains code that can be imported and run.","state":"open","updated_at":"2023-08-17T04:28:54Z","created_at":"2023-08-06T09:27:53Z","creator_user_login":"nickmccurdy"}
{"number":27196,"title":"Bug: fixtures/packaging/babel-standalone/dev.html Gives 'ReactDOM.render is no longer supported' Error","body":"I have already opened a PR for this, but am adding this issue to follow the How to Contribute documentation.\r\nPR with fix: https://github.com/facebook/react/pull/27195\r\n\r\n\r\nFollowing the process in the How to Contribute documentation, after the first build, to test it says to open the file: `fixtures/packaging/babel-standalone/dev.html`\r\n\r\nOpening it, the console gives this error:\r\n\r\n`react-dom.development.js:81 Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot`\r\n\r\n![image](https://github.com/facebook/react/assets/479664/3c876261-94e9-4082-a994-6eebb9094ef0)\r\n\r\n\r\nReact version: Main branch\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone fresh copy of repo\r\n2. Follow How to Contribute documentation\r\n3. Run `yarn build react/index,react-dom/index --type=UMD`\r\n4. Open `fixtures/packaging/babel-standalone/dev.html`\r\n5. Open console, see error\r\n\r\n## The current behavior\r\n\r\nShows error\r\n\r\n## The expected behavior\r\n\r\nShould not show error\r\n","state":"open","updated_at":"2023-08-06T03:35:43Z","created_at":"2023-08-06T03:16:08Z","creator_user_login":"MattEvanoff"}
{"number":27195,"title":"Updating fixtures/packaging/babel-standalone/dev.html to use createRoot","body":"Fixes: #27196 \r\n\r\n## Summary\r\n\r\nFollowing the process in the How to Contribute documentation, after the first build, to test it says to open the file: `fixtures/packaging/babel-standalone/dev.html`\r\n\r\nWhen I opened this file, the console had this error:\r\n\r\n`react-dom.development.js:81 Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot`\r\n\r\nThis change updates the code in that file from `ReactDOM.render` to `ReactDOM.createRoot` to fix the problem causing the error.\r\n\r\n## How did you test this change?\r\n\r\nI made this change, then looked at the console to verify the error was gone, and the rendered page to verify it was the same as before the change.  Here are screenshots:\r\n\r\nBefore:\r\n![image](https://github.com/facebook/react/assets/479664/75628eab-8325-4f5a-a80d-7481f4fec5fb)\r\n\r\nAfter:\r\n![image](https://github.com/facebook/react/assets/479664/7193588d-bafd-4107-ab01-cc368e3f4915)\r\n\r\nNote:  I could not find an existing issue for this, so following the request in the How to Contribute document, I have added one here: https://github.com/facebook/react/issues/27196\r\n","state":"open","updated_at":"2023-08-06T03:37:42Z","created_at":"2023-08-06T02:45:46Z","creator_user_login":"MattEvanoff"}
{"number":27194,"title":"Bug: Devtools extension not building in windows and ubuntu","body":"\r\n\r\nDevtools extension is not building in ubuntu and windows\r\n\r\nBelow is the extension build failing in ubuntu even though it says chrome extension has built\r\n![bikid476@BIKISDESKTOP_ ~_react-1_packages_react-devtools-extensions 8_5_2023 1_40_08 PM](https://github.com/facebook/react/assets/72331432/597f6019-895b-4e1c-befa-8b7e6bab3dbe)\r\n\r\n\r\nBelow is the extension failing in windows\r\n![bikid476@BIKISDESKTOP_ ~_react-1_packages_react-devtools-extensions 8_5_2023 1_51_08 PM](https://github.com/facebook/react/assets/72331432/d817153f-cc3a-40d5-9a19-6d015299017a)\r\n\r\n\r\nIt just fails with some artifact error!\r\n\r\n@hoxyq 😅 My mac has gone dead and i am looking to tinker with devtools and have some ideas in plan to implement so we can fix this out and hopefully i can continue to work on devtools","state":"open","updated_at":"2023-08-13T14:06:56Z","created_at":"2023-08-05T08:26:18Z","creator_user_login":"Biki-das"}
{"number":27193,"title":"[DevTools Bug]:  Devtool extension build failing in windows and ubuntu","body":"### Website or app\n\nN/A\n\n### Repro steps\n\nDevtools extension is  not building in ubuntu and windows\r\n\r\nBelow is the extension build failing in ubuntu even though it says chrome extension has built\r\n![bikid476@BIKISDESKTOP_ ~_react-1_packages_react-devtools-extensions 8_5_2023 1_40_08 PM](https://github.com/facebook/react/assets/72331432/24a2d4bc-5d5b-40e2-8844-b76639b5ae8e)\r\n\r\nBelow is the extension failing in windows \r\n![bikid476@BIKISDESKTOP_ ~_react-1_packages_react-devtools-extensions 8_5_2023 1_51_08 PM](https://github.com/facebook/react/assets/72331432/d1095bfd-772e-4e4b-a794-9cb23ceec235)\r\n\r\nIt just fails with some artifact error!\r\n\r\n\r\n@hoxyq 😅 My mac has gone dead and i am looking to tinker with devtools and have some ideas in plan to implement so we can fix this out and hopefully i can continue to work on devtools\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-08-07T10:10:33Z","created_at":"2023-08-05T08:23:33Z","creator_user_login":"Biki-das"}
{"number":27186,"title":"[DevTools Bug] Node \"24\" was removed before its children.","body":"### Website or app\n\nhttps://super-visa-insurance.netlify.app/\n\n### Repro steps\n\nI'm Facing an Issue in my Nextjs 13.4.12  project, main tag is automatically removed in from the page. \r\nBefore this I changed my zustand store with react-query for caching results, but I reverted these changes because I was facing this issue, but after reverting I still face this issue\r\n\n\n### How often does this bug happen?\n\nSometimes\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.28.0-035a41c4e\n\n### Error message (automated)\n\nNode \"24\" was removed before its children.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28315:43\r\n    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24827:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24996:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:57406:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Node  was removed before its children. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-08-11T14:35:47Z","created_at":"2023-08-04T06:23:24Z","creator_user_login":"anmol-fzr"}
{"number":27185,"title":"[DevTools Bug] Cannot add node \"1\" because a node with that id is already in the Store.","body":"### Website or app\n\nrunning react app\n\n### Repro steps\n\ni just made a basic portfolio app on react app and suddenly this bug showed up, and i cant seem to access the localhost link in any browser beside Firefox\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.8-2468a8735\n\n### Error message (automated)\n\nCannot add node \"1\" because a node with that id is already in the Store.\n\n### Error call stack (automated)\n\n```text\nemit@moz-extension://961fb755-5a59-4c1c-943c-029f7cf6279b/build/main.js:27059:22\r\nbridge_Bridge/this._wallUnlisten<@moz-extension://961fb755-5a59-4c1c-943c-029f7cf6279b/build/main.js:27228:14\r\nlistener@moz-extension://961fb755-5a59-4c1c-943c-029f7cf6279b/build/main.js:57497:41\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-08-31T15:20:14Z","created_at":"2023-08-03T20:36:23Z","creator_user_login":"ansharah-gs"}
{"number":27184,"title":"Bug: `eslint-plugin-react-hooks` doesn't work inside `export default () => { ... }`","body":"React version: 18\r\n\r\n## Steps To Reproduce\r\nhttps://codesandbox.io/s/blissful-margulis-gljgjm?file=/src/App.js\r\n\r\n```tsx\r\nimport { useEffect } from 'react';\r\n\r\nexport default () => {\r\n  const isVal = 0;\r\n\r\n  if (isVal) {\r\n    // NO HOOK WARNING\r\n    useEffect(() => {\r\n      //\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n```tsx\r\nimport { useEffect } from 'react';\r\n\r\nexport default function App() {\r\n  const isVal = 0;\r\n\r\n  if (isVal) {\r\n    // SHOWS HOOK WARNING\r\n    useEffect(() => {\r\n      //\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## The current behavior\r\nConditional hook usage isn't detected inside `export default () => { ... }`\r\n\r\n## The expected behavior\r\nConditional hook usage should be detected inside `export default () => { ... }`","state":"open","updated_at":"2023-08-17T20:42:49Z","created_at":"2023-08-03T20:21:59Z","creator_user_login":"alexgorbatchev"}
{"number":27183,"title":"Bug: For React/Server the renderToString with Suspense in the tree is not behaving as per what documentation says.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nAs per the documentation of the limited support for Suspense in `renderToString` it says the following:\r\n\r\n\"\"\"\r\nIn React 18, we’re adding very limited <Suspense> support to renderToString. Previously, trying to use <Suspense> with it threw an error. Starting in React 18, if you suspend during renderToString, we will mark the nearest Suspense boundary as \"client-rendered\" and immediately emit the fallback HTML. Then, we will retry rendering its content on the client after the JS has loaded. Concretely, this means that if you wrap your app in a top-level <Suspense> boundary and you suspend during rendering, your app effectively opts out of server rendering.\r\n\"\"\"\r\n\r\nThe above is taken from - https://github.com/reactwg/react-18/discussions/22#discussion-3385743\r\n\r\nHOWEVER, during actual use, I see that the rendered html string contains an empty `template` tag with `data-msg` attribute as following:\r\n\r\n```\r\n<template data-msg=\"The server did not finish this Suspense boundary: The server used &quot;renderToString&quot; which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to &quot;renderToPipeableStream&quot; which supports Suspense on the server\"\r\n```\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Make a minimal server that uses renderToString method from react/server as explained here - https://react.dev/reference/react-dom/server/renderToString#rendertostring\r\n2. Within the component / app that is rendering on the server have a suspended component by using Lazy and Suspense similar to - https://react.dev/reference/react/Suspense\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: -\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIn the rendered string there is an empty `template` tag with a message about use of Suspense in renderToString.\r\n\r\n\r\n## The expected behavior\r\n\r\nThere should be no message or warning and it should just render the fallback of Suspense on server. (note it does render the fallback, but also the error message)\r\n","state":"open","updated_at":"2023-08-04T16:31:55Z","created_at":"2023-08-03T16:17:17Z","creator_user_login":"sgore-godaddy"}
{"number":27182,"title":"[react-devtools] Update element inspection timeout to 60 seconds","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nReact DevTools can become nigh unusable on particularly complex/large pages. I consistently hit this 5 second timeout when trying to inspect elements on certain pages. This means I can't inspect props and state, trigger suspense, and so on.\r\n\r\nI'm more than happy to wait longer for the React DevTools to inspect an element, so long as it eventually works. A cursory Google search turns up other people hitting this problem, too: https://stackoverflow.com/questions/70897741/react-devtools-timeout-unable-to-inspect-element\r\n\r\nAs a first pass, this changes the timeout to 60 seconds instead of 5.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nRan yarn, yarn test, yarn linc in the repo root.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-02T23:34:24Z","created_at":"2023-08-02T22:54:43Z","creator_user_login":"dunnbobcat"}
{"number":27178,"title":"Feature: Allow creating elements using document.createElement before rendering","body":"Could this be done in react, how should this be done, I think it should allowed to be done\r\n\r\n```typescript\r\n\r\n// element is never null, to see if its mounted parentElement != null\r\nconst element : HTMLElement = useMemo(()=> {\r\n    let elem = document.createElement(\"div\")\r\n    elem.innerHTML = \"Hello World\"\r\n    return elem\r\n},[])\r\n\r\nreturn (\r\n    <React.Fragment>\r\n       {element}\r\n    </React.Fragment>\r\n)\r\n\r\n```\r\n\r\n### Use Case\r\n\r\nReact renders and keeps changing the elements again and again, When some element needs to persist itself in DOM, you suddenly have to re initialize that element every time react re creates it.\r\nYou can create a component, create your element, get a ref, when mounted append a child, But it would be useful if react supports it natively, or has docs about how this should be done\r\nI have a Rich Text Editor, Either I listen to events and change my state based on user selection and range APIs and re render that state Or I can let user update the DOM tree and afterwards I do what I want\r\nI want to do bit of both where I am listening to events but maintaining state inside DOM, so I don't have to track backspaces for example, I can just get by doing the things I need to do and rest of it goes to browser.","state":"open","updated_at":"2023-08-03T14:22:29Z","created_at":"2023-08-02T14:06:19Z","creator_user_login":"wakaztahir"}
{"number":27176,"title":"[React 16] Bug: true and false clauses being rendered simultaneously","body":"## React version\r\n\r\n16.14.0\r\n16.12.0\r\n\r\n## The current behavior\r\n\r\nI'm experiencing a problem in one of my projects that seems to be a React bug. I apologize if it's not, but I don't even know how to search for this.\r\n\r\nUnfortunately there's no way of reproducing it locally, since it happens sporadically under unknown conditions, but if anyone comes with an idea for reproducing it, I'm all ears.\r\n\r\nWe have the following in our code. It renders a skeleton if data is not ready:\r\n\r\n```tsx\r\n  if (!product || loading) {\r\n    return (\r\n      <ColorSelectorLoader\r\n        optionSize={optionSize}\r\n        optionsNumber={perPage}\r\n        optionPadding={optionPadding}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ColorSelectorContext.Provider\r\n      ...\r\n```\r\n\r\nIn some random, albeit frequent, occasions the snippet above renders **both** the skeleton **and** the provider. \r\n\r\n![image](https://github.com/facebook/react/assets/15324745/a59cb00b-4387-4c0f-9cd2-7d2e20f0d75d)\r\n\r\nWhen inspecting it, the following comment caught my attention, hence why I believe it's related to React:\r\n\r\n![image](https://github.com/facebook/react/assets/15324745/028c3434-a425-4572-a05b-a0cdb6f76deb)\r\n\r\n## The expected behavior\r\n\r\nThe component should return only one of the above.","state":"open","updated_at":"2023-08-14T14:54:23Z","created_at":"2023-08-01T22:27:43Z","creator_user_login":"pedrobernardina"}
{"number":27173,"title":"Add \"stableKnownHooks\" option to react-hook/exhaustive-deps eslint rule","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis PR introduces an option to exclude stable hook return values, such as those from `jotai`'s `useSetAtom` or user-defined custom hooks, from being listed as missing dependencies. \r\n\r\nIn certain situations set up by users, there exist hooks that return values that do not change. These values are typically not necessary to be included in the dependency array of React hooks. Rules that forces including these stable values may result in unnecessary eslint warnings.\r\n\r\nThe rule name comes from the `isStableKnownHookValue()` within the exsisting eslint rule.\r\n\r\n## How did you test this change?\r\n\r\nSet `useTranslation()`(by react-i18next) to as stable hook.\r\n![image](https://github.com/facebook/react/assets/63982863/dcea86e3-b2bb-45b0-88ad-6ffd0814528c)\r\n\r\n`value` depends on `str` and `t`, but since return value of `useTranslation()` is set as stable, eslint reports that only `str` is missing dependencies.\r\n![image](https://github.com/facebook/react/assets/63982863/33ed2dde-ded6-4932-a83b-939f0a1fb344)\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-13T06:41:33Z","created_at":"2023-08-01T05:53:35Z","creator_user_login":"vetan2"}
{"number":27171,"title":"Bug: performance.mark is not a function","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nAfter our pipeline upgraded to node 16, some unit tests were beginning to fail, with the error message below. These tests previously passed with node 14, and the call to performance.mark is within a file in react-dom. I've read some issues with node 16 changing the behavior of performance, so I am not sure if that could be a possible issue. I've also created an issue with the enzyme team below: \r\n[https://github.com/enzymejs/enzyme/issues/2599](https://github.com/enzymejs/enzyme/issues/2599).\r\nThis is preventing us from merging our code and moving on with development.\r\n\r\nReact version: \"16.14.0\"\r\n\r\n## Steps To Reproduce\r\n\r\n1. Can't provide code to rerun, but here is the package.json\r\n```\r\n{\r\n  \"name\": \"test-ui\",\r\n  \"version\": \"0.8.0\",\r\n  \"description\": \"Valkyrie\",\r\n  \"main\": \"dist/index.js\",\r\n  \"dependencies\": {\r\n    \"@babel/runtime\": \"^7.8.4\",\r\n    \"classnames\": \"^2.2.6\",\r\n    \"core-js\": \"^3.6.4\",\r\n    \"dotenv-webpack\": \"^8.0.0\",\r\n    \"es6-promise\": \"^4.2.8\",\r\n    \"flux\": \"3.1.3\",\r\n    \"history\": \"^4.9.0\",\r\n    \"immutability-helper\": \"^3.0.1\",\r\n    \"intl\": \"^1.2.5\",\r\n    \"isomorphic-fetch\": \"^2.2.1\",\r\n    \"match-all\": \"^1.2.6\",\r\n    \"prop-types\": \"^15.7.2\",\r\n    \"react\": \"^16.13.1\",\r\n    \"react-dom\": \"^16.13.1\",\r\n    \"react-router-dom\": \"^5.2.0\",\r\n    \"solutions-eventbus-library\": \"^1.0.5\",\r\n    \"superagent\": \"^5.0.5\",\r\n    \"underscore\": \"^1.9.1\",\r\n    \"url-loader\": \"^1.1.2\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"node node_modules/mocha/bin/mocha --require @babel/register --require ignore-styles --require test-setup.js --reporter min \\\"./test/**/*-test.js\\\"\",\r\n    \"integration-tests\": \"jest --env=jsdom --config ./integration-test-setup.js\",\r\n    \"coverage\": \"cross-env NODE_ENV=test node ./node_modules/nyc/bin/nyc.js npm test report --reporter=lcov --reporter=html\",\r\n    \"build\": \"npm run lint && npm run builddev\",\r\n    \"builddev\": \"node node_modules/webpack/bin/webpack -d --env.box=dev\",\r\n    \"buildci\": \"node node_modules/webpack/bin/webpack -p --env.box=ci\",\r\n    \"buildg1\": \"node node_modules/webpack/bin/webpack -p --env.box=g1\",\r\n    \"buildg2\": \"node node_modules/webpack/bin/webpack -p --env.box=g2\",\r\n    \"buildg3\": \"node node_modules/webpack/bin/webpack -p --env.box=g3\",\r\n    \"buildg4\": \"node node_modules/webpack/bin/webpack -p --env.box=g4\",\r\n    \"buildperf\": \"node node_modules/webpack/bin/webpack -p --env.box=perf\",\r\n    \"buildprod\": \"node node_modules/webpack/bin/webpack -p --env.box=prod\",\r\n    \"lint\": \"eslint .\",\r\n    \"watch\": \"webpack --watch\",\r\n    \"fix\": \"eslint . --fix\",\r\n    \"clean\": \"\"\r\n  },\r\n  \"author\": {\r\n    \"name\": \"Pivotal Lab\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.4.4\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.4.4\",\r\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.8.3\",\r\n    \"@babel/plugin-transform-async-to-generator\": \"^7.8.3\",\r\n    \"@babel/plugin-transform-react-jsx\": \"^7.3.0\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.8.3\",\r\n    \"@babel/plugin-transform-template-literals\": \"^7.4.4\",\r\n    \"@babel/preset-env\": \"^7.4.4\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"@babel/register\": \"^7.4.4\",\r\n    \"@babel/runtime-corejs3\": \"^7.8.4\",\r\n    \"@testing-library/jest-dom\": \"^5.14.1\",\r\n    \"@testing-library/react\": \"^12.0.0\",\r\n    \"babel-eslint\": \"^10.0.1\",\r\n    \"babel-loader\": \"^8.0.5\",\r\n    \"babel-plugin-istanbul\": \"^5.1.4\",\r\n    \"babel-plugin-rewire\": \"^1.2.0\",\r\n    \"babel-plugin-webpack-alias\": \"^2.1.2\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"cheerio\": \"1.0.0-rc.10\",\r\n    \"cross-env\": \"^5.2.0\",\r\n    \"css-loader\": \"^2.1.1\",\r\n    \"enzyme\": \"^3.9.0\",\r\n    \"enzyme-adapter-react-16\": \"^1.12.1\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-plugin-react\": \"^7.13.0\",\r\n    \"file-loader\": \"^3.0.1\",\r\n    \"global-jsdom\": \"^8.1.0\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"ignore-styles\": \"^5.0.1\",\r\n    \"jest\": \"^27.0.6\",\r\n    \"jsdom\": \"^15.2.1\",\r\n    \"keymirror\": \"^0.1.1\",\r\n    \"mocha\": \"^6.1.4\",\r\n    \"nyc\": \"^14.1.0\",\r\n    \"react-test-renderer\": \"^16.8.6\",\r\n    \"rosie\": \"^2.0.1\",\r\n    \"sinon\": \"^7.3.2\",\r\n    \"style-loader\": \"^0.23.1\",\r\n    \"uglifyjs-webpack-plugin\": \"^2.2.0\",\r\n    \"webpack\": \"^4.30.0\",\r\n    \"webpack-cli\": \"^3.3.1\",\r\n    \"webpack-merge\": \"^4.2.2\"\r\n  },\r\n  \"publishConfig\": {\r\n    \"registry\": \"https:/.../api/npm/npm-local/\"\r\n  }\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nHere is a snippet, I can only share a limited amount of code. But we do this set up in each of our test files.\r\n```\r\n    const setupComponent = (InputProps) => {\r\n\r\n        const props = Object.assign({}, InputProps);\r\n        const component = mount(<Header {...props} />);\r\n        return component;\r\n    };\r\n\r\n    beforeEach(() => {\r\n        header = setupComponent(defaultProps);\r\n    });\r\n```\r\nhere is the stack trace:\r\n```\r\n  2) TestFileName\r\n       \"before each\" hook for \"should render\":\r\n     TypeError: performance.mark is not a function\r\n      at beginMark (node_modules\\react-dom\\cjs\\react-dom.development.js:10238:15)\r\n      at startWorkLoopTimer (node_modules\\react-dom\\cjs\\react-dom.development.js:10493:5)\r\n      at performSyncWorkOnRoot (node_modules\\react-dom\\cjs\\react-dom.development.js:21752:5)\r\n      at scheduleUpdateOnFiber (node_modules\\react-dom\\cjs\\react-dom.development.js:21188:7)\r\n      at updateContainer (node_modules\\react-dom\\cjs\\react-dom.development.js:24373:3)\r\n      at C:\\...\\node_modules\\react-dom\\cjs\\react-dom.development.js:24758:7\r\n      at unbatchedUpdates (node_modules\\react-dom\\cjs\\react-dom.development.js:21903:12)\r\n      at legacyRenderSubtreeIntoContainer (node_modules\\react-dom\\cjs\\react-dom.development.js:24757:5)\r\n      at Object.render (node_modules\\react-dom\\cjs\\react-dom.development.js:24840:10)\r\n      at fn (node_modules\\enzyme-adapter-react-16\\src\\ReactSixteenAdapter.js:488:26)\r\n      at C:\\...\\node_modules\\enzyme-adapter-react-16\\src\\ReactSixteenAdapter.js:405:37\r\n      at batchedUpdates$1 (node_modules\\react-dom\\cjs\\react-dom.development.js:21856:12)\r\n      at Object.act (node_modules\\react-dom\\cjs\\react-dom-test-utils.development.js:929:14)\r\n      at wrapAct (node_modules\\enzyme-adapter-react-16\\src\\ReactSixteenAdapter.js:405:13)\r\n      at Object.render (node_modules\\enzyme-adapter-react-16\\src\\ReactSixteenAdapter.js:474:16)\r\n      at new ReactWrapper (node_modules\\enzyme\\src\\ReactWrapper.js:115:16)\r\n      at mount (node_modules\\enzyme\\src\\mount.js:10:10)\r\n      at setupComponent (test\\Components\\Header\\/file-test.js:50:27)\r\n      at Context.<anonymous> (test\\Components\\Header\\/file-test.js:75:22)\r\n      at processImmediate (node:internal/timers:466:21)\r\n```\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-08-01T19:32:18Z","created_at":"2023-07-31T20:59:36Z","creator_user_login":"miniminivan"}
{"number":27170,"title":"Bug: the type of ReactDOM.prefetchDNS does not exist.","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Import ReactDOM\r\n2. Create a simple component\r\n3. Add \r\n```js\r\n ReactDOM.prefetchDNS('...')\r\n```\r\n4. Import this component into your global App.\r\n5. When inspecting the page, you will see that \"dns-prefetch\" tags have been added with the given link.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/keen-drake-tq2t29\r\n\r\n![image](https://github.com/facebook/react/assets/51277667/3721b096-c6ee-4c10-86cb-acc1ab744607)\r\nIf we inspect the page, we verify that the link with dns-prefetch, was inserted correctly. Even ReactDOM.prefetchDNS method showing error that prefetchDNS does not exist.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen trying to use ``ReactDOM.prefetchDNS`` we get a type error.\r\n```\r\nProperty 'prefetchDNS' does not exist on type 'typeof import(\".../node_modules/@types/react-dom/index\")'.ts(2339)\r\n```\r\n\r\n## The expected behavior\r\nWe shouldn't have this typo, since the method exists and is working.","state":"open","updated_at":"2023-08-01T02:20:53Z","created_at":"2023-07-31T18:47:39Z","creator_user_login":"hmartiins"}
{"number":27168,"title":"More useful DEV error message when lazy-rendering Context Provider","body":"## Summary\r\n\r\nIf you render a `createContext().Provider` from a `lazy()`, the error message is difficult to understand:\r\n\r\n\r\n> Error: Element type is invalid. Received a promise that resolves to: [object Object]. Lazy element type must resolve to a class or function.\r\n\r\n\r\nThis PR adds a DEV-time hint, following the pattern of the existing one for double-lazy():\r\n\r\n\r\n> Error: Element type is invalid. Received a promise that resolves to: [object Object]. Lazy element type must resolve to a class or function. Context Providers cannot be lazily rendered without being wrapped in a component.\r\n\r\n\r\n## How did you test this change?\r\n\r\nAdded a new test and ran `yarn test`.","state":"open","updated_at":"2023-08-19T16:25:00Z","created_at":"2023-07-29T11:53:03Z","creator_user_login":"markspolakovs"}
{"number":27165,"title":"refactor: remove hooks names module loader function","body":"Since webpack v5 is now supported, we can remove redundant loader function and corresponding global context.\r\n\r\nDone:\r\n- Works with browser extension.\r\n\r\nTo do:\r\n- Fix inline version, looks like it doesn't work properly with inline shell, might need some changes in webpack-server config:\r\n```\r\nChunkLoadError: Loading chunk vendors-node_modules_buffer_index_js failed.\r\n(error: http://localhost:8080/dist/vendors-node_modules_buffer_index_js.chunk.js)\r\n    at __nested_webpack_require_9640838__.f.j (frontend.js:859:1)\r\n    at frontend.js:843:1\r\n    at Array.reduce (<anonymous>)\r\n    at __nested_webpack_require_9640838__.e (frontend.js:843:1)\r\n    at hookNamesModuleLoader (InspectedElementContext.js:24:1)\r\n    at loadModule (dynamicImportCache.js:66:1)\r\n    at InspectedElementContextController (InspectedElementContext.js:77:1)\r\n    at renderWithHooks (react-dom-unstable_testing.development.js:1835:1)\r\n    at updateFunctionComponent (react-dom-unstable_testing.development.js:2611:1)\r\n    at beginWork$1 (react-dom-unstable_testing.development.js:3093:1)\r\n```\r\n- Validate for all environments:\r\n  - extension\r\n  - standalone\r\n  - browser inline, also outside of test shell","state":"open","updated_at":"2023-07-28T16:48:30Z","created_at":"2023-07-28T16:48:20Z","creator_user_login":"hoxyq"}
{"number":27164,"title":"feature: make react more reactive (feedback for future)","body":"I'm new in react a year of experience but I worked over 15 years as frontend developer and I want to give you my view about react direction so maybe you can find some ideas out of it or just trash it 😊\r\n\r\nWith introducing of usestate react is going in reactive programing but don't know why nobody is explaining it. Actually usestate with useeffect implemented observable pattern with subscripers and computed.\r\n\r\nUsestate - is observable\r\nUseeffect - useeffect(()=>{},[variable]) - subscriber\r\nUseeffect - useeffect(()=>{},[variable1,variable2]) - computed\r\n\r\nI like reactive programing and I think this is cool 😊. The things that needs to improve is following.\r\n\r\n1. Useeffect base of SOLID principles S - single responsibility is not good so is used for live cycles events and for subscriber/computed, there is no reason that subscribers and computeds to be there you should be possible so subscribe at any moment\r\n\r\n2. Getting value of usestate is just confusing and I think actually getter is just used as subscriber for useeffect to get real value. To fix that I created a hook that was keeping value in ref so I can get real value back. I think behaviour like is now is just adding complexity and code that can be avoid if we return just current value\r\n\r\n3. For communication between components I'm using rxJS because is not triggering the rendering and I can subscribe on it changes. We need some observables like usestate that is not triggering rendering\r\n\r\n4. Cloning of arrays maybe need to have his own hook useStateArray that will wrap complexity of cloning then developers can use same code for states and not states\r\n\r\nI think react is just a engine and is missing layer in between to reduce complexity and code for developers\r\n\r\nI think this can make react more reactive and reduce learning curve.\r\n","state":"open","updated_at":"2023-08-06T18:51:52Z","created_at":"2023-07-28T10:56:02Z","creator_user_login":"Mrga55"}
{"number":27162,"title":"Fix typo in comment","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThere is a typo in the comment\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nTwo characters switched\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-27T22:14:07Z","created_at":"2023-07-27T22:09:04Z","creator_user_login":"jarhed"}
{"number":27161,"title":"Bug: [React 18] componentWillReceiveProps causes Suspense to go into an infinite loop with React.lazy","body":"An adjacent component that uses `UNSAFE_componentWillReceiveProps` and `setState` inside of it can cause a `<Suspense>` component to be unable to render. This seems to only be an issue in React 18.\r\n\r\nReact version: 18.2.0\r\n\r\nhttps://github.com/facebook/react/assets/135038004/a489d9f0-ce86-43fc-af54-d6803dd5e1bf\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a Suspense component that uses a memoized, dynamically loaded React.lazy loaded component\r\n2. Have another component that uses the deprecated `UNSAFE_componentWillReceiveProps` lifecycle method + `setState` inside of it.\r\n3. Place them adjacent inside a container\r\n4. Make the Suspense component reload arbitrarily via a state change that is in a `setTimeout` (doesn't have to change any prop on the component that has `UNSAFE_componentWillReceiveProps`.\r\n\r\nLink to code example: https://codesandbox.io/s/react-18-suspense-bug-qr3kmj?file=/src/index.js\r\n\r\n## The current behavior\r\n\r\nEntire app gets into a bad state unable to render\r\n\r\n## The expected behavior\r\n\r\nApp should be able to render normally.\r\n","state":"open","updated_at":"2023-07-28T14:57:58Z","created_at":"2023-07-27T17:48:09Z","creator_user_login":"bengoh-retool"}
{"number":27160,"title":"Feature Request (react-hooks/exhaustive-deps): `ignoreObjectReferences` flag","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component that uses `useDisclosure()` from a 3rd party library to manage a modal's visibility status.\r\n2. Inside the component, add a useEffect hook that depends on a `onOpen` method of the `disclosure` object returned from `useDisclosure()`.\r\n3. ESLint raises a warning suggesting to replace `disclousure.onOpen` with `disclosure` in the dependency array of the `useEffect()` hook.\r\n\r\n```ts\r\nimport React from 'react';\r\nimport { useDisclosure } from 'library-a';\r\nimport { useQuery } from 'library-b';\r\n\r\nfunction MyComponent() {\r\n    const disclosure = useDisclosure();\r\n    const query = useQuery({ queryKey: [\"...\"], queryFn: () => Promise.resolve(1) });\r\n\r\n    React.useEffect(() => {\r\n        if (!query.isSuccess) return;\r\n        disclosure.onOpen();\r\n    }, [disclosure.onOpen, query.isSuccess]);\r\n     // ^^^^^^^^^^^^^^^^^ ESLint will suggest changing 'disclosure.onOpen' to 'disclosure'\r\n \r\n    ...\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nESLint's `react-hooks/exhaustive-deps` rule suggests changing the dependency `disclosure.onOpen` to `disclosure`. This happens because the ESLint plugin checks for dependencies at the reference level and does not go deeper into object properties.\r\n\r\nAs a workaround, one alternative is to destructure the `disclosure` object to acquire `onOpen`:\r\n\r\n```jsx\r\nconst { onOpen } = useDisclosure();\r\n```\r\n\r\nAnd then use `onOpen` directly in the `useEffect` dependencies. But this approach has limitations: \r\n\r\n1. It can raise uncertainty when there are multiple hooks like `useDisclosure` because it's not instantly clear from which object the destructured property originated.\r\n2. In TypeScript, additional verbosity is introduced because you will need to specify the type of the destructured property, effectively writing the properties twice.\r\n\r\nAnother approach would be to write `disclosure.onOpen.call(null)`, but it's really awkward.\r\n\r\n## The expected behavior\r\n\r\nIt would be beneficial if ESLint could recognize that the dependency on `dislcosure.onOpen` does not necessitate a dependency on `disclosure` in instances where object properties are stable across renders or are reliably memoized.\r\n\r\nI propose a feature where a new setting, such as `ignoreObjectReferences`, could be introduced in the \"react-hooks/exhaustive-deps\" rule configuration. When `ignoreObjectReferences` is `true`, ESLint should treat the properties and methods of an object as individual dependencies, ignoring the reference of the object itself. This would instead allow us to just include `dislosure.onOpen` in our dependency arrays, thus circumventing unnecessary rerenders caused by the change of the object reference.\r\n\r\nI'll be happy to raise a PR for this.","state":"open","updated_at":"2023-07-27T22:20:23Z","created_at":"2023-07-27T16:03:56Z","creator_user_login":"Newbie012"}
{"number":27159,"title":"Bug: \"Uncaught runtime error\" after react-script upgrade","body":"I am having sidenav from rsuite and we have upgraded that. To make rsuite run we have upgraded react-scripts.\r\nAfter upgrade of react-script we get to see this error: \r\n```\r\nUncaught runtime errors:\r\n×\r\nERROR\r\nExpected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.\r\n```\r\n\r\n\r\nReact version: \"react\": \"^16.14.0\",\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install reactscript latest version\r\n2. sidenav with ajax calls on component mount\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-07-27T09:10:08Z","created_at":"2023-07-27T09:10:08Z","creator_user_login":"sarang-damkondwar"}
{"number":27158,"title":"[DevTools Bug]: shows \"This page doesn't appear to be using React\" for every react website on Firefox 115.0.2","body":"### Website or app\n\nall of them and also localhost. https://react.dev/ for example\n\n### Repro steps\n\n1. open any website made with React\r\n2. Click on the extension icon\r\n\r\nOS:\r\nWindows 10\r\n\r\nBrowser:\r\nFirefox 115.0.2 (64-bit)\r\n\r\nDevTools:\r\n4.27.8\r\n\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-08-17T00:32:04Z","created_at":"2023-07-27T06:49:02Z","creator_user_login":"anvesh-vanam"}
{"number":27157,"title":"Bug: useDeferredValue return value printing error","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n## This is a question about useDeferredValue\r\n### I want to implement a function described below\r\n**Functional description:** We implement a function, when we enter the content in the box, the content will be displayed in the list below in real time. We deliberately added a large number of loops in the list component to simulate the scene where the list has a lot of calculations and the rendering is slow, and then we use useDeferredValue to optimize this function.\r\n### Code\r\n#### Test.tsx\r\n```tsx\r\nimport React, { useState, useDeferredValue } from 'react'\r\nimport List from './list'\r\n\r\nfunction Test() {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const deferredValue = useDeferredValue(inputValue)\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('handleChange')\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    console.log('inputValue:', inputValue)\r\n    console.log('deferredValue:', deferredValue)\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleChange}\r\n                placeholder=\"Search...\"\r\n            />\r\n            <List inputValue={deferredValue} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n```\r\nList.tsx\r\n```tsx\r\nimport React, { memo } from 'react'\r\n\r\n// 定义一个列表组件List\r\nfunction List(props: { inputValue: string }) {\r\n    const { inputValue } = props\r\n\r\n    console.log('List render')\r\n\r\n    let k = 0\r\n    for (let i = 0; i <= 300000000; i += 1) {\r\n        k = i\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            <li>Cycle Times {k}Text: {inputValue}</li>\r\n            <li>Cycle Times {k}Text: {inputValue}</li>\r\n            <li>Cycle Times {k}Text: {inputValue}</li>\r\n            <li>Cycle Times {k}Text: {inputValue}</li>\r\n            <li>Cycle Times {k}Text: {inputValue}</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default memo(List)\r\n```\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n### When I quickly enter characters in the input box, observe the console print results\r\n#### filter deferredValue\r\n![image](https://github.com/facebook/react/assets/79492147/d87624b2-890f-4195-95a7-e988f004cc15)\r\n#### filter List render\r\n![image](https://github.com/facebook/react/assets/79492147/bf989f93-8187-4424-9427-81031cfd883a)\r\n#### question\r\nWe found that the number of renderings of the List component is exactly equal to the number of times that deferredValue is assigned a new value, and each rendering of the List component is when deferredValue obtains a new value, which is consistent with our expectation of using useDeferredValue.\r\nHowever, between deferredValue getting a new value twice, the value printed on the console is not the last value of deferredValue, but the initial value.\r\nThis phenomenon contradicts the rendering times and timing of the List component. We know that the memory component will re-render every time props changes. However, from the print results, the process of deferredValue changing from a new value to empty does not re-render the List component.\r\nTherefore, I suspect that when you deal with it internally, you think that useDeferredValue does not change between obtaining two new values, but there is a problem with the value returned during this period. I hope to get an explanation of this problem.\r\n## The expected behavior\r\nBetween the two new values returned by useDeferredValue, it should return the last value and be able to print it out to see the result","state":"open","updated_at":"2023-07-27T05:08:03Z","created_at":"2023-07-27T05:04:30Z","creator_user_login":"HarbourGithub"}
{"number":27156,"title":"Bug: async action transition branch not committed for 5000ms","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: canary (next.js)\r\n\r\n## Steps To Reproduce\r\n\r\n1.access https://codesandbox.io/p/sandbox/blissful-sky-3pm4l7?file=%2Fapp%2FClientButton.tsx%3A21%2C40\r\n2. click ‘Wait in 0-4900ms’ buttons, it works well. pending state updated as promise resolved.\r\n3. click ‘Wait in 5000ms’ button, u can see endless pending status even if promise resolved.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/blissful-sky-3pm4l7?file=%2Fapp%2FClientButton.tsx%3A21%2C40\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nonly buttons that takes 4900ms less async state transition actions being committed their changes\r\n\r\n## The expected behavior\r\nall buttons and async state transition actions should commit their changes","state":"open","updated_at":"2023-08-25T00:10:28Z","created_at":"2023-07-26T23:38:22Z","creator_user_login":"ellemedit"}
{"number":27155,"title":"📜docs: Fix Typo","body":"With this PR Docs have been updated \r\n\r\ndocs update => proper capitalization would be better. 👍\r\n\r\n\r\n\r\n### Signed-off-by: \r\nAyushman Singh Chauhan <ascb508@gmail.com>","state":"open","updated_at":"2023-07-26T19:07:08Z","created_at":"2023-07-26T18:36:30Z","creator_user_login":"ayushman17"}
{"number":27154,"title":"Bug: ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2*\r\n\r\n## Steps To Reproduce\r\n\r\n1. on page load its not throwing any error\r\n2. im working with typescript and redux toolkit\r\n3. when working on editor and saving it, specifically when i started working on a \"custom hook\", you will find that in \"/hooks/forComponent.ts\"\r\n4. in console it keeps showing \"uncaught error, should have a queue\"\r\n5. react-dom.development.js:16572 Uncaught Error: Should have a queue. This is likely a bug in React. Please file an issue.\r\n![image](https://github.com/facebook/react/assets/19854521/1c2f0490-ab7b-4493-a6af-118a1a0de97f)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://github.com/bappyasif/varius-hooks-and-toolkits/blob/for-react-bug-report/src/features/ingredients/MostPopularIngredients.tsx](https://github.com/bappyasif/varius-hooks-and-toolkits/blob/for-react-bug-report/src/features/ingredients/MostPopularIngredients.tsx)\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\nhttps://github.com/bappyasif/varius-hooks-and-toolkits/tree/for-react-bug-report\r\n\r\n## The current behavior\r\nwhenever im working on this [custom hook](https://github.com/bappyasif/varius-hooks-and-toolkits/blob/53278a30f4ec5b9cc6455fd433259b9f3a9a0146/src/hooks/forComponents.ts#L171C14-L171C38)\r\nits throwing error and crashes app\r\n\r\n## The expected behavior\r\nshould update code without crashing app","state":"open","updated_at":"2023-08-05T06:38:21Z","created_at":"2023-07-26T16:14:38Z","creator_user_login":"bappyasif"}
{"number":27153,"title":"Feat request: addition of use client in a specific component","body":"I came across a question, I would like to create 3 components in the same file, 2 client files and 1 server file\r\n\r\nexample:\r\n\r\n```tsx\r\nexport function DialogServer() {\r\n'use server'\r\nreturn (\r\n// component\r\n)}\r\n\r\nexport function Button() {\r\n'use client'\r\nreturn (\r\n// component\r\n)}\r\n\r\nexport function Dialog() {\r\n'use client'\r\nreturn (\r\n// component\r\n)}\r\n```\r\n\r\n","state":"open","updated_at":"2023-08-03T16:44:42Z","created_at":"2023-07-26T02:55:29Z","creator_user_login":"revogabe"}
{"number":27152,"title":"Bug: hydration fails when using a text node in a form with server actions","body":"When using a server action on a `<form>` and the form includes a child text node then hydration is failing on the text node. If text node is wrapped in any HTML element like `<span>` or server action is removed from the form then the hydration is successful.\r\n\r\nReact version: react-dom@18.3.0-experimental-9377e1010-20230712\r\n\r\n## Steps To Reproduce\r\n\r\nThe easiest way to reproduce the issue is to use next.js 13 with this page. But I can also reproduce the issue in an experimental environment too, which works very similar to how next.js renders such a page with a server action and React Server Component payload included in the HTML document. So the issue seems to be not tied to next.js, but `react-dom/server.edge`.\r\n\r\n```jsx\r\nimport * as crypto from \"node:crypto\";\r\n\r\nconst items = new Array(10).fill(0);\r\n\r\nconst state = {\r\n  value: \"\",\r\n};\r\n\r\nexport default function Home() {\r\n  async function inlineServerAction() {\r\n    \"use server\";\r\n    state.value = crypto.randomUUID();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <main>Hello</main>\r\n      <form action={inlineServerAction}>\r\n        State value: <pre>{state.value}</pre>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n      {items.map((_, i) => (\r\n        <div key={i}>Item #{i}</div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/strange-frost-32g48s\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nHydration fails when using a text node as a child of a form when using server actions.\r\n\r\n## The expected behavior\r\nHydration succeeds.","state":"open","updated_at":"2023-08-14T13:49:11Z","created_at":"2023-07-25T19:37:16Z","creator_user_login":"lazarv"}
{"number":27146,"title":"Update tags.js","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis way, you avoid declaring unnecessary variables and directly handle the sessionStorage retrieval and JSON parsing inside the same if condition.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nI just update the logic to avoid extra declaration.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-25T14:41:53Z","created_at":"2023-07-25T13:52:38Z","creator_user_login":"bilalkhan13"}
{"number":27145,"title":"Bug: doesn't connect via the network outside the host","body":"## Steps To Reproduce\r\n\r\n1.create react app\r\n2.run the app and try to conecmt to the ip one on other device\r\n\r\n## The current behavior\r\nit doesn't connect via the ip in the network outside the host\r\n\r\n## The expected behavior\r\nconnects to the server","state":"open","updated_at":"2023-08-04T11:38:47Z","created_at":"2023-07-25T12:20:15Z","creator_user_login":"randomusert"}
{"number":27141,"title":"useDeferredValue hook updates the deferred value immediately instead of after background re-render","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a React app using create-react-app with React 18 and React Scripts 5.\r\n2. Create a component that uses `useDeferredValue` hook to defer updating a part of the UI based on a state variable.\r\n3. Render the component and type something in the input.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/trusting-butterfly-lfg874?file=/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe deferred value changes immediately when the original value changes, instead of after React finishes the original re-render and starts working on a background re-render with the new value.\r\n\r\n## The expected behavior\r\nThe deferred value should not change immediately when the original value changes, but only after React finishes the original re-render and starts working on a background re-render with the new value, as described in the React documentation: https://react.dev/reference/react/useDeferredValue#returns","state":"open","updated_at":"2023-07-24T10:29:09Z","created_at":"2023-07-24T02:12:03Z","creator_user_login":"Pluto0104"}
{"number":27135,"title":"Bug: Text duplication in controlled component with iOS Japanese kana IME ","body":"React version:\r\n18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. In an iOS device (or simulator) with the Japanese Kana keyboard selected as input method, using Safari (I haven't tested with other browsers)\r\n1. Enter text into a controlled component that modifies its input (code example below)\r\n2. Observe duplicate text entered\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-kana-ime-controlled-component-input-qzx7r9\r\n\r\n\r\nExample code for the controlled component. This one inserts a hyphen (-) between each entered character.\r\n\r\n```javascript\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport default () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const onInput = useCallback(e => {\r\n    const { value } = e.target;\r\n    const formatted = value.replace(/-/g, \"\").split(\"\").join(\"-\");\r\n    setValue(formatted);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={value} onInput={onInput} />\r\n      <p>Value: {value}</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## The current behavior\r\n\r\nOn entering the third and subsequent characters, the entire content of the input area is duplicated leading to incorrect content in the input.\r\n\r\nhttps://github.com/facebook/react/assets/1396207/68a7c0a1-096c-49dc-a817-fd1fafce3a90\r\n\r\nI believe this is related to the _composition_ behavior of the kana IME. Might be related to issue https://github.com/facebook/react/issues/26805\r\n\r\n\r\n## The expected behavior\r\n\r\nEntered text should simply appear with each character separated by a hyphen. This is the behavior when the standard english keyboard is used.","state":"open","updated_at":"2023-07-23T10:47:17Z","created_at":"2023-07-20T14:43:17Z","creator_user_login":"eoghanmcilwaine"}
{"number":27132,"title":"Update stack diffing algorithm in describeNativeComponentFrame","body":"## Summary\r\n\r\nThere's a bug with the existing stack comparison algorithm in `describeNativeComponentFrame` — specifically how it attempts to find a common root frame between the control and sample stacks. This PR attempts to fix that bug by injecting a frame that can have a guaranteed string in it for us to search for in both stacks to find a common root.\r\n\r\n## Brief Background/How it works now\r\n\r\nRight now `describeNativeComponentFrame` does the following to leverage native browser/VM stack frames to get details (e.g. script path, row and col #s) for a single component in a component stack frame:\r\n1. Throwing and catching a control error in the function\r\n2. Calling the component, which should eventually throw an error (most of the time) that we'll catch as our sample error.\r\n3. Diffing the stacks in the control and sample errors to find the line which should represent our component call.\r\n\r\n## What's broken\r\n\r\nTo account for potential stack trace truncation, the stack diffing algorithm first attempts to find a common \"root\" frame by inspecting the last/earliest frame of the sample stack and searching for an identical frame in the control stack starting from the bottom. However, there are a couple of scenarios which I've hit that cause the above approach to not work correctly.\r\n\r\nFirst, it's possible that for render passes of extremely large component trees to have a lot of repeating internal react function calls, which can result in an incorrect common or \"root\" frame found. Here's a small example from a stack trace using React Fizz SSR.\r\nOur control frame can look like this:\r\n```\r\nError:\r\n    at Fake (...)\r\n    at construct (native)\r\n    at describeNativeComponentFrame (...)\r\n    at describeClassComponentFrame (...)\r\n    at getStackByComponentStackNode (...)\r\n    at getCurrentStackInDEV (...)\r\n    at renderNodeDestructive (...)\r\n    at renderElement (...)\r\n    at renderNodeDestructiveImpl (...) // <-- Actual common root frame with the sample stack\r\n    at renderNodeDestructive (...)\r\n    at renderElement (...)\r\n    at renderNodeDestructiveImpl (...) // <-- Incorrectly chosen common root frame\r\n    at renderNodeDestructive (...)\r\n```\r\n\r\nAnd our sample stack can look like this:\r\n```\r\nError:\r\n     at set (...)\r\n     at PureComponent (...)\r\n     at call (native)\r\n     at apply (native)\r\n     at ErrorBoundary (...)\r\n     at construct (native)\r\n     at describeNativeComponentFrame (...)\r\n     at describeClassComponentFrame (...)\r\n     at getStackByComponentStackNode (...)\r\n     at getCurrentStackInDEV (...)\r\n     at renderNodeDestructive (...)\r\n     at renderElement (...)\r\n     at renderNodeDestructiveImpl (...) // <-- Root frame that's common in the control stack\r\n```\r\n\r\nHere you can see that the earliest trace in the sample stack, the `renderNodeDestructiveImpl` call, matches with multiple `renderNodeDestructiveImpl` calls in the control stack (including file path and line + col #s). Currently the algorithm will chose the earliest/last trace with the `renderNodeDestructiveImpl` call (the second last trace in the control stack), which is incorrect. The actual matching frame in the control stack is the earliest/first trace with the `renderNodeDestructiveImpl` call. This leads to the rest of the stack diffing associating an incorrect frame (`at getStackByComponentStackNode (...)`) for the component.\r\n\r\nAnother issue with this approach is that it assumes all VMs will truncate stack traces at the *bottom*, [which isn't the case for the Hermes VM](https://github.com/facebook/hermes/blob/df07cf713a84a4434c83c08cede38ba438dc6aca/lib/VM/JSError.cpp#L688-L699) which **truncates stack traces in the middle**, placing a\r\n\r\n`... skipping {n} frames`\r\n\r\nline in the middle of the stack trace for all stacks that contain more than 100 traces. This causes stack traces for React Native apps using the Hermes VM to potentially break for large component trees. Although for this specific case with Hermes, it's possible to account for this by either manually greping and removing the `... skipping` line and everything below it (see draft PR: #26999), or by implementing the non-standard `prepareStackTrace` API which Hermes also supports to manually generate the stack trace ([example implementation](https://github.com/facebook/react/compare/main...KarimP:react:component-stack-hermes-fix)).\r\n\r\n## The Fix\r\n\r\nI found different ways to go about fixing this. The first was to search for a common stack frame starting from the top/latest frame. It's a relatively small change ([see implementation](https://github.com/facebook/react/compare/main...KarimP:react:component-stack-fix-2)), although it is less performant by being n^2 (albeit with `n` realistically being <= 5 here). It's also a bit more buggy for class components given that different VMs insert different additional lines for new/construct calls...\r\n\r\nAnother fix would be to actually implement a [longest common substring](https://en.wikipedia.org/wiki/Longest_common_substring) algorithm, which can also be roughly n^2 time (assuming the longest common substring between control and sample will be most of the sample frame).\r\n\r\nThe fix I ended up going with was have lines that throw the control error and call the component inside a distinct method under an object property (`\"DescribeNativeComponentFrameRoot\"`). All major VMs (Safari's JavaScriptCore, Firefox's SpiderMonkey, V8, Hermes, and Bun) should display the object property name their stack trace. I've also set the `name` and `displayName` properties for the function as well to account for minification, any advanced optimizations (e.g. key crushing), and VM inconsistencies (both Bun and Safari seem to exclusively use `displayName` and not `name` in their traces for methods defined under an object's own property...).\r\n\r\nWe can then find this \"common\" frame by simply finding the line that has our special method name (`\"DescribeNativeComponentFrameRoot\"`), and the rest of the code to determine the actual component line works as expected. If by any chance we don't find a frame with our special method name, we then revert back to the existing approach mentioned above by searching for the last line of the sample frame in the control frame.\r\n\r\n## How did you test this change?\r\n\r\n1. There are bunch of existing tests that ensure a properly formatted component trace is logged for certain scenarios, so I ensured the existing full test suite passed\r\n2. I threw an error in a component that's deep in the component hierarchy of a large React app (facebook) to ensure there's stack trace truncation, and ensured the correct component stack trace was logged for Chrome, Safari, and Firefox, and with and without minification.\r\n3. Ran a large React app (facebook) on the Hermes VM, threw an error in a component that's deep in the component hierarchy, and ensured that component frames are generated despite stack traces being truncated in the middle.\r\n","state":"open","updated_at":"2023-08-02T15:55:22Z","created_at":"2023-07-19T22:03:30Z","creator_user_login":"KarimP"}
{"number":27129,"title":"Add `media` option to ReactDOM.preload()","body":"## Summary\r\n\r\nSimilar to https://github.com/facebook/react/pull/27096, we've encountered an issue in Next.js while using ReactDOM.preload(), where adding a `media` attribute does nothing.\r\n\r\nI've not contributed to OSS before and am not familiar with the React core codebase, so I've followed the example set by the author of the https://github.com/facebook/react/pull/27096 pull request as a basis for this change.\r\n\r\n## How did you test this change?\r\nI wrote the test within `ReactDOMFloat-test.js` before making any functional changes, and ran:\r\n```\r\nyarn test packages/react-dom/src/__tests__/ReactDOMFloat-test.js\r\n```\r\nboth before and after making the functional changes to verify that the test *failed* before the change, and *passed* after.\r\n","state":"open","updated_at":"2023-07-19T16:49:53Z","created_at":"2023-07-19T16:44:33Z","creator_user_login":"damnsamn"}
{"number":27128,"title":"Bug: undefined behavior with input checkbox onChange not triggered","body":"Hello,\r\n\r\nI have also discovered a bug where when we do `e.preventDefault()` on an `onClick()` function, inputs will not be updated correctly\r\n\r\nLink to code example:\r\n\r\n\r\nHere is a demo https://codesandbox.io/s/vigorous-albattani-g3hv29\r\n\r\nHas you can see in the demo, when the state is `true` the checkbox is not checked\r\n\r\n\r\n## The current behavior\r\n\r\nThe checkbox is not checked when we have a  `e.preventDefault()` even if the state is `true`\r\n\r\n## The expected behavior\r\n\r\nThe checkbox should have the value of the checked props\r\n\r\n## Notes\r\n\r\n- I've also created some unit test for checkbox in #27127 \r\n- Related to #27016","state":"open","updated_at":"2023-08-07T03:49:52Z","created_at":"2023-07-19T12:10:45Z","creator_user_login":"Its-Just-Nans"}
{"number":27127,"title":"Update ReactDOMInput-test.js","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nAdd unit test for `<input type=\"checkbox\" />`\r\n\r\n## How did you test this change?\r\n\r\nI added two unit test for `<input type=\"checkbox\" />`\r\n\r\n\r\n---\r\n\r\n## Bug of #27128\r\n\r\n\r\n![output](https://github.com/facebook/react/assets/56606507/b735ba7c-60be-4892-8390-66d765cef8e8)\r\n","state":"open","updated_at":"2023-07-19T13:07:03Z","created_at":"2023-07-19T12:05:51Z","creator_user_login":"Its-Just-Nans"}
{"number":27125,"title":"Bug: \"react-dom/client\" render function fail on IE10 (with polyfills)","body":"We have a working React application that supports Internet Explorer 10  (IE10) (using polyfills).  We need to support it for some reasons (please, don't ask).\r\n\r\nAs your docs recommends here ([UPDATES TO CLIENT RENDERING API](https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis)), we changed the way it renders from the 'ReactDOM.render' to 'createRoot'.\r\n\r\nAfter the update of the rendering method, the application fails to run on IE10.\r\n\r\nWithin the same conditions:\r\nThis code\r\n`ReactDOMOld.render(<App/>, document.getElementsByTagName('body')[0]);`\r\nworks correctly.\r\n\r\nWith no other changes, replacing the code above with:\r\n\r\n`ReactDOMNew.createRoot(document.getElementsByTagName('body')[0]).render(<App/>);`\r\n\r\nbreaks the entire app with the error:\r\n\r\n```\r\nSCRIPT5007: Unable to get property 'type' of undefined or null reference\r\nreact-dom.development.js\r\n```\r\n\r\nHere is a minimal project that isolates the problem:\r\n[https://github.com/g-rusev/react-renter-test/](https://github.com/g-rusev/react-renter-test/)\r\n\r\nThis project support IE 10 and with changing just one line, you can see the difference that the two render methods produces.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. clone https://github.com/g-rusev/react-renter-test/    (see the 'readme.md')\r\n2. run \"npm i\" to install dependencies.\r\n3. build the project with \"npm run dev\" and open it in IE10.\r\n\r\nOpen ./src/App.jsx. At the bottom there are the two render methods to test with.\r\n\r\nWhen the app is build with the old ReactDOM.render method (just un-comment its line in the App.jsx) -  it runs correctly.\r\n\r\nWhen the app is build with the new 'createRoot' method (just un-comment its line in the App.jsx) - it fails.\r\n\r\nLink to code example:\r\nhttps://github.com/g-rusev/react-renter-test/\r\n","state":"open","updated_at":"2023-07-21T21:37:27Z","created_at":"2023-07-19T08:38:19Z","creator_user_login":"g-rusev"}
{"number":27122,"title":"Muito bom, mas...","body":"A extensão está travando o browser, no qual por diversas vezes no dia, para de carregar os sites. Não sei explicar o motivo, mas as requisições param de ser enviadas por tempo não determinado.","state":"open","updated_at":"2023-07-18T19:03:07Z","created_at":"2023-07-18T19:03:07Z","creator_user_login":"LuanKisaki"}
{"number":27121,"title":"[DevTools Bug] Cannot add node \"1\" because a node with that id is already in the Store.","body":"### Website or app\n\nreact-devtools with expo\n\n### Repro steps\n\nOnce react-devtools run this happen there \n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-core\n\n### DevTools version (automated)\n\n4.13.5-0ae5290b54\n\n### Error message (automated)\n\nCannot add node \"1\" because a node with that id is already in the Store.\n\n### Error call stack (automated)\n\n```text\nat /Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:48:139060\r\n    at c.emit (/Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:48:88052)\r\n    at /Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:48:89523\r\n    at /Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:48:341120\r\n    at Array.forEach (<anonymous>)\r\n    at S.Vc.e.onmessage (/Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:48:341104)\r\n    at S.n (/Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:40:2971)\r\n    at S.emit (events.js:315:20)\r\n    at e.exports.P (/Users/amr/.config/yarn/global/node_modules/react-devtools-core/dist/standalone.js:8:9318)\r\n    at e.exports.emit (events.js:315:20)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-08-02T08:34:25Z","created_at":"2023-07-18T13:14:35Z","creator_user_login":"amrsmind"}
{"number":27120,"title":"Bug: Page does not reload when URL link directly changed from broswer tab in first go.","body":"## Description\r\n\r\nIn my react app when I am opening a new tab from my dashboard and directly changing the URL from newly opened tab, the page does not load.\r\nBut when I click again in the broswe tab and press ENter again, the page loads properly.\r\nSuppose my dashboard have list of Issues, each of issue is a link to a new page with particular issue details.\r\nAfter clicking on issue link, new tab is opened and issue page is loaded properly.\r\nAfter that when I'm switching to newly opened tab and changing the URL, the page will not respond.\r\nNothing is happening in chrome console, or network tab or even on debug points placed.\r\n\r\nThe dashboard page is working properly if URL is changed in dashboard tab.\r\nIssue is only in newly opened tab from dashboard.\r\n\r\n\r\n## Version\r\n\r\nReact version: 18.1.0\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click an issue linki from dashboard page.\r\n2. Issue detail page will load in a new browser tab.\r\n3. Switch to newly opened tab and change URL directly from browser tab and press Enter ==> No response(page does not reload)\r\n4. CLick again in URL tab and press ENter once again ==> Page reloads properly\r\n\r\nExample a tab URL is changed as below\r\n\r\nFROM:\r\nhttps://github.com/facebook/react/#/issues/50\r\nTO:\r\nhttps://github.com/facebook/react/#/issues/51\r\n\r\n\r\n## Details\r\n\r\nBelow is the code snippet used to opened new tab from dashboard\r\n\r\nimport { ICellRendererParams } from \"ag-grid-community\";\r\nimport { Link } from \"@mui/material\";\r\n\r\nexport default function IssueDetailCellRenderer(props: ICellRendererParams) {\r\n    return (\r\n        <Link\r\n            sx={{ textDecoration: \"none\" }}\r\n            href={\"/#/issues/\" + props.data.issueNumber}\r\n            target='_blank'\r\n        >\r\n            {props.value}\r\n        </Link>\r\n    );\r\n};\r\n\r\n\r\n## The current behavior\r\n\r\nAftre changing the URL and pressing Enter, page is not responding. Onclikcing again in URL tab and pressing Enter again the page will reload.\r\n\r\n## The expected behavior\r\n\r\nAftre changing the URL and pressing Enter the page should reload in first Go","state":"open","updated_at":"2023-08-04T03:52:05Z","created_at":"2023-07-18T11:44:36Z","creator_user_login":"ApoorvSeth"}
{"number":27116,"title":"Update ExhaustiveDeps.js","body":"an solution to :-https://github.com/facebook/react/issues/27065\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-17T04:07:40Z","created_at":"2023-07-17T04:02:25Z","creator_user_login":"xonx4l"}
{"number":27115,"title":"update Getting Started link to redirect to new Quick Start documentation","body":"## Summary\r\n\r\nThis change redirects user to newer Quick Start documentation instead of the old Getting Started, to teach more modern React.\r\n\r\n## How did you test this change?\r\n\r\nNo tests needed on this one.\r\n","state":"open","updated_at":"2023-07-16T20:21:28Z","created_at":"2023-07-16T20:16:05Z","creator_user_login":"nikohoffren"}
{"number":27110,"title":"Bug: Vulnerable dependencies (indirect security issues ??)","body":"Hello maintainers,\r\n\r\nI wanted to bring to your attention that after installing the package, I ran a vulnerability scan with vulert abom on the lock file and discovered that there are over 72 vulnerable dependencies present. As these vulnerabilities can potentially impact the security of the entire project, I am unsure whether to report this under responsible disclosure.\r\n\r\nFor your reference, here is a link to the report of the package-lock file I scanned: https://vulert.com/vuln-scan/list/9916f4f2-3247-4d91-ad95-4daf84c45575\r\n\r\nI recommend that we take immediate action to address these vulnerabilities and ensure the security of the project. Please let me know if you require any further information.\r\n\r\nP.S. this is the lock file i scanned: https://github.com/facebook/react/blob/e3fb7c1de1ed375e32397b3502a30b8ae4c2db9f/yarn.lock\r\n\r\nThank you.","state":"open","updated_at":"2023-07-26T13:30:37Z","created_at":"2023-07-13T17:03:30Z","creator_user_login":"davidz1337"}
{"number":27109,"title":"Bug: Manifest Confusion: react-dom NPM Registry data reports different scripts than current package.json","body":"I am checking my dependencies for the latest [NPM Manifest Confusion](https://blog.vlt.sh/blog/the-massive-hole-in-the-npm-ecosystem) vulnerability, and react-dom keeps getting flagged for what looks like an accidental oversight, and not intentional malicious behavior.\r\n\r\nWhen you view the [registry file](https://registry.npmjs.com/react-dom) for this package in NPM, the latest version lists one script, \"start\".\r\n\r\nThe [package.json](https://www.npmjs.com/package/react-dom/file/e9dc152383f08758ce59b7f4a941714643d8e40dd72a41785f2f0620cf041b78) distributed with the same version does not list any scripts.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nThere is a [python script](https://github.com/panki27/npm-manifest-check) similar to the one I am using that checks the manifest files for differences with the current files, and should show the issue (I have not tested this script).\r\n\r\nTo manually check:\r\n\r\n1. View the [registry file](https://registry.npmjs.com/react-dom).\r\n2. Find the latest version (in 'dist-tags'.latest) (should be 18.2.0 at this time)\r\n3. View the reported scripts for the latest version (in versions[\"18.2.0\"].scripts)\r\n4. View the [index](https://www.npmjs.com/package/react-dom/v/18.2.0/index) for the latest version of the package to get the hex sum for the package.json\r\n5. Use that hex sum to fetch the latest version's [package.json](https://www.npmjs.com/package/react-dom/file/e9dc152383f08758ce59b7f4a941714643d8e40dd72a41785f2f0620cf041b78)\r\n6. Compare the scripts in the package.json with what is declared in the manifest. They should match, but do not.\r\n\r\n## The current behavior\r\n\r\nRegistry file for current version lists different scripts from the distributed package.json\r\n\r\n## The expected behavior\r\n\r\nRegistry file for current version should list the same scripts as the distributed package.json\r\n","state":"open","updated_at":"2023-07-20T19:48:53Z","created_at":"2023-07-13T14:57:37Z","creator_user_login":"burdisal"}
{"number":27108,"title":"Bug: Casting inside useEffect gives false positive on dependency array check.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI realise there are similar issue titles, but they don't seem to be the same issue from what I can tell.\r\n\r\nReact version: 18.2.0\r\n\r\n![image](https://github.com/facebook/react/assets/80394290/51a5a674-f62e-4e54-afba-55ffd1645308)\r\nMessage says it wants myVar as the dependency.\r\nThis happens regardless of whethere the myVar is nullable, I just added that in as it's in my use case and to make sure any check accounts for this.\r\n\r\nOf course without casting it works as expected\r\n![image](https://github.com/facebook/react/assets/80394290/84118125-950a-4769-8a84-52a12ee6edbf)\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Reference part of an object in a useEffect.\r\n2. Use casting before the .property\r\n3. Receive error saying you must include the entire object in the dependency array.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIncorrectly gives an error saying in regards to dependency array.\r\n\r\n\r\n## The expected behavior\r\nNo error given.\r\n","state":"open","updated_at":"2023-08-02T10:20:22Z","created_at":"2023-07-13T14:34:07Z","creator_user_login":"dcallus"}
{"number":27106,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/concurrent/time-slicing","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-14T18:30:44Z","created_at":"2023-07-13T03:21:25Z","creator_user_login":"dependabot[bot]"}
{"number":27104,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/ssr","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-12T18:24:47Z","created_at":"2023-07-12T18:20:19Z","creator_user_login":"dependabot[bot]"}
{"number":27103,"title":"Bug: `useId` generates a new different ID on second render of Strict Mode before un-mount","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `v18.2.0`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with `useId` and log the generated ID inside the component body.\r\n2. Use an `useEffect` to log when the component mounts/un-mounts\r\n3. Mount the component in Strict Mode.\r\n4. Note how first and second render have different IDs (all of this before the component even un-mounts).\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/modern-currying-nqqn68\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`useId` is returning different IDs across renders of the same component instance without un-mounting.\r\n\r\nI know that Strict Mode does a lot of weird things to make sure components are pure and I understand the double-render idea and even skipping deps checks for some hooks, but I hope returning different IDs between two renders of the same component instance is not the expected behaviour.\r\n\r\nAs you can see in the linked sandbox, the following code:\r\n\r\n```js\r\n  const id = useId();\r\n\r\n  console.log(\"RENDER\", id);\r\n\r\n  useMemo(() => {\r\n    console.log(\"MEMO\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"MOUNT\");\r\n\r\n    return () => {\r\n      console.log(\"UN-MOUNT\");\r\n    };\r\n  }, []);\r\n```\r\n\r\nProduces the following output:\r\n\r\n```bash\r\nRENDER :r0: \r\nMEMO \r\nRENDER :r1: \r\nMEMO \r\nMOUNT \r\nUN-MOUNT \r\nMOUNT \r\n```\r\n\r\nWhich makes absolutely no sense to me.\r\n\r\n## The expected behavior\r\n`useId` should provide the same ID during the entire life of a component instance. It should only change if the component mounts again.","state":"open","updated_at":"2023-08-03T16:08:14Z","created_at":"2023-07-12T17:01:46Z","creator_user_login":"ernestostifano"}
{"number":27101,"title":"Bump semver from 5.7.1 to 5.7.2 in /scripts/devtools","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-12T12:39:38Z","created_at":"2023-07-12T12:35:28Z","creator_user_login":"dependabot[bot]"}
{"number":27100,"title":"README Update","body":"I noticed the README seems a bit out of date // not aesthetically pleasing.  I want to change it to make it more visually pleasing and modern.  I have already made several changes locally.\r\n\r\nThe changes I made are the following:\r\n- I added in the React SVG straight from the Docs page.\r\n    - I made this change to add some branding to the readme.\r\n    - It also somewhat modernizes it as well.\r\n- I centered the introduction text, specifically the title.\r\n- I centered the status badges, the description and the action phrases.\r\n- I changed most of the syntax to HTML-style\r\n    - Changed this because Github added support for this a while back\r\n    - Also it makes the entire README look cleaner when editing.\r\n\r\nI hope these changes are welcomed with open arms!","state":"open","updated_at":"2023-07-12T11:16:22Z","created_at":"2023-07-12T11:16:22Z","creator_user_login":"tannnxr"}
{"number":27099,"title":"Bump semver from 6.3.0 to 6.3.1 in /fixtures/legacy-jsx-runtimes","body":"Bumps [semver](https://github.com/npm/node-semver) from 6.3.0 to 6.3.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v6.3.1</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">6.3.1</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/591\">#591</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>, <a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/nicolo-ribaudo\"><code>@​nicolo-ribaudo</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v6.3.1/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">6.3.1</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/591\">#591</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>, <a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/nicolo-ribaudo\"><code>@​nicolo-ribaudo</code></a>)</li>\n</ul>\n<h2>6.2.0</h2>\n<ul>\n<li>Coerce numbers to strings when passed to semver.coerce()</li>\n<li>Add <code>rtl</code> option to coerce from right to left</li>\n</ul>\n<h2>6.1.3</h2>\n<ul>\n<li>Handle X-ranges properly in includePrerelease mode</li>\n</ul>\n<h2>6.1.2</h2>\n<ul>\n<li>Do not throw when testing invalid version strings</li>\n</ul>\n<h2>6.1.1</h2>\n<ul>\n<li>Add options support for semver.coerce()</li>\n<li>Handle undefined version passed to Range.test</li>\n</ul>\n<h2>6.1.0</h2>\n<ul>\n<li>Add semver.compareBuild function</li>\n<li>Support <code>*</code> in semver.intersects</li>\n</ul>\n<h2>6.0</h2>\n<ul>\n<li>\n<p>Fix <code>intersects</code> logic.</p>\n<p>This is technically a bug fix, but since it is also a change to behavior\nthat may require users updating their code, it is marked as a major\nversion increment.</p>\n</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/44d27bc007e4827e9b797d6145f1076c127005f2\"><code>44d27bc</code></a> chore: release 6.3.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/39f632690ea5b1b0d64fa913aa0f96f42b9bde32\"><code>39f6326</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=6.3.0&new-version=6.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T06:08:43Z","created_at":"2023-07-12T03:39:15Z","creator_user_login":"dependabot[bot]"}
{"number":27098,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/dom","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T06:08:49Z","created_at":"2023-07-12T02:41:10Z","creator_user_login":"dependabot[bot]"}
{"number":27097,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/flight-esm","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T06:08:53Z","created_at":"2023-07-12T00:53:09Z","creator_user_login":"dependabot[bot]"}
{"number":27095,"title":"[Work Loop] Unify renderRoot{Sync,Concurrent}","body":"These two functions used to diverge more but as we've added more features they've become almost the same. When they were simpler and less alike, it made sense to have two separate functions, but now I think it makes more sense to keep them unified and pass a boolean argument for the few places where they differ.\r\n\r\nThis is a refactor and it shouldn't affect any behavior, but the code paths are slightly different so it still carries some risk.\r\n\r\nNext I'm going to do the same for perform{Sync,Concurrent}WorkOnRoot and associated functions, too.","state":"open","updated_at":"2023-08-22T06:08:59Z","created_at":"2023-07-11T17:47:11Z","creator_user_login":"acdlite"}
{"number":27094,"title":"Update \"Getting Started\" link in README.md","body":"The existing link directs to the legacy documentation, not react.dev\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-22T06:08:09Z","created_at":"2023-07-11T16:57:51Z","creator_user_login":"YanisaHS"}
{"number":27093,"title":"fix #27092 - Get the installed proxy in HTMLInputElement.prototype.value before calling it","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe motivation is fixing [https://github.com/facebook/react/issues/27092](https://github.com/facebook/react/issues/27092), which is fully described in the issue\r\n\r\n## How did you test this change?\r\n\r\n1. By following the instructions at [https://legacy.reactjs.org/docs/how-to-contribute.html](https://legacy.reactjs.org/docs/how-to-contribute.html) I was able to link react and react-dom packages to the repository which has the error reproducible: [https://github.com/SF97/react-input-element-bug](https://github.com/SF97/react-input-element-bug) \r\n2. I tried to reproduce the bug with the changes, and I was not able to do it\r\n\r\n## Important decision\r\n\r\nI've added a fallback to the current implementation when the descriptor has been deleted during the web page execution. This was mainly to fall back to the old implementation in the case there are any caveats I've missed, but I'm not opposed to removing it if necessary\r\n","state":"open","updated_at":"2023-07-13T00:26:37Z","created_at":"2023-07-11T15:49:43Z","creator_user_login":"SF97"}
{"number":27092,"title":"Bug: React breaks HTMLInputElement.prototype.value interceptions","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a React application with an input element of type 'text'\r\n2. With another script that runs **after react-dom**, intercept the calls to HTMLInputElement.prototype.value, which runs a piece of code X whenever someone accesses an input value\r\n3. Access the input element `.value`\r\n\r\nThe piece of code X, added in step 2, does not run. This is due to React intercepting the HTMLInputElement.prototype.value itself, and not running functions that were added **after** React loads. If the interception is made before React loads, it will work normally\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://github.com/SF97/react-input-element-bug](https://github.com/SF97/react-input-element-bug)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReact does not run functions that intercept HTMLInputValue.prototype.value getter that were introduced after React is loaded\r\n\r\n\r\n## The expected behavior\r\n\r\nReact runs functions that intercept HTMLInputValue.prototype.value getter that are done in any time frame, whether it was before or after React installs its descriptor","state":"open","updated_at":"2023-07-11T15:55:14Z","created_at":"2023-07-11T13:51:39Z","creator_user_login":"SF97"}
{"number":27091,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/ssr2","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T11:35:00Z","created_at":"2023-07-11T11:30:50Z","creator_user_login":"dependabot[bot]"}
{"number":27090,"title":"Updated README file with the latest information and documentation link","body":"\r\n![OS](https://github.com/facebook/react/assets/133583214/130c29a9-a6b7-4454-a894-f78dba9159cc)\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-15T12:56:44Z","created_at":"2023-07-11T11:15:17Z","creator_user_login":"JustineLapura"}
{"number":27089,"title":"Bug: Suspense does not work in Server Components with Safari on macOS or iOS","body":"React version: 18\r\n\r\n## Steps To Reproduce\r\n\r\nSee this reproducer using Next.js https://codesandbox.io/p/sandbox/quirky-danilo-nycr3t\r\n\r\n## The current behavior\r\n\r\nOpen the app in Chrome: https://nycr3t-3000.csb.app/\r\nObserve that the page is rendered quickly and \"Loading car...\" is displayed until the car has loaded\r\n\r\nOpen the app in Safari (either on macOS or iOS): https://nycr3t-3000.csb.app/\r\nObserve that the page does not render anything until the car has loaded and never displays the \"Loading car...\" message\r\n\r\n## The expected behavior\r\n\r\nBehaviour on Safari is the same as Chrome and fallback content is displayed until the slow operation has resolved","state":"open","updated_at":"2023-08-25T20:49:13Z","created_at":"2023-07-11T10:58:28Z","creator_user_login":"josephearl"}
{"number":27088,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/webpack-alias/dev","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T07:41:23Z","created_at":"2023-07-11T09:14:11Z","creator_user_login":"dependabot[bot]"}
{"number":27087,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/webpack-alias/prod","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T07:41:33Z","created_at":"2023-07-11T09:14:08Z","creator_user_login":"dependabot[bot]"}
{"number":27086,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/brunch/dev","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T07:41:40Z","created_at":"2023-07-11T09:14:07Z","creator_user_login":"dependabot[bot]"}
{"number":27085,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/webpack/dev","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-08-22T07:41:45Z","created_at":"2023-07-11T09:14:04Z","creator_user_login":"dependabot[bot]"}
{"number":27084,"title":"Bump semver from 5.4.1 to 5.7.2 in /scripts/release","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T07:34:28Z","created_at":"2023-07-11T07:28:00Z","creator_user_login":"dependabot[bot]"}
{"number":27083,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/attribute-behavior","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T07:33:52Z","created_at":"2023-07-11T07:27:58Z","creator_user_login":"dependabot[bot]"}
{"number":27082,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/webpack/prod","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T07:33:42Z","created_at":"2023-07-11T07:27:54Z","creator_user_login":"dependabot[bot]"}
{"number":27081,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/expiration","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T07:33:59Z","created_at":"2023-07-11T07:27:48Z","creator_user_login":"dependabot[bot]"}
{"number":27080,"title":"Bump semver from 5.4.1 to 5.7.2 in /fixtures/packaging/brunch/prod","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.4.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.4.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.4.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T07:34:17Z","created_at":"2023-07-11T07:27:47Z","creator_user_login":"dependabot[bot]"}
{"number":27079,"title":"Bump semver from 6.3.0 to 6.3.1","body":"Bumps [semver](https://github.com/npm/node-semver) from 6.3.0 to 6.3.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v6.3.1</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">6.3.1</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/591\">#591</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>, <a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/nicolo-ribaudo\"><code>@​nicolo-ribaudo</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v6.3.1/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">6.3.1</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/591\">#591</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>, <a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/nicolo-ribaudo\"><code>@​nicolo-ribaudo</code></a>)</li>\n</ul>\n<h2>6.2.0</h2>\n<ul>\n<li>Coerce numbers to strings when passed to semver.coerce()</li>\n<li>Add <code>rtl</code> option to coerce from right to left</li>\n</ul>\n<h2>6.1.3</h2>\n<ul>\n<li>Handle X-ranges properly in includePrerelease mode</li>\n</ul>\n<h2>6.1.2</h2>\n<ul>\n<li>Do not throw when testing invalid version strings</li>\n</ul>\n<h2>6.1.1</h2>\n<ul>\n<li>Add options support for semver.coerce()</li>\n<li>Handle undefined version passed to Range.test</li>\n</ul>\n<h2>6.1.0</h2>\n<ul>\n<li>Add semver.compareBuild function</li>\n<li>Support <code>*</code> in semver.intersects</li>\n</ul>\n<h2>6.0</h2>\n<ul>\n<li>\n<p>Fix <code>intersects</code> logic.</p>\n<p>This is technically a bug fix, but since it is also a change to behavior\nthat may require users updating their code, it is marked as a major\nversion increment.</p>\n</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/44d27bc007e4827e9b797d6145f1076c127005f2\"><code>44d27bc</code></a> chore: release 6.3.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c\"><code>928e56d</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/591\">#591</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/39f632690ea5b1b0d64fa913aa0f96f42b9bde32\"><code>39f6326</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v6.3.0...v6.3.1\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=6.3.0&new-version=6.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T05:27:49Z","created_at":"2023-07-11T05:22:50Z","creator_user_login":"dependabot[bot]"}
{"number":27078,"title":"Bump semver from 5.3.0 to 5.7.2 in /fixtures/art","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.3.0 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/c83c18cf84f9ccaea3431c929bb285fd168c01e4\"><code>c83c18c</code></a> 5.7.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/956e228a4eb1b0136d1fe42c6171d3eda827baef\"><code>956e228</code></a> Correct typo in README</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/8055dda0aee91372e3bfc47754a62f40e8a63b98\"><code>8055dda</code></a> 5.7.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/604e73dea1f19a05314d6c66e0a52b47b1b7b340\"><code>604e73d</code></a> auto-publishing scripts</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/bed01e2316b85271f6ffff89bf19e22f41475c97\"><code>bed01e2</code></a> remove the nomin comments, since we don't minify any more anyway</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/9cb68f1db72d297183233f4d8d287e935f2b6ddd\"><code>9cb68f1</code></a> document parse method</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/38d42ca87a9d891fba9b2a044f914f1919fd769c\"><code>38d42ca</code></a> 5.7 changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v5.3.0...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.3.0&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T05:26:48Z","created_at":"2023-07-11T05:21:02Z","creator_user_login":"dependabot[bot]"}
{"number":27077,"title":"Bump semver from 5.7.1 to 5.7.2 in /fixtures/fizz","body":"Bumps [semver](https://github.com/npm/node-semver) from 5.7.1 to 5.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v5.7.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/v5.7.2/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">5.7.2</a> (2023-07-10)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/585\">#585</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>) (<a href=\"https://github.com/joaomoreno\"><code>@​joaomoreno</code></a>, <a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>5.7</h2>\n<ul>\n<li>Add <code>minVersion</code> method</li>\n</ul>\n<h2>5.6</h2>\n<ul>\n<li>Move boolean <code>loose</code> param to an options object, with\nbackwards-compatibility protection.</li>\n<li>Add ability to opt out of special prerelease version handling with\nthe <code>includePrerelease</code> option flag.</li>\n</ul>\n<h2>5.5</h2>\n<ul>\n<li>Add version coercion capabilities</li>\n</ul>\n<h2>5.4</h2>\n<ul>\n<li>Add intersection checking</li>\n</ul>\n<h2>5.3</h2>\n<ul>\n<li>Add <code>minSatisfying</code> method</li>\n</ul>\n<h2>5.2</h2>\n<ul>\n<li>Add <code>prerelease(v)</code> that returns prerelease components</li>\n</ul>\n<h2>5.1</h2>\n<ul>\n<li>Add Backus-Naur for ranges</li>\n<li>Remove excessively cute inspection methods</li>\n</ul>\n<h2>5.0</h2>\n<ul>\n<li>Remove AMD/Browserified build artifacts</li>\n<li>Fix ltr and gtr when using the <code>*</code> range</li>\n<li>Fix for range <code>*</code> with a prerelease identifier</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8cc313550691a50d9662d8c94f0c033717efd7d\"><code>f8cc313</code></a> chore: release 5.7.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0\"><code>2f8fd41</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/585\">#585</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/deb5ad51bf58868fa243c1683775305fe9e0e365\"><code>deb5ad5</code></a> chore: <code>@​npmcli/template-oss</code><a href=\"https://github.com/4\"><code>@​4</code></a>.16.0</li>\n<li>See full diff in <a href=\"https://github.com/npm/node-semver/compare/v5.7.1...v5.7.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~lukekarrys\">lukekarrys</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=5.7.1&new-version=5.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-11T04:26:42Z","created_at":"2023-07-11T04:19:42Z","creator_user_login":"dependabot[bot]"}
{"number":27076,"title":"Bug: useCallback do not respect dependencies","body":"useCallback do not update inside values to most latest\r\n\r\nReact version: 18.2.0\r\n\r\nI have a simple code\r\n\r\n```\r\n    const [url, setUrl] = useState('');\r\n    const [valid, setValid] = useState(false);\r\n\r\n    const generate = useCallback(() => {\r\n        if (valid) {\r\n            // do stuff with url\r\n        }\r\n    }, [valid, url]);\r\n\r\n    const validate = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n\r\n        if (isValid(value)) {\r\n            setUrl(value);\r\n            setValid(true);\r\n            console.log({\r\n                url: value,\r\n            });\r\n        } else {\r\n            setValid(false);\r\n            setUrl('');\r\n        }\r\n    }, []);\r\n```\r\n\r\n## The current behavior\r\nWhen `validate` callback handler was triggered it works fine and update `valid` and `url` state value by using corresponding setState functions. After click on a button invokes handler `generate`. But `value` and `url` are in their initial state. Despite useCallback have them as a dependencies.\r\n\r\nDo not suggest use setSate to get current value.\r\n1. What if there are much more dependencies? Let's say 7. That will lead us to situation of insane nesting levels\r\n2. It contradicts documentation and a whole point of dependency list\r\n\r\n\r\n## The expected behavior\r\nKeep latest values\r\n","state":"open","updated_at":"2023-08-04T03:59:00Z","created_at":"2023-07-10T14:19:31Z","creator_user_login":"Skriptach"}
{"number":27074,"title":"Bump tough-cookie from 4.0.0 to 4.1.3 in /fixtures/flight","body":"Bumps [tough-cookie](https://github.com/salesforce/tough-cookie) from 4.0.0 to 4.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/salesforce/tough-cookie/releases\">tough-cookie's releases</a>.</em></p>\n<blockquote>\n<h2>4.1.3</h2>\n<p>Security fix for Prototype Pollution discovery in <a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/282\">#282</a>. This is a minor release, although output from the <code>inspect</code> utility is affected by this change, we felt this change was important enough to be pushed into the next patch.</p>\n<h2>4.1.2 -- Patch and Bugfix Release</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>fix: allow set cookies with localhost by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/253\">salesforce/tough-cookie#253</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/salesforce/tough-cookie/compare/v4.1.1...v4.1.2\">https://github.com/salesforce/tough-cookie/compare/v4.1.1...v4.1.2</a></p>\n<h2>4.1.1</h2>\n<h2>Patch Release</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>fix: allow special use domains by default by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/249\">salesforce/tough-cookie#249</a></li>\n<li>4.1.1 Patch -- allow special use domains by default by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/250\">salesforce/tough-cookie#250</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/salesforce/tough-cookie/compare/v4.1.0...v4.1.1\">https://github.com/salesforce/tough-cookie/compare/v4.1.0...v4.1.1</a></p>\n<h2>4.1.0</h2>\n<p>v4.1.0</p>\n<p>Minor release, focused mainly on resolving reported issues and some minor feature work.</p>\n<h2>What's Changed</h2>\n<ul>\n<li>Create CHANGELOG.md by <a href=\"https://github.com/ShivanKaul\"><code>@​ShivanKaul</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/189\">salesforce/tough-cookie#189</a></li>\n<li>Missing param validation issue145 by <a href=\"https://github.com/medelibero-sfdc\"><code>@​medelibero-sfdc</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/193\">salesforce/tough-cookie#193</a></li>\n<li>Create SECURITY.md by <a href=\"https://github.com/ShivanKaul\"><code>@​ShivanKaul</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/201\">salesforce/tough-cookie#201</a></li>\n<li>Create CODE_OF_CONDUCT.md by <a href=\"https://github.com/ShivanKaul\"><code>@​ShivanKaul</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/200\">salesforce/tough-cookie#200</a></li>\n<li>Fix for issue <a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/195\">#195</a> by <a href=\"https://github.com/medelibero-sfdc\"><code>@​medelibero-sfdc</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/202\">salesforce/tough-cookie#202</a></li>\n<li>Add explanation and more special-use domains by <a href=\"https://github.com/ShivanKaul\"><code>@​ShivanKaul</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/203\">salesforce/tough-cookie#203</a></li>\n<li>Sync of constructor options for serialization by <a href=\"https://github.com/medelibero-sfdc\"><code>@​medelibero-sfdc</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/204\">salesforce/tough-cookie#204</a></li>\n<li>Returned null in case of empty cookie value by <a href=\"https://github.com/vsin12\"><code>@​vsin12</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/196\">salesforce/tough-cookie#196</a></li>\n<li>132 str trim not a function by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/209\">salesforce/tough-cookie#209</a></li>\n<li>Fix for issue <a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/153\">#153</a> by <a href=\"https://github.com/medelibero-sfdc\"><code>@​medelibero-sfdc</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/210\">salesforce/tough-cookie#210</a></li>\n<li>Fix permuteDomain with trailing dot by <a href=\"https://github.com/ruoho-sfdc\"><code>@​ruoho-sfdc</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/216\">salesforce/tough-cookie#216</a></li>\n<li>Issue <a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/213\">#213</a> -- added gh-actions flow for building and testing tough-co… by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/218\">salesforce/tough-cookie#218</a></li>\n<li>Issue <a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/210\">#210</a> -- Updated workflow to use npm install. by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/220\">salesforce/tough-cookie#220</a></li>\n<li>@<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/215\">GH-215</a> -- Tests that document localhost behavior when set as domain. by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/221\">salesforce/tough-cookie#221</a></li>\n<li>fix: MemoryCookieStore methods should exist on the prototype, not on the class. by <a href=\"https://github.com/wjhsf\"><code>@​wjhsf</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/226\">salesforce/tough-cookie#226</a></li>\n<li>Unit test cases for <code>allowSpecialUseDomain</code> option by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/225\">salesforce/tough-cookie#225</a></li>\n<li>[Snyk] Upgrade universalify from 0.1.2 to 0.2.0 by <a href=\"https://github.com/snyk-bot\"><code>@​snyk-bot</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/228\">salesforce/tough-cookie#228</a></li>\n<li>React Native Support by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/227\">salesforce/tough-cookie#227</a></li>\n<li>Adding Updating CODEOWNERS with ECCN as per Export Control Compliance by <a href=\"https://github.com/svc-scm\"><code>@​svc-scm</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/223\">salesforce/tough-cookie#223</a></li>\n<li>fix: domain match routine by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/236\">salesforce/tough-cookie#236</a></li>\n<li>Stop using the internal NodeJS punycode module by <a href=\"https://github.com/gboer\"><code>@​gboer</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/238\">salesforce/tough-cookie#238</a></li>\n<li>Initial documentation review by <a href=\"https://github.com/mcarey86\"><code>@​mcarey86</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/234\">salesforce/tough-cookie#234</a></li>\n<li>fix: distinguish between no samesite and samesite=none by <a href=\"https://github.com/colincasey\"><code>@​colincasey</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/240\">salesforce/tough-cookie#240</a></li>\n<li>Prepare tough-cookie 4.1 for publishing (updated GitHub actions, move… by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/242\">salesforce/tough-cookie#242</a></li>\n<li>4.1.0 release to NPM by <a href=\"https://github.com/awaterma\"><code>@​awaterma</code></a> in <a href=\"https://redirect.github.com/salesforce/tough-cookie/pull/245\">salesforce/tough-cookie#245</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/4ff4d29f6cefd279a412b8d62a21142ebd410b36\"><code>4ff4d29</code></a> 4.1.3 release preparation, update the package and lib/version to 4.1.3. (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/284\">#284</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e\"><code>12d4747</code></a> Prevent prototype pollution in cookie memstore (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/283\">#283</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/f06b72d1d447f33dfa6222c0a3c0c5e063558248\"><code>f06b72d</code></a> Fix documentation for store.findCookies, missing allowSpecialUseDomain proper...</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/b1a8898ee3f8af52c6c1c355555d9f50ebe626ce\"><code>b1a8898</code></a> fix: allow set cookies with localhost (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/253\">#253</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/ec707966e68a48199e646e2fa6b3055df6a280f0\"><code>ec70796</code></a> 4.1.1 Patch -- allow special use domains by default (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/250\">#250</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/d4ac5801dd2c2d53eec51329e5380bbffb23bfaf\"><code>d4ac580</code></a> fix: allow special use domains by default (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/249\">#249</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/79c2f7d373e39918605c270ecd965f507701233d\"><code>79c2f7d</code></a> 4.1.0 release to NPM (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/245\">#245</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/4fafc179a798a570e32fc698034f0480c07d9afa\"><code>4fafc17</code></a> Prepare tough-cookie 4.1 for publishing (updated GitHub actions, move Dockerf...</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/aa4396da7abcb2dbe607db7b31606f7dd0f45709\"><code>aa4396d</code></a> fix: distinguish between no samesite and samesite=none (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/240\">#240</a>)</li>\n<li><a href=\"https://github.com/salesforce/tough-cookie/commit/b8d751188da697157e5eed81fa1e5f806fdfb541\"><code>b8d7511</code></a> Modernize README (<a href=\"https://redirect.github.com/salesforce/tough-cookie/issues/234\">#234</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/salesforce/tough-cookie/compare/v4.0.0...v4.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tough-cookie&package-manager=npm_and_yarn&previous-version=4.0.0&new-version=4.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>","state":"open","updated_at":"2023-07-09T19:38:34Z","created_at":"2023-07-09T19:25:45Z","creator_user_login":"dependabot[bot]"}
{"number":27073,"title":"Bug:  Different word cannot be used in place of  'children' as prop","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nFor passing child components, destructuring is allowed only with 'children' prop keyword. The application is treating 'children' as keyword and does not accepts any other word/synonym.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.  Please allow other words too in place of word 'children' for passing child components as prop.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n[https://codesandbox.io/s/3nr4x2?file=/App.js&utm_medium=sandpack](https://codesandbox.io/s/3nr4x2?file=/App.js&utm_medium=sandpack)\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-08-09T17:45:49Z","created_at":"2023-07-09T15:03:29Z","creator_user_login":"Danish-Official"}
{"number":27071,"title":"Improve alignment of the footer links [making them responsive] ","body":"\r\n## Steps To Reproduce\r\n\r\n1. Go to this link --> https://react.dev/learn/installation\r\n2. Inspect and select any mobile view\r\n\r\n![image](https://github.com/facebook/react/assets/64919642/bc38b2fb-074f-43a5-a5d3-efc79d472c68)\r\n\r\n![image](https://github.com/facebook/react/assets/64919642/79d53a43-836c-415a-996f-67d38264ae98)\r\n\r\nThe links which I have marked can be moved down together.\r\n\r\nPlease assign me this issue","state":"open","updated_at":"2023-08-03T12:03:01Z","created_at":"2023-07-08T16:02:57Z","creator_user_login":"rohan9024"}
{"number":27070,"title":"Update README.md","body":"Included the link to the  new React JS documentation.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-08T05:06:48Z","created_at":"2023-07-08T03:38:18Z","creator_user_login":"pcode78roy"}
{"number":27068,"title":"Bug: Calling bundle file using browserify from react gives Syntax error: react_app_testing/src/HashBundle.js: Unexpected character '�' (1:0)","body":"Hello i am facing a problem with an unexpected unicode character. let me further describe my case:\r\nI have a simple class that hashes a string named `HashFunction.js`:\r\n\r\n```\r\nvar crypto = require('crypto')\r\n\r\nmodule.exports=class HashFunction {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    hashString(pubkey){\r\n        const hash = crypto.createHash('sha256');\r\n        var sha256PublicKeyHash=hash.update(pubkey).digest();\r\n        return sha256PublicKeyHash;\r\n    }\r\n\r\n}\r\n```\r\ni am using browserify to create the bundle with this command.\r\n\r\n` browserify src/HashFunction.js --save utf-8-validate --standalone mybundle > src/HashBundle.js`\r\n\r\nHere is the simple `index.html` file:\r\n\r\n```\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <meta name=\"theme-color\" content=\"#000000\" />\r\n    <meta\r\n      name=\"description\"\r\n      content=\"Web site created using create-react-app\"\r\n    />\r\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\r\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\r\n    <title>React App</title>\r\n    <script src=\"../src/HashBundle.js\"></script>\r\n    <script src=\"../src/example.js\"></script>\r\n  </head>\r\n  <body>\r\n    <noscript>You need to enable JavaScript to run this app.</noscript>\r\n    <div id=\"root\"></div>\r\n  </body>\r\n</html>\r\n```\r\nWhen i am trying to load the bundle file from plain js it loads successfully with this code `example.js`:\r\n```\r\nvar mnem = new mybundle();\r\nlet hash_result=mnem.hashString(\"a value\")\r\n```\r\n\r\nMy problem now is when i am trying to call the bundle file from react i got a syntax error with unexpected characters:\r\n\r\n```\r\n./src/HashBundle.js\r\nSyntax error: D:/Documents/IdeaProjects/react_app_testing/src/HashBundle.js: Unexpected character '�' (1:0)\r\n\r\n> 1 | ��(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.mybundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\r\n    | ^\r\n  2 |\r\n  3 | 'use strict';\r\n```\r\n\r\nHere is also some lines not all of them from the bundle file:\r\n\r\n    (function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.mybundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\r\n    'use strict';\r\n    \r\n    const asn1 = exports;\r\n    \r\n    asn1.bignum = require('bn.js');\r\n    \r\n    asn1.define = require('./asn1/api').define;\r\n    asn1.base = require('./asn1/base');\r\n    asn1.constants = require('./asn1/constants');\r\n    asn1.decoders = require('./asn1/decoders');\r\n    asn1.encoders = require('./asn1/encoders');\r\n    \r\n    },{\"./asn1/api\":2,\"./asn1/base\":4,\"./asn1/constants\":8,\"./asn1/decoders\":10,\"./asn1/encoders\":13,\"bn.js\":15}],2:[function(require,module,exports){\r\n    'use strict';\r\n    \r\n    const encoders = require('./encoders');\r\n    const decoders = require('./decoders');\r\n    const inherits = require('inherits');\r\n    \r\n    const api = exports;\r\n    \r\n    api.define = function define(name, body) {\r\n      return new Entity(name, body);\r\n    };\r\n    \r\n    function Entity(name, body) {\r\n      this.name = name;\r\n      this.body = body;\r\n    \r\n      this.decoders = {};\r\n      this.encoders = {};\r\n    }\r\n    \r\n    Entity.prototype._createNamed = function createNamed(Base) {\r\n      const name = this.name;\r\n    \r\n      function Generated(entity) {\r\n        this._initNamed(entity, name);\r\n      }\r\n      inherits(Generated, Base);\r\n      Generated.prototype._initNamed = function _initNamed(entity, name) {\r\n        Base.call(this, entity, name);\r\n      };\r\n    \r\n      return new Generated(this);\r\n    };\r\n    \r\n    Entity.prototype._getDecoder = function _getDecoder(enc) {\r\n      enc = enc || 'der';\r\n      // Lazily create decoder\r\n      if (!this.decoders.hasOwnProperty(enc))\r\n        this.decoders[enc] = this._createNamed(decoders[enc]);\r\n      return this.decoders[enc];\r\n    };\r\n    \r\n    Entity.prototype.decode = function decode(data, enc, options) {\r\n      return this._getDecoder(enc).decode(data, options);\r\n    };\r\n    \r\n    Entity.prototype._getEncoder = function _getEncoder(enc) {\r\n      enc = enc || 'der';\r\n      // Lazily create encoder\r\n      if (!this.encoders.hasOwnProperty(enc))\r\n        this.encoders[enc] = this._createNamed(encoders[enc]);\r\n      return this.encoders[enc];\r\n    };\r\n    \r\n    Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\r\n      return this._getEncoder(enc).encode(data, reporter);\r\n    };\r\n    \r\n    },{\"./decoders\":10,\"./encoders\":13,\"inherits\":132}],3:[function(require,module,exports){\r\n    'use strict';\r\n    \r\n    const inherits = require('inherits');\r\n    const Reporter = require('../base/reporter').Reporter;\r\n    const Buffer = require('safer-buffer').Buffer;\r\n    \r\n    function DecoderBuffer(base, options) {\r\n      Reporter.call(this, options);\r\n      if (!Buffer.isBuffer(base)) {\r\n        this.error('Input not Buffer');\r\n        return;\r\n      }\r\n    \r\n      this.base = base;\r\n      this.offset = 0;\r\n      this.length = base.length;\r\n    }\r\n    inherits(DecoderBuffer, Reporter);\r\n    exports.DecoderBuffer = DecoderBuffer;\r\n    \r\n    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\r\n      if (data instanceof DecoderBuffer) {\r\n        return true;\r\n      }\r\n\r\nHere is my simple react js code:\r\n\r\n```\r\nimport { useState, useEffect} from \"react\";\r\nimport React from 'react';\r\nimport {HashBundle} from '../HashBundle'\r\nfunction Test2() {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        var obj = new mybundle();\r\n        let hash_result=obj.hashString(\"a value\")\r\n        setInputValue(hash_result)\r\n    }, [inputValue]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Current Value: {inputValue}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test2;\r\n```\r\n\r\nWhy is this happening??? how to bypass the  `Unexpected character '�' (1:0)`??? Do I load correct the js from react???\r\n","state":"open","updated_at":"2023-07-10T08:41:23Z","created_at":"2023-07-07T16:17:24Z","creator_user_login":"PanagiotisDrakatos"}
{"number":27066,"title":"Enable useModernStrictMode for internal testing","body":"Going to sync from the PR to see what tests fail, then we can switch this to a dynamic flag before landing","state":"open","updated_at":"2023-07-07T16:56:29Z","created_at":"2023-07-07T15:17:38Z","creator_user_login":"rickhanlonii"}
{"number":27065,"title":"Add `ignoredHooks` to `react-hooks/exhaustive-deps`","body":"Hi! :wave:\r\nI created a hook that can run side-effects concurrently using React's scheduler and generator functions: https://github.com/piotr-oles/use-transition-effect. I called it `useTransitionEffect()` because it's like `useTransition()` but for side-effects.\r\n\r\n### Problem\r\nI have a problem with `react-hooks/exhaustive-deps` because this rule [uses regexp to match \"effect\" hooks](https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1165). Because of that, I have to add `// eslint-disable-next-line react-hooks/exhaustive-deps` every time I use this hook. I didn't think about this when naming a hook, but now it's public and I wrote an article about it, and it would be hard to rename it now 😞 \r\n\r\n### Proposal\r\nThere is already `additionalHooks` prop - could we add `ignoredHooks` options as well to do the opposite? I can make a PR, but I want to know if it's something you would accept 😃 ","state":"open","updated_at":"2023-07-17T04:04:34Z","created_at":"2023-07-07T08:14:40Z","creator_user_login":"piotr-oles"}
{"number":27062,"title":"Merge pull request #1 from facebook/main","body":"pull\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-13T19:22:50Z","created_at":"2023-07-06T17:49:33Z","creator_user_login":"1proprogrammerchant"}
{"number":27059,"title":"Ssr2 fixed","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nExisting problem I solved was package.json file, src folder and .eslintrc.js \r\n\r\n## How did you test this change?\r\n\r\n![ssr2](https://github.com/facebook/react/assets/77508734/72ca1a2a-7c18-461f-8c76-b3a0a1d32300)\r\n","state":"open","updated_at":"2023-07-06T03:28:33Z","created_at":"2023-07-06T03:28:27Z","creator_user_login":"koyuncuoglum95"}
{"number":27055,"title":"added links to new docs","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nUpdated links to new React dev docs.\r\n\r\n## How did you test this change?\r\n\r\nChanged the links to new React dev docs.\r\n","state":"open","updated_at":"2023-07-05T11:54:28Z","created_at":"2023-07-05T11:49:10Z","creator_user_login":"pratikbee"}
{"number":27054,"title":"Remove duplicate babel dependencies as they already installed in the repo root","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis PR cleans up the monorepo dependencies by removing duplicate Babel dependencies that are already installed in the repo root\r\n\r\n## How did you test this change?\r\n\r\n - Ran `yarn test --prod`\r\n - Ran `yarn test`\r\n","state":"open","updated_at":"2023-07-07T07:08:11Z","created_at":"2023-07-05T06:01:31Z","creator_user_login":"anatoliik-lyft"}
{"number":27052,"title":"Bug: React + Typescript - useReducer's initializer arg is required even though it shouldn't be","body":"When using the `useReducer()` hook in Typescript, it complains that the hook call is missing the `initializer` function argument, even though according to [React docs](https://react.dev/reference/react/useReducer) this argument is optional.\r\n\r\nReact version:\r\n * react@18.2.0\r\n * @types/react-dom@18.2.6\r\n * @types/react@18.2.14\r\n\r\n## Steps To Reproduce\r\n\r\n1. In a React + Typescript project\r\n2. Call the reducer hook in a functional component\r\n3. See linter warning\r\n\r\nCode example:\r\n\r\n`const [ state, dispatch ] = useReducer<string[], () => {}>(() => {}, []);`\r\n\r\nError message:\r\n\r\n`Expected 3 arguments, but got 2.\r\nAn argument for 'initializer' was not provided.`\r\n\r\n## The current behavior\r\n\r\nLinter gives warning about missing argument\r\n\r\n## The expected behavior\r\n\r\nLinter shouldn't give a warning as this argument is optional.","state":"open","updated_at":"2023-07-04T10:38:11Z","created_at":"2023-07-04T08:32:56Z","creator_user_login":"JorensM"}
{"number":27043,"title":"Bug: Update hook called on initial render.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.3.0-canary-1fdacbefd-20230630\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n```shell\r\nUncaught Error: Update hook called on initial render. This is likely a bug in React. Please file an issue.\r\n    at updateWorkInProgressHook (react-dom.development.js:10921:1)\r\n    at rerenderReducer (react-dom.development.js:11188:1)\r\n    at Object.useReducer (react-dom.development.js:12563:1)\r\n    at useReducer (react.development.js:1760:1)\r\n    at useAtomValue (react.mjs:51:87)\r\n    at BlockSuiteEditorImpl (index.tsx:58:44)\r\n    at renderWithHooksAgain (react-dom.development.js:10781:1)\r\n    at replaySuspendedComponentWithHooks (react-dom.development.js:10728:1)\r\n    at replayFunctionComponent (react-dom.development.js:15145:1)\r\n    at replaySuspendedUnitOfWork (react-dom.development.js:24529:1)\r\n    at renderRootConcurrent (react-dom.development.js:24301:1)\r\n    at performConcurrentWorkOnRoot (react-dom.development.js:23270:1)\r\n    at workLoop (scheduler.development.js:261:1)\r\n    at flushWork (scheduler.development.js:230:1)\r\n    at MessagePort.performWorkUntilDeadline (scheduler.development.js:537:1)\r\n```\r\n\r\n![image](https://github.com/facebook/react/assets/14026360/0ca8b9ef-5196-484b-9868-03464f304668)\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-07-03T14:40:34Z","created_at":"2023-07-03T14:14:22Z","creator_user_login":"himself65"}
{"number":27041,"title":"Bug: ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nState change and event trigger not behaving as expected.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n1. Create the component - code below.\r\n```\r\nimport { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        console.log(\"form submitted!\");\r\n      }}\r\n    >\r\n      {!clicked ? (\r\n        <button type=\"button\" onClick={() => setClicked(true)}>\r\n          Type \"button\"\r\n        </button>\r\n      ) : (\r\n        <button type=\"submit\" onClick={() => setClicked(false)}>\r\n          Type \"submit\"\r\n        </button>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n```\r\n2. Click on the button - when it is type=\"button\" it should not submit, but the effect is opposite.\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\nhttps://codesandbox.io/s/awesome-currying-c6kts8?file=/src/App.js\r\n## The current behavior\r\nForm gets submitted when button has type=\"button\" and does not get submitted when button has type=\"submit\".\r\n\r\n## The expected behavior\r\nThe form should be submitted when button has type=\"submit\"","state":"open","updated_at":"2023-07-20T11:00:36Z","created_at":"2023-07-03T04:04:04Z","creator_user_login":"mayank1513"}
{"number":27039,"title":"Ssr fixed","body":"<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nI solved incorrect syntax json file from fixtures/ssr.\r\n\r\n## How did you test this change?\r\nI tested by running yarn dev and everything is working well.\r\n\r\n![Screenshot 2023-07-01 215054](https://github.com/facebook/react/assets/77508734/db6aad59-4f89-422e-9ed2-2314ae84659c)\r\n\r\n![Screenshot 2023-07-01 215043](https://github.com/facebook/react/assets/77508734/ee1d72db-b197-4d3e-9c86-bca693c2e038)\r\n","state":"open","updated_at":"2023-07-02T04:54:31Z","created_at":"2023-07-02T04:54:25Z","creator_user_login":"koyuncuoglum95"}
{"number":27035,"title":"now_empty_null","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-17T18:30:15Z","created_at":"2023-07-01T12:50:41Z","creator_user_login":"abrar-khan007"}
{"number":27034,"title":"Packaging contribution","body":"\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n\r\nI solved syntax error from fixtures/packaging/dev json file and some reactDom, react files. \r\n-->\r\n\r\n## How did you test this change?\r\nIt is still giving import and export error. \r\n\r\n![Screenshot 2023-06-30 223913](https://github.com/facebook/react/assets/77508734/151a036e-0356-4988-b131-09b21d5800bd)\r\n\r\n","state":"open","updated_at":"2023-07-01T05:40:57Z","created_at":"2023-07-01T05:40:51Z","creator_user_login":"koyuncuoglum95"}
{"number":27026,"title":"suggestion to fix fail to start server","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-30T02:19:22Z","created_at":"2023-06-30T02:14:06Z","creator_user_login":"llcain"}
{"number":27025,"title":"[DevTools Bug]: Excessive memory usage, even when not in use (Firefox)","body":"### Website or app\n\nThe issue happens on the browser, not on a specific site\n\n### Repro steps\n\n1. Use Firefox\r\n2. open a couple of tabs not even using react (for example for me, I have my mail client, youtube etc open).\r\n3. check about:performance\r\n4. confirm that the memory usage of the extension is around 200mb, which is a lot considering the extension isn't even in use.\r\n\r\nWhat I would do is I would add a config option about the domains the extension is supposed to run on, and only start up everything the extension does when the user is on one of those domains, because I really don't want an extension I'm not even using at the moment to be a memory hog.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-07-07T13:16:23Z","created_at":"2023-06-29T23:13:56Z","creator_user_login":"kahveciderin"}
{"number":27024,"title":"Fix: update other radios tracked value in one group when one is updated to be checked","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nFix #26876, which is caused by not updating tracked values. Please see [here](https://github.com/facebook/react/issues/26876#issuecomment-1611037027) for the investigation details. \r\n\r\nThe root is, when one radio is changed to be checked (by updating the `checked` prop), the previously checked one won't update its tracked value (will be still  `'true'`) if it's one of the previous siblings. \r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nTesting Steps (refer to but not exactly follow the steps of reproduction):\r\n- Two radios with the same name, initially, radio1 is checked, and radio2 is unchecked. (radio1 is the previous sibling of radio2)\r\n- Update the `checked` props to make radio1 unchecked, and radio2 checked.\r\n- Then update the `checked` props to make radio1 checked, and radio2 unchecked.\r\n- Click radio2, the `onChange` handler should be called after fixing the issue.\r\n\r\nAny feedback and suggestions will be appreciated. cc @eps1lon @sebmarkbage @acdlite ","state":"open","updated_at":"2023-08-01T16:53:49Z","created_at":"2023-06-29T09:37:34Z","creator_user_login":"zhengjitf"}
{"number":27022,"title":"Bug:  Cannot update a component (`HashRouter`) while rendering a different component *.","body":"\r\nReact version: 18.16.0\r\n\r\nThis is the warning i get, with the stack trace. I found a similar problem (https://github.com/facebook/react/issues/18178) but i still don't understand where my problem is, maybe it's just a warning that i can't fix.\r\n![image](https://github.com/facebook/react/assets/93923690/25edb01d-4844-4a21-b766-eb901c071ae0)\r\n\r\nThe application works correctly i just want to know if its a problem that i can fix or not.\r\n\r\n","state":"open","updated_at":"2023-07-14T15:59:28Z","created_at":"2023-06-28T10:57:27Z","creator_user_login":"noemiliva"}
{"number":27021,"title":"[DevTools Bug]: Update highlights crash often","body":"### Website or app\n\nhttp://everywhereiusetheextension.io\n\n### Repro steps\n\n- Open React devtools\r\n- Enable \" Highlight updates when components render.\"\r\n- Use your React app\r\n- Highlight stops working again and again. The only way to make it work is to close and open devtools...\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-07-13T12:40:44Z","created_at":"2023-06-28T08:04:02Z","creator_user_login":"chamerling"}
{"number":27020,"title":"supports request for kiwi browser latest version v112.0.5615.137","body":"Device : In note 1\r\nOS : Stock Android 10\r\nbrowser : kiwi browser v 112.0.5615.137\r\n\r\nProblem : chrome store showing `not compatible` when trying to install `chrome developer tools`","state":"open","updated_at":"2023-06-28T02:40:33Z","created_at":"2023-06-28T02:40:33Z","creator_user_login":"Abhay2132"}
{"number":27017,"title":"fix typo in comment","body":"## Summary\r\n\r\nComment in source contains typing error and got fixed.\r\n","state":"open","updated_at":"2023-06-27T10:27:18Z","created_at":"2023-06-27T10:22:06Z","creator_user_login":"choopachuck"}
{"number":27016,"title":"Fix react checkbox input synthetic event","body":"Been weeks, i Discovered a strange activity of React while we try to render a input type of `checkbox`, when i have both an `onClick` handler and as well as an `onChange` handler, if i have added a `preventDefault` function, that should behave as it should not allow the onChange event to kick in! strangely it is not the behaviour it is producing, to confirm the same, i tried to reproduce the same Behaviour with Vanilla JavaScript and it did not behaved the same as of React. \r\n\r\n**Behaviour with Current React version**\r\non the Initial render, the OnChange event function gets called up , which should not be the case \r\n\r\nhttps://github.com/facebook/react/assets/72331432/7e6a3627-6f29-461a-bc74-fb68f6a5ca28\r\n\r\n\r\n\r\n**Codesandboxlink below for the error reproduction**\r\nhttps://codesandbox.io/s/bitter-forest-gytgph?file=/src/App.js\r\n\r\n\r\n**Behaviour with Vanilla JavaScript**\r\n\r\nhttps://github.com/facebook/react/assets/72331432/13d6ba5d-796b-4986-8d3e-8f9d77911690\r\n\r\n\r\n\r\n\r\nThe conclusion that i came to after seeing this, React is sort of trying to retrieve the checked value of the Node, even before our `preventDefault` function, is called.\r\n\r\nIn my mental model,  Initially the value of the `node.checked` seems to be true, As soon as we hit the first click this seem to generate something like:-\r\n\r\n```\r\nprevValue = false,\r\nnextValue = true,\r\n```\r\nand on next subsequent clicks on the checkbox, our `change` event does not get fired since the value looks like\r\n```\r\nprevValue = true,\r\nnextValue = true,\r\n```\r\n\r\nThe solution seems to be pretty straight forward i went on to just add a condition to check for such when the prevent is there to just ignore the `onChange` event, I have tested the behaviour across chrome, safari and firefox and it seemed to work consistently across all! the test according to me is also passing as you can see below from the test snapshot\r\n<img width=\"1435\" alt=\"webstorm test pass image\" src=\"https://github.com/facebook/react/assets/72331432/84c0a3fe-fceb-4c68-8ef1-2b40e5d82e52\">\r\n\r\nWorking preview of the same across different Browsers\r\n\r\n**Chrome**\r\n\r\nhttps://github.com/facebook/react/assets/72331432/eb24b801-6ad5-4497-ab6a-c4b5d8ba9909\r\n\r\n**Firefox**\r\n\r\nhttps://github.com/facebook/react/assets/72331432/e9c0a512-ab52-4e7e-94ff-4327feaaa5ea\r\n\r\n**Safari**\r\n\r\n\r\nhttps://github.com/facebook/react/assets/72331432/bca07e0b-e1f1-4f61-9696-d86e40649fb4\r\n\r\n\r\n","state":"open","updated_at":"2023-08-24T06:09:46Z","created_at":"2023-06-27T09:51:56Z","creator_user_login":"Biki-das"}
{"number":27014,"title":"Bug: Unhelpful error when rendering async components without React 18.3 ","body":"Versions of React that don't support async components error about attempting to render a `Promise` as a React child. While this technically makes sense to me as a React ecosystem maintainer, I don't think this error helps end users solve the problem well, compared to suggesting that React 18.3 or another compatible RSC implementation is used explicitly.\r\n\r\nThis is especially confusing when trying to test a Next 13 app, for example, as there's no documentation explaining that RSCs cannot be used in tests because Next vendors React 18.3 but installs React 18.2 locally. I considered trying to fix this in React Testing Library, but I don't think it makes sense to couple this suggestion to a specific framework or library when it potentially affects any use case where a project has two frameworks or libraries installed, including any RSC meta framework app with tests/docs/stories/etc.\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `<18.3`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install React\r\n2. Create an async component: `async function Home() {}`\r\n3. Render an async component: `<Home />`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThrows an `Error` with `message`:\r\n> Objects are not valid as a React child (found: [object Promise]). If you meant to render a collection of children, use an array instead.\r\n\r\n\r\n## The expected behavior\r\n\r\nThrows an error that suggests installing React 18.3:\r\n\r\n> Promises and async components are not valid as a React child in React `React.version`. If you meant to render an async component, install React 18.3 or use a compatible meta framework or library.","state":"open","updated_at":"2023-07-06T07:17:00Z","created_at":"2023-06-27T06:16:28Z","creator_user_login":"nickmccurdy"}
{"number":27013,"title":"fix: firefox Uncaught DOMException: Selection.extend: No selection ra…","body":"…nge exists\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIf  Selection.extend is called while another element has focus, an error is thrown. We therefore disable `extend` if the active element is somewhere other than the node we are selecting. This should only occur in Firefox, since it is the only browser to support multiple selections.See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.\r\nFirefox will trrigger `InvalidStateError: Selection.extend: No selection range exists`.\r\nSafari will trigger `InvalidStateError: extend() requires a Range to be added to the Selection`.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nThe code logic refers to [draft-js](https://github.com/facebookarchive/draft-js/blob/main/src/component/selection/setDraftEditorSelection.js#L272)\r\nfix #26980\r\n","state":"open","updated_at":"2023-06-28T12:05:23Z","created_at":"2023-06-27T03:11:24Z","creator_user_login":"nusr"}
{"number":27012,"title":"Remove redundant conditions","body":"Remove redundant conditions for       options !== null\r\nbecause this contidion already checked in line 201","state":"open","updated_at":"2023-06-27T02:28:52Z","created_at":"2023-06-27T02:22:53Z","creator_user_login":"leixd1994"}
{"number":27009,"title":"fix: update mountWorkInProgressOffscreenFiber","body":"Hello, I find that the function in beginWork mountWorkInProgressOffscreenFiber one point will be very strange, it calls the createFiberFromOffscreen, but transfer NoLanes will be fixed.\r\nBut will call this function and pass in mountSuspensePrimaryChildren renderLanes, actually this renderLanes will not take effect, but he will cause some misunderstanding to the reader, so I try to change the code.\r\nUsed in mountWorkInProgressOffscreenFiber renderLanes as a parameter, pass in mountSuspensePrimaryChildren NoLanes, this affect code logic will not, but can be easier to read the source code.","state":"open","updated_at":"2023-06-26T11:40:33Z","created_at":"2023-06-26T11:35:14Z","creator_user_login":"bestlyg"}
{"number":27005,"title":"Bug: react-devtools-inline crashes when Function.prototype.toString is not configurable.","body":"Run the following code before loading `react-devtools-inline` and you can see the result:\r\n\r\n```js\r\nObject.freeze(Function.prototype)\r\n```\r\n\r\nIt tries to delete Function.prototype.toString and crashes.\r\n\r\n<img width=\"854\" alt=\"image\" src=\"https://github.com/facebook/react/assets/5390719/f2440555-78a1-4f81-a3d9-32d188ca1583\">\r\n\r\n<img width=\"972\" alt=\"image\" src=\"https://github.com/facebook/react/assets/5390719/48b4d50b-f354-4795-8ca3-50cd11a78801\">\r\n\r\n\r\n<img width=\"490\" alt=\"image\" src=\"https://github.com/facebook/react/assets/5390719/969b4b2e-776e-4ae8-911d-79a541ef540b\">\r\n","state":"open","updated_at":"2023-06-29T14:20:00Z","created_at":"2023-06-25T13:36:31Z","creator_user_login":"Jack-Works"}
{"number":27004,"title":"Update ReactFiberCommitWork.js","body":"Fixed spelling issues\r\n\r\n## Summary\r\n\r\nFixed spelling issues\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-25T11:06:48Z","created_at":"2023-06-25T09:39:43Z","creator_user_login":"starunaway"}
{"number":27003,"title":"Update README.md","body":"Fixed spelling issues\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nFixed a few spelling and grammar issues\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-04T05:36:41Z","created_at":"2023-06-25T08:56:03Z","creator_user_login":"zencatalyst"}
{"number":27002,"title":"React - npm audit - 4 moderate severity vulnerabilities - Need solution please.","body":"# npm audit report\r\n\r\nsemver  <7.5.2\r\nSeverity: moderate\r\nsemver vulnerable to Regular Expression Denial of Service - https://github.com/advisories/GHSA-c2qf-rxjj-qqgw\r\nNo fix available\r\nnode_modules/@babel/core/node_modules/semver\r\nnode_modules/@babel/helper-compilation-targets/node_modules/semver\r\n  @babel/core  *\r\n  Depends on vulnerable versions of @babel/helper-compilation-targets\r\n  Depends on vulnerable versions of semver\r\n  node_modules/@babel/core\r\n    @vitejs/plugin-react  *\r\n    Depends on vulnerable versions of @babel/core\r\n    node_modules/@vitejs/plugin-react\r\n  @babel/helper-compilation-targets  >=7.8.1\r\n  Depends on vulnerable versions of semver\r\n  node_modules/@babel/helper-compilation-targets\r\n\r\n4 moderate severity vulnerabilities\r\n\r\nSome issues need review, and may require choosing\r\na different dependency.","state":"open","updated_at":"2023-07-01T07:59:13Z","created_at":"2023-06-25T01:34:26Z","creator_user_login":"gsenthilnathan"}
{"number":26998,"title":"Bug: Resetting the value comes from dynamic `defaultValue` of `<input type=\"search\" />` won't trigger `onChange`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the reproduction below.\r\n2. Waiting for `Hello, World` to show up in the input.\r\n3. Do not input/delete anything in the input. Just click the `X` button of the `<input type=\"search\" />`:\r\n\r\n<img width=\"433\" alt=\"image\" src=\"https://github.com/facebook/react/assets/40715044/8605002f-b0b0-489e-a16e-b56d3658948e\">\r\n\r\nLink to code example: https://stackblitz.com/edit/stackblitz-starters-qedxnn?file=src%2FApp.tsx\r\n\r\n## The current behavior\r\n\r\nWhen clicking the `X` button of the `<input type=\"search\" />`, `onChange` should still trigger, even if the value if from `defaultValue`. \r\n\r\n## The expected behavior\r\n\r\nWhen clicking the `X` button of the `<input type=\"search\" />`, `onChange` is not triggered.\r\n\r\n## Additional Information\r\n\r\nThe related source code might be this: https://github.com/facebook/react/blob/8ec962d825fc948ffda5ab863e639cd4158935ba/packages/react-dom-bindings/src/client/ReactDOMInput.js\r\n\r\nI don't know if this is intended behavior. And if it is, what should I do to track when the user resets the value from `defaultValue`?\r\n","state":"open","updated_at":"2023-07-08T14:05:51Z","created_at":"2023-06-23T17:09:40Z","creator_user_login":"SukkaW"}
{"number":26996,"title":"Bump semver from 7.3.7 to 7.5.2 in /fixtures/flight","body":"Bumps [semver](https://github.com/npm/node-semver) from 7.3.7 to 7.5.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/releases\">semver's releases</a>.</em></p>\n<blockquote>\n<h2>v7.5.2</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.5.1...v7.5.2\">7.5.2</a> (2023-06-15)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/58c791f40ba8cf4be35a5ca6644353ecd6249edc\"><code>58c791f</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/566\">#566</a> diff when detecting major change from prerelease (<a href=\"https://redirect.github.com/npm/node-semver/issues/566\">#566</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/5c8efbcb3c6c125af10746d054faff13e8c33fbd\"><code>5c8efbc</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/565\">#565</a> preserve build in raw after inc (<a href=\"https://redirect.github.com/npm/node-semver/issues/565\">#565</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441\"><code>717534e</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/564\">#564</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/564\">#564</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2>v7.5.1</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.5.0...v7.5.1\">7.5.1</a> (2023-05-12)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/d30d25a5c1fb963c3cc9178cb1769fe45e4a3cab\"><code>d30d25a</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/559\">#559</a> show type on invalid semver error (<a href=\"https://redirect.github.com/npm/node-semver/issues/559\">#559</a>) (<a href=\"https://github.com/tjenkinson\"><code>@​tjenkinson</code></a>)</li>\n</ul>\n<h2>v7.5.0</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.4.0...v7.5.0\">7.5.0</a> (2023-04-17)</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/503a4e52fe2b1c6ed1400d33149f7733c8361eed\"><code>503a4e5</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/548\">#548</a> allow identifierBase to be false (<a href=\"https://redirect.github.com/npm/node-semver/issues/548\">#548</a>) (<a href=\"https://github.com/lsvalina\"><code>@​lsvalina</code></a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/e219bb454036a0c23e34407591f921c8edb688e7\"><code>e219bb4</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/552\">#552</a> throw on bad version with correct error message (<a href=\"https://redirect.github.com/npm/node-semver/issues/552\">#552</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/fc2f3df0b5d25253b3580607e111a9a280d888ca\"><code>fc2f3df</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/546\">#546</a> incorrect results from diff sometimes with prerelease versions (<a href=\"https://redirect.github.com/npm/node-semver/issues/546\">#546</a>) (<a href=\"https://github.com/tjenkinson\"><code>@​tjenkinson</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/27817677794f592b592bf6181a80a4824ff762b2\"><code>2781767</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/547\">#547</a> avoid re-instantiating SemVer during diff compare (<a href=\"https://redirect.github.com/npm/node-semver/issues/547\">#547</a>) (<a href=\"https://github.com/macno\"><code>@​macno</code></a>)</li>\n</ul>\n<h2>v7.4.0</h2>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.3.8...v7.4.0\">7.4.0</a> (2023-04-10)</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/113f51312a1a6b6aa50d4f9486b4fde21782c1f5\"><code>113f513</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/532\">#532</a> identifierBase parameter for .inc (<a href=\"https://redirect.github.com/npm/node-semver/issues/532\">#532</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>, <a href=\"https://github.com/b-bly\"><code>@​b-bly</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/48d8f8fa63bf6e35db70ff840b6da1a51596a5a8\"><code>48d8f8f</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/530\">#530</a> export new RELEASE_TYPES constant (<a href=\"https://github.com/hcharley\"><code>@​hcharley</code></a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/940723d22bca824993627c45ac30dd3d2854b8cd\"><code>940723d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/538\">#538</a> intersects with v0.0.0 and v0.0.0-0 (<a href=\"https://redirect.github.com/npm/node-semver/issues/538\">#538</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/aa516b50b32f5a144017d8fc1b9efe0540963c91\"><code>aa516b5</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/535\">#535</a> faster parse options (<a href=\"https://redirect.github.com/npm/node-semver/issues/535\">#535</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/61e6ea1e9b7af01baf19ab0c0a63c8e3ebfac97c\"><code>61e6ea1</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/536\">#536</a> faster cache key factory for range (<a href=\"https://redirect.github.com/npm/node-semver/issues/536\">#536</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8b8b619e71746a47852a9d301f3087ab311444f\"><code>f8b8b61</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/541\">#541</a> optimistic parse (<a href=\"https://redirect.github.com/npm/node-semver/issues/541\">#541</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/796cbe29b06d102e1b16f3ed78eaba210ece951e\"><code>796cbe2</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/533\">#533</a> semver.diff prerelease to release recognition (<a href=\"https://redirect.github.com/npm/node-semver/issues/533\">#533</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>, <a href=\"https://github.com/dominique-blockchain\"><code>@​dominique-blockchain</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/3f222b144033525ca9f8a2ce5bc6e02f0401881f\"><code>3f222b1</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/537\">#537</a> reuse comparators on subset (<a href=\"https://redirect.github.com/npm/node-semver/issues/537\">#537</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/f66cc45c6e82eebb4b5b51af73e7b8dcaeda7e21\"><code>f66cc45</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/539\">#539</a> faster diff (<a href=\"https://redirect.github.com/npm/node-semver/issues/539\">#539</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/c5d29df6f75741fea27fffe3b88c9c3b28e3ca73\"><code>c5d29df</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/530\">#530</a> Add &quot;Constants&quot; section to README (<a href=\"https://github.com/hcharley\"><code>@​hcharley</code></a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/npm/node-semver/blob/main/CHANGELOG.md\">semver's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.5.1...v7.5.2\">7.5.2</a> (2023-06-15)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/58c791f40ba8cf4be35a5ca6644353ecd6249edc\"><code>58c791f</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/566\">#566</a> diff when detecting major change from prerelease (<a href=\"https://redirect.github.com/npm/node-semver/issues/566\">#566</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/5c8efbcb3c6c125af10746d054faff13e8c33fbd\"><code>5c8efbc</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/565\">#565</a> preserve build in raw after inc (<a href=\"https://redirect.github.com/npm/node-semver/issues/565\">#565</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441\"><code>717534e</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/564\">#564</a> better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/564\">#564</a>) (<a href=\"https://github.com/lukekarrys\"><code>@​lukekarrys</code></a>)</li>\n</ul>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.5.0...v7.5.1\">7.5.1</a> (2023-05-12)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/d30d25a5c1fb963c3cc9178cb1769fe45e4a3cab\"><code>d30d25a</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/559\">#559</a> show type on invalid semver error (<a href=\"https://redirect.github.com/npm/node-semver/issues/559\">#559</a>) (<a href=\"https://github.com/tjenkinson\"><code>@​tjenkinson</code></a>)</li>\n</ul>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.4.0...v7.5.0\">7.5.0</a> (2023-04-17)</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/503a4e52fe2b1c6ed1400d33149f7733c8361eed\"><code>503a4e5</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/548\">#548</a> allow identifierBase to be false (<a href=\"https://redirect.github.com/npm/node-semver/issues/548\">#548</a>) (<a href=\"https://github.com/lsvalina\"><code>@​lsvalina</code></a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/e219bb454036a0c23e34407591f921c8edb688e7\"><code>e219bb4</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/552\">#552</a> throw on bad version with correct error message (<a href=\"https://redirect.github.com/npm/node-semver/issues/552\">#552</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/fc2f3df0b5d25253b3580607e111a9a280d888ca\"><code>fc2f3df</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/546\">#546</a> incorrect results from diff sometimes with prerelease versions (<a href=\"https://redirect.github.com/npm/node-semver/issues/546\">#546</a>) (<a href=\"https://github.com/tjenkinson\"><code>@​tjenkinson</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/27817677794f592b592bf6181a80a4824ff762b2\"><code>2781767</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/547\">#547</a> avoid re-instantiating SemVer during diff compare (<a href=\"https://redirect.github.com/npm/node-semver/issues/547\">#547</a>) (<a href=\"https://github.com/macno\"><code>@​macno</code></a>)</li>\n</ul>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.3.8...v7.4.0\">7.4.0</a> (2023-04-10)</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/113f51312a1a6b6aa50d4f9486b4fde21782c1f5\"><code>113f513</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/532\">#532</a> identifierBase parameter for .inc (<a href=\"https://redirect.github.com/npm/node-semver/issues/532\">#532</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>, <a href=\"https://github.com/b-bly\"><code>@​b-bly</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/48d8f8fa63bf6e35db70ff840b6da1a51596a5a8\"><code>48d8f8f</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/530\">#530</a> export new RELEASE_TYPES constant (<a href=\"https://github.com/hcharley\"><code>@​hcharley</code></a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/940723d22bca824993627c45ac30dd3d2854b8cd\"><code>940723d</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/538\">#538</a> intersects with v0.0.0 and v0.0.0-0 (<a href=\"https://redirect.github.com/npm/node-semver/issues/538\">#538</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/aa516b50b32f5a144017d8fc1b9efe0540963c91\"><code>aa516b5</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/535\">#535</a> faster parse options (<a href=\"https://redirect.github.com/npm/node-semver/issues/535\">#535</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/61e6ea1e9b7af01baf19ab0c0a63c8e3ebfac97c\"><code>61e6ea1</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/536\">#536</a> faster cache key factory for range (<a href=\"https://redirect.github.com/npm/node-semver/issues/536\">#536</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/f8b8b619e71746a47852a9d301f3087ab311444f\"><code>f8b8b61</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/541\">#541</a> optimistic parse (<a href=\"https://redirect.github.com/npm/node-semver/issues/541\">#541</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/796cbe29b06d102e1b16f3ed78eaba210ece951e\"><code>796cbe2</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/533\">#533</a> semver.diff prerelease to release recognition (<a href=\"https://redirect.github.com/npm/node-semver/issues/533\">#533</a>) (<a href=\"https://github.com/wraithgar\"><code>@​wraithgar</code></a>, <a href=\"https://github.com/dominique-blockchain\"><code>@​dominique-blockchain</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/3f222b144033525ca9f8a2ce5bc6e02f0401881f\"><code>3f222b1</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/537\">#537</a> reuse comparators on subset (<a href=\"https://redirect.github.com/npm/node-semver/issues/537\">#537</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/f66cc45c6e82eebb4b5b51af73e7b8dcaeda7e21\"><code>f66cc45</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/539\">#539</a> faster diff (<a href=\"https://redirect.github.com/npm/node-semver/issues/539\">#539</a>) (<a href=\"https://github.com/H4ad\"><code>@​H4ad</code></a>)</li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/c5d29df6f75741fea27fffe3b88c9c3b28e3ca73\"><code>c5d29df</code></a> <a href=\"https://redirect.github.com/npm/node-semver/pull/530\">#530</a> Add &quot;Constants&quot; section to README (<a href=\"https://github.com/hcharley\"><code>@​hcharley</code></a>)</li>\n</ul>\n<h2><a href=\"https://github.com/npm/node-semver/compare/v7.3.7...v7.3.8\">7.3.8</a> (2022-10-04)</h2>\n<h3>Bug Fixes</h3>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/npm/node-semver/commit/e7b78de06eb14a7fa2075cedf9f167040d8d31af\"><code>e7b78de</code></a> chore: release 7.5.2</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/58c791f40ba8cf4be35a5ca6644353ecd6249edc\"><code>58c791f</code></a> fix: diff when detecting major change from prerelease (<a href=\"https://redirect.github.com/npm/node-semver/issues/566\">#566</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/5c8efbcb3c6c125af10746d054faff13e8c33fbd\"><code>5c8efbc</code></a> fix: preserve build in raw after inc (<a href=\"https://redirect.github.com/npm/node-semver/issues/565\">#565</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441\"><code>717534e</code></a> fix: better handling of whitespace (<a href=\"https://redirect.github.com/npm/node-semver/issues/564\">#564</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/2f738e9a70d9b9468b7b69e9ed3e12418725c650\"><code>2f738e9</code></a> chore: bump <code>@​npmcli/template-oss</code> from 4.14.1 to 4.15.1 (<a href=\"https://redirect.github.com/npm/node-semver/issues/558\">#558</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/aa016a67162c195938f7873ea29a73dac47ff9ba\"><code>aa016a6</code></a> chore: release 7.5.1</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/d30d25a5c1fb963c3cc9178cb1769fe45e4a3cab\"><code>d30d25a</code></a> fix: show type on invalid semver error (<a href=\"https://redirect.github.com/npm/node-semver/issues/559\">#559</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/09c69e23cdf6c69c51f83635482fff89ab2574e3\"><code>09c69e2</code></a> chore: bump <code>@​npmcli/template-oss</code> from 4.13.0 to 4.14.1 (<a href=\"https://redirect.github.com/npm/node-semver/issues/555\">#555</a>)</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/5b02ad7163a3ddcbcadf499e4f6195d6f2226dce\"><code>5b02ad7</code></a> chore: release 7.5.0</li>\n<li><a href=\"https://github.com/npm/node-semver/commit/e219bb454036a0c23e34407591f921c8edb688e7\"><code>e219bb4</code></a> fix: throw on bad version with correct error message (<a href=\"https://redirect.github.com/npm/node-semver/issues/552\">#552</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/npm/node-semver/compare/v7.3.7...v7.5.2\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~npm-cli-ops\">npm-cli-ops</a>, a new releaser for semver since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=7.3.7&new-version=7.5.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/facebook/react/network/alerts).\n\n</details>\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","state":"open","updated_at":"2023-07-24T15:50:04Z","created_at":"2023-06-23T10:16:51Z","creator_user_login":"dependabot[bot]"}
{"number":26994,"title":"ESLINT-Exhaustive-Deps-Rules","body":"Changes regarding eslint exhaustive deps rules\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-23T03:39:10Z","created_at":"2023-06-23T03:38:38Z","creator_user_login":"Shashank245"}
{"number":26992,"title":"[Fizz] Allow passing a reason to `abortStream`","body":"## Summary\r\n\r\nCurrently `ReactFizzServer.abort` allows you to pass in the a `reason` error, which then gets passed to the `onError` handler for each task that ends up getting aborted. This adds in the ability to pass down that same `reason` error to `ReactDOMServerFB.abortStream` as well.\r\n\r\n## How did you test this change?\r\n\r\nAdded a test case to ReactDOMServerFB-test.internal.js\r\n","state":"open","updated_at":"2023-06-26T17:05:14Z","created_at":"2023-06-22T17:14:46Z","creator_user_login":"KarimP"}
{"number":26991,"title":"Provide a method to create synthetic events","body":"## Context\r\n\r\nTrying to implement a generic Combobox following the [W3C pattern](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/#rps_label) without bleeding the implementation details outside the component (trying to make so you can interact with it as you would a native component).\r\nWhen the user selects a value either by clicking an option or pressing `Enter`, the value of the input changes and we would like to trigger a change event.\r\n\r\n## Observation\r\n\r\nWith vanilla JavaScript, triggering an event in those situations is quite simple: \r\n```js\r\nfunction onClick(event) {\r\n  setValue(event.currentTarget.textContent)\r\n  const event = new Event('change')\r\n  input.dispatchEvent(event)\r\n}\r\n```\r\nThe equivalent in React would be something like:\r\n```js\r\nfunction onClick(event) {\r\n  setValue(event.currentTarget.textContent)\r\n  const event = // ???\r\n  if (props.onChange) props.onChange(event);\r\n}\r\n```\r\nBut onChange on native HTML elements would be called with a SyntheticEvent which contains more than regular JS events.\r\nIt is not even possible to create objects to match the SyntheticEvent interface since the values for `target` and `currentTarget` (and probably `relatedTarget` too) are readonly but only set on event dispatch: \r\n```ts\r\nexport class ChangeEvent<T = Element> extends Event implements React.ChangeEvent<T> {\r\n\tnativeEvent: Event;\r\n\tprivate propagationStopped = false;\r\n        // TS2564: Property 'target' has no initializer and is not definitely assigned in the constructor\r\n\treadonly target: SyntheticChangeEvent<T>['target'];\r\n        // TS2564: Property 'currentTarget' has no initializer and is not definitely assigned in the constructor\r\n\treadonly currentTarget: SyntheticChangeEvent<T>['currentTarget'];\r\n\r\n\tconstructor(\r\n\t\ttarget: SyntheticChangeEvent<T>['target'],\r\n\t\t/* global EventInit */\r\n\t\toptions?: EventInit,\r\n\t) {\r\n\t\tsuper('change', options);\r\n\t\tthis.nativeEvent = this;\r\n\t\ttarget.dispatchEvent(this);\r\n\t}\r\n\r\n\tisDefaultPrevented(): boolean {\r\n\t\treturn this.defaultPrevented;\r\n\t}\r\n\r\n\tstopPropagation() {\r\n\t\tsuper.stopPropagation();\r\n\t\tthis.propagationStopped = true;\r\n\t}\r\n\tisPropagationStopped(): boolean {\r\n\t\treturn this.propagationStopped;\r\n\t}\r\n\r\n\tpersist(): void {\r\n\t\treturn;\r\n\t}\r\n}\r\n```\r\n\r\n## Suggestion\r\n\r\nExpose a way to create synthetic events.\r\nThese events are [created in React source code](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/events/SyntheticEvent.js), maybe there is a way to export those functions ? Or maybe a cleaner way would be to convert concrete SyntheticEvents from types to classes to provide constructors ?","state":"open","updated_at":"2023-06-27T10:00:03Z","created_at":"2023-06-22T07:57:52Z","creator_user_login":"Mintoo200"}
{"number":26986,"title":"Create New Apps2023","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-21T19:50:58Z","created_at":"2023-06-21T19:45:44Z","creator_user_login":"Basebuild17"}
{"number":26984,"title":"Fixes privacy measures issue in Chrome 101+","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n#### Motivation:\r\n\r\nThe changes proposed in this pull request are designed to address upcoming changes in the Chrome browser. Starting with Chrome 101, the use of navigator.userAgent, navigator.appVersion, and navigator.platform are being discouraged and are subject to future deprecation. These properties are currently used in our codebase to determine the user's browser type and theme.\r\n\r\nThe pull request aims to modernize the codebase and keep it up-to-date with recent browser practices, ensuring its compatibility with newer versions of Chrome while maintaining its functionality in other major browsers.\r\n\r\n#### Problem solved:\r\n\r\nThe pull request solves the problem of potential incompatibility and reduced functionality in future Chrome versions due to the aforementioned deprecation. If we continued using these properties, from Chrome 101 onward, our code could fail to accurately detect the user's browser type and theme.\r\n\r\nThis code checks the user agent string of the user's browser to determine whether they're using Chrome, Firefox, or Edge. It uses navigator.userAgent and searches for the presence of 'Edge', 'Firefox', 'Chrome'.\r\n\r\nThe getBrowserName function returns the browser name based on the checks made earlier, and getBrowserTheme returns whether the user has chosen a dark or light theme in their browser dev tools.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n#### Testing Steps:\r\n\r\n#### Automated Unit Testing: \r\nAutomated tests were added to verify the function getBrowserName returns the correct browser name for different user agent data. Mocking was used to simulate different browsers' user agent data. This way, we can automatically and repeatedly test our code against many different scenarios.\r\n\r\n#### Manual Testing:\r\n The application was manually tested on different browsers including Chrome, Firefox, and Edge. This manual testing is important to ensure that the function behaves as expected in real-world scenarios. I verified that the function correctly identified the browser name and theme in each case.\r\n\r\n#### Browser Version Testing: \r\nTesting was conducted on different versions of Chrome, specifically versions below 101 and versions 101 and above. For Chrome versions 101 and above, navigator.userAgentData was available and was used correctly to identify the browser type. For versions below 101, I ensured the application behaves as expected and doesn't throw any errors related to navigator.userAgentData not being available.\r\n\r\n#### Testing Theme Detection: \r\n For each browser, both the 'light' and 'dark' themes were tested to ensure the function getBrowserTheme returned the correct theme.\r\n\r\n#### Verifying the solution:\r\n\r\nThe output from the getBrowserName and getBrowserTheme functions was compared against the expected values for each scenario. This allowed us to verify that the PR solves the issue it set out to address, i.e., correctly identifying the browser type and theme in light of the upcoming deprecation in Chrome 101.\r\n\r\n![Screenshot 2023-06-20 at 21 47 59](https://github.com/facebook/react/assets/62898968/adbbd934-791b-4a05-952c-338c49b90db9)\r\n","state":"open","updated_at":"2023-06-23T16:10:36Z","created_at":"2023-06-20T20:57:30Z","creator_user_login":"joshuagornall"}
{"number":26982,"title":"Let's See This Project  about  GodJobForReact-Vercel","body":"","state":"open","updated_at":"2023-07-11T04:44:53Z","created_at":"2023-06-20T13:32:43Z","creator_user_login":"mk87yhhuji"}
{"number":26981,"title":"[eslint-plugin-react-hooks] (react-hooks/exhaustive-deps) allow configuring a prop to throw errors with unnecessary dependencies in useEffects","body":"**Do you want to request a feature or report a bug?**\r\n\r\nFeature/enhancement\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently the eslint plugin doesn't throw an error when you have unnecessary dependencies in the useEffect's dependencies array because this could be a legit case but in general these dependencies are unnecessary and could cause errors.\r\n\r\nExample:\r\n```typescript\r\nReact.useEffect(() => {\r\n    if(legitDependency) {\r\n         // some api call that in the past used nonLegitDependecy but in a refactor this was removed\r\n    }\r\n}, [legitDependency, nonLegitDependency]) // exhaustive-deps doesn't warn for nonLegitDependency in a useEffect\r\n````\r\n**What is the expected behavior?**\r\n\r\nIt'd be great if we could configure \"eslint-plugin-react-hooks\" rule to warn in these cases, because I think in the most of cases we don't want this effect runs for these unnecessary dependencies and they are there because a mistake.\r\n\r\n```typescript\r\nReact.useEffect(() => {\r\n    if(legitDependency) {\r\n         // some api call that in the past used nonLegitDependecy but in a refactor this was removed\r\n    }\r\n}, [legitDependency, nonLegitDependency]) // eslint warn/error  React Hook React.useEffect has an unnecessary dependency: 'nonLegitDependency'. Either exclude it or remove the dependency array \r\n````\r\nI've created this rule based on the exhaustive-deps code and I've found a lot hints with this. So I think it'd great and very useful for others projects to take advantage of this, if this was included in the \"react-hooks/exhaustive-deps\" rule.\r\n\r\nAs for how/where to configure it, we could add something like this to our .eslintrc:\r\n\r\n```\r\n'react-hooks/exhaustive-deps': [\r\n    'error',\r\n    {\r\n        warnWithNonLegitDependencies: true,\r\n    },\r\n],\r\n```\r\n\r\nAnd then we could mark legit dependecies in this way:\r\n\r\n```typescript\r\nReact.useEffect(() => {\r\n    if(legitDependency) {\r\n         // some api call that in the past used nonLegitDependecy but in a refactor this was removed\r\n    }\r\n}, [legitDependency, /* legit-dependency */ nonLegitDependency]) // No eslint errors\r\n````\r\n\r\nFor this new behaviour, we only have to change [this condition](https://github.com/facebook/react/blob/d1c8cdae3b20a670ee91b684e8e0ad0c400ae51c/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1445 ) to save all unnecessary dependencies in a useEffect and create an extra check to omit dependencies with \"legit-dependency\" comment before them. I could create a PR for this, if you like.\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-06-26T07:33:32Z","created_at":"2023-06-20T12:16:56Z","creator_user_login":"andyindahouse"}
{"number":26980,"title":"Bug: [Firefox] Removing an element with contentEditable=\"true\" within an iframe and an RTL selection causes an exception","body":"selecting from right to left inside an element that is inside an iframe and the iframe is removed it cause an exception\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\ncomponent:\r\n```\r\nconst ElementWithTheException = () => {\r\n  const [ show, setShow ] = useState(true);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setShow(false);\r\n    }, 5000);\r\n  });\r\n\r\n  return <div>\r\n    {show ? <iframe src=\"about:blank\" srcDoc='<html><body contentEditable=\"true\">lorem ipsum</body></html>'></iframe> : <p>abc</p>}\r\n  </div>;\r\n};\r\n```\r\n\r\n1. in Firefox\r\n2. select from right to left `lorem ipsum` (or part of it)\r\n3. wait 5 seconds\r\n4. look at the console\r\n\r\nLink to code example:\r\n\r\n1. open https://codesandbox.io/s/inspiring-volhard-lctcsx in Firefox\r\n2. select from right to left `lorem ispum` or part of it\r\n3. wait\r\n\r\n## The current behavior\r\nit raise an exception\r\n\r\n## The expected behavior\r\nit should not raise an exception\r\n\r\n\r\nNOTE: I did some debug:\r\n\r\n- The exception is thrown by this [selection.extend](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactDOMSelection.js#L196) in `setOffsets`.\r\n- Which is called by [setSelection](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactInputSelection.js#L192) because in this case, the body does not have `selectionStart`\r\n- Which is called by [restoreSelection](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactInputSelection.js#L124) and this is because [isInDocument](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactInputSelection.js#L119) refers to the document of the element so, in this case, the document itself is contained in the element that is removed","state":"open","updated_at":"2023-06-20T09:52:13Z","created_at":"2023-06-20T09:52:13Z","creator_user_login":"lorenzo-pomili"}
{"number":26979,"title":"Bug: react-dom.development.js:16572 Uncaught Error: Should have a queue. This is likely a bug in React. Please file an issue.","body":"<img width=\"1482\" alt=\"image\" src=\"https://github.com/facebook/react/assets/124666577/505bfa24-3566-479a-ae86-c2e83f709ed3\">\r\n<img width=\"1504\" alt=\"image\" src=\"https://github.com/facebook/react/assets/124666577/0fb0a836-798f-42dc-af58-904ab9cd1e36\">\r\n","state":"open","updated_at":"2023-06-20T07:24:28Z","created_at":"2023-06-20T07:24:28Z","creator_user_login":"vaynevayne"}
{"number":26975,"title":"Temp","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-19T12:56:41Z","created_at":"2023-06-19T12:51:49Z","creator_user_login":"KiranC24"}
{"number":26974,"title":"Bug: form data is lost upon hydration","body":"Related:\r\n- https://github.com/facebook/react/issues/12955\r\n- https://github.com/mui/material-ui/issues/34174\r\n- https://stackoverflow.com/questions/73567117/how-to-deal-with-text-input-changes-in-ssr-text-box-before-hydration-is-complete\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example: https://github.com/OliverJAsh/react-controlled-form-hydration-issue\r\n\r\nGiven this component which is used during SSR and then hydrated on the client-side:\r\n\r\n```tsx\r\nimport * as React from 'react';\r\n\r\nexport const App = () => {\r\n  const [value, setValue] = React.useState('');\r\n\r\n  const [, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    console.log('mount');\r\n\r\n    setCount(1);\r\n  }, []);\r\n\r\n  return (\r\n    <form>\r\n      <div>Value: {value}</div>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.currentTarget.value)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\n```\r\n\r\n1. Before hydration, enter text into the input.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nAfter hydration, the input's value is set back to the initial state. The text entered by the user prior to hydration is lost.\r\n\r\nhttps://github.com/facebook/react/assets/921609/2a9d5c38-338b-4caa-9a3e-fe8a68f5fe44\r\n\r\n## The expected behavior\r\n\r\nThe text entered by the user prior to hydration should be preserved.","state":"open","updated_at":"2023-07-01T08:08:12Z","created_at":"2023-06-19T11:40:03Z","creator_user_login":"OliverJAsh"}
{"number":26972,"title":"Bug: useState cut out to Component in iOS behaves strangely.","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to https://h7t7zp-3000.csb.app/using iOS.\r\n2. Please open the console.\r\n3. Touch using branched components and using vanilla for iOS.\r\n4. The component that uses branched components will be shown to us 1 as the first touch, and 1 and 0 as the second touch.\r\n5. Using vanilla for ios will be shown to us 1 and 0. This is right working.\r\n\r\nThis is CodeSandBox's link: https://codesandbox.io/s/cranky-cohen-ljyyy6\r\n\r\nLink to code example: https://github.com/My-MC/reporting_bug_on_ios/blob/8555aeaec113cbd66b4e5732bc6bca8c4ab28487/src/App.js\r\n\r\n## The current behavior\r\nShow us 1 as the first touch, and 1 and 0 as the second touch.\r\n\r\n## The expected behavior\r\nShow us 1 and 0. This is right working.","state":"open","updated_at":"2023-06-24T00:29:47Z","created_at":"2023-06-18T13:32:16Z","creator_user_login":"My-MC"}
{"number":26971,"title":"Function type changed. gs changed to globStream ","body":"\r\n## Summary\r\n\r\nAs we have normal function. I have changed that to arrow function.\r\nthe name `gs` changed to `globStream`\r\n\r\n\r\n\r\n## How did you test this change?\r\n\r\nlocally by running `yarn test` and it was successful.","state":"open","updated_at":"2023-06-20T17:21:40Z","created_at":"2023-06-18T13:24:19Z","creator_user_login":"amn-0"}
{"number":26970,"title":"remote assign.js","body":"just export Object.assign is so wired\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-18T13:29:45Z","created_at":"2023-06-18T12:07:04Z","creator_user_login":"shengxinjing"}
{"number":26969,"title":"[Docs]: Update Links and Improve React README.md","body":"## Summary\r\n\r\nThe current React documentation hasn't been updated for quite a while, especially the documentation links. This PR addresses these issues:\r\n\r\n* The old links are changed to the appropriate new links\r\n* Updating the guide for installation with newer docs.\r\n* Fixing minor formatting as well as changing some blocks of text to the appropriate sections.\r\n\r\n## How did you test this change?\r\n\r\nI have changed all the old links to the new official website and documentation. All have been linked correctly so that when users click on the links, they are redirected directly to the latest official website instead of the old one. Plus, for those who wanted to access the old documentation, the link to the old docs is linked in the Documentation section of the README.\r\n","state":"open","updated_at":"2023-06-18T13:06:31Z","created_at":"2023-06-18T11:55:03Z","creator_user_login":"khairalanam"}
{"number":26968,"title":"replace Array.isArray with isArray as module","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nAs we have `isArray` as module `shared/isArray` I have replaced `Array.isArray` with that.\r\n\r\n## How did you test this change?\r\n\r\nLocally by `yarn test` and it was successfully \r\n","state":"open","updated_at":"2023-06-29T02:04:24Z","created_at":"2023-06-18T06:01:51Z","creator_user_login":"behnammodi"}
{"number":26967,"title":"Bug: StrictMode not work for `reactive` data trigger a update","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. open link https://codesandbox.io/p/sandbox/little-https-lq8yzt.\r\n\r\n2. click the `<Select>` component and change the value.\r\n\r\n3. component will never update.\r\n\r\n4. go to the `next.config` file, and turn off the `StrictMode`.\r\n\r\n5. click the component and the UI will update.\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/p/sandbox/little-https-lq8yzt](https://codesandbox.io/p/sandbox/little-https-lq8yzt)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nin the StrictMode, the component will not update by a reactive data trigger\r\n\r\n## The expected behavior\r\n\r\nshould work as expect","state":"open","updated_at":"2023-06-18T05:04:21Z","created_at":"2023-06-18T05:01:34Z","creator_user_login":"MrWangJustToDo"}
{"number":26966,"title":" Improve Performance by Utilizing Promise.all for Parallel Function Execution ✈️","body":"I noticed that by leveraging the power of `Promise.all`, we can enhance the performance of our application by executing certain functions in parallel. This pull request aims to implement this optimization technique, which will lead to improved efficiency and reduced execution time.\r\n\r\n**Changes Made:**\r\n- Introduced the usage of `Promise.all` to execute multiple functions concurrently.\r\n- Modified the code to handle promises and utilize the results efficiently.\r\n\r\n**Benefits:**\r\n- Enhanced performance: By executing functions in parallel, we can utilize the available system resources more efficiently and reduce overall execution time.\r\n- Improved responsiveness: By minimizing the blocking nature of sequential function calls, the application becomes more responsive and can handle concurrent user requests effectively.\r\n- Scalability: This approach enables us to easily scale our application to handle higher workloads without sacrificing performance.\r\n- Simplified code structure: With the help of `Promise.all`, we can manage asynchronous operations in a more streamlined and readable manner, leading to a cleaner codebase.\r\n\r\n\r\nPlease let me know if there's anything else you would like to include or modify in the pull request.","state":"open","updated_at":"2023-07-02T19:09:59Z","created_at":"2023-06-17T15:48:09Z","creator_user_login":"sanjaiyan-dev"}
{"number":26964,"title":"Nesting todo","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nI solved the issue from React.js by moving this branching into the other module instead and just re-export.\r\n\r\n<img width=\"959\" alt=\"Screenshot 2023-06-16 144659\" src=\"https://github.com/facebook/react/assets/77508734/23b46ec0-b908-498a-beff-1958d8677bc1\">\r\n\r\n","state":"open","updated_at":"2023-06-16T23:06:13Z","created_at":"2023-06-16T21:47:26Z","creator_user_login":"koyuncuoglum95"}
{"number":26962,"title":"Bug: uSES with synchronous updating a component causes a warning","body":"React version: 18.2.0\r\n\r\nThe case:\r\n\r\n- We have a global state (e.g. Redux) and are using `useSyncExternalStore` to subscribe a React component to the state.\r\n- We want to synchronously re-render the component by dispatching an update to the state, for example, when [a prop changes](https://react.dev/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes).\r\n\r\nIn this case, React logs a warning when we update the store:\r\n\r\n```\r\nWarning: Cannot update a component (`GlobalState`) while rendering a different component (`GlobalState`). \r\nTo locate the bad setState() call inside `GlobalState`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render\r\n```\r\n\r\nHere is a simplified example to better illustrate the case:\r\n\r\n```tsx\r\nfunction App(props) {\r\n  const state = useSyncExternalStore(store.subscribe, store.getState);\r\n\r\n  if (isUpdateNeeded(props)) {\r\n    // re-render the component with the updated state\r\n    store.dispatch(update());\r\n  }\r\n}\r\n```\r\n\r\n**Strange Behavior 1:**\r\n\r\nActually, if there are only two sequential renders (one re-render), there is no warning:\r\n\r\n```tsx\r\nfunction App(props) {\r\n  const state = useSyncExternalStore(store.subscribe, store.getState);\r\n\r\n  if (isUpdateNeeded(props)) {\r\n    // no warning\r\n    store.dispatch(firstUpdate());\r\n  }\r\n}\r\n```\r\n\r\nHowever, if we have three or more sequential renders, React logs a warning:\r\n\r\n```tsx\r\nfunction App(props) {\r\n  const state = useSyncExternalStore(store.subscribe, store.getState);\r\n\r\n  if (isFirstUpdateNeeded(props)) {\r\n    // no warning\r\n    store.dispatch(update());\r\n  }\r\n\r\n  if (isSecondUpdateNeeded(props)) {\r\n    // react logs a warning\r\n    store.dispatch(update());\r\n  }\r\n}\r\n```\r\n\r\nI know the simplified example looks strange (why do we need to re-render multiple times, right?). But the second update might be necessary when the first update triggers additional logic. In our real-world case, the first update occurs due to user interaction, and the second update occurs because a conditional react-query hook sets `isLoading` to the store.\r\n\r\n**Strange behavior 2:**\r\n\r\nIt is possible to fix the issue by adding local state and updating both global and local state simultaneously.\r\n\r\n```tsx\r\nfunction App(props) {\r\n  const state = useSyncExternalStore(store.subscribe, store.getState);\r\n  const [_, rerender] = useReducer(() => ({}), {});\r\n\r\n  if (isFirstUpdateNeeded(props)) {\r\n    rerender();\r\n\r\n    // no warning\r\n    store.dispatch(update());\r\n  }\r\n\r\n  if (isSecondUpdateNeeded(props)) {\r\n    rerender();\r\n\r\n    // no warning this time!\r\n    store.dispatch(update());\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the codesandbox example: https://jlgcck-5173.csb.app/\r\n2. Open the browser console\r\n3. The warning is there\r\n\r\n<!--\r\nYour bug will get fixed much faster if we can run your code and it doesn't\r\nhave dependencies other than React. Issues without reproduction steps or\r\ncode examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/react-uses-sync-update-jlgcck?file=/src/App.tsx\r\n\r\n<!--\r\nPlease provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\nrepository on GitHub, or provide a minimal code example that reproduces the\r\nproblem. You may provide a screenshot of the application if you think it is\r\nrelevant to your bug report. Here are some tips for providing a minimal\r\nexample: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReact logs a warning, but everything else seems to work correctly.\r\nThe warning message that states \"the bad setState() call\" is a little confusing since there is no setState call in a component.\r\n\r\n## The expected behavior\r\n\r\nReact does not produce a warning.","state":"open","updated_at":"2023-07-29T14:28:48Z","created_at":"2023-06-16T14:36:50Z","creator_user_login":"Nodge"}
{"number":26959,"title":"Legacy jsx fixed","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe problem was \r\n\r\n```\r\n$ BABEL_ENV=development NODE_ENV=development jest --env=jsdom\r\n'BABEL_ENV' is not recognized as an internal or external command,\r\noperable program or batch file.\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\nerror Command failed with exit code 1.\r\n```  \r\n\r\nand I fixed it by adding these ones to package.json file.\r\n\r\n\r\n`yarn add --dev cross-env`\r\n\r\n```\r\n\"scripts\": {\r\n  \"install-all\": \"cd react-14 && yarn && cd ../react-15 && yarn && cd ../react-16 && yarn && cd ../react-17 && yarn && cd ..\",\r\n  \"lint\": \"node lint-runtimes.js\",\r\n  \"pretest\": \"yarn install-all && yarn lint\",\r\n  \"test-jsxdev-dev\": \"cross-env BABEL_ENV=development NODE_ENV=development jest --env=jsdom\",\r\n  \"test-jsx-dev\": \"cross-env BABEL_ENV=production NODE_ENV=development jest --env=jsdom\",\r\n  \"test-jsx-prod\": \"cross-env BABEL_ENV=production NODE_ENV=production jest --env=jsdom\",\r\n  \"test\": \"yarn test-jsxdev-dev && yarn test-jsx-dev && yarn test-jsx-prod\"\r\n}\r\n```\r\n\r\nWhen I tested, everything was running well and all test passed. This is the result.\r\n<img width=\"1280\" alt=\"legacy-jsx-runtimes\" src=\"https://github.com/facebook/react/assets/77508734/604896ca-e7b1-4ee7-b778-669a71fee1bf\">\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-06-15T23:05:44Z","created_at":"2023-06-15T23:05:39Z","creator_user_login":"koyuncuoglum95"}
{"number":26957,"title":"[eslint-plugin-react-hooks] fix handling of local type aliases","body":"The added test case is okay as the binding refers to a local type alias, not a value.\r\n","state":"open","updated_at":"2023-06-29T14:01:19Z","created_at":"2023-06-15T20:54:59Z","creator_user_login":"kassens"}
{"number":26956,"title":"Bug: Internal React error: Expected static flag was missing. Please notify the React team","body":"i have a web app and after i deployed it on my host i tried to add a new pack (thats something like a regular folder which can contain notes and other data which people can also create inside my app). after submitting that pack i faced this issue and don't have any idea about what is actually causing it.","state":"open","updated_at":"2023-06-15T13:42:01Z","created_at":"2023-06-15T13:28:46Z","creator_user_login":"hamedpro"}
{"number":26952,"title":"Small grammar fix in comments","body":"## Summary\r\n\r\nA small grammar fix that had confused me while reading through the code & comments.\r\n\r\n## How did you test this change?\r\n\r\nAs these changes only affect the comments - no testing is required.\r\n","state":"open","updated_at":"2023-06-14T21:06:52Z","created_at":"2023-06-14T20:10:33Z","creator_user_login":"benhall847"}
{"number":26950,"title":"Update README.md","body":"Updated the documentation with minor changes to the README.md file\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nI'm starting open source and I think starting via improving documentation is a good way to go ahead.\r\nHence, I've suggested some changes which I'd really appreciate if they're merged. \r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nSince this is a change concerning the README file, hence I don't need to test this change.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-28T13:48:00Z","created_at":"2023-06-14T15:56:56Z","creator_user_login":"JAYKALIA007"}
{"number":26948,"title":"Bug: useContext not updating render when a getter is used as context","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nuseContext() does not update components when context object is a getter, \r\n\r\nReact version: \"18.2.0\"\r\n\r\n## Steps To Reproduce\r\n\r\n```typescript\r\n\r\nimport { CounterRepository } from \"./CounterRepository\";\r\nimport Constants from 'expo-constants';\r\n\r\n// Defined as abstract class instead of interface to allow for static methods\r\nexport abstract class ICounterRepository {\r\n\r\n    private static _instance: ICounterRepository;\r\n    static get instance(): ICounterRepository {\r\n        if (!this._instance) {\r\n            switch (Constants.expoConfig?.extra?.env) {\r\n                case 'main':\r\n                    this._instance = new CounterRepository();\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error(`Unimplemented environment: ${Constants.expoConfig?.extra?.env}`);\r\n            }\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    abstract get count(): number;\r\n\r\n    abstract increment(): void;\r\n}\r\n```\r\n\r\n```typescript\r\nimport { ICounterRepository } from \"./ICounterRepository\";\r\n\r\nexport class CounterRepository implements ICounterRepository{  \r\n    private _count: number = 0;\r\n\r\n    get count(): number {\r\n        return this._count;\r\n    }\r\n\r\n    increment(): void {\r\n        this._count++;\r\n        console.log(`Count is now ${this._count}`)\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n```typescript\r\nimport { createContext } from 'react';\r\nimport { ICounterRepository } from '../../data/counter/ICounterRepository';\r\n\r\ntype HomePageViewModelType = {\r\n    count: number;\r\n    increment: () => void;\r\n}\r\n\r\nexport const HomePageViewModel = createContext<HomePageViewModelType>({\r\n    // view is not updating with count even though the repository count value is increased\r\n    // maybe because context does not detect the changes from a getter?\r\n    count: ICounterRepository.instance.count, \r\n    increment: () => ICounterRepository.instance.increment(),\r\n});\r\n```\r\n\r\n\r\n```typescript\r\nimport { useContext } from \"react\";\r\nimport { HomePageViewModel } from \"./HomePageViewModel\";\r\n\r\nimport {  Button, Text, View } from 'react-native';\r\n\r\n\r\n\r\nexport default function HomePage() {\r\n    const viewModel = useContext(HomePageViewModel);\r\n\r\n    return (\r\n        <View>\r\n            {/* viewModel.count is not updating even though it is changing in the repository */}\r\n            <Text>{viewModel.count}</Text>\r\n            <Button title=\"Increment\" onPress={viewModel.increment} />\r\n        </View>\r\n    );\r\n}\r\n```\r\n\r\n\r\n\r\n[Link to code example:](https://github.com/juskek/app_architecture/tree/main/react-native-android-architecture)\r\n\r\n\r\n## The current behavior\r\nICounterRepository.instance.increment() increases _count in CounterRepository, but, Text in viewModel.count remains at zero\r\n\r\n## The expected behavior\r\nviewModel.count text should update","state":"open","updated_at":"2023-06-16T15:13:52Z","created_at":"2023-06-14T13:12:03Z","creator_user_login":"juskek"}
{"number":26946,"title":"Bug: SSR: \"Text content did not match\" for inline CSS in style element","body":"When using Server Side Rendering for the complete document (as suggested [in the docs](https://react.dev/reference/react-dom/server/renderToPipeableStream#usage)), and having inline css that contains quotes (`\"`, `'`) in a style element:\r\n\r\n```\r\nfunction App() {\r\n  return <html>\r\n    <head>\r\n      <style>body { font-family: \"Comic Sans\"; }</style>\r\n    </head>\r\n  </html>;\r\n}\r\n```\r\n\r\nThe quotes are encoded by `react-dom/server` as `&quot;`, and client-side hydration chokes:\r\n```\r\nWarning: Text content did not match. Server: \"body { font-family: &quot;Comic Sans&quot;; }\" Client: \"body { font-family: \"Comic Sans\"; }\"\r\n    at style\r\n    at head\r\n    at html\r\n    at App2\r\nprintWarning @ bundle.js:2426\r\n```\r\n\r\nReact version: 18.2.0\r\nReproducing case: https://github.com/EmielM/react-ssr-reconcile-repro\r\n- [App component](https://github.com/EmielM/react-ssr-reconcile-repro/blob/main/App.js)\r\n- [server entry](https://github.com/EmielM/react-ssr-reconcile-repro/blob/main/server.js)\r\n- [client entry](https://github.com/EmielM/react-ssr-reconcile-repro/blob/main/index.js)\r\n\r\nFor completeness, the verbatim HTML output from the server:\r\n```\r\n<!DOCTYPE html><html><head><style>body { font-family: &quot;Comic Sans&quot;; }</style></head><body>Body!</body></html><script src=\"/bundle.js\" async=\"\"></script>\r\n```","state":"open","updated_at":"2023-07-31T10:41:40Z","created_at":"2023-06-14T04:45:10Z","creator_user_login":"EmielM"}
{"number":26943,"title":"fix typo in ReactFiberCommitWork.js comments","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nfix typo in ReactFiberCommitWork.js comments\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-13T23:29:28Z","created_at":"2023-06-13T23:24:39Z","creator_user_login":"doodlesbykumbi"}
{"number":26937,"title":"@l0gicgate","body":"I faced a similar issue. The cause of the error was the \"useLocation()\" hook of react-router-dom. I have moved it to before of the \"return <Navigate to ...\" then it was fixed. \r\n\r\nI don't know what was changed but it worked. If anybody could explain this, I will be glad...\r\n\r\nMy old code is: \r\n\r\n```tsx\r\n\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\n\r\nexport const Navigation = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n\r\n    const location = useLocation(); //  ---> Cause of the error\r\n\r\n    if (Authenticator.isAuthenticated() && window.sessionStorage.getItem('isAuthenticated') === 'true') {\r\n      return <>{children}</>;\r\n    }\r\n\r\n\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  };\r\n\r\n```\r\n\r\nCorrect version is:\r\n\r\n```tsx\r\n\r\nexport const Navigation = ({ children }: React.PropsWithChildren): JSX.Element => {\r\n    if (Authenticator.isAuthenticated() && window.sessionStorage.getItem('isAuthenticated') === 'true') {\r\n      return <>{children}</>;\r\n    }\r\n\r\n    const location = useLocation(); // moved here and fixed\r\n\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  };\r\n\r\n```\r\n              @l0gicgate \r\n\r\n>I think it is imperative that this error message be modified to include exactly which line of code is causing the error.\r\n\r\nThere are limits to what we can do in JavaScript. But **all the information is in the stack you see in the browser**. All you need to do is to skip the lines that are inside React.\r\n\r\nTo see the JavaScript stack, you need to **click on a small arrow next to the error message**.\r\n\r\nFor example, look at this screenshot from earlier:\r\n\r\n![75614021-cb812980-5b12-11ea-8a6e-a38f4cd6aeef](https://user-images.githubusercontent.com/810438/76101765-daf6eb80-5fc6-11ea-964b-5a68de4757e6.png)\r\n\r\nI appreciate it's a bit annoying to dig through the stack, but it shouldn't be that hard to skip the first several frames. The very next frame is the source of the problem. In this case, it seems like something inside the Formik library. So you can file an issue with it.\r\n\r\n_Originally posted by @gaearon in https://github.com/facebook/react/issues/18178#issuecomment-595846312_\r\n\r\n\r\n            ","state":"open","updated_at":"2023-06-15T08:39:47Z","created_at":"2023-06-13T17:21:00Z","creator_user_login":"serkon"}
{"number":26936,"title":"Bug: In useEffect, why the same state as setState will also be re-rendered?","body":"Link to code example:\r\nhttps://codesandbox.io/s/wonderful-williams-99n76k?file=/src/App.js\r\n\r\nReact version: 16.8.3 - 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open codesandbox\r\n2. Reload and profile\r\n3. Click button\r\n![image](https://github.com/facebook/react/assets/68742338/0685f224-514a-436c-ab6b-598bd52768b7)\r\n\r\n## The current behavior\r\nprint `console.log(\"render\", a, b);` twice\r\n\r\n## The expected behavior\r\nprint `console.log(\"render\", a, b);` once\r\n\r\nDebugging found that the two renders were caused by setA and setB respectively, but the state of setB was the same as last time, why did it cause the render?\r\n\r\n![image](https://github.com/facebook/react/assets/68742338/60a3b078-17c1-4c87-b63b-c8dd378f2ba8)\r\nIt seems that fiber.lanes !== 0\r\n\r\ni have two questions:\r\n1. Why is the queue currently empty mean that we can eagerly compute the next state before entering the render phase?\r\n![image](https://github.com/facebook/react/assets/68742338/036d67ab-3102-4a0d-bc3d-89ba8f73fae3)\r\n2. Why in useEffect, fiber.lanes !== 0\r\n\r\n\r\n","state":"open","updated_at":"2023-07-05T09:20:59Z","created_at":"2023-06-13T12:39:03Z","creator_user_login":"sanbinlbw"}
{"number":26930,"title":"Bug: `use` expected a suspended thenable","body":"Made a query client to avoid infinite looping my fetch.\r\n```typescript\r\nfunction makeQueryClient() {\r\n  const fetchMap = new Map<string, Promise<any>>()\r\n  return function queryClient<QueryResult>(\r\n    name: string,\r\n    query: () => Promise<QueryResult>,\r\n  ): Promise<QueryResult> {\r\n    if (!fetchMap.has(name)) {\r\n      fetchMap.set(name, query())\r\n    }\r\n    return fetchMap.get(name)!\r\n  }\r\n}\r\n\r\n\r\nexport const queryClient = makeQueryClient()\r\n```\r\nMade function to return the fetch promise.\r\n\r\n```typescript\r\nasync function fetchData() {\r\n  return fetch(\r\n    `https://cdn.contentful.com/spaces/${CONTENTFUL_SPACE}/environments/master/entries/${CONTENTFUL_ENTRIES.SIGN_IN}?access_token=SECRET`,\r\n  ).then(res=>res.json())\r\n\r\n```\r\nFetch using client, and use type guard function to verify the fields on the object.\r\n```typescript\r\n  const { fields } = use(queryClient<Entry<SignInEntry>>('signIn', fetchData))\r\n  if (!isSignInEntry(fields)) throw new Error('Invalid entry type')\r\n```\r\nResulting error:\r\n```\r\nWarning: `use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.\r\n\r\nUncaught (in promise) TypeError: Cannot read properties of null (reading 'use')\r\n\r\n- error Error: Expected a suspended thenable. This is a bug in React. Please file an issue.\r\n```\r\n\r\nI do not have a try catch block in my code. \r\n\r\n\r\nReact version: 18.2\r\n\r\nPlease close this issue if this is unhelpful, no reply is necessary.\r\n","state":"open","updated_at":"2023-07-25T22:45:34Z","created_at":"2023-06-12T17:36:15Z","creator_user_login":"marcogalvanize"}
{"number":26928,"title":"[DevTools Bug]: Timeline UI isn't being rendered (black screen)","body":"### Website or app\n\nhttps://fxbh5x.csb.app/\n\n### Repro steps\n\nI cannot get the timeline view to render properly on my machine in Chrome. Super weird.\r\n\r\n1. Open codesandbox\r\n2. Reload and profile\r\n3. Click button\r\n\r\n## Chrome\r\n\r\nRenders black area and only highlights Ui elements when I hover over (but nothing ever shows below).\r\n\r\n![image](https://github.com/facebook/react/assets/563819/85f5e2df-9a04-420f-b9a3-6a1ef1d2b4d4)\r\n\r\n## Edge\r\n\r\nDoesn't show timeline tab, must not be supported?\r\n\r\n## Firefox\r\n\r\nCan't profile at all?\r\n\r\n![image](https://github.com/facebook/react/assets/563819/0c7a49c2-d691-44fe-8d3b-3aa0a20704d3)\r\n\r\n\r\nUsing latest dev tools for all 3 browsers\r\n\r\n![image](https://github.com/facebook/react/assets/563819/33f2d4b0-74b1-4daf-b01c-8bfa94ea71db)\r\n\r\nVersion: 4.27.8-2468a8735\r\nChrome: Version 114.0.5735.110 (Official Build) (64-bit)\r\nWindows: Version\t10.0.19045 Build 19045\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-06-19T01:27:00Z","created_at":"2023-06-12T15:59:02Z","creator_user_login":"kamranayub"}
{"number":26927,"title":"Bug: unable to set value on hidden input","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a `ref` to an uncontrolled hidden input\r\n2. Update the value of the hidden input via the `ref` on some event (for example based on the value of another input, triggered by the `onChange` event)\r\n3. Update the dom view via a state change\r\n4. Get the value of the hidden input via the `ref`\r\n\r\nThere seems to have been a similar situation with `react-hook-form` (which I however am not using):\r\n* https://github.com/react-hook-form/react-hook-form/issues/284\r\n* https://github.com/react-hook-form/react-hook-form/issues/2917\r\n* https://github.com/react-hook-form/react-hook-form/pull/2924\r\n\r\nThe error only happens when the dom view is refreshed via a state change: the new value in the hidden input does not persist a refresh of the dom view. Whereas the new value of a text input set to `display: none` is persisted.\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/quirky-nova-3jnmtq (with bootstrap 4)\r\n\r\nhttps://codesandbox.io/s/quizzical-darkness-66n97j (without bootstrap)\r\n\r\n## The current behavior\r\nValue of the hidden input has not changed from the initial value.\r\n\r\n## The expected behavior\r\nValue of the hidden input should have changed to the value we set it to.","state":"open","updated_at":"2023-06-23T09:35:38Z","created_at":"2023-06-12T12:48:06Z","creator_user_login":"JohnRDOrazio"}
{"number":26926,"title":"add react-server-dom-vite impl and fixture","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nVite is one of the most popular bundlers used to build React apps. This PR is adding a vite integration for React server components. It would be shame if the usage of React server components is restricted to webpack or Next.js's bundler. \r\n\r\nThe current experiments that use vite with React server components, all hack into the `react-server-dom-webpack` package and shim the environment that webpack expects, specifically `__webpack_chunk_load__` and `__webpack_require__`. \r\n\r\nWhile it is okay as a starting point, it would be good to get a deeper integration with vite that recognizes vite's lazy by default approach to doing work, and its ESM first nature. One big issue with the webpack integration is HMR. Right now because it caches the modules it loads with no way to invalidate that cache, performing HMR in vite's style requires some stupid hacks. Ideally this should be handled properly by exposing a way to invalidate the module cache. We do this by exposing `__vite_module_cache__`. We also expose a `__vite_require__` function for the integration, (similar to `__webpack_require__`). This allows the user to specify how the module loading should behave between dev and prod.\r\n\r\n## Technical Details\r\n\r\n* SSR Server (`global`): Uses vite to serve client assets and transformed ESM modules to the browser. Also uses vite to load client components for SSR. We setup the environment with `__vite_require__` and `__vite_module_cache__` which uses vite during development and the built manifests during production.\r\n\r\n* React Server (`region`): Uses vite to load the app entry `src/App.jsx` with the appropriate resolve conditions (\"react-server\"). It also uses vite to load the server action module when called by the client. We setup the environment with `__vite_require__` and `__vite_module_cache__` which uses vite during development and the built manifests during production.\r\n\r\nA few aspects left to clean up:\r\n1. Reference IDs, how to represent: I have seen them being represented as `module/path#export`. I tried saving them as `[\"module/path\",\"export\"]`. But it looks like with form actions it treats the string as the ID and so it doesn't work well with the array representation. So might have to change it all to just use the old `module/path#export` format.\r\n2. CSS asset handling for vite. By default it loads the CSS using JS in the browser. But this causes FOUC which is undesirable. We need to go through the module tree and track which CSS files are being imported in that tree and add `link` tags for those. Should be able to be handled at a meta-framework level.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nAdded a fixture `flight-vite` that's modelled after the `flight-esm` and `flight-webpack` fixtures. During development, the `global` and `region` servers use vite to parse, load and transform the modules for SSR and creating an ESM dev server for the browser. A build script is added to use vite to build the react server, SSR server and the client bundles. In production, using `yarn start`, the `global` and `region` servers use the manifests produced by vite to know where to load the bundled modules from for the react-server, SSR and browser.","state":"open","updated_at":"2023-08-13T05:30:06Z","created_at":"2023-06-11T15:18:15Z","creator_user_login":"nksaraf"}
{"number":26925,"title":"Update ReadMe file","body":"Added Link to Quick Start page of the new Site and added '(Legacy)' after the old link.\r\n\r\nReason:\r\nAs a Reader, it annoyed me that the link to a quickstart of the updated docs was missing.\r\nThe reader will have access to both new and old links from the get-go. no need to go to the old site to visit the new one.","state":"open","updated_at":"2023-07-01T20:17:30Z","created_at":"2023-06-11T15:04:55Z","creator_user_login":"Saaaaaad3"}
{"number":26924,"title":"Bug: Both npm and yarn fails to start the the server and stop working","body":"```\r\nPS D:\\My main folder\\My projects\\three.js T-shirt site in Next.js\\t-shirt> yarn dev\r\nyarn run v1.22.19\r\n$ next dev\r\nready started server on 0.0.0.0:3000, url: http://localhost:3000/\r\nwarn Detected next.config.js, no exported configuration found. https://nextjs.org/docs/messages/empty-configuration\r\ninfo Using wasm build of next-swc\r\nerror Command failed with exit code 1.\r\n```\r\n\r\nThe problem is that when i go to the stack overflow it say delete nodemodule or yarn.lock. Clear your yarn cache and reinsall yarn packages and start. But it doesn't work in any project.\r\n\r\nIn case of yarn it gives me this error but when i use npm it runs the server and then terminate it automatically.\r\n\r\nBefore when i delete node module and yarn.lock: \r\n![image](https://github.com/facebook/react/assets/101203786/07cfbe93-1ada-4b04-af0c-a1ddd6dbf0c2)\r\n\r\nAfter But still getting the same error ; \r\n\r\n![image](https://github.com/facebook/react/assets/101203786/1b23c58c-01fb-4ffb-97cd-06d8c885f785)\r\n\r\nI try to run the server by creating new next app and existing my projects but fails to run the server:\r\n\r\n![image](https://github.com/facebook/react/assets/101203786/61a748dc-7d95-4094-85be-2be1eb1e56b4)\r\n\r\n","state":"open","updated_at":"2023-06-11T14:59:17Z","created_at":"2023-06-11T14:59:17Z","creator_user_login":"Fardeen-Awais"}
{"number":26923,"title":"Bug:  issue in useEffect in React Code ? ","body":"I’m having an issue with buggy code in my progress bar. The transition doesn’t start unless I wrap setStartTransition within setTimeout or requestAnimationFrame, as shown in this example: \r\nhttps://codesandbox.io/s/progress-bar-buggy-3pby7c?file=/src/progressBar.js. \r\n\r\nHowever, my understanding is that calling setStartTransition(true) after render should start the transition without the need for a timeout . \r\nfixed code : https://codesandbox.io/s/progress-bar-99nxwl?file=/src/progressBar.js. \r\n\r\nI think there is an issue with useEffect.Triggering  setStartTransition inside useEffect , is behaving as if triggering in quick succession. and onTransition event handler does'nt get called\r\n\r\n## Steps To Reproduce\r\n\r\nKindly refer to this codesandbox code : https://codesandbox.io/s/progress-bar-buggy-3pby7c?file=/src/progressBar.js. \r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/progress-bar-buggy-3pby7c?file=/src/progressBar.js\r\n\r\n## The current behavior\r\n\r\nAs per above codesandbox link, transition should get started (All of progress bar should be filled ) . In chrome this issue happens  \r\nintermittently . But in  other browser , this issue is consistent.\r\n\r\n## The expected behavior\r\n\r\nTriggering  setStartTransition in useEffect , transition should get started, but to start I have to wrap with setTimeout : https://codesandbox.io/s/progress-bar-99nxwl?file=/src/progressBar.js\r\n","state":"open","updated_at":"2023-06-23T16:26:31Z","created_at":"2023-06-11T10:46:36Z","creator_user_login":"sk16"}
{"number":26922,"title":"Flight0mt","body":"## Summary\r\n\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n\r\nI only run the fixtures flight\r\n\r\n## How did you test this change?\r\nyarn dev or yarn start\r\n\r\n<img width=\"959\" alt=\"Screenshot 2023-06-10 235014\" src=\"https://github.com/facebook/react/assets/77508734/30f8ddde-a9db-4bcc-85fe-18c889c685cf\">\r\n\r\n","state":"open","updated_at":"2023-06-11T06:50:41Z","created_at":"2023-06-11T06:50:34Z","creator_user_login":"koyuncuoglum95"}
{"number":26920,"title":"style: simplify code","body":"## Summary\r\nMove repeated condition into a function\r\n\r\n## How did you test this change?\r\nNot necessary to make test \r\n","state":"open","updated_at":"2023-07-21T11:35:01Z","created_at":"2023-06-10T18:11:17Z","creator_user_login":"Enigama"}
{"number":26919,"title":"Update README.md","body":"Fixed a typo in readme.md file by changing the word \"bugfixes\" to \"bug fixes\".\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-09T04:29:30Z","created_at":"2023-06-10T08:14:33Z","creator_user_login":"KhurramJalil"}
{"number":26918,"title":"Mt fizz","body":"## Summary\r\n\r\nExplain the **motivation** for making this change. What existing problem does the pull request solve?\r\n\r\nThere was not exiting problem. It's just showing me repeated fizz text in localhost 4000. I only changed package.json by adding shx predev and prestart.\r\n\r\n\r\n## How did you test this change?\r\n\r\nI typed yarn start and saw the localhost running. \r\n\r\n![fizz](https://github.com/facebook/react/assets/77508734/b6762cc2-8640-4d63-beab-414f9c4799bc)\r\n\r\n![fizz2](https://github.com/facebook/react/assets/77508734/46bf5e7d-ad06-4ac7-b473-4bd971eb8066)\r\n","state":"open","updated_at":"2023-06-23T21:42:14Z","created_at":"2023-06-09T22:15:53Z","creator_user_login":"koyuncuoglum95"}
{"number":26917,"title":"Feat:- Inspect react devtools keyboard shortcut added for chrome","body":"While Tinkering with the Devtools, i sort of come out with this shortcut key command to inspect react dev tools element directly, cmd/ctrl +shift+x works , on pressing it activates the inspect mode and on pressing again it deactivates the same!\r\nThis can come very handy while working with dev tools!\r\n\r\nDemo below!\r\n\r\nhttps://github.com/facebook/react/assets/72331432/af579c82-ec74-463a-9d5c-869a486a75a8\r\n\r\n","state":"open","updated_at":"2023-06-12T14:01:14Z","created_at":"2023-06-09T12:24:06Z","creator_user_login":"Biki-das"}
{"number":26916,"title":"Fiber debugger","body":"\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThere was an export problem in bundle.js which existed from packages/react/index.js. I fixed the debugs.\r\n\r\n## How did you test this change?\r\nI run the application and it says running successfully localhost3000\r\n\r\n\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n\r\nIt solved the issue because it didn't give any error when I run the app. Here is the result. \r\n\r\n![fiber](https://github.com/facebook/react/assets/77508734/28b4440a-30da-4825-80bd-1c2588596a58)\r\n","state":"open","updated_at":"2023-06-08T23:24:16Z","created_at":"2023-06-08T23:23:41Z","creator_user_login":"koyuncuoglum95"}
{"number":26912,"title":"Bug: React run cleanup for zero dependency `useEffect` for the first time","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI encounter some confusing bug(?) as cleanup will run once when a component load.\r\nis this intentional behavior? i thought if there is no deps for this `useEffect`, cleanup will only run when the component dismount.\r\n\r\n\r\nReact version: 18.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. use `useEffect` with zero deps\r\n2. at first load, cleanup ran once\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/peaceful-sea-fk1llt?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\ncleanup run once at first start\r\n\r\n## The expected behavior\r\n\r\ncleanup run only when the component did unmount (as there is zero deps)\r\n","state":"open","updated_at":"2023-06-10T12:52:26Z","created_at":"2023-06-08T13:15:18Z","creator_user_login":"hkar19"}
{"number":26910,"title":"Bug: React fails to log invariant 306 message when lazy() resolves to a `Fragment`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Try to render this component: `const LazyFragment = lazy(() => Promise.resolve({ default: Fragment }));`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/tom-sherman/react-lazy-fragment-bug\r\n\r\n## The current behavior\r\n\r\nIt throws an error:\r\n\r\n```\r\nCannot convert a Symbol value to a string\r\n```\r\n\r\n## The expected behavior\r\n\r\nIt should throw an error related to invariant 306 eg.\r\n\r\n```\r\nElement type is invalid. Received a promise that resolves to: Fragment. Lazy element type must resolve to a class or function.\r\n```\r\n\r\n\r\n","state":"open","updated_at":"2023-06-07T10:02:07Z","created_at":"2023-06-07T08:36:04Z","creator_user_login":"tom-sherman"}
{"number":26909,"title":"Expiration fixed","body":"\r\n![result](https://github.com/facebook/react/assets/77508734/52143dc8-1e20-4946-9470-84e5415ee1e2)\r\nI solved TypeError from index.js file. It is coded with wrong syntax and library. I used import react from 'react' and import ReactDom from 'react-dom'.  IncrementCounter function has an error and I fixed it as well. \r\n\r\n## How did you test this change?\r\n\r\nI run the applcation and it's working well.\r\n\r\nindex.js\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0 };\r\n  }\r\n\r\n  incrementCounter = () => {\r\n    this.setState(state => ({\r\n      counter: state.counter + 1,\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.incrementCounter();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(this.incrementCounter, 1000); // Add a delay before incrementing\r\n  }\r\n\r\n  render() {\r\n    return <h1>{this.state.counter}</h1>;\r\n  }\r\n}\r\n\r\nconst interval = 200;\r\nfunction block() {\r\n  const endTime = performance.now() + interval;\r\n  while (performance.now() < endTime) {}\r\n}\r\nsetInterval(block, interval);\r\n\r\n// Should render a counter that increments approximately every second (the\r\n// expiration time of a low priority update).\r\nReactDOM.render(<Counter />, document.getElementById('root'));\r\nblock();\r\n```\r\n\r\npackage.json\r\n\r\n```\r\n{\r\n  \"name\": \"expiration-2\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"react\": \"^16.1.1\",\r\n    \"react-dom\": \"^16.1.1\",\r\n    \"react-scripts\": \"1.0.17\"\r\n  },\r\n  \"scripts\": {\r\n    \"predev\": \"if not exist public\\\\ (mkdir public\\\\) && copy ..\\\\..\\\\build\\\\oss-experimental\\\\react\\\\umd\\\\react.development.js public\\\\ && copy ..\\\\..\\\\build\\\\oss-experimental\\\\react-dom\\\\umd\\\\react-dom.development.js public\\\\ && copy ..\\\\..\\\\build\\\\oss-experimental\\\\react-dom\\\\umd\\\\react-dom-server-legacy.browser.development.js public\\\\\",\r\n    \"dev\": \"react-scripts start\",\r\n    \"build\": \"react-scripts build\",\r\n    \"test\": \"react-scripts test --env=jsdom\",\r\n    \"eject\": \"react-scripts eject\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n![code](https://github.com/facebook/react/assets/77508734/4afa3098-4627-49ef-93f3-c2ac3be6926f)\r\n\r\n![result](https://github.com/facebook/react/assets/77508734/6edb540b-7342-4184-9ccc-f66f38d4e3e3)\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-06-06T22:21:27Z","created_at":"2023-06-06T22:21:02Z","creator_user_login":"koyuncuoglum95"}
{"number":26908,"title":"Bug: I have found a bug:do i get money to debug?¿","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-06-06T20:55:11Z","created_at":"2023-06-06T20:55:11Z","creator_user_login":"wortforfilms"}
{"number":26907,"title":"chore: fix typo in a comment","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis PR fixes a typo in a comment :)\r\n","state":"open","updated_at":"2023-06-08T09:01:45Z","created_at":"2023-06-06T06:34:35Z","creator_user_login":"MatanBobi"}
{"number":26906,"title":"Bug: there is no renderToReadableStream function in react-dom@18.2.0 in Node.js","body":"I try to use `renderToReadableStream` function from `react-dom/server` in Node.js but there is no such function in package.\r\n\r\nReact version: 18.2.0\r\nNode.js version 16.15.0 or 18.16.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. create `index.mjs` file\r\n2. insert code:\r\n   ```js\r\n   import { renderToString, renderToReadableStream } from \"react-dom/server\";\r\n\r\n   console.log({ renderToString, renderToReadableStream });\r\n   ```\r\n3. run `node index.mjs` in terminal\r\n\r\nLink to code example:\r\n\r\n[StackBlitz](https://stackblitz.com/edit/node-yn12fy?file=index.mjs)\r\n\r\n## The current behavior\r\n\r\nError in terminal:\r\n```sh\r\nfile:///Users/user/Projects/node-fetch-api-server/index.mjs:1\r\nimport { renderToString, renderToReadableStream } from \"react-dom/server\";\r\n                         ^^^^^^^^^^^^^^^^^^^^^^\r\nSyntaxError: Named export 'renderToReadableStream' not found. The requested module 'react-dom/server' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from 'react-dom/server';\r\nconst { renderToString, renderToReadableStream } = pkg;\r\n\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:124:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:190:5)\r\n\r\nNode.js v18.16.0\r\n```\r\n\r\n## The expected behavior\r\n\r\nNode.js suupports web streams in experimental mode.\r\n\r\nThe package `react-dom/server` must have a function `renderToReadableStream` according to the documentation:\r\nhttps://react.dev/reference/react-dom/server/renderToReadableStream","state":"open","updated_at":"2023-06-14T09:28:50Z","created_at":"2023-06-06T05:08:00Z","creator_user_login":"krutoo"}
{"number":26905,"title":"Warn when a hook call is an OptionalCallExpression","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis happens in our codebase, we should catch these.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nyarn test","state":"open","updated_at":"2023-06-07T02:27:42Z","created_at":"2023-06-06T00:20:16Z","creator_user_login":"tyao1"}
{"number":26904,"title":"Eslint fixed","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n1.)  yarn\r\n\r\n2.) yarn start\r\n\r\n\r\nHow exactly did you verify that your PR solves the issue you wanted to solve?\r\n\r\n  When I start this fixture, the terminal says \r\n\r\nPS C:\\Users\\memo_\\OneDrive\\Masaüstü\\facebook-react\\fixtures\\eslint> yarn start\r\n\r\nyarn run v1.22.19\r\n$ ./watch.sh\r\nDone in 14.79s.\r\n\r\n![Screenshot 2023-06-05 141831](https://github.com/facebook/react/assets/77508734/9fffdf44-4433-4e86-8ff9-779565c25d67)\r\n","state":"open","updated_at":"2023-06-05T21:27:36Z","created_at":"2023-06-05T21:18:58Z","creator_user_login":"koyuncuoglum95"}
{"number":26903,"title":"[DevTools Bug]: Flame graph entries overlapping","body":"### Website or app\r\n\r\nhttps://web-enable-react-profil-1na9tm.herokuapp.com/\r\n\r\n### Repro steps\r\n\r\n1. Go to https://web-enable-react-profil-1na9tm.herokuapp.com/\r\n2. Open profiler\r\n3. Click \"reload and start profiling\"\r\n4. After the reload completes, stop profiling\r\n5. Step through the commits until you see this:\r\n   <img width=\"1840\" alt=\"image\" src=\"https://github.com/facebook/react/assets/921609/7162b403-d940-4028-a20f-27d73d48e55c\">\r\n\r\nThe flame graph entries are overlapping other entries.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n4.27.8 (5/19/2023)\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-06-13T11:44:59Z","created_at":"2023-06-05T15:18:44Z","creator_user_login":"OliverJAsh"}
{"number":26902,"title":"Bug: hydration is blocking for components inside Suspense boundary","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example: https://github.com/OliverJAsh/react-suspense-non-blocking-hydration\r\n\r\nThe app renders two `Expensive` components outside of `Suspense` and another two inside of `Suspense`.\r\n\r\nEach `Expensive` component takes 500ms to render.\r\n\r\n`shared/Expensive.tsx`:\r\n```tsx\r\nimport * as React from 'react';\r\n\r\nexport const Expensive = () => {\r\n  const end = Date.now() + 500;\r\n  while (Date.now() < end) {\r\n    // do nothing\r\n  }\r\n\r\n  return <div>Expensive</div>;\r\n};\r\n\r\n```\r\n\r\n`shared/Nested.tsx`:\r\n```tsx\r\nimport * as React from 'react';\r\nimport { Expensive } from './Expensive';\r\n\r\nconst Nested: React.FC = () => (\r\n  <>\r\n    <div>Suspense</div>\r\n    <Expensive />\r\n    <Expensive />\r\n  </>\r\n);\r\n\r\nexport default Nested;\r\n\r\n```\r\n`shared/App.tsx`:\r\n```tsx\r\nimport * as React from 'react';\r\n\r\nimport { Expensive } from './Expensive';\r\n\r\nconst Nested = React.lazy(() => import('./Nested'));\r\n\r\nconst NestedWithSuspenseAndMemo = React.memo(() => (\r\n  <React.Suspense>\r\n    <Nested />\r\n  </React.Suspense>\r\n));\r\n\r\nexport const App = ({ history }: any) => {\r\n  React.useEffect(() => {\r\n    history.replace({});\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>App</div>\r\n      <Expensive />\r\n      <Expensive />\r\n\r\n      <NestedWithSuspenseAndMemo />\r\n    </div>\r\n  );\r\n};\r\n\r\n```\r\n`client/index.tsx`:\r\n```tsx\r\nimport { hydrateRoot } from 'react-dom/client';\r\n\r\nimport * as React from 'react';\r\nimport { App } from '../shared/App';\r\n\r\nconst container = document.getElementById('root')!;\r\n\r\nclass History {\r\n  callback?: (location: {}) => void;\r\n\r\n  listen(callback: (location: {}) => void) {\r\n    this.callback = callback;\r\n  }\r\n\r\n  replace(location: {}) {\r\n    this.callback!(location);\r\n  }\r\n}\r\nconst history = new History();\r\n\r\nconst Context = React.createContext<{} | null>(null);\r\n\r\nconst Router = ({ children }: { children: React.ReactNode }) => {\r\n  const [location, setLocation] = React.useState({});\r\n\r\n  React.useLayoutEffect(() => {\r\n    history.listen(setLocation);\r\n  }, []);\r\n\r\n  return <Context.Provider value={location}>{children}</Context.Provider>;\r\n};\r\n\r\nhydrateRoot(\r\n  container,\r\n  <Router>\r\n    <App history={history} />\r\n  </Router>,\r\n);\r\n\r\n```\r\n\r\n\r\n## The current behavior\r\n\r\nThe hydration for the two `Expensive` components inside the `Suspense` boundary is in the form of a single task lasting 1 second:\r\n\r\n![blocking](https://github.com/facebook/react/assets/921609/7990267c-f9b0-47d8-a726-f40dd3e446fd)\r\n\r\n## The expected behavior\r\n\r\nThe hydration for the two `Expensive` components inside the `Suspense` boundary should be in the form of two tasks lasting 500ms each:\r\n\r\n![non-blocking](https://github.com/facebook/react/assets/921609/caba2c70-235f-44cc-945e-0990fe643980)\r\n\r\n## Notes\r\n\r\nI can fix this issue by wrapping the state update in `startTransition`, but I don't understand why this is necessary, given that the `Suspense` boundary will not be receiving this update because it is memoized and has no props.\r\n\r\n```diff\r\ndiff --git a/shared/App.tsx b/shared/App.tsx\r\nindex 2ff5b5e..9323df2 100644\r\n--- a/shared/App.tsx\r\n+++ b/shared/App.tsx\r\n@@ -12,7 +12,9 @@ const NestedWithSuspenseAndMemo = React.memo(() => (\r\n \r\n export const App = ({ history }: any) => {\r\n   React.useEffect(() => {\r\n-    history.replace({});\r\n+    React.startTransition(() => {\r\n+      history.replace({});\r\n+    });\r\n   }, []);\r\n \r\n   return (\r\n\r\n```","state":"open","updated_at":"2023-06-05T14:57:18Z","created_at":"2023-06-05T14:57:18Z","creator_user_login":"OliverJAsh"}
{"number":26901,"title":"Bug: react-hooks/rules-of-hooks rule is not applied inside of anonymous/arrow functions passed as an argument","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17, 18\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example: <https://codesandbox.io/s/gallant-minsky-6cmgol?file=/src/App.js>\r\n\r\n## The current behavior\r\nWhen hooks are erroneously used in an anonymous or arrow function that is immediately passed as an argument to another function, these usages are not being detected as errors by `react-hooks/rules-of-hooks`.\r\n\r\n## The expected behavior\r\nThe rule behavior is the same as for ordinary functions and arrow functions assigned to a variable, where an error is shown.","state":"open","updated_at":"2023-06-05T21:01:38Z","created_at":"2023-06-05T09:57:17Z","creator_user_login":"alina-zaieva"}
{"number":26900,"title":"Concurrent fixed","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nI run the app, and everything is working fine. \r\n\r\n How exactly did you verify that your PR solves the issue you wanted to solve?\r\nI entered input and the chart keep playing in synchronous and concurrent. When I click index.js, // TODO says useTransition hook for async. I put startTransition({}) and it worked. \r\n\r\n![sync](https://github.com/facebook/react/assets/77508734/1658f9f0-0fae-4dc7-a010-3f1acdc7ccab)\r\n![async](https://github.com/facebook/react/assets/77508734/d420e7c0-5f29-450c-a1b6-cabf48b6ec84)\r\n\r\n","state":"open","updated_at":"2023-06-05T10:06:25Z","created_at":"2023-06-05T02:04:57Z","creator_user_login":"koyuncuoglum95"}
{"number":26898,"title":"Funix/my branch","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-04T17:20:23Z","created_at":"2023-06-04T17:20:17Z","creator_user_login":"trunglc378"}
{"number":26894,"title":"I run bundle.js successfully","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nI solved scripts build problem by adding this line \r\n\r\n```\r\n \"scripts\": {\r\n    \"prebuild\": \"npm run copy-files\",\r\n    \"copy-files\": \"npx copyfiles ../../build/oss-experimental/* ./node_modules/\",\r\n    \"build\": \"webpack app.js bundle.js\"\r\n  }, \r\n\r\n```\r\nin package.json file and changed bundle.js. \r\n\r\n\r\n## How did you test this change?\r\nWhen I reload index.html page, I saw react-logo that is animated. \r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n<img width=\"959\" alt=\"Screenshot 2023-06-02 221712\" src=\"https://github.com/facebook/react/assets/77508734/178d7011-2326-4666-a8e0-0529f5a85552\">\r\n<img width=\"1280\" alt=\"Screenshot 2023-06-02 221652\" src=\"https://github.com/facebook/react/assets/77508734/b4325e28-3d96-4930-97db-8d8dfb6745ec\">\r\n","state":"open","updated_at":"2023-06-05T19:23:38Z","created_at":"2023-06-03T05:22:56Z","creator_user_login":"koyuncuoglum95"}
{"number":26893,"title":"Add test for re-mounting layout effects when re-suspending","body":"I couldn't find a test for this anywhere, feel free to close if we do have one that covers this.","state":"open","updated_at":"2023-06-02T12:44:19Z","created_at":"2023-06-02T12:41:36Z","creator_user_login":"rickhanlonii"}
{"number":26892,"title":"Added Filter to allow skip re-render in context consumers","body":"## Summary\r\n\r\nThe reason of this change is to have a way to skip re-renders in some consumers based on the previous state and new state or in case that i just want to re-render if a specific sub value inside the context changes\r\n\r\nThis allow to improve the performance in large applications without be making many context just to parse the value trying to avoid re-renders\r\n\r\n![image](https://github.com/facebook/react/assets/35545218/6c8406f9-3999-4d09-9a62-b0b33159ebde)\r\n\r\ni tested the implementation with an existing react application (small) where using devTools i was able to confirm that the elements that i was specting to be skipped were skipped\r\n\r\n## How did you test this change?\r\n\r\nhttps://github.com/facebook/react/issues/26890 in this ticket i left a codesandbox example about the proposal implementation\r\n\r\njust will require to run it locally and replace `react` and `react-dom` to be able to test the changes and verified using devTools\r\n\r\nin my case i was using this command `yarn build react/index,react-dom/index,react/jsx-runtime,react-dom/src/server --type=NODE_DEV`\r\n\r\n![image](https://github.com/facebook/react/assets/35545218/2b1d64dc-f8dd-4115-8d64-054e67b645d8)\r\n","state":"open","updated_at":"2023-06-03T13:58:32Z","created_at":"2023-06-02T11:31:51Z","creator_user_login":"eduardocque"}
{"number":26891,"title":"Update ReactHooks.js","body":"Hey, I have noticed that ReactHooks.js file has a link of older website(reactjs.org) so I have updated it with newer one.\r\n\r\nHowever even that older link redirects to the newer website(react.dev) but it should be changed.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-02T09:05:00Z","created_at":"2023-06-02T07:57:46Z","creator_user_login":"Anupreet1213"}
{"number":26890,"title":"[Proposal] Selective Render with useContext","body":"Ability to do selective renders with useContext to improve the performance for large applications\r\n\r\nfollowing the next pattern\r\n```js\r\nconst TestContext = createContext();\r\n...\r\nconst proposalCallback = useCallback(\r\n    (prevState, nextState) => {\r\n      // If the value is different, then re-render\r\n      // if this method is defined will return true/false\r\n      // if this method doesn't exist, will keeps working in the current way re-rendering everytime so this one is optional\r\n\r\n\r\n      return \"evaluate prev and next state and based on your logic return true or false\";\r\n    },\r\n    []\r\n  );\r\n\r\n  // Proposal callback applied here\r\n  const dataContext = useContext(TestContext, proposalCallback);\r\n```\r\n\r\nReact version: **18.2.0**\r\n\r\n## Steps To Reproduce\r\n\r\n- open console log\r\n- write in the first field and u will notice that field 2 is re-rendering, we should skip it\r\n\r\nhttps://codesandbox.io/s/friendly-bas-5vnrvs\r\n\r\n\r\n## The current behavior\r\n\r\nall context consumers are re-rendering\r\n![image](https://github.com/facebook/react/assets/35545218/63d5d195-54de-4b77-8946-6a05a154d5f0)\r\n\r\n\r\n## The expected behavior\r\n\r\nshould only re-render those that were affected using the proposal that is in codesandbox\r\n\r\n## Note\r\nthis proposal is to give a big improvement in performance for large application that works based on contexts, so instead be making granual contexts, why not give the ability to check if the value that is expecting the consumer change or not\r\n\r\nthis can be implemented in the logic that process the nodes and takes the decision to re-render or not internally in react, but im not familiar to try to make a PR for this proposal\r\n\r\nUpdated:\r\n\r\nafter some research the files that needs to be updated are\r\n* packages/react-reconciler/src/ReactFiberNewContext.js -> propagateContextChange\r\n\r\nis this correct ?\r\n\r\nnoticed that when the provider Fiber gets updated this sends the signal to invalidate all consumers located in the child tree inside the provider","state":"open","updated_at":"2023-06-03T06:12:37Z","created_at":"2023-06-02T04:23:28Z","creator_user_login":"eduardocque"}
{"number":26886,"title":"Bug: Inconsistent behavior with Promises near the root","body":"Just jotting down some cases I found confusing.\r\nIdeally for each case, it should either work, or should fail in some obvious way.\r\n\r\n## Working: startTransition + 1000ms Promise root\r\n\r\n```js\r\nimport { startTransition } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nlet promise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve(<h1>hi</h1>);\r\n  }, 1000);\r\n});\r\n\r\nstartTransition(() => {\r\n  root.render(promise);\r\n});\r\n```\r\n\r\nhttps://codesandbox.io/s/goofy-rui-8g6sxh?file=/src/index.js\r\n\r\n## Working: startTransition + root component + 5000ms Promise child\r\n\r\n```js\r\nimport { startTransition } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nlet promise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve(<h1>hi</h1>);\r\n  }, 5000);\r\n});\r\n\r\nfunction Foo() {\r\n  return promise;\r\n}\r\n\r\nstartTransition(() => {\r\n  root.render(<Foo />);\r\n});\r\n```\r\n\r\nhttps://codesandbox.io/s/epic-cookies-v94rk2?file=/src/index.js\r\n\r\n## Working: No startTransition + root component + 5000ms Promise child\r\n\r\n```js\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nlet promise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve(<h1>hi</h1>);\r\n  }, 5000);\r\n});\r\n\r\nfunction Foo() {\r\n  return promise;\r\n}\r\n\r\nroot.render(<Foo />);\r\n```\r\n\r\nhttps://codesandbox.io/s/zen-allen-2u1nr7?file=/src/index.js\r\n\r\n## Working: startTransition + root component + 1000ms Promise in state\r\n\r\n```js\r\nimport { useState, startTransition } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nfunction Foo() {\r\n  const [promise, setPromise] = useState(\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(<h1>hi</h1>);\r\n      }, 1000);\r\n    })\r\n  );\r\n  return promise;\r\n}\r\n\r\nstartTransition(() => {\r\n  root.render(<Foo />);\r\n});\r\n```\r\n\r\nhttps://codesandbox.io/s/immutable-moon-2h3dqz?file=/src/index.js\r\n\r\n## Working: startTransition + root component + 1000ms Promise in state + use\r\n\r\n```js\r\nimport { use, useState, startTransition } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nfunction Foo() {\r\n  const [promise, setPromise] = useState(\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(<h1>hi</h1>);\r\n      }, 1000);\r\n    })\r\n  );\r\n  return use(promise);\r\n}\r\n\r\nstartTransition(() => {\r\n  root.render(<Foo />);\r\n});\r\n```\r\n\r\nhttps://codesandbox.io/s/hungry-carlos-1n8hqu?file=/src/index.js\r\n\r\n## Crashes: startTransition + 5000ms Promise root\r\n\r\nThis doesn't work (with a confusing crash):\r\n\r\n```js\r\nimport { startTransition } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nlet promise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve(<h1>hi</h1>);\r\n  }, 5000); // <--- I increased the delay\r\n});\r\n\r\nstartTransition(() => {\r\n  root.render(promise);\r\n});\r\n\r\n```\r\n\r\nhttps://codesandbox.io/s/busy-torvalds-xgbcgh?file=/src/index.js\r\n\r\n## Crashes: No startTransition + 1000ms Promise root\r\n\r\nThis doesn't work (with a confusing crash):\r\n\r\n```js\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nlet promise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    resolve(<h1>hi</h1>);\r\n  }, 1000);\r\n});\r\n\r\nroot.render(promise); // No startTransition\r\n```\r\n\r\nhttps://codesandbox.io/s/serene-payne-677ghp?file=/src/index.js\r\n\r\n## Never resolves: No startTransition + root component + 1000ms Promise in state\r\n\r\n```js\r\nimport { useState } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nfunction Foo() {\r\n  const [promise, setPromise] = useState(\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(<h1>hi</h1>);\r\n      }, 1000);\r\n    })\r\n  );\r\n  return promise;\r\n}\r\n\r\nroot.render(<Foo />);\r\n```\r\n\r\nhttps://codesandbox.io/s/musing-chaplygin-2udvbx?file=/src/index.js\r\n\r\n## Never resolves: No startTransition + root component + 1000ms Promise in state + use\r\n\r\n```js\r\nimport { use, useState } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nfunction Foo() {\r\n  const [promise, setPromise] = useState(\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(<h1>hi</h1>);\r\n      }, 1000);\r\n    })\r\n  );\r\n  return use(promise);\r\n}\r\n\r\nroot.render(<Foo />);\r\n```\r\n\r\nhttps://codesandbox.io/s/blue-butterfly-3xywp2?file=/src/index.js:0-400","state":"open","updated_at":"2023-06-01T15:28:10Z","created_at":"2023-06-01T15:25:07Z","creator_user_login":"gaearon"}
{"number":26885,"title":"error to display the names of the hooks.","body":"It shows a parse error and does not allow me to visualize the names of the states that I have in my project, as you can see in the image below.\r\n\r\n**please help me**\r\n\r\n![image](https://github.com/facebook/react/assets/94578362/7177faec-2d3b-4970-80ff-9c08f6dfd0e7)\r\n","state":"open","updated_at":"2023-06-24T19:22:57Z","created_at":"2023-06-01T13:42:13Z","creator_user_login":"edinsondevs"}
{"number":26884,"title":"Bug: Form with name=\"location\" crushes chrome","body":"React version: 16.*, 18.*\r\n\r\n## Steps To Reproduce\r\n\r\n1.Use chrome 114 version\r\n2.Add form with name=\"location\" to jsx\r\n3.Open page\r\n\r\n## The current behavior\r\nYou will get Oh snap error\r\n![image](https://github.com/facebook/react/assets/75448378/39e86459-8cd7-4ab3-8ed8-8ab96a95229e)\r\n\r\nCode example: https://stackblitz.com/edit/react-ts-egwgqn?file=App.tsx\r\n\r\n## The expected behavior\r\nNo error","state":"open","updated_at":"2023-06-26T07:32:22Z","created_at":"2023-06-01T06:36:34Z","creator_user_login":"aletor123"}
{"number":26883,"title":"Add a warning to useEffect if no deps","body":"\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nI've heard a lot of the community complain about `useEffect` causing an infinite loop if the second argument is omitted, so I am trying to help by proposing something in this direction.\r\n\r\nInspired by https://twitter.com/tlakomy/status/1501574622839463936 and others.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nThis is a fairly minimal change (or at least appears to be), so I didn't test it outside of \"brain compilation\". The pull request is more intended to spark a discussion instead of be merged immediately, so I hope this is enough to meet that end.\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-06-02T08:27:37Z","created_at":"2023-06-01T02:50:56Z","creator_user_login":"TejasQ"}
{"number":26876,"title":"Bug: Radio button onChange not called in current React Canary","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.3.0-canary-a1f97589f-20230526\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create radio buttons that toggle `disabled` in `onChange`\r\n2. After selecting each radio button, `onChange` is no longer called\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nThe following CodeSandbox demonstrates the issue with the current react canary version. The issue is not present when react & react-dom versions are changed to stable 18.2.0\r\n\r\nhttps://codesandbox.io/s/react-canary-radio-buttons-deiqb3?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`<input type=\"radio\" />`'s `onChange` prop is not called on subsequent clicks of the input\r\n\r\n## The expected behavior\r\n`<input type=\"radio\" />`'s `onChange` prop should be called on subsequent clicks of the input\r\n","state":"open","updated_at":"2023-06-28T15:36:15Z","created_at":"2023-05-31T15:17:41Z","creator_user_login":"robrichard"}
{"number":26875,"title":"Bug: React Native Web blocking request","body":"I have an app working without problems with react-native but the same app when I use it with react-native-web the request gives me this problem:\r\n\r\nAccess to XMLHttpRequest at '...' from origin 'http://localhost:19006' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\nre\r\n\r\nThe server I make the requests to is configured correctly, the calls work in react native but not in react native web","state":"open","updated_at":"2023-06-15T05:26:53Z","created_at":"2023-05-31T09:49:24Z","creator_user_login":"PracticasSlope9"}
{"number":26874,"title":"refactor: replace magic string with forEach","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nreplace magic string with forEach\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\njust code optimization\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-31T03:49:38Z","created_at":"2023-05-31T03:46:40Z","creator_user_login":"li-jia-nan"}
{"number":26869,"title":"Bug: ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n#10389 \r\n\r\n## The expected behavior\r\n#26865 ","state":"open","updated_at":"2023-06-10T12:27:10Z","created_at":"2023-05-29T07:41:30Z","creator_user_login":"Betterhear"}
{"number":26868,"title":"upgrade rimraf to version 5.0.1","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIt simplifies some of the rimraf usages since the library is now async.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n- Ran `yarn build`, which utilizes rimraf in scripts/rollup/utils.js\r\n- Ran `yarn start` in fixtures/fizz, which utilizes rimraf in fixtures/fizz/scripts/build.js\r\n- Ran `yarn start` in fixtures/ssr2, which utilizes rimraf in fixtures/ssr2/scripts/build.js\r\n- I couldn't get the benchmarks in scripts/bench to work, but I tested the `cleanDir` function in scripts/bench/build.js by creating a small script that utilizes it separately.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-29T07:08:13Z","created_at":"2023-05-29T07:08:08Z","creator_user_login":"mtorp"}
{"number":26867,"title":"Bug: Typescript + React","body":"Hi guys, I suddenly get some errors these days when I run my code which they have not been before.\r\n\r\n`  Its element type 'ReactElement<any, any> | Component<AppPropsType<NextRouter, {}>, any, any> | null' is not a valid JSX element.\r\n    Type 'Component<AppPropsType<NextRouter, {}>, any, any>' is not assignable to type 'Element | ElementClass | null'.\r\n      Type 'Component<AppPropsType<NextRouter, {}>, any, any>' is not assignable to type 'ElementClass'.\r\n        The types returned by 'render()' are incompatible between these types.`\r\n\r\nReact version:\r\n\"@types/react\": \"17.0.2\",\r\n\"react\": \"^17.0.1\",\r\n\"typescript\": \"^4.1.5\",\r\n\"next\": \"^10.0.7\",\r\n\r\n## The current behavior\r\nLots of errors:\r\n1)\r\n`ERROR in pages/_document.tsx:48:55\r\nTS2786: 'App' cannot be used as a JSX component.\r\n  Its element type 'ReactElement<any, any> | Component<AppPropsType<NextRouter, {}>, any, any> | null' is not a valid JSX element.\r\n    Type 'Component<AppPropsType<NextRouter, {}>, any, any>' is not assignable to type 'Element | ElementClass | null'.\r\n      Type 'Component<AppPropsType<NextRouter, {}>, any, any>' is not assignable to type 'ElementClass'.`\r\n2)\r\n`TS2769: No overload matches this call.\r\n  Overload 1 of 2, '(o: { [s: string]: unknown; } | ArrayLike<unknown>): unknown[]', gave the following error.\r\n    Argument of type 'T' is not assignable to parameter of type '{ [s: string]: unknown; } | ArrayLike<unknown>'.\r\n      Type 'T' is not assignable to type 'ArrayLike<unknown>'.\r\n  Overload 2 of 2, '(o: {}): any[]', gave the following error.\r\n    Argument of type 'T' is not assignable to parameter of type '{}'.\r\n     8 |\r\n     9 |   static values<T>(t: T) {\r\n  > 10 |     return Object.values(t);`\r\n.....\r\n\r\n## The expected behavior\r\nevent - compiled successfully","state":"open","updated_at":"2023-05-31T14:19:36Z","created_at":"2023-05-29T06:55:15Z","creator_user_login":"Erfan2001"}
{"number":26866,"title":"react新的中文文档","body":"react新的中文文档，使用上来看只能说很糟糕，基本上没有什么翻译，前面还是中文的，后面一节突然就变成英文的了，还不如以前的文档，另外UI也没有以前好看，体验感好差，叹气！","state":"open","updated_at":"2023-05-30T01:36:30Z","created_at":"2023-05-29T06:15:06Z","creator_user_login":"xiaqingping"}
{"number":26865,"title":"Bug: React.Children.only expected to receive a single React element child","body":"То есть при использовании кутубонуса react-reveal при сопоставлении нового элемента с этим эффектом появляется вот эта ошибка, и я думаю, что эту ошибку надо решать, и она доставляет массу проблем пользователю.","state":"open","updated_at":"2023-06-02T13:40:51Z","created_at":"2023-05-27T17:46:09Z","creator_user_login":"shokhDeveloper"}
{"number":26859,"title":"Update README.md","body":"I think it should be bug-fixes not bugfixes I have done research by myself please consider this and make change according to it.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-07-13T14:40:13Z","created_at":"2023-05-26T10:59:17Z","creator_user_login":"sanskritiadt"}
{"number":26854,"title":"Scaffolding for <Catch>","body":"Exposes the <Catch> component (behind a flag) and teaches Fiber/Fizz to recognize it. Basically everything except the actual error handling behavior; it gets rendered as a fragment for now.","state":"open","updated_at":"2023-08-09T14:03:04Z","created_at":"2023-05-25T16:56:42Z","creator_user_login":"acdlite"}
{"number":26853,"title":"Count read-only state values as stable in exhaustive-deps","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nOne way to store a stable value across the lifetime of a React component is to create a read-only state variable:\r\n\r\n```jsx\r\nfunction MyComponent() {\r\n  const [history] = useState(createBrowserHistory);\r\n  useEffect(() => {\r\n    fetchData().then((data) => {\r\n      if (data.isNewUser) {\r\n        history.push(\"/welcome\");\r\n      }\r\n    });\r\n  }, []);\r\n  return <p>Hello, world!</p>;\r\n}\r\n```\r\n\r\nThis has the benefit that you don’t need to deal with the possibility that the value could be `null` in the eyes of type checkers (like you do with `useRef`), you don’t need any boilerplate beyond the `useState` call, and the setup function is only called once per component.\r\n\r\nHowever, the `exhaustive-reps` ESLint rule will report the `useEffect` call in the sample code because `history` is not in the dependency array. This is a spurious warning because the `history` value can not actually change over the lifetime of the component.\r\n\r\n## How did you test this change?\r\n\r\nI added a test to the test file and ran `yarn test react-hooks`. I didn’t see an easy way to run the updated rule on my own codebase.","state":"open","updated_at":"2023-06-19T02:42:31Z","created_at":"2023-05-25T14:47:32Z","creator_user_login":"j-f1"}
{"number":26852,"title":"package.json: cleanup deprecated scripts","body":"I think these have been dead for a while now. If the purpose is documentation, we should see if we need to improve `yarn test --help` or something instead.","state":"open","updated_at":"2023-05-25T14:47:16Z","created_at":"2023-05-25T14:47:03Z","creator_user_login":"kassens"}
{"number":26848,"title":"Docs: Can I add multiple languages in the readme ?","body":"Can I add multiple languages in the readme? like this:\r\n\r\n<img width=\"619\" alt=\"image\" src=\"https://github.com/facebook/react/assets/49217418/dc7b2aa2-3899-49be-848e-6751fef3125d\">","state":"open","updated_at":"2023-05-31T13:09:45Z","created_at":"2023-05-25T07:45:15Z","creator_user_login":"li-jia-nan"}
{"number":26843,"title":"Destroy insertion effects when deleting previously hidden subtrees","body":"## Summary\r\n\r\nThis PR fixes the lack of symmetry between creating and destroying insertion effects under certain circumstances. It could happen that the insertion effect was not destroyed if its owner component got hidden first as a result of re-suspending and if another subtree ended up being rendered.\r\n\r\n## How did you test this change?\r\n\r\n1. added test case\r\n2. tested it manually in the app\r\n\r\nfixes https://github.com/facebook/react/issues/26670\r\n\r\ncc @gaearon","state":"open","updated_at":"2023-07-27T11:23:30Z","created_at":"2023-05-24T12:23:44Z","creator_user_login":"Andarist"}
{"number":26839,"title":"Bug: useId IDs have special characters that conflict with certain DSLs (like CSS)","body":"The ID scheme for the `useId` hook returns IDs that look like `\":S1:\"`, but `:` is not a valid character for CSS identifiers and must be escaped. On client-only components, you can wrap the ID in `CSS.escape` but the `CSS` global object doesn't exist on the server so this doesn't work for server-component renders.\r\n\r\nReact version: 18.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Try utilizing the id's created by `useId` in CSS identifiers.\r\n2. It doesn't work.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://stackblitz.com/edit/react-ts-zhtk6u?file=Example.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe current implementation of `useId` creates IDs with special characters which can conflict with certain DSLs (in this example, CSS) that React has to commonly interact with.\r\n\r\n## The expected behavior\r\n\r\nDon't use special characters in IDs created by `useId`.","state":"open","updated_at":"2023-08-14T20:29:39Z","created_at":"2023-05-22T14:58:10Z","creator_user_login":"EthanStandel"}
{"number":26837,"title":"Bug: In a recursive components, `_debugSource` doesn't get updated","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nwith the following component:\r\n```typescript\r\nexport default function App({ title }: { title?: string }) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  if (isLoading || !title) {\r\n    return <div data-id=\"line12\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div data-id=\"line-15\">\r\n      Loaded\r\n      <App />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nwhen react-dom updates the div (the one with data-id=\"line12\" to the one with data-id=\"line-15\")\r\nit doesn't update `_debugSource` attribute on the fiber, that's why devtools displays the wrong line number\r\n(see image below)\r\n\r\nReact version:\r\n18.*\r\n## Steps To Reproduce\r\n\r\n1. clone the github repo below\r\n2. start the project and open it in the browser\r\n3. open react-devtools\r\n4. select the root `div` element inside `App`\r\nThe **source** location is wrong.\r\n\r\n\r\nOr, you can open the following codesandbox:\r\n[codesandbox](https://codesandbox.io/p/github/vlad-karnauch/react-recursion-issue/main?create=true&file=/src/App.tsx:16,33\r\n)\r\nopen the preview in a separate browser tab, and see the issue in devtools\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n[github-repo](https://github.com/vlad-karnauch/react-recursion-issue)\r\n\r\n\r\n## The current behavior\r\n![Screenshot 2023-05-21 at 17 43 08](https://github.com/facebook/react/assets/75258238/c3a49f6c-d5ac-4f35-b3d5-82dd361b4ee2)\r\n\r\n## The expected behavior\r\n**source** in react devtools should be `App.tsx:15`","state":"open","updated_at":"2023-05-25T13:34:53Z","created_at":"2023-05-21T14:41:26Z","creator_user_login":"vlad-karnauch"}
{"number":26836,"title":"React-Bootstrap","body":"I have added Reat-bootstrap guidelines in the README.md file which helps any other to use react-bootstrap in a project So that it improves User Interface.","state":"open","updated_at":"2023-05-23T08:36:06Z","created_at":"2023-05-21T10:25:30Z","creator_user_login":"Shivu7889"}
{"number":26832,"title":"Make scheduleHydration awaitable","body":"## Overview\r\n\r\nEnd-to-end tests in server rendered environments need the ability to click on items after hydration. Since hydration is lazy, and may never complete, it doesn't make sense to add an API that waits just for hydration, which we might not even be working on.\r\n\r\nWe already have an unstable API to opt-in to trying to hydrate to a node, `unstable_scheduleHydration`. By making this function awaitable, E2E tests will be able to schedule hydration on a node, and wait for hydration on that node to complete. ","state":"open","updated_at":"2023-07-10T17:21:34Z","created_at":"2023-05-19T21:34:03Z","creator_user_login":"rickhanlonii"}
{"number":26822,"title":"ESLint rule for detecting function calls inside useState (for recommending lazy initialization)","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nAdds a new ESLint rule to detect function calls inside useState and recommends that an initializer function be used instead. For example, this code:\r\n\r\n`const [value, setValue] = useState(generateTodos());\r\n`\r\n\r\nWould trigger the rule into recommending this instead:\r\n\r\n`const [value, setValue] = useState(() => generateTodos());\r\n`\r\n\r\nMore info: [React docs on avoiding recreating initial state](https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state)\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI added a test file with various tests. The test file passes when I run \"yarn test\". \r\n\r\nAs an aside, initially I submitted this to [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react/pull/3579), but they felt this would be a better place for it.\r\n\r\nCloses https://github.com/facebook/react/issues/26520","state":"open","updated_at":"2023-05-18T09:14:16Z","created_at":"2023-05-17T02:12:43Z","creator_user_login":"patorjk"}
{"number":26818,"title":"Bump update-notifier to 6.0.2","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nUpdates `react-devtools` to use the latest version of `update-notifier`, which was transitively dependent on a vulnerable version of `got`\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-16T13:41:19Z","created_at":"2023-05-15T14:57:51Z","creator_user_login":"MichaelDono"}
{"number":26814,"title":"Bug: useTransition and uSES do not work together, uT is not resilient to amount-of-render","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nWe learn that components should not rely on render. But useTransition does seem to rely on it. If we wrap a set into a useTransition:\r\n\r\n```jsx\r\nconst [pending, start] = useTransition()\r\n...\r\nstart(() => set(\"foo\"))\r\n```\r\n\r\neverything that now suspends because of it is marked as a transition, it will not go into suspense fallback but instead `pending` will be true. ✅\r\n\r\nBut if the suspending component, for whatever reason, happens to render again while still in suspense, giving react the same promise that it already has, then it will unpend because that render wasn't marked a transition. ❌\r\n\r\nThis at least happens when state managers are built on uSES.\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/cool-fast-pcz6bv?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\n```markdown\r\n1. ❌ Fallback, loading...\r\n2. ⚛️ Content\r\n3. ❌ Fallback, loading...\r\n4. ⚛️ Content\r\n```\r\n\r\nIn that sandbox it:\r\n\r\n1. suspends, it correctly goes into suspense fallback\r\n2. unsuspends, it correctly shows the content\r\n3. suspends again but wrapped into startTransition, it should not go into fallback but pend, but because the suspending component double renders for whatever reason it throws it's promise again towards react, but nothing marked it a transition this time, so the pending state disappears and it goes back into fallback\r\n\r\n\r\n## The expected behavior\r\n\r\n```markdown\r\n1. ❌ Fallback, loading...\r\n2. ⚛️ Content\r\n3. ⚛️ Content\r\n   ✅ Pending ...\r\n4. ⚛️ Content\r\n```\r\n\r\nstartTransition should mark the component that suspended a transition *as long as it suspends*.\r\n\r\nbtw, @dai-shi has an extension that lets us use zustand without uSES, it does not happen then: https://codesandbox.io/s/suspicious-hooks-hdvxhl?file=/src/App.js","state":"open","updated_at":"2023-06-19T15:39:40Z","created_at":"2023-05-14T13:03:58Z","creator_user_login":"drcmda"}
{"number":26813,"title":"Remove redundant __DEV__ check in jsxWithValidation function","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe `jsxWithValidation` function has an unnecessary check for `__DEV__` occurring within an existing `__DEV__` condition.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nThe `__DEV__` condition is already being checked at line 298, making the subsequent `__DEV__` check within the same scope redundant and unnecessary for the function's operation.","state":"open","updated_at":"2023-05-14T11:32:47Z","created_at":"2023-05-14T11:22:00Z","creator_user_login":"tooooo1"}
{"number":26811,"title":"Update README.md","body":"correct grammatical errors\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\ncorrect grammatical errors\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-27T21:41:41Z","created_at":"2023-05-14T03:32:26Z","creator_user_login":"Mohiit70"}
{"number":26809,"title":"Example of missing case for dependency analysis","body":"## Summary\r\n\r\nI discovered this case while exploring optimizations for callbacks in React Forget:\r\n\r\n```javascript\r\nfunction Foo() {\r\n  let tab = \"foo\";\r\n  useEffect(() => {\r\n    // Closure captures the binding, sees value at time of call ('bar')\r\n    if (tab === \"foo\") {\r\n      return;\r\n    }\r\n    log(tab);\r\n    // dependency array captures value at time of render ('foo')\r\n  }, [tab]);\r\n  // TODO: it should be an error to capture a non-constant value\r\n  tab = \"bar\"; \r\n  return <Tab tab={tab} />;\r\n}\r\n```\r\n\r\nIn addition to checking that dependencies are exhaustive, we also need to ensure that the bindings are _effectively_ constant as of the creation of the closure. In the above example, the problem isn't that `tab` is a `let` binding, but that `tab` is reassigned after the closure. Note, however, that you can't simply look for reassignments of `tab` that are \"after\" the closure in source code order. A correct analysis would find any possible reassignment of `tab` (including in other closures) which could occur after the creation of the closure _at runtime_. This requires a sophisticated static analysis such as what we have in Forget. So for now we can't really fix this (except maybe obvious cases like the one here). I'm adding just so we have it documented somewhere, i'm not sure if there's a way to skip eslint examples.\r\n\r\n## How did you test this change?\r\n\r\n`yarn test`","state":"open","updated_at":"2023-05-12T16:41:12Z","created_at":"2023-05-12T15:49:37Z","creator_user_login":"josephsavona"}
{"number":26806,"title":"Built-in Form Handling","body":"Forms are a fundamental part of most web applications, and React could provide a built-in solution for handling form state and validation. A standardized approach to form handling within React would simplify development and reduce the need for third-party libraries. ","state":"open","updated_at":"2023-07-03T17:22:06Z","created_at":"2023-05-12T08:02:58Z","creator_user_login":"NkOffiCiAL07"}
{"number":26805,"title":"Bug: Unable to type new character when textarea is focused, happen when using Japanese IME on IOS","body":"  **Description**: This bug happens when I use Japanese (Kana) virtual keyboard on IOS, browser: safari or google chrome, with <texarea /> and a button that will clear textarea value focus back to it (like when you press send button in messenger). Then, when I press the button, textarea will be clear (state is set to \"\") and focus, but cannot type anything. I notice that the suggestion bar still there, so maybe it because the composition event, in this case, the composition may not end yet. I can avoid this happening by press confirm button on virtual keyboard **(確定)** before press send, but I don't think that how it should be, cause I can press button and focus back to textarea without any problems in Android. I'm not sure if this bug belong to IOS IME it self or React, but if anyone can figure out how to solve this, plz help me\r\n  - bug video: https://screenpal.com/watch/c0hlh7VA6s2\r\n  - code: https://stackblitz.com/edit/react-ts-pao9wf?file=App.tsx\r\n  - this bug also happen with messenger when I tried to use it in iPhone browser: https://screenpal.com/watch/c0e2iCV4Odr\r\n  I've tried many other react chat web app, but it met the same problem.\r\n\r\nReact version: 16.6 and 17.0.2\r\n\r\n## Steps To Reproduce\r\nDevice: iPhone, IOS ver: any version, virtual keyboard: Japanese or Chinese, browser: Safari, google chrome\r\nStep:\r\n1. Type any Japanese character to the textarea (except for **(確定)**), then press the button that clear this textarea and focus to it (keyboard remains open during process)\r\n2. Try to type other character, the cursor disappears, and none of the character is displayed, while the suggestion bar still have suggestion word\r\n\r\n```\r\nimport React, { useRef, useState, useCallback } from 'react';\r\nimport './style.css';\r\n\r\nexport default function App() {\r\n  const textAreaRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const [inputText, setInputText] = useState('');\r\n  const [areaText, setAreaText] = useState('');\r\n\r\n  const handleReFocusTextarea = () => {\r\n    setAreaText('');\r\n    textAreaRef.current.focus();\r\n  };\r\n  const handleReFocusInput = () => {\r\n    setInputText('');\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <input\r\n          className=\"input-field\"\r\n          ref={inputRef}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          value={inputText}\r\n        />\r\n        <button className=\"button\" onClick={handleReFocusInput}>\r\n          Re-Focus Input\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <textarea\r\n          className=\"textarea-field\"\r\n          ref={textAreaRef}\r\n          onChange={(e) => setAreaText(e.target.value)}\r\n          value={areaText}\r\n        />\r\n        <button className=\"button\" onClick={handleReFocusTextarea}>\r\n          Re-Focus Textarea\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nLink to code example:  https://stackblitz.com/edit/react-ts-pao9wf?file=App.tsx\r\n\r\n## The current behavior\r\nCan not type any other character\r\n## The expected behavior\r\nThe suggestion bar resets, and can type other character\r\n\r\nSo sorry for my bad English!","state":"open","updated_at":"2023-05-25T02:46:53Z","created_at":"2023-05-12T05:49:54Z","creator_user_login":"ytutyg0"}
{"number":26801,"title":"Bug: Don't crash the app if an async component is accidentally used on the client","body":"We don't yet officially support async/await in client components. (Refer to the RFC for more details: https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md#why-cant-client-components-be-async-functions)\r\n\r\n\r\nConfusingly, though, it does sometimes work, because the primitives are there to support it in the future.\r\n\r\nHowever, if you accidentally render an async component on the client (for example, when refactoring a Server Component to a client one), React should fail gracefully. Right now, in some cases, it will instead crash the app by falling into an infinite loop.\r\n\r\nLet's use this issue to track how we'll improve the DX for preventing async components (and async/await data fetching more generally) on the client.\r\n\r\nThis is _not_ about implementing support for async/await on the client. Although we will probably do that eventually, for now we're just focused on making it fail more gracefully.\r\n\r\nIn the meantime, if you're using a Server Components enabled framework like Next.js, you should prefer to do as much data fetching as possible in Server Components. For the remaining client cases, use an established framework like useSWR or React Query.\r\n\r\n- [ ] Detect and prevent an infinite loop caused by when uncached promise is rendered outside of a Suspense boundary.\r\n- [ ] Add a warning if an uncached promise is detected outside of a transition.","state":"open","updated_at":"2023-07-13T07:40:38Z","created_at":"2023-05-10T17:20:51Z","creator_user_login":"acdlite"}
{"number":26792,"title":"Allow wrapping context provider in lazy","body":"Is it OK to `export ContextProvider = Context.Provider;` from a `use client` file? If so, behold.\r\n","state":"open","updated_at":"2023-05-08T06:51:19Z","created_at":"2023-05-08T06:47:00Z","creator_user_login":"sophiebits"}
{"number":26790,"title":"Allow non-latin characters in hook and component names","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nCurrently, `react-hooks/rules-of-hooks` will emit an error that a hook is not valid if it starts with a non-latin character after `use`. I've updated the regular expressions to use [unicode property escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape), allowing people to write code in their native language if they wish to do so.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI tested the code with two symbols that are part of the Icelandic alphabet, ash and thorn. Before these changes, hooks like `useÞursakóði` or `useÆði` would fail. I also wrote tests to make sure that the lowercase form of the two would not be detected as hooks (`useþursakóði` and `useæði`).","state":"open","updated_at":"2023-05-10T11:21:52Z","created_at":"2023-05-07T20:43:04Z","creator_user_login":"hph"}
{"number":26789,"title":"Add support for onScrollEnd event","body":"## Summary\r\n\r\nThis adds support for the new [scrollend](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event) event. It was recently added to the spec, and is currently supported in Firefox 109 and Chrome Canary (shipping in Chrome 114). You can read more about this event [here](https://developer.chrome.com/blog/scrollend-a-new-javascript-event/). This PR adds support for the `onScrollEnd` prop, following the implementation for `onScroll`.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nAdded unit tests.\r\n","state":"open","updated_at":"2023-05-30T22:42:52Z","created_at":"2023-05-07T05:48:43Z","creator_user_login":"devongovett"}
{"number":26778,"title":"fixes #26777","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nIt's fixes #26777\r\n\r\n## How did you test this change?\r\n\r\nI add this in my browser extension, and the error in console is gone.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-04T15:43:37Z","created_at":"2023-05-04T08:54:24Z","creator_user_login":"lmk123"}
{"number":26776,"title":"refactor: rewrite classNames logic","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nUse arrow function instead function.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nJust code simplification, no test cases needed.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-31T03:39:43Z","created_at":"2023-05-04T07:36:15Z","creator_user_login":"li-jia-nan"}
{"number":26775,"title":"style: simplify code","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nCombine two conditions that need to be returned into one.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nJust code simplification, no test cases needed.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-31T03:41:12Z","created_at":"2023-05-04T07:33:51Z","creator_user_login":"li-jia-nan"}
{"number":26763,"title":"Pass lanes as argument to performSyncWorkOnRoot","body":"`performSyncWorkOnRoot` has only a single caller, and the caller already computes the next lanes (`getNextLanes`) before deciding to call the function. So we can pass them as an argument instead of computing the lanes again.\r\n\r\nThere was already a TODO comment about this, but it was mostly perf related. However, @rickhanlonii noticed a discrepancy where the inner `getNextLanes` call was not being passed the current work-in- progress lanes. Usually this shouldn't matter because there should never be work-in-progress sync work; it should finish immediately. There is one case I'm aware of where we exit the work loop without finishing a sync render, which is selective hydration, but even then it should switch to the sync hydration lane, not the normal sync lane. So something else is probably going on. I suspect it might be related to the `enableUnifiedSyncLane` experiment.\r\n\r\nThis is likely related to a regression found internally at Meta. We're still working on getting a proper regression test; I can come up with a contrived one but I'm not confident it'll be the same as the actual regression until we get a better repro.","state":"open","updated_at":"2023-05-02T20:34:57Z","created_at":"2023-05-02T20:30:55Z","creator_user_login":"acdlite"}
{"number":26760,"title":"[Float] treat `props.async` in Float consistent with the rest of react-dom","body":"Treat async (boolean prop) consistently with Float. Previously float checked if `props.async === true` (or not true) but the rest of react-dom considers anything truthy that isn't a function or symbol as `true`. This PR normalizes the Float behavior.","state":"open","updated_at":"2023-05-03T18:52:11Z","created_at":"2023-05-02T16:03:47Z","creator_user_login":"gnoff"}
{"number":26758,"title":"[DevTools Bug] Commit tree already contains fiber \"3289\". This is a bug in React DevTools.","body":"### Website or app\n\nno-url.com\n\n### Repro steps\n\nTrying to navigate between the graphs.\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.6-7f8c501f6\n\n### Error message (automated)\n\nCommit tree already contains fiber \"3289\". This is a bug in React DevTools.\n\n### Error call stack (automated)\n\n```text\nat updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27498:19)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27430:20)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27959:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:46157:33)\r\n    at Bf (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13715:7)\r\n    at dh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14781:7)\r\n    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18235:86)\r\n    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17769:11)\r\n    at pk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17658:23)\r\n    at Ze (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17638:5)\n```\n\n\n### Error component stack (automated)\n\n```text\nat CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:46140:34)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38425:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56259:34)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39958:5)\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40130:3)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40160:5)\r\n    at div\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40130:3)\r\n    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:45411:3)\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44839:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32649:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33298:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40555:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56766:3)\n```\n\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Commit tree already contains fiber . This is a bug in React DevTools. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-05-19T09:09:07Z","created_at":"2023-05-02T12:21:37Z","creator_user_login":"pankajsoni91"}
{"number":26755,"title":"Warn when formAction is used without a form","body":"","state":"open","updated_at":"2023-05-09T23:49:00Z","created_at":"2023-05-01T20:59:01Z","creator_user_login":"sophiebits"}
{"number":26750,"title":"Bug: Error: Should have a queue. This is likely a bug in React. Please file an issue.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. For the code example below, launch the development server and connect to http://localhost:17030/\r\n2. Click ![Screenshot 2023-05-01 at 17 07 31](https://user-images.githubusercontent.com/8164191/235426944-3f6bccff-97ce-49c2-9d39-ecd235bde346.JPG) button.\r\n3. Open `src/hooks/useGameContent.ts` in the code editor, uncomment line 17 and save.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/ony3000/1to30/tree/error-reporting\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n![Screenshot 2023-05-01 at 16 38 38](https://user-images.githubusercontent.com/8164191/235427767-723079bb-5491-437e-82a4-b736b33c126a.JPG)\r\n\r\n\r\n## The expected behavior\r\nHot module replacement without errors.","state":"open","updated_at":"2023-05-10T12:33:14Z","created_at":"2023-05-01T08:34:09Z","creator_user_login":"ony3000"}
{"number":26747,"title":"Reacciones chromo ","body":"https://github.com/facebook/react/issues/new?labels=Component:%20Developer%20Tools","state":"open","updated_at":"2023-05-31T01:58:11Z","created_at":"2023-04-30T05:20:27Z","creator_user_login":"SerchVet"}
{"number":26746,"title":"Failing unit test for infinite render issue","body":"I can't figure out what reproduces this via e2e tests, but this is the root data structure that causes it so I wrote a unit test to demonstrate it. It happens when `root === workInProgress` and the `workInProgressRootRenderLanes` is the sync lane. \r\n\r\nIn that case, the `nextLane` is the sync lane for the work in progress, so we go into `performSyncWorkOnRoot`:\r\n\r\n```js\r\n// paraphrased\r\ndo {\r\n  let = didPerformSomeWork = false\r\n  const nextLanes = getNextLanes(\r\n    root,\r\n    // 🚨 workInProgressRoot includes sync lane\r\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\r\n    );\r\n    if (includesSyncLane(nextLanes)) {\r\n      // TODO: Pass nextLanes as an argument instead of computing it again\r\n      // inside performSyncWorkOnRoot.\r\n      didPerformSomeWork = true;\r\n      performSyncWorkOnRoot(root);\r\n    }\r\n    // ...  \r\n} while (didPerformSomeWork) // 🚨 Always true\r\n```\r\nBut inside `performSyncWorkOnRoot`, these lines early return and do not account for the work in progress lanes:\r\n\r\n```js\r\n  // TODO: This was already computed in the caller. Pass it as an argument.\r\n  let lanes = getNextLanes(root, NoLanes);  // 🚨 Doesn't include workInProgressRoot\r\n  if (!includesSyncLane(lanes)) {\r\n    // There's no remaining sync work left.\r\n    ensureRootIsScheduled(root);\r\n    \r\n    // 🚨 Returns even though sync work remains in workInProgressRoot\r\n    return null;\r\n  }\r\n```\r\n\r\nSo the do/while loop never ends, we just keep detecting that there's sync work to do in the outter function but early returning without doing any work in the inner function.\r\n\r\nI think the fix is to complete the TODOs and ensure the same `nextLanes` are used to flush the sync work.","state":"open","updated_at":"2023-04-29T18:04:05Z","created_at":"2023-04-29T17:32:21Z","creator_user_login":"rickhanlonii"}
{"number":26745,"title":"fix(checkControlledValueProps): do not suggest setting readOnly for select component","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n### Motivation:\r\nI encountered a warning in React when writing a select component:\r\n```\r\nWarning: You provided a `value` prop\r\nto a form field without an `onChange` handler. This will render\r\na read-only field. If the field should be mutable use `defaultValue`. \r\nOtherwise, set either `onChange` or `readOnly`.\r\n```\r\nThis warning is misleading because it suggests setting readOnly as a possible solution when in reality the select component [does not support it](https://react.dev/reference/react-dom/components/select).\r\n\r\n### What my fix consists of:\r\nI added a check in `checkControlledValueProps` to distinguish whether the mounted component is a select component.\r\n\r\nNow, if you write:\r\n\r\n```\r\n<select value=\"avalue\">\r\n    <option value=\"avalue\">avalue</option>\r\n</select>\r\n```\r\n\r\nYou will receive the following warning:\r\n```\r\nWarning: You provided a `value` prop\r\nto a form field without an `onChange` handler. This will render\r\na read-only field. If the field should be mutable use `defaultValue`. \r\nOtherwise, set `onChange`.\r\n```\r\n\r\nWhereas if you write either of the following:\r\n\r\n```\r\n<input type=\"text\" value=\"avalue\"></select>\r\n\r\n<textarea value=\"avalue\"></select>\r\n```\r\n\r\nYou will receive the old warning:\r\n```\r\nWarning: You provided a `value` prop\r\nto a form field without an `onChange` handler. This will render\r\na read-only field. If the field should be mutable use `defaultValue`. \r\nOtherwise, set either `onChange` or `readOnly`.\r\n```\r\n\r\n## How did you test this change?\r\n- I added extensive unit tests to `ReactDOMSelect-test.js` to ensure the correct behavior of the warning message.\r\n- I edited existing related unit tests in `ReactDOMInput-test.js` to test the entire warning message which is now relevant.\r\n- I added unit tests to `ReactDOMTextarea-test.js` to ensure correct behavior in that component, as they were missing.\r\n- I performed some tests in `/fixtures/packaging/babel-standalone`.\r\n- I run the entire test suite, with production flag as well.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-04-29T11:19:48Z","created_at":"2023-04-29T09:35:59Z","creator_user_login":"oxcened"}
{"number":26737,"title":"Bug: Repeated state setter callbacks when callback throws","body":"It's a minor thing, but confusing: If you call a `useState` state setter and the callback throws, React calls the state setter callback twice more before allowing the error to propagate to the console (then twice more after that, with a development build). This obscures the nature of the error. I'd expect the callback to be called just once. This happens both with dev and prod builds of the library (though the number of calls varies), and without `StrictMode`.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Call a state setter passing in a callback that throws\r\n\r\nLink to code example: https://codesandbox.io/s/react-state-setter-oddity-40jgq5?file=/src/index.js (but look in the actual console, not the CodeSandbox console, it doesn't show everything).\r\n\r\n```js\r\nfunction App() {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const update = () => {\r\n        console.log(\"calling state setter\");\r\n        setValue((v) => {\r\n            console.log(\"state setter callback called\");\r\n            if (Math.random() < 1) {\r\n                //           ^^^^ Always true, just to fool ESLint\r\n                throw new Error(\"!!\"); // <== Stand-in for code that throws unexpectedly\r\n            }\r\n            console.log(\"state setter callback returned\");\r\n            return v + 1;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div>Value: {value}</div>\r\n            <input type=\"button\" onClick={update} value=\"Update\" />\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nIn development, calling `update` causes the state setter callback to be called a total of five times: Three prior to the error being reported in the console, then twice more, with the error appearing a total of three times.\r\n\r\n```text\r\ncalling state setter\r\nstate setter callback called\r\nstate setter callback called\r\nstate setter callback called\r\nUncaught Error: !!\r\n    at ...\r\nstate setter callback called\r\nstate setter callback called\r\nUncaught Error: !!\r\n    at ...\r\nThe above error occurred in...\r\nUncaught Error: !!\r\n    at ...\r\n```\r\n\r\nWIth a production build, the state setter callback is called three times, and the error reported twice (https://thenewtoys.dev/temp/react-repeating-state-setter):\r\n\r\n```text\r\ncalling state setter\r\nstate setter callback called\r\nstate setter callback called\r\nstate setter callback called\r\nError: !!\r\n    at ...\r\nUncaught Error: !!\r\n    at ...\r\n```\r\n\r\n## The expected behavior\r\n\r\nCalling `update` should cause the state setter callback to be called just once, and the error to be reported just once.\r\n\r\n```text\r\ncalling state setter\r\nstate setter called\r\nUncaught Error: !!\r\n    at ...\r\nThe above error occurred in...\r\n```\r\n\r\nAs I say, it's a minor thing, but the current behavior obscures the nature of the error. In my case, the error I was getting *seemed* to be a result of the repeated (seemingly-recursive) calls to the callback, so I was looking for a way **my code** could be doing that (since [`select` isn't broken](https://pragprog.com/tips/#:~:text=%E2%80%9Cselect%E2%80%9D%20Isn%27t%20Broken) :-) ). But eventually I realized it was **React** doing the repeated calls.","state":"open","updated_at":"2023-04-28T10:45:59Z","created_at":"2023-04-28T10:45:36Z","creator_user_login":"farsightsoftware"}
{"number":26736,"title":"Bug: Blinking and blank situations when using createRoot to render fast scrolling in React18","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.Blinking and blank situations when using createRoot to render fast scrolling in React18\r\n2.Using ReactDOM. render (, document. getElementById ('root ')) is normal\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/cold-sea-2jt1zv\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-05-19T08:10:49Z","created_at":"2023-04-28T06:45:22Z","creator_user_login":"shijunfeng"}
{"number":26731,"title":"Bug: ESLint - Custom hook in a typescript class method trigger an error about class component","body":"<!--Brief description-->\r\n\r\nWhen I create a custom hook in a simple Typescript class, ESLINT is giving me this error : \r\n\r\n`React Hook \"useState\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function  react-hooks/rules-of-hooks`\r\n\r\nHowever, this is not an expected error because I am not working  with a class component.\r\n\r\nIt should not trigger any error OR at least trigger a specific, adapted error if anything.\r\n\r\n**Standard implementation (classic function based) for reference :** \r\n\r\n```ts\r\nfunction useMyCustomHookFunction(){\r\n    return useState(\"this-is-a-test-1\");\r\n}\r\n```\r\n\r\n```ts\r\nconst [test1, setTest1] = useMyCustomHookFunction()\r\n\r\nreturn (\r\n    <>\r\n         <p>From function: {test1}</p>\r\n    </>\r\n)\r\n```\r\n\r\nThis works well, my output is : \r\n```\r\nFrom function: this-is-a-test-1\r\n```\r\n\r\n**Class+method based implementation :**\r\nThis implementation works but trigger the unexpected error (React Hook \"useState\" cannot be called in a class component).\r\n\r\n```ts\r\nclass TestHook {\r\n\r\n    private initialValue = \"this-is-a-test-2\"\r\n    \r\n    public useMyCustomHookMethod(){\r\n        return useState(this.initialValue);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n```ts\r\nconst testInstance = new TestHook()\r\nconst [test2, setTest2] = testInstance.useMyCustomHookMethod()\r\n\r\nreturn (\r\n    <>\r\n        <p>From method: {test2}</p>\r\n    </>\r\n)\r\n```\r\nOutput :\r\n```\r\nFrom method: this-is-a-test-2\r\n```\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nI expect no warning/error when implementing a custom hook in a method OR a specific error targeting custom hook in simple class method if any reason to disallow that.\r\n\r\n### Note \r\n\r\nThis error is not limited to \"useState\". Any hook used is concerned (useEffect, useMutation for React Query, etc.)","state":"open","updated_at":"2023-05-09T16:25:38Z","created_at":"2023-04-26T07:11:47Z","creator_user_login":"nbrignol"}
{"number":26730,"title":"feat: added dynamic class-name feature via `classNames` attribute","body":"## Summary\r\n\r\nThe proposed feature is to add a new syntax for dynamically adding classes to React components. This syntax would be similar to the `ngClass` directive in Angular, allowing developers to use a classNames attribute to add or remove classes based on certain conditions.\r\n\r\n[View RFC](https://github.com/reactjs/rfcs/pull/248)\r\n\r\n## How did you test this change?\r\n\r\n1. I ran `yarn build react/index,react-dom/index --type=UMD`\r\n2. Made changes in `fixtures/packaging/babel-standalone/dev.html` as follows:\r\n\r\n```html\r\n    <script type=\"text/babel\">\r\n      const isHovering = false;\r\n      const isDisabled = true;\r\n      ReactDOM.render(\r\n        <button classNames={[\r\n          \"primary\",\r\n          [\"teal\", \"semi-transparent\", isHovering && [\"hover\", \"darken-2\"]],\r\n          {loading: true, 'is-disabled': isDisabled},\r\n          undefined,\r\n          false,\r\n          null,\r\n          `custom-class`\r\n        ]}>Click Me!</button>,\r\n        document.getElementById('container')\r\n      );\r\n    </script>\r\n```\r\n\r\n  and output was generated as expected\r\n```html\r\n<div id=\"container\">\r\n  <button class=\"primary teal semi-transparent loading is-disabled custom-class\">Click Me!</button>\r\n</div>\r\n```\r\n\r\nRelated Issues\r\n#3138, #16705, #20050\r\n","state":"open","updated_at":"2023-05-02T04:57:02Z","created_at":"2023-04-26T03:32:09Z","creator_user_login":"vijaypushkin"}
{"number":26713,"title":"Bug: React 18 (18.2.0) skips renders in Safari even when props change","body":"It seems that React 18 in Safari is not rendering every render call when the props have changed. \r\n\r\nIt is possible that I don't understand something about React 18's rendering, however, this is not reproducible in React 17 (or in React 18 without `createRoot`) or in React 18 with Firefox or Chrome, which leads me to think that this is a bug.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n- a component that uses state to remember previous props\r\n- quickly call render on a React18 `createRoot` and view the app in latest Safari (desktop or mobile)\r\n- you will see that react sometimes skips renders and the state of the component will be missing some of the props that should have been passed in.\r\n\r\nThis behavior is not reproducible in React 17 or in React 18 with Firefox or Chrome.\r\n\r\nLink to code example: [React18SafariSkipRenderPropsChanged](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged) is a github repo that demonstrates this bug. You can clone it to reproduce it yourself.\r\n\r\n## The current behavior\r\n\r\nSafari React 18 skips rendering some prop changes so the component misses updates that only happen once.\r\n\r\n## The expected behavior\r\n\r\nAll prop changes get rendered so that they can be recorded in state by all components if necessary in Safari.\r\n\r\nPlease let me know if you have any questions about this bug report, or the attached code repository. I'd love to help explain this bug, or learn what I'm doing wrong. Thanks!\r\n\r\n## Explanation of linked code repository\r\n\r\nThis is from [React18SafariSkipRenderPropsChanged](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged)'s README:\r\n\r\nThis is either a demonstration of a bug with React 18 (18.2.0) in Safari, or a demonstration of\r\nhow I don't quite understand React rendering.\r\n\r\nIt seems that React 18 in Safari is not always rendering every render call, even if the props have\r\nchanged. Is this a bug?\r\n\r\nThis is a very small portion of a React/Typescript/Python game that I've been coding. This is a\r\nvery trimmed down demonstration of the bug.\r\n\r\nThe game displays a text log of the players' actions. These messages get sent from the server,\r\nusually one at a time. Sometimes these messages arrive in quick succession, ms apart. I don't have\r\nthe game server send all of the log messages every time, only the latest message. So the log needs\r\nto retain previous messages to have them continue to be displayed to the user.\r\n\r\nIn this bug demonstration app there are two Components:\r\n\r\n- [LogWithState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithState.tsx) is the simplification of the Log from my game. It uses\r\n  state to remember previous messages and then loops through all the messages to display them.\r\n- [LogWithoutState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithoutState.tsx) takes an array of messages and loops through and\r\n  displays them all. This is a workaround solution for React 18 rendering in Safari. For this to\r\n  work, the app remembers the list of previous messages in Typescript not in the React component.\r\n\r\n[LogWithState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithState.tsx) uses `useState` to record the full list of messages in the\r\n`Log` component. This worked fine with React17's render call. When I upgraded to React18 and\r\n`createRoot` I noticed that log messages were sometimes missing. Recently I discovered that this is\r\nnot reproducible in Firefox or Chrome, but is easily reproducible in Safari 16.4 and Safari Mobile\r\niOS 16.4.1 (the latest versions as of 2023-04-21) both on my devices and on at least one other device.\r\n\r\nThe html for this demo has two root nodes for react. We use `ReactDOM` from React 17 to render into\r\n`react17-root`. We use `createRoot` and React 18's `render` to render into `react18-root`.\r\n\r\nIn the React 17 dom we render [LogWithState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithState.tsx) to demonstrate that this works fine.\r\n\r\nIn the React 18 dom, we render two different components. [LogWithState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithState.tsx) and [LogWithoutState](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/blob/main/src/LogWithoutState.tsx).\r\n\r\nAs you can hopefully see for yourself, \"LogWithState - React 17\" and \"LogWithoutState - React 18\"\r\ndisplay all 10 of the log messages. \"LogWithState - React 18\" should be missing some of the logs.\r\nBelow is an example screenshot on my machine:\r\n\r\n![screenshot of the bug in action](https://github.com/evanbernstein/React18SafariSkipRenderPropsChanged/raw/main/bug-screenshot.png)\r\n","state":"open","updated_at":"2023-08-14T13:50:53Z","created_at":"2023-04-24T14:21:37Z","creator_user_login":"evanbernstein"}
{"number":26712,"title":"Bug: useEffect behaviour changes leading to malfunctioning of code","body":"React 17:\r\nhttps://codesandbox.io/p/sandbox/recursing-goldwasser-fde16r?selection=%5B%7B%22endColumn%22%3A37%2C%22endLineNumber%22%3A4%2C%22startColumn%22%3A37%2C%22startLineNumber%22%3A4%7D%5D&file=%2Fpages%2Findex.js\r\n\r\nReferring to the above codesandbox, the scrollup menu works well in react 17 but the transition does not appear in react 18. Problem is possibly with useEffect. What is the problem?\r\n\r\nI tried on React 17 and React 18. In react 17 the scroll up transition display correctly, but in react 18 the scroll up transition is missing.\r\n\r\nReact 18: https://codesandbox.io/p/sandbox/dreamy-resonance-hdosok\r\n\r\nThis is the problem in react 18. Is there any workaround to change back the behaviour of react 17 or how to keep the component structure while making the behaviour of react 17?\r\n\r\n\r\n## The current behavior\r\nhttps://codesandbox.io/p/sandbox/dreamy-resonance-hdosok\r\n\r\n## The expected behavior\r\nhttps://codesandbox.io/p/sandbox/recursing-goldwasser-fde16r?selection=%5B%7B%22endColumn%22%3A37%2C%22endLineNumber%22%3A4%2C%22startColumn%22%3A37%2C%22startLineNumber%22%3A4%7D%5D&file=%2Fpages%2Findex.js\r\n","state":"open","updated_at":"2023-04-29T06:00:14Z","created_at":"2023-04-24T13:13:51Z","creator_user_login":"kelvinkaicheung"}
{"number":26705,"title":"Bug: link order been messed up after upgrade to next version","body":"the link order inside head element has been messed up after upgrade to next version\r\n\r\nReact version: 18.3.0-next-c8369527e-20230420\r\n\r\n## Steps To Reproduce\r\n\r\n1. clone the code example\r\n2. follow the readme\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/lili21/remix-react_next\r\n\r\n## The current behavior\r\nthe link order is\r\n\r\n![image](https://user-images.githubusercontent.com/4456380/233836084-9d6bd38f-da76-447a-8c30-9d8fc8aaffd5.png)\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nthe link order should be \r\n\r\n![image](https://user-images.githubusercontent.com/4456380/233836130-68ef9718-ec53-4cf4-9de4-5c7b1b1692b0.png)\r\n","state":"open","updated_at":"2023-06-25T22:31:36Z","created_at":"2023-04-23T11:05:49Z","creator_user_login":"lili21"}
{"number":26703,"title":"Bug: The prs welcome icon navigates to a webpage from the old docs","body":"<!--\n  Please provide a clear and concise description of what the bug is. Include\n  screenshots if needed. Please test using the latest version of the relevant\n  React packages to make sure your issue has not already been fixed.\n-->\n\nReact version: The repo\n\n## Steps To Reproduce\n\n1. Click the prs welcome icon\n\n<!--\n  Your bug will get fixed much faster if we can run your code and it doesn't\n  have dependencies other than React. Issues without reproduction steps or\n  code examples may be immediately closed as not actionable.\n-->\n\n\n## The current behavior\nIt navigates you to a page from the old docs\n\n## The expected behavior\n\nSuggestion: A page from the react.dev docs.\nGladly would check if one exists or help make a page as such\n\nReact will stay the #1 open source🚀","state":"open","updated_at":"2023-04-23T20:54:24Z","created_at":"2023-04-22T21:12:07Z","creator_user_login":"itaim18"}
{"number":26702,"title":"build: use ReactDOM.createRoot instead of ReactDOM.render","body":"## Summary\r\n\r\nUpdate dev.html based on new api.\r\n\r\n## How did you test this change?\r\n\r\nI just changed from `render` to `createRoot` and run it locally, no need to add test case.","state":"open","updated_at":"2023-04-25T03:27:31Z","created_at":"2023-04-22T10:59:01Z","creator_user_login":"StefanoMartella"}
{"number":26701,"title":"[DRAFT] Use gate pragmas in ReactDOMForm tests","body":"\r\n\r\n## Summary\r\n\r\nUse static gate pragmas instead of dynamic gates.\r\n\r\n## How did you test this change?\r\n\r\n- [x] Ran test with stable (applies gates) and experimental (no gates) release channel\r\n- [ ] CI (suspecting that prod might be the issue)","state":"open","updated_at":"2023-04-22T08:35:32Z","created_at":"2023-04-22T08:30:33Z","creator_user_login":"eps1lon"}
{"number":26690,"title":"Bug:  Does React automatically handle scrolling for me? ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\nNULL\r\n\r\n## Steps To Reproduce\r\nI provided both a vanilla JS version and a React version and found that there are differences between the two. \r\nAfter entering the webpage, click the \"L button\" first, move the scrollbar to the bottom,\r\nthen click the \"M button\", and then click the \"L button\" again. \r\n\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/react-scroll-top-cvge7z \r\nhttps://codesandbox.io/s/vanilla-scroll-top-yckxwd\r\n\r\n\r\n\r\n\r\n## The expected behavior\r\nYou can see that in React, the scrollbar is at the bottom, while in vanilla JS it behaves as expected.\r\n\r\n![image](https://user-images.githubusercontent.com/2993320/233591065-258375da-7cf1-42dc-bc58-3b0f2cca4570.png)\r\n![image](https://user-images.githubusercontent.com/2993320/233591174-3d823b5b-e2d1-4a75-8766-3f34aea23600.png)\r\n\r\n","state":"open","updated_at":"2023-04-24T02:29:11Z","created_at":"2023-04-21T08:50:05Z","creator_user_login":"kajweb"}
{"number":26683,"title":"refactor: code redundance","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nrefactor bubbleProperties method in file ReactFiberCompleteWork.js. handle code redundance problem.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nJust handle code redundance problem, so no test code added.\r\n![image](https://user-images.githubusercontent.com/65998645/233318586-2dd840b4-8116-4ce0-84b3-b49feac76bac.png)\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-04-20T09:23:34Z","created_at":"2023-04-20T09:11:42Z","creator_user_login":"Blithe07"}
{"number":26679,"title":"Update createElement link reference from reactjs.org to react.dev","body":"Just changed the link reference of createElement from \"https://legacy.reactjs.org/docs/react-api.html#createelement\" to \"https://react.dev/reference/react/createElement\".\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-04-20T01:56:38Z","created_at":"2023-04-20T01:52:33Z","creator_user_login":"DevEsteves"}
{"number":26676,"title":"CONTRIBUTING.md new URL","body":"Our CONTRIBUTING.md refers the legacy site: https://github.com/facebook/react/blob/main/CONTRIBUTING.md \r\n\r\nI couldn't find the new how-to-contribute site from react.dev. If someone know the url for that one, should we update the CONTRIBUTING.md?","state":"open","updated_at":"2023-05-23T19:37:46Z","created_at":"2023-04-19T20:35:28Z","creator_user_login":"akirataguchi115"}
{"number":26672,"title":"Bug: useSyncExternalStore shim does not work on react-native 0.63","body":"window.document.createElement is undefind in react-native.\r\nAs a result, the shim returns useSyncExternalStoreShimServer, which did not really imple useSyncExternalStore.\r\nOther third-party dependencies depend on the shim also does not work in react-native 0.63\r\n\r\nReact version: 16.13.1\r\nuse-sync-external-store version: 1.2.0\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nuseSyncExternalStore shim refers to useSyncExternalStoreShimServer in execuation environment without document.\r\n\r\n## The expected behavior\r\nuseSyncExternalStore returns correct shim in react-native","state":"open","updated_at":"2023-04-19T14:52:19Z","created_at":"2023-04-19T14:52:19Z","creator_user_login":"wx-shen"}
{"number":26670,"title":"Bug: `useInsertionEffect()` cleanup function does not fire if a component is wrapped in React.lazy","body":"React version: 18.2.0\r\n\r\n## Reproduction\r\n\r\n```ts\r\nimport { lazy, useState, useInsertionEffect, Suspense } from \"react\";\r\n\r\nexport default function App() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Suspense>{show ? <LazyComp2 /> : <LazyComp1 />}</Suspense>\r\n      <button onClick={() => setShow((s) => !s)}>Toggle</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MyComp = () => {\r\n  useInsertionEffect(() => {\r\n    console.log(\"start1\");\r\n    return () => {\r\n      console.log(\"stop1\");\r\n    };\r\n  }, []);\r\n};\r\n\r\nconst MyComp2 = () => {\r\n  useInsertionEffect(() => {\r\n    console.log(\"start2\");\r\n    return () => {\r\n      console.log(\"stop2\");\r\n    };\r\n  }, []);\r\n};\r\n\r\nconst LazyComp1 = lazy(() => Promise.resolve({ default: MyComp }));\r\nconst LazyComp2 = lazy(() => Promise.resolve({ default: MyComp2 }));\r\n```\r\n\r\nClick the button twice.\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/focused-burnell-ewgso1?file=/src/App.js:0-773\r\n\r\n## The current behavior\r\n\r\nLogs:\r\n\r\n```\r\nstart1\r\nstart2\r\nstop2\r\nstart1\r\n```\r\n\r\n## The expected behavior\r\n\r\n```\r\nstart1\r\nstop1\r\nstart2\r\nstop2\r\nstart1\r\n```\r\n\r\nThis is also the behavior of `useLayoutEffect` if not in strict mode.","state":"open","updated_at":"2023-08-20T13:45:48Z","created_at":"2023-04-19T09:57:00Z","creator_user_login":"JonnyBurger"}
{"number":26668,"title":"Update README.md to align with the react.dev website","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n[**Rendered README.md**](https://github.com/djfarly/react/blob/react-dev-readme/README.md)\r\n\r\nHej, I noticed that the the repository readme does not really reflect the changed introduced by the new react.dev website.\r\nSince the repo can still be the first touchpoint people have with react, I felt that it could be beneficial to update it.\r\n\r\nAt first I thought that it might be enough to fix the links but soon realised it requires a few more changes. Still, I tried to keep changes as minimal as possible. I mostly took over the wording from the new site.\r\n\r\n### Caveats and Open Questions\r\n\r\n- The contributing guide only exists on the legacy page. My guess is that because contributing to react is not easy, it wasn't a thing for the website anymore. Maybe this can be moved into this repo then at a later point?\r\n- Other README files still point to the old site. Those files require more drastic changes though (like the hooks API readme) so I kept it out of this pr.\r\n- One could think about linking to more or less sections of the new website, I wasn't sure about the right level of detail here…\r\n- The circle CI badge is broken (for me at least)\r\n- Prettier refuses to format the `README.md` (see Details)\r\n\r\n<details>\r\n\r\n```\r\nUnexpected token `#`, expected an identifier (1:1)\r\n> 1 | # [React](https://react.dev/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)\r\n    | ^\r\n```\r\n\r\n</details>\r\n\r\nMy general feeling is that this may require more general changes, but perhaps this can serve as a starting point.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI have checked the new README.md on GitHub ;) \r\n","state":"open","updated_at":"2023-05-22T18:05:50Z","created_at":"2023-04-19T07:13:11Z","creator_user_login":"djfarly"}
{"number":26662,"title":"Bug: React Dev tools blocks form submission with external API script.","body":"This may be exclusively an issue with Marketo web API and its methods but I spent 4 days trying everything to get a form to submit, watching the network tab to confirm that a post request to an endpoint was made onSubmit. I finally decided to disable React Dev Tools in Chrome after noticing the form submitted in Safari. At long last the submit worked. Any idea what in particular with devTools would have caused this?\r\n\r\n### Current Behavior\r\n`MktoForms2.submit()` never fires. Every other MktoForms2 method seems to work but this one does not. If I close the inspector tab or disable React dev tools it does\r\n\r\n### Expected Behavior\r\n`MktoForms2.submit()` should send a post request with form data to save2 regardless of the dev window and its extensions.","state":"open","updated_at":"2023-05-16T16:25:52Z","created_at":"2023-04-18T17:49:05Z","creator_user_login":"connorroane"}
{"number":26636,"title":"Bug: Incorrect behaviour when using React.lazy along with throwing a data promise in lazy loaded component for Server Side Rendered output","body":"I have a component that is code splitted and loaded via React.lazy in the parent component. There is a data promise inside the component that also throws a promise till it fetches the data. \r\n\r\nIdeally when hydrating components from server-side rendered content, the fallback of suspense should not be called, however with above setup it is called once.\r\n\r\nReact version: 18.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. create a component `child.ts`\r\n```typescript\r\nconst Child = () => {\r\n  // Sync script will be used by the hook useData for hydrating when receiving data from server side.\r\n  const {data, syncScript} = useData( /*uniqueKey*/ 'child.data', () => {\r\n    return fetch('/api/child/data').then(r => r.json());\r\n  })\r\n  return (\r\n    <div>\r\n      I am {data.name}. Load me Lazy!\r\n      {syncScript}\r\n    </div>\r\n  );\r\n}\r\n```\r\nuseData is a very simple hook that creates a promise outside the scope of component (store in local Map) thus avoiding creation of new promise with every render.\r\na rough example looks something like below:\r\n```typescript\r\n\r\n// We are not doing this on production, this is just for reference\r\nconst promiseMap = new Map();\r\nconst syncedData = new Map();\r\n\r\n/** the good old wrapPromise **/\r\nfunction wrapPromise(promise: Promise<any>, key: string) {\r\n  let status = \"pending\";\r\n  let result;\r\n  let suspender = promise.then(\r\n    (r) => {\r\n      status = \"success\";\r\n      result = r;\r\n      syncedData.set(key, r);\r\n    },\r\n    (e) => {\r\n      status = \"error\";\r\n      result = e;\r\n    }\r\n  );\r\n  return {\r\n    read() {\r\n      if (status === \"pending\") {\r\n        throw suspender;\r\n      } else if (status === \"error\") {\r\n        throw result;\r\n      } else if (status === \"success\") {\r\n        return result;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nconst useData<T> = (key: string, cb: (): Promise<T>) => {\r\n  if (syncedData.has(key)) {\r\n    return syncedData.get(key);\r\n  }\r\n  let dataPromise;\r\n  if (promiseMap.has(key)) {\r\n     dataPromise = promiseMap.get(key);\r\n  } else {\r\n    dataPromise = wrapPromise(cb());\r\n    promiseMap.set(key, dataPromise);\r\n  }\r\n  return dataPromise.read();\r\n}\r\n```\r\n \r\n2. Create a parent component that loads the child component via React.lazy as below:\r\n```typescript\r\nimport { lazy, Suspense } from 'react';\r\n\r\nconst Loader = () => (<p>Loading...</p>);\r\nconst LazyChild = lazy(() => import('./child'));\r\nconst Parent: FC = () => (\r\n  <Suspense fallback={<Fallback />}>\r\n    <LazyChild />\r\n  </Suspense>\r\n);\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The current behavior\r\nOn using hydrateRoot the Fallback component is mounted once. \r\n\r\n## The expected behavior\r\nthe Suspended component should be hydrated without fallback being called.\r\n\r\nInteresting to note, if I remove the React.lazy loading, then it works absolutely fine. and if we remove either the useData hook then also it works as expected. It has issues only when both are used together. Am I missing something.\r\n\r\nI apologise if this is not a bug and if the example is vague! \r\n","state":"open","updated_at":"2023-04-17T14:36:08Z","created_at":"2023-04-17T14:36:08Z","creator_user_login":"tirthbodawala"}
{"number":26631,"title":"Remove zoom from special cases list","body":"Looks like [it's getting removed anyway](https://groups.google.com/a/chromium.org/g/blink-dev/c/V7q43bgutbo/m/-7jneTl8CQAJ?pli=1).\r\n\r\nMaybe should wait for a major though.","state":"open","updated_at":"2023-04-21T01:30:15Z","created_at":"2023-04-15T02:12:53Z","creator_user_login":"sebmarkbage"}
{"number":26619,"title":"Bug: ","body":"## Should have a queue. This is likely a bug in React. Please file an issue.\r\n\r\n\r\nReact version:\r\n18.2.0\r\n\r\nRedux Version:\r\n8.0.5\r\n## Steps To Reproduce\r\n\r\n1. clone the repository\r\n2. npm install\r\n3. npm run dev\r\n4. click on \"task\" when sidebar is open\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/AliSinaYOusofi/redux_projects/tree/main/to-do-app\r\n\r\n## The current behavior\r\nWhen clicked on the tasks li tag i get the: Should have a queue. This is likely a bug in React. Please file an issue.\r\n\r\n## The expected behavior\r\nWhen clicked on the tasks li tag the Tasks component should be displayed.\r\n\r\n## error code displayed when Tasks component is mounted.\r\nShould have a queue. This is likely a bug in React. Please file an issue.\r\nupdateReducer@http://localhost:3000/static/js/bundle.js:24649:15\r\nupdateState@http://localhost:3000/static/js/bundle.js:25017:14\r\nuseState@http://localhost:3000/static/js/bundle.js:26154:20\r\nuseState@http://localhost:3000/static/js/bundle.js:41076:25\r\nTasks@http://localhost:3000/static/js/bundle.js:552:82\r\nbasicStateReducer@http://localhost:3000/static/js/bundle.js:24622:45\r\nupdateReducer@http://localhost:3000/static/js/bundle.js:24731:26\r\nupdateState@http://localhost:3000/static/js/bundle.js:25017:14\r\nuseState@http://localhost:3000/static/js/bundle.js:25814:20\r\nuseState@http://localhost:3000/static/js/bundle.js:41076:25","state":"open","updated_at":"2023-04-18T15:43:07Z","created_at":"2023-04-13T19:02:51Z","creator_user_login":"AliSinaYOusofi"}
{"number":26613,"title":"[Fiber] Implement Basic Suspensey Font support","body":"Fonts are tricky. This PR implements a very basic form of Suspensey fonts that is probably only useful for SSR + hydration.\r\n\r\nDuring a commit we might wait up to 100ms before committing to allow fonts that are currently loading to finish loading. We still maintain the 1 minute timeout for stylesheets so a commit could suspend for longer.\r\n\r\nA more advanced Suspensey Font implementation will need to evaluate `document.fonts` after the commit phase and put suspense boundaries into fallback without restarting a render however this requires a change to the way suspense children are rendered and how we retain the fallback fibers even when children are unblocked.","state":"open","updated_at":"2023-04-12T18:52:31Z","created_at":"2023-04-12T18:21:59Z","creator_user_login":"gnoff"}
{"number":26612,"title":"Bug: Suspense should hide Portals deeper in the tree","body":"When Portal is a direct child of Suspense, suspending hides the portal: https://codesandbox.io/s/cocky-boyd-mlq2ko?file=/src/App.js\r\n\r\nBut when a Portal is deeper in the tree, suspending fails to hide the portal nodes: https://codesandbox.io/s/nostalgic-fog-udyhuz?file=/src/App.js\r\n\r\nWe need to fix this to recursively hide portals. There's a question of which traversal to use, and how it combines with existing traversal. E.g. does \"hiding\" happen before layout effects run?\r\n\r\nWe would also need to decide what to do with legacy mode. One option is to \"fix\" it there too. But that might be difficult to roll out. It might also be tricky to implement. Another option is to leave it as is (the current behavior is leaving a \"hole\" in place of the suspended component: https://codesandbox.io/s/elastic-ptolemy-2u6qel?file=/src/App.js). Then we'd need to make sure we at least keep that buggy behavior.\r\n\r\nWe might want to add an internal-only warning (to be muted but logged on devservers) to track _newly hidden_ nodes portals that wouldn't have been hidden with the previous algorithm. Then maybe this would let us know where to fix the UI and avoid the UI regression caused by modals disappearing.\r\n\r\nSummary of work that needs to be done:\r\n\r\n- [ ] Port sandboxes to failing tests\r\n- [ ] Implement new behavior behind a flag\r\n  - [ ] Figure out where hiding/showing happens during the commit phase\r\n  - [ ] Add new behavior (all direct children of portals, no matter how deep, get auto-shown/hidden)\r\n  - [ ] Decide what legacy renderer should do, write tests for that too\r\n  - [ ] (Maybe) add internal-only muted logging for content that would be hidden with new behavior","state":"open","updated_at":"2023-07-24T11:42:06Z","created_at":"2023-04-12T17:25:07Z","creator_user_login":"gaearon"}
{"number":26609,"title":"Scheduler: Unref the MessageChannel instance and allow the thread to exit","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nFixes #26608 \r\n\r\n## How did you test this change?\r\n\r\nIt is still unclear to me how to test this because test requires separate Jest setup.","state":"open","updated_at":"2023-04-12T13:43:26Z","created_at":"2023-04-12T13:25:19Z","creator_user_login":"victor-homyakov"}
{"number":26608,"title":"Bug: MessageChannel in Scheduler prevents Jest test from exiting","body":"React version: any\r\nScheduler version: any up to current (0.23.0)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create Jest unit test.\r\n2. Select JSDom as test environment so that runtime will not have `setImmediate` function.\r\n3. JSDom still does not implement `MessageChannel` https://github.com/jsdom/jsdom/issues/2448. If `MessageChannel` is required to test some important functionality, one can add an implementation from Node.js as recommended in comment https://github.com/jsdom/jsdom/issues/2448#issuecomment-536242756\r\n    ```js\r\n    window.MessageChannel = require('node:worker_threads').MessageChannel;\r\n    ```\r\n4. Add Scheduler or React as a dependency and require it in the test or one of the files under test.\r\n5. Run test\r\n\r\nLink to code example: https://github.com/victor-homyakov/scheduler-jest-jsdom-example\r\n\r\n## The current behavior\r\n\r\nTest is endless. Jest won't stop. Console shows a message\r\n```\r\nJest did not exit one second after the test run has completed.\r\n\r\n'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\r\n```\r\n\r\nRunning Jest with `--detectOpenHandles` outputs:\r\n\r\n```\r\nJest has detected the following 1 open handle potentially keeping Jest from exiting:\r\n\r\n  ●  MESSAGEPORT\r\n\r\n    > 1 | require('scheduler');\r\n        |                     ^\r\n\r\n      at node_modules/scheduler/cjs/scheduler.development.js:569:17\r\n```\r\n\r\n## The expected behavior\r\n\r\nCode at https://github.com/facebook/react/blob/5426af3d50ff706f3ebeb4764f838e0a3812bf9a/packages/scheduler/src/forks/Scheduler.js#L621 should `unref` the handle:\r\n\r\n```js\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n  // Allow the thread to exit if this is the only active handle in the event system\r\n  if (channel.port1.unref) {\r\n    channel.port1.unref();\r\n  }\r\n```","state":"open","updated_at":"2023-08-24T16:15:26Z","created_at":"2023-04-12T13:18:32Z","creator_user_login":"victor-homyakov"}
{"number":26607,"title":"Bug: 打包后报错","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.react react-deme 18.2.0\r\n2. vite 4.2.1 @vitejs/plugin-react 3.1.0\r\n\r\npeError: Cannot read properties of undefined (reading '__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED')\r\n  react-dom-0d980a60.js:9:5345\r\n","state":"open","updated_at":"2023-05-25T01:11:32Z","created_at":"2023-04-12T07:36:14Z","creator_user_login":"guoqirong"}
{"number":26606,"title":"[Fizz] Fix incompatible type errors","body":"## Summary\r\n\r\nThere are these lines in `ReactFizzHooks.js`:\r\n\r\n```\r\nlet update: Update<any> = firstRenderPhaseUpdate;\r\n\r\n...\r\n\r\n// $FlowFixMe[incompatible-type] we bail out when we get a null\r\nupdate = update.next;\r\n```\r\n\r\n`Update` is defined as:\r\n\r\n```\r\ntype Update<A> = {\r\n  action: A,\r\n  next: Update<A> | null,\r\n};\r\n```\r\n\r\nTherefore, `update.next` can be `null`, but `let update: Update<any>` cannot. That is why Flow complains about `incompatible-type`, saying:\r\n\r\n> Cannot assign `update.next` to `update` because null [1] is incompatible with `Update` [2].\r\n\r\nThis PR allows for `null` values in the `update` variable in `ReactFizzHooks.js` and in the `node` variable in `ReactFizzComponentStack.js` (similar case).\r\n\r\n## How did you test this change?\r\n\r\nI ran the existing tests.","state":"open","updated_at":"2023-04-25T10:56:54Z","created_at":"2023-04-12T06:58:40Z","creator_user_login":"Willie-Boy"}
{"number":26605,"title":"Update README.md","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nAs a Beginner when i started working on react i came through this problem of insufficient watchers , and i don't know how to resolve it and i have seen many of my friends suffering due to this same issue. And now i want to make sure that  the new beginners of react ,aware of this situation and how to handle it . And i hope the beginners would find it good. Actually it not a huge issue ,but for the beginners it would take a lot of time to resolve this, so i attached a link where it resolves their watcher issue using various techniques.It's a small contribution to save the time of beginners.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-04T04:48:54Z","created_at":"2023-04-12T05:54:35Z","creator_user_login":"swarupe7"}
{"number":26603,"title":"Bug: autoFocus cannot be used with an anchor (link)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render an anchor / link (`<a>` tag) with `autoFocus`.\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/react-link-autofocus-itxvn4\r\n\r\nCompare with https://codesandbox.io/s/html-link-autofocus-n9vk6f and https://n9vk6f.csb.app/, which demonstrates autofocus with a `<a>` tag in plain HTML.\r\n\r\n## The current behavior\r\n\r\nautoFocus is ignored on `a` elements; it apparently only works on buttons, inputs, selects, and textareas.\r\n\r\n## The expected behavior\r\n\r\nThe link has the focus on render.\r\n\r\n`autofocus` is a global attribute (see https://html.spec.whatwg.org/multipage/dom.html#global-attributes and https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus), and it's common (at least, in frameworks I'm familiar with) for button-style components that navigate elsewhere within the React app to render using the `<a>` tag, so it's valuable for `<a>` to support the same behaviors as `<button>`.\r\n\r\nThis may be a duplicate of https://github.com/facebook/react/issues/6868, although the reasoning there no longer applies under the current HTML specs.","state":"open","updated_at":"2023-04-22T02:59:45Z","created_at":"2023-04-11T18:44:56Z","creator_user_login":"joshkel"}
{"number":26600,"title":"e.stopPropagation() and dropdown","body":"React version:16->17.0.0\r\n\r\n#### The e.stopPropagation() event will not affect child elements in child elements in V16, but it will affect child elements in child elements in V17.\r\n\r\nLink to code example:\r\n```\r\n<Navbar.Collapse onClick={()=>setCollapseOpen(false)}>\r\n   <div. onClick={(e) => e.stopPropagation()}>\r\n       <Nav>\r\n            <NavDropdown>...</NavDropdown>\r\n            <NavDropdown>...</NavDropdown>\r\n       </Nav>\r\n   </div>\r\n</Navbar.Collapse>\r\n```\r\n\r\n## The current behavior\r\nAfter upgrading to version 17, `<NavDropdown>` cannot autoClose.\r\n\r\n## The expected behavior\r\nThe innermost`<NavDropdown>` is not affected by e.stopPropagation() event.\r\n\r\nHow to fix it?\r\n","state":"open","updated_at":"2023-04-12T11:15:25Z","created_at":"2023-04-11T04:46:31Z","creator_user_login":"peipei818"}
{"number":26598,"title":"Bug: updating state to an existing value is (incorrectly?) triggering a re-render","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `18.2.0` \r\n\r\n(also same in `16.14.0`)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Set a piece of state to a new value (which will cause a render)\r\n2. Set a piece of state with the same value as before, causing a re-render ([which should normally skip a re-render](https://react.dev/reference/react/useState#setstate-caveats))\r\n3. Subsequent setting of the state to the same value does not cause re-rendering\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n- [🎥 A video I made that explains the issue](https://twitter.com/alexandereardon/status/1645631194325995523)\r\n- [🤹‍♀️ A standalone example - react 18](https://codesandbox.io/s/react-set-state-optimisation-react-18-p48li8?file=/src/App.tsx)\r\n- [🤹‍♀️ A standalone example - react 16](https://codesandbox.io/s/react-set-state-optimisation-react-16-ed9ftr?file=/src/App.tsx)\r\n- [🃏 jest + jsdom on node](https://stackblitz.com/edit/node-sswt3h?file=behaviour.spec.js)\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nChanging react state to the current state value is triggering a re-render\r\n\r\n## The expected behavior\r\n\r\nChanging react state to the current state value should not trigger a re-render\r\n\r\n## Additional thoughts\r\n\r\nOne of the best ways to improve interaction performance with react is to avoid asking react to re-render things it does not need to. It would be great to write tests to assert re-rendering behaviour. Unfortunately, this is not possible with react today due to this issue\r\n\r\nIt can be extremely delicate work to minimise react re-rendering, and it is something that is easy to accidentally regress on. You could argue that you could measure performance in some other way and that additional react re-rendering could be caught by that. That is true, however, I expect most interactions for most applications do not have fantastic interaction performance testing/monitoring. It would be super helpful (and straightforward) to be able to assert react render behaviour in tests without needing to rely on any complex performance testing/monitoring setup. Of course, you could always have both interaction performance testing/monitoring and tests","state":"open","updated_at":"2023-05-04T22:52:45Z","created_at":"2023-04-11T03:37:47Z","creator_user_login":"alexreardon"}
{"number":26585,"title":"Bug: The scroll bar of the sidebar is getting hidden while hovering in the describing UI section (in Learn React).","body":"While opening any section in the Learn React section, I am not able to use the scroll bar.\r\n\r\n#The current behaviour\r\nTry to hover over the scrollbar of the describing UI section, which is present in the sidebar; it is getting hidden. You can scroll it using the down or up arrow keys or with the scroll bar, but you cannot click on the scroll.\r\n\r\n#The expected behaviour\r\nIt should not disappear while hovering.\r\n\r\nhttps://react.dev/learn/describing-the-ui","state":"open","updated_at":"2023-04-11T09:02:16Z","created_at":"2023-04-10T13:50:38Z","creator_user_login":"Devang1224"}
{"number":26581,"title":"Warnings only logged once even for different roots and renders","body":"Hey 👋,\r\n\r\ncertain warnings are logged only once, even if they occur multiple times within the rendered tree. For instance:\r\n\r\n```\r\nWarning: validateDOMNesting(...): <div> cannot appear as a descendant of <p>.\r\n```\r\n\r\nhttps://github.com/facebook/react/blob/9a9da7721e5b73a8af242807e463e2af842c58ee/packages/react-dom-bindings/src/client/validateDOMNesting.js#L479 \r\n\r\nThis approach makes sense to prevent the console from being flooded with warnings. However, an argument can be made that each ReactDOM `root` should track its own warnings. This way, if two independent trees generate the same warning, it would be logged twice instead of just once.\r\n\r\nWhy is this an issue? I have two reasons: one is philosophical, and the other is practical.\r\n\r\n1. If `createRoot`/`render` is utilized multiple times, it's reasonable to assume that there could be two distinct apps, possibly maintained by separate teams. Each team should be able to address their respective warnings without depending on another team to fix theirs first.\r\n\r\n2. This problem causes issues in our project's testing setup due to several factors. Firstly, we use [jest-fail-on-console](https://www.npmjs.com/package/jest-fail-on-console) to treat `console.warn` or `console.error` calls as test failures. This helps us avoid overlooking warnings and prevents console call spam in the CI output.\r\n\r\nWe also employ [`jest.retryTimes`](https://jestjs.io/docs/jest-object#jestretrytimesnumretries-options) to retry tests when they fail on CI, aiming to identify flaky tests. ReactDOM's logging behavior now leads to a situation where the test fails once due to ReactDOM's `console.error` call, but then passes the second time because the error is not printed again, even though the rendered output remains the same. Consequently, the test is marked as green on CI when it should not be, skewing data , and even worse, it will always fail when run locally since there is no retry there. Sometimes this happens to tests that aren't close to the code that introduced the warning and go unnoticed by the author due to CI not catching it.\r\n\r\nSide note: It's afaik unfortunately incredibly hard/impossible to reset es modules in between tests in jest which would help in our case, but not in the first one.\r\n\r\nIt would be helpful if ReactDOM could either offer a method to reset warning flags or reset them automatically for each `root.render` call.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps to Reproduce\r\n[https://codesandbox.io/s/keen-blackburn-zw2e5v?file=/src/index.tsx](https://codesandbox.io/s/keen-blackburn-zw2e5v?file=/src/index.tsx)\r\n\r\n1. Create two ReactDOM roots\r\n2. Render code that generates the aforementioned warning in each\r\n3. The warning will only be printed to the console once\r\n\r\nThis sandbox renders two roots containing the same violation. However, the console warning is printed only once, not twice.\r\n","state":"open","updated_at":"2023-04-10T09:53:46Z","created_at":"2023-04-10T02:46:24Z","creator_user_login":"robin-drexler"}
{"number":26576,"title":"Remove unused parameters from react-reconciler files","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nRemove unused parameters in 5 files from react-reconciler\r\n\r\n**Changed files are** \r\n-packages/react-reconciler/src/ReactChildFiber.js\r\n-packages/react-reconciler/src/ReactFiberBeginWork.js\r\n-packages/react-reconciler/src/ReactFiberClassUpdateQueue.js\r\n-packages/react-reconciler/src/ReactFiberCommitWork.js\r\n-packages/react-reconciler/src/ReactFiberCompleteWork.js\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI tested them with existing tests\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-22T16:28:43Z","created_at":"2023-04-08T16:18:31Z","creator_user_login":"evrenkaraarslan"}
{"number":26566,"title":"yarn","body":"added new words like yarn for yarn user better learning\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-04-10T11:32:45Z","created_at":"2023-04-07T12:24:53Z","creator_user_login":"madhusudhan123-star"}
{"number":26562,"title":"devtools_check_repro.yml: bump github-script version to fix node warning","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nCurrently, `devtools_check_repro.yml` uses `actions/github-script@v3` which uses Node 12 which is deprecated and a warning is displayed in action workflow runs [Ref](https://github.com/facebook/react/actions/runs/4626772295). This PR updates the version to v6 which uses Node 16.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nNot tested yet.","state":"open","updated_at":"2023-04-17T11:28:26Z","created_at":"2023-04-06T05:30:59Z","creator_user_login":"kbdharun"}
{"number":26555,"title":"Changes have been updated","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n[README.md](https://github.com/facebook/react/files/11159558/README.md)\r\n\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-04-05T15:09:02Z","created_at":"2023-04-05T13:56:38Z","creator_user_login":"sayn-mondal"}
{"number":26545,"title":"Combine retry throttling and suspensey commits","body":"","state":"open","updated_at":"2023-04-11T15:38:37Z","created_at":"2023-04-03T18:54:37Z","creator_user_login":"acdlite"}
{"number":26538,"title":"dropdown not closing on clicking on same icon reactjs","body":"Expected Behavior : When clicked on profile icon, if dropdown is not open,open the dropdown else close the dropdown. And close the dropdown if clicked anywhere outside the dropdown.\r\n\r\nActual Behavior: When clicked on profile icon, if dropdown is not open, the dropdown gets open.  And the dropdown is also closing if clicked anywhere outside the dropdown.    but if dropdown is already open, it does not close on clicking on profile icon again.\r\n\r\n\r\nHere is my code:\r\n```\r\nconst Navbar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const imgRef = useRef();\r\n  useEffect(() => {\r\n    let closeDropdown = (e) => {\r\n      if (imgRef.current && !imgRef.current.contains(e.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.body.addEventListener(\"click\", closeDropdown);\r\n    return () => document.body.removeEventListener(\"click\", closeDropdown);\r\n    }, []);\r\n\r\n\r\n    return (\r\n       <div>\r\n              <div className={\"dropdownn1 \" + (isOpen ? \"open\" : \"closed\")}>\r\n                    <Dropdown />\r\n              </div>\r\n              <div className=\"profile_icon_div\" ref={imgRef}>\r\n                     <img\r\n                        src={profileImageUrl}\r\n                        onClick={() => setIsOpen((prev) => !prev)}\r\n                        className=\"profile_icon_image\"\r\n                        alt=\"\"\r\n                      />\r\n               </div>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default Navbar;\r\n```\r\n\r\n","state":"open","updated_at":"2023-05-19T10:32:04Z","created_at":"2023-04-03T13:09:13Z","creator_user_login":"RahulMittal18"}
{"number":26537,"title":"Replaying suspended components breaks its-fine's ContextBridge, which can break R3F","body":"React version: 18.3.0-next-85de6fde5-20230328\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use a ContextBridge\r\n2. Make sure `replayFunctionComponent` is triggered.\r\n3. The ContextBridge is empty\r\n\r\n## Info\r\n\r\nContextBridge relies on its-fine's ability to get the current fiber, either through `ReactCurrentOwner.current` or `this._reactInternals.memoizedState`.\r\n\r\nWhen `replayFunctionComponent` is triggered, `ReactCurrentOwner.current` and `this._reactInternals.memoizedState` are both `null`. Is there another way to get the current fiber?\r\n\r\nBecause its-fine is using `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`, it's not really a React bug, however it might break a lot of apps.\r\n\r\nIssue in `its-fine`: https://github.com/pmndrs/its-fine/issues/29\r\nRelevant piece of code: https://github.com/pmndrs/its-fine/blob/4998b08cf427214622597067d1280e1efb0d07c4/src/index.tsx#L99-L106","state":"open","updated_at":"2023-04-07T20:23:43Z","created_at":"2023-04-03T08:21:21Z","creator_user_login":"hansottowirtz"}
{"number":26536,"title":"Bug: Adjusting state in response to rendering in StrictMode, while also using refs","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\nWe're considering using [this pattern](https://react.dev/reference/react/useState#storing-information-from-previous-renders) about adjusting state in response to rendering, but it appears as though using a ref as part of the conditional for this pattern, in StrictMode, causes the previous state to be passed to child components.\r\n\r\nWe're using a ref instead of only state (as the example in the docs does) because of performance concerns (this is a vastly simplified example)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Load the app in codesandbox\r\n2. Open the codesandbox console\r\n3. Change the app state to `'SAVING'`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/relaxed-fog-21z3hc?file=/Container.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWith the app wrapped in `<StrictMode>`, the array given to `<List>` has values, rather than being empty. Removing `<StrictMode>` causes the array given to `<List>` to be empty\r\n\r\n<img width=\"1087\" alt=\"Screen Shot 2023-04-02 at 6 42 56 PM\" src=\"https://user-images.githubusercontent.com/46756893/229383054-9641a1c0-f581-44a5-a5dc-a5e50b81f02e.png\">\r\n\r\n## The expected behavior\r\n\r\nNot entirely sure this is a bug, but I would imagine the behavior should be consistent with or without `<StrictMode>`\r\n\r\nI guess the core of it, in this particular case, is whether a user-managed ref used in this way is considered part of the \"input\" of a component (along with props, state, and context) as described [here](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development). However I recognize this is a rare use case, and the section of the docs that describes this patten doesn't explicitly talk about combining it with refs.\r\n\r\nCan I ask for additional clarity on the expected behavior in this situation? Or if this particular use is not supported, perhaps it's worth adding a note in the docs.","state":"open","updated_at":"2023-04-02T23:29:07Z","created_at":"2023-04-02T23:29:07Z","creator_user_login":"bellcd"}
{"number":26533,"title":"Failing test for effect unmount issue","body":"## Overview\r\n\r\nThis test fails because an effect destroy function is called twice. \r\n\r\nNote: the component that calls destroy twice is the top most Container component (with name=\"x\")\r\n\r\nThe Scheduler log is:\r\n\r\n```\r\n      '[A:0]',\r\n      '[B:0]',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      '[B:0]',\r\n      '[B:1]',\r\n      '[A:0]',\r\n      '[B:0]',\r\n      'Suspended! [[A:1]]',\r\n      'Promise resolved [[A:1]]',\r\n      'Promise resolved [[A:1]]',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      'Suspended! [[B:1]]',\r\n      'Promise resolved [[B:1]]',\r\n      'Promise resolved [[B:1]]',\r\n      '[B:1]',\r\n      '[A:1]',\r\n      '[A:1]'\r\n```\r\n\r\nIf it helps, I also added additional logging for the containers and effects:\r\n\r\n```\r\n'[A:0]',\r\n      '[B:0]',\r\n      'Text [A] mounted',\r\n      'Text [B] mounted',\r\n      'Remount children of Y after 0ms',\r\n      'Remount children of X after 0ms',\r\n      'Remount children of X after 0ms',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      'Text [B] unmounted',\r\n      'Text [B] mounted',\r\n      'Remount children of Y after 0ms',\r\n      '[B:0]',\r\n      'Text [B] unmounted',\r\n      'Text [B] mounted',\r\n      '[B:1]',\r\n      '[A:0]',\r\n      '[B:0]',\r\n      'Text [A] mounted',\r\n      'Text [B] mounted',\r\n      'Remount children of Y after 0ms',\r\n      'Remount children of X after 0ms',\r\n      'Remount children of X after 0ms',\r\n      'Suspended! [[A:1]]',\r\n      'Promise resolved [[A:1]]',\r\n      'Text [A] unmounted',\r\n      'Text [B] unmounted',\r\n      'Promise resolved [[A:1]]',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      'Text [A] mounted',\r\n      'Text [B] mounted',\r\n      'Remount children of Y after 0ms',\r\n      'Remount children of X after 0ms',\r\n      'Remount children of X after 0ms',\r\n      '[A:1]',\r\n      '[B:0]',\r\n      'Text [B] unmounted',\r\n      'Text [B] mounted',\r\n      'Suspended! [[B:1]]',\r\n      'Promise resolved [[B:1]]',\r\n      'Text [A] unmounted',\r\n      'Text [B] unmounted',\r\n      'Promise resolved [[B:1]]',\r\n      '[B:1]',\r\n      'Text [A] mounted',\r\n      'Text [B] mounted',\r\n      'Remount children of Y after 0ms',\r\n      'Remount children of X after 0ms',\r\n      'Remount children of X after 0ms',\r\n      '[A:1]',\r\n      '[A:1]',\r\n      'Text [A] unmounted',\r\n      'Text [B] unmounted'\r\n```\r\n\r\n","state":"open","updated_at":"2023-04-02T13:23:09Z","created_at":"2023-04-01T01:56:23Z","creator_user_login":"rickhanlonii"}
{"number":26529,"title":"added firefox CSP","body":"This is my first PR ever, I hope I'm doing this correctly! \r\n\r\nI just did a small change regarding: https://github.com/facebook/react/issues/26517 \r\n\r\n## How did you test this change?\r\n\r\nI didn't test the change because it's just adding a sentence to README, I hope it doesn't break anything! ","state":"open","updated_at":"2023-03-31T17:11:48Z","created_at":"2023-03-31T14:35:35Z","creator_user_login":"sherphy"}
{"number":26520,"title":"[eslint-plugin-react-hooks] New rule to enforce lazy initialization for `useState`","body":"## Context\r\nIt is common to have instances where `React.useState()` code is unnecessarily re-creating its initial state:\r\n\r\nExample:\r\n```js\r\nconst Component = () => {\r\n const [state, setState] = useState(getInitialHundredItems());\r\n}\r\n```\r\n\r\nReact's `useState` hooks accepts an `initialState` argument e.g. `React.useState(initialState)`.\r\nThe `initialState` argument is the state used during the initial render. In subsequent renders, it is disregarded.\r\nIf the initial state is the result of an expensive computation, we may provide a function instead, which will be executed only on the initial render.\r\n\r\nIn the above example, `getInitialHundredItems` is called on each re-render, but its result is only needed on initial render.\r\n\r\nMore details `useState` and  `Lazy initial state` can be found here: [link1](https://reactjs.org/docs/hooks-reference.html#lazy-initial-state), [link2](https://beta.reactjs.org/reference/react/useState#avoiding-recreating-the-initial-state).\r\n\r\n## Description\r\n\r\nTo address the problem mentioned above, we can make use of an [initializer function](https://beta.reactjs.org/reference/react/useState#avoiding-recreating-the-initial-state) in `React.useState()`.\r\nThis function will only be executed once (on initial render) and not on each re-render like the above code will.\r\n\r\nExample of how one would use lazy initialization:\r\n```js\r\nconst Component = () => {\r\n const [state, setState] = useState(() => {\r\n    return getInitialHundredItems(x);\r\n  })\r\n}\r\n```\r\n\r\n## Rule\r\n```js\r\n...\r\n  /**\r\n   * This rule is meant to detect the following anti-pattern:\r\n   *\r\n   * ```js\r\n   * const Component = () => {\r\n   *  const [state, setState] = useState(getInitialHundredItems());\r\n   * }\r\n   * ```\r\n   *\r\n   * The initialState argument is the state used during the initial render. In subsequent renders, it is disregarded.\r\n   * This initial value can be the result of calling a function as in the above example.\r\n   * But note that getInitialHundredItems is unconditionally and needlessly called on each render cycle.\r\n   *\r\n   * To avoid the problem mentioned above, instead of just calling a function that returns a value,\r\n   * you can pass a function which returns the initial state.\r\n   * This function will only be executed once (initial render) and not on each render like the above code will.\r\n   * See [Lazy Initial State] for details.\r\n   *\r\n   * [Lazy Initial State]: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\r\n   *\r\n   * The above code can be changed to the below, with lazy initilization:\r\n   *\r\n   * ```js\r\n   * const Component = () => {\r\n   *  const [state, setState] = useState(() => {\r\n   *    return getInitialHundredItems(x);\r\n   *  })\r\n   * }\r\n   * ```\r\n   */\r\n  'prefer-react-use-state-lazy-initialization': {\r\n    meta: {\r\n      type: 'problem',\r\n      fixable: 'code',\r\n      schema: [], // no options\r\n    },\r\n    create(context) {\r\n      const ALLOW_LIST = ['Boolean', 'String'];\r\n\r\n      return {\r\n        'CallExpression[callee.name=\"useState\"]'(node) {\r\n          if (node.arguments.length > 0) {\r\n            const arg = node.arguments[0];\r\n            // If arg is a call expression and is not in `allowList`\r\n            // e.g `Boolean(x)` is allowed, but `expensiveFunc(x)` is not allowed\r\n            if (arg.type == 'CallExpression' && ALLOW_LIST.indexOf(arg.callee.name) === -1) {\r\n              context.report({\r\n                node: arg,\r\n                message:\r\n                  'To prevent expensive re-computation, consider using lazy initial state for React.useState().',\r\n              });\r\n            }\r\n          }\r\n        },\r\n      };\r\n    },\r\n  }\r\n...\r\n```","state":"open","updated_at":"2023-05-18T09:16:01Z","created_at":"2023-03-30T17:23:46Z","creator_user_login":"legendkong"}
{"number":26518,"title":"Bug: Elements in ErrorBoundary are created twice, one of them becomes an orphan","body":"React version: 18.2.0\r\n\r\nReproducible with [18.3.0-next-85de6fde5-20230328](https://www.npmjs.com/package/react/v/18.3.0-next-85de6fde5-20230328) as well.\r\n\r\nAs I observed, this is not an issue only in React-DOM. It happens with other renderers too. It can be an issue in the Reconciler or the main React package. \r\n\r\nIssue does not seem to happen with React 17 based rendering (legacy mode?). You can test this by uncommenting the code at the end of the code example. However this can be simply because React 17 doesn't throw the error twice. In concurrent mode, error is thrown twice, so two ErrorBoundary are created. The stack traces for two errors look almost the same, except the latter error contains `recoverFromConcurrentError` in its call stack.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create an ErrorBoundary class which renders some basic HTML\r\n2. Notice how the HTML elements are created twice.\r\n\r\nLink to code example: Visit the [CodeSandbox example](https://codesandbox.io/s/wild-glitter-e5x8kz?file=/src/index.js) and observe the logs.\r\n\r\nIn the code example, I mocked the `document.createElement` to see that it is called twice. However, one of the created elements aren't added to the DOM (becomes orphan).\r\n\r\nThis may not be a big deal in HTML, but it can be a problem in other renderers where creating elements may have side effects. Also if the element has children, those children will also be created, potentially causing performance issues.\r\n\r\n## The current behavior\r\n\r\nNative elements in ErrorBoundary are created twice, even though one of them are not added to the rendered tree.\r\n\r\n## The expected behavior\r\n\r\nElements should be created once.","state":"open","updated_at":"2023-03-30T15:38:53Z","created_at":"2023-03-30T15:38:53Z","creator_user_login":"KurtGokhan"}
{"number":26517,"title":"Update react devtools readme - The React Tab Doesn't Show Up - CSP","body":"It would be helpful to update this section of the readme to call out that a content security policy may also be the culprit:\r\nhttps://github.com/facebook/react/tree/main/packages/react-devtools#the-react-tab-doesnt-show-up\r\n\r\nIt took me a while to figure this out on my own.  We have a CSP which was blocking the loading of react-devtools.  See:\r\nhttps://github.com/facebook/react-devtools/issues/460\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=965637","state":"open","updated_at":"2023-03-31T14:14:03Z","created_at":"2023-03-30T13:27:43Z","creator_user_login":"kfox112"}
{"number":26515,"title":"Is there any roadmap to enable the detection of iframes in React devtools?","body":"I have a component of my application that I inject into different websites as an iframe. I want to use the React devtools to analyze this component, but it doesn't show up in the devtools. \r\n\r\nI'm asking if there are any plans to make the React devtools work with iframes in the future.","state":"open","updated_at":"2023-03-31T05:49:10Z","created_at":"2023-03-30T05:24:54Z","creator_user_login":"IDrissAitHafid"}
{"number":26506,"title":"[DevTools] webpack 5 + ignore listing backend to avoid confusion","body":"## Summary\r\n\r\n- Upgrade webpack (and related packages) in react-devtools-extension to latest version (v5)\r\n- Add source map for react_devtools_backend.js in production build so that we can use it to do [ignore listing](https://developer.chrome.com/blog/devtools-better-angular-debugging/#ignore-listing-code)\r\n\r\n## How did you test this change?\r\n\r\nTested it on a react app on codesandbox that run `console.error` when user clicks the button https://3owqsn.csb.app/\r\n\r\nBefore this change, the stack trace includes \"react_devtools_backend.js\", which can mislead developers to believe this error is triggered by React DevTools instead of their own code\r\n<img width=\"1016\" alt=\"Untitled\" src=\"https://user-images.githubusercontent.com/1001890/228623205-d0b91f62-d9b6-4c72-9785-e99cb0c8426d.png\">\r\n\r\n\r\nAfter this change, it is hidden in the stack by default\r\n<img width=\"519\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1001890/228624208-3fc0c96a-00d6-4ec3-9e86-f412fa74bf09.png\">\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-03-29T23:35:13Z","created_at":"2023-03-29T17:47:18Z","creator_user_login":"mondaychen"}
{"number":26504,"title":"chore: use includes replace indexOf","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\njust updated the api\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nJust use includes replace indexOf, no need to add test case.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-31T03:38:56Z","created_at":"2023-03-29T12:21:04Z","creator_user_login":"li-jia-nan"}
{"number":26482,"title":"chore: fix minor comment typo.","body":"## This PR Includes\r\n\r\n- [x] Corrected a minor typo in comments.\r\n\r\n## Description \r\nWhile going through the source code, I found a minor typo in comments. Though it does not have a significant changes and correction, It would be nice not to have typos. ","state":"open","updated_at":"2023-03-26T14:22:03Z","created_at":"2023-03-26T11:40:42Z","creator_user_login":"dahalapaar"}
{"number":26480,"title":"Add dynamic flag for sibling pre-rendering in RN","body":"Need to run an experiment for this rollout too.","state":"open","updated_at":"2023-03-25T16:41:27Z","created_at":"2023-03-25T14:18:36Z","creator_user_login":"rickhanlonii"}
{"number":26477,"title":"Bug: Unexpected Suspense SSR Component Behavior with useSyncExternalStore in React 18.3.0-next: Rerender and Fallback State Issues","body":"The bug relates to https://github.com/facebook/react/issues/26318. In React 18.2.0 this case prints an error but the functionality seems unexpected. In 18.3.0-next-9c54b29b4-20230322 it doesn't print an error, but unexpected functionality still exists.\r\n\r\nReact version: 18.3.0-next-9c54b29b4-20230322\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use `Suspense` SSR and `useSyncExternalStore` in the same component.\r\n2. Ensure that the `serverSnapshot` and `snapshot` in `useSyncExternalStore` are different.\r\n3. Suspended component on the client side fully rerenders. Falls into a fallback state and then renders its content.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/usesyncexternalstore-suspense-bug-forked-drm325\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe suspended component on the client side fully rerenders. Falls into a fallback state and then renders its content. Due to a mismatch between `serverSnapshot` and `snapshot` when using `Suspense` and `useSyncExternalStore` in the same component.\r\n\r\n## The expected behaviour\r\nThe suspended component doesn't do a full rerender(falls into a fallback state and then renders its content): \r\n- if the `serverSnapshot` and `snapshot` are identical.\r\n- if the `useSyncExternalStore` has a mismatch between `serverSnapshot` and `snapshot` and is used in a component without a `Suspense` boundary. \r\n\r\nI assume the expected behaviour should be: the suspended component shouldn't do a full rerender(fall into a fallback state and then render its content) when `useSyncExternalStore` is used with `Suspense` in the same component. I assume it shouldn't fall into a fallback state it should just do a rerender.\r\n\r\n## Additional context\r\nOne use case when `snapshot` and `serverSnapshot` may be different:\r\nThe latest version of the `react-redux` library under the hood uses `useSyncExternalStore`. For example, if we have 2 different `hydrateRoot` entries for `header` and for `body` and we need them to share the same redux store. One issue that occurs with this setup is that if the `header` is hydrated earlier than the `body` the `header` will start firing store updates while the `body` is still hydrating and this will cause `serverSnapshot` and `snapshot` to be different while the `body` is still hydrating and because of this suspended SSR components will fall into the fallback state if redux state selector and Suspense boundary are used in the same component.","state":"open","updated_at":"2023-03-25T08:55:38Z","created_at":"2023-03-25T08:55:38Z","creator_user_login":"mgiedrius"}
{"number":26476,"title":"updated good first issues section","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n\r\n## Changes\r\n<!-- Updated good first issues section for beginners used starter and for intermediate level used medium as a difficulty\r\n","state":"open","updated_at":"2023-03-25T07:07:36Z","created_at":"2023-03-25T06:55:05Z","creator_user_login":"kethesainikhil"}
{"number":26465,"title":"[DevTools Bug] Cannot add child \"1161\" to parent \"942\" because parent node was not found in the Store.","body":"### Website or app\n\nchrome on local host\n\n### Repro steps\n\nit happen with every component that i mount \r\n<img width=\"1470\" alt=\"Screenshot 2023-03-23 at 1 04 00 PM\" src=\"https://user-images.githubusercontent.com/110327079/227134701-d665feca-3326-401e-b957-007c41318be6.png\">\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.2-1a88fbb67\n\n### Error message (automated)\n\nCannot add child \"1161\" to parent \"942\" because parent node was not found in the Store.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27939:43\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25892:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26061:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56323:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot add child  to parent  because parent node was not found in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-05-25T07:32:22Z","created_at":"2023-03-23T07:36:11Z","creator_user_login":"bhanuUdai"}
{"number":26464,"title":"eslint: Add suggestion to remove literals from dependency arrays","body":"## Summary\r\n\r\nAdds a suggestion to remove literals from dependency arrays, as it is marked as a TODO.\r\n\r\n## How did you test this change?\r\n\r\n- Added tests\r\n- Tested manually in an existing React project\r\n","state":"open","updated_at":"2023-03-24T17:27:37Z","created_at":"2023-03-23T01:08:27Z","creator_user_login":"mateusmtoledo"}
{"number":26463,"title":"eslint react-hooks/rulesOfHooks:  add rule to check for non-function return from useEffect","body":"Feature request: Could we add an eslint rule to eslint-plugin-react-hooks to show an error when a non-function value is returned from within a `useEffect` call?\r\n\r\nFor the function passed to the `useEffect` hook, valid return statements are:\r\n`return;` (no value)\r\n`return undefined;` (unnecessarily verbose, but still valid)\r\n`return () => { [...cleanup function... ] }`\r\n\r\nReturning anything else will cause the error: `Uncaught TypeError: destroy is not a function` at runtime.\r\n\r\nThe dev UX of this isn't great, as it can be hard to find the return statement from the backtrace, even with source maps enabled. Particularly in regards to upgrading to React 18 -- It seems React 17 was more tolerant of incorrect return values, but as I'm upgrading a codebase to React 18, these errors are now coming to light.\r\n\r\nReact version: 18+","state":"open","updated_at":"2023-07-06T21:10:13Z","created_at":"2023-03-22T20:56:49Z","creator_user_login":"jlbooker"}
{"number":26460,"title":"RSC: How to realize shared code with client-specific execution results","body":"@gaearon asked me to open an issue on this, so I could add a bit more context than fits into [a twitter thread](https://twitter.com/dan_abramov/status/1638371181156880384).\r\n\r\nThis all has come up within the last few days that I have been trying out the NextJs `/app` folder to find out what we have to do from the Apollo Client and Redux sides to support this.  \r\nI'm sorry if some of these thoughts come from \"a wrong place of understanding\" - RSC are still new to me, and honestly at this point I feel more confused about this than the first time I was learning React. If I'm on a completely wrong track somewhere, please correct me.\r\n\r\n# Example 1: RTK Query `createApi`.\r\n\r\n`createApi` is a function that is invoked with a description of API endpoints and creates a fully-typed reducer, middleware, selectors - and, if the `react` module is active, hooks.\r\n\r\nThis can for example look like this:\r\n\r\n```ts\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport type { Pokemon } from './types'\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const pokemonApi = createApi({\r\n  reducerPath: 'pokemonApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\r\n  endpoints: (builder) => ({\r\n    getPokemonByName: builder.query<Pokemon, string>({\r\n      query: (name) => `pokemon/${name}`,\r\n    }),\r\n  }),\r\n})\r\n\r\n// pokemonApi now has properties like\r\npokemonApi.reducer\r\npokemonApi.middleware\r\npokemonApi.endpoints.getPokemonByName.select\r\npokemonApi.endpoints.getPokemonByName.initiate\r\npokemonApi.useGetPokemonByNameQuery\r\n```\r\n\r\nFrom a RSC perspective, it might already make sense to create a Redux store, add the reducer & middleware, `await` the result of the `pokemonApi.endpoints.getPokemonByName.initiate` thunk (to use it in a RSC), serialize the cache and rehydrate it on the client later (in case a client component later wants to access that same API endpoint).\r\n\r\nFrom a client perspecive, the same store setup will take place and components will mostly call the `useGetPokemonByNameQuery` hook.\r\n\r\nNow, it doesn't seem that there is any way that we mark `useGetPokemonByNameQuery` as `\"use client\"`, which will prevent any kind of static analysis and early warnings - we will have runtime warnings later when non-server-hooks are called within that `useQuery` hook. \r\n\r\nAn alternative solution would be to tell users to duplicate this code and call `createApi` from `'@reduxjs/toolkit/query/react'` on the client and `'@reduxjs/toolkit/query/react'` on the server.\r\n\r\nThat doesn't seem feasible, though:\r\n\r\n* for one, this would be a *lot* of code duplication (it's not uncommon for an API to have 50 endpoints, and all of those can be a lot more complex with lifecycle events, etc)\r\n* also, it would make it impossible to use some files in both contexts, as there is always the risk of having both APIs end up on the client\r\n\r\nSo for now, we will probably just not add `\"use client\"` anywhere until some kind of pattern comes up, but I'm not particularly happy about it.\r\n\r\n# Example 2: an Apollo \"next-specific\" helper library.\r\n\r\n<details>\r\n    <summary>This one is collapsed since it is not relevant anymore</summary>\r\n\r\nWith classic SSR, for Apollo, we have told people how to create clients for different NextJs render contexts and how to hydrate data from SSR/SSG to the Client.  \r\nWith RSC, this picture gets a lot more complicated, and we want to create a helper library that's as easy to use as possible.\r\n\r\nProblems we intend to solve contain, among others:\r\n* a central point to \"register\" a `makeClient` function in which the user can \"build up\" their Apollo Client, with all the individual configuration options.\r\n* transport data that was fetched on the server into the client component's Apollo Client instance\r\n* care about making sure that on the server, only one Apollo Client per request is generated and shared between all RSCs for that request\r\n\r\nThe first approach was to create a `registerApolloClient(makeClient: () => ApolloClient)` to register the `makeClient` function, paired with a `getClient()` function that would lazy-initialize a client and store it differently in different enviroments:\r\n* in classic SSR (which we also want to support), latch onto the NextJs internal `requestAsyncStorage` and create a singleton per-request instance there\r\n* in RSC, try to do the same with a `React.cache` call (that, at this point, I hope exists per-request)\r\n* on the client side, just hold the Apollo Client in a module-scoped variable\r\n\r\nThat didn't work. I couldn't find a place in the code to call `registerApolloClient` that would actually execute this initialization function both on the server and the client. The whacky workaround would be to tell the user to create a server file and a client file and call `registerApolloClient` in both, but tbh., this is something I absolutely want to avoid.  \r\nBut even that seems unlikely: what if the server just rerenders a subtree? Where would I put `registerApolloClient` in that case, to make sure it has been called and `getClient()` doesn't try to call an unregistered `makeClient` function?\r\n\r\nSo I changed the design of the function:\r\n```js\r\nconst { getClient } = registerApolloClient(function makeClient(){\r\n  return new ApolloClient({ uri, new InMemoryCache() })\r\n})\r\n```\r\n\r\nThis way, I can make sure that wherever `getClient` is called, `registerApolloClient` has been executed in the same environment before.\r\n\r\nBut then we get to the Provider.\r\n\r\nAt this point, the user has to wrap `<ApolloProvider client={getClient()}>` around their application so all client components have access to that. (This assumes that `ApolloProvider` is a client component, which is another rabbit hole about bundling that we won't go into at this point.)  \r\nBut that doesn't work - the client is non-serializable, so it cannot be created in a Server Component.\r\nAs a result, we have to tell our users to create a file like\r\n```js\r\n\"use client\"\r\nexport const MyApolloProvider = ({children}) => <ApolloProvider client={getClient}>{children}</ApolloProvider>\r\n```\r\nand then wrap that `MyApolloProvider` component around their application.\r\n\r\nAs this seems like very annoying boilerplate, my idea was that `registerApolloClient` could be extended:\r\n```js\r\nconst { getClient, MyApolloProvider } = registerApolloClient(makeClient)\r\n```\r\nBut at that point, if I want to be able to execute `registerApolloClient` on the server, the file creating `MyApolloProvider` cannot be marked `\"use client\"`. But without that, `MyApolloProvider` will not be rendered on the client.\r\n\r\nWhich leads to the question if it is in any way possible to *create but not render* client-side components on the server. They would just need to \"be in the JSX\".\r\n\r\nRight now, the workaround is that `registerApolloClient` returns a `withClient` function that can be used to wrap hooks that should be used on the client in a way that they call `getClient` instead of using context at all. But this seems pretty hacky:\r\n\r\n```js\r\nimport { useQuery as useApolloQuery } from \"@apollo/client\";\r\n\r\nexport const { getClient, withClient } = registerApolloClient(makeClient);\r\nexport const useQuery = withClient(useApolloQuery);\r\n```\r\n</details>\r\n\r\n---\r\n\r\nSo yeah, this is pretty open ended, but several questions have popped up during the process of getting into all of this, so I'll try to spell out the obvious ones, and maybe you also spotted other questions within my approaches that I didn't even think of asking.\r\n\r\nBasic questions:\r\n\r\n* how to have a piece of code that will definitely be executed per request on the server, and once on the client? An equivalent of just writing code in front of `root.render`?\r\n* how to create components that are meant to be rendered client-side, but not by importing a file, but by calling a method?\r\n* is there a way of forcing a certain component to be rendered both on the server and on the client?","state":"open","updated_at":"2023-06-16T15:03:20Z","created_at":"2023-03-22T14:55:39Z","creator_user_login":"phryneas"}
{"number":26449,"title":"Add links to new docs and remove links to old docs","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nUpdate readme to new documentation links to [react.dev](https://react.dev/)\r\n\r\n","state":"open","updated_at":"2023-03-21T16:05:41Z","created_at":"2023-03-21T16:00:48Z","creator_user_login":"drewradcliff"}
{"number":26446,"title":"Generate sourcemaps for production build artifacts","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis PR updates the Rollup build pipeline to generate sourcemaps for production build artifacts like `react-dom.production.min.js`.\r\n \r\nIt requires the Rollup v3 changes that were just merged in #26442 .\r\n\r\nSourcemaps are currently _only_ generated for build artifacts that are _truly_ \"production\" - no sourcemaps will be generated for development, profiling, UMD, or `shouldStayReadable` artifacts.\r\n\r\nThe generated sourcemaps contain the bundled source contents right before that chunk was minified by Closure, and _not_ the original source files like `react-reconciler/src/*`.  This better reflects the actual code that is running as part of the bundle, with all the feature flags and transformations that were applied to the source files to generate that bundle.  The sourcemaps _do_ still show comments and original function names, thus improving debuggability for production usage.\r\n\r\nFixes #20186 .\r\n\r\n\r\n\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThis allows React users to actually debug a readable version of the React bundle in production scenarios.  It also allows other tools like [Replay](https://replay.io) to do a better job inspecting the React source when stepping through.\r\n\r\n## How did you test this change?\r\n\r\n- Generated numerous sourcemaps with various combinations of the React bundle selections\r\n- Viewed those sourcemaps in https://evanw.github.io/source-map-visualization/ and confirmed via the visualization that the generated mappings appear to be correct\r\n\r\nI've attached a set of production files + their sourcemaps here:\r\n\r\n[react-sourcemap-examples.zip](https://github.com/facebook/react/files/11023466/react-sourcemap-examples.zip)\r\n\r\nYou can drag JS+sourcemap file pairs into https://evanw.github.io/source-map-visualization/ for viewing.\r\n\r\nExamples:\r\n\r\n- `react.production.min.js`:\r\n\r\n![image](https://user-images.githubusercontent.com/1128784/226478247-e5cbdee0-83fd-4a19-bcf1-09961d3c7da4.png)\r\n\r\n- `react-dom.production.min.js`:\r\n\r\n![image](https://user-images.githubusercontent.com/1128784/226478433-b5ccbf0f-8f68-42fe-9db9-9ecb97770d46.png)\r\n\r\n- `use-sync-external-store/with-selector.production.min.js`:\r\n\r\n![image](https://user-images.githubusercontent.com/1128784/226478565-bc74699d-db14-4c39-9e2d-b775f8755561.png)\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-08-31T16:49:15Z","created_at":"2023-03-20T22:25:28Z","creator_user_login":"markerikson"}
{"number":26443,"title":"Bug: `react-dom-webpack-server` bundles are currently broken on `main`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: N/A (Build tooling issue on `main` as of commit [`0131d0c`](https://github.com/facebook/react/commit/0131d0cff40d4054ac72c857d3a13c5173c46e0a) )\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone, install, and run `yarn build`\r\n2. Inspect `build/oss-stable/react-server-dom-webpack/cjs/react-server-dom-webpack-server.browser.development.js`\r\n3. Scroll to line 300, around `var reservedProps =`.  Compare with `react-dom-bindings/src/shared/DOMProperty.js`.  Note that:\r\n  - There is no `properties` object in the build output\r\n  - The lines that _should_ say `properties[name] = new PropertyInfoRecord(....)` are missing the assignment, and only say `new PropertyInfoRecord()`\r\n  - A couple of the associated constants like `const RESERVED = 0` are also missing\r\n\r\nThis appears to be a bug in Rollup's tree-shaking behavior.  If the Rollup config in `build.js` is modified to say `moduleSideEffects: 'safest'`, the missing content appears in these bundles.\r\n\r\nPer experimentation, this can be addressed by adding a custom Rollup plugin that specifically tells Rollup \"this code has side effects, don't tree-shake it\" (based on https://github.com/rollup/rollup/issues/4090#issuecomment-847716887 ):\r\n\r\n```ts\r\nmodule.exports = function disableTreeshake() {\r\n  return {\r\n    name: 'scripts/rollup/plugins/disable-treeshake',\r\n    transform(code, id) {\r\n      // Fix issue with `react-dom-webpack-server` bundles accidentally\r\n      // stripping out the `properties` object and not filling it out\r\n      if (id.endsWith('DOMProperty.js')) {\r\n        return {\r\n          code,\r\n          map: null,\r\n          moduleSideEffects: 'no-treeshake',\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n};\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe full code from `DOMProperty.js` does not show up in those `react-dom-webpack-server` bundles\r\n\r\n## The expected behavior\r\n\r\nThe `DOMProperty` output _should_ show up.","state":"open","updated_at":"2023-03-20T18:18:30Z","created_at":"2023-03-20T17:47:55Z","creator_user_login":"markerikson"}
{"number":26439,"title":"useEffectEvent failing lint tests","body":"The event function returned from useEffectEvent should not be allowed to flow into anything except for a useEffect scope.\r\n\r\nI'm not sure whether it's feasible to handle all cases in the ESLint plugin, without Forget-level flow analysis, but we should try to cover the most common cases.\r\n\r\nFor example, this currently does not result in a linter error, but it should:\r\n\r\n```js\r\nconst subscribe = useEffectEvent(() => store.subscribe());\r\nconst susbcribe2 = useCallback(() => subscribe(), []);\r\n```\r\n\r\nI tried this with both the rules-of-hooks lint rule and the exhaustive-deps lint rule. Neither produced an error.\r\n\r\nEven if our flow analysis isn't perfect, you would at least expect it to violate exhaustive-deps because subscribe is omitted from the dependency list of the useCallback call — you're allowed to omit event functions from a useEffect deps array, but not useCallback or useMemo. But really it should error even earlier than that.\r\n\r\nI didn't really know which test file to put these cases in, so I put them in both. Whoever fixes this can decide. There are existing relevant test cases for both rules-of-hooks and exhaustive-deps. (I always forget that exhaustive-deps is a separate opt-in.) Because this is a new hook, I really think it should fail even if exhuastive-deps isn't enabled. Going forward it would be nice to merge these into a single rule, perhaps in a new major release of the lint package.","state":"open","updated_at":"2023-03-20T16:11:20Z","created_at":"2023-03-20T16:02:10Z","creator_user_login":"acdlite"}
{"number":26438,"title":"chore: rm server error `base64` entry from `/error-codes/codes.json` map","body":"Summary\r\n\r\n- rm server error `base64` entry from `/error-codes/codes.json` map\r\n- this error only occurs in a server build, where we don't replace error messages with codes.\r\n\r\n-- w/ 🐼","state":"open","updated_at":"2023-03-23T15:42:39Z","created_at":"2023-03-20T15:07:56Z","creator_user_login":"Pranav-yadav"}
{"number":26436,"title":"[DOC] Replace legacy reactjs doc with latest react.dev urls","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nThe documentation home of React.js has been migrated from reactjs.org to react.dev, but the readme of this file is still pointing toward the legacy documentation. Many of the existing URLs redirect to the react.dev, but some of them don't.\r\nTherefore, I put some effort to replace the legacy website's URLs with the latest ones, as it will also be helpful with the SEO of the React.dev. Though there are some URLs which I didn't intentionally replace as they require proper decision-making from the react team, but the least I can do is replace the common ones. Thanks.\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nWell, I checked all URLs side by side to see if they server the same purpose or not.\r\n","state":"open","updated_at":"2023-03-20T15:37:25Z","created_at":"2023-03-20T13:44:16Z","creator_user_login":"justEhmadSaeed"}
{"number":26428,"title":"Bug: ","body":"## Bug report: Scrollbar disappears on hover in the new React doc sidebar\r\n\r\n## Description\r\nWhen I hover over the scrollbar in the sidebar of the new React documentation, it disappears instead of remaining visible so that I can scroll through the content. This makes it difficult to navigate through the documentation when the sidebar contains a lot of items.\r\n\r\n## Steps to reproduce\r\n\r\nOpen the React documentation in a web browser\r\nNavigate to a page with a long sidebar, such as the \"/learn\" page\r\nHover over the scrollbar in the sidebar\r\n\r\n## Expected behavior\r\nWhen I hover over the scrollbar in the sidebar, it should remain visible so that I can scroll through the content.\r\n\r\n## Actual behavior\r\nWhen I hover over the scrollbar in the sidebar, it disappears instead of remaining visible.\r\n\r\n\r\n## Additional information\r\n\r\nBrowser and version: [e.g. Google Chrome 111.0.5563.65 ]\r\n","state":"open","updated_at":"2023-04-07T12:07:58Z","created_at":"2023-03-19T06:49:34Z","creator_user_login":"Undisclosed64"}
{"number":26424,"title":"FIX: Use `typos` tool to detect various (`~140`) typos across react codebase :) ✨","body":"## Summary\r\n\r\nThis diff fixes various (`~140`) **typos** across react codebase :)\r\n\r\n## How did you test this change?\r\n\r\nThis diff fixes various typos across react including all of the packages and the remaining codebase.\r\n\r\nI came across an excellent tool named [**typos**](https://github.com/crate-ci/typos) and used it to find the typos, _yet I fixed all the typos manually_ to take into account the context of the words (e.g. React uses some string hashing algo and it provides the name of the algo which seems german, so basically it's kept as it).\r\n\r\nFor all of the changes, I assumed the `en-us` locale.\r\n\r\n>**NOTE**: I did **not** use `--write-changes` flag while running the tool; hence, all changes are done manually.\r\n\r\nFinally ran:\r\n- `yarn prettier`\r\n- `yarn test` _takes lot of time..._ ;)","state":"open","updated_at":"2023-03-31T07:46:06Z","created_at":"2023-03-18T20:40:21Z","creator_user_login":"Pranav-yadav"}
{"number":26414,"title":"form fields with different type but no key get reused when re-rendering","body":"This behaviour seems really counter intuitive and foot-gun prone.\r\nHere we see a password field getting turned into a text field and revealing its contents: https://stackblitz.com/edit/react-ue1odn?file=src/App.js\r\n\r\nI personally stumbled on this issue with a form with some conditional rendering and multiple buttons (one `type=\"submit\"` and another `type=\"button\"` which would toggle the conditional rendering `onClick`). For some reason when I clicked the `type=\"button\"` my form would be submitted. Hours of furious head scratching ensued. Turned out the `button` was being reused, turned into a `type=\"submit\"` and then causing a `submit` event.\r\nHere's an example of a form that get's submitted when the user clicks a button that's supposed to just be `type=\"button\"`: https://stackblitz.com/edit/react-iqjcp8?file=src/App.js\r\n\r\nIf this really is how it _should_ behave, then shouldn't the docs mention the pitfalls here in the same way the importance of the use of `key`s is explained in relation to lists?\r\nMaybe it should be added as a pitfall here? https://react.dev/learn/conditional-rendering\r\n\r\nOr maybe it would be possible to have an automatic warning similar to `Warning: Each child in a list should have a unique “key” prop.`?\r\n\r\nOld related issue: https://github.com/facebook/react/issues/8554","state":"open","updated_at":"2023-03-16T23:11:56Z","created_at":"2023-03-16T20:30:52Z","creator_user_login":"johtso"}
{"number":26409,"title":"Is there any way you can provide a code sample that reproduces the problem? That error should only occur if there's a bug in React, so it'd be very helpful if we could reproduce.","body":"              Is there any way you can provide a code sample that reproduces the problem? That error should only occur if there's a bug in React, so it'd be very helpful if we could reproduce.\r\n\r\n_Originally posted by @aweary in https://github.com/facebook/react/issues/17355#issuecomment-553657988_\r\n            ","state":"open","updated_at":"2023-03-16T15:53:26Z","created_at":"2023-03-16T15:53:26Z","creator_user_login":"Priyanshuraj21030"}
{"number":26407,"title":"Add in-built styling capability of React Components","body":"React is said to be a JavaScript Library for creating User Interface.\r\n\r\nNow, I've wondered, how we can have a User Interface without styles?\r\n\r\nThis is where I'm asking that-- why doesn't React have an in-built styling System where we can directly style our React Components without using third party tools like Styled Components, Emotion, Aphrodite, Linaria and so on?\r\n\r\nYou see, Web Development has become too complex and too complicated because there's just too much to learn to create a simple thing as User Interface.\r\n\r\nThis means that to style my React Application after learning JavaScript and learning React, I still need again to learn a new library or framework like Styled Components, Emotion, Aphrodite, Linaria and so on.\r\n\r\nThis is too much work. So I am requesting that React should come with the styling feature in-built: so that I will just learn it together along the way while learning React, and not be bothered with learning a new styling library after going through the stress and pain of learning HTML, CSS, JavaScript and React.\r\n\r\nCan React make Components styling an in-built React feature?\r\n\r\nRegards.","state":"open","updated_at":"2023-04-29T04:05:47Z","created_at":"2023-03-16T05:32:25Z","creator_user_login":"CordialGit"}
{"number":26396,"title":"Bug:  `Cannot set properties of null (setting 'dev')` When running `npm link ../myapp/node_modules/react`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen running `npm link` we have two different versions of react on the library and app. I'm trying to run `npm link ../myapp/node_modules/react` (replacing the template as the path to my app from the library) to which I get an error:\r\n`Cannot set properties of null (setting 'dev')`\r\n\r\nReact version: 18.2.0\r\nOS: Windows 11\r\n\r\n## Steps To Reproduce\r\n\r\n1. run `npm link` in my library\r\n2. run `npm link @my-package` in the app\r\n3. run `npm link ../myapp/node_modules/react` (replacing the template) in my library to fix issues with different react versions.\r\n4. get error: \r\n```\r\nnpm ERR! Cannot set properties of null (setting 'dev')\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     C:\\Users\\sarco\\AppData\\Local\\npm-cache\\_logs\\2023-03-15T15_52_45_146Z-debug.log\r\n```\r\n\r\n## The current behavior\r\nGet's the error mentioned\r\n\r\n## The expected behavior\r\nLinks correct and resolves the issue with duplicate react versions.\r\n\r\nDebug.log file:\r\n```\r\n0 verbose cli [\r\n0 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node.exe',\r\n0 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\r\n0 verbose cli   'link',\r\n0 verbose cli   '../iq-web/v2/node_modules/react'\r\n0 verbose cli ]\r\n1 info using npm@8.1.2\r\n2 info using node@v16.13.1\r\n3 timing npm:load:whichnode Completed in 0ms\r\n4 timing config:load:defaults Completed in 1ms\r\n5 timing config:load:file:C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\npmrc Completed in 2ms\r\n6 timing config:load:builtin Completed in 2ms\r\n7 timing config:load:cli Completed in 1ms\r\n8 timing config:load:env Completed in 1ms\r\n9 timing config:load:file:D:\\GitHub\\statsbomb\\soccer-kitbag\\.npmrc Completed in 0ms\r\n10 timing config:load:project Completed in 1ms\r\n11 timing config:load:file:C:\\Users\\sarco\\.npmrc Completed in 2ms\r\n12 timing config:load:user Completed in 2ms\r\n13 timing config:load:file:C:\\Program Files\\nodejs\\etc\\npmrc Completed in 0ms\r\n14 timing config:load:global Completed in 0ms\r\n15 timing config:load:validate Completed in 0ms\r\n16 timing config:load:credentials Completed in 1ms\r\n17 timing config:load:setEnvs Completed in 1ms\r\n18 timing config:load Completed in 10ms\r\n19 timing npm:load:configload Completed in 10ms\r\n20 timing npm:load:setTitle Completed in 0ms\r\n21 timing npm:load:setupLog Completed in 1ms\r\n22 timing config:load:flatten Completed in 2ms\r\n23 timing npm:load:cleanupLog Completed in 2ms\r\n24 timing npm:load:configScope Completed in 0ms\r\n25 timing npm:load:projectScope Completed in 1ms\r\n26 timing npm:load Completed in 18ms\r\n27 timing arborist:ctor Completed in 0ms\r\n28 timing idealTree:init Completed in 2ms\r\n29 timing idealTree:userRequests Completed in 2ms\r\n30 silly idealTree buildDeps\r\n31 silly placeDep ROOT react@18.2.0 OK for:  want: file:D:/GitHub/statsbomb/iq-web/v2/node_modules/react\r\n32 timing idealTree:#root Completed in 4ms\r\n33 timing idealTree:node_modules/react Completed in 0ms\r\n34 timing idealTree:buildDeps Completed in 5ms\r\n35 timing idealTree:fixDepFlags Completed in 0ms\r\n36 timing idealTree Completed in 10ms\r\n37 timing reify:loadTrees Completed in 10ms\r\n38 timing reify:diffTrees Completed in 1ms\r\n39 silly reify moves {}\r\n40 timing reify:retireShallow Completed in 0ms\r\n41 timing reify:createSparse Completed in 0ms\r\n42 timing reify:loadBundles Completed in 0ms\r\n43 silly audit bulk request { react: [ '18.2.0' ] }\r\n44 timing reifyNode:node_modules/react Completed in 20ms\r\n45 timing reify:unpack Completed in 20ms\r\n46 timing reify:unretire Completed in 0ms\r\n47 timing build:queue Completed in 0ms\r\n48 timing build:deps Completed in 0ms\r\n49 timing build:queue Completed in 0ms\r\n50 timing build:links Completed in 0ms\r\n51 timing build Completed in 0ms\r\n52 timing reify:build Completed in 1ms\r\n53 timing reify:trash Completed in 0ms\r\n54 timing command:link Completed in 6711ms\r\n55 verbose stack TypeError: Cannot set properties of null (setting 'dev')\r\n55 verbose stack     at calcDepFlagsStep (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\@npmcli\\arborist\\lib\\calc-dep-flags.js:34:21)\r\n55 verbose stack     at visit (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\@npmcli\\arborist\\lib\\calc-dep-flags.js:12:20)\r\n55 verbose stack     at visitNode (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\treeverse\\lib\\depth-descent.js:57:25)\r\n55 verbose stack     at next (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\treeverse\\lib\\depth-descent.js:44:19)\r\n55 verbose stack     at depth (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\treeverse\\lib\\depth-descent.js:82:10)\r\n55 verbose stack     at depth (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\treeverse\\lib\\depth.js:27:12)\r\n55 verbose stack     at calcDepFlags (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\@npmcli\\arborist\\lib\\calc-dep-flags.js:10:15)\r\n55 verbose stack     at Arborist.[copyIdealToActual] (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\@npmcli\\arborist\\lib\\arborist\\reify.js:1400:7)\r\n55 verbose stack     at Arborist.reify (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\node_modules\\@npmcli\\arborist\\lib\\arborist\\reify.js:153:35)\r\n55 verbose stack     at async Link.linkInstall (C:\\Users\\sarco\\AppData\\Roaming\\nvm\\v16.13.1\\node_modules\\npm\\lib\\link.js:105:7)\r\n56 verbose cwd D:\\GitHub\\statsbomb\\soccer-kitbag\r\n57 verbose Windows_NT 10.0.22621\r\n58 verbose argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"link\" \"../iq-web/v2/node_modules/react\"\r\n59 verbose node v16.13.1\r\n60 verbose npm  v8.1.2\r\n61 error Cannot set properties of null (setting 'dev')\r\n62 verbose exit 1\r\n\r\n```","state":"open","updated_at":"2023-04-09T05:38:43Z","created_at":"2023-03-15T16:01:02Z","creator_user_login":"wcardosodev"}
{"number":26393,"title":"Bug: Two tests failing without any changes","body":"When running the tests in the React repository, I noticed that two tests are failing without any changes being made to the codebase. The failing tests are:\r\n\r\nReactClassEquivalence › tests the same thing for es6 classes and CoffeeScript\r\nReactClassEquivalence › tests the same thing for es6 classes and TypeScript\r\nBoth tests are failing with the following error message:\r\n![image](https://user-images.githubusercontent.com/55752993/225219878-29741067-0de2-4b76-99e2-ba7eeb57c512.png)\r\n\r\nI have reproduced the issue on my local machine by following the instructions in the React repository's README file. The issue persists even after running yarn clean and yarn commands.\r\n\r\nI am using the following environment:\r\n\r\nOperating system: Windows 10\r\nNode version: 18.12.1\r\nYarn version: 1.22.19\r\nReact version: 18.2.0\r\nI could not find any existing issue in the React repository's issue tracker related to this issue.\r\n\r\nPlease let me know if you need any additional information from my side to investigate and resolve this issue.\r\n\r\nThank you.\r\n","state":"open","updated_at":"2023-03-26T10:21:18Z","created_at":"2023-03-15T06:06:10Z","creator_user_login":"gitAzad"}
{"number":26378,"title":"One of the best JS library in History","body":"React.TS is so robust!!!","state":"open","updated_at":"2023-05-06T21:13:56Z","created_at":"2023-03-13T12:39:19Z","creator_user_login":"myworldbox"}
{"number":26374,"title":"Bug: `createRoot` function from React@18 break the css `:target`","body":"## Keywords\r\n\r\n- React 18\r\n- createRoot\r\n- CSS selector\r\n- CSS Target\r\n- :target\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n## React version: React@18\r\n\r\n## Steps To Reproduce\r\n\r\n1. open https://joyful-kelpie-c3bb20.netlify.app/buggy.html\r\n2. click `go to react id target` link\r\n3. You should see the `react id target` with green background\r\n4. Refresh page. The green background disappears\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nThe webpage source code is simple. You could check the source code directly.\r\n\r\nOr, you can check this:\r\nhttps://gist.github.com/magic-akari/475a13219394fb938cff4169a9b61eb7\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n\r\n## The current behavior\r\nCSS target selector does not work.\r\nThe green background disappears after refresh pages.\r\n\r\n## The expected behavior\r\n\r\nCSS target selector should work after refresh pages.\r\n\r\nSee: https://joyful-kelpie-c3bb20.netlify.app/ok.html","state":"open","updated_at":"2023-06-13T15:57:14Z","created_at":"2023-03-12T08:53:51Z","creator_user_login":"magic-akari"}
{"number":26363,"title":"Bug: { children }: { children: Element[]; }) => boolean' is not assignable to type 'FC<{ children: Element[]; }>","body":"This compiles\r\n```\r\nimport { Context, createContext, useEffect, useState } from \"react\";\r\n\r\nexport class AppSettings {\r\n    buildName: string = '';\r\n    authority: string = '';\r\n    truthPortalApi: string = '';\r\n    environment: string = '';\r\n}\r\n\r\nexport const AppSettingsContext: Context<AppSettings> = createContext<AppSettings>(null!)\r\n\r\nexport const AppSettingsProvider: React.FC<{ children: JSX.Element }> = ({ children }) => {\r\n    const [settings, setSettings] = useState<AppSettings>(new AppSettings())\r\n\r\n    useEffect(() => {\r\n        fetch(`${window.location.origin}/settings`)\r\n            .then(response => response.json())\r\n            .then(data => setSettings(data))\r\n    }, []);\r\n\r\n    return (\r\n        <AppSettingsContext.Provider value={settings}>\r\n            {children}\r\n        </AppSettingsContext.Provider>\r\n    )\r\n}\r\n```\r\n\r\nbut this does not\r\n```\r\nlet appSettings: AppSettings = useContext<AppSettings>(AppSettingsContext)!;\r\nexport const AuthContext: Context<AuthService> = createContext<AuthService>(new AuthService(appSettings));\r\n\r\nexport const AuthProvider: React.FC<{ children: JSX.Element[] }> = ({ children }) => {\r\n    const [authService, setAuthService] = useState<AuthService>(new AuthService(appSettings));\r\n\r\n    return (\r\n        <AuthContext.Provider value= { authService } >\r\n        { children }\r\n        < /AuthContext.Provider>\r\n    );\r\n}\r\n```\r\n*  Error\tTS2322\t(TS) Type '({ children }: { children: Element[]; }) => boolean' is not assignable to type 'FC<{ children: Element[]; }>'.\r\n* Error\tTS2503\t(TS) Cannot find namespace 'AuthContext'.","state":"open","updated_at":"2023-03-25T20:37:01Z","created_at":"2023-03-10T14:04:32Z","creator_user_login":"rwb196884"}
{"number":26362,"title":"Bug: Error Boundary is not able to catch only specific Error types","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n```tsx\r\nimport React from \"react\";\r\n\r\nexport class UnauthorizedError extends Error {}\r\n\r\ninterface IAuthenticationBoundaryProps { fallback: React.ReactNode, children: React.ReactNode}\r\n\r\nexport class AuthenticationBoundary extends React.Component<IAuthenticationBoundaryProps, {hasError: boolean}> {\r\n  constructor(props: IAuthenticationBoundaryProps) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error: unknown) {\r\n    if (error instanceof UnauthorizedError) {\r\n      this.setState({\r\n        hasError: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      {this.state.hasError ? this.props.fallback : this.props.children}\r\n    </>\r\n  }\r\n}\r\n\r\n\r\nlet userId: number | null = null;\r\n\r\nexport function useIsLoggedIn({requiresLogin}: {requiresLogin: true}): number\r\nexport function useIsLoggedIn({requiresLogin}: {requiresLogin: false}): number | null\r\nexport function useIsLoggedIn({requiresLogin}: {requiresLogin: boolean}) {\r\n  if (!userId && requiresLogin) {\r\n    throw new UnauthorizedError()\r\n  }\r\n  return userId;\r\n}\r\n```\r\n\r\nIf any other error then `UnauthorizedError` is thrown the following error is shown:\r\n\r\n`Error: AuthenticationBoundary: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.`\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/dank-fast-ntyo9w\r\n\r\n## The current behavior\r\n\r\nReact shows a warning if not all Error types are handled.\r\n\r\n## The expected behavior\r\n\r\nThere should be a way to catch only specific errors.","state":"open","updated_at":"2023-03-13T03:54:00Z","created_at":"2023-03-10T08:42:14Z","creator_user_login":"jantimon"}
{"number":26340,"title":"[DevTools Bug] Cannot add node \"621\" because a node with that id is already in the Store.","body":"### Website or app\n\nhttps://github.com/iprinceroyy/crwn-clothing\n\n### Repro steps\n\nBug report:\r\n1. Clone & run in the local environment.\r\n2. Sign in.\r\n3. Head over to the shop.\r\n4. Add some items to cart.\r\n5. Click on the cart icon.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.2-1a88fbb67\n\n### Error message (automated)\n\nCannot add node \"621\" because a node with that id is already in the Store.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27863:41\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25892:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26061:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56323:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-05-23T15:32:59Z","created_at":"2023-03-08T13:15:00Z","creator_user_login":"iprinceroyy"}
{"number":26332,"title":"Tests for useInsertionEffect's behavior in strict mode.","body":"Tested/linted/prettier'd. The site gave me an error message when I tried to sign the CLA, but I may have already signed it.\r\n\r\n## Summary\r\n\r\nIn strict mode, `useInsertionEffect` does not go through the mount-unmount-mount cycle the way `useEffect` and `useLayoutEffect` do, but I did not see any tests that cover this behavior, so this PR adds tests.\r\n\r\n## How did you test this change?\r\n\r\n```bash\r\nTest Suites: 2 skipped, 292 passed, 292 of 294 total\r\nTests:       90 skipped, 7745 passed, 7835 total\r\nSnapshots:   141 passed, 141 total\r\nTime:        135.524 s\r\nRan all test suites.\r\n✨  Done in 136.89s.\r\n\r\nreact (main) $ yarn prettier\r\nyarn run v1.22.19\r\n$ node ./scripts/prettier/index.js write-changed\r\n> git merge-base HEAD main\r\n> git diff --name-only --diff-filter=ACMRTUB 722f02fa6b2354349936286fc14970d1015296e4\r\n> git ls-files --others --exclude-standard\r\n✨  Done in 1.25s.\r\n\r\nreact (main) $ yarn lint\r\nyarn run v1.22.19\r\n$ node ./scripts/tasks/eslint.js\r\nLinting all files...\r\nHint: run `yarn linc` to only lint changed files.\r\n\r\nLint passed.\r\n✨  Done in 6.33s.\r\n\r\nreact (main) $ yarn flow-ci\r\nyarn run v1.22.19\r\n$ node ./scripts/tasks/flow-ci.js\r\nRunning Flow on the dom-node renderer...\r\nFound 0 errors\r\nFlow passed for the dom-node renderer\r\n\r\nRunning Flow on the dom-bun renderer...\r\n...\r\n✨  Done in 189.15s.\r\n```","state":"open","updated_at":"2023-03-09T19:57:36Z","created_at":"2023-03-07T00:20:05Z","creator_user_login":"egonSchiele"}
{"number":26327,"title":"Bug: The placeholder is shown on top of the input value.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0 18.3.xxx\r\n\r\n## Steps To Reproduce\r\n\r\n1. On chrome canary, go to https://codesandbox.io/s/chrome-canary-placeholder-bug-ez4je3?file=/src/App.js\r\n2. The placeholder is shown on top of the input value. 😱 \r\n<img width=\"520\" alt=\"image\" src=\"https://user-images.githubusercontent.com/529333/223174089-f62093af-e010-4dec-ac9a-9a512e637975.png\">\r\n\r\n3. If you focus the input, the placeholder disappears. 👍 \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/chrome-canary-placeholder-bug-ez4je3?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe placeholder is shown on top of the input value.\r\n\r\n## The expected behavior\r\nThe placeholder is not shown.","state":"open","updated_at":"2023-03-20T18:42:51Z","created_at":"2023-03-06T16:38:24Z","creator_user_login":"lazybean"}
{"number":26320,"title":"Bug: `useInsertionEffect()` doesn't fire before `useLayoutEffect()`","body":"React version: `18.2`\r\nNext.js version: `13.2.3`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to the demo page (link below). It's a simple Next.js application (it [wasn't](https://gitlab.com/catamphetamine/virtual-scroller/-/issues/33) created by me, I just forked it). The code is:\r\n\r\n```js\r\nimport { useInsertionEffect, useLayoutEffect } from \"react\";\r\n\r\nexport default function IndexPage(props) {\r\n  useLayoutEffect(() => {\r\n    console.log(\"@ Layout Effect\");\r\n  });\r\n\r\n  useInsertionEffect(() => {\r\n    console.log(\"@ Insertion Effect\");\r\n  });\r\n\r\n  return null;\r\n}\r\n```\r\n\r\n2. Open the web browser console.\r\n\r\n3. See the output in the console:\r\n\r\n```\r\n@ Insertion Effect\r\n@ Layout Effect\r\n@ Layout Effect\r\n```\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/p/sandbox/virtual-scroller-infinite-scroll-forked-srptij?file=%2Fpages%2Findex.js&selection=%5B%7B%22endColumn%22%3A1%2C%22endLineNumber%22%3A14%2C%22startColumn%22%3A1%2C%22startLineNumber%22%3A14%7D%5D\r\n\r\n## The current behavior\r\n\r\nIt prints:\r\n\r\n```\r\n@ Insertion Effect\r\n@ Layout Effect\r\n@ Layout Effect\r\n```\r\n\r\n## The expected behavior\r\n\r\nIt should print:\r\n\r\n```\r\n@ Insertion Effect\r\n@ Layout Effect\r\n@ Insertion Effect\r\n@ Layout Effect\r\n```","state":"open","updated_at":"2023-03-23T01:15:11Z","created_at":"2023-03-06T10:57:05Z","creator_user_login":"catamphetamine"}
{"number":26315,"title":"Bug: useRef cleanup in StrictMode refers to second ref twice","body":"I'm trying to create a handle object, add it to the map and use it as ref. All that should happen on component first render when ref.current === null which according to what I read here is the only exception when directly writing to ref from render function is allowed: https://beta.reactjs.org/reference/react/useRef#avoiding-recreating-the-ref-contents\r\n\r\n`Normally, writing or reading ref.current during render is not allowed. However, it’s fine in this case because the result is always the same, and the condition only executes during initialization so it’s fully predictable.`\r\n\r\nThen I want to cleanup that handle object (remove it from the map) on component unmount.\r\n\r\nObviously, in StrictMode render function is called twice followed immediately by a single execution of the cleanup function. However, cleanup doesn't seem to work correctly as both the cleanup function executed immediately after the component has mounted and the cleanup function executed on actual component unmount are operating on the second ref.\r\n\r\nI've tried [], [ref], and [ref.current] as useEffect dependency but none of that makes any difference and both cleanups are always operating only on the second ref.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\nLink to code example: https://codesandbox.io/s/distracted-marco-hn2rpv?file=/src/index.js\r\n\r\n## The current behavior\r\nBoth useEffect cleanup functions are operating on the second ref.\r\n\r\n## The expected behavior\r\nThe first useEffect cleanup function which is executed straight after the component is mounted to operate on the first ref, while the second cleanup function which is executed when the component is actually getting unmounted to operate on the second ref. \r\n\r\nOr perhaps not duplicating ref with useRef in StrictMode ?\r\n","state":"open","updated_at":"2023-08-03T09:51:11Z","created_at":"2023-03-05T21:32:42Z","creator_user_login":"MaciejNiklasinski"}
{"number":26306,"title":"Supporting `Date` objects in `value` for `type=date` input tags","body":"Currently, when passing `Date` objects as the `value` parameter, the `Date` object is implicitly converted into a string and the browser can't understand the format. This doesn't set the value in the date picker because of that. See https://codesandbox.io/s/objective-turing-zk9bc1?file=/src/App.js\r\n\r\nAccording to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#value), the date value should be specially formatted. While this format is the only way in HTML, I think it would be better if react supported passing `Date` objects directly for the `value` parameter instead of the application developer manually converting the `Date` object to a string (which is error prone without a date library). I'm asking this because here `value` is an object and doesn't always need to be a string (unless I'm wrong).\r\n\r\nPS: I came across this when I was trying to load the date from a saved state and had to convert it to string and faced a weird bug, where the previous day was picked because of time zones. See https://codesandbox.io/s/aged-dawn-j084iv?file=/src/App.js\r\n\r\n","state":"open","updated_at":"2023-08-01T01:12:03Z","created_at":"2023-03-04T18:50:26Z","creator_user_login":"naveen521kk"}
{"number":26301,"title":"Fix:  onContextMenu listener is invoked on disabled buttons in Chrome","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe list of mouse events prevented implemented in  shouldPreventMouseEvent function for disabled interactive targets is doesnt include the onContextMenu event.\r\n\r\nThis causes the event listener to still be invoked even though the interactive target is disabled.\r\n\r\nThe fix is to update the event list to include the onContextMenu event and prevent the mouse event for disabled interactive targets.\r\n\r\nFixes #26298 \r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI tested this change by locally overriding  the react-dom.development.js module in Chrome Dev Tools.\r\n\r\n \r\n\r\nhttps://user-images.githubusercontent.com/13223818/222844616-19e4491a-8246-430f-a330-58230a2b66ca.mov\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-03-08T02:47:14Z","created_at":"2023-03-03T22:36:35Z","creator_user_login":"osule"}
{"number":26298,"title":"Bug: onContextMenu listener is invoked on disabled buttons in Chrome","body":"## Steps To Reproduce\r\n\r\n1. In CRA, declare the App component:\r\n```jsx\r\nimport React from 'react';\r\n\r\nexport default function App() {\r\n  return (\r\n    <button\r\n        type=\"button\"\r\n        onContextMenu={() => {console.log(123);}}\r\n        disabled\r\n    >\r\n        Click me\r\n    </button>\r\n  );\r\n}\r\n```\r\n2. Run the dev server and browse in Chrome\r\n\r\n## The current behavior\r\n\r\nRight clicking the button logs `123` in the Dev Console.\r\n\r\n## The expected behavior\r\n\r\nRight clicking the button should not log `123` in the Dev Console.\r\n","state":"open","updated_at":"2023-03-05T03:21:48Z","created_at":"2023-03-03T21:02:42Z","creator_user_login":"osule"}
{"number":26287,"title":"[eslint-plugin-react-hooks] Allow hooks inside components declared as member properties","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nHi there 👋, a common pattern that I and many other developers use is attaching dependent components to a parent component as a property. This is particularly useful in design systems and other component systems where composability is highly desirable. This look something like below:\r\n\r\n```jsx\r\nconst Heading = ({ children }) => {\r\n  return <div className=\"heading\">{children}</div>\r\n}\r\n\r\nHeading.Title = ({ children }) => {\r\n  useSomeHook();\r\n  return <h1>{children}</h1>\r\n}\r\n```\r\n\r\nWith the current implementation, this rule is unable to detect components like `Heading.Title` above as a react component, and as such will raise an eslint error about the usage of hooks within such a component, despite this being a valid place to use a hook.\r\n\r\nThere are a few different workarounds you could use to get around this, such as declaring the subcomponent separately and then attaching it in a seperate statement, or declaring it as a named function rather than an arrow function. I can live with those workaround but thought that improving the rule would lead to code that is more expressive without a workaround needed due to the specific implementation of this rule.\r\n\r\nYou could certainly argue about the validity of this pattern in regards to module export purity, treeshaking etc however I don't believe any of that is really in the scope of what this hooks rule is looking to verify.\r\n\r\nHopefully this doesn't go against the intent of the existing rule 😅.\r\n\r\n- [x] CLA Completed\r\n- [x] Tests written\r\n\r\n## How did you test this change?\r\n\r\nAdded a unit test to `ESLintRulesOfHooks-test.js`, verified the test fails before the change, and passes after the change.\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->","state":"open","updated_at":"2023-03-09T10:37:34Z","created_at":"2023-03-03T02:36:10Z","creator_user_login":"mattdarveniza"}
{"number":26284,"title":"Bug: Lag when updating coordinates of div on mousemove","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nThere is a noticable delay when updating `div`'s coordinates on mousemove with react 18 compating to react 17\r\n\r\nThere are a couple of videos:\r\nReact 17 (without lag):\r\n\r\nhttps://user-images.githubusercontent.com/61459199/222541475-e7a98d0c-1c47-4e0f-a35b-ff0532e93705.mp4\r\n\r\nReact 18 (with lag):\r\n\r\n\r\nhttps://user-images.githubusercontent.com/61459199/222541530-89dc5d54-3d6a-45f0-8d8c-c52ccc0fd258.mp4\r\n\r\n\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have two `div` elements with `position: absolute`\r\n2. On mousemove update coordinates of the first `div` using \r\n```javascript\r\n ref1.current.style.top = e.clientY + \"px\";\r\n ```\r\n3. On mousemove update coordinates of the second `div` using\r\n```javascript\r\nconst [{ x, y }, setCoords] = useState({ x: 0, y: 0 });\r\n```\r\nand\r\n```javascript\r\n<div\r\n  style={{\r\n    width: \"100px\",\r\n    height: \"100px\",\r\n    position: \"absolute\",\r\n    top: `${y}px`,\r\n    left: `${x}px`,\r\n    backgroundColor: \"red\"\r\n  }}\r\n></div>\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [React 18](https://codesandbox.io/s/gifted-germain-mq7tht) and [React 17](https://codesandbox.io/s/funny-tharp-c01h1n)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nUpdates of `div`'s coordinates are delayed\r\n\r\n## The expected behavior\r\nUpdates of `div`'s coordinates should not be delayed\r\n","state":"open","updated_at":"2023-03-03T10:20:37Z","created_at":"2023-03-02T20:16:38Z","creator_user_login":"blnvdanil"}
{"number":26277,"title":"Bug: creating the initial state","body":"React version: \"18.2.0\"\r\nThe bug is failure of state initialization with a function, and not being consistent with the client and server. the fix is to use useEffect with empty dependency to initialize the state when the component is mounted on client.\r\nI undertstand that useEffect is for synchronization, so it makes sense to initialize all states when component mounts.\r\nHowever, I don't understand why it's not initializing the state with the function and then sending it to the client.\r\n\r\nmemory.tsx\r\n```\r\n'use client'\r\n\r\nimport Link from 'next/link'\r\nimport React, {useState,useEffect} from 'react'\r\nimport MemoryCard from './memoryCard'\r\nimport { cardData } from './memoryData'\r\n\r\ntype cardType = {\r\n    id: number;\r\n    name: string;\r\n    img: string;\r\n    matched: boolean;\r\n}\r\n\r\nfunction createCards() {\r\n    return(\r\n        [...cardData, ...cardData]\r\n        .sort(()=>0.5-Math.random())\r\n        .map((card) => ({...card, id: Math.random()}))\r\n\r\n    )\r\n}\r\n\r\nexport default function Memory() {\r\n    const [cards, setCards] = useState<cardType[]>(createCards)\r\n    const [score, setScore] = useState(0) \r\n    const [lives, setLives] = useState(5)\r\n    \r\n    // useEffect(()=>{\r\n    //     setCards(()=>createCards())   \r\n    // },[])\r\n\r\n\r\n    const shuffleCards = () => {\r\n        setCards(()=>createCards())    \r\n    }\r\n\r\n    return (\r\n    <div>\r\n           \r\n            <div className='w-f h-f'>\r\n\r\n                <Link href={'/'} >\r\n                    <div>Home</div>\r\n                </Link>\r\n                <h1>Magic Match</h1>\r\n                <h3>score: <span id='result'>{score}</span></h3>\r\n                <h3>lives: <span id=\"lives\">{lives}</span></h3>\r\n                <div className='grid grid-cols-4 w-full h-full justify-center items-center mx-auto'>\r\n                    {cards.map((card)=> (\r\n                        <MemoryCard \r\n                            \r\n                            key={card.id }\r\n                            card={card}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <button className='' onClick={() =>shuffleCards()}>New Game</button>\r\n            </div>        \r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nmemoryCard.tsx\r\n```\r\n'use client'\r\n\r\nimport Image from 'next/image';\r\nimport React from 'react'\r\n\r\n\r\ntype props ={\r\n    card: {\r\n        id: number;\r\n        name: string;\r\n        img: string;\r\n        matched: boolean;\r\n    }\r\n}\r\n\r\nexport default function MemoryCard({card}:props) {\r\n  return (\r\n    <div className=\"flex w-full h-64 justify-center items-center \">\r\n        <div>\r\n            <img  src={card.img} alt={'card.name'} title={card.name} />\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nmemoryData.ts\r\n```\r\nexport const cardData= [\r\n    {\r\n        name: 'fries',\r\n        img: '/images/games/memory/french-fries.png',\r\n        matched: false,\r\n    },\r\n    {\r\n        name: 'hamburger',\r\n        img: '/images/games/memory/hamburger.png',\r\n        matched: false,\r\n    },\r\n    {\r\n        name: 'hotdog',\r\n        img: '/images/games/memory/hotdog.png',\r\n        matched: false,\r\n    },\r\n    {\r\n        name: 'milkshake',\r\n        img: '/images/games/memory/milkshake.png',\r\n        matched: false,\r\n    },\r\n    {\r\n        name: 'ice-cream',\r\n        img: '/images/games/memory/ice-cream-cone.png',\r\n        matched: false,\r\n    },\r\n    {\r\n        name: 'pizza',\r\n        img: '/images/games/memory/pizza.png',\r\n        matched: false,\r\n    },\r\n]\r\n```\r\n\r\n\r\nReact version: \"18.2.0\"\r\n\r\n## Steps To Reproduce\r\n\r\n1. Initialize state with function\r\n2. Pass state as prop to child\r\n\r\nLink to code example: https://github.com/Dave-Patsy/stateInitializeError\r\n\r\n\r\n## The current behavior\r\nThe server and client props are not concurrent\r\n![stateInitializeError](https://user-images.githubusercontent.com/24628331/222107129-a973d17f-44f5-461d-b2db-4e5f732093c0.PNG)\r\n\r\n## The expected behavior\r\nWhen I initialize a useState with a function on a client component I expect the server to use the function to initialize the state once, and then then the component to the client, so they are to be concurrent.\r\nThe fix is to use useEffect to initialize the state after component is mounted\r\n\r\n","state":"open","updated_at":"2023-03-05T00:32:05Z","created_at":"2023-03-01T22:29:46Z","creator_user_login":"Dave-Patsy"}
{"number":26260,"title":"Fix test command --sourceMaps flag not enabling inline source maps","body":"## Summary\r\n\r\nThis issue was encountered when I attempted to debug React using VSCode.\r\n\r\nI wanted to initiate debugging of React through testing, so I created the following test file:\r\n\r\n```js\r\n// packages/react/src/__tests__/test.js\r\nconst React = require('../React')\r\n\r\ntest('should first', () => {\r\n  React.createElement('div')\r\n})\r\n```\r\n\r\nAnd used the following configuration to launch VSCode debugging.\r\n\r\n```json\r\n// .vscode/launch.json\r\n{\r\n  \"version\": \"0.2.0\",\r\n  \"configurations\": [\r\n    {\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"name\": \"test\",\r\n      \"program\": \"${workspaceRoot}/scripts/jest/jest-cli.js\",\r\n      \"args\": [\"${file}\"],\r\n      \"env\": {\r\n        \"NODE_ENV\": \"development\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nWhen I ran it for the first time, I found that the breakpoints were not hitting the `test.js` file, but rather another file.\r\n\r\nhttps://user-images.githubusercontent.com/38753204/221841953-c9e73de5-c9a0-4620-9976-22e54ceae9d2.mp4\r\n\r\nI surmised that the issue might be due to source maps not being enabled.\r\n\r\nI discovered that the #24577 added the `--sourceMaps` option to enable source maps when running tests.\r\n\r\nSo I added the `--sourceMaps` option in my `launch.json` file.\r\n\r\n```json\r\n// .vscode/launch.json\r\n{\r\n  \"version\": \"0.2.0\",\r\n  \"configurations\": [\r\n    {\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"name\": \"test\",\r\n      \"program\": \"${workspaceRoot}/scripts/jest/jest-cli.js\",\r\n      \"args\": [\"--sourceMaps\", \"${file}\"],\r\n      \"env\": {\r\n        \"NODE_ENV\": \"development\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nHowever, the result was still that the breakpoints were not hitting the `test.js` file.\r\n\r\nhttps://user-images.githubusercontent.com/38753204/221842047-367e783e-e55c-404a-98a5-cb939df304e7.mp4\r\n\r\n## How did you test this change?\r\n\r\nUpon investigation, I found that the `--sourceMaps` option was meant to configure source maps by adding the `JEST_ENABLE_SOURCE_MAPS` flag, but since the `JEST_ENABLE_SOURCE_MAPS` was not included in the parameters of the `createCacheKeyFunction`, the generated `CacheKey` would not change when the `JEST_ENABLE_SOURCE_MAPS` changed, thus directly using the cache instead of using the `JEST_ENABLE_SOURCE_MAPS` to configure source maps.\r\n\r\n![2023-02-28_18-51-27](https://user-images.githubusercontent.com/38753204/221842419-45c50d16-9a3a-4fee-9074-15c2e012567f.png)\r\n\r\nTo fix this issue, I added `process.env.JEST_ENABLE_SOURCE_MAPS` to the parameters of the `createCacheKeyFunction`, so that when `process.env.JEST_ENABLE_SOURCE_MAPS` changed, a different `CacheKey` would be generated, thus fixing the issue.\r\n\r\n![2023-02-28_19-49-25](https://user-images.githubusercontent.com/38753204/221845884-777d795f-bbc6-4668-a3ac-e68150fb3d81.png)\r\n\r\nUpon running it again, the breakpoints successfully hit the `test.js` file.\r\n\r\nhttps://user-images.githubusercontent.com/38753204/221842760-85cc6285-c419-4e2e-a6ed-664fef60867f.mp4\r\n","state":"open","updated_at":"2023-02-28T12:06:52Z","created_at":"2023-02-28T11:51:16Z","creator_user_login":"XYShaoKang"}
{"number":26259,"title":"Bug: ErrorBoundary remounts children when errors are caught","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIn the `render` block of a `ErrorBoundary` component the `props.children` is remounted when `getDerivedStateFromError` derives a new state (or `componentDidCatch` sets a state).\r\n\r\nIs this a special case ? Setting the state in any other manner (e.g `componentDidUpdate` doesn't have this behavior). I don't see this behavior documented in the React docs.\r\n\r\nThanks!\r\n\r\nReact version: 18.2.0 (Happens on 17.0.2 as well).\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the code example increment the counter past 5 and the child component unmounts and mounts, the child state also resets\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/nifty-platform-wub9wn?file=/src/App.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`props.children` unmounts and mounts.\r\n\r\n## The expected behavior\r\n`props.children` rerenders.\r\n\r\n","state":"open","updated_at":"2023-03-10T08:46:46Z","created_at":"2023-02-28T06:10:57Z","creator_user_login":"fatton139"}
{"number":26254,"title":"Add support for SyntheticKeyboardEvent `isComposing`","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nFixes #13104\r\n\r\nJust added `isComposing`\r\nIf we don't have to consider IE, then we don't need a polyfill for this property.\r\n\r\nhttps://caniuse.com/mdn-api_keyboardevent_iscomposing\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n \r\nNo automated tests found","state":"open","updated_at":"2023-05-09T13:41:41Z","created_at":"2023-02-27T13:30:41Z","creator_user_login":"bhbs"}
{"number":26252,"title":"Bug: dispatch called in a wrong order from useEffect clean","body":"I'm writing a hook to work with async promises. It's supposed to abort current promise when useEffect cleans up and work correctly with various scenarios (when old promise ignores signal and resolves after new promise and so on).\r\n\r\nSo basically I have a state machine with reducer. Promise callbacks and useEffect cleanup call dispatch with corresponding actions.\r\n\r\nNow the issue is as follows: when useEffect cancelled because its deps changed, cleanup function correctly called. I dispatch action to set state to cancelled. Then I abort signal which causes promise to reject. This reject handler calls dispatch. So basically I expected state to proceed to something like \"pending\" -> {cancel} -> \"cancelled\" -> {reject} -> \"cancelled\".\r\n\r\nWhat happens is: dispatches are called in a correct order (according to console.log). But reducer is called with {reject} action instead of {cancel} action. After that it's called with {cancel} action and supplies previous state, so it looks like state is forked or something like that.\r\n\r\nI'm not completely sure if it's a bug, but it's extremely confusing. The component itself is not unmounting, only effect is restarting. I expected reducer to be called linearly and respecting order of dispatch calls.\r\n\r\nI attach example to reproduce this behaviour. Click on button twice quickly.\r\n\r\nOne workaround that I've found is to wrap signal abort in cleanup function into `setTimeout(, 0)`. With this invocation everything works as expected.\r\n\r\nReact version: 18.2.0\r\n\r\nLink to code example: https://codesandbox.io/s/musing-fire-4brokp?file=/src/App.js\r\n\r\nSome logs from this example:\r\n\r\n```\r\nreducer cancelled(10) start(8) pending(11) \r\ndispatch cancel 8\r\ndispatch reject 8\r\nreducer pending(11) reject(8) rejected(15) \r\nreducer pending(11) cancel(8) cancelled(17) \r\n```\r\n\r\nSo dispatches were called in a correct order (cancel, then reject), but reducer was called in a different order and with a wrong state.\r\n\r\nIn the end this causes \"caller\" of this hook to observe \"rejected\" value for one render.\r\n\r\nI disabled Strict Mode for this example.","state":"open","updated_at":"2023-02-27T08:09:21Z","created_at":"2023-02-27T08:08:09Z","creator_user_login":"vbezhenar"}
{"number":26241,"title":"Better type for SchedulerMinHeap","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe type of Heap looks like a bit imperfect.\r\n\r\n\r\n<img width=\"916\" alt=\"Snipaste_2023-02-25_11-35-49\" src=\"https://user-images.githubusercontent.com/53360843/221334610-d0e4a64f-275f-44ec-b3c4-b732c6056b1f.png\">\r\n<img width=\"959\" alt=\"Snipaste_2023-02-25_11-36-46\" src=\"https://user-images.githubusercontent.com/53360843/221334630-b5d5d1d3-b189-4f19-90cb-f6a666b88d39.png\">\r\n<img width=\"914\" alt=\"Snipaste_2023-02-25_11-37-10\" src=\"https://user-images.githubusercontent.com/53360843/221334631-79d8bef7-6fe6-4acf-b17d-64b9511f62d1.png\">\r\n\r\nI provide defaults for parameterized generics of Heap, then It seems to be working.\r\n\r\n<img width=\"917\" alt=\"Snipaste_2023-02-25_11-38-17\" src=\"https://user-images.githubusercontent.com/53360843/221334871-e1a8d923-f293-4a20-ba53-e39ff2456644.png\">\r\n\r\n<img width=\"913\" alt=\"Snipaste_2023-02-25_11-37-40\" src=\"https://user-images.githubusercontent.com/53360843/221334881-6fe766be-2882-41c8-adfa-0dbaf1900849.png\">\r\n\r\n\r\n\r\n\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nyarn test\r\n\r\nyarn test-prod\r\n\r\nyarn flow dom-node\r\n\r\nyarn build\r\n\r\n","state":"open","updated_at":"2023-02-26T12:06:32Z","created_at":"2023-02-25T03:59:15Z","creator_user_login":"xiaosen7"}
{"number":26240,"title":"Bug: Duplicate HTML elements being rendered","body":"React version: 17.0.2 \r\nNext: 12.3.4\r\n\r\nReact Production build\r\n\r\n## Steps To Reproduce\r\n\r\n\r\nMy react code is occasionally producing two duplicate html elements in DOM.\r\nThe second element is a ghost in the sense that it never goes away, and all js events does not trigger (except for changing the textbox value).\r\n\r\n<img width=\"484\" alt=\"Screenshot 2023-02-24 at 6 01 35 PM\" src=\"https://user-images.githubusercontent.com/14841421/221330488-d84dd908-e210-4733-8a3f-f37d3b20c46d.png\">\r\n<img width=\"668\" alt=\"Screenshot 2023-02-24 at 6 02 46 PM\" src=\"https://user-images.githubusercontent.com/14841421/221330490-562ae5f3-4046-489f-9f3d-cde338e759e9.png\">\r\n\r\nThis is the code:\r\n```\r\nimport { sortBy } from \"lodash\";\r\nimport { styled } from \"styled-components\";\r\nimport { Row, Col } from \"antd\";\r\nimport FieldInput from \"./FieldInput\";\r\n\r\nexport default function FormInput({ a }) {\r\nreturn (\r\n    <FormContainer className={a.length > 1 ? \"group\" : undefined}>\r\n      <Row gutter={[16, 0]}>\r\n        {sortBy(a, [\r\n          (a) => {\r\n            return a.position;\r\n          },\r\n          (a) => {\r\n            return a.name;\r\n          },\r\n        ]).map((elem) => {\r\n          return (\r\n            <Col span={12} key={elem.uuid}>\r\n               <FieldInput />\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nconst FormContainer = styled(\"div\")`\r\n  margin: 16px 0px;  \r\n  &.group {\r\n    padding: 16px;\r\n    border: 1px solid black;\r\n    border-radius: 4px;\r\n  }\r\n`;\r\n\r\n```\r\n\r\nI've put debugger breakpoints to make sure I don't have more than one element in the array.  Also, there would be visual indication that a border is being drawn when we have more than one element but this is not the case here.\r\n\r\nLink to code example:\r\n\r\n\r\n\r\n## The current behavior\r\nCurious if anyone else saw this.  did a google search and found nothing.\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-02-27T13:29:39Z","created_at":"2023-02-25T02:15:17Z","creator_user_login":"bugzpodder"}
{"number":26238,"title":"Simplify nested hook warning logic in dev","body":"We have so many dispatchers. And with my changes in https://github.com/facebook/react/pull/26232 it's a bit harder to see if the previous logic was correct. Here I'm moving the flag to a separate value which makes it easier to see that it will work properly with the live dispatcher switch and that the prod behavior is not affected.\r\n\r\nI cheated and mutated ContextOnlyDispatcher in place in dev (previously ContextOnlyDispatcher.readContext would not warn when in a state update but that dispatcher wouldn't be active at the times it's relevant).\r\n\r\nAlso adds the hook ordering warnings to useMemoCache.","state":"open","updated_at":"2023-04-23T18:32:07Z","created_at":"2023-02-25T00:06:59Z","creator_user_login":"sophiebits"}
{"number":26230,"title":"Add package.json exports for use-sync-external-store","body":"Fixes #24590\r\nCloses https://github.com/facebook/react/pull/25231\r\n\r\n## Summary\r\n\r\nWe recently added support for Node ESM to React Aria, allowing all of our packages to be loaded via `import`. However, one problem remains – `import 'use-sync-external-store/shim'` throws an error:\r\n\r\n> Error: Directory import '/Users/govett/dev/rsp-next/node_modules/use-sync-external-store/shim' is not supported resolving ES modules imported from /Users/govett/dev/rsp-next/node_modules/@react-stately/toast/dist/import.mjs\r\n\r\nThis occurs both when using Node and when using webpack (e.g. in Next.js), which treats dependencies resolved from `.mjs` files as [more strictly](https://webpack.js.org/configuration/module/#resolvefullyspecified).\r\n\r\nThis PR adds the \"exports\" field to package.json for use-sync-external-store, mapping the various extensionless and directory specifiers to the correct locations. Building the package itself as ESM is not necessary, we only need package exports for it to work in Node. This matches what `react-dom` and other packages with modules under subpaths do as well.\r\n\r\nFor backward compatibility I have included all files in the package in the exports map, since non-exported files will throw an error.\r\n\r\n## How did you test this change?\r\n\r\nCopied the build output into a directory under `node_modules`, and ran `import('use-sync-external-store/shim')` in a Node REPL. Also copied this into a Next.js project and it worked.","state":"open","updated_at":"2023-06-21T02:44:55Z","created_at":"2023-02-24T17:35:15Z","creator_user_login":"devongovett"}
{"number":26229,"title":"> Is there a chance that the page double rendering bug could happen without strict mode? We are seeing double api calls with React 18 but do not seem to have strict mode enabled.","body":"              > Is there a chance that the page double rendering bug could happen without strict mode? We are seeing double api calls with React 18 but do not seem to have strict mode enabled.\r\n\r\nI had a similar issue with disabled Strictmode. In my case the rerendering happened, because in a specific function, i was not using `event.preventDefault()`. Adding this line stopped the double rendering.\r\n\r\n_Originally posted by @StGrSt in https://github.com/facebook/react/issues/24467#issuecomment-1443442930_\r\n            ","state":"open","updated_at":"2023-05-06T21:22:51Z","created_at":"2023-02-24T11:03:21Z","creator_user_login":"sennymunoz"}
{"number":26227,"title":"Bug: set state is not working inside an event listener on mobile browsers (Android Chrome / iOS Safari)","body":"\r\n<img width=\"848\" alt=\"Screenshot 2023-02-24 at 10 40 02 AM\" src=\"https://user-images.githubusercontent.com/14529528/221106327-35b3f872-cab4-4d88-a640-16ce86cbe006.png\">\r\n<img width=\"651\" alt=\"Screenshot 2023-02-24 at 11 48 26 AM\" src=\"https://user-images.githubusercontent.com/14529528/221106573-27a66fda-17d8-4136-a05a-b62dee25b833.png\">\r\n\r\n\r\n\r\nsetState inside an event listener is not working for Mobile browsers when using React 18.\r\nIf I downgrade to React 16 it works fine, also it works fine on desktop browsers in React 18\r\n\r\nReact version: 18.20\r\n","state":"open","updated_at":"2023-02-24T12:32:52Z","created_at":"2023-02-24T06:18:50Z","creator_user_login":"rashinp"}
{"number":26224,"title":"Make hydration errors more actionable","body":"Hey folks! We at [Sentry](https://sentry.io/for/react/) build error/performance monitoring SDKs and wanted to reach out to see if we could improve the state of hydration errors and make them more actionable. Specifically, we want to look at the stacktraces of hydration errors when you are using production react bundles.\r\n\r\nSince React 18 has been getting more adoption, many of our users using React SSR apps have been getting flooded with hydration errors, like listed below:\r\n\r\n```\r\n'https://reactjs.org/docs/error-decoder.html?invariant=422', // There was an error while hydrating this Suspense boundary. Switched to client rendering.\r\n'https://reactjs.org/docs/error-decoder.html?invariant=423', // There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root...\r\n'https://reactjs.org/docs/error-decoder.html?invariant=425'  // Text content does not match server-rendered HTML...\r\n```\r\n\r\n[When we discussed this with the community](https://github.com/getsentry/sentry-javascript/issues/6295), many users simply wanted to just filter these errors because they were not actionable. \r\n\r\nLooking at the implementation in the codebase a simple string error is thrown:\r\n\r\nhttps://github.com/facebook/react/blob/c04b18070145b82111e1162729f4776f4d2c6112/packages/react-reconciler/src/ReactFiberHydrationContext.js#L406\r\n\r\nand because of how it is generated the stack trace is often not detailed enough to give users insights about what components/functions were problematic.\r\n\r\nFor example, here's a stacktrace I generated from a stock Next.js application with one of these hydration errors:\r\n\r\nhttps://sentry-test.sentry.io/share/issue/b70ea591bbfc4728b33da495148ac9cd/\r\n\r\n![image](https://user-images.githubusercontent.com/18689448/220956476-a009aa9c-2c6d-4cbb-b836-9fa4eae9fd2a.png)\r\n\r\n```\r\nError: There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\r\n  at Vk(./node_modules/react-dom/cjs/react-dom.production.min.js:280:383)\r\n  at 4448/oF/<(./node_modules/react-dom/cjs/react-dom.production.min.js:280:319)\r\n  at Jk(./node_modules/react-dom/cjs/react-dom.production.min.js:280:319)\r\n  at Ok(./node_modules/react-dom/cjs/react-dom.production.min.js:271:86)\r\n  at Hk(./node_modules/react-dom/cjs/react-dom.production.min.js:268:399)\r\n  at J(./node_modules/scheduler/cjs/scheduler.production.min.js:13:197)\r\n  at R(./node_modules/scheduler/cjs/scheduler.production.min.js:14:126)\r\n```\r\n\r\nAs you can see the frames all come from `react-dom` internals, which means users have no way to start investigating where to look beyond the URL of the page.\r\n\r\nIn the end we've decided to filter these out from default from sentry: https://github.com/getsentry/sentry/issues/45038, but we recognize this is not an ideal solution. Hydration errors are things people should fix, and we want to make it easier for people to fix them!\r\n\r\nSo with that in mind, are there ways we could make this easier for users? Could we attach a `componentStack` like we do with error boundaries for these errors? Could we point users to the element that was causing this issue? Any and all ideas/feeback greatly appreciated.","state":"open","updated_at":"2023-03-09T11:16:42Z","created_at":"2023-02-23T15:48:09Z","creator_user_login":"AbhiPrasad"}
{"number":26218,"title":"Bug: `react-hooks/rules-of-hooks` doesn't error on hooks in a JSX callback in a class component","body":"Howdy! :cowboy_hat_face: \r\n\r\nWe just found something mighty puzzling with `rules-of-hooks`. When I try to call a hook in a callback inside a function component, it gives a lint error as expected, like so:\r\n\r\n```TypeScript\r\nconst App = () => (\r\n  <div\r\n    onClick={() => {\r\n      // This pops a lint error, as it should!\r\n      const foo = useFoo();\r\n    }}\r\n  >\r\n    Function Component\r\n  </div>\r\n);\r\n```\r\n\r\nHowever, if I do the same thing in a callback _inside a class component_, `rules-of-hooks` lets it slip right on by!\r\n\r\n```TypeScript\r\nexport class AppTwo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        onClick={() => {\r\n          // This doesn't pop a lint error!\r\n          const foo = useFoo();\r\n        }}\r\n      >\r\n        Class Component\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nThis feels pretty unintended to me. If I were to hazard a guess, I'd suppose maybe this case dodges both [the class component check](https://github.com/facebook/react/blob/212b89fa25fd0a39473e845d1665d45f9da9dad3/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L507-L512) (since the direct parent isn't a class or method), and [`isInsideComponentOrHook`](https://github.com/facebook/react/blob/212b89fa25fd0a39473e845d1665d45f9da9dad3/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L90-L104) (for reasons that are less clear to me- maybe it has trouble with anonymous function names in certain contexts?) I did dig through past issues with `rules-of-hooks` and callbacks, but didn't find any that directly pertain to this case.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. View lint errors in linked CodeSandbox\r\n\r\nLink to code example:\r\n\r\n[Minimal repro in CodeSandbox](https://codesandbox.io/s/vigorous-heyrovsky-muwq5u?file=/src/App.js)\r\n\r\n## The current behavior\r\n\r\n`rules-of-hooks` won't catch hooks used in a JSX callback inside a class component.\r\n\r\n## The expected behavior\r\n\r\n`rules-of-hooks` should throw an error when I use a hook in a JSX callback inside a class component.","state":"open","updated_at":"2023-05-03T09:25:57Z","created_at":"2023-02-22T19:19:07Z","creator_user_login":"vivshaw"}
{"number":26215,"title":"Slow state update with long list of data","body":"![218817450-0e876a54-5af7-4b8c-a821-feaea1dbc08d](https://user-images.githubusercontent.com/86713661/220406519-9c0ba689-057f-4f23-9a83-bc21a1a61b14.gif)\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nLive example:\r\n[CodeSandbox](https://codesandbox.io/s/fervent-architecture-meewni?file=/src/App.js)\r\n\r\n## The current behavior\r\n\r\nCheckbox works very slow\r\n\r\n## The expected behavior\r\n\r\nCheckbox works instantly\r\n","state":"open","updated_at":"2023-03-03T01:00:11Z","created_at":"2023-02-21T16:43:37Z","creator_user_login":"alexander-vashchuk"}
{"number":26212,"title":"Bug: [Windows OS Only] yarn test returns stderr: file not found for 2 files","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `18.3.0` (as seen in `ReactVersions.js`)\r\njest-react version: `0.15.0`\r\n\r\n## Steps To Reproduce\r\n\r\n1. `git clone` the react repository `main` branch on Windows OS at date February 21, 2023.\r\n2. Run `yarn`\r\n3. Run `yarn test`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nN/A, but I have attached the screenshot for your reference.\r\n\r\n![react yarn test](https://user-images.githubusercontent.com/20269286/220316035-64e918c4-ebb3-4157-8063-b7e4b225154e.JPG)\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThis error occurs on WINDOWS OS ONLY, I tried to reproduce it in the Ubuntu system, and there _ALL_ test cases in the `yarn test` PASSED successfully. I tried to find similar issue in Issues List but did not find any.\r\n\r\nNote: I believe this bug can be more due to Windows OS / Powershell handling the code, but I thought of submitting an issue as I do not know the vulnerability or risk of the exploitation of this error.\r\n\r\n\r\n## The expected behavior\r\nThe test should pass successfully in Windows OS since it passes successfully in Ubuntu OS.\r\n","state":"open","updated_at":"2023-02-28T16:31:33Z","created_at":"2023-02-21T10:16:57Z","creator_user_login":"abhiram11"}
{"number":26186,"title":"Bug: eslint-plugin-react-hooks not working inside of Promise","body":"**React version**:\r\n\"eslint-plugin-react-hooks\": \"^4.2.0\"\r\n\r\n**Link to code example**:\r\n[rule of hook](https://reactjs.org/docs/hooks-rules.html)(eslint-plugin-react-hooks) did not fire when it is inside of a Promise block. Please find the detailed explanation in example code below. thx\r\nhttps://codesandbox.io/s/romantic-austin-uyoiyj?file=/src/generateSomething.js\r\n\r\n","state":"open","updated_at":"2023-02-20T09:47:09Z","created_at":"2023-02-16T23:27:00Z","creator_user_login":"yuhenghenrycai"}
{"number":26181,"title":"Bug: lazy + hydrateRoot + sibling = mismatch","body":"I'm trying to use React' 18's new APIs to enable server-side suspense, but I'm getting hydration mismatch errors when I try to hydrate components that are wrapped in both `lazy()` <strike>and `<Suspense />`</strike>.\r\n\r\nReact version: 18.2.0\r\n\r\n[EDIT] See [updated description / repro below](#issuecomment-1452472569)\r\n\r\n<strike>\r\n## Steps To Reproduce\r\n\r\n1. wrap a react component with `lazy` and `Suspense`\r\n2. server-side render it using `renderToPipeableStream`\r\n3. try to hydrate it using `hydrateRoot`\r\n4. look in dev console - notice errors\r\n\r\nLink to code example: https://codesandbox.io/p/sandbox/dreamy-tristan-8ldu3o\r\n\r\n## The current behavior\r\n\r\nHydration fails with the following errors:\r\n\r\n```\r\nWarning: Expected server HTML to contain a matching <body> in <html>.\r\n    at body\r\n    at html\r\n    at App\r\nprintWarning @ react-dom.development.js:73\r\nreact-dom.development.js:12517 \r\n        \r\nUncaught Error: Hydration failed because the initial UI does not match what was rendered on the server.\r\n    at throwOnHydrationMismatch (react-dom.development.js:12517:11)\r\n    at tryToClaimNextHydratableInstance (react-dom.development.js:12545:9)\r\n    at updateHostComponent (react-dom.development.js:19912:7)\r\n    at beginWork (react-dom.development.js:21628:16)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:4151:16)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:4200:18)\r\n    at invokeGuardedCallback (react-dom.development.js:4264:33)\r\n    at beginWork$1 (react-dom.development.js:27461:9)\r\n    at performUnitOfWork (react-dom.development.js:26567:14)\r\n    at workLoopSync (react-dom.development.js:26476:7)\r\nreact-dom.development.js:73 \r\n        \r\nWarning: An error occurred during hydration. The server HTML was replaced with client content in <#document>.\r\nprintWarning @ react-dom.development.js:73\r\nclient.js:5 \r\n        \r\nonRecoverableError Error: Hydration failed because the initial UI does not match what was rendered on the server.\r\n    at throwOnHydrationMismatch (react-dom.development.js:12517:11)\r\n    at tryToClaimNextHydratableInstance (react-dom.development.js:12545:9)\r\n    at updateHostComponent (react-dom.development.js:19912:7)\r\n    at beginWork (react-dom.development.js:21628:16)\r\n    at beginWork$1 (react-dom.development.js:27436:16)\r\n    at performUnitOfWork (react-dom.development.js:26567:14)\r\n    at workLoopSync (react-dom.development.js:26476:7)\r\n    at renderRootSync (react-dom.development.js:26444:9)\r\n    at performConcurrentWorkOnRoot (react-dom.development.js:25748:76)\r\n    at workLoop (react.development.js:2653:36)\r\nonRecoverableError @ client.js:5\r\nclient.js:5 \r\n        \r\nonRecoverableError Error: There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\r\n    at updateHostRoot (react-dom.development.js:19859:59)\r\n    at beginWork (react-dom.development.js:21625:16)\r\n    at beginWork$1 (react-dom.development.js:27436:16)\r\n    at performUnitOfWork (react-dom.development.js:26567:14)\r\n    at workLoopSync (react-dom.development.js:26476:7)\r\n    at renderRootSync (react-dom.development.js:26444:9)\r\n    at recoverFromConcurrentError (react-dom.development.js:25860:22)\r\n    at performConcurrentWorkOnRoot (react-dom.development.js:25760:24)\r\n    at workLoop (react.development.js:2653:36)\r\n    at flushWork (react.development.js:2626:16)\r\n```\r\n\r\n## The expected behavior\r\n\r\nSuccessful hydration / no errors\r\n\r\n</strike>","state":"open","updated_at":"2023-06-09T11:13:08Z","created_at":"2023-02-16T18:52:52Z","creator_user_login":"spudly"}
{"number":26180,"title":"Feature request: relax rules-of-hooks inside callback checks for specific functions","body":"Allow configuring function names whose arguments should be excepted from rules-of-hooks's inside callback checks.\r\n\r\nI was trying to do something like this and got rejected with `React Hook \"useMyContextualHook\" cannot be called inside a callback`\r\n\r\n```jsx\r\nconst reactEval = code => React.createElement(() => { code(); return null; });\r\n\r\n\r\nfunction SomeComponent() {\r\n  return (\r\n    <Deep>\r\n      <Inside>\r\n        {reactEval(() => console.log(\"my hook value here: \", useMyContextualHook())}\r\n      </Inside>\r\n    </Deep>\r\n  );\r\n}\r\n```\r\n\r\nThe alternative would be to create a wrapping component every time I want one-off thing like that.\r\n\r\nI find it useful.\r\n\r\nThis would generalize the check in https://github.com/facebook/react/blob/189f70e17b8f5e1e81d6a3ae024b086895bbc0f6/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L543 ","state":"open","updated_at":"2023-02-16T17:32:22Z","created_at":"2023-02-16T17:32:06Z","creator_user_login":"mwisnicki"}
{"number":26175,"title":"Bug: input type=date clears on Firefox when invalid date is typed","body":"If you input incorrect value in date input on Firefox, the whole input clears. I've prepared a sandbox: https://codesandbox.io/s/cold-dawn-ksmgb4 . If you input `0` into any part (day, month, year) of the field, it goes to empty state.\r\n\r\nReact version: 18.2.0\r\nFirefox: 110.0 macOS\r\n\r\n## Steps To Reproduce\r\n\r\n1. Fill date input with correct value\r\n2. Enter `0` into it\r\n3. The whole field clears\r\n\r\nLink to code example: https://codesandbox.io/s/cold-dawn-ksmgb4\r\n\r\n## The current behavior\r\n\r\nThe field clears\r\n\r\n## The expected behavior\r\n\r\nThe field should behave the same as uncontrolled HTML input behaves (specifically, Firefox fills the date part with zeroes).","state":"open","updated_at":"2023-02-22T10:59:34Z","created_at":"2023-02-16T08:34:06Z","creator_user_login":"vasa-chi"}
{"number":26174,"title":"Fix:-Replace the render method with the new createRoot method for fixture …","body":"Currently the Fixtures folder with the babel standalone folder which allows us to test our react changes is using the old method for the render, since react 18 is the current version, replacing it seems the way\r\n\r\n![Mozilla Firefox 2_16_2023 12_21_08 PM](https://user-images.githubusercontent.com/72331432/219291078-21dfab5b-d8c5-4dbc-8ab3-44077a53fa40.png)\r\n  ","state":"open","updated_at":"2023-04-28T19:10:36Z","created_at":"2023-02-16T06:58:32Z","creator_user_login":"Biki-das"}
{"number":26170,"title":"Bug: Inconsistent react-dom/server exports between 17 and 18","body":"In React 17 it was required to import ReactDOMServer using the js extension `import ReactDOMServer from \"react-dom/server.js\";` if on Node 17, unless `--experimental-specifier-resolution=node` was set. In React 18 you cannot use the .js extension because it is not exported. You end up with this error:\r\n```\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './server.js' is not defined by \"exports\" in /[REDACTED]/node_modules/react-dom/package.json\r\n```\r\nMy proposal that fixes the problem is to add `\"./server.js\": \"./server.js\"` to the list of exports in package.json.\r\n\r\nReact version: 17.0.2 vs 18.2.0","state":"open","updated_at":"2023-02-15T23:38:02Z","created_at":"2023-02-15T23:07:07Z","creator_user_login":"mkilpatrick"}
{"number":26165,"title":"Bug: onSelect event stops firing if mouse interaction ends over IFRAME","body":"`onSelect` event stops firing if mouse interaction ends over IFRAME or outside the window\r\n\r\nThe problem seems to be in `SelectEventPlugin` where `mouseup` doesn't fire and effectively doesn't reset the `mouseDown` flag.\r\n\r\nhttps://github.com/facebook/react/blob/0b4f443020af386f2b48c47c074cb504ed672dc8/packages/react-dom-bindings/src/events/plugins/SelectEventPlugin.js#L186\r\n\r\nNote: We saw a similar problem with not resetting `activeElement` variable because `focusout` event wasn't fired in specific case (when DOM selection is updated programatically), but I will file a separate issue once I have some more time to prepare minimum repro. The scenario is more edge case-ish, and harder to reproduce.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a `contenteditable` DIV with `onSelect` attached, when typing text the `onSelect` event fires with every character written\r\n2. Have `IFRAME` on the same page\r\n3. Make text selection with a mouse, starting in `contenteditable`, releasing mouse button over the `IFRAME` or outside the window\r\n4. Make no further clicks!\r\n5. When you type some text now, `onSelect` is no longer firing (FAIL)\r\n6. When you click to the `contenteditable` and type again, `onSelect` is firing again\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/heuristic-blackwell-244tvi?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\n`onSelect` is not firing after releasing mouse over `IFRAME`\r\n\r\n`mouseDown` flag is not reset in `SelectEventPlugin` because it doesn't get the `mouseup` event\r\n\r\n## The expected behavior\r\n\r\n`mouseDown` flag is properly reset in `SelectEventPlugin`\r\n\r\n`onSelect` keeps firing\r\n\r\nNot sure about this, but consider\r\n\r\n## Workaround\r\n\r\nAs a workaround, we now use a component like this in our app to globally apply `pointer-events: none` to all `IFRAME`s when left mouse button is down, which lets the `mouseup` event fire in the original window so that `SelectEventPlugin` receives it correctly.\r\n\r\n```\r\nexport const DisableIframeInteractionOnMouseDown: React.FC = () => {\r\n  const [isLeftButtonDown, setIsLeftButtonDown] = useState(false);\r\n  const updateLeftButtonDown = (e: MouseEvent) => {\r\n    // eslint-disable-next-line no-bitwise\r\n    setIsLeftButtonDown(!!(e.buttons & 1));\r\n  };\r\n\r\n  useEventListener('mousedown', updateLeftButtonDown, self, true);\r\n  useEventListener('mouseup', updateLeftButtonDown, self, true);\r\n\r\n  return (\r\n    <style dangerouslySetInnerHTML={{ __html: isLeftButtonDown ? 'iframe { pointer-events: none }' : '' }} />\r\n  );\r\n};\r\n```","state":"open","updated_at":"2023-02-15T10:07:12Z","created_at":"2023-02-15T10:07:12Z","creator_user_login":"hejtmii"}
{"number":26163,"title":"[experimental][Fizz Server] Non-executable bootstrapScript content format","body":"[donotcommit] Draft PR, implementation does not properly escape invalid inputs or consider all cases\r\n\r\nExperiment with non-executable format for bootstrap scripts, in the form of `<script type=\"...\"> data </script>`.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-02-14T20:45:12Z","created_at":"2023-02-14T20:39:19Z","creator_user_login":"mofeiZ"}
{"number":26162,"title":"Regression test on infinite loop with synchronous useEffect + setState in render ","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis is a regression test to demonstrate a situation that React would lock up the JS thread in the infinite loop. \r\nit doesn't break the infinite loop because the Maximum update exception is caught and handled in `recoverFromConcurrentError` of `performSyncWorkOnRoot`, and succeeds in the retry, which doesn't break the loop and makes the exception a recoverable error.\r\n\r\n\r\n- [ ]  TODO: figure out if/how to fix it\r\n\r\n","state":"open","updated_at":"2023-02-15T02:25:53Z","created_at":"2023-02-14T01:35:00Z","creator_user_login":"tyao1"}
{"number":26160,"title":"Bug: onBlur not firing in iOS Safari when keyboard is hidden","body":"onBlur not firing in iOS Safari when keyboard is hidden\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Enter text into input\r\n2. Click on hide keyboard button\r\n\r\n![image](https://user-images.githubusercontent.com/12777199/218492568-d237ef90-0e85-4907-bae0-faaa2047c901.png)\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/xenodochial-panna-ms0jho?file=/src/App.js:0-528\r\n\r\n## The current behavior\r\n\r\nReact onBlur not being called, native blur is called\r\n\r\n## The expected behavior\r\n\r\nReact onBlur  is called, native blur is called\r\n","state":"open","updated_at":"2023-02-13T14:59:47Z","created_at":"2023-02-13T14:59:47Z","creator_user_login":"DiFuks"}
{"number":26146,"title":"Bug: Why is ref.current null when I get it in the useFetch callback?","body":"React version: \"react\": \"^17.0.2\", \"react-dom\": \"^17.0.2\",\r\n\r\n```typescript\r\nconst tagsId = tagInputRef.current!.getTags().map(t => t.id); // It works OK! And it's called in click handler\r\nsetSuggestions([]);\r\nloadSuggestions(`/schemas/${schema!._key}/suggestions?text=${text}`)\r\n    .then((suggestions) => {\r\n        const tagsId = tagInputRef.current!.getTags().map(t => t.id);   // The current is NULL ?????\r\n        let rawSuggestions = suggestions.map(\r\n            (suggestion) => new SuggestionKeyword(schema!._key!, suggestion));\r\n        rawSuggestions = rawSuggestions?.filter(s => !tagsId.includes(s.id)) || []\r\n        setSuggestions(rawSuggestions);\r\n    })\r\n```\r\n","state":"open","updated_at":"2023-02-10T08:32:03Z","created_at":"2023-02-10T08:23:57Z","creator_user_login":"catchex"}
{"number":26136,"title":"Fix hydration mismatch caused by a style of only empty values","body":"## Summary\r\n\r\nCloses https://github.com/facebook/react/issues/26135\r\n\r\nWhen rendering a style of only empty values, React will detect a hydration mismatch.\r\n\r\nThis is due to diverging logic in what values React throws away on the server and what the client thought it threw away.\r\n\r\n## How did you test this change?\r\n\r\nTest cases inside the react repository. \r\n","state":"open","updated_at":"2023-02-10T10:21:10Z","created_at":"2023-02-09T18:02:14Z","creator_user_login":"edkimmel"}
{"number":26135,"title":"Bug: Empty style attribute on server causes hydration mismatch","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. `ReactDOMServer.renderToString(<div style={{transform: ''}} />)` prints out `'<div></div>'` - without style\r\n2. During hydration, React will notice transform style and report a hydration mismatch.  \r\n<img width=\"513\" alt=\"Screen Shot 2023-02-09 at 10 50 44 AM\" src=\"https://user-images.githubusercontent.com/3375008/217881193-bd54e42b-09db-41fc-8dd0-4e04193ebf0a.png\">\r\n\r\nI also noticed React will never print out the style attribute to the DOM, which I believe means it is filtered somewhere further down from the hydration check.\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/facebook/react/pull/26136\r\n<img width=\"849\" alt=\"Screen Shot 2023-02-09 at 12 22 48 PM\" src=\"https://user-images.githubusercontent.com/3375008/217891082-6c7b0d46-a18f-4447-a96d-b082a993ad9f.png\">\r\n\r\n## The current behavior\r\nHydration warns about a mismatch in style\r\n\r\n## The expected behavior\r\nNo mismatch is detected.\r\n","state":"open","updated_at":"2023-02-09T18:02:41Z","created_at":"2023-02-09T17:28:02Z","creator_user_login":"edkimmel"}
{"number":26131,"title":"Bug: useReducer rendering behaviour in React 18 ","body":"import React, { useReducer } from \"react\";\r\n\r\nconst initialState = 0;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n    case \"DECREMENT\":\r\n      return state - 1;\r\n    case \"RESET\":\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst UseReducer = () => {\r\n  const [count, dispatch] = useReducer(reducer, initialState);\r\n  console.log('UseReducer Render')\r\n  return (\r\n    <div>\r\n      <div>{count}</div>\r\n      <button onClick={() => dispatch(\"INCREMENT\")}>Increment</button>\r\n      <button onClick={() => dispatch(\"DECREMENT\")}>Decrement</button>\r\n      <button onClick={() => dispatch(\"RESET\")}>Reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseReducer;\r\n\r\n\r\n\r\nIn react 17, useReducer re-render was working as same as useState does but now after updating version to 18, whenever i click reset button,  console.log('UseReducer Render'); is printed\r\n   \r\n","state":"open","updated_at":"2023-02-26T20:56:14Z","created_at":"2023-02-09T11:01:51Z","creator_user_login":"sshubham681"}
{"number":26123,"title":"hyperlink Good First Issues like the sections above","body":"## Summary\r\n\r\nTiny change to hyperlink the `Good First Issues` and `License` sections in the README. The other section headers in Contributing (`Code of Conduct` and `Contributing Guide`) are hyperlinked, so `Good First Issues` and `License` should be as well for consistency.\r\n","state":"open","updated_at":"2023-07-12T07:27:16Z","created_at":"2023-02-07T21:03:28Z","creator_user_login":"nmelhado"}
{"number":26119,"title":"Feature request: Improved warning \"Functions are not valid as a React child...\"","body":"Good day. Every time when I bump into the following error\r\n```\r\nWarning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.\r\n```\r\nit takes me quite some time to locate the bad value in UI structure, even though there's a component trace in the console. What I think would improve by debugging experience if the error would also log the problematic value. This way I could know which value it is exactly in a single click in DevTools.","state":"open","updated_at":"2023-02-09T08:38:30Z","created_at":"2023-02-07T09:40:15Z","creator_user_login":"roman01la"}
{"number":26107,"title":"React Dev Tools Troubleshoot","body":"Hello,\r\n\r\nI followed the [troubleshooting instructions](https://github.com/facebook/react/tree/main/packages/react-devtools#the-issue-with-chrome-v101-and-earlier-versions) and React Developer Tools still \"seem stuck.\" I am using Mac OS Big Sur version 11.7.3, Chrom version 109.0.5414.119, and React Developer Tools extension version 4.27.1. Just reporting.\r\n\r\n<img width=\"1273\" alt=\"Screen Shot 2023-02-03 at 2 30 18 PM\" src=\"https://user-images.githubusercontent.com/100440113/216723472-ae7f374a-aa44-4ac7-97c4-eb7e6b04089b.png\">\r\n\r\nThank you!\r\n\r\nMeriel\r\n","state":"open","updated_at":"2023-02-03T22:38:13Z","created_at":"2023-02-03T22:38:13Z","creator_user_login":"merielmelendrez"}
{"number":26099,"title":"eslint-plug-react-hooks -- Please add Support customHook simliar to useImperativeHandle 3 args ","body":"https://github.com/facebook/react/blob/2ef24145e4628fda9d8883cd573553b82a2e0a81/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1751\r\n\r\nIn order to have custom Hook like useImperativeHandle>\r\ngetReactiveHookCallbackIndex need to return 1, \r\nbut \r\nhttps://github.com/facebook/react/blob/2ef24145e4628fda9d8883cd573553b82a2e0a81/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1766\r\nCan only return 0 or -1.\r\n\r\nCan we add a config as a Javascript object \r\n( { `useMemoDispatch`: 1 })\r\nor \r\n{\r\n  1: \"(useMemoDispatch|myCustomHook)\",\r\n}","state":"open","updated_at":"2023-04-20T19:19:26Z","created_at":"2023-02-02T22:55:55Z","creator_user_login":"LiangMingChen"}
{"number":26094,"title":"BUG: Why do not extract key and ref after merge defaultProps?","body":"https://github.com/facebook/react/blob/9d111ffdfbcfee4b348a3d49c16f02cb718c896f/packages/react/src/ReactElement.js#L420-L427\r\n\r\nAfter reading the implementation of `ReactElement`, i understand that `key` and `ref` will be extracted from props, but why do not extract them after merging defaultProps?\r\n\r\n```tsx\r\ninterface FooProps {\r\n  key?: string;\r\n  ref?: string;\r\n  name: string;\r\n}\r\n\r\nconst Foo: React.FC<FooProps> = (props) => {\r\n  console.log(props.key, props.ref)\r\n\r\n  return (\r\n    <span key={props.key}>\r\n      Hello, {props.name}!\r\n    </span>\r\n  )\r\n}\r\n\r\nFoo.defaultProps = {\r\n key: 'fooKey',\r\n ref: 'fooRef'\r\n}\r\n\r\nexport default Foo\r\n```\r\n\r\n```tsx\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Foo name=\"jack\" />\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nand the log message will be `fooKey fooRef`!","state":"open","updated_at":"2023-02-02T06:49:25Z","created_at":"2023-02-02T06:43:01Z","creator_user_login":"Caesar-0615"}
{"number":26091,"title":"Suspense API forces coupling of page-load sequence with runtime updates","body":"_(the prelude to this issue may be a bit abstract, but please bear with me!)_\r\n\r\n## Problem statement\r\nAs it has usually been the case in React and already stated in [its docs](https://reactjs.org/blog/2022/03/29/react-v18.html#what-is-concurrent-react):\r\n\r\n> When we [React] design APIs, we try to hide implementation details from developers. As a React developer, you focus on what you want the user experience to look like, and React handles how to deliver that experience...\r\n\r\nBut I think the new Suspense API -with all of its great features- contradicts this mindset to some degree.\r\nBecause looking at the library from the “usage” perspective, Suspense API enforces coupling of independent features together. Features that although are related from a technical standpoint, in reality can be fundamentally different.\r\n- For example, code-splitting is basically a separate subject from the other features. Because a developer may need code-splitting (for bundle size optimizations), but it doesn’t necessarily mean they want to render the lazy-loaded component in a delayed manner in the initial html coming from the SSR stream. They also may not want to delay that component’s hydration after other (non-suspense) parts are hydrated either.\r\n\r\nBut the main issue I’m referring to is about the other Suspense features that basically seem to enable a “federated-mode” (for the lack of a better word) that makes each suspended component act independently in the tree.\r\nThe problem is, they are coupling “SSR and page-load sequence” with “client-side runtime” and forcing product decisions on developers. Because:\r\n- On SSR, a developer may want to use partial streaming and selective/async hydration to provide performance boost for the initial page-load sequence. For example, if an end user initially opens a page that includes the details of an article scattered among multiple nested components, it makes sense to stream/render/hydrate different components of the article’s details (photos, title/description, ratings, comments, etc.) separately and as soon as possible (with some optional priorities).\r\n- But the developer doesn't necessarily need the application to act in the same way for the future updates and renders on the client side when a **change** happens. So for example when the user clicks to show a similar article and the page has to update on the client side to show the data of this different article, the developer should have the choice to make the page’s content (photos, title/description, ratings, comments, etc.) update together in a single graceful step - or batch some of the nested components’ loadings together (regardless of whether nested suspense boundaries were used). As opposed to each component getting updated independently, showing their own fallbacks independently, and rendering the new content independently while another component is still showing the old content or a fallback. Because this can cause discrepancies on the page, and aside from that, is inherently forcing a product decision on the developer. Basically, how/where to show fallback/loading states is a product/UX decision and the API shouldn’t force an approach.\r\n- Last but not least, regardless of all the previous usages of Suspense, it should still be possible to opt into **interruptible/concurrent rendering** on client side during runtime changes (after page-load) which allows pausing a rendering sequence and prioritizing user interactions, to benefit from the improvements to the user experience and the perceived performance.\r\n\r\n## Working example\r\nI think [this issue](https://github.com/facebook/react/issues/25082) is a great practical use-case of the problem of coupling behaviors on \"SSR/page-load sequence\" and \"client-side changes\" **even with the use of the `useTransition` api**, which also includes a working codeSandbox example.\r\n\r\n## Suggested solution\r\nI’m not sure what the \"best\" solution would be (e.g. to have a separate component other than Suspense, or change the `useTransition` behavior as suggested in the [previously mentioned issue](https://github.com/facebook/react/issues/25082) or…), but a solution that can also work is:\r\n\r\nAdding two new props to the `Suspense` component like:\r\n- `hoistSuspenseHandling`: If `true`, skips the handling of the Suspense status (to show a fallback etc) inside component’s own suspense boundary, and instead give it to its parent to be merged with parent’s Suspense handling (if accepted by the parent).\r\n- `handleChildrenSuspense`: The other side of the previous prop, acting as a safety net to ensure the parent can (wants to) handle its children’s suspense. It is passed to the parent Suspense component. If `true`, it will allow merging of the suspense conditions of children with its own suspense handling.\r\n\r\n(Depending on the real life usage, they could instead be functions passed to the Suspended component as well, so it can change the values internally during runtime)\r\nAlso a component that has both `hoistSuspenseHandling` and `handleChildrenSuspense` as `true`, could add its children’s suspense conditions to its own and pass them all up to the parent.\r\n\r\nWith this, a developer can differentiate between SSR/page-load sequence and client side updates/changes (or even more different scenarios) and handle components’ fallback/loading states in different places on the tree.\r\n","state":"open","updated_at":"2023-05-19T16:02:24Z","created_at":"2023-02-01T14:18:27Z","creator_user_login":"ghbakhtiari"}
{"number":26089,"title":"Bug: FiberRootNode was still exist in memory after root unmout","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. git clone git@github.com:whatwg6/react-18.2-fiberRootNode-memory.git\r\n2. npm i\r\n3. npm run dev\r\n\r\n### Situation 1\r\n\r\ncode below will free memory after unmout\r\n\r\n```js\r\nimport { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { root } from \"./main\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    text: \"default unmount button\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div onClick={() => root.unmount()}>{this.state.text}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nApp init chrome memory got snapshot 1:\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2023-02-01 at 15 00 40\" src=\"https://user-images.githubusercontent.com/18499153/215973721-af97c9a9-51c6-452e-b5b2-61615ce182ed.png\">\r\n\r\nafter click \"default unmount button\" got snapshot 2, FiberRootNode was free memory:\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2023-02-01 at 14 48 49\" src=\"https://user-images.githubusercontent.com/18499153/215972522-907970ad-8933-4d46-84ea-13ddb85cf4d4.png\">\r\n\r\n### Situation 2\r\n\r\nFiberRootNode still exist in memory after root unmout\r\n\r\n```js\r\nimport { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { root } from \"./main\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    text: \"default unmount button\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      text: \"click me to unmout\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onClick={() => root.unmount()}>{this.state.text}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\n\r\nApp init chrome memory got snapshot 1:\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2023-02-01 at 14 58 11\" src=\"https://user-images.githubusercontent.com/18499153/215973290-25b1ce40-4f8c-43b1-9cd2-c3f44eae923b.png\">\r\n\r\nafter click \"click me to unmout\" got snapshot 2, FiberRootNode was still exist!\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2023-02-01 at 14 58 24\" src=\"https://user-images.githubusercontent.com/18499153/215973313-d401af32-67a9-48f0-9696-eaf9c11b31eb.png\">\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/whatwg6/react-18.2-fiberRootNode-memory\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n- FiberRootNode still exist in memory after root unmout\r\n## The expected behavior\r\n- FiberRootNode was free memory\r\n","state":"open","updated_at":"2023-02-01T07:08:23Z","created_at":"2023-02-01T07:03:01Z","creator_user_login":"whatwg6"}
{"number":26071,"title":"Bug: Reconciler should ignore Declarative Shadow DOM (DSD)","body":"The reconciler does not ignore `<template shadowRoot=\"open\">`  but handles them like a normal HostElement.\r\nIn reality, as soon as the closing template tag is parsed, the component is replaced in the  DOM by `#shadow-root (open)`\r\n\r\nSee: https://github.com/mfreed7/declarative-shadow-dom#-behavior\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nI tried this with NextJS 13.1.6, which uses react 18.2.0 and react-dom 18.2.0.\r\n\r\nIn the end the component is rendered server side and hydrated in the frontend.\r\n\r\n1.  Add the following html code to your component\r\n```html\r\n<div>\r\n  <template shadowrootmode=\"open\"> \r\n    <button type=\"button\">\r\n      <slot></slot>\r\n    </button>\r\n  </template>\r\n  My button\r\n</div>  \r\n```\r\n\r\n2. Render the component via SSR and hydrate in the frontend.\r\n\r\n## Code\r\n\r\nI created a quick and dirty workaround in the `react-dom` `updateHostComponent` method. The added code removes the `template` element from `nextChildren`. I have no detailed understand of React, but i guess this stops the reconciliator from creating a fiber of the template element.\r\n\r\n```js\r\nfunction updateHostComponent(current, workInProgress, renderLanes) {\r\n  pushHostContext(workInProgress);\r\n\r\n  if (current === null) {\r\n    tryToClaimNextHydratableInstance(workInProgress);\r\n  }\r\n\r\n  var type = workInProgress.type;\r\n  var nextProps = workInProgress.pendingProps;\r\n  var prevProps = current !== null ? current.memoizedProps : null;\r\n  var nextChildren = nextProps.children;\r\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\r\n\r\n  // PATCH! Remove template.\r\n  if(nextChildren != null) {\r\n    for(var i = 0; i < nextChildren.length; i++) {\r\n      const child = nextChildren[i];\r\n      if(child.type === 'template' && 'shadowroot' in child.props) {\r\n        nextChildren = [...nextChildren].splice(i + 1, 1); // Why i+1? Splicing at 0 does remove the second item...\r\n      }\r\n    }\r\n  }\r\n\r\n  ...\r\n\r\n  markRef(current, workInProgress);\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n``` \r\n\r\nI`ve added a repository i tested this with (but still requires the manual patching): https://github.com/mayerraphael/nextjs-webcomponent-hydration\r\n\r\n## The current behavior\r\n\r\nA hydration warning is thrown:\r\n```\r\nExpected server HTML to contain a matching <template> in <div>.\r\n    at template\r\n    at div\r\n    at Home \r\n```\r\n\r\n## The expected behavior\r\n\r\nReact should ignore the `<template shadowroot=\"open\">`  tag and all its children. It should handle like a #shadow-root fragments are, meaning hydration does not care about it. \r\n\r\nThis would allow full SSR and hydration of WebComponents using Declarative Shadow Dom.","state":"open","updated_at":"2023-09-01T22:55:55Z","created_at":"2023-01-28T16:15:35Z","creator_user_login":"mayerraphael"}
{"number":26069,"title":"Bug: Memory leak in react while focusing input elements","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI 've noticed that having an `input` element focused and unmounting its owner component doesn't actually free up this component from the js heap  , I 've created this simple blnkr to demonstarate this which add a dummy `X` to a ref inside a component that has an input element\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to this [plnkr](https://plnkr.co/edit/IiqhT2JEvZcAJBMu?open=index.js&deferRun=1&preview)  \r\n2. Click Tab Two\r\n3. Click the `Grow button` a few times \r\n4. Take a heap snapshot \r\n5. Click the Grow button a few more times \r\n6. **IMPORTANT** Focus the input element by clicking into it\r\n7. Click Tab One ( This unmount the component that own the ref to the list ) \r\n8. Take another heap snapshot ( after running the GC)  \r\n9. Compare between the two snapshots \r\n10. The added string `X` will be found within the `concat check the screenshot \r\n<img width=\"1507\" alt=\"Screenshot 2023-01-28 at 1 13 12 AM\" src=\"https://user-images.githubusercontent.com/28496859/215225175-f64cf1ee-f6b9-4dff-93d0-4fdebc3747e9.png\">\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: can be found above\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe current component that own the input element is still being there in the memory and doesn't free up its own resources afer being unmounted.\r\n\r\n## The expected behavior\r\nThe current component shloud free up its resources whenever being unmounted \r\n","state":"open","updated_at":"2023-09-03T06:33:24Z","created_at":"2023-01-27T23:38:32Z","creator_user_login":"Elwazer007"}
{"number":26065,"title":"Bug: onTransitionStart","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: any\r\n\r\n## Steps To Reproduce\r\n\r\nAdd onTransitionStart and onTransitionEnd handlers to element with styles that contain transition declaration\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code:\r\nhttps://github.com/facebook/react/blob/0b4f443020af386f2b48c47c074cb504ed672dc8/packages/react-dom-bindings/src/events/DOMEventProperties.js#L119\r\n\r\nLink to docs:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nonTransitionEnd fires, onTransitionStart doesn't\r\n\r\n## The expected behavior\r\nBoth handlers should fire\r\n","state":"open","updated_at":"2023-08-07T17:41:32Z","created_at":"2023-01-27T17:12:59Z","creator_user_login":"m1gu3l"}
{"number":26062,"title":"feat: added npm downloads card .","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nIt's always good practice to show vistor or user the current users of your framework  so that he/she can value your effor and also be excited to read more about framework since it's used by many people\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nI have observed the position of added card relative to others  .\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-01-31T16:36:11Z","created_at":"2023-01-27T09:55:09Z","creator_user_login":"pacifiquem"}
{"number":26052,"title":"[DevTools Bug]: event.metaKey + f to focus SearchInput doesn't work on Windows","body":"### Website or app\r\n\r\nhttps://beta.reactjs.org/\r\n\r\n### Repro steps\r\n\r\n1. Open React Dev Tools -> Components\r\n2. Try hitting (Windows Key) + f\r\n\r\nOn Windows 10/11, the Feedback Hub opens up. It will not focus on the search input.\r\n\r\nI understand this probably works fine on Mac, but on Windows it'd be great to use a key that won't be intercepted by Windows. Like `Shift + f`. or `Ctrl + Alt + f`. Or, perhaps as soon as I start typing (unless I'm typing in another focused input). Or, if I press `/`. Something!\r\n\r\nI thought at first DevTools didn't have a keyboard shortcut but then I looked at the source code and saw it uses [`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey) which _totally_ doesn't work on Firefox in Windows.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-05-17T19:34:02Z","created_at":"2023-01-26T04:46:27Z","creator_user_login":"kamranayub"}
{"number":26047,"title":"Config File: Correct Grammatical Error","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n  - Correct a Grammatical error in the config file\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nCorrected a Grammatical error in the config file - no need for a test case\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-01-25T16:07:54Z","created_at":"2023-01-25T14:32:53Z","creator_user_login":"muriukialex"}
{"number":26035,"title":"Bug: Using react with custom event bus - event callbacks keep old state","body":"I need to create syncronisation between two maps. For doing it I need to save map params of this maps and using it inside event callback to compute delta between real current center from map instance and saved state inside map params provider.\r\nI wrote the code and was confused.\r\nFirst action works properly. This action initialize two events. First event compute deltas and set params to other map, second event of action initialize after first and update current map parameters. Next action don't want working properly. First event of action got inactual map params, which we could see in first action - it's always initial map params action and I can't do anything with it.\r\nI create simple demo, which describe confused behavior of Context API with my event bus:\r\nhttps://codesandbox.io/s/inspiring-platform-hfoto1\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on 'emit' button first time\r\n2. See two logs of 'map params in after click' and one last about 'map params changed' with fresh state\r\n3. Click on 'emit' button second time\r\n4. See two logs of 'map params in after click' with old state and one last about 'map params changed' with fresh state\r\n   \r\n   Expected behavior:\r\n   'map params in after click' has fresh state like on second step.\r\n\r\n\r\n\r\n## The current behavior\r\nIn fourth step 'map params in after click' has old state.\r\n\r\n## The expected behavior\r\nIn fourth step 'map params in after click' has fresh state from map params provider.","state":"open","updated_at":"2023-01-24T02:38:08Z","created_at":"2023-01-24T00:57:53Z","creator_user_login":"WebKieth"}
{"number":26033,"title":"React keeps old states in memory which increases app memory footprint","body":"our app is using react 17.0.2, it also uses redux store - as we navigate through app store state gets replaced with new state - I see that old state objects are still kept in memory - these get removed from memory, but only after some more usage of the app - I am thinking they should be eligible for removal from memory as soon as they are not needed, however I see there are references through it coming from HTMLElement.__reactFiberxyz object - in heap snapshot I don't see any reference to our code, it is all in vendor.js (we bundle react code in that file)\r\n\r\nis this expected behavior? - that we keep certain number of old states in memory.\r\nto be clear, this is not a memory leak type of issue, its just that it appears app is using more memory that it needs.\r\n\r\nhere is heap snapshot, and code reference in snapshot that points to some react (or redux) code.\r\n\r\n![heapsnapshot_codereference](https://user-images.githubusercontent.com/6414041/213961268-2e358d5d-8cb4-4ab0-8cc1-a1da21ceffb0.png)\r\n![heapsnapshot](https://user-images.githubusercontent.com/6414041/213961270-6faac3dc-459c-42a7-9089-0552d47605e5.png)\r\n","state":"open","updated_at":"2023-02-13T18:35:34Z","created_at":"2023-01-23T03:31:49Z","creator_user_login":"milantomic6"}
{"number":26031,"title":"Bug: FiberRootNode is retained in memory after root is unmounted","body":"Calling `useEffect` in child component will keep the `FiberRootNode` in memory along with the current props, keeping it in the `rootWithPassiveNestedUpdates` variable even after the root node is unmounted. If there were large objects in the properties of the root element, then they will never be collected by the garbage collector until some other root element schedules its effect.\r\n\r\nReact version:\r\n18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the link below. In the console, you will see logs of the current value of the weak ref.\r\n2. `<App>` will be rendered and unmounted in `<Child>` component.\r\n3. You will see that value of  weak reference is retained in memory forever.\r\n4. Open demo in separate tab.\r\n5. Open dev tools on the \"Memory\" tab.\r\n6. Collect garbage.\r\n7. Capture memory snapshot and search `HeavyBigModel`.\r\n8. You will see that model is retained in `rootWithPassiveNestedUpdates`.\r\n\r\n![image](https://user-images.githubusercontent.com/4510923/213873385-8b7daaf1-969e-4f35-986b-d7638781e972.png)\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/nifty-bush-r4k4tw\r\n\r\n## The current behavior\r\nProperties of the root component are retained in memory.\r\n\r\n## The expected behavior\r\nProperties should not be retained in memory. It might be possible to explicitly assign `null` to `rootWithPassiveNestedUpdates` and `rootWithNestedUpdates` when root is unmounted.\r\n","state":"open","updated_at":"2023-02-01T14:01:02Z","created_at":"2023-01-21T15:22:43Z","creator_user_login":"Jeronimotio"}
{"number":26029,"title":"Cleanup enableUnifiedSyncLane flag","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe feature flag enables batching discrete, continuous and default updates. \r\nThis is being rolled out internally and there hasn't been any issues. The flag will be ready to be removed once our internal roll out is done.\r\nBecause default and continuous got batched to sync, it has similar behavior as the `enableSyncDefaultUpdates` flag, and this is now the only behavior in tests. As a result, this PR also cleans up some of `enableSyncDefaultUpdates` conditions in tests.\r\n\r\n## How did you test this change?\r\n\r\n`yarn test`\r\n","state":"open","updated_at":"2023-02-17T21:26:21Z","created_at":"2023-01-21T02:00:23Z","creator_user_login":"tyao1"}
{"number":26028,"title":"Bug: Handle nonce hydration warnings better","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create an app with a CSP\r\n2. Server render your app with a `nonce` in script tags and hydrate those tags with or without the nonce prop and observe warnings that insufficiently describe the seriousness of security vulnerabilities and how to fix them.\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/kentcdodds/nonce-hydration-issues\r\n\r\n## The current behavior\r\n\r\nWe get warnings about extra nonce prop or a mismatch of the nonce value which are insufficient.\r\n\r\n## The expected behavior\r\n\r\nMost of the issue is described in the README for the project. But we've got two warnings that could be improved. In the case of the client hydrating without the `nonce` (because it correctly doesn't know what the nonce value is), the warning should be either removed or improved to explain you should pass an empty string for the `nonce` value to match what the browser did to it.\r\n\r\nIn the case of the client hydrating *with* the `nonce` (because it incorrectly *does* know what the nonce value is), the warning should explain that they have a security vulnerability that should be fixed because if the client hydration code knows what the `nonce` value is then XSS attackers could know as well.\r\n\r\n## Suggested solutions:\r\n\r\n(copied from the project readme):\r\n\r\nUpdate the error messages to explain the problem and solution.\r\n\r\n- The `Extra attributes from the server: nonce` error message should be updated\r\n  to explain issue with `nonce`. Maybe something like:\r\n  `Extra attributes from the server: nonce. The nonce attribute is a security feature and should not be passed to the client. Instead, set the nonce attribute to an empty string when client rendering.`\r\n  Alternatively, you could just not warn about the extra `nonce` attribute at\r\n  all.\r\n- The `Prop nonce did not match` error message should be updated to explain the\r\n  issue with `nonce`. Maybe something like:\r\n  `Prop nonce did not match. The nonce attribute is a security feature and should not be passed to the client as yours appears to do currently which makes your application vulnerable to cross-site scripting attacks. Instead, set the nonce attribute to an empty string when client rendering. Make certain to not send the nonce value in the DOM anywhere other than in the nonce attribute of scripts and links.`\r\n  Whatever we do, we definitely want to make sure people are aware this is a\r\n  serious security vulnerability.\r\n\r\n## Video walkthrough:\r\n\r\nI'm live streaming this now. Here's my walkthrough of the problem: https://www.youtube.com/watch?v=YboFmtwxIBk&t=1h57m","state":"open","updated_at":"2023-02-25T00:59:02Z","created_at":"2023-01-20T18:53:03Z","creator_user_login":"kentcdodds"}
{"number":26022,"title":"[DevTools Bug]: Cannot read properties of undefined (reading 'displayName') at getWrappedDisplayName","body":"### Website or app\n\nhttps://pda.ritis.org/suite/download/\n\n### Repro steps\n\nI noticed this when using React DevTools in my DEV environment with both Chrome and Firefox which is https://pda-dev.ritis.org/suite/download/ but I also see it in the production URL.\r\n1.  Logged in URL with React Developer Tools 4.27.1 installed and enabled (in Chrome or Firefox)\r\n2.  Navigate to a the Download tool\r\n3. Almost immediate the below error displays\r\n`\r\nTypeError: Cannot read properties of undefined (reading 'displayName')\r\n    at getWrappedDisplayName (react_devtools_backend.js:247:33)\r\n    at getDisplayNameForFiber (react_devtools_backend.js:6384:62)\r\n`\r\n![outerType_undefined](https://user-images.githubusercontent.com/3752154/213483566-c6f2c74f-8e79-4d36-bb8a-2d55a103782c.png)\r\n![getWrappedDisplayName](https://user-images.githubusercontent.com/3752154/213483568-af17e1d2-f713-45f3-9c82-f66369bf77f6.png)\r\n![forwardRef](https://user-images.githubusercontent.com/3752154/213483572-1418cbc1-b0ca-4934-bbe9-cddd09ce2091.png)\r\n\r\nI'm unable to downgrade React DevTools in Chrome, but can in Firefox and notice that this started occuring with Version 4.27.0.\r\n- \"4.27.1 Relased December 6, 2022\" produces this error\r\n- \"4.27.0 Released November 28, 2022\" produces this error\r\n- \"4.25.0 Released July 14, 2022\" does not produce this error\r\n\r\nSince I only use the browser version of react dev-tools, is there any way to install 4.25.0 in Chrome browser?\r\n\r\nOther environment information:\r\nChrome \"Version 109.0.5414.75 (Official Build) (64-bit)\"\r\nFirefox  \"Version 109.0 (64-bit)\r\nWindows 10 Pro build 19044.2486\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-04-20T20:17:55Z","created_at":"2023-01-19T15:35:41Z","creator_user_login":"cherryshoe"}
{"number":26020,"title":"✨ feat: add declare fn","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\ndeclare fn not only does it give us better tips,but also provides a few services to ensure that plugins function well-enough to throw useful errors","state":"open","updated_at":"2023-07-25T03:31:09Z","created_at":"2023-01-19T06:51:10Z","creator_user_login":"qiyx2019"}
{"number":26015,"title":"Fixed some spelling and grammar mistakes in CHANGELOG","body":"I was reading through the React 18 changelogs when I came across a few spelling and language mistakes that made my OCD tingle. I therefore reasoned, why not fix some of them? Here is the fix for some of them, making it easier for others  to read the CHANGELOG properly.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-05-30T02:42:44Z","created_at":"2023-01-18T17:22:55Z","creator_user_login":"DharmenderRajput"}
{"number":26012,"title":"Bug: Unable to dynamically add a created Portal as a child","body":"Elements can be added as children to some parent arbitrarily after being created but after creating a portal there seems to be no obvious way of appending the resulting portal as a child of some other node. This is useful for creating dialogs that need to use multiple contexts available to some node but where there are enough of these dialogs that come from user interaction that it's desirable for them to be invoked functionally (e.g. showDialog).\r\n\r\nThe problem is there seems to be no functioning way for a portal created in this way to properly inherit contexts. I've provided an example showing the creation of some portal and an example method of trying to insert the returned fiber (? - unsure if this is the correct term, React.ReactPortal type) as a child of portalParentRef.\r\n\r\nReact version: 17/18\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a portal with something like\r\n`const portal = ReactDOM.createPortal(\r\n    React.createElement(ExampleComponent),\r\n    document.body);`\r\n2. There does not seem to be an accessible method for appending the resulting React.ReactPortal instance as a child but trying appendChild, or render (which I don't believe can work because we're not trying to mount a real DOM element but instead want to insert this portal as a child in the virtual dom).\r\n3. If we \r\n\r\nLink to code example: https://codesandbox.io/s/silly-brook-25fc4f\r\n\r\n## The current behavior\r\n\r\nThe portal can be created which will insert our Dialog (the component which needs access to contexts) at the top level document.body but there seems to be no functioning way for the resulting React.ReactPortal to be added to the virtual DOM thus the created Dialog can't read values from any context.\r\n\r\n## The expected behavior\r\n\r\nThere should be some way of adding a created React.ReactPortal to an existing node.\r\n","state":"open","updated_at":"2023-01-18T05:43:32Z","created_at":"2023-01-17T16:59:55Z","creator_user_login":"roysandrew"}
{"number":26011,"title":"[www] disable replayFailedUnitOfWorkWithInvokeGuardedCallback flag","body":"This flag is [not set on www](https://fburl.com/code/bkhbiati), so just hardcode it to disabled for clarity.","state":"open","updated_at":"2023-01-24T03:55:48Z","created_at":"2023-01-17T16:41:15Z","creator_user_login":"kassens"}
{"number":26010,"title":"chore: remove useless code","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nremove useless code\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nJust remove the code that will not trigger, no need to add test case.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->","state":"open","updated_at":"2023-06-06T18:28:53Z","created_at":"2023-01-17T14:21:47Z","creator_user_login":"li-jia-nan"}
{"number":26009,"title":"[DevTools Bug] Commit tree does not contain fiber \"4543\". This is a bug in React DevTools.","body":"### Website or app\r\n\r\nhttps://kai.dev.dxos.org/\r\n\r\n\r\n\r\n### Repro steps\r\n\r\n1. Open devtools components panel and trigger a re-render in the app.\r\n2. In my case sometimes the component tree doesnt appear at first, but pressing the devtools extension action button in the browser navbar makes it load.\r\n\r\n### More info\r\n\r\nApp built with react `18.2.0` and vite\r\n\r\nTo repro with Vite running in dev mode:\r\n\r\n```\r\n# checkout https://github.com/dxos/dxos/tree/main/packages/experimental/kai\r\n\r\npnpm install\r\npnpm -w nx serve kai\r\n```\r\n\r\nOpen devtools component view and trigger a re-render in the app.\r\n\r\n\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\nreact-devtools-extensions\r\n\r\n### DevTools version (automated)\r\n\r\n4.27.1-47f63dc54\r\n\r\n### Error message (automated)\r\n\r\nCommit tree does not contain fiber \"4543\". This is a bug in React DevTools.\r\n\r\n### Error call stack (automated)\r\n\r\n```text\r\nat updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26856:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26716:20)\r\n    at SidebarCommitInfo_SidebarCommitInfo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:55240:42)\r\n    at Ri (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16122:7)\r\n    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17190:7)\r\n    at kn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20548:86)\r\n    at gn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20091:11)\r\n    at fn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20011:23)\r\n    at Um (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19991:5)\r\n    at Wm (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19795:7)\r\n```\r\n\r\n\r\n### Error component stack (automated)\r\n\r\n```text\r\nat SidebarCommitInfo_SidebarCommitInfo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:55220:34)\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37690:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:55516:34)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39222:5)\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39394:3)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39424:5)\r\n    at div\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39394:3)\r\n    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44671:3)\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44100:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31925:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32569:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39819:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56024:3)\r\n```\r\n\r\n\r\n### GitHub query string (automated)\r\n\r\n```text\r\nhttps://api.github.com/search/issues?q=Commit tree does not contain fiber . This is a bug in React DevTools. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\r\n```\r\n","state":"open","updated_at":"2023-03-18T07:12:19Z","created_at":"2023-01-17T12:36:08Z","creator_user_login":"dmaretskyi"}
{"number":26007,"title":"chore: Optimize code in createReactNoop.js","body":"When I learned to react, I found this code. \r\nI don't think it involves performance issues, so it is redundant.\r\nLooking forward to your suggestions.","state":"open","updated_at":"2023-01-17T06:53:58Z","created_at":"2023-01-17T06:29:34Z","creator_user_login":"aaamrh"}
{"number":26004,"title":"Bug: eslint-plugin-react-hooks does not support TypeScript \"satisfies\" operator","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install typescript@4.9.4, eslint@8.32.0 and latest eslint-plugin-react-hooks@4.6.0\r\n2. Enable \"react-hooks/exhaustive-deps\" rule\r\n3. Use \"satisfies\" operator for a callback function passed:\r\n``` TypeScript\r\n// Error: React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead. eslintreact-hooks/exhaustive-deps\r\nconst onClick = useCallback(\r\n  (() => {\r\n    return true;\r\n  }) satisfies () => true,\r\n  // Expected to see eslint error: The true literal is not a valid dependency because it never changes. You can safely remove it. eslintreact-hooks/exhaustive-deps\r\n  [true]\r\n);\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nHere I created a repo with the minimal demo to reproduce the issue, CodeSandbox does not allow to configure eslint properly:\r\nhttps://github.com/Egor-Koldasov/eslint-plugin-react-hooks-satisfies-error\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nPlugin shows the error and doesn't check actual dependencies passed to the `useCallback`:\r\n```\r\nReact Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead. eslintreact-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\nIt should work exactly the same way as it works without \"satisfies\" operator used. No error \"received a function whose dependencies are unknown\" and dependencies passed are successfully checked. \r\n","state":"open","updated_at":"2023-01-16T12:06:42Z","created_at":"2023-01-16T12:06:04Z","creator_user_login":"Egor-Koldasov"}
{"number":25987,"title":"Bug: createPortal doesn't work","body":"\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nI have two independent project : main and features project.  Features project have side effect components: CustomerSearch, UserSearch, AccountSearch, etc and i'm using in main project these.\r\n\r\nBut UserSearch component needs StoreProvider, MessageProvider, ThemeProvider or any provider in main project. And I decided using createPortal.\r\n\r\nUserSearch.tsx in features project:\r\n```\r\nexport const FibaUserSearch = <\r\n  TFieldValues extends FieldValues = Record<string, string | User>,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>(\r\n  props: UserSearchProps<TFieldValues, TName>,\r\n) => createPortal(<FibaUserSearchInner {...props} />, document.getElementById('container')) \r\n```\r\n\r\nindex.tsx in main project\r\n```\r\n return (\r\n    <>\r\n      <ThemeProvider theme={createTheme(theme, ...muiThemeLang[languageProfile])}>\r\n        <NotificationProvider>\r\n          <LayoutProvider>\r\n            <MessageProvider>\r\n              <Container id=\"container\">\r\n                <Header />\r\n                <FibaBox\r\n                  sx={{\r\n                    p: `${toolbarHeight ?? 0}px 10px 0px 10px`,\r\n                  }}\r\n                >\r\n                 <FibaUserSearch/>\r\n                </FibaBox>\r\n              </Container>\r\n            </MessageProvider>\r\n          </LayoutProvider>\r\n        </NotificationProvider>\r\n      </ThemeProvider>\r\n      <Loading />\r\n    </>\r\n  )\r\n```\r\n\r\nMy expectation is that every provider in index.tsx is available for FibaUserSearch. But createPortal doesn't work this case or I didn't understand logic clearly.\r\n\r\nThanks,","state":"open","updated_at":"2023-01-20T19:25:26Z","created_at":"2023-01-11T21:51:52Z","creator_user_login":"atillaaliyev"}
{"number":25985,"title":"Profile Section is not updated automatically after updating profile picture ","body":"Profile Section is not updated automatically after updating profile picture ","state":"open","updated_at":"2023-01-23T20:35:41Z","created_at":"2023-01-11T14:14:26Z","creator_user_login":"shreya-as"}
{"number":25981,"title":"Reactt-dev-tools not loading in incognito mode Browser is Chrome","body":"Reactt-dev-tools not loading in incognito mode Browser is Chrome","state":"open","updated_at":"2023-05-05T14:29:56Z","created_at":"2023-01-11T05:53:17Z","creator_user_login":"Ajay-Nallanagula"}
{"number":25979,"title":"Strict effects can break focus restoration","body":"This isn't necessarily a bug in React's implementation, but a symptom caused by strict effects. It is pretty common to need to restore focus to another element when a component unmounts. For example, a dialog component would need to restore focus to the element that opened it for proper keyboard accessibility.\r\n\r\nWhen StrictMode is enabled, components are \"mounted\" twice such that their effects and cleanup functions are executed, but the component isn't actually removed from the DOM in this process. If a component moves focus in its effect cleanup function, this has user visible consequences and focus won't be restored back when the component \"mounts\" again. Here is a simple example:\r\n\r\n```js\r\nfunction Inner({ restoreRef }) {\r\n  useLayoutEffect(() => {\r\n    let el = restoreRef.current;\r\n    return () => {\r\n      // Restore focus on unmount.\r\n      el.focus();\r\n    };\r\n  }, [restoreRef]);\r\n\r\n  return <input autoFocus />;\r\n}\r\n```\r\n\r\nIn this example, the browser moves focus to the input when Inner is committed to the DOM. Then, the layout effect cleanup is run, restoring focus to the provided ref. But the component hasn't actually unmounted, so focus should ideally stay on the input.\r\n\r\nOne could try to work around this by not using `autoFocus` and instead using a ref to the input and calling `focus()` on it in the `useLayoutEffect`. That way, when the component \"mounts\" again, the layout effect would run a second time and focus would come back to the input. However, this might have accessibility implications if focus is bouncing around rapidly. It also wouldn't work if you didn't want to auto focus an element on initial mount but still wanted focus restoration on unmount. Ideally there would be a way to avoid strict effects entirely for this use case.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/async-dust-k8g9uy?file=/src/App.js\r\n2. Press the \"Toggle inner\" button\r\n3. See that focus is not on the auto focused input.\r\n\r\n## The current behavior\r\n\r\nStrict effects with side effects in cleanup functions that cannot be undone have no way to only run when the component is actually being removed from the DOM.\r\n\r\n## The expected behavior\r\n\r\nIdeally some way to know if the component is actually being removed from the DOM so this can only happen then. Basically an opt-out of strict effects for this specific use case.","state":"open","updated_at":"2023-01-22T20:23:43Z","created_at":"2023-01-10T19:59:12Z","creator_user_login":"devongovett"}
{"number":25972,"title":"Bug: eslint react-hooks/exhaustive-deps should not quote nor localize the dependency list in the output","body":"React version: 18\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a useCallback or useEffect hook with missing deps\r\n2. enable react-hooks/exhaustive-deps eslint rule\r\n\r\n## The current behavior\r\n\r\n>   161:6  error  React Hook useCallback has missing dependencies: 'isTablet', 't', and 'theme.sizes.spacing'. Either include them or remove the dependency array  react-hooks/exhaustive-deps\r\n\r\n## The expected behavior\r\n\r\n>   161:6  error  React Hook useCallback has missing dependencies: [ isTablet, t, theme.sizes.spacing ]. Either include them or remove the dependency array  react-hooks/exhaustive-deps\r\n\r\nBy rendering it that way we can simply copy and paste the list into our code rather than changing the copied list after the fact.","state":"open","updated_at":"2023-01-18T23:20:45Z","created_at":"2023-01-09T13:56:40Z","creator_user_login":"trajano"}
{"number":25970,"title":"[Fizz] Implement `renderDocument`","body":"stacked on #25703 \r\n\r\n## `renderDocument` and `renderDocumentAsPipeableStream`\r\n\r\nThis PR adds a new rendering mode for rendering an entire Document on the server.\r\n\r\n#### Example\r\nOn the server use `renderDocument` and stream the results to the client\r\n```\r\n// ReadableStream gets passed to Response or otherwise piped to browser\r\nconst stream = renderDocument(\r\n  // children\r\n  <html lang=\"en\">\r\n    <body>\r\n      <div>my primary app</div>\r\n    </body>\r\n  </html>,\r\n  // fallback\r\n  <div>a fallback app</div>\r\n);\r\n``` \r\n\r\nClient receives if the Shell does not error for the primary children\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head></head>\r\n  <body>\r\n    <div>my primary app</div>\r\n  </body>\r\n</html>\r\n```\r\nClient receives the following if the Shell does error for the primary children\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head></head>\r\n  <body>\r\n    <div>a fallback app</div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n#### Primary Characteristics\r\nThere are three primary distinguishing characteristics with the `renderDocument` implementations that explain why existing functions such as `renderToReadableStream` were not suitable\r\n\r\n1. It always emits a full HTML document even if you only render some body content. With other render methods you only get what you tell React to render for you so if you render a div with some inner content that is all React will output. Using one of the existing render functions requires you to carefully control what is rendered and if you have intermediate layers (like a framework) in place it can force you into a situation where the App author needs to remember to include the document structure (\\<html\\>, \\<head\\>, etc...) or not be allowed to provide it at all. The flexibility of embedding whatever `renderDocument` is given in a full HTML document alleviates this limitation\r\n2. It will attempt to stream preamble content as early as possible, even before the shell has finished rendering. If we discover a stylesheet or script that can be preloaded or preinitialized while still waiting of the shell to complete rendering we want to send that to the client right away. `renderToReadableStream` does not provide you with the stream until the shell has finished.\r\n3. It provides allows you to provide a `fallback` that will render if the Shell for `children` errors. While other methods don't flush anything until the Shell finishes and thus you can spin up a separate render call, or handle the error case with a different status code and response content the `renderDocument` function likely already sent bytes before the Shell has errored so it must coordinate the fallback state more holistically.\r\n\r\n#### Resource Flushing Semantics\r\nSome Resources can flush even before the Shell is finished, including preloads, and scripts. Stylesheets for the first precedence can be flushed as well and we can send preloads for stylesheeets for other precedences. The reason we cannot flush all stylesheets of any precedence early is we need the order to be guaranteed and we don't do any re-ordering on the client so they need to leave the server in the right order unless they are delivered as part of a Suspense Boundary reveal.\r\n\r\n#### Ancillary PR note\r\nA related incidental change accompanies this PR for the other render methods. If we render an `<html>` tag but do not render a `<head>` tag, we will emit an `<head>` tag into the stream just after `<html>` and before any other rendered content (usually a `<body>` but you can have non-spec html). It is possible this tag won't be empty because any Resources that get hoisted to the head will emit there. Currently these tags emit after the html tag and before any rendered content which may work based on permissive Browser HTML parsing rules but is not valid HTML. One might try to argue this is a breaking change but relying on there NOT being a `<head>` is not practically possible given the Browser invents a DOM node for this head anyway","state":"open","updated_at":"2023-01-18T19:04:20Z","created_at":"2023-01-07T01:04:02Z","creator_user_login":"gnoff"}
{"number":25969,"title":"Bug: Hydration mismatch error for HTML entities in direct text children of <noscript> tag","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. In a React SSR app, include a `<noscript` JSX element with text children that contains an HTML entity, such as `&apos;`:\r\n    ```jsx\r\n    export default function App() {\r\n      return <noscript>&apos;</noscript>;\r\n    }\r\n    ```\r\n2. Render the React app on the server using `ReactDOMServer.renderToString` (no visible warnings appear):\r\n    ```jsx\r\n    const component = ReactDOMServer.renderToString(<App />);\r\n    ```\r\n    Of note, this appears to replace the HTML entity in final HTML output with a different entity:\r\n    ```html\r\n    ...<noscript>&#x27;</noscript>...\r\n    ```\r\n3. Attempt to hydrate the React app on the client using `hydrateRoot`:\r\n    ```jsx\r\n    hydrateRoot(document.getElementById(\"root\"), <App />);\r\n    ```\r\n4. UI mismatch error occurs at hydration time\r\n\r\n    ![image](https://user-images.githubusercontent.com/26242455/211048570-2e6f0051-1096-4bcd-91b3-c91f8fdebf46.png)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/jazeved0/react-ssr-noscript-bug-reprod (steps to build/run are in the readme)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nUsing an HTML entity in the direct text children of a `<noscript>` tag results in hydration errors on the client. I encountered this while building a [Gatsby](https://www.gatsbyjs.com/) static site where I wanted to include a `<noscript>`-wrapped warning in a component that only works when JavaScript is enabled (and this message includes an apostrophe character).\r\n\r\nThe following cases encounter the same/a similar error:\r\n- Same example as above (and the one I originally encountered):\r\n\r\n    ```jsx\r\n    <noscript>&apos;</noscript>\r\n    ```\r\n- Using the direct character:\r\n    ```jsx\r\n    <noscript>'</noscript>\r\n    ```\r\n- Using the other HTML entity that React SSR uses, in the original source of the component:\r\n    ```jsx\r\n    <noscript>&#x27;</noscript>\r\n    ```\r\n\r\nThe following cases do work:\r\n- Wrapping the text containing the HTML entity in a plain `<div>`, inside the `<noscript>`:\r\n\r\n    ```jsx\r\n    <noscript><div>&apos;</div></noscript>\r\n    ```\r\n- Using `dangerouslySetInnerHTML`:\r\n    ```jsx\r\n    <noscript dangerouslySetInnerHTML={{ __html: \"&apos;\" }} />\r\n    ```\r\n\r\n## The expected behavior\r\n\r\nAll of the above cases (except wrapping the HTML entity in a `<div>`) should result in the same behavior, and exhibit no errors when hydrating on the client.\r\n\r\nI believe this may be related to https://github.com/facebook/react/issues/11423 (although notably the behavior of \"ignore <noscript> content on the client and don't warn about mismatches\" doesn't seem to be case here).\r\n","state":"open","updated_at":"2023-01-06T16:23:06Z","created_at":"2023-01-06T16:23:06Z","creator_user_login":"jazeved0"}
{"number":25968,"title":"Fixed  `useSyncExternalStoreWithSelector` to update memoizedSnapshot on change","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nA proposed fix for the bug described in https://github.com/facebook/react/issues/25967\r\n\r\n## How did you test this change?\r\n\r\nSee the issue linked above, test scenario included in the code sandbox: https://codesandbox.io/s/fervent-ives-0vm9es?file=/src/App.jsx\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-01-12T05:46:37Z","created_at":"2023-01-06T13:15:01Z","creator_user_login":"jellevoost"}
{"number":25967,"title":"Bug: Stale selectors keep old store snapshots alive in useSyncExternalStoreWithSelector","body":"Within `useSyncExternalStoreWithSelector` there is currently a bug that will keep old references to the used store alive if you use an immutable store in combination with selectors that always result in the same result. This can lead to excessive memory usage while this is not needed. I've noticed this behavior in combination with react-redux, but also managed to reproduce it without react-redux to figure out exactly what was going on. (I've reported this at the react-redux repo as well https://github.com/reduxjs/react-redux/issues/1981)\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nSince the reproduction is fairly complicated I've created a sandbox with details on how to reproduce including a minimal working sample that also includes the reproduction steps within that exact example.\r\n\r\nBut in summary, it is reproducible using the following steps:\r\n1. You will need an immutable store that you will use with your selector (new copy every store update)\r\n2. You will need a stable custom isEqual function and selector that are not created in-line\r\n3. The store needs some property (e.g. a string) that is easily found within memory snapshots. (It helps to include a timestamp within this property that updates on store change)\r\n4. You will need to print a value from the store within your main component, to show the most recent result of the store.\r\n5. You will need a component that uses a stable selector to select a stale value (something that never changes) from the store\r\n6. Next up you need to update the store and add an additional copy of the previous component (the one created in step 5.)\r\n7. Repeat this a few times\r\n8. Take a memory snapshot and notice there are multiple copies of the store present in memoizedSnapshots of the different components. You can see this by searching on the property you defined in step 3.\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/fervent-ives-0vm9es?file=/src/App.jsx\r\n\r\n## The current behavior\r\n- Whenever the result of getSnapshot() is changed, but the result of the selector() has not, the memoized reference to the old result of getSnapshot() is not updated, resulting in unnecessary copies of the store used alive. Whenever you have a fairly large store that is shared between quite a bunch of selectors, especially with components that are mounted at a later timestamp and use selectors that have stale data, you could end up with an ever increasing amount of store references resulting in high memory usage.\r\n\r\n## The expected behavior\r\n- Whenever the result of getSnapshot() is changed, but the result of the selector() has not, the memoized reference to the old result of getSnapshot() is updated correctly, preventing unnecessary copies from being kept alive. This should not impact the behavior of `useSyncExternalStoreWithSelector` but should/can reduce the memory footprint of applications using this.","state":"open","updated_at":"2023-01-06T13:16:45Z","created_at":"2023-01-06T13:12:02Z","creator_user_login":"jellevoost"}
{"number":25961,"title":"Bug: onError acts differently to onerror in Vanilla HTML","body":"onError acts differently on `<picture>`, `<source>`, `<img>` in React than in vanilla HTML.\r\n\r\nReact version: 18.2.0\r\nChrome version: 108\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create an HTML `<picture>` with a `<source>` with a bad URL. Add an onerror function on the `<picture>`, `<source>` and backup `<img>` tags. The `<img>` onerror will fire.\r\n2. Create a React `<picture>` with a `<source> `with a bad URL. Add an onError function on the `<picture>`, `<source>` and backup `<img>` tags. The `<img>` AND `<picture>` onErrors will fire. \r\n\r\nLink to code example:\r\n\r\nVanilla Example (check console): https://codesandbox.io/s/adoring-villani-c88u7m?file=/index.html\r\nReact Example (check console): https://codesandbox.io/s/suspicious-glitter-bfojd6?file=/src/App.js\r\n\r\n## The current behavior\r\nReact triggers onError for both the `<picture>` and `<img>` elements.\r\n\r\n## The expected behavior\r\nReact should trigger onError on only the `<img>` element. Although, [from the looks of the spec](https://codesandbox.io/s/adoring-villani-c88u7m?file=/index.html), it should only trigger on the final `<source>` element.","state":"open","updated_at":"2023-01-11T18:09:25Z","created_at":"2023-01-04T15:17:29Z","creator_user_login":"cat-michael-gwynne"}
{"number":25960,"title":"React Dom:-Added a test to check for validation to verify ReactDOMClient createR…","body":"Added few test to React DOM-\r\n\r\n- First one checks where the `ReactDOMClient createRoot` executes .\r\n- second one checks to find rendered component with the type in document.","state":"open","updated_at":"2023-05-14T06:45:51Z","created_at":"2023-01-03T16:10:08Z","creator_user_login":"Biki-das"}
{"number":25958,"title":"Bug: 'exhaustive-deps' lint rule warns that \"Outer scope values\" aren't valid when a hook is inside a function","body":"\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\nInside a functional component, an inner function with a dependency on value from an outer function triggers the warning, \"Outer scope values like '....' aren't valid dependencies because mutating them doesn't re-render the component.\"\r\n\r\nHere's the crux of the problem\r\n\r\n```js\r\nconst List = (props: IListProps) => {\r\n  const { items } = props;\r\n\r\n  // Using the useMemo hook here doesn't complain, e.g. -\r\n  // const names = useMemo(() => items.map(item => item.name), [items]);\r\n\r\n  // Using the useMemo hook inside a function complains\r\n  const names = useItemNames();\r\n\r\n  return (\r\n    <>\r\n      <h2>There are {items.length} items in the list</h2>\r\n      <section>\r\n        {names.map(name => (\r\n          <div>{name}</div>\r\n        ))}\r\n      </section>\r\n    </>\r\n  );\r\n\r\n  ////////////////////\r\n\r\n  function useItemNames() {\r\n    // es-lint warns here: Outer scope values like 'items' aren't valid dependencies \r\n    // because mutating them doesn't re-render the component\r\n    return useMemo(() => items.map(item => item.name), [items]);\r\n  }\r\n};\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/custom-hook-repro-3wfly\r\n\r\n## The current behavior\r\nThe eslint rule will complain about unneccessary dependencies.\r\n\r\n## The expected behavior\r\nThe eslint rule shouldn't be triggered.\r\n\r\nThis is a reopen and copy of https://github.com/facebook/react/issues/17060 by @gerrod","state":"open","updated_at":"2023-01-06T14:47:45Z","created_at":"2023-01-03T10:27:02Z","creator_user_login":"finnp"}
{"number":25957,"title":"custom hook does not work in the new version of react dom","body":"In my projects, I very often use a custom hook to emulate the behavior of componentDidUpdate\r\n\r\nconst [lesson, setLesson] = useState('');\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n      if (!ref.current) {\r\n         ref.current = true;\r\n      } else {\r\n         do something\r\n       }\r\n   }, [lesson]);\r\n\r\nWith this combination, the custom hook stopped working\r\n\r\n\"react\": \"^18.2.0\",\r\n\"react-dom\": \"^18.2.0\",\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <React.StrictMode>\r\n      <App/>\r\n    </React.StrictMode>,\r\n);\r\n\r\nWhat is the problem?\r\n","state":"open","updated_at":"2023-04-09T05:48:29Z","created_at":"2023-01-03T09:48:43Z","creator_user_login":"Sinevik"}
{"number":25954,"title":"devtools: Use context displayName for context hook name","body":"\r\n## Summary\r\n\r\nWhen inspecting the hooks of an element, the display name of the passed context is now used for the context hook (with a fallback to the previous \"Context\" name).\r\n\r\nBefore:\r\n![Screenshot from 2023-01-01 19-07-45](https://user-images.githubusercontent.com/12292047/210181524-539a0917-ec30-44c7-a47a-ebb8b1272c66.png)\r\n\r\n\r\nAfter:\r\n\r\n![Screenshot from 2023-01-01 19-40-32](https://user-images.githubusercontent.com/12292047/210181526-b1146b44-b03b-4aac-98f6-7571fa87d214.png)\r\n\r\n## How did you test this change?\r\n\r\n- [x] added tests\r\n- [x] react-devtools-shell (see attached screenshots) ","state":"open","updated_at":"2023-01-01T18:50:18Z","created_at":"2023-01-01T18:44:56Z","creator_user_login":"eps1lon"}
{"number":25948,"title":"Bug: Chrome devtools conflict while watching WebSocket in a React page","body":"Well, this might be a strange question, but there are some differences about the behavior of iframes between a native h5 page and a React page.\r\n\r\n* **Native h5 Page**\r\n  \r\n  Here is a native h5 page with an iFrame. The iframe will create a WebSocket connection.\r\n  We can see the value of `Time` is `Pending` while the connection is still active.\r\n\r\n  ![Image here](https://i.stack.imgur.com/UDWz3.png)\r\n\r\n  Then after I removed this iframe as a child from document, the value of `Time` became the time the connection lasted.\r\n\r\n  ![Image here](https://i.stack.imgur.com/7milk.png)\r\n\r\n\r\n> However, in a React Page, something strange happens.\r\n\r\n* **React Page**\r\n\r\n  Every added iframe would create a WebSocket connection in `Pending` status.\r\n\r\n  ![Image here](https://i.stack.imgur.com/fgY3K.png)\r\n\r\n  But when I remove them, the value of `Time` wouldn't change into the time they lasted, but still in `Pending` status.\r\n\r\n  ![Image here](https://i.stack.imgur.com/lCLkY.png)\r\n\r\n  Here is my code:\r\n```jsx\r\nfunction App() {\r\n  const [frames, setFrames] = useState([]);\r\n\r\n  const onAdd = useCallback(() => {\r\n    const iFrame = (\r\n      <iframe src='http://127.0.0.1:8080/iframe.html' />\r\n    );\r\n\r\n    setFrames((frames) => [\r\n      ...frames,\r\n      iFrame,\r\n    ]);\r\n  }, []);\r\n\r\n  const onDel = useCallback(() => {\r\n    setFrames((frames) => [\r\n      ...frames.slice(0, frames.length - 1),\r\n    ]);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button onClick={onAdd}>+1</button>\r\n        <button onClick={onDel}>-1</button>\r\n      </div>\r\n      <div>\r\n        {\r\n          frames.map((frame, index) => {\r\n            return (\r\n              <React.Fragment key={index}>\r\n                {frame}\r\n              </React.Fragment>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n\r\nI tried to make some logs in my WebSocket Server, and it seemed that the connections have been disconnected already.\r\n\r\nI'm a freshman in frontend development, so this is a strange behavior as for me. I wonder if this caused by **memory leak** or something else.\r\n\r\nSincerely waiting for your answer.","state":"open","updated_at":"2022-12-30T03:03:13Z","created_at":"2022-12-30T03:03:13Z","creator_user_login":"ch1ny"}
{"number":25947,"title":"Bug: React Re-Renders Component When Set State is The Exact Same, but Only Once","body":"https://codesandbox.io/s/blissful-jepsen-luo8ce?file=/src/App.js\r\n\r\nIn this code, I set a state to true when a button is clicked. On the first click the log statement inside the handler runs, the state is set to true, the component re-renders, and 'the state is true' prints. On the second click, this happens again- why? I am setting state to a duplicate value so the component shouldn't re-render. Even if it were to re-render, it only ever happens twice, the third click and onwards only run the console.log inside the handler, not inside the component itself.","state":"open","updated_at":"2023-01-15T19:52:18Z","created_at":"2022-12-29T19:34:14Z","creator_user_login":"agrawalishaan"}
{"number":25941,"title":"Bug: BetaDocs - application tutorial tic-tac-toe zip error","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose File > Export to ZIP in that menu to download an archive of the files locally\r\n2. See the structure of the files.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [tutorial-tic-tac-toe](https://beta.reactjs.org/learn/tutorial-tic-tac-toe)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIncorrect folder structure, throwing an error when performing an \"npm start\".\r\n\r\n## The expected behavior\r\n\r\nZip file must contain the same folder structure as the online editor. And it should work when running \"npm install\".\r\n\r\n[link to correctly organized folders](https://github.com/fernandomk6/curso-react.js-ninja-react-completo/tree/main/overview-docs/tic-tac-toe)\r\n","state":"open","updated_at":"2023-08-09T08:35:11Z","created_at":"2022-12-26T20:37:06Z","creator_user_login":"fernandomk6"}
{"number":25939,"title":"React devtools stuck at Loading React Element Tree...  ","body":"##### Have tried re-installing both extension and chrome.\r\n\r\nOS: Ubuntu 20.10\r\nChrome: 107.0.5304.87 (Official Build) (64-bit)\r\nScenario: Dev tools shows\r\n```\r\n Loading React Element Tree...\r\n\r\nIf this seems stuck, please follow the [troubleshooting instructions](https://github.com/facebook/react/tree/main/packages/react-devtools#the-issue-with-chrome-v101-and-earlier-versions).\r\n```\r\non local development servers.","state":"open","updated_at":"2023-08-14T03:28:20Z","created_at":"2022-12-26T09:45:18Z","creator_user_login":"ananthakrishna-hs"}
{"number":25932,"title":"[ESLint] Preserve optional chains in declared dependencies","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe `react-hooks/exhaustive-deps` lint rule currently strips `?.` from declared dependencies (when it has a reason to rewrite them), which can turn a valid dependency into one that throws when evaluated. The issue is broader than what's fixed here (see e.g. #23248) and a comprehensive fix would require something closer to type analysis (with some notion of type guards / refinement).\r\n\r\nThis PR is narrow in scope and fixes the case where:\r\n\r\n1. The user has declared a dependency using optional chaining.\r\n2. We have no evidence to suggest (per the logic of #19275) that we should use non-optional access for the same dependency.\r\n3. We are suggesting a fix for some *other* issue in the same dependency array.\r\n\r\nThis is done by recording the optional chaining information while visiting the declared dependencies, instead of discarding it.\r\n\r\nI'm not deeply familiar with the code for this lint rule, but reading #19275 and in particular this comment leads me to believe this fix is safe and correct:\r\n\r\nhttps://github.com/facebook/react/blob/81d4ee9ca5c405dce62f64e61506b8e155f38d8d/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L865-L868\r\n\r\n## How did you test this change?\r\n\r\nAdded a regression test and updated existing tests (some error messages were superficially changed).\r\n","state":"open","updated_at":"2023-04-14T15:27:19Z","created_at":"2022-12-23T14:19:40Z","creator_user_login":"motiz88"}
{"number":25928,"title":"Bug: SSR of malformed? `meta` renders nothing(working in 18.2)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. SSR `<meta name=\"test\" />` (`renderToString` and `renderToReadableStream`)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: \r\n- Working in 18.2: https://codesandbox.io/s/18-2-ssr-meta-only-working-t6lxvw\r\n- render nothing in 18.3-5fcf1a4b4c2150a1b9fe0de0144a82a053c63966: https://codesandbox.io/s/18-3-5fcf1a4b4c2150a1b9fe0de0144a82a053c63966-ssr-meta-only-bug-woguy0?file=/src/index.js\r\n\r\n\r\n## The current behavior\r\n\r\nRenders empty string\r\n\r\n\r\n## The expected behavior\r\n\r\nRenders `<meta name=\"test\" />`\r\nDon't know if that's a valid use case but it should at least warn that the meta tag is malformed?\r\n\r\nThis broke the attribute fixture (originally reported in https://github.com/facebook/react/pull/25927).\r\n\r\nAlso:\r\n1. `<meta name=\"description\" content={content} />` renders nothing unless `content` is a string.\r\n1. `<meta http-equiv />` i.e. any `http-equiv` usage no longer renders anything. It used to warn at least.","state":"open","updated_at":"2023-02-06T09:18:34Z","created_at":"2022-12-23T10:05:15Z","creator_user_login":"eps1lon"}
{"number":25920,"title":"Bug: when used with jsdom-jscore-rn, importing react-dom crashes","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\nInstall the `jsdom-jscore-rn` and `react-dom` packages locally and then run this Node.js script:\r\n```js\r\n// create a document with primitive DOM implementation\r\nconst jsdom = require('jsdom-jscore-rn');\r\nconst document = jsdom.html( '', null, null );\r\n\r\n// assign all the browser-ish globals\r\nglobal.document = document;\r\nglobal.window = { document };\r\nglobal.navigator = { userAgent: '' };\r\n\r\n// load react-dom and see it crash\r\nrequire('react-dom');\r\n```\r\nImporting the `react-dom` package will crash:\r\n```\r\nnode_modules/react-dom/cjs/react-dom.development.js:8797\r\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\r\n                                                         ^\r\n\r\nTypeError: Cannot use 'in' operator to search for 'WebkitAnimation' in undefined\r\n    at getVendorPrefixedEventName (node_modules/react-dom/cjs/react-dom.development.js:8797:58)\r\n    at node_modules/react-dom/cjs/react-dom.development.js:8805:21\r\n    at Object.<anonymous> (node_modules/react-dom/cjs/react-dom.development.js:29867:5)\r\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\r\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\r\n    at Module.load (node:internal/modules/cjs/loader:981:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\r\n    at Module.require (node:internal/modules/cjs/loader:1005:19)\r\n    at require (node:internal/modules/cjs/helpers:94:18)\r\n    at Object.<anonymous> (node_modules/react-dom/index.js:37:20)\r\n```\r\n\r\nWhat happened? There is the [`jsdom-jscore-rn`](https://www.npmjs.com/package/jsdom-jscore-rn) package that provides a very bare-bones implementation of DOM (like `jsdom` but much smaller), intended for React Native apps that need to have some DOM available. Typically to please libraries that depend on it, like the [`hpq`](https://www.npmjs.com/package/hpq) HTML parser lib. The mobile version of the [Gutenberg](https://github.com/wordpress/gutenberg) editor uses `jsdom-jscore-rn`.\r\n\r\nThe `jsdom-jscore-rn` DOM doesn't support the `.style` attribute on elements. Accessing an `el.style` returns `undefined`, not an instance of `CSSStyleDeclaration`. But this confuses `react-dom`'s [`getVendorPrefixedEventName`](https://github.com/facebook/react/blob/2b1fb91a55deb9b7b60452cb57184c2f182a42fd/packages/react-dom-bindings/src/events/getVendorPrefixedEventName.js#L51) code that will assign the `undefined` value to the global `style` variable and will try to access its properties with statements like `styleProp in style`.\r\n\r\nIt would be nice if `react-dom` could do one additional check on the `el.style` attribute before assigning it to the global `style`. It would make the package more compatible with--admittedly very strange, but realistic--environments that combine React Native, `jsdom-jscore-rn` and `react-dom`. Note that we don't even have to _use_ anything from `react-dom` to trigger the bug, we're merely importing it. Maybe in some test environment where there's nothing like tree shaking that would remove unused modules.","state":"open","updated_at":"2022-12-23T12:18:50Z","created_at":"2022-12-21T12:18:18Z","creator_user_login":"jsnajdr"}
{"number":25919,"title":"Flush continuous updates in the capture phase of a discrete event","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nIf there is a click event following a series of mouse over events, we want the callback in the click event to be able to read the latest states set by mouse over.\r\n\r\n\r\n## How did you test this change?\r\nyarn test\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-01-21T00:26:32Z","created_at":"2022-12-21T02:47:37Z","creator_user_login":"tyao1"}
{"number":25912,"title":"[Discussion]: More control over the hydration of components.","body":"When a user loads a server-side-rendered page, all the imports are loaded and hydrated before the user can interact with the page. This leads to a bigger initial bundle size. We can use code-splitting to split our app into smaller chunks.\r\n\r\nWe have been using [loadable-component](https://loadable-components.com/docs/getting-started/) for code splitting in our server-side rendering framework. We are using a library called [react-loadable-visibility](https://github.com/trinachoudhury1mg/react-loadable-visibility/tree/fix-hydration) which is an [intersection observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)-based wrapper around loadable components that only load imports visible in the current viewport.\r\nSample Code.\r\n\r\n``` javascript\r\nimport loadable from \"react-loadable-visibility\"\r\nconst Component = loadable(() => import(\"/src/Components/ComponentName\"), {\r\n    ssr: false,\r\n    fallback: <Skeleton/>,\r\n})\r\n\r\n```\r\n\r\nOur server will render the fallback Skeleton given here and will send it to the client. However, on the client, the “.js” files for the “Component” mentioned in the sample code, will be loaded and it will be hydrated only when it is in the current viewport. [react-loadable-visibility](https://github.com/trinachoudhury1mg/react-loadable-visibility/tree/fix-hydration) takes care of this. Here is a [reproducible example](https://codesandbox.io/p/github/Uttkarsh-Srivastava/loadable-components-ssr/sandbox).\r\n\r\n## Next Step\r\n\r\nWe are planning to add support for React lazy and Suspense in our [react-loadable-visibility](https://github.com/trinachoudhury1mg/react-loadable-visibility/tree/fix-hydration) where we hydrate components visible in the current viewport. We want more granular control over hydration than what is currently offered in the new React 18 SSR Architecture.\r\n\r\nWe will then add support for React lazy and Suspense in our app (using the library mentioned above), where we will load and hydrate only the components that are present in the current viewport. We want to display the HTML of the components that [renderToPipeableStream](https://reactjs.org/docs/react-dom-server.html#rendertopipeablestream) sends us, but we do not want to hydrate the components that are not in the current viewport.\r\n\r\nWe would like to know your thoughts on this issue so that we can have an optimized approach. I am facing some issues in understanding how hydrateRoot works behind the scene.\r\n\r\nWe have done some work on this but we are getting hydration mismatches and facing some issues in identifying which components have been rendered on our server and therefore can be rendered in the viewport instead of the fallback.\r\n\r\nFor a better understanding, you can check out the [reproducible example](https://codesandbox.io/p/github/Uttkarsh-Srivastava/react-18-ssr-demo/master). For more information about the library, please follow this [link](https://github.com/trinachoudhury1mg/react-loadable-visibility/tree/feat/lazy-suspense-support).\r\n\r\nCode overview of the [react-loadable-visibility](https://github.com/trinachoudhury1mg/react-loadable-visibility/tree/feat/lazy-suspense-support):\r\n\r\n``` javascript\r\nconst Component = loadable(() => import(importPath), {\r\n    fallback: fallbackComponent,\r\n})\r\n\r\n```\r\n\r\n- react-loadable-visibility takes two arguments: the **path** of the component that we want to import and an object containing **fallback** key and **ssr** key. The **fallback** key accepts the fallback component. **ssr** key if set to true should load the chunks and hydrate the component even if the component is not in view.\r\n- [src/loadable-components.js](https://github.com/trinachoudhury1mg/react-loadable-visibility/blob/feat/lazy-suspense-support/src/loadable-components.js) : This file returns loadable-component if the file runs on the client else it will return our custom wrapper function around loadable-components.\r\n- [src/createLoadableVisibilityComponent.js](https://github.com/trinachoudhury1mg/react-loadable-visibility/blob/feat/lazy-suspense-support/src/createLoadableVisibilityComponent.js): In this file, a custom wrapper around loadable-component is present. The wrapper function will check if the import is present in the current viewport using the intersection observer API provided by the browser. If the imported component is present in the viewport it will return the actual component else it will return the fallback component.\r\n- [src/react-lazy.js](https://github.com/trinachoudhury1mg/react-loadable-visibility/blob/feat/lazy-suspense-support/src/react-lazy.js): It returns Suspense wrapped component if the code runs on the server else it returns our custom wrapper function. (**This file has code that is not ready to use. Currently in the development phase)**.\r\n- [src/createLazyVisibilityComponents.js](https://github.com/trinachoudhury1mg/react-loadable-visibility/blob/feat/lazy-suspense-support/src/createLazyVisibiltyComponents.js): This file returns a wrapper around React lazy. If the imported component is in the current viewport it will return the Suspense wrapped component, else it will return a rendered fallback. (**This file has code that is not ready to use. Currently in the development phase).**\r\n    \r\n    ### What we want to achieve in [src/createLazyVisibilityComponents.js](https://github.com/trinachoudhury1mg/react-loadable-visibility/blob/feat/lazy-suspense-support/src/createLazyVisibiltyComponents.js)\r\n    \r\n    The current expectation is it should return the rendered HTML of the component if it has been rendered on the server and not the fallback. However, we would stop its hydration until the component enters the current viewport.\r\n    \r\n### Points of discussion\r\n-  We would need more control over the hydration of components inside or outside the viewport.\r\n-  We would need a way to identify which component's HTML has been generated on the server and can be hydrated.\r\n\r\nNeed React core team's help and views on the above-mentioned points to achieve our \"Next Step\"","state":"open","updated_at":"2023-02-18T11:50:50Z","created_at":"2022-12-19T16:05:27Z","creator_user_login":"Uttkarsh-Srivastava"}
{"number":25908,"title":"Moved display name setter to shared","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nMoved display name setter to shared package to avoid repetition\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nThis is not a user interface change.\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2023-01-17T13:18:31Z","created_at":"2022-12-18T13:15:20Z","creator_user_login":"behnammodi"}
{"number":25899,"title":"Addressing error 1307","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-12-16T18:36:28Z","created_at":"2022-12-16T18:29:34Z","creator_user_login":"MithilaMarapareddy"}
{"number":25895,"title":"Use Effect blocking render sample solution","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-12-16T14:12:11Z","created_at":"2022-12-16T14:04:44Z","creator_user_login":"krishnavamshi0708"}
{"number":25889,"title":"Bug: with Jest and Testing Library, React schedules work with wrong Jest timers functions","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nHave a Jest setup that uses fake timers by default (the `fakeTimers: { enableGlobally: true }` config option), and then enable real timers for a specific test suite, like this:\r\n```jsx\r\nimport { screen, render } from \"@testing-library/react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\njest.useRealTimers();\r\n\r\nit(\"loads\", async () => {\r\n  function App() {\r\n    const [data, setData] = useState(null);\r\n    useEffect(() => {\r\n      const t = setTimeout(() => {\r\n        setData(\"data\");\r\n      }, 100);\r\n      return () => clearTimeout(t);\r\n    }, []);\r\n    return <div>{ data || \"loading\" }</div>;\r\n  }\r\n\r\n  render(<App />);\r\n\r\n  await screen.findByText(\"data\");\r\n});\r\n```\r\nThis test renders an initial UI in \"loading\" state, then schedules a state update to \"load data\" in 100ms, and waits for the updated UI to appear, by calling `await findByText()`. This test is supposed to succeed.\r\n\r\nBut it fails. The state update scheduled in `setData` is never executed. That's because React schedules it using the fake timers version of `setImmediate`, but we want the real timers. Nobody is advancing the fake timers in our test, so they never run.\r\n\r\nThis timing bug is a combination of two factors: first, React statically initializes references to the timers functions, when loading the `react-dom` module:\r\n```js\r\nconst localSetImmediate = typeof setImmediate === 'function' ? setImmediate : /* ... fallbacks */;\r\n```\r\nAt this time, fake timers are still active, the `jest.useRealTimers()` switch happens only later. The fake version is captured forever.\r\n\r\nSecond, the Testing Library's `waitFor` function (used by `findByText` internally) is [implemented](https://github.com/testing-library/dom-testing-library/blob/main/src/wait-for.js) in such a way that it disables the React Act environment while it's running (in the `getConfig().asyncWrapper` function). Then all the updates are not controlled by `act()`, but happen \"naturally\", using the native timers. Typically, in tests, updates would be wrapped in `act()` and timers are never called, but not here -- \"`waitFor` + real timers\" is different.\r\n\r\nThe same issue is in the `scheduleMicrotask` function that uses the fake version of `queueMicrotask`. This is used to schedule updates in `useSyncExternalStore`. This is how I originally discovered this bug: by debugging a custom `useSyncExternalStore`-using hook.\r\n\r\nOne solution would be to always look at the current value of `globalThis.setImmediate` or `globalThis.queueMicrotask`, like:\r\n```js\r\nconst localSetImmediate = typeof setImmediate === 'function' ? (cb) => setImmediate(cb) : /* ... fallbacks */;\r\n```\r\n\r\nI'm linking to a minimalistic GitHub repo that demonstrates the bug.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/jsnajdr/react-timers-bug\r\n","state":"open","updated_at":"2023-01-20T18:32:54Z","created_at":"2022-12-15T15:01:39Z","creator_user_login":"jsnajdr"}
{"number":25886,"title":"Bug: Rendering <Suspense> outside <body> should error","body":"Expected: it should error\r\nActual: it doesn't\r\n\r\nPossibly related: https://github.com/facebook/react/issues/25710#issuecomment-1352456042. In a standalone project, I've only managed to repro `<!--$-->` before doctype, but not between doctype and html as in the repro from that issue. I haven't confirmed that this is the actual cause of #25710, but at the very least we should have errored there as well.","state":"open","updated_at":"2023-08-18T19:55:28Z","created_at":"2022-12-15T02:09:43Z","creator_user_login":"gaearon"}
{"number":25884,"title":"[DevTools Bug] Cannot remove node \"XX\" because no matching node was found in the Store.","body":"### Website or app\n\nhttps://ideaflow.app\n\n### Repro steps\n\nUsing next 12.3 and windows 10 chrome 108.0.5359.99 (Official Build) (64-bit)\r\n- Open the inspector\r\n- Navigate to the components tab. Open it a few times until it displays something. (blank screen issue already logged #22034 )\r\n- eventually it will display the component tree, but after one scroll, it fails with this error:\r\n![image](https://user-images.githubusercontent.com/5444992/207644741-c870e4bd-8514-4f4f-850a-8713217e41e9.png)\r\n\r\nUncaught Error: Cannot remove node \"1946\" because no matching node was found in the Store.\r\nDismiss\r\nThe error was thrown at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27994:43\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25895:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26064:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56299:39)\r\n\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.1-47f63dc54\n\n### Error message (automated)\n\nCannot remove node \"1946\" because no matching node was found in the Store.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27994:43\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25895:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26064:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56299:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-08-17T16:17:39Z","created_at":"2022-12-14T15:57:37Z","creator_user_login":"baptistemanson"}
{"number":25882,"title":"[DevTools Bug]: Labels are cut off on Firefox on Ubuntu 22.04","body":"### Website or app\n\nhttps://github.com/iprotoni/react-skill-assessments\n\n### Repro steps\n\n the key labels on the right hand pane are cut off whenever using React DevTools on Firefox latest version on Ubuntu 22.04\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-12-13T21:44:57Z","created_at":"2022-12-13T21:44:57Z","creator_user_login":"iprotoni"}
{"number":25874,"title":"[DevTools Bug]: Unsupported hook in the react-debug-tools package: Missing method in Dispatcher: origHooks","body":"### Website or app\n\nhttps://ny.tess.no/\n\n### Repro steps\n\nError in _all_ components that use any built in React hook.\r\n![image](https://user-images.githubusercontent.com/5270514/207038916-188aac17-0879-4b2e-b88a-cb649dedbbdf.png)\r\n\r\nIssue is present only when running development build of React.\r\n\r\nReact version `16.12.0`\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-01-11T22:34:01Z","created_at":"2022-12-12T11:58:23Z","creator_user_login":"IvanBuljovcic"}
{"number":25869,"title":"fix: element div is not closed","body":"\r\n## Summary\r\n\r\nFix illegal tag structure in scheduler/index.html\r\n\r\n## How did you test this change?\r\n\r\nDoes not cause changes to the interface and functionality","state":"open","updated_at":"2023-09-01T14:41:37Z","created_at":"2022-12-10T15:26:01Z","creator_user_login":"yucccc"}
{"number":25868,"title":"React Dev Tools not saving settings","body":"My desired settings on react dev tools is not saved. It resets back whenever I refresh the page or re-open chrome dev tools.\r\n\r\nI had even tried reinstalling the React extension (4.27.1 (12/6/2022)\r\n\r\nMy Chrome is up to date (Version 108.0.5359.99)","state":"open","updated_at":"2023-08-30T20:36:54Z","created_at":"2022-12-10T04:49:43Z","creator_user_login":"hseniht"}
{"number":25865,"title":"[Fizz] Readability refactor (follow up to #25437)","body":"## Summary\r\nFollow-up / cleanup PR to https://github.com/facebook/react/pull/25437\r\n\r\n- Split `write[...]Instruction` into two sets of functions, functions writing the inline script format and functions writing the data attribute format. This is only moving code around (no functional changes)\r\n- removed redundant test helper\r\n\r\n## How did you test this change?\r\n- Only ReactDOM www build should be affected (small bundle size change from moving code around)\r\n- `ReactDOMFizzServer-test.js` `ReactDOMFloat-test.js`","state":"open","updated_at":"2023-04-27T10:07:45Z","created_at":"2022-12-09T22:54:51Z","creator_user_login":"mofeiZ"}
{"number":25855,"title":"Special return type for memoized values and functions (TypeScript, Feature Request)","body":"Whenever a non-primitive value is used in a dependency array it should be memoized, it would be lovely to show this requirement for incoming props (e.g. by using a special type/interface).\r\n\r\n```tsx\r\n// pseudo\r\n\r\ninterface IMyProps {\r\n    func: Memoized<function>, // <- to indicate func is used in dependency array\r\n}\r\n\r\nexport default function MyComp(props: IMyProps): JSX.Element {\r\n     const myFunc = useCallback(() => {\r\n         // logic shortened for brevity \r\n         return func();\r\n     }, [func]); // <-- useCallback returns a \"Memoized<function>\"\r\n    \r\n    const [myValue, setMyValue] = useState<string>(); // <-- useState returns a \"Memoized<string>\"\r\n\r\n    return (\r\n         ...\r\n    );\r\n}\r\n```","state":"open","updated_at":"2022-12-08T14:41:22Z","created_at":"2022-12-08T12:43:45Z","creator_user_login":"Mrks83"}
{"number":25844,"title":"Bug: react-hooks/exhaustive-deps does not accept readonly arrays as deps","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n```\r\nreact: 16.8.6\r\neslint-plugin-react-hooks: 4.2.0\r\n```\r\n\r\n## Steps To Reproduce\r\n\r\n1. Properly [configure](https://reactjs.org/docs/hooks-rules.html#eslint-plugin) the `react-hooks/exhaustive-deps` ESLint rule\r\n2. In your code, pass the `deps` argument as read-only array literal:\r\n```typescript\r\nconst useExample = ({ value, callback }: { value: number; callback: (value: number) => void }) => {\r\n    useEffect(\r\n        () => {\r\n            callback(value);\r\n        },\r\n        // In the next line, the const assertion makes the react-hooks/exhaustive-deps rule to emit an error\r\n        [value, callback] as const\r\n    );\r\n};\r\n```\r\n\r\n## The current behavior\r\n\r\nESLint emits an error: `React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies. (react-hooks/exhaustive-deps)`\r\n\r\nAt the same time, `useEffect` hook itself accepts read-only arrays:\r\n```typescript\r\n// node_modules/@types/react/index.d.ts\r\ntype DependencyList = ReadonlyArray<any>;\r\nfunction useEffect(effect: EffectCallback, deps?: DependencyList): void;\r\n```\r\nThe `tsc` with rather strict compilation options success too.\r\n\r\n## The expected behavior\r\n\r\nThe `react-hooks/exhaustive-deps` rule should accept `readonly` array literals as well.\r\n\r\n### Rationale\r\n\r\nA strongly typed `deps` parameter is used in a custom hook for type inference.\r\n\r\n<img width=\"1025\" alt=\"image\" src=\"https://user-images.githubusercontent.com/533183/206208982-d34d909a-8ef3-4892-aa32-892b55b64841.png\">\r\n\r\n\r\n_I'm going to take a look myself once I have a slack time (it should not be complex: something like checking the `isReadonly` flag of the array expression node), but would appreciate any input or contribution._","state":"open","updated_at":"2022-12-07T19:31:53Z","created_at":"2022-12-07T14:53:00Z","creator_user_login":"milichev"}
{"number":25843,"title":"[DevTools Bug]: Electron support broken in 4.27","body":"### Website or app\r\n\r\n[Electron.js](https://electronjs.org)\r\n\r\n### Repro steps\r\n\r\nReact devtools 4.27 no longer works in Electron[1] because `chrome.scripting` isn't implemented, which it started using due to the manifest v3 upgrade: https://github.com/facebook/react/pull/25145\r\n\r\nWhen opening React devtools 4.27 in any Electron project (installed with [`electron-devtools-installer](https://github.com/MarshallOfSound/electron-devtools-installer/) for example) you'll see that the devtools panel is shown but no React components are ever found. Earlier versions worked well with Electron\r\n\r\n[1] https://github.com/electron/electron/issues/36545 and https://github.com/MarshallOfSound/electron-devtools-installer/issues/232\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-08-30T11:33:34Z","created_at":"2022-12-07T13:16:17Z","creator_user_login":"Kilian"}
{"number":25833,"title":"[DevTools Bug] Element \"15\" not found","body":"### Website or app\n\nhttps://github.com/sfmarco/Task.git\n\n### Repro steps\n\nSolo queria ver los estados de mi componente y aparecio el error\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.27.0-bd2ad89a4\n\n### Error message (automated)\n\nElement \"15\" not found\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39558:15\n```\n\n\n### Error component stack (automated)\n\n```text\nat InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40933:3)\r\n    at Suspense\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)\r\n    at div\r\n    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39771:3)\r\n    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42429:3)\r\n    at div\r\n    at div\r\n    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35080:3)\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37705:3)\r\n    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44505:52)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39237:5)\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39439:5)\r\n    at div\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39409:3)\r\n    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44686:3)\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:44115:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31940:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32584:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:39834:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56039:3)\n```\n\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Element  not found in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\r\n\r\nError\n```\n","state":"open","updated_at":"2022-12-08T15:07:39Z","created_at":"2022-12-06T22:06:00Z","creator_user_login":"sfmarco"}
{"number":25814,"title":"Bug: non-Hook startTransition waits for stale work to finish","body":"Not sure if this is a bug, but it breaks my expectations.\r\n\r\nHere's the same example with `useTransition` and `startTransition`.\r\n\r\n- `useTransition`: https://codesandbox.io/s/kgs8wi?file=/App.js\r\n- `startTransition`: https://codesandbox.io/s/delicate-mountain-fr04u3?file=/App.js\r\n\r\nRepro steps:\r\n\r\n1. Click \"Posts\"\r\n2. Immediately click \"Contact\"\r\n\r\nWith `useTransition`, the state change is instant because rendering slow Posts component is abandoned.\r\n\r\nWith `startTransition`, the state change is slow because it waits for the Posts component to finish rendering anyway.","state":"open","updated_at":"2023-04-15T00:00:05Z","created_at":"2022-12-06T00:39:13Z","creator_user_login":"gaearon"}
{"number":25790,"title":"stash the component stack on the thrown value and reuse","body":"ErrorBoundaries are currently not fully composable. The reason is if you decide your boundary cannot handle a particular error and rethrow it to higher boundary the React runtime does not understand that this throw is a forward and it recreates the component stack from the Boundary position. This loses fidelity and is especially bad if the boundary is limited it what it handles and high up in the component tree.\r\n\r\nThe make this more composable React now stashes the component stack on the thrown value at `_componentStack`. This way if anything rethrows a value already caught by React the component stack will be retained. This mirrors what the native `.stack` property does with rethrown errors.\r\n\r\nOne risk here is that people may discover this internal feature and rely upon it. Another option we could take is to follow the lead of `.digest` and embrace the visibility of this property and just make it unprefixed `.componentStack`. With digest we only ever annotate Error objects that get created by React itself but with component stack we would be adding this property to any non-thenable value thrown by user code so this may be slightly more controversial.\r\n\r\nIf we do add componentStack as a direct property to the thrown value we should probably further refactor the APIs around `errorInfo` and just have users read the values off the primary err argument (see `onRecoverableError` for createRoot/hydrateRoot)","state":"open","updated_at":"2022-12-07T01:38:01Z","created_at":"2022-12-02T22:21:21Z","creator_user_login":"gnoff"}
{"number":25786,"title":"Need to add access for Firefox extension debug","body":"The extension \"React Developer Tools\" is not allowed to access moz-extension://793ea44a-383e-454f-b6b2-4184a308909f/newtab.html","state":"open","updated_at":"2022-12-02T12:52:51Z","created_at":"2022-12-02T12:52:51Z","creator_user_login":"leohu1"}
{"number":25772,"title":"Bug: Detached node memory leak when using key and focus contenteditable element","body":"The DOM node stays in memory as a detached node if it has a content editable element inside what is focused using ref and that component is used with key prop in parent. \r\n\r\nReact version: 18.2.0, 17.0.2\r\n\r\n## Steps To Reproduce\r\nAll steps to reproduce are written in `README` file for this [repo](https://github.com/TUTOR03/reactKeyFocusMemoryLeak).\r\nAlso there is a source code to reproduce the bug.\r\n\r\n## The current behavior\r\nThe DOM node stays in memory as a detached node and can not be collected with garbage collector.\r\n\r\n## The expected behavior\r\nThe DOM node doesn't stay in memory as a detached node.\r\n","state":"open","updated_at":"2022-12-01T19:33:48Z","created_at":"2022-12-01T19:33:48Z","creator_user_login":"TUTOR03"}
{"number":25763,"title":"Initial implementation of the Tracing Hooks API","body":"# Initial implementation of the Tracing Hooks API\r\n\r\n## Summary\r\n\r\nThis PR creates a new API to inject hooks in React to log low-level events into application/system tracing tools in different platforms.\r\n\r\n***Note**: the implementation of this version of the API was relatively simple, so I thought it would be clearer if I shared this proposal together with a potential implementation.*\r\n\r\n### Motivation\r\n\r\nMany of the platforms that React targets provide tooling for application or system-wide tracing, like Perfetto/Systrace on Android, OSSignposter/Instruments on iOS and the User Timing API on Web. These tools provide very detailed information about what different sub-systems are doing, which is very useful to analyze, monitor, test and optimize performance. Unfortunately, we don’t get this level of detail about the JavaScript thread or what React is doing.\r\n\r\nReact DevTools is a good tool for product engineers to analyze the performance of their React applications, but it has certain limitations that can be overcome by other types of tooling:\r\n\r\n1. It’s a UI tool that needs to be used manually (no automation provided).\r\n2. It doesn’t integrate information from other relevant systems/data sources (e.g.: network, CPU usage across threads, etc.).\r\n\r\nThe goal of this API is to provide an extension point in React so infrastructure engineers can build integrations with these tools.\r\n\r\n### Alternatives considered\r\n\r\nThere are currently 2 public APIs for tracing/profiling in React, but they target different use cases and have important limitations for the use cases described in this proposal.\r\n\r\nIn the case of the [**Profiler API (Component)**](https://reactjs.org/docs/profiler.html):\r\n\r\n1. It does not support real time reporting. All the data is collected by React and reported together when the work is complete. This doesn’t integrate well with most tracing systems (except for the User Timing API).\r\n2. It doesn’t provide granular information about the work done at the component level or about the work done for different types of effects. Only timing for a specific subtree.\r\n\r\nIn the case of the new **Transition Tracing API** (which is still work-in-progress):\r\n\r\n1. Like the React Profiler API, it does not report data in real time.\r\n2. It only targets work done in the context of a transition, so we lose coverage for high priority updates and legacy application not using transitions.\r\n3. The timing information it provides is, like in the case of the Profiler API, very high level.\r\n\r\nWe have also tried using the hook provided by React for DevTools (via `__REACT_DEVTOOLS_GLOBAL_HOOK__`), which provides all the features that we need but it’s a private API and also leaks internals from React (e.g.: provides fibers instead of component names). This is an example of that integration: https://gist.github.com/rubennorte/ffd3c301850e6e1746335e550910b851\r\n\r\nThis PR implements an equivalent to that API through a public interface. This integration would be equivalent to the previous one, but using that public API: https://gist.github.com/rubennorte/5d0d687d5fef5e08ee0ae8979e54ad3a\r\n\r\n### Performance/size considerations\r\n\r\nThis API is fully gated behind a build-time flag, so it doesn’t have any impact for the platforms/build flavors where it’s not explicitly enabled.\r\n\r\nWhen enabled, but no used, I expect a negligible overhead in runtime performance and a small impact on bundle size (1-2%). When used, the overhead from React should be negligible so all the overhead will come from the work that the injected hooks do. This API is meant to integrate with existing tracing tools that are already designed to have a very small overhead, so we expect this to continue being the case here.\r\n\r\nFor comparison, we tested the Devtools-based implementation of this feature, which has a significantly higher overhead than this new API, in production with real users, and we observed a very small impact on performance compared to the non-instrumented version.\r\n\r\n### Addressing other potential concerns\r\n\r\n* Doesn’t this expose too many implementation details from React?\r\n    * All the hooks defined in this proposal reference semantics from React that are familiar for all developers (rendering components, suspending/erroring in a component, mounting/unmounting effects/layout effects, committing, etc.) and are very unlikely to change in the foreseeable future.\r\n* Is this going to be hard to maintain?\r\n    * The hooks aligned very well with those in React Devtools so can usually be refactored together. They also signal very specific lifecycle points in React that we probably want to fully understand after refactors all well, so moving the code to the right place is likely going to be easy.\r\n* How are developers going to understand the data that this hook exposes?\r\n    * This is actually a good point, and I think we need better documentation in React in general explaining how these things work in the framework so people can make better decisions for performance. This is already providing value for people and has a small learning curve, so it’s probably worth exploring this independently of whether better documentation about performance in React is available or not.\r\n* I think this might make sense for React Native but maybe not for Web.\r\n    * That might be a legit argument and we can test this in React Native first to validate the API before we roll it out in more platforms.\r\n\r\n## How did you test this change?\r\n\r\nWhen we get this PR in a “mergable” state, I’ll add exhaustive unit tests for the new features.\r\n\r\nAt Meta, we’ve been using the DevTools-based implementation (https://gist.github.com/rubennorte/ffd3c301850e6e1746335e550910b851) for some time and has been extremely useful to analyze performance in React Native, especially for the optimization of complex products with very ambitious performance goals and the rollout of new features like Concurrent Root and pre-rendering.\r\n\r\nThis is an example of how that integration looks like:\r\n\r\n<img width=\"1935\" alt=\"Screen Shot 2022-12-09 at 17 16 17\" src=\"https://user-images.githubusercontent.com/117921/206763629-97be1e0b-50e4-4b31-9bee-0015e6e8ae43.png\">\r\n<img width=\"1037\" alt=\"Screen Shot 2022-12-09 at 17 17 23\" src=\"https://user-images.githubusercontent.com/117921/206763637-eb4b3b79-18c1-4070-a4e6-149dafd9ca50.png\">\r\n\r\nAs you can see, we can see what React is doing together with the work that Fabric is doing in the background thread (layout) and in the main thread. This is also a small subset of everything displayed on that trace (like specific events that we can use to align the timeline, screenshots/video, etc.).\r\n\r\nI’ve also tested this implementation, doing a manual sync of the React code to React Native and migrating the Devtools-based implementation to this public API. The results are very similar (with better coverage for component names, as we now use the React version that understand all types of components).\r\n\r\n\r\n","state":"open","updated_at":"2023-03-21T17:37:56Z","created_at":"2022-12-01T11:36:09Z","creator_user_login":"rubennorte"}
{"number":25750,"title":"refactor: tidy up","body":"<!--\n  Thanks for submitting a pull request!\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\n\n  Before submitting a pull request, please make sure the following is done:\n\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\n  2. Run `yarn` in the repository root.\n  3. If you've fixed a bug or added code that should be tested, add tests!\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\n-->\n\n## How did you test this change?\n\n<!--\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\n  How exactly did you verify that your PR solves the issue you wanted to solve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n","state":"open","updated_at":"2022-11-28T10:06:23Z","created_at":"2022-11-28T08:25:32Z","creator_user_login":"Simon-He95"}
{"number":25749,"title":"refactor: tidy up","body":"<!--\n  Thanks for submitting a pull request!\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\n\n  Before submitting a pull request, please make sure the following is done:\n\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\n  2. Run `yarn` in the repository root.\n  3. If you've fixed a bug or added code that should be tested, add tests!\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\n-->\n\n## How did you test this change?\n\n<!--\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\n  How exactly did you verify that your PR solves the issue you wanted to solve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n","state":"open","updated_at":"2022-11-28T10:32:59Z","created_at":"2022-11-28T06:25:03Z","creator_user_login":"Simon-He95"}
{"number":25745,"title":"useEffect alternative which has same effect of listing all dependencies","body":"```typescript\r\nuseEffect(()=>{\r\n    // Some code that uses dep1, dep2, dep3, dep4, dep5\r\n}, [dep1, dep2, dep3, dep4, dep5])\r\n```\r\n```typescript\r\nuseReactiveEffect(()=>{\r\n    // Some code that uses dep1, dep2, dep3, dep4, dep5\r\n    // This runs when either of dependencies used in this function changes, we don't need to explicitly list the dependencies\r\n})\r\n```\r\nBasically we want dependency tracking to be automatic, so there's no dependency array like in useEffect.\r\n\r\nI keep telling people at my company, please list all the dependencies used in useEffect in dependencies array, and follow es lint exhaustive deps rule, resolve situations where useEffect runs undesirably by\r\n\r\nwrapping objects in useMemo, functions in useCallback and useRef if a variable is used inside useEffect without needing to run the effect if it changes\r\n\r\nbut nobody follows it, and it often leads to bugs in the application which slows down the development speed.\r\n\r\n\r\nHaving useReactiveEffect, and it being promoted to be used most of the times, my headache will be reduced.","state":"open","updated_at":"2022-12-03T09:26:41Z","created_at":"2022-11-25T18:52:28Z","creator_user_login":"rgsk"}
{"number":25742,"title":"Add Async Stack Tagging API support","body":"Chrome recently shipped Async Stack Tagging API that can significantly improve the debug stack.\r\n\r\nAngular is already using it. See https://developer.chrome.com/blog/devtools-better-angular-debugging/#the-async-stack-tagging-api\r\n\r\n![image](https://user-images.githubusercontent.com/5390719/203987734-1a614251-9a9a-4330-98cd-bca9ea524fba.png)\r\n\r\nSince React is using time slicing to split the task, it is not convenient to debug why the update is triggered. If React supports Async Stack Tagging API, it will be much easier to find out why an update is triggered.","state":"open","updated_at":"2023-06-10T09:17:14Z","created_at":"2022-11-25T12:40:50Z","creator_user_login":"Jack-Works"}
{"number":25738,"title":"Bug: `React.renderToPipeableStream` `bootstrapScripts` does not render `noModule`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nWe've noticed that `React.renderToPipeableStream` does not append a `noModule` to the normal script module when both `bootstrapScripts` and `bootstrapModules` are present. This makes it impossible to not run the same code twice while having both versions (`js` and `mjs`).\r\n\r\nReact version: ^18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nCall the following:\r\n```\r\nReactDOMServer.renderToPipeableStream(container, {\r\n  bootstrapModules: ['app.mjs'],\r\n  bootstrapScripts: ['app.js'],\r\n...\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior (this is rendered)\r\n```\r\n<script src=\"app.js\" async=\"\"></script>\r\n<script type=\"module\" src=\"app.mjs\" async=\"\"></script>\r\n```\r\n\r\n## The expected behavior (the `noModule` is appended)\r\n```\r\n<script noModule src=\"app.js\" async=\"\"></script>\r\n<script type=\"module\" src=\"app.mjs\" async=\"\"></script>\r\n```\r\n","state":"open","updated_at":"2023-05-23T14:10:32Z","created_at":"2022-11-24T18:45:52Z","creator_user_login":"ioanlucut"}
{"number":25734,"title":"Bug: Unexpected automatic batching behavior?","body":"When running a heavy computation between two \"setState\" in a `useEffect`, one being out of a `setTimeout` and the other inside it, React does not re-render twice. \r\n\r\nThis is a problem because it prevents us from showing a \"loading state\" to the user while the heavy computation is running.\r\n\r\nReact version: `18.2.0`\r\n\r\n## Steps To Reproduce\r\n\r\nSee [this](https://codesandbox.io/s/practical-dew-qkfy29?file=/src/App.tsx) sandbox.\r\n\r\n## Main part of the sandbox code\r\n\r\n```ts\r\n  useEffect(() => {\r\n    setData(undefined);\r\n    setTimeout(() => {\r\n      const res = slowFibonacci(counter);\r\n      setData({ res });\r\n    });\r\n  }, [counter]);\r\n```\r\n## The current behavior\r\n\r\nIt changes depending on some things I'm unfortunately not sure about. \r\nSometimes the loading state is correctly showed on mount, sometimes it's on update. \r\nSometimes the loading state displays smoothly, sometimes it seems that it is stuck mid-render (I don't know this for a fact). \r\nAnd finally some other times, the loading state is not displayed at all, and the component is only rendered once the computation is done.\r\n\r\n## The expected behavior\r\n\r\nI'd expect this code to behave as described in [this](https://github.com/reactwg/react-18/discussions/21#discussioncomment-1565892) comment from the _\"Automatic batching for fewer renders in React 18\"_ discussion on the [React 18 repo](https://github.com/reactwg/react-18) of the React Working Group:\r\n\r\n> The updates outside setTimeout will be batched together and updates inside setTimeout will be batched together separately so it will be 2 separate renders.\r\n\r\n\r\nThanks to @gaearon for taking a look at this beforehand and suggesting to submit this issue.","state":"open","updated_at":"2023-02-23T17:02:47Z","created_at":"2022-11-23T20:12:13Z","creator_user_login":"borisghidaglia"}
{"number":25733,"title":"[DevTools Bug]: configure by add webpack entry in document doesn't work","body":"### Website or app\r\n\r\nhttps://github.com/tjx666/awesome-chrome-extension-boilerplate/tree/vue3\r\n\r\n### Repro steps\r\n\r\n![](https://user-images.githubusercontent.com/41773861/203625364-e3865fa3-fc84-4498-bdea-1375d519a78e.png)\r\n\r\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/203153962-4f47996d-be2c-438a-b72f-d8a32cbc198c.png\">\r\n\r\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/203154053-a672c033-5299-449a-a3a9-21d1468b655f.png\">\r\n\r\nrelated https://github.com/facebook/react/issues/24844#issuecomment-1325511675\r\n\r\nI load react-devtools by put in most front of webpack entry: https://github.com/tjx666/awesome-chrome-extension-boilerplate/blob/aad9001069cb19cfc5583615b864740b322b7923/server/utils/entry.ts#L29\r\n\r\n1. git clone https://github.com/tjx666/awesome-chrome-extension-boilerplate.git\r\n2. git checkout manifest-v3\r\n3. git reset --hard aad9001069cb19cfc5583615b864740b322b7923\r\n4. pnpm install\r\n5. run pnpm devtools\r\n6. chrome open chrome://extensions/\r\n7. enable chrome extension develop mode\r\n8. load unpack extension folder under project root\r\n9. open options page of this extension\r\n10. then you will see the error in above screenshot.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n```\"react-devtools\": \"4.26.1\"```\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2022-11-23T19:45:34Z","created_at":"2022-11-23T19:42:45Z","creator_user_login":"tjx666"}
{"number":25726,"title":"Bug: Input of type radio component can't be controlled with an internal state","body":"I've seen this approach to make a controlled radio input:\r\n\r\n```javascript\r\nfunction SomeForm() {\r\n  const [gender, setGender] = useState('male');\r\n\r\n  const handleChange = (event) => {\r\n    setGender(event.target.value)\r\n  }\r\n  return (\r\n    <form>\r\n        <input type=\"radio\" value=\"male\" checked={gender === 'male'} onChange={handleChange} />\r\n        <input type=\"radio\" value=\"female\" checked={gender === 'female'} onChange={handleChange} />\r\n        <input type=\"radio\" value=\"transgender\" checked={gender === 'transgender'} onChange={handleChange} />\r\n    </form>\r\n  )\r\n}\r\n```\r\nbut I need to create a radio component that manages its state internally and independently:\r\n\r\n```javascript\r\nfunction Radio({ id, name, value }) {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  const handleChange = useCallback((event) => {\r\n    setIsChecked(event.target.checked);\r\n  }, []);\r\n\r\n  return (\r\n    <input\r\n      type=\"radio\"\r\n      name={name}\r\n      value={value}\r\n      id={id}\r\n      autoComplete=\"off\"\r\n      checked={isChecked}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n}\r\n```\r\nbut the components get out of sync after a few clicks:\r\n\r\n[behavior](https://user-images.githubusercontent.com/19470034/203246125-f42f4c24-c414-4192-802a-4e38b27e1430.mp4)\r\n\r\nI think the onChange event is not firing correctly in this case and a rerender simply doesn't happen since we don't pass the calculated checked value as a prop.\r\n\r\nalso the checked attribute doesn't update in the DOM and it's problematic since I can't get the checked value and test my component with Testing library. (The main reason is that I can't make a testable radio component without an internal state, it's surely because of my lack of knowledge and any suggestions would be appreciated)\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. click on the first radio input\r\n2. click on the second radio input\r\n3. click on the third radio input\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/nifty-dust-g47gg3?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nradio states gets out of sync\r\n\r\n## The expected behavior\r\n\r\nradios should remain controlled","state":"open","updated_at":"2023-03-15T18:06:33Z","created_at":"2022-11-22T07:22:10Z","creator_user_login":"MahdiMajdian"}
{"number":25725,"title":"Bug: Failed to pass tests with latest React experimental builds","body":"React version: `react@18.3.0-next-e1dd0a2f5-20221115`\r\n\r\n## Steps To Reproduce\r\n\r\nIt does not reproduce the behavior in CodeSandbox, so I set up the test environment. You can see this behavior through this.\r\n\r\nLink to code example:\r\nhttps://github.com/manakuro/test-react-experimental\r\n\r\nSteps to reproduce\r\n```\r\n1. yarn\r\n2. yarn test\r\n```\r\n\r\nIt works well on the `react@18.3.0-next-65e32e58b-20221019` like here.\r\nhttps://github.com/manakuro/test-react-experimental/tree/18.3.0-next-65e32e58b-20221019\r\n\r\n\r\n## The current behavior\r\nI'm trying some tests on `react@18.3.0-next-e1dd0a2f5-20221115`,  and I noticed that the test that uses `jest.useFakeTimers` and promise inside custom hooks got stuck in the `flushActQueue` function.\r\n\r\nIt seems like the `performConcurrentWorkOnRoot` got stuck in there and  I changed the `callback(false)` to `callback(true)`, then it worked.\r\nhttps://github.com/facebook/react/pull/25523/files#diff-74fadc1ab3f56ca2a5ae8932ba9876711d5d718c5367ba1cf4faf286c236c353R266\r\n\r\n\r\nhttps://user-images.githubusercontent.com/11571318/202589570-190fb404-aa86-47fb-9198-04869b72e123.mov\r\n\r\n\r\n## The expected behavior\r\nShould pass the tests.\r\n","state":"open","updated_at":"2022-12-08T05:29:38Z","created_at":"2022-11-22T01:59:02Z","creator_user_login":"manakuro"}
{"number":25719,"title":"Adding useEffect in HMR causes \"Expected static flag was missing\"","body":"```\r\nWarning: Internal React error: Expected static flag was missing. Please notify the React team.\r\n```\r\n\r\nhttps://twitter.com/dan_abramov/status/1593609862830759936\r\n\r\nThis was also repro:ed in Next.js by @sokra:\r\n\r\n![image](https://user-images.githubusercontent.com/63648/203103593-3136632a-b226-4acb-9d93-09b809ada779.png)\r\n","state":"open","updated_at":"2022-11-21T16:44:41Z","created_at":"2022-11-21T16:13:39Z","creator_user_login":"sebmarkbage"}
{"number":25715,"title":"chore: add cache for eslint","body":"Store the info about processed files in order to only operate on the changed ones. The cache is stored in .eslintcache by default. Enabling this option can dramatically improve ESLint’s running time by ensuring that only changed files are linted.\r\n\r\n**eslint cache can greatly reduce CI times**","state":"open","updated_at":"2022-11-20T11:49:10Z","created_at":"2022-11-20T11:42:10Z","creator_user_login":"c0dedance"}
{"number":25714,"title":"Bug: New input is not emptied after condition changes","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/great-franklin-0c08dm?file=/src/App.js\r\n2. Enter any value in the textbox and press \"Next\"\r\n3. On the second page, you will see that the value entered is retained even though it's a new totally different textbox (they have different ids and different props.\r\n\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/great-franklin-0c08dm?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe second input retains the value from the first input.\r\n\r\n## The expected behavior\r\nThe second input's value should be reset and display the placeholder text.\r\n","state":"open","updated_at":"2022-11-22T05:10:58Z","created_at":"2022-11-19T22:41:23Z","creator_user_login":"nubpro"}
{"number":25710,"title":"Bug: Streamed hydration hangs when consecutive Suspense boundaries suspend during streaming","body":"When streaming from the server, I've encountered a bug where client-side hydration with `hydrateRoot()` will seemingly \"pause\" and never complete, leaving html tags with `hidden` and `id` attributes hanging around. Any user events cause [this error](https://github.com/facebook/react/issues/24959#issuecomment-1317309116) to show, likely because the app still thinks it's in the middle of hydrating. Interestingly enough, if you switch the promise timeouts in `routeConfig` so that `post` resolves earlier than `posts`, then you will not have this issue. So to summarize for this example: if only one boundary suspends, all is well, but if two boundaries suspend, we see this bug.\r\n\r\nHoping this is something stupid on my part, but stuck nonetheless.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Load the example at https://stackblitz.com/github/tanstack/router/tree/beta/examples/react/basic-ssr?file=src%2FApp.tsx\r\n2. Paste `/posts/1` into the preview URL to trigger a server-side load of that full URL\r\n3. Inspect the dom\r\n\r\nLink to code example:\r\n\r\nhttps://stackblitz.com/github/tanstack/router/tree/beta/examples/react/basic-ssr?file=src%2FApp.tsx\r\n\r\n## The current behavior\r\n\r\nThe markup is not visible (some of it is hidden)\r\n\r\n## The expected behavior\r\n\r\nAll of the markup should be visible\r\n","state":"open","updated_at":"2023-07-20T01:15:34Z","created_at":"2022-11-18T22:34:58Z","creator_user_login":"tannerlinsley"}
{"number":25707,"title":"[www] disable disableInputAttributeSyncing variant","body":"Nobody is currently working on rolling out this feature flag. Disable it for now.","state":"open","updated_at":"2022-11-29T17:30:12Z","created_at":"2022-11-18T16:33:30Z","creator_user_login":"kassens"}
{"number":25706,"title":"Fixes #11369 adds support for valueAsDate attribute to input type='date' elements","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n`valueAsDate` is an attribute unique to `<input type=\"date\">` that allows one to set the value of the input to a `Date` object and have the input interpret that value instead of trying to convert the date object to a localized string and risking converting improperly when passing dates to `value`.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nThis was tested manually only so far. This is my first attempt to create a PR for mainline React. Of course I should add unit tests but still learning how to do so. This could be considered at the time of this writing a first draft.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-11-18T15:41:37Z","created_at":"2022-11-18T15:41:37Z","creator_user_login":"wraybowling"}
{"number":25704,"title":"[Proposal] Add component properties like children","body":"I propose to add support to custom child properties. This expand the options to create and organize the components and can reduce the amount of components in some cases.\r\n\r\n**Current Behavior**\r\n\r\n```jsx\r\nconst MyComponent = (props) => {\r\n  const { header, body, footer } = props\r\n  return (\r\n    <div>\r\n      <div>{header}</div>\r\n      <div>{body}</div>\r\n      <div>{footer}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Page = () =>\r\n  <MyComponent\r\n    header={\r\n      <div>\r\n        <Brand>My Brand</Brand>\r\n        <Menu>\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n          <MenuItem>Item 4</MenuItem>\r\n        </Menu>\r\n        <UserName>Codeco</UserName>\r\n        <SignOutButton />\r\n      <div>\r\n    }\r\n    body={\r\n      <div>\r\n        <p>My content 1</p>\r\n        <p>My content 2</p>\r\n        <p>My content 3</p>\r\n        <p>My content 4</p>\r\n        <p>My content 5</p>\r\n        <p>My content 6</p>\r\n        <p>My content 7</p>\r\n        <p>My content 8</p>\r\n        <p>My content 9</p>\r\n      </div>\r\n    }\r\n    footer={\r\n      <div>\r\n        <b>codeco</b>\r\n        <b>proposal</b>\r\n        <b>2022</b>\r\n      </div>\r\n    }\r\n  />\r\n```\r\n\r\n**Desired Behavior**\r\n\r\n```jsx\r\nconst MyComponent = (props) => {\r\n  const { header, body, footer } = props\r\n  return (\r\n    <div>\r\n      <div>{header}</div>\r\n      <div>{body}</div>\r\n      <div>{footer}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Page = () =>\r\n  <MyComponent>\r\n    <MyComponent.header>\r\n      <div>\r\n        <Brand>My Brand</Brand>\r\n        <Menu>\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n          <MenuItem>Item 4</MenuItem>\r\n        </Menu>\r\n        <UserName>Codeco</UserName>\r\n        <SignOutButton />\r\n      <div>\r\n    </MyComponent.header>\r\n    <MyComponent.body>\r\n      <div>\r\n        <p>My content 1</p>\r\n        <p>My content 2</p>\r\n        <p>My content 3</p>\r\n        <p>My content 4</p>\r\n        <p>My content 5</p>\r\n        <p>My content 6</p>\r\n        <p>My content 7</p>\r\n        <p>My content 8</p>\r\n        <p>My content 9</p>\r\n      </div>\r\n    </MyComponent.body>\r\n    <MyComponent.footer>\r\n      <div>\r\n        <b>codeco</b>\r\n        <b>proposal</b>\r\n        <b>2022</b>\r\n      </div>\r\n    </MyComponent.footer>\r\n  </MyComponent>\r\n```\r\n\r\nThis example above expand the options to create and organize the components.\r\n\r\nTo use a real case...\r\n\r\nSome developers make their codes like this:\r\n\r\n```jsx\r\n<Card variant=\"outlined\">\r\n  <CardContent>\r\n    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n      Word of the Day\r\n    </Typography>\r\n    <Typography variant=\"h5\" component=\"div\">\r\n      be{bull}nev{bull}o{bull}lent\r\n    </Typography>\r\n    <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n      adjective\r\n    </Typography>\r\n    <Typography variant=\"body2\">\r\n      well meaning and kindly.\r\n      <br />\r\n      {'\"a benevolent smile\"'}\r\n    </Typography>\r\n  </CardContent>\r\n  <CardActions>\r\n    <Button size=\"small\">Learn More</Button>\r\n  </CardActions>\r\n</Card>\r\n```\r\n\r\n... creating two components (CardContent and CardActions) to direct the content...\r\n\r\n(this example was copied from https://mui.com/pt/material-ui/react-card/#OutlinedCard.tsx and changed to simplify)\r\n\r\n... but imagine doing something like this:\r\n\r\n```jsx\r\n<Card variant=\"outlined\">\r\n  <Card.Content>\r\n    <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n      Word of the Day\r\n    </Typography>\r\n    <Typography variant=\"h5\" component=\"div\">\r\n      be{bull}nev{bull}o{bull}lent\r\n    </Typography>\r\n    <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n      adjective\r\n    </Typography>\r\n    <Typography variant=\"body2\">\r\n      well meaning and kindly.\r\n      <br />\r\n      {'\"a benevolent smile\"'}\r\n    </Typography>\r\n  </Card.Content>\r\n  <Card.Actions>\r\n    <Button size=\"small\">Learn More</Button>\r\n  </Card.Actions>\r\n</Card>\r\n```\r\n\r\neliminating the need to create more components, reducing the amount of components on the page.\r\n\r\nSo, adding support to use the components properties, like header; body and footer from MyComponent in my example, as a children make possible this behaviors.\r\n\r\nmake sense?","state":"open","updated_at":"2023-01-17T21:29:05Z","created_at":"2022-11-18T06:28:50Z","creator_user_login":"adrielcodeco"}
{"number":25703,"title":"[Fizz] implement `renderIntoContainer`","body":"Implements `renderIntoContainer` and `renderIntoContainerAsPipeableStream`\r\n\r\nStreaming rendering similar to `renderToReadableStream` and `renderToPipeableStream` but will hoist root most content into a container element in the DOM. This is useful for people who want to take advantage of React's streaming rendering but have an existing system which produces the \"Shell\" of the app.\r\n\r\n```html\r\n// in your html\r\n<html>\r\n  <body>\r\n    <div id=\"someId\">\r\n    </div>\r\n  </body>\r\n</html>\r\n// React content will stream in here\r\n```\r\n\r\n```js\r\n// in your server\r\nimport { renderIntoContainer } from 'react-dom/server'\r\n\r\nconst stream = renderIntoContainer(<div>hello world</div>, \"someId\");\r\n// stream this output after sending the html shell above\r\n```\r\nThis will produce\r\n```html\r\n// in your html\r\n<html>\r\n  <body>\r\n    <div id=\"someId\">\r\n      <div>hello world</div>\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThese new methods don't have a Shell. Instead the topmost children are treated like they are wrapped in a Suspense boundary. the content will be inserted into the container on the client when there are no more pending tasks for this Root Boundary. Stylesheets get emitted as part of the boundary completion just like normal Suspsense boundaries. Other resources will get streamed in as early as possible but not relocated so if you use preloads or prinits of scripts they will likely show up in the body and stay there.\r\n\r\nCertain options don't make sense for these methods. There is no `onShellReady` or `onShellError` because there is no shell.\r\nIn the ReadableStream case you get your stream synchronously rather than having to wait for a promsie to resolve when the shell is ready.","state":"open","updated_at":"2023-04-19T15:40:28Z","created_at":"2022-11-18T04:21:08Z","creator_user_login":"gnoff"}
{"number":25690,"title":"Bug: Fetch | `Response` hangs with large responses due to usage of `Response.clone()` in `cachedFetch`","body":"Looks like this is a known [limitation](https://github.com/node-fetch/node-fetch#custom-highwatermark) in `node-fetch` where large responses hang when [cloned](https://github.com/facebook/react/blob/c54e3541b2fb6251bd7cd399e77037220b47de2e/packages/react/src/ReactFetch.js#L117).\r\nReact version: 18.3.0-next-4bd245e9e-20221104\r\n\r\n## Steps To Reproduce\r\n\r\n1. Try with a large response\r\n\r\nCode example:\r\n\r\n```ts\r\nconst response = await fetch(\"https://www.example.com/some-large-response\");\r\nif (response.ok) {\r\n  const data = await response.text();\r\n}\r\n\r\n```\r\n\r\n## The current behavior\r\nHanges with Response.text() in the above example\r\n\r\n## The expected behavior\r\nShouldn't hang","state":"open","updated_at":"2022-11-16T00:59:02Z","created_at":"2022-11-16T00:35:16Z","creator_user_login":"alizeait"}
{"number":25687,"title":"Support All of Structure Clone in RSC Serialization","body":"The React Server Components payload is a custom protocol that extends what is serializable beyond just JSON. Beyond just JSON we also support all React primitives (React.lazy, ReactNode) and global named symbols (Symbol.for). We also already have plan to expand this support with these as well:\r\n\r\n- [x] Promises\r\n- [ ] Typed Arrays / DataView\r\n- [x] BigInt\r\n- [x] undefined, Infinity, NaN, -0\r\n\r\nWe don't have plans to make this algorithm pluggable from the outside because we're concerned about the complexity this puts on the ecosystem and that components won't be reusable in different contexts where they're not configured or configurations are conflicting.\r\n\r\nHowever, it might make sense to expand support to the types supported by the [Structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) which is already standardized and specified.\r\n\r\n- [ ] Cyclic references: We already support references in the protocol. This is mostly just an implementation detail for the perf cost whether something should be inlined as JSON or defined as a separate row.\r\n- [ ] ArrayBuffer: For Typed Arrays we might stick to using the underlying buffer coming from the stream instead of cloning the data. All values are considered immutable anyway. For ArrayBuffers we can't use that trick though so it would require a new clone of the data which might be a bit of a foot gun when switching between buffers and typed arrays.\r\n- [ ] Error objects: We already support thrown errors and we could support more errors in the encoding. However, we intentionally don't pass them through with all information. We cover them up with digests since the error message and stack can sometimes include sensitive information that only the server should have access to. We would likely have to do the same here.\r\n- [ ] Boolean/String objects: We don't currently support the object wrappers around primitives e.g. `new String()`. You're not really supposed to use these in modern JS so it's kind of annoying to have to add extra code to handle this case.\r\n- [ ] RegExp: These are pretty straightforward but can possibly have security implications.\r\n- [x] Date, Map, Set: These are fairly straightforward to serialize so it's mostly a matter of allowing these as special cases. Why are these special? Because Structured Clone says so.\r\n- [ ] (Temporal: It seems appropriate that this would be added to structured clone but we need to confirm.)\r\n\r\nWe probably won't support Web specific APIs that don't necessarily have an equivalent on the Server or isn't directly transferrable such as if it has handles to local hardware or file system resources. The only one that might be easy to support:\r\n\r\n- [ ] Blob: This would be a wrapper around a ReadableStream with a mime type.\r\n- [ ] (File: This is just a Blob with a modified time and file name. I think we'll likely want to only support Blobs and not Files, meaning that File object would serialize as Blob, so the receiving type has to be Blob. Because file names and modified times could have security implications and it's too easy to accidentally leak this data.)","state":"open","updated_at":"2023-06-13T17:59:19Z","created_at":"2022-11-15T18:20:56Z","creator_user_login":"sebmarkbage"}
{"number":25684,"title":"Bug: ","body":"Strange and inconsistent behaviour of suspense boundary.\r\n\r\nReact version: 18\r\n\r\n## Steps To Reproduce\r\n1. If you run the application you will se a warning **Text content did not match**.\r\n2. Do one of the following things to fix the issue:\r\n     a. Wrap the Components2 in suspense in App.js.\r\n     b. Change the type of DOM node returned by Component2.\r\n     c. Remove the DOM node `<h2>sdfsdf{val}</h2>` in App.js file\r\n\r\n\r\nLink to code example:\r\nhttps://github.com/sachin-hg/react-suspense\r\nBranch Name => suspense\r\n\r\n## The current behavior\r\nSeems like if you throw a promise inside suspense, the suspense boundary is getting resolved with partial tree.\r\n\r\n\r\n## The expected behavior\r\nIf error is thrown inside suspense the whole tree which comes under that suspense boundary, should resolve fully and not in pieces. But some how deleting some html is also fixing this issue, not sure how suspense boundary is behaving. It will be really helpful if someone can explain what exactly is react doing and how it is resolving tree inside suspense boundary.\r\n","state":"open","updated_at":"2022-11-15T15:05:12Z","created_at":"2022-11-15T15:04:08Z","creator_user_login":"sachTyagi"}
{"number":25683,"title":"keep propName decls local in createElement()","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nKeeps `propName` declarations local and strictly scoped to their usage in for loops in `createElement()`.\r\n\r\n## How did you test this change?\r\n\r\n`yarn test`.","state":"open","updated_at":"2022-11-15T07:16:13Z","created_at":"2022-11-15T06:57:21Z","creator_user_login":"dlqqq"}
{"number":25681,"title":"Pr/25638","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-11-15T00:41:15Z","created_at":"2022-11-15T00:41:15Z","creator_user_login":"jackromo888"}
{"number":25677,"title":"Bug: Portals doesn't participate in Suspense","body":"It appears Portals does not participate in suspense. I came over this by accident, and I'm not sure if it's intended behavior or not. I could not find any documentation related to suspense and portals specifically.\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component that can suspend, while also rendering a portal\r\n2. Suspend component\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/youthful-tree-vikl09?file=/src/App.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nPortal content rendered from a suspending component is visible if the component suspends.\r\n\r\n## The expected behavior\r\n\r\nPortal should behave like any other child and not be shown when it's under a suspense that fallbacks.","state":"open","updated_at":"2022-11-14T13:12:47Z","created_at":"2022-11-14T10:31:42Z","creator_user_login":"h3rmanj"}
{"number":25675,"title":"Bug: False positive warning with nested roots: Attempted to synchronously unmount a root while React was already rendering.","body":"we get a warning on (legitimate?) use case, if there is a manually added react root inside another parent root\r\n(for example for part of Backbone view that is inserted into parent react component)\r\non unmount we can see that child root is in commit context, so we cant unmount it\r\n\r\nReact version: 18.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. have nested react roots, child is manually added/removed on parent mount/unmount\r\n2. unmount parent root\r\n\r\nI have 2 way bindings for backbone.marionette and react\r\n* reactToMarionette\r\n* useMarionetteInReact hook\r\nwhen root/parent component gets rendered/destroyed React gives this warning\r\n\r\n```\r\nWarning: Attempted to synchronously unmount a root while React was already rendering.\r\nReact cannot finish unmounting the root until the current render has completed,\r\nwhich may lead to a race condition.\r\n```\r\nI am looking for ways to fix this warning\r\n\r\nI think ReactChild node is somehow marked as `toBeRendered` at the app render, even though I would expect that app.root would not know about nested/inserted MView react root\r\n\r\nLink to code example: https://codesandbox.io/s/my-test-adapters-forked-tdbgdb\r\n\r\n<details><summary>problematic code </summary>\r\n\r\n```jsx\r\nimport { View } from \"backbone.marionette\";\r\nimport React, { useCallback, useRef, useState } from \"react\";\r\n\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nexport function App() {\r\n  // create a reason to render inner component\r\n  const [isVisible, setVisible] = useState(true);\r\n  const toggle = useCallback(() => setVisible((i) => !i), []);\r\n\r\n  console.log(\"render app\", isVisible);\r\n  return (\r\n    <>\r\n      <button onClick={toggle}>{`toggle: ${isVisible}`}</button>\r\n      {isVisible ? <SomeComponent /> : null}\r\n    </>\r\n  );\r\n}\r\n\r\n// component that children are controlled from outside (by marionette)\r\nconst SomeComponent = () => {\r\n  console.log(\"render SomeComponent\");\r\n  const ref = useMarionetteInReact();\r\n  return <div ref={ref} className=\"stable-react-div\"></div>;\r\n};\r\n\r\n// hook, for rendering marionette view\r\nconst useMarionetteInReact = () => {\r\n  const viewRef = useRef(null);\r\n\r\n  const divRef = useCallback((el) => {\r\n    if (el === null) {\r\n      console.log(\"MView destroy in useCallback\", viewRef.current);\r\n      viewRef.current && viewRef.current.destroy();\r\n    } else {\r\n      console.log(\"created MView\");\r\n      const MView = new reactToMarionette({\r\n        className: \"reactToMarionette\",\r\n        template: false,\r\n        component: <ReactChild />\r\n      });\r\n      viewRef.current = MView;\r\n      MView.render();\r\n      el.appendChild(MView.el);\r\n    }\r\n  }, []);\r\n\r\n  return divRef;\r\n};\r\n\r\nclass reactToMarionette extends View {\r\n  constructor(options) {\r\n    super(options);\r\n    this.component = options.component;\r\n    this.el.textContent = \"I am Marionette\";\r\n\r\n    console.log(\"create root\", this.el);\r\n    this.divEl = document.createElement(\"div\");\r\n    this.divEl.classList.add(\"portal-root\");\r\n    this.root = createRoot(this.divEl);\r\n    this.el.append(this.divEl);\r\n  }\r\n\r\n  render() {\r\n    console.log(\"MView render\");\r\n    this.root.render(this.component);\r\n  }\r\n\r\n  onBeforeDestroy() {\r\n    console.log(\"onBeforeDestroy\", this.root);\r\n    if (this.root) {\r\n      // setTimeout(() => this.root.unmount());\r\n      this.root.unmount();\r\n    }\r\n  }\r\n}\r\n\r\nconst ReactChild = () => {\r\n  console.log(\"render ReactChild\");\r\n  return <div> Hello, I am react child </div>;\r\n};\r\n\r\n```\r\n</details>\r\n\r\n## The current behavior\r\nwarning is displayed\r\n\r\n## The expected behavior\r\nno warning ?\r\n","state":"open","updated_at":"2023-04-21T19:54:35Z","created_at":"2022-11-14T09:17:39Z","creator_user_login":"aovchinn"}
{"number":25669,"title":"Bug: Allow suppressing warning message \"Warning: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop.\"","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Pass `key` property to a component.\r\n2. Use JS logger (or simply console log) that deeply serializes to JSON.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/intelligent-moon-17p3rq?file=/src/App.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nShows following warning:\r\n\r\n```\r\nWarning: ListItem: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\r\n```\r\n\r\n## The expected behavior\r\nSome JS logging frameworks are trying to serialize the entire object so they don't know if they should access the `key` property, for example:\r\n\r\n`Logger.log(props);`\r\n\r\nIn this case, we get an error message because it tries to reach the `key` property internally. Having an option to suppress this message allows us to optionally enable/disable it. Actually, accessing any object's property (unless private thus you cannot access anyways) should not generate a runtime warning/error.\r\n","state":"open","updated_at":"2022-11-12T12:32:14Z","created_at":"2022-11-11T23:24:22Z","creator_user_login":"reyou"}
{"number":25668,"title":" throwing Promise.resolve cause unmount, remount. but Promise.reject doesn't?","body":"Hi,   I'm not sure it's bug or intended,\r\n\r\nI want to deep dive how/when Suspense works as intended for rendering pattern aka `fetch as you render`. \r\n\r\n\r\nas I working with some codes,   I found three  different component responses in below states\r\nthrowing Promise pending - unmount , remount\r\nthrowing Promise fulfilled - unmount, remount \r\nthrowing Promise reject - doesn't unmount, remount.\r\nthrowing otherwise - cause Errorboundary work.\r\n\r\nwhy throwing Promise pending , fulfilled cause rerender? \r\nAnd why Promise.reject doesn't?\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-11-11T17:32:07Z","created_at":"2022-11-11T14:36:22Z","creator_user_login":"dante01yoon"}
{"number":25664,"title":"Bug: ReactDOM incorrect check window.event (check undefined, but maybe null)","body":"In react-dom.js `window.event` compares with `undefined`, but in IE 10 `window.event` by default is `null`. Possibly in other browsers too.\r\n\r\n```\r\nfunction getCurrentEventPriority() {\r\n    var currentEvent = window.event;\r\n    if (currentEvent === undefined) {\r\n      return DefaultEventPriority;\r\n    }\r\n    return getEventPriority(currentEvent.type);\r\n}\r\n```\r\n\r\n**Because of this issue, rendering in React versions > 18 is completely broken. (where used `createRoot`)**\r\n\r\n**This problem is not solved by polyfills. This is not a question or a request for advice. This is a bug.**\r\n\r\nTemporary solution for those who support older browsers. This is a `webpack` replacement in the last chunk of the wrong check with this:\r\n`(currentEvent === undefined || currentEvent === null)`\r\n\r\nThis has already been posted but no response https://github.com/facebook/react/issues/24778","state":"open","updated_at":"2022-11-11T06:30:43Z","created_at":"2022-11-11T06:30:43Z","creator_user_login":"gorinov"}
{"number":25658,"title":"Bug: memory leak on props when parent doesn't change, but child using props changes (in the same jsx)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.8 to 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. pass a prop that has a big memory footprint to an element A\r\n2. A has a parent in the same jsx that doesn't change and doesn't use anything (e.g. a plain div)\r\n3. react renders A with the big prop BIG1\r\n4. change the bigprop and rerender\r\n5. react renders A with the big prop BIG2.\r\n6. A doesn't have a reference to BIG1 anymore. But the dom element of the parent of A that was rendered at step3 (which does have a reference to big1 through parentDomElement.reactPropsXXXXXX.children.A.props.big1) is reconciled (because the parent doesn't change) and reused as is, which prevents garbage collecting of big1. Nothing uses big1.\r\n\r\nIn my experience, this can happen in quite a lot of ways in practice. It does require one dom element (the parent) per leaked prop, but this is so pervasive that these elements may exist in a lot of places throughout the app, holding references to props at the instant of their render. The more instants at which different parts of the app are rendered, the more memory can be leaked. And if the app renders some kind of dynamic list that grows, then there is a practically unlimited supply of parent elements to hold old unused references. \r\n\r\nIt's also something that is very easy to introduce as a regression by simply starting to use a big variable in a closure (not even related to anything react, for example just mapping over an array), because it is then added to the context of all closures in this render function, some of which may be passed to react components as props.\r\n\r\nOf course this happens all the time in a normal react app for all the props (increasing memory usage by (guessing) 10x or 20x), but this is not really a problem for most people where the whole app state described by all the props is probably less than 100kb (the app then uses megabytes of memory, which is fine by modern standards). Or for apps that naturally unmount the whole dom frequently, which does allow garbage collecting these old unused propos.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nthis one is a \"normal code\" that has more chances of happening in practice (uses a closure that capture the big value as the prop leaking memory)\r\nhttps://0xhtw5.csb.app/ (code: https://codesandbox.io/s/react-memory-leak-0xhtw5)\r\n\r\nthis one is a more artificial repro which is arguably more understandable:\r\nhttps://1pw8bf.csb.app/ (code: https://codesandbox.io/s/react-memory-leak-plain-1pw8bf)\r\n\r\n\r\n## The current behavior\r\nAny prop (and when passing closures as props, any variable of a render function used in at least one closure) may be retained by dom elements that are parents of elements that use these props in the same jsx, when the parent doesn't change at the same time as the child.\r\n\r\n## The expected behavior\r\nIdeally, props of children should not be retained by dom elements of parents that don't even use them. If this is an inherent limitation of the react model, then maybe document it a lot with big warnings ? Add tools to detect it automatically ? Describe recommended code structure and pattern to avoid this problem ? Not sure..\r\n\r\nThanks in advance !","state":"open","updated_at":"2022-11-10T08:20:40Z","created_at":"2022-11-10T08:19:59Z","creator_user_login":"jonenst"}
{"number":25656,"title":"Bug: Rules of hooks does not check children function of component rendered within a Class Component","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a class component\r\n2. In the render function, return a component that expects a function as a child\r\n3. Define the child function in-line, and call a React hook or custom hook within that child. \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/bold-grass-teutjm?file=/src/TestComponent.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThere is no rules-of-hooks violation on this hook usage, even though it clearly violates the rules of hooks.\r\n\r\n## The expected behavior\r\nThe callsite of the hook should be flagged as a violation of the rules of hooks.","state":"open","updated_at":"2022-11-11T06:28:35Z","created_at":"2022-11-09T19:22:28Z","creator_user_login":"dlane-stripe"}
{"number":25655,"title":"Bug: ","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use React Router for Routing\r\n2. Use Firebase Authentication for User Account Management\r\n3. Construct a context with `CreateContext` on ROOT LAYOUT (the React Component I am using as a frame to render child components in different routes) for User Logged In Status\r\n4. Create state with useState hook in the same ROOT LAYOUT as `{loading: true, user: null}` initial value.\r\n5. Use useEffect hook to call `onAuthStateChanged` function from \"firebase/auth\" to call setState for new user state.\r\n6. Pass the user state as context provider's value [`<LoggedInContext.Provider value={userState}`].\r\n7. Subscribe to `LoggedInContext` in 'login', 'logout' and 'register' route using `useContext `hook.\r\n8.  Program /login route as if user is logged in, it will redirect to /profile route which also subscribes to `LoggedInContext` using `useContext` hook.\r\n9. In same /login route, if no user is logged in, it will not redirect and show a login form.\r\n10. When user is logged in [`{loading: false, user: {some user object}`], user can try to reach to the /logout route using browser's address bar.\r\n11. If user is logged out successfully, it will redirect the page to /login route using `<Navigate/>` component from \"react-router-dom\"\r\n12. Instead of showing login form on /login route, the state/context is not changed, user object remains inside the context and thus it is causing a redirect to the /profile route.\r\n13. In the console, Error is logged as: `Warning: React has detected a change in the order of Hooks called by Logout. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n[Bug_Report.zip](https://github.com/facebook/react/files/9973324/Bug_Report.zip)\r\n[localhost-1668013038675.log](https://github.com/facebook/react/files/9973361/localhost-1668013038675.log)\r\n![Web capture_9-11-2022_225813_localhost](https://user-images.githubusercontent.com/39855877/200893223-6895f7a9-36ec-414e-8479-00e796cfd6b1.jpeg)\r\n\r\n## The expected behavior\r\n![Web capture_9-11-2022_225848_localhost](https://user-images.githubusercontent.com/39855877/200893280-1165eb70-c227-486b-a133-6d299d752c9b.jpeg)\r\n","state":"open","updated_at":"2022-11-09T16:59:59Z","created_at":"2022-11-09T16:59:59Z","creator_user_login":"mn-huda"}
{"number":25654,"title":"Bug: <Strict /> cause some unsupport usage flow work on the devlopment mode","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. open code example and see the console\r\n2. when render without `<Strict />`, `useScroll` get the `scrollYProgress` which from full page\r\n3. when render with `<Strict />`, `useScroll` get the `scrollYProgress` which from current parent component\r\n\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/sharp-night-24h5tu?file=/src/App.js](https://codesandbox.io/s/sharp-night-24h5tu?file=/src/App.js)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nbecause of the `<Strict />` mode, cause child component `useLayoutEffect` get parent component `ref` state, and not work the same as prod mode\r\n\r\n## The expected behavior\r\nmaybe `<Strict />` mode should clean `ref` when loop fiber tree ?\r\n\r\n","state":"open","updated_at":"2022-11-11T02:35:55Z","created_at":"2022-11-09T15:18:48Z","creator_user_login":"MrWangJustToDo"}
{"number":25653,"title":"Duplicate setting sibling","body":"During the update of react, the cloneChildFibers function may be used in the beginWork phase. This function will call createWorkInProgress internally to create workInProgress or directly use the workInProgress. During createWorkInProgress, the brotherhood of workInProgress will be assigned, but at the end of cloneChildFibers, the brotherhood property that was set just now will be set to null. What is the reason for this step?","state":"open","updated_at":"2022-11-09T09:12:23Z","created_at":"2022-11-09T08:43:00Z","creator_user_login":"yangjie111"}
{"number":25648,"title":"Bug: Chrome Incognito Mode is not sending custom request header along with the request.","body":"<!--\r\n  If I send custom  request header in React application, the normal staging site includes the header for every request. But If I open incognito mode in chrome and visit the same staging site, then the custom request header is not sent with every request.\r\n Website example:   jaunt.ixorasolution.com\r\n-->\r\n\r\nReact version:\r\n\"react\": \"^17.0.2\",\r\n\r\n## Steps To Reproduce\r\n\r\n1. Visit this example staging application:` jaunt.ixorasolution.com`  using chrome and inspect the network request.\r\n2.  Inspect this request : `vehicle-types/`\r\n3. The request header would look something like this:\r\n`GET /v1/api/public/vehicle-types/ HTTP/1.1\r\nAccept: application/json, text/plain, */*\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nAuthorization: Bearer xxxxx..................\r\nConnection: keep-alive\r\nHost: jaunt.ixorasolution.com:2007\r\nOrigin: http://jaunt.ixorasolution.com\r\nReferer: http://jaunt.ixorasolution.com/\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\r\nX-Timezone: Asia/Dhaka\r\n`\r\n\r\nHere 'X-Timezone' is added with the request.\r\n\r\n\r\n\r\n## The current behavior\r\n\r\nif I visit the same page using Chrome incognito and inspect the same network request. Then I don't find  'X-Timezone' inside the network request header.\r\n\r\n\r\n## The expected behavior\r\n\r\nif I visit the same page using Chrome incognito and inspect the same network request. Then I should find  'X-Timezone' inside the network request header.\r\n","state":"open","updated_at":"2022-11-12T09:56:45Z","created_at":"2022-11-08T06:36:02Z","creator_user_login":"MuhtasimMusfiqZarab"}
{"number":25646,"title":"Bug: Compatibility between ReactServerDOMReader and ReactDOMServer","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 0.0.0-experimental-6883d7944-20221101\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render a server component with `ReactServerDOMWriter.renderToPipeableStream` (with `react-server-dom-webpack/node-register` codemod)\r\n2. Using `ReactDOMServer.renderToPipeableStream`, render a client component that uses `ReactServerDOMReader.createFromReadableStream` (without codemod) to process the server component \r\n  (note that we can't load the codemod at this point as we need to render client components)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/penx/server-components-ssr\r\n\r\nNote that in this example, I have a set `globalThis.__webpack_require__` in `src/api.server.js` in order provide a basic mock, this seems to work but I doubt is the intended usage of this library.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReferenceError: __webpack_chunk_load__ is not defined\r\n\r\n```console\r\nReferenceError: __webpack_chunk_load__ is not defined\r\n    at preloadModule (/server-components-demo/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.development.js:76:22)\r\n    at resolveModule (/server-components-demo/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.development.js:643:17)\r\n    at processFullRow (/server-components-demo/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.development.js:728:9)\r\n    at processBinaryChunk (/server-components-demo/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.development.js:782:5)\r\n    at progress (/server-components-demo/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.development.js:835:5)\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n```\r\n\r\nIf we set `globalThis.__webpack_chunk_load__`, we then get a similar error regarding `__webpack_require__`.\r\n\r\nThis is due to\r\n\r\nhttps://github.com/facebook/react/blob/8e2bde6f2751aa6335f3cef488c05c3ea08e074a/packages/react-server-dom-webpack/src/ReactFlightClientWebpackBundlerConfig.js#L75\r\n\r\nand\r\n\r\nhttps://github.com/facebook/react/blob/8e2bde6f2751aa6335f3cef488c05c3ea08e074a/packages/react-server-dom-webpack/src/ReactFlightClientWebpackBundlerConfig.js#L94\r\n\r\n## The expected behavior\r\n\r\nA way to call ReactServerDOMReader.createFromReadableStream that is not dependent on `__webpack_chunk_load__`  and `.__webpack_require__`, or for this error to be silenced if this isn't required on the server.","state":"open","updated_at":"2022-11-08T00:31:05Z","created_at":"2022-11-07T22:45:08Z","creator_user_login":"penx"}
{"number":25643,"title":"Bug: Firefox Android not triggering onSelect in <input> when dragging cursor","body":"React version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the codepen linked below in Firefox on Android ( I suspect it's also a bug in Iphone but cannot confirm)\r\n2. Write some text in the text input\r\n3. Drag the cursor\r\n4. Notice that the event is not triggered when the cursor is dragged\r\n\r\nLink to code example: https://codepen.io/AndreasBBS/pen/ExRgdgN (codesandbox was down at the moment I was testing this)\r\n\r\n## The current behavior\r\nFirefox:\r\n\r\nhttps://user-images.githubusercontent.com/12399440/200215567-0f785f12-017b-41a9-bacf-fce3ffe8e46a.mp4\r\n\r\n## The expected behavior\r\nChrome/Brave:\r\n\r\nhttps://user-images.githubusercontent.com/12399440/200215632-8ded87ff-cda8-44f9-b3f6-c00848425869.mp4\r\n\r\n## Extra Details\r\n\r\nThis seems to have to do with how Firefox implements the `selectionchange` event for inputs. According to this [documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/selectionchange_event), firefox fires the `selectionchange` event on the input node instead of on document. In fact, if you try the little snippet they have in the documentation you'll find that it only works on Firefox and not any other browser.\r\nI'm not sure if other browsers are gonna move in this direction, but if they do, this bug will become more common. Chrome already has a [bug report](https://bugs.chromium.org/p/chromium/issues/detail?id=1327098) and if they 'fix' it, this behavior will also happen there.","state":"open","updated_at":"2022-11-11T19:02:28Z","created_at":"2022-11-07T02:53:02Z","creator_user_login":"AndreasBBS"}
{"number":25642,"title":"Await startTransition","body":"Is there a technical limitation that the startTransition function does not return a Promise, which I could await from an async handler that starts the transition?\r\n\r\nI have a use case where I need to do some preparations before a transition, and clean it up afterwards.\r\nCurrently I assume the way to do this is like:\r\n\r\n```javascript\r\nfunction Component() {\r\n\tlet [isPending, startTransition] = useTransition();\r\n\r\n\tfunction handler() {\r\n\t\t// Preparations before the transition\r\n\r\n\t\tstartTransition(() => {\r\n\t\t\t/* ... */\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isPending === false) {\r\n\t\t\t// Cleanup after the transition\r\n\t\t}\r\n\t}, [isPending]);\r\n}\r\n```\r\n\r\nTo make this work in practice I would also need some ref or state to keep track of things I need to do the cleanup in the effect of the next render. Also if the handler is called before the transition was complete, we would also need to do the cleanup of the previous transition.\r\nSo in practice it would look more like this:\r\n\r\n```javascript\r\nfunction Component() {\r\n\tlet transitionContextRef = useRef();\r\n\tlet [isPending, startTransition] = useTransition();\r\n\r\n\tfunction handler() {\r\n\t\t// Cleanup the previous unfinished transition\r\n\r\n\t\t// Prepare the new transition\r\n\r\n\t\ttransitionContextRef.current = /* Everything we need for cleanup */\r\n\r\n\t\tstartTransition(() => { \r\n\t\t\t/* ... */\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isPending === false) {\r\n\t\t\t// Cleanup after the transition\r\n\t\t}\r\n\t}, [isPending]);\r\n}\r\n```\r\n\r\nIf `startTransition` would return a Promise which I could await this would all turn out to be much simpler:\r\n\r\n```javascript\r\nfunction Component() {\r\n\tasync function handler() {\r\n\t\t// Prepare transition\r\n\r\n\t\tawait startTransition(() => { /* ... */ })\r\n\r\n\t\t// Cleanup after the transition\r\n\t}\r\n}\r\n```\r\n\r\n- the ref would not be needed\r\n- the effect would not be needed\r\n- the previous unfinished transition would not need to be cleaned up in the handler.\r\n- i could use startTransition directly instead of the useTransition hook\r\n- it would save 1 render, as the rerender caused by isPending would not occur.\r\n- the code would be shorter and considerably more readable\r\n\r\nWould it be possible to have `startTransition` return a promise which would resolve when the transition is complete? ","state":"open","updated_at":"2023-03-17T04:51:47Z","created_at":"2022-11-07T00:58:49Z","creator_user_login":"subhero24"}
{"number":25638,"title":"[DevTools] Support for Reload and Profile in React Native","body":"## Summary\r\n\r\n> Temporarily, ignore changes to two files (I will remove them when landing): `ReactDebugHooks.js` and `webpack.backend.js`\r\n\r\n* Support reload and profile in React Native.\r\n* Add fields to `cachedSettings` that allow DevTools to reload the app, setProfilingSettings, and getProfilingSettings\r\n* Add a reloadAndProfile listener which: stores the fact that we're reloading and profiling and reloads the app\r\n* On startup, if we are reloading and profiling, clear the reloading and profiling setting and start profiling.\r\n* In order to actually start profiling, we set a field on an `initialProfileRef` object, because using `sessionStorageSetItem` is apparently not synchronous in React Native.\r\n* The existing logic for determining whether we support reload and profile is a bit low level, so rather than dealing with refactoring that, I added a field `reloadAndProfileOverride` that the devtools backend sets. It would be ideal to refactor the Profiler context + store context + Profiler Store, but that thing is a mess with many sources of truth and I don't want to tackle that now.\r\n\r\n## Known failure\r\n\r\n* Occasionally, if the renderer is not setup correctly (????), one gets a ` ERROR  [Error: Could not find ID for Fiber \"render()\"]` error in Metro. This prevents profiling from starting (or something.)\r\n* It is visible to the user, though, and (usually) restarting the app fixes things.\r\n\r\n## How did you test this change?\r\n\r\n* Manual testing with iOS + flipper/standalone.\r\n* Will manually test with Android before landing, but the React Native changes for Android aren't done yet.","state":"open","updated_at":"2023-04-20T13:29:22Z","created_at":"2022-11-04T19:01:45Z","creator_user_login":"rbalicki2"}
{"number":25637,"title":"Suggestion: Set list for className ","body":"React version: all versions\r\n\r\n# The issue\r\nWe use heavy third party libraries to work with `className`.\r\nThis result in big code and downgrade performance\r\n\r\n## The current behavior\r\n`element.className` allows only a string as value\r\n\r\n## The expected behavior\r\nAccept a list of strings, null, undefined or false\r\n\r\n```ts\r\n<div className={['class1', 'class2 class3', null, undefined, 0, false]} />\r\n// Should result\r\n<div className=\"class1 class2 class3\" />\r\n```\r\nSo we can write code like this:\r\n```ts\r\n<div className= { condition ? 'classIfTrue' : null } />\r\n\r\n<ComponentX className={ ['class1', condition ? 'class2' : 'class3', condition2 && 'class4' ] }\r\n```","state":"open","updated_at":"2022-11-10T11:13:41Z","created_at":"2022-11-04T17:39:15Z","creator_user_login":"rafikalid"}
{"number":25636,"title":"[JSDoc] Misleading JSDoc for `jsxDev` fn in `ReactElement.js` file","body":"## Issue Type:\r\nJSDoc\r\n\r\n## Issue Description:\r\nJSDoc for `jsxDev` fn in `ReactElement.js` file is **misleading**\r\n- `@param {object} props` - param `props` isn't declared/exists in fn signature \r\n\r\nLink: https://github.com/facebook/react/blob/main/packages/react/src/ReactElement.js#L274-L280\r\n\r\nPermalink: https://github.com/facebook/react/blob/4bd245e9ee22458bcd5b68524c47eaaab2cf2058/packages/react/src/ReactElement.js#L274-L280\r\n\r\n## Expected Solution\r\n\r\n- fix the JSDoc for the same by removing `props` word from it\r\n\r\n## Willing to open PR w/ fix?\r\nYes 😃 ","state":"open","updated_at":"2023-01-04T16:53:53Z","created_at":"2022-11-04T15:54:54Z","creator_user_login":"Pranav-yadav"}
{"number":25629,"title":"Bug: Error message \"Uncaught Error: A component suspended while responding to synchronous input.\" may be misleading","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nDo anything that triggers the error:\r\n\r\n> Uncaught Error: A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.\r\n\r\nThis seems to occur when a synchronous input causes a component to suspend, without a suspense boundary defined. \r\n\r\nTo create the specific situation where I saw the error:\r\n\r\n1. Set up react-router with two routes, each containing a component that suspends, using a Relay hook for a graphql query. Do not provide a `Suspend` around either component.\r\n2. Navigate from route A to route B.\r\n3. Refresh the page so the Relay cache is cleared.\r\n4. Use the browser back button to navigate back from B to A, causing the component in A to suspend as it performs the graphql query.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nCan provide if needed, however the issue seems to be that the wording of the error doesn't match the conditions that cause the error to be thrown in React code (see below), so a code example might not be necessary?\r\n\r\n## The current behavior\r\n\r\nThe following error message is displayed:\r\n\r\n> Uncaught Error: A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.\r\n\r\n<img width=\"688\" alt=\"stacktrace\" src=\"https://user-images.githubusercontent.com/6785064/199752401-4926913d-fea6-4e67-b1fb-717030adda61.png\">\r\n\r\nThis implies that the only way to fix the error is to use \"startTransition\". While this did fix my error, looking at the code in question it seems that the more obvious problem is that there was no suspense boundary around the component in question. This problem is also much easier to fix - in my case could add transitions easily for some cases (around `navigateTo` calls to react-router), but catching every way of navigating and adding a transition seems to be quite difficult. I added a `Suspense` around the suspending component, and this resolved the error. Using \"startTransition\" does have extra advantages of allowing the old state of the suspended component to display instead of a fallback, but this seems like it should be more of an \"information\" notice than an error, so I'm assuming it's only the lack of both a suspense boundary *and* a synchronous input that is intended to be flagged as an error?\r\n\r\nLooking at the React code seems to confirm this:\r\n\r\n```js\r\n\r\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\r\n\r\n    if (suspenseBoundary !== null) {\r\n      suspenseBoundary.flags &= ~ForceClientRender;\r\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\r\n      // commits fallbacks synchronously, so there are no pings.\r\n\r\n      if (suspenseBoundary.mode & ConcurrentMode) {\r\n        attachPingListener(root, wakeable, rootRenderLanes);\r\n      }\r\n\r\n      attachRetryListener(suspenseBoundary, root, wakeable);\r\n      return;\r\n    } else {\r\n      // No boundary was found. Unless this is a sync update, this is OK.\r\n      // We can suspend and wait for more data to arrive.\r\n      if (!includesSyncLane(rootRenderLanes)) {\r\n        // This is not a sync update. Suspend. Since we're not activating a\r\n        // Suspense boundary, this will unwind all the way to the root without\r\n        // performing a second pass to render a fallback. (This is arguably how\r\n        // refresh transitions should work, too, since we're not going to commit\r\n        // the fallbacks anyway.)\r\n        //\r\n        // This case also applies to initial hydration.\r\n        attachPingListener(root, wakeable, rootRenderLanes);\r\n        renderDidSuspendDelayIfPossible();\r\n        return;\r\n      } // This is a sync/discrete update. We treat this case like an error\r\n      // because discrete renders are expected to produce a complete tree\r\n      // synchronously to maintain consistency with external state.\r\n\r\n\r\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\r\n      // The error will be caught by the nearest suspense boundary.\r\n\r\n      value = uncaughtSuspenseError;\r\n    }\r\n  } else {\r\n    // This is a regular error, not a Suspense wakeable.\r\n```\r\n\r\nI could be reading this wrongly, but it looks like the error I'm seeing is only raised when there is no boundary found, *and* we have a sync update. If there is a suspense boundary, it looks like the error doesn't apply, and there is a comment specifically covering that if there is no boundary, only sync updates are an error (\"Unless this is a sync update, this is OK.\").\r\n\r\nIn addition, the component does not seem to re-render when data is received, the output remains empty, presumably because this is an unrecoverable error?\r\n\r\n## The expected behavior\r\n\r\nAn error is displayed which covers both options for resolving, e.g.:\r\n\r\n> Uncaught Error: A component suspended while responding to synchronous input, and no suspense boundary was provided. To fix, provide a suspense boundary, or ensure that updates that suspend are wrapped with startTransition, or both. Note that providing a suspense boundary but omitting startTransition will cause the UI to be replaced with a loading indicator.\r\n\r\nThis is a little wordy, so maybe it should be a link to a documentation page instead?\r\n\r\n","state":"open","updated_at":"2023-06-14T07:11:57Z","created_at":"2022-11-03T17:31:10Z","creator_user_login":"bmwebster"}
{"number":25623,"title":"Refactor: replace argument with rest parameter","body":"## Summary\r\nThe createElement function still **use Argument** to get children, which is not recommended, not good-looking, and myabe with performance issues(see https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments) **compared with rest parameter of ES6**.\r\nSo, I just replace Argument with rest parameter.\r\n## How did you test this change?\r\n**Firstly, I checked out the code of two version after build.**\r\n\r\nThe code before changed is:\r\n```\r\nexport function createElement(type, config, children) {\r\n...\r\n  const childrenLength = arguments.length - 2;\r\n  if (childrenLength === 1) {\r\n    props.children = children;\r\n  } else if (childrenLength > 1) {\r\n    const childArray = Array(childrenLength);\r\n    for (let i = 0; i < childrenLength; i++) {\r\n      childArray[i] = arguments[i + 2];\r\n    }\r\n...\r\n```\r\nthe operation of Argument looks complicated, after my changed it will look like this:\r\n```\r\nexport function createElement(type, config, ...children) {\r\n...\r\n  if (children.length === 1) {\r\n    props.children = children[0];\r\n  } else if (children.length > 1) {\r\n    const childArray = [...children];\r\n...\r\n```\r\nwhich will look like this **after run yarn build**:\r\n```\r\nfunction createElement(type, config, children) {\r\n...\r\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    children[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  if (children.length === 1) {\r\n    props.children = children[0];\r\n  } else if (children.length > 1) {\r\n    var childArray = [].concat(children);\r\n...\r\n```\r\nsame effect, but new code is more good-looking and brief.\r\n\r\n**Secondly, I use yarn link to test the change in a new project with create-react-app。**\r\nI delete codes of App.js, and add a explicit jsx creating by react.createElement(since After v17, jsx will not use createElement to babel default):\r\n![微信图片_20221103155412](https://user-images.githubusercontent.com/75530249/199671031-a8f43879-11ba-4879-a652-1096305a6624.png)\r\nit works:\r\n![微信图片_20221103155757](https://user-images.githubusercontent.com/75530249/199671161-73bf3e1f-4786-4515-a62e-0a116de17b91.png)\r\n\r\n","state":"open","updated_at":"2022-11-03T08:10:09Z","created_at":"2022-11-03T08:03:35Z","creator_user_login":"zhangchen21"}
{"number":25619,"title":"support more titles with float","body":"currently in React without float `<title>{\"foo\"}{\"bar\"}</title>` will emit `<title>foo<!-- -->bar</title>` where the comment literal is interpretted as text so it shows up in the browser tab. Additionally the client will fail to hydrate this because it will look for matching text nodes and not find one that matches (there is only a single text node in the title rather than 2)\r\n\r\nTo prevent this from affecting users we added a warning if you render an array of more than one item or render a component as a child of title.\r\n\r\nWith Float, we had to get more restrictive because when title is a Resource we don't render it's children at all and simply extract a suitable string child for the Resource key. In this case the warning got more restrictive and if you end up rendering something more complex than a single string nothing is emitted at all\r\n\r\nUnfortunately it is quite common to want to use jsx in the following form `<title>{username} dashboard</title>` or something similar. While this looks like a template string it is actually encoded as an array of children both of which are strings. It seems like this kind of pattern should be supportable and with Resources we don't actually have to render the children to make sense of this kind of children set.\r\n\r\nThis PR changes the title handling when float is on to attempt to concatenate all children of title as long as they are strings, numbers, or arrays or fragments of valid title children. This means you could in theory support deeply nested array/fragments as long as they all only contain similar structures or strings and numbers.\r\n\r\nIf anything more complex like a Component is found we warn just like before but with a more descriptive error message.","state":"open","updated_at":"2023-01-16T22:46:00Z","created_at":"2022-11-03T00:14:21Z","creator_user_login":"gnoff"}
{"number":25604,"title":"Bug: Code based on React portal example from official React documentation code works on Firefox, but not on Chrome.","body":"Dragging sliders using code based on official React documentation code on Firefox works, but not on Chrome.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n\r\nCopy this code:\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default function App(props: {}) {\r\n\r\n  const [length, setLength] = React.useState(150);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1>Testing</h1>\r\n      <Modal1\r\n        key=\"1\"\r\n      >\r\n        <p>M1S1</p>\r\n        <Slider1\r\n          key=\"1\"\r\n          length={length}\r\n          onLengthChange={setLength}\r\n        />\r\n      </Modal1>\r\n      <Modal1\r\n        key=\"2\"\r\n      >\r\n        <p>M1S2</p>\r\n        <Slider2\r\n          key=\"2\"\r\n          length={length}\r\n          onLengthChange={setLength}\r\n        />\r\n      </Modal1>\r\n      <Modal2\r\n        key=\"3\"\r\n      >\r\n        <p>M2S1 (works on Firefox, does not work on Chrome, modal code is based on <a href=\"https://reactjs.org/docs/portals.html#event-bubbling-through-portals\">official React doc page</a>. )</p>\r\n        <Slider1\r\n          key=\"3\"\r\n          length={length}\r\n          onLengthChange={setLength}\r\n        />\r\n      </Modal2>\r\n      <Modal2\r\n        key=\"4\"\r\n      >\r\n        <p>M2S2 (works on Firefox, does not work on Chrome, modal code is based on <a href=\"https://reactjs.org/docs/portals.html#event-bubbling-through-portals\">official React doc page</a>. )</p>\r\n        <Slider2\r\n          key=\"4\"\r\n          length={length}\r\n          onLengthChange={setLength}\r\n        />\r\n      </Modal2>\r\n      <p>Current length is: {length}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n/*\r\n * Modals.\r\n */\r\n\r\nfunction Modal1(\r\n  props: React.PropsWithChildren\r\n) {\r\n\r\n  return ReactDOM.createPortal(\r\n    props.children,\r\n    root!\r\n  );\r\n}\r\n\r\nconst root = document.querySelector('body');\r\n\r\n/**\r\n * Based on https://reactjs.org/docs/portals.html#event-bubbling-through-portals .\r\n */\r\nfunction Modal2(\r\n  props: React.PropsWithChildren\r\n) {\r\n\r\n  const domNode = React.useRef(document.createElement(\"div\"));\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (root !== null) {\r\n\r\n      root.appendChild(domNode.current);\r\n    }\r\n\r\n    return () => {\r\n\r\n      if (root !== null) {\r\n\r\n        root.removeChild(domNode.current);\r\n      }\r\n    };\r\n  });\r\n\r\n  return ReactDOM.createPortal(\r\n    props.children,\r\n    domNode.current\r\n  );\r\n}\r\n\r\n\r\n\r\n/*\r\n * Sliders.\r\n */\r\n\r\ninterface CommonSliderProps {\r\n\r\n  length: number,\r\n  onLengthChange: (newLength: number) => void,\r\n}\r\n\r\nfunction Slider1(\r\n  props: CommonSliderProps\r\n) {\r\n\r\n  return (\r\n\r\n    <input\r\n      type=\"range\"\r\n      min={100}\r\n      max={200}\r\n      value={\"\" + props.length}\r\n      onInput={(event) => {\r\n\r\n        props.onLengthChange(event.currentTarget.valueAsNumber);\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nfunction Slider2_raw(\r\n  props: CommonSliderProps\r\n) {\r\n\r\n  const {\r\n    onLengthChange: onLengthChange\r\n  } = props;\r\n\r\n  const onInput = React.useCallback(\r\n    (event: React.FormEvent<HTMLInputElement>) => {\r\n\r\n      onLengthChange(event.currentTarget.valueAsNumber);\r\n    },\r\n    [onLengthChange]\r\n  )\r\n\r\n  return (\r\n\r\n    <input\r\n      type=\"range\"\r\n      min={100}\r\n      max={200}\r\n      value={props.length}\r\n      onInput={onInput}\r\n    />\r\n  )\r\n}\r\n\r\nconst Slider2 = React.memo(Slider2_raw)\r\n\r\n```\r\n\r\n2.\r\n\r\nPaste it into for instance https://codesandbox.io/s/react-typescript-xlpsg?file=/src/App.tsx\r\n\r\n3.\r\n\r\nIf on Firefox, dragging the sliders should work without issue.\r\n\r\nHowever, if on Chrome, dragging the third and fourth slider will be buggy.\r\n\r\n## The current behavior\r\n\r\nDragging the 3rd and 4th slider on Chrome does not work very well.\r\n\r\n## The expected behavior\r\n\r\nDragging all the sliders should work on any major browser, not only on Firefox.\r\n","state":"open","updated_at":"2022-11-01T18:13:12Z","created_at":"2022-11-01T18:08:54Z","creator_user_login":"MelvinWM"}
{"number":25602,"title":"Fix `repository.directory` of `react-refresh` package","body":"## Summary\r\n\r\nFix incorrect package metadata for `react-refresh` package.\r\n\r\n## How did you test this change?\r\n\r\nNot relevant\r\n","state":"open","updated_at":"2022-11-24T18:28:49Z","created_at":"2022-11-01T16:36:00Z","creator_user_login":"silverwind"}
{"number":25588,"title":"Bug: ","body":"I am trying to use an array of boolean inside a map and if the value is true it should display a div. This array is updated when I click on a button inside the map (updated as a state).\r\nThis doesn't trigger re-render to display the div.\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.  Create an array inside state\r\n2. Create a map to display a list of button\r\n3.  In those buttons put a function to update the current index inside the array\r\n4.  Add condition on the array of boolean at the current index inside the map to display a div\r\n5. It will not render anything when you click on button\r\n\r\n   const [arrayNodeColors, setArrayNodeColors] = React.useState([]);\r\n    const [openDiv, setOpenDiv] = React.useState([]);\r\n {arrayNodeColors.length > 0 &&\r\n                        arrayNodeColors.map((objColor, index) => {\r\n                            const {\r\n                                color: {r, g, b},\r\n                            } = objColor;\r\n                            const hexColor = rgbToHex(\r\n                                Math.round(r * 255),\r\n                                Math.round(g * 255),\r\n                                Math.round(b * 255)\r\n                            ).toUpperCase();\r\n                            console.log('recalcul');\r\n                            return (\r\n                                <li key={`${hexColor}-${index}`}>\r\n                                    <div className=\"liColor\">\r\n                                        <div className=\"divColor\">\r\n                                            <Elipse fill={hexColor} />\r\n                                            <p className=\"textColor\" style={{color: hexColor}}>\r\n                                                {hexColor}\r\n                                            </p>\r\n                                        </div>\r\n                                        <p\r\n                                            className=\"textModifyColor\"\r\n                                            onClick={() => {\r\n                                                displayModifyColor(index);\r\n                                            }}\r\n                                        >\r\n                                            Modify\r\n                                        </p>\r\n                                    </div>\r\n                                    {openDiv[index] && renderModifyDiv()}\r\n                                </li>\r\n                            );\r\n                        })}\r\n\r\n","state":"open","updated_at":"2022-10-30T19:45:45Z","created_at":"2022-10-30T19:45:45Z","creator_user_login":"leopalazzi"}
{"number":25586,"title":"Fix typo","body":"Fix typo\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nFixing a typo\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nNA\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-10-30T09:57:52Z","created_at":"2022-10-29T23:12:47Z","creator_user_login":"pruthvip"}
{"number":25581,"title":"Suggestion: why not make accessing and changing the state more flexible?","body":"It would provide the ability to create a state, read the state \r\nand set the state form anywhere in the code base.\r\n\r\nI imagine It would be something like this:\r\n\r\n## adding the state to the global state\r\n\r\n```js\r\nimport {useGlobalState} from 'react';\r\nconst ProviderComponent = ()=>{\r\n\r\n  const [ceateState, _, __] = useGlobalState();\r\n\r\n  // the first arg is the component key\r\n  // the second arg is a list of states\r\n  createState('providerComponent', {userStatusState: 'online', isUserVIPState: false});\r\n\r\n  return <></>\r\n}\r\n```\r\n\r\n##  now I can use it like so:\r\n\r\n```js\r\nimport {useGlobalState} from 'react';\r\n\r\nconst ConsumerComponent = ()=>{\r\n  \r\n  const [_, getUserStatus, setUserStatus] = useGlobalState('providerComponent', 'userStatusState');\r\n\r\n  const userStatusStateCopy = getUserStatus();\r\n\r\n  const changeUserStatusState = ()=>{\r\n    setUserStatus('offline');\r\n  }\r\n  return <p onClick={changeUserStatusState}>{userStatusStateCopy}</p>\r\n}\r\n```","state":"open","updated_at":"2023-01-08T12:03:01Z","created_at":"2022-10-28T16:24:55Z","creator_user_login":"anasouardini"}
{"number":25572,"title":"Suggestion: It is recommended to provide an api for querying root container globally","body":"In react 18, it is difficult to uninstall components in some scenarios\r\n\r\n```js\r\n// a.tsx\r\nfunction render() {\r\n    const root = createRoot(document.querySelector('#root'));\r\n    root.render(<Mask />)\r\n}\r\n```\r\n```js\r\n// b.ts\r\nfunction destroy() {\r\n    // before\r\n    const rootDom= document.querySelector('#root');\r\n    ReactDOM.unmountComponentAtNode(rootDom);\r\n    \r\n    // now - but the problem is that I can't get root directly. \r\n    // I need to add a parameter to the destroy method to get, which is very inconvenient in some scenarios\r\n    root.unmount();\r\n}\r\n```\r\nAs in the above example, it is recommended to provide an api to query root","state":"open","updated_at":"2022-10-31T08:47:35Z","created_at":"2022-10-27T04:51:35Z","creator_user_login":"Mumujianguang"}
{"number":25570,"title":"Add errorInfo argument to onError in Fizz","body":"Fizz currently accepts an onError callback which is provided any errors thrown during rendering. However previously the component stack was generated and sent to the client after logging the error so if you relied upon server logs to see where an error ocurred it was hard to make sense of it.\r\n\r\nThis change adds errorInfo as an optional second argument to onError. In dev, it will be passed a componentStack if one exists. in Prod the argument will be omitted because we do not generate component stacks in prod yet.","state":"open","updated_at":"2022-10-27T03:26:45Z","created_at":"2022-10-26T23:02:04Z","creator_user_login":"gnoff"}
{"number":25564,"title":"[DevTools Bug]: Not seeing source / file path","body":"### Website or app\r\n\r\n[Any](https://reactjs.org/)\r\n\r\n### Repro steps\r\n\r\nOpen react dev tools in browser\r\nSelect a react component from the tree\r\nNotice that no Source (file path) is printed in the bottom right panel (see description screenshot in https://github.com/facebook/react/pull/17567)\r\n\r\n\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2022-10-31T08:42:48Z","created_at":"2022-10-25T19:39:07Z","creator_user_login":"jschuler"}
{"number":25563,"title":"Bug: Infinite loop in Suspense","body":"React starts infinite rendering loop on promise resolve\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Wrap component with Suspense\r\n2. Pass object which will have promise there\r\n3. Create promise and in `setTimeout(...,  0)` call it's resolve\r\n\r\nLink to code example:\r\n\r\nOpen sandbox and click `Start and Finish loading`\r\nhttps://codesandbox.io/s/react-17-forked-hpd1g0?file=/src/App.js\r\n```\r\nimport \"./styles.css\";\r\nimport {\r\n  Suspense,\r\n  useEffect,\r\n  useRef,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useState,\r\n  Component\r\n} from \"react\";\r\n\r\nconst uninitialised = Symbol(\"uninitialised\");\r\n\r\nconst useMemoRef = (init) => {\r\n  const ref = useRef(uninitialised);\r\n  if (ref.current === uninitialised) {\r\n    ref.current = init();\r\n  }\r\n  return ref.current;\r\n};\r\n\r\nconst FunctionalComponent2 = (props) => {\r\n  const componentId = useMemoRef(() => id++);\r\n  console.log(`FunctionalComponent2(${componentId}) render`);\r\n  useMemoRef(() => {\r\n    console.log(`FunctionalComponent2(${componentId}) ref`);\r\n  });\r\n  useMemo(() => {\r\n    console.log(`FunctionalComponent2(${componentId}) memo`);\r\n  }, []);\r\n  useLayoutEffect(() => {\r\n    console.log(`FunctionalComponent2(${componentId}) layout effect`);\r\n    return () => {\r\n      console.log(`FunctionalComponent2(${componentId}) layout effect cleanup`);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(`FunctionalComponent2(${componentId}) effect`);\r\n    return () => {\r\n      console.log(`FunctionalComponent2(${componentId}) effect cleanup`);\r\n    };\r\n  }, []);\r\n  if (props.loading?.promise instanceof Promise) {\r\n    throw props.loading.promise;\r\n  }\r\n  return <>resolved</>;\r\n};\r\n\r\nconst FunctionalComponent1 = (props) => {\r\n  console.log(\"FunctionalComponent1 render\");\r\n  useMemoRef(() => {\r\n    console.log(\"FunctionalComponent1 ref\");\r\n  });\r\n  useMemo(() => {\r\n    console.log(\"FunctionalComponent1 memo\");\r\n  }, []);\r\n  useLayoutEffect(() => {\r\n    console.log(\"FunctionalComponent1 layout effect\");\r\n    return () => {\r\n      console.log(\"FunctionalComponent1 layout effect cleanup\");\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(\"FunctionalComponent1 effect\");\r\n    return () => {\r\n      console.log(\"FunctionalComponent1 effect cleanup\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <FunctionalComponent2 loading={props.loading} />\r\n    </>\r\n  );\r\n};\r\n\r\nlet id = 0;\r\nclass ClassComponent1 extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.componentId = id++;\r\n    window.cmp1 = this;\r\n  }\r\n  componentDidMount() {\r\n    console.log(`ClassComponent1(${this.componentId}) did mount`);\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(`ClassComponent1(${this.componentId}) will unmount`);\r\n  }\r\n\r\n  render() {\r\n    console.log(`ClassComponent1(${this.componentId}) render`);\r\n    return (\r\n      <>\r\n        <FunctionalComponent2 loading={this.props.loading} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const resolveRef = useRef();\r\n  const [loading, setLoading] = useState(() => {\r\n    return {\r\n      promise: null //new Promise((resolve) => {\r\n      //   resolveRef.current = resolve;\r\n      // })\r\n    };\r\n  });\r\n  const [mounted, setMounted] = useState(true);\r\n  const [suspense, setSuspense] = useState(true);\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          console.log(\"switch suspense\");\r\n          setSuspense(!suspense);\r\n        }}\r\n      >\r\n        Suspense\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          console.log(\"start loading\");\r\n          setLoading({\r\n            promise: new Promise((resolve) => {\r\n              resolveRef.current = resolve;\r\n            })\r\n          });\r\n        }}\r\n      >\r\n        Start Loading\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          const resolve = resolveRef.current;\r\n          loading.promise = null;\r\n          console.log(\"end loading\");\r\n          resolve();\r\n        }}\r\n      >\r\n        Finish loading\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          console.log(\"start loading\");\r\n          setLoading({\r\n            promise: new Promise((resolve) => {\r\n              resolveRef.current = resolve;\r\n            })\r\n          });\r\n          setTimeout(() => {\r\n            const resolve = resolveRef.current;\r\n            loading.promise = null;\r\n            console.log(\"end loading\");\r\n            resolve();\r\n          }, 0);\r\n        }}\r\n      >\r\n        Start and Finish loading\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setMounted(false);\r\n        }}\r\n      >\r\n        Unmount\r\n      </button>\r\n      {suspense ? (\r\n        <Suspense fallback={\"Loading...\"}>\r\n          {mounted ? <ClassComponent1 loading={loading} /> : null}\r\n        </Suspense>\r\n      ) : (\r\n        \"no suspense\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## The current behavior\r\nInfinite loop after loading finished\r\n\r\n## The expected behavior\r\nIt renders once after loading finished","state":"open","updated_at":"2023-02-08T10:28:32Z","created_at":"2022-10-25T14:15:13Z","creator_user_login":"Skolotsky"}
{"number":25562,"title":"Bug: Concurrent mode does not improve page jank","body":"React version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open web page https://9bzvbl.csb.app/\r\n2. Enter number 2 on the input\r\n\r\n## The current behavior\r\n\r\nLook how the FPS at top left corner decrease to a low number (depending on your CPU, you can increase the list length if you don't see low FPS)\r\n\r\n## The expected behavior\r\n\r\nThe FPS remain stable on 60 FPS because rendering of the long list is wrapped in startTransition so React should give preference to not produce page jank. And do the rendering with less priority.\r\n\r\nWeb page is based on this code: https://codesandbox.io/s/react18-usetransition-forked-9bzvbl?file=/src/useTransition/UseTransition.jsx\r\n\r\nI know that using react-virtualized, for example, you can overcome performance problems on long lists. But if you have low tech hardware like smart tvs the performance of the web page is a priority and simple rendering of short lists produce page jank.","state":"open","updated_at":"2023-04-27T12:47:38Z","created_at":"2022-10-25T07:26:41Z","creator_user_login":"jeremies"}
{"number":25553,"title":"Bug: Why does react fail to implement bidirectional data binding","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-10-30T14:13:28Z","created_at":"2022-10-24T11:23:57Z","creator_user_login":"cakeerrr"}
{"number":25549,"title":"Fix react/dom parse style array #25548","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-11-02T02:27:24Z","created_at":"2022-10-24T03:20:13Z","creator_user_login":"linjinze999"}
{"number":25548,"title":"Bug: react-dom/server renderToString don't support array style(react-native ssr)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example: `<View style={[{fontSize: '12px'}, {lineHeight: '20px'}]}/>`\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`style=\"0:[object Object];1:[object Object]\"`\r\n\r\n## The expected behavior\r\n`style=\"font-size:12px;line-height:20px\"`","state":"open","updated_at":"2022-10-29T08:37:51Z","created_at":"2022-10-24T02:43:29Z","creator_user_login":"linjinze999"}
{"number":25547,"title":"[cleanup]: meaningless hasTimeRemaining should be removed","body":"'hasTimeRemaining' was set true as a constant, and never changed it. So 'workLoop'  function should skip it.\r\n\r\n\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-12-23T09:26:52Z","created_at":"2022-10-24T01:27:35Z","creator_user_login":"bubucuo"}
{"number":25544,"title":"Suggestion for JSX syntax simplification","body":"## Suggestion\r\nI would like to suggest enhancing the JSX specification to allow:\r\n\r\n```jsx\r\nreturn <button {onClick}>Text</button>\r\n```\r\n\r\nto be parsed as equivalent to:\r\n\r\n```jsx\r\nreturn <button onClick={onClick}>Text</button>\r\n```\r\n\r\n## Rationale\r\n\r\nThis would improve readability and shorten line lengths, especially when several props are being used that share names with variables.\r\n\r\nIt would also tend to encourage adoption of variable and function names that match the intended prop names, such as `function onClick(ev) {}` instead of `function clickHandler(ev) {}`, which has enhanced readability in my own projects. (Once this convention is adopted, the present suggestion also reduces redundancy, again improving overall readability.)\r\n\r\n## Current Workaround\r\nCurrent workaround is as follows, but is not quite as elegant:\r\n```jsx\r\nreturn <button {...{onClick}}>Text</button>\r\n```\r\n\r\n## Additional Suggestion\r\nThis enhancement suggestion could be taken further to allow an arbitrary number of comma-delimited arguments to be spread into props of the same names:\r\n```jsx\r\n<component {arg1, arg2, etc} />\r\n```\r\n\r\n...equivalent to:\r\n```jsx\r\n<component {...{arg1, arg2, etc}} />\r\n```\r\n\r\n...also equivalent to the \"standard\" syntax:\r\n```jsx\r\n<component arg1={arg1} arg2={arg2} etc={etc} />\r\n```","state":"open","updated_at":"2023-02-08T22:50:12Z","created_at":"2022-10-23T16:36:35Z","creator_user_login":"gebbber"}
{"number":25533,"title":"Compile JSX directly to VDom for improve draw of view performance and allow progressive view rendering","body":"Right now JSX compiles to array of React.createElement or _jsx function. Each function calls for make VDom elements in runtime. I suggest compiling JSX directly to VDom. Because each function call in javascript has its own cost. On my PC its 2 nanoseonds. On 1000 JSX elements its 2 milliseconds. \r\n\r\nThis (call function) operation can be done not at runtime, but at the time of compilation. This optimization will improve the speed of JSX calculation by 25-50%.\r\n\r\n<details>\r\n  <summary>Performance test</summary>\r\n  \r\nThe simplest speed test. Can be copied to a file and run in nodejs.\r\nOn my PC have next result:\r\ntime-jsx: 0.22ms\r\ntime-vdom: 0.15ms\r\n\r\nOn a real application, the gap can be much larger.\r\n\r\n  ```javascript\r\n\r\nconst ce = (elem, props, childrens) => {\r\n    return {\r\n        type: elem,\r\n        props,\r\n        childrens\r\n    }\r\n}\r\n\r\nconst compJsx = () => {\r\n    return (\r\n        ce(\r\n            \"div\",\r\n            null,\r\n            [\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"Текст\"\r\n                        )\r\n                    ]\r\n                )\r\n            ]\r\n        )\r\n    );\r\n}\r\n\r\nconsole.time(\"time-jsx\");\r\n\r\nconst resultJsx = compJsx();\r\n\r\nconsole.timeEnd(\"time-jsx\");\r\n\r\nconst compVDom = () => {\r\n    return {\r\n        \"type\": \"div\",\r\n        \"props\": null,\r\n        \"childrens\": [{\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\"\r\n                        : null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\"\r\n                : \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"Текст\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\nconsole.time(\"time-vdom\");\r\n\r\nconst resultVDom = compVDom();\r\n\r\nconsole.timeEnd(\"time-vdom\");\r\n\r\nconsole.log(\"Result JSX length:\", JSON.stringify(resultJsx).length);\r\n\r\nconsole.log(\"Result VDom length:\", JSON.stringify(resultVDom).length);\r\n  ```\r\n  \r\n</details>\r\n\r\n\r\n### also...\r\n\r\nThis optimization will allow progressive view calculation and rendering.\r\n\r\nThe current implementation has the following problem. Calculation is made from depth to upwards. These calculations cannot be interrupted. Heavy calculations will block animations in the browser.\r\n```javascript\r\n_jsx(\r\n    \"div\",\r\n    {},\r\n    [\r\n        _jsx(\r\n            \"div\",\r\n            {},\r\n            [\r\n                _jsx(        // <-- must call first\r\n                    \"div\",\r\n                    {},\r\n                    \"Текст\"\r\n                )\r\n            ]\r\n        )\r\n    ]\r\n)\r\n```\r\n\r\nIn VDom version you can make calculation of dom from top to bottom and make separation of calculations by 16 ms for unblocked browser animations.\r\n```javascript\r\n{\r\n    type: \"div\", // <-- must call first\r\n    props: {},\r\n    childrens: [\r\n        {\r\n            type: \"div\",\r\n            props: {},\r\n            childrens: [\r\n                {\r\n                    type: \"div\",\r\n                    props: {},\r\n                    childrens: \"Текст\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```","state":"open","updated_at":"2022-10-29T08:43:00Z","created_at":"2022-10-22T14:57:06Z","creator_user_login":"LabEG"}
{"number":25528,"title":"Bug: ","body":"## React Version: ^18.2.0\r\n\r\n## Doing\r\nI am setting a parent component state inside useCallback when onChange of an input element take place.\r\n\r\n## Warring\r\n![image](https://user-images.githubusercontent.com/98938307/197277126-ed360ece-d601-4b2c-b6e7-410885fb0fdd.png)\r\n\r\n## Need Help\r\nI need help regarding this issue as I am not familiar with it. ","state":"open","updated_at":"2022-10-29T08:57:43Z","created_at":"2022-10-21T19:51:01Z","creator_user_login":"irtaza9"}
{"number":25525,"title":"Bug: React 18 Downloading a file on-demand doesn't work","body":"Creating an anchor tag that downloads a file on demand works fine in React 17 but in React 18 it doesn't work\r\n\r\nIn React 18 \r\n\r\nThe first click gives a valid 200 call to get the file and you can view the file in preview on the network tab (devtools) but nothing downloads in downloads\r\n\r\nThe second and subsequent clicks throw a network error/couldn't download in the browser downloads (has successful 200 in network tab)\r\n\r\n## Steps To Reproduce\r\n\r\nDownload and run the repos - exactly the same code but different react versions\r\n\r\nhttps://github.com/72gm/download-v17 \r\nhttps://github.com/72gm/download-v18 \r\n\r\nSame behaviour on Chrome and Edge\r\n\r\n## The current behavior\r\nFails to download correctly\r\n\r\n## The expected behavior\r\nShould download correctly","state":"open","updated_at":"2022-10-28T07:41:39Z","created_at":"2022-10-21T16:30:45Z","creator_user_login":"72gm"}
{"number":25524,"title":"Unify Default and Sync lane","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nResubmitted https://github.com/facebook/react/pull/25438\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nWe want to unify DefaultLane, SyncLane, and ContinuousLane into just SyncLane, and use a separate field on the root to track whether they should be scheduled with queueMicrotask, requestAnimationFrame, or completely synchronously (in the case of flushSync).\r\nThis PR is for unifying DefaultLane and SyncLane.\r\n\r\nThe main change is that EventPriorities no longer strictly maps to Lane. Instead, it also contains extra bits for UpdateType, so that we can distinguish DefaultUpdate from DiscreteUpdate since now they both are on the sync lane.\r\n\r\nTODOs:\r\n[ ] Fix remaining tests\r\n[ ] Resolve TODO in the code\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nyarn test","state":"open","updated_at":"2023-01-05T20:50:10Z","created_at":"2022-10-20T18:00:47Z","creator_user_login":"tyao1"}
{"number":25522,"title":"Bug: SVG executes contents of script tags.","body":"Script tags within SVG execute their contents when rendered with React. This is surprising, and creates opportunities for XSS attacks when rendering user generated content.\r\n\r\nReact version: 17.02, 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create an `<svg>` element with a `<script>` tag in it\r\n2. Render that element\r\n3. The children of that script tag will parse and execute as JavaScript\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/modest-voice-kywwwu\r\n\r\n## The current behavior\r\n\r\nIn this example, you'll see that the script tag within HTML does not execute, however the script tag within SVG does.\r\n\r\n## The expected behavior\r\n\r\nI would have expected the script's contents to be ignored in SVG, as it does in HTML.","state":"open","updated_at":"2023-04-22T10:40:50Z","created_at":"2022-10-20T12:15:38Z","creator_user_login":"nhunzaker"}
{"number":25517,"title":"[DevTools Access] Chrome extension request pending for React Developer Tools","body":"Hi there, trying to download the chrome extension for the react developer tools.  Who needs to approve it?  Is it React side?  Thanks","state":"open","updated_at":"2022-10-21T00:47:20Z","created_at":"2022-10-20T01:58:09Z","creator_user_login":"paulmambu"}
{"number":25511,"title":"Bug: Setting same state in useLayoutEffect triggers additional renders in React 18","body":"I'm not sure if this is a bug or expected behaviour, but we've noticed this change while upgrading our project to React 18. Setting state in a `useLayoutEffect` in this particular scenario is causing additional renders in React 18 compared to React 17. The previous behaviour in React 17 seems like the correct, expected behaviour.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nGiven this component:\r\n``` tsx\r\nfunction App() {\r\n  const [state, setState] = useState(\"loading\");\r\n\r\n  useLayoutEffect(() => {\r\n    setState(\"loading\");\r\n\r\n    setTimeout(() => {\r\n      setState(\"data\");\r\n    }, 10);\r\n  }, []);\r\n\r\n  console.log(\"Render with state:\", state);\r\n\r\n  return <div>{state}</div>;\r\n}\r\n```\r\nNote that this is a contrived example to minimally demonstrate the issue; it ignores proper effect cleanup, etc.\r\n\r\nLink to codesandbox: https://codesandbox.io/s/flamboyant-mendel-3gxysj?file=/src/index.js\r\n\r\n## The current behavior\r\nReact 18 logs this output:\r\n```\r\nRender with state: loading \r\nRender with state: data\r\nRender with state: data\r\n```\r\n\r\n## The expected behavior\r\nReact 17 logs this output:\r\n```\r\nRender with state: loading\r\nRender with state: data\r\n```\r\n\r\n## Notes:\r\n- It seems the call to `setState(\"loading\")` is causing the extra render. Shouldn't this call have no effect since the state's initial value is already \"loading\"? If you change the state's initial value to something else (like `undefined`), then the output is what I'd expect:\r\n```\r\nRender with state: undefined\r\nRender with state: loading \r\nRender with state: data \r\n```\r\n- `useEffect` produces the expected output in both React 17 and React 18. ","state":"open","updated_at":"2022-10-24T07:26:30Z","created_at":"2022-10-19T14:58:53Z","creator_user_login":"timphillips"}
{"number":25494,"title":"Repro for forced sync hydration during transition hydration","body":"","state":"open","updated_at":"2022-10-17T03:20:23Z","created_at":"2022-10-17T03:20:19Z","creator_user_login":"sebmarkbage"}
{"number":25476,"title":"Refactor: remove unnecessary words","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nSuch as:\r\n```js\r\nlet lastProp = { style: null };\r\nlet nextProp = { style: { color: \"red\" } };\r\n```\r\n\r\n[This code](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L742-L747) here will add `[style: null]` to `updatePayload`, and then [add it again](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L792-L797) at the end of the method\r\nThis results in two duplicate `style` attributes in the last `updatePayload`\r\nProbably not necessary\r\n\r\n```js\r\nupdatePayload = [\"style\", null, \"style\", { color: \"red\" }];\r\n```\r\n\r\nIn addition, the [updateDOMProperties](https://github.com/facebook/react/blob/main/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L363-L365) method will directly use  `for in` to directly loop the `null`\r\n\r\n```js\r\nfor (let i = 0; i < updatePayload.length; i += 2) {\r\n  const propKey = updatePayload[i];\r\n  const propValue = updatePayload[i + 1];\r\n  if (propKey === STYLE) {\r\n    setValueForStyles(domElement, propValue);\r\n  }\r\n}\r\nexport function setValueForStyles(node, styles) {\r\n  for (let styleName in styles) {\r\n  }\r\n}\r\n```\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n```js\r\nimport * as React from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nfunction Counter() {\r\n  const [number, setNumber] = React.useState(0);\r\n  let style = number === 0 ? null : { color: \"red\" };\r\n  return (\r\n    <div\r\n      style={style}\r\n      onClick={() => {\r\n        setNumber(number + 1);\r\n      }}\r\n    >\r\n      {number}\r\n    </div>\r\n  );\r\n}\r\nconst root = createRoot(document.getElementById(\"root\"));\r\nroot.render(<Counter />);\r\n```\r\n\r\nupdatePayload before modification\r\n![oldprops](https://user-images.githubusercontent.com/3096013/195516630-96bb1cd0-4ace-4677-800e-f39a5dc05e56.png)\r\n\r\nupdatePayload after modification\r\n![newProps](https://user-images.githubusercontent.com/3096013/195516652-56c3143d-d450-4d79-b61c-021d1449997a.png)\r\n","state":"open","updated_at":"2022-10-13T06:24:49Z","created_at":"2022-10-13T06:18:35Z","creator_user_login":"zhangrenyang"}
{"number":25472,"title":"Bug: RulesOfHooks can't detect member expression containing a hook name if the object is not in PascalCase","body":"https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L39-L40\r\n```js\r\n    const isPascalCaseNameSpace = /^[A-Z].*/;\r\n    return obj.type === 'Identifier' && isPascalCaseNameSpace.test(obj.name);\r\n```\r\nWhy is it necessary? Isn't it purely an artificial limitation?\r\nOur use case is absolutely valid both from the JS point of view and from React point of view:\r\n```js\r\nconst accessor = createEntityAccessor(entityId);\r\nconst name = accessor.useName();\r\n```","state":"open","updated_at":"2022-11-10T09:32:37Z","created_at":"2022-10-12T17:10:00Z","creator_user_login":"mifopen"}
{"number":25467,"title":"Continue Add end-of-frame scheduling for default events","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nDepends on https://github.com/facebook/react/pull/25700\r\n\r\nContinue the work of https://github.com/facebook/react/pull/24594\r\n\r\nThe major change compared to https://github.com/facebook/react/pull/24594 is that we no longer distinguish UnknownEvent and DefaultEvent, they both use `rAF` to schedule if `enableFrameEndScheduling` flag is on.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nyarn test","state":"open","updated_at":"2023-01-05T20:50:10Z","created_at":"2022-10-12T00:36:21Z","creator_user_login":"tyao1"}
{"number":25458,"title":"Bug: In StrictMode callback refs are called once","body":"Hi. I'm running in to an issue in StrictMode with the fact that React is calling effects multiple times but then is only calling ref callbacks once. I believe this could be related to (if not the same issue as) https://github.com/facebook/react/issues/24670.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nThe code is contrived but it shows how it can introduce confusion.\r\n\r\nhttps://codesandbox.io/s/react-18-playground-forked-b3ql27?file=/src/App.tsx\r\n\r\n## The current behavior\r\n\r\nCallback refs are only called once even though effect cleanup is called on mount.\r\n\r\n## The expected behavior\r\n\r\nCallback refs are called again on simulated re-mount.\r\n\r\n\r\nUnfortunately dealing with StrictMode so far has not been a very nice DX. It seems to have added a whole additional cognitive overhead. It also seems to raise all sorts of very opaque bugs that take a bit of working through often without obvious solutions. Although I understand the reasoning it feels like a loaded footgun.","state":"open","updated_at":"2022-10-10T17:23:09Z","created_at":"2022-10-10T17:23:09Z","creator_user_login":"domarmstrong"}
{"number":25454,"title":"BREAKING CHANGE: Drop support for string refs","body":"## Summary\r\n\r\nPart of https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-string-refs-and-remove-production-mode-_owner-field\r\n\r\nRemoves support for string refers which allows moving `_owner` to a non-enumerable, dev-only property (like `_self` and `_source`). \r\n`_owner` is still used by other dev-only warnings.\r\n\r\n## How did you test this change?\r\n\r\n- [x] CI","state":"open","updated_at":"2022-11-17T10:29:25Z","created_at":"2022-10-09T09:40:35Z","creator_user_login":"eps1lon"}
{"number":25453,"title":"Refactor: use property shorthand","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-10-12T09:07:08Z","created_at":"2022-10-09T06:06:40Z","creator_user_login":"zhangrenyang"}
{"number":25449,"title":"Updates dev.html to use react 18 createRoot API","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nUpdates dev.html to use react 18 createRoot API\r\n\r\n## How did you test this change?\r\n\r\nchange ReactDOM.render to ReactDOM.createRoot. Open the html in chrome, and would find the warning disappeared.","state":"open","updated_at":"2022-10-08T02:35:19Z","created_at":"2022-10-08T02:35:15Z","creator_user_login":"camsong"}
{"number":25447,"title":"[DevTools Bug]: Warnings are too \"loud\", mislabeled and make console difficult to use","body":"### Website or app\r\n\r\nhttps://codesandbox.io/s/purple-moon-ts7xzs?file=/src/App.js\r\n\r\n### Repro steps\r\n\r\nIt's not causing this in the codesandbox probably due to some flag missing, but locally in dev I've been getting the following when a stray prop is passed to a dom elem as an attribute (_NB this output is **truncated**, this isn't even the whole message_):\r\n\r\n![Screen Shot 2022-10-07 at 10 39 51 AM](https://user-images.githubusercontent.com/317498/194645730-159ea8cf-7d7c-49f3-b5b3-7caaf5384b44.png)\r\n\r\n## Problems with the current logging approach\r\n\r\n1. **This floods the console and pushes all other messages out of screen, making debugging difficult.** This is the main issue.\r\n2. The severity/\"loudness\" of this log message is out of proportion to the issue. This is a fairly minor issue as it typically does not actually break anything, yet this log drowns out actual issues that I need to see more urgently\r\n3. This issue's importance is being misclassified & the wrong logging API used: `console.error` is being misused to log a warning. The purpose of different log levels is to allow the consumer (developer) to enable or disable logging of less important messages depending on their needs. Putting warnings in the \"error\" stream **takes this control away from developers**. When I am cleaning up upgrade issues, minor bugs etc. I will turn on warnings and see this, but when I'm trying to figure out why my GQL endpoints are erroring, I should be able to turn this off.\r\n\r\n## Ask\r\n\r\nMy goal is to stop this effectively \"breaking\" the error console, i.e. making it unusable by flooding it with messages. Possible approaches:\r\n\r\n1. move these warnings to console.warn, putting control back in the developer/consumer's hands\r\n2. flag to disable the stack traces so messages aren't so enormous\r\n3. use [console.groupCollapsed](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed) to collapse these, so the stack is there but doesn't flood the console\r\n\r\n## FAQ\r\n\r\n### Why don't you just fix the errors? If you fix the errors, this isn't an issue. The solution is fix the errors.\r\n\r\nI don't mean to brag, but I work on applications with *lots* of errors. I truly wish I could fix every single one, but I must pick my battles and this often means letting smaller issues slide in order to focus on bigger ones. Furthermore, when working on a shared application, it can be out of your power to fix all the errors. There are several reasonable reasons why someone would want to work on their application and ignore certain errors, at least temporarily.\r\n\r\nIn any event, \"this is a valid error message so why should it be quieter\" doesn't address the question of *proportionality*. Should a warning like this overtake the whole console? Should it use `window.alert`? Should it bail out and crash the whole application? It's clear that these approaches to alerting the developer/consumer to an issue are not proportional with the severity of the issue itself, and these more drastic approaches would be inappropriate, even if they \"draw the developer/user's attention to the issue\" as this clearly does.  **Not every issue is p0** which is why we have log levels, and in this context different log streams (info, warning, and error).\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-07-25T21:52:51Z","created_at":"2022-10-07T20:28:41Z","creator_user_login":"Sequoia"}
{"number":25446,"title":"Warning: ReactDOM.render is no longer supported in React 18 when using ReactTestUtils.renderIntoDocument","body":"React version: 18.2.0\r\nReactDOM version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Setup Jest\r\n2. Create a test file which calls to the `ReactTestUtils.renderIntoDocument`method\r\n3. Run jest\r\n\r\nExample code:\r\n\r\n```javascript\r\ntest('component should render', () => {\r\n  const container = renderIntoDocument(<MyComponent/>)\r\n\r\n  expect(findRenderedComponentWithType(container, MyComponent)).not.toBeNull()\r\n})\r\n```\r\n## The current behavior\r\n\r\nWhen using `ReactTestUtils.renderIntoDocument`in React 18, I have the following warning in the console, that make the test fail:\r\n\r\n> console.error\r\n>      Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot\r\n\r\nIt seems to come from this line in the source code: https://github.com/facebook/react/blob/7b25b961df878109a2b3810f33815249cae37ecc/packages/react-dom/src/test-utils/ReactTestUtils.js#L128\r\n\r\n## The expected behavior\r\n\r\nI expect the `ReactTestUtils.renderIntoDocument` method not to trigger a `console.error` and to return a DOM Node.\r\n\r\nI know most of the people are probably using `@testing-library/react` these days, should we expect the React Test Utilities to be deprecated soon?\r\n\r\nThank you for reading.","state":"open","updated_at":"2023-09-03T02:17:07Z","created_at":"2022-10-07T11:47:20Z","creator_user_login":"raaaahman"}
{"number":25443,"title":"[Feature Request] exhaustive-deps linting rule: allow custom hooks to specify the index of their callback effect","body":"# Background\r\nCurrently, the `react-hooks/exhaustive-deps` linting rule allows developers to lint custom hooks. E.g.:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"additionalHooks\": \"(useMyCustomHook|useMyOtherCustomHook)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhile the [official documentation](https://www.npmjs.com/package/eslint-plugin-react-hooks) for this configuration states \"We suggest to use this option **very sparingly, if at all**\", there are nonetheless certain custom hook cases that necessitate such an approach. Consider the following scenario: (1) a callback needs to hook into an external system (thus requiring an effect), (2) the callback has dependencies on state / props and needs to reexecute when those change, (3) executing that callback can be arbitrarily expensive, so re-executing every render is not an option.\r\n\r\n# Motivation\r\nTo meet this challenge, we have two options: (1) treat the callback reference as sufficiently reactive (by this I mean, referentially stable unless a dependency has changed) — in other words, we assume the user of the hook is passing in a callback that was defined via useCallback, with the appropriate dependencies; (2) accept dependencies in the custom hook itself, wrap the function in a `useEvent` / `useEventHandler` style hook for referential stability, apply the dependencies to whatever effect the function is then executed within.\r\n\r\nIf we go with option (1) we have an obvious shortcoming — there's no way to ensure the user is wrapping their callback in useCallback. From personal experience on a large industry project with lots of developers, this is just not a viable option. Option (2) on the other hand meets all our needs, and via the `additionalHooks` config, we can ensure correctness by linting for exhaustive dependencies.\r\n\r\n# The Problem\r\nGreat! We've met our challenge with a robust solution and easy to use solution, however...... what if our hook accepts a third, or fourth arg? Well, the [current implementation](https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1737) of exhaustive-deps only allows for the [callback, deps] args to occupy arg0 and arg1 of our custom hook (e.g., `useCustomHook(effectCallback, effectDeps)`). While we can still get everything to \"work\", this because more than a minor headache if a hypothetical arg2 we want to add contains some of the most important contextual information. This pain is particularly acute because callbacks are (preferably) defined inline within hooks, and so they'll have a tendency push any succeeding args pretty far down, making them almost seem irrelevant.\r\n\r\n## An example from React\r\nWhile this is ultimately an issue of style, the resulting requirement forces custom hooks that need the exhaustive deps rule into a very awkward argument pattern. It seems I'm not alone, as React's own [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) seems to agree in the preferred structure for hooks that accept effectful callbacks with deps. In the case of useImperativeHandle, the most important, unique, and concise value — the `ref` — is passed first, and only then followed by the more verbose and less information-dense callback + deps args.\r\n\r\n## The Proposal\r\nAllowing developers to add their custom hooks to the linting tool is genuinely useful, but it does come with the significant caveat that the effect and deps have to be used as the first two args. I propose either of the following revisions:\r\n\r\n1. The additionalHooks rule be modified to alternatively accept an object of the form `{ [callbackArgIndex: number]: customHookRegex }`. For instance, adding a rule for `useImperativeHandle` would look like\r\n```\r\n\"additionalHooks\": { 1: \"useImperativeHandle\" }\"\r\n```\r\n\r\n2. Instead, the behavior of the rule should be altered to assume that the callback and the dependencies occupy the final two arguments of any given custom hook. This pattern seems consistent with how all native hooks with callback-deps patterns are defined, and so it seems to be a better \"default assumption\" over the current approach. \r\n\r\nIf this proposal is not moved forward with, I highly recommend that the documentation for the linting rule at least be updated to clarify that the linted callback and dependencies must occupy the first two arguments of any custom hook. Mine was failing silently and it took a deep dive into the implementation to understand what was going on!","state":"open","updated_at":"2022-10-08T09:09:04Z","created_at":"2022-10-06T21:12:29Z","creator_user_login":"ReillyBova"}
{"number":25440,"title":"react-hooks: Rules of Hooks now considers component/hook declarations inside JSX attributes","body":"## Summary\r\n\r\nNoticed during work in https://github.com/facebook/react/pull/25360.\r\nCloses https://github.com/facebook/react/issues/23230\r\n\r\nCurrently, the below code will trigger rules of hooks with \"hooks can only be called at the top level\" despite the hook being called in something that looks like a component.\r\n```jsx\r\nfunction JSXApp() {\r\n  return (\r\n    <Child\r\n      Component={() => {\r\n        const [myState, setMyState] = useState(null);\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\nThe above code is equivalent to the code below where we already apply Rules of Hooks\r\n```js\r\nfunction App() {\r\n  return createElement(Child, {\r\n    Component: () => {\r\n      const [myState, setMyState] = useState(null);\r\n    },\r\n  });\r\n}\r\n```\r\n\r\nIt's kind of neat to not apply rules of hook the components in JSX attributes since this can prevent declaration of nested components. But the error message wouldn't make sense and it would also flag component declarations in JSX elements that are not created during render.\r\n\r\nThe idea is to release this and https://github.com/facebook/react/pull/25360 together (though https://github.com/facebook/react/pull/25360 would need some rework if this PR is merged to also consider JSXAttributes). \r\n\r\n## How did you test this change?\r\n\r\n- [x] Added tests\r\n- [x] https://github.com/mui/material-ui/\r\n- [x] Klarna monorepo","state":"open","updated_at":"2022-11-13T15:42:01Z","created_at":"2022-10-06T05:59:09Z","creator_user_login":"eps1lon"}
{"number":25427,"title":"[DevTools Bug]: Hook parsing failed for default Next.js configuration","body":"### Website or app\r\n\r\nhttps://github.com/vercel/next.js/tree/canary/examples/blog-starter\r\n\r\n### Repro steps\r\n\r\n1. Create an instance of the official Next.js blog starter template, e.g. `yarn create next-app --example blog-starter blog-starter`\r\n2. Run `yarn dev` (or equivalent) inside the created project.\r\n3. Go to the webpage (normally `http://localhost:3000`) and open the React devtools\r\n4. Enable 'Always parse hook names from source' in the devtool options\r\n5. Observe the error 'Hook parsing failed':\r\n    <img width=\"669\" alt=\"image\" src=\"https://user-images.githubusercontent.com/565371/194022450-1b32305a-b2bc-42bc-ac4d-ed389e9fdc74.png\">\r\n\r\nNote: Next.js does not allow you to change the source map format (`devtool`) setting so it's rather difficult to work around this issue.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-03-16T03:42:24Z","created_at":"2022-10-05T09:00:01Z","creator_user_login":"rossng"}
{"number":25415,"title":"[DevTools Bug]: \"Message length exceeded maximum allowed length\" when profiling a complex application","body":"### Website or app\n\nN/A\n\n### Repro steps\n\nWhen profiling a complex, proprietary app, I regularly get an error message, \"Message length exceeded maximum allowed length.\"\r\n\r\nSteps to reproduce:\r\n\r\n1. Within the Dev Tools, go to the Profiler tab.\r\n2. Click the \"Start Profiling\" button.\r\n3. Let the app run for a bit. Do some things in the app.\r\n4. Click the \"Stop Profiling\" (\"record\") button.\r\n\r\nAt this point, the Chrome Dev Tools console logs an error:\r\n\r\n```\r\ncontentScript.js:116 Uncaught Error: Message length exceeded maximum allowed length.\r\n    at handleMessageFromPage (contentScript.js:116:10)\r\n```\r\n\r\nAnd the Profiler tab is stuck with the message, \"Processing data... This should only take a minute.\"\r\n\r\nThe error is thrown from https://github.com/facebook/react/blob/64fe791be84ad04a4a1d005376ba5cf5701db9b7/packages/react-devtools-extensions/src/contentScript.js#L36\r\n\r\nThe last time this occurred, when breaking on exceptions at that line, `JSON.stringify(event.data.payload).length` reports 92074565. I can provide further information on the contents of the problematic `event.data.payload` if that would be helpful.\r\n\r\nI apologize for the lack of a reproducible test case - it's a complex app (which is why I was looking into profiling), and I don't think I could simplify it down to a public test case while triggering the error.\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-03-22T02:58:06Z","created_at":"2022-10-04T15:31:21Z","creator_user_login":"joshkel"}
{"number":25391,"title":"Remove alternate tree DOM element retainers to help with memory leak investigations","body":"Hi,\r\n\r\n#16087, #15157 (and other issues) point out that React keeps an alternate tree that can retain DOM elements in fibers such as the `stateNode` property. This can make it hard to debug memory leaks in larger sites/applications since they are a false positive.\r\n\r\nTo make the investigation process easier, would it be possible to recommend/suggest a way to somehow clean up the retainers in alternate fiber so that there is less noise?\r\n\r\nWe have some tools that do this to more or less successfully by pasring the fiber tree and setting `alternate.stateNode` to `null`.\r\n\r\nI understand that fibers are internal API and that anything retained in alternate tree should fix itself eventually if the userland code is not leaky. However when there are leaks in userland the alternate tree can make root causing real memory leaks quite hard, even for those who are aware that retention in alternate trees is expected and a normal behaviour of React.","state":"open","updated_at":"2023-08-29T09:50:00Z","created_at":"2022-10-04T12:29:25Z","creator_user_login":"ling1726"}
{"number":25384,"title":"Bug: state changes of input[type='number'] value doesn't update real DOM","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nThe problem is that state changes going into `value` prop of `input[type=\"number\"]` don't update(synchronize) real DOM. Regardless of what type of `value` that `input[type=\"number\"]` expects in internal implementation, (based on what I observed) it's showing inconsistent behavior.\r\nThis bug has been happening since very old version in my experience, and github issues about this are still open:\r\n> https://github.com/facebook/react/issues/9402: A number input will always have left pad 0 though parseFloat value in onChange\r\n> https://github.com/facebook/react/issues/13651: input[type='number'] value isn't updated\r\n\r\nI'm writing this new bug report since they point out derived errors not its fundamental problem.\r\n\r\nReact version:\r\n18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. create `input[type=\"number\"]` and set `value` with state of type `number|undefined`, default empty string.\r\n2. set `onChange`(or `onInput`) handler and change the `number|undefined` state on typing.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/input-type-number-bug-bosfmv?file=/src/App.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior: when setting `number` on `value` with default empty `string`\r\nReal DOM shows left pad 0. https://github.com/facebook/react/issues/9402 and https://github.com/facebook/react/issues/13651 talk about this. Putting stringified value is workaround as https://github.com/facebook/react/issues/13651#issuecomment-727244841 mentioned.\r\n\r\n## The expected behavior: when setting `number` on `value` with default empty `string`\r\nReal DOM should show actual `value` even if the type of initial value is `string`. For example, when the `value` is type of `number`, it should show the number without left pad 0.\r\n\r\n## The current behavior: when setting stringified `number` on `value` with default empty `string`\r\nReal DOM doesn't show the value that you set on `value`.\r\n(Please look up above codesandbox link)\r\nPutting `123--`(or whatever invalid number format you can put) results setting `undefined` on the state type of `number`, which results setting empty `string` on `value`. But it still shows `123--`.\r\n\r\n## The expected behavior: when setting stringified `number` on `value` with default empty `string`\r\nReal DOM should show the value that you set on `value`.","state":"open","updated_at":"2023-03-23T19:52:56Z","created_at":"2022-10-03T02:11:29Z","creator_user_login":"cdpark0530"}
{"number":25379,"title":"eslint-plugin-react-hooks: lint rule to enforce that `useMemo` returns a value","body":"Nothing prevents developers from calling `useMemo` without a `return`:\r\n\r\n```ts\r\nimport { useMemo } from \"react\";\r\n\r\nuseMemo(() => {\r\n    console.log(\"Yippee!\");\r\n}, []);\r\n```\r\n\r\n[[TypeScript playground showing no errors](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgVwM4FMCy6QTgXzgDMoIQ4AiKdAQwGMYKBuAWACh20scIAKXgJRwAvAD5E7OFLh0IAO1QQANugB0SiAHNeFAJrAwYdOgCEFAazb4ANHADaAXQtA)]\r\n\r\nCalling `useMemo` without a returned value is somewhat equivalent to calling `useEffect` without a returned value. Judging by the few times I've seen it happen, it's likely a case of a developer either confusing the two hooks or forgetting to `return` the memoized value.\r\n\r\nSuggestion: can we add a lint rule to flag `useMemo` calls that don't definitely return a value? It could have a _suggestion_ fixer to switch to `useEffect`.","state":"open","updated_at":"2022-11-04T12:43:27Z","created_at":"2022-10-02T04:01:58Z","creator_user_login":"JoshuaKGoldberg"}
{"number":25367,"title":"[DevTools Bug]: DevTools causes hook callback behavior inconstency","body":"### Website or app\n\nhttps://gist.github.com/nhusher/33981014bb69318ead012c11a73eff52\n\n### Repro steps\n\nEither clone the gist and run with static-server, or check out [this equivalent codesandbox link](https://5lu8ks.csb.app/) (Full sandbox IDE [here](https://codesandbox.io/s/new-snowflake-5lu8ks?file=/src/index.tsx))\r\n\r\n1. Have React devtools installed \r\n2. Visit the URL indicated by static-server\r\n3. Click both increment buttons, ensuring that they work\r\n4. Open the developer tools\r\n5. Navigate to the DevTools Component tree and highlight `<App />`\r\n6. Click both the increment buttons\r\n7. Observe that the normal in-React increment button works\r\n8. Observe that the \"increment (outside react)\" button no longer works\r\n\r\nVerification of the issue:\r\n\r\n1. Open an incognito window\r\n2. Visit the URL indicated by static-server\r\n3. Click the two buttons and verify that both work\r\n4. Open the developer tools (no React Devtools available)\r\n5. Verify the two buttons continue to work\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-02-06T15:55:08Z","created_at":"2022-09-30T15:42:26Z","creator_user_login":"nhusher"}
{"number":25360,"title":"Add no-nested-components ESLint rule","body":"## Summary\r\n\r\nAdds a new `no-nested-components` rule to `eslint-plugin-react-hooks` that triggers on nested component declarations e.g.\r\n\r\n```jsx\r\nfunction Component() {\r\n  const Nested = () => <div />;\r\n  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^ \r\n  // Component \"Nested\" is declared during render. \r\n  // You should move this declaration outside of render to ensure this component's state is persisted across re-renders of its parent. \r\n  // If this is not a component, or not inside a component or hook, rename it to make sure it is not mistaken for a component e.g. `Icon` -> `renderIcon`.\r\n\r\n  return <Nested />\r\n}\r\n```\r\n\r\n\r\n\r\nThese declarations are problematic since the nested components will not persist state across re-renders of the parent component.\r\n\r\nThe [tests are copied from `react/no-nested-unstable-components`](https://github.com/jsx-eslint/eslint-plugin-react/blob/master/tests/lib/rules/no-unstable-nested-components.js) but re-ordered since we currently apply the same logic as rules-of-hooks: If it looks like a component and is inside a component or hooks it cannot be nested inside another component.\r\n\r\nUnlike `react/no-nested-unstable-components` we currently don't detect nested component definitions in class components nor do we detect nested class component definitions. Both of these scenarios would be nice to cover as well though!\r\n\r\nOpen questions: \r\n- [ ] releaseable? should more cases be covered? better package (name)?\r\n- [ ] rule name bikeshedding\r\n- [ ] internal: inline helpers from RulesOfHooks or created shared helpers?\r\n- [ ] How do we communicate forking of lint rules? What happens in code bases with both `react/no-unstable-nested-components` and `react-hooks/no-nested-components`?\r\n\r\n## How did you test this change?\r\n\r\n- [x] CI\r\n- [x] [mui/mui](https://github.com/mui/material-ui/)\r\n- [x] Klarna monorepo\r\n- [x] [@AriPerkkio ran it on 20k OSS repos](https://github.com/facebook/react/pull/25360#pullrequestreview-1127521790) One false-positive could be caught before release. The other patterns are consistent with rules-of-hooks\r\n\r\n## Why not recommend `react/no-nested-unstable-components`\r\n\r\n- [Questionable if this rule will be part of the recommended ruleset in a timely manner.](https://github.com/jsx-eslint/eslint-plugin-react/pull/3444)\r\n- Consistent detection of what's considered a component (e.g. we can detect nested forwardRef or memo component declarations )\r\n- `no-unstable-nested-components` is not actually what we want. It's just about nesting components. Memoizing them will still cause breakage since their state won't be re-useable (remember that useMemo/useCallback are perf optimizations not semantic guarantees unlike `key` and component types)\r\n\r\n###  Not detected in proposed rule but detected in `react/no-unstable-nested-components`\r\n\r\nA. `<Component footer={() => <div />} />`\r\n\r\nThis is probably correct to no longer detect since `const footer = () => <div />} />` would also not be considered a component. However, `<Component Footer={() => <div />} />` would also not be detected. This would probably be nice to get into Rules of Hooks regardless.\r\n\r\n\r\n### Detected in proposed rule but not detected in `react/no-unstable-nested-components`\r\n\r\nA.\r\n```jsx\r\nfunction useHook() {\r\n   return function Component() {}\r\n}\r\n```\r\nIntended. Hooks are called during render which means the component declaration happens during render.\r\n\r\nB.\r\n```jsx\r\nfunction Component() {\r\n   const ConditionalWrapper = ({ condition, wrapper, children }: any) =>\r\n      condition ? wrapper(children) : children\r\n}\r\n```\r\nIntended. Rules of Hooks would allow calling a Hook in `ConditionalWrapper` so we should consider it a nested declaration.\r\n\r\nC.\r\n\r\n```jsx\r\nfunction Component() {\r\n  const components = {\r\n    ActionIcon: () => null,\r\n  }\r\n}\r\n```\r\n\r\nIntended. Even though flagging this particular example seems silly, Rules of Hooks would allow calling a Hook in `ActionIcon` so we should consider it a nested declaration.","state":"open","updated_at":"2022-10-03T16:55:23Z","created_at":"2022-09-29T21:19:33Z","creator_user_login":"eps1lon"}
{"number":25351,"title":"Making React a Functional program by mapping behaviour to expected inputs and outputs.","body":"To my fellow React developers,\r\n\r\nI have been learning about Functional Programming recently. According to my knowledge so far, a purely functional program is one where every action / behavior is a map from an input type (parameters) to an output type (return) without mutating any state or accessing global objects or methods.\r\n\r\nSince React promotes a functional approach to front-end development, I was curious about how much of React was functional itself. I know its impossible (read, idealistic) to create a purely functional program where user input is so prevalent but if we are able to at least list every possible behavior of React then it would be much simpler for developers using React to reason about their programs.\r\n\r\nI find this endeavor to be worth my time but I am completely over my head regarding how to start listing every expected behavior of React. It would be very helpful if someone could point me in the right direction or tell me why this may be a doomed endeavor and save me a lot of time (although I would not be looking forward to this conclusion).\r\n\r\nThanking You\r\n@kinjal-basu","state":"open","updated_at":"2022-10-20T11:54:55Z","created_at":"2022-09-29T06:25:58Z","creator_user_login":"kinjal-basu"}
{"number":25342,"title":"Bug: onRender API in React.Profiler is tedious to work with","body":"The `onRender()` callback for `<React.Profiler>` takes 7 arguments. That is...too many.\r\n\r\nIt would be much easier to work with if it took one object that could be destructured into the existing 7.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Try to log the `id`, `phase`, and `interaction`.\r\n2. Write this ridiculous code:\r\n```\r\n<Profiler\r\n  id=\"Navigation\"\r\n  onRender={(id, phase, _a, _b, _c, _d, interactions) => console.log(`${id}: ${phase} ${interactions}`)}\r\n  >\r\n```\r\n3. Be sad.\r\n\r\n## The current behavior\r\n\r\n```\r\n<Profiler\r\n  id=\"Navigation\"\r\n  onRender={(id, phase, _a, _b, _c, _d, interactions) => console.log(`${id}: ${phase} ${interactions}`)}\r\n  >\r\n```\r\n\r\n## The expected behavior\r\n\r\n```\r\n<Profiler\r\n  id=\"Navigation\"\r\n  onRender={({id, phase, interactions}) => console.log(`${id}: ${phase} ${interactions}`)}\r\n  >\r\n```\r\n","state":"open","updated_at":"2022-09-28T21:50:40Z","created_at":"2022-09-28T18:45:07Z","creator_user_login":"bolinfest"}
{"number":25340,"title":"React Developer Tools shows only on Chrome's incognito window","body":"Hi\r\nI have Chrome on ElementaryOS Hera (Ubuntu 20.04 based)\r\nVersion 105.0.5195.125 (Build oficial) (64 bits)\r\n\r\nI have installed React Developer Tools\r\nWhen I load application ( `yarn dev` ) and then run Chrome, I try to activate manually (Extensions -> React Developer Tools)\r\nI see this notice (but Components and Profiler tabs are not shown)\r\n\r\n![imagen_0883](https://user-images.githubusercontent.com/274856/192821976-2891b1b9-1fb7-49b8-8e50-660d99db624a.jpg)\r\n\r\nHowever, If I run Chrome on incognito mode, it works\r\nI can see the Components and Profiler tabs\r\n\r\nAny idea how debug that and make it work in normal Chrome window?\r\nThanks","state":"open","updated_at":"2022-10-17T17:00:35Z","created_at":"2022-09-28T15:39:20Z","creator_user_login":"kabeza"}
{"number":25337,"title":"Fix before before","body":"## Summary\r\n\r\nFound more duplicate words. Removed doubles of the word \"before\".\r\n\r\n## How did you test this change?\r\n\r\nSince the words were removed from tests I tried running the tests to make sure they weren't broken, and they passed without issue.\r\n","state":"open","updated_at":"2022-10-03T08:11:23Z","created_at":"2022-09-28T06:08:09Z","creator_user_login":"Vicachu42"}
{"number":25329,"title":"ReactTestInstance to expose toJSON() method for focused snapshots","body":"## Summary\r\n\r\nAllow calling `toJSON` on any `ReactTestInstance` in order to be able to make focused snapshots when writing tests using React Test Renderer or [React Native Testing Library](https://github.com/callstack/react-native-testing-library/).\r\n\r\nCurrently Test Renderer only exposes parameterless `toJSON()` as a result to `ReactTestRenderer.create()` function call but that function can only output whole component tree, which frequently result in very long snapshots that are hard to work with. \r\n\r\nAdditionally, we plan to use this new function to improve implementation of various internal elements from React Native Testing Library, like `getByText` query algorithm, focused `debug()` function, etc.\r\n\r\nThis PR adds `toJSON()` method to `ReactTestInstance` class, so that users can generate JSON tree for any node. Implementation works by calling internal `toJSON` method if given node is host component, otherwise it recursively calls `toJSON()` on its children and returns collected JSON trees as array.\r\n\r\nResolves #14539\r\n\r\n## How did you test this change?\r\n\r\nI've added additional assertions to all relevant `ReactTestRenderer-test.internal.js` tests. The new assertions verify that `renderer.root.toJSON()` output is the same as `renderer.toJSON()` output. These tests cover different component tree structures and lifecycle changes.\r\n","state":"open","updated_at":"2023-07-03T18:52:51Z","created_at":"2022-09-27T08:35:11Z","creator_user_login":"mdjastrzebski"}
{"number":25327,"title":"Bug: Unable to detect which boundary received an update.","body":"Hi, I have problems with upgrading the project to the newest version of React. We are using React.Lazy to load all of our components, since our pages are created dynamically and every page contains some different components. Currently I'm fighting with this error that suggests that the Suspense boundary received an update. I'm struggling to detect which one is this and it's very hard to debug since I don't see a place from where this error is thrown.\r\n\r\nDo you know how I could debug that using this stack trace?\r\n\r\n![Screenshot 2022-09-26 at 16 32 40](https://user-images.githubusercontent.com/81956806/192304798-57f2cfc1-70ae-4410-9c40-e84ef6c40a5b.png)\r\n\r\nReact version: 18.2.0\r\n\r\n## The current behavior\r\n\r\nI'm unable to detect from which suspense boundary this error is thrown as we have a lot of them and the error doesn't suggest it.\r\n\r\n\r\n## The expected behavior\r\n\r\nIdeally this error could show a place or the nearest component that renders this Suspense boundary that received an update.\r\n","state":"open","updated_at":"2022-09-26T14:41:44Z","created_at":"2022-09-26T14:41:44Z","creator_user_login":"szymon-99"}
{"number":25326,"title":"Bug: how to preventDefault in touchmove","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n17.0.2\r\n\r\n## Steps To Reproduce\r\nI want the parent element to not scroll when the child element is scrolled\r\n\r\njsx\r\n```\r\nconst App = () => {\r\n        const styleObj = {\r\n             height: \"200vh\",\r\n             \"background-image\": \"linear-gradient(rgb(255, 255, 255), rgb(170, 0, 0))\"\r\n        }\r\n        function touchMove(event) {\r\n            event.nativeEvent.preventDefault();\r\n        }\r\n        return (\r\n          <div id=\"parent\" style={ styleObj }>\r\n             <div id=\"child\" onTouchMove={touchMove} className=\"r\">\r\n             </div>\r\n          </div>\r\n      );\r\n}\r\n```  \r\n\r\ncss:  \r\n```\r\n.r {\r\n  position: fixed;\r\n  top: 200px;\r\n  left: 0;\r\n  z-index: 10;\r\n  width: 100%;\r\n  height: 300px;\r\n  background-color: black;\r\n}\r\n```\r\nWhen I scroll the child in mobile mode, the outer layer will follow.\r\n\r\nLink to code example:\r\nApp.js\r\n![image](https://user-images.githubusercontent.com/58899489/192140145-f3124ce9-9e42-4412-9b27-1b684b4c6c16.png)\r\n\r\nApp.css\r\n![image](https://user-images.githubusercontent.com/58899489/192140154-bc113553-21d3-43b0-a5b4-b768f680e408.png)\r\n\r\n## The current behavior\r\nthe parent scroll when child is touchmove.\r\n\r\n## The expected behavior\r\nthe parent not scroll when child is touchmove.\r\n\r\nI saw this issues(https://github.com/facebook/react/issues/19651)， I have two questions:  \r\n\r\n1. I'm not sure if react 18 fixed it？  \r\n3. How do I deal with this case?\r\n","state":"open","updated_at":"2022-12-06T15:45:16Z","created_at":"2022-09-25T11:04:42Z","creator_user_login":"this-spring"}
{"number":25324,"title":"Add isValidContainer test","body":"## Summary\r\n\r\nAdd tests for validation methods to check when ReactDOMClient's createRoot method is executed.\r\n\r\n## How did you test this change?\r\n\r\n- checking to return ReactDOMRoot if container is Element node\r\n- checking to return ReactDOMRoot if container is Document node\r\n- checking to return ReactDOMRoot if container is DocumentFragment node\r\n","state":"open","updated_at":"2022-09-24T21:03:37Z","created_at":"2022-09-24T19:13:44Z","creator_user_login":"ta1m1kam"}
{"number":25321,"title":"Bug: ","body":"You are urging us to support Ukraine, which is of course a good and humane thing.\r\nBut what about Palestine? What about the Israeli occupation, the killing of children and the arrests of women and youth?","state":"open","updated_at":"2022-09-24T15:37:13Z","created_at":"2022-09-24T15:37:13Z","creator_user_login":"ahmedali5696"}
{"number":25318,"title":"Bug: React DOM Server triggers setStates only on the top component","body":"React version: Tested in 16 and 18.\r\n\r\nWhile trying to SSR (both `toStaticMarkup` and `toString`) an app in React with a node server found suspicious behaviour. \r\n\r\nState updates run if somehow are present during the component runtime, but ignored when those updates are down the react tree.\r\n\r\n## Steps To Reproduce\r\n\r\nMade a minimum repro with node under code-sandbox.\r\nTo see the output (sometimes code-sandbox output doesn't render on the side panel)\r\nOpen the Terminal > Press \"+\" (in the top right of the Terminal) > run \"node index.js\"\r\n\r\nhttps://codesandbox.io/s/react-dom-server-demo-0b52zt?file=/index.js\r\n\r\n- Checked the ReactDOMServer-* tests such as https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js#L157-L170 and they look like an expected behaviour.\r\n- While when it's under a component that runs that updater, it doesn't get re-rendered: https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js#L115\r\n\r\nWithin other implementations of SSR in React-like, such as preact https://github.com/preactjs/preact-render-to-string/tree/master/test, this \"issue\" isn't present.\r\n\r\nAfter digging a bit, I found the code on server/node_modules/react-dom/cjs/react-dom-server.node.development where useReducer checks if it's currently rerendering and process the hook.\r\n\r\nI have read it once or twice on Twitter/new documentation (can't really point where exactly) where It's a totally valid approach to run effects with setState within the body of the component. I'm wondering If this behaviour is expected within now, and with future releases and how it relates to Suspense with SSR (which I know is disabled, but It might be supported in the future?)\r\n\r\n## The current behavior\r\n\r\nThe demo shows in the first example that the \"app\" component is rendered twice since there's a setState call, while the following example only renders one.\r\n\r\n## The expected behavior\r\n\r\nI'm not entirely sure what's the proper behaviour in this case. From the perspective of this issue, might make sense to have one \"unified\" behaviour where both updaters are either not called, or called. But it seems a lot of work to rerender the entire React tree to check if those updates happen on the runtime of some components.\r\n\r\n","state":"open","updated_at":"2022-09-23T16:22:15Z","created_at":"2022-09-23T14:08:37Z","creator_user_login":"davesnx"}
{"number":25308,"title":"Bug: event not bubbling to root on iOS Safari","body":"We have a div element with an `onClick` and `onDoubleClick` function. Prior to React 17/18, this worked consistently throughout all browsers. However, from the moment we've upgraded to React 18 (also reproducible on React 17), this stopped working on iPhones running Safari.\r\n\r\nI assume this is because of the event propagation changes in React 17. It _does_ work on Safari on MacOs, and on all mobile Android browsers too. So only iOS' Safari behaves differently.\r\n\r\nOur component looks like this:\r\n```\r\n<div\r\n      className=\"slideshow-preview\"\r\n      onClick={onClickFnc}\r\n      onDoubleClick={onDoubleClickFnc}\r\n      ...\r\n```\r\n\r\nThis is the component in its default state:\r\n![image](https://user-images.githubusercontent.com/18447679/191563127-49bfea0f-fde1-4aff-bbfa-ae5e6e6631f0.png)\r\n\r\nWhen clicking once, some resizing handlers appear (the  `onClick` method)\r\n![image](https://user-images.githubusercontent.com/18447679/191563219-8638f8e3-93ef-4e3a-afba-13eb8f473769.png)\r\n\r\nWhen double clicking, the crop modus appears (the `onDoubleClick` method)\r\n![image](https://user-images.githubusercontent.com/18447679/191563394-d3949cfb-6380-477b-a108-dc976775c972.png)\r\n\r\nThis `onDoubleClick` won't trigger on iOS. \r\nTested on \r\n\r\n- iPhone 12 running iOS 15 and 16\r\n- iPhone 14 emulator running iOS 16. \r\n\r\nHOWEVER. After looking through [the React 17 upgrade blog's](https://reactjs.org/blog/2020/08/10/react-v17-rc.html#fixing-potential-issues) potential issue fixes part, I tried to apply a suggested fix to my code.\r\n\r\nSo in my component, I added this piece: \r\n```\r\nuseEffect(() => {\r\n      document?.addEventListener(\"dblclick\", onDoubleClickFunc);\r\n      return () => {\r\n\t      document?.removeEventListener(\"dblclick\", onDoubleClickFnc);\r\n      };\r\n}, [onDoubleClickFunc]);\r\n```\r\nand now it works consistently! But it looks kinda hacky and I'm not a fan of it.\r\n\r\nIs there a possibility by chance that there's a bug in Safari and/or React or am I doing something wrong? Would love if someone could explain me.\r\n\r\nThanks in advance\r\n\r\n","state":"open","updated_at":"2023-01-12T01:49:03Z","created_at":"2022-09-21T16:50:58Z","creator_user_login":"LeunensMichiel"}
{"number":25304,"title":"Support new `load`/`resolve` API for Node ESM loaders","body":"## Summary\r\n\r\nAs explained [here](https://github.com/facebook/react/issues/25303), the current node loader in [react-server-dom-webpack](https://github.com/facebook/react/tree/main/packages/react-server-dom-webpack) only supports the older ESM loader API and not the new API. This PR adds support for the newer API by implementing the `load` function to replace `getSource` / `transformSource`\r\n\r\n## How did you test this change?\r\n\r\nI am actually not sure how to test this within the react repo, I've only managed to test it within the context of my own project and it does seem to work. Ideas?","state":"open","updated_at":"2022-10-11T07:57:51Z","created_at":"2022-09-21T00:16:37Z","creator_user_login":"mattvague"}
{"number":25303,"title":"react-server-dom-webpack node loader does not support newest ESM loader API","body":"Currently the webpack node loader included [`react-server-dom-webpack`](https://github.com/facebook/react/tree/main/packages/react-server-dom-webpack) only implements the deprecated `transformSource`/`getSource`/`resolve` ESM loader API, but not the newer (but still unstable) `load`/`resolve` API. This makes the loader impossible to use with newer versions of Node (16+... I think?).\r\n\r\nOpened a draft PR to fix this [here](https://github.com/facebook/react/pull/25304)\r\n\r\nReact version: 0.0.0-experimental-3d615fc14-20220919\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install Node 16+\r\n2. Try using the node loader from react-server-dom-webpack","state":"open","updated_at":"2022-09-21T00:24:51Z","created_at":"2022-09-21T00:12:40Z","creator_user_login":"mattvague"}
{"number":25301,"title":"Refactor/format code: else block is unnecessary.","body":"## Summary\r\n\r\nRun the code but not need `else`. Because it has been returned ahead in `if`.\r\n\r\n> If an if block always executes a return statement, the subsequent else block is unnecessary.\r\n\r\n## How did you test this change?\r\n\r\nWe have been runed all test cases, and not change the logic of code execution","state":"open","updated_at":"2022-09-20T15:04:38Z","created_at":"2022-09-20T02:39:13Z","creator_user_login":"wenzi0github"}
{"number":25294,"title":"Bug: defaultValue property missing on select element ref ","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Set a  `defaultValue` on a `<select />` element.\r\n2. After the element mounts, try to access that `defaultValue` through a ref of the element.\r\n\r\nTypeScript is also missing the definition for `defaultValue` on `HTMLSelectElement` type\r\n\r\nLink to code example: https://codesandbox.io/s/elated-orla-0p3dw7?file=/src/App.js\r\n\r\n## The current behavior\r\n`defaultValue` always returns undefined\r\n\r\n## The expected behavior\r\n`defaultValue`should return the defined value","state":"open","updated_at":"2022-10-11T07:21:39Z","created_at":"2022-09-18T15:43:51Z","creator_user_login":"antonio-costa"}
{"number":25292,"title":"perf: improved the performance of the critical function to escape text","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nHi, I was interesting to know how React SSR works internally and how I can improve a performance. And I found 1 of the issue that I can improve. `escapeHtml` function very critical to render, and we can improve it to 7-10%. As a result, amount of RPS SSR will improve ~1%\r\n\r\n- [esbench](https://esbench.com/bench/63261fb26c89f600a5701c64)\r\n- [ssr test file](https://gist.github.com/Tom910/ee28df0f97ae723d709ddf55df11a675)\r\n\r\nMain brunch\r\n\r\n```\r\nautocannon --duration=60 --connections=100 http://localhost:3000\r\nRunning 60s test @ http://localhost:3000\r\n100 connections\r\n\r\n\r\n┌─────────┬───────┬───────┬───────┬───────┬──────────┬─────────┬────────┐\r\n│ Stat    │ 2.5%  │ 50%   │ 97.5% │ 99%   │ Avg      │ Stdev   │ Max    │\r\n├─────────┼───────┼───────┼───────┼───────┼──────────┼─────────┼────────┤\r\n│ Latency │ 37 ms │ 37 ms │ 74 ms │ 75 ms │ 39.87 ms │ 9.26 ms │ 128 ms │\r\n└─────────┴───────┴───────┴───────┴───────┴──────────┴─────────┴────────┘\r\n┌───────────┬───────┬───────┬─────────┬─────────┬─────────┬─────────┬───────┐\r\n│ Stat      │ 1%    │ 2.5%  │ 50%     │ 97.5%   │ Avg     │ Stdev   │ Min   │\r\n├───────────┼───────┼───────┼─────────┼─────────┼─────────┼─────────┼───────┤\r\n│ Req/Sec   │ 2233  │ 2369  │ 2449    │ 2547    │ 2476.37 │ 57.93   │ 2233  │\r\n├───────────┼───────┼───────┼─────────┼─────────┼─────────┼─────────┼───────┤\r\n│ Bytes/Sec │ 65 MB │ 69 MB │ 71.3 MB │ 74.2 MB │ 72.1 MB │ 1.69 MB │ 65 MB │\r\n└───────────┴───────┴───────┴─────────┴─────────┴─────────┴─────────┴───────┘\r\n\r\nReq/Bytes counts sampled once per second.\r\n# of samples: 60\r\n\r\n149k requests in 60.02s, 4.33 GB read\r\n```\r\n\r\n\r\nCurrent brunch\r\n```\r\nautocannon --duration=60 --connections=100 http://localhost:3000\r\nRunning 60s test @ http://localhost:3000\r\n100 connections\r\n\r\n\r\n┌─────────┬───────┬───────┬───────┬───────┬──────────┬─────────┬────────┐\r\n│ Stat    │ 2.5%  │ 50%   │ 97.5% │ 99%   │ Avg      │ Stdev   │ Max    │\r\n├─────────┼───────┼───────┼───────┼───────┼──────────┼─────────┼────────┤\r\n│ Latency │ 36 ms │ 37 ms │ 74 ms │ 74 ms │ 39.37 ms │ 9.26 ms │ 143 ms │\r\n└─────────┴───────┴───────┴───────┴───────┴──────────┴─────────┴────────┘\r\n┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐\r\n│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev   │ Min     │\r\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤\r\n│ Req/Sec   │ 2263    │ 2409    │ 2479    │ 2581    │ 2508.47 │ 58.94   │ 2263    │\r\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤\r\n│ Bytes/Sec │ 65.9 MB │ 70.1 MB │ 72.2 MB │ 75.2 MB │ 73 MB   │ 1.71 MB │ 65.9 MB │\r\n└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┘\r\n\r\nReq/Bytes counts sampled once per second.\r\n# of samples: 60\r\n\r\n151k requests in 60.02s, 4.38 GB read\r\n```\r\n\r\n## How did you test this change?\r\n\r\nCode that I changed had tests\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-09-20T08:46:17Z","created_at":"2022-09-18T09:52:52Z","creator_user_login":"Tom910"}
{"number":25282,"title":"Bug: onChange handler is lost between re-renders","body":"\r\n\r\n\r\nReact version: 18\r\nIn our application, we have a checkbox and a button on a page. The button opens a popup which in turn attaches a onClick event of type capture at body level.\r\nNow, when we click on the checkbox we observed the onChange handler never gets a chance to execute.\r\n\r\n## Steps To Reproduce\r\n1. Click on the button to open a popup.\r\n2. popup attaches a click handler at body level. This event is of type 'capture' to close the popup whenever some random click happens anywhere on the page. \r\n3. Now, if we click on the checkbox the body level click event is executed before the checkbox's onChange event.\r\n4. This click event in turn updates some state, which causes re-render of the checkbox component.\r\n5. popup is closed.\r\n6. The onChange event attached with the checkbox never got a chance to be executed. It is lost somewhere.\r\n\r\n[Link to code example:](https://codesandbox.io/s/cocky-moon-2tr7e8?file=/src/App.js)\r\n\r\n## The current behavior\r\nThe checkbox remains either checked or unchecked.\r\n\r\n## The expected behavior\r\nThe checkbox should get checked and unchecked with every other click.","state":"open","updated_at":"2022-10-31T13:18:01Z","created_at":"2022-09-16T17:06:45Z","creator_user_login":"subha84"}
{"number":25279,"title":"Bug: React-Core should support VirtualizedList instead of third-party packages.","body":"This is not a bug report, but I don't know how to reach someone to make decisions on React development.\r\nReact really need Virtualized List, but every third-party package is not good enough in comparison with [React-Native FlatList](https://reactnative.dev/docs/flatlist).\r\nIt required a lot of effort to use, and we have bugs that could never get solved, it seems the authors stopped to support these packages, or it could take months to make 1-2 commits.\r\n\r\n- https://www.npmjs.com/package/react-window - 1M+ downloads \r\n- https://www.npmjs.com/package/react-virtualized - 1M+ downloads\r\n- https://www.npmjs.com/package/react-virtual - 250k+ downloads\r\n- https://www.npmjs.com/package/react-infinite-scroll-component = 500k+ downloads\r\n- https://www.npmjs.com/package/react-virtuoso\r\n- and a lot of other libraries ...\r\n\r\nI tried to use 3-4 packages on my website. It works when we know the size of items, but if we don't know then almost these packages get weird bugs. And the Window scroller wasn't supported or in a bad state in these packages.\r\n\r\nP/S: A common problem is these packages often have bugs with dynamic size DOM and window scroller and iOS.\r\n","state":"open","updated_at":"2022-10-22T08:13:10Z","created_at":"2022-09-16T11:36:16Z","creator_user_login":"meotimdihia"}
{"number":25276,"title":"Bug: ","body":"#### React 17 not mimic autocomplete up to default browser behaviour.\r\n\r\nDefault Chrome autocomplete mimic user behaviour: on suggestion pick it fires focus event -> change event -> blur event for every changed field.\r\n<img src=\"https://user-images.githubusercontent.com/70579361/190426092-41d9ac66-b84e-484d-bbb6-206038465d60.png\" width=\"300px\">\r\n\r\n### React 16\r\nPlayground https://jsfiddle.net/akany/0x4qL8np/10/.\r\nPick chrome suggestion, check console logs.\r\nEach field has focus/change/blur events in chain.\r\n![image](https://user-images.githubusercontent.com/70579361/190428487-f1e37faa-8bc2-43ed-a1a4-1f086a64fc4b.png)\r\n\r\n\r\n### React 17\r\nPlayground https://jsfiddle.net/akany/0x4qL8np/11/\r\nPick chrome suggestion, check console logs.\r\nEach field has only change event.\r\n![image](https://user-images.githubusercontent.com/70579361/190425279-e660f7c5-24c2-400b-bdbb-cd866ea4eb7c.png)\r\n\r\n### How to setup Chrome suggestion\r\nNeed to add chrome address. There are many articles about it, one of it https://www.tech-recipes.com/internet/google/google-chrome/how-to-add-an-address-in-google-chrome/. \r\n\r\n## The current behavior\r\nSuggestion event chain is not up to browser, just change events are fired. React 17+\r\n\r\n## The expected behavior\r\nSuggestion event chain is up to browser: focus -> change -> blur.","state":"open","updated_at":"2022-10-08T09:50:28Z","created_at":"2022-09-15T14:28:38Z","creator_user_login":"bogdanoliinyk"}
{"number":25273,"title":"Bug: inconsistent auto batching","body":"I have to `useEffect`s in my code. in first one I have two setState, the second one is in `then` of `Promise.resolve`.\r\nand in the second useEffect I make a request by apollo client.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. rerun app to see different logs\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/confident-http-m4fey5?file=/src/App.js:623-641\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn some run the output of logs is:\r\n![image](https://user-images.githubusercontent.com/20992734/190408195-149b12ce-0adc-4e6f-90eb-3631aa5a36f9.png)\r\nand in some other run:\r\n![image](https://user-images.githubusercontent.com/20992734/190408331-e5b11f87-78c1-4cb1-b756-c12964d430ba.png)\r\n\r\n## The expected behavior\r\nI expected react to does not batch `setState(\"bb\")` and `setState(\"aa\")` at all and always logs like this:\r\n![image](https://user-images.githubusercontent.com/20992734/190408195-149b12ce-0adc-4e6f-90eb-3631aa5a36f9.png)\r\n\r\nbut I don't know why react in some run batch two setStates and in some other run doesn't batch. I don't know there is any problem with apollo because with `fetch` react always doesn't batch these to setStates","state":"open","updated_at":"2022-09-18T00:08:30Z","created_at":"2022-09-15T12:54:43Z","creator_user_login":"amirqasemi74"}
{"number":25264,"title":"Add \"Support Armenia\" banner on reactjs.org","body":"So as Azerbaijan invaded Armenia on the night of September 13th, is it possible to add a banner for Support Armenia on the home page? That would help us spread awareness against blood-thirsty oil dictatorship states as Azerbaijan is.\n\nI'll put #23375 PR and @gaearon [comment](https://github.com/reactjs/reactjs.org/issues/4433#issuecomment-1060759889) as a reference here","state":"open","updated_at":"2022-09-14T10:27:41Z","created_at":"2022-09-14T10:27:41Z","creator_user_login":"edgarkhanzadyan"}
{"number":25262,"title":"[DevTools Bug]: Labels are cut off on Firefox on Linux (Fedora 36)","body":"### Website or app\r\n\r\nhttps://codesandbox.io/s/hopeful-fog-nxqwgw\r\n\r\n### Repro steps\r\n\r\nWhen using React DevTools on **Firefox 104.0.1 (64-bit)** on **Linux (Fedora 36 with Gnome Desktop 42)** the key labels on the right hand pane are cut off. See screenshot. I'm guessing this is likely because of fonts being used on Linux are different from Windows and macOS. I haven't noticed this problem in Chrome at all, and I don't think it happens on Windows and macOS.\r\n\r\nThis only happens to editable orange/keys in the props panel, when the keys are black/read only, they render just fine.\r\n\r\nI also noticed that React devtools doesn't honor the Firefox advanced font settings like the rest of devtools does. Having the ability to select a different browser monospace font will allow for a workaround to this issue.\r\n\r\n![Screenshot from 2022-09-14 09-33-08](https://user-images.githubusercontent.com/612695/190090608-602bd0d8-3557-492e-a2d9-59b16372f522.png)\r\n\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-03-01T18:55:40Z","created_at":"2022-09-14T07:38:20Z","creator_user_login":"sparkbuzz"}
{"number":25246,"title":"fix: blur event handler should be triggered before compoent unmount","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n- fix: #25194 blur event handler should be triggered before compoent unmount\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\ntest case:\r\npackages/react-dom/src/__tests__/ReactDOMRoot-test.js L512~567\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-10-04T10:04:16Z","created_at":"2022-09-13T02:52:34Z","creator_user_login":"kiner-tang"}
{"number":25233,"title":"feat: use shallowEqual from export module and add some test cases","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nuse shallowEqual from export module and add some test cases\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nadd some test cases for shallowEqual to make sure it's accurate\r\n","state":"open","updated_at":"2022-10-04T10:04:16Z","created_at":"2022-09-10T14:53:03Z","creator_user_login":"kiner-tang"}
{"number":25232,"title":"feat(eslint-plugin-react-hooks): support new eslint config system","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nSupporting eslint's new config system of eslint.\r\n\r\nNote that the legacy config system always has `require()`d plugins and sharable configs, while the new system is ESM.\r\n\r\nThus [conditional export](https://nodejs.org/api/packages.html#conditional-exports) is great to keep compatibility.\r\n\r\n`plugin:` protocol(e.g. `plugin:react-hooks/recommended`) is not valid any more. Thus the new plugin doesn't have `configs`.\r\n\r\nA sharable config for the new config system is exported as `eslint-plugin-react-hooks/recommended`.","state":"open","updated_at":"2022-10-11T09:04:43Z","created_at":"2022-09-10T13:29:22Z","creator_user_login":"jjangga0214"}
{"number":25231,"title":"use-sync-external-store: Add `exports` field to `package.json`","body":"## Summary\r\n\r\nAlternate to https://github.com/facebook/react/pull/24440. I needed a CI build to test the published package\r\n\r\n## How did you test this change?\r\n\r\n- [x] CI\r\n- [x] Testing all entrypoints https://github.com/eps1lon/react-pr-25231-uses-exports-field-test\r\n    ```js\r\n    import A from \"use-sync-external-store\"\r\n    import B from \"use-sync-external-store/with-selector\"\r\n    import C from \"use-sync-external-store/shim\"\r\n    import D from \"use-sync-external-store/shim/index.native\"\r\n    import E from \"use-sync-external-store/shim/with-selector\"\r\n    import F from \"use-sync-external-store/package.json\" assert { type: \"json\" };\r\n    ```","state":"open","updated_at":"2022-11-09T19:45:57Z","created_at":"2022-09-10T12:15:44Z","creator_user_login":"eps1lon"}
{"number":25227,"title":"Test case for potentially undesirable combo of useMemo w setState-in-render","body":"## Summary\r\n\r\nThis came out of an offline discussion about `useMemoCache()` (#25143) and whether, after a setState in render, the cache should reset back to that of the current fiber or continue using the wip cache. @acdlite pointed out that `useMemo()` does the equivalent of the latter, ie reusing the wip memo cache, but I realized that this can break memoization of child components in some edge cases (ie, cause child components to rerender/recompute memoized values due to unnecessarily breaking referential equality in the parent).\r\n\r\nA render pass that does _not_ contain a setState will always compute useMemo values relative to the current fiber: this means that if the dependencies have not changed, the computed memo value will be the same as the object that was computed and passed to children (and that thefore is present as the dependency value in their useMemo deps arrays):\r\n* Parent renders with input@v0, computes value@v0\r\n* Parent updates with input@v0, _reuses_ value@v0\r\n  * downstream memo caches don't recompute bc their input is the same\r\n\r\nHowever, a render pass that _does_ have a setState will (currently) reuse the work-in-progress useMemo values. Even if the input is reset to its last committed value, dependencies have already been reset:\r\n* Parent renders with input@v0, computes value@v0\r\n* Parent updates with input@v1, computes value@v1 (at this point the value@v0 is lost). SetState resets back to input@v0\r\n* Parent updates with input@v0, _recomputes_ value@v2 (which is structurally equal, but !== to, value@v0\r\n  * oops, downstream memo caches recompute bc their input is accidentally different\r\n\r\nThe current behavior is in some senses reasonable: a setState in render that happens to reset back to the same state as the last commit seems very unlikely in practice, whereas a setState in render having to redo the same (new) computation again seems likely. However, recomputing a single new value an extra time is less costly than breaking memoization caches for an entire subtree, so it's worth considering.\r\n\r\n## How did you test this change?\r\n\r\n`yarn test` (the new test is expected to fail)","state":"open","updated_at":"2022-09-09T22:13:01Z","created_at":"2022-09-09T22:05:48Z","creator_user_login":"josephsavona"}
{"number":25219,"title":"feat: re-export some function from other module","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nre-export some function from other module in `React.js`\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nThe logic has not changed, so no testing is required","state":"open","updated_at":"2022-09-09T14:35:37Z","created_at":"2022-09-09T13:50:13Z","creator_user_login":"kiner-tang"}
{"number":25218,"title":"Bug: <img/> renders twice in firefox with react 18","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Insert a tag  `<img/>` with src\r\n2. Go to **Firefox** inspect tool to the tab network\r\n3. Reload the page and watch image request in network\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/unruffled-jerry-9hli44?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThere are two request for image in firefox, image renders twice\r\n<img width=\"1792\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41840872/189360604-c1f1451a-be7f-497d-b9db-9d18f98af607.png\">\r\n\r\n\r\n## The expected behavior\r\nThere is one request and one render in firefox","state":"open","updated_at":"2023-07-07T12:24:59Z","created_at":"2022-09-09T13:25:28Z","creator_user_login":"kapibaara"}
{"number":25216,"title":"Warn when going to/from 0 hook","body":"## Summary\r\nFor fixing #24438.  \r\n\r\n## How did you test this change?\r\n\r\nyarn test --watch ReactHooksWithnoopRenderer (--variant=true/false)\r\nyarn test --prod\r\nCI jobs","state":"open","updated_at":"2022-09-17T00:11:36Z","created_at":"2022-09-09T06:11:19Z","creator_user_login":"tyao1"}
{"number":25212,"title":"Feature Request: Event Modifiers support","body":"I'm moving from Vue to React recently, and one of the few practical features I miss is native **[Event Modifiers](https://vuejs.org/guide/essentials/event-handling.html#event-modifiers)** support.\r\n\r\nVue supports several types of native events that make development very convenient. The ones I miss the most are:\r\n\r\n * **.stop**: same as `e.stopPropagation()`.\r\n * **.prevent**: same as `e.preventDefault()`;\r\n\r\n**Pros:**\r\n\r\n- Allows the function defined in the handle to perform its main function without worrying about the event flow;\r\n- Facilitates the reuse of callbacks that control the flow differently, but achieve the same result;\r\n\r\n```js\r\nfunction handleClick(e) {\r\n    console.log('ok');\r\n}\r\n\r\nfunction handleClickWithStop(e) {\r\n    e.stopPropagation();\r\n    handleClick(e);\r\n}\r\n```\r\n\r\n```javascriptx\r\n<div onClick={handleClickWithStop}>must stop</div>\r\n<div onClick={handleClick}>must continue</div>\r\n```\r\n\r\nBecomes:\r\n\r\n```js\r\nfunction handleClick(e) {\r\n    console.log('ok');\r\n}\r\n```\r\n\r\n```javascriptx\r\n<div onClick.stop={handleClick}>must stop</div>\r\n<div onClick={handleClick}>must continue</div>\r\n```\r\n\r\n**Cons:**\r\n\r\nThe only thing I can think of being \"against\" is that it might increase the cost of converting from JSX to native JS. Although I think this only happens during the build process. Right?\r\n\r\nDuring the conversion process, events will need to identify the `.indexOf('.')` and then apply the necessary wrappers:\r\n\r\n```js\r\nReact.createElement(\r\n    'div',\r\n    { onClick: function (e) {\r\n          e.stopPropagation();\r\n          handleClick(e);\r\n      } }\r\n)\r\n```","state":"open","updated_at":"2022-09-11T19:28:11Z","created_at":"2022-09-08T16:56:26Z","creator_user_login":"rentalhost"}
{"number":25205,"title":"Bug: exhaustive-deps false positives?","body":"This is a re-opening of #22581. I had to step away from the project for a while and so I didn't respond before it was closed, my apologies. As I mentioned there I did look through the various suggestions in #14920 and nothing seemed to be relevant to my case.\r\n\r\nThe reply in my original issue helped me fix a few things, but the linter still suggests things that break the code, and I'm still unclear on a few parts of the reply.\r\n\r\nRefresher: I have a Component, StatusBox. All it does is pop up a little overlay to tell you that, for example, something was submitted. If there's a timeout, after a timeout, it fades away, otherwise it stays until someone clicks on it.\r\n\r\nAs it stands my code now looks like:\r\n\r\n```javascript\r\n\r\nlet innerTimeout\r\nlet outerTimeout\r\n\r\n/*\r\n * A box for appearing status messages\r\n */\r\nconst StatusBox = ({content, setContent, timeout, type}) => {\r\n    const div = React.useRef(null)\r\n    const [opacity, setOpacity] = React.useState(0)\r\n    const [className, setClassName] = React.useState(type)\r\n\r\n    const handleClick = e => {\r\n        e.preventDefault()\r\n        clear()\r\n    }\r\n\r\n    const clear = React.useCallback((e) => {\r\n        console.debug(\"StatusBox: Clearing opacity, currently:\", opacity)\r\n        setOpacity(0)\r\n        /*\r\n         * If we remove the class now, it'll cut short the fade-out.\r\n         * If we remove the text now, it'll disappear abruptly before the\r\n         * fade-out.\r\n         *\r\n         * HOWEVER, if we DON'T clear the text, then the overlay is still\r\n         * there, blocking the page (in the case of a bigger status), so\r\n         * we need to clear it after the transition. So get the timing of\r\n         * that, and add 50ms just to be safe. And while we're at it,\r\n         * we can clear the classes...\r\n         */\r\n        let t = window.getComputedStyle(div.current).transitionDuration\r\n        console.debug(\"StatusBox: computed transition\", t)\r\n        // that's something like 0.4s, we need to drop the 's', convert\r\n        // to a number, and the turn into milliseconds. Trying to use a\r\n        // string in a math equation causes JS to cast it for you\r\n        t = t.replace('s', '') * 1000\r\n        t += 50\r\n        console.debug(\"StatusBox: Setting timeout to clear type/content in\", t)\r\n        innerTimeout = window.setTimeout(() => {\r\n            setContent(null)\r\n        }, t)\r\n    }, [setContent, opacity])\r\n\r\n    React.useEffect(() => {\r\n        console.debug(\r\n            `StatusBox: in useEffect, timeout ${timeout}`\r\n        )\r\n        // If we're setting content to null, we've already set the opacity\r\n        // so we can return null to not re-render\r\n        if (content == null) {\r\n            return null\r\n        }\r\n\r\n        // otherwise, we need to appear!\r\n        console.debug(\"StatusBox: setting opacity to 1\")\r\n        setOpacity(1)\r\n\r\n        // if we have no timeout, we're done\r\n        if (timeout == null) {\r\n            return\r\n        }\r\n\r\n        // otherwise, set the timeout\r\n        console.debug('StatusBox: setting timeout for', timeout)\r\n        // nuke any timeout already there\r\n        if (innerTimeout) {\r\n            console.debug(\"clearing inner:\", innerTimeout)\r\n            window.clearTimeout(innerTimeout)\r\n        }\r\n        if (outerTimeout) {\r\n            console.debug(\"clearing outer:\", innerTimeout)\r\n            window.clearTimeout(outerTimeout)\r\n        }\r\n        outerTimeout = window.setTimeout(clear, timeout)\r\n    }, [content])\r\n\r\n    return <div\r\n        className={type}\r\n        ref={div}\r\n        id='status'\r\n        style={{opacity:opacity}}\r\n        onClick={handleClick}\r\n    >{content}</div>\r\n}\r\n```\r\n\r\nThis takes into account the suggestion to move `clear` to be a `useCallback`. However, now the linter wants both `opacity` and `setContent` in the deps list of the `useCallback`, and then `content`, `clear`, and `timeout`, in the deps list of `useEffect`. That leads to an infinite loop in the clearing of the box and it never clears.\r\n\r\nI think @keanemind was trying to address that with:\r\n\r\n> To fix the stale clear problem, you can put clear into the dependencies array and then have your effect clean up by cancelling the `outerTimeout`. Now, when clear changes, the timeout with the stale clear will be cancelled, and then the effect will run again. And by using `useCallback` on clear, you can have clear change only when `setContent` changes.\r\n\r\nBut I didn't follow that. I... do clear `outerTimeout` in the `useEffect` already. I tried moving the clear to the very top of the `useEffect` in case you meant I might not clear it in some cases, but that didn't fix it.\r\n\r\n@keanemind also asked:\r\n\r\n> By the way, is there a reason you don't unmount the overlay after the animation is over, rather than setting the content to null? That part is a little odd to me.\r\n\r\nI briefly used class components when I was learning React, but quickly found that the recommendation was to use function components, and in function components I ... don't know how to unmount things.\r\n\r\nBut also, if I unmounted it, wouldn't that `<StatusBox>` not be there the next time `setContent` was called?\r\n\r\nThanks, and apologies in advance if I'm missing obvious stuff","state":"open","updated_at":"2022-09-07T20:46:42Z","created_at":"2022-09-07T19:50:49Z","creator_user_login":"jaymzh"}
{"number":25201,"title":"Bug: Latest Chrome extension is not working with React Developer Tools","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Update to Chrome Version 104.0.5112.101\r\n2. Uninstall / Reinstall React Developer Tools (and enable URL reading per README)\r\n3. Navigate to localhost:xxxx of a React Application\r\n4. Inspect element\r\n5. React Components tab is blank \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-09-07T15:33:59Z","created_at":"2022-09-07T15:33:59Z","creator_user_login":"alyshahudson"}
{"number":25198,"title":"fix: crash when console is frozen","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nFix React crashes when in the dev mode and `console` is frozen.\r\n\r\n## How did you test this change?\r\n\r\nTested in the browser console.\r\n","state":"open","updated_at":"2023-06-11T10:22:12Z","created_at":"2022-09-07T04:27:58Z","creator_user_login":"Jack-Works"}
{"number":25194,"title":"Bug: `onBlur` is not called when a focused element is unmounted","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to https://codesandbox.io/s/adoring-flower-xk881j?file=/src/App.js\r\n2. Click on the button\r\n3. Notice that there is no console output when the button is unmounted\r\n\r\nLink to code example: https://codesandbox.io/s/adoring-flower-xk881j?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nWhen a focused element is unmounted `onBlur` is never called.\r\n\r\n## The expected behavior\r\n\r\nUsing vanilla HTML+JS when a focused DOM element is removed, the `blur` event is called. Here is the example: https://codesandbox.io/s/youthful-ptolemy-o8ulop?file=/src/index.js\r\n","state":"open","updated_at":"2023-06-22T12:07:50Z","created_at":"2022-09-06T14:03:24Z","creator_user_login":"ling1726"}
{"number":25192,"title":"Bug: ErrorBoundary won't caught error in useEffect callback while ErrorBoundary unmount with it's children","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: **18.2.0**\r\n\r\n## Steps To Reproduce\r\n\r\n```jsx\r\nfunction App() {\r\n  const [isShow, setIsShow] = React.useState(true);\r\n  function setError() {\r\n    setIsShow(false);\r\n  }\r\n  return (\r\n    <div>\r\n      {isShow && <PageWrapper />}\r\n      <div onClick={setError}>setError</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass PageWrapper extends React.Component {\r\n  static getDerivedStateFromError() {}\r\n  componentDidCatch(err) {\r\n    console.log(\"catch err: \", err);\r\n  }\r\n  render() {\r\n    return <Page />;\r\n  }\r\n}\r\n\r\nfunction Page() {\r\n  React.useEffect(() => {\r\n    return () => {\r\n      throw new Error(\"sorry!\");\r\n    };\r\n  });\r\n  return <div>I m page</div>;\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />)\r\n```\r\n\r\n1. click **setError**.Unmount `<PageWrapper>` along with `<Page>`, then `<Page>` threw an error in useEffect callback.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nErrorBoundary `<PageWrapper>` won't caught error thrown by `<Page>` useEffect callback.So all the React Tree is dropped.\r\n\r\nBut in React 17, `<PageWrapper>` caught the error.And the React Tree remain exists.\r\n\r\n## The expected behavior\r\n\r\nCatch the error like React 17.\r\n\r\nSo, is that React18 new behavior? Or is a bug？","state":"open","updated_at":"2023-02-24T03:33:45Z","created_at":"2022-09-06T09:18:14Z","creator_user_login":"Chen-jj"}
{"number":25191,"title":"Bug: is the current `useSyncExternalStore` batching & flushing behaviour intended?","body":"React version: 18\r\n\r\nLink to code example:\r\n\r\n[CodeSandbox](https://codesandbox.io/s/uses-behaviour-react18-w5oy6r?file=/src/App.tsx)\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nLet's assume we have a `increment` function that first increments a local value, then a `uSES` value and then another local value like this:\r\n\r\n```js\r\nfunction increment() {\r\n    setState1((x) => x + 1);\r\n    setUsesState((x) => x + 1);\r\n    setState2((x) => x + 1);\r\n  }\r\n```\r\n\r\nNow, there would be two ways this could behave that would be \"intuitive for me\":\r\n\r\n1. everything is batched: `[state1, usesState, state2]` goes from `[0,0,0]` to `[1,1,1]`\r\n2. it batches until the \"sync update\" flushes the current batch: `[state1, usesState, state2]` goes from `[0,0,0]` to `[1,1,0]` to `[1,1,1]`\r\n\r\n\r\n## The current behavior\r\n\r\nNow, actual behaviour is different in React 18, depending on the \"mode\" React is currently in.\r\n\r\n1. in an event handler, everything is batched `[0,0,0]` to `[1,1,1]` - no problem here\r\n2. outside an event handler, the `uSES` setter is flushed first, then the local state changes are batched. `[0,0,0]` becomes `[0,1,0]` becomes `[1,1,1]` - this is very unintuitive for me.\r\n2. even inside a manual call wrapped in `unstable_batchedUpdates`, we go `[0,0,0]` -> `[0,1,0]` -> `[1,1,1]`\r\n\r\nPoint 3 means that there is actually no way to even manually batch an update by `uSES` - but looking at point 1, React sometimes does so internally.\r\n\r\nIt seems that even in the non-batched situations, React does *some* batching: Calling `setUsesState` twice before calling `setState2` will not lead to a `[0,0,0]` -> `[0,1,0]` -> `[0,2,0]` -> `[1,2,1]` situation, but to `[0,0,0]` -> `[0,2,0]` -> `[1,2,1]`\r\n\r\nUp until now we had assumed that `uSES` would always behave like in 1., and we were only made aware of this by bug reports on `react-redux`.  \r\n\r\nIs this intended behaviour or a bug?\r\n\r\nThere might be some high priority update thing with a transition that I am missing here though - but either way this feels very breaking from older behaviour to me - and yes, I know that `batchedUpdates` has the `unstable` prefix ;)","state":"open","updated_at":"2023-02-20T13:37:02Z","created_at":"2022-09-05T11:14:53Z","creator_user_login":"phryneas"}
{"number":25178,"title":"[DevTools Bug]: useSyncExternalStore adds 1 to subsequent hook's number in Profiler","body":"### Website or app\n\nhttps://codesandbox.io/s/sweet-fast-huvy9e?file=/src/App.tsx\n\n### Repro steps\n\n1. Open the sandbox in Google Chrome. Notice that the App component in App.tsx calls useSyncExternalStore, followed by useState. Lastly, it has an effect that simply toggles the state value every second so that it's easy to profile state changes without interacting with the UI.\r\n2. Open the rendered page in a new window and inspect it in Chrome DevTools.\r\n3. Open Components tab, select the App component, and notice that useState hook is `#2`. ![image](https://user-images.githubusercontent.com/1012600/188234380-2d4a5dee-3aa5-46ae-b919-f3cbe276d741.png)\r\n4. Switch to Profiler tab and profile the page for a couple of seconds.\r\n5. Notice that \"Why did this render?\" section says \"Hook **3** changed\". The number should be 2. ![image](https://user-images.githubusercontent.com/1012600/188236070-103563ca-ae0c-45b1-af58-c397fced98c4.png)\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-04-25T15:56:22Z","created_at":"2022-09-02T21:14:12Z","creator_user_login":"AlexTalis"}
{"number":25177,"title":"Bug: ","body":"I have the following code:\r\n\r\n```js\r\nimport React, { useRef } from 'react';\r\n\r\nexport default function FormDialog() {\r\n  const inputRef = useRef();\r\n  return (\r\n    <div>\r\n      <input\r\n        ref={inputRef}\r\n        onBlur={() => {\r\n          inputRef.current?.focus();\r\n        }}\r\n        autoFocus \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\nIt's a simple input with ref, it must be always focused no matter what.\r\nIt works great if you tried it in chrome, or any chromium browser such as Brave browser. \r\n\r\nbut It doesn't work in Firefox.\r\n\r\nHere's a StackBlitz instance that you can use, try to open it in Firefox and try to open it in chrome and see the difference:\r\nhttps://stackblitz.com/edit/react-ts-khzbbk?file=App.tsx\r\n\r\nHere's are my info:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/vqlcL.png\r\n  [2]: https://i.stack.imgur.com/UP10x.png\r\n\r\nIs it a browser related issue? I think it's related to react, because Firefox supported the `.focus()` method since the B.C.E. It's impossible to be a Firefox problem\r\n\r\none more info:\r\n\r\nI'm using React 18, the latest version as of 2-september-2022","state":"open","updated_at":"2022-09-06T21:41:41Z","created_at":"2022-09-02T16:21:07Z","creator_user_login":"samislam"}
{"number":25168,"title":"Bug:  can't get the correct fiberNode.child in classComponent","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/priceless-jerry-4ph5q0?file=/src/App.js:0-1160\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nthis._reactInternals.child is null\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-09-01T10:42:35Z","created_at":"2022-09-01T08:29:29Z","creator_user_login":"zhangbinalex"}
{"number":25165,"title":"[eslint-plugin-react-hooks] Allow standalone \"use\" for hook","body":"## Summary\r\n\r\nAs a ReScript user, various package & modules have simple name like `Module.use()` (to avoid repetition like `Module.useModule()` or worst (add \"something\" just to have code accepted by the rule)) or even generated code (eg: `use$1`, generated by rescript-relay). \r\n\r\n## How did you test this change?\r\n\r\nI am currently using this code as a patch (using patch-package) and it didn't bring any regression but allow rules-of-hook to be used in a considerable ReScript codebase.\r\n","state":"open","updated_at":"2022-09-08T14:34:18Z","created_at":"2022-08-31T21:06:10Z","creator_user_login":"MoOx"}
{"number":25161,"title":"Bug: Event.composedPath() and Event.composed missing ","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create any html element\r\n2. Add event listener\r\n3. Check if method and property exists\r\n\r\n\r\n## The current behavior\r\n```ts\r\nconst ExampleComponent = () => {\r\n    // composedPath is not a function\r\n    return <div onClick={(e) => { e.composedPath() }}></div>\r\n}\r\n\r\n```\r\n\r\n## The expected behavior\r\n```ts\r\nconst ExampleComponent = () => {\r\n    // composedPath should be found, as well as composed property\r\n    return <div onClick={(e) => { e.composedPath() }}></div>\r\n}\r\n\r\n```\r\n\r\n\r\nMDN Docs for the relevant feature: https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath\r\n","state":"open","updated_at":"2022-08-31T15:06:27Z","created_at":"2022-08-31T15:06:27Z","creator_user_login":"Wiz1991"}
{"number":25158,"title":"How React18 Stream SSR work in nested Component Fetch Data?","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.x.0\r\n\r\n# Background\r\nWe are working on a web framework that like NestJs, Remix.Recently, We are explore how apply  react18 stream SSR in ours framework.But we find an imported problem that may be effect fetch data speed in nested component. We want to known React Team wound to catch on it.\r\n\r\n# Serial Request in Suspense  nested Component\r\nIn [React18 Stream SSR demo](https://codesandbox.io/s/kind-sammet-j56ro?file=/server/render.js), the Lazy Component  delay resolve through a “throw” Promise. I know it can let React senses when the Component already fetched data in server.\r\n\r\nBut image a situation:\r\n```javascript\r\n// App.tsx\r\nconst Body = lazy(() => import('./components/Body'))\r\nconst App = () => {\r\n  return <div>\r\n    <h3>hello app</h3>\r\n    <Suspense fallback=\"body loading\">\r\n      <Body />\r\n    </Suspense>\r\n  </div>;\r\n}\r\n\r\n// Body.tsx\r\nconst Comments = lazy(() => import('./Comments'));\r\nconst Body = () => {\r\n  // mockFetch1 wound 'throw' promise util request data\r\n  const data = mockFetch1(async () => {\r\n    return fetch('/api/body');\r\n  })\r\n\r\n  return <div>\r\n    <h3>Body</h3>\r\n    <p>body data - {data}</p>\r\n    <Suspense fallback=\"comment loading\">\r\n      <Comments />\r\n    </Suspense>\r\n  </div>\r\n}\r\n\r\n// Comments.tsx\r\nconst Comments = () => {\r\n\t// mockFetch2 wound 'throw' promise util request data\r\n  const data = mockFetch2(async () => {\r\n    return fetch('http://mock.com/api/comments');\r\n  })\r\n\r\n  return <div>\r\n    <p>Comments data - {data}</p>\r\n  </div>\r\n}\r\n```\r\nWe can find that we can’t immediately launch `mockFetch2` when  `mockFetch1` is’t resolved.\r\n\r\nIn some extreme situation, the developer may nested many layers lazy Component in React.\r\n\r\nIt wound show user all page, even more slower than CSR.\r\n\r\nReact18 will solve it in the future? Or let developer avoid nested component by himself?\r\n\r\n## The current behavior\r\n\r\nThe React 18 Stream SSR serial  fetch data in server \r\n\r\n## The expected behavior\r\n\r\nThe React 18 Stream SSR parallel  fetch data in server \r\n\r\n\r\n","state":"open","updated_at":"2022-08-31T12:35:55Z","created_at":"2022-08-31T12:35:55Z","creator_user_login":"GiveMe-A-Name"}
{"number":25157,"title":"GitHub Workflows security hardening","body":"This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.\r\nIt is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.","state":"open","updated_at":"2022-11-30T22:56:44Z","created_at":"2022-08-31T11:04:13Z","creator_user_login":"sashashura"}
{"number":25150,"title":"improve compatibility for closure build","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\njava print some output to stderr, caused wrong error detect\r\n\r\n```console\r\n-- PLUGIN_ERROR (scripts/rollup/plugins/closure-plugin) --\r\nError: Picked up JAVA_TOOL_OPTIONS:  -Xmx3489m\r\n\r\n    at /workspace/react/scripts/rollup/plugins/closure-plugin.js:16:16\r\n    at ChildProcess.<anonymous> (/workspace/react/node_modules/google-closure-compiler/lib/node/closure-compiler.js:103:9)\r\n    at ChildProcess.emit (node:events:513:28)\r\n    at maybeClose (node:internal/child_process:1093:16)\r\n    at Process.ChildProcess._handle.onexit (node:internal/child_process:302:5)\r\nerror Command failed with exit code 1.                                                                       \r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n## How did you test this change?\r\n\r\nThis will fail: https://gitpod.io/#https://github.com/facebook/react\r\n\r\nThis works: https://gitpod.io/#https://github.com/facebook/react/pull/25150\r\n","state":"open","updated_at":"2022-09-30T07:14:46Z","created_at":"2022-08-28T05:06:07Z","creator_user_login":"gengjiawen"}
{"number":25149,"title":"Bug: react-hooks/exhaustive-deps false positive when use function with generic type variable in useEffect","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. use function with generic type in useEffect\r\n\r\ncode example:\r\n```ts\r\nfunction useBug<T>(val: T) {\r\n  const ref = useRef<T>(val)\r\n\r\n  const fn = () => {\r\n    const temp: T = ref.current // <-- if remove the generic type will be ok\r\n  }\r\n\r\n  useEffect(() => {\r\n    fn()\r\n  }, []) // <-- ESLint error: React Hook useEffect has a missing dependency: 'fn'.\r\n}\r\n```\r\n\r\npackage version:\r\n```\r\nnpmPackages:\r\n    @typescript-eslint/eslint-plugin: ^5.35.1 => 5.35.1 \r\n    @typescript-eslint/parser: ^5.35.1 => 5.35.1 \r\n    @typescript-eslint/scope-manager:  5.35.1 \r\n    @typescript-eslint/type-utils:  5.35.1 \r\n    @typescript-eslint/types:  5.35.1 \r\n    @typescript-eslint/typescript-estree:  5.35.1 \r\n    @typescript-eslint/utils:  5.35.1 \r\n    @typescript-eslint/visitor-keys:  5.35.1 \r\n    eslint: ^8.23.0 => 8.23.0 \r\n    eslint-plugin-react-hooks: ^4.6.0 => 4.6.0 \r\n```\r\n\r\nrelevant: [#20395](https://github.com/facebook/react/issues/20395)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n```\r\nReact Hook useEffect has a missing dependency: 'fn'. Either include it or remove the dependency array.\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo missing dependencies reported.\r\n","state":"open","updated_at":"2023-02-06T18:29:54Z","created_at":"2022-08-27T04:07:01Z","creator_user_login":"RThong"}
{"number":25134,"title":"Support Open Selected Component In IDE","body":"In current version. we can check selected component props and render stack in Components panel.\r\n![截屏2022-08-24 下午6 00 38](https://user-images.githubusercontent.com/45064281/186391046-7bee34a3-11ac-431f-8012-3bf09eb294d5.png)\r\n\r\nwe expect some way when i was click a component, it can autojump corresponding file in IDE, such as vscode or webstorm. ","state":"open","updated_at":"2022-08-24T10:05:59Z","created_at":"2022-08-24T10:05:59Z","creator_user_login":"edisonLzy"}
{"number":25133,"title":"Resilient component","body":"React18 has new `StrictMode` behaviour to ensure reusable state to prepare for future new feature.\r\n\r\nBut it didn't mention the release plan of the new feature.\r\n\r\nTo upgrade to React18, many might choose to just opt out from StrictMode instead of making the component all resilient (my team lean to this option), so my question is should I worry about the future **minor** releases contains this out of box feature break the app?","state":"open","updated_at":"2022-08-24T05:17:19Z","created_at":"2022-08-24T05:16:33Z","creator_user_login":"WillXing"}
{"number":25125,"title":"reduce the number of swaps when comparing in minHeap","body":"use once assignment, instead of swap when comparing in SchedulerMinHeap","state":"open","updated_at":"2022-08-27T10:54:18Z","created_at":"2022-08-21T15:06:13Z","creator_user_login":"shimeng28"}
{"number":25121,"title":"[ESLint] Treat useEvent retval as stable","body":"Seems like regardless of all other parts, this will still be true.\r\nThis would let me make the beta docs sandboxes working even if use a polyfill/stub.\r\n\r\nI could maybe wrap this in EXPERIMENTAL so it's only active for experimental releases of the plugin?","state":"open","updated_at":"2022-08-19T16:59:25Z","created_at":"2022-08-19T16:54:04Z","creator_user_login":"gaearon"}
{"number":25110,"title":"ReactART:-Added tests to be able to resize the component","body":"simple test add to increase the code coverage.","state":"open","updated_at":"2023-06-27T04:42:47Z","created_at":"2022-08-17T15:25:35Z","creator_user_login":"Biki-das"}
{"number":25109,"title":"Possible missed rule for eslint-plugin-react-hooks?","body":"## Summary\r\n\r\nRecreating #22044\r\n\r\nRebasing my fork triggered GitHub to close the original PR\r\n\r\n> ## Summary\r\n> It seems that it is possible to use react hooks as callback to functions like map, forEach or even custom hooks without getting a lint error. My hunch is that this could be an oversight as it is not allowed to use hooks inside callbacks.\r\n\r\n> Usage in the wild: https://twitter.com/erikras/status/1418487174866128897\r\n\r\n> ## Test Plan\r\n> I've added a failing test-case for the team to look at and decide on the intended behavior.","state":"open","updated_at":"2022-08-17T14:29:40Z","created_at":"2022-08-17T14:25:00Z","creator_user_login":"afzalsayed96"}
{"number":25108,"title":"Add more test cases for exhaustive deps check","body":"## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nThere seems to be a discrepancy in `eslint-plugin-react-hooks` when testing exhaustive deps. The following code reports an error:\r\n\r\n```js\r\nconst foo = bar || {}\r\n\r\nuseMemo(() => foo, [foo])\r\n```\r\n\r\nWhile the below code does not:\r\n\r\n```js\r\nconst {foo = {}} = bar\r\n\r\nuseMemo(() => foo, [foo])\r\n```\r\n\r\nI think that this might be a valid edge case which users might run into. Hence, I have added a few test cases as well as extended the eslint plugin logic to catch and report this scenario.","state":"open","updated_at":"2022-08-17T14:31:28Z","created_at":"2022-08-17T13:51:45Z","creator_user_login":"afzalsayed96"}
{"number":25097,"title":"Bug: Tap highlight effect on iPhone is throttled when button is rapidly tapped from React 17+","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nThe **tap highlight** effect (a.k.a. `-webkit-tap-highlight-color`) on iPhone has been throttled if I tap the button rapidly from `React 17+` (where events like `onClick`, `onTouchStart` work as expected no matter how quick I tap)\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a `<button>` element in React App\r\n2. Rapidly tap it on a mobile browser (any browser, my mobile is iPhone)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: (open in a mobile browser)\r\n[StackBlitz: React 18 (issue exists from 17+)](https://react-ts-vbcpff.stackblitz.io)\r\n[StackBlitz: React 16 (issue does not exist, just for comparison)](https://react-ts-zk1ats.stackblitz.io)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## Video\r\nProblem exists: `React18`, `React 17`\r\nWork as expected: `Vue`, `React 16`\r\n\r\n[Video](https://user-images.githubusercontent.com/45784210/184577724-fc473cbd-24a6-4164-ba68-18b0c2c455ec.mp4)\r\n\r\n## The current behavior\r\nFrom `React 17`, the **tap highlight** effect is throttled when the button is rapidly tapped, and events work as expected (as you can see from the counter)\r\n\r\n## The expected behavior\r\nWork as the same in `React 16`, but please note that `touch-action: manipulation` need to be added to the button in `v16` to prevent double-tap zoom-in.\r\n\r\n## Extra\r\nI've tried on `Safari`, `Firefox` and `Edge` on my `iPhone` and they behave the same.\r\n\r\nTested on `Vue`, `React`, `Vanilla JS` and the problem only exists from `React 17`.\r\n\r\nAnd also, `touch-action: manipulation` is not needed for `React 17+` but is required for all others to prevent double-tap zoom-in, so this behavior may be relevant to the problem.\r\n\r\nExtra guessing: Is it because event handling behavior changes at React 17? or the behavior of how react handling mobile page has been changed (since `touch-action: manipulation` is no longer needed after `v17`)?\r\n\r\nI cannot find any related topics in the community so I had to raise an issue here, thanks.","state":"open","updated_at":"2022-08-25T23:25:23Z","created_at":"2022-08-15T01:46:27Z","creator_user_login":"xsjcTony"}
{"number":25095,"title":"Bug: onBlur event does not fire if loss of focus occurred due to element being removed by react","body":"onBlur event does not fire if loss of focus occurred due to element being removed by react under certain circumstances - behaviour is not consistent.\r\n\r\nLink to code example 18.3.0-next-32baab38f-20220811: https://codesandbox.io/s/react-focus-bug-18-3-0-qc5tu8?file=/src/App.js\r\nLink to code example 18.0.0-fc46dba67-20220329: https://codesandbox.io/s/react-focus-bug-18-0-0-bp6qn1?file=/src/App.js\r\n\r\nFocus outside container:\r\n![image](https://user-images.githubusercontent.com/4957964/184534151-55455c88-b342-4d27-9faa-b1e8a089ea2d.png)\r\nButton has focus:\r\n![image](https://user-images.githubusercontent.com/4957964/184534161-71722c75-9ad2-400a-ae0a-ef00ab88bda0.png)\r\nButton clicked - resulting in react removing it from DOM ∴ focus is lost from container - but react does not fire onBlur event:\r\n![image](https://user-images.githubusercontent.com/4957964/184534175-1bab46ba-4473-4049-b931-c4af5de6f1b1.png)\r\n\r\nReact versions: 18.3.0-next-32baab38f-20220811, 18.0.0-fc46dba67-20220329\r\n\r\n## Steps To Reproduce\r\n\r\nSee code example\r\n\r\nLink to code example 18.3.0-next-32baab38f-20220811: https://codesandbox.io/s/react-focus-bug-18-3-0-qc5tu8?file=/src/App.js\r\nLink to code example 18.0.0-fc46dba67-20220329: https://codesandbox.io/s/react-focus-bug-18-0-0-bp6qn1?file=/src/App.js\r\n\r\n## The current behaviour\r\n\r\n- 18.3.0-next-32baab38f-20220811:\r\n  - Chrome Dev macOS Version 105.0.5176.3:\r\n    - Keyboard Activation: No onBlur event fires on button nor parent \r\n    - Mouse Activation: No onBlur event fires on button nor parent \r\n  - Safari macOS Version 15.4:\r\n    - Keyboard Activation: No onBlur event fires on button nor parent \r\n    - Mouse Activation: onBlur event fires on button and parent \r\n\r\n- 18.0.0-fc46dba67-20220329:\r\n  - Chrome Dev macOS Version 105.0.5176.3:\r\n    - Keyboard Activation: onBlur event fires on button and parent \r\n    - Mouse Activation: onBlur event fires on button and parent  \r\n  - Safari macOS Version 15.4:\r\n    - Keyboard Activation: No onBlur event fires on button nor parent \r\n    - Mouse Activation: onBlur event fires on button and parent \r\n\r\nSee code example for more details\r\n\r\n## The expected behaviour\r\nonBlur events fire consistently\r\n","state":"open","updated_at":"2023-02-14T23:13:23Z","created_at":"2022-08-14T11:32:03Z","creator_user_login":"reubn"}
{"number":25093,"title":"Bug: Virtuallists/grids are flickering on scroll with react 18","body":"Virtual lists or grids are flickering when scrolling fast with `createRoot(root).render()`, but do not flicker when using `ReactDOM.render()`.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Choose your favorite virtual-list/grid and a sufficiently big dataset\r\n2. Render the list once with `createRoot(root).render()` and once with `ReactDOM.render()`\r\n3. Scroll both lists/grids fast.\r\n\r\nGif:\r\n![VirtualListFlicker](https://user-images.githubusercontent.com/82407507/184510712-a8d8f731-3998-4722-98d6-c3e9a37c9416.gif)\r\n_(Tested in chrome and firefox)_\r\n\r\nLink to code example:\r\n\r\n[Example with a simple virtual list.](https://codesandbox.io/s/root-render-vs-dom-render-without-dependencies-londol)\r\n\r\n[Example with a grid from react-window.](https://codesandbox.io/s/root-render-vs-dom-render-vt4vk1)\r\n\r\n## The current behavior\r\n\r\nVirtual lists/grids are flickering when rendered with `createRoot(root).render()`.\r\n\r\n## The expected behavior\r\n\r\nSame behavior as `ReactDOM.render()`.","state":"open","updated_at":"2023-08-18T07:38:04Z","created_at":"2022-08-13T21:15:12Z","creator_user_login":"mirco-s"}
{"number":25087,"title":"[DevTools][Draftish] Use original window methods instead of allowing overrides","body":"Certain apps will intercept and override window methods to do things like logging. When the override functions aren't implemented correctly, however, it breaks DevTools because the DevTools backend shares the same window object as the app. This is a proof of concept implementation that called the original window methods for `addEventListener` and `removeEventListener` instead of the overridden one.\r\n\r\n","state":"open","updated_at":"2022-08-12T20:23:07Z","created_at":"2022-08-12T03:35:12Z","creator_user_login":"lunaruan"}
{"number":25082,"title":"useTransition should optionally also consider nested suspense boundaries","body":"React version: 18.2.0\r\n\r\n## Background\r\nWe are working on a web framework that can be used to build highly personalized and data-driven applications. A page that is rendered by the framework consists of a tree of composable, declarative and self-sufficient widgets. A widget can be seen as a mini-application that specifies its own data dependencies and behavior. Since the widgets are self-sufficient, it gives us lots of flexibility to choose which widgets should be shown on page and how they are arranged. It allows us to have personalized pages or layouts per user depending on certain criteria, e.g. their browsing history. The way widgets are chosen to be displayed on the page can be seen as a dynamic, nested routing mechanism.\r\n\r\nHere is an example of an outfit view that can be used in an ecommerce application:\r\n![showing the structure of an example page with above described concept](https://img01.ztat.net/engineering-blog/posts/2021/09/images/rengine-outfit-page.png)\r\n\r\nWe are currently migrating the framework to React 18 with the new Suspense SSR and streaming architecture. The main idea is that we wrap each widget in its own suspense boundary to handle the loading of their code and data as soon as the framework decides to display it on the page. For initial requests it works well, but we face a problem with client-side updates that lead to new sub-tree of widgets.\r\n\r\n\r\n## Steps to Reproduce\r\nHere is a link to a code sandbox that contains a minimal code example to reproduce the problem with “new” suspense boundaries and useTransition: https://codesandbox.io/s/romantic-haslett-psc4f4?file=/src/App.js\r\n\r\n\r\n## Current Behavior\r\n\r\nuseTransition waits for the first Suspense boundary to be ready and then re-renders the DOM although nested Suspense boundaries are still in their fallback state. It is similar to the problem that has been reported in [this issue](https://github.com/facebook/react/issues/24759).\r\n\r\nIn our code example, you can see a big loading overlay after clicking the button to fetch a new collection of widgets. Fetching a new collection of widgets means the following: determine which widgets should be displayed on the page and start loading their code and data. In a real application, this would be data-driven. In the code example, it has been simplified to randomly select a Square or Circle widget and lazy-load them via React.lazy().\r\n\r\n\r\n## Expected Behavior\r\n\r\nYou have suggested [two approaches](https://github.com/facebook/react/issues/24759#issuecomment-1160605913) to overcome the issue which do not work well for us. \r\n\r\n> Why is it a problem that moving to a page shows the spinners? Is it because there are many of them?\r\n\r\nYes, in general there are many widgets and it might change to completely new page layouts. But the type of all widgets could also be the same as before the state update. Then it would be odd if the user first sees a big loading overlay for the whole page and when the new tree of widgets has been determined (which is the same as before, just the data changed), they will see individual loading spinners for each “new” widget.\r\n\r\n> In that case, move the Suspense boundaries from individual dashboard items widgets to wrap all of them.\r\n\r\nThis seems to be impossible for us. A page consists of a tree of widgets. A widget can contain other widgets and each widget can trigger a state update. If a widget triggers a state update, it normally requests some data from backend services and that data determines which child widgets should then be displayed. These child widgets could have their own data dependencies and could again render other widgets, and so on. The whole code is very generic.\r\n\r\nOur proposal is that useTransition should have an option to wait for the entire subtree to be ready, before re-rendering the component. In our use case, the widget of which the state should be updated, would use startTransition with some new flag that will additionally wait for the whole widget’s subtree to complete as well.","state":"open","updated_at":"2023-02-02T17:27:38Z","created_at":"2022-08-11T13:14:19Z","creator_user_login":"reneeichhorn"}
{"number":25076,"title":"Removed unnecessary variable","body":"Removed isArrayImpl variable because it is unnecessary\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-09-21T05:24:42Z","created_at":"2022-08-10T21:18:37Z","creator_user_login":"Farabi-dev473"}
{"number":25069,"title":"Bug: `preventDefault()` breaks checkboxes, they may not reflect the `checked` prop","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. call `event.preventDefault()` in `onChange` or `onClick` handler\r\n2. the checkbox element may not reflect the `checked={checked}` prop in some cases\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/relaxed-taussig-ypxiuo?file=/src/App.js\r\n\r\n\r\n![Recording 2022-08-09 at 18 23 20](https://user-images.githubusercontent.com/567105/183717810-a08dc8b4-c036-497c-a8e2-806b6fba90bb.gif)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nI can't click on `<input type=\"checkbox\" />` reliably anymore.\r\nIt's preventing us from adopting React 18 in a project, as some of our tests are broken by this bug.\r\n\r\n## The expected behavior\r\nReact 18 should always respect the `checked={checked}` prop.","state":"open","updated_at":"2022-08-11T11:24:55Z","created_at":"2022-08-09T17:24:32Z","creator_user_login":"nstepien"}
{"number":25066,"title":"fix: hooks returned by factory functions not linted","body":"🚧 🚧 \r\n\r\n\r\n## Summary\r\n\r\nShowcase #25065\r\n\r\n```ts\r\n// Factory function for creating hooks\r\nfunction createHooks() {\r\n  return {\r\n    foo: {\r\n      useQuery: () => {\r\n        data: 'foo.useQuery'\r\n      },\r\n    }\r\n  };\r\n}\r\nconst hooks = createHooks();\r\n\r\nexport const MyComponent = () => {\r\n  if (Math.random() < 0.5) {\r\n    return null;\r\n  }\r\n  // ❌ This should fail the linter, but doesn't currently\r\n  const query = hooks.foo.useQuery();\r\n\r\n  return <>{query.data}</>;\r\n}\r\n```\r\n\r\n\r\n## How did you test this change?\r\n\r\nAdding some tests to the lint test suite.","state":"open","updated_at":"2022-08-08T16:55:20Z","created_at":"2022-08-08T12:51:52Z","creator_user_login":"KATT"}
{"number":25065,"title":"Bug: Eslint hooks returned by factory functions not linted","body":"React version: *\r\n\r\n## Steps To Reproduce\r\n\r\n> **See my draft PR** with failing tests 👉  #25066.\r\n\r\nGiven the following code:\r\n\r\n```ts\r\n// Factory function for creating hooks\r\nfunction createHooks() {\r\n  return {\r\n    foo: {\r\n      useQuery: () => {\r\n        data: 'foo.useQuery'\r\n      },\r\n    }\r\n  };\r\n}\r\nconst hooks = createHooks();\r\n\r\nexport const MyComponent = () => {\r\n  if (Math.random() < 0.5) {\r\n    return null;\r\n  }\r\n  // ❌ This should fail the linter\r\n  const query = hooks.foo.useQuery();\r\n\r\n  return <>{query.data}</>;\r\n}\r\n```\r\n\r\n\r\n## The current behavior\r\n\r\nThe linting does not catch that the `hooks.foo.useQuery()` is used conditionally.\r\n\r\n\r\n## The expected behavior\r\n\r\n\r\nThe linting should catch that the `hooks.foo.useQuery()` is used conditionally.\r\n\r\n\r\n## Failing tests / link to code\r\n\r\n**See my draft PR** with failing tests 👉  #25066.\r\n\r\nI've highlighted areas and things that are up for discussions around this.\r\n\r\n## Additional context\r\n\r\n### Partial workaround\r\n\r\nIf the object returned is **not** a deep getter, it's possible to `PascalCase` it and do it like this:\r\n\r\n```ts\r\n\r\n// Factory function for creating hooks\r\nfunction createHooks() {\r\n  return {\r\n    useFoo: () => {\r\n      data: 'foo.useQuery'\r\n  };\r\n}\r\nconst Hooks = createHooks();\r\n\r\nexport const MyComponent = () => {\r\n  if (Math.random() < 0.5) {\r\n    return null;\r\n  }\r\n  // ✅ This will fail the linter\r\n  const query = Hooks.useFoo();\r\n\r\n  return <>{query.data}</>;\r\n}\r\n```\r\n\r\n### It's okay if hooks can be called outside of React-components\r\n\r\nhttps://github.com/facebook/react/issues/25065#issuecomment-1242767909\r\n\r\n\r\n### Background\r\n\r\nI'm the creator of [tRPC](https://github.com/trpc/trpc) where we use the following pattern for users to create the root hooks:\r\n\r\n```ts\r\n// Initialization of the typesafe tRPC hooks\r\nexport const trpc = createReactQueryHooks<AppRouter>();\r\n\r\n// MyComponent.tsx\r\nexport function MyComponent() {\r\n  const query = trpc.useQuery(['post.byId', { id: '1' }])\r\n\r\n  return <pre>{JSON.stringify(query.data ?? null, null, 4)}</pre>\r\n}\r\n```\r\n\r\nIn the coming version of tRPC, we are planning on have an API that looks like the below, which also won't be caught.\r\n\r\n```ts\r\nexport function MyComponent() {\r\n  const query = trpc.post.byId.useQury({ id: '1'});\r\n\r\n  return <pre>{JSON.stringify(query.data ?? null, null, 4)}</pre>\r\n}\r\n```\r\n","state":"open","updated_at":"2022-11-04T07:55:45Z","created_at":"2022-08-08T12:43:40Z","creator_user_login":"KATT"}
{"number":25056,"title":"Bug: react-devtools crash at start","body":"I am trying to debug a React Native app with react-devtools but when I launch it, it shows a blank window for about 2 seconds an closes. It doesn't show any error in the console.\r\nI tried with npx, npm global and yarn\r\n\r\nI tried several versions 4.x.x and the result is the same\r\nIt work with versions 3.x.x but can't connect with React Native\r\n\r\nSO: Ubuntu 22.04.1\r\nnode :16.16.0\r\nnpm: 8.11.0\r\n\r\n","state":"open","updated_at":"2023-03-10T05:39:16Z","created_at":"2022-08-06T12:01:09Z","creator_user_login":"Jumbostan"}
{"number":25054,"title":"chore(circleci): Eliminate duplicate init steps","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nExtracted repeated init steps from jobs into single checkout_with_cache command.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n- [x] CI tests should pass successfully\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-09-30T15:25:44Z","created_at":"2022-08-05T22:30:57Z","creator_user_login":"vitalii-tb"}
{"number":25050,"title":"Bug: \"Destroy is not a function\" doesn't get caught by Error Boundary ","body":"Framer is a site builder where users can write and put third-party React components on their pages. Those components can have incorrect implementations, including incorrect usage of `useEffect`. When we upgraded to React 18, we started running into crashes which turned out to be due to incorrect returns in useEffects. \r\n\r\nSince we know these components can have errors, we've implemented an error boundary around them. But this change in how React 18 handles incorrect returns in useEffect (E.g. returning a number instead of a function) doesn't get caught by the Error Boundary. Instead, React fails internally and stops rendering.\r\n\r\nWe've created a Sandbox with a small reproduction case: https://codesandbox.io/s/serene-cloud-j665f0?file=/src/App.js. There you can find: \r\n1. An example of a component with a traditional user error -> Caught by the error boundary\r\n2. An example of a component with a mis-implemented useEffect -> Not caught by the error boundary\r\n\r\nReact version: 18\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with a useEffect that returns a number and a dependency on local state\r\n2. Wrap it with an Error Boundary\r\n3. Update the local state so the useEffect runs again\r\n4. See the crash and it skipping the error boundary\r\nOr use the sandbox I linked above :) \r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/serene-cloud-j665f0?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nError is not caught by Error Boundary\r\n\r\n## The expected behavior\r\nError is caught by Error Boundary","state":"open","updated_at":"2022-08-10T16:12:41Z","created_at":"2022-08-05T11:22:09Z","creator_user_login":"melissarofman"}
{"number":25048,"title":"Bug: TBT of website increased after migrating to react 18","body":"After upgrading to react18 total blocking time of website has been increased as per the reports of lighthouse. \r\nurl used to check performance: https://pagespeed.web.dev/\r\nFollowing packages were updated to latest:\r\n\"react\": \"^18.2.0\",\r\n\"react-dom\": \"^18.2.0\",\r\n\"react-redux\": \"^8.0.2\",\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Update the above mentioned packages to latest.\r\n2. Use react new hydrateRoot api\r\n\r\nLink to code example:\r\n\r\nAttaching screenshots for performance analysis:\r\n\r\n\r\nreact18:\r\n<img width=\"960\" alt=\"Screenshot 2022-08-04 at 5 16 58 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050784-3dafc59e-da18-4e13-a83d-fe4886699104.png\">\r\n<img width=\"960\" alt=\"Screenshot 2022-08-04 at 5 17 09 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050815-c70256d2-2c8d-4c83-94cb-996fe48dfbfd.png\">\r\n<img width=\"1089\" alt=\"Screenshot 2022-08-04 at 5 19 07 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050823-5fa56c28-0a18-4e0a-9929-9699b1cbef7f.png\">\r\n\r\n\r\nreact17:\r\n\r\n<img width=\"1088\" alt=\"Screenshot 2022-08-04 at 5 19 48 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050871-6be35d16-1cfe-4d0d-b231-bc0a048bd536.png\">\r\n<img width=\"961\" alt=\"Screenshot 2022-08-04 at 5 20 33 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050905-3d350412-a880-4004-a4a5-765e38c60744.png\">\r\n<img width=\"963\" alt=\"Screenshot 2022-08-04 at 5 20 41 PM\" src=\"https://user-images.githubusercontent.com/13482825/183050924-80439b00-839c-439f-9733-d841d35cf401.png\">\r\n\r\n","state":"open","updated_at":"2023-07-17T06:04:25Z","created_at":"2022-08-05T09:43:42Z","creator_user_login":"sachTyagi"}
{"number":25046,"title":"Bug: in jest use Timer Mocks , `act` executed state batch updates incorrectly","body":"React version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use `setInterval` in the component to `setState` every second\r\n2. Use `jest.useFakeTimers()` in the test;\r\n3.  Use `act(() => jest.advanceTimersByTime(3000));`\r\n4. The re-render after each setState is not executed as expected\r\n5. Only one re-render was executed\r\n\r\n## Link to code example:\r\nPlease see [codesandbox-Clock.test.js](https://codesandbox.io/s/lively-forest-g8skjo?file=/src/__tests__/Clock.test.js) \r\nin Terminal run `yarn test`\r\n\r\n## The current behavior\r\nact should trigger re-render multiple times in setInterval, not once\r\n\r\n## The expected behavior\r\nIn react version 16, `act` triggers re-redner for each `setState` in `setInterval`\r\n\r\n","state":"open","updated_at":"2022-08-05T06:48:31Z","created_at":"2022-08-05T06:44:59Z","creator_user_login":"liu-zhi-fei"}
{"number":25042,"title":"Bug: wired behavior of contenteditable elements ","body":"I have a `contenteditable=\"true\"` element and a non `contenteditable `element before it, and I want the second one to appear after the first in the same line. \r\nI used a simple code snippet to make it which works perfect using regular HTML but for some reason it's buggy on React.\r\n\r\nThe first bug I noticed is when using <kbd>ctrl</kbd>+<kbd>backspace</kbd> to delete an entire word it doesn't work for the first word it deletes only one letter, \r\n\r\nThe second bug I noticed is that the cursor slightly moves up when inserting text to an empty `contenteditable `element.\r\n\r\nThat's a very wired behavior , I faced more severe bugs I just don't know if they only appear on React like the ones above. (I forgot how to reproduce them)\r\n\r\nAny idea  why it's happening?\r\n\r\nReact version: 16.12..\r\nBrowser: Chrome - Last version \r\n\r\n## Steps To Reproduce\r\n\r\n1. run the code sample and try to delete the text using <kbd>ctrl</kbd>+<kbd>backspace</kbd>\r\n2. delete all deletable text , zoom in and hit the space bar and backspace, see the location differences.\r\n\r\n\r\n### Link to code example:\r\nReact: https://codesandbox.io/s/react-fiddle-forked-h2fmjh \r\nPure HTML:  https://jsfiddle.net/ruxfkvnt/\r\n_Exact same code_\r\n\r\n","state":"open","updated_at":"2022-08-04T21:16:24Z","created_at":"2022-08-04T17:55:18Z","creator_user_login":"ararTP"}
{"number":25041,"title":"Bug:  Why does React need to replay beginwork when an exception occurs","body":"React version: React17.0.1\r\n\r\nSorry, I am curious why the [beginWork](https://github.com/facebook/react/blob/v18.1.0/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L3001) function needs to be executed repeatedly if an exception is thrown in the beginWork function. In fact, we can simplify the exception catching logic of the beginWork function\r\n\r\nMaybe this would work too\r\n\r\n```js\r\n      let caughtError = null;\r\n\r\n      function invokeGuardedCallback(func) {\r\n        const evt = document.createEvent(\"Event\");\r\n        const evtType = \"react-invokeguardedcallback\";\r\n        const fakeNode = document.createElement(\"react\");\r\n        let child; // keep the result of beginWork in the child variable\r\n\r\n        function callCallback() {\r\n          fakeNode.removeEventListener(evtType, callCallback, false);\r\n          child = func(); // keep the result of func\r\n        }\r\n\r\n        function handleWindowError(event) {\r\n          caughtError = event.error;\r\n        }\r\n\r\n        window.addEventListener(\"error\", handleWindowError);\r\n        fakeNode.addEventListener(evtType, callCallback, false);\r\n\r\n        evt.initEvent(evtType, false, false);\r\n        fakeNode.dispatchEvent(evt);\r\n\r\n        window.removeEventListener(\"error\", handleWindowError);\r\n        return child; // return it\r\n      }\r\n\r\n      function beginWork() {\r\n        return \"child\";\r\n      }\r\n      beginWork$1 = function (current, unitOfWork, lanes) {\r\n        const child = invokeGuardedCallback(beginWork);\r\n        if (hasCaughtError()) {\r\n          var replayError = clearCaughtError();\r\n          throw replayError;\r\n        }\r\n        console.log(\"next..\", child);\r\n        return child;\r\n      };\r\n      beginWork$1();\r\n```\r\n","state":"open","updated_at":"2022-08-04T14:04:05Z","created_at":"2022-08-04T14:04:05Z","creator_user_login":"lizuncong"}
{"number":25040,"title":"[DevTools]: More compact rendering of deeply nested component trees when there is a single child","body":"On Reddit.com:\r\n\r\n![Screen Shot 2022-08-04 at 2 43 29 pm](https://user-images.githubusercontent.com/281413/182850866-ce57cfdc-1f6c-4c72-b149-802d57fc05cb.png)\r\n\r\nIt's a very common pattern in React to have deep chains of components with only one single child.\r\n\r\n# Options\r\n\r\n## a. VSCode style\r\n\r\nThis problem is also enountered in Java project trees. \r\n\r\nVSCode does it like this:\r\n\r\n![image](https://user-images.githubusercontent.com/281413/182853632-ba1a9e91-6b78-46fb-beba-edea860b3a44.png)\r\n\r\nhttps://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_41.md#compact-folders-in-explorer\r\n\r\nIntelliJ similar.\r\n\r\nMaybe we could do the same as VSCode?\r\n\r\n## b. No indent for single child\r\n\r\nAnother approach would be to just not indent when there is only one child.\r\n\r\n```\r\n  h\r\n  Context.Provider - {props: {foo: 1}}\r\n  I\r\n  Context.Provider\r\n  E\r\n  Context.Provider\r\n  Context.Provider\r\n  Context.Provider\r\n  l\r\n- Context.Provider (2 children - collapse all)\r\n\r\n    mg\r\n    d\r\n    Context.Provider\r\n  + Component (1 child - expand all)\r\n\r\n    vg\r\n    hg\r\n    Context.Provider\r\n  + hg (1 child - expand all)\r\n\r\n```\r\n\r\nWe could also indicate when there are multiple children and provide some controls to collapse all the children's children. This would help with https://github.com/facebook/react/issues/16463.\r\n\r\nAdvantage: As another feature I'd also be interested in adding some inline annotations to the right of each component to show some props to better identify components. Moving these nested trees horizontal would block this ability, so this approach works better.\r\n\r\nDesign decision: Where to place the arrow to toggle folding? At the first element with multiple children (indicated above)? Or at the top. Or maybe we can create a really tall button on hover to show.\r\n\r\nDesign decision: How to clearly and visually deliniate that the components are nested vs siblings. Maybe we need to add an extra space (as shown in example above). Maybe color coding as well. Or alternate grey shading.\r\n\r\n# Related\r\n\r\n- https://github.com/facebook/react/issues/16463\r\n- https://github.com/facebook/react/issues/16735\r\n\r\n\r\n","state":"open","updated_at":"2022-08-17T21:04:25Z","created_at":"2022-08-04T13:24:07Z","creator_user_login":"vjpr"}
{"number":25039,"title":"Bug: useSyncExternalStore subscribes too late in Suspense","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use useSyncExternalStore in component that is inside Suspense\r\n2. Render React.lazy component in the same Suspense \r\n3. Change external store value (that affects rendered components) before Suspense render all components\r\n4. Suspense is still waiting for 'outdated' component\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/youthful-cerf-pv5rr0\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nuseSyncExternalStore in Suspense subscribes when component is rendered (after suspense ends), which may lead to unnecessary delays\r\n\r\n## The expected behavior\r\nuseSyncExternalStore should subscribe to changes event before component is rendered in suspense","state":"open","updated_at":"2022-08-04T10:11:15Z","created_at":"2022-08-04T10:11:15Z","creator_user_login":"roblan"}
{"number":25038,"title":"Bug: hydration mismatch in top component does not cause client-render fallback","body":"We render some markup on the server, but on the client (due to the bug in our app's code) we have a different state and we render nothing (instead of our markup).\r\n\r\nIn this case React should fallback to client render, so it is expected that the server-rendered markup is removed, but it's not. \r\n\r\nNotice, how the server-rendered placeholders are still visible though the `console.log` inside the component states that the visible state is false:\r\n<img width=\"1440\" alt=\"Screenshot 2022-08-03 at 15 19 51\" src=\"https://user-images.githubusercontent.com/1089670/182778644-d5ded261-86cc-4f55-8b6a-43d712e82335.png\">\r\n\r\nThe problem exists only if this branch happens to be at the very top of the components tree. React doesn't even see the mismatch.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. render some markup on the server\r\n2. on client side render it as null\r\n\r\nLink to code example:\r\n\r\nhttps://stackblitz.com/edit/react-kpphvo?file=src/App.js\r\n\r\n## The current behavior\r\n\r\nMismatch is ignored, client's render result is not applied\r\n\r\n## The expected behavior\r\n\r\nFallback to client's render result, mismatch warning is reported, server rendered markup is removed","state":"open","updated_at":"2022-10-16T08:39:59Z","created_at":"2022-08-04T06:35:26Z","creator_user_login":"alatielle"}
{"number":25037,"title":"[Transition Tracing] Refactor commitTransitionProgress ","body":"Refactor `commitTransitionProgress` into two functions, `commitOffscreenTransitionHide` and `commitOffscreenTransitionShow`","state":"open","updated_at":"2022-08-03T19:27:56Z","created_at":"2022-08-03T19:22:31Z","creator_user_login":"lunaruan"}
{"number":25033,"title":"ReactDevTools extension doesn't work in private Firefox windows [DevTools Bug]: ","body":"### Website or app\r\n\r\nreactjs.org\r\n\r\n### Repro steps\r\n\r\n1. Install the ReactDev tools extension for Firefox ( I am running Firefox Dev edition Version 104.0b5 on Debian-Linux)\r\n2. Allow the extension to run in private WIndows by going to Add-ons and themes (Ctrl + Shift + A)\r\n3.  Visit any website running a  development or production of React in Firefox(I have tested Firefox dev Edition and FirefoxESR) \r\n4. Open Firefoxdevtools and visit the components tab added by the Reactdevtools extenstion\r\n5. I have tested a local dev build and a production build of React, and weirdly it works in non-private windows. But in Private windows, it doesn't see that the page uses React.\r\n6. Below is a screenshot of what I see on both websites\r\n7. ![reactdevtoolsbug](https://user-images.githubusercontent.com/97474001/182564648-ea35b0cf-0395-48b4-9c07-0220044d5422.png)\r\n\r\n\r\n\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2022-08-06T19:14:18Z","created_at":"2022-08-03T08:42:51Z","creator_user_login":"ndejoma"}
{"number":25032,"title":"[react-test-renderer] StrictMode seems not to work in tests","body":"`StrictMode` seems not to work when testing with `react-test-renderer`.\r\n\r\n```tsx\r\nimport { create, act } from \"react-test-renderer\";\r\n\r\n// This...\r\nact(() => {\r\n  const options = { \r\n    unstable_isConcurrent: true, \r\n    unstable_strictMode: true \r\n  };\r\n\r\n  create(\r\n    <StrictMode>\r\n      <App />\r\n    </StrictMode>,\r\n    options\r\n  );\r\n});\r\n\r\n// ...Seems to be equivalent to this.\r\nact(() => {\r\n  create(<App />);\r\n});\r\n```\r\n\r\nReact version 18.0.2\r\nCodesandbox [**link**](https://codesandbox.io/s/strict-mode-test-5c79xd?file=/src/strictMode.test.tsx)\r\n\r\n","state":"open","updated_at":"2022-08-03T09:22:34Z","created_at":"2022-08-03T08:32:43Z","creator_user_login":"paol-imi"}
{"number":25030,"title":"[Transition Tracing] Support for a transition that causes Offscreen to unhide","body":"This is a stacked pull request. Only look at [this commit](https://github.com/facebook/react/commit/9f8fa91cea75564cd6ab5cca67176615e0247e2e)\r\n---\r\nThis PR adds support for offscreen unhiding during a transition. In this case, we should process the just unhidden tree the same way as we do a mount. Namely,\r\n* Tracing Markers that were just shown should be part of any transition that is happening\r\n* Hidden suspense boundaries in the offscreen subtree should be added to all parent tracing markers that are a part of the current transition\r\n* If a hidden suspense boundary was added to a parent tracing marker, `onMarkerProgress`/`onTransitionProgress` should be called.\r\n\r\nThis PR might be controversial. Namely:\r\n* The transition tracing code needs to be run if we unhide in a transition.\r\n* The cache code should not run if we reappear offscreen unless there's a passive effect scheduled on it. The transition tracing should run on all hidden suspense boundaries when we reappear offscreen. This implements a hacky way to do this. We should chat about better ways.","state":"open","updated_at":"2022-08-03T19:14:57Z","created_at":"2022-08-02T20:00:44Z","creator_user_login":"lunaruan"}
{"number":25017,"title":" Why imperative code using refs should be avoided?","body":"Hi, in few weeks, I found `useImperativeHandle` is quiet handy for \r\n - encapsulation how child component state changing logic  implemented, no event handler needs to pass down to child component when using this hook.\r\n - ref can be defined using typescript interface in child component , which that's all parent component should know.\r\n- in the same manner of first one, parent component doesn't filled with complex logic functions, which gives parent component more readability nonetheless it can still use tens of child components.\r\n\r\nbut [document](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) says using `useImperativeHandle` should be avoided in most cases?\r\nI can't find reason ","state":"open","updated_at":"2023-06-29T16:16:30Z","created_at":"2022-07-31T10:16:29Z","creator_user_login":"dante01yoon"}
{"number":25012,"title":"Bug: Error: Should have a queue. This is likely a bug in React. Please file an issue.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0,2\r\n\r\n## Steps To Reproduce\r\n\r\nI'm rendering a useMemo that takes its value from a function that contains a hook (the hook uses recoil to manage global state) and switches its input to generate the component, then I have a useState that handles a boolean value. If I invert the order, another different error is thrown, saying that the number of rendered hooks is fewer than expected.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://pastebin.com/K134AmZ2\r\n\r\n![image](https://user-images.githubusercontent.com/50209142/181905787-12e33f66-6397-4015-adcf-854ecff86a91.png)\r\n\r\n## The current behavior\r\nThrows an error\r\n\r\n## The expected behavior\r\nHandles the useMemo and useState properly","state":"open","updated_at":"2022-08-01T15:29:52Z","created_at":"2022-07-30T10:15:03Z","creator_user_login":"hawkyre"}
{"number":25009,"title":"[Transition Tracing] Transition Tracing Offscreen Tree Deletion","body":"This PR implements transition tracing for offscreen trees. Specifically, it:\r\n* Schedules a Passive effect on Offscreen fibers that went from visible to hidden\r\n* Add a `removeSuspenseBoundaryFromSubtree` function that iterates through the Offscreen subtree removes the all suspense boundaries in the hidden offscreen subtree from their parent tracing markers\r\n* Only run this code for an actual Offscreen component (rather than a suspense component)\r\n\r\nThis PR does not address when an offscreen tree goes from hidden to visible as the result of a transition","state":"open","updated_at":"2022-08-03T17:45:05Z","created_at":"2022-07-29T21:39:49Z","creator_user_login":"lunaruan"}
{"number":25008,"title":"Uncontrolled re-rendering with useEffect within custom hook when unmounting component and when prop to hook is an unanchored array","body":"I have a component called `MyWillUnmount` that uses a custom hook called `useLocalStorage`. \r\n\r\n```tsc\r\nconst emptyArray = [];\r\nconst MyWillUnmount = () => {\r\n  const [] = useLocalStorage('KEY',[]);\r\n  ...\r\n}\r\n\r\nexport function useLocalStorage<T>(key: TLocalStorageKeys, initValue: any): [T, (value: any) => void] {\r\n  const [storedValue, setStoredValue] = useState<T>(initValue);\r\n  useEffect(() => {\r\n    setStoredValue(\r\n      (() => {\r\n        try {\r\n          const item = window.localStorage.getItem(key);\r\n          return item ? JSON.parse(item) : initValue;\r\n        } catch (error) {\r\n          console.log(error);\r\n          return initValue;\r\n        }\r\n      })()\r\n    );\r\n  }, [key, initValue]);\r\n  ...\r\n}\r\n```\r\n\r\nWhen this component unmounts, the `useEffect` within `useLocalStorage` undergoes rapid re-triggering; it seems to think that the `initValue` prop, which is set to `[]`, is rapidly varying. However, if I replace `[]` with `emptyArray`, then it does not get rapidly re-triggered. This problem also occurs if the initial value is set to `{}`, but does not happen if it is a string, number or boolean. I'm guessing that the undesirable retriggering has something to do with a sudden loss of closure. ","state":"open","updated_at":"2022-08-01T15:31:02Z","created_at":"2022-07-29T14:38:30Z","creator_user_login":"MagnusBrzenk"}
{"number":25007,"title":"[DevTools Bug] Children cannot be added or removed during a reorder operation.","body":"### Website or app\n\nhttps://github.com/HamaydaGabsi/Color-Project\n\n### Repro steps\n\n1. Select a palette\r\n2. Select to color to view shades\r\n3. Go back to the colors with the navigation arrow\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.25.0-336ac8ceb\n\n### Error message (automated)\n\nChildren cannot be added or removed during a reorder operation.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26848:41\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24626:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24795:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54959:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Children cannot be added or removed during a reorder operation. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2023-06-03T03:36:04Z","created_at":"2022-07-29T12:33:34Z","creator_user_login":"HamaydaGabsi"}
{"number":25003,"title":"Bug: memory leak, Initialized props are not released even though props are updated","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click the \"Click Me\" button multiple times\r\n2. Create heap snapshot on chrome and search for all objects with class name \"Props\"(test class name)\r\n3. Check the number of Props classes with an id property of 1\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n[codepen link with class component](https://codepen.io/jdw/pen/YzaEEZN)\r\n[codepen link with function component](https://codepen.io/jdw/pen/yLKPPow)\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe Props object with the id property of 1 is not released\r\n![image](https://user-images.githubusercontent.com/11987295/181707237-583648ec-7691-4f2b-ad27-14c5f46e14e9.png)\r\n\r\n## The expected behavior\r\nUnused objects are released normally.\r\n\r\n","state":"open","updated_at":"2022-08-23T03:36:27Z","created_at":"2022-07-29T07:42:42Z","creator_user_login":"j2wei"}
{"number":24999,"title":"Removed overwrite to key variable in jsx","body":"When config.key is not undefined, there is no reason to set key to maybeKey.\r\n","state":"open","updated_at":"2022-07-27T16:03:35Z","created_at":"2022-07-27T15:58:24Z","creator_user_login":"tontinton"}
{"number":24998,"title":"Replace debug-test in documentation","body":"\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n`yarn debug-test` is now deprecated in React package.json. It has been replaced by `yarn test --debug`.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nI've tried in both a bash console and in powershell and the result that I get from `yarn debug-test` is\r\n\r\n> Please run: \\`'yarn\\` instead.\r\n\r\nFrom searching `please run:` in the repo, I found that on line 352 of `scripts\\jest\\jest-cli.js` there is the below code\r\n\r\n```\r\n  if (argv.deprecated) {\r\n    console.log(chalk.red(`\\nPlease run: \\`${argv.deprecated}\\` instead.\\n`));\r\n    return;\r\n  }\r\n```\r\n\r\nI think that it's supposed to output `Please run: 'yarn test --debug'` but it's getting truncated, which is another problem that I can open an issue for pending the merge of this issue.\r\n\r\nWhen I run `yarn test --debug` there are no issues and I can debug the application as expected.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-07-27T20:41:12Z","created_at":"2022-07-27T14:05:02Z","creator_user_login":"awells111"}
{"number":24997,"title":"Bug: local variable approach in useEffect failed to achieve \"ignoring\" check with strict mode in development","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. set up a local variable 'ignore' in useEffect as doc https://beta.reactjs.org/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development introduced.\r\n\r\n2. check the console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\ncodepen links https://codesandbox.io/s/keen-hooks-451ugq?file=/src/App.js:227-233\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`do something` is logged twice;\r\n\r\n## The expected behavior\r\n```text\r\nWith the approach above, the first Effect will immediately get cleaned up so its copy of the ignore variable will be set to true. So even though there is an extra request, it won’t affect the state thanks to the if (!ignore) check.\r\n```\r\nas [doc](https://beta.reactjs.org/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development) says the `do something` should be only logged once.\r\n","state":"open","updated_at":"2022-07-28T09:06:44Z","created_at":"2022-07-27T08:23:14Z","creator_user_login":"Jerenyaoyelu"}
{"number":24991,"title":"Bug: Bad running order with server-side-render inline script tag inside Suspense component","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Server side render with an inline script inside Suspense component:\r\n```jsx\r\n<LazyComponent>\r\n    <p>some async text</p>\r\n    <script\r\n        dangerouslySetInnerHTML={{\r\n            __html: \"/** some performace measure code here */ console.log('measure');\"\r\n        }}\r\n    ></script>\r\n</LazyComponent>\r\n\r\n<Suspense fallback={<Spinner />}>\r\n    <LazyComponent />\r\n</Suspense>\r\n```\r\n2. And `'measure'` will be logged before `<p>` is inserted into right place and being visible.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/mystifying-stallman-z7hveu?file=/src/Comments.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nLogging 'measure' **before** `<p>` is inserted into right place and being visible.\r\n\r\n## The expected behavior\r\nLogging 'measure' **after** `<p>` is inserted into right place and being visible.","state":"open","updated_at":"2022-08-02T21:03:52Z","created_at":"2022-07-26T10:13:33Z","creator_user_login":"chestnutchen"}
{"number":24990,"title":"feat(devtools): add preset for open in editor url","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nAdd preset  url for feature `open in editor url`\r\n- vscode\r\n- jetbrain\r\n\r\nand fix incorrected url parse problem\r\n\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n![image](https://user-images.githubusercontent.com/6964737/180914005-38593462-631b-4a94-90f5-eda28362dfbd.png)\r\n![image](https://user-images.githubusercontent.com/6964737/180914032-18e290c5-5167-4938-ae84-bd26c5bed1e0.png)\r\n\r\n","state":"open","updated_at":"2022-08-18T05:42:30Z","created_at":"2022-07-26T03:03:56Z","creator_user_login":"moonrailgun"}
{"number":24989,"title":"Bug: Cannot use 'in' operator to search for 'data' in null","body":"Issue with react-dom, consistently with Chrome 87\r\nCannot use 'in' operator to search for 'data' in null\r\n\r\nIn `getDataFromCustomEvent`:\r\n    if (typeof detail === 'object' && 'data' in detail) {\r\n\r\nThe problem is that typeof null is also 'object'\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\nUnfortunately I cannot reproduce, but what appears to be a headless chrome87 scanner fairly consistently reproduces the issue.","state":"open","updated_at":"2022-07-29T03:09:00Z","created_at":"2022-07-25T22:44:24Z","creator_user_login":"kweng-stripe"}
{"number":24987,"title":"[Portals] DOM order accessibility","body":"**Components built with Portals include accessibility defects leading to poor usability/task abandonment.**\r\n\r\nDuring accessibility audits and usability testing of Shopify components, we’ve noticed a prominent defect with components built with Portals; DOM structure.\r\n\r\nPortals sets dynamically generated content containers at the bottom of the DOM. This is fine for modal window components since keyboard focus is explicitly placed on/within the modal container. The Portals documentation even calls this out and links to APG for more documentation.\r\n\r\nThe issue lies with other component patterns; [disclosures](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/) (popovers, drop-down navigation, etc,) [comboboxes](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/), [tooltips](https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/), etc. The expectation for these components is for focus to **remain** on the activator and for dynamic content containers to appear **next** in the DOM, a direct sibling to the related activator control.\r\n\r\nFor example, during usability testing, testers struggled to use one such component which was built using Portals. When the dynamic container appeared after interacting with the activator, testers would move their screen reader virtual cursor forward from the activator, expecting to interact with the dynamic content. Instead, the cursor moved \"underneath\" the container, bypassing the content, to the next (unrelated) item in the DOM. This led to a confusing user experience.\r\n\r\nIn addition, this issue is a violation of WCAG [1.3.2: Meaningful Sequence](https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html) (Level A.) Specifically, [Failure of Success Criterion 1.3.2 due to changing the meaning of content by positioning information with CSS](https://www.w3.org/WAI/WCAG21/Techniques/failures/F1).\r\n\r\n**Is it possible to adjust the position of the dynamic content container to be a sibling of the activator?**\r\n\r\nThis would be a big win for accessibility, not only for Shopify components built with Portals, but for all platforms.","state":"open","updated_at":"2022-08-02T19:37:26Z","created_at":"2022-07-25T14:56:33Z","creator_user_login":"svinkle"}
{"number":24986,"title":"[UX Improvement] Disable mouse wheel behavior on number type inputs","body":"There is annoying behaviour that should not exist IMHO for UX's sake: when you scroll on an `<input type=\"number\">` you can change input when you have the focus on it which is not user-friendly at all since the mouse wheel is almost exclusively used for scrolling page. As a result, people are typing a value, then trying to scroll further for another input and then changing the input value without even noticing for the majority.\r\n\r\nI don't know what is implemented in React that changes how it is handled in most browsers. I have tried to track down the event which is modifying the input without success. But if you try vanilla javascript in, let's say, Chrome then you don't have this ugly behaviour. :man_shrugging: \r\n\r\nFor illustration purposes:\r\n* React behaviour: https://codesandbox.io/s/silly-feynman-ic8f9p\r\n* Vanilla behaviour: https://codesandbox.io/s/laughing-fog-rkrc6s\r\n\r\nAnother reference:\r\nhttps://stackoverflow.com/questions/68260072/why-can-we-update-a-value-of-a-number-input-using-mouse-wheel\r\n\r\nCan someone explain why and where in the code wheel is changing the input? Or why it is not like that in vanilla JS (for most browsers)?\r\n\r\nAnd maybe deciding to change the default behaviour to something more user-friendly could be discussed?","state":"open","updated_at":"2022-12-12T14:08:35Z","created_at":"2022-07-25T14:41:01Z","creator_user_login":"Jule-"}
{"number":24984,"title":"Bug: Can't require react production build when NODE_ENV is not 'production'","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `18.2.0`\r\n\r\n## Steps To Reproduce\r\n\r\n1. `require('react/cjs/react.production.min.js')`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## Reason\r\n\r\nCurrently, React's exports field only export: `./index.js`:\r\n\r\nhttps://github.com/facebook/react/blob/49f8254d6dec7c6de789116e20ffc5a9401aa725/packages/react/package.json#L22-L31\r\n\r\nAnd `./index.js` will use prod or dev build considering the value of `process.env.NODE_ENV`.\r\n\r\nHowever, if i want to use prod build when `process.env.NODE_ENV` is `development` for example.I can only alias `react` to `react/cjs/react.production.min.js`, it means `require('react/cjs/react.production.min.js')`.But `react/cjs/react.production.min.js` is not in exports fields so it breaks.\r\n\r\n> Same issue for `require('react/cjs/react-jsx-runtime.production.min.js')`\r\n\r\n## The current behavior\r\n\r\nNodejs throws an error:\r\n\r\n```\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './cjs/react.production.min.js' is not defined by \"exports\" in ...\r\n```\r\n\r\n## The expected behavior\r\n\r\nHope there are ways to access `react/cjs/react.production.min.js` and `react/cjs/react-jsx-runtime.production.min.js`.","state":"open","updated_at":"2022-07-25T07:13:31Z","created_at":"2022-07-25T07:13:31Z","creator_user_login":"Chen-jj"}
{"number":24983,"title":"Modified eslint error message","body":"\r\nHere top level errors looks a bit confusing for the developers.further they are directed to rules of hooks page and it mentions that \"Hooks are called only at the top level\" whereas the message reads \"React hooks cannot be called at the top level\".\r\n\r\nI feel this commit clarifies the error message and also keeps it in check with the documentation\r\n","state":"open","updated_at":"2022-07-26T18:52:23Z","created_at":"2022-07-25T06:30:10Z","creator_user_login":"Biki-das"}
{"number":24979,"title":"Make react-dom and react-art depend on react-reconciler from npm","body":"Currently, the `react-dom` and `react-art` packages each have their own copy of `react-reconciler` compiled into them. This means, if you use them together, you get two copies bundled in your app. `react-reconciler` is around ~93 KB minified, or ~30 KB min + gzip, which is not super small.\r\n\r\nThis also affects other renderers like react-three-fiber, react-pixi, react-pdf, etc. Each of these depends on the `react-reconciler` package from npm, but `react-dom` also has a separate copy meaning if you use them you get at least two copies.\r\n\r\nIt would be nice if `react-dom` depended on the `react-reconciler` package from npm rather than compiling an additional copy into the distribution. This would reduce the bundle size of applications using multiple renderers by at least 30 KB min + gzipped.\r\n\r\nIs there a reason this is not already the case?","state":"open","updated_at":"2022-08-05T23:38:07Z","created_at":"2022-07-23T05:26:36Z","creator_user_login":"devongovett"}
{"number":24976,"title":"ssr render Can you make an on-demand plug-in？","body":"ssr render Can you make an on-demand plug-in？like products   react-loadable  https://github.com/jamiebuilds/react-loadable，It can load components, JS, CSS and IMG on demand in SSR rendering.  I was going to use react-loadable, but because the author doesn't maintain the update, the plugin will give an error in Act18 and Webpack.  Hopefully a similar product will come out officially.","state":"open","updated_at":"2022-07-22T02:47:50Z","created_at":"2022-07-22T02:47:50Z","creator_user_login":"ygs-code"}
{"number":24975,"title":"Bug: useReducer  Object.is is not working","body":"<!--\r\n  useReducer returns the state itself, but still executes one more time\r\n-->\r\n\r\nReact version:18.0.2\r\n\r\n### react render executed twice\r\n\r\nuseReducer returns the state itself, but still executes one more time\r\n\r\n## Steps To Reproduce\r\n\r\n```ts\r\nconst DemoUseState = () => {\r\n  const [state, setState] = useState({ count: 1 });\r\n  useEffect(() => {\r\n    setState(state);\r\n  }, []);\r\n  console.log(\"useState only render once\");\r\n  return <div>DemoUseState only render once</div>;\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  return state;\r\n};\r\n\r\nconst DemoUseReducer = () => {\r\n  const [, dispatch] = useReducer(reducer, { count: 1 });\r\n  useEffect(() => {\r\n    dispatch({ type: \"decrement\" });\r\n  }, []);\r\n  console.log(\"useReducer render twice\");\r\n  return <div>DemoUseReducer render twice</div>;\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DemoUseReducer />\r\n      <DemoUseState />\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\n\r\n  example:https://codesandbox.io/s/cool-flower-5yx1pg?file=/src/App.js\r\n","state":"open","updated_at":"2023-02-23T17:34:25Z","created_at":"2022-07-22T02:32:56Z","creator_user_login":"allroad88888888"}
{"number":24958,"title":"Allow to configure hooks to check for async callbacks in eslint-plugin-exhaustive-deps","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n1. Add option `checkAsyncFor` to configure which effect hooks should be checked for async callbacks\r\n2. Fix position/index of `dependencies` parameter in hooks. Dependencies are usually the last parameter in a hook function, e.g. [useImperativeHandle](https://reactjs.org/docs/hooks-reference.html#useimperativehandle)\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n1. Added unit tests & tried out in my own project\r\n2. Ran existing unit tests with no errors & tried out in my own project","state":"open","updated_at":"2023-04-23T21:27:56Z","created_at":"2022-07-19T22:14:54Z","creator_user_login":"ahoisl"}
{"number":24952,"title":"Bug: React typescript [AnchorHTMLAttributes]","body":"The <a> tag is missing the \"name\" property, which does not allow you to create anchors\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create typescript app\r\n2. Open <a> tag\r\n3. Add name attribute\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## Screenshots\r\n![Screenshot](https://i.imgur.com/3zWMpJr.jpg)\r\n![Screenshot](https://i.imgur.com/TSv1nbG.jpg)\r\n\r\n## The current behavior\r\nError that the attribute name of the link is not put on\r\n\r\n\r\n## The expected behavior\r\nAbility to add \"name\" attribute to a link\r\n","state":"open","updated_at":"2022-07-19T06:27:10Z","created_at":"2022-07-18T23:32:09Z","creator_user_login":"zephire1"}
{"number":24947,"title":"Extend attribute-behavior fixture","body":"\r\n\r\n## Summary\r\n\r\nFix and extend attribute-behavior fixture (to help test https://github.com/facebook/react/pull/24741 or https://github.com/facebook/react/pull/24730).\r\n\r\n## How did you test this change?\r\n\r\n- Updated snapshot table using Chrome Version 103.0.5060.114 (Official Build) (64-bit) \r\n","state":"open","updated_at":"2023-02-11T11:35:11Z","created_at":"2022-07-17T17:35:56Z","creator_user_login":"eps1lon"}
{"number":24942,"title":"fix: add global var to hide download react devtools tip (#24283)","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nAdd global var `HIDE_DOWNLOAD_REACT_DEVTOOLS_TIP` to hide download react devtools tip to fix #24283.\r\n\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n## Usage\r\n\r\n### 1. Webpack\r\n\r\nUse `webpack.DefinePlugin` declare `HIDE_DOWNLOAD_REACT_DEVTOOLS_TIP`:\r\n\r\n``` js\r\n// webpack.config.js\r\nmodule.exports = (env, options) => {\r\n  return {\r\n    // entry: ...\r\n    // output: ...\r\n    plugins: [\r\n      new webpack.DefinePlugin({\r\n        HIDE_DOWNLOAD_REACT_DEVTOOLS_TIP: true,\r\n      }),\r\n      // other plugins...\r\n    ],\r\n  };\r\n};\r\n```\r\n\r\n### Test Screenshot:\r\n![b0ffdf2c8f7df8c86deb0a582480a8a](https://user-images.githubusercontent.com/14243906/179385663-6b076160-5a8b-4201-8128-0dccb688597f.png)\r\n\r\n\r\n### 2. CDN\r\n\r\nDeclare `HIDE_DOWNLOAD_REACT_DEVTOOLS_TIP` before import `react-dom.development.js`\r\n\r\n> Online Demo: https://jsbin.com/ceganayafu/edit?html,js,output\r\n\r\n``` html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width\">\r\n  <title>Fix React #24283</title>\r\n  <script>\r\n    HIDE_DOWNLOAD_REACT_DEVTOOLS_TIP = true\r\n  </script>\r\n  <script crossorigin src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\r\n  <script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\r\n</head>\r\n<body>\r\n  <div id=\"app\"></div>\r\n  <script>\r\n    const root = ReactDOM.createRoot(document.getElementById('app'))\r\n    root.render('HelloWorld');\r\n  </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n### Test Screenshot:\r\n![94e52b6520e6cd6a6879801e12fc7c9](https://user-images.githubusercontent.com/14243906/179385675-8a063dfe-d01e-428d-b109-e2e49e6ae5e3.png)\r\n","state":"open","updated_at":"2022-07-17T13:10:04Z","created_at":"2022-07-17T05:47:01Z","creator_user_login":"JuniorTour"}
{"number":24940,"title":"generateHydrationScript for React?","body":"In SolidJS for SSR you can use something called `generateHydrationScript`:\r\n\r\n```\r\nimport { generateHydrationScript } from \"solid-js/web\";\r\n\r\nconst app = renderToString(() => <App />);\r\n\r\nconst html = `\r\n  <html lang=\"en\">\r\n    <head>\r\n      <title>🔥 Solid SSR 🔥</title>\r\n      <meta charset=\"UTF-8\" />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n      <link rel=\"stylesheet\" href=\"/styles.css\" />\r\n      ${generateHydrationScript()}\r\n    </head>\r\n    <body>${app}</body>\r\n  </html>\r\n`;\r\n```\r\n\r\nWhat this does is it will automatically inject the necessary hydration script into the page so you don't have to worry about hydrating stuff in client-side scripts.\r\n\r\nIs there anything out there like this for React?","state":"open","updated_at":"2022-07-16T03:19:49Z","created_at":"2022-07-16T03:19:49Z","creator_user_login":"jaxramus"}
{"number":24935,"title":"Bug: useMemo hook executes twice ","body":"I'm using `useMemo` hook with an empty dependency array in a component with`lazy` + `Suspense`, so I expect the function inside `useMemo` will be called once, but sometimes the function is called twice.\r\n\r\nNo `StrictMode`, no rerenders.\r\n\r\n```\r\nuseMemo(() => {\r\n  console.log('useMemo');\r\n}, []);\r\n```\r\n\r\nReact version: `18.2.0`\r\n\r\nI can't reproduce it with version `17.0.2`\r\n\r\n## Steps To Reproduce\r\n\r\nPlease, take a look at the simplified example. I could reproduce it on a regular basis after I've added `setState` call inside `useMemo`. As the issue is hard to reproduce, there is a script that reloads the page until the bug appears.\r\n\r\nLink to code example: https://codesandbox.io/s/smoosh-forest-g6ft5o\r\n\r\nPay attention, that function in `useEffect` was called once, which is expected behavior, but `useMemo` was called twice.\r\n\r\nIn the real project, there is no `setState` call inside `useMemo` and no warnings, but anyway I meet the issue every 10-20 page reloads.\r\n\r\nIf I delete `lazy` it works as expected. If I drop `LongComponent` it works as expected.\r\n\r\n## The current behavior\r\n\r\nThe function passed to `useMemo` is executed twice despite the empty dependency array, and the component wasn't rerendered.\r\n\r\n```\r\nconsole:\r\n  useMemo\r\n  useMemo\r\n  useEffect\r\n```\r\n\r\n## The expected behavior\r\n\r\nThe function passed to `useMemo` is executed only once.\r\n\r\n```\r\nconsole:\r\n  useMemo\r\n  useEffect\r\n```","state":"open","updated_at":"2023-07-25T17:27:55Z","created_at":"2022-07-15T15:58:10Z","creator_user_login":"dmytro-vasylenko"}
{"number":24934,"title":"Bug: d1 will cause domdiff, but d2 will not.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nconst dataList = [...Array(50000)].map(() => 1)\r\nconst d1 = <>{dataList}</>\r\nconst d2 = <div>{dataList}</div>\r\n\r\nfunction Apps() {\r\n    const [count, setCount] = useState(0)\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => setCount(count + 1)}>increase{count}</button>\r\n            <div>{d1}</div>\r\n            <div>{d2}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n````\r\nclick button trigger rerender,\r\nthen`d1` will cause domdiff, but `d2` will not\r\nI wonder if this is a bug, tks\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-07-16T00:44:16Z","created_at":"2022-07-15T15:29:46Z","creator_user_login":"zhangenming"}
{"number":24929,"title":"Bug:     When testing, code that causes React state updates should be wrapped into act(...):","body":"\r\nWhen testing, this error is encountered pretty frequently despite tests passing the component function as we expect it to function.\r\n\r\n`When testing, code that causes React state updates should be wrapped into act(...):`\r\n\r\nDealing with these warnings ends up being very time consuming and ultimately is not a good use of time. \r\n\r\nCan you give us the option to disable them in some way, or just completely remove them from React entirely? \r\n\r\n\r\n","state":"open","updated_at":"2022-08-02T19:33:58Z","created_at":"2022-07-14T20:59:14Z","creator_user_login":"peter-coastpay-com"}
{"number":24928,"title":"Bug: Cannot read property 'useState' of null","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install a library that doesn't support React 18 (e.g react-router-dom@5.3.3)\r\n2. Try to use useState in a component\r\n\r\nLink to code example: https://scrimba.com/scrim/co257466ea4774401eb77c8a6\r\n\r\nNote that you can pause the scrim (\"video\") to edit code and see the result by yourself.\r\n\r\n## The current behavior\r\nCrashes without a helpful error message\r\n\r\n## The expected behavior\r\nShould display a helpful error message.\r\n\r\nThis issue was reported before but closed because of lack of reproduction code https://github.com/facebook/react/issues/24774  and https://github.com/facebook/react/issues/24658","state":"open","updated_at":"2023-07-17T11:45:57Z","created_at":"2022-07-14T11:57:49Z","creator_user_login":"haikyuu"}
{"number":24926,"title":"Bug: touch and pointer events are not dispatched on the edges of the component","body":"React version: `18.1.0`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to https://namefilip.github.io/touch-events-issue/ on a mobile phone (iPhone 12, iOS 15.5)\r\n2. Click in the middle of the block\r\n3. Click on the border of the block\r\n4. See inconsistent events (pointerup/pointerdown, touchstart/touchend)\r\n\r\nLink to code example:\r\n\r\nThe logic is implemented in the [App.js](https://github.com/NameFILIP/touch-events-issue/blob/main/src/App.js) file.\r\n\r\nRepository: https://github.com/NameFILIP/touch-events-issue/\r\n\r\n\r\n\r\n## The current behavior\r\n\r\n### Screenshots\r\n\r\n<img src=\"https://user-images.githubusercontent.com/834796/178831563-a33e3ed7-304a-42fa-b6f1-0bab67544202.PNG\" alt=\"IMG_4140\" width=\"200\"> <img src=\"https://user-images.githubusercontent.com/834796/178831581-7519dc78-565d-4baf-b1a3-abdae4b8f708.PNG\" alt=\"IMG_4140\" width=\"200\"> <img src=\"https://user-images.githubusercontent.com/834796/178831594-358bdfb8-f349-4e8d-8842-8a7f0dd25def.PNG\" alt=\"IMG_4140\" width=\"200\"> <img src=\"https://user-images.githubusercontent.com/834796/178831610-9b418100-8d62-4c18-a1c2-963b01dc8682.PNG\" alt=\"IMG_4140\" width=\"200\">\r\n\r\n\r\n## The expected behavior\r\n\r\n<img src=\"https://user-images.githubusercontent.com/834796/178831581-7519dc78-565d-4baf-b1a3-abdae4b8f708.PNG\" alt=\"IMG_4140\" width=\"200\">\r\n","state":"open","updated_at":"2022-07-13T21:04:12Z","created_at":"2022-07-13T21:04:12Z","creator_user_login":"NameFILIP"}
{"number":24917,"title":"(fix): beforeinput spellchecking bug on firefox #24882","body":"fixed react spellcheking on beforeinput bug\r\n\r\nfixed spellcheking bug in firefox\r\n\r\nfixed react spellcheking on beforeinput bug\r\n\r\nfix spellchecking bug on firefox\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis resolves https://github.com/facebook/react/issues/24358, in which the beforeInputEvent wasn't firing when triggering a spellchecking in firefox. The problem was in the getFallbackBeforeInputChars function: the spellchecking event is interpreted as an 'input' event in firefox, which the function wasn't handling.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nI tested this change in the fixtures/packaging/babel-standalone/dev.html recreating the exact sandbox that creator of the issue built and the beforeInput fired as expected.\r\n","state":"open","updated_at":"2022-07-13T12:03:03Z","created_at":"2022-07-13T12:02:58Z","creator_user_login":"juank1809"}
{"number":24915,"title":"Several tests fail on main with Node v16","body":"There was a previous issue opened for this, which had a solution implemented by @bvaughn to resolve, but there still seem to be some edgecases remaining:\r\n\r\n- https://github.com/facebook/react/issues/22441\r\n  - https://github.com/facebook/react/pull/22477\r\n\r\n> It looks like there are a number of variations of ways that are currently being used to test that aren't captured by the changes made in https://github.com/facebook/react/pull/22477\r\n> \r\n> I'll just include one example for each pattern variation I saw in my failed test runs:\r\n> \r\n> ```\r\n> packages/use-sync-external-store/src/__tests__/useSyncExternalStoreShared-test.js\r\n>     expect(received).toEqual(expected) // deep equality\r\n> \r\n>     Expected: \"Cannot read property 'toUpperCase' of undefined\"\r\n>     Received: \"Cannot read properties of undefined (reading 'toUpperCase')\"\r\n> ```\r\n> \r\n> ```\r\n>  packages/react-debug-tools/src/__tests__/ReactHooksInspection-test.js\r\n>     expect(received).toBe(expected) // Object.is equality\r\n> \r\n>     Expected: \"Cannot read property 'useState' of null\"\r\n>     Received: \"Cannot read properties of null (reading 'useState')\"\r\n> ```\r\n> \r\n> So it looks like the other methods being used to test for this are `.toEqual` and `.toBe`\r\n> \r\n> _Originally posted by @0xdevalias in https://github.com/facebook/react/issues/22441#issuecomment-1182863793_\r\n\r\n---\r\n\r\nCurrently the CircleCI seems to only run tests on one node version (as I discovered while looking into https://github.com/facebook/react/issues/24891). I wonder if it would make sense to run them in the CI for all node versions include in the `package.json` `devEngines.node`; to proactively catch edgecases like this.","state":"open","updated_at":"2022-07-16T09:23:46Z","created_at":"2022-07-13T07:37:26Z","creator_user_login":"0xdevalias"}
{"number":24914,"title":"fix: remove useless line","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-07-13T02:58:03Z","created_at":"2022-07-13T02:34:03Z","creator_user_login":"Highnesslin"}
{"number":24911,"title":"fix: remove useless line.","body":"https://github.com/facebook/react/blob/7a4336c4040bb26d8fe143f96d842acae4c728b5/packages/react-reconciler/src/ReactFiberHooks.old.js#L684","state":"open","updated_at":"2022-08-26T11:41:31Z","created_at":"2022-07-13T01:04:39Z","creator_user_login":"jiashuai1002"}
{"number":24909,"title":"remove useless nextWorkInProgressHook assignment","body":"nextWorkInProgressHook reassignment is useless","state":"open","updated_at":"2022-07-12T22:41:56Z","created_at":"2022-07-12T22:41:27Z","creator_user_login":"shadowprompt"}
{"number":24905,"title":"Bug: Unsupported Bridge operation \"0\" using both react-devtools and Flipper","body":"Today I installed the latest version of Flipper(0.135.0) with DevTools version 4.24.3. When debug my app this error appeared \r\n\r\n<img width=\"1362\" alt=\"image\" src=\"https://user-images.githubusercontent.com/43164997/178552808-67f0b5c9-964c-4ea3-a838-e56985fae799.png\">\r\n\r\nI try to install  `react-devtools-core` to my project with the same version as DevTools  specified in Flipper ( hopefully think this will fix error ), but still don't. Then I try to install globally the React DevTools with this command `npm i -g react-dev-tools@4.24.3`, but it still have the error above when debugging app.\r\n\r\nThen I have to downgrade both version of `react-devtools-core` and  global DevTools to 4.19.0 to have my DevTools run without error . I wonder if I can download Flipper which has this older version . Or if not, how can I fix the current version ?\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.   Install Flipper latest version (0.135.0) via Homebrew\r\n2.  Install `react-devtools-core` version 4.24.3  to my project----> Error appear\r\n3.   Install React Devtools globally version 4.24.3 ----> Error still appear\r\n","state":"open","updated_at":"2022-07-14T01:59:41Z","created_at":"2022-07-12T17:16:47Z","creator_user_login":"QuangBinhDinh"}
{"number":24895,"title":"Bug:  Got error while running npm run build","body":" Got following error when building production build folders for my project.\r\n\r\n`/home/lazyubuntu/Documents/developementProject/amazon-clone/node_modules/react-scripts/config/webpack.config.js:664\r\n        new MiniCssExtractPlugin({\r\n        ^\r\n\r\nTypeError: MiniCssExtractPlugin is not a constructor\r\n    at module.exports (/home/lazyubuntu/Documents/developementProject/amazon-clone/node_modules/react-scripts/config/webpack.config.js:664:9)\r\n    at Object.<anonymous> (/home/lazyubuntu/Documents/developementProject/amazon-clone/node_modules/react-scripts/scripts/build.js:58:16)\r\n    at Module._compile (internal/modules/cjs/loader.js:1076:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1097:10)\r\n    at Module.load (internal/modules/cjs/loader.js:941:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:782:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\r\n    at internal/main/run_main_module.js:17:47\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! amazon-clone@0.1.0 build: `react-scripts build`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the amazon-clone@0.1.0 build script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /home/lazyubuntu/.npm/_logs/2022-07-12T13_26_59_561Z-debug.log`","state":"open","updated_at":"2022-07-13T02:57:26Z","created_at":"2022-07-12T13:33:40Z","creator_user_login":"deepakdubey8756"}
{"number":24889,"title":"Bug: SSR is loaded on demand","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\nReact There is no plugin like React-loadable that can load modules on demand in SSR rendering？\r\n\r\n\r\nhttps://github.com/jamiebuilds/react-loadable\r\nhttps://github.com/qq281113270/react-ssr-need-load.git\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-07-12T01:54:53Z","created_at":"2022-07-12T01:54:53Z","creator_user_login":"ygs-code"}
{"number":24884,"title":"Possible optimization to useSyncExternalStore's withSelector","body":"https://github.com/facebook/react/blob/dd2d6522754f52c70d02c51db25eb7cbd5d1c8eb/packages/use-sync-external-store/src/useSyncExternalStoreWithSelector.js#L70-L91\r\n\r\nHey, isn't line 89 in block above supposed to be right before line 78?\r\n\r\nI mean, if `prevSnapshot` and `nextSnapshot` are not equal, but `prevSelection` and `nextSelection` _are_ equal, shouldn't we at least update `memoizedSnapshot` to be equal to `nextSnapshot`?\r\n\r\nThat way, in the next run of this callback, we at least don't run `selector` and `isEqual` again.\r\n\r\nI may be missing something here, but I did make that change in our, pretty hefty, code base and all the tests passed and I got a nice performance boost.\r\n\r\n```js\r\nconst prevSnapshot: Snapshot = (memoizedSnapshot: any);\r\nconst prevSelection: Selection = (memoizedSelection: any);\r\n\r\nif (is(prevSnapshot, nextSnapshot)) {\r\n  // The snapshot is the same as last time. Reuse the previous selection.\r\n  return prevSelection;\r\n}\r\n\r\nmemoizedSnapshot = nextSnapshot;\r\n\r\n// The snapshot has changed, so we need to compute a new selection.\r\nconst nextSelection = selector(nextSnapshot);\r\n\r\n// If a custom isEqual function is provided, use that to check if the data\r\n// has changed. If it hasn't, return the previous selection. That signals\r\n// to React that the selections are conceptually equal, and we can bail\r\n// out of rendering.\r\nif (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\r\n  return prevSelection;\r\n}\r\n\r\nmemoizedSelection = nextSelection;\r\nreturn nextSelection;\r\n```","state":"open","updated_at":"2023-01-05T08:34:33Z","created_at":"2022-07-09T22:24:06Z","creator_user_login":"dutziworks"}
{"number":24881,"title":"Bug: React.lazy + Suspense issue","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. I have a simple \"Icon\" component that lazily imports other components using `React.lazy`:\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nfunction Icon({ icon, ...props }) {\r\n  const LazyIcon = React.lazy(() => import(`./icons/${icon}`));\r\n  return <LazyIcon {...props} />;\r\n}\r\n\r\nexport default Icon;\r\n```\r\n\r\n2. Then I try to use the said `Icon` component like this:\r\n\r\n```jsx\r\n<React.Suspense fallback={<p>Loading...</p>}>\r\n  <Icon icon=\"Foo\" />\r\n  <Icon icon=\"Bar\" />\r\n</React.Suspense>\r\n```\r\n\r\n3. It will never finish loading and only show the fallback\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/epic-hamilton-on6e0i\r\n\r\n## The current behavior\r\n\r\nOnly shows the fallback \"Loading...\"\r\n\r\n## The expected behavior\r\n\r\nRender the `./icons/Foo` and `./icons/Bar` components\r\n","state":"open","updated_at":"2023-02-09T06:52:41Z","created_at":"2022-07-09T10:25:58Z","creator_user_login":"micopiira"}
{"number":24876,"title":"Add a failing test case for a case when wakeable pings immediately after yielding and before resuming","body":"related to https://github.com/facebook/react/issues/24864 , explained in https://github.com/facebook/react/issues/24864#issuecomment-1178716544","state":"open","updated_at":"2022-07-09T10:51:23Z","created_at":"2022-07-08T08:39:02Z","creator_user_login":"Andarist"}
{"number":24871,"title":"Bug: duplicate keys create orphan DOM nodes, breaking v=f(d) even after the elements with duplicate keys should have been unmounted  ","body":"React version: 18.1.0 and 17.0.2 tested\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://stackblitz.com/edit/react-ts-jgpuht?file=App.tsx\r\n\r\n1. click the toggle button 10x times\r\n2. observe that the line \"this is line 2\" is duplicated 5x\r\n\r\nin the code, it's clear that \"this is line 2\" should be present at most once\r\n\r\nLink to code example: https://stackblitz.com/edit/react-ts-jgpuht?file=App.tsx\r\n\r\n\r\n## The current behavior\r\n\r\nWhen we:\r\n1. set toggle=true, on next rerender we render 2 elems with the same key (\"bar\")\r\n2. React adds 2 corresponding `<p>` DOM nodes to screen\r\n3. then, we set toggle=false, causing rerender which does not have the 2 \"bar\" keyed elems, and instead has one keyed \"foo\"\r\n\r\nResult:\r\nReact removes one of the `<p>` nodes keyed `bar`, but not both (!). The other `<p>` node remains orphaned onscreen. Future rerenders do not remove it. Repeating this process adds another orphan `<p>` node. Doing it 5x times adds 5x `<p>` nodes to screen, even though the component returns at most 2.\r\n\r\n\r\n## The expected behavior\r\n\r\nAdmittedly, duplicate keys are invalid in React. UB here is reasonable.\r\n\r\nThe issue is when we no longer have duplicate keys on screen. When we set toggle=false, the rerender does not return any elems with duplicate keys.\r\n\r\nHowever, at this point, view is not a pure function of state. The previous state (having duplicate keys) causes these orphan DOM elems to remain, even though the current render doesn't have them at all\r\n","state":"open","updated_at":"2022-07-08T23:38:40Z","created_at":"2022-07-07T18:52:48Z","creator_user_login":"jaredp"}
{"number":24869,"title":"Bug: isHostTimeoutScheduled in scheduler is never been reset true while scheduling.","body":"hi, I'm interested in the implementation of scheduler and try to make sense out of the code.\r\n\r\nI've noticed that there's a variable \"isHostTimeoutScheduled\" in file \"packages/scheduler/src/forks/Scheduler.js\", which might mean a scheduling timer is running, is set to \"true\" when a new delayed task coming and the fired task list(timerQueue) is empty.\r\n\r\nThe variable is set to \"false\" when the task is expired or flushwork (which means the timer is fired or canceled). However, the variable is never reset true when a new timer start.\r\n\r\nI'm not sure this is by design or somewhat other reasons, but I think the correct code should be like this:\r\n[fix: Reset isHostTimeoutScheduled true](https://github.com/maotoumao/react/commit/eae5998244324cddc12beb2b3b35aa1837dfd953)\r\n\r\nI'm appreciated if there's any reply.\r\n","state":"open","updated_at":"2022-07-07T16:58:47Z","created_at":"2022-07-07T16:58:47Z","creator_user_login":"maotoumao"}
{"number":24867,"title":"standalone GraphiQL support","body":"I'd like to use [Apollo Client Devtools](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools), or something similar which gets me some kind of [a graphical interactive GraphQL IDE](https://github.com/graphql/graphiql) for my app, with the standalone version of React Developer Tools.\r\n\r\n`window.__APOLLO_CLIENT__` is set in my React Native app. The Apollo Client Devtools extension works well in web apps with the same setup. I'm thinking something can be done to make this same extension work in the standalone `react-devtools` by exposing `window.__APOLLO_CLIENT__` and loading the Apollo tab in the standalone tool accordingly.\r\n\r\n[jhen0409/react-native-debugger](https://github.com/jhen0409/react-native-debugger) has [Apollo Client DevTools Integration](https://github.com/jhen0409/react-native-debugger/blob/master/docs/apollo-client-devtools-integration.md) and is what Apollo currently [recommends](https://www.apollographql.com/docs/react/integrations/react-native/) but I'd much rather be able to do this straight inside of the standalone `react-devtools` which I imagine will be better supported long term, etc.\r\n\r\nThis might be solvable in a more generic way to set things up for other extensions (e.g. Redux devtools) to work in the standalone version too which could be a big win but I don't yet understand the complexities with this nor how feasible this is.\r\n\r\nPlease advise. Thank you.","state":"open","updated_at":"2022-07-07T12:03:38Z","created_at":"2022-07-07T12:03:38Z","creator_user_login":"mfulton26"}
{"number":24865,"title":"Bug: Failed to execute 'insertBefore' on 'Node'.","body":"I have a react application with the following versions:\r\n\r\nReact version: 18.2.0\r\nReact-router-dom: 5.3.3\r\n\r\nI have Sentry installed on it to monitor errors. In the development env I don't have this error, but Sentry in production for some time now keeps reporting me the following error. I have more than 300 reports in the last 2 weeks and it didn't happen before.\r\n\r\n```bash\r\nNotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/25077237/177713121-e809ae3f-13b3-40cb-a773-736b5212fb65.png)\r\n\r\nI have seen that there are other issues related to this such as #22702, but I am not sure if it has to do with the same origin of the problem. \r\nI have seen the problem occur in different views/components.\r\n\r\n","state":"open","updated_at":"2022-07-07T07:28:12Z","created_at":"2022-07-07T07:28:12Z","creator_user_login":"victorst79"}
{"number":24852,"title":"[Fizz]: Support task priorities","body":"Certain tasks in Fizz are less urgent than others. The only use case today is fallback tasks however there will likely be more kinds in the future.\r\n\r\nBefore this change if the main content of a Suspense boundary suspends a fallback task is created and put into the pingedTask queue. Since we are already within the work loop this means the fallback will get worked on synchronously before the suspended item has a chance to resolve. This means that in many cases fallbacks are rendered even if they are not going to be used and it lengthens the time before we return to microtask or macrotask queues to process additional work that might unblock actual renderable content\r\n\r\nWith this change we now have two task queues. the default priority `pingedTasks` queue remains the same. A new lower priority`idleTasks` queue now exists as well. All default priority tasks are worked on synchronously in every `performWork` loop however idleTasks are only worked on if the work loop has not yet created any new pending tasks. If a new pending task is identified the `performWork` routine yields by scheduling a followup `performWork` call. It's important to note however that if the scheduling of work is sync then there will be no actual yield and all idleTasks will get worked on before control is returned to the runtime.\r\n\r\nWith this change I also updated the default work schedulign for Browser runtimes to use `setTimeout(fn, 0)`. This required some refactoring of tests to use jest.runAllTimers to drive the work loop.\r\n\r\nAdditionally the implementation for the work loop for FB implementation does not actually schedule anything and as such additional calls to `performWork` are needed.\r\n","state":"open","updated_at":"2022-08-02T10:31:50Z","created_at":"2022-07-05T18:39:19Z","creator_user_login":"gnoff"}
{"number":24851,"title":"Bug: can't use `react-dom/server` from `graaljs` script engine. ","body":"# Context:\r\n`graaljs` is a javascript engine, like `v8`, that runs on JVM. \r\nI'm trying to use `graaljs` to run `react-dom` and generate server-side rendered pages.\r\n# Problem\r\nThe package `react-dom/server` uses `TextEncoder`, that is not present in the `graaljs` engine.\r\nhttps://github.com/facebook/react/blob/v18.2.0/packages/react-server/src/ReactServerStreamConfigBrowser.js#L107\r\n`TextEncoder` is a `web` standard, not a `ECMAScript/Javascript` standard. \r\n\r\nI can't use `ReactServerStreamConfigNode`, because `graaljs` as a generic javascript engine, do not include packages like `util` or `stream`.\r\n\r\nI would like to know if is possible to implement a `ReactServerStreamConfigEngine`, that uses only `ECMAScript` standard features.\r\n\r\n\r\nReact version: 18.2.0\r\n","state":"open","updated_at":"2022-07-05T18:58:59Z","created_at":"2022-07-05T18:36:10Z","creator_user_login":"souenzzo"}
{"number":24850,"title":"Hydration mismatch error: suggestion to include mismatch details in production error message","body":"After upgrading to React 18 at Unsplash, we saw lots of hydration mismatch errors in production. This was not surprising because [React now logs these as errors whereas before they were development-only warnings](https://github.com/reactjs/rfcs/blob/main/text/0215-server-errors-in-react-18.md).\r\n\r\nHowever, when we looked at the errors in Sentry, there was no information in the error message to help us reproduce the problem. It seemed that the mismatches only occurred in very specific circumstances.\r\n\r\nReact does log this useful information but unfortunately it's only logged in the development build:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/176861636-3b87d281-cec4-4285-bd07-f0b00a8112d9.png)\r\n\r\nhttps://github.com/facebook/react/blob/229c86af07302d40b70c41de18106f80fe89836c/packages/react-dom/src/client/ReactDOMComponent.js#L234-L248\r\n\r\nWe made a small patch to `react-dom` to add the same information to the production error message. This made it easy to see that the issue was because our date formatting produced different results depending on the user's time zone:\r\n\r\n<img width=\"1292\" alt=\"image\" src=\"https://user-images.githubusercontent.com/921609/177387744-5a0a5924-af38-497e-8e2f-6445f40bad02.png\">\r\n\r\nI would like to suggest that this information is included in the production error message—presumably this would be useful debugging information for others React users.\r\n\r\nRelated discussion: https://github.com/facebook/react/issues/11189","state":"open","updated_at":"2023-07-28T18:35:03Z","created_at":"2022-07-05T18:02:38Z","creator_user_login":"OliverJAsh"}
{"number":24849,"title":"Bug: The first context passed into Flight is ignored after the first render","body":"Originally identified by @timneutkens I'm since reproduced in a failing test in https://github.com/facebook/react/pull/24848\r\n\r\nIf you pass server contexts to Flight the first context dependency is ignored after the first render\r\n\r\nReact version: 18.2 (Flight)\r\n\r\n## Steps To Reproduce\r\n\r\n1. render using a flight render and pass in at least one context in the form `[['ContextKey', 'context value'], ...]`\r\n2. observe expected (correct) results\r\n3. render again, using the same context option\r\n4. observe the default value for the first (or only) ContextKey is used instead of what was passed in\r\n\r\nLink to code example: https://github.com/facebook/react/pull/24848\r\n\r\n## The current behavior\r\nThe first context in the context list is ignored and the default value for that ContextKey is used\r\n\r\n## The expected behavior\r\nAll context values passed into render are used in that render.","state":"open","updated_at":"2022-07-05T19:06:08Z","created_at":"2022-07-05T17:07:07Z","creator_user_login":"gnoff"}
{"number":24848,"title":"[Flight] failing testcase - The first ServerContext should not be ignored on subsequent renders","body":"This failing test case demonstrates that if you render a server context twice in Flight the second time will regress to using the default context value for the first context dependency only\r\n\r\nPR will be updated later to fix the issue","state":"open","updated_at":"2022-07-05T17:12:20Z","created_at":"2022-07-05T17:01:04Z","creator_user_login":"gnoff"}
{"number":24847,"title":"Possible problem with the code","body":"Hey there.\r\nI was looking at the code of Fiber (ReactFiberCommitWork.new.js is the file) and I realized that the IntelliSense wasn't working in some parts of the code, like:\r\n\r\n![Screen Shot 2022-07-05 at 13 34 39](https://user-images.githubusercontent.com/29440533/177375099-89e7ef63-15b9-4e56-a228-825a7e22c0e3.png)\r\n\r\nIs it the expected behavior? I think that the next cases won't be achieved. \r\n","state":"open","updated_at":"2022-07-05T19:36:23Z","created_at":"2022-07-05T16:35:56Z","creator_user_login":"LuisFilipePedroso"}
{"number":24838,"title":"Bug: SetStateAction gets called multiple times after suspending single component in array and unsuspending other","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI want to keep previous page state without showing it. I store all open ReactElement pages in an array where every page except one is suspended by throwing an unresolved promise that gets resolved on demand.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://stackblitz.com/edit/react-ts-nms6sw\r\n2. Open console\r\n3. Click Next button\r\n4. Click Prev button\r\n5. Switch back and forth to see different values in console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://stackblitz.com/edit/react-ts-nms6sw\r\n\r\n## The current behavior\r\n\r\nResolving one promise for next to show page that's already in array and simultaneously creating promise and throwing it for current one causes multiple rerenders, because of multiple calls by React of SetStateAction passed to setPages. After that set of rerenders happens a single useEffect call (for each useEffect defined), like React gets stuck nondeterministically (amount of rerenders is random).\r\nThis multiple rerender behavior does not happen for React 17.\r\n\r\n## The expected behavior\r\n\r\nSetStateAction gets called once\r\n","state":"open","updated_at":"2022-07-03T10:24:28Z","created_at":"2022-07-03T10:24:28Z","creator_user_login":"Arton1"}
{"number":24834,"title":"ChildComponnet Re render not working with Key prop in react 18","body":"I am using a class component that has MUi tab. Unable to re render with  the latest data inside child component .\r\n\r\n- When I switch tabs  Re-Render happens with old data of another tab though key is provided inside <TabPanel> \r\n\r\n case \"layout\":\r\n        return (\r\n          <Suspense fallback={<span>Loading ...</span>}>\r\n            <XYZ\r\n              **key={content.key + index}**\r\n              type=\"Lyt\"\r\n              parentTabDetails={content}\r\n              parentTab={content.Title}\r\n            />\r\n          </Suspense>\r\n        );\r\n\r\nBreaking changes  in 18.0 (Working as expected in 17.0.2 )\r\nKIndly provide a fix or solution\r\nHelp Appreciated\r\n","state":"open","updated_at":"2022-07-25T14:14:46Z","created_at":"2022-07-01T07:46:54Z","creator_user_login":"yashaswinibprasad87"}
{"number":24832,"title":"test(react-art): add unit test for component resize","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\nImprove code quality by adding unit tests to react-art package\r\n\r\n## How did you test this change?\r\nRun `yarn test` in root folder\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-07-01T18:17:42Z","created_at":"2022-06-30T17:42:19Z","creator_user_login":"radunemerenco"}
{"number":24831,"title":"Bug: useSyncExternalStore update not batched within unstable_batchedUpdates","body":"## Steps To Reproduce\r\n\r\n1. schedule two updates using \"default priority\" scope (eg. from within setTimeout)\r\n2. let one of the updates be handled through `useSyncExternalStore` and let the other one be handled through regular `setState`\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/interesting-chatterjee-9ed8hj?file=/src/App.js (without `unstable_batchedUpdates`)\r\nhttps://codesandbox.io/s/prod-glitter-51vwm1?file=/src/App.js (with `unstable_batchedUpdates`)\r\n\r\n## The current behavior\r\n\r\nThe `useSyncExternalStore` update gets flushed and committed before the other one has a chance to be committed to the screen. This doesn't allow me to read the updated state of the committed DOM of the children components from within the Parent's effect\r\n\r\n## The expected behavior\r\n\r\nI would expect to be able to \"join\" this sync update of the `useSyncExternalStore` somehow. Ideally, I wouldn't have to wrap both with `unstable_batchedUpdates`. It would be cool if I could just schedule a single update with the same priority. If I understand correctly multiple updates coming from different `useSyncExternalStore` updates can be batched together (it doesn't work like `flushSync`, so it doesn't literally immediately flush the scheduled update) - and I would just like to hop on that train with my second update.\r\n\r\nI could live with the solution based on `unstable_batchedUpdates` but that doesn't seem to work either.","state":"open","updated_at":"2022-10-31T11:21:01Z","created_at":"2022-06-30T17:20:15Z","creator_user_login":"Andarist"}
{"number":24812,"title":"Bug: React converts boolean data-attributes to `\"true\"` but leaves boolean attributes as `\"\"`","body":"React converts boolean data-attributes to `\"true\"`, while leaving boolean attributes as `\"\"` (empty string). This is inconsistent with the way Javascript works and _also_ it's inconsistent from the way React treats attributes.\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Run [this CodeSandbox](https://codesandbox.io/s/fragrant-thunder-3dsi62?file=/src/App.js)\r\n\r\n```js\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function App() {\r\n  useEffect(() => {\r\n    // The React way:\r\n    const input = document.querySelector(\"input\");\r\n    console.log(\"=== React ===\");\r\n    console.log(\"1\", input.getAttribute(\"disabled\"));  // \"\"\r\n    console.log(\"2\", input.getAttribute(\"data-disabled\"));  // \"true\"\r\n\r\n    // The Javascript way:\r\n    document.querySelector(\".base\").innerHTML +=\r\n      '<input class=\"injected\" disabled data-disabled />';\r\n    const injected = document.querySelector(\".injected\");\r\n    console.log(\"=== Javascript ===\");\r\n    console.log(\"3\", injected.getAttribute(\"disabled\"));  // \"\"\r\n    console.log(\"4\", injected.getAttribute(\"data-disabled\"));  // \"\"\r\n\r\n    return () => injected.remove();\r\n  }, []);\r\n  return (\r\n    <div className=\"base\">\r\n      <input disabled data-disabled />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n2. Look at the console. This is what it returns:\r\n\r\n```\r\n=== React === \r\n1  \"\" \r\n2  true \r\n=== Javascript === \r\n3  \"\" \r\n4  \"\" \r\n```\r\n\r\nThis is what is expected:\r\n\r\n```\r\n=== React === \r\n1  \"\" \r\n2  \"\"    // <= different\r\n=== Javascript === \r\n3  \"\" \r\n4  \"\" \r\n```\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/fragrant-thunder-3dsi62?file=/src/App.js\r\n\r\n\r\n## The current behavior\r\n\r\nThe `data-X` attribute, when it doesn't have a value, is coerced to `\"true\"`, a behavior that is not observed in plain Javascript (stays as `\"\"`) and is also not observed with the way React treats plain boolean attributes (also stays as `\"\"`).\r\n\r\n\r\n## The expected behavior\r\n\r\nThe boolean attributes, both for plain attributes or data-attributes, behave in the same way. I don't know which one is \"the right way\", but surely treating them vastly different seems to be the wrong way.\r\n\r\nAlternative: maybe this is the expected behavior? But I couldn't find any mention to anything related to this in the official documentation, please let me know if I missed it somehow or if this needs to be documented otherwise.","state":"open","updated_at":"2022-07-03T19:00:06Z","created_at":"2022-06-29T13:34:57Z","creator_user_login":"franciscop"}
{"number":24809,"title":"fix(24808): add await to async function calls and remove redundant aw…","body":"…ait statements\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nBy running `npm run download-build` or `npm run download-build-for-head` not all promises are awaited and there was a redundant await. The same issue was found in some other places and fixed.\r\n\r\n## How did you test this change?\r\nI ran these commands and everything seemed to work ok, but losing a promise resolve on the way might cause some issues on future code updates.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-06-29T09:00:58Z","created_at":"2022-06-29T07:35:02Z","creator_user_login":"radunemerenco"}
{"number":24808,"title":"Bug: Async code and promises: redundant await and missing await in multiple places","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.3.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. run `npm run download-build` or `npm run download-build-for-head`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nSome async calls are not awaited and some non-async functions are awaited with redundancy\r\n\r\n## The expected behavior\r\nThe async calls should be awaited in order to ensure the code run as expected and avoid future possible bugs.\r\nRedundant await is just redundant - doesn't break the behaviour but it makes no sense to have them","state":"open","updated_at":"2022-06-30T11:29:44Z","created_at":"2022-06-29T07:27:26Z","creator_user_login":"radunemerenco"}
{"number":24797,"title":"[DevTools] open in editor by using fetch or tabs.create and fix open in editor does not work on Firefox","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n[[Devtools Feature]:[Open in Editor URL]Expect to add a switch to allow users to use GET requests](https://github.com/facebook/react/issues/24795)\r\n\r\n## How did you test this change?\r\n\r\n#### use http\r\n<img width=\"1228\" alt=\"wecom-temp-29c0a3f9f7a794f8d955d31bd5a7ce50\" src=\"https://user-images.githubusercontent.com/28336270/176590613-96f033a6-b0e1-47f3-8ef1-efe7bfb7b27f.png\">\r\n\r\n<img width=\"1229\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175958678-d052e0c1-a31c-4e2f-9e8c-a6716bf4bfe1.png\">\r\n\r\n#### use `vscode://` in firefox can open the url.\r\n<img width=\"1026\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/176590854-64e684c2-b987-4d4a-9ae3-0fe26b110353.png\">\r\n\r\n\r\n\r\n**If there is any suggestion, I will correct it immediately**\r\n\r\n","state":"open","updated_at":"2023-06-13T09:03:23Z","created_at":"2022-06-27T13:56:46Z","creator_user_login":"xlzy520"}
{"number":24795,"title":"[Devtools Feature]:[Open in Editor URL]Expect to add a switch to allow users to use GET requests","body":"It is now requested by default using window.open.If you use it a lot, you will leave a lot of new tabs.\r\n\r\n### Config\r\n<img width=\"611\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926162-ec42baa3-b718-4259-8eae-055c150530aa.png\">\r\n\r\n\r\n<img width=\"1085\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926129-f87bfb81-e483-4237-9b89-a9ff6ff734c4.png\">\r\n\r\n### window.open\r\n<img width=\"1003\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175925594-c23f3fdb-3f45-4c26-95d4-23e15f51426f.png\">\r\n\r\n**This problem can be avoided if GET request is used.**","state":"open","updated_at":"2022-09-14T02:31:03Z","created_at":"2022-06-27T10:58:21Z","creator_user_login":"xlzy520"}
{"number":24794,"title":"Bug: Getting Loader instead of UI in SSR with Lazy Suspense","body":" Hi, \r\n \r\n I have recently migrated to 18.2.0 from 16.8.0 and Using server side rendering. I have done the code spitting using lazy and suspense but found some issue with react. Some times I am getting my server rendered chunk and some time getting loader instead of chunk. Then I debugged and found react is adding some script.\r\n\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to your app using SSR app\r\n2. Use code splitting using lazy and suspense\r\n\r\n\r\n\r\nCode for SSR and Client:\r\n```\r\nconst Index = ({ isSSR, ...props }) => {\r\n  return (\r\n    <React.Suspense fallback={<LoaderUI />}>\r\n      <HomePageW isSSR={isSSR} {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n```\r\n\r\nSSR Code\r\n```\r\nconst page = renderToPipeableStream(\r\n    (\r\n      <div id=\"root\">\r\n        {\r\n        _sheet.collectStyles(\r\n          <ThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n              <HelmetProvider context={helmetContext}>\r\n                <StaticRouter history={history} location={history.location}>\r\n                  <Routes>\r\n                    <Route\r\n                      path=\"*\"\r\n                      element={(\r\n                        <Wrapper\r\n                          isMobile={isMobile}\r\n                          routes={routes}\r\n                          history={history}\r\n                          location={history.location}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Routes>\r\n                </StaticRouter>\r\n              </HelmetProvider>\r\n            </Provider>\r\n          </ThemeProvider>,\r\n        ) \r\n      }\r\n      </div>\r\n    ),\r\n    {\r\n      onShellReady() {\r\n        const didError = false;\r\n        res.statusCode = didError ? 500 : statusCode;\r\n        res.write(`<head>Title</head>`);\r\n\r\n        page.pipe(res);\r\n\r\n        res.write(`\r\n          <script>\r\n            window.addEventListener('load', function(){\r\n              ${loadJs(assets.vendor1.js)}\r\n              ${loadJs(assets.vendor2.js)}\r\n              ${chunks.reduce((s, chunk) => `${s}${loadJs(assets[chunk].js)}`, '')}\r\n              ${loadJs(assets.client.js)}\r\n            });\r\n          </script>\r\n      `);\r\n      },\r\n    },\r\n  );\r\n```\r\n\r\n\r\n## The current behavior\r\nScript has been added in the bottom of the page\r\n`function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if(\"/$\"===d)if(0===e)break;else e--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data=\"$\";a._reactRetry&&a._reactRetry()}};$RC(\"B:0\",\"S:0\")`\r\n\r\nand Loader is showing instead of UI. When I ran script added by react, the actual UI is shown. The script is doing their job but we don't need this from browser.\r\n\r\n### Showing Loader Instead of actual UI\r\n<img width=\"476\" alt=\"loader\" src=\"https://user-images.githubusercontent.com/6891544/175920734-ad6dc186-07d8-4491-9f90-909987bb4122.png\">\r\n\r\n### Actual UI with display none and some javascript has been added in the end of the page\r\n<img width=\"982\" alt=\"script\" src=\"https://user-images.githubusercontent.com/6891544/175920454-9e11db9f-e9dd-4886-a3e7-3424b256f1a9.png\">\r\n\r\n\r\n\r\n## The expected behavior\r\nOriginal Ui should be shown instead of loader UI.\r\n","state":"open","updated_at":"2023-08-27T17:12:14Z","created_at":"2022-06-27T10:23:33Z","creator_user_login":"hdlion"}
{"number":24791,"title":"Bug: eslint-plugin-react-hooks false positive conditional call after foreach","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n```\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\"\r\n\r\n    \"eslint\": \"^8.18.0\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n```\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://stackblitz.com/edit/vitejs-vite-tpaumc?file=src%2FApp.tsx&terminal=dev\r\n2. Run `npx eslint src`\r\n3. Get the following error:\r\n\r\n```\r\nerror  React Hook \"React.useState\" is called in function \"App.View\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\"  react-hooks/rules-of-hooks\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://stackblitz.com/edit/vitejs-vite-tpaumc?file=src%2FApp.tsx&terminal=dev\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nGiven the following pattern:\r\n\r\n```tsx\r\nconst MyComponent = () => {\r\n  return <MyComponent.Ready />;\r\n}\r\n\r\nMyComponent.Ready = () => {\r\n  const [...] = useX();\r\n\r\n  return (...);\r\n}\r\n```\r\n\r\nI get the following error:\r\n\r\nerror  React Hook \"React.useState\" is called in function \"MyComponent.Ready\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\"  react-hooks/rules-of-hooks\r\n\r\n\r\n## The expected behavior\r\n\r\nSince MyComponent.Ready is an actual component, I shouldn't get this error.\r\n","state":"open","updated_at":"2022-07-03T16:12:09Z","created_at":"2022-06-26T11:54:31Z","creator_user_login":"Newbie012"}
{"number":24789,"title":"bug : renderToPipeableStream and Readable stream not working together","body":"It is really frustrating that the `renderToPipeableStream` is not a true `Transform` stream because it prevents prepending a `doctype` at the beginning of a rendered JSX element that has lazy routes in them, making the rendered stream outputing a JSX code that lacks the doctype and making the browser enter in quirks mode.\r\n\r\nReact version: 18.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a Readable stream from the string `<!DOCTYPE html>`\r\n2. Try to pipe the stream to a `renderToPipeableStream`\r\n3. See that this is not possible\r\n\r\n## The current behavior\r\n\r\n`renderToPipeableStream` does not create a `Transform` nor a `Readable` stream. It can be easily piped to a response for example, but there is no way to plug a transform stream to manipulate the output for instance of simply prepending a string such as the doctype.\r\n\r\n```tsx\r\nimport {createElement} from \"react\";\r\nimport {renderToStaticMarkup, renderToPipeableStream} from \"react-dom/server\";\r\nimport {pipeline, Readable, PassThrough} from \"stream\";\r\n\r\nconst StreamExtra = {\r\n  // String -> PassThrough\r\n  prepend(value) {\r\n    const passThrough = new PassThrough();\r\n    passThrough.write(value);\r\n    return passThrough;\r\n  }\r\n};\r\n\r\npipeline(\r\n  Readable.from(renderToStaticMarkup(createElement(\"span\", null, \"React\"))),\r\n  StreamExtra.prepend(\"<!DOCTYPE html>\"),\r\n  process.stdout,\r\n  console.error\r\n);\r\n// <!DOCTYPE html><span>React</span>\r\n\r\npipeline(\r\n  renderToPipeableStream(createElement(\"span\", null, \"React With Suspense Somwewhere\")),\r\n  StreamExtra.prepend(\"<!DOCTYPE html>\"),\r\n  process.stdout,\r\n  console.error\r\n);\r\n\r\n// TypeError [ERR_INVALID_ARG_TYPE]: The \"body\" argument must be of\r\n// type function or an instance of Blob, ReadableStream, WritableStream,\r\n// Stream, Iterable, AsyncIterable, or Promise or { readable, writable }\r\n// pair. Received an instance of Object\r\n```\r\n\r\n## The expected behavior\r\n\r\nThis should be a stream so that it can be manipulated easily by the end-user. If we go deeper, this also prevents things like caching for instance, which could be great for performance (which is the main goal behind server-side rendering and hydratation).\r\n\r\n## Links\r\n\r\n*Notes: `process.stdout` is equivalent to `http.ServerResponse` since they are both `Stream` instances and `process.stdout` is easier for testing.*\r\n\r\n- [Reproduction](https://replit.com/@amin_nairi/OutlyingBogusAssociate#index.js)\r\n\r\n## Temporary solutions\r\n\r\n### Use the Readable stream first\r\n\r\n```tsx\r\nimport {createElement} from \"react\";\r\nimport {renderToPipeableStream} from \"react-dom/server\";\r\nimport {Readable} from \"stream\";\r\n\r\nReadable.from(\"<!DOCTYPE html>\").pipe(process.stdout);\r\n\r\nrenderToPipeableStream(createElement(\"h1\", null, \"Hello, world!\")).pipe(process.stdout);\r\n```\r\n\r\n### Write to the stream directly\r\n\r\n```tsx\r\nimport {createElement} from \"react\";\r\nimport {renderToPipeableStream} from \"react-dom/server\";\r\n\r\nprocess.stdout.write(\"<!DOCTYPE html>\");\r\n\r\nrenderToPipeableStream(createElement(\"h1\", null, \"Hello, world!\")).pipe(process.stdout);\r\n```\r\n\r\n### StreamExtra Elm style\r\n\r\n```tsx\r\nimport {createElement} from \"react\";\r\nimport {renderToStaticMarkup, renderToPipeableStream} from \"react-dom/server\";\r\nimport {pipeline, Readable, PassThrough, Transform} from \"stream\";\r\n\r\nconst StreamExtra = {\r\n  // String -> PassThrough\r\n  prependString(string) {\r\n    const passThrough = new PassThrough();\r\n    passThrough.write(string);\r\n    return passThrough;\r\n  },\r\n  // PipeableStream -> PassThrough\r\n  fromPipeableStream(pipeableStream) {\r\n    const passThrough = new PassThrough() \r\n    pipeableStream.pipe(passThrough);\r\n    return passThrough;\r\n  },\r\n  // String -> Transform\r\n  appendString(string) {\r\n    const transform = new Transform({\r\n      transform(chunk, encoding, next) {\r\n        next(null, chunk);\r\n      },\r\n      flush(next) {\r\n        this.push(string);\r\n        next();\r\n      }\r\n    }); \r\n\r\n    return transform;\r\n  }\r\n};\r\n\r\npipeline(\r\n  StreamExtra.fromPipeableStream(renderToPipeableStream(createElement(\"span\", null, \"React With Suspense Somwewhere\"))),\r\n  StreamExtra.prependString(\"<!DOCTYPE html><html><div id='root'\"),\r\n  StreamExtra.appendString(\"</div><script src='/index.js' type='module'></script></html>\"),\r\n  process.stdout,\r\n  console.error\r\n);\r\n\r\n// <!DOCTYPE html><html><span>React With Suspense Somwewhere</span></html>\r\n```\r\n\r\nNote that this solution will completely break the router on the client side, even though all the scripts are loaded and the suspense script as well.","state":"open","updated_at":"2023-02-24T04:50:50Z","created_at":"2022-06-25T21:14:07Z","creator_user_login":"aminnairi"}
{"number":24780,"title":"Bug: `react-test-renderer`'s `createNodeMock` doesn't get called in React Native","body":"React version (latest from the react native template):\r\n\r\n\"react\": \"18.0.0\"\r\n\"react-native\": \"0.69.0\"\r\n\"react-test-renderer\": \"18.0.0\"\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a react native project from the template provided in the [docs](https://reactnative.dev/docs/typescript) (I used the typescript template, but I don't think this will make a difference) \r\n2. Try to use `createNodeMock` to mock a ref while testing with `react-test-renderer`\r\n3. Add some `console.log`s to see that `createNodeMock` is never called and the ref isn't being mocked by `createNodeMock`.\r\n\r\nExample code:\r\n\r\n`App.tsx`\r\n\r\n```tsx \r\ninterface Measure {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  pageX: number;\r\n  pageY: number;\r\n}\r\n\r\nconst App = () => {\r\n  const [measure, setMeasure] = useState<Measure>();\r\n  const viewRef = useRef<View | null>(null);\r\n\r\n  const onLayout = () => {\r\n    // gets called\r\n    console.log('onLayout');\r\n    console.log('measure is truthy', !!viewRef.current?.measure); // => true\r\n    viewRef.current?.measure((x, y, width, height, pageX, pageY) => {\r\n      // never gets called\r\n      console.log('measure');\r\n      setMeasure({x, y, width, height, pageX, pageY});\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <View onLayout={onLayout} ref={viewRef}>\r\n        <Text>Test Text</Text>\r\n        <Text>\r\n          {measure\r\n            ? Object.values(measure).reduce((prev, next) => prev + next)\r\n            : ''}\r\n        </Text>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n```\r\n\r\n`App-test.tsx`\r\n\r\n```tsx\r\nit('renders correctly', () => {\r\n  const [x, y, width, height, pageX, pageY] = [1, 2, 3, 4, 5, 6];\r\n  const expectedText = x + y + width + height + pageX + pageY + '';\r\n\r\n  const {root} = renderer.create(<App />, {\r\n    createNodeMock: () => {\r\n      // never gets called\r\n      console.log('createNodeMock');\r\n      return {\r\n        measure: (fn: Parameters<NativeMethods['measure']>[0]) => {\r\n          // never gets called\r\n          console.log('createNodeMock measure');\r\n          fn(x, y, width, height, pageX, pageY);\r\n        },\r\n      };\r\n    },\r\n  });\r\n\r\n  // make sure I'm querying text correctly\r\n  const testText = root\r\n    .findAllByType(Text)\r\n    .find(text => text.props.children === 'Test Text');\r\n  expect(testText).toBeTruthy();\r\n\r\n  // trigger onLayout\r\n  root.findByType(View).props.onLayout();\r\n\r\n  act(() => {\r\n    // [ 'Test Text', '' ]\r\n    console.log(root.findAllByType(Text).map(text => text.props.children));\r\n\r\n    const measureText = root\r\n      .findAllByType(Text)\r\n      .find(text => text.props.children === expectedText);\r\n    expect(measureText).toBeTruthy(); // => fails\r\n  });\r\n});\r\n```\r\n\r\nLink to code example:\r\n\r\nI create a repository to show this issue. Just run `yarn` and `yarn test` to see the test failing and `createNodeMock` not being called.\r\n\r\nhttps://github.com/EduVencovsky/CreateNodeMockTest\r\n\r\n## The current behavior\r\n\r\n`createNodeMock` is not being called when testing with `react-native`. This issue is also related to `react-native-testing-library`'s [PR#227](https://github.com/callstack/react-native-testing-library/issues/227)\r\n\r\n## The expected behavior\r\n\r\n`createNodeMock` should work as described in the [docs](https://reactjs.org/docs/test-renderer.html#ideas) with `react-native` too and even if the component's ref is already mocked, `createNodeMock` should be called and replace that mock.\r\n\r\n## Observations\r\n\r\nI realized that `viewRef.current?.measure` exits and it's an actual mocked function, so maybe this could be related somehow with the issue.\r\n\r\nMy first assumption is that maybe `createNodeMock` is only called for components that the `ref`s don't have any value. But `react-native` already mocks the `View`'s ref and that's why `createNodeMock` doesn't get called.\r\n\r\nIf my assumption is true, I personally believe that this shouldn't happen, because this makes harder to mock the refs in your own way. So I would expect `createNodeMock` to override already mocked refs. But if this behavior is expected, then it  should be better detailed in the [docs](https://reactjs.org/docs/test-renderer.html#ideas).\r\nIf my assumption is false, I don't know what could be causing the issue.\r\n\r\nAnd to clarify, I am aware that there are other ways to mock the refs (and I'm already using it), but as `createNodeMock` makes it more convenient, I decided to open this issue. ","state":"open","updated_at":"2023-04-28T09:18:36Z","created_at":"2022-06-23T14:08:22Z","creator_user_login":"EduVencovsky"}
{"number":24779,"title":"[eslint-plugin-react-hooks] New Rule Proposal: no-unnecessary-effect","body":"https://beta.reactjs.org/learn/you-might-not-need-an-effect\r\n\r\nCan we have eslint rules to detect such unnecessary effects?\r\n\r\n```js\r\nfunction Form() {\r\n  const [firstName, setFirstName] = useState('Taylor');\r\n  const [lastName, setLastName] = useState('Swift');\r\n\r\n  // 🔴 Avoid: redundant state and unnecessary Effect\r\n  const [fullName, setFullName] = useState('');\r\n  useEffect(() => {\r\n    setFullName(firstName + ' ' + lastName);\r\n  }, [firstName, lastName]);\r\n  // ...\r\n}\r\n```\r\n\r\n```js\r\nfunction Form() {\r\n  const [firstName, setFirstName] = useState('Taylor');\r\n  const [lastName, setLastName] = useState('Swift');\r\n  // ✅ Good: calculated during rendering\r\n  const fullName = firstName + ' ' + lastName;\r\n  // ...\r\n}\r\n```\r\n\r\ncc @gaearon","state":"open","updated_at":"2022-06-23T10:42:18Z","created_at":"2022-06-23T10:42:18Z","creator_user_login":"clyfish"}
{"number":24778,"title":"May be a bug","body":"window.event is null in IE9/IE10, this cause read type property on null at line 373\r\n\r\nhttps://github.com/facebook/react/blob/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e/packages/react-dom/src/client/ReactDOMHostConfig.js#L370-L373","state":"open","updated_at":"2023-05-11T09:33:21Z","created_at":"2022-06-23T09:15:44Z","creator_user_login":"cfgxy"}
{"number":24770,"title":"Why not use an array to save fibers with side effects, but use a linked list on the finishedWork tree","body":"Hello，i'm curious why React17 uses a linked list on finishedWork tree instead of using an array to hold fiber nodes with side effects. It seems that it is easier to understand with arrays. Thank you for your answer\r\n\r\n```js\r\nlet effectFiberList = []; // an array to hold fiber nodes with side effects\r\n\r\n// in the deleteChild function, we can add the childToDelete directly to the effectFiberList\r\nfunction ChildReconciler(shouldTrackSideEffects) {\r\n  function deleteChild(returnFiber, childToDelete) {\r\n    if (!shouldTrackSideEffects) {\r\n      // Noop.\r\n      return;\r\n    }\r\n    //  var last = returnFiber.lastEffect;\r\n    //  if (last !== null) {\r\n    //    last.nextEffect = childToDelete;\r\n    //    returnFiber.lastEffect = childToDelete;\r\n    //  } else {\r\n    //    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\r\n    //  }\r\n    effectFiberList.push(childToDelete);\r\n    // childToDelete.nextEffect = null;\r\n    childToDelete.flags = Deletion;\r\n  }\r\n}\r\n\r\n// and in the completeUnitOfWork\r\nfunction completeUnitOfWork(unitOfWork) {\r\n  var completedWork = unitOfWork;\r\n  do {\r\n    // ....\r\n    var flags = completedWork.flags;\r\n    if (flags > PerformedWork) {\r\n      //   if (returnFiber.lastEffect !== null) {\r\n      //     returnFiber.lastEffect.nextEffect = completedWork;\r\n      //   } else {\r\n      //     returnFiber.firstEffect = completedWork;\r\n      //   }\r\n      //   returnFiber.lastEffect = completedWork;\r\n      effectFiberList.push(completedWork);\r\n    }\r\n    //....\r\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\r\n    workInProgress = completedWork;\r\n  } while (completedWork !== null); // We've reached the root.\r\n}\r\n\r\n```\r\n","state":"open","updated_at":"2022-06-22T10:20:29Z","created_at":"2022-06-22T02:21:13Z","creator_user_login":"lizuncong"}
{"number":24769,"title":"Waiting for React to connect error with basic new app setup","body":"### Error I'm seeing: \r\n\r\nReactdev-tools hangs at the setup screen and says \"waiting fro React to connect\".\r\n\r\n### What I'm expecting to see\r\n\r\nReact native dev tools connects and works.\r\n\r\n### Versions\r\n    node v16.15.0\r\n    \"expo\": \"~45.0.0\",\r\n    \"expo-status-bar\": \"~1.3.0\",\r\n    \"react\": \"17.0.2\",\r\n    \"react-dom\": \"17.0.2\",\r\n    \"react-native\": \"0.68.2\",\r\n    \"react-native-web\": \"0.17.7\"   \r\n\r\n### Steps to reproduce:\r\n\r\n```\r\nnpm install -g react-devtools\r\nnpm install -g expo-cli\r\nexpo init AwesomeProject\r\ncd AwesomeProject\r\nexpo start\r\ni - when expo finishes loading and allow the IOS simulator to load.\r\n```\r\nIn a separate console window I navigate to my project root.\r\nThen I run `react-devtools`.\r\nThen in the running app I open the on-screen menu and select \"Debug remote js\".\r\nNow I wait.\r\nThen I try opening the menu again and selecting \"Show Element Inspector\". \r\n\r\nThen, I try different permutations of starting and stopping expo, react-devtools, selecting debug remote js, and the show element inspector. Nothing changes the \"waiting for react to connect\" message.\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-08-09T04:34:21Z","created_at":"2022-06-21T23:27:43Z","creator_user_login":"adiakritos"}
{"number":24768,"title":"Not able to edit array in react devtools while inspection","body":"On continuation to this issue - https://github.com/facebook/react-devtools/issues/102\r\n\r\nStill, it seems the issue is not resolved, tried adding a few more elements but appears \"new entry\" is not getting pushed on hitting enter.","state":"open","updated_at":"2022-06-21T10:18:44Z","created_at":"2022-06-21T10:17:52Z","creator_user_login":"ManishaMuskan"}
{"number":24762,"title":"[Devtools Feature]:let devtool component picker to spport custom renderer which runs on web","body":"I develop a custom renderer `egreact`, it's a custom renderer for egret , egret is a game engine depend on canvas.\r\n\r\nThanks for `injectIntoDevTools` that users can view components tree by react devtool easily.But unfortunately, `injectIntoDevTools` does't provide an interface for picking a custom renderer component.\r\n\r\nTo support it, i read the source code of devtool and tried writing some inject code. Fortunately, it works well!\r\n\r\n![https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif](https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif)\r\n\r\n**Here is what i did mainly:**\r\n\r\n**1.intercept `window.listener`**\r\n\r\n```tsx\r\n// @link https://github.com/facebook/react/blob/c3d7a7e3d72937443ef75b7e29335c98ad0f1424/packages/react-devtools-shared/src/backend/views/Highlighter/index.js#L41\r\nfunction registerListenersOnWindow(window) {\r\n    // This plug-in may run in non-DOM environments (e.g. React Native).\r\n    if (window && typeof window.addEventListener === 'function') {\r\n      window.addEventListener('click', onClick, true);\r\n      window.addEventListener('mousedown', onMouseEvent, true);\r\n      window.addEventListener('mouseover', onMouseEvent, true);\r\n      window.addEventListener('mouseup', onMouseEvent, true);\r\n      window.addEventListener('pointerdown', onPointerDown, true);\r\n      window.addEventListener('pointerover', onPointerOver, true);\r\n      window.addEventListener('pointerup', onPointerUp, true);\r\n    }\r\n  }\r\n```\r\n\r\n [my code](https://github.com/xingxinglieo/egreact/blob/a6214979274e29f6252f8aaacb2a86806e688db3/packages/core/src/devtool.ts#L122), intercept `window.listener` to judge is the point  in the canvas, if true, mock an event which target is game engine instance.\r\n\r\n```tsx\r\nconst proxyHandler: EventHandler = function (e: MouseEvent) {\r\n        const { pageX: x, pageY: y } = e\r\n        const r = getCanvas().getBoundingClientRect()\r\n        r.x += window.scrollX\r\n        r.y += window.scrollY\r\n        // to judge is mouse envent ponit in canvas\r\n        if (x > r.x && x < r.x + r.width && y > r.y && y < r.y + r.height) {\r\n          const scale = caculateScale()\r\n          const target = findTargetByPosition(\r\n            egret.lifecycle.stage,\r\n            (x - r.x) / scale,\r\n            (y - r.y) / scale,\r\n          ) as any\r\n          // mock a new event, change target to egret instance, because e.target is read only\r\n          e = {\r\n            ...e,\r\n            preventDefault: e.preventDefault.bind(e),\r\n            stopPropagation: e.stopPropagation.bind(e),\r\n            target,\r\n          }\r\n}\r\n```\r\n\r\n**2.proxy `window.getComputedStyle`** \r\n\r\n```tsx\r\n/**\r\n * @description proxy window.getComputedStyle，let it can handle game engine instance\r\n * @link https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L113\r\n */\r\nexport function proxyGetComputedStyle() {\r\n  window.getComputedStyle = function (el, pseudo) {\r\n    if (\r\n      Object.entries(catalogueMap).some(\r\n        ([n, catalogue]) => catalogue.__Class && el instanceof catalogue.__Class,\r\n      )\r\n    ) {\r\n      return emptyCSSStyleSheet\r\n    } else {\r\n      return getComputedStyle.call(this, el, pseudo)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**3.compliant dom attributes is used in devtool**\r\n\r\n```tsx\r\nif (process.env.NODE_ENV !== 'production') {\r\n    // devtool need to get rect of element\r\n    // https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L108\r\n    instance.getBoundingClientRect = () => getBoundingClientRect(instance)\r\n\r\n    // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L193\r\n    instance.nodeType = 1\r\n\r\n    // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L233\r\n    instance.nodeName = instance.__class__\r\n\r\n    instance.ownerDocument = document\r\n  }\r\n```\r\n\r\nBased on this, I hope the `injectIntoDevTools` can provide the interface like this \r\n\r\n```tsx\r\ninterface InjectIntoDevToolsOptions {\r\n\t\t\t// to judge is the point in the range of custom renderer,\r\n\t\t\t// if true, return instance\r\n\t\t\tisInCustomRenderer: (Event) => instance | null \r\n\t\t\t// get left/top/width/height of instance\r\n\t\t\tgetBoundingClientRect: (instance) => any \r\n\t\t\t// get border/margin/padding/content of instance\r\n\t\t\tgetComputedStyle: (instance) => any\r\n\t\r\n}\r\n```","state":"open","updated_at":"2022-06-21T00:25:52Z","created_at":"2022-06-20T11:50:29Z","creator_user_login":"xingxinglieo"}
{"number":24744,"title":"Make hard JS indexof not found error more developer-friendly","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nWhile debugging some new console output in the debugger complaining about a call attempt on a non-function, I found this test's `toThrow()` was meant to capture the hard JS error, but wasn't specific. To make the toThrow() more specific, and provide more helpful information in the error, I crafted a more developer-friendly message to include in the thrown Error that should save a debugging cycle for the next people that run into it. I noticed that I had to add the check in removeChild as well, which attempted to call `indexOf` on the same invalid `parentInstance.children` without checking the type.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nI augmented the existing test to verify the *specific* user-friendly thrown error, and added a second test case that captures the original abuse case whose debugging led me to discover this issue. `yarn test` and `yarn test --prod` both pass on my x64 MacBook Pro running MacOS 12.4 and the node version specified in the repo's .nvmrc file.\r\n","state":"open","updated_at":"2022-06-19T16:49:01Z","created_at":"2022-06-17T00:17:54Z","creator_user_login":"matthargett"}
{"number":24743,"title":"Bug: Suspense does not [always] reset state of suspended components ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1, probably 18.2 as well but can't chose it in CodeSandbox \r\n\r\n## Exhibit A\r\n\r\n### Steps To Reproduce\r\n\r\n1. Open https://codesandbox.io/s/nice-danilo-ej7mlr?file=/src/App.js, click on \"Add Resource\" to create resource\r\n\r\n### The current behavior\r\n\r\nThis is a variation on the [Concurrent Mode documentation sample](https://17.reactjs.org/docs/concurrent-mode-suspense.html#solving-race-conditions-with-suspense), but without the Suspense wrapping the consumer of resource. Clicking on the button sets state of the FirstChild component, `resource` variable is truthy and SecondChild is rendered, which reads resource and throws out a promise, and suspends (is this the right term?) _both FirstChild and SecondChild_ as SecondChild is **not** wrapped in Suspense. After the promise is resolved, both FirstChild and SecondChils are rendered.\r\n\r\n### The expected behavior\r\n\r\nAccording to the documentation, [previous issues](https://github.com/facebook/react/issues/24534) and common sense (setting state is **not** inside Transition), both FirstChild and SecondChild are unmounted when Suspense shows fallback, so state of the FirstChild should be reset. Instead, it somehow preserves the resource inside state and renders SecondChild.\r\n\r\n## Exhibit B\r\n\r\n### Steps To Reproduce\r\n\r\n1. Open https://codesandbox.io/s/funny-pateu-z4cr8t?file=/src/App.js, click on \"Refresh\"\r\n\r\n### The current behavior\r\n\r\nThis is a modification of the previous sandbox, but resource is first created outside of FirstChild and can be refreshed, without Transition and even inside setTimeout so that React can't be smart and track it as event handler. Additional state `randomValue` is present that is preserved after unmounting and mounting again.\r\n\r\n### The expected behavior\r\n\r\nAs previously, I expect that state is reset, and `randomValue` is a new number on every refresh. Same result if using `useMemo` or `useRef`.\r\n\r\n## Exhibit C\r\n\r\n### Steps To Reproduce\r\n\r\n1. Open https://codesandbox.io/s/busy-mestorf-folp47?file=/src/App.js\r\n\r\n### The current behavior\r\n\r\nCode is stuck in an infinite loop. A new resource is created not outside of component and not inside event handler, but during render. With everything else equal, and contrary to the previous two examples, it (apparently) does not save the state that has resource but resets it.\r\n\r\n### The expected behavior\r\n\r\nBiiig question mark here. My expectations is that components inside Suspense are fully unmounted and lose all state, hence we need to either create resources outside of render tree, or place state with resources above Suspense, aka wrap children in additional Suspense. But that does not seem to be the case in the first two examples. Which means I have no idea how it should behave and if it is undocumented feature or a bug. Also, `useEffects` are also not running after unmounting-and-mounting, but `useLayoutEffects` do, which seems in line with [React 18 RFC](https://github.com/reactjs/rfcs/pull/213).","state":"open","updated_at":"2023-06-20T21:16:58Z","created_at":"2022-06-16T23:22:39Z","creator_user_login":"Malgalad"}
{"number":24741,"title":"React DOM: Add support for `hidden=\"until-found\"`","body":"Stacked on [#24947](https://github.com/facebook/react/pull/24947) ([Diff against #24947](https://github.com/facebook/react/compare/eps1lon:test/attributes-spec...eps1lon:fix/hidden-until-found))\r\n\r\n## Summary\r\n\r\nCloses https://github.com/facebook/react/issues/24740\r\n\r\n## How did you test this change?\r\n\r\n\r\n- [x] Attribute fixture (commited changes with non-experimental build since this is the build we were using before)\r\n- [x] [Codesandbox from repro](https://codesandbox.io/s/lingering-river-4jor1y) will contain matching behavior of DOM and React: https://codesandbox.io/s/lucid-benz-u2oksw\r\n","state":"open","updated_at":"2023-02-11T11:42:57Z","created_at":"2022-06-16T17:46:56Z","creator_user_login":"eps1lon"}
{"number":24740,"title":"Bug: `hidden` attribute does not accept string values","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: \r\n\r\n```\r\n \"react\": \"18.3.0-next-522f47345-20220614\",\r\n \"react-dom\": \"18.3.0-next-522f47345-20220614\",\r\n```  \r\n\r\n## Steps To Reproduce\r\n\r\n```jsx\r\n<span hidden=\"until-found\">Hello React<span>\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/headless-violet-ygn593\r\n\r\n## The current behavior\r\n\r\nReact will turn hidden into a boolean attribute and removes \"until-found\":\r\n\r\n![preview of the dom after react-dom rendered until-found](https://user-images.githubusercontent.com/4113649/174130287-c07a5d53-e31c-43b4-8925-84a1c3dbf18d.jpg)\r\n\r\n## The expected behavior\r\n\r\nReact does not strip \"until-found\" to allow using [hidden-until-found in Chrome 102+](https://developer.chrome.com/articles/hidden-until-found/) for better SEO and accessibility.","state":"open","updated_at":"2023-05-19T11:24:55Z","created_at":"2022-06-16T17:25:12Z","creator_user_login":"jantimon"}
{"number":24731,"title":"[DevTools Bug]: Open in editor does not work on Firefox","body":"### Website or app\r\n\r\nhttps://github.com/lwkchan/test-app\r\n\r\n### Repro steps\r\n\r\nThis happens for any local React App, but I've provided a small CRA in case any automation is done. \r\n\r\n1. Visit the locally run app on Firefox Browser. In my case, v101.0.1 (64-bit)\r\n2. Set up open in editor URL in settings, set up open in Editor URL. I used `\"vscode://file/{path}\"`\r\n3. On the Components pane, select any element in the page\r\n4. Click on \"Open in Editor\" button\r\n\r\nActual result:\r\nNothing happens. The link does not open in my editor\r\n\r\nDesired result:\r\nThe link should open in my VSCode editor\r\n\r\nI think the reason why this is happening is because of a Firefox bug where `window.open` does not work in extensions. It is used in [InspectedElement.js](https://github.com/facebook/react/blob/a4ead704ba1df8718d4866a23ac25e78f8ea901a/packages/react-devtools-shared/src/devtools/views/Components/InspectedElement.js#L228) to open the source url. According to https://bugzilla.mozilla.org/show_bug.cgi?id=1282021, the extension should use `browser.windows.create` for Firefox\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2023-05-19T14:07:40Z","created_at":"2022-06-15T16:17:24Z","creator_user_login":"lwkchan"}
{"number":24730,"title":"React DOM: Support boolean values for `inert` prop","body":"Stacked on [#24947](https://github.com/facebook/react/pull/24947) ([Diff against #24947](https://github.com/facebook/react/compare/eps1lon:test/attributes-spec...eps1lon:feat/inert))\r\n\r\n## Summary\r\n\r\nAdds support for [`HTMLElement.inert`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert#browser_compatibility) behind `enableNewBooleanProps` which is turned on in experimental builds.\r\n\r\nNote that the previous workaround (`inert=\"\"`) will no longer work since the empty string is considered `false` for boolean props.\r\n\r\nCloses https://github.com/facebook/react/issues/17157\r\n\r\n## How did you test this change?\r\n\r\nYou need Chrome >=102 (or any supporting browser listed in https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert#browser_compatibility).\r\n\r\n- [x] Attribute fixture (commited changes with non-experimental build since this is the build we were using before)\r\n- [x] [Codesandbox from repro](https://codesandbox.io/s/react-inert-lb4beo?file=/src/index.js) will contain matching behavior of DOM and React: https://codesandbox.io/s/react-inert-hmvuez\r\n","state":"open","updated_at":"2023-08-30T03:40:13Z","created_at":"2022-06-15T15:54:03Z","creator_user_login":"eps1lon"}
{"number":24723,"title":"Fix the message of \"Cannot read property\"","body":"## Summary\r\n\r\nWhen running the test case with Node@16.14.0, showing the follow message.\r\n\r\n![image](https://user-images.githubusercontent.com/1274730/173620316-2363343f-614b-4cd2-ac37-d45c1219112f.png)\r\n\r\n\r\n","state":"open","updated_at":"2022-06-15T14:11:00Z","created_at":"2022-06-14T15:47:05Z","creator_user_login":"creamidea"}
{"number":24722,"title":"New hook; useForwardRef","body":"When working with React.forwardRef it can be kind of a hassle to make it work, since it can be either a callback ref or object ref.\r\n\r\nI propose adding a new hook; useForwardRef that handles this.\r\n\r\nExample on how to implement it with React:\r\n\r\n```\r\nconst useForwardRef = <T,>(\r\n  ref: ForwardedRef<T>,\r\n  initialValue: any = null\r\n) => {\r\n  const targetRef = useRef<T>(initialValue);\r\n\r\n  useEffect(() => {\r\n    if (!ref) return;\r\n\r\n    if (typeof ref === 'function') {\r\n      ref(targetRef.current);\r\n    } else {\r\n      ref.current = targetRef.current;\r\n    }\r\n  }, [ref]);\r\n\r\n  return targetRef;\r\n};\r\n\r\nconst InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(\r\n  (props, ref) => {\r\n   const forwardedRef = useForwardRef<HTMLInputElement>(ref);\r\n   // Cool code....\r\n  }\r\n );\r\n```\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-06-15T22:59:35Z","created_at":"2022-06-14T12:43:25Z","creator_user_login":"lejahmie"}
{"number":24720,"title":"Make React more friendly with other DOM-Manipulation libraries","body":"Currently I am working on integrating React into project with existing UI-Framework. The problem is that both of them can modify the DOM. For the old framework that's not a problem, but for React it's not. Every time something get changed in DOM React has to sync the actual DOM with it's Virtual DOM. Adding and updating of elements are solved by manual rerendering. But removing of elements lead to the exceptions  \"Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.\" \r\n\r\nWe tried to implement our custom renderer with [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler). \r\nBut later we found out that we only need to extend the current [react-dom](https://github.com/facebook/react/tree/main/packages/react-dom) package. So the problem was solved by adding `if` statements to the [ReactDOMHostConfig.js](https://github.com/facebook/react/blob/be229c5655074642ee664f532f2e7411dd7dccc7/packages/react-dom/src/client/ReactDOMHostConfig.js#L565-L581):\r\n```\r\nexport function removeChild(\r\n  parentInstance: Instance,\r\n  child: Instance | TextInstance | SuspenseInstance,\r\n): void {\r\n  // remove only if an element exists\r\n  if (parentInstance.contains(child)) {\r\n    parentInstance.removeChild(child);\r\n  }\r\n}\r\n\r\nexport function removeChildFromContainer(\r\n  container: Container,\r\n  child: Instance | TextInstance | SuspenseInstance,\r\n): void {\r\n  if (container.nodeType === COMMENT_NODE) {\r\n    (container.parentNode: any).removeChild(child);\r\n  } else {\r\n    // remove only if an element exists\r\n    if (container.contains(child)) {\r\n      container.removeChild(child);\r\n    }\r\n  }\r\n}\r\n```\r\nWould it be possible to apply this update to the official version?\r\n\r\nWe understand that not all users use React like this. But keeping in mind that one of the strengths of react is that it can be embedded in any web application and can be used with other DOM-Manipulation libraries. \r\n\r\nThis change would make the integration process of React with other libraries even more simpler.\r\n","state":"open","updated_at":"2023-04-25T12:53:19Z","created_at":"2022-06-14T11:00:59Z","creator_user_login":"erkebek"}
{"number":24712,"title":"Used bind() method as well as improved readability","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nUsed bind() method as well as improved readability\r\n\r\n## How did you test this change?\r\n\r\nFast Performance\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-06-12T19:03:38Z","created_at":"2022-06-12T18:58:20Z","creator_user_login":"Prabhnometery"}
{"number":24711,"title":"[Fast Refresh] remount when component type change","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nTo fix: #24710 \r\n\r\n\r\n## How did you test this change?\r\n\r\nadd related tests in `react-refresh/src/__tests__/ReactFresh-test.js`, and then run `yarn test` and `yarn test --prod`\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-06-12T08:23:24Z","created_at":"2022-06-12T08:20:23Z","creator_user_login":"await-ovo"}
{"number":24710,"title":"Bug: Fast Refresh crashed when wrapping function in memo.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nAs described in this issue: https://github.com/vercel/next.js/issues/37241\r\n\r\nReact version: `^18`\r\n\r\n## Steps To Reproduce\r\n\r\nI can reproduce this issue in next.js, react-scripts and vite, here are the reproducible repositories: \r\n\r\n* react-scripts: https://codesandbox.io/s/react-scripts-fast-refesh-yur9su?file=/src/Test.js\r\n* Next.js: https://stackblitz.com/edit/nextjs-huqfxi?file=components%2FTest.jsx\r\n* Vite: https://stackblitz.com/edit/vitejs-vite-d9y97z?file=src%2FTest.tsx\r\n\r\n1. change  component from `function` to `React.memo`:\r\nedit code in `Test.jsx`:\r\n\r\n```\r\nexport function Test() {\r\n  return <h1>hi test</h1>;\r\n}\r\n```\r\n\r\nchange it to: \r\n\r\n```\r\nexport const Test = memo(function Test() {\r\n  return <h1>test memo</h1>;\r\n});\r\n```\r\nyou can see the error in your browser console:\r\n![image](https://user-images.githubusercontent.com/41503212/173223462-a67e6875-0b51-445b-81da-7b5c490c3f0a.png)\r\n\r\nAfter manually refreshing the page and changing the code back to the original, there was no error, but the hot update did not work at all.\r\n\r\n2. change component from `function` to `React.forwardRef`:\r\n\r\nSame result as in step 1.\r\n\r\n3. change component from `React.memo` to `React.forwardRef`:\r\n\r\nchange component `Test` from \r\n\r\n```\r\nexport const Test = memo(function Test() {\r\n  return <h1>test memo</h1>;\r\n});\r\n```\r\nto \r\n\r\n```\r\nexport const Test = forwardRef(function Test() {\r\n  return <h1>forward ref</h1>;\r\n});\r\n```\r\n\r\nHot update has no effect, the page shows the result before modification.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nAs described above.\r\n\r\nhttps://user-images.githubusercontent.com/41503212/173224005-9d7ab951-edcb-41e6-b415-d9fd89bb345e.mp4\r\n\r\n\r\n\r\n## The expected behavior\r\nFast Refresh works fine when changing component types.\r\n","state":"open","updated_at":"2022-06-12T08:18:33Z","created_at":"2022-06-12T08:18:33Z","creator_user_login":"await-ovo"}
{"number":24709,"title":"Bug: Chrome Memory Leak When Mounting Many Divs","body":"_React version: 18.1.0_\r\n \r\n **Summary**\r\nReact seems to cause Chrome to leak core Blink (renderer) memory when a large number of divs are mounted. Significantly more memory is leaked than when an equivalent script is run using vanilla JS.\r\n\r\nIn the following reproduction, 100k divs are mounted at a time. We loop through 50 \"pages\", each with 100k divs. We then render a blank page (or multiple pages with a single div, to ensure that React isn't holding onto the prior tree).\r\n\r\n**React Version:**\r\n400 MB of total \"Memory Footprint\" is retained. Note that the JS Memory usage is only 40MB. (Also note that the browser's total memory usage peaks significantly higher while these massive pages are loaded.)\r\n<img width=\"898\" alt=\"image\" src=\"https://user-images.githubusercontent.com/953103/173206878-c5deeb4f-2ed4-4fdd-9ac5-17a0b8bafd23.png\">\r\n_(Screenshot from Chrome's \"Task Manager\")_\r\n\r\nIn another run, 300 MB of total \"Memory Footprint\" is retained. Note that the live JS Memory usage is only 15MB. \r\n<img width=\"910\" alt=\"image\" src=\"https://user-images.githubusercontent.com/953103/173206531-154f221e-e514-4f50-8619-9d986dc2b4c4.png\">\r\n\r\n**Pure JS Version:**\r\n160 MB of total \"Memory Footprint\" is retained. Note that the JS Memory usage is only 2MB. \r\n<img width=\"900\" alt=\"image\" src=\"https://user-images.githubusercontent.com/953103/173206748-caf6f195-7a97-4532-863c-08342d11c210.png\">\r\n\r\n**The browser is thus retaining an extra ~200MB (~300MB / 400MB vs ~150 MB) of memory when React is used.**\r\n\r\n**Context:**\r\nI've dug through the JS Memory Heap dumps for both versions, but can't find a clear explanation for why Chrome is holding onto more memory here. \r\n\r\nThe issue still occurs when les divs are mounted, but mounting more divs makes the pattern easier to see. \r\n\r\nI believe that this issue is the root-cause of a real-world issue I've been having in another application. In the real application we see an even bigger leak of > 1GB. In the following screenshot 1.5GB of total \"Memory Footprint\" is retained, while only 400MB of JS Memory is used.\r\n<img width=\"1663\" alt=\"image\" src=\"https://user-images.githubusercontent.com/953103/173207147-5193d1bd-001a-41d7-8c8f-f7fb7187fe62.png\">\r\n\r\n**Hypothesis:** \r\nI'm in contact with a Chrome-team developer who ran a separate reproduction script for our real-world application, and they hypothesized that Chrome was allocating a large amount of styles here. However, the issue still occurs when all CSS is removed. Is it possible that React is causing extra styles to be attached to these divs somehow? (Not sure if this is a red-herring or not. This might be a separate issue with our application.)\r\n\r\n_Quote from someone on the Chrome team:_\r\n> I ran it through chrome://tracing and it looks like there are a lot of Blink (renderer) objects being allocated on PartitionAlloc, which is the allocator used for non-GC'd objects within the renderer. These tend to be performance-sensitive classes like strings, vectors, DOM nodes, style data, etc. The memory dump lists the bulk of this memory as <unspecified> (not web_cache, font_caches, site_storage, or parkable_strings).\r\nI observed several OOM crashes while doing this, and the traces uploaded to Google's internal crash database all had [StyleInheritedVariables::Copy()](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/style/style_inherited_variables.h;l=26;drc=2cf5119601581875cd6ad42c13c8a98b544d16fa) which doesn't necessarily mean that there's a leak there, but suggests that the app is causing a lot of copies of this object to be made. This object is allocated on PartitionAlloc, so that's a bit suspicious. I believe this is also not reflected in the JS heap size, so that's consistent with your observations. This object is used for the [CSS Properties and Values API](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API), in particular for storing custom properties that allow inheritance. Below is the relevant portion of the call stack. You can look up the code on [source.chromium.org](http://source.chromium.org/) if you want. I took a quick look but all I can tell is that it probably has something to do with setting, changing, inheriting, or registering a CSS variable. I don't know if merely invoking var() causes the copy to be made.\r\nSo as a first step, I'd remove any uses of inherited CSS custom properties and see if that changes anything.\r\n\r\n\r\n## Steps To Reproduce\r\nNote that you must give time for Chrome's GC to kick-in after the test stops. The test will take a few minutes to run.\r\n\r\n_Warning: These load heavy pages_\r\n- React Reproduction: https://mfranzs.github.io/react-leak/\r\n- React Code: https://github.com/mfranzs/react-leak/blob/main/src/App.js\r\n- Pure-JS Reproduction: https://mfranzs.github.io/react-leak/pure-js.html\r\n- Pure-JS Code: https://github.com/mfranzs/react-leak/blob/main/docs/pure-js.html\r\n\r\n**React**:\r\n```\r\n\r\nfunction App() {\r\n  const [i, setI] = useState(0);\r\n\r\n  // Re-render this component every 100ms\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      setI((curI) => (curI += 1));\r\n    }, 100);\r\n  }, []);\r\n\r\n  // 50 times, render a large list of 100k divs\r\n  // We don't construct this large array on the initial run so that our `useEffect` closure \r\n  // doesn't accidentally include a large `c` array.\r\n  let c = [];\r\n  if (i > 2 && i < 50) {\r\n    for (let j = 0; j < 100 * 1000; j++) {\r\n      c.push(\r\n        <div>\r\n          {j} - {Math.random()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      Memory Test - {i}\r\n      <br />\r\n      {c}\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\n**Pure JS:**\r\n```\r\n<title>100k Divs Vertically, then Clear</title>\r\n\r\n<div id=\"root\"></div>\r\n\r\n<script>\r\n  const root = document.getElementById(\"root\");\r\n\r\n  let i = 0;\r\n  const int = setInterval(() => {\r\n    console.log(i);\r\n\r\n    for (const child of [...root.childNodes].reverse()) {\r\n      child.remove();\r\n    }\r\n\r\n    for (let j = 0; j < 100 * 1000; j += 1) {\r\n      const d = document.createElement(\"div\");\r\n      d.innerText = \"j\" + j + \"-\" + Math.random();\r\n      root.appendChild(d);\r\n    }\r\n\r\n    i += 1;\r\n\r\n    if (i == 100) {\r\n      clearInterval(int);\r\n      root.remove();\r\n    }\r\n  }, 100);\r\n</script>\r\n```\r\n\r\nAny help is greatly appreciated. Thank you!","state":"open","updated_at":"2022-06-27T21:58:54Z","created_at":"2022-06-11T22:56:44Z","creator_user_login":"mfranzs"}
{"number":24703,"title":"Add test for using hooks in ternaries","body":"## Overview \r\n\r\nThis should work but it doesn't.","state":"open","updated_at":"2022-06-10T17:05:46Z","created_at":"2022-06-10T16:21:52Z","creator_user_login":"rickhanlonii"}
{"number":24701,"title":"createPortal in document.body","body":"Hi !\r\nPlease, write in the documentation, if `createPortal(<SomeComp />, document.body)` is a bad or potentially dangerous practice. I have not found an **official** answer to this question.","state":"open","updated_at":"2022-10-16T09:57:16Z","created_at":"2022-06-10T12:31:38Z","creator_user_login":"alexandroppolus"}
{"number":24696,"title":"Bug: SetState Async Unpredictability","body":"It is known that by design, `setState()` call changes the actual state object in an async manner. And this causes an inconsistency in the state for a short while until the DOM is updated. So, accessing the state during this time will yield the old value. While it is possible to get the new state in an updater function or a callback, this seems counterintuitive, especially for the beginners. And it may cause latent bugs which are hard to debug.\r\n\r\nIs there a reason why the state object is not updated by React beforehand? And if that is absolutely necessary (e.g. for diffing purposes etc.), wouldn't it be much cleaner to be able to access the latest state via may be a clone state such as `\"this.targetState\"` that is updated as soon as `setState()` is callled? \r\n","state":"open","updated_at":"2022-10-29T20:11:47Z","created_at":"2022-06-09T01:47:33Z","creator_user_login":"john-larson"}
{"number":24682,"title":"[DevTools Bug]: With yarn@3.2.1 and PnP and react-devtools@4.24.7, `yarn react-devtools` fails to start","body":"### Website or app\r\n\r\nhttps://github.com/wegry/pnp-and-react-devtools\r\n\r\n### Repro steps\r\n\r\n1. In project using yarn@3.2.1 and PnP (`yarn set version berry`)\r\n2. `yarn add -D react-devtools`\r\n3. `yarn react-devtools`\r\n4. See error\r\n\r\n<img width=\"372\" alt=\"Screen Shot 2022-06-07 at 09 55 59\" src=\"https://user-images.githubusercontent.com/5156873/172398524-91369370-1f66-4879-97d5-4936c2499187.png\">\r\n\r\n```\r\nUncaught Exception:\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string. Received undefined\r\nat validateString (internal/validators.js:120:11)\r\nat Object.normalize (path.js:1005:5)\r\nat contains (/Users/zw/Project/.pnp.cjs:40645:18)\r\nat Object.ppath.contains (/Users/zw/Project/.pnp.cjs:40659:32)\r\nat isPathIgnored (/Users/zw/Project/.pnp.cjs:49165:27)\r\nat findPackageLocator (/Users/zw/Project/.pnp.cjs:49235:9)\r\nat Object.findPackageLocator (/Users/zw/Project/.pnp.cjs:49527:14)\r\nat findApiPathFor (/Users/zw/Project/.pnp.cjs:49618:41)\r\nat Object.getApiPathFromParent (/Users/zw/Project/.pnp.cjs:49669:36)\r\nat require$$0.Module._load (/Users/zw/Project/.pnp.cjs:48576:40)\r\n```\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2022-08-01T05:59:34Z","created_at":"2022-06-07T13:55:22Z","creator_user_login":"wegry"}
{"number":24675,"title":"Bug: Support `Iterable | AsyncIterable` in `ReactDOMServerReadableStream`","body":"React version: 18.1.0\r\n\r\nThe new and cool `ReactDOMServerReadableStream` does not support any way to iterate over its values.\r\nIt makes converting it to a readable stream problematic when using Typescript.\r\nRegardless, it became common to use streams and iterate them over the `on` method, which returns `AsyncIterableIterator`.\r\n\r\n## current behavior\r\n\r\n```tsx\r\nimport { Stream } from 'stream';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nconst reactStream = await ReactDOMServer.renderToReadableStream(<Component />);\r\nconst steam = Stream.Readable.from(reactStream); // Error - Argument of type 'ReactDOMServerReadableStream' is not assignable to parameter of type 'Iterable<any> | AsyncIterable<any>'.\r\n```\r\n","state":"open","updated_at":"2022-06-21T06:43:01Z","created_at":"2022-06-05T16:03:43Z","creator_user_login":"tzachbon"}
{"number":24670,"title":"Bug: React 18 Strict mode does not simulate unsetting and re-setting DOM refs","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use `<React.StrictMode>`\r\n2. Set a ref to a JSX element in a component\r\n3. Create a `useLayoutEffect`/`useEffect `in the component where the returned cleanup function console logs the ref\r\n4. Save and refresh the app\r\n5. You should have access to the ref element in the the `useLayoutEffect`/`useEffect `cleanup function during the _simulated_ unmount.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/proud-snow-ox4ngx?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nDoes not unset/re-set refs in simulated unmount. This could lead to unexpected bugs in development like having double-set event listeners, i.e.` if( ref.current ){ //add eventlistener to it } `and might not match the behavior of _actually_ unmounting the DOM node as described in the docs: https://reactjs.org/docs/strict-mode.html\r\n\r\n> On the second mount, React will restore the state from the first mount. This feature simulates user behavior such as a user tabbing away from a screen and back, ensuring that code will properly handle state restoration.\r\n\r\n## The expected behavior\r\nIn normal unmounts and mounts refs are unset(before layout effects are cleaned up) and set(before layout effects).","state":"open","updated_at":"2023-04-29T01:13:16Z","created_at":"2022-06-03T19:28:06Z","creator_user_login":"JMartinCollins"}
{"number":24669,"title":"Bug: `useId()` not working inside `<Suspense>`","body":"`useId()` doesn't return a stable ID when used inside `<Suspense>`.\r\n\r\n```js\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<p>I'm lazy loaded...</p>}>\r\n      <LazyComponent />\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nfunction LazyComponent() {\r\n  const id = useId()\r\n  console.log('id:', id)\r\n\r\n  // The usual `throw promise` technique\r\n  // ...\r\n}\r\n```\r\n\r\nExpected behavior: The logged ID `id: :r0:` to stay `:r0:` (i.e. the ID is stable).\r\n\r\nCurrent behavior: The logged ID changes: `id: :r0:`, then `id: :r1:`, then `id: :r2:`, etc.\r\n\r\nReact version: `18.1.0`.\r\n\r\n## Reproduction\r\n\r\nSee [github.com/brillout/react-bug-useId-suspense](https://github.com/brillout/react-bug-useId-suspense#readme).\r\n\r\nCodeSandbox: https://codesandbox.io/s/github/brillout/react-bug-useId-suspense?file=/index.tsx\r\n\r\n## Additional Context\r\n\r\nThis is a blocker for [useAsync](https://github.com/brillout/react-streaming#useasync), [Telefunc](https://telefunc.com/) and probably many other React tools.","state":"open","updated_at":"2023-06-08T15:04:54Z","created_at":"2022-06-03T11:38:49Z","creator_user_login":"brillout"}
{"number":24667,"title":"Feature Request: Automatically optimize callbacks in compiler level","body":"Please check this package https://github.com/oney/kill-use-callback\r\n\r\n> `depFn` is not a React hook that needs to depend on React lifecycle, so `depFn` can be used anywhere like in a condition or in a loop.\r\n\r\n`depFn` makes it possible to optimize any callbacks in compiler(e.g. babel) by automatically collecting all values to deps array. Therefore, developers don't have to write `useCallback` by themselves anymore, and we can totally remove `useCallback` hook in React core.\r\n\r\nThe key concept of `depFn` is:\r\n> If two closures have the same \"function body code\", and the same \"environment\" (or context) which actually means the dependency of values or references, these two closures can be considered as equal\r\n\r\nDon't forget this [in the doc](https://reactjs.org/docs/hooks-reference.html#usecallback):\r\n>  In the future, a sufficiently advanced compiler could create this array automatically.\r\n\r\nTo be clear, what I mean is when developers write the code like\r\n```jsx\r\nfunction App({items, text}) {\r\n  const getText = text.length === 10 ? undefined\r\n    : (prefix) => `${prefix}: ${text}`;\r\n  useEffect(() => { /* ... */ }, [getText]);\r\n\r\n  return (<div>{items.map(item => (\r\n    <Child getText={() => `${item}: ${text}`} />\r\n  ))}</div>);\r\n}\r\n```\r\nThe compiler collects deps array and wraps callback with `depFn` automatically:\r\n```jsx\r\nfunction App({items, text}) {\r\n  const getText = text.length === 10 ? undefined\r\n    : depFn((prefix) => `${prefix}: ${text}`, [text]);\r\n  useEffect(() => { /* ... */ }, [getText]);\r\n\r\n  return (<div>{items.map(item => (\r\n    <Child getText={depFn(() => `${item}: ${text}`, [text])} />\r\n  ))}</div>);\r\n}\r\n```","state":"open","updated_at":"2022-06-03T23:06:58Z","created_at":"2022-06-03T04:14:49Z","creator_user_login":"oney"}
{"number":24655,"title":"[DevTools Bug] Commit tree already contains fiber \"15\". This is a bug in React DevTools.","body":"### Website or app\n\nhttps://github.com/msanmaz/prisma-exp or development link https://crud-prisma.vercel.app/\n\n### Repro steps\n\nhttps://github.com/msanmaz/prisma-exp or development link https://crud-prisma.vercel.app/\r\n\r\n-git clone above repo\r\n- npm run dev locally\r\n- go to http://localhost:3000/signup\r\n- create dummy account with email and pass\r\n- login to the account\r\n- start profiler\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.24.6.0-2c8a1452b\n\n### Error message (automated)\n\nCommit tree already contains fiber \"15\". This is a bug in React DevTools.\n\n### Error call stack (automated)\n\n```text\nat updateTree (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:25307:19)\r\n    at getCommitTree (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:25240:20)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:25768:11)\r\n    at CommitRankedAutoSizer (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:44121:33)\r\n    at ii (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:15307:7)\r\n    at yj (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:16179:7)\r\n    at wl (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:19178:86)\r\n    at vl (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:18728:11)\r\n    at ul (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:18720:23)\r\n    at jl (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:18704:5)\n```\n\n\n### Error component stack (automated)\n\n```text\nat CommitRankedAutoSizer (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:44104:34)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:36191:3)\r\n    at Profiler_Profiler (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:53818:34)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:37712:5)\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:37884:3)\r\n    at PortaledContent (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:37914:5)\r\n    at div\r\n    at div\r\n    at div\r\n    at ThemeProvider (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:37884:3)\r\n    at TimelineContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:43126:3)\r\n    at ProfilerContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:42571:3)\r\n    at TreeContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:30468:3)\r\n    at SettingsContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:31094:3)\r\n    at ModalDialogContextController (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:38309:3)\r\n    at DevTools_DevTools (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:54320:3)\n```\n\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Commit tree already contains fiber . This is a bug in React DevTools. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2022-08-08T20:15:54Z","created_at":"2022-06-01T23:32:17Z","creator_user_login":"msanmaz"}
{"number":24650,"title":"Bug: Bad state updates with Promise.resolve and useReducer","body":"React version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n### Code Example\r\n\r\n```jsx\r\nimport React, { useEffect, useReducer } from 'react'\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE':\r\n      return {\r\n        ...state,\r\n        values: {\r\n          ...state.values,\r\n          [action.field]: action.value,\r\n        }\r\n      }\r\n    case 'SUBMIT':\r\n      return {\r\n        ...state,\r\n        submit: !state.submit,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n\r\n}\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    submit: false,\r\n    values: {\r\n      foo: 'hello'\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SUBMIT' })\r\n    Promise.resolve().then(() => {\r\n      dispatch({ type: 'SUBMIT' })\r\n    })\r\n  }, [state.values])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        type=\"text\"\r\n        value={state.values.foo}\r\n        onChange={(e) => {\r\n          dispatch({ type: 'CHANGE', field: 'foo', value: e.target.value })\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n```\r\n\r\nI think is the same bug of #24625 \r\nBut i fill this issue because this scenario breaks a lot of library out of there i found this bugs using https://github.com/jaredpalmer/formik\r\nIf you type fast or you slowdown your cpu using dev tools you see the page freeze and you will see:\r\nWarning: Maximum update depth exceeded.\r\n\r\n## The current behavior\r\nNot seeing Warning: Maximum update depth exceeded and freeze\r\n\r\n## The expected behavior\r\nSee Warning: Maximum update depth exceeded and freeze\r\n","state":"open","updated_at":"2022-11-23T15:54:53Z","created_at":"2022-06-01T14:55:58Z","creator_user_login":"gffuma"}
{"number":24649,"title":"Bug: state updates are applied out of order inside useEffect when using Promise.resolve","body":"When two state updates are scheduled within `useEffect`, first one directly and second wrapped inside `Promise.resolve()`, they will be applied out of order. Same behaviour when using `queueMicrotask` instead. `setTimeout(x, 0)` doesn't produce the issue.\r\n\r\nReact version: 18.1.0\r\n\r\nThis is only happening in Concurrent Mode with `createRoot`.\r\n\r\nThis is based on a real-world scenario arising from certain patterns of usage of `react-query` (which internally calls `Promise.resolve()`) and `useTransition`.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open [Codesandbox](https://codesandbox.io/s/react-state-order-bug-o4izk6?file=/src/App.js:264-265)\r\n2. Click the button\r\n3. Watch logs in the console\r\n\r\nLink to code example: https://codesandbox.io/s/react-state-order-bug-o4izk6?file=/src/App.js:264-265\r\n\r\n## The current behavior\r\n\r\nConsole output after button press:\r\n```\r\n{submitCount: 0, isSubmitScheduled: true}\r\n{submitCount: 1, isSubmitScheduled: true}\r\n{submitCount: 1, isSubmitScheduled: false}\r\n```\r\n\r\n## The expected behavior\r\n\r\nConsole output after button press:\r\n```\r\n{submitCount: 0, isSubmitScheduled: true}\r\n{submitCount: 0, isSubmitScheduled: false}\r\n{submitCount: 1, isSubmitScheduled: false}\r\n```\r\n\r\nAlternatively, if the updates should have been batched (I'm not sure whether batching should apply here), then the expected output would be):\r\n\r\n```\r\n{submitCount: 0, isSubmitScheduled: true}\r\n{submitCount: 1, isSubmitScheduled: false}\r\n```\r\n\r\n_update_: now that I've discovered that this applies to microtasks as well, the issue might be related to #24625.","state":"open","updated_at":"2023-06-05T16:40:53Z","created_at":"2022-06-01T01:57:50Z","creator_user_login":"Dremora"}
{"number":24647,"title":"Bug: Error: Should have a queue. This is likely a bug in React. Please file an issue.","body":"[<!--](![Screenshot 2022-06-01 034432](https://user-images.githubusercontent.com/67374278/171293050-ad5e9816-b2b2-42d5-8e43-2edbef8a428a.png))\r\n\r\n-->\r\nI got this error in the development screen so came here no hard feelings :)\r\n\r\nError: Should have a queue. This is likely a bug in React. Please file an issue.\r\n\r\nPlease check the screenshot for more details:\r\n\r\nThere are two errors in console:\r\n1. The render state has changed for some reason.\r\n2. It says should have a queue. I think we can't change the order of the hooks in that way?\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.It's simple change the order of the hooks as they are changed in the below way:\r\nWarning: React has detected a change in the order of Hooks called by Requests. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\r\n\r\n   Previous render            Next render\r\n   ------------------------------------------------------\r\n1. useContext                 useContext\r\n2. useState                   useState\r\n3. useRef                     useRef\r\n4. useEffect                  useEffect\r\n5. useMemo                    useMemo\r\n6. useMemo                    useMemo\r\n7. useState                   useState\r\n8. useState                   useState\r\n9. useState                   useState\r\n10. useState                  useState\r\n11. useState                  useState\r\n12. useState                  useState\r\n13. useState                  useState\r\n14. useState                  useState\r\n15. useState                  useState\r\n16. useState                  useState\r\n17. useState                  useState\r\n18. useState                  useState\r\n19. useState                  useState\r\n20. useState                  useState\r\n21. useState                  useState\r\n22. useState                  useState\r\n23. useEffect                 useState\r\n   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nUncaught Error: Should have a queue. This is likely a bug in React. Please file an issue.\r\n    React 4\r\n    Requests Requests.js:103\r\n    React 12\r\n    unstable_runWithPriority scheduler.development.js:468\r\n    React 5\r\n    performReactRefresh react-refresh-runtime.development.js:304\r\n    performReactRefresh react-refresh-runtime.development.js:293\r\n    refreshTimeout RefreshUtils.js:62\r\n    setTimeout handler*enqueueUpdate RefreshUtils.js:60\r\n    js main.580626385e6a06b8cd5e.hot-update.js:1531\r\n    js main.580626385e6a06b8cd5e.hot-update.js:1553\r\n    Webpack 8\r\nreact-dom.development.js:15225\r\n4.\r\n\r\n<!--\r\n You can close this but there's no clear explanation on the docs, can you please explain ?\r\n--> \r\nI am like very fresher in react so just wanted to understand why this message popped up.\r\n\r\nLink to code example:\r\n\r\n<!--\r\n\r\n-->\r\n\r\n## The current behavior\r\nIt's giving errors I want components 🗡️ \r\n\r\n## The expected behavior\r\nComponents","state":"open","updated_at":"2023-04-28T19:55:50Z","created_at":"2022-05-31T22:40:55Z","creator_user_login":"nikikalwar"}
{"number":24645,"title":"Bug: react-reconciler with supportsPersistence = true doesn't cloneInstances when props change","body":"React version: 17.0.2, react-reconciler version 0.26.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a `HostConfig` with `supportsPersistence = true` and implement all of the core methods and persistence methods.\r\n2. Render a react component whose props change regularly.\r\n\r\n## The current behavior\r\n\r\nreact-renconciler doesn't call `cloneInstance` to update the instance with new props. Instead it calls `prepareUpdate` and `commitUpdate`. This is unexpected because `commitUpdate` is explicitly documented as one of the `supportsMutation` methods, and because of the implication with `supportsPersistence = true` that instances are immutable.\r\n\r\n## The expected behavior\r\n\r\nWhen a component's props change, react-reconciler should call `cloneInstance` for that component with the new props, just as it does if the instance's children change.\r\n\r\nOR the documentation should be updated to reflect that `commitUpdate` is part of the core methods for `HostConfig` and must be implemented even when `supportsPersistence = true`. Although this does mean that instances must be mutable, which goes against the assumption of a persistent data structure.","state":"open","updated_at":"2022-06-02T21:14:04Z","created_at":"2022-05-31T20:01:44Z","creator_user_login":"aquark"}
{"number":24637,"title":"[Fizz] deterministic text separators","body":"This change addresses two related flaws in the current approach to text separators in Fizz.\r\n\r\nFirst text separators can be emitted more often than necessary. This is because Segments don't know whether they will be followed by text and so if they end in text they assume they are and insert a separators\r\n\r\nSecond, because of the flaw above, Fizz output is not deterministic. If you wait for everything to be ready before flushing you could still end up with different output depending on whether certain segments are created or rendered inline based on the particular behavior of Suspendable components for any given run. If a Segment emits an unnecessary text separator in one pass and in another the Segment is never created because that Component did not Suspend the string output would differ for otherwise identical content\r\n\r\nThis change fixes both issues by decorating Segments with additional metadata about what kinds of emitted content is at it's bounds. These are called Edges and can be NODE, TEXT, or a Segment. NODE and TEXT are type identifiers that refer generically to these mutually exclusive concepts. if an edge is a Segment however it is the actual reference to the Segment object, which allows us to make inferences at flushing time as to whether additional text separators are needed.\r\n\r\nThere are 2 tracked edges per Segment\r\n\r\ncurrentEdge - a pointer to type of the prior thing emitted for a Segment. If the segment has not yet been worked on this will be the Edge just before the Segment start. If the Segment is currently being rendered it will be the type or reference of the last thing this Segment emitted. If the Segment is complete it definitionally be the trailing edge of the Segment representing the type emitted at the boundary.\r\n\r\nfollowingEdge - this edge is set by later Segments when the currentEdge of that segment is a Segment. If the currentEdge is a Segment and a new Edge is identified it is saved to the followingEdge of the currentEdge segment.\r\n\r\nFinally, when flushing 2 things happen\r\n\r\nIf the just written Segment ends with text (currentEdge is TEXT_NODE) and if the followingEdge is also text, then a separator is written in between. If the followingEdge is instead another Completed Segment this segment is empty and we walk to that Segment's followingEdge and continue looking for Text.","state":"open","updated_at":"2022-05-31T21:14:29Z","created_at":"2022-05-29T21:31:05Z","creator_user_login":"gnoff"}
{"number":24636,"title":"[eslint-plugin-react-hooks] warn on unexpanded object dependencies","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThis PR expands upon the existing logic which reports functions and constructors defined inside the render function as invalid hook dependencies (#19590) to allowing a developer to receive warning about *any* object present in a dependencies array when an `avoidObjects` option is set to `true` in the `exhaustive-deps` rule.\r\n\r\nThis is necessary because current rules do not cover the case where an object that will be referentially unique on each render is passed into the component as a parameter and used as a dependency, only objects created within the component.\r\n\r\nIt has been my experience in code reviews that the referential inequality of objects causing side-effects to execute unnecessarily is a particularly common cause of unnecessary memory use, especially when combined with XHR requests (a common useEffect action). Confoundingly There is no mention of object comparison by referential equality or warning thereto in the React Handbook Hooks API Reference.\r\n\r\nThis PR aims to provide a flexible way for developers to opt-in to receiving a detailed message regarding potential unintended side effects arising from the use of an object in a dependency array, and tips to resolve the issue (by destructuring or using property accessors - not deep equality checks [as Dan Abramov is on the record against them](https://twitter.com/dan_abramov/status/1104414469629898754?lang=en)).\r\n\r\nThis is also a feature [that has been requested elsewhere](https://stackoverflow.com/questions/67875833/eslint-rule-for-object-array-dependencies-in-the-react-useeffect-hook).\r\n\r\n## How did you test this change?\r\n\r\nI created a [derivative implementation](https://github.com/gnowland/eslint-plugin-react-hooks-unreliable-deps), used it in a couple of existing React projects, and wrote tests and ran `yarn test` in this repo.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n```js\r\ninterface AnObj {\r\n    prop: string;\r\n}\r\n\r\nexport const useAddPlotData = (\r\n  obj: AnObj,\r\n) -> {\r\n    useEffect(() => {\r\n       console.log(obj)\r\n    }, [obj]);\r\n}\r\n```\r\n```txt\r\n  10:5   warning  React Hook useEffect has an object in its dependency array: 'obj'. Non-primitive dependencies can result in triggering the callback unnecessarily due to referential equality comparison. Consider destructuring the object outside the useEffect call or using property accessors to refer to primitive values within the dependency array         react-hooks-unreliable-deps/reference-deps\r\n```\r\n![Screen Shot 2022-05-29 at 7 16 34 AM](https://user-images.githubusercontent.com/4430119/170874108-bbb3ffaa-2dd9-4adb-9731-e057b73e8127.png)\r\n","state":"open","updated_at":"2023-08-08T06:37:41Z","created_at":"2022-05-29T14:23:47Z","creator_user_login":"gnowland"}
{"number":24635,"title":"Feat:-Generated aria attributes using an array","body":"\r\nThe aria attribute defined in the file has a large number of duplicate strings, and this PR saves a lot of space.\r\n\r\nAfter the Pr, this is what it looks like\r\n\r\n![133935177-77b610f6-1b46-4dab-8885-24645eb5bab0](https://user-images.githubusercontent.com/72331432/170856569-8d225d0c-3675-4622-bbf2-d0a394c9b298.png)\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-06-02T13:05:15Z","created_at":"2022-05-29T06:51:07Z","creator_user_login":"Biki-das"}
{"number":24634,"title":"Bug: Potential infinite loop with Suspense (and Error boundaries not triggered)","body":"React version: latest stable (and experimental)\r\n\r\n## Steps To Reproduce\r\n1. Checkout the following repo: https://github.com/bvaughn/react-suspense-error-boundary-bug\r\n2. Run `npm install && npm run dev`\r\n3. Load the browser and observe an infinite loop of components re-rendering (rather than the error boundary catching the error).\r\n\r\nI've added a lot of inline comments about things that are necessary to trigger this bug in this file:\r\nhttps://github.com/bvaughn/react-suspense-error-boundary-bug/blob/main/pages/index.js\r\n\r\nNote that I was unable to reproduce this bug with Code Sandbox or Create React App. It only reproduces when running with Next JS (and only in DEV mode). Maybe it has something to do with Next's custom error logging behavior? Unfortunately there's no way to disable this (see [vercel/next.js/discussions/13387](https://github.com/vercel/next.js/discussions/13387)) so I'm not sure.","state":"open","updated_at":"2022-06-20T01:17:31Z","created_at":"2022-05-28T19:25:52Z","creator_user_login":"bvaughn"}
{"number":24625,"title":"Bug: Updates within microtasks within useEffect are not batched at first but batched when updates, and always not batched within useLayoutEffect","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1.0\r\n\r\n**This issue may be a bit similar to this one: https://github.com/facebook/react/issues/24365**\r\n\r\n## Steps To Reproduce\r\n\r\n### Code Example\r\n\r\nThe following example sets the toggle to `on` when the count is updated and creates a microtask and sets the toggle to `off`, we can see the `toggle` log every time it renders.\r\n\r\n```jsx\r\n  const [toggle, setToggle] = useState()\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    setToggle('on')\r\n    Promise.resolve().then(() => {\r\n      setToggle('off')\r\n    })\r\n  }, [count])\r\n\r\n  useEffect(() => {\r\n    console.log(toggle)\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => setCount(count + 1)}>refresh</button>\r\n    </div>\r\n  )\r\n```\r\n\r\n### Weird things (steps):\r\n1. Refresh the page, it prints `undefined`, `undefined`, `on`, `off`, so we know it's not batched.\r\n2. Click the button to update `count`, it prints `off`, so we know it's batched.\r\n3. Change `useEffect` to `useLayoutEffect`, and refresh the page, it's the same as step1 results, and click the button, it prints `off`, `on`, `off`, this result is very different from step2.\r\n\r\nI think it's not normal because of inconsistent behavior.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n### Link to code example:\r\nSame code in React18: https://codesandbox.io/s/react18-batching-problem-jtehj4?file=/src/App.js\r\nSame code in React17: https://codesandbox.io/s/react17-batching-foo6fi?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->","state":"open","updated_at":"2022-05-26T16:11:37Z","created_at":"2022-05-26T16:11:37Z","creator_user_login":"iamyoki"}
{"number":24617,"title":"Bug: Sometimes images get second time loaded with error. useEffect()","body":"React version: 18.1.0\r\n\r\nLink to code example:\r\n\r\n```\r\n\r\nimport banner1 from \"../../assets/images/banner/image_stack_img-62.png\"\r\nimport banner2 from \"../../assets/images/banner/image_stack_img-63.png\"\r\nimport banner3 from \"../../assets/images/banner/image_stack_img-948.png\"\r\nimport banner4 from \"../../assets/images/banner/image_stack_img-1021.png\"\r\n\r\nimport { useState } from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { url } from \"inspector\";\r\nimport { render } from \"react-dom\";\r\nimport { useRef } from \"react\";\r\nimport Module from \"module\";\r\nimport { callbackify } from \"util\";\r\nimport React from \"react\";\r\nimport { nextTick } from \"process\";\r\n\r\nconst BannerOverlay = React.lazy(\r\n  () => import(/* webpackChunkName: \"homebanneroverlay\" */ \"./banneroverlay\")\r\n);\r\n\r\nfunction banner() {\r\n  \r\n  const bannerResolutionArray = useRef([])\r\n  let bannerarray:Array<string> = [banner1, banner2, banner3, banner4]\r\n  const beginningframe = useRef(Math.floor(Math.random() * bannerarray.length))\r\n  let bannerelm: Element;\r\n  let actuallframe = beginningframe.current\r\n  const counti = useRef(0)\r\n\r\n  useEffect(() => {\r\n    counti.current++\r\n    if(counti.current === 1){\r\n      //console.log(counti.current)\r\n      if (typeof window !== \"undefined\" && banner1 != undefined && banner2 != undefined && banner3 != undefined && banner4 != undefined) {\r\n        let elm = new Image()\r\n        for (let i = 0; i < bannerarray.length; i++){\r\n          elm.src = bannerarray[i]\r\n          if(elm.naturalWidth != 0 && elm.naturalHeight != 0){\r\n            bannerResolutionArray.current.push({x:elm.naturalWidth, y:elm.naturalHeight})\r\n          }\r\n        }\r\n\r\n.\r\n.\r\n.\r\n\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"homebanner\">\r\n      <img style={{backgroundImage:`url(${banner1})`}} />\r\n      <BannerOverlay />\r\n    </div> \r\n  );\r\n  \r\n}\r\n\r\nexport default banner;\r\n```\r\n<img width=\"1661\" alt=\"Bildschirmfoto 2022-05-25 um 16 22 40\" src=\"https://user-images.githubusercontent.com/1494328/170316789-d2df1b9f-b8ff-4e46-aca9-effa04cc3a7e.png\">\r\n\r\n## The current behavior\r\nSometimes gets error loaded no shown pictures\r\n\r\n## The expected behavior\r\nEvery time correctly loading. Shown pictures","state":"open","updated_at":"2022-05-25T19:37:02Z","created_at":"2022-05-25T15:52:40Z","creator_user_login":"Trackhe"}
{"number":24614,"title":"Does React team agree on recent ReactNode type change by @types/react?","body":"I recently raised an [issue](https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/60479) against [@types/react](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react) in which I expressed my disagreement about a recent change which made functions not a valid `ReactNode` type. \r\n\r\nOne of the main arguments I had was that, In my opinion, this change does not mimic how the React team thinks about functions in jsx. I was later informed that React members were moderately involved in maintaining the types, so I thought I might as well ask the React team for their opinion, instead of guessing what they think.\r\n\r\nI would like to iterate over some points specific to why I think this change does not mimic the mental model by which React was designed (Full discussion is linked at the beginning of this issue):\r\n\r\n1. Functions and objects are both invalid elements in React. Regardless, objects crash the application, while functions just give a warning in the console. This might be indication that the functions are sort of a \"wildcard\" in jsx.\r\n2. Functions were assignable to `ReactNode` for as long as `ReactNode` existed (exaggeration, but at least for as longest I can remember). I think this was a conscious decision based on React's architecture, or a thing that yielded a positive outcome, so it was kept like that (full explanation below). \r\n3. It's impossible to know whether children is valid or not based on what arguments `React.createElement` was called with. React provides an API to access children from a wrapper component and with `React.cloneElement` you are able to modify element's props/attributes/children before they are validated and rendered by React (Why provide an API for something typescript does not allow you to do):\r\n\r\n```jsx\r\n// Definitelly an invalid value.\r\n<React.Fragment>{() => { return null }}</React.Fragment>\r\n\r\n// Can't be sure, BlackBoxComponent might do something with the Fragment's props\r\n<BlackBoxComponent>\r\n    <React.Fragment>{(greeting) => { return greeting }}</React.Fragment>\r\n</BlackBoxComponent>\r\n```\r\n\r\ncounterpoint:\r\n_You can also modify props and attributes by `React.cloneElement` and those have always been type checked on `React.createElement` by @types/react!_\r\n\r\nI agree that type checking the `React.createElement`'s arguments is very important, but so far `children` has been way less strict with type checks than props and attributes. Whether this was intentional or not, the fact that functions were valid `ReactNode` for the longest part of React's existence, created sort of an escape hatch from the restrictions typescript puts on element's props and attributes. Like, \"you can do cool things with `props.children`, but only if you operate on children and not touch the props\". It spawned some patterns in the community, most notably the render props pattern, which would not be possible if React restricted child functions. Render Props is still [achievable](https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/60479#discussioncomment-2806631) with some extra typing on the component. Unfortunately though, this change disables some other patterns that, while not as prevalent, are as valid as render props. For example calling the `props.children.props.children(\"hello\")` from `BlackBoxComponent` in the above example.\r\n\r\nAs you can see I have a lot of assumptions on why React team designed the children API the way they did, And although I was personally affected by this, I can put it to bed if you are behind this change. \r\n\r\nThanks for everyone's time and effort!","state":"open","updated_at":"2022-05-25T13:22:55Z","created_at":"2022-05-25T00:35:18Z","creator_user_login":"beqaMeqvabishvili"}
{"number":24608,"title":"[DevTools Bug] Cannot remove node \"276\" because no matching node was found in the Store.","body":"### Website or app\n\nhttps://github.com/Fast-Pace-Transfer/analytics-dashboard-ui\n\n### Repro steps\n\nI am trying save a randomly generated set of colors with matching countries as an object in the local storage\r\nfrom a context\r\nSo it doesn't change colors after a manual refresh\n\n### How often does this bug happen?\n\nOnly once\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.24.6-ca7a38ae4\n\n### Error message (automated)\n\nCannot remove node \"276\" because no matching node was found in the Store.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26518:43\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24436:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24605:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54547:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2022-10-27T14:05:10Z","created_at":"2022-05-24T10:54:44Z","creator_user_login":"Mancunia"}
{"number":24606,"title":"Bug: viewBox attribute is discarded when importing an SVG file","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Import an .svg file whose `viewBox` attribute matches the `width` and `height` attributes, e.g.,\r\n`import ExampleSvg from './example.svg';`\r\nexample.svg: `<svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" ...`\r\n\r\n2. Render it in a flexbox of a different size.\r\n`<div style={{ display: \"flex\", width: \"24px\" }}><ExampleSvg /></div>`\r\n\r\nNot reproduced if `width` or `height` is missing, or `min-x` or `min-y` of `viewBox` is non-zero.\r\nInline `<svg>` is also unaffected.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n![cropped](https://user-images.githubusercontent.com/15082984/170004636-332b7ded-63f3-4c01-a614-44d9636a31f1.png) `viewBox` is absent in the rendered DOM, causing the SVG paths to not be scaled (but cropped for a smaller container.)\r\n\r\n## The expected behavior\r\n\r\n![scaled](https://user-images.githubusercontent.com/15082984/170004643-f807252d-2bf1-4ffe-8d34-27f1ccd98af2.png) `viewBox` is left intact and the paths scale.","state":"open","updated_at":"2022-05-24T09:57:32Z","created_at":"2022-05-24T09:57:32Z","creator_user_login":"yunku2002"}
{"number":24605,"title":"Bug: useInsertionEffect fires after DOM mutation on second render","body":"I'm porting a Polymer 2.0-based app to React. Unfortunately, some of our legacy custom elements need JavaScript to run before insertion into the DOM (and `connectedCallback()` runs.) In React 17, we'd add side-effects to the render method to do this, however in React 18, I was hoping to use `useInsertionEffect` instead.\r\n\r\nUnfortunately, despite the docs saying that `useInsertionEffect` fires _before_ all DOM mutations, on all renders other than the first one, it seems to fire after the custom element is inserted into the DOM. This can be confirmed by setting a breakpoint on the custom element's `connectedCallback()` method and on the effect function. `appendChildToContainer` in `react-dom.js`, which does the DOM mutation, runs before `commitHookEffectListMount`, which runs the effect function.\r\n\r\nI realise that `useInsertionEffect` is only intended for css-in-js libraries for now, and my use-case isn't covered, so I'd understand if the behaviour isn't fixed, but at the very least, this seems like a documentation error, since the docs clearly state that `useInsertionEffect` fires before all DOM mutations.\r\n\r\nReact version: 18.1.0, next\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a function component with an insertion effect that renders a custom element.\r\n2. Mount the component.\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/agitated-silence-ghyqxp?file=/src/index.js\r\n\r\nThis example logs to the console when `connectedCallback()` runs and in the insertion effect. The _Toggle_ button mounts and unmounts the component. I need to toggle it at least once to reproduce.\r\n\r\n## The current behavior\r\n\r\nThe `connectedCallback()` runs before the insertion effect.\r\n\r\n## The expected behavior\r\n\r\nThe insertion effect runs before `connectedCallback()`.","state":"open","updated_at":"2022-05-24T06:07:34Z","created_at":"2022-05-24T06:07:34Z","creator_user_login":"jrossgowan-pulsemining"}
{"number":24600,"title":"[DevTools Bug]: Overlapping flamecharts in Profiler","body":"### Website or app\n\nhttps://github.com/reactjs/reactjs.org\n\n### Repro steps\n\n1. Check out https://github.com/reactjs/reactjs.org/commit/9cee632619065ade1e84c0470900e3634661d0d2\r\n2. Open the beta website (https://github.com/reactjs/reactjs.org/tree/main/beta), `yarn dev`\r\n3. Use Profiler -> \"refresh and profile\"\r\n\r\nSome (but not all) commits appear a bit borked.\r\n\r\n<img width=\"825\" alt=\"Screenshot 2022-05-23 at 19 41 25\" src=\"https://user-images.githubusercontent.com/810438/169885681-95c41ea1-b5fd-4b19-a850-f90bc725f9ce.png\">\r\n\r\n\r\n<img width=\"795\" alt=\"Screenshot 2022-05-23 at 19 41 20\" src=\"https://user-images.githubusercontent.com/810438/169885677-dcf922d9-70f6-40df-84bf-a940ac5c5c7e.png\">\r\n  \n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-06-09T15:28:29Z","created_at":"2022-05-23T18:43:13Z","creator_user_login":"gaearon"}
{"number":24595,"title":"Bug: componentDidCatch hook does not exist","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: latest\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install latest version of React.\r\n2. Hook for error boundaries is [still not there](https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes) since 2019.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://preactjs.com/guide/v10/hooks/#useerrorboundary\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThere is no hook for error boundaries.\r\n\r\n## The expected behavior\r\nThere is hook for error boundaries.","state":"open","updated_at":"2023-01-12T06:11:55Z","created_at":"2022-05-23T00:05:02Z","creator_user_login":"reverofevil"}
{"number":24594,"title":"Add end-of-frame scheduling for default events","body":"## Overview\r\n\r\nThis PR schedules a second task for default updates at the end of the frame when we cannot determine the priority of the originating event. These updates include things like `IntersectionObserver`, `ResizeObserver`, `setTimeout`, or any other event where `window.event` is undefined. \r\n\r\nThese updates are flushed inside `requestAnimationFrame` in addition to the task, so that updates scheduled inside of things like `ResizeObservers` have an opportunity to flush before the next repaint. We'll use whichever task fires first.\r\n\r\n## TODO Incomplete\r\n- [x] If rAF is already scheduled, use that and cancel the task.\r\n- [x] Confirm that the added tests are the expected behavior\r\n- [x] Manually test in a real browser environment\r\n- [x] Document `supportsAnimationFrame`, `scheduleAnimationFrame`, and `cancelAnimationFrame`\r\n- [x] Rework to not use a lane\r\n- [x] Rework to set a fiber flag\r\n- [ ] Don't cancel scheduled rAFs\r\n- [ ] Fix types\r\n- [ ] Review TODOs\r\n\r\n## TODO Questions\r\n- [x] What priority should we use for `root.render` or `hydrateRoot`? \r\n  - Same as setState (in a rAF or task, whichever is first)\r\n- [x] How should we mock/test `requestAnimationFrame` (it doesn't flush with timers in jsdom)?\r\n  - For now, use a manual mock and flush in `internalAct`.\r\n- [x] Should `ReactNoopRenderer` include a `rAF` mock?\r\n  - No, only DOM tests should test the frame-end task.\r\n- [x] Is the HostConfig the right place for `scheduleAnimationFrame` like `schedulePostTask`\r\n  - Yes.\r\n","state":"open","updated_at":"2022-06-15T16:12:24Z","created_at":"2022-05-22T15:29:05Z","creator_user_login":"rickhanlonii"}
{"number":24592,"title":"Bug: renderToPipeableStream and renderToStaticNodeStream render inconsistency","body":"the output html file include unexpected `<!-- --> ` in the `<title>` element when there are both variable and plain text together in `Html.js` react component.\r\nThe step is about `renderToPipeableStream` function, and in my project,  i notice similar inconsistent behavior in `renderToStaticNodeStream` as well.\r\n\r\n**altho following steps is using v18.0. v18.1 have same results**\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\nIf you find this steps too much, **I've already created a fork and attached link to the folk**, ***error is in html title element***\r\n\r\n1. go to [ssr example sandbox](https://codesandbox.io/s/kind-sammet-j56ro?file=/server/render.js:1054-1614), i got this link from here https://github.com/reactwg/react-18/discussions/22\r\n2. after entering codesandbox page, go to `src/Html.js` file\r\n3. in line 17, replace `<title>{title}</title>` with `<title>{title} 321</title>`\r\n4. save the file. (you may automatically fork this project after saving)\r\n5. after rebuild, in the browser window on the right hand side, there are three buttons on the right side of url box. click `Open In New Window`\r\n6. check new Window title\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/agitated-night-oowlsi?file=/src/Html.js\r\n\r\n## The current behavior\r\n\r\nthe page title and text in html <title> element are both `Hello<!-- --> 321<!-- -->`\r\n\r\n## The expected behavior\r\n\r\nthe page title and value in html <title> element are supposed to be `Hello 321`\r\n\r\n![Screen Shot 2022-05-21 at 11 03 26 PM](https://user-images.githubusercontent.com/5487482/169676832-7fba3617-de41-443b-af41-697fa4c067ee.png)\r\n\r\n","state":"open","updated_at":"2022-05-25T21:15:32Z","created_at":"2022-05-22T03:31:38Z","creator_user_login":"im6"}
{"number":24590,"title":"Bug: Support ESM for the use-sync-external-store shim","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\nuse-sync-external-store 1.0.0, 1.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. open up chrome dev tools\r\n```js\r\n>>> var x = await import(\"https://cdn.skypack.dev/use-sync-external-store\")\r\n>>> x.useSyncExternalStore\r\nundefined\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nSee above code snippet\r\nI was trying to hack around with valtio\r\nand if I do\r\n\r\n```js\r\nimport valtio from \"https://cdn.skypack.dev/valtio@1.6.0\";\r\n```\r\nor in the console\r\n\r\n```js\r\n>>> var v = await import(\"https://cdn.skypack.dev/valtio@1.6.0\")\r\nUncaught SyntaxError: The requested module '/-/use-sync-external-store@v1.0.0-ZzO0qn27iKOvDc2m57IV/dist=es2019,mode=imports/unoptimized/shim/index.js' does not provide an export named 'useSyncExternalStore' \r\n```\r\n\r\n## The current behavior\r\n\r\nthe use-sync-external-store shim does not support esm\r\n\r\n\r\n## The expected behavior\r\n\r\nplease support esm\r\n\r\n\r\n## additional context\r\n\r\nthe bug was reported at valtio\r\n\r\nhttps://github.com/pmndrs/valtio/issues/452\r\nAn attempt was made to workaround the issue at their end\r\nBut the import \r\n`>>> var v = await import(\"https://cdn.skypack.dev/valtio@1.6.1\")`\r\nStill fails on the use-sync-external-store shim.\r\n","state":"open","updated_at":"2022-06-06T15:29:55Z","created_at":"2022-05-20T23:26:42Z","creator_user_login":"s-cork"}
{"number":24582,"title":"[devtools-ish] Release script missing node-fetch@2 dependency","body":"Explicitly add node-fetch as a dependency to run `download-experimental-build.js`\r\n\r\n> Accidentally closed out #24571, by nuking my fork.  This is identical.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nIf you follow the [react-devtools CONTRIBUTING](https://github.com/facebook/react/blob/main/packages/react-devtools/CONTRIBUTING.md#build-react-and-react-dom) docs, it fails:\r\n\r\n```\r\nyarn && ./download-experimental-build.js --commit=main\r\nyarn install v1.22.18\r\n[1/4] 🔍  Resolving packages...\r\nsuccess Already up-to-date.\r\n✨  Done in 0.07s.\r\nnode:internal/modules/cjs/loader:936\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module 'node-fetch'\r\n...\r\n``` \r\n\r\nThis is because `node-fetch` is a transient dependency hoisted to the root, and I'd argue it should be explicit for the download-experimental-build script to execute:\r\n\r\n```\r\n(src/react) $ yarn why node-fetch\r\nyarn why v1.22.18\r\n[1/4] 🤔  Why do we have the module \"node-fetch\"...?\r\n[2/4] 🚚  Initialising dependency graph...\r\n[3/4] 🔍  Finding dependency...\r\n[4/4] 🚡  Calculating file sizes...\r\n=> Found \"node-fetch@2.6.0\"\r\ninfo Has been hoisted to \"node-fetch\"\r\ninfo Reasons this module exists\r\n   - \"workspace-aggregator-979001d4-5396-4963-b362-bf1f539edc50\" depends on it\r\n   - Hoisted from \"_project_#danger#node-fetch\"\r\n   - Hoisted from \"_project_#danger#@octokit#rest#@octokit#request#node-fetch\"\r\n   - Hoisted from \"_project_#danger#gitlab#ky-universal#node-fetch\"\r\n=> Found \"isomorphic-fetch#node-fetch@1.7.3\"\r\ninfo This module exists because \"_project_#fbjs#isomorphic-fetch\" depends on it.\r\n=> Found \"cross-fetch#node-fetch@2.6.1\"\r\ninfo This module exists because \"_project_#react-devtools-extensions#jest-fetch-mock#cross-fetch\" depends on it.\r\n✨  Done in 0.43s.\r\n\r\n```\r\n\r\n## How did you test this change?\r\n\r\n```\r\nYour branch is up to date with 'origin/missing_dep'.\r\n❯ yarn && ./download-experimental-build.js --commit=main\r\nyarn install v1.22.18\r\n[1/4] 🔍  Resolving packages...\r\n[2/4] 🚚  Fetching packages...\r\n[3/4] 🔗  Linking dependencies...\r\n[4/4] 🔨  Building fresh packages...\r\n\r\n✨  Done in 0.30s.\r\n✓ Getting build ID for commit \"main\" 314 ms\r\n✓ Downloading artifacts from Circle CI for commit main (build 484032) 5.7 secs\r\nAn experimental build has been downloaded!\r\n\r\nYou can download this build again by running:\r\n  download-experimental-build.js --build=484032\r\n```\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-05-19T09:54:18Z","created_at":"2022-05-19T09:49:02Z","creator_user_login":"blakef"}
{"number":24580,"title":"Add support for rendering BigInt as `children`","body":"\r\n## Summary\r\n\r\n\r\nCloses https://github.com/facebook/react/issues/20492\r\n\r\nCurrently missing:\r\n\r\n- [ ] Test for react-flight\r\n- [ ] DevTools\r\n- [ ] Support for BigInt as a `value` for e.g. `<input />` or `<option />`\r\n\r\n## How did you test this change?\r\n\r\n- [x] CI\r\n- [x] https://codesandbox.io/s/react-missing-bigint-support-uclq9i renders something with a build from this PR: https://codesandbox.io/s/react-missing-bigint-support-l6i9pn","state":"open","updated_at":"2022-07-03T08:54:40Z","created_at":"2022-05-18T19:34:21Z","creator_user_login":"eps1lon"}
{"number":24569,"title":"Improve the performance of `performance`.","body":"\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n```js\r\nfunction test(f) {\r\n    console.time()\r\n    let i = 0\r\n    while (i++ < 1e6) {\r\n        f()\r\n    }\r\n    console.timeEnd()\r\n}\r\ntest(performance.now.bind(performance))\r\ntest(()=>performance.now())\r\n\r\n// VM2470:7 default: 120.751220703125 ms\r\n// VM2470:7 default: 453.26416015625 ms\r\n```\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-05-18T03:22:07Z","created_at":"2022-05-18T03:13:48Z","creator_user_login":"zhangenming"}
{"number":24563,"title":"Bug: Browser-based handling of recoverable errors is to strict - use console instead of the reportError API","body":"React handles recoverable errors in onRecoverableError. Either a custom function is passed to hydrateRoot; otherwise React's default implementation is used, which uses the browser's **reportError** function. **Errors that are recoverable in isolation are always reported to the user in a modal-style error dialogue, and are not handled quietly.**\r\n\r\n**NextJs uses only two arguments** (Dom element, React element) when calling **hydrateRoot**. The **third** possible argument to specify **hydrate options** along with the **onRecoverableError** field, in which the error **response of recoverable errors** can be adjusted, **is not used at all**.\r\n\r\nIn principle, the problem can be addressed on the NextJs or React side, but an adjustment is necessary on the respective side.\r\n\r\n**Option 1: NextJs - Extension of the NextJs configuration**\r\nNextJs does not allow an option in its configuration to specify hydrate options (specifically onRecoverableError) that are passed from NextJs to hydrateRoot.\r\n\r\n**Con:** Valid only for NextJs, other libraries that hide the call to hydrateRoot from the user and do not allow hydrate options are still affected by the issue.\r\n\r\n**Option 2: Adaptation of React's default implementation to onRecoverableError**\r\n\r\nErrors related to suspense are called recoverable. These are resolved through React internal workflows by reverting to a client-based rendering within a Suspense Boundary. As these errors are handled, jumping back to a client-based rendering does not constitute a critical error. A hint in the console about the cause that led to the switch to a client-based rendering should be sufficient. \r\n\r\n```\r\nExtract from ReactDOMRoot\r\n\r\nconst defaultOnRecoverableError =\r\n   typeof reportError === 'function'\r\n      ?  // In modern browsers, reportError will dispatch an error event, emulating an uncaught JavaScript error.\r\n      reportError\r\n      : (error: mixed) => {\r\n         // In older browsers and test environments, fallback to console.error.\r\n         // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args.\r\n      console.error(error);\r\n      };\r\n```\r\n\r\n- Removal of browser-based API **reportError** to handle recoverable errors. \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/reportError\r\n\r\nAs pointed out in the comment, an uncaught error is thrown even if it was classified as recoverable within React. React internal processes have responded to such errors, for example by server-side and client-side content not matching. \r\n\r\nThe error caused by reportError must in turn be caught by a global error handler. This seems to be a bit excessive.\r\n\r\n```\r\nwindow.onerror = function(message, source, lineno, colno, error) {\r\n  console.log('message:' + error.message + ', lineno: ' + lineno );\r\n  return true;\r\n};\r\n```\r\n\r\n- Output the error only in the console, as is the case in older browsers and test environments.\r\n\r\nIn React based libraries that do not allow or support configuration of hydrate options, the problem must be described as recurring. Especially in background that React notices recoverable errors and actively counteracts them, conversely should resort to a less aggressive behaviour to bring this to the developer's attention.\r\n\r\nReportError is a very young API - Supported from October 2021 in Edge, Firefox and Chrome, not before. \r\n\r\nhttps://caniuse.com/?search=reportError\r\n\r\nLogRecoverableError was originally introduced in ReactDOMHostConfig. \r\nhttps://github.com/facebook/react/commit/848e802d203e531daf2b9b0edb281a1eb6c5415d\r\n\r\nThe following refactoring has changed the name and position.\r\nhttps://github.com/facebook/react/commit/efd8f6442d1aa7c4566fe812cba03e7e83aaccc3\r\n\r\nlogRecoverableError => defaultOnRecoverableError\r\nReactDOMHostConfig => ReactDomRoot\r\n\r\nI will open an issue in NextJs and React respectively.\r\n\r\nThx!\r\n\r\nReact version: 18.1.0","state":"open","updated_at":"2022-05-16T10:51:53Z","created_at":"2022-05-16T10:51:00Z","creator_user_login":"gurkerl83"}
{"number":24560,"title":"Bug:  When hydrate <Suspense>, it shows loading forever.","body":"After calling `hydrateRoot`, the import() function was not called. It keeps showing loading.\r\n\r\nReact version: 18.1.0\r\n\r\nLink to code example: https://codesandbox.io/embed/gracious-lederberg-nomtf0\r\n(For mocking server side rendering, I write content in `public/index.html`)\r\n\r\n## The current behavior\r\nAlways showing loading\r\n\r\n## The expected behavior\r\nThe component should be rendered after finishing loading.","state":"open","updated_at":"2023-03-13T11:25:04Z","created_at":"2022-05-15T03:32:07Z","creator_user_login":"nguyenvanthanh97"}
{"number":24558,"title":"[Recomendation/Discussion]: Hook-based Context API","body":"I would like to say that I'm impressed with how React hooks have revolutionized the React ecosystem, and the Context API. However, I see some major inconsistencies between how the context is read from, and how it is provided. Maybe we we could use a `useProvider(Context, ()=>expr, [deps, ...])` kind of hook (similar to the Vue `provide()` function)?\n```js\nconst IsGuest = createContext(true)\n\nconst Status = () => {\n  const isGuest = useContext(IsGuest)\n  return <span class=\"status\"> {isGuest} </span>\n}\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  useProvider(isGuest, ()=>!isLoggedIn, [isLoggedIn])\n  return <Status/>\n}\n```\n\nOr maybe a more object-oriented approach?\n```js\nconst IsGuest = createContext(true)\n\nconst Status = () => {\n  const isGuest = IsGuest.useContext() // 👈\n  return <span class=\"status\"> {isGuest} </span>\n}\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  IsGuest.useProvider(()=>!isLoggedIn, [isLoggedIn]) // 👈\n  return <Status/>\n}\n```\n\nI would like to hear what you all think about this. If you all think the former syntax was preferred, then the `createContext()` function could be removed entirely and replaced with the native `Symbol` constructor.","state":"open","updated_at":"2022-05-17T17:50:05Z","created_at":"2022-05-14T12:48:56Z","creator_user_login":"ghost"}
{"number":24553,"title":"Bug: useEffect called twice in Strict Mode","body":"Since React 18, useEffect is called twice in Strict Mode when zero dependencies.\r\n\r\nThis is following on from this tweet:\r\nhttps://twitter.com/dan_abramov/status/1523652274748559360\r\n\r\nThe purpose of logging this issue is not to report the problem. The purpose of this issue is to present a scenario where the new behaviour is awkward / difficult to work with, migrating components is not easy, as such I advocate calling this out as a breaking change, and hopefully something that can be turned off in future React versions.\r\n\r\nLink to code example:\r\n\r\nhttps://stackblitz.com/edit/react-useeffect-called-twice-scenario\r\n\r\nReact version: 18\r\n\r\nSteps To Reproduce:\r\n\r\nNote the UI rendering with / without strict mode is different.\r\n\r\n** Problem Pattern 1\r\n\r\nUI components from libraries need to maintain their own state & services. They cannot participate with state & services of the hosting application, as then encapsulation of the component is lost. A reliable way is needed to create the state & services of such a component bound to the lifecycle of the component. The new pattern (useEffect() called twice) means the state & services will unnecessarily get created and destroyed twice, along with the useEffect. For a datagrid, this could mean 100,000 rows passed to the grid getting sorted and grouped twice, when it should be once. This has two bad outcomes 1) consumers of the library will observe this and will complain, without knowing it's an intended pattern of React 2) it is bad practice to have different code paths executed in Dev vs Prod modes.\r\n\r\n** Problem Pattern 2\r\n\r\nFor groups of components, where there is shared logic that executes when all components are ready, there is no reliable way to know when all required components are ready, as the components can get destroyed and re-initialised.\r\n\r\nIn the provided example, note that each React Component works with a Controller class. All the logic is delegated to the Controller class, making the React Component only responsible for DOM operations. This allows the UI to be swapped out with a different rendering engine, while keeping all the logic. This is what AG Grid uses to allow it to use React to render when used with React, and SomethingElse when used with SomethingElse. There are parts of the logic that wait for all Controllers (and associated Components) to be ready before doing certain steps. In React, because the Controllers lifecycle is tied to the useEffect, it means the Controllers are not tied to the Components lifecycle, and resulting in stale references for old Controllers.\r\n\r\nIn the example code, see ControllersService. This service is what the components register to, and when all components are registered, grid code that was waiting for the components to be ready is notified.\r\n\r\n** Breaking Change\r\n\r\nThis change forces the other non-UI parts of the application to have a fundamental change in how they work. This means React is breaking from the following statement (taken from reactjs.org): \"Learn Once, Write Anywhere - We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.\"\r\n\r\n\r\n**\r\n\r\nYes we could re-write how we do things in AG Grid, however then the bug I am raising is this needs to be documented as a breaking change and React 18 is not backwards compatible.\r\n","state":"open","updated_at":"2023-04-08T13:06:03Z","created_at":"2022-05-13T14:48:01Z","creator_user_login":"ag-grid-shared"}
{"number":24552,"title":"Bug: Typescript classful React Component inducing Minified React error #130 crash when using setState ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a typescript project `npx create-react-app my-app --template typescript`\r\n2. Nest static or private components inside of a Parent class\r\n3. setState of Parent component within a child\r\n4. Verify it works on dev server\r\n5. Build and run \r\n\r\nExample Code\r\n```import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <Parent />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass Parent extends React.Component {\r\n  state: { count: number }\r\n  constructor(props: {}) {\r\n    super(props)\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  private static Child = (props: {action: Function}) =>\r\n    <>\r\n      <button onClick={()=> props.action()}>Increment</button>\r\n    </>\r\n  \r\n  private Header = () => <h1>{this.state.count}</h1>\r\n\r\n  render = () =>\r\n    <>\r\n      <this.Header/>\r\n      <Parent.Child action={() => this.setState({count: this.state.count + 1})} />\r\n    </>\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nMore intricate example: https://stackoverflow.com/questions/72223367/setstate-provokes-minified-react-error-130-only-on-production-build/72225071#72225071\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nBlank screen in production.\r\n\r\n## The expected behavior\r\nProduction build works just as the dev build does\r\n","state":"open","updated_at":"2022-05-13T06:48:27Z","created_at":"2022-05-13T06:48:27Z","creator_user_login":"bens-schreiber"}
{"number":24550,"title":"Bug: exhaustive-deps does not warn about stale ref in a cleanup function returned by arrow function","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n```\r\nfunction Circle() {\r\n  const circleRef = useRef(\"Circle\");\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(circleRef.current); // exhaustive-deps linter warns about stale ref here\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => () => console.log(circleRef.current), []); // exhaustive-deps has no warning\r\n\r\n  return <div className=\"circle\">{circleRef.current}</div>;\r\n}\r\n\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/react-exhaustive-deps-current-warning-arrow-function-kb6l9o?file=/src/index.js:270-328\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nexhaustive-deps will not warn about stale ref reference in a cleanup function, if the cleanup function is returned via arrow function.\r\n\r\n## The expected behavior\r\nexhaustive-deps should still warn about using a stale ref, even if the cleanup function is returned via arrow function","state":"open","updated_at":"2022-05-12T21:54:48Z","created_at":"2022-05-12T21:54:41Z","creator_user_login":"ybot1122"}
{"number":24540,"title":"react-devtools standalone app is missing inspector (selector tool)","body":"When running react-devtools as standalone app (not as chrome extension or in react-native), The app is missing the inspector/selector tool.\r\n\r\nIt is also missing the jump to code integration with vscode.","state":"open","updated_at":"2022-05-15T18:40:55Z","created_at":"2022-05-11T17:27:07Z","creator_user_login":"M0unir"}
{"number":24537,"title":"Bug: Use Suspense to load data,refresh for hundreds times","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:18.1.0\r\n(My English is poor...)\r\nWhen i use <Suspense/> to async load data,and reload the data through refresh and setRefresh flag,it appears to load hundreds of times,eventhough the data has already arrived.But if I use the flushAsync function,it performence correctly.So it seems because in React18,the flush behaviour changed,when in async and setTimeout,it only process once.\r\n## Steps To Reproduce\r\n\r\n1.click the refresh button to refresh the data\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:https://codesandbox.io/s/distracted-wood-7gq0hd?file=/src/UI.jsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nReloaded the components for hundreds of times\r\n![image](https://user-images.githubusercontent.com/16880429/167808835-c9da083b-a04d-464a-8d2f-f756e3fc2525.png)\r\n\r\n\r\n## The expected behavior\r\nIt should only load once.","state":"open","updated_at":"2022-05-13T10:30:04Z","created_at":"2022-05-11T08:47:38Z","creator_user_login":"gangganghao6"}
{"number":24536,"title":"Bug: [Streaming] No reliable way to tell whether error is React internal error or boundary error","body":"React version: `18.1.0`\r\n\r\n## The current behavior\r\n\r\nThe `onError()` callback of `renderToPipeableStream()` and `renderToReadableStream()` receives boundary errors as well as internal React errors (i.e. React bugs). There isn't a reliable way to tell whether the error is a boundary error or an internal React error.\r\n\r\n## The expected behavior\r\n\r\nThere is a reliable way to tell whether the error is a boundary error or an internal React error.\r\n\r\n## Steps To Reproduce\r\n\r\nN/A.\r\n\r\nStrictly speaking this is not a bug, but I do believe this is an issue. Apologies if this is the wrong place, I'm happy to close and re-open this somewhere else.\r\n\r\n(Btw Ricky told me that you are wrapping up the React 18 Working Group, and that I should ask React Streaming questions by creating an issue on React's main repo. I may have more questions about React 18 Streaming.)\r\n\r\n## Additional Context\r\n\r\nAs the author of [`react-streaming`](https://github.com/brillout/react-streaming), I'd like to offer an easy way for React users to consume the React SSR Stream.\r\n\r\nUsers will handle React internal errors quite differently from handling boundary errors.\r\n\r\nA boundary error can safely be ignored since it will be re-tried on the client-side. If the user has error tracking already installed on the client-side, then he may not need to do anything about boundary errors on the server-side.\r\n\r\nA React bug is fatal and needs quite some complex consideration to handle properly. I'm expecting most users to just ignore potential React bugs and just assume React to be bug-free. This is not perfect, but handling React bugs is really complex: the stream can be corrupt in all kinds of ways and there is no clear way how to recover from this.\r\n\r\nSo I expect 95% of the users to ignore potential React bugs.\r\n\r\nBottom line: boundary errors and React bugs will be handled quite differently.\r\n\r\nThat's why I think there shoud be a reliable way to tell whether `err` in `onError(err)` is a boundary error or a Rect internal error (i.e. a \"React bug\").\r\n\r\n(For `react-streaming` this is low-priority and low-urgency. Fundamentally more critical for `react-streaming` is the RFC about `injectToStream()`.)\r\n","state":"open","updated_at":"2022-05-11T17:10:07Z","created_at":"2022-05-11T08:22:02Z","creator_user_login":"brillout"}
{"number":24529,"title":"Bug: Using an hook in getSnapshot of use-sync-external-store causes an infinite loop and no useful error is shown.","body":"use-sync-external-store version: 1.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Write a hook using useSyncExternalStore\r\n2. Use a hook in getSnapshot\r\n\r\nLink to code example: https://codesandbox.io/s/boring-bas-0g2rqi\r\n\r\n## The current behavior\r\n\r\nIt creates an infinite loop, and shows the error:\r\n\r\n> Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\r\n\r\nIn the console, there's nothing about the Hook error ( original error )\r\n\r\n## The expected behavior\r\n\r\nIt creates an infinite loop, and shows the error:\r\n\r\n> Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\r\n\r\nIn the console, there's information about the Hook error ( original error ).\r\n\r\n\r\n\r\nI believe this may not be seen as a bug, and I will explain the reason why I believe it could be a bug:\r\nI created a library that underneath uses `useSyncExternalStore`, one of the users of the library did use it improperly by calling a React hook in a callback ( violating the rules of hooks ), however instead of seeing the error about hooks the user saw the error about the infinite loop and reported a bug about the library causing an infinite amount of re-renders. Any information about the root cause of the infinite loop ( `checkIfSnapshotChanged` returning `true` when an error is thrown ) would have made debugging easier, a simple `console.error` with the original error ( repeated until React crashed ) would have pointed directly to what needs to be fixed immediately.","state":"open","updated_at":"2023-08-31T08:28:15Z","created_at":"2022-05-10T14:50:37Z","creator_user_login":"maury91"}
{"number":24526,"title":"Fix select default option","body":"This is related to #24469 \r\n\r\nI'm not sure, but this changes from 2016 set default selection for the first non-disabled option, which is lead to inconsistency between pure html and react.\r\n\r\nAlso there are passed tests which should covered the right logic (we should have unselected options). But the actual browser behavior is the different :(  ","state":"open","updated_at":"2022-05-10T13:21:59Z","created_at":"2022-05-10T09:57:55Z","creator_user_login":"mmarkelov"}
{"number":24514,"title":"Bug: Select Element Not Always Resetting To The First Available Option After State Change","body":"If the option set of an select element is dependent on a state, and there are overlappings between the option sets, then changing to a state such that the new option set contains the currently selected option sometimes resets the select element to the first option and sometimes not.  I describe four cases where two of them reset and the others don't.  Maybe the behaviour is intended, but I found it hard to comprehend and not documented properly.\r\n\r\nReact version: 18.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a select element with option set `[0, 1, 2]`, let it be controlled by state `i`, create a second select element with the option set `[i, i + 1, i + 2]`\r\n2. Change the first select to 1.  The second select jumps to 1 as well because 0 is no longer an option.  Change the first select back to 0.  The second select won't follow, because 1 is common to both option sets.\r\n3. Provide the key `i` to the second select element.  Now it will always reset to the first available option.\r\n4. Introduce a new state `options` and set it to `[i, i + 1, i + 2]` in a `useEffect` depending on `i`.  Change the option set of the second select element to `options`.  Now the behaviour is as in step 2 again (no resetting).\r\n5. Change the key from `i` to `options`.  Now resetting works again.\r\n\r\nLink to code example:\r\n\r\nhttps://cdwo5r.csb.app/\r\n\r\n## The current behavior\r\n\r\nBehaviour of select element after state change seems hard to predict.\r\n\r\n## The expected behavior\r\n\r\nEither more consistent behaviour or better documentation of current behaviour.","state":"open","updated_at":"2022-05-07T16:30:20Z","created_at":"2022-05-07T09:06:13Z","creator_user_login":"fweth"}
{"number":24513,"title":"Remove the duplicated code of case 'renders an empty fragment'  in ReactDOMFiber-test.js","body":"Remove the duplicated code of case 'renders an empty fragment'  in ReactDOMFiber-test.js","state":"open","updated_at":"2022-07-01T01:38:32Z","created_at":"2022-05-07T05:26:52Z","creator_user_login":"zoyopo"}
{"number":24509,"title":"Bug: Chrome. Controlled and *required* input type=\"date\" - onChange not triggered by pressing clear","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.1 (and prior, also tested on 16.9)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a controlled component of type date, and **set the _required_ attribute**.\r\n2. Set any date.\r\n3. Press 'clear' and confirm nothing happens.\r\n\r\n\r\nLink to code example: https://jsfiddle.net/q8cb7v3j/\r\n\r\nThis example includes both a required and non-required input to showcase that the 'clear' button behaves correctly when the required attribute is not passed. Each change triggers an entry in the log. \r\n\r\n\r\n## The current behavior\r\nWhen trying to press the 'clear' button on a controlled date component with the '**required**' attribute, nothing happens.\r\n\r\n## The expected behavior\r\nPressing 'clear' should return the state of the component to an empty value attribute. \r\n\r\n\r\nThe issue *might* be related to https://github.com/facebook/react/issues/8938 and https://github.com/facebook/react/issues/12313, although this happens exclusively with the required atttribute which the quoted issues and related ones don't seem to mention. ","state":"open","updated_at":"2022-07-11T17:24:58Z","created_at":"2022-05-06T10:19:40Z","creator_user_login":"ItsLhun"}
{"number":24506,"title":"Add eslint rule to error on reads or writes to refs in render","body":"## Summary\r\n\r\nAfter some discussion on the [useEvent RFC](https://github.com/reactjs/rfcs/pull/220) and on [Twitter](https://twitter.com/dan_abramov/status/1521942250875457536), I and others learned that writing to refs during render is not allowed. This is documented in the [new docs](https://beta.reactjs.org/apis/useref), but since this seems like it could be fairly common gotcha, I thought it might be useful to add to the eslint plugin.\r\n\r\nI added a new rule (`react-hooks/pure-render`) that is meant to detect non-pure code in render functions. At the moment, it only detects reads or writes to refs, but it could be expanded later to detect other patterns as well potentially.\r\n\r\nOne pattern that the rule still allows is the lazy init pattern as documented [here](https://beta.reactjs.org/apis/useref#avoiding-recreating-the-ref-contents). This is detected by checking whether the access is inside an if statement that compares the value with the initial value passed to `useRef`.\r\n\r\n(Side question: is this lazy init pattern really safe all the time, or only when you're sure the ref will never be reset back to its initial value?)\r\n\r\n## How did you test this change?\r\n\r\nAdded unit tests. I also ran the plugin on the [React Aria](https://github.com/adobe/react-spectrum) code base and found a number of places that we will need to update. Verified that they all seemed valid.\r\n","state":"open","updated_at":"2022-12-12T17:59:23Z","created_at":"2022-05-05T18:30:13Z","creator_user_login":"devongovett"}
{"number":24504,"title":"Ad hoc data fetching with Suspense","body":".@aaronabramov suggested that I file an issue for this: https://twitter.com/dan_abramov/status/1522207779984793601\r\n\r\n---\r\n\r\n👋 I have a question about React 18 + Suspense. From the [docs](https://reactjs.org/blog/2022/03/29/react-v18.html):\r\n\r\n> Ad hoc data fetching with Suspense is technically possible, but still not recommended as a general strategy.\r\n\r\nWhen can I find more information about how to do this?\r\n\r\nThe reason I ask is because at [Unsplash](https://twitter.com/unsplash) we have basically created our own routing / data fetching framework after running into too many limitations with existing solutions—so we'll need to figure out how to incorporate Suspense into our data fetching framework.\r\n\r\nThe best example I've found so far is [this talk](https://www.youtube.com/watch?t=1438&v=SCQgE4mTnjU&feature=youtu.be) by [Jared Palmer](https://twitter.com/jaredpalmer) but I suspect it's outdated now?","state":"open","updated_at":"2022-05-07T20:02:41Z","created_at":"2022-05-05T16:56:22Z","creator_user_login":"OliverJAsh"}
{"number":24499,"title":"expand react-refresh  fields to including inner files (#24498)","body":"## Summary\r\n\r\nmore detail can be found in [#24498](https://github.com/facebook/react/issues/24498)\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n","state":"open","updated_at":"2022-05-05T08:39:38Z","created_at":"2022-05-05T06:36:36Z","creator_user_login":"XHFkindergarten"}
{"number":24498,"title":"Bug: react-refresh@13 package.json's exports field change leads to an adapting mistake","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n*react-refresh version: 13.0.0\r\n\r\n## Background\r\nWe are running a build tool such like vite, in our code, we need to read `react-refresh/cjs/react-refresh-runtime.development.js`'s contents and insert into the final html output in dev mode. \r\n\r\nbut lately we attempt to update `react-refresh` from version 11.0.0 to 13.0.0, we met a mistake that out code cannot work as expect before.\r\n\r\n## our code\r\n\r\n```javascript\r\nconst reactRefreshFileLoc = require.resolve(\r\n  'react-refresh/cjs/react-refresh-runtime.development.js'\r\n)\r\n```\r\n\r\n## mistake\r\n\r\n```\r\nnode:internal/process/promises:246\r\n          triggerUncaughtException(err, true /* fromPromise */);\r\n          ^\r\n\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './cjs/react-refresh-runtime.development.js' is not defined by \"exports\" in /Users/[User]/[project]/node_modules/react-refresh/package.json\r\n```\r\n\r\n## The expected behavior\r\n\r\nafter check the package.json of `react-refresh`, we found that lately the exports field changed. and the file we want is not specified in it. it will be a great general if you can add them into `react-refresh`'s package.json.\r\n","state":"open","updated_at":"2022-05-05T06:33:03Z","created_at":"2022-05-05T06:33:03Z","creator_user_login":"XHFkindergarten"}
{"number":24493,"title":"Bug: Updaters are NOT called twice for the first time when in Strict Mode ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v18 & v17\r\n\r\n## Steps To Reproduce\r\n\r\nConsider the `App` component below that runs in **Strict Mode**:\r\n\r\n```jsx\r\nimport * as React from \"react\";\r\n\r\nexport default function App() {\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    setCount((count) => {\r\n      console.log(\"Clicked\");\r\n      return count + 1;\r\n    });\r\n  };\r\n\r\n  return <button onClick={handleClick}>{count}</button>;\r\n}\r\n```\r\nLink to codesandbox: https://codesandbox.io/s/react-bug-24493-snippet-1-6mrnyg?file=/src/App.js\r\n\r\nFollowing things to note from the above example (_Similar behavior with both React 17 & 18_):\r\n- Click the button once, `Clicked` log is only printed once--which means the updater ran only once.\r\n- Click the button again, `Clicked` log is printed twice--which means the updater ran twice.\r\n- And from second click onwards the log is always printed twice.\r\n\r\nNow, consider another example, here the `reducer` (_which is another type of updater in React_) shows a similar bug where it runs only once the first time but from second run onwards it runs twice. And even more weird is that this time it only happens with React 17, with React 18 it always runs twice.\r\n\r\n```jsx\r\nimport * as React from \"react\";\r\nconst log = console.log;\r\n\r\nconst reducer = (count, incrementor) => {\r\n  log(\"Reducer ran\");\r\n  return count + incrementor;\r\n};\r\n\r\nexport default function App() {\r\n  const [count, setCount] = React.useReducer(reducer, 0);\r\n\r\n  return <button onClick={() => setCount(1)}>{count}</button>;\r\n}\r\n```\r\n\r\nLink to codesandbox: https://codesandbox.io/s/react-bug-24493-snippet-2-ulkvu4?file=/src/App.js\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The expected behavior\r\nExpected behavior is that updaters should always be invoked twice (_even for the first time_) in both React 17 & 18 when in Strict Mode.","state":"open","updated_at":"2022-05-05T08:38:16Z","created_at":"2022-05-04T16:51:39Z","creator_user_login":"ssmkhrj"}
{"number":24479,"title":"Update exhaustive-deps to handle ref in arrow function return","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nFixes https://github.com/facebook/react/issues/24550\r\n\r\n## How did you test this change?\r\nAdded a unit test which captures the minimal repro.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-05-12T21:55:30Z","created_at":"2022-05-02T18:19:59Z","creator_user_login":"ybot1122"}
{"number":24470,"title":"Warn when using one-shot iterators as children","body":"\r\n## Summary\r\n\r\nCloses https://github.com/facebook/react/issues/20707 by adding a warning when using one-shot iterators.\r\n\r\n## How did you test this change?\r\n\r\n- [x] https://codesandbox.io/s/one-shot-iterators-as-children-cgdvzg issues warning with build from this PR (based on the linked issue + forward porting to React 18)\r\n- [x] CI\r\n","state":"open","updated_at":"2022-09-29T18:10:25Z","created_at":"2022-04-29T16:45:41Z","creator_user_login":"eps1lon"}
{"number":24469,"title":"Bug: `<select size value>` with `value` not matching any `option` results in first option being selected","body":"\r\n\r\nReact version: 18.1.0, 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. render `<select value=\"not-an-option\" size=\"2\"><option value=\"an-option\">one</option></select>`\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/react-18-select-value-with-value-not-matching-option-wopmt9?file=/src/index.js\r\n\r\n## The current behavior\r\n\r\nThe first option will be marked as selected\r\n\r\n## The expected behavior\r\n\r\nNo option should be selected\r\n\r\nhttps://github.com/facebook/react/issues/10691 was asking for a warning.","state":"open","updated_at":"2023-07-28T16:50:19Z","created_at":"2022-04-29T14:22:45Z","creator_user_login":"eps1lon"}
{"number":24466,"title":"Bug: Differences between \"cjs/react.production.min.js\" file and \"umd/react.production.min.js\": \"Scheduler\" property is missing in object \"React. __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\" in \"cjs/react.production.min.js\"","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nThe production file inside \"cjs/react.production.min.js\" does not contain the code of assigning \"Scheduler\" to the object \"React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\", which lost the \"Scheduler\" property. But inside \"umd/react.production.min.js\" file, such codes exist and the \"Scheduler\" property is assigned correctly. Can anyone explain whye and how to make such differences between \"cjs\" production file and \"umd\" production file?\r\n\r\nReact version: v16.14.0 ~ v18.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install react: `npm install react`.\r\n2. Inspect into \"node_modules/react/cjs/react.production.min.js\", we can not use the \"Scheduler\" property in \"React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\".\r\n\r\n## The current behavior\r\nThere are no \"Scheduler\" property in object \"React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\".\r\n\r\n## The expected behavior","state":"open","updated_at":"2022-05-05T04:05:21Z","created_at":"2022-04-29T10:54:03Z","creator_user_login":"zhuchuji"}
{"number":24465,"title":"Bug: Page becomes empty when an input is displayed in a \"popup\" in Chrome on Android","body":"Description: Page becomes empty when an input is displayed in a \"popup\"; works on desktop, doesn't work in Android Chrome. This is a very specific scenario, please see the example repo and steps below. I must say, I'm not 100% sure this is a react problem, and I have already opened [an issue](https://bugs.chromium.org/p/chromium/issues/detail?id=1320017) with Chrome just in case; and, of course, it could be my mistake, too! Thank you for taking a look in advance.\r\n\r\nReact version: I've tried both with `\"react\": \"^18.0.0\"` and `\"react\": \"^17.0.2\"`, same problem in both. The example repo is built with 18.0.0.\r\nDesktop Chrome version (where the example works): Version `100.0.4896.127` (Official Build) (arm64)\r\nAndroid Chrome version (with the bug): `100.0.4896.127` or newer `101.0.4951.41` on Android 9, Build/ppr1.180610.011.\r\n\r\n## Steps To Reproduce\r\n\r\nI have built this little app specifically to reproduce the bug. I apologise that it's more than a couple of lines, but this is the smallest example I could boil it down to.\r\nhttps://github.com/smartpuffindev/chrome_bug_input\r\nSpecifically, the code in `1d6b1fa` is showing the problem.\r\n\r\nI deployed it here for the convenience of testing: https://chrome-bug-input.netlify.app/\r\n\r\nSteps to reproduce:\r\nTry the following both on Chrome desktop and on Android. Observe the difference after step 4.\r\n\r\n(1) Clone the repo, run `npm install` and `npm start`. Or go to this link (already deployed): https://chrome-bug-input.netlify.app/\r\n(2) Open the page on desktop and on an Android phone in Chrome v.101.0.4951.41 (I think it's the last version at the moment). Observe that there is one input \"input111\" and one button \"Step1: Open popup\".\r\n(3) Click the \"Step1: Open popup\" button. Observe a yellow \"popup\" with one button \"Next step\" inside.\r\n(4) After clicking the \"Next step\" button, observe the yellow popup.\r\n\r\nExpected result:\r\n(5) The yellow popup now contains an input with text '123' inside. This is what I see on desktop.\r\n\r\nActual result:\r\n(5) On Android Chrome, everything disappears from the page, I see an empty white page as if there's an empty html. See screenshot:\r\n<img width=\"676\" alt=\"bug\" src=\"https://user-images.githubusercontent.com/102975771/165900981-63dbbb49-792a-476f-8762-3edec64833ef.png\">\r\n\r\nLink to code example:\r\nhttps://github.com/smartpuffindev/chrome_bug_input\r\nDeployed here for convenience:\r\nhttps://chrome-bug-input.netlify.app/\r\n\r\n## The current behavior\r\nOn desktop: the yellow popup displays the input field on step 5.\r\nOn mobile: everything disappears from the page, I see only a white screen.\r\n\r\n## The expected behavior\r\nI expect the page on Android to show the yellow popup and the input inside it, just like in desktop Chrome.\r\nSee screenshot below for what it should look like on Android.\r\n\r\n### Additional info\r\n\r\nPlease note that if you make a change in the code and _don't_ refresh the page (but it's refreshed automatically with `npm start`), sometimes the problem disappears, and the popup with the input opens as expected. But if you refresh the page with the refresh button, then the problem is back again.\r\n\r\nThere are several possible changes in the code I can make to make the problem \"go away\" - these are not fixes, but perhaps they may help investigate:\r\n\r\n(1) On the step 2, there is only one input shown on the page, with the text \"input111\". If this input is removed altogether, the Android Chrome behaves exactly like it is expected.\r\n\r\n(2) It also behaves as expected if there are two or more input on the \"original\" page, like this:\r\n```\r\n<input value=\"input111\" onChange={()=>{}} />\r\n<input value=\"input222\" onChange={()=>{}} />\r\n```\r\nSee screenshot:\r\n<img width=\"675\" alt=\"no_bug\" src=\"https://user-images.githubusercontent.com/102975771/165900972-82859b6e-4586-4040-8830-486ff8b86f46.png\">\r\n\r\n(3) Alternatively, if the end input with the value \"123\" has en empty value, it also behaves as expected:\r\n```{step === 2 && <input value=\"\" onChange={()=>{}} />}```\r\n\r\n(4) Another option: if the yellow \"popup\" doesn't have `position:absolute` in the style, like this - then it works:\r\n```<div style={{ background: 'yellow', width: '300px', height: '300px' }}>```\r\n\r\n(5) Finally, if the last `input` you see on step 5 is replaced with another element, it works:\r\n```{step === 2 && <p>This is not an input</p>}```\r\n\r\nIf all inputs are replaced with `textarea`, the problem is the same. However, if there are `inputs` on the original page and a `textarea` inside the popup, then it works.\r\n\r\nI've tried adding different keys (`key=\"111\"` etc) to each input, thinking that React might try to reuse the controls somehow, and it didn't help.\r\n\r\n---\r\nI hope this is clear, even though I explained it in a convoluted way, perhaps. There is a possibility that this is my mistake, please let me know if I messed up something - I'm still new to react, will be happy to hear that the problem is mine.\r\nPlease let me know if you need more info. Thanks in advance!","state":"open","updated_at":"2022-04-29T14:13:14Z","created_at":"2022-04-29T07:40:03Z","creator_user_login":"smartpuffindev"}
{"number":24457,"title":"Bug: Inconsistent error when violating rules of hooks with `useContext`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## The current behavior\r\n\r\nThe following code throws a warning `React has detected a change in the order of Hooks called by HookTest` when the button is pressed 3 times:\r\n```jsx\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { createContext, useContext, useState } from 'react';\r\n\r\nconst ctx = createContext(null);\r\n\r\nexport default function HookTest() {\r\n  const [state, setState] = useState(0);\r\n\r\n  if (state > 2) {\r\n    const _1 = useContext(ctx);\r\n    const _2 = useContext(ctx);\r\n  } else {\r\n    const _1 = useContext(ctx);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setState((s) => s + 1)}>Click</button>\r\n      <p>{state}</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nWhile the following code throws no warning/error at all, even though the order of hooks does change:\r\n```jsx\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\nimport { createContext, useContext, useState } from 'react';\r\n\r\nconst ctx = createContext(null);\r\n\r\nexport default function HookTest() {\r\n  const [state, setState] = useState(0);\r\n\r\n  if (state > 2) {\r\n    const _1 = useContext(ctx);\r\n  } else {\r\n    const _1 = useContext(ctx);\r\n    const _2 = useContext(ctx);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setState((s) => s + 1)}>Click</button>\r\n      <p>{state}</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nIf this test is repeated with other hooks, such as `useState` and `useRef`, it will crash with the error `Rendered fewer hooks than expected.`\r\n\r\nThis becomes extra confusing when other hooks are called after `useContext` in the second snippet above, which causes the error to resurface.\r\n\r\n## The expected behavior\r\n\r\nI would either expect the second code snippet above to throw an error, so that `useContext` is consistent with all other hooks, or to exclude `useContext` from the requirements of rules of hooks since `useContext` doesn't really rely on the order of hooks to retrieve internal states like how others hooks do.\r\n","state":"open","updated_at":"2022-04-28T10:38:07Z","created_at":"2022-04-28T10:32:59Z","creator_user_login":"hlysine"}
{"number":24452,"title":"Refactor getLanesToRetrySynchronouslyOnError by removing unreachable code","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe deleted code is unreachable.\r\n\r\n`everythingButOffscreen` is `pendingLanes` with `OffscreenLane` excluded. So `everythingButOffscreen & OffscreenLane` will always be `false`.\r\n\r\n## How did you test this change?\r\n\r\nYou can see that `getLanesToRetrySynchronouslyOnError` never logs `return OffscreenLane` In the following code example.\r\n\r\n```js\r\nconst NoLanes = 0b0000000000000000000000000000000;\r\nconst OffscreenLane = 0b1000000000000000000000000000000;\r\n\r\nfunction getLanesToRetrySynchronouslyOnError(pendingLanes) {\r\n  const everythingButOffscreen = pendingLanes & ~OffscreenLane;\r\n  if (everythingButOffscreen !== NoLanes) {\r\n    console.log('return everythingButOffscreen');\r\n    return;\r\n  }\r\n  if (everythingButOffscreen & OffscreenLane) {\r\n    console.log('return OffscreenLane');\r\n    return;\r\n  }\r\n  console.log('return NoLanes');\r\n}\r\n\r\n[\r\n    0b0000000000000000000000000000000,\r\n    0b1000000000000000000000000000000,\r\n    0b0111111111111111111111111111111,\r\n    0b1111111111111111111111111111111,\r\n    0b0000000000000001111111111111111,\r\n    0b1111111111111110000000000000000,\r\n].forEach(getLanesToRetrySynchronouslyOnError)\r\n```\r\n\r\n![Screen Shot 2022-04-27 at 10 02 52 PM](https://user-images.githubusercontent.com/16910748/165536645-6e30b500-1d9d-44ad-83ed-cc9f995e2f06.png)\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n\r\n","state":"open","updated_at":"2022-05-17T14:50:20Z","created_at":"2022-04-27T14:08:35Z","creator_user_login":"wtlin1228"}
{"number":24438,"title":"Failing test: Switch between zero and non-zero Hooks","body":"Rendering Hooks conditionally is not supported. Linter enforces this.\r\n\r\nHowever, people sometimes forget to use the linter. We should hard-error in this case. See https://github.com/facebook/react/issues/24391 for an example.\r\n\r\nIt looks like we hard-error when the number of Hooks changed, but not between 0 Hooks and non-0 Hooks. This adds failing tests that show the issue.","state":"open","updated_at":"2022-09-09T11:36:46Z","created_at":"2022-04-25T20:18:11Z","creator_user_login":"gaearon"}
{"number":24430,"title":"Bug: Hydration mismatch error due to plugins generating script tag on top","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0, 18.1.0-next-fc47cb1b6-20220404 (latest version in codesandbox)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install a plugin that creates a script tag at the top(ex: [Apollo Client Devtools](https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm))\r\n2. Go to the [demo](https://codesandbox.io/s/kind-sammet-j56ro?file=/src/App.js) in the [new SSR suspense guide](https://github.com/reactwg/react-18/discussions/37)\r\n3. Open preview in a new window\r\n4. UI mismatch error occurs at hydration time\r\n\r\n  <img width=\"600\" alt=\"스크린샷 2022-04-24 오전 11 02 34\" src=\"https://user-images.githubusercontent.com/4126644/164952677-06618e72-3343-4b92-9eaa-b45bce11c3ab.png\">\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/kind-sammet-j56ro?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIf a script tag is inserted before the head tag due to the user's browser environment such as a plugin, it is judged as a hydration mismatch and the screen is broken.\r\n\r\nhttps://user-images.githubusercontent.com/4126644/164953071-14546c74-d9ab-4a6f-8f99-6712f29c6dd6.mov\r\n\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nThis problem may be a part that each third party needs to solve, but I'm wondering if it's possible to handle an exception in the hydration matching logic of React.","state":"open","updated_at":"2023-04-14T16:42:09Z","created_at":"2022-04-24T02:16:30Z","creator_user_login":"yongdamsh"}
{"number":24420,"title":"Bug: ERR_PACKAGE_PATH_NOT_EXPORTED","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18\r\n\r\n## Steps To Reproduce\r\n\r\n1. Execute in NodeJS the following script:\r\n\r\n  ```js\r\n  require.resolve('react/umd/react.production.min.js');\r\n  ```\r\n\r\nThis happens for React and the same for ReactDOM.\r\n\r\n## The current behavior\r\n\r\n```text\r\n  Uncaught:\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './umd/react.production.min.js' is not defined by \"exports\" in /[redacted folders]/node_modules/react/package.json\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:464:5)\r\n    at new NodeError (node:internal/errors:371:5)\r\n    at throwExportsNotFound (node:internal/modules/esm/resolve:453:9)\r\n    at packageExportsResolve (node:internal/modules/esm/resolve:731:3)\r\n    at resolveExports (node:internal/modules/cjs/loader:482:36)\r\n    at Function.Module._findPath (node:internal/modules/cjs/loader:522:31)\r\n    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:919:27)\r\n    at Function.resolve (node:internal/modules/cjs/helpers:108:19) {\r\n  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'\r\n```\r\n\r\n## The expected behavior\r\n\r\nIf the `umd` artifacts are properly declared in `exports` they should lead to resolve the absolute of them.\r\n\r\n**NOTE**: This was properly working before the upgrade to v18.\r\n\r\n## Solution\r\n\r\nAdd to `exports` the artifacts with a wilcard (easier than list all of them):\r\n\r\n```\r\n\"exports\": {\r\n  \"./cjs/*\": \"./cjs/*\",\r\n  \"./umd/*\": \"./umd/*\"\r\n}\r\n```\r\n","state":"open","updated_at":"2022-12-10T21:43:40Z","created_at":"2022-04-21T15:29:06Z","creator_user_login":"artola"}
{"number":24396,"title":"Demo for defaultMuted on video element","body":"Fixes #10389 (not fixing it's just the label).\r\n\r\n@gaearon \r\n\r\n## Summary\r\nJust for demo. I have no knowledge on React SSR.  \r\n\r\n## How did you test this change?\r\nThere are three tests.","state":"open","updated_at":"2022-04-18T20:49:10Z","created_at":"2022-04-18T20:44:25Z","creator_user_login":"MustafaEminn"}
{"number":24391,"title":"Bug: Internal React error: Expected static flag was missing","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: V18.0.0\r\nReact router DOM: V5.2.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Going to profile page\r\n2. Warning: Internal React error: Expected static flag was missing. Please notify the React team.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n![Screenshot 2022-04-17 124859](https://user-images.githubusercontent.com/51002164/163707500-3ee1ca51-9695-4e2e-b3c4-3f5e8f7a98b3.png)\r\nDynamicFilter.js component\r\n![Screenshot 2022-04-17 125107](https://user-images.githubusercontent.com/51002164/163707576-b8536b98-3b47-4c7e-84f3-abfa9f93dddf.png)\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2023-08-26T02:02:36Z","created_at":"2022-04-17T08:53:53Z","creator_user_login":"Developer-Nijat"}
{"number":24369,"title":"[RFC] Add initialValue option to useDeferredValue","body":"Currently, useDeferredValue only works for updates. It will never during the initial render because there's no previous value to reuse. This means it can't be used to implement progressive enhancement.\r\n\r\nThis adds an optional initialValue argument to useDeferredValue. When provided, the initial mount will use initialValue if it's during an urgent render. Otherwise it will use the latest, canonical value.\r\n\r\nDuring server rendering and hydration, it will always use the initialValue instead of the canonical value, regardless of priority, to avoid a hydration mismatch.\r\n\r\nThe name \"initial value\" isn't ideal because during a non-urgent client render, it's disregarded entirely. It's more like a \"lightweight\" value that will later be upgraded to a \"heavier\" one. Needs some bikeshedding.\r\n\r\nWhen initialValue is omitted, the behavior is the same as today.","state":"open","updated_at":"2022-04-21T04:40:42Z","created_at":"2022-04-13T18:30:17Z","creator_user_login":"acdlite"}
{"number":24366,"title":"Fix microtask batched update inside native event","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nfixed #24365 \r\n\r\nAll updates added to the microtask queue should be batched when the code executes to the last update on the synchronous execution stack.\r\n\r\nBut now when a `setState` is executed first in the synchronous execution context, all `setState` in the microtask queue will not be batched, even if the synchronous execution context still has `setState` after these microtasks.\r\n\r\nSo every time when execute `setState`, it should put the `flushSyncCallbacks` into the latest `scheduleMicrotask`, and cancel the `flushSyncCallbacks` in the previous `scheduleMicrotask`. This ensures that all code in the microtask queue executes before `flushSyncCallbacks`\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nI have added test in [PR](https://github.com/facebook/react/pull/24366/files#diff-8b0fd88f36102847768387118be8c18cfe852325bc7a7dd6c13549fc5c3c070f).\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-04-14T03:43:19Z","created_at":"2022-04-13T17:22:59Z","creator_user_login":"zh-lx"}
{"number":24365,"title":"Bug: Updates within microtasks are sometimes not batch","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n### Normal example\r\nThe following example is normal. The value of `count` is incremented by `1` when click the button.\r\n\r\nThe update of `Code Snippet A`、`Code Snippet B` and  `Code Snippet C` will be all batch. Because by the time the code executes to `Code Snippet A` and `Code Snippet C`, `Code Snippet B` has already been added to the microtask queue. The `flushSyncCallbacks` are executed in `scheduleMicrotask` callback function, therefore, `Code Snippet B` is executed first and then `flushSyncCallbacks` is executed.\r\n\r\n```jsx\r\nimport { useEffect, useState, useRef } from \"react\";\r\nexport default function App() {\r\n  const [count, setCount] = useState(0);\r\n  const countRef = useRef(-1);\r\n\r\n  const handleClickButton = () => {\r\n    // No.B\r\n    Promise.resolve().then(() => {\r\n      setCount(countRef.current + 1);\r\n    });\r\n\r\n    // No.A\r\n    setCount(countRef.current + 1);\r\n\r\n    // No.C\r\n    setCount(countRef.current + 1);\r\n\r\n    // Code Snippet A、Code Snippet B and Code Snippet C are all batch processed\r\n  };\r\n\r\n  useEffect(() => {\r\n    countRef.current = count;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <p>count is: {count}</p>\r\n      {/* count will be incremented by 1 when click the button */} \r\n      <button onClick={handleClickButton}>增加</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\nlink to code example: https://codesandbox.io/s/batch-update-in-native-xpwz33-forked-c4pii4?file=/src/App.js:0-581\r\n\r\n### Abnormal examples\r\nThe following example is abnormal. The value of `count` is incremented by `2` when click the button.\r\n\r\nThe update of `Code Snippet A` and `Code Snippet C` will be batch, but  the update of`Code Snippet B` won't be batch.\r\nWhen the code executes to `Code Snippet C`, `Code Snippet B` has not been batch, although `Code Snippet B` has been added to the microtask queue.\r\n\r\nI think all updates added to the microtask queue should be batched when the code executes to the last update on the synchronous execution context.\r\n\r\n```js\r\nimport { useEffect, useState, useRef } from \"react\";\r\nexport default function App() {\r\n  const [count, setCount] = useState(0);\r\n  const countRef = useRef(-1);\r\n\r\n  const handleClickButton = () => {\r\n    // Code Snippet A\r\n    setCount(countRef.current + 1);\r\n\r\n    \r\n    Promise.resolve().then(() => {\r\n      // Code Snippet B\r\n      setCount(countRef.current + 1);\r\n    });\r\n\r\n    // Code Snippet C\r\n    setCount(countRef.current + 1);\r\n\r\n    // Code Snippet A and Code Snippet C will be batch, but Code Snippet B won't be batch\r\n  };\r\n\r\n  useEffect(() => {\r\n    countRef.current = count;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      {/* count will be incremented by 2 when click the button */} \r\n      <p>count is: {count}</p>\r\n      <button onClick={handleClickButton}>增加</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/batch-update-in-native-xpwz33-xpwz33?file=/src/App.js:0-581\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen a `setState` is executed first in the synchronous execution context, all `setState` in the microtask queue will not be batched, even if the synchronous execution context still has `setState` after these microtasks.\r\n\r\n## The expected behavior\r\n\r\nAll updates added to the microtask queue should be batched when the code executes to the last update on the synchronous execution stack.","state":"open","updated_at":"2022-04-28T14:21:21Z","created_at":"2022-04-13T17:15:02Z","creator_user_login":"zh-lx"}
{"number":24358,"title":"Bug: beforeInput event doesn't fire when input is replacing previous text","body":"There is a strange React bug where the `beforeinput` event does not fire but only on Firefox (v99).\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nThere are two ways I have found to reproduce this bug and both involve a scenario where the `beforeInput` event is replacing the previous text and both are only problematic on Firefox when the events are triggered via React rendered input.\r\n\r\n### MacOS Popup\r\n\r\n1. (Using MacOS (v12.1) and a Firefox browser). When focused in a browser input, hold down the \"a\" key (or any standard english character with a latin accented variation) and wait for the accent popup to show up\r\n2. At this point the `keydown`, `beforeinput`, and `input` events should have fired and the new input should have the regular key inserted\r\n3. Now, select one of the options from the accent menu (using a numeric selector)\r\n4. Notice only the `keydown` and `input` events fired\r\n\r\n### Native HTML Spellcheck Replacement\r\n\r\n1. (Using a Firefox browser) When focused in a browser input, type some misspelled text in so that it can be selected for spellcheck replacement\r\n2. Notice all of the `keydown`, `beforeinput`, and `input` events fire when typing standard keys\r\n3. Right click on the misspelled text and select a spellcheck alternative\r\n4. Notice only the `input` event fires with the replacement input\r\n\r\n## Link to code example:\r\n\r\nHere is a simple codesandbox with a Standard HTML textarea **and** a textarea rendered via React. It logs to the console when the events fire. If you run through either one of the above steps to reproduce, you'll notice the `beforeinput` event fires correctly with the standard HTML element but not with the React rendered input.\r\n\r\n[Code Sandbox](https://codesandbox.io/s/react-typescript-forked-rpbiun?file=/public/index.html)\r\n\r\n## The current behavior\r\nOnly the `keydown` and `input` events fired when a replacement text input event flow is triggered\r\n\r\n## The expected behavior\r\nThe `beforeinput` event should always fire","state":"open","updated_at":"2023-05-27T03:48:10Z","created_at":"2022-04-13T01:35:34Z","creator_user_login":"jbroomer"}
{"number":24348,"title":"Warn for duplicate DevTools installations ","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis completes the tasks in issue #24157. It checks for duplicate installations using the extension ids (basically the same code from the previous pull request). If duplicate installations are detected, display a warning message to the user and write to local storage.\r\n\r\nTo check for duplicate installations, we take advantage of the constant extension ids for React DevTools. First, we get the current id of whatever extension we are in. If that extension is the chrome webstore extension, we check if the internal or local extension is installed. If it is the internal extension, we check the local extension is installed. If it is the local or an unknown extension, we can't reliably detect if other extensions are installed. To note, if it is the local extension and __DEV__ is true, we do not need to check for other extensions because they will automatically disable. \r\n\r\nWithin the switch statement for 'local', I left in the separate if statement from the previous PR code. I can get rid of it, but I thought it would be good to keep in case we want to add separate handlers. I also removed the warning message if it is an unknown extension saying 'We cannot accurately detect separate extensions. You may have duplicate extensions installed which could cause errors'. Now we only display an error if a duplicate extension is actually detected.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nTesting this change was tricky because I obviously can't make changes to the published versions of devtools. Instead, I copied the unpacked build within the chrome extension folder and loaded it as a separate extension into chrome. I got rid of all content scripts and adjusted the background script to only respond to a message. I had to do this because chrome kept crashing when I had both installed.\r\n\r\nFirst, I installed that extension into chrome. \r\n<img width=\"645\" alt=\"Screen Shot 2022-04-12 at 8 23 48 AM\" src=\"https://user-images.githubusercontent.com/63068182/162966649-0d7f6994-a296-4e2e-8a53-4afdf0a73f68.png\">\r\n\r\nThen I adjusted the extension ids in constants.js to reflect the test scenario. As you can see in the screenshot below, I set the CURRENT_EXTENSION_ID to the internal devtools and set the LOCAL_EXTENSION_ID to the sample extension I just installed. This way the function checkForDuplicateInstallations will believe it is currently in an internal installation, check if a local installation (my sample installation) exists, and since it is installed, print a warning message.\r\n\r\n<img width=\"769\" alt=\"Screen Shot 2022-04-12 at 8 23 58 AM\" src=\"https://user-images.githubusercontent.com/63068182/162966991-0294242f-7d88-4edc-ae16-879d8c0aa84e.png\">\r\n<img width=\"731\" alt=\"Screen Shot 2022-04-12 at 8 24 16 AM\" src=\"https://user-images.githubusercontent.com/63068182/162967413-bfe765eb-04cb-4e8e-bab9-9646aef97f25.png\">\r\n\r\nI then removed the installation and ran chrome again. The error message did not appear. \r\n<img width=\"739\" alt=\"Screen Shot 2022-04-12 at 8 24 47 AM\" src=\"https://user-images.githubusercontent.com/63068182/162967547-2e62a9bb-55ef-4141-b69d-924e30a57213.png\">\r\n\r\n\r\nI also ran tests to check the following scenarios, but I did not take screenshots for all of them and was not sure how to automate the tests.\r\n\r\n* Current extension id is the chrome webstore id and set local extension id to sample installation.\r\n* Current extension id is the chrome webstore id and set internal extension id to sample installation\r\n* Restart chrome after showing an warning message to see if it shows again\r\n* Delete sample installation, rerun chrome and install installation again, rerun chrome and see the warning message.","state":"open","updated_at":"2022-06-27T18:01:46Z","created_at":"2022-04-12T13:08:44Z","creator_user_login":"scyron6"}
{"number":24344,"title":"let react-hooks/exhaustive-deps additionalHooks have a callback in a different position from 0","body":"\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis pull request allows Hooks specified in react-hooks/exhaustive-deps additionalHooks have a callback parameter in a position other than 0. \r\n\r\nIn my case, I have a hook where the callback is in position 1 rather than 0:\r\n\r\n```typescript\r\nfunction useDerrivedState<T>(initialState:T,  asyncEffect: () =>  Promise<T>, deps: DependencyList) {\r\n  const [state, setState] = useState(initialState);\r\n  useEffect(() => asyncEffect().then(result => setState(result)), deps);\r\n  return [state];\r\n}\r\n```\r\n(simplified version, real version handles aborts/errors/etc but not relevant to this change)\r\n\r\nI could refactor the hook and put `initialState` after the callback/deps (at pos 2 rather than 0) but I feel like it reads out of order/more difficult to reason about.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nAdded valid/invalid tests. Ran tests with `yarn test --watch ESLintRuleExhaustiveDeps`. Existing and new tests pass.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-04-11T22:09:24Z","created_at":"2022-04-11T21:02:44Z","creator_user_login":"joeflateau"}
{"number":24333,"title":"Suggestion: Process higher priority renders after each useEffect callback","body":"## React Version: 18\r\n## Steps to Reproduce:\r\nUsing the classic useDeferredValue demo which shows how an input can be responsive even when components have a slow render,  place the delay (loop) in a useEffect callback rather than in the render itself.  This can be demonstrated in this [sandbox](https://codesandbox.io/s/quirky-hofstadter-h8yvu1?file=/src/App.js).  When you check the box to make the delay in the useEffect rather than the render function the input is no longer responsive. \r\n## Current Behavior\r\nThe input is not responsive because all useEffect callbacks run to completion before the higher priority render of the input component can occur.\r\n## Expected  Behavior\r\nThe input remains responsive as the high priority render occurs after the completion of each useEffect callback.\r\n## Related\r\n While this example is contrived, a real example, where the problem was uncovered, is a fractal application that by necessity does it's canvas processing in a useEffect callback.\r\n","state":"open","updated_at":"2022-04-11T17:55:52Z","created_at":"2022-04-10T13:51:41Z","creator_user_login":"selsamman"}
{"number":24331,"title":"Bug: State updates in ResizeObserver callbacks are applied after paint and cause visual glitches","body":"\r\nReact version: 18\r\n\r\nWhen a state value gets updated in a `ResizeObserver` callback, I believe that React should make sure that the DOM is up-to-date before the next paint. Otherwise, if we are using `ResizeObserver` to do some visual changes to some part(s) of the app as soon as some element resizes (which seems like a reasonable assumption), it can create visual glitches.\r\n\r\nIt worked fine in React 17, but in React 18 the state updates seem to be deferred to a later time (unless `flushSync` is used). This is most likely due to the \"batch state updates\" change in React 18.\r\n\r\n## Steps To Reproduce\r\n\r\nIn the example below we use a `ResizeObserver` to make sure that the width of the blue div always matches exactly the width of the grey textarea under it.\r\n\r\n1. Quickly resize the grey textarea. Notice that the width of the blue div lags behind.\r\n2. Turn on the `shouldUseFlushSync` flag in the code and quickly resize the grey textarea again. Notice that they now stay perfectly in sync, the glitch is gone.\r\n\r\nLink to code example: https://codesandbox.io/s/amazing-montalcini-j6lz46?file=/src/App.js (tested in Chrome on Linux)\r\n(it is probably more visible on a slow computer, you can try enabling CPU throttling if you cannot see it)\r\n\r\n## The current behavior\r\n\r\nWe need to use `flushSync` in order for the app to work without glitches.\r\n\r\n## The expected behavior\r\n\r\nGiven that it is probably pretty common to use `ResizeObserver` to make sure that some part of the app stays visually in sync with some other part of the app, I would expect React to guarantee that updates triggered in a `ResizeObserver` callback will be applied before the browser gets the chance to paint the resized element, and without expecting the developer to use the somewhat obscure `flushSync` method.\r\n\r\n## Related\r\n\r\nI could only find one related issue: #21119, but it is about batching several updates coming from the same callback. It's perfectly fine to batch several updates coming from the same `ResizeObserver` callback (or even from several such) as long as they are guaranteed to be applied before the resized element is painted again by the browser.\r\n","state":"open","updated_at":"2023-07-20T07:57:59Z","created_at":"2022-04-10T10:24:46Z","creator_user_login":"guillaumebrunerie"}
{"number":24322,"title":"Use FB specific stream config for native-relay","body":"This is not really used yet but for parity with the dom-relay implementation this should use the FB-specific fake stream protocol and not the Node protocol. For Server Components for Native.","state":"open","updated_at":"2022-04-12T01:12:05Z","created_at":"2022-04-09T00:17:12Z","creator_user_login":"sebmarkbage"}
{"number":24307,"title":"Support for selectionchange event for HTML input element and HTML textarea element","body":"# Feature Request \r\n\r\n\"selectionchange\" event for document is natively supported across all browsers. But,for HTML input element and HTML textarea element, it is only supported on Firefox. Therefore, it would be very helpful if those events are provided as sythetic events.  \r\n\r\n[Check in caniuse](https://caniuse.com/?search=selectionchange)  \r\n\r\nIt would be implemented like  \r\n\r\n```\r\nonSelectionChange={()=>{}}\r\n```","state":"open","updated_at":"2022-04-09T02:18:52Z","created_at":"2022-04-08T05:59:30Z","creator_user_login":"channyeintun"}
{"number":24301,"title":"Update Yarn to version Berry","body":"## Summary\r\n\r\nI upgraded to yarn v3.2.0, which would not work anymore on nodejs 10.\r\nAnyone who has yarn installed will be automatically upgraded, because the yarn bundle .cjs is in fact yarn itself. Fixed the caching, because `yarn workspaces info` has been deprecated.\r\n\r\nUpgraded all nodejs to 16 LTS\r\n\r\n## How did you test this change?\r\n\r\nNot everything works at the moment so I make the PR a draft","state":"open","updated_at":"2023-07-24T09:36:39Z","created_at":"2022-04-07T20:39:13Z","creator_user_login":"tiziodcaio"}
{"number":24283,"title":"Suppress \"Download the React DevTools\" log for a better development experience","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. open a remote debug chrome devtools window\r\n2. the message will show\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/161918579-8c7458a0-5568-4f3b-a1ad-cdb5da5cde87.png\">\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nNo this message. Chrome extension can't be used in remote debug window\r\n","state":"open","updated_at":"2023-08-31T18:18:18Z","created_at":"2022-04-06T07:23:39Z","creator_user_login":"tjx666"}
{"number":24250,"title":"[WIP] Diffs for hydration errors","body":"- [ ] Errors\r\n  - [x] Extra server element\r\n  - [x] Extra server text\r\n  - [x] Extra client element\r\n  - [x] Extra client text\r\n  - [ ] Extra server attributes\r\n  - [ ] Prop mismatch\r\n- [ ] Formatting\r\n  - [x] Parent tag and attributes\r\n  - [x] Sibling tag/text and attributes\r\n  - [x] Child tag/text and attributes\r\n  - [x] Ellipsis to indicate more siblings before or after\r\n- [ ] Special cases\r\n  - [ ] Document/fragment parent\r\n  - [x] Long attributes\r\n  - [x] Too many attributes\r\n  - [ ] Quotes in attributes\r\n  - [ ] Long text\r\n  - [x] Skip over non-element/text siblings\r\n- [ ] Other stuff\r\n  - [ ] Flow","state":"open","updated_at":"2022-11-28T21:24:20Z","created_at":"2022-04-01T19:57:51Z","creator_user_login":"gaearon"}
{"number":24238,"title":"suggestion: Suspense support delay","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\ncan Suspense support delay?\r\nEverytime when render page, the fallback will first show, no matter components get fast\r\n","state":"open","updated_at":"2022-04-01T23:49:30Z","created_at":"2022-04-01T01:52:09Z","creator_user_login":"smbera"}
{"number":24232,"title":"Server-side rendering performance degradation with renderToPipeableStream","body":"Hello!\r\n\r\nWhen switching from `renderToString` to `renderToPipeableStream`, I run load tests on the application, and found a decrease in server throughput, from 50 to 15 RPS, and an increase in response timings.\r\nWhen profiling the CPU, I see a large overhead on the internal work of the stream, specifically the methods `Writable.write` and `Writable.uncork`. \r\nAll these method calls together take more than twice as much CPU time (about 50-60ms) as rendering my test page (about 15-20ms)\r\n\r\nAlso, I don't want to give the HTML to the client in the stream, this approach has some disadvantages.\r\nSo I have to buffer the data, and it slows down the application a bit more.\r\n\r\nCPU profiler in production mode:\r\n- [CPU-react-18-prod.cpuprofile.zip](https://github.com/facebook/react/files/8389879/CPU-react-18-prod.cpuprofile.zip)\r\n<img width=\"1792\" alt=\"Снимок экрана 2022-03-31 в 16 21 00\" src=\"https://user-images.githubusercontent.com/15360667/161067856-6f3a2573-d49a-4f9b-ab8c-732f1f2f5afe.png\">\r\n\r\nCPU profiler in development mode:\r\n- [CPU-react-18-dev.cpuprofile.zip](https://github.com/facebook/react/files/8389878/CPU-react-18-dev.cpuprofile.zip)\r\n<img width=\"1789\" alt=\"Снимок экрана 2022-03-31 в 16 21 36\" src=\"https://user-images.githubusercontent.com/15360667/161067867-fb934850-5267-4b67-8c3b-1a407de7a004.png\">\r\n\r\nMy custom Writable stream with buffering:\r\n\r\n```js\r\nclass HtmlWritable extends Writable {\r\n  chunks = [];\r\n  html = '';\r\n\r\n  getHtml() {\r\n    return this.html;\r\n  }\r\n\r\n  _write(chunk, encoding, callback) {\r\n    this.chunks.push(chunk);\r\n    callback();\r\n  }\r\n\r\n  _final(callback) {\r\n    this.html = Buffer.concat(this.chunks).toString();\r\n    callback();\r\n  }\r\n}\r\n```\r\n\r\nAnd rendering flow:\r\n\r\n```js\r\nimport { renderToPipeableStream } from 'react-dom/server';\r\n \r\nnew Promise((resolve, reject) => {\r\n  const htmlWritable = new HtmlWritable();\r\n\r\n  const { pipe, abort } = renderToPipeableStream(renderResult, {\r\n    onAllReady() {\r\n      pipe(htmlWritable);\r\n    },\r\n    onError(error) {\r\n      reject(error);\r\n    },\r\n  });\r\n\r\n  htmlWritable.on('finish', () => {\r\n    resolve(htmlWritable.getHtml());\r\n  });\r\n});\r\n```","state":"open","updated_at":"2022-04-27T00:13:11Z","created_at":"2022-03-31T13:46:59Z","creator_user_login":"SuperOleg39"}
{"number":24219,"title":"Improve DevTools protocol version handling","body":"# How does DevTools work and what is the \"protocol version\"?\r\n\r\nThe React DevTools extension consists of multiple pieces:\r\n* The **frontend** portion is the extension you see (the Components tree, the Profiler, etc.).\r\n* The **backend** portion is invisible. It runs in the same context as React itself.\r\n\r\nThe frontend displays the current React tree, but it has no way to observe the tree directly because it runs in different memory space. It relies on the backend to describe the tree by sending \"messages\" through an API like [`postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage).\r\n\r\nThe most optimized way for the backend to share the state of the React tree is to send a small packet of [\"op codes\"](https://github.com/facebook/react/blob/main/packages/react-devtools/OVERVIEW.md#serializing-the-tree) whenever the tree changes (e.g. whenever React DOM modifies the page). These \"op codes\" are just an array of numbers which correspond to _operations_ like \"add something to the tree\" or \"remove something from the tree\". For example, the operation to add a component to the tree might look like this:\r\n```js\r\n[\r\n  // ...\r\n  1,   // number 1 signifies an \"add\" operation\r\n  2,   // component id\r\n  1,   // type: class component\r\n  1,   // parent id\r\n  0,   // owner id\r\n  1,   // id of component display name (corresponds to the string table)\r\n  0,   // id of key string in the string table (zero indicates no key)\r\n  // ...\r\n]\r\n```\r\n\r\nThe format described above is highly optimized but also inflexible. (For example, if the backend needs to add an additional piece of information to the above operation, the frontend needs to also know to advance its index within the operations array by one additional place.)\r\n\r\nDevTools version 4.13 introduced the concept of a [_protocol version number_](https://github.com/facebook/react/pull/21331) to allow the frontend to ask the backend which version of the protcol it used. In hindsight, **this number should have included in the operations array itself** (as the first digit).\r\n\r\n# The current problem\r\nGenerally the DevTools frontend and backend pieces are bundled together. For example, the most common DevTools surface– the browser extension– ships both pieces together and _injects_ the backend into the page during initialization. However there are some less common targets are not so tightly coupled– such as React Native (which embeds the backend into the application itself) or [Replay](https://replay.io/) (which records the backend \"operations\" array as part of its session data). In these cases, the frontend (UI) launched by the user (or embedded in the Replay player) may depend on an **incompatible protocol**.\r\n\r\nThis results in errors like #24142 and #23307 (and even https://github.com/RecordReplay/devtools/issues/5344):\r\n<img width=\"791\" alt=\"React DevTools Unsupported Bridge operation error\" src=\"https://user-images.githubusercontent.com/29597/160892306-2bac3e5f-7bcc-4194-8a4d-4f2eecee618d.png\">\r\n\r\n# Potential solutions\r\nAs mentioned above, **the protocol version should have included in the operations array itself** (as the first digit). We should fix this when we eventually make a major breaking change (aka DevTools version 5) but in the meanwhile, maybe there's a way we can improve the current situation.\r\n\r\nSome changes have already been made to support older protocol versions when possible (#24093) and to more clearly communicate _the reason_ for the error when that is not possible (#24147) but perhaps there's more still that we could do?\r\n\r\n## Option 1: Add protocol version to the start of the \"operations\" array\r\nWe could retroactively update the \"operations\" array to always begin with the protocol version number.\r\n\r\nWe'd need a way to _detect_ this though (to distinguish this _newer_ message format from older ones). Currently, each \"operations\" message begins with two numbers– representing the renderer and the root (tree root). For example:\r\n```js\r\n// Older message format\r\n[\r\n  3, // renderer id\r\n  1, // (tree) root element id\r\n  0, // string table size\r\n  // operations ...\r\n]\r\n```\r\n\r\nSince the current operations array starts with a positive integer (the renderer ID) it would be ambiguous to insert another positive integer (the bridge protocol version). For this reason, I propose inserting _two_ new numbers to the start of the operations array: The first one being `0` (so we can reliably detect the newer format) and the second one being the protocol version. For example:\r\n```js\r\n// Newer message format\r\n[\r\n  0, // signifies the newer operations array format\r\n  2, // bridge protocol version\r\n  3, // renderer id\r\n  1, // (tree) root element id\r\n  0, // string table size\r\n  // operations ...\r\n]\r\n```\r\n\r\nThe frontend could then reliably distinguish between these two backend formats:\r\n```js\r\n[3,1,0,...] // old format\r\n[0,2,3,1,0,...] // new format\r\n```\r\n\r\n* **Pros**:\r\n  * Would enable DevTools to get rid of the separate protocol version request method and more easily differentiate between different versions of the operations array when parsing.\r\n  * Would also enable newer DevTools frontends to parse recorded operations arrays from older backends (e.g. the Replay case).\r\n* **Cons**:\r\n  * Would require us to retroactively publish patch updates to older backend releases.\r\n  * Older frontends wouldn't support this change– and would error. (Although this is arguably no worse than the current situation.)\r\n\r\n## Option 2: Automatically fall back to support older protocols\r\nWe could leave the current architecture in place (at least until version 5) but in the case of a protocol error (`UnsupportedBridgeOperationError`) we could have DevTools try to automatically force-downgrade replay the \"operations\" array with the assumption of an older protocol version number.\r\n\r\nThis is essentially how things already work for the React Native case, (as of version [4.24.1](https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md#4241)), but formalizing it would expand to also cover usecases like Replay.\r\n* **Pros**:\r\n  * Works with pre-existing DevTools backends.\r\n* **Cons**:\r\n  * Adds code complexity.\r\n\r\n## Option 3: User configurable protocol version number\r\nWe could leave the current architecture in place (at least until version 5) but provide some sort of UI mechanism to allow users to override the default assumed protocol version number.\r\n* **Pros**:\r\n  * Works with pre-existing DevTools backends.\r\n* **Cons**:\r\n  * Poor/confusing UX.\r\n\r\n# Solutions not considered\r\nOne solution _not_ mentined above would be to add a new message type (e.g. \"new-operations\") that begins with the bridge protocol version number. Newer frontends could listen for this message, but still fall back to listening for the old message (\"operations\"). Older frontends would continue to listen to the older message and not break (at least not in any new way).\r\n\r\nThe reason I think this solution is probably not worth pursuing is that it would double the amount of information the backend sends to the frontend via e.g. `postMessage` during performance-sensitive times. One of the main goals of the new DevTools was to reduce this kind of overhead, so I don't think that's worth compromising on.\r\n\r\nA variation of this might be for backends to send the newer message type (e.g. \"new-operations\") _only_ and no longer continue to send the \"operations\" message. This would avoid the perfromance problem but would leave older frontends in a broken state (perpetually waiting on the \"operations\" array that is never sent).","state":"open","updated_at":"2022-03-31T15:07:15Z","created_at":"2022-03-30T17:26:49Z","creator_user_login":"bvaughn"}
{"number":24187,"title":"Bug: Elements in a list incorrectly receive hover state when a sibling is removed as result of a touch event","body":"Imagine you have a list of components, let's take the classic To Do app example, and you render each item in the list. Each item has a delete button that will remove that item. If a user is on a touch device ( e.g. Safari / Brave / Chrome on iOS ) and they click the delete button, the button in the next item will now display a hover state, as if it was the button being touched.\r\n\r\nThis seems to be related to an overarching issue that's been widely documented where touch events result in \"sticky\" hover states. However in most of these cases it's a single button that is not removed after it's touched, this is expected and the default behaviour of most browsers appears to be that the hover state is maintained until a different element is touched. However in this case, the original element should be removed.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open [this sandbox](https://qggwpt.csb.app/) with a touch device\r\n2. Tap the \"Delete\" button for item one\r\n3. Notice that the \"Delete\" button for item two has a red background, indicating a hover state.\r\n\r\nhttps://codesandbox.io/s/intelligent-hoover-qggwpt?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nWhen a button is touched and then removed from a list, its sibling receives the hover event.\r\n\r\n## The expected behavior\r\n\r\nWhen a button is touched and then removed from a list, there is no currently active, focussed, or hovered element.\r\n","state":"open","updated_at":"2023-05-19T09:21:01Z","created_at":"2022-03-29T03:12:47Z","creator_user_login":"matt-sanders"}
{"number":24185,"title":"Standalone react-devtools: select component instances in iframe","body":"Hi,\r\nin my setup I am using the standalone [react-devtools](https://github.com/facebook/react/tree/main/packages/react-devtools) to inspect a react app running inside an iframe of my main app. I am wondering if there is a way to select individual component instances in the browser view as is it normally possible when using the chrome devtools for a normal (not iframe) environment. Currently I can only select component instances by clicking the entries in the devtools tree.\r\n\r\n<h2>Setup</h2>\r\n\r\nMy react app is running in an iframe. I connect the standalone react-devtools by adding 'react-devtools' to my webpack configuration as described [here](https://github.com/facebook/react/tree/main/packages/react-devtools#usage-with-react-dom).\r\n\r\nThis all works as intended and the devtools are showing up with the tree of the iframe's react app\r\n\r\n<img width=\"971\" alt=\"Screenshot 2022-03-28 at 10 50 28\" src=\"https://user-images.githubusercontent.com/81635487/160361824-27b119b2-6310-44ad-9ac5-cc53099f166b.png\">\r\n\r\n<h2>Desired Behavior</h2>\r\n\r\nI'd like to select the component instances by clicking them in the browser view like it is possible when using the normal chrome react devtools on a regular (not iframe-nested) app:\r\n\r\n<img width=\"744\" alt=\"Screenshot 2022-03-28 at 10 49 15\" src=\"https://user-images.githubusercontent.com/81635487/160361744-6447059a-ae56-47fd-ba34-0ddde6cc32b9.png\">\r\n\r\nIs there currently a way to achieve this? Thank you a lot!\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-03-29T11:43:56Z","created_at":"2022-03-28T08:56:52Z","creator_user_login":"Giraphi"}
{"number":24183,"title":"Fix some JSDoc issue on `react` package","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nWhen I was following the code of the `react` package in the last PR, I noticed that the JSDoc of some functions did not match the parameters exactly, so I tried to fix them.\r\n\r\n## How did you test this change?\r\n\r\nI don't think it needs testing.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-03-28T06:04:45Z","created_at":"2022-03-28T06:00:45Z","creator_user_login":"dev-itsheng"}
{"number":24175,"title":"Fix ReactAct `flushActQueue` error handler","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nWhen I read React's code, I noticed a detail:\r\n\r\n```javascript\r\nfunction flushActQueue(queue) {\r\n  if (__DEV__) {\r\n    if (!isFlushing) {\r\n      // Prevent re-entrance.\r\n      isFlushing = true;\r\n      let i = 0;\r\n      try {\r\n        for (; i < queue.length; i++) {\r\n          let callback = queue[i];\r\n          do {\r\n            callback = callback(true);\r\n          } while (callback !== null);\r\n        }\r\n        queue.length = 0;\r\n      } catch (error) {\r\n        // If something throws, leave the remaining callbacks on the queue.\r\n        queue = queue. slice(i + 1);     // <---------- This code\r\n        throw error;\r\n      } finally {\r\n        isFlushing = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNote the line `queue = queue.slice(i + 1);`, which reassigns the parameters in the function. Obviously, this sentence does not work, and the actual \"queue\" will remain unchanged. .\r\n\r\nTo achieve the actual effect, there are two methods. The first is to use a method that can modify the value of the array itself, such as `queue.splice(0, i + 1)`. The second is to directly modify the pointer of `queue`, that is `ReactCurrentActQueue.current`, I used the second method.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI noticed that for `ReactAct.js`, there is no corresponding test file in the `__tests__` folder, so I added one and tested indirectly through the `act` function exported by this file.\r\n\r\nHowever, due to my environment issues, the tests were not successfully executed locally. The specific reasons are still to be seen, but I decided to commit first, and then use GitHub's CI to check whether the changes took effect.\r\n\r\nIf the results are not correct, I will continue to improve my code.\r\n\r\nAlso, there is a small problem, I noticed that there is an `AUTHORS` file in the root directory of the project, do I need to add this manually?","state":"open","updated_at":"2022-03-28T03:23:58Z","created_at":"2022-03-27T17:21:04Z","creator_user_login":"dev-itsheng"}
{"number":24165,"title":"Bug: `defaultValue` is not consistent between `input` and `select`","body":"When `defaultValue` is not set on initial render `select` doesn't take it into account. This is not consistent with `input` element\r\n\r\nReact version: 17\r\n\r\n## Steps To Reproduce\r\n\r\n1. Set `defaultValue` of `select` after initial render \r\n2. See it is not updated.\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/gifted-bash-hsxy14?file=/src/App.js\r\n\r\n## The current behavior\r\nWhen `defaultValue` is set after initial render `select` doesn't update\r\n\r\n## The expected behavior\r\nWhen `defaultValue` is set after initial render `select` should update","state":"open","updated_at":"2022-04-19T12:03:55Z","created_at":"2022-03-25T17:24:42Z","creator_user_login":"sinan-baymammadli-ri"}
{"number":24157,"title":"[React DevTools] Warn for Duplicate DevTools Installations","body":"If there are duplicate installations of DevTools (ex. if there is an internal version of DevTools installed alongside the Chrome Web Store extension), we currently produce a stream of errors that renders DevTools unusable. Previously, we tried to fix this [here](https://github.com/facebook/react/pull/22517/files) by detecting duplicate DevTools versions and preventing them from erroring. However, because there are some edge cases with code that extends the DevTools hook, we had to [revert](https://github.com/facebook/react/issues/22636) this change.\r\n\r\nEven though we're unable to prevent these errors completely, it would be useful to warn the user that they might have duplicate installations of DevTools. We probably don't want to bother the user with this warning multiple times, so we should only warn the first time we detect the duplicate version.\r\n\r\nFor this task:\r\n- [ ] Show a warning dialog if there are duplicate DevTools versions installed. You can use [this PR](https://github.com/facebook/react/pull/22517/files) for guidance \r\n- [ ] Write a value to `localStorage` once this warning has been shown so that we don't continue to show it if the user chooses to leave the duplicate extension installed.\r\n- [ ] Clear the `localStorage` value if the duplicate extension is no longer detected. (This will let us show the dialog if the duplicate is ever accidentally re-installed.)","state":"open","updated_at":"2022-04-04T23:20:43Z","created_at":"2022-03-24T21:16:44Z","creator_user_login":"lunaruan"}
{"number":24145,"title":"Replace deprecated String.prototype.substr()","body":"## Summary\r\n\r\n[String.prototype.substr()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) is deprecated so we replace it with [String.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) which works similarily but isn't deprecated.\r\n.substr() probably isn't going away anytime soon but the change is trivial so it doesn't hurt to do it.\r\n\r\n## How did you test this change?\r\n\r\nI tested the return of each statement to make sure it's the same as currently. Also `yarn test` run without any issues.","state":"open","updated_at":"2022-03-23T10:37:07Z","created_at":"2022-03-23T10:31:23Z","creator_user_login":"CommanderRoot"}
{"number":24138,"title":"Allowing custom reconciler host-context in React 18 ","body":"in a custom renderer we would like to do something like this:\r\n\r\n```jsx\r\n<inject foo=\"bar\">\r\n  <group>\r\n    <group>\r\n      <obj />\r\n    </group>\r\n  </group>\r\n</inject>\r\n```\r\n\r\n✅ `obj` is supposed to know it is within `inject`, this is possible\r\n\r\n❌ `inject` is supposed to make its props (foo=\"bar\") the host context for all of its nested contents, `obj` should be able to access it. this is not possible\r\n\r\nwe create a host context like this:\r\n\r\n```jsx\r\ngetRootHostContext(rootContainer) { return {} }\r\ngetChildHostContext(parentHostContext, type, rootContainer) {\r\n if (type === \"inject\") {}\r\n else return parentHostContext\r\n```\r\n\r\nwhen `getChildHostContext` gets called for `inject`, we only have access to string type, not props. i thought i can return an empty object `{}` and fill it later in:\r\n\r\n```jsx\r\nfinalizeInitialChildren(instance, type, props, rootContainer, hostContext) {\r\n  if (type === \"inject) hostContext.props = props\r\n```\r\n\r\nbut when `finalizeInitialChildren` is called for `inject` it refers to root context, it can't refer to its own host context that was created by `getChildHostContext`. \r\n\r\ni find this puzzling, we don't seem to have any relation between a host context and the element that created it.\r\n\r\n## solution\r\n\r\nif we can access the current context it would be very useful to create a richer host context, that will also update.\r\n\r\n```jsx\r\nfinalizeInitialChildren(instance, type, props, rootContainer, hostContext, currentContext)\r\nprepareUpdate(instance, type, oldProps, newProps, rootContainer, hostContext, currentContext)\r\n```\r\n\r\nalternatively, allowing us to receive props would at least allow for a static host context that doesn't update but at least carrier some deeper information.\r\n\r\n```jsx\r\ngetChildHostContext(parentHostContext, type, rootContainer, props)\r\n```","state":"open","updated_at":"2022-03-21T12:45:52Z","created_at":"2022-03-21T12:22:40Z","creator_user_login":"drcmda"}
{"number":24136,"title":"Bug: Events in shadow dom get duplicated when bubbling","body":"Events dispatching from inside a shadow-root will be handled multiple times while bubbling up the virtual DOM tree. I suspect this is because of event retargeting when crossing the boundary of the shadow dom.\r\n\r\nReact version: 17.0+, including 18-rc2\r\n\r\n## Steps To Reproduce\r\n\r\nClick on the button in the code example below:\r\n\r\nhttps://codesandbox.io/s/react-shadow-dom-event-doubling-msgnj1\r\n\r\n## The current behavior\r\n\r\n`onDivClicked` is called twice per click on the button.\r\n\r\n## The expected behavior\r\n\r\n`onDivClicked` should only be called once per handled click.\r\n","state":"open","updated_at":"2023-01-05T14:44:28Z","created_at":"2022-03-21T02:39:00Z","creator_user_login":"WorldSEnder"}
{"number":24135,"title":"Guard against global variables named after properties in DOM interfaces","body":"## Summary\r\n\r\n- Closes https://github.com/facebook/react/issues/23324\r\n- [Improves Flow coverage](https://gist.github.com/eps1lon/bfeec06c292d40d4004204053b1997d8)\r\n   - `isTextInputElement.js`: +-0%\r\n   - `ChangeEventPlugin.js`: +12% (74% -> 84%)\r\n   - `SelectEventPlugin.js`: +7% (71% -> 78%)\r\n\r\n\r\n## How did you test this change?\r\n\r\n- [x] CodeSandbox from https://github.com/facebook/react/issues/23324#issuecomment-1073267698 with a build from this PR: https://codesandbox.io/s/fixed-window-nodename-extractevents-forked-4uzwt2?file=/src/index.js\r\n- [x] CI\r\n- [x] traced usage of `targetNode` to make sure it's never used as a `Window`","state":"open","updated_at":"2023-03-02T07:00:56Z","created_at":"2022-03-20T17:33:03Z","creator_user_login":"eps1lon"}
{"number":24127,"title":"fix: styleUpdates can't be truthy if propKey is STYLE and lastProp is…","body":"\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n1. The `styleUpdates` would be `null` if `propKey === STYLE` and `lastProp` is `false`。So the following judge is unnecessary:\r\n\r\n```js\r\nif (!styleUpdates) {\r\n  if (!updatePayload) {\r\n    updatePayload = [];\r\n  }\r\n  updatePayload.push(propKey, styleUpdates);\r\n }\r\n```\r\n2. Another problem is that the code `updatePayload.push(propKey, styleUpdates)` would make `updatePayload` pusth the item: `[..., STYLE, null, ...]`，and in the end the code:\r\n\r\n```js\r\nif (styleUpdates) {\r\n\r\n    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);\r\n  }\r\n```\r\nwould make `updatePayload` push another item: `[..., STYLE, styleUpdates, ...]`，so the `updatePayload` would has two `STYLE` item.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n\r\n","state":"open","updated_at":"2022-03-19T09:09:59Z","created_at":"2022-03-19T09:05:44Z","creator_user_login":"baozouai"}
{"number":24123,"title":"[Enhancement] Imply empty array of dependencies","body":"Sometimes I receive following warning, even if my `useCallback` does not need external dependencies.\r\n\r\n```\r\nReact Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?\r\n```\r\n\r\nThis requires an extra working-step to add an empty array for dependencies.\r\n\r\nWould it not be possible to internally imply an empty dependency array by default?","state":"open","updated_at":"2022-03-22T12:30:43Z","created_at":"2022-03-18T09:24:00Z","creator_user_login":"fabpico"}
{"number":24120,"title":"feat: use unsigned right shift assignment to replace Math.floor","body":"Hi\r\nI use unsigned right shift assignment to replace Math.floor for more performance","state":"open","updated_at":"2022-03-18T06:39:01Z","created_at":"2022-03-18T06:34:23Z","creator_user_login":"baozouai"}
{"number":24113,"title":"Bug: <StrictMode> unexpected behavior for double invoked functions ","body":"Detailed explanation of the case and reproducible example is in the sandbox itself:\r\nhttps://codesandbox.io/s/smoosh-wind-9lrpp3?file=/src/App.js\r\n\r\nI can only guess that there is a reason behind this decision but I can't understand it, or maybe I'm right and this could be changed.\r\nAt the moment this behavior looks more like a bug than intentional implementation.","state":"open","updated_at":"2023-03-02T03:42:04Z","created_at":"2022-03-17T13:22:45Z","creator_user_login":"marioil"}
{"number":24108,"title":"Bug: eslint-plugin-react-hooks does not allow passing hook as props in jsx syntax","body":"React version: latest\r\ndemo:https://codesandbox.io/s/cranky-framework-p7r5vb?file=/src/App.tsx\r\n\r\n## The current behavior\r\njsx syntax does not work correctly.\r\n```jsx\r\n <>\r\n    <IsolateRender useRender={() => useCustomeHook()} /> // error !\r\n    <IsolateRender {...{ useRender: () => useCustomeHook() }} /> no error!\r\n </>\r\n```\r\nit shows this error:\r\n>React Hook \"useCustomeHook\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function. (react-hooks/rules-of-hooks)\r\n\r\n## The expected behavior\r\njsx syntax should work as object syntax.\r\n","state":"open","updated_at":"2022-03-27T06:13:08Z","created_at":"2022-03-16T14:45:09Z","creator_user_login":"alisajadih"}
{"number":24104,"title":"Enable enableCache feature flag in native-fb","body":"Enables in xplat.","state":"open","updated_at":"2022-03-19T09:08:06Z","created_at":"2022-03-15T21:07:43Z","creator_user_login":"davidmccabe"}
{"number":24103,"title":"Bug: Yarn build fail, rollup issues ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: Current main branch\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone the repository from the main branch\r\n2. Install node and yarn (node version: 16.14.0, yarn version: 1.22.17, JDK version: tried both 11 and 17)\r\n3. Run yarn\r\n4. Run yarn build\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n\r\n\r\n## The current behavior\r\nError message :\r\n\r\n``` \r\nC:\\Users\\Irene Park\\Desktop\\react>yarn build\r\nyarn run v1.22.17\r\n$ node ./scripts/rollup/build.js\r\n BUILDING  react.development.js (umd_dev)\r\n OH NOES!  react.development.js (umd_dev)\r\n\r\nRangeError: Maximum call stack size exceeded\r\n    at ExportDefaultVariable.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:2943:25)\r\n    at Identifier$1.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:4477:23)\r\n    at LocalVariable.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:2950:23)        \r\n    at Identifier$1.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:4477:23)\r\n    at ExportDefaultVariable.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:2950:23)\r\n    at Identifier$1.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:4477:23)\r\n    at LocalVariable.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:2950:23)        \r\n    at Identifier$1.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:4477:23)\r\n    at ExportDefaultVariable.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:2950:23)\r\n    at Identifier$1.includeCallArguments (C:\\Users\\Irene Park\\Desktop\\react\\node_modules\\rollup\\dist\\shared\\node-entry.js:4477:23) {       \r\n  watchFiles: [\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\index.experimental.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\React.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\forks\\\\ReactSharedInternals.umd.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactCreateRef.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactChildren.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactMemo.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactElement.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactBaseClasses.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactContext.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactForwardRef.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactLazy.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactHooks.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactServerContext.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactElementValidator.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactMutableSource.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactStartTransition.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactAct.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactCurrentDispatcher.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactCurrentActQueue.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactDebugCurrentFrame.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactSharedInternals.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactCurrentOwner.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactCurrentBatchConfig.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactServerContextRegistry.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\react\\\\src\\\\ReactNoopUpdateQueue.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\ReactSymbols.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\ReactVersion.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\index.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\ReactFeatureFlags.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\consoleWithStackDev.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\isArray.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\getComponentNameFromType.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\CheckStringCoercion.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\hasOwnProperty.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\assign.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\isValidElementType.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\checkPropTypes.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\ReactComponentStackFrame.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\enqueueTask.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\src\\\\forks\\\\Scheduler.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\src\\\\SchedulerFeatureFlags.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\shared\\\\ConsolePatchingDev.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\src\\\\SchedulerMinHeap.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\src\\\\SchedulerProfiling.js',\r\n    'C:\\\\Users\\\\Irene Park\\\\Desktop\\\\react\\\\packages\\\\scheduler\\\\src\\\\SchedulerPriorities.js'\r\n  ]\r\n}\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n\r\n\r\n## The expected behavior\r\nNo error messages from rollup. Success in yarn build.","state":"open","updated_at":"2022-04-08T16:22:10Z","created_at":"2022-03-15T20:33:15Z","creator_user_login":"jeongwoopark0514"}
{"number":24090,"title":"React 18  Whether to support keepalive？","body":"Vue officially supports the keepalive method, and it works well\r\nhttps://vuejs.org/guide/built-ins/keep-alive.html\r\n","state":"open","updated_at":"2022-10-12T07:59:09Z","created_at":"2022-03-14T03:10:06Z","creator_user_login":"DreamPWJ"}
{"number":24079,"title":"Bug: v17.0.2 tag doesn't seem to correspond to v17.0.2 source code","body":"See: https://github.com/facebook/react/blob/v17.0.2/packages/react/package.json#L7 vs https://unpkg.com/browse/react@17.0.2/package.json\r\n\r\nNotice the version of package.json with v17.0.2 tag has a version of 17.0.0 vs the one one unpkg.com with a version of 17.0.2\r\n","state":"open","updated_at":"2022-03-11T22:20:10Z","created_at":"2022-03-11T22:20:10Z","creator_user_login":"jrmuizel"}
{"number":24078,"title":"[Flight/Fizz] refactor streaming to support yielding and byob buffers","body":"* byob requests are supported if found on the readable stream. ~~We don't auto-allocate them becasue it would not\r\nlead to signifcant code size reductions~~\r\n  * We auto allocate a buffer to force the stream into byob mode\r\n* an 'almost-empty' hueristic is used to avoid enqueueing mostly empty buffers. it instead copies the view and enqueues\r\n* an 'almost-full' hueristic is used to start yielding. If the current view is mostly full we will signal that the streaming can yield. If we need to write more because a boundary is complete and end up creating a new view it is possilbe that the yield signal will go away and writing will continue to try to fill up another view\r\n* ~~we no longer stop and start writing in flushCompletedSegments because the yield signal on the buffer size will give us an opportunity to do this and it forces a flush regardless of how much of the current view has been used up~~\r\n  * `requestFlush` is now exported from environment specific stream configs. in Browser it does nothing and in Node and legacy it calls completeWriting->beginWriting to ensure original flushing behavior.\r\n\r\nTodo\r\n\r\n- [x] add at least one test exercising byob reads\r\n","state":"open","updated_at":"2022-03-16T19:20:21Z","created_at":"2022-03-11T20:56:38Z","creator_user_login":"gnoff"}
{"number":24075,"title":"Why return now directly in the RenderContext or CommitContext","body":"```\r\nexport function requestEventTime() {\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    return now();  // why ????\r\n  }\r\n  if (currentEventTime !== NoTimestamp) {\r\n    return currentEventTime;\r\n  }\r\n  currentEventTime = now();\r\n  return currentEventTime;\r\n}\r\n```\r\nWhy return now directly in the RenderContext or CommitContext\r\n","state":"open","updated_at":"2022-03-11T10:48:14Z","created_at":"2022-03-11T10:48:14Z","creator_user_login":"wangmaoshu"}
{"number":24064,"title":"[DevTools Bug]: Out of Memory randomly on pages","body":"### Website or app\n\nhttps://bestellen-a.cito.nl\n\n### Repro steps\n\nGoto the site with the React DevTools extension installed.\r\n\r\nAfter installing this plugin pages I noticed that chrome started giving \"Out of Memory\" error pages while visiting pages with react. Not all of the times but some times. After uninstalling the plugin the error message didn't show up anymore. Am I the first to experience this?\r\n\r\nIs there anything I can supply to help figure out what is going wrong?\n\n### How often does this bug happen?\n\nOften\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-03-09T18:26:10Z","created_at":"2022-03-09T16:54:32Z","creator_user_login":"JaapioNL"}
{"number":24046,"title":"Add Table of Contents to ReadMe","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nProposing a simple Table of contents at the top of the React Readme to allow for easy and quick navigation to relevant sections of the ReadMe.\r\nSee screenshot below:\r\n![image](https://user-images.githubusercontent.com/2737707/157293327-a292f3f8-d16c-4014-9f04-742916830b09.png)\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nNo change to functional code, so no new tests were added.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-03-26T17:22:04Z","created_at":"2022-03-08T17:34:01Z","creator_user_login":"Jahb"}
{"number":24004,"title":"Bug: 美国人制裁元素周期表，制裁太阳吧，制裁火星吧，制裁月亮吧，地球已经不够你制裁了。","body":"","state":"open","updated_at":"2022-03-03T11:37:13Z","created_at":"2022-03-03T11:37:13Z","creator_user_login":"wangzhigang"}
{"number":23396,"title":"Bug: element.current.scrollIntoView() not working as expected in chrome.","body":"Hey 🙋‍♂️\r\n\r\nI have built a simple chatbot using react, and when the user sends a message i want to show the last message in the chatWindow component, so I used the following code:\r\n```js\r\nuseEffect(\r\n    function () {\r\n      if (lastmessageRef.current !== null) {\r\n        lastmessageRef.current.scrollIntoView()\r\n      }\r\n    },\r\n    [lastmessageRef]\r\n  )\r\n```\r\nIt works as expected in edge and Firefox, but on chrome it is behaving weird\r\nllink-to-the-chatbot: https://karthik2265.github.io/worlds-best-chatbot/\r\ngithub-repo-link: https://github.com/karthik2265/worlds-best-chatbot\r\n\r\nThank you","state":"open","updated_at":"2023-05-23T11:51:19Z","created_at":"2022-03-02T04:19:18Z","creator_user_login":"karthik2265"}
{"number":23345,"title":"Bug: React 16.8 and above [keyboard events not working with MAC touch bar in React Js after first submit (on textarea form)] #23344","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17 and 16 above\r\n\r\n## Steps To Reproduce\r\n\r\n[keyboard events not working with MAC touch bar in React Js after first submit (on textarea form)]\r\n\r\nI have a weird issue where MAC touch bar (key input) events (word suggestions) are not working when after I submit the textarea input....The textarea inputs are unable to trigger any keyevents in React (not sure about other frameworks)\r\n\r\nScenario:\r\n\r\nStep 1 : Type something in textarea and press Enter.\r\n\r\nStep 2 : Try now to enter something via Mac touch bar (there are word suggestions on touch bar that appear) try touching them... no keyboard event is triggering...\r\n\r\nNow if we try to type something from the physical keyboard and then use the Touch bar suggestions and we can see that it starts working again....\r\n\r\nThis issue happens only after clearing or resetting the textarea element...\r\n\r\nI need this to work with Mac touch bar just like regular input event....\r\n\r\nCreated an example in stackblitz: (the javascript way works fine)\r\nReact:\r\nhttps://stackblitz.com/edit/react-er5v6c?file=src%2FApp.js\r\nJavascript:\r\nhttps://stackblitz.com/edit/js-jxmo1y?file=index.js\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nCreated an example in stackblitz: (the javascript way works fine)\r\nReact:\r\nhttps://stackblitz.com/edit/react-er5v6c?file=src%2FApp.js\r\nJavascript:\r\nhttps://stackblitz.com/edit/js-jxmo1y?file=index.js\r\n\r\n## The current behavior\r\ncannot type in with mac touchbar suggestions\r\n\r\n## The expected behavior\r\nI need it to be able to work with mac touchbar as well","state":"open","updated_at":"2022-02-24T15:09:23Z","created_at":"2022-02-23T16:20:56Z","creator_user_login":"varunrajasekhar"}
{"number":23324,"title":"Bug: TypeError elem.nodeName.toLowerCase is not a function","body":"React version: 17 +\r\n\r\n## Steps To Reproduce\r\n\r\n1.window.nodeName exists and does not have a toLowerCase method\r\n2.an error will be reported when the event is triggered, such as clicking on the page\r\n\r\n![image](https://user-images.githubusercontent.com/18453647/154606817-e28d1747-1c85-4ce3-b384-35c8e198cad0.png)\r\n\r\n[ChangeEventPlugin.js](https://github.com/facebook/react/blob/54f785bc51800556dead12aaedf9594b2f15e836/packages/react-dom/src/events/plugins/ChangeEventPlugin.js)\r\n\r\n![image](https://user-images.githubusercontent.com/18453647/154607065-e1d6e87b-6c5a-493a-9e3c-5a7836d14a57.png)\r\n\r\n","state":"open","updated_at":"2023-03-02T07:00:14Z","created_at":"2022-02-18T02:40:21Z","creator_user_login":"Theoton"}
{"number":23306,"title":"Bug: pseudo styles don't work properly if React state does not change when clicking with right mouse button.","body":"I have a button that changes background in :hover and :active states. Clicking the button with left mouse button (LMB) works fine, styles change as they should. But, clicking with right mouse button (RMB) works fine only if underlying react state is actually changed (e.g. different from the previous state)\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n1. Open the code example provided below\r\n2. Click the \"Click Me\" button with LMB more than 2 times (DON'T move your mouse cursor while clicking)\r\n3. Click the \"Click Me\" button with RMB more than 2 times (DON'T move your mouse cursor while clicking)\r\n\r\nLink to code example: https://codesandbox.io/s/pensive-sunset-z1t69f\r\n\r\n## The current behavior\r\nNo mater how many times you click with LMB, the \"Click Me\" button consistently changes its background color to yellow when you hold LMB down, and changes it back to silver when you release LMB.\r\n\r\nThe second time RMB pressed down, the background color of the \"Click Me\" button remains yellow, even if you release RMB. That is, whenever you click it with RMB and the new react state is the same as the previous, the button style remains yellow even if you release RMB.\r\n## The expected behavior\r\nClicking the \"Click Me\" button with RMB should respect styles regardless of the underlying react state.","state":"open","updated_at":"2022-08-24T14:22:13Z","created_at":"2022-02-16T00:14:02Z","creator_user_login":"acanthite1855"}
{"number":23301,"title":"Bug: autoFocus broken inside <dialog /> ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17 and 18.0.0-rc.0-next-27b569969-20220211\r\n\r\n## Steps To Reproduce\r\n\r\n1. render `<input /><input autoFocus />` inside `<dialog />`\r\n2. execute the `showModal()` method of the dialog\r\n3. you will notice that react will not set focus to the correct input element\r\n\r\n![DialogAutoFocus](https://user-images.githubusercontent.com/4113649/154110039-dc6dbd63-f294-4089-aa25-420626088ef5.gif)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nhttps://codesandbox.io/s/dreamy-meninsky-460wbr?file=/src/App.tsx\r\n\r\n## The current behavior\r\n\r\nIn Chrome and Safari TP the element with `autofocus=\"true\"` will receive focus.  \r\nHowever the element with `autoFocus={true}` will not receive focus.\r\n\r\n## The expected behavior\r\n\r\nFrom the html-spec https://html.spec.whatwg.org/multipage/interaction.html#the-autofocus-attribute\r\n\r\n> The autofocus content attribute allows the author to indicate that an element is to be focused [...] as soon as the [dialog](https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element) within which it finds itself is shown\r\n\r\n\r\nFrom https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus\r\n\r\n> The autofocus [global attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes) is a Boolean attribute indicating that an element should be focused on page load, or when the [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) that it is part of is displayed\r\n\r\nTherefore `autoFocus={true}` should also set the focus similar to `autofocus=\"true\"` for elements inside `<dialog />`\r\n","state":"open","updated_at":"2023-07-29T21:30:39Z","created_at":"2022-02-15T17:00:06Z","creator_user_login":"jantimon"}
{"number":23299,"title":"Reset button on iOS time input does not return correct event value","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: React 17.0.2\r\nIOS version: 14+\r\n\r\n## Bug\r\nFor iOS(Safari and Chrom).\r\nThe reset button function does not work on the time input:\r\n\r\n If I change time to 00:31, reset directly, the time jumps back to 00:30, but the computer still shows 00:31.\r\nWhen pressing reset on a time input, the onChange event is not fired.\r\n\r\n![reset](https://user-images.githubusercontent.com/83808682/154050608-748e912a-c6c7-4cae-9d27-9a705762b6d2.PNG)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://stackblitz.com/edit/react-enuflz?file=src%2FApp.js\r\nPls try on iOS.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n","state":"open","updated_at":"2022-02-20T19:17:15Z","created_at":"2022-02-15T11:16:40Z","creator_user_login":"PingEleanor1"}
{"number":23298,"title":"react-hooks/exhaustive-deps and useMemo(() => x, x)","body":"I would like to memoize an array using `useMemo(() => x, x)`, where x.length is unknown but constant, and so think I have a legitimate use case to be able to disable the eslint warnings.\r\n\r\nI can find similar issues to this, including https://github.com/facebook/react/issues/18229#issuecomment-619569632, but not one where the length of the dependencies is unknown but constant.\r\n\r\nThis code creates a warning\r\n> React Hook useMemo has a missing dependency: 'x'. Either include it or remove the dependency array.\r\n\r\nand\r\n> React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.\r\n\r\nWhich links to an issue with the following comment\r\n> If you ... aren't sure your case is legit, file a new issue.\r\nhttps://github.com/facebook/react/issues/14920#issuecomment-472018817\r\n\r\nMy use case, without the useMemo, is as follows:\r\n\r\n```ts\r\n/**\r\n * When an array in `arrays` goes from length 0 to length > 0, call `callback`\r\n */\r\nexport const useCallbackWhenAnArrayPopulates = (\r\n  callback: () => void,\r\n  ...arrays: (readonly unknown[])[],\r\n) => {\r\n  //  const memoArrays = useMemo(() => arrays, arrays);\r\n  const prevArrays = useRef(arrays);\r\n\r\n  useEffect(() => {\r\n    if (prevArrays.current.length !== arrays.length) {\r\n      throw 'Unexpected array length change in useCallbackWhenArraysPopulate';\r\n    }\r\n    if (\r\n      prevArrays.current.some(\r\n        (value, index) => !value.length && arrays[index]?.length,\r\n      )\r\n    ) {\r\n      callback();\r\n    }\r\n    prevArrays.current = arrays;\r\n  }, [arrays, callback]);\r\n};\r\n```\r\n\r\nI would like to memoise `arrays`, which comes from spreading arguments passed to the hook, so that the useEffect is only called when one of these arguments changes. Ideally I'd do this with `useMemo(() => arrays, arrays)`.\r\n\r\nI know that [the dependency length for useMemo can't change](https://github.com/facebook/react/issues/18229), but though it's length is unknown, I would not expect it to change and prevent this from happening by throwing an error if it does.\r\n\r\nIs it safe to use `useMemo(() => arrays, arrays)` in this case, and disable the lint warning?\r\n\r\nExample usage:\r\n\r\nhttps://codesandbox.io/s/nervous-glade-qt4x2?file=/src/Counters.js\r\n\r\n(side note, not shown in this example are cases where the arrays could change together and you wouldn't want to call the callbacks twice when this happens)","state":"open","updated_at":"2022-11-13T22:54:16Z","created_at":"2022-02-15T10:08:21Z","creator_user_login":"penx"}
{"number":23288,"title":"Fixed that parameter name described in JSDoc does not appear in function signature","body":"## Summary\r\n\r\nLooking at the file, I found the parameter name described in JSDoc does not appear in function signature.\r\nSo I fixed that. I hope it helps.\r\n","state":"open","updated_at":"2022-02-13T16:24:23Z","created_at":"2022-02-13T15:22:52Z","creator_user_login":"apeltop"}
{"number":23287,"title":"RFC: Context scoping for compound components","body":"### The problem\r\n\r\nOur [Radix Primitives](https://github.com/radix-ui/primitives) API is intentionally very open allowing for all sorts of compositions. For example:\r\n\r\n```jsx\r\n<AlertDialog.Root>\r\n\r\n  <Dialog.Root>\r\n    <Dialog.Trigger />\r\n    <Dialog.Content>\r\n      <AlertDialog.Trigger /> {/* note the alert trigger in dialog content */}\r\n    </Dialog.Content>\r\n  </Dialog.Root>\r\n\r\n  <AlertDialog.Content />\r\n</AlertDialog.Root>\r\n```\r\n\r\nAn issue arises here though... \r\n\r\nThe `AlertDialog` is a `Dialog` composition under the hood with additional functionality bound to meet `AlertDialog` requirements. Therefore, `AlertDialog.Root` is also a `Dialog.Root` so provides both `DialogContext` and `AlertDialogContext`.\r\n\r\nDue to the way React Context works, the composition above means the `AlertDialog.Trigger` (also a `Dialog.Trigger`) would `useContext(DialogContext)` and retrieve the context from `Dialog.Root` instead of `AlertDialog.Root`. Clicking the `AlertDialog.Trigger` would toggle the `Dialog.Content`.\r\n\r\nAn initial solution might be to create hooks containing all `Dialog` functionality so that we can create a new context for each component type and bind dialog functionality using hook. However, if consumers create their own `Dialog` compositions from ours the problem still exists, it's just moved:\r\n\r\n```jsx\r\n<FeedbackDialog.Root>\r\n  <AnotherDialog.Root>\r\n    <AnotherDialog.Trigger />\r\n    <AnotherDialog.Content>\r\n      <FeedbackDialog.Trigger /> {/* toggles AnotherDialog */}\r\n    </AnotherDialog.Content>\r\n  </AnotherDialog.Root>\r\n  <FeedbackDialog.Content />\r\n</FeedbackDialog.Root>\r\n```\r\n\r\nInstead of using hooks, we currently solve this internally by creating a new context that `AlertDialog` passes to its internal `Dialog` via a `__scope` prop, which `Dialog` then passes to all of its `useContext` calls. Unfortunately, this still doesn't solve the consumer side issue mentioned above.\r\n\r\nThis also sounds a lot simpler than the actual implementation ended up being because an `AlertDialog` can be recomposed which has its own multiple parts as well as dialog parts. Therefore, `__scope` is a mapping of contexts e.g:\r\n\r\n```jsx\r\n__scope={{\r\n  AlertDialog: [alertDialogContext, alertDialogContentContext]\r\n  Dialog: [dialogContext, dialogContentContext]\r\n}}\r\n```\r\n\r\n### The Proposal\r\n\r\nA way to scope a component's context when re-composing it to ensure `AlertDialog` parts don't accidentally retrieve context from another component composed of similar parts. \r\n\r\nGiven composition is a big part of React, it seems this would be really useful if it were handled by React somehow. Perhaps it already is and there is a simpler way we can achieve this with a different approach?\r\n\r\nWe have had someone request that we expose our scoping solution as an npm package (which we can but it needs refining before we could do that) so it seems others are facing these issues.\r\n\r\n### \"Just re-order parts\"\r\n\r\nWe could make sure all `AlertDialog` parts are inside `Dialog` to avoid this but a more real-world use-case where _re-ordering parts_ is not always possible or obvious where they should go would be a `DropdownMenu` and `Tooltip` that both use a `Popper` under the hood, so both reference `PopperContext`:\r\n\r\n```jsx\r\n<DropdownMenu>\r\n  <Tooltip>\r\n    <DropdownMenuTrigger as={TooltipTrigger} />\r\n    <TooltipContent />\r\n  </Tooltip>\r\n  <DropdownMenuContent />\r\n</DropdownMenu>\r\n```\r\n\r\nThe popper rendered by `DropdownMenuContent` cannot `getBoundingClientRect` for its `triggerRef` because the ref is attached to the `Tooltip`s `PopperContext`.","state":"open","updated_at":"2022-04-26T12:25:53Z","created_at":"2022-02-13T10:28:12Z","creator_user_login":"jjenzz"}
{"number":23268,"title":"Bug: React Context consumers not consuming through windowed portal","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nUsing React Portals to render React components in an external window doesn't respect context hierarchy \r\nin the example the hierachy is like this: \r\n```jsx\r\n<PortalWindowContextProvider>\r\n      <AppContextProvider>\r\n        <App>\r\n            <div className=\"App\">\r\n              <h1>Hello CodeSandbox</h1>\r\n              <h2>Start editing to see some magic happen!</h2>\r\n              <Language />\r\n              <PortalWindow>\r\n                  <h1>PORTAL</h1>\r\n                  <PortalComponent>\r\n                    <Language />\r\n                  </PortalComponent>\r\n              </PortalWindow>\r\n          </div>\r\n        </App>\r\n      </AppContextProvider>\r\n    </PortalWindowContextProvider>\r\n```\r\nthe `Language` component consumes the context\r\n\r\nthe 'react dom' would look like this\r\n```jsx\r\n<PortalWindowContextProvider>\r\n      <AppContextProvider>\r\n        <App>\r\n            <div className=\"App\">\r\n              <h1>Hello CodeSandbox</h1>\r\n              <h2>Start editing to see some magic happen!</h2>\r\n              <Language />\r\n          </div>\r\n        </App>\r\n      </AppContextProvider>\r\n    </PortalWindowContextProvider>\r\n\r\n<-- popup window --!>\r\n              <PortalWindow>\r\n                  <h1>PORTAL</h1>\r\n                  <PortalComponent>\r\n                    <Language />\r\n                  </PortalComponent>\r\n              </PortalWindow>\r\n```\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Run the example\r\n2. Allow popups to open\r\n3. Lang should be shown in the popup window\r\n\r\nLink to code example: https://codesandbox.io/s/fast-cherry-28tpc\r\n\r\n## The current behavior\r\n\r\nContext is not consumed correctly, the initial value of the context is shown, but when the value is updated, the context value is not updated \r\n\r\n## The expected behavior\r\n\r\nthe context is consumed and kept up to date","state":"open","updated_at":"2022-02-12T15:21:44Z","created_at":"2022-02-10T10:21:02Z","creator_user_login":"NoMaillard"}
{"number":23249,"title":"Add Hooks and Testing page reference","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n```Updated **README** file for User Experience (UX). ```\r\nAdd  [Hooks](https://reactjs.org/docs/hooks-intro.html) and [Testing](https://reactjs.org/docs/testing.html) documentation link to the current README file on lines 33 and 34.\r\n\r\n```diff\r\n+ * [Hooks](https://reactjs.org/docs/hooks-intro.html) \r\n+ * [Testing](https://reactjs.org/docs/testing.html)\r\n```\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n**These changes do not affect the inner functionality of React.**\r\n","state":"open","updated_at":"2022-02-11T19:43:28Z","created_at":"2022-02-08T07:21:02Z","creator_user_login":"SyedAzam246"}
{"number":23248,"title":"Bug: eslint(react-hooks/exhaustive-deps) When a property is accessed with and without optional chaining, exhaustive-deps' code suggestion will introduce an error","body":"## Steps To Reproduce\r\n\r\n[StackBlitz demo](https://stackblitz.com/edit/node-v1wayx?devtoolsheight=33&file=index.js)\r\n\r\nI've enabled `enableDangerousAutofixThisMayCauseInfiniteLoops` so you can run `npx eslint --fix index.js` and see the change that \r\nreact-hooks/exhaustive-deps makes through the code suggestions API.\r\n\r\n## The current behavior\r\n\r\nWhen you accept react-hooks/exhaustive-deps' code suggestions the following code:\r\n\r\n```js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function MyComponent() {\r\n  const [one] = useState(1);\r\n  const [foo] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [one]);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [foo?.bar]);\r\n\r\n  return null;\r\n}\r\n\r\n```\r\n\r\nWill be incorrectly fixed to the following.\r\n\r\n```js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function MyComponent() {\r\n  const [one] = useState(1);\r\n  const [foo] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [foo.bar, one]);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [foo.bar, one]);\r\n\r\n  return null;\r\n}\r\n```\r\n\r\n## The expected behavior\r\n\r\nreact-hooks/exhaustive-deps should be recommending the following:\r\n\r\n```js\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function MyComponent() {\r\n  const [one] = useState(1);\r\n  const [foo] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [foo?.bar, one]);\r\n\r\n  useEffect(() => {\r\n    console.log(one);\r\n    if (foo?.bar) {\r\n      console.log(foo.bar);\r\n    }\r\n  }, [foo?.bar, one]);\r\n\r\n  return null;\r\n}\r\n```\r\n\r\n## Additional details\r\n\r\nWhen you include both an optional chaining usage `foo?.bar` and a non-optional chaining usage `foo.bar` exhaustive-deps will use the version without the optional chaining for the deps array. i.e. It will recommend a deps array containing `foo.bar`, which because `foo` may be undefined and the deps array is outside will result in a silent runtime error in JS or a TypeScript error in TS.\r\n\r\nIf you only use `foo?.bar` it will recommend `foo?.bar`. So this may be an order of usage issue, i.e. preferring the last usage. I haven't checked. However that is a problem because the most common reason to access the same property with and without optional chaining is a case where you have an if condition which implicitly guarantees that the member you use optional chaining on is not nullish and can be accessed directly and thus do not need optional chaining within the if condition's body. And in that case the version without optional chaining will always be the latter usage.\r\n\r\nWhen you are already using `foo?.bar` will not try to autofix that. However this is made worse of an issue because if you are already using the correct version and you accept exhaustive-deps changes to fix a different issue (you added a new unrelated variable it needs to add) exhaustive-deps will override your `foo?.bar` dep and turn it into `foo.bar`.\r\n\r\nIf exhaustive-deps sees multiple versions of the same property access, it should recommend the version with the most optional chaining usage. Since anything less would create an error which would result in the optional chaining usage never even running.","state":"open","updated_at":"2023-03-23T12:30:57Z","created_at":"2022-02-08T03:35:55Z","creator_user_login":"dantman"}
{"number":23246,"title":"Bug: eslint-plugin-react-hooks makes a suggestion that will lead to bugs","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: Current\r\n\r\n## Steps To Reproduce\r\n\r\n1. Enable eslint-plugin-react-hooks\r\n2. Write a `useEffect` call with a dependency array containing members with unstable object identities.  See this blog post: https://www.benmvp.com/blog/object-array-dependencies-react-useEffect-hook/#option-2---recreate-the-object-within\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe following message is displayed.\r\n\r\n```\r\nThe 'team' object makes the dependencies of useEffect Hook\r\nchange on every render. To fix this, wrap the initialization\r\nof 'team' in its own useMemo() Hook.\r\n```\r\n\r\n\r\n## The expected behavior\r\n\r\n`useMemo` does not guarantee a stable object identity: https://reactjs.org/docs/hooks-reference.html#usememo\r\n\r\neslint-plugin-react-hooks shouldn't suggest using it, since it may result in unexpected invocations of `useEffect`.\r\n","state":"open","updated_at":"2022-02-08T17:51:07Z","created_at":"2022-02-08T00:00:55Z","creator_user_login":"mgummelt"}
{"number":23245,"title":"Mechanism to customize rendering of state/props data types","body":"When using React from transpiled languages, the way KeyValue.js renders state/props entries is pretty unusable for non-primitive types (int/string).  \r\n\r\nI was hoping dev-tools could check for existence of a function on Props/State (or some other mechanism, maybe toStringTag) that would allow app developer to provide a custom display for each entry in the Props/State.  If you provide a custom formatter, you give up the ability to edit those fields.","state":"open","updated_at":"2022-02-17T13:56:02Z","created_at":"2022-02-07T21:30:53Z","creator_user_login":"matthughes"}
{"number":23240,"title":"React 18 Is there a way to use mongodb when using rsc","body":"<!--\r\n  Ask a question or share feedback about the React 18 release here.\r\n-->\r\nSince there is a package `react-pg` for people to use pg with rsc, I wonder that is there also a way to use mongodb with rsc\r\n","state":"open","updated_at":"2022-02-17T15:12:00Z","created_at":"2022-02-07T11:34:23Z","creator_user_login":"LOLBRUHNICE"}
{"number":23237,"title":"React 18 - Using SSR with bundle splitting is possible with `renderToString`","body":"I'm using Apollo Client with SSR, streaming is not an option for me, but bundle-splitting was always a pain point. I decided to investigate a bit. After a few hacks/adjustments, I'm having a fully working SSR site of React 18, Lazy components + Bundle splitting, and Apollo Client.\r\n\r\nDocs/publications are stating that it's not possible because during render it'll immediately return upon finding a Promise. This is what was called limited Suspense support. However, in my case, I only need Suspense for Lazy.\r\n\r\nI started to experiment with React 18 + Apollo's `getDataFromTree` (what I used before with 17 until now). I had to switch from `renderToStaticMarkup` to `renderToString` to preserve the special markers React is using during hydration. This wasn't a problem, Apollo supports passing a custom `renderFunction` which allowed me to replace.\r\n\r\nTesting this simple setup with lazy components led to some interesting results. SSR was working, but on each refresh always new parts started to appear in the markup. After a few refresh the app reached it's final state and it was always correct from that point. I suspected first that Node's cached modules are the reason, tried to require all lazy modules on server side to pre-cache them, it didn't work.\r\n\r\nThen I checked the source code of `renderToString` where I saw that lazy is actually caching the resolved values for later use.\r\n\r\nI simply patched the created lazy modules to make it look like it's initialized, and voila, my application became sync on server side, everything works.\r\n\r\n```\r\nmod._payload._status = 1\r\nmod._payload._result = require('pathToModule')\r\n```\r\n\r\nWith all this, I was wondering if there's room later to provide an API for this. It's not a big deal IMO, and it'd be incredibly helpful to all people relying on `renderToString`.\r\n\r\nFor example something like `lazy(() => import('./Search'), typeof global !== 'undefined')`, where the second params is `evalute`. I'd even make it evaluated by default on server side, because why not?! :)\r\n\r\n","state":"open","updated_at":"2022-02-07T05:05:07Z","created_at":"2022-02-06T22:55:59Z","creator_user_login":"wintercounter"}
{"number":23231,"title":"autoFocus polyfill deviates from HTML autofocus global attribute spec","body":"Based on this comment: https://github.com/facebook/react/issues/11851#issuecomment-351672131, it appears `autoFocus` is meant to bring a consistent behavior to match HTML's `autofocus`.\r\n\r\nhttps://html.spec.whatwg.org/multipage/interaction.html#the-autofocus-attribute\r\n\r\nThe above spec outlines that the first element with `autofocus` found in the DOM should be the one focused, and the others discarded (\"flush autofocus candidates\" steps 5.11.1 through 5.11.3).\r\n\r\nHowever, the behavior of React's `autoFocus` polyfill is to set focus to the _last_ element in the DOM with the attribute.\r\n\r\nIdeally React's implementation should match the spec, behavior-wise.","state":"open","updated_at":"2022-04-11T18:03:31Z","created_at":"2022-02-03T23:42:06Z","creator_user_login":"kate-hall"}
{"number":23230,"title":"[DevTools Bug]: Inconsistent enforcement of using hooks in callbacks","body":"### Website or app\n\nhttps://codesandbox.io/s/distracted-chihiro-u1mc2\n\n### Repro steps\n\nThe rules-for-hooks linter seems to be applying rules about using hooks in callbacks inconsistently.\r\n\r\nUsing a hook in this callback is okay\r\n`const useNamed = async () => useQuery();`\r\nAnd subsequently sending it as a prop is also okay\r\n`<Foo useData={useNamed} />`\r\n\r\nHowever, assigning the anonymous callback directly in the prop triggers the linter rule \"React hook cannot be called inside a callback\"\r\n`<Foo useData={async () => useQuery()} />`\r\n\r\nI'm having trouble understanding the difference. They appear to be equivalent code but with different results from the linter.\r\nIn which case is the linter correct?\r\n\r\nSandbox here: https://codesandbox.io/s/distracted-chihiro-u1mc2\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-10-27T16:38:14Z","created_at":"2022-02-03T03:56:20Z","creator_user_login":"eisenpony"}
{"number":23226,"title":"[DevTools Bug] Cannot add node \"1\" because a node with that id is already in the Store.","body":"### Repro steps\r\n\r\n  \r\n  \"react\": \"17.0.2\",\r\n  \"react-native\": \"0.66.3\",\r\n  \"react-devtools\": \"^4.22.0\",\r\n  \"@react-navigation/devtools\": \"^6.0.5\",\r\n  \"@react-navigation/bottom-tabs\": \"^6.1.0\",\r\n  \"@react-navigation/core\": \"^6.1.1\",\r\n  \"@react-navigation/elements\": \"^1.3.0\",\r\n  \"@react-navigation/native\": \"^6.0.7\",\r\n  \"@react-navigation/native-stack\": \"^6.3.0\",\r\n  \"@react-navigation/routers\": \"^6.1.0\",\r\n  \"@react-navigation/stack\": \"^6.1.0\",\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\nreact-devtools-core\r\n\r\n### DevTools version (automated)\r\n\r\n4.14.0-d0ec283819\r\n\r\n### Error message (automated)\r\n\r\nCannot add node \"1\" because a node with that id is already in the Store.\r\n\r\n### Error call stack (automated)\r\n\r\n```text\r\nat /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:140545\r\n    at c.emit (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:89515)\r\n    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:90986\r\n    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347787\r\n    at Array.forEach (<anonymous>)\r\n    at S.Gc.e.onmessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347771)\r\n    at S.n (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:3009)\r\n    at S.emit (events.js:315:20)\r\n    at e.exports.P (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:9318)\r\n    at e.exports.emit (events.js:315:20)\r\n    at e.exports.dataMessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:15409)\r\n    at e.exports.getData (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:14651)\r\n    at e.exports.startLoop (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:12066)\r\n    at e.exports._write (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:11421)\r\n    at doWrite (_stream_writable.js:403:12)\r\n    at writeOrBuffer (_stream_writable.js:387:5)\r\n```\r\n\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n```text\r\nhttps://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\r\n```\r\n","state":"open","updated_at":"2023-05-17T02:22:30Z","created_at":"2022-02-02T14:43:14Z","creator_user_login":"stanislavpoleshuk"}
{"number":23222,"title":"[DevTools Bug]: Debugging on separate device is not working, because devtools provide websocket address of localhost","body":"### Website or app\n\nhttps://github.com/fehergeri13/devtool-test\n\n### Repro steps\n\n## Steps to reproduce\r\n - On my laptop on my local network\r\n   - Create a react app with `npx create-react-app@latest` and start it with `npm start`\r\n   - Run the devtool with `npx react-devtools`\r\n   - Add the script the `<script src=\"http://192.168.1.149:8097\"></script>` to the `public/index.html`\r\n - On my tablet with the same local network\r\n   - Open the website on my tablet in safari  with the corresponding ip address: `192.168.1.149:3000`\r\n - On my laptop\r\n   - Devtool still not connected\r\n\r\n## Workaround:\r\n\r\nI copied the complete source of the `http://192.168.1.149:8097` into a js file, imported it in the header, and replaced the `localhost` on the last line of the file with the ip address of my laptop, and it was working.\r\n\r\n\r\n![proof1](https://user-images.githubusercontent.com/7180398/152001120-03f6ff56-84e3-4499-9053-31b74a976f64.png)\r\n![proof2](https://user-images.githubusercontent.com/7180398/152001128-011a0621-ab47-4288-b193-af109535a5df.png)\r\n\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-02-01T17:09:30Z","created_at":"2022-02-01T15:46:50Z","creator_user_login":"fehergeri13"}
{"number":23218,"title":"Add \"exports\" config to react-reconciler package.json","body":"## Summary\r\n \r\nImprove compatibility with Node ESM and tools that support it.\r\n","state":"open","updated_at":"2022-02-01T15:47:13Z","created_at":"2022-01-31T15:17:04Z","creator_user_login":"vovacodes"}
{"number":23214,"title":"Bug: Detached DOM nodes exist when component is unmounted","body":"I've written a simple React APP which contains 2 buttons, one is to increase the count number trigger the child component to create a table element with some random numbers, another is to toggle mount/unmount status of the child component.\r\n\r\nI found that just a simply mount the component then unmount it which leaves detached DOM nodes in memory profiling.\r\nFollowing below steps:\r\n1. Click regen button \r\n2. Click toggle button\r\n\r\n![image](https://user-images.githubusercontent.com/89285155/151694862-653e0ff2-9b47-43aa-aa9e-004eedb40d68.png)\r\n\r\nbut if I mount and unmount the component again by adding 3, 4 steps below:\r\n1. Click regen button\r\n2. Click toggle button\r\n3. Click toggle button\r\n4. Click toggle button\r\n\r\nIn such orders, those detached DOM nodes will be cleaned. Is there any reason why those detached DOM nodes are not clear for the first time but distinguished by the second time the component is unmounted?\r\n![image](https://user-images.githubusercontent.com/89285155/151799932-1f63b8a8-ab7c-41cf-b703-358787e2870e.png)\r\n\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click regen button \r\n2. Click toggle button\r\n\r\nLink to code example:\r\nhttps://v6dhm.csb.app/\r\n\r\ncode attached:\r\n```\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\n\r\nconst App = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [display, setDisplay] = useState(true);\r\n\r\n  const regen = useCallback(() => {\r\n    setCount((e) => ++e);\r\n  }, []);\r\n  const toggle = useCallback(() => {\r\n    setDisplay((e) => !e);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={regen}>regen</button>\r\n      <button onClick={toggle}>toggle</button>\r\n      {display && <FTable count={count}></FTable>}\r\n    </div>\r\n  );\r\n};\r\nconst Cell = () => {\r\n  const num = Math.floor(Math.random() * 100);\r\n  return <td>{num}</td>;\r\n};\r\n\r\nconst FTable = (props) => {\r\n  const { count } = props;\r\n  const rows = useMemo(() => {\r\n    const r = [];\r\n    if (count == 0) {\r\n      return r;\r\n    }\r\n    for (let i = 0; i < 1000; i++) {\r\n      r.push(\r\n        <tr key={`${i}-${count}`}>\r\n          <Cell></Cell>\r\n          <Cell></Cell>\r\n          <Cell></Cell>\r\n        </tr>\r\n      );\r\n    }\r\n    return r;\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n## The current behavior\r\nDetached HTMLTable* are found in the devTool memory timeline\r\n\r\n## The expected behavior\r\nNo Detached DOMs are found in the devTool memory timeline","state":"open","updated_at":"2022-12-02T12:47:51Z","created_at":"2022-01-30T09:55:46Z","creator_user_login":"snakepoongmail"}
{"number":23208,"title":"Reduce repetition between Timeline in-memory profiler and Chrome Event Trace parser","body":"Reduce repetition between Timeline in-memory profiler and Chrome Event Trace parser.\r\n\r\nBroken into separate commits:\r\n- [x] Moved the in-memory stack management out of 'profilingHooks.js' and into the new 'TimelineData.js'.\r\n- [ ] Update 'preprocessData.js' to also use the new 'TimelineData.js' when parsing Trace Event data.\r\n\r\nBuilds on top of #23185.\r\n\r\nRelated to #22529.","state":"open","updated_at":"2022-04-05T01:03:17Z","created_at":"2022-01-28T21:39:26Z","creator_user_login":"bvaughn"}
{"number":23206,"title":"Optimize ReactLazyHook warning block","body":"Reduces the number of variables read and simplifies a judgment in DEV.","state":"open","updated_at":"2022-02-10T09:53:34Z","created_at":"2022-01-28T10:05:20Z","creator_user_login":"kstd123"}
{"number":23202,"title":"[DevTools Bug] Cannot remove node \"612\" because no matching node was found in the Store.","body":"### Website or app\n\nproprietary\n\n### Repro steps\n\nOverall, testing and refactoring of a component containing a formik wrapped form which includes a fieldarray with yup schema.\r\nUsing VS Code to serve the  React js application.\r\n\r\nUnable to share the repo / website as it is proprietary.\r\n\r\nTask: Logged in to the app to see the form as the specific user role required to see the component, testing yup schema on formik elements touched property to do some custom error connections in the containing component with React Developer Tools open to the Components view with the console also open.  \r\n\r\nI was verifying the elements described in the schema file were getting 'touched' and was refining a select in yup schema js file.\r\n\r\nSwitched one element's schema property from yup.object() to yup.int() triggers the error.  This is a syntax error.  Should be yup.number().  But switching the two causes it all to crash.\r\n\r\n \"formik\": \"^2.2.6\",\r\n  \"prop-types\": \"^15.7.2\",\r\n  \"react\": \"^17.0.2\",\r\n  \"react-router-dom\": \"4.3.1\",\r\n  \"react-select\": \"^4.3.0\",\r\n  \"yup\": \"^0.26.10\"\r\n  \"yarn\": \"^1.13.0\",\r\n\r\n  \"babel-eslint\": \"^10.1.0\",\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.23.0-e28a0db22\n\n### Error message (automated)\n\nCannot remove node \"612\" because no matching node was found in the Store.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26349:43\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24415:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24581:14\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54033:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2022-10-13T11:15:23Z","created_at":"2022-01-27T21:13:43Z","creator_user_login":"steve-snow"}
{"number":23201,"title":"Profiler should support importing profiles without React being connected","body":"A user has reported frustrations with being unable to import a profile/trace into React DevTools when no app was connected. (This applies to both the browser extension (React DOM) and standalone DevTools (React Native).\r\n\r\nWhile the UX for this ask is clear enough, we should consider the following:\r\n* Browser extension: Is it confusing to change React DevTools to show for non-React websites?\r\n* Standalone: Where will we show the connection instructions if we show the DevTools UI? (The splash UI is usually a page of instructions on how to connect.)\r\n* Does anything else break when the UI is shown without at least one connected renderer?","state":"open","updated_at":"2022-01-27T20:42:12Z","created_at":"2022-01-27T20:42:12Z","creator_user_login":"bvaughn"}
{"number":23186,"title":"The ultimate solution for server side render, a simple function...","body":"Please allow for a beforeServerRender function that is async and returns a promise that only executes in the server context and only exists on instance types.\r\n\r\nThis literally solves any issue regarding Server Side Render and it's extremely simple, why, because it allows you to set the initial state asynchronously, meaning you can fetch the resources you need and set them in the state, allowing for dynamic trees.\r\n\r\nOn the client side you often get these async resources later and modify the tree, but that's bad for SSR, and when you get these resources you can setup an accumulator and they will be available on the client side, the result is flawless SSR.\r\n\r\nI made a working version of react dom 16 with this modification a year ago and the changes were minimal, I've been using in production successfully, I cannot get them to work on react-dom 17 as for some reason it fails to ship my modifications; but the SSR has worked flawlessly and I dare to say it's a way better solution than suspense, and it can be extended by 3rd parties.\r\n\r\nAnd the SSR can be activated or deactivated, so if it fails, the default can be served, and not hydrated, it's extremely flexible.\r\n\r\nhttps://www.npmjs.com/package/@onzag/react-dom/v/16.14.0-custom.0\r\n\r\nThis doesn't work exactly as in the modification I did, because I used contexts to pass the accumulator, but this is my proposal in an example scenario.\r\n\r\n```javascript\r\nclass FetchText extends React.Component {\r\n  constructor(props) {\r\n     super(props)\r\n     this.state = {\r\n        data: typeof window !== \"undefined\" && window.SSR ? window.SSR[props.url] : null\r\n     }\r\n  }\r\n  async componentDidMount() {\r\n    if (!this.state.data) {\r\n      this.setState({\r\n         data: await (await fetch(props.url)).text();\r\n      })\r\n    }\r\n  }\r\n  async beforeServerRender(serverDataAccumulator) {\r\n    const data = serverDataAccumulator[props.url] || await getDataFromDatabase(props.url);\r\n    serverDataAccumulator[props.url] = data;\r\n    this.state = {\r\n      data,\r\n    }\r\n  }\r\n  render() {\r\n    return this.state.data;\r\n  }\r\n}\r\n```\r\n\r\n```javascript\r\nconst accumulator = {};\r\ntry {\r\n  const html = await ReactDOM.renderToStaticMarkup(app, accumulator);\r\n  res.send(`<html><body><div id=\"app\">${html}</div><script>window.SSR = ${JSON.stringify(accumulator)}</script></body></html>`);\r\n} catch {\r\n  // no window.SSR, no hydrate possible, handle client side\r\n  res.send(`<html><body><div  id=\"app\"></div></html>`);\r\n}\r\n```\r\n\r\nThis doesn't even have to be part of the standard spec, because it can be excluded into a function, the components will still be fully compatible but have special SSR functionality when rendered into a specific mode; this means it is fully backwards compatible.\r\n\r\nI have been using this in production, using the context procedure, and it works flawessly; I can SSR everything under the sun.\r\n\r\nWith this procedure you may also accumulate things for JSS, fonts, even usage specific, literally anything can be SSRd; this is excellent for SEO, and it's backwards compatible with everything in react right now.\r\n","state":"open","updated_at":"2022-04-29T14:25:34Z","created_at":"2022-01-26T15:15:50Z","creator_user_login":"onzag"}
{"number":23182,"title":"Bug: \"Rendered more hooks than during the previous render\" does not get thrown when transitioning from 0 to positive number of hooks","body":"I think this could be classified as a bug, but curious to get the developers' thoughts on this. Basically, the `Rendered more hooks than during the previous render` error does not seem to get thrown when the transition is from 0 hooks to a positive number of hooks.\r\n\r\nThe error does get thrown when, for example, a component goes from rendering 1 hook to 2 hooks.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Write a component that renders 0 hooks on its first render, and 2 hooks on all subsequent renders.\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/sweet-cookies-q86vh?file=/src/App.js\r\n\r\n## The current behavior\r\nNo error gets thrown.\r\n\r\n## The expected behavior\r\nAn error should get thrown: `Rendered more hooks than during the previous render`","state":"open","updated_at":"2022-01-25T22:09:22Z","created_at":"2022-01-25T22:09:22Z","creator_user_login":"echentw"}
{"number":23175,"title":"DevTools: React Native / React VR improvements","body":"- [ ] Timeline profiler: Support React Native / VR (builds on top of #22529)\r\n  - [ ] Enable Timeline profiler for standalone (RN/VR) builds.\r\n  - [ ] Log Hermes Trace Event data as part of Timeline profile for added context (e.g. JavaScript samples, system events, network requests).\r\n- [ ] Work with @feedthejim to improve user settings persistence (between sessions) for RN/VR\r\n- [ ] Work with Arushi and/or @feedthejim to add memory profiling to Timeline.","state":"open","updated_at":"2022-01-25T15:41:51Z","created_at":"2022-01-24T16:37:52Z","creator_user_login":"bvaughn"}
{"number":23174,"title":"Bug: Error: Should have a queue. This is likely a bug in React. Please file an issue.","body":"Hello,\r\n\r\nI am getting an error (tried also with the latest version 17.0.2)\r\n\r\nError: Should have a queue. This is likely a bug in React. Please file an issue.\r\n\r\n![image](https://user-images.githubusercontent.com/25663804/150809662-5fb84ac0-ae95-46d4-8f9a-5eefccf67cd2.png)\r\n\r\n","state":"open","updated_at":"2022-01-25T14:17:27Z","created_at":"2022-01-24T15:26:49Z","creator_user_login":"marya7"}
{"number":23167,"title":"styles: replace Object.prototype.hasOwnProperty with module hasOwnProperty","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nWe use `hasOwnProperty` as a module instead of `Object.prototype.hasOwnProperty`, I found some `Object.prototype.hasOwnProperty` and replaced\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nyarn test\r\n\r\n@bvaughn \r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-01-25T15:26:13Z","created_at":"2022-01-22T16:42:55Z","creator_user_login":"JX-Zhuang"}
{"number":23165,"title":"Bug: `onBlur` called in wrong order if another element receives focus","body":"React version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. With the input focused, press <kbd>TAB</kbd> to focus the button\r\n2. Press <kbd>Shift</kbd> + <kbd>TAB</kbd> to go back to the input\r\n3. Observe the console\r\n\r\nLink to code example: https://codesandbox.io/s/hardcore-pine-u4qn2?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nWhen the button is blurred, the value of `childRef` is null inside the `onBlur` callback. From my investigation, I noticed that `onBlur` is being called after unmount (causing the ref to be null). If `inputRef.current.focus()` is commented it gets called before unmount, not causing the bug. Also, forwarding the ref to an DOM element instead of `React.useImperativeHandle` doesn't cause the bug.\r\n\r\n## The expected behavior\r\n\r\n`onBlur` should be called before unmount while the ref still has a value.\r\n\r\nFor more context: https://github.com/mui-org/material-ui/issues/30285","state":"open","updated_at":"2022-03-10T14:20:00Z","created_at":"2022-01-22T02:10:59Z","creator_user_login":"m4theushw"}
{"number":23144,"title":"Prepare internal code sync","body":"Using this PR to kick off build pipeline in CI","state":"open","updated_at":"2022-12-06T00:40:26Z","created_at":"2022-01-19T19:33:29Z","creator_user_login":"acdlite"}
{"number":23135,"title":"Scripts: Code refractor For function `parseRequestedNames`","body":"This change is just a little code refractor I tried , this surely makes the code more easy to read , and we have few variables than earlier","state":"open","updated_at":"2022-03-16T16:30:16Z","created_at":"2022-01-18T13:40:21Z","creator_user_login":"Biki-das"}
{"number":23134,"title":"Fix:Fixed css Label","body":"``` label label {\r\n  display: 'inline-block';\r\n  margin-left: 20px;\r\n}\r\n```\r\n\r\nthe display property should be :-  ``` display:inline-block```","state":"open","updated_at":"2022-01-29T17:16:54Z","created_at":"2022-01-18T13:29:39Z","creator_user_login":"Biki-das"}
{"number":23131,"title":"Bug: input type month and VoiceOver","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n`<input type=\"month\" />` does not work correctly with iOS VoiceOver enabled.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://3j4l9.csb.app/\r\n2. Activate VoiceOver\r\n3. Double click in the label\r\n\r\n## The current behavior\r\n- CodeSandbox: https://codesandbox.io/s/react-month-input-bug-3j4l9?file=/public/index.html:0-357\r\n- Image:\r\n<img width=\"414\" alt=\"React App\" src=\"https://user-images.githubusercontent.com/37726261/149831927-fbc783b0-77e9-4601-b143-e09834ca8727.png\">\r\n\r\n## The expected behavior\r\n- CodeSandbox: https://codesandbox.io/s/react-month-input-bug-vanilla-dcg6d?file=/index.html\r\n- Image:\r\n<img width=\"414\" alt=\"Vanilla App\" src=\"https://user-images.githubusercontent.com/37726261/149831910-ecea3120-9083-4ba1-91f0-878dbd2ffb61.png\">","state":"open","updated_at":"2022-01-17T20:21:14Z","created_at":"2022-01-17T20:21:14Z","creator_user_login":"wtchnm"}
{"number":23130,"title":"[DevTools Bug]: Incorrect source location after hot reload & editing props","body":"### Website or app\n\nhttps://gist.github.com/kiootic/54986cd163b52cbbcd5d8283eb5ed06f\n\n### Repro steps\n\n1. Create a new react app using `create-react-app`\r\n2. Replace the code in `App.js` with `App.jsx` in the gist\r\n3. Start the app and inspect the 3 `p` elements using dev tool\r\n4. Should observe correct line numbers (`App.js:4`, `App.js:5`, `App.js:6`)\r\n5. In code editor, change the first `p` element to be multiline, like `App-update.jsx` in gist\r\n6. After hot reload, should observe updated line numbers (`App.js:4`, `App.js:7`, `App.js:8`)\r\n7. Using dev tool, change the first `p` element's `children` prop to be something else.\r\n8. Should observe incorrect line numbers (reverted to `App.js:4`, `App.js:5`, `App.js:6`)\r\n9. Repeat step 7 again, and should observe correct line numbers again.\r\n10. The line numbers are observed to be alternating between correct & incorrect state when repeating the edit step.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-01-17T16:15:21Z","created_at":"2022-01-17T16:15:21Z","creator_user_login":"kiootic"}
{"number":23120,"title":"Bug: controlled input range does not receive all onChange events ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17 or 18\r\n\r\n## Steps To Reproduce\r\nGrab the input range slider knob.  Move it around.\r\nWhile the knob itself does not move, as it is a controlled component with a value is permanently set to `0`, note that an `event.target.value` from `onChange` cannot reach the `min` lower bound.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/dazzling-bas-0cy26?file=/src/index.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nSlide the knob to the left and never get `event.target.value` at the min value.  Slide to the right, and you do get `event.target.value` at the max value.\r\n\r\nNote that a stream of `onChange` events continue when you slide to the right (shown as changing colors in the demonstration), but not when you slide to the left.\r\n\r\n\r\n## The expected behavior\r\nYou should be able to get an accurate `event.target.value` from events when sliding left or right, even if not updating the value.\r\n","state":"open","updated_at":"2022-04-06T21:18:48Z","created_at":"2022-01-16T02:01:15Z","creator_user_login":"jedierikb"}
{"number":23104,"title":"Bug: Chrome Autofill Hover removes Parent Hover","body":"Autofill on chrome removes hover from parent element causing unexpected animations\r\n\r\nhttps://stackoverflow.com/questions/70661331/chrome-autofill-hover-removes-parent\r\n\r\nReact version: 0.1.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone https://github.com/bjhobson12/ChromeHoverReplicate/tree/main/public\r\n2. npm start\r\n3. Hover over inputs and move to autofill, the result is an issue\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/bjhobson12/ChromeHoverReplicate/tree/main/public\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe sidebar collapses\r\n\r\n## The expected behavior\r\nThe sidebar remains open and autofill items are selectable using the cursor\r\n\r\nNot a chrome issue. [Disputed here](https://bugs.chromium.org/p/chromium/issues/detail?id=1286296).\r\n","state":"open","updated_at":"2022-01-13T01:24:35Z","created_at":"2022-01-13T01:22:39Z","creator_user_login":"bjhobson12"}
{"number":23100,"title":"[DevTools Bug]: Devtools script served over insecure connection causing issues with local https server.","body":"### Website or app\n\nhttps://github.com/malewis5/payment-sandbox\n\n### Repro steps\n\nHi React Team,\r\nI am trying to use the devtools to debug in Safari. I'm working with Apple Pay so I'm using ngrok to create a secure tunnel. When I visit the ngrok domain Safari throws a warning stating: \r\n```[blocked] The page at https://revcommerce.ngrok.io/ was not allowed to run insecure content from http://192.168.132.58:8097/.```\r\n\r\nRepro steps: \r\n1. Clone and install dependencies.\r\n2. Run using ngrok or other method for https.\r\n3. Visit the page using **Safari**.\r\n4. Inspect the page and you'll see the warning.\r\n\r\nThank you guys.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2023-01-14T12:54:12Z","created_at":"2022-01-12T17:44:05Z","creator_user_login":"malewis5"}
{"number":23098,"title":"React-refresh in the browser","body":"Hello, \r\n\r\napologies for creating a blank issue. I have a very specific question regarding `react-refresh`.\r\nI've posted the question on [StackOverflow](https://stackoverflow.com/questions/70664557/implement-react-refresh-in-new-development-server), but have the feeling the limited number of people that can help me might be over here.\r\n\r\nAs an experiment, I'd like to refresh a component on command (by a button press for example) and see how to drive react-refresh to indeed update a mounted component.\r\nI'm not using Node.Js and I'd like to use a CDN for all packages.\r\n\r\nIn essence, I have an `index.html` page where I mount a simple component.\r\n```js\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n</head>\r\n<body>\r\n    <button>refresh</button>\r\n    <div id=\"root\"></div>\r\n    <script>window.process = { env:{NODE_ENV:\"dev\"}};</script>\r\n    <script type=\"module\">\r\n        import runtime from 'https://cdn.skypack.dev/react-refresh/cjs/react-refresh-runtime.development.js';\r\n        console.log(runtime);\r\n\r\n        import './index.js';\r\n\r\n        window.onload = () => {\r\n            const button = document.querySelector(\"button\");\r\n            button.onclick = () => {\r\n                    runtime.performReactRefresh();\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\nindex.js:\r\n```js\r\nimport App from './app.js';\r\n\r\nReactDOM.render(\r\n    React.createElement(App, {}, null),\r\n    document.getElementById('root')\r\n  );\r\n```\r\n\r\napp.js\r\n```js\r\nimport React from 'https://cdn.skypack.dev/react';\r\n\r\nfunction App() {\r\n    return React.createElement('div', null, `App component`);\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nSo imagine, at some point, the page is loaded, the component is mounted and I change the `app.js` file.\r\nI click the button and hope to refresh the component.\r\n\r\nI'm obviously missing a lot of steps from @gaearon's [original guide](https://github.com/facebook/react/issues/16604#issuecomment-528663101).\r\nBut I'm unsure what needs to happen when a module is initially loaded and how to reload and tell React it has been reloaded.\r\n\r\nAny pointers would be much appreciated.\r\n\r\nThanks,\r\n\r\nFlorian","state":"open","updated_at":"2022-01-12T07:35:55Z","created_at":"2022-01-12T07:35:55Z","creator_user_login":"nojaf"}
{"number":23094,"title":"Bug: `onCut` is not triggered in contenteditable for collapsed selection in Firefox","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.x, 18.x\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the react 17/18 codesandbox in firefox\r\n2. Click on the text and keep selection collapsed\r\n3. Press `ctrl-x`\r\n4. No `onCut` event is fired (no window.alert shows)\r\n5. Compare with react 16 codesandbox where it does work\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n* Works in react 16: https://codesandbox.io/s/contenteditable-cut-react-16-hnbsd?file=/src/index.js\r\n* Does not work in react 17: https://codesandbox.io/s/contenteditable-cut-react-17-8qgtt?file=/src/App.js:310-398\r\n* Does not work in react 18: https://codesandbox.io/s/contenteditable-cut-react-18-4yq8f?file=/src/App.tsx\r\n\r\n## The current behavior\r\nonCut is not triggered in firefox\r\n\r\nNote this does work in chrome, or firefox with react 16\r\n\r\n## The expected behavior\r\nonCut is triggered in firefox\r\n\r\n","state":"open","updated_at":"2022-01-21T09:53:24Z","created_at":"2022-01-11T17:01:06Z","creator_user_login":"bryanph"}
{"number":23090,"title":"React 18: useEffect different behaviour compare to v17 in specific cases","body":"<!--\r\n  Ask a question or share feedback about the React 18 release here.\r\n-->\r\nHi!\r\nIn [this](https://github.com/tannerlinsley/react-query/issues/2628) issue to react-query repo we found some strange useEffect behaviour.\r\n\r\nHere's examples:\r\n[react 17](https://codesandbox.io/s/react-or-react-query-bug-version-2-forked-fnebv?file=/src/example.js)\r\n[react 18 with old root api](https://codesandbox.io/s/react-bug-version-3-x8fs6?file=/src/example.js)\r\n\r\nJust click \"rerender\" button and see that there's no effect firing.\r\n\r\nBut in react 18 with the new root API it works fine:\r\n[codesandbox](https://codesandbox.io/s/react-bug-version-3-forked-8mxy2?file=/src/example.js)\r\n\r\nI tried to explain it like that:\r\n> So, in our case we have `dummy` and `forceRerender` state variables.\r\nAfter calling `rerender` function, `dummy` updates with the same value, and React bails out without rendering the children or firing effects. I suppose that somewhere here the effect should've been scheduled, but it didn't because of that react behaviour.\r\nBUT, the render function was actually called and useEffect received updated `value` in deps (you can see this by checking how many times console.log was called in render).\r\nAnd then on the next tick `forceRerender` causes another update, but this time it doesn't schedule the effect because it has the same deps (`value`) that were captured in the previous render function call.\r\n\r\nSo, is this right explanation for what is going on there?\r\nAnd I guess, the main question, why does this example work fine when the new root api is used?\r\nDoes it mean that with the new root api (and with concurrent mode) useEffect compare deps only with those from the last previous render that was committed to the DOM?\r\n\r\nThanks!","state":"open","updated_at":"2022-10-24T19:24:59Z","created_at":"2022-01-11T00:36:58Z","creator_user_login":"dmitryKochergin"}
{"number":23088,"title":"Bug: Cannot reproduce builds on npm","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI am attempting to audit several React libraries from source, but I'm unable to reproduce the builds that are published on npm.\r\n\r\nReact version: 17.0.1?\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone Git repository\r\n2. Check out `v17.0.1` Git tag\r\n3. Install dependencies (`yarn`)\r\n4. Run `yarn build react/index,react-devtools-core,react-is,react-refresh,react-test-renderer,scheduler`\r\n    - (Build command stripped down to reduce auditing surface)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: N/A\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe `package.json` in the `react` subpackage specifies `17.0.0` as the version rather than the expected `17.0.1`. Build products do not match those in the `17.0.1` npm package, *nor* those in the `17.0.0` npm package. Considering the seemingly inconsistent Git tagging, I suspect other versions may also be affected.\r\n\r\n## The expected behavior\r\n\r\nThe builds produced should be byte-identical to those on npm, such that auditing from source becomes possible. Currently, there does not seem to be a (documented) way to achieve this.","state":"open","updated_at":"2022-01-11T04:02:16Z","created_at":"2022-01-10T17:23:15Z","creator_user_login":"joepie91"}
{"number":23068,"title":"React 18 - Avoiding hydration errors, but initialize client-only state directly if possible","body":"This question is about hydration errors and workarounds that are future-proof for React 18 partial hydration and concurrent mode.\r\n\r\nReact hydration rules say that the server rendered html needs to match the client rendered dom that is rendered during the initial render in `hydrate()`. Mismatches (=slight differences in dom output) can cause all kinds of weird behavior because React's virtual dom does not match the real dom. Such mismatches can happen when rendering based on information that is only available on the client side, but not on the server side, e.g. conditional rendering based on `typeof window !== 'undefined'`, or rendering based on data from `localStorage`.\r\n\r\nSo this component will cause a hydration error if it is contained in the initial sever-rendered html (case 1), but it would not cause a hydration error if it only appeared later after hydration (case 2):\r\n\r\n```\r\nconst MyComponent1 = () => {\r\n    const [viewState, setViewState] = useState(() => getViewStateFromLocalStorage())\r\n    return <button onClick={() => setViewState(oldViewState => toggledViewState(oldViewState))>{viewState}</button>\r\n}\r\n```\r\n\r\nA common workaround is to use `useEffect` to apply client data only after hydration:\r\n\r\n```\r\nconst MyComponent2 = () => {\r\n    const [viewState, setViewState] = useState('A')\r\n\r\n    useEffect(()=>{\r\n        setViewState(getViewStateFromLocalStorage())\r\n    },[])\r\n\r\n    return <button onClick={() => setViewState(oldViewState => toggledViewState(oldViewState))>{viewState}</button>\r\n}\r\n```\r\n\r\nThis workaround comes with a downside: for case 2 where the component only appears later after hydration, it would still flash from showing `\"A\"` first, and then the view state from `localStorage`. To make the component directly show the view state from `localStorage`, the code in `MyComponent1` would need to be used, but then the component can not be used in initial server renderings. So the component itself needs knowledge in which contexts it will be used, which is not ideal for modularity.\r\n\r\nI currently know of no way to make the component work for both case 1 and case 2 and show the view state from `localStorage` directly in the initial render for case 2 without giving the component knowledge of its outer context.\r\n\r\nI see 2 different theoretical approaches to solve this issue which are not yet possible in React AFAIK:\r\n\r\n1. Signal to React that the component could cause hydration errors to make it compare the dom exactly and fix it accordingly:\r\n\r\n```\r\nconst MyComponent: FunctionComponent = () => {\r\n    const [viewState, setViewState] = useState(() => getViewStateFromLocalStorage())\r\n    return <button onClick={() => setViewState(oldViewState => toggledViewState(oldViewState))>{viewState}</button>\r\n}\r\n\r\nMyComponent.gracefulHydrationErrors = true\r\n```\r\n\r\n2. Get the info from React if the current render of the component is currently rendering as part of the initial render during `hydrate()`:\r\n\r\n```\r\nconst MyComponent = () => {\r\n    const isHydrating = useIsHydrating()\r\n    const [viewState, setViewState] = useState(() => isHydrating ? 'A' : getViewStateFromLocalStorage())\r\n\r\n    useEffect(()=>{\r\n        setViewState(getViewStateFromLocalStorage())\r\n    },[])\r\n\r\n    return <button onClick={() => setViewState(oldViewState => toggledViewState(oldViewState))>{viewState}</button>\r\n}\r\n```\r\n\r\nIs there already a way to solve this issue properly with available apis? The solution also needs to work with React 18 partial hydration and concurrent mode.\r\n","state":"open","updated_at":"2022-07-07T15:42:34Z","created_at":"2022-01-05T10:37:26Z","creator_user_login":"fabb"}
{"number":23065,"title":"I install react-devtools and use npx react-devtools to start it but failed. show as below","body":"\r\n![image](https://user-images.githubusercontent.com/22771321/148150071-9e0b07cf-f80c-4037-87bc-f82264375c68.png)\r\n\r\n","state":"open","updated_at":"2022-01-07T18:58:01Z","created_at":"2022-01-05T02:16:48Z","creator_user_login":"heimiguoguo"}
{"number":23057,"title":"Update SchedulerMinHeap","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nUpdate SchedulerMinHeap.Rewrite siftUp and siftDown.\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\nyarn test \r\nyarn test scheduler","state":"open","updated_at":"2022-02-05T14:29:23Z","created_at":"2022-01-02T18:02:01Z","creator_user_login":"JX-Zhuang"}
{"number":23052,"title":"[DevTools Bug]: React Dev Tools fails to render props and state of component.","body":"### Website or app\n\nhttps://elisavidera.com/\n\n### Repro steps\n\n1. Goto https://elisavidera.com/\r\n2. Start inspecting component\r\n3. Issue happens on some components not all [https://static.elisa.com/v2/image/2tqybbhjs47b/3OvazhdGhnIeotXQqSB9ZK/Screenshot from 2021-12-31 13-28-10.png?w=800](url)\r\n4. Also in browser console this gets reported\r\n5. react_devtools_backend.js:12847 Uncaught DOMException: Blocked a frame with origin \"https://elisavidera.com\" from accessing a cross-origin frame.\r\n    at exports.isElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:12847:51)\r\n    at getDataType (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:1051:65)\r\n    at dehydrate (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:3487:82)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:3639:26\r\n    at Set.forEach (<anonymous>)\r\n    at dehydrate (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:3637:91)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:3639:26\r\n    at Set.forEach (<anonymous>)\r\n    at dehydrate (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:3637:91)\r\n    at cleanForBridge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:1506:93)\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2021-12-31T11:30:47Z","created_at":"2021-12-31T11:30:47Z","creator_user_login":"john007abhilash"}
{"number":23046,"title":"Bug: textarea: set maxLength & controled value, when input Chinese an blur, do not trigger event change","body":"textarea: set maxLength & controled value,  when input Chinese an blur, do not trigger  event `change`\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\n```\r\nimport React, { Fragment, useCallback, useState } from 'react';\r\n\r\nexport default function Demo(): JSX.Element {\r\n  const [value, setValue] = useState('12');\r\n  const handleChange = useCallback((v: string) => setValue(v), []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <textarea \r\n        maxLength={4}\r\n        value={value}\r\n        onChange={(event) => {\r\n          console.log('onChange', event.target.value);\r\n          handleChange(event.target.value);\r\n        }}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nhttps://user-images.githubusercontent.com/21987324/147717923-e35ba7c1-534e-49dd-9af2-9c104dc36cfb.mov\r\n\r\n\r\n## The expected behavior\r\nsame with component input\r\n\r\nhttps://user-images.githubusercontent.com/21987324/147718101-e7cdad67-ccb7-49b0-a5bf-6953460c295b.mov\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2023-07-28T16:50:34Z","created_at":"2021-12-30T02:59:30Z","creator_user_login":"doubleTotoo"}
{"number":23045,"title":"React 18 Suspense unable to track when a promise completes causing SWR failure","body":"When working with [SWR](https://swr.vercel.app/)  with `React 17`, you could pass to `useSwr` on `onSuccess` parameter which would assign a completion function so that when an async call finished, you could take some action (for example, when not using Relay, you can trigger another component to begin loading data based on the returned data from `useSwr`.\r\n\r\nAfter [this lengthy issue](https://github.com/vercel/swr/issues/1733) with @promer94, one of the devs on SWR, we found an ugly workaround with `useEffect` and some negative logic, but it is not satisfactory and will always be hard to reason about as well as do so similar things without introducing bugs. To quote @promer94, `i think we need more time to understand concurrent mode before we change current api design`.  This feels to me like either we don't understand how Suspense works, or there is a serious usability issue if not using Relay.\r\n\r\nIt's summarized best here:  https://github.com/vercel/swr/issues/1733#issuecomment-1001391484 .  Assuming this is correct, there is no determinant way to know when components suspense promise completes, and no way to act on that which would be required in multi-component scenarios.\r\n\r\nThe issue mentioned above https://github.com/vercel/swr/issues/1733 explains in more detail the problem, and the example code that demonstrates it by having to do the ugly workaround for not having `onSuccess` is in this repo:  https://github.com/pkellner/pluralsight-react-18-suspense-swr-problem/blob/master/src/components/CityListItems.js\r\n\r\nIf you want to see the program working you can view it on this link. Notice that after the city list loads, the first city becomes selected.  That was trivial using React 17 with SWR and really hard with React 18 and Suspense enabled.\r\n\r\nhttps://pluralsight-react-18-first-look.peterkellner.net/#\r\n\r\nThe source for the app with Suspense is here:  https://github.com/pkellner/airquality\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-10-15T23:39:06Z","created_at":"2021-12-29T23:48:09Z","creator_user_login":"pkellner"}
{"number":23043,"title":"Bug: customElement can't setAttrubute width Object  ","body":"I get something wrong with customElement properties  and slot ;\r\n\r\nReact version: experimental\r\n\r\n Steps To Reproduce\r\n\r\n1.create a customElement width Object properties  ;\r\n\r\n2.assign an object to a property, customElement property receives as '[object,object]'.  \r\n\r\n3.customElement use slot , React  will render the child of customElement as its own, and slot will be re-rendered within the children element.  \r\n\r\nLink to code example: [https://jsfiddle.net/a707843858/f52s16uh/31/](https://jsfiddle.net/a707843858/f52s16uh/31/)\r\n\r\n\r\n## The current behavior\r\n\r\n1.setAttribute passes a value of the same type\r\n\r\n2.When React renders customElement. Pass children to it as an attribute and hand him the controller without rendering it's children.\r\n\r\n## The expected behavior\r\n\r\n","state":"open","updated_at":"2023-07-28T16:50:55Z","created_at":"2021-12-29T08:06:10Z","creator_user_login":"a707843858"}
{"number":23034,"title":"React Fiber for the profiler dev tool","body":"<!--\r\nI'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!\r\n-->\r\nI'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!\r\n","state":"open","updated_at":"2022-04-29T17:31:30Z","created_at":"2021-12-27T19:45:48Z","creator_user_login":"heojay0309"}
{"number":23033,"title":"style whichi has '-webkit-line-clamp' attribute is filtered in react?","body":"That's not reasonable!\r\n\r\nProblem:\r\n\r\n```-webKit-line-clamp``` is written as ```webkitlineclamp```, so it is filtered by react， but if ```-webKit-line-clamp``` is written as ```WebkitLilineClamp```, it will not be filtered·\r\n\r\nHere are some examples where - WebKit - does not filter the lowercase initial in react：\r\n```-webkit-box-orient:vertical;```\r\n\r\nSugestion:\r\n\r\nThere is something wrong with this file ```packages/react-dom/shared/CSSProperty```. You should add a prefix with WebKit lowercase\r\n\r\n![image](https://user-images.githubusercontent.com/15086407/141983265-5ce4b47e-5f45-467d-8059-838a1d8633a6.png)\r\n","state":"open","updated_at":"2022-01-08T12:10:43Z","created_at":"2021-12-27T08:00:47Z","creator_user_login":"codedaybyday"}
{"number":23023,"title":"Fix:Added missing await and deleted unnecessary `continue`","body":"we have used an `async function` but the `await` was missing , also `continue` at the end of the loop was uneccessary ","state":"open","updated_at":"2022-01-10T18:02:30Z","created_at":"2021-12-24T06:12:44Z","creator_user_login":"Biki-das"}
{"number":23016,"title":"feat: generate flow config for specific renderer instead of generating all configs","body":"\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nGenerate flow config for specific renderer instead of generating all configs while running `yarn flow` for the given renderer.\r\nSee https://github.com/facebook/react/issues/22941\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nNo test suites/tests are added for this change.\r\n_**Before:**_\r\n![image](https://user-images.githubusercontent.com/1722495/147063864-88ec2f4b-1e5d-4479-8bbb-5afba9bbfd96.png)\r\n\r\n**_After:_**\r\n![image](https://user-images.githubusercontent.com/1722495/147063803-632ab1ab-ea23-4294-906b-10b5baf8e7d2.png)\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-12-22T08:59:38Z","created_at":"2021-12-22T08:49:36Z","creator_user_login":"hyaocuk"}
{"number":23015,"title":"In Strict Mode, function component and class component are inconsistent with scenes that produce side effects","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nimport React from 'react';\r\n\r\nconst TestFunc = () => {\r\n  debugger\r\n  const myRef = React.useRef(true)\r\n  if (myRef.current) {\r\n    myRef.current = false\r\n  }\r\n\r\n  return <div>666</div>\r\n}\r\n\r\nclass TestClass extends React.Component {\r\n  myRef = React.createRef()\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef.current = true\r\n  }\r\n\r\n  render() {\r\n    debugger\r\n    if (this.myRef.current) {\r\n      this.myRef.current = false\r\n    }\r\n    return <div>888</div>\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <React.StrictMode>\r\n      <TestFunc />\r\n      <TestClass />\r\n    </React.StrictMode>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n1. Use strict mode\r\n2. Observe the changes of the myRef.current variable when the two components are rendered for the second time\r\n3. In the function component, the value of the myRef.current variable is \"true\" in the two renders before and after, so the two renders will go to the \"myRef.current = false\" logic. But in the class component, when rendering twice, the myRef.current variable is \"true\" in the first rendering, but the \"false\" that was modified in the first rendering is retained in the second rendering.\r\n\r\n\r\n\r\nReason:\r\nI looked at the source code and found that for the function component, although renderWithHooks was called twice before and after and the same workInProgress was used, but every time in the \"renderWithHooks\" method, the value of \"workInProgress.memoizedState\" is set to null, and in the useRef function of the mounting phase, the \"workInProgress.memoizedState\" property on \"alternate\" will not be reused, therefore, in the mounting phase in strict mode, during the second rendering, the state saved by ref during the first rendering cannot be obtained in the function component.\r\n![4641640144553_ pic](https://user-images.githubusercontent.com/28889103/147032139-9a08127e-0ca5-411e-8c84-8d4cb79904db.jpg)\r\n\r\nBut in the scenario of the class component, the same \"instance\" is used when the render method is called twice before and after, so the \"this\" in the render method two times before and after all points to the same one \"instance\".\r\n![4651640144635_ pic](https://user-images.githubusercontent.com/28889103/147032156-063e3a2c-9c0f-4e59-8f0f-5948d0fde6c0.jpg)\r\n\r\n\r\nExpected:\r\nI think that since the role of strict mode is to make multiple calls so that developers can find that using side effects in some life cycles may cause some problems, should the phenomenon of the class component be consistent with the phenomenon of the function component?\r\n\r\nThanks~:pray::pray::pray:\r\n\r\n\r\n","state":"open","updated_at":"2021-12-27T06:32:28Z","created_at":"2021-12-22T03:53:21Z","creator_user_login":"y805939188"}
{"number":23014,"title":"DevTools: Add button to toggle StrictMode for subtree","body":"Here's a demo of the new functionality:\r\n\r\nhttps://user-images.githubusercontent.com/29597/147002349-8d158651-77f4-4047-834d-2954159f7d60.mov\r\n\r\nIf the React version is new enough to support `StrictMode` but not new enough to pass DevTools a `scheduleUpdate` function (e.g. nytimes.com)– DevTools will show a clickable link instead of showing a toggle:\r\n\r\nhttps://user-images.githubusercontent.com/29597/147116030-eabb1b06-5d40-48b9-9873-8cbf0e414348.mov\r\n\r\nHere's how it looks in light mode:\r\n\r\nhttps://user-images.githubusercontent.com/29597/147116345-5fd49c3f-42ac-4efe-897f-7686c9e7c706.mov\r\n\r\n---\r\n\r\nThis PR also includes an e2e test for the new feature:\r\n\r\nhttps://user-images.githubusercontent.com/29597/147126497-abbf2441-aa9a-4252-8cdd-3c4dacb0f8a7.mov\r\n\r\n---\r\n\r\nFuture questions:\r\n* Should the toggle also support temporarily _disabling_ strict mode (so people can eg confirm a bug doesn’t occur with strict mode disabled)? This would be more complicated to support, since React doesn't really allow non-strict subtrees within strict subtrees. Maybe we could disable strict mode for the entire root though?","state":"open","updated_at":"2022-04-01T10:52:33Z","created_at":"2021-12-21T21:41:06Z","creator_user_login":"bvaughn"}
{"number":23003,"title":"Update babel-standalone to use createRoot api","body":"## Summary\r\nAccording to the contributing guide \r\n\r\nThe easiest way to try your changes is to run yarn build react/index,react-dom/index --type=UMD, and then open fixtures/packaging/babel-standalone/dev.html. This file already uses react.development.js from the build folder so that it will pick up your changes.\r\n\r\nBut when you open the fixtures/packaging/babel-standalone/dev.html, there will be a **warning**.\r\n\r\n<img width=\"1438\" alt=\"Screenshot 2021-12-20 at 17 57 00\" src=\"https://user-images.githubusercontent.com/45145592/146795899-c03c9df7-7e71-4617-bac3-793e0428da9d.png\">\r\n\r\n\r\n","state":"open","updated_at":"2021-12-20T19:13:02Z","created_at":"2021-12-20T15:57:59Z","creator_user_login":"vitaliemiron"}
{"number":22994,"title":"Bug: There are redundant DOM manipulation when swapping elements in the list","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add a breakpoint in react-dom.development.js to observe the DOM manipulation.\r\n![image](https://user-images.githubusercontent.com/31609229/146729545-785b97c4-c705-48c3-8f4e-d0dac9910334.png)\r\n2. Click the swap button and observe the DOM change.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/nifty-fog-mdemb\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nReact modified the HTML document ten times.\r\n\r\n## The expected behavior\r\n\r\nNow that each element has been given a unique key value, I hope that react will only modified the HTML document twice for better performance.","state":"open","updated_at":"2022-01-30T16:06:16Z","created_at":"2021-12-20T07:48:03Z","creator_user_login":"amorphousDj"}
{"number":22992,"title":"Fix:Removed unneccesary assignment to Null","body":"During the first time, the sibling of the fibre must be `null` , so we don't need to assign it further again","state":"open","updated_at":"2022-01-14T01:52:16Z","created_at":"2021-12-19T14:34:59Z","creator_user_login":"Biki-das"}
{"number":22991,"title":"Chore: code optimize by reducing the double count of isObject","body":"`isObject = typeof newChild === 'object' && newChild !== null`\r\n\r\nwe can reduce the number of judgements of isObject\r\n\r\nExisting problem:\r\n\r\nBecause most of the time, newChild.type is not equal to `REACT_FRAGMENT_TYPE`, so when `newChild.type` is not equal to `REACT_FRAGMENT_TYPE`, we don't have to compute isObject again.","state":"open","updated_at":"2021-12-19T14:16:50Z","created_at":"2021-12-19T14:11:37Z","creator_user_login":"Biki-das"}
{"number":22989,"title":"React 18 : Add commitEffects begin and complete hook exposing to customized renderer to improve render performance","body":"If developed a customized renderer for kind of RN framework，it cannot access the exact begin and finish time of commitEffects (commitMutationEffects) , which is a good timing to send batch of node operations to native. We have to collect all placements such as appendChild, insertBefore, removeChild, commitUpdates in an extra task(promise or setTimeout) to implement real batch update for native side, resulting in low render performance. #22946 is the PR\r\n","state":"open","updated_at":"2022-04-29T17:33:35Z","created_at":"2021-12-19T11:56:35Z","creator_user_login":"zoomchan-cxj"}
{"number":22984,"title":"Moved createElement,cloneElement & createFactory into the new module","body":"While diving through the code, I found a todo to move the Branching and re export so did the same ","state":"open","updated_at":"2022-03-16T16:30:31Z","created_at":"2021-12-18T06:56:45Z","creator_user_login":"Biki-das"}
{"number":22983,"title":"Fix : Reset the `isHostTimeoutScheduled` to True","body":"","state":"open","updated_at":"2022-01-18T18:45:28Z","created_at":"2021-12-18T06:26:55Z","creator_user_login":"Biki-das"}
{"number":22982,"title":"Chore: Added a few ignore files to the .gitignore","body":"","state":"open","updated_at":"2022-01-29T17:06:17Z","created_at":"2021-12-18T06:15:33Z","creator_user_login":"Biki-das"}
{"number":22981,"title":"Use shift left for leftIndex","body":"```js\r\nconst leftIndex = (index + 1) * 2 - 1\r\n```\r\nEquals to \r\n```js\r\nconst leftIndex = index * 2 + 1\r\n```\r\nEquals to\r\n```js\r\nconst leftIndex = (index << 1) + 1\r\n```","state":"open","updated_at":"2021-12-18T07:29:07Z","created_at":"2021-12-18T06:14:55Z","creator_user_login":"Jcanno"}
{"number":22980,"title":"Removed snapshot from `useMutableSource` from function types","body":"Currently, the types for the subscribe function passed to useMutableSource indicate that the subscribe callback should receive a Snapshot. However, this snapshot is never actually used.\r\n\r\nThis PR removes the Snapshot type from the callback, which makes it clearer that it's possible to useMutableSource without passing a snapshot to subscribe callbacks. This is important for library developers, as the requirement for subscribe callbacks to receive a snapshot could significantly change the design of library code.\r\n\r\n\r\n","state":"open","updated_at":"2021-12-18T05:30:11Z","created_at":"2021-12-18T05:24:09Z","creator_user_login":"Biki-das"}
{"number":22957,"title":"DevTools: Consider replacing postMessage with BroadcastChannel","body":"We could build on the changes made in #22949 to update the DevTools _extension_ to use [`BroadcastChannel`](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) for communication rather than [`Window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage). This might improve performance but we would need to investigate.\r\n\r\n`BroadcastChannel` can also be explicitly _closed_ which might simplify cleanup.","state":"open","updated_at":"2021-12-14T23:44:23Z","created_at":"2021-12-14T23:44:23Z","creator_user_login":"bvaughn"}
{"number":22946,"title":"feat(react-reconciler): add commitMutationEffects hook for customized renderer","body":"## Summary\r\n\r\nIf developed a customized renderer for kind of RN framework，it cannot access the exact begin and finish time of commitEffects (commitMutationEffects) , which is a good timing to send batch of node operations to native. We have to collect all placements such as appendChild, insertBefore, removeChild, commitUpdates in an extra task(promise or setTimeout) to implement real batch update for native side, resulting in low render performance.\r\n\r\n## How did you test this change?\r\n\r\nImplement `commitEffectsBegin`, `commitEffectsComplete` hooks in customized renderer hostConfig and expose them.\r\n","state":"open","updated_at":"2022-05-30T04:11:38Z","created_at":"2021-12-13T04:13:30Z","creator_user_login":"zoomchan-cxj"}
{"number":22943,"title":"update bug report template to use","body":"## What is the change?\r\n1. Update the `bug_report.md` github file to `bug_report.yml` to enable Github's new issue template form\r\n   - https://youtu.be/qQE1BUkf2-s?t=23\r\n\r\n## Motivation\r\n- encourage's bug reporter's to put more care into their bug report before submission\r\n- this may help react maintainer's receive more detailed & higher quality bug report's\r\n- help's with triaging as this automatically add's the relevant label to the issue\r\n- prevents bug reporter from submitting a bug IF they do not fill in the required fields specified in the `bug_report.yml` file\r\n- adds helpful tips for user's during the process of creating a bug/issue report\r\n\r\n\r\n## Demo of Change\r\n1. this PR is similar to this one I created here for another repo recently \r\n- https://github.com/antvis/G6/blob/master/.github/ISSUE_TEMPLATE/bug_report.yml\r\n\r\n ![CleanShot 2021-12-12 at 20 33 38](https://user-images.githubusercontent.com/6743796/145752971-df7b23c8-9d54-4e67-9bf1-8e48d30965b6.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-02-17T06:11:26Z","created_at":"2021-12-12T22:34:20Z","creator_user_login":"cliffordfajardo"}
{"number":22942,"title":"Fix misleading comment in ReactFlushSync test file","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nI am studying React v18 by [comparing the tests](https://github.com/dtinth/react-tests/blob/main/reports/v17.0.2_VS_v18.0.0-rc.0.md) (because I haven’t followed all the discussion) and I spotted some comments in the test files that I believe are misleading.\r\n\r\n## How did you test this change?\r\n\r\nN/A, comment change only.","state":"open","updated_at":"2021-12-22T14:13:18Z","created_at":"2021-12-12T17:20:21Z","creator_user_login":"dtinth"}
{"number":22847,"title":"Bug: Rendering content inside an iFrame using createPortal with Firefox is blank","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nI'm trying to render JSX content inside an iFrame using createPortal. It works fine in Edge, Chrome, but in Firefox the iframe body stays empty. \r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render an iframe\r\n2. Use createPortal inside the iframe with an element i.e <p>test</p>\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://n6lyi.csb.app/\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn Firefox, the iframe content shows for like 300ms, then goes blank.\r\n\r\n## The expected behavior\r\nIt should show content we passed using createPortal.","state":"open","updated_at":"2021-12-11T00:46:05Z","created_at":"2021-11-30T14:06:08Z","creator_user_login":"emilevirus"}
{"number":22841,"title":"Show warning on invalid value for option","body":"## Summary\r\nReference: #11734  \r\nif `value= {Symbol | Function}` for an option, we ensure that it is ignored (with a warning displayed in dev) rather than have an error thrown onto the browser. Note that this is specific to SSR.  \r\n\r\nThe reason why this occurred is because there was an attempt in converting `value` to a string at line 733, which would then throw if the type of `value` was a `symbol` or `function`. So to prevent this from happening, I re-used the function `shouldRemoveAttributeWithWarning` to firstly determine if the value was a `symbol` or `function` (or any other invalid type) before casting this into a string.\r\n\r\n## How did you test this change?\r\nI tested this by setting up a simple react component as shown below, and utilised `ReactDOMServer.renderToString` to render the component and sent this to the client (effectively replicating SSR behaviour). \r\n```\r\n  export default () => {\r\n    return (\r\n      <>\r\n        <label htmlFor=\"letters\">Choose a letter:</label>\r\n\r\n        <select>\r\n          <option value={Symbol('test')}>A</option>\r\n          <option value=\"B\">B</option>\r\n          <option value=\"C\">C</option>\r\n          <option value=\"D\">D</option>\r\n        </select>\r\n      </>\r\n    );\r\n  };\r\n```\r\n\r\nBehaviour if using Main branch (further debug information that is provided as part of the error message has been omitted):\r\n![image](https://user-images.githubusercontent.com/47930216/143719364-b5e5341c-9c55-494b-9b94-3257d8809f78.png)\r\n\r\nBehaviour with my changes:\r\n![image](https://user-images.githubusercontent.com/47930216/143718624-1e828a35-389e-40bd-8973-9f2ea5a11f8c.png)\r\n\r\nNote that I did attempt to write a test (via the file `ReactDOMServerIntegrationSelect-test`) to confirm that the html option object's `value` property is empty if the developer specifies a `symbol` or `function` type. However, although this test would pass for client-side rendered html elements, this does not pass if rendered server side (even though no `value` attribute is explicitly attached to the option element). If rendered server-side and if the option's `value` attribute is queried, it looks like the option element will implicitly return its child text element if its `value` attribute is empty. So going with the markup above as an example, querying the value for the first option element will return \"A\" if rendered server side. This does bring to light some very subtle differences in behaviour both server and client-side that I'm not too sure is worth addressing in this PR.\r\n\r\nHere's the test that I wrote below just as an FYI:\r\n\r\n```\r\n itRenders(\r\n    'a select option with no value if the initial value was a symbol type',\r\n    async render => {\r\n      const e = await render(\r\n        <select readOnly={true}>\r\n          <option value={Symbol('test')}>A</option>\r\n        </select>,\r\n        1\r\n      );\r\n      const option = e.options[0];\r\n      expect(option.value).toBe('');\r\n    }\r\n```\r\n\r\n","state":"open","updated_at":"2022-04-26T10:09:18Z","created_at":"2021-11-27T19:08:59Z","creator_user_login":"mdanyalkhan"}
{"number":22840,"title":"`Object.prototype` builtins should not be used directly","body":"It is preferable to call certain Object.prototype methods through Object on object instances instead of using the builtins directly.\r\n\r\nObjects can have properties that shadow the builtins on Object.prototype, potentially causing unintended behavior or denial-of-service security vulnerabilities.\r\n\r\n\r\nIt's better to always call these methods from ``Object.prototype``. For example, ``obj.hasOwnProperty(\"bar\")`` should be replaced with ``Object.prototype.hasOwnProperty.call(obj, \"bar\")``.\r\n\r\n\r\nBelow is an example of  a bad practice 👇\r\n\r\n```       \r\nlet hasBarProperty = obj.hasOwnProperty(\"property\");\r\n\r\nlet isPrototypeOfBar = obj.isPrototypeOf(property);\r\n\r\nlet barIsEnumerable = obj.propertyIsEnumerable(\"property\");\r\n\r\n ```\r\n\r\nBelow is an example of a good practice\r\n\r\n```\r\nlet hasBarProperty = Object.prototype.hasOwnProperty.call(obj, \"property\");\r\n\r\nlet isPrototypeOfBar = Object.prototype.isPrototypeOf.call(obj, property);\r\n\r\nlet barIsEnumerable = {}.propertyIsEnumerable.call(obj, \"property\");\r\n\r\n```\r\n\r\nI have been able to find the same occurences in some files will go ahead and pull a PR only if its worthful. ","state":"open","updated_at":"2022-01-25T15:28:08Z","created_at":"2021-11-27T18:11:58Z","creator_user_login":"Biki-das"}
{"number":22838,"title":"flight: Add a snapshot test for manifest generation","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n\r\nThis is a follow-up from https://github.com/facebook/react/pull/20524 - @gaearon suggested that the automated tests from the linked PR could still be useful. I've split the tests out, and converted it to a snapshot test as suggested. \r\n\r\n\r\n\r\n## How did you test this change?\r\n\r\nTests pass. (or so I hope) \r\n\r\n","state":"open","updated_at":"2021-11-28T22:55:22Z","created_at":"2021-11-27T07:10:23Z","creator_user_login":"samcooke98"}
{"number":22837,"title":"fix: SyntaxError: JSON.parse: bad parsing","body":"## Summary\r\n\r\nThere was a bug in `packages/react-fetch/src/ReactFetchNode.js`.\r\nIt's the usage of `JSON.parse()`.\r\n\r\nSyntaxError: JSON.parse: bad parsing\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\r\n\r\n\r\n## How did you test this change?\r\n\r\nThere was a bug in `packages/react-fetch/src/ReactFetchNode.js`.\r\nIt's the usage of `JSON.parse()`.\r\n\r\n```\r\n  json() {\r\n    ...\r\n    const json = JSON.parse(buffer.toString());\r\n    ...\r\n  },\r\n```\r\n\r\n`JSON.parse()` throws SyntaxError in the following example.\r\n\r\nFor example:\r\n\r\n```\r\nlet json = JSON.parse(\"\"); // => SyntaxError\r\n```\r\n\r\n- Documents\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\r\n\r\nThis was discovered when testing the `reactjs/server-components-demo`.\r\n\r\n- fix: JSON.parse fails in react-fetch\r\nhttps://github.com/reactjs/server-components-demo/pull/55\r\n\r\nI created a test code. When I ran it, it threw a `SyntaxError`.\r\n\r\n- packages/react-fetch/src/__tests__/ReactFetchNode-test.js\r\n\r\n```\r\n  // @gate experimental || www\r\n  it('handles different paths with json', async () => {\r\n    serverImpl = (req, res) => {\r\n      switch (req.url) {\r\n        case '/banana':\r\n          res.write('banana');\r\n          break;\r\n        case '/mango':\r\n          res.write('mango');\r\n          break;\r\n        case '/orange':\r\n          res.write('orange');\r\n          break;\r\n      }\r\n      res.end();\r\n    };\r\n    const outputs = await waitForSuspense(() => {\r\n      return [\r\n        fetch(serverEndpoint + 'banana').json(),\r\n        fetch(serverEndpoint + 'mango').json(),\r\n        fetch(serverEndpoint + 'orange').json(),\r\n      ];\r\n    });\r\n    expect(outputs).toMatchObject(['banana', 'mango', 'orange']);\r\n  });\r\n```\r\n\r\nI used the test code `handles different paths` as a reference.\r\nThe URL for fetch is the concatenation of the `serverEndpoint` of the test code and the random string `banana`.\r\n\r\nhttp://localhost:64944/banana\r\n\r\nSince it is not an `Invalid URL`, the status of the response will be as follows.\r\n\r\n```\r\nconsole.log(statusCode >= 200); // => true\r\nconsole.log(record.status === Resolved); // => true\r\n```\r\n\r\nHowever, the response will not be in json format, because I have specified a random string `banana`.\r\nThe body of the response will be a string in which the following conditions are true.\r\n\r\n```\r\nconsole.log(buffer.toString().length === 0); // => true\r\nconsole.log(buffer.toString() === \"\"); // => true\r\n```\r\n\r\nCommand to run the test code: \r\n\r\n```\r\nyarn test --watch packages/react-fetch/src/__tests__/ReactFetchNode-test.js\r\n```\r\n\r\nResults: \r\n\r\n```\r\n FAIL  packages/react-fetch/src/__tests__/ReactFetchNode-test.js\r\n  ReactFetchNode\r\n    ✓ can fetch text from a server component (137 ms)\r\n    ✓ can fetch json from a server component (65 ms)\r\n    ✓ provides response status (44 ms)\r\n    ✓ handles different paths (29 ms)\r\n    ✓ can produce an error (12 ms)\r\n    ✕ handles different paths with json (16 ms)\r\n\r\n  ● ReactFetchNode › handles different paths with json\r\n\r\n    SyntaxError: Unexpected end of JSON input\r\n        at JSON.parse (<anonymous>)\r\n\r\n      155 |     }\r\n      156 |     const buffer = readRecordValue(this._bufferRecord);\r\n    > 157 |     const json = JSON.parse(buffer.toString());\r\n          |                     ^\r\n      158 |     this._json = json;\r\n      159 |     return json;\r\n      160 |   },\r\n\r\n      at Response.json (packages/react-fetch/src/ReactFetchNode.js:157:21)\r\n      at packages/react-fetch/src/__tests__/ReactFetchNode-test.js:128:57\r\n      at retry (packages/react-suspense-test-utils/src/ReactSuspenseTestUtils.js:56:22)\r\n      at wake (packages/react-fetch/src/ReactFetchNode.js:111:7)\r\n      at IncomingMessage.<anonymous> (packages/react-fetch/src/ReactFetchNode.js:129:7)\r\n\r\nTest Suites: 1 failed, 1 total\r\nTests:       1 failed, 5 passed, 6 total\r\n```\r\n\r\nI modified `json()` as follows. I added `catch { }`.\r\nIf an Error throws, get it with `text()`.\r\n\r\n- packages/react-fetch/src/ReactFetchNode.js\r\n\r\n```\r\n  json() {\r\n    if (this._json !== null) {\r\n      return this._json;\r\n    }\r\n    const buffer = readRecordValue(this._bufferRecord);\r\n    try {\r\n      this._json = JSON.parse(buffer.toString());\r\n    } catch (error) {\r\n      return this.text();\r\n    }\r\n    return this._json;\r\n  },\r\n```\r\n\r\nPassed the test.\r\n\r\n```\r\n PASS  packages/react-fetch/src/__tests__/ReactFetchNode-test.js\r\n  ReactFetchNode\r\n    ✓ can fetch text from a server component (261 ms)\r\n    ✓ can fetch json from a server component (28 ms)\r\n    ✓ provides response status (29 ms)\r\n    ✓ handles different paths (24 ms)\r\n    ✓ can produce an error (13 ms)\r\n    ✓ handles different paths with json (20 ms)\r\n\r\nTest Suites: 1 passed, 1 total\r\nTests:       6 passed, 6 total\r\n```\r\n","state":"open","updated_at":"2021-11-27T05:28:47Z","created_at":"2021-11-27T05:23:44Z","creator_user_login":"rgbkids"}
{"number":22832,"title":"Update Server Components dependencies","body":"There's been some releases of underlying tools and we need to catch up.\r\n\r\n- [ ] Add webpack 5+ dep to the webpack plugin #22739 \r\n- [ ] Get `fixtures/flight` running again\r\n  - [ ] Fix the ESM secret exports issue\r\n  - [ ] Update to latest loader API changes\r\n    - [ ] Update the exported loader API entry point\r\n    - [ ] Update the `fixtures/filght/loader` wrapper\r\n- [ ] Look at https://github.com/facebook/react/pull/22537\r\n- [ ] Make a release and verify `server-components-demo` runs with it, webpack 5, and Node 16+","state":"open","updated_at":"2021-11-25T21:29:22Z","created_at":"2021-11-25T21:13:58Z","creator_user_login":"gaearon"}
{"number":22828,"title":"[DevTools Bug]: They make Firefox's debugger unusable (can't continue or step over)","body":"### Website or app\r\n\r\nhttps://jsfiddle.net/xyuri/ejp1of89/\r\n\r\n### Repro steps\r\n\r\nIt's really easier to reproduce by opening a simple page in Firefox (93 in my case):\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n<body>\r\n<script>\r\n    console.log(1);\r\n    debugger\r\n    console.log(1);\r\n    debugger\r\n    console.log(1);\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n\r\nBecause in a sandbox, Firefox behaves even more... erratically?\r\n\r\nThe steps:\r\n\r\n1. Open the page. Open the Firefox's dev tools. Refresh. It stops on the first `debugger` statement.\r\n2. Press F8 (continue) or F10 (step over). And now there are signs that the debugging session ended (no current line, Continue button changes into Pause button), and that it goes on (Stop loading this page button doesn't change into Reload current page button, the loading page spinner is, well, spinning). All in all, the debugger doesn't respond to keys or button presses. To give you a glimpse of what it looks like:\r\n\r\n![](https://i.imgur.com/A9CHFQ3.png)\r\n\r\nSometimes it helps to step into and out of the debugger statement (instead of F8/F10). After that it works. But not always.\r\n\r\nWhen I disable the extension, it works without any tricks. Took me a while to figure out.\r\n\r\nI tried disabling everything but React Dev Tools and restarting Firefox. No difference.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_","state":"open","updated_at":"2021-11-25T18:26:19Z","created_at":"2021-11-25T06:10:38Z","creator_user_login":"x-yuri"}
{"number":22805,"title":"[Devtools] Remove unused css","body":"## Summary\r\n\r\nRan `eslint-plugin-css-modules` lint rule locally to detect unused / redundant css and manually removed relevant files.\r\n\r\nhttps://gist.github.com/ezzak/fa7b37988c0f5b6b69ced8b3838fb624\r\n\r\n## How did you test this change?\r\n\r\n`yarn test`\r\n- Manually verified that there are no visual regressions\r\n","state":"open","updated_at":"2021-11-30T22:25:46Z","created_at":"2021-11-22T17:37:25Z","creator_user_login":"ezzak"}
{"number":22801,"title":"Updated pure component code","body":"tried to reduce some redundant logic and i applied the `Object.create` instead of the `newObject`","state":"open","updated_at":"2021-11-21T14:57:11Z","created_at":"2021-11-21T14:52:15Z","creator_user_login":"Biki-das"}
{"number":22794,"title":"React 18 not passive wheel / touch event listeners support","body":"Hi all, is there any chances React 18 will support not passive wheel / touch event listeners?\r\nIn React 17 they are passive so no way to preventDefault and I had to add active listeners manually by ref.\r\nSo maybe in v18 there will be some option to make them not passive in react?\r\n\r\nI just tested my code with React 18 beta and found some internal order of useEffect calls was changed, so my approach is failing because of desync of changes made in active listener vs other props changes.\r\n\r\n","state":"open","updated_at":"2023-06-07T21:40:56Z","created_at":"2021-11-19T18:26:12Z","creator_user_login":"YuriGor"}
{"number":22791,"title":"React 18 doesn't wait for long running suspended promises","body":"At Shopify with Hydrogen, we are encountering a problem with long running requests and React Server Components. If a component within a suspense boundary makes a request to blackhole.webpagetest.org, `pipeToNodeWritable` doesn't stay open while the promise to blackhole is suspended.\r\n\r\nSteps:\r\n\r\n1. Request from the client\r\n2. Server starts `pipeToNodeWritable`\r\n3. One component in the tree makes a request to blackhole, which won't ever resolve (node-fetch eventually times out).\r\n4. React almost immediately calls `onCompleteAll`, even though the underlying promise has yet to resolve.\r\n5. `onError` is never called either\r\n6. This error is in the server console: `Warning: There was still abortable task at the root when we closed. This is a bug in React.`\r\n\r\nEventually the error from the request does timeout, and it shows up in the console, but it's too late to stream anything to the client because the response has been closed. But even catching that error is hard/difficult, because. it is just dumped to the console, and doesn't actually go through React's `pipeToNodeWritable` `onError` handler.\r\n\r\nSee the example here: https://stackblitz.com/edit/hydrogen-v3w1xm?file=src%2Fpages%2FIndex.server.jsx\r\n\r\nNote in Index.server.jsx:73 it's fetching data to blackhole. Note the warnings in the console:\r\n\r\n> Warning: There was still abortable task at the root when we closed. This is a bug in React.","state":"open","updated_at":"2022-02-09T15:42:42Z","created_at":"2021-11-19T14:47:07Z","creator_user_login":"blittle"}
{"number":22776,"title":"Timeline view search","body":"If I'm looking for a specific component render in the Timeline view, it can be hard to find it. It would be nice if there was a search feature that would automatically zoom in on the component (matching by name).","state":"open","updated_at":"2021-11-19T14:24:30Z","created_at":"2021-11-16T18:16:15Z","creator_user_login":"bvaughn"}
{"number":22744,"title":"chore: add some ignore files","body":"add some ignore files\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-11-13T05:33:33Z","created_at":"2021-11-11T14:51:27Z","creator_user_login":"sudongyuer"}
{"number":22738,"title":"Consolidate component stack and (DEV only) element __source","body":"There are currently two types of component \"location\" displayed and used in DevTools:\r\n* \"Native\" component stacks: These are detected by intentionally causing the component to throw an error (e.g. `null` props object, a hooks dispatcher that throws) so DevTools can figure out **where the function is defined**.\r\n* DEV source metadata that comes from plugins like [@babel/plugin-transform-react-jsx-source](https://github.com/babel/babel/blob/main/packages/babel-plugin-transform-react-jsx-source/src/index.js) and describes **where the JSX element is defined** (e.g. where its props are passed).\r\n\r\nIn other words, for the `Greeting` component:\r\n```jsx\r\nfunction Example() {\r\n  return <Greeting name=\"brian\" />; // <- DEV source metadata\r\n}\r\n\r\nfunction Greeting({name}) { // <- component stack\r\n  return <div>Hi, {name}</div>;\r\n}\r\n```\r\nThe two locations have different use cases. Which one do you want when you click the \"open in editor\" button?\r\n\r\nI'm not sure. I can imagine cases for both of these. My gut is that the component stack location is actually slightly better for \"open in editor\" _but_ it would be a change in behavior.\r\n\r\nThat being said, it would be nice to pick one and stick with it, and the component stack location has the added benefit of working in production.","state":"open","updated_at":"2021-11-11T15:04:24Z","created_at":"2021-11-10T15:51:30Z","creator_user_login":"bvaughn"}
{"number":22736,"title":"optimize switch code logic","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nOptimize the `switch` code in `commitBeforeMutationEffectsOnFiber` funtion\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n![image](https://user-images.githubusercontent.com/31647991/141140657-9222abbe-3017-41ba-ac2f-6bc3fa2f6816.png)\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-11-10T16:53:20Z","created_at":"2021-11-10T15:20:53Z","creator_user_login":"zheyaoa"}
{"number":22735,"title":"fix: checkbox with `preventDefault` on click should not trigger SyntheticEvent","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nReact use SyntheticEvent to trigger change event on checkbox & radio by click event. But when called `preventDefault` on click event, it does not trigger native change event but will trigger on React. It's caused by the `checked` state will tmp set to opposite but reset when finished by browser:\r\n\r\nhttps://html.spec.whatwg.org/multipage/input.html#the-input-element\r\n\r\nAdd check to ignore change event when prevent is marked\r\n\r\nresolve #9023\r\n\r\n## How did you test this change?\r\n\r\nUpdate `ChangeEventPlugin-test.js` for preventDefault case. (Since this is prevent wrong event trigger, seems can do nothing for video record)\r\n\r\nrelated issue:\r\n* #9023\r\n* https://github.com/mui-org/material-ui/issues/23709\r\n* https://github.com/ant-design/ant-design/issues/32790","state":"open","updated_at":"2023-02-02T03:21:14Z","created_at":"2021-11-10T04:18:13Z","creator_user_login":"zombieJ"}
{"number":22733,"title":"React 18 requests similar component trees for the useId","body":"- based on: https://github.com/reactwg/react-18/discussions/111\r\n- sandbox: https://codesandbox.io/s/admiring-oskar-mqwdm?file=/src/App.js\r\n\r\n## Origins\r\nHistorically SSR was requiring some extra components to create a special \"server\" environment. Usually the ServerApplication is expected to be wrapped with different `collectors` and `providers` in order to power code splitting, style extraction, media queries, and many other things, some part of which don't have to be used on the client side, or even cannot exists at all.\r\n\r\nClientSide in turn, might contain some elements not required for the Server\r\n\r\n## The problem\r\nAccording to my experiments for the proper use of `useId` one does not need ideally matching component trees - any number of \"wrappers\" are allowed, and only having \"more than one child\" is breaking id generation, however it does not cause any hydration id and cannot be detected without a context-aware test.\r\n\r\n```tsx\r\nconst ServerProvider = ({ children }) => (\r\n  <context.Provider value={\"server\"}>\r\n    <SugarComponent>{children}</SugarComponent>\r\n  </context.Provider>\r\n);\r\n\r\nexport const ServerApp = () => {\r\n  return (\r\n    <ServerProvider>\r\n      {/* this one is breaking */}\r\n      {/* <SugarComponent /> */} 👈 having this one will break id generation\r\n      <SugarComponent>\r\n        <App /> 👈 client will render only this\r\n      </SugarComponent>\r\n    </ServerProvider>\r\n  );\r\n```\r\n\r\n## The question\r\nWhat level of similarity is really required? What actually matters - the path(so internals of siblings do not matter), or everything \"before this point\"(probably not due to Selective Hydration)?\r\n\r\nHow one can understand are component trees are similar enough, or one should not try to do that, comparing the expected behavior (matching Ids) without relying on implementation details of `useId` (currently one has to)\r\n","state":"open","updated_at":"2023-01-04T15:02:47Z","created_at":"2021-11-10T00:56:11Z","creator_user_login":"theKashey"}
{"number":22731,"title":"Timeline: Nested update warning logic flaw","body":"Timeline shows the following nested update warning when a synchronous update causes an event handler to run long:\r\n> A big nested update was scheduled during layout. Nested updates require React to re-render synchronously before the browser can paint. Consider delaying this update by moving it to a passive effect (useEffect).\r\n\r\nThis warning was intended to encourage developers to move _heavy_ updates from layout effects into passive effects so that they did not block paint or stretch event handlers.\r\n\r\nUnfortunately this warning currently does not handle a few cases well:\r\n1. Passive effects might be flushed synchronously (along with their updates) if a layout effect schedules a synchronous update.\r\n2. ~~Click events now always flush passive effects synchronously~~ (see https://github.com/facebook/react/issues/20074#issuecomment-811296789).\r\n\r\nThis means that the current warning may be confusing or misleading. We should either update it to ensure that it never fires for updates that were _already_ scheduled inside of a passive effect, or if that is not possible we should remove it entirely.","state":"open","updated_at":"2022-04-17T19:27:21Z","created_at":"2021-11-09T20:45:50Z","creator_user_login":"bvaughn"}
{"number":22727,"title":"[DevTools Bug]: Chrome extension's settings reset after every reload","body":"### Website or app\n\nChrome 95.0.4638.69 (Official Build) (64-bit), DevTools version 4.21.0-2f8f60ca8\n\n### Repro steps\n\n1. Open Chrome dev tools\r\n2. Switch to Components or Profiler tab \r\n3. Select settings and change for example \"Highlight updates when components render.\"\r\n4. Reload window\r\n5. Get back to settings - checbox is not checked.\r\n\r\nExpected behavior is to preserve settings forever (local storage?) or at least between reloads.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-12-10T07:44:22Z","created_at":"2021-11-09T06:08:26Z","creator_user_login":"Guris"}
{"number":22725,"title":"Added more context to invalid text string errors","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis PR is a companion to https://github.com/facebook/react-native/pull/32544 which was recommended here https://github.com/facebook/react-native/pull/32544#issuecomment-961837109. In React Native, the stack traces shown in LogBox often just point to fast refresh and don't provide much context into cases where a user adds a string outside of a Text element, this PR improves discoverability a little by adding the invalid text to the error message.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nUpdate the error message format to include the invalid text string.\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2022-01-11T20:43:45Z","created_at":"2021-11-08T21:25:05Z","creator_user_login":"EvanBacon"}
{"number":22721,"title":"How to resuse same component without remounting it and access anywhere in dom tree?","body":"i am creating a streaming app in react js my use case is this there is a camera component which is defined on the top level in App.js i want that component to be rendered at top level as well as inside any child component everywhere in dom which same component instance and state so that camera should not be remount and mount again in child component \r\n\r\ni have tried some solutions like react portals and react dom(deprecated can't use anymore)\r\n\r\nbut none of them work accoridngly\r\n\r\nthe camera component needs to mounted only one time in the APP.js so it wont rerender if i use in anywhere inside other component\r\n","state":"open","updated_at":"2021-12-19T17:57:04Z","created_at":"2021-11-08T05:49:03Z","creator_user_login":"yg-yash"}
{"number":22718,"title":"Bug: Parent <details> onToggle handler called when child <details> onToggle handler is triggered","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Declare a `<details>` element nested inside another `<details>` element.\r\n2. Add a handler for the `onToggle` event for each `<details>` element.\r\n3. Toggle the nested `<details>` element.\r\n4. Observe that its handler and its parent's handler are both called.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codepen.io/jordanbtucker/pen/oNedvvE?editors=0010\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe `onToggle` event for child `<details>` elements triggers handlers for parent `<details>` elements. This behavior does not occur in normal DOM environments.\r\n\r\n## The expected behavior\r\nThe `onToggle` event should only trigger its own handler.","state":"open","updated_at":"2022-11-04T23:41:11Z","created_at":"2021-11-07T19:48:36Z","creator_user_login":"jordanbtucker"}
{"number":22714,"title":"Safari performance while adding list items","body":"I am using React version 17.0.2 and running an app  on Safari 15.1. The component adds 20 list items at a time.  The list item contains three divs, one span element and one img element. I am using a reducer to load the data. After Adding the DOM elements, there is scroll event happening to show the list at the bottom. The issue is that Safari is taking much more time than Chrome on a MacBook Pro to add the DOM elements to the list. I have used the Profiler API to get some insight into the actualDuration spent by Safari and by Chrome. Chrome is much faster. \r\n\r\nI wanted to know how I can profile this usage to see why Safari is so slow? From Web Inspector I see that JavaScript execution time and Paint are much, much more than Chrome. Are there are any insights that could explain this behavior? \r\n\r\nThis doesn't seem to be an issue with React as such - but any pointers or discussion on why this is happening would be helpful.","state":"open","updated_at":"2022-01-04T11:14:56Z","created_at":"2021-11-07T00:19:29Z","creator_user_login":"MayuraRam"}
{"number":22713,"title":"Fixed else statment for ReactDomServerFormatConfig.js (#22309)","body":"\r\n## Summary\r\nhttps://github.com/facebook/react/issues/22309\r\n\r\nPreventing an override of a variable.\r\n## How did you test this change?\r\nSame Functionality\r\nUnit test still passed no need for another unit test.\r\n","state":"open","updated_at":"2021-11-06T18:11:30Z","created_at":"2021-11-06T17:10:47Z","creator_user_login":"omarfarah123"}
{"number":22712,"title":"Bug: when initialArg changes, useReducer should update the state accordingly","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**TL;DR**: After the first render, `useReducer` doesn't react to changes in the `initialArg` (second positional) argument. In my opinion, it should update the state accordingly. The actual behaviour in unnecessarily restrictive and forces us to rely on hacks to address the problems it brings.\r\n\r\nLet's take the example of a form provider, a component that enables us to make javascript objects easily editable by users through inputs:\r\n\r\n```\r\n// App.js\r\n\r\nconst users = {\r\n  1: {\r\n    firstName: 'Paul',\r\n    lastName: 'Atreides',\r\n  },\r\n  2: {\r\n    firstName: 'Duncan',\r\n    lastName: 'Idaho',\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  const [id, setId] = useState(1);\r\n\r\n  return (\r\n    <>\r\n      <div>Pick User</div>\r\n      <button onClick={() => { setId(1); }} type=\"button\">User 1</button>\r\n      <button onClick={() => { setId(2); }} type=\"button\">User 2</button>\r\n      <FormProvider initialValues={users[id]}>\r\n        <Editor />\r\n      </FormProvider>\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\n```\r\n// FormProvider.js\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_FIELD':\r\n      return { ...state, [action.field]: action.value };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst FormProvider = ({ children, initialValues }) => {\r\n  const [values, dispatch] = useReducer(reducer, initialValues);\r\n\r\n  const handleChange = useCallback((evt) => {\r\n    dispatch({\r\n      field: evt.target.name,\r\n      type: 'UPDATE_FIELD',\r\n      value: evt.target.value,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <FormContext.Provider value={{ handleChange, values }}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n```\r\n\r\n```\r\n// Editor.js\r\n\r\nconst Editor = () => {\r\n  const { handleChange, values } = useContext(FormContext);\r\n\r\n  return (\r\n    <>\r\n      <div>First name:</div>\r\n      <input\r\n        name=\"firstName\"\r\n        onChange={handleChange}\r\n        value={values.firstName}\r\n      />\r\n      <div>First name:</div>\r\n      <input\r\n        name=\"lastName\"\r\n        onChange={handleChange}\r\n        value={values.lastName}\r\n      />\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on the \"User 2\" button.\r\n2. Notice nothing happens.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/wandering-cache-4vwwe?file=/src/App.js.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen clicking on the \"User 2\"  button, nothing happens. As far as I understand, this is by design. I believe you guys were afraid that people would forget to keep the identity of `initialArg` stable, which would lead to the state being accidentally reset on every cycle. This does make sense, however it makes composition more difficult for developers who know what they are doing and who do want the state to be updated whenever `initialArg` changes.\r\n\r\nToday, here are my two options:\r\n\r\n**1. Adding a `key` prop to `<FormProvider />`**\r\n\r\n```\r\n<FormProvider key={id} initialValues={users[id]}>\r\n```\r\n\r\nThis will cause the entire component (and its children) to be unmounted/remounted. The `useReducer` hook will thus initialise from scratch, with the correct `initialValues`. Whereas this does work, it's pretty bad in terms of performance and I mean ... it's an ugly hack.\r\n\r\n**2. Dispatch a RESET action whenever `initialValues` changes**\r\n\r\n```\r\n// FormProvider.js\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_FIELD':\r\n      return { ...state, [action.field]: action.value };\r\n    case 'RESET':\r\n      return action.values;\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n```\r\n\r\n```\r\nconst FormProvider = ({ children, initialValues }) => {\r\n  // ...\r\n\r\n  const isFirstRenderRef = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (!isFirstRenderRef.current) {\r\n      dispatch({\r\n        type: 'RESET',\r\n        values: initialValues,\r\n      });\r\n    }\r\n  }, [initialValues]);\r\n\r\n  useEffect(() => {\r\n    isFirstRenderRef.current = false;\r\n  }, []);\r\n\r\n // ...\r\n};\r\n```\r\n\r\nThis will indeed trigger the updating of the state. However, it won't happen before the next cycle. It means that there'll be a moment where the `<FormProvider>` state will not be mirroring the user's selected profile. Should he decide to update a field during this fraction of a second and it will be an absolute, unforgettable disaster.\r\n\r\n## The expected behavior\r\n\r\nThis problem wouldn't exist if the `useReducer` state was updating when changes in `initialArg` occur. This is also the most natural behaviour. It would do no harm to developers who want the state not to be updated even though `initialArg` changes (god, who are these guys ?!), as they might use `useState`, `useRef` (`useReducer(reducer, useRef(initialValues).current)`, `useMemo` or just move the variable outside of the component).","state":"open","updated_at":"2023-04-18T18:54:10Z","created_at":"2021-11-06T16:57:08Z","creator_user_login":"tavoyne"}
{"number":22703,"title":"[DevTools Bug]: Components without own dimensions not highlighted at all","body":"### Website or app\n\nhttps://codesandbox.io/s/trusting-night-35uuz?file=/src/App.js\n\n### Repro steps\n\nCreate a fixed element with an absolute child like this: \r\n```js\r\n  return (\r\n    <div style={{ position: \"fixed\", left: point.x, top: point.y }}>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          color: \"blue\"\r\n        }}\r\n      >\r\n        Popover\r\n      </div>\r\n    </div>\r\n  );\r\n```\r\nOn top of that implement `rAF` loop updating the `point`. In such a scenario the root `div` gets constantly rerendered but no highlight is drawn on the canvas. Or rather - it is drawn ([here](https://github.com/facebook/react/blob/54f6ae9b1c0489784f6a95bbe26ffec31816d74a/packages/react-devtools-shared/src/backend/views/TraceUpdates/canvas.js#L49)), but its dimensions are 0x0 so nothing gets highlighted from the user perspective.\r\n\r\nIf you believe this is an issue I would gladly work on a fix. I'm unsure what would be the proper fix here. My ideas are those:\r\n1. either introduce more heuristics for measuring nodes in [this function](https://github.com/facebook/react/blob/cae635054e17a6f107a39d328649137b83f25972/packages/react-devtools-shared/src/backend/views/TraceUpdates/index.js#L135-L143)\r\n2. or always draw at least 2px x 2px highlight\r\n\r\ncc @bvaughn \n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2021-11-09T13:27:43Z","created_at":"2021-11-05T11:16:58Z","creator_user_login":"Andarist"}
{"number":22702,"title":"Bug: Failed to execute 'insertBefore' on 'Node' And Failed to execute 'removeChild' on 'Node' with Chrome translate","body":"```js\r\n  const [oneShow, setOneShow] = useState(false);\r\n  const [twoShow, setTwoShow] = useState(true);\r\n  \r\n  return (\r\n    <div>\r\n      <h1>插入节点错误</h1>\r\n      <div>\r\n        <span>（{oneShow && '插入节点' }）</span>\r\n      </div>\r\n      <button onClick={() => {\r\n        setOneShow(true)\r\n      }}>触发\r\n      </button>\r\n\r\n      <h1>删除节点错误</h1>\r\n      <div>\r\n        <span>（{twoShow && '删除节点' }）</span>\r\n      </div>\r\n      <button onClick={() => {\r\n        setTwoShow(false)\r\n      }}>触发\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n```\r\n这代码在进行谷歌翻译后(请选择翻译成非中文)分别会触发插入删除节点的错误。\r\n\r\n---\r\n\r\nEdited by @bvaughn to add [translation](https://translate.google.com/?sl=zh-CN&tl=en&text=%E8%BF%99%E4%BB%A3%E7%A0%81%E5%9C%A8%E8%BF%9B%E8%A1%8C%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E5%90%8E(%E8%AF%B7%E9%80%89%E6%8B%A9%E7%BF%BB%E8%AF%91%E6%88%90%E9%9D%9E%E4%B8%AD%E6%96%87)%E5%88%86%E5%88%AB%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E7%9A%84%E9%94%99%E8%AF%AF%E3%80%82&op=translate):\r\n> This code will trigger the error of inserting and deleting nodes after Google translation (please choose to translate into non-Chinese).","state":"open","updated_at":"2021-11-05T13:51:41Z","created_at":"2021-11-05T07:42:28Z","creator_user_login":"1291669609"}
{"number":22700,"title":"Use html native event handler <img> with React SSR.","body":"  Similar to this\r\n  https://github.com/facebook/react/issues/15446\r\n\r\n  I have react APP that will do server render first to create html markup then do client render on browser again.\r\n my app returns:\r\n`<img classname=\"classA\" src=\"invalid-src\" fallbacksrc=\"valid-src\" style=\"visibility:hidden\"/>\r\n`\r\nI am trying to use onerror event handler to replace src with valid fallback src, and use onload handler to remove style=\"visibility:hidden\". I know React has onError and onLoad, but since i use server side render, the static html will be generated, I would like to use html native onerror and onload event handler because i do not want to wait client side react rendering with javascript, so that the image can be load as fast as possible.\r\n\r\nwhat I did is I manually add event handler in my html template using document.getElements.\r\n\r\n`<script>\r\n      var images = document.getElementsByClassName(\"classA\");\r\nfor (img of images) {\r\n    img.addEventListener(\"error\", function e() {\r\n        const i = this.getAttribute(\"fallbacksrc\");\r\n        i && (this.src = i), this.removeEventListener(\"error\", e)\r\n    }), img.addEventListener(\"load\", function e() {\r\n        console.log(\"onloading\", this.src), \"hidden\" === this.style.visibility && (this.style.visibility = null), img.removeEventListener(\"load\", e)\r\n    });\r\n}\r\n</script>\r\n`\r\n\r\nThis works fine except the load event executed after React render on client side(JS execution). I did the workaround to add a < div > wrapper to my < img >, the problem is solved, load event executed before client side JS execution. However, I would like to see if there is any solution that does not need to add extra wrapper.\r\n\r\nPS. wrapped with React.Fragment is not working as well\r\n\r\nWould like to know if there is a way to use native dom event handler ? onload, onerror? \r\n\r\ni can not inline add those event because the event handler will be removed by React \r\n`<img classname=\"classA\" src=\"invalid-src\" fallbacksrc=\"valid-src\" style=\"visibility:hidden\" onerror=\"...\" onload=\"...\"/>`\r\n\r\n","state":"open","updated_at":"2021-11-04T18:21:57Z","created_at":"2021-11-04T18:21:57Z","creator_user_login":"dilumst"}
{"number":22699,"title":"[Fabric] Clear host instance fields","body":"We didn't implement this method. I don't know if we should, but seems like refs could hold host instances, so they could leak. So it might be good to disconnect the props and the fiber pointers. I edited the existing methods to remove non-null assumptions. Not sure if there is other code in RN reading these.","state":"open","updated_at":"2021-11-05T01:28:18Z","created_at":"2021-11-04T18:15:31Z","creator_user_login":"gaearon"}
{"number":22698,"title":"Fix benchmark runner.","body":"- Fix paths to point to `node_modules/.../umd`. (Previously, [another PR](https://github.com/facebook/react/pull/18473) did the same for the paths in `/fixtures`).\r\n- Update `chrome-launcher` and `nodegit` to the latest versions.\r\n\r\n<details>\r\n\r\n```\r\nbench $ yarn start\r\n\r\nyarn run v1.22.15\r\nwarning package.json: No license field\r\n$ node runner.js\r\nComparing Local (Current Branch) to Remote (Merge Base)\r\nRunning benchmarks for Local (Current Branch)\r\n- Building React bundles...\r\n- Building benchmark \"hacker-news\"...\r\n- Running benchmark \"hacker-news\"...\r\n(node:23883) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated\r\n(Use `node --trace-deprecation ...` to show where the warning was created)\r\n- Building benchmark \"pe-class-components\"...\r\n- Running benchmark \"pe-class-components\"...\r\n- Building benchmark \"pe-functional-components\"...\r\n- Running benchmark \"pe-functional-components\"...\r\n- Building benchmark \"pe-no-components\"...\r\n- Running benchmark \"pe-no-components\"...\r\nRunning benchmarks for Remote (Merge Base)\r\n- Building React bundles...\r\n- Merge base commit 51c558aeb6f5b0ae639d975fd4044007a73115c1\r\n- Building benchmark \"hacker-news\"...\r\n- Running benchmark \"hacker-news\"...\r\n- Building benchmark \"pe-class-components\"...\r\n- Running benchmark \"pe-class-components\"...\r\n- Building benchmark \"pe-functional-components\"...\r\n- Running benchmark \"pe-functional-components\"...\r\n- Building benchmark \"pe-no-components\"...\r\n- Running benchmark \"pe-no-components\"...\r\n┌──────────────────────────┬─────────────────────┬────────────────────────┬──────────────────┐\r\n│                          │ Remote (Merge Base) │ Local (Current Branch) │                  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ hacker-news              │ Time                │ Time                   │ Diff             │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React               │ 237.5 ms +- 14.15   │ 238.45 ms +- 3.13      │ +0.3 % +- 6.1 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React+ReactDOM      │ 984.09 ms +- 15.86  │ 984.29 ms +- 10.46     │ 0 % +- 1.9 %     │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load ReactDOM            │ 746.74 ms +- 1.63   │ 746.53 ms +- 9.83      │ 0 % +- 1.3 %     │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Initial Render           │ 97.2 ms +- 10.71    │ 96.16 ms +- 14.84      │ -1.4 % +- 18.8 % │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Update Render            │ 35.21 ms +- 4.87    │ 34.42 ms +- 2.51       │ -2.7 % +- 15.3 % │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ First Meaningful Paint   │ 2505.64 ms +- 36.38 │ 2497.61 ms +- 41.32    │ -0.3 % +- 2.2 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ pe-class-components      │ Time                │ Time                   │ Diff             │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React               │ 759.9 ms +- 3.23    │ 758.64 ms +- 9.31      │ -0.2 % +- 1.3 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React+ReactDOM      │ 2069.95 ms +- 2.01  │ 2071.93 ms +- 2.34     │ +0.1 % +- 0.1 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load ReactDOM            │ 1313.45 ms +- 1.68  │ 1314.32 ms +- 9.46     │ +0.1 % +- 0.7 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Initial Render           │ 282.49 ms +- 19.37  │ 294.43 ms +- 35.50     │ +4.1 % +- 14.5 % │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Update Render            │ 45.3 ms +- 2.39     │ 46.62 ms +- 2.01       │ +2.8 % +- 7 %    │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ First Meaningful Paint   │ 3236.28 ms +- 23.54 │ 3259.61 ms +- 48.97    │ +0.7 % +- 1.7 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ pe-functional-components │ Time                │ Time                   │ Diff             │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React               │ 754.67 ms +- 3.10   │ 761.5 ms +- 3.23       │ +0.9 % +- 0.6 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React+ReactDOM      │ 2068.88 ms +- 1.46  │ 2071.89 ms +- 2.08     │ +0.1 % +- 0.1 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load ReactDOM            │ 1314.71 ms +- 2.28  │ 1312.67 ms +- 2.51     │ -0.2 % +- 0.3 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Initial Render           │ 254.08 ms +- 80.56  │ 268.77 ms +- 7.52      │ +3 % +- 33.7 %   │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Update Render            │ 36.38 ms +- 4.79    │ 39.53 ms +- 2.33       │ +8.2 % +- 15.7 % │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ First Meaningful Paint   │ 3103.89 ms +- 92.58 │ 3138.65 ms +- 13.53    │ +1.1 % +- 3 %    │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ pe-no-components         │ Time                │ Time                   │ Diff             │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React               │ 758.55 ms +- 4.95   │ 754.14 ms +- 4.11      │ -0.6 % +- 0.8 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load React+ReactDOM      │ 1998.14 ms +- 1.78  │ 1997.45 ms +- 1.54     │ 0 % +- 0.1 %     │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Load ReactDOM            │ 1239.86 ms +- 3.38  │ 1243.22 ms +- 3.45     │ +0.3 % +- 0.4 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Initial Render           │ 230.01 ms +- 5.33   │ 219.74 ms +- 7.13      │ -4.5 % +- 3.8 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ Update Render            │ 26.67 ms +- 0.79    │ 25.76 ms +- 0.72       │ -3.4 % +- 3.9 %  │\r\n├──────────────────────────┼─────────────────────┼────────────────────────┼──────────────────┤\r\n│ First Meaningful Paint   │ 2998.2 ms +- 14.44  │ 2985.45 ms +- 9.81     │ -0.4 % +- 0.6 %  │\r\n└──────────────────────────┴─────────────────────┴────────────────────────┴──────────────────┘\r\n✨  Done in 1142.65s.\r\n```\r\n\r\n</details>","state":"open","updated_at":"2021-11-04T16:27:31Z","created_at":"2021-11-04T16:22:47Z","creator_user_login":"elas7"}
{"number":22692,"title":"[React 18] Selective Hydration fails hydration when using context api","body":"Based on the selective hydration example provided by @gaearon ?? \r\n\r\nhttps://codesandbox.io/s/mystifying-haibt-39oed\r\n\r\nLook out for 👉\r\n![image](https://user-images.githubusercontent.com/599459/140265026-bc9f2b34-1489-4021-a592-89aa282bf561.png)\r\n\r\n\r\nOne can see that hydrating html does in fact fail when using Context API — or perhaps that's a red herring? The trees do in fact line up during render, and hydration, there's just an effect that sets state — but that is post hydration??\r\n\r\nCould be them related; in anycase — strictly speaking to that code sandbox, what am i doing wrongly?\r\n\r\n---\r\n\r\nInitially caught when `ImportedComponent` fails see https://github.com/theKashey/react-imported-component/blob/c290d76623693389a11cc514c92f47efadac47ba/src/ui/ImportedController.tsx#L29","state":"open","updated_at":"2021-12-09T21:35:20Z","created_at":"2021-11-04T05:34:09Z","creator_user_login":"maraisr"}
{"number":22684,"title":"Bug: <picture> fetches both <source> and <img> image in Safari on macOS and iOS","body":"```\r\n <picture>\r\n   <source srcset=\"https://via.placeholder.com/300x300.webp?text=webp\" type=\"image/webp\">\r\n   <source srcset=\"https://via.placeholder.com/300x300.jpg?text=jpg\" type=\"image/jpg\">\r\n  <img src=\"https://via.placeholder.com/300x300.jpg?text=jpg\">\r\n</picture>\r\n```\r\nWill request **both** `300x300.jpg` and `300x300.webp` when rendered via React and browser is Safari.\r\nWill request **only** `300x300.webp` when rendered via React and browser is Firefox or Chrome.\r\nWill request **only** `300x300.webp` when normal HTML regardless of browser.\r\nWill request **only** `300x300.webp` when HTML is rendered via JS regardless of browser.\r\n\r\nReact version: `17.0.2`, `16.14.0`\r\nBrowser versions: `Safari 14.1.2 (16611.3.10.1.6) (macOS 11.5.2)`, `Safari 15.0.2 (iOS 15.0.2)`, `Chrome 95.0.4638.69 (Official Build) (x86_64)`, `94.0 (64-bit)`\r\n## Steps To Reproduce\r\n\r\n1. Run one of the supplied examples below\r\n2. Make note of network requests in Safari\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nExamples:\r\n\r\n### React (Requests both images in Safari)\r\n\r\n```html\r\n<!-- Same behaviour with JSX -->\r\n<html>\r\n    <head>\r\n        <!-- Tested with 17.0.2, 16.14.0 -->\r\n        <script src=\"https://unpkg.com/react@17.0.2/umd/react.production.min.js\" crossorigin></script>\r\n        <script src=\"https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js\" crossorigin></script>\r\n    </head>\r\n    <body>\r\n        <div id=\"root\"></div>\r\n        <script>\r\n            ReactDOM.render(\r\n                React.createElement(\r\n                    \"picture\",\r\n                    {},\r\n                    React.createElement(\r\n                        \"source\",\r\n                        {\r\n                            srcset: \"https://via.placeholder.com/300x300.webp?text=webp\",\r\n                            type: \"image/webp\"\r\n                        }\r\n                    ),\r\n                    React.createElement(\r\n                        \"source\",\r\n                        {\r\n                            srcset: \"https://via.placeholder.com/300x300.jpg?text=jpg\",\r\n                            type: \"image/jpg\"\r\n                        }\r\n                    ),\r\n                    React.createElement(\r\n                        \"img\",\r\n                        {\r\n                            src: \"https://via.placeholder.com/300x300.jpg?text=jpg\",\r\n                        },\r\n                        undefined\r\n                    )\r\n                ),\r\n                window.document.getElementById(\"root\")\r\n            );\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n### JS (Behaves as expected in Safari)\r\n```html\r\n<html>\r\n    <body>\r\n        <div id=\"root\"></div>\r\n        <script>\r\n            document.getElementById('root').innerHTML =\r\n                '<picture><source srcset=\"https://via.placeholder.com/300x300.webp?text=webp\" type=\"image/webp\"><source srcset=\"https://via.placeholder.com/300x300.jpg?text=jpg\" type=\"image/jpg\"><img src=\"https://via.placeholder.com/300x300.jpg?text=jpg\"></picture>';\r\n        </script>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### HTML (Behaves as expected in Safari)\r\n```html\r\n<html>\r\n    <body>\r\n        <picture>\r\n            <source srcset=\"https://via.placeholder.com/300x300.webp?text=webp\" type=\"image/webp\">\r\n            <source srcset=\"https://via.placeholder.com/300x300.jpg?text=jpg\" type=\"image/jpg\">\r\n            <img src=\"https://via.placeholder.com/300x300.jpg?text=jpg\">\r\n        </picture>\r\n    </body>\r\n</html>\r\n```\r\n## Images of requests\r\n### React (Requests both images in Safari) \r\n\r\n![Screenshot 2021-11-03 at 12 56 17](https://user-images.githubusercontent.com/736248/140055738-cb5fc7e6-6f6a-4658-a890-6f59d7742739.png)\r\n![Screenshot 2021-11-03 at 12 58 30](https://user-images.githubusercontent.com/736248/140055971-9f6561e3-b79d-4c55-a2c3-afab180ac480.png)\r\n\r\n### HTML / JS\r\n![Screenshot 2021-11-03 at 12 26 02](https://user-images.githubusercontent.com/736248/140055601-080f298a-453a-44b0-93e8-fb223331cec9.png)\r\n\r\n","state":"open","updated_at":"2022-05-28T20:38:22Z","created_at":"2021-11-03T11:59:30Z","creator_user_login":"simonjohansson"}
{"number":22668,"title":"Fixed up unwindInterruptedWorkBug","body":"","state":"open","updated_at":"2021-11-04T17:27:11Z","created_at":"2021-11-01T15:14:11Z","creator_user_login":"Biki-das"}
{"number":22663,"title":"Navigating to a new tab with DevTools open does not load Components tree","body":"## Repro\r\n\r\nThis is reproducible in version v4.21.0 (even after reverting logic to detect duplicate extensions)\r\n\r\n1. Load reactjs.org and open DevTools\r\n2. Observe Component tree loads correctly\r\n3. Navigate to facebook.com\r\n4. Component tree does not load\r\n5. Open Chrome DevTools for the extension and observe the following error\r\n![image](https://user-images.githubusercontent.com/1271509/139601677-b47c5c2a-8e61-413c-8807-0d0c922dbc44.png)\r\n","state":"open","updated_at":"2021-11-02T11:51:59Z","created_at":"2021-10-31T21:21:16Z","creator_user_login":"jstejada"}
{"number":22659,"title":"Removed console.error","body":"Hi! Removed console error of this:\r\n\r\n**Warning: useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.**\r\n\r\nThis text is not true since there are cases that do not lead to mismatch, e.g., useLayoutEffect on some property change that is not supposed to run on initial render. Therefore we can useLayoutEffect on server and error should not be displayed in console.\r\n\r\nError is quite annoying to see in build logs, it is not helpful in described case, it makes difficult to see helpful information in logs: for me there are hundreds of lines of this useless information.","state":"open","updated_at":"2021-10-30T15:53:53Z","created_at":"2021-10-30T15:49:45Z","creator_user_login":"Biki-das"}
{"number":22656,"title":"Bug: \"The above error…\" should appear after the error message but appears before (for some errors)","body":"React version: both latest (17.0.2) and next (18.0.0-alpha-9c8161ba8-20211028)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render `<input>hello</input>` to trigger the \"input is a void element tag\" error\r\n\r\nLink to code example: https://codesandbox.io/s/cocky-matan-ydmys\r\n\r\n## The current behavior\r\n\r\nTwo log lines appear:\r\n1. \"The above error occurred in the \\<input> component\"\r\n2. \"input is a void element tag\"\r\n\r\n![image](https://user-images.githubusercontent.com/6820/139519976-0f3d55c3-638f-40b0-b09d-0df3ffdfa305.png)\r\n\r\n## The expected behavior\r\n\r\nThey should be in the other order:\r\n\r\n1. \"input is a void element tag\"\r\n2. \"The above error occurred in the \\<input> component\"\r\n\r\nThis problem doesn't occur in the same way if a component throws an error. Presumably this goes through a different error handling path because it comes from the host config.\r\n\r\nIf someone works on this, you may also want to review look at this issue at the same time:\r\n\r\n* #18101","state":"open","updated_at":"2023-06-03T21:49:50Z","created_at":"2021-10-30T04:24:28Z","creator_user_login":"sophiebits"}
{"number":22650,"title":"React 18 - Internal React error if throwing on hook cleanup function.","body":"Running the following test:\r\n\r\n```javascript\r\nimport React, { useEffect } from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\n\r\nconst Boom = () => {\r\n    useEffect(() => {\r\n        return () => {\r\n            throw new Error(\"Boom\");\r\n        };\r\n    }, []);\r\n\r\n    return null;\r\n};\r\n\r\nit(\"prints an error to the console on next is fine on latest\", () => {\r\n    const res = create(<Boom />);\r\n    res.unmount();    \r\n});\r\n```\r\n\r\nI'll get the following error message: \r\n```\r\n console.error\r\n    Warning: Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\r\n```\r\n\r\nThe test will pass but considering the nature of the message and that it differs from latest I thought reporting it might be a good idea.  Repo if you need it https://github.com/andrew-w-ross/react-18-unmount-error\r\n","state":"open","updated_at":"2023-06-14T08:13:38Z","created_at":"2021-10-28T23:37:02Z","creator_user_login":"andrew-w-ross"}
{"number":22640,"title":"[react-is] The major versions of react and react-is must be peerDependencies related.","body":"(This is not directly related to React 18, but it is a discussion about breaking changes, so I'm proposing it as a topic for the next major release.)\r\nClearly react-is works on the assumption that it will be used with a matching version of react.\r\nTherefore, **react should be listed as a peerDependencies of react-is.**\r\n\r\nI brought this up from a discussion involving a package that depends on react-is downstream.","state":"open","updated_at":"2021-10-28T13:34:27Z","created_at":"2021-10-28T02:05:16Z","creator_user_login":"ashidaharo"}
{"number":22637,"title":"More robust act async detection","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nFixes #22634\r\n\r\nIn some setups (i.e. React Native + `@testing-library/react`), the `act()` await detection reports false-positive error messages on the console.\r\n\r\n```\r\nYou called act(async () => ...) without await..\r\n```\r\n\r\nThe current method depends on simple promise chains that are expected to \"beat\" the test's `then` execution on the callback.\r\n\r\nThis change uses `Promise#finally` when it is available instead of promise chains. This maintains the error warnings while also being compatible with React Native's core.js promise implementation.\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI have verified this change functions correctly in the positive and negative use-cases for:\r\n* Existing React Native + `@testing-library/react-native` (which suffers from this specific issue) and it does indeed solve the problem while still maintaining the error message in the correct scenarios.\r\n* ✅ Reproduction steps in the #22634 \r\n* ✅ React web app (create-react-app) with a similar setup to above\r\n* ✅ React web app (create-react-app) with @testing-library/react\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nEdits:\r\n* Rewrote a test to use `async` instead of `done` and removed mention in this comment.","state":"open","updated_at":"2022-05-19T17:56:45Z","created_at":"2021-10-27T18:49:51Z","creator_user_login":"getsaf"}
{"number":22636,"title":"DevTools can't load Components tree in Components Tab","body":"## Summary\r\n\r\nThere's a mix of several different issues that result in the Components tree not being able to load, which happens inconsistently. \r\n\r\nIn some cases, after trying out a different build of DevTools with a potential fix, the issue seems to fully resolve itself, even after going back to using the \"bad\" build where the issue originally occurred. However, that doesn't mean the issue is fixed by that build, since other reports keep occurring.\r\n\r\nThis issue is a master task tracking all of the issues we've seen so far from user reports:\r\n\r\n- `Cannot add node \"x\" because a node with that id is already in the store`, reported in #21636 before we shipped v4.20.0.\r\n- `No location name for view with id <id_of_components _tab>`, reported in the console inspecting DevTools itself.\r\n![image](https://user-images.githubusercontent.com/1271509/139111165-e5717518-f1fa-4579-80a9-5f8a0b80bf90.png)\r\n- `Invalid renderer id \"1\"`, logged in the console of the main page\r\n![image](https://user-images.githubusercontent.com/1271509/139113532-ceff5ac1-ab50-42ef-a432-153ea63733fa.png)\r\n- `Unable to find React on the page.`, which suggests that the extension failed to load entirely as that's just placeholder text from before the extension panels are created with Chrome.\r\n![image](https://user-images.githubusercontent.com/1271509/139111465-21759a3c-6455-49df-acfc-e7c56e430cb5.png)\r\n- `Uncaught error: Extension Context Invalidated`, reported in #22577.\r\nhttps://user-images.githubusercontent.com/7581546/137986963-f55b9fc2-745d-4aeb-8b8b-49645197c163.png\r\n- Navigating to a new tab doesn't load Components tree (even after v4.21.0 w duplicate extension logic reverted). See https://github.com/facebook/react/issues/22663 for details\r\n\r\n![image](https://user-images.githubusercontent.com/1271509/139601873-7e923b1d-6831-4994-ac17-d94ba58cf409.png)\r\n\r\n- No error being shown at all, as also reported in #22577.\r\n\r\n\r\n---------\r\n\r\n## Root Cause and Fixes\r\n\r\n- The suspected root cause is the changes shipped in v4.20.0 for detecting duplicate installations of DevTools. \r\n- A fix was attempted with v.4.20.2, based on reports from users in #22636 confirming that our changes in #22597 fixed the issue\r\n- The logic is now being fully reverted in https://github.com/facebook/react/pull/22638\r\n","state":"open","updated_at":"2022-04-27T05:37:18Z","created_at":"2021-10-27T16:49:04Z","creator_user_login":"jstejada"}
{"number":22634,"title":"Await detection in act() is not compatible with react-native","body":"I'm posting this here to get some feedback on a potential fix for this issue. I have a work-around (see below) but would like some guidance on whether or not this workaround is sand and satisfies the original intent of the await detection.\r\n\r\n[Related issue in `@testing-library/react-native` repo](https://github.com/callstack/react-native-testing-library/issues/379)\r\n\r\n### Synopsis\r\nThis await detection in `ReactAct` is somewhat incompatible with core.js promise implementation which is used by react-native causing false-positive errors to be dumped to the console.\r\n\r\n| `You called act(async () => ...) without await`\r\n\r\n### Notes\r\n* The issue only occurs when `act` is wrapped in a module dependency (aka: `@testing-library/react-native`)\r\n* The issue only occurs on the *second* awaited promise in a test\r\n\r\n### Version Info\r\n\"react-test-renderer\": \"17.0.2\"\r\n\"jest\": \"26.6.3\"\r\n\r\n### Problem area\r\nhttps://github.com/facebook/react/blob/a724a3b578dce77d427bef313102a4d0e978d9b4/packages/react/src/ReactAct.js#L95-L97\r\n### Reproduction\r\n\r\n```sh\r\nnpx react-native init promiseTest\r\ncd promiseTest\r\n\r\n# Create a fake node module that wraps act\r\nmkdir node_modules/foo\r\ncat <<EOT > node_modules/foo/wrapAct.js\r\n'use strict';\r\nconst  act =  require( 'react-test-renderer').act;\r\nexports.__esModule = true;\r\n\r\nexports.default = async function wrapAct(action) {\r\n  await act(action)\r\n}\r\nEOT\r\n\r\n# Create a test that uses the module\r\ncat <<EOT > act.test.js\r\nimport wrapAct from 'foo/wrapAct';\r\n\r\ndescribe('async', () => {\r\n  it('warns when act is wrapped in a package', async () => {\r\n    await wrapAct(async () => {\r\n      console.log('first');\r\n    });\r\n    await wrapAct(async () => {\r\n      console.log('second');\r\n    });\r\n  });\r\n});\r\nEOT\r\n\r\nyarn test\r\n```\r\n\r\n### Produces this error\r\n```\r\n PASS  ./act.test.js\r\n  ● Console\r\n\r\n    console.log\r\n      first\r\n\r\n      at _callee$ (act.test.js:6:15)\r\n\r\n    console.log\r\n      second\r\n\r\n      at _callee2$ (act.test.js:9:15)\r\n\r\n    console.error\r\n      Warning: You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);\r\n\r\n      at printWarning (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:68:30)\r\n      at error (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:44:5)\r\n      at node_modules/react-test-renderer/cjs/react-test-renderer.development.js:15297:13\r\n      at tryCallOne (node_modules/promise/lib/core.js:37:12)\r\n      at node_modules/promise/lib/core.js:123:15\r\n      at flush (node_modules/asap/raw.js:50:29)\r\n```\r\n\r\n### Workaround\r\n\r\nI have patched the `react-test-renderer` package to use `finally` instead of `Promise.resolve().then(() => {}).then(...)`:\r\n```diff\r\ndiff --git a/node_modules/react-test-renderer/cjs/react-test-renderer.development.js b/node_modules/react-test-renderer/cjs/react-test-renderer.development.js\r\nindex f401dd2..ac4bb87 100644\r\n--- a/node_modules/react-test-renderer/cjs/react-test-renderer.development.js\r\n+++ b/node_modules/react-test-renderer/cjs/react-test-renderer.development.js\r\n@@ -15292,7 +15292,7 @@ function act(callback) {\r\n     {\r\n       if (typeof Promise !== 'undefined') {\r\n         //eslint-disable-next-line no-undef\r\n-        Promise.resolve().then(function () {}).then(function () {\r\n+        result.finally(() => {}).then(function () {\r\n           if (called === false) {\r\n             error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, interleaving multiple act ' + 'calls and mixing their scopes. You should - await act(async () => ...);');\r\n           }\r\n\r\n```\r\nEdits:\r\n* Updated patch to use finally and then combo","state":"open","updated_at":"2022-06-07T03:00:20Z","created_at":"2021-10-27T14:29:46Z","creator_user_login":"getsaf"}
{"number":22633,"title":"Bug: `Cannot update a component (xxx) while rendering a different component (yyy)` on user click","body":"I'm encountering the `Cannot update a component (xxx) while rendering a different component (yyy)` on **user click**.\r\nThe state setter is called inside a useCallback, which is called several components \"below\",  inside a useCallback.\r\nAs the user decides when they click, I don't understand how I could prevent this error, and am not sure whether the error should fire in this case.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. create a Parent component that contains this:\r\n```jsx\r\n  const [showError, setShowError] = useState(false);\r\n  const [scrollToError, setScrollToError] = useState(false);\r\n  const handleShowError = useCallback(() => {\r\n    setShowError(true);\r\n    setScrollToError(true);\r\n  }, []);\r\n  const handleStopShowingError = useCallback(() => {\r\n    setShowError(false); // this produces the error when called in step 3\r\n    setScrollToError(false);\r\n  }, []);\r\n  const handleStopScrollToError = useCallback(() => {\r\n    setScrollToError(false);\r\n  }, []);\r\n```\r\n2. pass those through a child, and its child and its child FinalChild, that all do other things, including listening to contexts and updating stuff.\r\n3. in FinalChild, use the callbacks this way:\r\n```jsx\r\n  const onClick = useCallback(() => {\r\n    setIsOpen((isOpen) => {\r\n      if (isOpen) {\r\n        if (isValid) {\r\n          handlers.handleComplete();\r\n          return false;\r\n        } else {\r\n          handleShowError(); \r\n          return true;\r\n        }\r\n      } else {\r\n        if (isDisabled) {\r\n          handleShowError();\r\n          return false;\r\n        } else {\r\n          handleStopShowingError(); // this produces the error (that goes up to parent in step 1)\r\n          if (!isPreviousTabCompleted) handleCompletePreviousTabs(_index);\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n  }, [\r\n    handleShowError,\r\n    handleStopShowingError,\r\n    handleCompletePreviousTabs,\r\n    handlers,\r\n    _index,\r\n    isValid,\r\n    isDisabled,\r\n    isPreviousTabCompleted,\r\n  ]);\r\n  return <button onClick={onClick}>Click me</button>\r\n```\r\n\r\nLink to code example:\r\nI couldn't reproduce outside of my working repo, as the error does not appear when render is fast on typical simple components.\r\n\r\n## The current behavior\r\nWhen user clicks, I get the `Cannot update a component (xxx) while rendering a different component (yyy)` error\r\n\r\n## The expected behavior\r\nHonnestly I don't know what should happen, it seems weird that the error pops up, even though I'm never calling the setter outside of a hook (always inside a useCallback) and user should be able to click when they want... I understand the error is there to inform me that there is an issue with my code, but I don't know how I could improve this code. Shouldn't the useCallback deal with this?","state":"open","updated_at":"2023-07-18T16:12:47Z","created_at":"2021-10-27T10:15:00Z","creator_user_login":"alicerocheman"}
{"number":22626,"title":"React 18 - waterfall suspensions re-trigger the Suspense boundary ","body":"I'm seeing some baffling behavior with React 18 in concurrent mode. The minimal repro is below. The tl;dr is this:\r\n\r\nI have a single Suspense boundary at the root of the application. The fallback turns the screen pink (so you know it's there).\r\n\r\n## Problem 1\r\n\r\nI load some data with a Suspense hook. When the data come back, and render, subsequent Suspensions will happen, since I have a SuspenseImg component which suspends while each image preloads. \r\n\r\n**Expected Behavior**\r\n\r\nThe fallback should show until the data come in, and all of the subsequent image preloads are done.\r\n\r\n**Actual Behavior**\r\n\r\nThe fallback shows, then the page renders briefly, without data, and then re-suspends while the images preload.\r\n\r\n---\r\n\r\n## Problem 2\r\n\r\nThere's a button which loads more data, using startTransition. The data load re-triggers the same suspension, and the new data cause the same suspensions when rendered, via the same SuspenseImg (I force it to suspend even though I'm loading the same 5 images over and over).\r\n\r\n**Expected Behavior**\r\n\r\nThe loading boolean from useTransition should show until the data are returned, and all of the images have pre-loaded\r\n\r\n**Actual Behavior**\r\n\r\nThe loading boolean shows while the data are loading, and then the main fallback shows while the images preload.\r\n\r\n---\r\n\r\nI'll assume this isn't a bug, and that I instead have misunderstood how this works. I had thought Suspense was supposed to make this stuff fire and forget, with React keeping the appropriate fallback / loading boolean set until the entire state has been set, and everything rendered without anything suspending. But it seems I've misunderstood something? \r\n\r\n---\r\n\r\nhttps://codesandbox.io/s/suspense-debug-pz5mz?file=/src/useQuery.js","state":"open","updated_at":"2021-10-30T00:36:49Z","created_at":"2021-10-26T02:36:18Z","creator_user_login":"arackaf"}
{"number":22616,"title":"fix: Fixed improper code comparison","body":"The code comparison in these files seems to be odd and can be written in a proper manner","state":"open","updated_at":"2021-10-23T08:06:42Z","created_at":"2021-10-23T08:01:35Z","creator_user_login":"Biki-das"}
{"number":22604,"title":"Feature request: react-hooks/exhaustive-deps option to require deps arg.","body":"Please add an option to the configuration for the `react-hooks/exhaustive-deps` eslint rule to require a `deps` argument for all hooks that can take it.\r\n\r\nThis new configuration option would throw a warning/error (don't care about default) for the code below:\r\n```\r\nconst Demo = ({ thing }) => {\r\n  useEffect(() => {\r\n    console.log(thing)\r\n  })\r\n}\r\n```\r\n\r\nI am aware that this already throws an error:\r\n```\r\nconst Demo = ({ thing }) => {\r\n  useEffect(() => {\r\n    console.log(thing)\r\n  }, [])\r\n}\r\n```\r\n\r\nThis request is specifically concerning the case where no second argument is passed to hooks like `useEffect`, `useCallback`, `useMemo`, etc.\r\n\r\nThe configuration would be used in a way similar to this:\r\n`'react-hooks/exhaustive-deps': ['warn', {alwaysRequireDeps: true }]`\r\n\r\nReasoning: \r\nI can't think of a scenario where firing the callback of `useEffect` on every render is desired. An intentional `eslint-disable-next-line` is acceptable if this scenario arises.\r\nA missing `deps` arg can cause sneaky bugs.\r\n","state":"open","updated_at":"2021-11-03T14:49:37Z","created_at":"2021-10-20T18:25:42Z","creator_user_login":"ryandagg"}
{"number":22603,"title":"devtools: \"What caused this update?\" when a lazy component resolves","body":"React version: 18.2.0\r\nDevtools version: 4.23.0-e28a0db22\r\n\r\nSince https://github.com/facebook/react/pull/21171 React Devtools shows which fiber scheduled an update.\r\n\r\nIn the case of \r\n\r\n```tsx\r\nroot.render(\r\n  <React.Suspense>\r\n    <LazyComponent />\r\n  </React.Suspense>\r\n);\r\n```\r\nwhere `LazyComponent` is some `React.lazy(() => {})` component we usually create two commits:\r\n1. initial render where `LazyComponent` suspends\r\n2. `LazyComponents` resolves\r\n\r\nIn legacy roots for the revealing commit Devtools displays the hostroot as the updater: https://github.com/facebook/react/pull/22602/files#diff-3582df0bd6a071e1986363b080d3012a9c492b8be7dd4e67f39d72078422d316R1368-R1376.\r\nFor new roots we get \"unknown\" for the second commit (i.e. no updates): https://github.com/facebook/react/pull/22602/files#diff-3582df0bd6a071e1986363b080d3012a9c492b8be7dd4e67f39d72078422d316R1267.\r\nCodesandbox for full repro: https://codesandbox.io/s/18-2-updaters-when-lazy-component-resolves-ff5x6h?file=/src/index.js\r\n\r\nI would've expected that for both roots we get the nearest Suspense boundary that can commit after `LazyComponent` resolved. Or at least the fiber that \"unsuspended\" (not sure if this is the right terminology). The corresponding hostroot wouldn't help me much but I'm not that concerned with legacy roots in this instance.\r\n\r\nRight now the information isn't all that helpful. I noticed this especially for a larger apps with multiple suspense boundaries and partial hydration. \r\n\r\nI profiled the same codesandbox in the scheduling profiler but also couldn't extract any useful information with regards to why the second commit happened.","state":"open","updated_at":"2022-07-02T08:13:13Z","created_at":"2021-10-20T17:56:50Z","creator_user_login":"eps1lon"}
{"number":22602,"title":"Current behavior for \"What caused this updated?\" when a lazy component resolves","body":"Current behavior illustrating https://github.com/facebook/react/issues/22603\r\n","state":"open","updated_at":"2022-07-02T08:24:27Z","created_at":"2021-10-20T17:54:43Z","creator_user_login":"eps1lon"}
{"number":22598,"title":"added type checking to null comparison","body":"Happen to find few null comparison without type checking , seems like we can add it to further less the risk of code not working as expected\r\n","state":"open","updated_at":"2021-10-28T17:52:46Z","created_at":"2021-10-20T13:41:09Z","creator_user_login":"Biki-das"}
{"number":22575,"title":"feat(devtools): traverse to specific search result","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nIn a large react app, especially when components having similar starting names like `Table`, `TableColumn`, `TableCell`, `TableRow` - all together 100+ components when rendered in a virtualized table. \r\n\r\nTraversing the search result is sometimes difficult with scroll, also there is another behavior that is when a component is already selected and I remove the text term and search for same, searching starts from the same component.  \r\n![Searching](https://user-images.githubusercontent.com/22376783/137601285-59053e07-65e7-48cf-b589-27440fef16a9.gif)\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nLocally running the devtool.\r\n![Devtools](https://user-images.githubusercontent.com/22376783/137601225-025af0ee-4576-4120-9df3-0d77626fe9df.gif)\r\n\r\n\r\nPS: Need help in fixing the width issue of the Numeric Input, it would be great to have a solution without limiting the width of this input.\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-11-04T15:42:04Z","created_at":"2021-10-16T20:25:49Z","creator_user_login":"jyash97"}
{"number":22552,"title":"Handle duplicate extensions in Firefox and Edge","body":"See context in #22517","state":"open","updated_at":"2021-10-13T20:45:04Z","created_at":"2021-10-13T19:08:19Z","creator_user_login":"jstejada"}
{"number":22543,"title":"fix: reset isHostTimeoutScheduled=true","body":"","state":"open","updated_at":"2021-10-13T20:50:35Z","created_at":"2021-10-12T03:55:26Z","creator_user_login":"YinDongFang"}
{"number":22540,"title":"Custom React-specific metadata format","body":"The recent DevTools [\"named hooks\" feature](https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md#display-hook-names-for-inspected-components) has been heavily optimized since its initial launch.  There are some additional optimizations that we _could_ consider (see the first comment below) but I believe the single biggest remaining bottleneck is downloading and parsing of large source map files. \r\n\r\nUsing Facebook as a case study, over 65% of the time spent parsing hook names is downloading the source-map files:\r\n![image](https://user-images.githubusercontent.com/29597/136857383-aa6af89e-5c84-4213-88c4-691d8729571a.png)\r\n\r\nA significant portion of this time is spent on the generating the source map on the server:\r\n![image](https://user-images.githubusercontent.com/29597/136857473-af833048-d07c-4066-9dad-1ea0a4aa084e.png)\r\n\r\nPerhaps this could be optimized further, but at some point- we'll still have to download and parse a potentially large file.\r\n\r\n### Can we avoid relying on the source map entirely?\r\n\r\nWe aren't using source maps in the typical way. (We aren't displaying the original source code.) So the majority of the data contained in the source-map is useless to us. We've experimented with [extending the source map](https://github.com/facebook/react/issues/21782#issuecomment-872599422) so that we didn't have to parse the original code, but the biggest bottleneck (based on testing) is actually _generating and downloading_ the source-map so this only helps a little.\r\n\r\nWhat if we pre-computed hooks metadata (during compilation) and wrote it to a separate file that gets bundled along like a source map. We could generate this metadata for the _compiled code_, rather than the _source code_, so we wouldn't need to map anything at runtime. I don't have exact figures on how much faster this would be, but I estimate it would reduce the source-map file size by an order of magnitude which could have a pretty large impact on the overall performance.\r\n\r\nIf this custom metadata file is successful, we could also store some additional (lightweight) information in it such as component display names.\r\n\r\nAdding additional metadata to this file/format should be done in a backwards-compatible way if at all possible. Still, the metadata format should be _versioned_ in the event that a backwards breaking change occurred.\r\n\r\n### What if this metadata was unavailable?\r\n\r\nThis would be entirely opt-in. DevTools would fall back to loading and parsing the complete source-map if this custom metadata was unavailable.","state":"open","updated_at":"2021-10-12T03:53:55Z","created_at":"2021-10-11T21:33:40Z","creator_user_login":"bvaughn"}
{"number":22538,"title":"added OnchangeCapture to the value prop types","body":"","state":"open","updated_at":"2021-10-13T20:50:55Z","created_at":"2021-10-11T06:49:24Z","creator_user_login":"Biki-das"}
{"number":22531,"title":"Improve \"native\" component stacks host component frames","body":"React and React DevTools generate [component stacks](https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md#component-stacks) in the same format as native Error stacks. For user components (class and function components) this is done by intentionally causing the component's render method to throw an Error, and then stitching the error stack frames together:\r\nhttps://github.com/facebook/react/blob/5fa4d79b00988f354073bc27313363dd5cce9cd3/packages/react-devtools-shared/src/backend/DevToolsComponentStackFrame.js#L62-L203\r\n\r\nThis results in a component stack like this:\r\n![image](https://user-images.githubusercontent.com/29597/136594272-3d290470-b0fb-48ac-b0a1-a32402448649.png)\r\n\r\nBut for \"host components\" (e.g. `HTMLDivElement` or `View`) when we have no source location to show, we fall back to showing just \"at div\" or \"at View\".\r\n\r\nWe could probably more closely mirror what JavaScript engines do by appending a \"location\" like `(native)` or `(unknown location)` (as the [v8 docs](https://v8.dev/docs/stack-trace-api#appendix%3A-stack-trace-format) suggest) or `(anonymous)` as v8 seems to actually do in testing.\r\n\r\nThe trick would be matching the specific browser/engine's behavior for this. For example, running the following code in Chrome or Node...\r\n\r\n```js\r\nJSON.stringify({}, () => console.log(new Error('')));\r\n```\r\n\r\n...will show the stack frame:\r\n```\r\n    at JSON.stringify (<anonymous>)\r\n```\r\nwhile Firefox will show:\r\n```\r\nError: \r\n    <anonymous> file:///path/to/script:7\r\n```\r\n\r\nImproving this format so that host components more closely mirror native Error stacks will help simplify things like React Native's error parsing.","state":"open","updated_at":"2021-10-11T21:18:53Z","created_at":"2021-10-08T16:55:59Z","creator_user_login":"bvaughn"}
{"number":22529,"title":"Combine Profiler data sources","body":"### Time sensitive API changes (ideally these should land before 18.0 release):\r\n- [x] Add DevTools API/hooks for collecting Timeline profiling data #23102, #23142, #23151\r\n- [x] React (DEV and profiling builds) should call the new Timeline hooks when present instead of logging User Timing data  #23102, #23142, #23151\r\n\r\n(DevTools will decide whether or not to store the data or log User Timing marks, since it knows when it's profiling.)\r\n\r\n### Additional, non-blocking changes:\r\nDevTools hook changes:\r\n- [x] Log sync marks (with session ID) periodically (e.g. during commit) when profiling is active #23137\r\n- [x] Mark internal module ranges (see [here](https://github.com/facebook/react/blob/9a7e6bf0d0cf08114b74c9fe45c06e60a5e496e4/packages/react-reconciler/src/SchedulingProfiler.js#L102-L123)) only if/when profiling is started. #23141\r\n- [x] ~~Generate a unique session ID when profiling is started. Log it with User Timing and also store it with the main profiling data. (This will be used to match them up later.)~~\r\n- [ ] Collect component stacks for (maybe lazily? maybe cache per Fiber in a WeakMap?)\r\n\r\nDevTools Timeline changes:\r\n- [x] Update pre-processing script to make use of the new React <-> DevTools data format #23185\r\n- [x] Support optional tracing data #23185\r\n  - [x] Verify logic for aligning data shared between React <-> DevTools with the optional performance mark data #23185\r\n  - [x] Create UI for separate, optional import (and update the preprocessor to handle this data) #23185\r\n\r\nFuture optimizations:\r\n- [ ] Consider merging logic between `profilingHooks` and `preprocessData` to remove redundancies. If the code was moved somewhere else, then `profilingHooks` could call it during rendering and `preprocessData` could call it too (as it processed each mark) and avoid having to build up the same in-memory representations.\r\n- [ ] Double check that `internalModuleSourceToRanges` is being initialized correctly for the in-memory profiler. (Technically this doesn't matter yet, since we don't have JavaScript samples for the in memory profiler– but still.)\r\n\r\n# Motivation\r\n\r\nThere are currently two React profilers: the \"legacy\" profiler (which reads data from Fibers during the commit phase) and the \"scheduling\" profiler (which reads data in the form of User Timing marks in a Chrome performance profile). This separation is confusing as both profilers live in the same extension/app but import/export different types of data.\r\n\r\nLet's take a step back and revisit how the scheduling profiler works...\r\n\r\nRecording a profile currently requires a user to do the following:\r\n1. Click \"record\" in Chrome\r\n2. Use the app\r\n3. Click \"stop\" in Chrome\r\n4. Export the profile JSON\r\n5. Import it into the React DevTools\r\n\r\nIt would be nice if DevTools could start/stop recording and import the data itself, but the only way to do this is using the Chrome DevTools Protocol which would _require_ the use of an extremely powerful permission that I don't think we would want to ask users for.\r\n\r\nThis approach also has the downside of not working with React Native (or non-Chrome browsers).\r\n\r\nSo why do we do it? We do it because the profile gives us a lot of nice extra data: CPU samples of the JavaScript stack, Network requests, screenshots (if enabled), user events (e.g. \"click\").\r\n\r\nBut we don't _need_ this data. The scheduling profiler could still be a useful tool even if included only the React specific marks.\r\n\r\nMy proposal then is that we consider doing this:\r\n* Replace the user timing API with a direct React-to-DevTools API (where these marks are logged to DevTools directly).\r\n* When profiling starts in React DevTools, generate a unique ID string\r\n* Log this unique ID to the User Profiling API along with each commit (e.g. `\"react-sync-marker-<uid>-<index>-<timestamp>\"`)\r\n* Allow users to export/import additional native profiling information (which can be aligned using the sync marks) _but is not required_.\r\n\r\nDoing this has a few benefits:\r\n* We could start _both_ profilers and join the commit and scheduling profiler data streams (huge benefit).\r\n* It would make the profiler easier to use in the simple case (if you didn't want/need native profiler info) since you could start/stop it from within React DevTools.\r\n* It would let us add component and call stacks without the extra serialization overhead.\r\n\r\nIt would have the following downside though:\r\n* Recording profiles with native information would be a little more complicated, since you'd need to start React DevTools _and then_ start the browser profiler. (We could show instructions for doing this in the DevTools profiler though.)\r\n\r\n## A note about component and call stacks\r\n\r\nThe scheduling profiler currently shows component _names_ for things like state-updates (e.g. \"state update scheduled by Foo\") but it does not include component or call stacks. These would both be useful because:\r\n* Component stack would help identify _which instance of foo_ was e.g. scheduling the update\r\n* Call stack would show e.g. which piece of state was being updated (and by what)\r\n\r\nThe reason we don't include this information is because we won't want to pay the cost of string serializing it all and logging it as a User Timing mark.","state":"open","updated_at":"2022-03-29T18:11:09Z","created_at":"2021-10-08T15:50:32Z","creator_user_login":"bvaughn"}
{"number":22521,"title":"[ possible ] Bug: Failing catching rapid clicking events on iOS 15?","body":"React version:\r\nv17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Simple clicking event handling.\r\n2. Rapid click on iOS 15 or later.\r\n\r\nLink to code example:\r\n[A simplified example](https://codesandbox.io/s/intelligent-cache-js9gz) to play with.\r\nJust open the link on an iPhone upgraded to iOS 15 or later, and try rapid clicking letters to see the issue, some clicks are not handled without any feedback. (Rapid clicking on the same letter doesn't seem to have the issue.)\r\n\r\nIn comparison, [this is the same app with vanilla javascript](https://codesandbox.io/s/awesome-elbakyan-7tmn0), this works just fine without any issue. (So I'm guessing this might be ReactJS related.)\r\n\r\n## The current behavior\r\nRapid clicking on DOM elements, not all clicks are caught and handled. ONLY ON IOS 15 OR LATER.\r\n\r\nI've posted this on [stackoverflow](https://stackoverflow.com/questions/69473540/react-js-fails-catching-rapid-click-events-in-ios-15) too. Not sure if this is a ReactJS bug, or just Apple messed things again. \r\n\r\nAny suggestions where to look to find a fix? Thanks.\r\n","state":"open","updated_at":"2022-01-08T23:42:58Z","created_at":"2021-10-06T23:07:20Z","creator_user_login":"mark-night"}
{"number":22520,"title":"Bug: rules-of-hooks violation not caught by eslint plugin","body":"Given the following code:\r\n\r\n```ts\r\nconst createHandler = () => (event) => {\r\n  const { t } = useTranslation()\r\n\r\n  Alert.alert(t(\"title\"), t(\"message\"))\r\n}\r\n\r\nfunction MyComponent() {\r\n  return <Button onPress={createHandler()}/>\r\n}\r\n```\r\n\r\nthe `rules-of-hooks` linter rule is not triggered for the `createHandler` as it should.\r\nThe linter rule should detect its not a react component, since it does not return any `ReactElement` or `null`.","state":"open","updated_at":"2023-01-20T11:34:54Z","created_at":"2021-10-06T20:52:06Z","creator_user_login":"pke"}
{"number":22519,"title":"Fast Refresh: Crash when hot reload with some specifics content security policies","body":"# Summary :\r\nWe have our app that has been working well with hot reload for a while now and recently we have include CSP in our index.html.\r\nWe find out that when the app need to hot reload, the app just freeze. In fact, everything because unresponsive while the UI get updated correctly. Lets said I'm changing a string, the string will display right at the hot reload, but now every button, actions, styles become unresponsive. There's a iframe appearing in front of everything which block the site. \r\n\r\n```\r\n<meta\r\n\thttp-equiv=\"Content-Security-Policy\"\r\n\tcontent=\"default-src 'self'; \r\n\t\tstyle-src 'self' 'unsafe-inline'; \r\n\t\tscript-src 'self'; // This one freeze the app\r\n\t\tscript-src 'self' 'unsafe-inline'; // this one does not freeze the app.\r\n\t\timg-src 'self' data:;\r\n\t\tobject-src 'none';\r\n\t\tconnect-src 'self';\"\r\n/>\r\n```\r\n\r\nhttps://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi","state":"open","updated_at":"2021-10-12T15:24:15Z","created_at":"2021-10-06T20:48:14Z","creator_user_login":"maxime4000"}
{"number":22514,"title":"Extract errors from Error() and new Error() instead of invariant()","body":"The lint rule was updated but not the extract-errors script.\r\n\r\nTo test this, I first removed everything from codes.json, then ran extract-errors and then ran lint. Lint then found a couple of things missing. Namely in the partial renderer and react-suspense-test-utils. Perhaps because these are not included in the build.\r\n\r\nHowever, then I restored codes.json and ran extract-errors again. This time it found a bunch that are not covered by the lint rule. What do we want to do about these?\r\n\r\nSome these weren't using `invariant` before and so wasn't covered. However, they should've been covered by the lint rule, no?","state":"open","updated_at":"2022-01-07T09:34:00Z","created_at":"2021-10-06T03:05:18Z","creator_user_login":"sebmarkbage"}
{"number":22507,"title":"feat: add no import expression eslint rule","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThis is a follow-up of PR #21918 and issue #21910 . It introduces a custom internal eslint rule to prevent dynamic import expression in literal. \r\n\r\n## How did you test this change?\r\n\r\n1. new tests are added.\r\n2. `yarn test` passes.\r\n3. `yarn run eslint` passes.\r\n4. When dynamic import expression is used in literal, E.g.\r\n\r\n```\r\nconsole.log(\r\n     'lazy: Expected the result of a dynamic import() call. ' +\r\n     \"const MyComponent = lazy(() => import('./MyComponent'))\"\r\n);\r\n```\r\nit does report a lint error","state":"open","updated_at":"2021-10-12T22:04:51Z","created_at":"2021-10-05T08:42:34Z","creator_user_login":"n0ruSh"}
{"number":22505,"title":"mouseEnterEvent can not trigger in outer dom","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen we mouseenter into the dom in the demo, we can not see 'mouse enter' in console. \r\nReact version:\r\n17.0.1\r\n## Steps To Reproduce\r\n1. click the link and open the demo\r\n2. mouse enter into blue space, and see logs in console.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codepen.io/qiuzhifeng97/pen/LYLKROg?editors=1111\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nOnly 'mouse enter2', 'mouse over' nad 'mouse over2' in console.\r\n\r\n## The expected behavior\r\n'mouse enter2', 'mouse over' , 'mouse enter' and 'mouse over2' in console.","state":"open","updated_at":"2022-01-08T23:43:04Z","created_at":"2021-10-05T04:50:16Z","creator_user_login":"QiuZhiFeng97"}
{"number":22497,"title":"ErrorMap imported","body":"Modified with imported ErrorMap.\r\nPlease merge it with the main.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-10-24T08:49:10Z","created_at":"2021-10-03T18:49:00Z","creator_user_login":"agrasthnaman"}
{"number":22496,"title":"Update confirm-automated-testing.js","body":"Modified the function.\r\nPlease merge the request.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-10-24T08:48:56Z","created_at":"2021-10-03T18:44:11Z","creator_user_login":"agrasthnaman"}
{"number":22470,"title":"Bug: Submit events from a button inside a portal don't bubble up to a form in its React DOM Ancestry.","body":"From the docs of [React Portal](https://reactjs.org/docs/portals.html#event-bubbling-through-portals)\r\n>  An event fired from inside a portal will propagate to ancestors in the containing React tree, even if those elements are not ancestors in the DOM tree.\r\n\r\nHowever this doesn't seem to be the case with `<form>`s when using a `<button type='submit'>` that is inside a `Portal`.\r\nClicking a submit button that is inside a portal-ed modal which is contained by the `form` does not trigger the form's `onSubmit` event. The only way to get it to do so, is to wrap the submit button in an additional `<form>` element that is inside the portal as well. When this is done, then event bubbles up to _both_ forms, and the original, outer form's `onSubmit` is triggered as desired.\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Write a simple form element that contains a React `Portal`, such as a modal. \r\n2. Inside the`Portal`, add a submit button, e.g. `<button type='submit'>submit</button>`.\r\n3. Click the submit button inside the portal.\r\n\r\n### Workaround\r\n4. Inside the `Portal`, wrap the submit button you've made in an additional `form` element.\r\n5. Click the submit button inside the portal.\r\n\r\nLink to code example: https://codesandbox.io/s/new-dust-b6hoh?file=/src/App.tsx\r\n\r\n## The current behavior\r\nClicking the button inside the portal does not result in the form being submitted.\r\nClicking the button inside the portal with an additional form element results in both forms being submitted.\r\n\r\n## The expected behavior\r\nThe form outside of the portal is submitted by the portal's submit button (without including any additional form elements).","state":"open","updated_at":"2023-07-02T20:09:09Z","created_at":"2021-09-30T06:35:02Z","creator_user_login":"jviall"}
{"number":22439,"title":"(continued) Warning when input elements don't reference onChange - does React like event bubbling?","body":"Continuation of the following issue:\r\n\r\n[**Inaccurate warning when value props is set without onChange.**\r\n](https://github.com/facebook/react/issues/1118)\r\n\r\nWhere a clear example in a new issue was [requested](https://github.com/facebook/react/issues/1118#issuecomment-333411651).\r\n\r\nSince it has gathered some popular comments since then, here is a new issue.\r\n\r\nIt is fully appreciated that this may be an annoying edge case that already has a workaround, but it still seems to crop up quite often in forums, Stackoverflow and while teaching React.\r\n\r\n### Issue\r\n\r\nIf someone wanted to structure their app making use of event bubbling, and as such, only requiring assigning one event handler to a parent element.\r\n\r\n```jsx\r\nfunction App() {\r\n  const [state, setState] = useState(\"test\")\r\n  return (\r\n    <div onChange={(e) => setState(e.target.value)}>\r\n      <input value={state} />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nThey will get a warning that the input element doesn't have an `onChange` handler.\r\n\r\nhttps://codesandbox.io/s/onchange-warning-wzswb?file=/src/App.js\r\n\r\nThe warning can be suppressed by adding a blank function to the input element:\r\n\r\n```\r\n<input value={state} onChange={()=>{}}/>\r\n```\r\n\r\nOf course, in this example the same function used on the parent div can be applied to the input element, but if there were many input elements that could be handled by the same event handler, it means that you need to reference the event handler in all of the input elements.\r\n\r\n```\r\n<input onChange={changeHandler}/>\r\n<input onChange={changeHandler}/>\r\n<input onChange={changeHandler}/>\r\n```\r\n\r\nOr if you wanted to use event bubbling with only one reference to the handler, to suppress the warnings you can:\r\n\r\n```\r\n<input onChange={()=>{}}/>\r\n<input onChange={()=>{}}/>\r\n<input onChange={()=>{}}/>\r\n```\r\n\r\n### TLDR of discussion in original issue\r\n\r\nThe main point of contention is the warning that pollutes the console. You can refactor to reference the `onChange` handler in all the input elements as is shown in the docs but that gets tedious and repetitive for large forms.  Having to attach an empty function to suppress warnings is a workaround but is also tedious and repetitive.\r\n\r\nThe warning may be good for people learning how to think in React but the fact that it is sometimes inaccurate is problematic. That is, its not clear whether using event bubbling goes against best practice or not. The warning just says that there is no `onChange` handler which is not always true. Using event bubbling to send information back up the tree seems to go against the idea of using React state to do that job. In either case, both ways work and can be done within React, however, relying on event bubbling causes the warning on the console.\r\n\r\nIs using event bubbling against the React way? Or is React just agnostic towards it?\r\n\r\nAssuming its not against it, for complex forms that take advantage of event bubbling, the error pollutes the console and a way to silence this specific error (or perhaps specific errors in general) without having to flag every single input would be appreciated.\r\n\r\n### Potential solutions proposed\r\n\r\n- Disable this warning completely.\r\n- Implement a way to disable this particular warning.\r\n- Make a \"beginner\" category of warnings that can be disabled.\r\n- Make it so that event bubbling in this way is just not allowed (please no).\r\n- Document the event bubbling approach and make it clear that using this way will generate warnings because its against the React way.\r\n- Change the warning text to make clear that there may be an `onChange` handler further up the tree that it is not detecting, and/or that handlers should always be referenced by each input.","state":"open","updated_at":"2022-06-22T09:17:01Z","created_at":"2021-09-27T09:11:53Z","creator_user_login":"iansedano"}
{"number":22431,"title":"Fix missing else in ReactDOMServerFormatConfig.js","body":" Removed else statement from ReactDOMServerFormatConfig.js\r\n Else statement was redundant since value is set anyways.\r\n Solves bug 22309.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\nThis PR removes redundant code from the ReactDOMServerFormatConfig.js file.\r\nAs discussed here [22309](https://github.com/facebook/react/issues/22309)\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\nTested it using \r\nyarn prettier\r\nyarn linc\r\nyarn build and test\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n","state":"open","updated_at":"2021-10-16T05:36:07Z","created_at":"2021-09-26T10:43:06Z","creator_user_login":"Hyperion101010"}
{"number":22425,"title":"modified eslint error message ","body":"Here top level errors looks a bit confusing for the developers.further they are directed to rules of hooks page and it mentions that \"Hooks are called only at the top level\" whereas the message reads \"React hooks cannot be called at the top level\".\r\n\r\nI feel this commit clarifies the error message and also keeps it in check with the documentation","state":"open","updated_at":"2022-02-01T15:52:44Z","created_at":"2021-09-25T12:45:57Z","creator_user_login":"Biki-das"}
{"number":22411,"title":"Bug: How can I use react.lazy in \"config.output.libraryTarget = 'umd'\"","body":" \r\nReact version: \"^16.14.0\"\r\n\r\n## Steps To Reproduce\r\n\r\n1. create app with \"create-react-app\"\r\n2. install \"react-app-rewired\"\r\n3. set webpack config like \r\n```js\r\nwebpack: (config, env) => {  \r\n    config.output.library = 'api-manage';\r\n    config.output.libraryTarget = 'umd';\r\n    config.output.umdNamedDefine = true;\r\n    config.output.globalObject = 'this';\r\n    config.output.publicPath = '//localhost:7777';\r\n    // config.output.filename = 'api-manage.js';\r\n    config.output.jsonpFunction = `webpackJsonp_api-manage`; \r\n    return config;\r\n  }\r\n```\r\n4. package.json\r\n```json\r\n\"micro\": \"react-app-rewired start\"\r\n```\r\n5. route \r\n```js\r\n// run good\r\nimport Application from './ApplicationManage';\r\n<Route\r\n    path={`${requestedUrl}/application-manage`}\r\n    component={ Application  }\r\n  />\r\n\r\n// run not correct\r\n<Route\r\n    path={`${requestedUrl}/application-manage`}\r\n    component={lazy(() => import('./ApplicationManage'))}\r\n  />\r\n``` \r\n6. run \"yarn micro\"\r\n7. the error messages\r\n```bash\r\nindex.js:1517 The above error occurred in one of your React components:\r\n    in Unknown (created by Context.Consumer)\r\n    in Route (at CommonOperation/index.js:26)\r\n    in Switch (at CommonOperation/index.js:23)\r\n    in Suspense (at CommonOperation/index.js:22)\r\n    in CommonOperation (created by Context.Consumer)\r\n    in Route (at routes/index.js:48)\r\n    in Switch (at routes/index.js:47)\r\n    in Routes (at App.js:17)\r\n    in div (created by Styled(MuiBox))\r\n.......\r\n```\r\n \r\n","state":"open","updated_at":"2022-01-08T23:43:06Z","created_at":"2021-09-24T03:50:15Z","creator_user_login":"haoyinag"}
{"number":22366,"title":"Bug: ReactDOM.createPortal does not reflect the new state of the container element, and no way of being notified (like via callback) of changes","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a element node XYZ using `document.createElement` to act as the container\r\n2. Render a React component element into it with `ReactDOM.createPortal`\r\n3. Check the children of element node XYZ immediately after using `ReactDOM.createPortal`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/fervent-orla-2egh7?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe React component element to be rendered into the container cannot be accessed immediately after the `ReactDOM.createPortal` call. For example, in this case, the number of children in the container is still 0. \r\n\r\nThere is no callback available to provide into `createPortal` to be notified of when the container has been updated with the React component element\r\n\r\n## The expected behavior\r\nThe `children` property of the container element should reflect the new children that has been added into the container, or a callback would be available to be notified of when the component has been updated and rendered with the children. \r\n\r\nIn this case, the number of children in the container should be 1.\r\n\r\n\r\n\r\n**Side Note**: Is there anyway to be notified of the container element being updated with the new child element, similar to the callback argument available with `ReactDOM.render`? I'd use that API, but it does not pass context, which is needed for the child component in my advanced case.","state":"open","updated_at":"2021-11-14T00:47:59Z","created_at":"2021-09-20T15:33:46Z","creator_user_login":"cjativa"}
{"number":22357,"title":"Generate aria attribute data using an array","body":"Save more than two hundred characters of space.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nThe aria attribute defined in the file has a large number of duplicate strings, and this PR saves a lot of space.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nThis is the result of commit.\r\n![image](https://user-images.githubusercontent.com/1947344/133935177-77b610f6-1b46-4dab-8885-24645eb5bab0.png)\r\n\r\n","state":"open","updated_at":"2022-01-25T13:51:43Z","created_at":"2021-09-19T16:27:37Z","creator_user_login":"limichange"}
{"number":22349,"title":"Bug: I was contributing to selenium ide and I got problem with input. If I complete input from autocomplete suggestions. State update did'nt reflect. Morever it throws exception \" expected keyboard error but got mouse event'","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-01-08T23:43:20Z","created_at":"2021-09-17T21:44:29Z","creator_user_login":"aliwasif177"}
{"number":22343,"title":"Bug: Wrong warning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. click show button\r\n2. click close button\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/nodewarning-9fu7n\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe console will print “Warning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.”\r\n![image](https://user-images.githubusercontent.com/31609229/133753965-7e3c198a-2b75-44c2-820b-42e839e7f163.png)\r\n\r\n## The expected behavior\r\nThe console will not print this warning.\r\n\r\nI studied the test case for this warning. The Dialog component was rendered and unmounted by the same ReactDOM. This is a false warning. ","state":"open","updated_at":"2022-01-08T23:43:16Z","created_at":"2021-09-17T08:55:44Z","creator_user_login":"amorphousDj"}
{"number":22340,"title":"Bug: broken app when namespaced tags in JSX","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  ```\"react\": \"^17.0.1\"```\r\n\r\n## Steps To Reproduce\r\nTrying to generate a sitemap.xml.jsx  got broken the moment i try to use namespaced tags\r\n\r\nLink to code example:  https://codesandbox.io/s/sitemap-wrong-ovyez?file=/src/sitemap.xml.jsx\r\n\r\n## The current behavior\r\nError message, app broken: \r\n\r\n`Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.`\r\n\r\nFailed tries:\r\n- ❌ camelCase tag -> xhtmlLink\r\n- ❌ custom createElement using PascalCase -> xhtmlLink\r\n- ❌ interpolation tag creation  const customTag = () => <`xhtml:link` />\r\n\r\n## The expected behavior\r\nApps working with a workaround for this.\r\nnote i'm asking for namespaced tag bug, not attributes, actually you can see a namespaced attribute working in the sample using interpolation.\r\n\r\n\r\nTo see the error message in the preview window click the right button side to the url **Current module view**\r\n","state":"open","updated_at":"2022-01-08T23:43:23Z","created_at":"2021-09-16T19:43:21Z","creator_user_login":"HectorLS"}
{"number":22339,"title":"RFC: Parsing hook names should display better error messages","body":"## Proposal\r\n\r\nWhen attempting to extract hook names for an inspected element, if source maps aren't available or they fail to load for some reason, the UI doesn't show any indication of that happening, and instead silently \"succeeds\", but without showing any actual hook names.\r\n\r\nWhen this happens, we should probably handle it differently:\r\n\r\n- If we can detect that the source code wasn't actually transformed at build time, continue attempting to extract hook names from the original source code.\r\n- If we can detect that the source code /was/ transformed at build time, but we don't have source maps available, show an error to the user","state":"open","updated_at":"2021-10-12T03:54:33Z","created_at":"2021-09-16T19:17:47Z","creator_user_login":"jstejada"}
{"number":22331,"title":"Bug: Incorrect escaping inside `style` tags","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIn general, only backslashes escape things in CSS, while HTML entities are only treated by CSS as plain text.\r\n\r\nDespite this, `ReactDOMServer.renderToString` escapes HTML special characters (e.g. `&`, `<`, `>`, `\"`, `'`) into HTML entities (e.g. `&amp;`, `&lt`, etc.) that are inside a `style` element, even if it makes the stylesheet invalid or transforms it to be different from what is intended in many cases. For example, when writing a CSS `\"string\"`, it is transformed into `&quot;string&quot;`, which is invalid CSS.\r\n\r\nAdditionally, client-side, `ReactDOM.render` does _not_ escape HTML special characters within `style` elements at all, even though it should be escaping `<` and `>` into `\\<` and `\\>` respectively (as it should on the server as well). Not doing this causes an inconsistency between client and server rendering in isomorphic apps. For me, this logs a warning in dev mode that looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/14056899/133551386-a1194ff3-3678-4e26-a798-2a9a3c551c6f.png)\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Write any HTML special characters into a React `style` element anywhere in your app.\r\n2. Call `ReactDOMServer.renderToString` on your app.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jsfiddle.net/3qnsxept/\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nHTML special characters are escaped unnecessarily and/or incorrectly inside `style` elements outputted by `ReactDOMServer.renderToString`, often invalidating the stylesheet and/or making it inconsistent with what's rendered client-side.\r\n\r\nFor example, the JSX `<style>{'body::before { content: \"\\</style>\"; }'}</style>` currently outputs the HTML `<style>body::before { content: &quot;\\&lt;/style&gt;&quot;; }</style>` server-side, which is invalid, and it outputs the HTML `<style>{'body::before { content: \"\\</style>\"; }'}</style>` client-side, which is inconsistent.\r\n\r\n## The expected behavior\r\n\r\nThere should be no HTML escaping within `style` elements outputted by `ReactDOMServer.renderToString`, just like `ReactDOM.render`. The only exception is that `<` and `>` within `style` elements should escape to `\\<` and `\\>` (if they are not already escaped) to avoid XSS, which is a change that should be implemented for both client-side and server-side rendering in order to support isomorphism.\r\n\r\nFor example, the JSX `<style>{'body::before { content: \"\\</style>\"; }'}</style>` should output the HTML `<style>body::before { content: \"\\</style\\>\"; }</style>` both client-side and server-side.","state":"open","updated_at":"2022-01-09T03:43:15Z","created_at":"2021-09-16T04:55:02Z","creator_user_login":"GrantGryczan"}
{"number":22319,"title":"[DevTools Bug]: Hook names fail to parse if source file for Component is an html file","body":"When testing our fixture in Safari (`./fixtures/devtools/standalone/index.html`) with the standalone build if DevTools, I noticed that we were unable to parse hook names because the source file where the components are defined isn't a JavaScript file, and instead an HTML file (as in `index.html`), which contains HTML code, and some JS inside script tags, so the babel parser fails to parse the file.\r\n\r\nSpecifically:\r\n\r\n```javascript\r\n// parseSourceAndMetadata.js\r\n\r\nconst originalSourceAST = withSyncPerfMeasurements(\r\n  '[@babel/parser] parse(originalSourceCode)',\r\n  () =>\r\n    parse(originalSourceCode, {\r\n      sourceType: 'unambiguous',\r\n      plugins: ['jsx', plugin],\r\n    }),\r\n);\r\n```\r\nIn the above code, the call to `parse` fails because `originalSourceCode` is actually html (with JS inside) like:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>TODO List</title>\r\n\r\n    <!-- ... -->\r\n\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"text/javascript\">\r\n      const { useState } = React;\r\n\r\n      function App() {\r\n        const [count, setCount] = useState(0);\r\n        return null;\r\n      }\r\n\r\n      ReactDOM.render(React.createElement(App), document.getElementById(\"root\"));\r\n    </script>\r\n  </body>\r\n```\r\n\r\nAnd `parse` expects actual JS code.\r\n\r\nDevTools should handle the case when source files aren't JS files, and still be able to extract out the hook names, or fail more gracefully. As of #22320, we log to the console a slightly better error message when this happens, as opposed to an obscure parsing error.\r\n\r\n### Repro steps\r\n\r\n1. Run standalone app\r\n2. Open fixtures file in safari: ./fixtures/devtools/standalone/index.html\r\n3. Try getting hook names, observe that parsing source files fails","state":"open","updated_at":"2021-12-04T10:55:44Z","created_at":"2021-09-14T21:35:28Z","creator_user_login":"jstejada"}
{"number":22316,"title":"Enable new console override behavior for React Native","body":"@feedthejim has landed a change in Metro to sync DevTools preferences to React Native synchronously as part of the initial React Native payload (in DEV only). Metro gets these preferences from the DevTools frontend by listening to the (already existing/deployed) sync message sent from the DevTools frontend to backend, so no changes are required on the DevTools side.\r\n\r\nThat being said, we do need to change (and test) the following feature flags to enable the new console logging feature for both React Native and DevTools:\r\n\r\nhttps://github.com/facebook/react/blob/50263d3273b6fc983acc5b0fd52e670399b248b1/packages/shared/ReactFeatureFlags.js#L181\r\n\r\nhttps://github.com/facebook/react/blob/50263d3273b6fc983acc5b0fd52e670399b248b1/packages/react-devtools-shared/src/config/DevToolsFeatureFlags.default.js#L20","state":"open","updated_at":"2021-10-12T15:48:01Z","created_at":"2021-09-14T17:40:15Z","creator_user_login":"bvaughn"}
{"number":22315,"title":"Bug: Native Component Stacks don't respect function \"displayName\" in Firefox","body":"**Edit** See this comment for the key part of what's being reported/discussed on this issue: https://github.com/facebook/react/issues/22315#issuecomment-920061727\r\n\r\n# Original bug report below\r\n\r\nAs of #18561 component stacks are generated from native stack frames. This is problematic with HOCs that inherit from the input component in order to change its behavior. The somewhat popular @risingstack/react-easy-state package is one example of such a component. While it does assign a `displayName`, the new Native Component Stacks appear to ignore this. Instead, components wrapped in `view()` (from react-easy-state) are always shown with the name of the wrapper class, i.e., `ReactiveComp` or `ReactiveClassComp`.\r\n\r\nThis is especially catastrophic in the case of react-easy-state, where one is supposed to wrap essentially *all components in the entire codebase* in the `view()` HOC. The result is that component stacks become unusable for debugging.\r\n\r\nIs there perhaps a way to work around this (e.g. disable native component stacks, or some new way to explicitly provide a component name like `displayName`)?\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Apply a HOC that uses inheritance (i.e., inherits from the component instead of wrapping it in JSX) to a component.\r\n2. The component will always be named `ReactiveComp` or `ReactiveClassComp` in component stack traces.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/rough-tdd-wqepe?file=/src/App.tsx\r\n\r\n## The current behavior\r\n\r\n```\r\nSomething went wrong.\r\nError: sorry\r\n\r\nBadGuy@https://7ww9j.csb.app/src/App.tsx:21:9\r\nErrorBoundary@https://7ww9j.csb.app/src/App.tsx:33:5\r\ndiv\r\nApp\r\n```\r\n```\r\nSomething went wrong.\r\nError: sorry\r\n\r\nReactiveComp@https://7ww9j.csb.app/node_modules/@risingstack/react-easy-state/dist/es.es6.js:62:53\r\nErrorBoundary@https://7ww9j.csb.app/src/App.tsx:33:5\r\ndiv\r\nApp\r\n```\r\n\r\nNote how the component wrapped in `view()` is shown as `ReactiveComp` instead of either the function name or the explicitly assigned `displayName`.\r\n\r\n## The expected behavior\r\n\r\nThe name of the `ReactiveComp` wrapper should never appear in component stacks.","state":"open","updated_at":"2023-07-13T18:52:51Z","created_at":"2021-09-14T17:24:45Z","creator_user_login":"main--"}
{"number":22314,"title":"[React 18] Optimized React Server Components's webpack bundling","body":"In a chat between Facebook and Shopify about React Server Component, @sebmarkbage had mentioned the need to improve React Server Component's bundling strategy in webpack.\r\n\r\n> The main thing is that by default you end up with way too many small chunks. You could use a telemetry based heuristic to inform bundling but without it, we think the best guidance is to analyze the server component's graph to group client components together by which server components use them.\r\nWe expect that the server will need to be built too, as a separate graph since best perf is gained when you prebuild the server anyway.\r\nSo it might be that the best API is building the server first and then using the data from that as input to building the client.\r\n\r\nLooking at [RSC demo app](https://github.com/reactjs/server-components-demo), there are a total of 8 `*.client.js` files, and 5 of them ended up as separate bundles using the current [webpack plugin](https://github.com/facebook/react/blob/main/packages/react-server-dom-webpack/src/ReactFlightWebpackPlugin.js).\r\n\r\nThis issue’s main goal would be to investigate the current webpack plugin implementation and figure out any optimization that can be applied while keeping in mind React core team’s guidance of “building the server first and then using the data from that as input to building the client.” as an initial starting point.","state":"open","updated_at":"2021-12-21T21:43:30Z","created_at":"2021-09-14T16:34:46Z","creator_user_login":"michenly"}
{"number":22309,"title":"Bug: missing `else` statement in ReactDOMServerFormatConfig.js","body":"I found this bug while working on an unrelated PR #22064. Looks like there's a missing `else`, because the `value` set in line 978 is always overwritten in line 980.  Given that `children.toString()` and `children[0].toString()` will return the same string for one-element arrays, I assume the best (for perf and bundle size) fix would be to remove the assignment inside the `if` block. \r\n\r\nhttps://github.com/facebook/react/blob/fd5e01c2e0dbbeaff954d13fc6bc11bfc65e7dcf/packages/react-dom/src/server/ReactDOMServerFormatConfig.js#L973-L980\r\n\r\nBecause the observable behavior is identical whether or not `children` is a scalar or a one-element array, I'm not sure a test could be written to verify a fix.\r\n\r\n_EDIT: I updated the text above after I learned that `Array.prototype.toString()` acts the same as `Array.prototype.join()`.  JavaScript teaches me something new every day!_","state":"open","updated_at":"2022-01-08T23:43:11Z","created_at":"2021-09-14T01:13:29Z","creator_user_login":"justingrant"}
{"number":22306,"title":"feat(eslint-plugin-react-hooks): support componentWrapperFunctions option","body":"Related to https://github.com/facebook/react/issues/21422\r\n## Summary\r\n\r\nCurrently, if you provide a function not starting with an upper-case letter, `rules-of-hooks` is pretty much a no-op.\r\nWhile it's a rather alright behavior for most of the time, there are cases where people tend to use an arrow function instead, mostly when using some HOCs.\r\nAlthough one can fix the code quite easily (arrow fn -> fn with a proper name), it's still relatively tedious if you lots of components not following the guidelines, and you're unable to perform a more automated refactoring.\r\nHaving an escape hatch might be fairly useful until you refactor the code. \r\n\r\nNo hard feelings if this doesn't get through - I do realize the option may make it temptive for some to not obey the guidelines.\r\n\r\n## How did you test this change?\r\n\r\n- applied a git patch to the existing instance of eslint-plugin-react-hooks and used it in my own project\r\n- tests\r\n","state":"open","updated_at":"2022-05-02T16:11:12Z","created_at":"2021-09-13T19:58:23Z","creator_user_login":"P0lip"}
{"number":22305,"title":"[react-hooks/exhaustive-deps] option request: ignoreFunctions or ignoreMethods","body":"### What I would like:\r\n\r\n```js\r\n    \"react-hooks/exhaustive-deps\": [\"error\", {\r\n      \"ignoreFunctions\": true\r\n    }]\r\n```\r\nresults in:\r\n```js\r\nconst history = useHistory();\r\nconst log = (x) => console.log(x)\r\n\r\nuseEffect(() => {\r\n  log(props.foo); // no error\r\n  props.onChange(props.foo); // no error\r\n  history.push(props.foo) // no error\r\n  \r\n  log(props.bar); // error!\r\n}, [props.foo]);\r\n\r\n\r\n```\r\n\r\n### Why:\r\n\r\nI typically do not want to re-execute an effect just because a function I call inside the effect changes its identity. Same with an object which is only used to call a method.\r\n\r\nI noticed this with react-router's `history.push()` – I want to navigate based on other things, not whether react-router has decided that the `history` object or its `push` method have changed identity (in the abstract, I can't control or predict a library's behavior in this way).\r\n\r\nThere may be some codebases where it is typical to wish to re-execute an effect when a method's object or function changes its identity, which is why I suspect this should be an option rather than the default behavior.\r\n\r\n### Motivating example:\r\n\r\nThis was the code I was writing which inspired this:\r\n\r\n```ts\r\nimport { useHistory, useParams } from \"react-router\";\r\n...\r\nconst { subpage } = useParams();\r\nconst history = useHistory();\r\n\r\nuseEffect(() => {\r\n  // I don't want to re-run this effect if `history` changes.\r\n  if (!subpage) {\r\n    history.push(`/my-page/my-default-subpage`);\r\n  }\r\n}, [subpage]);\r\n```\r\n\r\nHowever, I believe that this change would also assuage the desires of participants in this issue: https://github.com/facebook/react/issues/16265","state":"open","updated_at":"2023-03-31T12:18:32Z","created_at":"2021-09-13T17:35:38Z","creator_user_login":"rattrayalex"}
{"number":22300,"title":"Bug: react-dom Portal does not load on re-render with functional component","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.8.5\r\n\r\n## Steps To Reproduce\r\n\r\n1. On initial load, \"Portal\" loads up a \"Modal\" as child element when the code is extracted to a functional component\r\n2. On state change, it does not re-render. But does work if the code is inline instead of a functional component\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nWorks --> successMessage ? <NewModal title={' '} buttons={[{text: 'Close', onClick: goToLicences}]}> <SuccessMessage/> </NewModal> : </>\r\n\r\nDoes not work --> \r\nconst SuccessModal = () =>  <NewModal title={' '} buttons={[{text: 'Close', onClick: goToLicences}]}> <SuccessMessage/> </NewModal>;\r\nsuccessMessage ? <SuccessModal/> : </>\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-01-08T23:43:26Z","created_at":"2021-09-13T06:10:41Z","creator_user_login":"swathisainadh"}
{"number":22287,"title":"Bug:  The onChange synthesis event is not propagation when the child node is added through dangerouslySetInnerHTML","body":"The onChange synthesis event is not propagation when the child node is added through dangerouslySetInnerHTML.\r\n\r\nReact version: v17.0.2\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/restless-rain-otyzx?file=/src/App.js\r\n\r\n## Steps To Reproduce\r\n\r\n1. click the radio input element\r\n2. see logging in console\r\n\r\n## The current behavior\r\n1. ✅  onClick event is propagation\r\n2. ❌ onChange event is not propagation\r\n\r\n## The expected behavior\r\n\r\n1. onClick event is propagation\r\n2. onChange event is propagation\r\n","state":"open","updated_at":"2021-10-31T05:05:04Z","created_at":"2021-09-10T03:46:56Z","creator_user_login":"iwfan"}
{"number":22286,"title":"Feature Idea: React.useConditional(key, () => { ... }) for conditional and dynamic hooks","body":"I use `@apollo/react-hooks`' `useQuery` a lot, and recently I've had some cases where I needed to call `useQuery` for each item in an array.\r\n\r\nIn most idiomatic use cases, each item would map to a separate element UI, so I could have a custom component that performs a single `useQuery` and renders that list item.\r\n\r\nBut I have a use case where I'm fetching data for a dynamic list of historical data channels and then rendering data for all of them onto a single HTML canvas.  So I have to render a dynamic number of child elements that call `useQuery` once, stash the data in a ref from the parent element, and `return null`.\r\n\r\nI've also had users of my `material-ui-popup-state` custom hook asking me how to map an array to hook calls.\r\nFortunately I was able to find a cleaner solution for them.\r\n\r\nBut, I'm starting to believe that the need for conditional/dynamic hooks is inevitable.  There would be ways to avoid multiple `useQuery` calls in my use case, but they wouldn't be ideal (passing a list of tags to a single query, for example, could end up refetching a bunch of tags that are already cached when just one new tag is added).\r\n\r\nWould an API like `React.useConditional` in the following be possible?\r\n\r\n```js\r\nimport * as React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nfunction ConnectedPlot({ tags }) {\r\n  const results = tags.map(tag => React.useConditional(\r\n    tag,\r\n    () => useQuery(metadataQuery, { variables: { tag } })\r\n  ))\r\n  if (results.some(r => r.loading)) return <LoadingBanner />\r\n  const error = results.find(r => r.error)\r\n  if (error) return <ErrorBanner error={error} />\r\n\r\n  const metadataByTag = Object.fromEntries(results.map(r => [r.data.MetadataItem.tag, r.data.MetadataItem]))\r\n\r\n  return <Plot tags={tags} metadataByTag={metadataByTag} />\r\n}\r\n```\r\n\r\nThe first argument to `React.useConditional` would be a unique key, just like keys on React elements.\r\n\r\nThe second argument would be a function that may call any builtin or custom hooks the user likes.  Within that function, the same old rules of hooks would apply: all hook calls must be unconditional and in the same order as last time (for the particular key).  Only calls to `React.useConditional` could be conditional.\r\n\r\nI'm assuming it would be possible for React to do bookkeeping before and after it calls the callback to keep track of which hooks it called, and compare the keys from the previous render to the next, performing mounting effects for hooks in keys that were added and unmounting effects for hooks in keys that weren't reused.","state":"open","updated_at":"2021-10-19T21:43:23Z","created_at":"2021-09-10T02:49:40Z","creator_user_login":"jedwards1211"}
{"number":22274,"title":"DevTools: Profiling tool improvements umbrella","body":"I met with @lahmatiy this afternoon to chat about his project [react-render-tracker](https://github.com/lahmatiy/react-render-tracker). Here are a few pain points mentioned during the meeting:\r\n* Not clear when a component/tree is unmounted/remounted.\r\n* DevTools typically displays data for a component in current update (e.g. the latest) but doesn't represent changes over time.\r\n* It isn't always clear why something updates (e.g. why did context change higher up, what was the flow of props/state above that resulted in a new prop)\r\n* It's difficult to detect when effects re-run unexpectedly due to dependency problems. (Nothing really reports this.)\r\n\r\nThis is an umbrella issue for some ideas I wrote down during the discussion that might be good additions to the React DevTools/Profiler. The items listed below may be worked on independently– and some may turn out to be not worth doing (but they seem worth discussing and considering).\r\n\r\n## Legacy profiler\r\n\r\n### Track changed values\r\nThe Profiler currently has an opt-in setting for detecting _why_ something re-rendered, but all this does is show the name of the state/prop that changed. Should we also add a setting to display the changed value?\r\n\r\nWe shied away from doing this for a long time because:\r\n* We didn't want to incur the cost of serializing deep object structures during a profiling session.\r\n* Without eagerly serializing an object, we don't have a solution for mutable values. (We can't serialize these later since they may have changed.)\r\n\r\nMaybe there are some ways to address the above concerns though? For instance, we could reduce the amount of data we needed to eagerly serialize by:\r\n* Only serialize values that _changed_ between renders. (This would avoid the mutable object scenario.)\r\n* Only serialize _parts_ of an object that changed. (See [here](https://github.com/lahmatiy/react-render-tracker/blob/39d598aaa12274cb8a015dacf55b68687bde7d8d/src/publisher/react-integration/devtools-hook-handlers.ts#L356-L374) for possible precedent.)\r\n\r\nPerhaps this, combined with making the setting opt-in, would enable us to add this feature.\r\n\r\n### Explicitly display unmounts\r\nThe DevTools profiler only displays components that were _committed_ (e.g. visible on the screen at the point in time when work was committed), but React also spends time unmounting components– and perhaps an unmount isn't expected in some cases (e.g. when a wrapper object is added and React deeply unmounts and remounts a tree).\r\n\r\nShould we show some sort of rollup (e.g. at the commit level) for components that were un-mounted too? This way they wouldn't be invisible an easy to overlook.\r\n\r\n### Viewing changes for a subtree across time\r\nThe Components tab allows you to explore the entire application tree, or double-click to drill into what we call the [\"owners tree\"](https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md#owners-tree)– the list of things rendered by a particular component (the things it \"owns\").\r\n\r\nMaybe the Profiler could provide a similar method to drill into a component (e.g. double-clicking it) to then provide a snapshot of how that component changed over time? This might make it easier to discover things like unmounts/remounts within a known scope. (Or maybe we could also show other component-level summary stats when in this mode?)\r\n\r\n## Scheduling profiler\r\n\r\n### Explicit unmount/mount markers\r\nShould we add component un-mounts/mounts as explicit marks in the new profiler? Profiling tools currently focus on the time spent _rendering_ (or perhaps mounting) a component, but unmounts are somewhat hidden. (Perhaps more importantly, unexpected _remounts_ are not highlighted enough.)","state":"open","updated_at":"2022-01-11T13:37:16Z","created_at":"2021-09-08T18:51:28Z","creator_user_login":"bvaughn"}
{"number":22272,"title":"Feature Request - useEffect - Provide boolean values on whether dependency has changed.","body":"Couldn't find this feature request already (though it sounds like you probably definitely got it) but it would be really great if dependencies could be forwarded in the useEffect function props and converted to a boolean declaring whether the dependency has changed (aka caused a re-render) or not. \r\n\r\nFor example:\r\n\r\n```js\r\nuseEffect((firstDepChanged, secondDepChanged) => {\r\n  if(secondDepChanged) {\r\n    console.log('Do Something with both deps but only when secondDepChanged');\r\n    console.log(firstDep, secondDep);\r\n  }\r\n}, [firstDep, secondDep])\r\n```\r\n\r\nI can imagine that this could result in some performance decrease but we could consider making a dedicated version of `useEffect` like `useObservableEffect` or something like that (I'm not great at naming so i'm sure the community can come up with a better name :D)\r\n\r\nCurrently we use a workaround which requires using a ref to hold the previous values and comparing them inside the useEffect.\r\n\r\nI'm sure there are plenty of other options like adding a third prop to useEffect indicating the indexes of the dependencies that would trigger the update. Something like:\r\n\r\n```js\r\nuseConditionalEffect(() => {\r\n  console.log('Do Something with both deps but only when secondDep changed');\r\n  console.log(firstDep, secondDep);\r\n}, [firstDep, secondDep], [1])\r\n```\r\n\r\nThis solution could also improve performance as we would preventatively know which dependencies to watch.","state":"open","updated_at":"2022-02-18T15:00:18Z","created_at":"2021-09-08T15:04:53Z","creator_user_login":"yamarco"}
{"number":22267,"title":"Webpack 5 Upgrade","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\nUpgrading devtools builds to work with webpack 5\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI ran the build and it passed\r\n","state":"open","updated_at":"2022-01-08T23:42:05Z","created_at":"2021-09-08T04:17:49Z","creator_user_login":"ScriptedAlchemy"}
{"number":22254,"title":"Bug: Rules of Hooks should not allow passing a Hook as a function argument","body":"See failing test in https://github.com/facebook/react/pull/22044.\r\n\r\nEven if the PR gets stale, we should implement this check because currently it lets you circumvent the rule.","state":"open","updated_at":"2022-02-03T20:47:36Z","created_at":"2021-09-06T19:30:25Z","creator_user_login":"gaearon"}
{"number":22243,"title":"Is there any action/license should be taken/granted for conducting a React conference","body":"Hello there,\nI'm thinking of conducting a conference related to React in my country such as the conferences listed in the following page in react docs: https://reactjs.org/community/conferences.html\n\nIs there any license I should receive from React's side or it is totally free to do that with no permissions/license?","state":"open","updated_at":"2022-01-30T22:15:13Z","created_at":"2021-09-03T17:43:09Z","creator_user_login":"AhmeeedMostafa"}
{"number":22230,"title":"remove console.error for useLayoutEffect on server","body":"Hi! Removed console error of this:\r\n\r\n> Warning: useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.\r\n\r\nThis text is not true since there are cases that do not lead to mismatch, e.g., useLayoutEffect on some property change that is not supposed to run on initial render. Therefore we can useLayoutEffect on server and error should not be displayed in console. \r\n\r\nError is quite annoying to see in build logs, it is not helpful in described case, it makes difficult to see helpful information in logs: for me there are hundreds of lines of this useless information.","state":"open","updated_at":"2022-01-08T23:42:16Z","created_at":"2021-09-01T11:31:09Z","creator_user_login":"sk1e"}
{"number":22217,"title":"Dynamic chunkFileName added  #22115","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nfixes  #22115\r\nMagic comments work once you remove dynamic-imports-webpack from babel plugins\r\n","state":"open","updated_at":"2022-01-08T23:42:15Z","created_at":"2021-08-31T07:17:06Z","creator_user_login":"aditianshu"}
{"number":22214,"title":"Bug: Nested ReactDOMServer.renderToString calls cause React hooks to throw invalid hook exception","body":"When you make a nested ReactDOMServer.renderToString call (i.e. call ReactDOMServer.renderToString from within a component rendered using ReactDOMServer.renderToString), you can not use any hooks after the second call. Custom hooks work, but React hooks throw a invalid hook call error.\r\nNot sure if this is an acceptable use case for ReactDOMServer, this is how a current project is setup, I am just making some additional hook calls and encountered this error. I have replicated the issue on a fresh React app with nothing else.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Createa a component, ComponentA\r\n2. In ComponentA make a call to ReactDOMServer.renderToString, and then use a React hook (useState, useContext etc.)\r\n3. In the main app render ComponentA via ReactDOMServer.renderToString (ReactDOMServer.renderToString(<ComponentA />)\r\n\r\nLink to code example: https://codesandbox.io/s/sweet-kate-etr68\r\n## The current behavior\r\nThrows an invalid hook call exception\r\n\r\n## The expected behavior\r\nWork as usual, hooks working as normal.","state":"open","updated_at":"2023-08-16T06:42:03Z","created_at":"2021-08-30T17:24:22Z","creator_user_login":"burhanbvk"}
{"number":22213,"title":"remove superfluous runtime type check","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nfn is typed as `Function` in the `describeNativeComponentFrame` argument list, so runtime checks here are redundant and will incur code analysis warnings with some tools.\r\n\r\n## Test Plan\r\n\r\n- [x] yarn linc\r\n- [x] yarn test","state":"open","updated_at":"2022-01-08T23:42:14Z","created_at":"2021-08-30T16:50:11Z","creator_user_login":"matthargett"}
{"number":22212,"title":"Bug: input onChange not triggered when input value is changed through ref current stepDown/Up functions","body":"Input with type number does not trigger onChange if native stepper functions are called through react ref current like this:\r\n\r\n`inputRef.current.stepDown();`\r\n\r\nIf you press the step functions of a fully native (no react) number input, then the onChange will get called. But somehow it will not get called if they are called through react refs.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1.  git clone  https://github.com/City-of-Helsinki/helsinki-design-system.git\r\n2. git checkout a01414b3a4305e41b3e317a6654593d2ba2737c6\r\n2. cd helsinki-design-system and install dependencies with `yarn`\r\n3. cd packages/react and run `yarn test`\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/City-of-Helsinki/helsinki-design-system/blob/fix/number-input-on-change/packages/react/src/components/numberInput/NumberInput.tsx#L154\r\n\r\n## The current behavior\r\n\r\nonChange does not get called.\r\n\r\n## The expected behavior\r\n\r\nonChange gets called.\r\n\r\n\r\nI know I could probably call the native onChange myself. The thing is, Im not sure if react should handle this already. So if at some point react updates, and the function automatic onChange call is added, then in the component the onChange is then called twice.\r\n","state":"open","updated_at":"2022-01-09T00:43:04Z","created_at":"2021-08-30T15:35:37Z","creator_user_login":"VilleMiekkoja"}
{"number":22197,"title":"DRAFT PR","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n","state":"open","updated_at":"2022-01-08T23:42:17Z","created_at":"2021-08-27T20:33:07Z","creator_user_login":"Albert-Jokelin"}
{"number":22195,"title":"A11y related Bug: onKeyPress doesn't trigger on element (tabindex=\"0\") when narrator is on","body":"\r\n\r\nReact version: 17.0.2 \r\nSystem: Window 10\r\n\r\n## Steps To Reproduce\r\n\r\n1. Turn on Narrator app (Native app in Window)\r\n2. go to the link https://q799n.csb.app/\r\n3. use tab navigate to the Div element\r\n4. Press any keys\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/loving-frost-q799n?file=/src/App.js\r\n\r\n```js\r\nimport React from \"react\";\r\n\r\nexport default function App() {\r\n  const [count, setCount] = React.useState(0);\r\n  const logMe = () => {\r\n    setCount((c) => c + 1);\r\n  };\r\n  return (\r\n    <div onKeyPress={logMe} tabindex=\"0\">\r\n      <h1>Repro step:</h1>\r\n      <h2>1. turn on Narrator app (Native app in Window)</h2>\r\n      <h2>2. Use tab to navigate to here</h2>\r\n      <h2>3. Press any keys and key press count is {count}.</h2>\r\n      <h2>Note: Count won't updated when narrator is on</h2>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## The current behavior\r\nThe count value doesn't change\r\n\r\n## The expected behavior\r\nThe count value will increase by 1 on every key press","state":"open","updated_at":"2022-01-08T23:43:09Z","created_at":"2021-08-27T19:33:57Z","creator_user_login":"daihuaye"}
{"number":22168,"title":"[Feature Request][eslint-plugin-react-hooks] no-ref-checks, display error when using useRef's return value as condition","body":"https://github.com/reactjs/rfcs/issues/198\r\nhttps://github.com/yannickcr/eslint-plugin-react/issues/3042\r\n\r\nNot sure whether this belongs in `eslint-plugin-react-hooks` or `eslint-plugin-react`, but a contributor at the latter suggested this to be a more appropriate place. I've opened an issue instead of an RFC to discuss whether this is the appropriate place. https://github.com/yannickcr/eslint-plugin-react/issues/3042#issuecomment-899689312\r\n\r\nI started migrating a codebase from class-based to function-based and came across some silliness. I had completely missed converting some of the ref checks:\r\n\r\n```diff\r\n- const thing = this.thing;\r\n+ const thing = useRef(props.thing);\r\n\r\n// I missed this\r\n- if (!thing) {\r\n+ if (!thing.current) {\r\n```\r\n\r\nTypeScript considers `!useRef(props.thing)` to be perfectly valid since it may be testing for non-existence of the value even if it is not boolean. However, due to the rules of hooks, this value will never be undefined -- any checks for it are unnecessary and could either be an innocuous useless check or indicate a serious bug / typo. Thus, I'm thinking it might make sense to make sure a useRef's return value is never used as a boolean or condition at the react linter level. Not sure if it's possible with ESLint, but if so it could be a very useful rule which would catch a lot of bugs. ","state":"open","updated_at":"2023-01-05T14:49:56Z","created_at":"2021-08-24T19:46:09Z","creator_user_login":"johnrom"}
{"number":22159,"title":"Bug: Allow multiple instance of React (or inject one into the other)","body":"_FYI; Not sure if this is a bug or a feature request. It's a problem that is surprising when it happens, and there's no workaround I'm aware of._\r\n\r\nNow that since 17, React is supposed to more easily be upgradable in that using components from an older/newer React in a different version will still work (and be supported), **the ability to run multiple instances concurrently** should be approached again.\r\n\r\nFrom what I can see, this can be achieved in multiple ways;\r\n * Seamlessly allowing multiple concurrent React instances at once, or\r\n * Seamlessly re-using the same global scope React when importing/requiring consecutively, or\r\n * Allowing manual injection of one React instance into another\r\n\r\nThere are use cases for this, e.g. when using a component from a webpage in a jsdom environment. This is working for passive components not using any hooks, but as soon as you need hooks (or lifecycle management in general I suppose), the [Invalid Hook Call Warning](https://reactjs.org/warnings/invalid-hook-call-warning.html) (referenced in #13991) is triggered, due to _\"3. You might have more than one copy of React in the same app.\"_\r\n\r\nConsider the following code, which simulates a web page using React, which exposes a component on the global object \"window\" (this could be done in multiple ways, the implementation detail here is irrelevant). When running this webpage in a jsdom environment, using the web page's component from an outer context (potentially not even using react-dom but a custom reconciler), the \"Invalid Hook Call Warning\" is triggered. The example also shows where an outer React instance could be injected into another React (another global scope) if this was supported somehow:\r\n\r\n```ts\r\nimport React, { PropsWithChildren } from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\nimport { JSDOM } from \"jsdom\";\r\n\r\n\r\nasync function getRemoteComponent(): Promise<React.ElementType> {\r\n  const html = `\r\n  <html lang=\"en\">\r\n    <body>\r\n      <script src=\"https://unpkg.com/react@17/umd/react.development.js\" crossorigin></script>\r\n      <script>\r\n        const component = () => {\r\n          const [content] = React.useState('from webpage');\r\n          return React.createElement( 'span', {}, [content] );\r\n        }\r\n        window.setComponent(component);\r\n      </script>\r\n    </body>\r\n  </html>`;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    new JSDOM(html, {\r\n      url: 'http://localhost',\r\n      runScripts: \"dangerously\",\r\n      resources: \"usable\",\r\n      beforeParse(window) {\r\n        // If React would support something like this, it would solve the problem:\r\n        // window.React = React;\r\n\r\n        (window as any).setComponent = component => {\r\n          resolve(component);\r\n        };\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction Outer({children}: PropsWithChildren<{}>) {\r\n  return <div>{children}</div>\r\n}\r\n\r\ngetRemoteComponent()\r\n.then( Inner => renderToString( <Outer><Inner /></Outer> ) )\r\n.then( domString => console.log( `Result: ${domString}` ) );\r\n```\r\n\r\nExpected output (which you get when not using any hook):\r\n\r\n`Result: <div data-reactroot=\"\"><span>from webpage</span></div>`\r\n\r\nThere are two closed issues related to this, but with a different approach and not about actually enabling this afaict: #2402 and #3252\r\nThere's also #13991, but is mostly for how to detect when you have multiple instances concurrently, often due to packaging/bundling/dependency issues. This is not the same as _intentionally_ using multiple instances.","state":"open","updated_at":"2021-11-14T01:35:10Z","created_at":"2021-08-23T09:23:44Z","creator_user_login":"grantila"}
{"number":22152,"title":"[Blocks Fixture] Migrate to built-in <Cache> API and regression test","body":"# Summary\r\nThis is task list issue.  \r\n\"Blocks\" fixture app which made by [built-in <Cache> API](https://github.com/reactwg/react-18/discussions/25), 'react-fetch', [Server Component](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html) combination that useful to play new features v18 later.  \r\n\r\nBut current one is broken because importing removed older Cache API module.  \r\nAnd difficult to notice that regression because there are no tests.  \r\n\r\nSo I planning these task for Blocks working fine again and write regression tests.\r\n\r\n- [ ] https://github.com/facebook/react/pull/22151\r\n- [ ] Write regression tests with [Cypress](https://www.cypress.io/)\r\n- [ ] Consider better implementation at some `@TODO` comments, where should we invoke cache `refresh()` function etc...\r\n\r\n\r\n# Screen Capture\r\nhttps://user-images.githubusercontent.com/5501268/130333311-0f12d038-370f-4203-a039-7f396b6db2fd.mov\r\n\r\n","state":"open","updated_at":"2022-04-04T11:54:41Z","created_at":"2021-08-21T19:48:36Z","creator_user_login":"ryota-murakami"}
{"number":22151,"title":"[Blocks Fixture] fix broken fixture ServerComponent app","body":"## Summary\r\n\r\n- https://github.com/facebook/react/pull/20315\r\n\r\nSince removed 'react/unstable-cache' entry point by above PR, **Blocks not working** with error on the next line. \r\n\r\n\r\n`import {createCache, CacheProvider} from 'react/unstable-cache';`\r\n\r\n## Test Plan\r\nI've planning adding test by [Cypress](https://www.cypress.io/).\r\n\r\n- https://github.com/facebook/react/issues/22152\r\n\r\n## Screen Capture\r\n\r\nhttps://user-images.githubusercontent.com/5501268/130332689-196ac1e9-2d06-4065-a6ff-ab210e0b5445.mov","state":"open","updated_at":"2022-01-08T23:42:19Z","created_at":"2021-08-21T19:25:41Z","creator_user_login":"ryota-murakami"}
{"number":22149,"title":"Expecting hasShadowRoot from global scope","body":"Think hasShadowRoot was added with a debug flag for ```if (CHROME &&  hasShadowRoot)``` (grepping or acking that should bring you to  the culprit). This breaks Chromium builds in Chrome and Electron.\r\n\r\nFor anyone riding the 18 wave;\r\n\r\n``` \r\n// somehwere above your entry / bundle\r\nglobalThis.hasShadowRoot = () => true\r\n\r\n// preload script electron\r\ncontextBridge.exposeInMainWorld('hasShadowRoot', () => true)\r\n```\r\n\r\nTo be clear; those are just temporary quick fixes to keep 18 juices flowing. Not recommended for actual use.","state":"open","updated_at":"2021-09-06T20:45:35Z","created_at":"2021-08-20T22:40:21Z","creator_user_login":"Ontopic"}
{"number":22141,"title":"Replace react-virtualized-auto-sizer with ResizeObserver","body":"Resolves #22122\r\n\r\nNote that the code currently committed _fixes_ the issue for Chrome, and supports standalone and inline packages, but fails on Firefox because `ResizeObserver` callbacks never seem to get fired.\r\n\r\nI'm going to leave this for the moment and try a potential alternate fix.","state":"open","updated_at":"2022-04-01T10:52:33Z","created_at":"2021-08-19T19:29:18Z","creator_user_login":"bvaughn"}
{"number":22138,"title":"[DevTools Bug]: React Profiler: Flamegraph section overflows and not resizable","body":"### Website or app\n\nhttps://stackoverflow.com/help/minimal-reproducible-example\n\n### Repro steps\n\nnote: the URL I linked is not relevant and only meant to make the bug report submit pass, previously closed [here](https://github.com/facebook/react/issues/22137) since I couldn't find any production site with a *development* build, so I don't think it makes sense to outright fail bug reports for react profiler related issue. \r\n\r\nactual bug report:\r\nI have a page that has lots of component so the component tree is pretty long, when I profile on it, the flamechart just overflows by default and I have to put it fullscreen to see the \"why did this render\" side bar\r\n![image](https://user-images.githubusercontent.com/2238944/130124388-4dc40efd-b8a0-4a03-aacf-3d8bc6d64990.png)\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2021-08-20T22:30:51Z","created_at":"2021-08-19T18:34:00Z","creator_user_login":"shogunsea"}
{"number":22132,"title":"Feature request: adding a `triggers` optional array to `useEffect`","body":"Currently, `useEffect` accepts an array of dependencies as its second parameters. It must be filled with all values used by the effect callback, to make the call consistent.\r\n\r\nHowever, this array of dependencies have itself a side-effect... of triggering the effect.\r\n\r\nTherefore, it is not really just a dependency array, but more a `dependenciesAndTriggers` array. This leads to confusion, and makes it nearly impossible to correctly control the triggering an effect. Most common issue is with function dependencies : people omit fucntions from the dependencies because they don't want an effect ot fire just because an `onChange` prop passed by the parent changed.\r\n\r\n[This documentation partially address this issue](https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often) but it doesn't apply correctly when a function dependency to the effect is passed by the parent, `useCallback` is useless in this scenario. The `ref` alternative is correctly documented but is far-fetched and complicated pattern.\r\n\r\n## Possible solutions\r\n- It could be interesting to have an `useEffect(cb, dependencies, [triggers])` syntax. `triggers` would be a subset of dependencies that actually trigger the side-effect. When defined, the effect is run only when one of the trigger change. The callback is still correctly updated whenever a dependency change, but not run. When `triggers` is not defined, then `useEffect` behaves as usual.\r\n\r\nMain limitation: user should first try to understand how to set their dependencies correctly, and try to memoize callbacks etc. Adding a `triggers` parameter might lead to a \"lazy\" approach, where devs use this parameter all the time instead of digging memoization, leading to reduced performances.\r\n\r\n- Some people however argues that using `useEffect` as a conditional trigger might actually be a misuse. For instance adding an effect that calls a callback passed as props when some state changes. If that's true, then valid use cases for `useEffect` would need to be documented more thoroughly, with alternatives when it's not a good fit.\r\n\r\nFor instance, in this comment: https://github.com/facebook/react/issues/14920#issuecomment-471070149, the answer to \"react to Compound Value change\" the answers from @gaearon states that maybe it should be handled by an event handler (`onChange, onClick, onSubmit`). That's what you would do before hooks existed.\r\nThis is not clear to me. `useEffect` seems on the contrary to be a cleaner approach: event handlers update the states, and the state updates generate side-effects. A bit like you'd separate Redux reducers from Sagas. This is in particular relevant when you have zillions of event handlers that could alter the state: you don't want all of them to track down what kind of side-effect the state change should trigger. Instead, you just update the state, and let the effect do its thing.\r\n\r\n## Related\r\n- closed issue about the exhaustive-deps eslint rule https://github.com/facebook/react/issues/14920. \r\n- recent question about deps https://github.com/facebook/react/issues/22078\r\n- stack overflow question about understanding the `exhaustive-deps` rule https://stackoverflow.com/questions/58866796/understanding-the-react-hooks-exhaustive-deps-lint-rule\r\n- stack overflow top question regarding useEffect: https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\r\n\r\n## Codesandbox\r\n\r\nIn this example, `Child` is triggering an `onChange` prop when some state has changed. But the effect is triggered anytime the parent component rerenders, because it recreates an `onChange` function. We suppose we can only modify the `Child`, eg because `Parent` is too complex, a 3rd party component, owned by another team... `useCallback` won't work in this scenario. \r\n\r\nhttps://codesandbox.io/s/fancy-sea-zj5e4\r\n","state":"open","updated_at":"2022-05-05T10:21:36Z","created_at":"2021-08-19T07:46:48Z","creator_user_login":"eric-burel"}
{"number":22122,"title":"[DevTools Bug]: Cannot hover/click elements after scrolling","body":"### Website or app\n\nhttps://9tdhf.csb.app/\n\n### Repro steps\n\n1. disable any component filter\r\n2. scroll component tree\r\n3. hover any element\r\n\r\nhttps://user-images.githubusercontent.com/12292047/129872819-0e3c06aa-fc24-4c15-84c7-73940eb136b3.mp4\r\n\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n1d2528097\n\n### DevTools version (automated)\n\n4.16.0\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-05-11T20:51:33Z","created_at":"2021-08-18T09:21:06Z","creator_user_login":"eps1lon"}
{"number":22116,"title":"Benchmark alternative source-map parsing library","body":"The \"named hooks\" feature uses the `source-map` library to parse source maps. We should check out the ['source-map-js'](https://npmjs.com/package/source-map-js) fork. (Supposedly it's [a lot faster](https://github.com/postcss/postcss/pull/1515/).)\r\n\r\nLet's benchmark the two and see if it speeds us up too?","state":"open","updated_at":"2022-01-09T00:43:16Z","created_at":"2021-08-17T23:06:09Z","creator_user_login":"bvaughn"}
{"number":22106,"title":"DevTools: Scheduling Profiler: Better error message when no marks","body":"The scheduling profiler currently shows \"unsupported version\" message if you import a performance trace with no marks.\r\n\r\nIt incorrectly assumes the lack of an explicit version mark indicates an earlier version of the data which didn't include marks, but in the event that there are _no marks at all_ we should infer that a production version of React DOM was being used instead and show a different error.","state":"open","updated_at":"2022-01-09T00:43:11Z","created_at":"2021-08-16T22:01:20Z","creator_user_login":"bvaughn"}
{"number":22097,"title":"Question: Keys & Image Flickering","body":"Tested environment: \r\nChrome 92\r\n\r\nReact version:\r\n17.0.2\r\n\r\nRecently, I've found that when images get rendered within React components, they tend to flicker or do flickering on re-render and mount/unmount. \r\n\r\nI found [this link](https://github.com/facebook/react-native/issues/981#issuecomment-97290760) and assigned a unique id for a key prop on each React component that has images. These ids do not change on the mount, unmount and render. Looks like this solved the issue of the image flickering.\r\n\r\nWhat is the reason behind this? I thought the browser caches src of <img> so that images do not get re-painted. However, looks like this caching does not happen in React if the key prop is different on each re-render (i.g. key prop is populated by a UUID generator).\r\n\r\nThanks for the help in advance.","state":"open","updated_at":"2022-01-09T00:43:12Z","created_at":"2021-08-16T05:08:05Z","creator_user_login":"kun-woo"}
{"number":22090,"title":"Scheduling Profiler: Add React Native support","body":"The [Scheduling Profiler](https://github.com/reactwg/react-18/discussions/76) currently reads data from an exported Chrome performance profile, including [User Timing API](https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API) marks created by React.\r\n\r\nThe Chrome profile contains native events (e.g. \"click\" events), CPU samples that can be used to display a flame graph of what JavaScript was running at a point in time, and base64 encoded screenshots (if enabled). The User Timing data contains info about when state updates are scheduled, when React renders or commits work, when components suspend, etc. This data is processed together to generate the Scheduler Profiler UI.\r\n\r\nReact Native (or more specifically Hermes) doesn't provide a way for users to record or export this data. (I think CPU sampling can be done somehow but I'm not sure how to access the information.) However even if we _only_ had the React User Timing marks, this would still be useful data to display in the profiler. (We could probably also add markers for React's synthetic events as a replacement for the native events.)\r\n\r\nThis data would need to be collected by something though (a User Timing polyfill for the embedded DevTools backend? some other more explicit API we add that calls through to User Timing API for the browser case and logs in-memory for RN?) and shared from the backend to the frontend.\r\n\r\nWhat about profiling locally? Perhaps the backend could gather this sample and periodically send it (encoded) to the frontend to be exported/downloaded. We'd probably only want to do this if the user started profiling (recording) in the UI. This would require us to add state for the new profiler (since it's currently read-only). But we plan to do this anyway for the browser extension (#22015).\r\n\r\nThis task is a placeholder for researching and proposing a way to add at least basic RN support.","state":"open","updated_at":"2021-10-12T15:42:43Z","created_at":"2021-08-13T21:57:26Z","creator_user_login":"bvaughn"}
{"number":22082,"title":"Improve production error stack trace for Invariant #31","body":"Is it possible to improve the production/minified error stack trace for invariant #31?\r\n\r\nWe saw this one in production and due to the generic nature it was not of much use. It would be much more useful if the component throwing the error could be identified.\r\n\r\nIs this possible given what is available in the minified production bundle?\r\n\r\n### How to Reproduce\r\n1. `npx create-react-app my-app`\r\n2. `cd my-app`\r\n3. Modify `./src/App.js` to the following\r\n```\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {{ errors: [] }}\r\n    </>\r\n  );\r\n}\r\n```\r\n4. `npm run build`\r\n5. `serve -s build`\r\n6. Open the application in web browser\r\n7. Note the error in the console\r\n```\r\nreact-dom.production.min.js:216 Error: Minified React error #31; visit https://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7Berrors%7D for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n    at ka (react-dom.production.min.js:140)\r\n    at react-dom.production.min.js:150\r\n    at Io (react-dom.production.min.js:176)\r\n    at Hu (react-dom.production.min.js:268)\r\n    at Pi (react-dom.production.min.js:250)\r\n    at xi (react-dom.production.min.js:250)\r\n    at _i (react-dom.production.min.js:250)\r\n    at vi (react-dom.production.min.js:243)\r\n    at fi (react-dom.production.min.js:237)\r\n    at Gi (react-dom.production.min.js:285)\r\n```\r\n8. Go to suggested URL to see error explanation `Objects are not valid as a React child (found: object with keys {errors}). If you meant to render a collection of children, use an array instead.`\r\n\r\nIdeally, we would be able to see the component here, if possible.","state":"open","updated_at":"2022-11-29T16:27:02Z","created_at":"2021-08-12T18:31:28Z","creator_user_login":"CarlJohnston"}
{"number":22074,"title":"[DevTools] Support collapsing the entire component tree","body":"Similar to #16463, I find myself overwhelmed when trying to navigate the React component tree because everything is expanded by default.\r\n\r\n- IMO there should be a simple way to recursively collapse everything and view the tree \"top-down\" rather than \"bottom-up,\" just as VSCode's [-] button allows you to do.\r\n\r\n<img width=\"116\" alt=\"Screen Shot 2021-08-11 at 2 21 56 PM\" src=\"https://user-images.githubusercontent.com/4645779/129082565-1f9b0a70-5f3f-434c-821d-51eebecc72d9.png\">\r\n\r\n- It would also be sensible to add vertical lines below each component's expand/collapse handle, because it becomes hard to see which elements are siblings in the tree when it's nested e.g. 15 layers deep.\r\n\r\n<img width=\"507\" alt=\"Screen Shot 2021-08-11 at 2 23 18 PM\" src=\"https://user-images.githubusercontent.com/4645779/129082742-7eed8623-d23d-44b2-902f-e4efef30ed4f.png\">\r\n","state":"open","updated_at":"2022-01-09T00:43:21Z","created_at":"2021-08-11T18:25:17Z","creator_user_login":"samwinslow"}
{"number":22054,"title":"Bug: \"NotFoundError\" when removeChildFromContainer -> container.removeChild(child) is called","body":"React throw an unhandled exception \"NotFoundError\" when removeChildFromContainer -> container.removeChild(child) is called on a node that doesn't contains the child anymore.\r\nThis only occurs in IE 11.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. open the attached sample and run the application in **ie11**\r\n2. then click the **toggle grid** button\r\n3. Then you can see the script error in console like below.\r\n\r\n![image](https://user-images.githubusercontent.com/38315832/128839214-47e67800-3833-4c3d-a776-5d2975dcb0aa.png)\r\n\r\n\r\n\r\n\r\nLink to code example:\r\n\r\n[grid-notfounderror-ie11.zip](https://github.com/facebook/react/files/6960342/grid-notfounderror-ie11.zip)\r\n\r\n\r\n## The current behavior\r\n\r\n\"NotFoundError\" when removeChildFromContainer -> container.removeChild(child) is called\r\n\r\n## The expected behavior\r\n\r\nNeed to working as like chrome edge browsers","state":"open","updated_at":"2022-01-09T00:43:08Z","created_at":"2021-08-10T09:11:27Z","creator_user_login":"Saranya13"}
{"number":22053,"title":"insert global hook for all dev tools extension","body":"Update the dev tools to avoid injecting the global hook inline\r\n\r\nFixes issue #17997","state":"open","updated_at":"2022-01-08T23:42:19Z","created_at":"2021-08-10T01:11:49Z","creator_user_login":"shuhblam"}
{"number":22049,"title":"Bug: \"Cannot read property 'length' of undefined\" in areHookInputsEqual","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\nWhen testing my component where I'm using this usecallback hook. I'm getting the error.\r\n```\r\n  const getUrlWithPrefix = useCallback(\r\n    (href: string) => {\r\n      let url = href;\r\n      // logic\r\n      return url;\r\n    },\r\n    [prefix],\r\n  );\r\n```\r\n![image](https://user-images.githubusercontent.com/22576950/128743558-6db90fb6-bafb-4a47-9d4b-d2b8b4bad177.png)\r\n\r\nWhen I dug a little in the callstack I found that it's linked to the code here:\r\n\r\nhttps://github.com/facebook/react/blob/cae635054e17a6f107a39d328649137b83f25972/packages/react-dom/src/server/ReactPartialRendererHooks.js#L92\r\n\r\nShouldn't we just check if prevDeps is neither null nor undefined? \r\n\r\n","state":"open","updated_at":"2023-05-02T12:36:41Z","created_at":"2021-08-09T16:58:47Z","creator_user_login":"hamzahamidi"}
{"number":22035,"title":"feat: add suggestions for valid deps","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nI noticed we have a TODO says provide suggestion, so I finished it.\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n\r\nPass unit tests\r\n","state":"open","updated_at":"2022-01-08T23:42:13Z","created_at":"2021-08-05T15:37:59Z","creator_user_login":"ShroXd"}
{"number":22034,"title":"[DevTools Bug]: React Devtools on Firefox initially shows an empty (blank) component tree","body":"### Website or app\n\nhttps://reactjs.org/\n\n### Repro steps\n\n1. Go to any site built with React.js \r\n2. Open the React Devtools from the firefox developer tools window.\r\n3. There will be an empty component when **Components** tab is selected\r\n4. Now refresh the page to see the component tree getting populated inside the **Components** tab.\r\n\r\nWindows Version - Windows 10 21H1\r\nFirefox Version - v90.0.2 (64-bit)\r\n\r\nAttaching a GIF of the issue while visiting reactjs.org - \r\n![O7VSagSc5l](https://user-images.githubusercontent.com/32711472/128354658-47665f4e-9fc4-479b-b16b-08c92c277376.gif)\r\n\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_","state":"open","updated_at":"2022-01-27T18:05:02Z","created_at":"2021-08-05T13:05:15Z","creator_user_login":"saiyerniakhil"}
{"number":22012,"title":"Question: Why `propagateContextChanges` not restore the `workInProgress.child.return` pointer?","body":"<!--\r\n  Ask a question or share feedback about the React 18 release here.\r\n-->\r\nThis  is the code from `ReactFiberNewContext.old.js`\r\n\r\nhttps://github.com/facebook/react/blob/19092ac8c354b92c2e0e27b73f391571ad452505/packages/react-reconciler/src/ReactFiberNewContext.old.js#L319-L333\r\n\r\nIn the function `propagateContextChanges` and `propagateContextChange_eager`, the `workInProgress.child.return` is changed in the beginning, but it is not restore in the end.\r\n\r\nIn case of `propagateContextChanges`:\r\n```js\r\nfunction propagateContextChanges<T>(\r\n  workInProgress: Fiber,\r\n  contexts: Array<any>,\r\n  renderLanes: Lanes,\r\n  forcePropagateEntireTree: boolean,\r\n): void {\r\n  // Only used by lazy implemenation\r\n  if (!enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n  let fiber = workInProgress.child;\r\n  if (fiber !== null) {\r\n    //  caution:  before next line , fiber.return is workInProgress.alternate\r\n    fiber.return = workInProgress;\r\n   // after this line, fiber.return = workInProgress\r\n  }\r\n  \r\n  // ... omit the other code\r\n  // but in the end, there is no code to restore the  workInProgress.child.return\r\n  // maybe like this:\r\n  workInProgress.child.return = workInProgress.alternate;\r\n}\r\n\r\n```\r\nI think the `workInProgress.child` is same as `workInProgress.alternate.child` at this time.\r\n\r\nIf the `workInProgress.child.return` not restore, though the `workInProgress tree` is no difference , but maybe the `current tree` is broken?\r\n\r\nI'm confused about it some days, could anyone explain it?","state":"open","updated_at":"2021-08-05T08:31:04Z","created_at":"2021-08-03T13:00:15Z","creator_user_login":"7kms"}
{"number":22007,"title":"[WIP] Possible work loop bugfix","body":"Got a non-reproducible bug report internally. Based on the info in the bug report, I think it might be related to this code here.\r\n\r\nThe original code is definitely wrong but I don't know if it's the same bug that's being reported.\r\n\r\nPushing this so we can try it and see. Will try to write a test and land the fix regardless.","state":"open","updated_at":"2021-08-02T22:39:29Z","created_at":"2021-08-02T20:07:00Z","creator_user_login":"acdlite"}
{"number":21999,"title":"Issue (old topic but still not okay): eslint exhaustive deps --> context+axios+db+useEffect","body":"Let me point out the following situation: I have a navbar and some routes shall request raw-data on active. I import axios in the context because 1. i dont want to import axios in every component 2. i want to use useState in the context to save the fetched data in the context and not by useState in the component itself. Combined with some functions leads this to much lower traffic towards the backend (for your understanding 1 example: in Context: if (requestedStateVariableInContext === \"\") { fetch ... } else { use requestedStateVariableInContext in the component without fetching it again }. Importing the backendContext into the component and use useEffect(() => { b.getData() } 1st issue: this leads to 2 requests towards the backend. I dont know why and I am sure it is a lot of work to understand .... 2nd issue is b. leads to a eslint exhaustive deps error. It seems like the hook doesnt like functions imported by the backend-context. ERROR or CORRECT because it does not be marked yellow at VisualStudioCode but triggers the warning in the browser-console. Next issue to fix the 1. one is I do { b.getData(), []} to request only 1 time and not twice. But this leads to the 2nd eslint exhaustive deps warning (this one is marked yellow @ vscode). \r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. context.js\r\n```\r\nimport { createContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const BackendContext = createContext();\r\n\r\nexport const BackendProvider = (props) => {\r\n  const [data, setdata] = useState(\"\");\r\n  const r = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    responseType: \"json\",\r\n  };\r\n  const getdata = async (reqDetails) => {\r\n    if (matches === \"\") {\r\n      let rs = r;\r\n      rs.data = reqDetails;\r\n      rs.url = \"http://localhost:8080/example/getexample\";\r\n      await axios(rs)\r\n        .then((res) => {\r\n          setdata(res.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <BackendContext.Provider value={{ data, getdata }}>\r\n      {props.children}\r\n    </BackendContext.Provider>\r\n  );\r\n};\r\n```\r\n2. component\r\n```\r\nimport { useEffect, useContext } from \"react\";\r\nimport { BackendContext } from \"../../context/backend\";\r\nexport const Matches = () => {\r\n  const b = useContext(BackendContext);\r\n  useEffect(() => {\r\n    b.getdata()\r\n  }, [])\r\n  return (\r\n    <div id=\"data1\">\r\n      <h1>comming soon</h1>\r\n      <p id=\"testDiv\"></p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nBrowser console:\r\ncomponent: Line 8:6:  React Hook useEffect has a missing dependency: 'b'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\nVScode console:\r\nmarks [] as yellow\r\n\r\nUpdate 14.08.2021:\r\nI continued thinking about a solution. Refering to b.data @ [] in the useEffect hook would also lead to an eslint exhaust deps warning. I havent checked if this would even lead to a 2nd request towards the db in case the db has a delay of some ms during the first load of b.data in the context. Why should I not be able to refer to something comes from the context? Technically or logically? Never mind the solution above works.\r\n","state":"open","updated_at":"2022-01-09T00:43:13Z","created_at":"2021-07-31T19:50:45Z","creator_user_login":"tb47"}
{"number":21993,"title":"Bug: \"Unsafe assignment to innerHTML\" warning from Mozilla addons linter","body":"Our Browser Extension addon seems to be stuck in review with Mozilla, and their submission service is feeding back (what appear to be ESLint warnings), saying \"Unsafe assignment to innerHTML.\"\r\n\r\nI can recreate the warnings by running the Mozilla addons-linter on our extension's dist files and removing `react-dom` prevents the warnings, but then of course there is no `ReactDOM.render` func to render the react app onto the page.\r\n\r\nIs there any alternative to `react-dom` without moving away from react completely, or a way to prevent the assignment of `.innerHTML` from being in the dist files of a react app?\r\n\r\nReact version: 16.9.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Build a Web Extension addon using react apps for the Popup and Options UIs.\r\n2. Use the Mozilla `addons-linter` npm package to lint the dist files.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/facebook/react/blob/cae635054e17a6f107a39d328649137b83f25972/packages/react-dom/src/client/setInnerHTML.js#L63\r\n\r\n```\r\n// Any src which imports the react-dom package will result in dist files which trigger the linter warnings.\r\nimport ReactDOM from \"react-dom\"\r\n```\r\n\r\nSystem:\r\nOS: macOS 10.15.7\r\nBinaries:\r\nNode: 12.2.0 - ~/.nvm/versions/node/v12.2.0/bin/node\r\nnpm: 7.5.2 - ~/.nvm/versions/node/v12.2.0/bin/npm\r\nnpmPackages:\r\n@babel/core: ^7.5.5 => 7.5.5\r\n@babel/preset-env: ^7.5.5 => 7.5.5\r\n@babel/preset-react: ^7.0.0 => 7.0.0\r\nbabel-jest: ^24.9.0 => 24.9.0\r\nbabel-loader: ^8.0.6 => 8.0.6\r\nbabel-plugin-emotion: ^10.0.19 => 10.0.19\r\njest: ^24.9.0 => 24.9.0\r\nwebpack: ^4.39.2 => 4.39.2\r\n\r\n## The current behavior\r\nIt is not possible to build Web Extensions with react which do not trigger the \"Unsafe assignment to innerHTML\" warnings from the Mozilla addons linter.\r\n\r\n## The expected behavior\r\nIt is possible to build Web Extensions with react which do not trigger the \"Unsafe assignment to innerHTML\" warnings from the Mozilla addons linter.","state":"open","updated_at":"2022-06-11T19:16:15Z","created_at":"2021-07-30T01:01:23Z","creator_user_login":"tdriley"}
{"number":21992,"title":"Devtools: Fix setting modal closes when deleting component filter","body":"## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nWhen deleting the last element in component filters the setting modal closes. this PR fixes this\r\n\r\n<img src=\"https://user-images.githubusercontent.com/59608551/127568480-5210f281-2f37-4388-baf3-ac81008cd8eb.gif\" alt=\"bug\" width=\"500px\">\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n\r\nWhen deleting the last element in component filters the setting modal shouldn't close.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/59608551/127568697-12c28e3e-bf43-47dd-ac69-8b88457b01b3.gif\" alt=\"bug\" width=\"500px\">\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-01-08T23:42:22Z","created_at":"2021-07-29T21:47:51Z","creator_user_login":"houssemchebeb"}
{"number":21991,"title":"Bug: onMouseEnter behavior when mouse does not enter via boundary is inconsistent between browsers","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create two components Foo and Bar inside a parent Component, where Foo is positioned such that it covers Bar.\r\n2. Add a onMouseEnter event handler to Bar\r\n3. Add a click handler to Foo that will cause Foo to be removed when clicked\r\n4. Click Foo\r\n5. Mouse is now hovering over Bar\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: \r\n\r\nhttps://codesandbox.io/s/tender-sun-i1ccy?file=/public/index.html\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn Chrome:\r\nThe onMouseEnter event handler on Bar is not fired when Foo is removed.\r\nIn Firefox:\r\nThe onMouseEnter event handler on Bar is fired when Foo is removed.\r\n\r\n## The expected behavior\r\nonMouseEnter is fired on Bar is fired when Foo is removed. This is the behavior in both chrome and firefox when plain html and js are used:\r\n\r\nSpec for MouseEvent seems vague about this issue:\r\n - https://w3c.github.io/uievents/#event-type-mouseenter\r\n \r\n> A user agent MUST dispatch this event when a pointing device is moved onto the boundaries of an element or one of its descendent elements. A user agent MUST also dispatch this event when the element or one of its descendants moves to be underneath the primary pointing device.\r\n\r\nI saw https://github.com/facebook/react/issues/2621, though it isn't quite the same issue.\r\nAlso saw the stack-overflow issue https://stackoverflow.com/q/55836826, which reported this behavior\r\n\r\nChrome version: Version 92.0.4515.107 (Official Build) (x86_64)\r\nFirefox version: 90.0.2 (64-bit)\r\nOS: MacOs 11.2.3 (20D91)\r\n","state":"open","updated_at":"2022-11-24T07:54:47Z","created_at":"2021-07-29T19:04:20Z","creator_user_login":"saperdadsk"}
{"number":21987,"title":"Bug: Bundle 16.14.0 does not include expected bugfix","body":"I was using React version 16.13.1, but wanted to benefit from #18676. The PR was merged in ffb6c6c07b1a6dcabd04b22a6a5afeab96d53ae2. So I upgraded to 16.14.0.\r\n\r\nSadly, the problem was still there for me. I dug a little deeper and realized that the new version does not include the expected changes from the PR.\r\n\r\n- The changes are included on the v16.4.0 tag in the repository:  [Line 1030 in `ReactDOMComponent.js`](https://github.com/facebook/react/blob/v16.14.0/packages/react-dom/src/client/ReactDOMComponent.js#L1030)\r\n- Looking at 16.14.0 at unpkg, I do not see the changes in the bundle: [Line 6448 in `react-dom.development.js`](https://unpkg.com/browse/react-dom@16.14.0/cjs/react-dom.development.js#L6448)\r\n\r\nNote that the bundle of version 17.0.0 does include the change on unpkg: [Line 9567 in `react-dom.development.js`](https://unpkg.com/browse/react-dom@17.0.0/cjs/react-dom.development.js#L9567)\r\n\r\nI don't find the error in my thinking, so I wonder if there went something wrong during the release.\r\n\r\nKind regards,\r\n\r\nSimon","state":"open","updated_at":"2022-01-09T07:43:00Z","created_at":"2021-07-29T13:12:26Z","creator_user_login":"lenzls"}
{"number":21985,"title":"React CM Mode (18) stacking app during hydrateRoot","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0-alpha-9f88b5355-20210728\r\n\r\n## Steps To Reproduce\r\n\r\nSee repo https://github.com/maraisr/react-suspense-repro\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/maraisr/react-suspense-repro\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nreact hydrateRoot is stacking dom trees\r\n\r\nwill note here that `Suspense` obviously isnt needed that as nothing is async. I can illustrate here as well if you require a demo with the Suspense needing to do something??\r\n\r\n## The expected behavior\r\n\r\nreact hydrateRoot to not stack dom trees\r\n","state":"open","updated_at":"2022-03-25T23:16:39Z","created_at":"2021-07-29T04:52:59Z","creator_user_login":"maraisr"}
{"number":21984,"title":"[RN] Add altitudeAngle to ReactNativeTypes.js","body":"## Summary\r\nApple Pencil event support is added in https://github.com/facebook/react-native/pull/31780 so I am adding the flow type associated with the change.\r\n\r\n## Test Plan\r\nyarn test \r\nyarn test --prod\r\nyarn prettier\r\nyarn linc\r\nyarn flow native\r\nyarn flow flow\r\n\r\n","state":"open","updated_at":"2022-01-08T23:42:12Z","created_at":"2021-07-29T00:27:57Z","creator_user_login":"sota000"}
{"number":21983,"title":"[DevTools] Support hook names for inline and standalone targets","body":"Named hooks is currently only enabled for DevTools browser extensions. This is because the source map parsing library (`'source-map'`) requires a WASM bundle to be supplied at runtime, and DevTools currently loads that using a browser API (`chrome.extension.getURL`):\r\nhttps://github.com/facebook/react/blob/9f88b5355ba21e06e0a3c4442c5199de354ed1cf/packages/react-devtools-extensions/src/parseHookNames/index.js#L20-L21\r\n\r\nMaybe we could refactor this so that non-browser targets copied the WASM from `node_modules` and bundled it along with the DevTools package? It would be nice to support this functionality for e.g. React Native (which uses `react-devtools-core`) and Code Sandbox (which uses `react-devtools-inline`).","state":"open","updated_at":"2022-01-09T00:43:09Z","created_at":"2021-07-28T19:56:56Z","creator_user_login":"bvaughn"}
{"number":21981,"title":"Question: React supports performance answers。","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n15.7\r\n## Steps To Reproduce\r\nDoes React have a performance bottleneck on the CPU 2G GPU 70M virtual machine for building large and complex WEB applications?\r\nAnd the models of GPU and CPU are before 2010.\r\nIf you use React to develop large and complex applications, it is recommended to run it on what machine configuration.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2022-01-09T07:43:03Z","created_at":"2021-07-28T14:53:35Z","creator_user_login":"enjoy-wind"}
{"number":21980,"title":"Bug: onclick will not work when i import bundle.js twice","body":"Hi, I just had an interesting situation. I wrote the index.html like this.\r\n\r\n``` html \r\n\r\n<body>\r\n    <div id=\"react-container\"></div>\r\n    <script src=\"./bundle.js\"></script> \r\n</body>\r\n\r\n```\r\n\r\nHowever, I forget I have used html-webpack-plugin to import bundle.js too. As a result, I import bundle.js twice.\r\n\r\nDuring this time, I find all Javascript doesnt work. For example, if the button should log something, it doesnt.\r\n\r\nthe bundle.js is the output of webpack, so it contains react.js and react-dom\r\n\r\nI just really want to know why this happen. Can you help me find out why?\r\n\r\nReact version: ^17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nHere is an example: \r\n\r\nhttps://github.com/sspku-yqLiu/demoForBundleTwice\r\n\r\n\r\n","state":"open","updated_at":"2022-01-08T23:43:14Z","created_at":"2021-07-28T12:54:09Z","creator_user_login":"sspku-yqLiu"}
{"number":21948,"title":"Сosmetic proposal for shared/shallowEqual.js","body":"Putting a duplicate value into a variable","state":"open","updated_at":"2022-01-08T23:42:23Z","created_at":"2021-07-24T01:43:46Z","creator_user_login":"Sounryyy"}
{"number":21946,"title":"Add source maps","body":"Fixes https://github.com/facebook/react/issues/20186\r\n\r\n## Summary\r\n\r\nAttempts to get sourcemaps working.\r\n\r\nStatus: \r\n* only the `renderChunk` is commented out for now as I had to give up with that one\r\n* Sourcemap generation is slow on the prettier plugin. Maybe sourcemaps aren't needed if we're generating \"pretty\" views anyway? We should disable this if `shouldStayReadable` is true.\r\n","state":"open","updated_at":"2023-03-29T01:41:43Z","created_at":"2021-07-23T19:33:36Z","creator_user_login":"jasonwilliams"}
{"number":21943,"title":"Bug: additional outline is added to SVG nodes when used as root node in React 17","body":"React version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use an SVG as a root node for ReactDOM.render (I managed to reproduce when `<svg>` and `<g>` where used as the root node)\r\n2. Click on the rendered SVG and you'll see that an outline is added to the root node in React 17\r\n3. Try the same thing in React 16 and you won't see any outline\r\n\r\nLink to code example with React 17: https://mtpqc.csb.app/\r\nLink to code example with React 16: https://y8lot.csb.app/\r\n\r\n## The current behavior\r\n\r\nAnd outline is added on click\r\n\r\n## The expected behavior\r\n\r\nI noticed that when updating an app from v16 to v17. So I'd have expected the previous behavior to be kept (as I didn't spot this change in the changelog)","state":"open","updated_at":"2022-04-27T15:03:37Z","created_at":"2021-07-22T20:45:45Z","creator_user_login":"Ayc0"}
{"number":21942,"title":"Bug: Conditional rendering issue when using multiple SVGs as ReactComponents ","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. import multiple SVGs as ReactComponents into a component\r\n2. setup conditional rendering of those components via prop value\r\n3. render multiple of the component on a page with different prop values\r\n4. observe the first render of the SVG being repeated\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://gist.github.com/itsez/9f99ae3f1fd156c9c995b494a4148d48\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWhen rendering a component with conditional rendering, that is importing SVGs as ReactComponents, whatever the first iteration of the component selects to render is repeated for all consecutive renders of that component.\r\n\r\n## The expected behavior\r\nThe conditional rendering should update for each iteration of the component based on the property passed in and not repeat the first render for all iterations","state":"open","updated_at":"2022-01-09T00:43:17Z","created_at":"2021-07-22T19:48:26Z","creator_user_login":"itsez"}
{"number":21932,"title":"Bug: Lazy only attempts to retrieve module on first mount","body":"Currently when lazy retrieval of a module fails during the initial mount, this failed state persists for the lifetime of the lazy component (despite new instantiation).\r\n\r\n```tsx\r\n// If fails on first mount, will forever fail\r\nconst Component = lazy(() => import('./Component'));\r\n\r\nconst App = () => {\r\n  // ...\r\n  {someCondition && <Component />}\r\n  // ...\r\n}\r\n```\r\n\r\nConsider the following user experience:\r\n - user loads webpage\r\n - network connection goes offline\r\n - user loads lazy route\r\n - lazy module retrieval fails\r\n - network connection goes online\r\n - user navigates away from lazy element (unmount)\r\n - user navigates back to lazy element (mount)\r\n\r\nExpected result:\r\n - Lazy module retrieval is (once again) attempted and user is able to see mounted component\r\n \r\nActual result:\r\n - Lazy module retrieval is skipped due to failure on prior element mount - user is forced to refresh to continue using site despite now being able to retrieve module\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Load webpage\r\n2. Click toggle button to mount lazy component\r\n3. Click toggle button to unmount lazy component\r\n4. Click toggle button to mount lazy component \r\n\r\nLink to code example: https://codesandbox.io/s/snowy-voice-xsnne?file=/src/App.js\r\n\r\n## The current behavior\r\nOn second mount, module retrieval is attempted again\r\n\r\n\r\n## The expected behavior\r\nOn second mount, failed state from previous component instantiation is used\r\n\r\n## Additional info\r\n\r\nNaive attempt at addressing this - #21924","state":"open","updated_at":"2022-01-15T05:23:22Z","created_at":"2021-07-21T09:56:23Z","creator_user_login":"andyrichardson"}
{"number":21924,"title":"Attempt re-retrieval of lazy components on mount","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nA (naive) proposal for retrying retrieval of lazy components on mount.\r\n\r\n## Test Plan\r\n\r\n - Get this to work\r\n - Make codesandbox example\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n","state":"open","updated_at":"2022-01-08T23:42:11Z","created_at":"2021-07-20T19:39:20Z","creator_user_login":"andyrichardson"}
{"number":21922,"title":"[DevTools] Combine highlighting code","body":"# Summary\r\nCombine view highlighting code. Fixes #21777\r\n\r\n# Test Plan\r\nI have kept a single view called \"Highlighter\" with the `index.js` of old Highlighter as it is, and the `index.js` of TraceUpdates as another js file, whose functions are called directly in agent.js. \r\n\r\nThe `HiglighterCanvas.js` has the canvas based implementation for both, trace updates and DOM inspect. The `inspect` function is rewritten to make a canvas based solution, instead of overlay.","state":"open","updated_at":"2022-01-08T23:42:10Z","created_at":"2021-07-20T12:53:39Z","creator_user_login":"sj-rai"}
{"number":21903,"title":"React 18 let's make ref.currant to be reactive value","body":"Let's add this hook as part of the core. Since this is a common need, many people often ask the question \"Why does useEffect not sense ref.current changes?\"\r\n\r\n```js\r\n// approximate implementation\r\nconst useReactiveRef = (defaultValue) => {\r\n  const [current, ref] = useState(defaultValue)\r\n  ref.current = current\r\n  return ref\r\n}\r\n```\r\n\r\nUsage example:\r\n```js\r\nconst Component = () => {\r\n  const ref = React.useReactiveRef()\r\n\r\n  useEffect(() => {\r\n    // ref.current now is reactive\r\n    console.log(ref.current)\r\n  }, [ref.current])\r\n\r\n  return <div ref={ref}></div>\r\n}\r\n```\r\n","state":"open","updated_at":"2023-05-18T20:50:26Z","created_at":"2021-07-17T14:39:21Z","creator_user_login":"MaxmaxmaximusAWS"}
{"number":21890,"title":"[DevTools] Global console log","body":"Builds on top of #21889.\r\n\r\nConsole logs are currently scattered and confusing (e.g. double rendering may show logs twice, logs printed before a component suspends may appear to be truncated unexpected and then later printed again when retrying). Overall the sequence of logs in the console can be confusing.\r\n\r\nThe DevTools backend should collect logs during render (and double render) store them until commit. Then it should ordered semantically (by components position within the tree), de-duplicate them (to remove double renders or Suspended/interrupted renders), and send them to the front-end along with metadata about the commit (e.g. commit priority).\r\n\r\nThe front-end could print these in a new Log view. Each commit could be grouped (with diver lines between). Clicking on a log in the console could select the component that logged it in the tree (if it's still mounted).\r\n\r\nNote that objects logged should not be retained but should be stringified to avoid causing memory leaks. (As a result, de-duplication may not perfectly match browser behavior.) Sending logs to the front-end will most likely require adding new information to the [serialized tree update](https://github.com/facebook/react/blob/main/packages/react-devtools/OVERVIEW.md#serializing-the-tree) that gets sent after each commit.","state":"open","updated_at":"2022-01-09T07:43:09Z","created_at":"2021-07-15T20:01:27Z","creator_user_login":"bvaughn"}
{"number":21888,"title":"Bug: Useeffect Dependency List Dosent Recorgnise optional chaining","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.Write code with side effects inside the useeffect block\r\n\r\n2. list out the side effects using optional chaining to refer nested deps. \r\n\r\n\r\n code example\r\n\r\n useEffect(() => {\r\n    getProfessionalWorkImages(myProfession?._id);\r\n  }, [getProfessionalWorkImages, myProfession?._id]);\r\n\r\n## The current behavior\r\n\r\nReact still complains about missing dependencies on console\r\n\r\n## The expected behavior\r\n\r\nno warnings\r\n","state":"open","updated_at":"2022-01-09T07:43:10Z","created_at":"2021-07-15T19:16:34Z","creator_user_login":"pappyJ"}
{"number":21884,"title":"Bug: useState set the same value, trigger the render","body":"<!--![image](https://user-images.githubusercontent.com/47969261/125724805-268adb54-dd70-4852-a370-eb9018405160.png)  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nIn React Hooks, useState set the same value, trigger the render\r\n\r\n\r\nReact version:17.0.2\r\n\r\n## Steps To Reproduce\r\n```import React, { useState } from \"react\";\r\n\r\nconst App = () => {\r\n  const [Loading, setLoading] = useState(true);\r\n  const [count, setCount] = useState(0);\r\n\r\n  console.log('log: ', count);\r\n\r\n  const handleClick = () => {\r\n    setCount((pre) => pre + 1)\r\n  };\r\n  const handleLoad = () => {\r\n    setLoading(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>aa</div>\r\n      <div>{count}</div>\r\n\r\n      <button onClick={handleClick}>Test</button>\r\n      <button onClick={handleLoad}>Load</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n1.click Load[setLoading(true)], do not trigger the render, not console.log\r\n2.click test[setCount(pre => pre + 1)], trigger the render, console.log('log: ', 1);\r\n3.click Load[setLoading(true)], trigger the render, console.log('log: ', 1);\r\n\r\nwhy did this trigger the render when I clicked Load secondly ?\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:https://codesandbox.io/s/nifty-bohr-lqxex?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## debug\r\n\r\nI found that the problem lies in the <b>function dispatchAction(fiber, queue, action)</b> function\r\n\r\n```\r\nfunction dispatchAction(fiber, queue, action) {\r\n  {\r\n    if (typeof arguments[3] === 'function') {\r\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\r\n    }\r\n  }\r\n\r\n  var eventTime = requestEventTime();\r\n  var lane = requestUpdateLane(fiber);\r\n  var update = {\r\n    lane: lane,\r\n    action: action,\r\n    eagerReducer: null,\r\n    eagerState: null,\r\n    next: null\r\n  }; // Append the update to the end of the list.\r\n\r\n  var pending = queue.pending;\r\n\r\n  if (pending === null) {\r\n    // This is the first update. Create a circular list.\r\n    update.next = update;\r\n  } else {\r\n    update.next = pending.next;\r\n    pending.next = update;\r\n  }\r\n\r\n  queue.pending = update;\r\n  var alternate = fiber.alternate;\r\n\r\n  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {\r\n    // This is a render phase update. Stash it in a lazily-created map of\r\n    // queue -> linked list of updates. After this render pass, we'll restart\r\n    // and apply the stashed updates on top of the work-in-progress hook.\r\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\r\n  } else {\r\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\r\n      // The queue is currently empty, which means we can eagerly compute the\r\n      // next state before entering the render phase. If the new state is the\r\n      // same as the current state, we may be able to bail out entirely.\r\n      var lastRenderedReducer = queue.lastRenderedReducer;\r\n\r\n      if (lastRenderedReducer !== null) {\r\n        var prevDispatcher;\r\n\r\n        {\r\n          prevDispatcher = ReactCurrentDispatcher$1.current;\r\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n        }\r\n\r\n        try {\r\n          var currentState = queue.lastRenderedState;\r\n          var eagerState = lastRenderedReducer(currentState, action); \r\n          // Stash the eagerly computed state, and the reducer used to compute\r\n          // it, on the update object. If the reducer hasn't changed by the\r\n          // time we enter the render phase, then the eager state can be used\r\n          // without calling the reducer again.\r\n\r\n          update.eagerReducer = lastRenderedReducer;\r\n          update.eagerState = eagerState;\r\n\r\n          if (objectIs(eagerState, currentState)) {\r\n          // Fast path. We can bail out without scheduling React to re-render.\r\n          // It's still possible that we'll need to rebase this update later,\r\n          // if the component re-renders for a different reason and by that\r\n          // time the reducer has changed.\r\n            return;\r\n          }\r\n        } catch (error) {\r\n        // Suppress the error. It will throw again in the render phase.\r\n        } finally {\r\n          {\r\n            ReactCurrentDispatcher$1.current = prevDispatcher;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    {\r\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\r\n      if ('undefined' !== typeof jest) {\r\n        warnIfNotScopedWithMatchingAct(fiber);\r\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\r\n      }\r\n    }\r\n\r\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\r\n  }\r\n}\r\n```\r\n\r\n1. The first step, click the Load button, the code goes to (if (objectIs(eagerState, currentState))), and it is found that the temporary state (not yet rendered to the page) is the same as the current state (the current rendering of the page) (true-> true), return directly, do not enter the update schedule scheduleUpdateOnFiber(fiber, lane, eventTime);\r\n2. In the second step, click the test button, the state before and after is different (count from 0->1), the code enters scheduleUpdateOnFiber(fiber, lane, eventTime); the page is rendered again.\r\n3. In the third step, click the Load button. Since the condition if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) is not met at this time, it will not proceed. If (objectIs(eagerState, currentState)) is judged, it is directly executed to scheduleUpdateOnFiber(fiber, lane, eventTime); update scheduling, resulting in the function being re-executed and the page being re-rendered even if the loading before and after the same is the same.\r\n\r\n![image](https://user-images.githubusercontent.com/47969261/125724805-268adb54-dd70-4852-a370-eb9018405160.png)\r\nAt this moment, fiber.lanes changed from 0 to 1 (it was always 0 before), which is why trigger render.\r\n<b>I don't understand why fiber.lanes changed from 0 to 1 in this case.</b>","state":"open","updated_at":"2022-01-09T07:43:08Z","created_at":"2021-07-15T03:33:35Z","creator_user_login":"ry596384086"}
{"number":21879,"title":"devtools: Add `ref` to inspect element view","body":"## Summary\r\n\r\nDisplays the `ref` of an inspected element if the element has one. Was a bit difficult to track a particular ref through a somewhat larger component tree.\r\n\r\nRef to a class instance\r\n![localhost_8080_](https://user-images.githubusercontent.com/12292047/177032327-5e73882b-033b-4e78-b63d-f799b3367b92.png)\r\nRef to an Element\r\n![localhost_8080_ (1)](https://user-images.githubusercontent.com/12292047/177032330-7fbab3ff-fb56-4214-86a3-f861827cbf5b.png)\r\nanonymous callback ref\r\n![localhost_8080_ (2)](https://user-images.githubusercontent.com/12292047/177032332-2ac2256a-3ba2-46c3-886a-69ef6f44d4bd.png)\r\nnamed callback ref\r\n![localhost_8080_ (3)](https://user-images.githubusercontent.com/12292047/177032333-4ad8d2bd-ea16-468f-8c18-85c02463b5cb.png)\r\n\r\nThe UI feels a bit lost since we only have a single value in this new section. Ideally we'd have the `key` in the view too so we could create a \"Misc\" view. \r\n\r\nOn the other hand, the `ref` will eventually be just another prop (if I understood https://github.com/reactjs/rfcs/pull/107 correctly) so it'll merge with the props view eventually.\r\n\r\n## Test Plan\r\n\r\n- [x] Tested in shell\r\n- [x] CI green\r\n","state":"open","updated_at":"2022-07-03T08:49:18Z","created_at":"2021-07-14T14:23:54Z","creator_user_login":"eps1lon"}
{"number":21866,"title":"[DevTools] Scheduling Profiler umbrella task","body":"The [Scheduling Profiler](https://github.com/facebook/react/tree/main/packages/react-devtools-scheduling-profiler) is currently only accessible at [react-scheduling-profiler.vercel.app](https://react-scheduling-profiler.vercel.app/) and very few people know about it. Furthermore, the User Timing API marks that power this profiler are only enabled in the experimental release channel, which almost no one uses. We believe this profiler is an important part of understanding React’s concurrent scheduling and app performance.\r\n\r\n### Initial release\r\n - [x] #21867: Enable the `enableSchedulingProfiler` flag for all _profiling_ builds (not just in the _experimental_ release channel).\r\n - [x] #21897: Embed the scheduling Profiler into the Chrome build of the React DevTools extension. (The profiler currently only supports User Timing marks extracted from Chrome’s profiling format.) Add this profiler as a new tab within the ⚛️ Profiler panel.\r\n - [x] #21897: Design a splash page with instructions on how to record and import data.\r\n - [x] #21897: Hide the \"copy component stack\" context menu item if the data doesn't contain a component stack.\r\n - [x] #21947: Expose events (e.g. mouse click events) in the timeline as well for context\r\n - [x] #21966: Stack native events vertically so they don't overlap.\r\n - [x] #21966: Highlight native event handlers that schedule sync/blocking render work.\r\n - [x] #21970: Custom cursor system for canvas to improve UX\r\n - [x] Hide commit snapshot selector when Scheduling Profiler tab is active.\r\n - [x] Maybe allow sections to be toggled/collapsed (e.g. native flame graph) and skip rendering?\r\n- [x] #22043: Store imported profile data _and_ zoom/scroll state in new context (above scheduling profiler) so you don't lose it when you tab between profilers\r\n - [x] #22075: Fix `@reach/portal` bug unmount bug that gets thrown if you upload an invalid profile to the Scheduling profiler and then a valid profile afterward. (\"_Uncaught Error: NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node._\")\r\n\r\n### Follow up work\r\n- [x] Create a discussion thread on the [React 18 Working Group](https://github.com/reactwg/react-18/discussions/) about it and gather usability feedback.\r\n- [x] ~~Implement some sort of feature detection to hide this panel for `react-dom` builds that don't have `enableSchedulingProfiler` enabled? (Maybe only show it for v18+)~~ Probably not a good idea. You might want to import a profile on a non-React site.\r\n- [ ] Follow ups from #22005 \r\n  - [ ] Scroll state should be moved up into context\r\n  - [ ] Time axis marks should remain fixed and not scroll off screen\r\n  - [ ] Can we avoid having to explicitly call `surface.displayIfNeeded()` after an interaction (see https://github.com/facebook/react/pull/22005#issuecomment-896953399)\r\n- [ ] Try coloring component rendering to match suspense colors for components that suspended. (May require updating the React profiler marks)\r\n - [ ] Revisit the concept of _batching_. It's currently defined as one or more renders followed by a potential commit (unless the render is explicitly cancelled). I think this doesn't properly take into account interleaved work (e.g. offscreen/idle pre-rendering). Batch ID should probably also take _lane(s)_ into consideration.\r\n","state":"open","updated_at":"2022-01-08T23:43:15Z","created_at":"2021-07-13T17:25:27Z","creator_user_login":"bvaughn"}
{"number":21856,"title":"[DevTools] Show which hooks (names) changed in the Profiler","body":"Hooks are the preferred way for writing stateful React components, but there are a few things about them that still lag behind the class component API: profiling (since DevTools just shows “hooks changed” rather than which ones changed).\r\n\r\nBuilding on top of the initial named hooks release _and_ the experimental `enableProfilerChangedHookIndices` feature flag, the Profiler should show the “names” of hooks that changed between renders. (Because this would be expensive to eagerly calculate, we would need to add a post-processing phase to the profiler, like Chrome has, where we loaded and parsed names<sup>1</sup>.) \r\n\r\nNote that this issue will also resolve #16477.\r\n\r\n<sup>1</sup> We may only want to do this for components that are still mounted in the Fiber tree.","state":"open","updated_at":"2022-01-26T22:54:36Z","created_at":"2021-07-12T21:06:23Z","creator_user_login":"bvaughn"}
{"number":21847,"title":"Bug: video and audio elements invoking wasteful dispatches when there are no related handlers declared","body":"React version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render video or audio element with auto played source using React\r\n2. Do not declare any `on*` handlers on the element\r\n3. Run performance recording while not touching anything on the page\r\n\r\nLink to code example: https://jsfiddle.net/ArmorDarks/2ugd80tm/2/\r\n\r\n## The current behavior\r\n\r\nPerformance recording will show that React constantly triggers event dispatcher despite actually no handlers were added to the element and no interaction was done with the element at all.\r\n\r\n![Screenshot 2021-07-11 231528](https://user-images.githubusercontent.com/4460311/125211548-c52ac200-e2af-11eb-8d06-0d0044248d0d.png)\r\n\r\nUpon inspection of the video element, there will be already attached event listeners despite we handle non of them. That becomes problematic for media elements since they have listeners like \"progress\" which are executed constantly hence wasting CPU and adding up to the stack.\r\n\r\n![listeners](https://user-images.githubusercontent.com/4460311/125211585-07ec9a00-e2b0-11eb-91ed-599552d47c86.png)\r\n\r\nThat becomes especially noticeable in applications like [Restream Studio](https://restream.io/studio) which have a lot of video elements on the page and already heavily rely on CPU for encoding and video processing. For such apps, anything that adds for no reason to a stack affects performance on weaker machines.\r\n\r\n## The expected behavior\r\n\r\nThere should be no additional listeners on the elements if handlers actually were never declared in React. The mechanism is understandable with events like `onClick` which are not executed anyway unless you click the element, but it's noticeable with `progress`  and other similar listeners which will fire even when there's no interaction with the page.\r\n\r\nThe issue can be workaround by simply creating the element manually in the `useEffect` and appending it somewhere via `ref` manually, but that a bit defies the point of React rendering model.\r\n","state":"open","updated_at":"2022-01-09T10:38:26Z","created_at":"2021-07-11T22:37:42Z","creator_user_login":"ArmorDarks"}
{"number":21828,"title":"[Devtools] Indicate or print which element causes suspense fallback","body":"In a deep component tree, we sometimes modify a deeply nested component to use suspense but failed to wrap `Suspense` at a suitable place, this causes the root `Suspense` into fallback and is hard to location where this fallback is introduced.\r\n\r\n\"Whether a component is throwing Promise\" is an implicit convention of component, this is not detectable by any static analyzer, so in a complex app this missing `Suspense` issue can happen frequently.\r\n\r\nI've tested error boundaries but they cannot catch Promise, maybe devtools can provide functionality to report where Promises are thrown.","state":"open","updated_at":"2022-01-09T10:06:03Z","created_at":"2021-07-08T05:19:31Z","creator_user_login":"otakustay"}
{"number":21827,"title":"[Devtools] Make link style value clickable","body":"I didn't find a suitable place to open feature request of react devtools.\r\n\r\nWe're developing a babel plugin to inject a `useDebugValue` into every component so that developers can immediately see the source file path of inspecting component like:\r\n\r\n![image](https://user-images.githubusercontent.com/639549/124860336-0f781e80-dfe4-11eb-875f-d8715b625dba.png)\r\n\r\nWe are expecting this `file://` url clickable and open the default code editor on clicked, like those image urls in DOM panel:\r\n\r\n![image](https://user-images.githubusercontent.com/639549/124860429-3a627280-dfe4-11eb-805d-fb99ad783f00.png)\r\n\r\nThis can be a helpful feature to help developers quickly location source files, stackoverflow questions and more","state":"open","updated_at":"2021-12-14T22:32:29Z","created_at":"2021-07-08T04:02:20Z","creator_user_login":"otakustay"}
{"number":21823,"title":"[fizz] Add comments about task","body":"Add comments about task","state":"open","updated_at":"2022-01-09T00:41:55Z","created_at":"2021-07-08T01:27:23Z","creator_user_login":"taichiyi"}
{"number":21812,"title":"Bug: onContextMenu not fired in iOS 13 and later","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nFrom v13 onwards, iOS doesn't fire `contextmenu` events on long-press. It only displays the \"touch callout\".\r\n\r\nThis inconsistency with all other browser seems, like something [synthetic events](https://reactjs.org/docs/events.html) could handle:\r\n\r\n> Your event handlers will be passed instances of SyntheticEvent, a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event, including stopPropagation() and preventDefault(), **except the events work identically across all browsers**.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Long-press an element with an `onContextMenu` listener\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://www.quirksmode.org/dom/events/tests/contextmenu.html\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nReact `onContextMenu` listeners are not called.\r\n\r\n## The expected behavior\r\nReact `onContextMenu` listeners are called.\r\n\r\n## Workarounds\r\n* Use a timer to detect long-press, or a [library](https://www.npmjs.com/package/use-long-press) that does that\r\n* Use an alternative user interaction - which is perhaps what Apple would rather you do, but degrades the experience for non-native apps\r\n\r\n## References\r\n* #17596\r\n* https://github.com/Leaflet/Leaflet/issues/6817\r\n* https://github.com/mdn/browser-compat-data/issues/6376\r\n* https://github.com/w3c/touch-events/issues/68\r\n* https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-touch-callout (still doesn't fire even when callout disabled)","state":"open","updated_at":"2022-01-09T07:43:11Z","created_at":"2021-07-07T16:27:09Z","creator_user_login":"robatwilliams"}
{"number":21809,"title":"Bug: Safari does not load lazy-imported components when re-entering site","body":"On the iOS version of Safari lazy load of components (with React.lazy) does not always work correctly. If you enter the website everything works fine, but if you then close Safari through the app drawer and open it up again - the website does not load the components again and the site is stuck in Suspense fallback. The only way to get it to work again is to click refresh in the browser. Then all the components are fetched again.  \r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n(Does. not work on iOS simulators, encountered on deployed production builds only)\r\n\r\n1. Enter a deployed site that users React lazy loading and React Suspense on iOS device\r\n2. Open app drawer\r\n3. Close Safari\r\n4. Open Safari again\r\n\r\n\r\n## The current behavior\r\n\r\nResult: the app is stuck on Suspense fallback (loading spinner in my case). Maybe iOS safari caching or storage optimization has something to do with it. It seems that resuming the app does not prompt component load.\r\n\r\n## The expected behavior\r\n\r\nWhen resuming the website (by opening Safari again) everything should load up again.\r\n","state":"open","updated_at":"2023-08-28T17:49:40Z","created_at":"2021-07-07T13:10:14Z","creator_user_login":"ksendra"}
{"number":21807,"title":"React's JSX doesn't support namespace tags How do I set `throwIfNamespace: false`","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nError \r\n\r\n> ./src/components/svg/traveller.js\r\n> SyntaxError: /home/krishnadevz/jadoo/src/components/svg/traveller.js: Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.\r\n>    5 |         return (\r\n>    6 |             <div>\r\n> >  7 | <svg width=\"765\" height=\"764\" viewBox=\"0 0 765 764\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n>      |                                                                                                    ^^^^^^^^^^^\r\n>    8 | <rect width=\"765\" height=\"764\" fill=\"url(#pattern0)\"/>\r\n>    9 | <defs>\r\n>   10 | <pattern id=\"pattern0\" patternContentUnits=\"objectBoundingBox\" width=\"1\" height=\"1\">\r\n\r\nReact version:18\r\n\r\n## Steps To Reproduce\r\n\r\n1.I am importing a Figma file as an SVG and then I saving it in class-based react component and then export and using it in other components and that file is throwing an error. \r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:https://codesandbox.io/s/traveller-9q5qy\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThrowing error React's JSX doesn't support namespace tags\r\n\r\n## The expected behavior\r\nIt should be worked fine and also there is no .babelrc file so that I can set namespace : false i created and did it but still, it is not working please fix this issue or give a temp fix.","state":"open","updated_at":"2023-05-19T19:10:34Z","created_at":"2021-07-07T08:26:52Z","creator_user_login":"krishnadevz"}
{"number":21806,"title":"React 17/18 custom Synthetic Events","body":"The Previous solution in #10135 no longer works for React 17 or React 18.\r\n\r\nIt would be really convenient to be able to craft events that react handles for custom inputs.\r\n\r\ne.g. I have an accordion component and would like to add the ability to use it as an input, when the user clicks a button I'd like to dispatch a change event so their handlers get called. ","state":"open","updated_at":"2022-03-10T17:47:55Z","created_at":"2021-07-06T20:59:28Z","creator_user_login":"lifeiscontent"}
{"number":21802,"title":"[React 18] Possible Suspense Bug - Thrown error causes corrupted page","body":"I've found what I think to be a React bug, although it could be something we are doing wrong inside Blitz.js\r\n\r\n`React 18.0.0-alpha-ed6c091fe-20210701`\r\n\r\n## Basic Explanation\r\n\r\nThe position of a top level, unneeded `<Suspense>` component next to an `<ErrorBoundary>` causes odd UI rendering or totally corrupted page.\r\n\r\nFollowing are different variations of [this code](https://github.com/flybayer/blitz-react18/blob/main/app/pages/_app.tsx#L15-L22) inside `_app.tsx` (which is the same top level root as Next.js)\r\n\r\nThis code in `_app.tsx` causes a totally corrupted page (shows content on page that's no longer managed by React):\r\n```tsx\r\n    <Suspense fallback=\"Loading...\">\r\n      <ErrorBoundary FallbackComponent={RootErrorFallback}>\r\n        <Component {...pageProps} />\r\n      </ErrorBoundary>\r\n    </Suspense>\r\n```\r\n\r\nThis code in `_app.tsx` results in a correct end-result but has janky page transition.\r\n\r\n```tsx\r\n    <ErrorBoundary FallbackComponent={RootErrorFallback}>\r\n      <Suspense fallback=\"Loading...\">\r\n        <Component {...pageProps} />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n```\r\n\r\nThis code in `_app.tsx` without `<Suspense>` works flawless.\r\n\r\n```tsx\r\n    <ErrorBoundary FallbackComponent={RootErrorFallback}>\r\n      <Component {...pageProps} />\r\n    </ErrorBoundary>\r\n```\r\n\r\nI feel like this is a React bug because, to my knowledge, position of a `<Suspense>` component should have zero affect on a thrown error or ErrorBoundary.\r\n\r\n## Further Explanation\r\n\r\nIn Blitz.js, we have a feature for restricting access to certain pages based on the user login status. We implement this [by throwing a custom `RedirectError`](https://github.com/blitz-js/blitz/blob/canary/packages/core/src/auth/auth-client.ts#L68-L74). And then inside our `<ErrorBoundary>` component, [we call `router.push()`](https://github.com/blitz-js/blitz/blob/canary/packages/core/src/error-boundary.tsx#L94-L98) when RedirectError is caught. And while the ErrorBoundary is in that temporary in-between state, we [render null](https://github.com/blitz-js/blitz/blob/canary/packages/core/src/error-boundary.tsx#L154-L156). The issue described above occurs when a page transition is initiated via RedirectError.\r\n\r\nPlease let me know if there's something wrong with this approach or if there's a better way to implement the pattern. 🙏 \r\n\r\n## To Reproduce\r\n\r\n1. Open this codesandbox: https://codesandbox.io/s/sharp-antonelli-u982e\r\n1. Wait for the deps to install and home page to load (takes a bit)\r\n1. See both the contents of `/protected` and `/` on the same page:\r\n   - React dev tools shows that the `/protected` contents are no longer in the React tree\r\n![image](https://user-images.githubusercontent.com/8813276/124835823-f3c33880-df4f-11eb-9371-e8d0aee570b9.png)","state":"open","updated_at":"2022-03-30T01:37:46Z","created_at":"2021-07-05T21:41:27Z","creator_user_login":"flybayer"}
{"number":21801,"title":"Bug: radio and checkbox controlled checked property is not updated when browser restores form state","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add a textbox, two radio buttons (or checkboxes) controlling the `checked` property with state, and a `button[type=submit]`.\r\n2. Check off the second item (\"Bananas\").\r\n3. Enter text into the \"Your name\" textbox.\r\n4. Right click on the tab and duplicate it. Alternative: close + re-open the tab, or navigate away to a different page and go back.\r\n\r\n```javascript\r\nfunction App() {\r\n  const [fruit, updateFruit] = useState(\"apple\");\r\n  const [name, updateName] = useState(\"\");\r\n\r\n  function onFruitChange(e) {\r\n    const newFruit = e.target.value;\r\n    updateFruit(newFruit);\r\n  }\r\n\r\n  function onNameChange(e) {\r\n    const newName = e.target.value;\r\n    updateName(newName);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        <input type=\"radio\" name=\"fruit\" value=\"apple\" checked={fruit === \"apple\"} onChange={onFruitChange} />\r\n        Apples\r\n      </label>\r\n      <label>\r\n        <input type=\"radio\" name=\"fruit\" value=\"banana\" checked={fruit === \"banana\"} onChange={onFruitChange} />\r\n        Bananas\r\n      </label>\r\n      <div>\r\n        <input type=\"text\" name=\"name\" placeholder=\"Your name\" value={name} onChange={onNameChange} />\r\n      </div>\r\n      <div>\r\n        Preferred fruit:\r\n        {fruit === \"apple\" ? \"Apples\" : \"Bananas\"}\r\n      </div>\r\n      <br />\r\n      <div>Your name: {name}</div>\r\n      <hr />\r\n      <br />\r\n      <div>\r\n        <button type=\"submit\">Save</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nhttps://user-images.githubusercontent.com/613788/124511769-e9187000-dda4-11eb-99f9-e1334d4057c3.mp4\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/hungry-glitter-ut79s\r\n\r\n**IMPORTANT**: This CodeSandbox won't work because the browser will be too early when restoring the form state (transpiling is too slow). I suggest taking this script to a local server to confirm that the browser was able to properly restore form state when loading the page.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe `banana` radio is checked and `Preferred fruit: Apples` is shown. The react state has `fruit === 'apple'` but the browser has the opposite state.\r\n\r\nI've confirmed that this behavior happens with `input[type=checkbox]` too.\r\n\r\n## The expected behavior\r\n\r\nTo match the behavior of other controlled inputs like the textbox, `apple` radio should be checked and `Preferred fruit: Apples` should be shown. The input `checked` property isn't being synced. \r\n\r\n## Related issues\r\n\r\n- https://github.com/facebook/react/issues/10657\r\n  - I'm not using SSR though.\r\n- https://github.com/facebook/react/issues/18502\r\n  - Maybe related, but I'm not using `defaultChecked`.\r\n- https://github.com/vercel/next.js/issues/6128\r\n  - Similar issues.","state":"open","updated_at":"2022-12-08T16:16:31Z","created_at":"2021-07-05T19:25:33Z","creator_user_login":"TheCloudlessSky"}
{"number":21798,"title":"[DevTools] Named hooks umbrella","body":"This is an umbrella issue to track outstanding issues related to the DevTools named hooks project:\r\n\r\n### MVP\r\n* #16474\r\n* #21794\r\n* #21811\r\n* #21793\r\n* #21817\r\n* #21822\r\n* #21818\r\n* #21834\r\n* #21792\r\n* #21870\r\n* #21868\r\n* #21796\r\n\r\n### Post-MVP\r\n* #21855\r\n* #21782\r\n* #21983\r\n* #21856","state":"open","updated_at":"2022-01-09T07:43:02Z","created_at":"2021-07-03T17:26:23Z","creator_user_login":"bvaughn"}
{"number":21777,"title":"[DevTools] Combine view highlighting code","body":"DevTools currently has two views that manage highlighting things in the DOM:\r\n* [`backend/views/Highlighter`](https://github.com/facebook/react/tree/main/packages/react-devtools-shared/src/backend/views/Highlighter): highlights the DOM for the currently selected element\r\n* [`backend/views/TraceUpdates`](https://github.com/facebook/react/tree/main/packages/react-devtools-shared/src/backend/views/TraceUpdates): highlights the DOM when a component renders/updates\r\n\r\nIt would be nice if this was refactored to use a single, Canvas-based solution.","state":"open","updated_at":"2021-12-14T22:33:16Z","created_at":"2021-07-01T14:09:05Z","creator_user_login":"bvaughn"}
{"number":21761,"title":"Bug: Picture elements fail to update to appropriate source image on window resize in Safari","body":"Using Safari 14.0.3 on macOS Big Sur 11.2.2, `<picture>` elements rendered using React fail to update to the correct image source when the window is resized.\r\n\r\nIf fixing this bug would be considered a good first ticket and some guidance is provided, I'd be happy to fix it.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Resize window across picture's breakpoint (768px)\r\n\r\nLink to code example: [https://codesandbox.io/s/dazzling-nobel-bh3gh](https://codesandbox.io/s/dazzling-nobel-bh3gh)\r\n\r\n## The current behavior\r\n\r\nThe first image (rendered using React) continues to render the initial source image.\r\n\r\n## The expected behavior\r\n\r\nThe first image should behave the same as the second (rendered statically inside index.html) and switch to the correct source image when a media condition applies.","state":"open","updated_at":"2021-06-28T08:25:54Z","created_at":"2021-06-27T18:00:49Z","creator_user_login":"bruncun"}
{"number":21757,"title":"PointerLeave event listener not fired across renders","body":"This is a bit of an edge case and might be the logical expected behavior.\r\n\r\nWhen adding two `pointerleave` events listeners to a ref interleaved with renders, the second `pointerleave` doesn't fire.\r\n\r\nhttps://user-images.githubusercontent.com/5003380/123510716-57f71a00-d67d-11eb-8488-38222bea4e3e.mov\r\n\r\nThe top square has a ref which gets two `pointerenter` and two `pointerleave` listeners that trigger a render by changing the component state. The listeners are added (and cleaned) on every render in a `useEffect` hook.\r\n\r\nThe bottom square has `onPointerEnter` and `onPointerLeave` props that also trigger a render by changing the component state.\r\n\r\nAs you can see from the video above, the behavior of the top square is different depending on whether the mouse exits to the background or to the bottom square.  \r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nFrom the demo below:\r\n1. Hover the top square\r\n2. Hover the bottom square\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/use-gesture-react-use-hover-bug-forked-gpr0r\r\n\r\n## The current behavior\r\n\r\nWhen hovering the bottom square, the top square has `hovering1` set to `false` and `hovering2` set to `true`.\r\n\r\n## The expected behavior\r\n\r\nWhen hovering the bottom square, the top square should have both `hovering1` and `hovering2` set to `false`.","state":"open","updated_at":"2022-01-09T07:43:20Z","created_at":"2021-06-26T10:57:41Z","creator_user_login":"dbismut"}
{"number":21751,"title":"[DevTools Bug] Children cannot be added or removed during a reorder operation.","body":"### Website or app\n\nhttps://github.com/Alice-in-korea/chrome_bug_report.git\n\n### Repro steps\n\n1. Click next day button or prev day button\r\n2. Normally there are only three column for three days but you can see the fragment of other column with error message.\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\nreact-devtools-extensions\n\n### DevTools version (automated)\n\n4.13.5-0ae5290b54\n\n### Error message (automated)\n\nChildren cannot be added or removed during a reorder operation.\n\n### Error call stack (automated)\n\n```text\nat chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21301:41\r\n    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19286:22)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19446:12\r\n    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37413:39)\n```\n\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n```text\nhttps://api.github.com/search/issues?q=Children cannot be added or removed during a reorder operation. in:title is:issue is:open is:public label:\"Component: Developer Tools\" repo:facebook/react\n```\n","state":"open","updated_at":"2022-06-28T13:54:45Z","created_at":"2021-06-25T04:11:26Z","creator_user_login":"Alice-in-korea"}
{"number":21749,"title":"Using window.open w/Apollo Client, followed by a state update seems to crash / freeze app","body":"Calling `window.open()` with a timeout to close (e.g. to help a user get a new authentication session) with a simple usage of Apollo Client's `useQuery`, followed by any state update, seems to crash / freeze the app. There's no stack trace / render thrashing / obvious functions which are being called in an infinite loop.\r\n\r\nObviously the React team is not responsible for bugs which are coming from Apollo Client. However, I'm not sure if it's an Apollo Client bug or an issue w/React. The reason I'm unsure is that upgrading to React 17.0.1 fixes the issue, which makes me suspect it could be a bug in the version of React where I found the issue (16.14.0).\r\n\r\nI understand if this bug just gets closed immediately, I'm mostly just curious if this sounds like a known bug or issue to the React team, though it might be hard to diagnose without understanding the internals of the Apollo Client.\r\n\r\nHere is the bug I filed with Apollo client which includes a minimal reproduction repository:\r\nhttps://github.com/apollographql/apollo-client/issues/8427\r\n\r\nReact version: **16.14.0**\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone this repository and checkout to `strangeReactBug` branch: https://github.com/dannycochran/usequery/tree/strangeReactBug\r\n\r\n2. Open Chrome (not reproducible in Safari)\r\n\r\n3. Click \"Sign in and sign out\", wait for the window to return.\r\n\r\n4. Repeat step 2 until the app is crashed.\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/dannycochran/usequery/tree/strangeReactBug\r\n\r\n## The current behavior\r\n\r\nThe app will crash / freeze after the opened window closes.\r\n\r\n## The expected behavior\r\n\r\nThe app would not crash / freeze.\r\n\r\n## Workaround\r\n\r\nUpgrade to React 17.0.1","state":"open","updated_at":"2023-03-02T04:27:06Z","created_at":"2021-06-24T22:23:54Z","creator_user_login":"dannycochran"}
{"number":21742,"title":"Inconsistent crossbrowser onBeforeInput paste event behavior","body":"### React version: 17.0.2\r\nIn Chrome, pasting triggers `onPaste` and `onBeforeInput`, with the `nativeEvent`s `ClipboardEvent` and `TextEvent` respectively.\r\n\r\nIn Firefox, pasting only triggers `onPaste` with `nativeEvent` `paste`.\r\n\r\nIf I'm not mistaken, this seems to be the code responsible for not triggering `onBeforeInput` on native `paste` events:\r\nhttps://github.com/facebook/react/blob/27c9c95e23ddedb9163373950e364dd62038f6c0/packages/react-dom/src/events/plugins/BeforeInputEventPlugin.js#L328-L331\r\n\r\n### React version: 17.0.2 and 18.0.0\r\n\r\n17.0.2\r\nhttps://codesandbox.io/s/condescending-cerf-e1qt9?file=/src/App.js\r\n18.0.0\r\nhttps://codesandbox.io/s/sparkling-sun-fylti?file=/src/App.js","state":"open","updated_at":"2021-06-24T15:51:03Z","created_at":"2021-06-24T01:13:36Z","creator_user_login":"johtso"}
{"number":21731,"title":"Bug: Rendering an array of arrays doesn't warn developer about missing key=\"\"","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\nNormally, when rendering an array of elements, React in dev mode helpfully warns the developer that they goofed and didn't include a key=\"\":\r\n\r\n```js\r\n{[1, 2, 3].map(n => <span>{n}</span>)} // Warning: Each child in a list should have a unique \"key\" prop.\r\n```\r\n\r\nHowever, when we render an array of arrays, no such warning is displayed:\r\n\r\n```js\r\n{[1, 2, 3].map((n) => [<span key=\"sure i have a key, trust me!\">{n}</span>])} // No warning! Buggy!\r\n```\r\n\r\nI can't think of a reason why someone would _legitimately_ want to display an array of arrays (If they would, they'd render an array of Fragments with a key assigned). However, this **can happen by accident quite easily** when e.g. preparing a list of React elements from some nested structure, something like this:\r\n\r\n```js\r\n// Waay oversimplified version of something that I wrote:\r\nfunction renderTasks(tasks) {\r\n  return tasks.map(t => <Task task={t} key={t.id} />)\r\n}\r\n\r\nfunction renderSections(sections) {\r\n  const elements = []\r\n  // ...\r\n  sections.forEach(section => {\r\n    const renderedSection = renderTasks(section.tasks)\r\n    // Oops! Should be elements.push(... renderedSection)\r\n    elements.push(renderedSection)\r\n  })\r\n  // ...\r\n  return elements\r\n}\r\n```\r\n\r\nObviously, this is not good. If, say, first section is removed, everything that follows will be unmounted and mounted again (since the innermost `<Task/>`s do have a key, and those key will differ, none of them will be reused).\r\n\r\nWhat makes it worse is that elements of an array are flattened when displayed in React devtools, so it's difficult to notice that I actually rendered an array of arrays - in devtools it looks like a flat array of items, each with its own key — and yet, on every render, \"siblings\" with the same key have their render.\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example: https://codesandbox.io/s/winter-haze-o1tq4\r\n\r\n## The current behavior\r\n\r\nNothing happens, and a rendered list's elements don't have a key\r\n\r\n## The expected behavior\r\n\r\n```\r\nWarning: Children of a list should not be an array. Change the inner array elements to a <React.Fragment /> and assign a unique \"key\" prop. \r\n```","state":"open","updated_at":"2022-01-09T14:53:47Z","created_at":"2021-06-23T12:33:13Z","creator_user_login":"radex"}
{"number":21726,"title":"Bug: Old bug Invariant Violation, happens ONLY in production","body":"React version: 17.0.2\r\n\r\nHello everyone,\r\n\r\nI'm sorry if this is unclear, however some bug appeared in our app couple of days ago. The bug describes as this:\r\n\r\n```\r\nUncaught Invariant Violation: Minified React error #44; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=44 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n```\r\n\r\nWhich translates to this in react website:\r\n```\r\nfindDOMNode was called on an unmounted component.\r\n```\r\n\r\nWe did not upgrade anything, we just developed features as usual. However up until now I haven't been able to solve it because it doesn't happen locally at all. Thus I am not able to debug this thing.\r\n\r\nWeirdly if it only happens if i refresh the page, also only happened at 2 route, i.e: `/home` and `/login`. If i refresh the page with any other route, then it works.\r\n\r\nThe problem is it doesn't happen on localhost so I really have no idea what this is. \r\n\r\nThe project is company's based so I don't think i can share the codebase, however i will share some of the most important details that I think is causing this issue?\r\n\r\nWe are using `craco` and `lerna` in monorepo packages.\r\n\r\nhere's our craco config:\r\n```\r\nconst cracoBabelLoader = require('craco-babel-loader');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst cracoIncludeLernaPackagePlugin = require('./craco-include-lerna-package-plugin');\r\n\r\n// Handle relative paths to sibling packages\r\nconst appDirectory = fs.realpathSync(process.cwd());\r\nconst resolvePackage = relativePath => path.resolve(appDirectory, relativePath);\r\n\r\nmodule.exports = {\r\n\tplugins: [\r\n\t\t{\r\n\t\t\tplugin: cracoBabelLoader,\r\n\t\t\toptions: {\r\n\t\t\t\tincludes: [resolvePackage('../formik-material'), resolvePackage('../naked-forms')]\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\tstyle: {\r\n\t\tpostcss: {\r\n\t\t\tplugins: [require('tailwindcss'), require('autoprefixer')]\r\n\t\t}\r\n\t}\r\n};\r\n```\r\n\r\n\r\nIs anyone experiencing the same issue? Please help\r\n\r\nAlso our cloud setup is using GCP Cloud Storage, loaded from Google Load Balancer with CDN option below if that helps:\r\n\r\n![Screen Shot 2021-06-23 at 4 41 03 pm](https://user-images.githubusercontent.com/56941349/123048563-dd8e8600-d441-11eb-9988-5c67aa9cf6f2.png)\r\n\r\n\r\nThanks in advance","state":"open","updated_at":"2022-01-09T07:43:13Z","created_at":"2021-06-23T06:34:05Z","creator_user_login":"Bluefitdev"}
{"number":21706,"title":"Bug: Memory leak with setState lambda setting to previous state","body":"Hi, \r\n\r\nIt seems that there is a memory leak issue when using the set state hook lambda syntax, and setting the state to the previous state. The set state lambda in this scenario seems to be retained and never garbage collected. \r\n\r\nPlease ignore the contrived example, it's intentionally whittled down to the exact issue. It's quite a common requirement in our application to subscribe to an rxjs observable in a useEffect hook, then update some state when events are received (but the data received might not always result in a state change). The lambda syntax is required in the set state call because current state would otherwise always be the default state due to the closure around it in the useEffect hook. Even if there was another way to do it to avoid the issue, it's still a surprising behaviour and makes it harder to fall into the 'pit of success'.\r\n\r\nReproduction below: \r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Memory leak repro</title>\r\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\r\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\r\n\r\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"text/babel\">\r\n        function App() {\r\n          const [someState, setSomeState] = React.useState(false);\r\n          React.useEffect(() => {\r\n             const interval = setInterval(() => {\r\n               const a = []; \r\n               for (var i = 0; i < 1000; i++) {\r\n                 a.push({}); //produce lots of garbage objects to make the leak easier to see\r\n               }\r\n               // memory leak when setting state to previous state\r\n               // set state lambda is not garbage collected and retained along with all of its captured closures\r\n               setSomeState(state => a.length > 0 ? state : !state);\r\n\r\n               // no memory leak when setting state to something other than previous state\r\n               // set state lambda (and it's closures) are garbage collected as expected\r\n               // setSomeState(state => a.length == 0 ? state : !state);\r\n              }, 100);\r\n             return () => clearInterval(interval);\r\n          }, []);\r\n          return <div>Test Memory Leak</div>;\r\n      }\r\n\r\n\r\n      ReactDOM.render(\r\n        <App/>,\r\n        document.getElementById('root')\r\n      );\r\n\r\n    </script>\r\n  </body>\r\n</html>\r\n\r\n```\r\n\r\nThe best memory profiler to see this is the 'Allocation instrumentation on timeline' mode in chrome devtools. \r\n\r\nI have confirmed this also happens using production / minified bundles so it's not a dev build issue. \r\n\r\nRight now as a workaround I need to use 'hacks' like useRef and forceUpdate implementations which is a real shame so keen to see this fixed. \r\n\r\nPossibly related to #21692\r\nMany thanks!","state":"open","updated_at":"2022-01-09T07:43:01Z","created_at":"2021-06-19T19:31:47Z","creator_user_login":"Haemoglobin"}
{"number":21705,"title":"Where is the React Dev Tools extension official guide found?","body":"Does a React Dev Tools guide exist with examples for different scenarios, when the wrapping colored box appears, the colors meaning, why it seems to always wrap the entire APP and also the specifics ?\r\n\r\nFound this but it's back from 2014:\r\nhttps://reactjs.org/blog/2014/01/02/react-chrome-developer-tools.html\r\n\r\nAlso:\r\nhttps://github.com/facebook/react/blob/master/packages/react-devtools/CHANGELOG.md\r\n\r\nWhile searching on the wild I have seen different examples that when tested on my end show a different result from the React Dev tools extension perspective which generates confusion.\r\n\r\nFor instance I took this example:\r\nhttps://blog.logrocket.com/react-memo-vs-usememo/\r\n\r\nAs seen on the gifs from that blog the squarred box highlighting never shows for the entire ParentComponent.\r\n\r\nI did the test with different styles but pretty much the same thing and the highlight appears for the entire component:\r\n\r\n<img width=\"585\" alt=\"understanding_the_graybox_that_always_shows_up\" src=\"https://user-images.githubusercontent.com/26904626/122650133-6af27300-d0ee-11eb-9c20-0b914d3bb199.png\">\r\n\r\nSo the gray box around the buttons would be expected, but not the outer one. Why does this appear?\r\n\r\nDoes this guide exist ? If not, will it be created?\r\n\r\nBest Regards","state":"open","updated_at":"2022-01-09T07:43:25Z","created_at":"2021-06-19T16:44:11Z","creator_user_login":"thecircleoflifefree"}
{"number":21701,"title":"React 18 data fetching network call cancellation","body":"I understood from various discussions online that for Suspense for data fetching to work properly React needs to be more directly involved in the mechanics of fetching data from the network. How will that work in practice? Would it take care of XHR cancellation for example in case a Suspense subtree is no longer needed or changes props? What will it mean for using libraries like Axios? Can strategies like retry with exponential backoff still be implemented? HTTP caching behavior?","state":"open","updated_at":"2022-10-27T12:01:33Z","created_at":"2021-06-18T10:05:49Z","creator_user_login":"rybon"}
{"number":21693,"title":"Don't warn about whitespace inside <table>","body":"Hello, in some cases the warnings emmitted by React about the Dom layout are not necessary, and create issues. An example of this is the errors thrown when whitespace is used around table elements. \r\n```\r\nvalidateDOMNesting(...): Whitespace text nodes cannot appear as a child of <table>\r\n```\r\n\r\nThere is an assumption in this rule that the JSX is created by the user and hand-written source code and therefore the rule tries to guard against accidental layout bugs when you format your JSX with whitespace. However, this is not actually always the case, and the JSX can instead be generated from tools whos only requirement is to emit valid HTML (where spaces around table elements are allowed!).\r\n\r\nThis makes an annoying issue where you get some really really ugly errors in a context in which this is not only not helpful, but actively creating more work! Here's a concrete example: https://github.com/rehypejs/rehype-react/issues/28 (demo: https://codesandbox.io/s/remark-rehype-debug-forked-21j7e) this tool pretty prints the generated HTML, and so puts some extra new lines around the generated HTML. When used with react this breaks, when used with 'raw js/html' this is fine!\r\n\r\nIn short, please allow all optional DOM validation rules to be disabled. Stuff like tag nesting that is in the HTML standard should probably be left unchanged, but optional rules like whitespace should be customizable.","state":"open","updated_at":"2022-04-30T15:26:28Z","created_at":"2021-06-16T17:27:00Z","creator_user_login":"stevemk14ebr"}
{"number":21692,"title":"Bug: memory leak in useReducer","body":"React version: 17.0.2\r\n\r\nWhen using `React.useReducer()` and a new action is pushed, but the reducer returns the current state, the operation is queued in a pending queue. But if the component isn't re-rendered for other reasons, it will never start work on that pending queue. This can potentially rack up a huge list of `pending.next.next.next.next...`\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/unruffled-moore-wp5wq?file=/src/App.js\r\n2. click increment a few times\r\n2. place a breakpoint in react-dom.development.js line 16072, click increment, that should hit the break point, then expand queue.pending.next.next.next and see they are unique actions. (https://github.com/facebook/react/blob/269dd6ec5da85fc5ca819cfa010ce60dd1c83ec6/packages/react-reconciler/src/ReactFiberHooks.new.js#L1937)\r\n\r\nLink to code example: https://codesandbox.io/s/unruffled-moore-wp5wq?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThere is no change in behavior, but it is potentially racking up an enormous list of pending tasks, costing memory.\r\n\r\n## The expected behavior\r\n\r\nFlat memory usage. Reducer doesn't run twice on the same action.\r\n\r\nThis is very much related to https://github.com/facebook/react/pull/15198 because later the reducer might run, and basically reduce the same actions again. Which is unexpected. And if using side-effects, doesn't produce the expected results.\r\n\r\nOther related bugs: https://github.com/facebook/react/issues/17953 https://github.com/facebook/react/issues/15088","state":"open","updated_at":"2023-06-30T10:08:22Z","created_at":"2021-06-16T16:11:17Z","creator_user_login":"onnlucky"}
{"number":21685,"title":"Bug: Webpack process and setImmediate polyfill interferes with time slicing","body":"Here's the copy paste of the polyfill: https://gist.github.com/gaearon/5d2f7bedf76d7bbec2b5c1ee04861ce3\r\n\r\nThis reproes with old CRA (e.g. `react-scripts@0.7.0`). I saw this on this branch: https://github.com/Swizec/react-fractals/pull/16\r\n\r\nThe result is concurrent renders get grouped into a huge blocking task:\r\n\r\n<img width=\"815\" alt=\"Screenshot 2021-06-15 at 18 01 27\" src=\"https://user-images.githubusercontent.com/810438/122094843-8581cf00-ce04-11eb-9a40-fd3758301255.png\">\r\n\r\nNot sure why yet.","state":"open","updated_at":"2022-04-03T23:16:39Z","created_at":"2021-06-15T17:07:37Z","creator_user_login":"gaearon"}
{"number":21668,"title":"Question: Transition starvation in React 18?","body":"Main question:\r\n\r\n> What happens if a transition gets constantly interrupted before it has time to finish, and are there any cases where we need to worry about this in userland?\r\n\r\nSubquestion:\r\n\r\n> What exactly interrupts a transition? Is it only user events, or also for example when a new transition happens and if so, is it only if a new transition happens in the same component or an ancestor, or is it app-wide?\r\n\r\nI've seen discussions around the starvation problem now and then (can't remember where) so I'm curious about if you have ended up with a specific approach in React 18 or if this is yet undecided? It struck me that since interrupted work is no longer reused, maybe this has the potential for happening more often now?\r\n\r\nThe heuristics is an internal detail that can be tweaked of course, so I'm mostly interested if this is something I'll need to ever care about as a developer?\r\n\r\nPerhaps more concretely:\r\n\r\n> What happens if I call `startTransition` in a `requestAnimationFrame` and it never has time to finish?","state":"open","updated_at":"2022-09-07T18:01:00Z","created_at":"2021-06-12T10:25:53Z","creator_user_login":"Ephem"}
{"number":21662,"title":"Concurrency / time-slicing by default","body":"Will concurrency / time-slicing ever become the default behavior? Or will it always require a startTransition block to opt-in?\nIf it will become the default at some point, will that become part of the React 18 timeline or a later major release?","state":"open","updated_at":"2021-06-11T18:26:23Z","created_at":"2021-06-11T09:32:25Z","creator_user_login":"rybon"}
{"number":21645,"title":"Backport releases on GitHub have incorrect tarballs","body":"This is not really a React bug, but more of a bug in the release process. The tarballs releases for following React versions all contain version 17.0.0-alpha.0:\r\n\r\n- 0.14.10\r\n- 15.7.0\r\n- 16.14.0\r\n\r\nYou can see on the [Releases page](https://github.com/facebook/react/releases) that they all point to commit 4337c1c. Releases on npm are not affected.\r\n\r\n**How to verify:**\r\n\r\n1. Download tarballs for any of the above versions from the [Releases page](https://github.com/facebook/react/releases). I'm going to use 15.7.0 in this example.\r\n2. `tar zxf react-15.7.0.tar.gz`\r\n3. `grep version react-15.7.0/packages/react/package.json` will return `\"version\": \"17.0.0-alpha.0\",`","state":"open","updated_at":"2021-06-08T09:57:08Z","created_at":"2021-06-08T09:57:08Z","creator_user_login":"evoL"}
{"number":21603,"title":"Bug: unable to render to document when using createRoot","body":"With `react@next` and `react-dom@next` trying to create a root with `document`:\r\n\r\n```jsx\r\nconst root = ReactDOM.createRoot(document);\r\nroot.render(<App />);\r\n```\r\n\r\nThrows the error:\r\n\r\n```\r\nHierarchyRequestError\r\nFailed to execute 'appendChild' on 'Node': Only one element on document allowed.\r\n```\r\n\r\nhttps://codesandbox.io/s/infallible-resonance-gqu0j?file=/src/index.js","state":"open","updated_at":"2022-07-03T17:06:19Z","created_at":"2021-06-02T17:01:42Z","creator_user_login":"aweary"}
{"number":21595,"title":"[eslint-plugin-react-hooks] New Rule Proposal: `no-unnecessary-setstate `","body":"Hi there!\r\n\r\nFirst of all, again want to extend thanks for your tireless work on creating this amazing library and supporting the ecosystem! Really big up to everyone involved! 💯 🙌\r\n\r\nI wanted to see if the `eslint-plugin-react-hooks` project would accept a new rule: `no-unnecessary-setstate`.\r\n\r\nI have the feeling that this may be too opinionated for the plugin, but I was sent here by ljharb from `eslint-plugin-react` after proposing it over there: https://github.com/yannickcr/eslint-plugin-react/issues/2997\r\n\r\n---\r\n\r\nAnyway, here goes:\r\n\r\n**Rule proposal:** `no-unnecessary-setstate` - forbid setting state to the value of the existing state variable\r\n\r\nI've seen this pattern also a bunch from beginners learning React. And regardless of whether you're a beginner or not, this is probably not what you want to do (even if it's an object / array).\r\n\r\nExample of **incorrect** code:\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        setName(event.currentTarget.value);\r\n        setName(name); // ESLint problem reported\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\nExamples of **correct** code:\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        setName(event.currentTarget.value);\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        const name = event.currentTarget.value; // Shadowing\r\n        setName(name);\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n---\r\n\r\ncc @gaearon ","state":"open","updated_at":"2022-05-17T18:31:19Z","created_at":"2021-06-01T15:58:17Z","creator_user_login":"karlhorky"}
{"number":21582,"title":"Bug: React takes considerably longer to update an empty list than rendering it initially","body":"React version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nNote this simple Component, it does work as intended. \r\n```js\r\nimport { useEffect, useState } from \"react\";\r\nimport List from \"./List\";\r\n\r\nexport default function App() {\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const arr = [...new Array(100_000)].map((_, i) => i);\r\n    setList(arr);\r\n  }, []);\r\n\r\n  return <div className=\"App\">{list.length > 0 && <List list={list} />}</div>;\r\n```\r\n\r\nList is as simple as this:\r\n```js\r\nconst List = ({ list }) => {\r\n  return list.map((e) => e);\r\n};\r\n\r\nexport default List;\r\n```\r\n\r\nSo far, so good. It also loads within 3 seconds, regardless of the 100k elements rendered.\r\nHowever, this loads considerably longer (even minutes), it will get there eventually. But why is this a problem? Is it a bug or by design?\r\n\r\n```js\r\nimport { useEffect, useState } from \"react\";\r\nimport List from \"./List\";\r\n\r\nexport default function AppFail() {\r\n  const [list, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const arr = [...new Array(100_000)].map((_, i) => i);\r\n    setList(arr);\r\n  }, []);\r\n\r\n  return <div className=\"App\">{<List list={list} />}</div>;\r\n}\r\n```\r\n\r\nNote that the only thing I changed is this condition `{list.length > 0 && <List list={list} />}`. Once I remove it the rendering time explodes. \r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/funny-fast-d1pge?file=/src/index.js\r\n\r\n## The current behavior\r\n\r\nThe list only loads 100k elements at once. If it gets initialized with an empty list it will take a much longer time to render.\r\n\r\n## The expected behavior\r\n\r\nI would expect both implementations to take about the same amount of time to load up. \r\n\r\nNote: I didn't use a key for the list. However, this would not change anything. It's just to be concise here. ","state":"open","updated_at":"2021-06-10T04:05:34Z","created_at":"2021-05-29T15:49:15Z","creator_user_login":"evayde"}
{"number":21559,"title":"Bug: Firefox and react-dom causing null access property","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. create a component with a state\r\n2. add elements added conditionally from state\r\n3. add a (complex ?) component like input, textarea, select, iframe etc inside the elements added conditionnaly\r\n4. open firefox and drag a file above the zone fast enough and then come back to the complex element (it might be really hard to trigger so I suggest to drag around really fast)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n[CodeSandbox](https://codesandbox.io/s/unruffled-torvalds-xpikd?file=/src/App.js)\r\n\r\nMinimal (with the maximum of details I have) reproduction :\r\n```ts\r\nconst FileInput: React.FC = () => {\r\n  const fileZone = useRef<HTMLDivElement>(null);\r\n  const [dragging, setDragging] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handlers = {\r\n      dragenter() {\r\n        setDragging(true);\r\n      },\r\n      dragleave() {\r\n        setDragging(false);\r\n      },\r\n    };\r\n    const div = fileZone.current as HTMLDivElement;\r\n    Object.entries(handlers).map(([key, value]) =>\r\n      div.addEventListener(key, value),\r\n    );\r\n\r\n    return () => {\r\n      if (div) {\r\n        Object.entries(handlers).map(([key, value]) =>\r\n          div.removeEventListener(key, value),\r\n        );\r\n      }\r\n    };\r\n  }, [fileZone]);\r\n\r\n  return (\r\n    <div ref={fileZone}>\r\n      {dragging ? (\r\n        <>drop here</>\r\n      ) : (\r\n        <>\r\n          drop here or{\" \"}\r\n          <label>\r\n            Search\r\n            <input />\r\n          </label>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nHere I used the dragevent to trigger the state but I think anything firing setState fast enough can reproduce this while this seems the most usable way to reproduce.\r\n\r\n## The current behavior\r\nWhen dragging a file over the zone fast enough and coming back to the complex element it triggers an error :\r\n`\r\n16:38:47.408 Uncaught TypeError: can't access property \"__reactFiber$6wig1bzlbmp\" of null\r\n    React 3\r\n    unstable_runWithPriority scheduler.development.js:468\r\n    React 12\r\n    tsx index.tsx:6\r\n    tsx main.chunk.js:263\r\n    Webpack 7\r\nreact-dom.development.js:10578\r\n    React 3\r\n    bind_applyFunctionN self-hosted:1376\r\n    dispatchEvent self-hosted:1339\r\n    unstable_runWithPriority scheduler.development.js:468\r\n    dispatchUserBlockingUpdate React\r\n    bind_applyFunctionN self-hosted:1376\r\n    dispatchUserBlockingUpdate self-hosted:1339\r\n    React 4\r\n    forEach self-hosted:4356\r\n    React 7\r\n    tsx index.tsx:6\r\n    tsx main.chunk.js:263\r\n    Webpack 7\r\n`\r\n\r\n\r\nScreenshots of errors (First one is firefox \"normal\" and second one is firefox developer edition) :\r\n![Firefox on Windows](https://user-images.githubusercontent.com/7894362/119522819-92b71b00-bd7c-11eb-9335-338d40a69c0d.png)\r\n![Firefox developer edition on ArchLinux](https://user-images.githubusercontent.com/7894362/119523063-c1cd8c80-bd7c-11eb-88bb-ae58672c22d8.png)\r\n\r\n## The expected behavior\r\nReact shouldn't trigger an error.","state":"open","updated_at":"2021-06-22T00:23:11Z","created_at":"2021-05-25T15:17:45Z","creator_user_login":"SimonChaumet"}
{"number":21557,"title":"Optimize data transfer between components by exposing state","body":"The advantage of this is the idea of modularity.While declaring a component, you can optionally expose component data methods, which can be obtained and set externally only by introducing this method.You can also call the returned hook method to render the view of that data as if it were state.\r\n\r\n\r\nI implemented a prototype of this functionality using hook and hoc.I suggest attaching an object to manage component state when you create component functions.\r\n\r\nHoc example:https://gitee.com/Guohear/hoc_hooks\r\nmodule: https://www.npmjs.com/package/wwog-react\r\n\r\nWith open data as a data source, you can easily extend global management by storing the open objects in a single global object.You can go back to the view.It can also be very simple to have computed properties.It doesn't add any concepts, but it can do a very large project build.You can also build a collection of methods for setting properties that will perform better than Redux in large projects.\r\n\r\nHope to adopt!!!","state":"open","updated_at":"2021-05-25T17:17:41Z","created_at":"2021-05-25T12:31:28Z","creator_user_login":"wwog"}
{"number":21554,"title":"Bug: Events bug","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhy the disabled button cannot trigger the mouse leave, mouseEnter, and mouseMove events of the parent container div\r\nReact version:\r\n17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nThe reproduction steps are very simple, the code is in codesanbox\r\n\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/focused-firefly-cd9nf?file=/src/App.tsx\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\ndisabled button cannot trigger the mouse leave, mouseEnter, and mouseMove events of the parent container div\r\n\r\n## The expected behavior\r\nNormally trigger events like vue and native code","state":"open","updated_at":"2021-06-10T13:33:32Z","created_at":"2021-05-24T12:30:29Z","creator_user_login":"actualchao"}
{"number":21544,"title":"Bug: e+-. as first character of numeric input results in uncontrolled state.","body":"Scenario: Creating a input with type numeric; assigning a value using a react state with an initial empty string value; assigning onChange event to modify the state;\r\nTyping the following characters 'e+-.,' first, results in an uncontrolled state scenario where the onChange function is never called.\r\n\r\n```\r\nimport { useState } from 'react';\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState('');\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type='number' value={value} onChange={(e) => {\r\n        if (/^\\d{0,11}$/.test(e.target.value)) {\r\n          setValue(e.target.value);\r\n        }\r\n      }}></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nSample form input to reproduce the bug:\r\n\r\n\"e1111111111111111111111\"\r\n\r\nObs: My workaround was to add an onKeyPress function to the numeric input that prevents the default behavior of those keys.","state":"open","updated_at":"2022-01-09T07:43:18Z","created_at":"2021-05-21T02:06:42Z","creator_user_login":"josemorista"}
{"number":21511,"title":"fix: eslint-plugin-react-hooks - report hooks used within underscored non-component functions","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe rule previously only considered a function as not a component function if it started with a lowercase character.\r\nHowever this is incorrect if you have a function name like `_myfunction`.\r\n\r\nThis PR adds checks to report against underscored non component functions like `_myfunction`\r\n\r\n## Test Plan\r\n\r\n- `yarn flow`\r\n- `yarn lint`\r\n- `yarn test eslint-plugin`\r\n- `yarn test --prod eslint-plugin`","state":"open","updated_at":"2022-04-11T23:25:48Z","created_at":"2021-05-14T20:07:25Z","creator_user_login":"bradzacher"}
{"number":21501,"title":"Bug: NVDA reads element as \"clickable\" because onClick is not removed (but replaced with noop())","body":"**Fact:** \r\n\r\nNVDA, and possibly other screen readers, read element as \"clickable ...\" when element has onClick event handler set.\r\n\r\n**Problem:** \r\n\r\nReact 16.13.1 replaces onClick handler with a `noop()` when onClick becomes either undefined or unset, but this still makes screen reader read \"clickable ...\"\r\n\r\n**Reproduction:**\r\n\r\n-  JSX should have a conditional onClick like this \r\n```\r\n<div tabindex=\"0\" {... isMobile && {onClick: () => { some code }}> ...\r\n```\r\nor this\r\n```\r\n<div tabindex=\"0\" {... isMobile ? {onClick: () => { some code } : {onClick: undefined}}> ...\r\n```\r\n- change screen size from mobile to desktop\r\n- NVDA will read element","state":"open","updated_at":"2022-01-25T13:14:49Z","created_at":"2021-05-12T18:17:30Z","creator_user_login":"NullPainter2"}
{"number":21500,"title":"Feature Request: Support `getDerivedStateFromError ` in `renderToStaticMarkup`","body":"It is mentioned in https://github.com/facebook/react/issues/10442 that `renderToString` and `renderToNodeStream` are not supported due to streaming limitations which makes sense. However, `renderToStaticMarkup` is listed in the docs as being for static page generation.\r\n\r\n> This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\r\n\r\nTherefore, would it be possible to support `getDerivedStateFromError` when using `renderToStaticMarkup`.\r\n\r\nMy use-case is using React to build static HTML pages server-side and wanting to scope errors to components so failed components are removed from the page, but the rest of the page is still rendered.\r\n\r\nI created a CodeSandbox to illustrate the current behaviour:\r\nhttps://codesandbox.io/s/rendertostaticmarkup-errorboundary-ec1ep\r\n\r\n_**Edit:**_\r\n_Changed from `componentDidCatch` to `getDerivedStateFromError` as per @lxsmnsyc and @bvaughn's recommendation._","state":"open","updated_at":"2021-05-25T14:57:27Z","created_at":"2021-05-12T17:57:08Z","creator_user_login":"AndrewLeedham"}
{"number":21499,"title":"DevTools: Standalone should support multiple connected clients","body":"The standalone DevTools uses a `WebSocket` to communicate with the backend (which is embedded within an application like a React Native app or a webpage running in Safari). It was reported that currently only one application can connect to the standalone DevTools at a time, but this limitation is unnecessary. A Node `Server` server can accept connections from multiple clients, and the DevTools architecture (and \"store\") support multiple connected renderers as well (for the case of multiple React DOM apps running on a page). So the Standalone DevTools should also be able to support multiple connected apps.","state":"open","updated_at":"2021-11-11T05:48:25Z","created_at":"2021-05-12T17:39:22Z","creator_user_login":"bvaughn"}
{"number":21497,"title":"Bug: ReactDOM ignores invalid styles (e.g. unquoted font-family)","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Just try to set `fontFamily: \"Exo 2\"` on styles.\r\n\r\nhttps://codesandbox.io/s/react-exo-2-font-b80ij\r\n\r\n- If you chage it to \"Exo\", the hot reload correctly sets \"Exo\" fontFamily on the dom.\r\n- If you next change again to \"Exo 2\", it just leaves the dom with the previous value: \"Exo\"\r\n\r\nThis happens on latest Firefox, Chrome and Brave\r\n","state":"open","updated_at":"2022-11-06T11:35:27Z","created_at":"2021-05-12T14:38:53Z","creator_user_login":"niwinz"}
{"number":21490,"title":"Bug: Memory leak in simple dialog interaction","body":"Hi,\r\n\r\nI recently encountered a memory leak in our app. Trying to isolate the problem I ended up with a simple create-react app, where\r\nit also seems to appear. The app consists of a simple button opening a dialog. Dialog has a text field (for simplification not connected to anything, state changes etc) and a list of strings rendered as divs. Dialog can be opened any number of times and then closed. This works correctly - no memory problems. However, if I try to enter any string into the text field and then close the dialog - memory seems to leak, number of fibernodes (and e.g detached input elements) is rising and never gets gc.\r\nThis behavior can be observed on dev mode (npm start), prod mode (npm run build, serve -s), but for some reason CANNOT be observed on codesandbox, in embedded view (https://codesandbox.io/s/determined-joliot-hox9x), but can be reproduced there in new window mode. \r\n\r\nthanks for any help\r\nBartek\r\n\r\nApp.tsx :\r\n```\r\nfunction App() {\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [data, setData] = useState<string[]>([])\r\n\r\n  useEffect(() => {\r\n    const initData = () => {\r\n      setData(Array.from(new Array(100),(val,index)=> \"some string \" + index ))\r\n    };\r\n    initData();\r\n    return () => {\r\n      //cleanups on unmount\r\n\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  function handleClickOpen()  {\r\n    setOpen(true);\r\n  }\r\n\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DataBrowser open={open} data={data} onClose={handleClose}/>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open simple dialog\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nDialog triggered by above button:\r\n\r\n```\r\nimport * as React from \"react\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\ntype Props = {\r\n    open: boolean\r\n    data: string[]\r\n    onClose: ()=>void\r\n}\r\n\r\nexport const DataBrowser:  React.FC<Props> = ({data, open, onClose}) => {\r\n\r\n    const handleClose = ()=> {\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            data-testid=\"databrowser_dialog\"\r\n            disableBackdropClick={true}\r\n            disableEscapeKeyDown={false}>\r\n                <DialogTitle  id=\"form-dialog-title\">\r\n                    {\"Data browser\"}\r\n                    <IconButton  aria-label=\"Close\" color=\"primary\" onClick={handleClose}>\r\n                        <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent >\r\n\r\n\r\n                    <React.Fragment>\r\n\r\n                        <input type={\"text\"}/>\r\n\r\n                        {data.map((item, idx)=>{\r\n                            return <div key={idx}>{item}</div>\r\n                        })}\r\n\r\n                    </React.Fragment>\r\n\r\n                </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n```\r\n\r\nVersions: \r\n\r\n\"@material-ui/core\": \"4.11.4\",\r\n\"@material-ui/icons\": \"4.11.2\",\r\n\"react\": \"^17.0.2\",\r\n\"react-dom\": \"^17.0.2\",\r\n\"react-scripts\": \"4.0.3\",\r\n\"typescript\": \"^4.2.4\",\r\n\r\nOccurs on dev and prod modes, strict mode not used\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on button to open dialog\r\n2. Enter anything into text field\r\n3. Close dialog\r\n\r\n## The current behavior\r\n\r\nMemory consumption is rising and never gets garbage collected\r\n\r\n## The expected behavior\r\n\r\nMemory consumption is not rising upon over some warmup limit\r\n","state":"open","updated_at":"2021-05-18T06:18:51Z","created_at":"2021-05-11T11:27:44Z","creator_user_login":"bawa"}
{"number":21486,"title":"How can we deal with suspense in mixed mode (multiple renderers) ","body":"React does not currently support context, error-bounds and suspense across multiple renderers, for reference we have a longstanding open ticket for context: https://github.com/facebook/react/issues/17275\r\n\r\nThis is about suspense. I need to be able to await a custom renderer. In my case the `<Canvas />` component is part of the react-dom tree, but renders into its custom-renderer in a LayoutEffect.\r\n\r\n```jsx\r\n<Suspense fallback={<div>waiting ...</div>}>\r\n  <Canvas>\r\n    {/* this is not the dom, we're targeting another platform */}\r\n    <mesh />\r\n    <ComponentThatSuspends />\r\n  </Canvas>\r\n</Suspense>\r\n```\r\n\r\nCurrently suspense only functions *inside* the canvas so the outside has a hard time knowing when the inner contents are ready. I tried to make a work-around, you can see it running here: https://twitter.com/0xca0a/status/1391882917039812611\r\n\r\nIs it OK to abuse suspense fallbacks in that way, does the React team see problems with this approach:\r\n\r\n```jsx\r\nfunction Canvas({ children }) {\r\n  const [block, setBlock] = useState(false)\r\n  // Suspend this component if a block is present\r\n  if (block) throw block\r\n\r\n  useLayoutEffect(() => {\r\n    // Let the renderer render the scene, inject the Block component which adds and lifts the suspense\r\n    CustomRenderer.render(<React.Suspense fallback={<Block set={setBlock} />} children={children} />)\r\n  }, [children])\r\n\r\n  return null\r\n}\r\n\r\nfunction Block({ set }) {\r\n  React.useLayoutEffect(() => {\r\n    set(new Promise((r) => null))\r\n    return () => set(false)\r\n  }, [])\r\n  return null\r\n}\r\n```\r\n\r\n?","state":"open","updated_at":"2021-05-11T07:13:25Z","created_at":"2021-05-10T19:00:59Z","creator_user_login":"drcmda"}
{"number":21448,"title":"Feature Request: ESLint hooks rule for accessing previous state when deriving new state","body":"A very common mistake and source of bugs in React applications is not using the updater function when deriving new state from old state.\r\n\r\nWhen using class components, there is a handy [lint rule](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md) for this in the eslint-plugin-react project.\r\n\r\nHowever, their rule does not work for functional components that utilize useState, and they have [suggested](https://github.com/yannickcr/eslint-plugin-react/issues/2539#issuecomment-620879842) that [eslint-plugin-react-hooks](https://github.com/facebook/react/blob/master/packages/eslint-plugin-react-hooks/README.md) would be a more appropriate home for an equivalent lint rule that _does_ work with hooks.\r\n\r\nI've seen this mistake made countless times, and I even fall victim to it every once in awhile, so having an officially sanctioned lint rule would be amazing!","state":"open","updated_at":"2022-01-09T10:12:59Z","created_at":"2021-05-06T14:34:05Z","creator_user_login":"johncmunson"}
{"number":21422,"title":"Bug(?): ESLint react-hooks/rules-of-hooks not working in arrow functions with styled components","body":"Full description is [here](https://github.com/styled-components/styled-components/issues/3478) I don't know if it's an issue on styled-components or on react side so I'm just letting you know.\r\n\r\nThanks in advance for any anwser!","state":"open","updated_at":"2021-05-04T08:48:38Z","created_at":"2021-05-04T08:48:38Z","creator_user_login":"vinassefranche"}
{"number":21398,"title":"Profiler API should support Server Components","body":"Not sure what the API will look like, but at least the `onRender` callback should be called with server rendering durations. (DevTools Profiler API also needs this info.)\r\n\r\nHow does a single \"commit\" that consists of both server and client components get reported? Does this mean we need to send metadata from the server even when DevTools isn't present?","state":"open","updated_at":"2023-09-02T04:39:11Z","created_at":"2021-04-30T17:43:36Z","creator_user_login":"bvaughn"}
{"number":21381,"title":"Bug: Impossible to use on async hooks","body":"The rule that prevents using async functions in the hook makes sense in most cases, but there are some valid hooks that have async functions.  See useAsyncEffect as an example.  (https://www.npmjs.com/package/use-async-effect)\r\n\r\nSince the no async rule is bundled with the 'react-hooks/exhaustive-deps' rule, there is no way to use this with an async hook.\r\n\r\nReact version: 16, 17\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a file that uses useAsyncHook\r\n\r\n2. Configure plugin -> \r\n\r\n    \"react-hooks/exhaustive-deps\": [\r\n      \"warn\",\r\n      {\r\n        \"additionalHooks\": \"(useAsyncEffect)\"\r\n      }\r\n    ]\r\n\r\n3. lint - see error\r\n\r\n## The current behavior\r\n\r\nlinter displays:\r\n\r\n warning  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\r\n\r\nuseEffect(() => {\r\n  async function fetchData() {\r\n    // You can await here\r\n    const response = await MyAPI.getData(someId);\r\n    // ...\r\n  }\r\n  fetchData();\r\n}, [someId]); // Or [] if effect doesn't need props or state\r\n\r\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching  react-hooks/exhaustive-deps\r\n\r\n## The expected behavior\r\n\r\nSeveral options:\r\n\r\n1. Detect the proper use of async in the hook (may be tough)\r\n2. Make a \"react-hooks/no-async\" rule to control this behavior (allows exhaustive-dpes check w/o this warning)\r\n3. Add settings for the \"additionalHooks\" property to specify hook by hook functionality\r\n\r\nI would say that all 3 of this would be great, but #2 to me seems to be a very simple fix.\r\n","state":"open","updated_at":"2023-02-21T18:46:52Z","created_at":"2021-04-28T18:41:21Z","creator_user_login":"arietrouw"}
{"number":21380,"title":"Add nested update flag to Profiler UI as explicit marker","body":"#20163 added a \"nested update\" phase to the Profiler `onRender` callback (currently gated behind the `enableProfilerNestedUpdatePhase` feature flag). We should surface this phase in the Profiler UI if present though, as nested updates are particularly costly.","state":"open","updated_at":"2021-04-28T17:34:47Z","created_at":"2021-04-28T17:34:47Z","creator_user_login":"bvaughn"}
{"number":21349,"title":"Bug: In a specific environment, controlled input triggers onChange twice","body":"## On chrome of windows, controlled input changes the value in onChange, and enter(IME mode) non-letters(#/$/%/...) will trigger onChange twice\r\n\r\n<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n- React version: 17.0.2 (16 will also)\r\n- windows 10\r\n- chrome 90.0.4430.85\r\n\r\n## Steps To Reproduce\r\n1. The input method is adjusted to Chinese (IME)\r\n2. Enter non-letter special symbols , such as # $ % - =\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/bold-morning-8x46e\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nonChange call twice\r\n\r\n## The expected behavior\r\nonChange call correct times\r\n","state":"open","updated_at":"2021-04-26T10:14:24Z","created_at":"2021-04-25T08:13:07Z","creator_user_login":"EastblueOkay"}
{"number":21329,"title":"Feature request: useContextGetter","body":"Right now the only hook for consuming a React context is `useContext`, which is great for most cases. However, one downside is that it results in a component re-rendering whether or not the context itself is directly used for displaying something. Take the following example:\r\n\r\n```tsx\r\nexport const ExpensiveComponent = React.memo(function ExpensiveComponent() {\r\n  const myContext = useContext(MyContext);\r\n\r\n  const onClick = useCallback(() => {\r\n    doThing(myContext);\r\n  }, [myContext]);\r\n\r\n  // lots of other hooks\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={onClick}>Click Me</button>\r\n      {/* ...other children... */}\r\n    </div>\r\n  );\r\n});\r\n```\r\n\r\nHere the value of `MyContext` is _only_ used when `onClick` is called, it is not used by any returned DOM elements or child components. However, if the value of `myContext` changes, `ExpensiveComponent` will re-render despite no differences in what is being displayed.\r\n\r\nOne way to prevent this component from over re-rendering would be to provide a hook along the lines of `useContextGetter`. It would prevent  `ExpensiveComponent` from re-rendering by returning a getter function for `MyContext` that would allow `onClick` to lazily access the current context's value. This getter would be a stable function similar to the callback `useState` returns. \r\n\r\nHere's the above example rewritten to use `useContextGetter`:\r\n```tsx\r\nexport const ExpensiveComponent = React.memo(function ExpensiveComponent() {\r\n  const getMyContext = useContextGetter(MyContext);\r\n\r\n  const onClick = useCallback(() => {\r\n    doThing(getMyContext());\r\n  }, [getMyContext]);\r\n\r\n  // lots of other hooks\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={onClick}>Click Me</button>\r\n      {/* ...other children... */}\r\n    </div>\r\n  );\r\n});\r\n```\r\n\r\nThere is some prior art for an API similar to this with Recoil's [`useRecoilCallback`](https://recoiljs.org/docs/api-reference/core/useRecoilCallback) making it possible to access Recoil state inside of a callback without requiring a component to re-render when the state changes. One could also construct similar functionality with React Redux's [`useStore`](https://react-redux.js.org/api/hooks#usestore) and calling `getState()` on the store inside of a callback.\r\n\r\nThe above examples I used are pretty trivial and one could simply refactor the part that uses `MyContext` into a separate child component to avoid re-rendering `ExpensiveComponent`. However, its not difficult to imagine a scenario where such a refactor may be challenging or a component being used in enough places that the re-render causes performance degradation.\r\n","state":"open","updated_at":"2021-04-23T16:24:59Z","created_at":"2021-04-22T00:44:55Z","creator_user_login":"maclockard"}
{"number":21328,"title":"Bug: ESLint react-hooks/rules-of-hooks false positives when codepath counts exceed Number.MAX_SAFE_INTEGER","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `16.14.0`\r\n`eslint-plugin-react-hooks` version: `4.2.0`\r\n`eslint` version: `7.24.0`\r\n`@typescript-eslint/parser` version: `4.17.0`\r\n`@babel/eslint-parser` version: `7.13.4`\r\n\r\nA false positive from `rules-of-hooks`, specifically the \"called conditionally\" report, cropped up in a codebase I work on this week. It was a very strange scenario where modifying portions of arbitrary logical expressions/operators would change which hooks were reported, or make the lint start passing altogether (when nothing about the structure of hooks had changed).\r\n\r\nI drilled into it and diagnosed it as an overflow in the lint rule's path counting logic. Please find an isolated reproduction and brief writeup in this repository: https://github.com/camhux/eslint-react-hook-false-positive\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone https://github.com/camhux/eslint-react-hook-false-positive.\r\n2. Run `yarn repro`.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/camhux/eslint-react-hook-false-positive/blob/main/repro.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe `useEffect` hook on `repro.tsx:7` is flagged by `rules-of-hooks` as being called conditionally.\r\n\r\n## The expected behavior\r\nNo errors are raised by the `rules-of-hooks` rule for `repro.tsx`.\r\n","state":"open","updated_at":"2022-12-02T20:27:20Z","created_at":"2021-04-21T23:00:52Z","creator_user_login":"camhux"}
{"number":21320,"title":"Bug: I can always access the initial state in native event callback","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:16.11.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.  This is the code demo\r\n```js\r\nfunction TestFunctionState() {\r\n  const [count, setCount] = React.useState(0);\r\n  const btnRef = React.useRef(null);\r\n  const eventRef=React.useRef(null);\r\n  eventRef.current={onClick};\r\n  React.useEffect(() => {\r\n    function onProxyClick(e){\r\n      eventRef.current.onClick(e);\r\n      console.log(count,111)\r\n      console.log('proxy');\r\n    }\r\n    btnRef.current.addEventListener(\"click\", onClick);\r\n    btnRef.current.addEventListener(\"click\", onProxyClick);\r\n  }, []);\r\n  function onClick() {\r\n    console.log(count);\r\n  }\r\n  function handleClick(){\r\n    setCount(count+1)\r\n  }\r\n  return (\r\n    <div>\r\n      <p>useState api</p>\r\n      <p>\r\n        <button ref={btnRef}>打印count</button>\r\n        Count: {count} <button onClick={handleClick}>自增</button>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass App extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello</h1>\r\n        <h2>Start editing to see some magic happen!</h2>\r\n        <TestFunctionState />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n2. When you run the code demo,you can see the view :\r\n![image](https://user-images.githubusercontent.com/52593709/115389625-e2e80e00-a20f-11eb-88f6-fd7ebc551b23.png)\r\n\r\n3.Click the \"self add\" button ,then click the \"print the count\" button ,we can see this content in the console\r\n![image](https://user-images.githubusercontent.com/52593709/115389827-25a9e600-a210-11eb-8ef1-8d7b14c0b6a6.png)\r\n\r\n4.Why i can only access the initial state ,when i add a native event handle callback who is no be stored in ref?But,when i store the event handler in ref,i can access the latest state?What is the difference between callback who is store in ref and callback who is not store in the ref?\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:  https://codepen.io/yklydxtt/pen/dyNqVbg?editors=1111\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nI can only access the initial state when the onClick callback is running\r\n\r\n## The expected behavior\r\nI can access the latest state when the onClick callback is running\r\n","state":"open","updated_at":"2021-04-21T02:12:25Z","created_at":"2021-04-20T12:05:48Z","creator_user_login":"yklydxtt"}
{"number":21287,"title":"DevTools React recommendations UI / architecture","body":"Up until this point, DevTools has generally presented information without making specific recommendations. For example, the Profiler shows which components are faster or slower, relative to each other, but makes no recommendations about how slow is too slow or when/where memoization should be added.\r\n\r\nSome overall architecture and UX for this would probably be good to consider adding to DevTools.\r\n\r\nIdeas for things DevTools might warn about:\r\n* `undefined` return value (could indicate an accidental early return)\r\n* Components that render \"too slow\" (above some threshold)\r\n* When there is a sync update (e.g. recommend `useTransition`)\r\n* When memoization (e.g. `React.memo` or `useMemo`) might be helpful\r\n* Multi-pass renders\r\n\r\nPerhaps we could add an audit mode to check a specific component (or the whole tree) for problems like the ones above.","state":"open","updated_at":"2021-05-12T19:15:07Z","created_at":"2021-04-15T16:53:20Z","creator_user_login":"bvaughn"}
{"number":21274,"title":"Bug: ESLint react-hooks/exhaustive-deps rule false positive on constants made with constant expressions","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0 & 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a constant variable with an expression made of only constants.\r\n2. Run ESLint\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example:\r\n\r\n```jsx\r\nconst a = 1\r\nconst b = 2 / 3\r\nconst c = -1\r\nconst d = +1\r\n\r\nuseEffect(() => {\r\n  void a\r\n  void b\r\n  void c\r\n  void d\r\n}, [])\r\n```\r\n\r\nCodeSandbox: https://codesandbox.io/s/funny-wilson-33zxb\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nI see the following ESlint warning:\r\n> React Hook useEffect has missing dependencies: 'b', 'c', and 'd'. Either include them or remove the dependency array. (react-hooks/exhaustive-deps)\r\n\r\n## The expected behavior\r\nI see no warning.\r\n\r\nIn my example the `a` variable is skipped in the ESlint warning, but not the other three variables even those they are all constant expressions.","state":"open","updated_at":"2021-04-15T07:19:55Z","created_at":"2021-04-14T22:26:03Z","creator_user_login":"ToadKing"}
{"number":21256,"title":"eslint-plugin-react-hooks should flag uses of createRef in function components","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nUsing `createRef` in a function component is almost certainly a mistake. You probably want `useRef` instead. This can easily lead to confusing bugs. See, for example, [this popular Stack Overflow question][1].\r\n\r\nBanning `createRef` outright would yield false positives on class components. I suggested adding a rule to flag this specifically in function components to eslint-plugin-react (https://github.com/yannickcr/eslint-plugin-react/issues/2966) but they suggested that I file an issue over here instead.\r\n\r\nReact version: react@16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Set up eslint-plugin-react-hooks and create a function component that uses `React.createRef`.\r\n2. No complaints.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/cool-volhard-9zj0s\r\n\r\n```ts\r\nexport default function App() {\r\n  const ref = React.createRef(0);\r\n  // Change to this to make the example work as intended:\r\n  // const ref = React.useRef(0);\r\n  const [, update] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    ref.current += 1;\r\n    update((n) => n + 1);\r\n  };\r\n  React.useEffect(() => {\r\n    ref.current = 0;\r\n  }, [ref]);\r\n\r\n  return (\r\n    <div className=\"App\" ref={ref}>\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Value is {ref.current}</h2>\r\n      <button onClick={handleClick}>Click Me</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\neslint-plugin-react-hooks does not report an issue.\r\n\r\n## The expected behavior\r\n\r\neslint-plugin-react-hooks should report an issue, namely that the `createRef` should be `useRef`.\r\n\r\n[1]: https://stackoverflow.com/questions/54620698/whats-the-difference-between-useref-and-createref/54620836#54620836","state":"open","updated_at":"2021-04-13T23:46:44Z","created_at":"2021-04-13T21:55:29Z","creator_user_login":"danvk"}
{"number":21224,"title":"React-refresh not apply updates to the umd bundled library","body":"In my case an application is based on micro-frontends solution and all updates related to the host application are applies successfully. Unfortunately, plugin application (bundled as a `umd` library) unable to apply any updates related to the react components scope. It should be noticed that `css` styles and code located outside the react component declaration scope are applied without any problems.\r\n\r\nIn the network tab I can see that all changes were successfully received and console notifies me that changes are applied and `App is up to date!`, unfortunately there is no visual or logic changes and UI keeps the stale state. Only full reload can fix the situation.\r\n\r\nSome architecture details:\r\nHost and Plugin apps are served on different ports. Host app provides exposed to `global` scope instances of `react` / `react-dom` and `react-refresh`. All of these packages are in the same bundle. Plugin app use [externals](https://webpack.js.org/configuration/externals/) property to get all the exposed react stuff. `react-refresh-webpack-plugin` and `react-refresh/babel` are defined in both Plugin and Host app webpack configs.\r\n\r\nPackages version:\r\n```\r\nreact-refresh-webpack-plugin: 0.5.0-beta.1\r\nreact-refresh: 0.9.0\r\nreact: 16.13.1\r\nwebpack: 5.27.2\r\nwebpack-dev-server: 4.0.0-beta.2\r\n```\r\n","state":"open","updated_at":"2022-03-24T08:03:30Z","created_at":"2021-04-09T21:19:19Z","creator_user_login":"yekver"}
{"number":21212,"title":"Bug: iOS VoiceOver announces stale content in headings","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to https://jeffreyatw.com/static/voiceover-react using iOS, enable VoiceOver\r\n2. Swipe to first \"Not clicked\" h2, observe VoiceOver reads content correctly\r\n3. Click the first \"click me\" button\r\n4. Move VoiceOver's focus back to first h2, which is now \"Clicked\"\r\n5. VoiceOver **incorrectly** reads it as \"Not clicked, heading level 2\"\r\n6. Swipe to the second \"Not clicked\" h2, observe VoiceOver reads content correctly\r\n7. Click the second \"click me\" button\r\n8. Move VoiceOver's focus back to second h2, which is now \"Clicked\"\r\n9. VoiceOver correctly reads it as \"Clicked, heading level 2\"\r\n\r\n<!--\r\n\r\n\r\n\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jeffreyatw.com/static/voiceover-react\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nVoiceOver reads the first h2 as \"Not clicked, heading level 2\". See attached video for more details:\r\nhttps://user-images.githubusercontent.com/266170/114103859-b4b51680-987e-11eb-82b9-0d785442c3ae.mp4\r\n\r\n## The expected behavior\r\nVoiceOver should read the first h2 as \"Clicked, heading level 2\"\r\n","state":"open","updated_at":"2021-04-12T19:17:23Z","created_at":"2021-04-08T22:26:44Z","creator_user_login":"JeffreyATW"}
{"number":21181,"title":"Bug: [Refresh] Default exported unnamed functions are ignored","body":"React version: 17.0.2\r\nReact-refresh version: 0.10.0\r\n\r\nThis issue is similar to #21179, but ignores default exported unnamed functions instead.\r\n\r\nAs a code comment suggests, this is a known limitation:\r\nhttps://github.com/facebook/react/blob/a817840ea7d3818c0590cccb9159b13220f4fdb4/packages/react-refresh/src/ReactFreshBabelPlugin.js#L437-L438\r\n\r\nWould a fix be considered?\r\n\r\n## Steps To Reproduce\r\n\r\nGiven the following files, making changes to `Component.js` doesn't trigger a re-render.\r\n\r\n`main.js` module:\r\n```jsx\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\n\r\nimport Component from './Component.js'\r\n\r\nfunction App() {\r\n  return <main><Component /></main>\r\n}\r\n\r\nrender(<App />, window.document.getElementById('root'))\r\n```\r\n\r\n`Component.js` module:\r\n```jsx\r\nimport React from 'react'\r\n\r\nexport default ({ value = \"Hello\" }) => (<div>{value}</div>)\r\n```\r\n\r\n\r\n## The current behavior\r\n\r\nMaking changes to `Component.js` does not re-render the element in `main.js`.\r\nThe transformed `Component.js` module does not register the `Component` for refresh.\r\n\r\n\r\n## The expected behavior\r\n\r\nMaking changes to `Component.js` does re-render the element in `main.js`.","state":"open","updated_at":"2022-12-03T09:31:30Z","created_at":"2021-04-05T16:41:03Z","creator_user_login":"davidbonnet"}
{"number":21180,"title":"Fix [Refresh] Components resulting of HOCs composition immediately applied to render functions are ignored","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nFixes #21179.\r\n\r\n## Test Plan\r\n\r\nRun `node ./scripts/jest/jest-cli.js -i /Users/david/Code/react/packages/react-refresh/src/__tests__/ReactFreshBabelPlugin-test.js`.\r\n","state":"open","updated_at":"2022-01-10T14:47:40Z","created_at":"2021-04-05T15:38:49Z","creator_user_login":"davidbonnet"}
{"number":21179,"title":"Bug: [Refresh] Components resulting of HOCs composition immediately applied to render functions are ignored","body":"React version: 17.0.2\r\nReact-refresh version: 0.10.0\r\n\r\n## Steps To Reproduce\r\n\r\nGiven the following files, making changes to `Component.js` doesn't trigger a re-render.\r\n\r\n`main.js` module:\r\n```jsx\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\n\r\nimport { Component } from './Component.js'\r\n\r\nfunction App() {\r\n  return <main><Component /></main>\r\n}\r\n\r\nrender(<App />, window.document.getElementById('root'))\r\n```\r\n\r\n`Component.js` module:\r\n```jsx\r\nimport React, { memo } from 'react'\r\nimport { compose, withProps } from 'recompose'\r\n\r\nexport const Component = compose(memo, withProps({ value: 'Hello' }))(({ value }) => (<div>{value}</div>))\r\n```\r\n\r\n\r\n## The current behavior\r\n\r\nMaking changes to `Component.js` does not re-render the element in `main.js`.\r\nThe transformed `Component.js` module does not register the `Component` for refresh.\r\n\r\n\r\n## The expected behavior\r\n\r\nMaking changes to `Component.js` does re-render the element in `main.js`.","state":"open","updated_at":"2021-10-29T06:25:32Z","created_at":"2021-04-05T15:26:10Z","creator_user_login":"davidbonnet"}
{"number":21166,"title":"Chore/setup ci to run dev tools tests","body":"## Summary\r\n\r\nThe solution is to setup ci for devtools test for every version of react.\r\n\r\n## Test Plan\r\n\r\nA change is made to build code without a inconsistence on check names on build.","state":"open","updated_at":"2023-08-17T20:21:00Z","created_at":"2021-04-01T19:46:41Z","creator_user_login":"ktfth"}
{"number":21159,"title":"Bug: getting console error for live grid randomly","body":"\r\nwhile working with live grid using react js, giving console error randomly and in that, log mentions,  issue might be at react js file and issue\r\nso could you please help that what is meaning of that or how to fix that\r\n\r\n**console error shows as follow,\r\n\r\nInvariant Violation: Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.**\r\n\r\n","state":"open","updated_at":"2021-04-01T09:46:40Z","created_at":"2021-04-01T09:17:42Z","creator_user_login":"pankaj247software"}
{"number":21158,"title":"Bug:  react-test-renderer:   Cannot read property 'removeEventListener' of null on snapshot","body":"\r\nI havethis stack trace while taking a snap of a custom file reader:. The componet is working well execpt in this snapshot that involves react-test-render. It throws this error:\r\n\r\n\r\n\r\n`  console.error\r\n    Error: Uncaught [TypeError: Cannot read property 'removeEventListener' of null]`\r\n\r\n\r\n\r\n\r\n\r\nHere is my stack\r\n\r\njest@26.6.0\r\nreact-router@6.0.0-beta.0\r\nreact-router-dom@6.0.0-beta.0\r\nreact@17.0.1\r\ntypescript@4.2.3\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\n\r\n// component\r\n\r\nimport React from 'react';\r\nimport { CSVReader } from 'react-papaparse';\r\n\r\n\r\ninterface CustomtReaderProps {\r\n  onFileLoaded?: ((data: any, file?: any) => void) | undefined;\r\n}\r\n\r\nexport const CustomtReader: React.FC<OffreTransportReaderProps> = (props: CustomtReaderProps) => {\r\n\r\n  const { onFileLoaded } = props;\r\n  return (\r\n    <CSVReader\r\n      onFileLoad={onFileLoaded}\r\n      accept='text/csv, .csv'\r\n    >\r\n      <span>{label}</span>\r\n    </CSVReader>\r\n  );\r\n\r\n};\r\n\r\n```\r\n\r\n```` js\r\n\r\n\r\n// test\r\n\r\ndescribe('OffreTransportReader', () => {\r\n\r\n\r\n  it('should match snapshot', () => {\r\n\r\n    /* FIXME: in the renderer:  Uncaught [TypeError: Cannot read property 'addEventListener' of null]\r\n                                Stacktrace:    Error: Uncaught [TypeError: Cannot read property 'addEventListener' of null]\r\n                                hint: possibly due to the renderer method of  @react-test-render\r\n */\r\n\r\n\r\n    const handleFileUploaded = jest.fn().mockImplementation();\r\n\r\n    const tree = renderer\r\n      .create(     // <--------------- **_error : TypeError: Cannot read property 'removeEventListener' of null_**\r\n        <CustomtReader\r\n          onFileLoaded={handleFileUploaded}\r\n          label='Chargez votre offre'\r\n        />,\r\n      )\r\n      .toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n  });\r\n});\r\n\r\n\r\n````\r\n\r\n## The current behavior\r\nError: Uncaught [TypeError: Cannot read property 'addEventListener' of null]\r\n\r\n## The expected behavior\r\n\r\nTest passes\r\n","state":"open","updated_at":"2021-04-01T01:39:39Z","created_at":"2021-04-01T01:39:39Z","creator_user_login":"exaucae"}
{"number":21139,"title":"[Fast Refresh] Don’t Scan the Tree","body":"We had a conversation with @sebmarkbage about https://github.com/facebook/react/issues/20417. He had a different implementation idea that should resolve such issues. I probably won't do this now but I want to write it down for future reference.\r\n\r\nCurrently, after we gather a list of types that need to be updated in the tree, we scan the tree and tag Fibers to be updated. This happens [here](https://github.com/facebook/react/blob/0853aab74dc8285401e62d1e490551ba3c96fd64/packages/react-reconciler/src/ReactFiberHotReloading.new.js#L267-L339). But like https://github.com/facebook/react/issues/20417 shows, this doesn't work if the type is not in the tree. E.g. if the function we changed is only being called directly, and its \"type\" is not the actual wrapper that exists in the tree.\r\n\r\nAn alternative implementation could instead inject a special Hook call into each registered component. For example by generating a wrapper. That Hook would return the latest actual implementation, _and_ schedule updates on itself when it changes. Which means there would be no need to scan the tree at all. Instead, each component would register itself for updates. For false positives outside of React rendering, the Hook would just be callthrough so it wouldn't break anything.\r\n\r\nThis seems like a pretty significant change to the implementation so I'm probably not going to work on this now. Maybe we could consider it next time we need to change the implementation details. Or maybe somebody sufficiently motivated wants to hack on this. I can provide some code pointers but it’s not a beginner-friendly issue.","state":"open","updated_at":"2023-03-31T13:29:14Z","created_at":"2021-03-30T12:17:17Z","creator_user_login":"gaearon"}
{"number":21137,"title":"Another Fiber structure without return pointer.","body":"https://twitter.com/acdlite/status/1369894466308497411\r\n\r\nThis is a tweet from @acdlite , which I think is worth thinking about and recording\r\n\r\nThe current react fiber linked list structure does limit the implementation of few algorithms, such as the right to left diff algorithm based on the longest incremental subsequence.\r\n\r\nIs there a new structure that doesn't need a return pointer? What should it look like?\r\n\r\nIt's easy to delete alternative pointer, but what about the return pointer? Is there a new structure to replace it?","state":"open","updated_at":"2021-03-30T07:16:53Z","created_at":"2021-03-30T07:14:26Z","creator_user_login":"yisar"}
{"number":21128,"title":"Remove DevTools dependency on host node internalInstanceKey","body":"React uses a pseudo-randomly-generated `internalInstanceKey` key field is used to store a reference on a host node (e.g. `HTMLDivElement`) to the Fiber that created it:\r\nhttps://github.com/facebook/react/blob/634cc52e6174b506dee79d908f50ce1ee19f4fbf/packages/react-dom/src/client/ReactDOMComponentTree.js#L56-L61\r\n\r\nThis pointer in turn is used by a few things:\r\n* Event propagation: Will not be necessary if event listeners are added directly to the host node rather than the root.\r\n* Partial hydration: Unsure (unfamiliar with this code.\r\n* DevTools host element inspection: See below.\r\n\r\nThe DevTools dependency is on `getClosestInstanceFromNode`:\r\nhttps://github.com/facebook/react/blob/634cc52e6174b506dee79d908f50ce1ee19f4fbf/packages/react-dom/src/client/ReactDOMComponentTree.js#L75-L155\r\n\r\nThis could be removed if DevTools implemented its own `precacheFiberNode` behavior when Fibers mounted and unmounted. The trick would be walking the host component tree if a DOM node wasn't directly owned by React. Fortunately HTML elements have `parentNode` pointers which would make this trivial (at least for the web extension).\r\n\r\nThe standalone DevTools (in the case of React Native) would not be able to support this, but standalone doesn't support this mode of inspection anyway, so we should be clear to remove this dependency.","state":"open","updated_at":"2021-03-29T18:24:13Z","created_at":"2021-03-29T18:24:13Z","creator_user_login":"bvaughn"}
{"number":21094,"title":"Bug: Radio/Checkbox inputs not triggered when setting state in listener on a parent element","body":"Hello\r\n\r\nI wanted to highlight a div after clicking on it (and hide the highlight after clicking anywhere else). So in componentDidMount, I added two event listeners (on the div and on the window object).\r\nThe problem is kind of wild: when I use setState in a listener added in componentDidMount, radio buttons are not triggered.\r\nWhen the listener does not use setState or uses setTimeout(() => this.setState(...), 0), radio buttons works expectedly.\r\nWhen creating a code example, I also tried checkboxes, and they do not work as well. BUT, for example, button inputs work expectedly.\r\n\r\nReact version: 16.13.1 (in my app), 17.0.2 (in code sand box) - issue is in both of them\r\n\r\n## Steps To Reproduce\r\n\r\nYou can use this prepared code example: https://codesandbox.io/s/react-setstate-listener-input-bug-wjsdk\r\nThe example also shows other listeners set ups which work expectedly.\r\n\r\n## Current possible workaround\r\n\r\nAs mentioned earlier, we can use setTimeout(() => this.setState(...), 0) to gain expected behavior, but it is not a bug fix.","state":"open","updated_at":"2021-04-14T21:12:34Z","created_at":"2021-03-25T10:17:28Z","creator_user_login":"kotliluk"}
{"number":21091,"title":"Bug: The invalid value warning was showed when adding functions to object prototype","body":"While adding a function to Object.prototype in React project anywhere, react while showing the Warning: Invalid value for prop \\`xxx\\` on tag. And an uncaught TypeError.\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a react project with create-react-app\r\n2. Put the following code anywhere in the project: `Object.prototype.test = function () {}`\r\n<img width=\"876\" alt=\"图片\" src=\"https://user-images.githubusercontent.com/9192537/112427671-f02aed80-8d74-11eb-8b23-8f5fa9683d2d.png\">\r\n\r\n## The current behavior\r\nGetting the warning\r\n![图片](https://user-images.githubusercontent.com/9192537/112427330-64b15c80-8d74-11eb-9c24-5b7eff138ca9.png)\r\nAlso the Uncaught TypeError: renderer.setTraceUpdatesEnabled is not a function.\r\n![图片](https://user-images.githubusercontent.com/9192537/112429126-35501f00-8d77-11eb-8361-28ac8db8a7fe.png)\r\n\r\n## The expected behavior\r\nExpected nether warning nor error.","state":"open","updated_at":"2021-04-22T12:37:43Z","created_at":"2021-03-25T06:17:12Z","creator_user_login":"virtuous-code"}
{"number":21078,"title":"Bug: Incorrect error message","body":"I'm getting this error message:\r\n\r\n  React Hook \"useStyles\" is called conditionally. React Hooks must be called in the exact same order in every component render\r\n\r\nHowever, I'm pretty darn sure that I'm not actually calling useStyles conditionally.  Also, the error messages come and go if I comment out unrelated code.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Attempt to run my app\r\n\r\nUnfortunately this error only happens with one particular big source file.  I don't see an easy way to show it to you without sending my whole project.  I don't mind doing that, however.\r\n","state":"open","updated_at":"2021-04-01T08:57:17Z","created_at":"2021-03-24T18:55:19Z","creator_user_login":"toschlog"}
{"number":21057,"title":"Bug: useState with class as initial state throws an error","body":"Using a JavaScript class as initial state in `useState` throws an error. This is because `mountState` check if the initial state is a function by `typeof initialState === 'function'` and classes are technically functions. However since ES6+, I feel like most developers don't consider classes functions because of the less prototype-inheritance feel since ES6 and the `class` keyword.\r\n\r\n\r\nReact version: 17.0.2\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Define an ES6 class\r\n2. Use the class as `initialState` argument to `useState`\r\n\r\nCode example:\r\n\r\n```jsx\r\nimport { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass A {}\r\n\r\nfunction App() {\r\n  const [cls, setCls] = useState(A);\r\n  return <h2>{cls.name}</h2>;\r\n}\r\n\r\nReactDOM.render(<App />, document.body);\r\n```\r\n\r\n## The current behavior\r\n\r\n```\r\nTypeError: Cannot call a class as a function\r\n    at _classCallCheck (eval at z (eval.js:42), <anonymous>:3:11)\r\n    at A (VM302 index.js:19)\r\n    at mountState (react-dom.development.js:10436)\r\n    at Object.useState (react-dom.development.js:10919)\r\n    at useState (react.development.js:954)\r\n    at App (VM302 index.js:25)\r\n```\r\n\r\nAlternatively, the error can be `TypeError: Class constructor X cannot be invoked without 'new'`.\r\n\r\n\r\n## The expected behavior\r\n\r\nAs mentioned in the description above, I would \r\n\r\n- either expect classes to work\r\n- or mention this caveat in the docs.\r\n\r\nI guess checking, if the initial state is actually a non-class function, could cause instances of subclasses of functions not to work (depending how the check is done).\r\n","state":"open","updated_at":"2021-03-31T02:37:37Z","created_at":"2021-03-23T10:51:17Z","creator_user_login":"jneuendorf"}
{"number":21049,"title":"Bug: `onMouseEnter` triggered twice on target when there's space around it, and ReactDOM.createPortal is used to render something else","body":"React version: 17\r\n\r\n## Steps To Reproduce\r\n\r\n1. Hover the button\r\n2. Note the double log produced\r\n\r\nLink to code example: https://codesandbox.io/s/react-mouseenter-bug-uyswr?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe `onMouseEnter` is triggered twice.\r\n\r\n## The expected behavior\r\n\r\nThe `onMouseEnter` should be triggered only once.\r\n\r\n---\r\n\r\nA few more notes:\r\n- I've tested on React 16.14 and it seems that bug only appeared in 17. (I can see it in the first ever 17 rc as well).\r\n- It's specifically when something happens to be portalled on the page too (you'll see if you don't render in a portal, no issue)\r\n- It is also linked to the fact there's space around the target that gets moused over. You'll notice that if you comment out the heading below for example and you mouse-enter coming from the bottom, the bug won't be there. But it will be at the top. Similarly if we you keep the headings rendered, but override their margins to be 0 such that there's no gap between the heading and the button, it won't happen either.\r\n\r\nI'm conscious this is all really odd but I haven't been able to find out exactly what's happening here…\r\n","state":"open","updated_at":"2022-01-10T10:50:29Z","created_at":"2021-03-22T11:25:21Z","creator_user_login":"benoitgrelard"}
{"number":21043,"title":"Feature request: Consider supporting AbortSignal/AbortController for cleanup","body":"Hey, I've recently worked on adding support for `AbortController/AbortSignal` in a bunch of Node.js APIs and some DOM ones and I think it would be really cool if React added support to the web platform's cancellation standard primitive.\r\n\r\nBasically the ask is:\r\n\r\n```js\r\n//before\r\nuseEffect(() => {\r\n  const ac = new AbortController();\r\n  (async () => {\r\n    const data = await fetch('./api', { signal: ac.signal }).then(x => x.json());\r\n    setData(data);\r\n  })();\r\n  return () => ac.abort();\r\n});\r\n//after\r\nuseEffect(async (signal) => {\r\n  const data = await fetch('./api', { signal }).then(x => x.json());\r\n  setData(data);\r\n});\r\n```\r\n\r\nOr with events:\r\n```js\r\n//before\r\nuseEffect(() => {\r\n   const listener = (message) => setMessage(process(message));\r\n   myApi.addEventListener(\"message\", listener);\r\n   return () => myApi.removeEventListener(\"message\", listener);\r\n});\r\n//after\r\nuseEffect(async (signal) => {\r\n  myApi.addEventListener(\"message\", (message) => setMessage(process(message)), { signal });\r\n});\r\n```\r\n\r\nI can bring in more examples. It's also possible to keep the API compatible with the existing API or create the AbortSignal lazily to minimize performance impact.\r\n\r\nApologies if I opened this in the incorrect place :)","state":"open","updated_at":"2021-06-13T12:43:16Z","created_at":"2021-03-20T17:10:15Z","creator_user_login":"benjamingr"}
{"number":21031,"title":"Bug: Creating a portal within a shadow root breaks event handlers","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nWith React 16 there seem to be issues related to using a portal within the shadow dom. Possibly this is related to issues with event delagations that are [solved](\"react-dom\": \"^17.0.1\") with React 17.\r\n\r\nI have a part of my app rendered within a shadow dom. In there, I conditionally render some input using `createPortal` elsewhere in the dom. When the input field is rendered using a portal, the event handlers break. See the reproduction example below.\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/stupefied-heyrovsky-3i59t?file=/src/index.tsx\r\n\r\n1. Open the link above and click the button that will render an input field. This will render the input elsewhere within the shadow dom.\r\n2. Blur the input field. It is expected that `OK` is logged to the console, but nothing is logged.\r\n\r\nA few things I noticed that would resolve the issue:\r\n\r\n1. Removing the portal will result in `OK` being logged correctly on blur.\r\n2. Adding an `<input hidden />` that otherwise does nothing will result in `OK` being logged correctly on blur.\r\n3. Removing the use of `useState` will result in `OK` being logged correctly on blur.\r\n4. Removing the shadow dom\r\n5. Upgrading to React 17\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/stupefied-heyrovsky-3i59t?file=/src/index.tsx\r\n\r\n## The current behavior\r\n\r\nEvent handlers break when using a portal within the shadow dom in certain (quite sneaky) circumstances.\r\n\r\n## The expected behavior\r\n\r\nThe events should work correctly within the shadow dom when using portals\r\n","state":"open","updated_at":"2021-03-18T11:47:37Z","created_at":"2021-03-18T11:47:37Z","creator_user_login":"ablamunits"}
{"number":21025,"title":"Bug: HTMLSelectElement.value doesn't update to defaultValue on form reset","body":"For uncontrolled inputs, [docs here](https://github.com/facebook/react/blob/master/fixtures/dom/src/components/fixtures/text-inputs/README.md#form-reset-events) say that `reset()`ing a form should change all inputs' `value`s to `defaultValue`. This doesn't seem to be working for `HTMLSelectElement`.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Set a `defaultValue` on \\<select\\> to some variable that can be changed later\r\n2. Pick a different option\r\n3. Change the value of variable from step 1\r\n4. `reset()` the form containing the \\<select\\>\r\n\r\nLink to code example: <https://codesandbox.io/s/cocky-curran-365wd?file=/src/App.js>\r\n\r\n## The current behavior\r\n\r\nThe \\<select\\>'s value resets to its *initial* `defaultValue`, not the updated one.\r\n\r\nIn my codesandbox.io example you can see that it always resets to \"Zero\", regardless of how you update the `defaultValue`.\r\n\r\n## The expected behavior\r\n\r\nThe \\<select\\>'s value should update to its current `defaultValue`.","state":"open","updated_at":"2021-03-23T03:55:20Z","created_at":"2021-03-17T22:18:45Z","creator_user_login":"cl8n"}
{"number":21023,"title":"react-devtools-inline package now has react@experimental dependency","body":"I recently updated DevTools to use the new, experimental `getCacheForType` API (#20548) which works well for the browser and standalone extension versions, because they bundle their own version of React (the experimental release). This has left the `react-devtools-inline` package (used by e.g. Code Sandbox) in an unreleasable state though until the new Suspense APIs are released as stable.\r\n\r\nPerhaps I could go back to the last commit prior to #20548 and do one final release, but then I will be blocked.","state":"open","updated_at":"2021-03-18T14:39:10Z","created_at":"2021-03-17T18:22:17Z","creator_user_login":"bvaughn"}
{"number":21002,"title":"Bug: Unsupported HTML entities","body":"Many of the HTML entities presented at https://dev.w3.org/html5/html-author/charref are not supported by React, why is this?\r\n\r\n## Steps To Reproduce\r\n\r\nCheck https://codesandbox.io/s/react-unsupported-html-entities-yr9rj\r\n\r\n## The current behavior\r\n\r\nReact recognizes some entities as string literals which may cause problems when the browser in question in fact supports the entity but React tricks the browser into thinking that it is a string, just because React doesn't seem to recognize it.\r\n\r\n## The expected behavior\r\n\r\nThe symbol that the entity should yield.\r\n","state":"open","updated_at":"2022-01-09T00:42:58Z","created_at":"2021-03-14T14:16:25Z","creator_user_login":"fast-reflexes"}
{"number":20981,"title":"Bug: Error message prints \"Warning: ...\" instead of \"Error: ...\"","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js and type something in the Tool ID field. This reproduces one of these errors-warnings..\r\n2. Take a look in the console and you will see an Error but.. a Warning, or Error (in fact it's considered to be an error)... , which is simply confusing. \r\n![image](https://user-images.githubusercontent.com/9853656/110771670-6f8fcb80-8263-11eb-9f85-60026f9c52b0.png)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## Link to code example: https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nprints: \"Warning: A component is changing an uncontrolled...\"\r\n\r\n## The expected behavior\r\nshould be \"Error: A component is changing an uncontrolled...\" here and in all such cases.\r\n\r\n\r\n\r\nI've initially created #20912 (everything ok there) , but now I've dived deeper in this, I've read this #16753 and understand the concept. So now, the solution (that would be in alignment with #16753 by the way) would be simply to make minor changes here https://github.com/facebook/react/blob/master/packages/shared/consoleWithStackDev.js\r\n![Expression-4 (1)](https://user-images.githubusercontent.com/9853656/110778391-f5fbdb80-826a-11eb-810a-1bcae85ace18.jpg)\r\n\r\n\r\nand then run test and update  the red tests. Also, maybe in the consoleWithStackDev.www.js .. \r\n\r\nBy the way, what is this about? (RN?))\r\n> // Careful: RN currently depends on this prefix\r\n\r\nMaybe this is why it wasn't done before?) \r\n\r\nSeems like a very obvious thing and I surprised nobody raised an issue (or maybe did but I could not find it).\r\n\r\nAnything opposing these changes?\r\n\r\n\r\n","state":"open","updated_at":"2022-12-07T13:54:38Z","created_at":"2021-03-11T11:09:58Z","creator_user_login":"kokushkin"}
{"number":20977,"title":"Provide a way to propagate tracing context to async tasks","body":"Disclaimer: sorry for the overloaded terminology, the \"context\" I'm referring to here is tracing context (e.g. from OpenTelemetry), not React context.\r\n\r\nMy team is working on adding OpenTelemetry tracing to a React application. We have a working strategy for propagating the tracing context to hooks that don't do any asynchronous work, illustrated [here](https://gist.github.com/sfishel-splunk/17807939801054eb96a1d1a2b39f5d46#file-tracingexample-jsx). However, for hook logic that makes use of asynchronous flow - like `useEffect` - the tracing context does not propagate correctly, illustrated [here](https://gist.github.com/sfishel-splunk/17807939801054eb96a1d1a2b39f5d46#file-tracingexamplewithuseeffect-jsx).\r\n\r\nWe have a work-around to propagate the tracing context to `useEffect` callbacks, which looks something like this:\r\n\r\n```js\r\nuseEffect(context.bind(() => {\r\n  // context is now correctly propagated here\r\n}), []);\r\n```\r\n\r\nThis works, but it requires us to explicitly instrument all usage of asynchronous hooks like `useEffect` and `useLayoutEffect`, and it means that we can't propagate tracing context through hook logic in external libraries.\r\n\r\nIdeally, we would be able to configure React to do this automatically, something along the lines of:\r\n\r\n```js\r\nReact.addEffectProcessor(effect => context.bind(effect));\r\n```\r\n\r\nThanks very much!","state":"open","updated_at":"2021-03-11T07:51:42Z","created_at":"2021-03-11T05:04:07Z","creator_user_login":"sfishel-splunk"}
{"number":20966,"title":"Bug: React test triggers mouseout event for disabled button","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a test file in a react project, and paste the following code.\r\n2. Run the test\r\n3. The test for onMouseLeave event fails.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```javascript\r\nimport { act } from \"react-dom/test-utils\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Counter = () => {\r\n  const increaseCount = () => {\r\n    setCount((prev) => prev + 1);\r\n  };\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button\r\n        disabled\r\n        onClick={increaseCount}\r\n        onMouseEnter={increaseCount}\r\n        onMouseLeave={increaseCount}\r\n      >\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\ndescribe(\"button with react test-utils\", () => {\r\n  let container;\r\n\r\n  beforeEach(() => {\r\n    container = document.createElement(\"div\");\r\n    document.body.appendChild(container);\r\n  });\r\n\r\n  afterEach(() => {\r\n    document.body.removeChild(container);\r\n    container = null;\r\n  });\r\n\r\n  it(\"should not trigger onClick when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseEnter when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseover\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseLeave when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseout\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n});\r\n\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n\r\n## The current behavior\r\n<img width=\"664\" alt=\"Screenshot 2021-03-09 at 21 45 13\" src=\"https://user-images.githubusercontent.com/2574511/110506309-c9d44380-8120-11eb-9164-ce2ae7316889.png\">\r\n\r\n\r\n## The expected behavior\r\nAll tests should pass","state":"open","updated_at":"2021-07-29T14:52:53Z","created_at":"2021-03-09T16:47:36Z","creator_user_login":"tulsidaskhatri"}
{"number":20951,"title":"Bug: React Dev tools keys not showing last letter in FF ","body":"The FireFox dev tools crop off the last letter of the keys in state/props as you can see here.\r\n![Screenshot_2021-03-08_08-13-36](https://user-images.githubusercontent.com/21976188/110293584-a907d300-7fe6-11eb-89dc-eb709ab31fdd.png)\r\nThis doesn't happen in the Chrome extension \r\n![Screenshot_2021-03-08_08-14-18](https://user-images.githubusercontent.com/21976188/110293623-b91fb280-7fe6-11eb-90ee-b9cbe550147b.png)\r\n","state":"open","updated_at":"2021-12-14T22:32:51Z","created_at":"2021-03-08T08:17:33Z","creator_user_login":"bushblade"}
{"number":20923,"title":"umd distribution for jsx-runtime","body":"Our module infrastructure relies on 3rd party dependencies to be available as global variables which we internally map in our module system. We are currently looking into updating to 17.x and utlize the new JSX Transform, however we noticed that there is no umd distribution for the jsx-runtime resulting in that we are not able to map this new dependency into our module system.\r\n\r\nThe reason why we have not switched over to a modern module/build system is that we are still in the progress of migrating (over time) our stack to be on top of react and in the current version (16.x) using the \"old\" JSX Transform we are able to achieve this through the provided umd distribution.\r\n\r\nWe could of course stick to 16.x or 17.x with the \"old\" JSX Transform, however with the rebase to react we kind of want to be future proof at the same time, so being on the new Transform would be preferred imo.\r\n\r\nI do understand this might be a bit of a far reach due to the proprietary module infrastructure, but I think more people could benefit from having the jsx-runtime at hand as umd distribution.","state":"open","updated_at":"2023-06-16T11:51:33Z","created_at":"2021-03-03T09:47:32Z","creator_user_login":"WGroenestein"}
{"number":20920,"title":"Bug: onChange of input field firing twice on Android devices based on special conditions","body":"In mobiles websites (tested on Android) and webviews, the `onChange` method of the input field is getting fired twice if \r\n1. The value of the input is updated in the store/state after some time interval, for example\r\n```\r\nhandleChange = (val) => {\r\n    setTimeout(() => {\r\n      this.setState({ val });\r\n    }, 20);\r\n  };\r\n```\r\n2. The input value has two consecutive same numbers followed by a different number, for example\r\n```\r\nA112\r\n```\r\n\r\nSo for the case of `A112`, it becomes `A11A112`\r\n\r\nReact version: Tested on 16.13.0 and 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nLink to demo: https://gblww.csb.app/\r\nLink to code example: https://codesandbox.io/s/input-field-bug-report-gblww\r\nDemo video: https://user-images.githubusercontent.com/12195877/109746806-00c7c800-7bfc-11eb-90ea-0f5b469c5ddd.mp4\r\n\r\n\r\n\r\n\r\n## The current behavior\r\nThe input field characters are repeating based on the above conditions\r\n\r\n## The expected behavior\r\nThe input field characters should not repeat.","state":"open","updated_at":"2021-04-06T09:12:24Z","created_at":"2021-03-03T03:11:50Z","creator_user_login":"bisho1995"}
{"number":20904,"title":"Bug: ESLint react-hooks/exhaustive-deps false positive on useCallback wrapped in function defined outside component scope","body":"eslint-plugin-react-hooks version 4.2.0\r\n\r\n## Steps To Reproduce\r\n\r\n```\r\nconst fn = (someVariable) => () => {...}\r\n\r\nconst MyComponent = ({ someVariable }) => {\r\n  const handleSomething = useCallback(fn(someVariable), [someVariable])\r\n\r\n  ...\r\n}\r\n```\r\nThis gives \"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead\"\r\n\r\nAs noted [here](https://github.com/facebook/react/issues/19173), one could do:\r\n```\r\nconst handleSomething = useCallback(() => fn(someVariable)(), [someVariable])\r\n```\r\n\r\nwhich keeps the linter happy. However, if `fn` was e.g. a debounce wrapper, that behaviour would be different.\r\n```\r\nconst handleSomething = useCallback(debounce(() => doSomething(someVariable)), [someVariable])\r\n// vs\r\nconst handleSomething = useCallback(() => debounce(() => doSomething(someVariable))(), [someVariable])\r\n```\r\n\r\nIf `fn` is defined outside the component scope, it can't depend on anything else inside the component scope, so we should be safe to exclude it? I believe the linter uses a similar heuristic with ignoring variables defined outside the component scope, so I think this logic just needs adding to the special case for `useCallback` receiving a non-inline function.\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/angry-greider-bq69s?file=/src/App.js\r\n\r\n## The current behavior\r\nuseCallback with non-inline function declared outside function scope is a warning/error\r\n\r\n## The expected behavior\r\nuseCallback with non-inline function declared outside function scope passes","state":"open","updated_at":"2021-03-01T15:26:17Z","created_at":"2021-03-01T10:29:06Z","creator_user_login":"lexanth"}
{"number":20901,"title":"Bug: Event handling with portals is broken","body":"Event handling with portals is broken in the newest version when placing non-react event handlers BETWEEN other react event handlers. With the following setup **outer react event handler with stopPropagation** > **non-react event handler** > **inner react event handler (in portal)**. Doing the same without portals works correctly. \r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n### With portal (not working)\r\n1. https://stackblitz.com/edit/ag-grid-react-hello-world-gwuhed?devtoolsheight=33&file=index.js\r\n2. Click on the div\r\n3. Only inner and outer event handlers are called\r\n\r\n### Without portal (working)\r\n1. https://stackblitz.com/edit/ag-grid-react-hello-world-gwuhed?devtoolsheight=33&file=index.js\r\n2. Comment out the portal code and comment in the non-portal code (line 24 / 25)\r\n3. Click on the div\r\n4. All three event handlers are triggered\r\n\r\nLink to code example: https://stackblitz.com/edit/ag-grid-react-hello-world-gwuhed?devtoolsheight=33&file=index.js\r\n\r\n## The current behavior\r\n\r\nNon-react event handlers are not called when the initial event is initiated from a portal component and an outer react event handler calls stop propagation. This works correctly without portals.\r\n\r\n## The expected behavior\r\n\r\nThe non-react event handler should also be called when a portal component initiates the event.","state":"open","updated_at":"2022-01-10T09:03:01Z","created_at":"2021-02-27T12:21:57Z","creator_user_login":"sag-tobias-frey"}
{"number":20895,"title":"Bug: React roots are announced as clickable to screen readers","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Activate your screen reader\r\n   1. I used [NVDA](https://www.nvaccess.org/), but [JAWS](https://www.freedomscientific.com/products/software/jaws/) would also work\r\n   1. This will not work with VoiceOver because it does not have the same heuristic about elements with click handlers\r\n2. Go to a page that has one or more React 17 root nodes. For example: https://qc9xj.csb.app/\r\n3. Use the regular navigation of your screen reader to explore the page\r\n   1. In the case of NVDA, this would be using Arrow keys up and down\r\n4. Hear your screen reader announcing the H2 as \"clickable\"\r\n\r\nLink to code example: https://codesandbox.io/s/epic-babbage-qc9xj (https://qc9xj.csb.app/)\r\n\r\n\r\n## The current behavior\r\n\r\nHere is the log of what NVDA says as I'm navigating the page:\r\n\r\n> content info landmark    heading    level 1  This is a static HTML footer\r\n>     _(I press Arrow Down)_\r\n> clickable  heading    level 2  This is a heading within a React application.\r\n>     _(I press Arrow Down)_\r\n> banner landmark    heading    level 1  This is a static HTML header\r\n\r\n## The expected behavior\r\n\r\nIt should not announce the heading as clickable/interactive. Here is what it would sound like without React on the page:\r\n\r\n> content info landmark    heading    level 1  This is a static HTML footer\r\n>     _(I press Arrow Down)_\r\n> heading    level 2  This is a heading within a React application.\r\n>     _(I press Arrow Down)_\r\n> banner landmark    heading    level 1  This is a static HTML header\r\n\r\nIt should be noted that this is how it used to work in React 16 because the delegation of events was done on the `document` node, not the React root node.\r\n\r\n\r\n## Notes\r\n* Some screen readers like JAWS and NVDA use the presence of a `click` handler on a node as an indicator that they are interactive\r\n* Because of React's event delegation, all synthetic events are handled at one central node. In React 16 it's the `document` and in React 17 it's the root node.\r\n* The example shows that it's announced as clickable even when there is no interactive content inside. But even if the React node contained interactive content, the parent container should not be announced as interactive - because it is not.\r\n* This is also called out by the Accessibility Inspector in the Firefox DevTools:\r\n  * \"Does not meet WCAG standards for accessibility. Clickable elements must be focusable and should have interactive semantics. [Learn more](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard#clickable_elements_must_be_focusable_and_should_have_interactive_semantics)\"\r\n* While this is already an issue with just one React root on the page, this problem will get increasingly worse and annoying for the user when there are multiple React roots on the page\r\n    * This could easily happen on pages that are constructed with micro frontend frameworks or widgets","state":"open","updated_at":"2022-12-03T04:39:33Z","created_at":"2021-02-26T13:26:35Z","creator_user_login":"timogasda"}
{"number":20891,"title":"Possible Bug: interplay between reconcilliation algorithm and DOM manipulations via refs","body":"## Introduction\r\nI'm working with a library that performs DOM manipulations via `ref`s in `useEffect`s after React has rendered. \r\n\r\n## Background\r\nMy understanding of the reconciliation algorithm is that it compares subsequently rendered virtual DOMs and only perform the necessary updates on the real DOM when necessary according to this comparison. For this reason, the following example will continue to show a `div` with a green background throughout subsequent rerenderings, even though the `render` method returns a `div` with a blue background:\r\n```\r\nexport default function App() {\r\n  const [num, setNum] = useState(10);\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    console.log(\"effect ran\");\r\n    if (ref.current) {\r\n      ref.current.style.backgroundColor = \"green\";\r\n    }\r\n  }, []);\r\n\r\n  console.log(\"rendered\");\r\n\r\n  return (\r\n    <div ref={ref} style={{ backgroundColor: \"blue\", padding: num + \"px\" }}>\r\n      <button onClick={() => setNum((num) => num + 10)}>Rerender</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n(Sandbox link: https://codesandbox.io/s/festive-leavitt-n44hs?file=/src/App.js)\r\nReact is simply unaware of the change done directly via the `ref` and so the comparison between subsequent virtual DOMs only indicate that the `padding` must be updated.\r\n\r\n## Problem\r\nThis is all fine when it comes to properties, but as far as children are concerned, the behaviour is slightly more obscure and inconsistent (perhaps due to children seemingly being something in between a prop on the parent element and distinct other elements?).\r\n\r\nConsider the following toy example where a wrapper component performs an update (replaces `0`s with `9`s) on the content of its DOM children via `ref`s after rendering. Remember that this is a toy example and I know that the results in this example can be acquired in a much simpler (better!) way in React.\r\n\r\n```\r\nexport default function App() {\r\n  const [num, setNum] = useState(10);\r\n\r\n  return (\r\n    <div>\r\n      <WrapperComponent id=\"first\">\r\n        <span /*key={ Date.now() }*/>10 - {num}</span>\r\n      </WrapperComponent>\r\n      <WrapperComponent id=\"second\">\r\n        <span /*key={ Date.now() }*/>10 -</span>\r\n        <span /*key={ Date.now() + 1 }*/>{num}</span>\r\n      </WrapperComponent>\r\n      <button onClick={() => setNum((num) => num + 10)}>Rerender</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst WrapperComponent = (props) => {\r\n  const ref = useRef();\r\n\r\n  console.log(props.id + \": render\");\r\n  console.log(props.children);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.style.backgroundColor = \"green\";\r\n      console.log(props.id + \": pre-alter\");\r\n      console.log(ref.current.innerHTML);\r\n      for (let i = 0; i < ref.current.children.length; ++i) {\r\n        let el = ref.current.children[i];\r\n        if (el.children.length === 0)\r\n          el.innerHTML = el.innerHTML.replaceAll(\"0\", \"9\");\r\n      }\r\n      //ref.current.innerHTML = \"Altered HTML\"\r\n      console.log(props.id + \": post-alter\");\r\n      console.log(ref.current.innerHTML);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{ margin: \"20px\", color: \"white\", backgroundColor: \"blue\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n```\r\n(Sandbox link: https://codesandbox.io/s/cranky-blackwell-xqbkx?file=/src/App.js)\r\n\r\nDepending on the structure of the children, the results differ:\r\n* **Setup 1**: In the unaltered version above, render once and then clear the console. Click the button to render again and note that the logged children of the `WrapperComponent`s contain the updated number correctly in the `render` printout. Then note that in the `useEffect` when inspecting the `ref`s, React has changed the content of the second `WrapperComponent` in the real DOM to reflect the update in the child components in the virtual DOM whereas the child of the first has not been updated (see `pre-alter` printout). As a result, the changes (in the first `WrapperComponent`) are not reflected in the UI and the `useEffect` has nothing new to process.\r\n* **Setup2**: Comment out the `for` loop in the `useEffect` of the `WrapperComponent` and uncomment the row below it. Refresh the UI and press the button. With this version, React doesn't update the real DOM at all (can be seen in the `pre-alter` printout) even though the children are still correct in the `render` printout.\r\n* **Setup3**: Uncomment the `key` props in the `span`s and restore the `for` loop in `WrapperComponent` and comment out the row below it again. Update the UI and hit the button repeatedly and note that now it works perfectly. React updates the DOM as expected and this is reflected in both `pre-alter` printouts.\r\n\r\nReact version: 17.0\r\n\r\n## Steps To Reproduce\r\n\r\nSee previous section\r\n\r\nLink to code example:\r\n\r\nSee previous section\r\n\r\n## The current behavior\r\n\r\nSee previous section\r\n\r\n## The expected behavior\r\n\r\n* **Setup2**: Given that the comparison between virtual DOMs indicate that only the content of the `span`s has changed, it is reasonable that React tries to update only that and bails out silently when it can no longer find those nodes in the real DOM. One could reason that React should reinsert them but I still think this behaviour is consistent.\r\n* **Setup3**: Comparisons of virtual DOMs indicate that completely new children are to be inserted in the `WrapperComponent`s and so the old ones are thrown out and the new ones are added. Everything works as desired.\r\n* **Setup1**: The `WrapperComponent`s only update the content of the `span`s and so React should be able to map content change in the virtual DOMs to these very same `span`s. It manages to do so for the second `WrapperComponent` but not the first, despite the changed content.\r\n\r\n*I would expect this behaviour to be more consistent and not depend on the structure of the children like this. My suspicion is that it seems to be related to how React maps virtual DOM nodes with mixed content (expressions and literal text) to real DOM nodes but I can't see how, where and why. Hopefully this is not a bug in which case I am sorry for wasting your time.*\r\n","state":"open","updated_at":"2021-02-26T07:43:18Z","created_at":"2021-02-26T07:43:18Z","creator_user_login":"fast-reflexes"}
{"number":20884,"title":"Bug: React DevTools fails when using React Native + Hermes","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\nReact DevTools version: 4.10.1-3a8c04e3b2\r\n\r\n## Steps To Reproduce\r\n\r\n1. `npx react-native init MyApp --template react-native-template-typescript`\r\n2. set `enableHermes: true` in `android/app/build.gradle`\r\n3. start Metro bundler via `yarn start`\r\n4. launch app in Android emulator via `yarn android`\r\n5. launch React DevTools\r\n6. reload Metro bundler\r\n7. click on any element in the React DevTools components view\r\n8. right React DevTools panel is stuck on \"Loading...\" and Metro bundler logs `ERROR [TypeError: undefined is not a function]`:\r\n<img width=\"297\" alt=\"Screen Shot 2021-02-25 at 5 56 13 PM\" src=\"https://user-images.githubusercontent.com/440230/109231116-f76dd400-7793-11eb-8b7c-4c40a7eaee3a.png\">\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://github.com/helixbass/HermesDevToolsIssueExample\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReact DevTools fails to load element props, styles etc\r\n\r\n\r\n## The expected behavior\r\n\r\nReact DevTools should load element props, styles etc\r\n","state":"open","updated_at":"2021-03-01T14:11:53Z","created_at":"2021-02-25T23:07:49Z","creator_user_login":"helixbass"}
{"number":20882,"title":"React throws many fake errors when warnings are issued","body":"In describeNativeComponentFrame, the component rendering is intentionally failed so that we can gather details from the stack trace for some warnings. The Chrome dev tools will break on every single one of these, sometimes more than once. We have many, many components in our call stack before the warning is triggered, throwing many false errors, making it very difficult for us to use the dev tools to investigate unrelated errors when the warnings are present.\r\n\r\nReact version: 17.0.1\r\n\r\n1. Create a simple minimal React page.\r\n2. Render a simple \"hello world\" component with a warning.\r\n3. Open the Chrome dev tools, click break on all exceptions with caught exceptions, and then reload the page.\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/markboyall/react-break-example\r\n\r\nThe current behaviour is that it breaks once per component in the stack frame, causing an unmanageable number of fake breaks. The expected behaviour is that React does not interfere with the browser dev tools can be used to debug our own code.\r\n\r\nPrevious versions of React could issue warnings with one break at the warning site only at most, which was an acceptable tradeoff.","state":"open","updated_at":"2021-02-26T16:46:21Z","created_at":"2021-02-25T16:39:08Z","creator_user_login":"markboyall"}
{"number":20881,"title":"Component summary view by type","body":"A DevTools user has requested the following feature (reworded by me):\r\nExpose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.\r\n\r\nThe Profiler isn't very useful in this scenario because it's too CPU-centric.\r\n\r\ncc @yungsters","state":"open","updated_at":"2022-01-09T00:43:03Z","created_at":"2021-02-25T15:06:29Z","creator_user_login":"bvaughn"}
{"number":20854,"title":"Bug: Dropdowns in React Dev Tools are unclickable in Firefox","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.9\r\nFirefox version: 85.0.2\r\nReact Dev Tools version: 4.10.1-f160547f47\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open Web Inspector in Firefox on a page that includes React\r\n2. Go to \"Components\" tab (dev tools)\r\n3. Click on gear icon to open settings\r\n4. Attempt to click on any dropdown / select input\r\n\r\nhttps://user-images.githubusercontent.com/80849/108611236-b9d61780-7430-11eb-8a4f-a046ba45035f.mov\r\n\r\n## The current behavior\r\n\r\nNone of the select inputs / dropdowns respond to clicks.\r\n\r\n## The expected behavior\r\n\r\nSelect inputs / dropdowns should expand and allow options to be selected / changed.\r\n","state":"open","updated_at":"2021-04-16T11:23:33Z","created_at":"2021-02-20T23:35:59Z","creator_user_login":"adityavm"}
{"number":20838,"title":"Impact: Removal of `function.displayName` in Chromium ","body":"Chromium plan to [remove the non-standard property `fn.displayName` property](https://docs.google.com/document/d/1_GxIGRvv8ATp3GMhA3jUfVFxGKMWEkFWvtqsSS7QQ2M/edit#heading=h.7nki9mck5t64). How would this impact React [`component.displayName`](https://reactjs.org/docs/react-component.html#displayname)?\r\n\r\nLinks:\r\n- Chromium: [Remove non-standard fn.displayName support](https://docs.google.com/document/d/1_GxIGRvv8ATp3GMhA3jUfVFxGKMWEkFWvtqsSS7QQ2M/edit#heading=h.7nki9mck5t64)\r\n- React: [Component.displayName](https://reactjs.org/docs/react-component.html#displayname)\r\n\r\n#### TL;DR;\r\n\r\nChromium has traditionally supported the non-standard `fn.displayName` property as a way to provide developer-controlled debug names for functions that show up in `error.stack` and in `DevTools` stack traces. \r\n\r\nWith ES6, `fn.name` is configurable as a standard, which is a portable replacement for `fn.displayName`. Also, V8 added logic to automatically infer good function names from the source code. \r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2021-02-24T20:05:19Z","created_at":"2021-02-18T02:41:23Z","creator_user_login":"jecfish"}
{"number":20821,"title":"PoC: support launch editor feature for selected component","body":"## Summary\r\n\r\n### support launch editor feature\r\nOriginal Feature Request #20435 \r\n\r\n![launchEditor](https://user-images.githubusercontent.com/14012511/107875836-0f746680-6efd-11eb-899b-c22a7b1f7d60.gif)\r\n\r\nWhen you inspected a react component, you can click the `launch editor` icon to jump to your editor and navigate to the source code original file position.\r\n\r\n### supoort set custom `launchEditorEndpoint`\r\n![2021-02-14 20 16 23](https://user-images.githubusercontent.com/14012511/107876681-51ec7200-6f02-11eb-94c7-57beac6e8f1f.png)\r\n\r\nWhy we need this ? Because different launch editor server middleware use different endpoint.\r\n\r\n`create-react-app` user must use `__open-stack-frame-in-editor` as endpoint cause these hard code.\r\n> https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/launchEditorEndpoint.js#L9-L10\r\n```js\r\n// TODO: we might want to make this injectable to support DEV-time non-root URLs.\r\nmodule.exports = '/__open-stack-frame-in-editor';\r\n```\r\n`launch-editor-middleware` user often use `__open-in-editor` as endpoint.\r\n> https://github.com/yyx990803/launch-editor#middleware\r\n```js\r\nconst launchMiddleware = require('launch-editor-middleware')\r\napp.use('/__open-in-editor', launchMiddleware())\r\n```\r\n![2021-02-14 20 39 20](https://user-images.githubusercontent.com/14012511/107877028-c2948e00-6f04-11eb-9a09-5ba31ad689cb.png)\r\nBoth middleware have many user around world (and exist many custom middleware actually).\r\n\r\n## Issues need to fix\r\n1. Can we get the releative file path from devtools ? Now the `source` path is absolute(e.g. `/Users/iChenLei/Documents/cra/reactapp/src/App.js:24`).\r\n2. If we only can use absolute file path, we need create pr for `create-react-app/react-dev-utils` to support absolute path.\r\n`https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/launchEditor.js#L287-L290`\r\n```diff\r\n+ const filePath = path.relative(process.cwd(), fileName)\r\n```\r\n3. Please help me make a suitable svg icon for `launch editor`feature, Thanks for `facebook/react` official.\r\n4. Is there `common toast` ui component to show message about set custom endpoint success ? I think feedback is necessary.\r\n\r\n@bvaughn Sir, I need your code review and advices, thanks. \r\n\r\n> I must say that it's too hard for me to run the devtools extension build and test script, many network error / script error and other problems, It drives me crazy 😭 .\r\n\r\n## Test Plan\r\n\r\nwill add necessary unit test later\r\n\r\n## Circle CI Artifacts\r\nEvery one can download this build artifacts to test `launch editor`, but you must modilfy your `launch editor` middleware to support `absolute file path` otherwise you can't launch editor success. I will create a pull request to `create-react-app/react-dev-utils` to support absolute file path. Welcome any suggestion !\r\n```diff\r\n// for example\r\n// ./node_modules/react-dev-utils/launchEditor.js\r\nfunction launchEditor(fileName, lineNumber, colNumber) {\r\n+ fileName = path.relative(process.cwd(), fileName)\r\n  if (!fs.existsSync(fileName)) {\r\n    return;\r\n  }\r\n```\r\n> React devtools build download ->  [build/devtools.tgz](https://270891-10270250-gh.circle-artifacts.com/0/build/devtools.tgz)","state":"open","updated_at":"2021-10-29T14:32:11Z","created_at":"2021-02-14T12:01:29Z","creator_user_login":"iChenLei"}
{"number":20819,"title":"When you pass object instance into React Component props, object instance is never cleared from memory.","body":"Hi, \r\nI have an issue with passing object reference into React Component props. I pass `example` into `prop1` of `TestReactComponent`. Then, in `removeInstance` method I clear the object instance. After setting it to `null` object instance shouldn't be visible in memory.\r\nExample code: \r\n```\r\nfunction App() {\r\n  let example = new ExampleClassInstance();\r\n  const key = Math.random();\r\n  const removeInstance = () => {\r\n    unmountComponentAtNode(document.getElementById('example-wrap'))\r\n    example = null;\r\n  }\r\n  return (\r\n    <div className=\"App\"  id=\"example-wrap\">\r\n      <div >\r\n        <TestReactComponent  key={key} prop1={example} ></TestReactComponent>\r\n      </div>\r\n      <button onClick={()=> removeInstance()}>remove</button>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n```\r\n\r\nAfter setting `example` to null (after calling `removeInstance` method) I expect not to have an object instance in memory, but unfortunately it still exists. After recording Heap Snapshot from Memory tab I see result: \r\n```\r\nExampleClassInstance | 9 | 560 % | 2440 %\r\nprop1 in Object@591215🗖 | 8 | 120 % | 5600 % |  \r\n      -- | -- | -- | -- | --\r\n              memoizedProps in FiberNode@591281🗖react-dom.development.js:24666 | 7 | 1400 % | 1880 % |  \r\n              returninFiberNode@591301🗖react-dom.development.js:24666 | 6 | 1400 % | 1880 % |  \r\n              __reactFiber$lwytjywp7qinText@317739🗖\r\n\r\n```\r\nSnapshot says :  `memoizedProps in FiberNode`. \r\nPS I don't use `memo` function for the component.\r\n\r\nAfter setting `example` to `null` I expect don't see object instance in memory anymore.\r\n\r\nPlease for help. If something is not clear please ask.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-01-09T07:43:21Z","created_at":"2021-02-13T21:57:01Z","creator_user_login":"czmok"}
{"number":20787,"title":"Bug: Safari div contentEditable，onMouseUp trigger before onMouseDown","body":"React version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Mac OS Big Sur version 11.2，Safari  version 14.0.3 \r\n2. set div contentEditable\r\n3. div addEventListener onMouseUp and onMouseDown\r\n4. onMouseUp trigger before onMouseDown\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n```\r\n<div\r\n  onMouseDown={() => {console.log('mouse down')}}\r\n  onMouseUp={() => {console.log('mouse up')}}\r\n  suppressContentEditableWarning\r\n  contentEditable>\r\n  Test ContentEditable In Safari\r\n</div>\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nonMouseUp trigger before onMouseDown\r\n\r\n## The expected behavior\r\n\r\nonMouseUp trigger after onMouseDown\r\n","state":"open","updated_at":"2022-10-16T11:21:06Z","created_at":"2021-02-10T15:24:57Z","creator_user_login":"SmallComfort"}
{"number":20779,"title":"Scheduling profiler feedback","body":"Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:\r\n* Show lane labels instead of bitmap index\r\n* On hover for a batch of render work highlight update events that were related to that render batch\r\n* Show when tasks are scheduled (in the scheduler, any JavaScript, not just React\r\n* Find-in-page that shows number of results like Chrome and updates as you zoom and scroll\r\n* Show lane(s) state update get associated with in chart tooltip\r\n* Highlight batched updates on hover (hovering one item would update others)","state":"open","updated_at":"2021-02-09T23:04:38Z","created_at":"2021-02-09T22:49:55Z","creator_user_login":"bvaughn"}
{"number":20770,"title":"Bug: Disabled button state update prevents `scrollIntoView`","body":"I have a `button` that triggers `scrollIntoView` for a node when clicked. It also updates some state which subsequently disables that button in certain cases. If the button becomes disabled, the `scrollIntoView` execution aborts.\r\n\r\nThis seems to only happen in Chrome/Brave.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nSee steps to reproduce in sandbox.\r\n\r\nhttps://codesandbox.io/s/goofy-curie-yts68?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nDescribed above.\r\n\r\n## The expected behavior\r\n\r\nThe state update should not prevent `scrollIntoView`.\r\n","state":"open","updated_at":"2023-08-09T08:45:54Z","created_at":"2021-02-09T18:16:29Z","creator_user_login":"jjenzz"}
{"number":20750,"title":"Bug: react-hooks/exhaustive-deps false positive when function is casted with TypeScript","body":"React version: 17.0.1\r\n\r\n### Steps To Reproduce\r\nSetup eslint with @typescript-eslint/parser as parser\r\nCast a function passed to `useEffect`\r\n\r\n```\r\nimport {useCallback, useEffect} from 'react';\r\n\r\ntype F = (...args: unknown[]) => void;\r\n\r\nfunction MyComp() {\r\n\tconst foo = useCallback(() => {}, []);\r\n\r\n\t// OK\r\n\tuseEffect(() => {\r\n\t\tfoo();\r\n\t}, [foo]);\r\n\r\n\t// WARNS?\r\n\tuseEffect((() => {\r\n\t\tfoo();\r\n\t}) as F, [foo]);\r\n\r\n\treturn 'Hello, world'\r\n}\r\n```\r\n\r\nLink to code example: https://github.com/0x24a537r9/exhaustive-deps-bug\r\n\r\n### The current behavior\r\nThe following error was reported\r\n\r\n```\r\n  14:2  warning  React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead  \r\n```\r\n\r\n### The expected behavior\r\nThe rule should interpret the function argument correctly and know that it is already inline.","state":"open","updated_at":"2021-04-05T07:46:10Z","created_at":"2021-02-05T23:05:20Z","creator_user_login":"0x24a537r9"}
{"number":20741,"title":"Bug: Nested form elements not firing onSubmit","body":"React version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a nested form element with an onsubmit handler\r\n2. The onSubmit handler will not be called\r\n\r\nIn the example, click the \"Submit child\" button and will see the page reload/no console.logs. However, the expected actions occur for both parent and neighbouring forms.\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/zen-hoover-6wit3?file=/src/App.js\r\n\r\n\r\n## The current behavior\r\nThe attached onSubmit handler on a nested form element is not being called/fired.\r\n\r\n## The expected behavior\r\nExpect the onsubmit handler to be called.\r\n\r\nI'm aware that nesting forms is not valid - but it was working react 16. I'm hoping to not get \"you're doing it wrong\" responses - but if there is no intention to support this situation the future I would really appreciate an explanation for it :) I've got a bunch of legacy code here that I'd rather not have to go through and refactor and/or not upgrade to react 17.","state":"open","updated_at":"2022-01-13T18:34:35Z","created_at":"2021-02-05T04:12:14Z","creator_user_login":"zediah"}
{"number":20738,"title":"Feature Request: render React *to* a node, not *in* a node.","body":"When using React with other libraries, I'm often forced to deal with DOM nodes directly to change their style or content. However, `ReactDOM.render` will always create content inside the provided DOM node rather than use the given DOM node as the element to mutate.\r\n\r\n```ts\r\n// Suppose this span is given in a function argument for some other frontend library.\r\nconst span = document.createElement('span') \r\n\r\n// I want to mutate this element using React's utilities\r\nReactDOM.render(<span style={{color: 'blue'}}>Hello</span>, span)\r\n```\r\n\r\nSo maybe this functionality will not be called with `ReactDOM.render`, but it would be great if the internal tools for updating DOM nodes were exposed so I can keep using React when interfacing with external libraries.\r\n\r\nThanks!","state":"open","updated_at":"2022-12-31T04:08:54Z","created_at":"2021-02-04T22:54:56Z","creator_user_login":"ccorcos"}
{"number":20716,"title":"Bug: react-test-renderer working with a mix of react renderers","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. yarn install\r\n2. yarn test:watch\r\n\r\nLink to code example: https://github.com/joshuaellis/react-three-testing-library\r\nlook at the `root-issue` branch, it's cleaner and explains the problem a lot easier.\r\n\r\n## The current behaviour\r\nI'm currently working on a testing library for `react-three-fiber`. I have to wrap the passed scene in r3f's `Canvas` component so it can access the hooks in r3f. When I create my rendering instance and call `toJSON()` the response I get is:\r\n```shell\r\n\r\n{\r\n  type: 'div',\r\n  props: {\r\n    style: {\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '100%',\r\n      overflow: 'hidden'\r\n    }\r\n  },\r\n  children: [ { type: 'canvas', props: [Object], children: null } ]\r\n}\r\n```\r\n\r\nI imagine this is expected because the r3f components render at a different root(?). When I call `toTree()` I can begin to drill down to r3f components. Consider this scene:\r\n\r\n```js\r\nrenderScene(\r\n  <mesh position={position}  onPointerDown={() => console.log('hello')}>\r\n    <boxBufferGeometry args={[1, 1, 1]} />\r\n    <meshBasicMaterial />\r\n    <mesh>\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <meshBasicMaterial userData={{\r\n        testId: 'material'\r\n      }} />\r\n    </mesh>\r\n  </mesh>\r\n)\r\n```\r\n\r\nthis renders as expected in and drilling to find the first `mesh` I get the response:\r\n```shell\r\n{\r\n  '$$typeof': Symbol(react.element),\r\n  type: 'mesh',\r\n  key: null,\r\n  ref: null,\r\n  props: {\r\n    position: Vector3 { x: 1, y: 1, z: 1 },\r\n    onPointerDown: [Function: onPointerDown],\r\n    children: [ [Object], [Object], [Object] ]\r\n  },\r\n  _owner: null,\r\n  _store: {}\r\n}\r\n```\r\n\r\nHowever, wrapping the scene above in a component like so:\r\n\r\n```js\r\n  const TestComponent = () => {\r\n    const geomRef = React.useRef<THREE.BoxBufferGeometry>(null!)\r\n    const handlePointerDown = () => {\r\n      geomRef.current.scale(10, 10, 10)\r\n    }\r\n    return (\r\n      <mesh onPointerDown={handlePointerDown} userData={{ testId: 'mesh' }}>\r\n        <boxBufferGeometry ref={geomRef} args={[1, 1, 1]} />\r\n        <meshBasicMaterial />\r\n      </mesh>\r\n    )\r\n  }\r\n\r\n  it(\"should render my component of r3f compoennts\", () => {\r\n    const { scene } = renderScene(\r\n      <TestComponent />\r\n    )\r\n\r\n    expect(scene).toBeTruthy()\r\n  })\r\n```\r\n\r\nand drilling to the same point as before I get the response:\r\n\r\n```shell\r\n{\r\n  '$$typeof': Symbol(react.element),\r\n  type: [Function: TestComponent],\r\n  key: null,\r\n  ref: null,\r\n  props: {},\r\n  _owner: null,\r\n  _store: {}\r\n}\r\n```\r\n\r\nAnd I can't drill any further to find the `mesh` component inside `TestComponent`\r\n\r\n## The expected behaviour\r\n\r\nI'm not sure what the expected behaviour is supposed to be. But my thought is if the first scene can render and I can drill correctly, then `TestComponent` should \"render\" correctly so I can drill into it and find `mesh`. Maybe the first test shouldn't have rendered at all and that's the bug because `react-three-fiber` render's it's own component at a new root?\r\n\r\nIt's probably easier to play around with the repo I've attached.\r\n","state":"open","updated_at":"2021-03-05T10:15:50Z","created_at":"2021-02-02T18:13:21Z","creator_user_login":"joshuaellis"}
{"number":20711,"title":"Feature request: custom error handlers in ReactPartialRenderer","body":"I'd like the option to pass a custom error handler for ReactPartialRenderer. The custom handler should be able to specify whether we:\r\n  - throw and abort the render (basically same as existing behavior)\r\n  - return a substitute element\r\n  - pause the render at the erroring element; the next read() call will resume and effectively retry rendering the element. Return the output buffer up to the point where we paused.\r\n\r\nI have two use cases:\r\n\r\n1. Returning a substitute element could be an alternative to the ErrorBoundary in SSR. I understand why ErrorBoundary doesn't work due to in-order streaming issues (e.g https://github.com/facebook/react/issues/10442#issuecomment-321904824) - we can't replace the entire tree up to the parent, but a custom handler could at least render a placeholder error div or something. Would be useful in dev. \r\n2. Implementing a poor-man's Suspense by pausing the render. More below...\r\n\r\nIt seems like the intended design direction for Suspense is to skip suspended components on the server and render fallbacks. I'd like to instead stream HTML up until hitting an async dependency, and block there until the dependency is resolved. Having an official custom error handler API would let me implement this outside of React.\r\n\r\nI was able to hack together a quick example in this sandbox link: https://codesandbox.io/s/node-js-forked-5lzro?file=/src/index.js\r\n\r\nMost of the complexity comes from catching the error, cleaning up state, and returning the in-flight output buffer contents; the rest of the logic (e.g resuming the stream after promises have been resolved) can be handled in client code outside of React.\r\n\r\nI realize this sounds a lot like the use-case for Suspense. However, it seems like Suspense is mostly client-focused, and many of the problems with concurrency, etc. are avoidable on the server, which doesn't have these problems. Adopting Suspense with a legacy codebase is hard due to concurrent mode restrictions. We can't really take advantage of reduced restrictions on the server, since there's no way to only opt into Suspense on the server. \r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2021-02-26T15:34:26Z","created_at":"2021-02-02T00:24:13Z","creator_user_login":"yepitschunked"}
{"number":20707,"title":"Bug: Iterator as JSX children doesn't work right","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nfunction App() {\r\n    const x = [<h1>a</h1>, <h2>a</h2>].values()\r\n    return <div>{x}</div>\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-playground-forked-jv4p5?fontsize=14&hidenavigation=1&theme=dark\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nNothing rendered.\r\n\r\nReact consumes the iterator twice so the items are gone. The first consume is to validate the JSX, the second consume is collecting them as children.\r\n\r\n## The expected behavior\r\n\r\nRender JSX items in the list.\r\n\r\nWhy I'm considering this case is because I'm investigating how React will work with the ES Number.range proposal.\r\n\r\nIt seems like they can work in this way:\r\n\r\n```js\r\nfunction App() {\r\nreturn <>{Number.range(0, 10).map(x => <h1>{x}</h1>)}</>\r\n}\r\n```\r\n\r\nWithout appending `.toArray()`(iterator helper proposal) to the end. It seems like React does support iterators but used it in the wrong way.","state":"open","updated_at":"2022-01-10T02:15:28Z","created_at":"2021-02-01T03:17:17Z","creator_user_login":"Jack-Works"}
{"number":20701,"title":"Powerful Feature - SSR async fetching for resources via lifecycle method","body":"When doing SSR it's very hard to fetch resources that are dynamic, and while you have been trying to introduce the quite complex suspense API, I had to come with a simpler solution for my use case.\r\n\r\nSimply adding a lifecycle method that executes only during SSR via react-dom, that is async (which makes the whole renderToString) method async indeed; which allows to update the initial state, it's extremely simple, and it works (I have tested it).\r\n\r\nLet me make an example to illustrate this further suppose we have a component named `ResourceFetcher` which does what it claims and fetches a resource, now let's suppose our react developer simply would use it like this.\r\n\r\n```\r\n<ResourceFetcher resource=\"data.json\">\r\n  {(data) => (\r\n    <ResourceFetcher resource={data.secondaryResource}>\r\n       {(secondaryData) => (\r\n          <div>HERE I DISPLAY THE DATA</div>\r\n       )}\r\n    </ResourceFetcher>\r\n  )}\r\n</ResourceFetcher>\r\n```\r\n\r\nImagine the nightmare that it would be to setup this with SSR, specially when the resource fetcher can be used arbitrarily, we would have to duplicate the logic to collect the data when we know we are at the right url where that would be rendered; it can simply be quite hard and it has to be done with each page, and with routes on the mix, dynamic paths, query strings that affect what is required, the server side logic becomes overwhelming.\r\n\r\nNow let's imagine we now have a `<ResolverContext>` that sits above all our app, this provides an instance into our resource fetcher that specifies how it is to resolve using the resource fetcher, it also contains a cache that the resource fetcher can use.\r\n\r\nSo what the resouce fetcher is doing is on the `constructor` it will try to load a value from the cache and on `componentDidMount` if it is not loaded (because it was not found in the cache) it will run a fetch request.\r\n\r\nNow imagine we have a method called `beforeServerSideRender` that is async and executes right before render on server side only, and it prepares the state on this case, on constructor our cache is indeed empty, but then `beforeServerSideRender` triggers, and we can \"resolve\" these resources that we need, in the case of the server side, the resolver is not fetch, it simply reads from disk; the server can then have a form of collector, and sets the variable `window.CACHE = ` so that the client can setup its initial cache in the context.\r\n\r\nThe result is that you have a very easy to setup SSR that can work with basically anything that requires no configuration once your environment is dialed, I managed to create extremely rich dinamically loaded SSR pages with that method with very little fuzz, I don't need to make a list per page of what I need, it is just done on the fly.\r\n\r\nWhat I did was the following:\r\n\r\n```\r\nreact-dom/src/server/ReactDOMNodeStreamRenderer.js\r\n\r\n-  _read(size) {\r\n+  async _read(size) {\r\n\r\n-      this.push(this.partialRenderer.read(size));\r\n+      this.push(await this.partialRenderer.read(size));\r\n\r\nreact-dom/src/server/ReactDOMStringRenderer.js\r\n\r\n-export function renderToString(element, options?: ServerOptions) {\r\n+export async function renderToString(element, options?: ServerOptions) {\r\n\r\n-    const markup = renderer.read(Infinity);\r\n+    const markup = await renderer.read(Infinity);\r\n\r\n-export function renderToStaticMarkup(element, options?: ServerOptions) {\r\n+export async function renderToStaticMarkup(element, options?: ServerOptions) {\r\n\r\n-    const markup = renderer.read(Infinity);\r\n+    const markup = await renderer.read(Infinity);\r\n\r\nreact-dom/src/server/ReactPartialRenderer.js\r\n\r\n-function resolve(\r\n+async function resolve(\r\n\r\n-    processChild(element, Component);\r\n+    await processChild(element, Component);\r\n\r\n-  function processChild(element, Component) {\r\n+  async function processChild(element, Component) {\r\n\r\n+\r\n+    if (inst.beforeServerSideRender) {\r\n+      await inst.beforeServerSideRender();\r\n+    }\r\n     child = inst.render();\r\n\r\n-  read(bytes: number): string | null {\r\n+  async read(bytes: number): string | null {\r\n\r\n-          outBuffer += this.render(child, frame.context, frame.domNamespace);\r\n+          outBuffer += await this.render(child, frame.context, frame.domNamespace);\r\n\r\n-  render(\r\n+  async render(\r\n\r\n-      ({child: nextChild, context} = resolve(child, context, this.threadID));\r\n+      ({child: nextChild, context} = await resolve(child, context, this.threadID));\r\n```\r\n\r\nAnd that was it, with that I had given superpowers to SSR, no longer I needed lists to specify what resources I needed ahead of time, I could just get that when react was rendering; it did not affect anything else than the server side if they had that lifecycle function, but everything worked normally.\r\n\r\nNot just that but with this method, if the SSR crashed for some reason, it still worked!... I'd just be served the default version with an empty cache since the collection failed, and the resources will be fetched on mount; just that the initial page will be, without proper SSR, but no fuzz, it still worked; so it is crash resistant.\r\n\r\nThere seem to be a problem with the development mode, it works but doesn't take much pressure as it cannot overlap renders in the async mode, but works in production builds. This is why I make this issue and not a PR.\r\n\r\nJust that simple lifecycle function adds way too much power and it's a very simple change, I think it should be implemented, specially because we don't have suspense, and some people don't feel comfortable with the idea of suspense; this solution is extremely simple, but it works.\r\n\r\nhttps://www.npmjs.com/package/@onzag/react-dom","state":"open","updated_at":"2021-02-15T21:47:59Z","created_at":"2021-01-31T11:12:05Z","creator_user_login":"onzag"}
{"number":20700,"title":"Bug: react-hooks/rules-of-hooks should support compound component pattern","body":"this is a sample issue :\r\n\r\n```\r\n150:20  error    React Hook \"useDispatch\" is called in function \"PageHome.Layout\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter  react-hooks/rules-of-hooks\r\n```\r\n\r\ni think maybe hook rule can support compound component pattern","state":"open","updated_at":"2021-04-05T22:37:20Z","created_at":"2021-01-31T09:58:08Z","creator_user_login":"wildfrontend"}
{"number":20684,"title":"DevTools: Re-think errors/warnings that do not have a 1:1 component mapping","body":"#20463 added an option to display errors and warnings related to React components directly within the DevTools Components tree. The mechanism for associating an error or warning with a React component was to check if any Fiber was currently being rendered.\r\n\r\nHowever this doesn't work for all types of warnings. For example, many [strict mode warnings](https://reactjs.org/docs/strict-mode.html) are not logged during render (per component), but instead are coalesced and logged as a group when the render work is committed. This was done to reduce the number of warnings React logged to the console. A side effect of this though is that DevTools isn't able to associate the warning with any components and so it does not get surfaced in the UI.\r\n\r\nWe should come up with a design that is able to handle errors/warnings that have a 1:many component mapping (like strict mode), as well as ones that might not even make sense to show in the Components tree at all (like hydration errors).","state":"open","updated_at":"2021-01-28T21:46:10Z","created_at":"2021-01-28T16:42:13Z","creator_user_login":"bvaughn"}
{"number":20682,"title":"Bug: <img> within a <picture> is being requested twice in Firefox","body":"When I have an `<img>` within a `<picture>` element, e.g for implementing [responsive images](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture), then Firefox requests that image file twice. Some of the times the first request to the image will stop with an `NS_BINDING_ABORTED`, it'll always return receive 0 bytes, and the server will log a 499 response (client closed request) or a 200. Removing the `<picture>` element and simply leaving `<img>` in the JSX, solves the problem, but of course I do need the `<picture>`. This happens in Firefox 84 and 85 (private mode, no extensions), and does not happen in Chrome.\r\n\r\nAn important detail is that this only happens when rendering through react, either in dev mode or build mode (in create-react-app). If I save the generated HTML and render it without any JavaScript, then the double request never happens again.\r\n\r\nReact version: 17.0.1 (happens in 16 too)\r\n\r\nJS:\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nReactDOM.render(\r\n  <picture>\r\n    <img src=\"https://via.placeholder.com/300x300?text=JPG\" alt=\"JPG\" width=\"300\" height=\"300\" />\r\n  </picture>,\r\n  window.document.getElementById(\"root\")\r\n);\r\n```\r\n\r\nHTML:\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n  </body>\r\n</html>\r\n```\r\n\r\nLive example: https://luues.csb.app/\r\n\r\nResult screenshot of network tab:\r\n![<image> within a <picture> is being requested twice in Firefox](https://i.imgur.com/1sa5Vmx.png \"<image> within a <picture> is being requested twice in Firefox\")\r\n\r\nIn case it helps, note that in the following example, the first (broken) request will be for the jpg image, and then another for the correct webp one:\r\n```js\r\n<picture>\r\n    <source srcSet=\"https://via.placeholder.com/300x300?text=WEBP\" type=\"image/webp\" />\r\n    <img src=\"https://via.placeholder.com/300x300?text=JPG\" alt=\"JPG\" width=\"300\" height=\"300\" />\r\n</picture>\r\n```","state":"open","updated_at":"2023-07-27T13:27:17Z","created_at":"2021-01-28T09:06:06Z","creator_user_login":"cherouvim"}
{"number":20661,"title":"propagateContextChange visits all child fibers","body":"`propagateContextChange` in the current context implementation visits all child fibers rather than fibers that have dependency on the context.\r\nIn my case, there may be thousands of child components and 99% of them don't have dependency on the context, which causes `propagateContextChange` spends a lot of scripting time but eventually does 'nothing'.","state":"open","updated_at":"2022-01-09T00:43:18Z","created_at":"2021-01-26T09:37:02Z","creator_user_login":"intellild"}
{"number":20646,"title":"[Experiment] Context Selectors","body":"## Based on #20890 \r\n\r\n**This is not a final API. It's meant for internal experimentation only. If we land this feature in our stable release channel, it will likely differ from the version presented here.**\r\n\r\nThis implements `unstable_useContextSelector` behind a feature flag. It's based on [RFC 119](https://github.com/reactjs/rfcs/pull/119) and [RFC 118](https://github.com/reactjs/rfcs/pull/118) by @gnoff.\r\n\r\nUsage:\r\n\r\n```js\r\nconst context = useContextSelector(Context, c => c.selectedField);\r\n```\r\n\r\nThe key feature is that if the selected value does not change between renders, the component will bail out of rendering its children, a la `memo`, `PureComponent`, or the `useState` bailout mechanism. (Unless some other state, props, or context was updated in the same render.)\r\n\r\nOne difference from the RFC is that it does not return the selected value. It returns the full context object. This serves a few purposes: it discourages you from creating any new objects or derived values inside the selector, because it'll get thrown out regardless. Instead, all the selector will do is return a subfield. Then you can compute the derived value inside the component, and if needed, you memoize that derived value with `useMemo`.\r\n\r\nIf all the selectors do is access a subfield, they're (theoretically) fast enough that we can call them during the propagation scan and bail out really early, without having to visit the component during the render phase.\r\n\r\nAnother benefit is that it's API compatible with `useContext`. So we can put it behind a flag that falls back to regular `useContext`.\r\n\r\nThe longer term vision is that these optimizations (in addition to other memoization checks, like `useMemo` and `useCallback`) are inserted automatically by a compiler. So you would write code like this:\r\n\r\n```js\r\nconst {a, b} = useContext(Context);\r\nconst derived = computeDerived(a, b);\r\n```\r\n\r\nand it would get converted to something like this:\r\n\r\n```js\r\nconst {a} = useContextSelector(Context, context => context.a);\r\nconst {b} = useContextSelector(Context, context => context.b);\r\nconst derived = useMemo(() => computeDerived(a, b), [a, b]);\r\n```\r\n\r\n(Though not this exactly. Some lower level compiler output target.)","state":"open","updated_at":"2021-07-19T16:16:01Z","created_at":"2021-01-23T06:00:08Z","creator_user_login":"acdlite"}
{"number":20638,"title":"Bug: no way to reset a react.lazy cache","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI use React.lazy to load component module from server that can change (file content con be different).\r\nWhen I mount the component, it well load the module and cache it for next mountings.\r\n\r\nBut I need to found a way to reset the cache to be able to load again the module after some time. Is there a way for this ? Is the _state of the lazy elementType accessible from outside ? Or a public method ?\r\n\r\nReact version: 16.14\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n","state":"open","updated_at":"2021-01-21T20:11:18Z","created_at":"2021-01-21T20:11:18Z","creator_user_login":"paztis"}
{"number":20636,"title":"Bug: `react-dom@17.x` event delegation issue","body":"This is pretty much a duplicate of https://github.com/tannerlinsley/react-table/issues/3002\r\n\r\nReact version: 17.x\r\n\r\n**Bug description**\r\nAs i was developing i forgot to memoize some mocked data before passing it to react-table's `useTable` hook and encountered an interesting bug, which led me down a rabbit hole instead of actually seeing the problem (missed useMemo on my data)\r\n\r\nIt only happens when you use `useTable` combined with `useSortBy`, and only with `react-dom@17.x` (event delegation rewrite release), e.g `react-dom@16.x` works fine.\r\n\r\nIt is hard to put to words, but i have attached a minimal example (codesandbox) and will try my best to explain. In the codesandbox i have three components:\r\n- `Modal` which has a `useEffect`  that adds a click event listener to `document`. This listener acts like a backdrop (where if i click the backdrop the \"modal\" should close. Rendered by App.\r\n- `Table` which is the component that calls `useTable` (but doesn't use anything it returns) - also rendered by App.\r\n- `App` which is the main application and controls the state that decides whether `Modal` is rendered or not. Here i actively \"forgot\" to use `useMemo` on my data.\r\n\r\nWhat happens is that when you click \"Open Modal\" using `react-dom@17.x` the callback to `document.addEventListener('click', ..)` is called, but this element shouldn't have been rendered yet at the point when the click event from the button was fired. The result is that you never, or very briefly, see the \"modal\". Doing the same using `react-dom@16.x` (you can change in the sandbox) results in the expected behavior of the \"modal\" actually showing.\r\n\r\n**Codesandbox example**\r\nhttps://codesandbox.io/s/react-table-react-17-5nw4d?file=/src/App.js\r\n\r\n**Steps To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n1. Go to https://codesandbox.io/s/react-table-react-17-5nw4d?file=/src/App.js\r\n2. See `react-dom` version is `17.0.1`\r\n3. Press \"Open Modal\" button\r\n4. Nothing happens\r\n5. Change version of `react-dom` to 16.14.0 for example.\r\n6. Press \"Open Modal\" button\r\n7. See the modal get opened as expected.\r\n\r\n**Expected behavior**\r\nObviously i can't expect the react-table library to work properly, but i would not expect it to have the weird observed undefined behavior. I also would not expect this to have different behaviors across `react-dom` versions, even if it is a major release.\r\n\r\n**Additional context**\r\nI am _very_ curious to what is actually going on and whether this is a bug of `react-dom` or `react-table` or a combination of both. I've been debugging to try and find the root cause, but unfortunately i'm not very familiar with the code of either repos and i believe there are things happening asynchronously which is very hard for me to follow.\r\n\r\nIt would be nice if anyone wanted to help me debug this issue, so we can get to the root of the problem and perhaps have a more minimal example.","state":"open","updated_at":"2022-03-22T09:48:47Z","created_at":"2021-01-21T17:36:41Z","creator_user_login":"linde12"}
{"number":20631,"title":"Bug: ComponentDidCatch will not catch the same child component twice","body":"We have a container element which is used to render children of different types. These children are specified by the user and can contain errors or bugs, we, therefore, have a fallback hierarchy which will fall back to the next child in a specified list and attempts to render that. This works fine as a solution until a user attempts to use the same component twice in a different configuration the second time which also fails. The parent component cannot catch the same child erroring twice but will catch multiple different children failing one after the other.\r\n\r\nReact version: At least v16.14.0+,\r\n\r\nReproduced on v16.14.0 and v17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Main renders the child component.\r\n2. Child component throws an error.\r\n3. Main catches that error and attempts to render child component again\r\n4. Child throws another error.\r\n5. Main fails to catch the error a second time.\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/busy-waterfall-1u0fc?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nParent component is only capable of catching the same child once.\r\n\r\n## The expected behavior\r\n\r\nParent component would catch child component however many times it throws an error occurs.\r\n\r\nI'm aware that we may well not be using the componentDidCatch method properly in this instance, but it worked as a really easy way to provide this fallback behaviour.","state":"open","updated_at":"2021-01-20T18:24:38Z","created_at":"2021-01-20T17:32:05Z","creator_user_login":"overly-engineered"}
{"number":20628,"title":"[react-devtools-inline] Same-origin domain element inspection problem","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17\r\n\r\nI am working on integrating react-devtools in Cypress for component testing. In cypress all iframes we have are same-origin, so I choose the proposed [same-origin iframe configuration](https://github.com/facebook/react/tree/master/packages/react-devtools-inline#configuring-a-same-origin-iframe). \r\n\r\n## Steps To Reproduce\r\n\r\nDue to its pretty hard to get the exact time point when the iframe is ready but react code not executed it is easier to just run cypress with devtools for reproduction \r\n\r\n1.`git clone git://github.com/cypress-io/cypress.git`\r\n2. `git checkout 725e335e246a61b5bd5e2d19e0c70776d5ee2324`\r\n3. `yarn`\r\n4. `cd npm/react` \r\n5. `yarn cy:open`\r\n\r\n\r\n## The current behavior\r\n\r\nWhen iframe is **same origin** and devtools initialization happens in the top window element highlighting is completely broken when initialized not inside the iframe. \r\n![image](https://user-images.githubusercontent.com/16926049/105191541-e0f2ae00-5b3f-11eb-8dba-1a719cca58d2.png)\r\n\r\nIt happens because the [overlay tooltip](https://github.com/facebook/react/blob/3e94bce765d355d74f6a60feb4addb6d196e3482/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L87) calculate node position and render the tooltip itself in the outer window (not inside the iframe). \r\n\r\n![Screenshot 2021-01-20 at 16 55 19](https://user-images.githubusercontent.com/16926049/105192025-62e2d700-5b40-11eb-96f1-c3a9a5dc2ec4.png)\r\n\r\nUPD: \r\nAs you can see here OverlayTip class gets incorrect document (root) in the constructor\r\n![image](https://user-images.githubusercontent.com/16926049/105196109-f669d700-5b43-11eb-871e-c4d174f4eff1.png)\r\n\r\n## Workaround\r\n\r\nAnd so I noticed a workaround to manually pass `window.__REACT_DEVTOOLS_TARGET_WINDOW__ = contentWindow`, which is not documented solution and must be at least mentioned in the readme\r\n\r\n## The expected behavior\r\n\r\nFor reference, here is the correct solution where used sandbox version and tooltips rendered inside the iframe (codesandbox): \r\n\r\n![Screenshot 2021-01-20 at 16 58 11](https://user-images.githubusercontent.com/16926049/105192498-d5ec4d80-5b40-11eb-9894-b04a6b104073.png)\r\n","state":"open","updated_at":"2022-04-13T23:51:17Z","created_at":"2021-01-20T15:16:18Z","creator_user_login":"dmtrKovalenko"}
{"number":20613,"title":"Bug: devtools may crash when custom hook has the name \"useState\"","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. clone repo: https://github.com/avkonst/react-devtools-crash-demo\r\n2. yarn start\r\n3. open the browser of the started app\r\n4. open devtools\r\n5. click Counter component in the components tab of the development tools\r\n6. Watch it not loading anything and unhandled exception dumped to the console log\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/avkonst/react-devtools-crash-demo\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nDevtools crash when I click on the following component in the development tools:\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\nfunction useState() {\r\n    React.useState(0);\r\n    React.useEffect(() => () => {});\r\n}\r\n\r\nfunction Counter() {\r\n\tuseState();\r\n\tReact.useState(0);\r\n\treturn <div>Open React Dev Tools Components panel,\r\n\t\tclick on Counter component and\r\n\t\tobserve the crash in the logging console.</div>;\r\n}\r\n\r\nexport default Counter;\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo crash and the development tools show hooks used.\r\n","state":"open","updated_at":"2022-07-16T05:24:33Z","created_at":"2021-01-19T01:50:57Z","creator_user_login":"avkonst"}
{"number":20580,"title":"Bug: [eslint-plugin-react-hooks]: exhaustive-deps not triggered if namespace is not 'React'","body":"When using `eslint-plugin-react-hooks`, and more precisely `react-hooks/exhaustive-deps`, hooks are not picked up if they are prefixed by a namespace that is _not_ React.\r\n\r\nThis happened in a project where I consolidated all my hooks (React's + custom from third-party libraries + my own custom hooks) into a single namespace that I can import everywhere.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Configure ESLint to use `eslint-plugin-react-hooks`\r\n2. Re-export React hooks under a new namespace\r\n3. Create a component using `useEffect` through this namespace, with a missing dependency\r\n\r\nLink to code example: https://codesandbox.io/s/react-hooks-namespace-9fu76\r\n\r\n## The current behavior\r\n\r\nTaking the following component:\r\n\r\n```\r\nimport Hooks from './hooks'\r\n\r\nfunction MyComponent(props) {\r\n  const [state] = Hooks.useState(true);\r\n\r\n  Hooks.useEffect(() => {\r\n    console.log(state);\r\n  }, []);\r\n}\r\n```\r\n\r\n`eslint-plugin-react-hooks` won't trigger the `react-hooks/exhaustive-deps` for the missing `state` dependency. Looking at `eslint-plugin-react-hooks` source code, when accessed through a namespace, there is a hard-coded check for the namespace to be `\"React\"`.\r\n\r\nThe same problem occurs for `useState` hooks, where setter is not detected as invariant if `useState` is called from another namespace.\r\n\r\n## The expected behavior\r\n\r\n`react-hooks/exhaustive-deps` should not care about the namespace. If the hook name matches, then it should trigger the rule. This would be more consistent, as _destructuring from the namespace_ makes the rules work again anyway, as can be seen in the CodeSandbox.\r\n\r\nIf namespace checks have been added to protect against false-positives, maybe add an option such as `additionalHooksNamespace`  allowing users to choose their own namespace for hooks.","state":"open","updated_at":"2022-04-29T21:32:07Z","created_at":"2021-01-13T10:27:16Z","creator_user_login":"jvdsande"}
{"number":20521,"title":"add ignoreThisDependency option to exhaustive-deps","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\nI added `ignoreThisDependency` option to the ESLint rule `exhaustive-deps`.\r\nIt's like my suggestion in https://github.com/facebook/react/issues/16265#issuecomment-685723348 .\r\n\r\nThis helps people who doesn't prefer destructuring.\r\nYou can find such people at #16265 .\r\n\r\nIn my case, our project uses React Redux `connect` like below.\r\n```js\r\nimport { doSomething } from 'foobar';\r\n\r\nconst mapDispatchToProps = { doSomething };\r\n\r\n// ...\r\n\r\nexport default connect(null, mapDispatchToProps)(MyComponent)\r\n```\r\nDestructuring `props` conflicts with `eslint no-shadow`.\r\nAnd I don't want to establish naming convention for auxiliary variables to pass the linter.\r\n\r\n## Test Plan\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n- Run tests (I added some new valid cases and a invalid case)\r\n- Installed in my local projects\r\n\r\n<details><summary>Screen shots</summary>\r\n\r\nignoreThisDependency = 'never'\r\n<img width=\"435\" alt=\"Screen Shot 2020-12-30 at 16 15 56\" src=\"https://user-images.githubusercontent.com/20365512/103336064-4f50cd00-4aba-11eb-898f-07d535369d89.png\">\r\n\r\n\r\nignoreThisDependency = 'props'\r\n<img width=\"463\" alt=\"Screen Shot 2020-12-30 at 16 16 20\" src=\"https://user-images.githubusercontent.com/20365512/103336083-5d9ee900-4aba-11eb-948e-e35a8eae9dc7.png\">\r\n\r\n</details>","state":"open","updated_at":"2022-11-15T11:44:00Z","created_at":"2020-12-30T07:36:21Z","creator_user_login":"seiyab"}
{"number":20503,"title":"React needs some way to fuzz setState timing/usage","body":"It seems kinda obvious to me now that I think about it. One of the more common problems people have with setState is stale refs or other timing and concurrency mistakes. For native code, we have things like Application Verifier's concurrency fuzzer, which can randomly delay some APIs to see if user code correctly handle uncommon timing issues.\r\n\r\n\r\nSo, why don't we have something like that for React APIs like setState? Randomly delay them for a set time? It looks like there's some internal fuzzing to test React's own correctness, but I don't see anything that I could enable to fuzz my React code.","state":"open","updated_at":"2020-12-23T00:10:15Z","created_at":"2020-12-23T00:10:15Z","creator_user_login":"ariccio"}
{"number":20497,"title":"Bug: CSS variables can't be a space character","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v16/v17\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n2. Notice the \"should be black border\" has a pink border\r\n3. Dangerously setting inner HTML works because it doesn't go through reacts `trim()` flow\r\n4. I've tracked the suspect code to here https://github.com/facebook/react/blob/6cbb9394d1474e3a728b49dc7f3a11d61a421ce3/packages/react-dom/src/shared/dangerousStyleValue.js#L44\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nCSS variables have their value trimmed - resulting in `' '` become `''` which then removes the CSS variable from the browser.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850783-52bad780-446e-11eb-8cd3-222061febb48.png)\r\n\r\n## The expected behavior\r\n\r\nThe `' '` value should not be trimmed.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850909-944b8280-446e-11eb-9a88-9660469faf3e.png)\r\n\r\nOne potential option is to, for any custom properties that have a space value, don't trim.\r\n\r\n```js\r\nif (isCustomProperty && value === ' ') {\r\n   return value;\r\n}\r\n\r\nreturn ('' + value).trim();\r\n```\r\n\r\nI'm happy to do the bug fix. I would also love for this to get released on v16.\r\n\r\n---\r\n\r\nFound a work around:\r\n\r\nhttps://codesandbox.io/s/empty-css-value-forked-g5jud?file=/src/App.js\r\n\r\n```js\r\nstyle={{ \"--border-color\": \"var(--, )\" }}\r\n```","state":"open","updated_at":"2022-10-12T13:44:55Z","created_at":"2020-12-22T04:56:35Z","creator_user_login":"itsdouges"}
{"number":20494,"title":"Replace DevTools mutable Suspense cache with newer Cache API","body":"Follow up to PR #20463 and 5d10e41\r\n\r\nIt would be nice to replace the outdated cache API currently used in DevTools with a newer one that's compatible with APIs like `useTransition`. This would allow DevTools to better handle UX like clearing errors/warnings for the inspected element without needing to immediately poll for new data. (Currently it's either that or show an awkward second or two delay after you click the button before anything appears to happen.)","state":"open","updated_at":"2020-12-21T15:59:41Z","created_at":"2020-12-21T15:45:24Z","creator_user_login":"bvaughn"}
{"number":20492,"title":"Bug: BigInt does not get toString()'d when rendered","body":"<div>{1n}</div> should render 1. Instead it renders ''.  \r\n\r\nIt looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26. \r\n\r\nHappy to raise a PR or take guidance on a better approach.\r\n\r\nReact version: all\r\n\r\n## Steps To Reproduce\r\nLink to code example: https://codepen.io/boyne/pen/vYXJWVr\r\n\r\n\r\n## The current behavior\r\nRenders \"\"\r\n\r\n\r\n## The expected behavior\r\nRenders 1\r\n","state":"open","updated_at":"2022-05-18T13:59:00Z","created_at":"2020-12-21T11:06:39Z","creator_user_login":"andyboyne"}
{"number":20491,"title":"New JSX runtime advice for package authors?","body":"I'm wondering if you have any advice around using the new JSX runtime in packages with `react` as a peer dependency?\r\n\r\nFor compatibility reasons it seems like packages shouldn’t use the JSX runtime (at least not yet) because then the package would only be compatible with versions of React that include the new JSX runtime (but in time this compatibility reason will fade).\r\n\r\nIf a package did use the new JSX runtime, I think it could only be used in the ESM and CJS builds. The UMD build would still need to use `createElement` as the UMD version of React doesn't include the JSX runtime.\r\n\r\nCurious if you could provide some insight on the plan for the JSX runtime in peer dependency packages? Will the JSX runtime eventually be part of the React UMD build? Does tooling need to support using the JSX runtime in ESM and CJS builds, while always using `createElement` in the UMD build? Thanks.\r\n\r\nI ran into this issue when creating [Rollpkg](https://github.com/rafgraph/rollpkg), a zero config build tool to create packages with Rollup and TypeScript.\r\n\r\nThanks for all your work on React, I've really enjoyed using it the past several years!","state":"open","updated_at":"2023-03-15T15:37:28Z","created_at":"2020-12-20T20:03:05Z","creator_user_login":"rafgraph"}
{"number":20483,"title":"Bug: React onMouseEnter, onMouseOver and onMouseLeave not firing as expected (Chrome)","body":"React is not firing onMouseLeave, onMouseOver, onMouseEnter events on images.(Chrome)\r\n\r\nReact version:\r\n17.0.1\r\n\r\nCode example: \r\n![carbon](https://user-images.githubusercontent.com/67759816/102604550-a2269e00-4124-11eb-8641-dbb3c0305d7d.png)\r\n\r\n\r\n## The current behavior\r\nOnly changing the state when clicked\r\n\r\n## The expected behavior\r\nChanging the state when hovered","state":"open","updated_at":"2023-08-09T08:52:17Z","created_at":"2020-12-18T10:35:10Z","creator_user_login":"tseveenganbold"}
{"number":20476,"title":"Bug: onChange event is fired twice when replacing selected text","body":"React version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add an `onChange` handler to an `input[type=text]` field, logging the `event.target.value`\r\n2. Write a letter in the input (see that it fires an event)\r\n3. Select all text\r\n4. Type a new letter, thus replacing the previous letter\r\n5. This will trigger two events on some device setups, one with blank input, and one with the new letter.\r\n\r\n**Link to code example**: https://codesandbox.io/s/react-input-event-twice-4dh59\r\n\r\n## The current behavior\r\nOn some devices the replacement of a selection fires twice, first with empty input and second with the typed letter.\r\n\r\n![mobile-chrome-onchange](https://user-images.githubusercontent.com/765759/102398261-58806b00-3fdf-11eb-99bb-1290abe54af0.jpg)\r\n\r\n## The expected behavior\r\nOnly one input event should be fired, with the new letter.\r\n\r\n![Screenshot 2020-12-16 at 20 40 58](https://user-images.githubusercontent.com/765759/102398307-659d5a00-3fdf-11eb-8839-c1ea5a85e0d9.png)\r\n\r\n## Devices/browsers tested:\r\n**Two events (bug):**\r\n* OnePlus 5, Android OxygenOS 9.0.9, Chrome 87.0.4280.101\r\n* OnePlus 3T, Android OxygenOS 9.0.6, Chrome 87.0.4280.101\r\n\r\n**One events (working as intended):**\r\n* MacOS 10.14.6, Firefox 83.0\r\n* MacOS 10.14.6, Chrome 87.0.4280.88\r\n* iPhone X, iOS 14.2, Chrome 87.0.4280.77\r\n* Pixel 2, Android 8.0.0, Chrome 87.0.4280.101 (however this test person experienced the bug earlier, but might have been an in app browser somewhere)\r\n\r\n## Related:\r\n* https://github.com/facebook/react/issues/8531 IE10 triggers onChange twice when replacing a text selection","state":"open","updated_at":"2022-03-29T23:15:58Z","created_at":"2020-12-16T20:02:16Z","creator_user_login":"perenstrom"}
{"number":20446,"title":"Using dangerouslySetInnerHTML with <Script> Tag?","body":"Backend return an html type string and I want render in react through\r\n\r\n<div dangerouslySetInnerHTML ={{__html : html}}></div>\r\n\r\nhowever, html contains the JS code that dynamically add data to <Table> Tag and it does not render any data in my page\r\nthe table is empty\r\n\r\nHow could solve this problem?\r\n\r\nThanks for any ideas\r\n\r\n","state":"open","updated_at":"2022-01-09T08:34:47Z","created_at":"2020-12-12T02:57:21Z","creator_user_login":"iwantHD"}
{"number":20432,"title":"exhaustive-deps: Add passing test for generic type arguments","body":"\r\n## Summary\r\n\r\nAdds a test for https://github.com/facebook/react/issues/20395\r\n\r\n## Test Plan\r\n\r\n- [x] CI green","state":"open","updated_at":"2022-10-02T13:02:18Z","created_at":"2020-12-11T06:35:09Z","creator_user_login":"eps1lon"}
{"number":20377,"title":"CRA: Fast Refresh breaks embedded DevTools backend","body":"`TypeError: undefined is not a function (near '...e.sub...')\r\n(anonymous function)\r\nsrc/backend/index.js:26\r\n  23 |   // DevTools didn't get injected into this page (maybe b'c of the contentType).\r\n  24 |   return () => {};\r\n  25 | }\r\n> 26 | const subs = [\r\n     | ^  27 |   hook.sub(\r\n  28 |     'renderer-attached',\r\n  29 |     ({\r\nView compiled\r\n(anonymous function)\r\nsrc/backend.js:179\r\n  176 |   hook.emit('shutdown');\r\n  177 | });\r\n  178 | \r\n> 179 | initBackend(hook, agent, window);\r\n      | ^  180 | \r\n  181 | // Setup React Native style editor if the environment supports it.\r\n  182 | if (resolveRNStyle != null || hook.resolveRNStyle != null) {`\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. create-react-app\r\n2. yarn add react-devtools\r\n3. in index.js add import 'react-devtools' on first line\r\n4. start react-devtools\r\n4. start create-react-app devserver\r\n6. go to localhost:3000\r\n7. crash\r\n\r\n\r\nLink to code example:\r\n\r\nadd react-devtools on first line of vanilla 'create-react-app'\r\n\r\n## The current behavior\r\n\r\n<img width=\"941\" alt=\"devtools\" src=\"https://user-images.githubusercontent.com/5372632/101188389-f24a2e80-3655-11eb-9a6b-239ac8742eb1.png\">\r\n\r\n## The expected behavior\r\n\r\nDebug-Session\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-05-06T15:21:00Z","created_at":"2020-12-04T16:27:29Z","creator_user_login":"sonium0"}
{"number":20368,"title":"Bug: Memory Leak when rendering arrays","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nI created a React hook called useMemoryLeaksDebugger using the WeakRef API to find memory leaks.\r\nI found many real memory leaks on my app, but there was one memory leak that was really hard to find, and I think it is a bug in React. \r\n\r\nReact version: v17 and v16\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the code sandbox https://codesandbox.io/s/cool-kalam-77v5m?file=/src/App.js\r\n2. Click \"Add \" button to render the list\r\n3. Click \"Remove\" button to remove the list\r\n4. Force Garbage Collection in Chrome Memory Dev tools (click the trash icon)\r\n5. Run in the console \"memoryLeaksDebugger.check()\"\r\n\r\n![react_bug](https://user-images.githubusercontent.com/5487699/100877970-8ca04b80-3477-11eb-9e2f-c943c5b4077d.gif)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/cool-kalam-77v5m?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nAny child of a component that is rendered inside a `.map` stays alive in memory when the components are unmounted.\r\n\r\n## The expected behavior\r\nNo components should stay in memory when they are unmounted.\r\n","state":"open","updated_at":"2022-01-17T14:15:41Z","created_at":"2020-12-02T13:22:49Z","creator_user_login":"angeloocana"}
{"number":20359,"title":"TypeError: Cannot read property 'setExtraStackFrame' of undefined","body":"I try Upgrade to the New JSX Transform in my project.(According to the official tutorial.)\r\nI used production react  in development  environment，I see this error.\r\nbut, if used development react in  development  environment， every thing is ok.\r\n\r\nReact version:\r\n17.0.1\r\n## The current behavior\r\nTypeError: Cannot read property 'setExtraStackFrame' of undefined\r\n\r\n## Additional information\r\n  react.production.min.js:22 Uncaught TypeError: Cannot read property 'setExtraStackFrame' of undefined\r\n    at setCurrentlyValidatingElement (react-jsx-runtime.development.js:574)\r\n    at checkPropTypes (react-jsx-runtime.development.js:618)\r\n    at validatePropTypes (react-jsx-runtime.development.js:1072)\r\n    at jsxWithValidation (react-jsx-runtime.development.js:1192)\r\n    at jsxWithValidationDynamic (react-jsx-runtime.development.js:1209)\r\n    at PartPage (PartPage.js:161)\r\n    at Le (react-dom.production.min.js:100)\r\n    at Re (react-dom.production.min.js:113)\r\n    at Pj (react-dom.production.min.js:232)\r\n    at di (react-dom.production.min.js:168)","state":"open","updated_at":"2023-07-19T14:20:44Z","created_at":"2020-12-01T09:11:09Z","creator_user_login":"IMMC"}
{"number":20349,"title":"The interface(Children.map) has no iteration object returned by the recursive call function","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n## React version: v17.0.0-alpha.0\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nimport {React, Children} from 'react'\r\nexport function(){\r\n\r\n  const iterationObj = new Set();\r\n\r\n  const result = Children.map('some text', () => {\r\n\r\n    iterationObj.add('one element');\r\n    iterationObj.add('two element');\r\n    return iterationObj;\r\n\r\n  })\r\n\r\n  // The iteration object is returned, and there are no child elements in the flat iteration object\r\n  console.log('result', result)  // [Set(2)]\r\n\r\n  return <div>placeholder</div>\r\n\r\n}\r\n```\r\n## Expect\r\n```JS\r\nconsole.log(result) // ['one element', 'two element']\r\n```\r\n![image](https://user-images.githubusercontent.com/23120174/100535784-eb3aaf00-3256-11eb-8c65-de1b08f12f15.png)\r\n\r\n","state":"open","updated_at":"2020-11-29T07:26:27Z","created_at":"2020-11-29T07:26:27Z","creator_user_login":"tsinglemon"}
{"number":20332,"title":"Bug: React's batching makes state comparison checks unreliable","body":"It seems that in some situations React's batching makes comparison to change in state unreliable.\r\nIn the provided example, focus/blur handlers produce different outcomes:\r\n- when triggered via **tabbing**\r\n- vs. when **manually focusing on keydown**\r\n\r\nReact version: 17.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the provided codesandbox\r\n2. Focus the 2 inputs back and forth by tabbing\r\n3. Note the `onChange` logs correspond to the updates and are in sync with the UI\r\n4. Now instead, focus an input then press the **down arrow** to programmatically focus back and forth between the 2 inputs\r\n5. Note the `onChange` logs are now wrong and inconsistent with the UI (initially `true` and then `false` forever)\r\n\r\nLink to code example: https://codesandbox.io/s/react-staleness-ishfn?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\n### When tabbing through this is the output I get:\r\n\r\nonChange `true`\r\nonChange `false`\r\nonChange `true`\r\nonChange `false`\r\nonChange `true`\r\nonChange `false`\r\n\r\n### When pressing arrow down to focus the inputs back and forth I get:\r\n\r\nonChange `true`\r\nonChange `false`\r\nonChange `false`\r\nonChange `false`\r\nonChange `false`\r\nonChange `false`\r\n\r\n> Note that if you check the \"Prevent React from batching updates?\" checkbox, both examples behave the same. The only difference is that in this case, we wrap the `.focus()` calls in a `setTimeout()` to avoid batching.\r\n\r\n## The expected behavior\r\n\r\nWe would expect the 2 examples to behave the same.\r\n","state":"open","updated_at":"2020-11-27T18:11:40Z","created_at":"2020-11-26T13:27:10Z","creator_user_login":"benoitgrelard"}
{"number":20330,"title":"Bug: onLoadStart is not passed to img","body":"Although it seem a valid event, and it works using vanilla HTML/JS (at least **Firefox**, Chrome still have an open bug https://bugs.chromium.org/p/chromium/issues/detail?id=458851), it seems that using and `onLoadStart` event on an `img` is not working in react.\r\n\r\nReact version: 17.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. With **Firefox** open browser development tools\r\n2. Disable browser's cache\r\n3. Using Firefox go to https://ukpcn.csb.app/\r\n4. Check the console\r\n\r\nLink to code example: https://codesandbox.io/s/onloadstart-issue-ukpcn\r\n\r\n## The current behavior\r\n\r\nThe console shown:\r\n\r\n```\r\nVanilla img loading\r\nVanilla img loaded\r\nReact img loaded\r\n```\r\n\r\nSeems that the `onLoadStart` is not working.\r\n\r\n## The expected behavior\r\n\r\nThe `onLoadStart` function should be executed, so logging also `React img loading`","state":"open","updated_at":"2021-11-11T17:00:15Z","created_at":"2020-11-25T14:17:53Z","creator_user_login":"keul"}
{"number":20327,"title":"Bug: [react-reconciler] Impossible to import react-reconciler correctly in typescript library without setting esModuleInterop:true in tsconfig.","body":"React version: not relevant\r\n\r\n## Steps To Reproduce\r\n\r\n1. fork `react-three-fiber` at this commit https://github.com/pmndrs/react-three-fiber/commit/3e55c9a7b960d7c9596cdc988fb9a7bf33a8c4f9\r\n2. run `yarn` to install deps\r\n3. open src/renderer.tsx\r\n4. run `yarn dev` to test changes.\r\n\r\n## The current behavior\r\n\r\nI have all consumer typescript projects setup with `esModuleInterop: false`, and then I check types, I check all types including dependencies, I often see warnings about some imports being required to use with `esModuleInterop: true`, but enabling the rule to true leads to other unwanted consequences.\r\n\r\nMy last issue was with `react-three-fiber`, do I got it forked, and disabled `esModuleInterop`, fixed a lot of types issues until I have stumbled into `react-reconciler`\r\n\r\nIt is exporting a function as CJS module with `export =`, and I can't import it correctly as `import * as Reconciler from 'react-reconciler`, cos the default can't b function and app is crashing with no TS errors.\r\n\r\nOn other hand, if I `import Reconciler from 'react-reconciler'`, I got no app crashing, but typescript error, and forced to `// @ts-ignore` it. It works fine, but looses type safety, and breaks the build for consumers using rollup for build.\r\n\r\n## The expected behavior\r\n\r\nAdd possibility to `import { Reconciler } from 'react-reconciler'`","state":"open","updated_at":"2023-03-03T02:36:54Z","created_at":"2020-11-24T06:10:58Z","creator_user_login":"JustFly1984"}
{"number":20262,"title":"Bug: react-hooks/exhaustive-deps false postive when given undefined as deps","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nThere's currently a false positive for the `react-hooks/exhaustive-deps` rule as it does not accept `undefined` as dependency. \r\n\r\n```typescript\r\n// Below gives => React Hook useMemo has a missing dependency: 'byId'. Either include it or remove the dependency array.\r\nconst allIds = useMemo(() => Object.keys(byId), undefined)\r\n```\r\n\r\nThis is clearly noticeable together with TypeScript as it does not allow omitting the second `deps` parameter, with the following typings:\r\n```typescript\r\n// allow undefined, but don't make it optional as that is very likely a mistake\r\nfunction useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\r\n```\r\n\r\nNote here that `deps` must be either a `DependencyList` or `undefined`. It is not listed as optional.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install `\"eslint-plugin-react-hooks\": \"^4.1.0\"` and extend it with `'plugin:react-hooks/recommended'`\r\n2. Write a hook that required a dependency list, input `undefined`.\r\n\r\n## The current behavior\r\nGives false positive when given `undefined` for `deps`.\r\n\r\n## The expected behavior\r\nShould allow `deps` to be set to undefined.","state":"open","updated_at":"2021-04-29T16:21:05Z","created_at":"2020-11-15T19:26:35Z","creator_user_login":"sQVe"}
{"number":20258,"title":"Issue regarding ESLint react-hooks - 'exhaustive-deps' rule ","body":"I read in detail the following issue: https://github.com/facebook/react/issues/14920#issuecomment-467212561\r\n\r\nAs suggested in the last comment of gaearon I file a new issue because I could not find solution of my cases.\r\n\r\nI read really a lot online and in detail about useEffect in general and the exhaustive-deps rule, but somehow there is still a lot of walking in a circle. So I would be very thankful for better suggestion or clarifying how to handle this issues:\r\n\r\nIt looks that it confuses also a lot of developers and it is quite difficult to write work-arounds for the most common use-cases:\r\n\r\nhttps://github.com/facebook/react/issues/14920\r\n\r\nHere I provide few examples that really are not easy to be set-up with this rule:\r\n\r\n**Example 1**: Initialization of app - or check cookies/localstorage once the application loads, and set them in the context:\r\n\r\n    import React, { useState, createContext, useEffect } from 'react';\r\n    import { useTranslation } from 'react-i18next';\r\n    import CookieHandler from '../helpers/CookieHandler';\r\n    import Loading from '../components/common/Loading';\r\n    \r\n    const defaultValues = {\r\n      authorization: {\r\n        loggedIn: false,\r\n        isAdmin: false,\r\n      },\r\n      dispatchAuthorization: () => {},\r\n    };\r\n    \r\n    const LoginContext = createContext(defaultValues);\r\n    \r\n    const reducer = (state, authorization = { loggedIn: false, isAdmin: false }) => {\r\n      const { loggedIn, isAdmin } = authorization;\r\n      return { loggedIn: !!loggedIn, isAdmin: !!isAdmin };\r\n    };\r\n    \r\n    const LoginContextProvider = ({ children }) => {\r\n      const [authorization, dispatchAuthorization] = React.useReducer(reducer, defaultValues.authorization);\r\n      const [mounted, setMounted] = useState(false);\r\n      const { i18n } = useTranslation();\r\n    \r\n      const setLoginData = (token, isAdmin) => {\r\n        if (token) {\r\n          dispatchAuthorization({\r\n            loggedIn: true,\r\n            isAdmin: isAdmin,\r\n          });\r\n        }\r\n        setMounted(true);\r\n      };\r\n    \r\n      const setLanguage = (language) => {\r\n        i18n.changeLanguage(language);\r\n        CookieHandler.setLanguage(language);\r\n      };\r\n    \r\n      const loginUser = data => {\r\n        CookieHandler.setToken(data.token);\r\n        CookieHandler.setAdmin(data.isAdmin);\r\n        setLoginData(data.token, data.isAdmin);\r\n      };\r\n    \r\n      const removeLoginData = () => {\r\n        CookieHandler.logout();\r\n        dispatchAuthorization({\r\n          loggedIn: false,\r\n          isAdmin: false,\r\n        });\r\n      };\r\n    \r\n      useEffect(() => {\r\n        const token = CookieHandler.getToken();\r\n        const isAdmin = CookieHandler.getAdmin();\r\n        const language = CookieHandler.getLanguage();\r\n    \r\n        if (token) {\r\n          setLoginData(token, isAdmin);\r\n        } else if (authorization.loggedIn || authorization.isAdmin) removeLoginData();\r\n    \r\n        if (language) setLanguage(language);\r\n        setMounted(true);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      }, []);\r\n    \r\n      if (!mounted) return <Loading />;\r\n    \r\n      return (\r\n        <LoginContext.Provider\r\n          value={{\r\n            authorization,\r\n            dispatchAuthorization,\r\n            setLoginData,\r\n            loginUser,\r\n            setLanguage,\r\n            logoutUser: removeLoginData,\r\n          }}\r\n        >\r\n          {children}\r\n        </LoginContext.Provider>\r\n      );\r\n    };\r\n    \r\n    const LoginContextConsumer = LoginContext.Consumer;\r\n    \r\n    export { LoginContext, LoginContextProvider, LoginContextConsumer };\r\n\r\n\r\nHere I want that the `useEffect` is called really **once** the application is loaded, and never again. But according to eslint I should add the authorization variable in the dept array, but that is something I really don't want to do. Because each time there is a change in the authorization, the whole INIT-Prozess will start over and over again. I think an init-functionality that fires once the component/or application starts is quite needed, without thinking of changing in variables later?\r\n\r\n**Example 2:** Use of functions that are comming from hooks. An example with **react-i18next**:\r\n\r\n    ...\r\n    import { useTranslation } from 'react-i18next';\r\n    ...\r\n    \r\n    const MyComponent = ({ someId }) => {\r\n     const { t } = useTranslation();\r\n     const [data, setData] = useState(null);\r\n      useEffect(() => {\r\n        const someAsyncFetch = async () => {\r\n      try {\r\n        const data = await asyncFetchData({\r\n          someId,\r\n        });\r\n        setData(data);\r\n        toastr.success(t('your.data.was.fetched.successfully'));\r\n      } catch (e) {\r\n        console.log(e);\r\n        toastr.error(t('your.data.can.not.be.fetched'));\r\n      }\r\n     };\r\n        someAsyncFetch();\r\n      }, [someId]);\r\n    }\r\n\r\nIn this example, I want to get all the data when my component gets rendered, or when the someId is changed. When data is loaded or error comes - I fire toastr message with the translation function **t** that I get in a hook. But I don't want to get new data each time the user switch his language. But eslint want me to put t in the deps array, which causes to re-render component and load new data each time the user switch the language. And moreover, we should expect that more and more such hook-functions will come in future, which we eventually may want to use in the useEffects.\r\n\r\n**Example 3:** One variable is depending on other variables\r\n\r\n      useEffect(() => {\r\n        if (error === null) {\r\n          const data = doSomethingWithMyValue(value1);\r\n          setMyData(data);\r\n        } else {\r\n          showSomeErrorText(); //or do nothing\r\n        }\r\n      }, [value1]);\r\n\r\nIf I want that only when value1 changes, the function doSomethingWithMyValue will be fired, but not when error changes. When we put error inside the `useEffects` deps array then the whole logic is broken, because useEffect will be fired each time error changes. And this is something I don't want. \r\n\r\nI tried also to make some kind of workaround with a mounted variable, and `useCallback`, but it looks for me that `useEffect` fires unnecessary many times, and somehow the whole thing is slower.\r\n\r\nSo is there somewhere a logic-catch or we really need to use all this memo and `useCallbacks` etc. to prevent some serious issue?\r\n\r\nThanks for any feedback!","state":"open","updated_at":"2021-11-19T17:27:14Z","created_at":"2020-11-14T23:13:55Z","creator_user_login":"a-tonchev"}
{"number":20248,"title":"Bug: [eslint-plugin-react-hooks] Constructions should be caught in default props/args","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. ```js\r\n   function useMyHook1(arr = []) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n    function useMyHook2({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n   function MyComponent({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n\r\n     return null;\r\n   }\r\n   ```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nNo warning appears for `arr` being potentially constructed on every render.\r\n\r\n## The expected behavior\r\nShould warn that `arr` can be constructed on each render.\r\nThe lint rules already warn for the following, so this is just an extension of the existing behavior:\r\n```js\r\nconst arr = props.arr ?? []; // The 'arr' logical expression could make the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'arr' in its own useMemo() Hook.\r\n```\r\nReference: https://github.com/facebook/react/pull/19590","state":"open","updated_at":"2021-10-27T13:33:39Z","created_at":"2020-11-13T17:46:29Z","creator_user_login":"nstepien"}
{"number":20237,"title":"Bug: v16.14.0 tag is incorrectly shows v17-alpha","body":"The tag on GitHub does not match the version of the package:\r\n\r\nhttps://github.com/facebook/react/blob/v16.14.0/packages/react-test-renderer/package.json\r\n\r\nThis is v16.14.0, but the package is of version `17.0.0-alpha.0`.\r\n\r\nSame goes for https://github.com/facebook/react/blob/v16.13.1/packages/react-test-renderer/package.json","state":"open","updated_at":"2020-11-12T17:11:45Z","created_at":"2020-11-12T17:10:12Z","creator_user_login":"ktalebian"}
{"number":20236,"title":"DevTools: Flag \"nested updates\" in the Profiler UI","body":"PR #20163 added a new (not yet released) phase to the Profiler API: `\"nested-update\"`. This phase is different from a regular `\"update\"` because of the performance implications (see PR description for more background info).\r\n\r\nWould be nice if we could also flag these in the DevTools UI somehow.","state":"open","updated_at":"2020-11-13T14:12:30Z","created_at":"2020-11-12T16:17:08Z","creator_user_login":"bvaughn"}
{"number":20205,"title":"Feature suggestion: Allow custom list of hooks to ignore on exhaustive-deps","body":"The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.\r\n\r\nI'm imagining something like this in the eslint config:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"safeHooks\": \"(useRefWrapper|useOtherRefWrapper)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhere `useRefWrapper` might look like so:\r\n\r\n```\r\nconst useRefWrapper = () => {\r\n  const ref = useRef();\r\n  if (ref.current) {\r\n    console.log('hi!');\r\n  }\r\n  return ref;\r\n}\r\n```\r\n\r\nDoes this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.","state":"open","updated_at":"2022-11-18T04:50:43Z","created_at":"2020-11-09T20:01:11Z","creator_user_login":"LucasPickering"}
{"number":20196,"title":"Bug: eslint-plugin-react-hooks doesn't report conditional typescript \"?.\" hooks","body":"**React plugin version:** \r\neslint-plugin-react: \"^7.19.0\"\r\ntypescript: 4.0+ (must include ?. operator)\r\n\r\n## Steps To Reproduce\r\n\r\n```tsx\r\n// Just a demonstration example, obviously this is not ideal use of classes\r\nclass Dog {\r\n\tpublic useDogWoof() {\r\n\t\tuseEffect(() => {\r\n\t\t\tconsole.log(\"woof\")\r\n\t\t}])\r\n\t}\r\n}\r\n\r\nconst DogWoof = ({dog}: {dog?: Dog) => {\r\n\tdog?.useDogWoof() // Should print conditional hook error\r\n\treturn (\r\n\t\t//\r\n\t)\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nTypescript has the new 4.0 operator `?.` in case an object is undefined. But, this doesn't quite work along with hooks, as when the object is undefined, the hook is not called, thus the React Renderer complains that the amount of hooks is not the same or even worse untraceable type errors that I had. `eslint-plugin-react-hooks` is expected to be able to guard against that as well to prevent nasty errors with this new typescript operator.\r\n\r\n## The expected behavior\r\n\r\nCurrently, `eslint-plugin-react-hooks` doesn't take care of the typescript operator and thinks that nothing's wrong with using along one with a react hook.","state":"open","updated_at":"2020-11-09T14:10:42Z","created_at":"2020-11-09T12:17:51Z","creator_user_login":"exapsy"}
{"number":20186,"title":"Distribute source maps for easier debugging in Chrome's Performance tab","body":"~~I want to propose the addition of a new file in the `react-dom` npm package called `react-dom.production.js` — a non-minified version of `react-dom` production build.~~\r\n\r\nEdit: After some discussion(see below) it seems that distributing source maps makes more sense. Source maps will help you see the real function names and explore them. (The points below apply for source maps as well.)\r\n\r\n## Why?\r\n\r\nThere are a few ways to profile React's performance — none of them provide a low-level view of what's happening. I believe the best way to profile React is using Chrome's Performance tab using a non-minified production build. Here's why:\r\n- **Familiar.** People use the Performance tab for every other performance profiling so they are familiar with how to use it.\r\n- **Powerful.** The Performance tab is extremely powerful. Years of engineering have been put into developing it.\r\n- **Better understanding.** When using the React DevTools profiler I have a common problem – I see a component being rendered slowly but I don't know what is causing it. In order to understand I need a more low-level view. Here are some questions that can be answered only with the Chrome Performance tab:\r\n    - What's the balance between the app's code and React execution times? Should I implement some frequently updated components using custom non-React implementation?\r\n    - What time is spend on setting attribute values, setting `innerHTML` and adding and removing listeners?\r\n    - What time is spent on disposing effects? Is there a specific dispose function that is taking more than usual?\r\n    - What time is spent on mounting effects? Is there a specific effect mount that is taking more than usual?\r\n\r\n## Disadvantages\r\n\r\nAs with every solution, there are some drawbacks to using this approach:\r\n- **Documentation needed.** In order to make sense of what's happening you will need some knowledge of the core functions in React. A little guide with the names of the functions for mount/unmount, effects, and DOM manipulations will be useful. This of course can be done by the community(you are already linking to some community posts in React's documentation).\r\n- **Requires more skill.** This isn't for everybody. It's aimed at more experienced developers. This type of profiling is a lot more overwhelming than the current approach.\r\n- **May not fit your principles.** Maybe it's not part of your principles to introduce and promote such a complicated solution. Maybe you are more interested in searching for a more elegant and minimal solution.","state":"open","updated_at":"2023-03-20T22:27:50Z","created_at":"2020-11-06T21:10:50Z","creator_user_login":"astoilkov"}
{"number":20162,"title":"Bug: react-hooks/exhaustive-deps false positive when deps is defined with typescript const typing","body":"React version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Setup eslint with `@typescript-eslint/parser` as parser\r\n2. Add `as const` to the deps array\r\n\r\n```\r\nfunction MyComp() {\r\n\tconst [state, setState] = useState()\r\n\tuseEffect(() => {\r\n\t\tconsole.log(state)\r\n\t}, [state] as const)\r\n\treturn 'Hello, world'\r\n}\r\n```\r\n\r\nLink to code example: https://github.com/tranvansang/exhaustive-deps-bug-1\r\n\r\n\r\n## The current behavior\r\n\r\nThe following errors were reported\r\n\r\n```\r\n  5:5  warning  React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies  react-hooks/exhaustive-deps\r\n  5:5  warning  React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array  \r\n```\r\n\r\n## The expected behavior\r\n\r\nThe rule should interpret the deps argument correctly.\r\n\r\n## _\r\n\r\nWhy do I need to add `as const` to the deps array?\r\n\r\nI build my own custom effect hook (with the `additionalHooks` option in .eslintrc), in which a tuple typing gives more type hint to the code.\r\n","state":"open","updated_at":"2021-08-24T06:32:30Z","created_at":"2020-11-05T12:17:58Z","creator_user_login":"tranvansang"}
{"number":20161,"title":"Bug: Input minLength not working after type changed","body":"I have an input with type password with minLength 8, and i have a toggle to change the type to text (password toggle).\r\nwhen i type with length < 8 and press submit, it prevent to submit. but, when i toggle the password so it change the type to text and submit the form, it can submitted. btw i using useRef()\r\n\r\nReact version:\r\nreact: ^17.0.1\r\nreact-dom: ^17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. type character < minLength\r\n2. submit form\r\n3. toggle form type\r\n4. submit form\r\n\r\nLink to code example: [DEMO](https://codesandbox.io/s/young-shape-4tciw)\r\n\r\n## The current behavior\r\nThe form get submitted even when it under minLength\r\n\r\n## The expected behavior\r\nThe form not get submitted when it under minLength\r\n","state":"open","updated_at":"2022-06-05T09:44:10Z","created_at":"2020-11-05T09:45:52Z","creator_user_login":"ichvandi"}
{"number":20160,"title":"Bug: react-hooks/exhaustive-deps false positive on additionalHooks' definition","body":"React version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. in `.eslintrc` add the following configuration\r\n\r\n```\r\n\t\"rules\": {\r\n\t\t\"react-hooks/exhaustive-deps\": [\r\n\t\t\t\"warn\", {\r\n\t\t\t\t\"additionalHooks\": \"(useAsyncEffect)\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n```\r\n\r\n2. Type the following code\r\n\r\n```\r\nexport const useAsyncEffect = (effect, deps) => useEffect(\r\n\t() => void (async () => {\r\n\t\ttry {\r\n\t\t\tawait effect()\r\n\t\t} catch (e) {\r\n\t\t\t// report error\r\n\t\t\tconsole.error(e)\r\n\t\t}\r\n\t})(),\r\n\tdeps\r\n)\r\n```\r\n\r\nLink to code example: https://github.com/tranvansang/exhaustive-deps-bug\r\n\r\n## The current behavior\r\n\r\n- The following errors are printed\r\n\r\n```\r\n  10:2  warning  React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies                                                         react-hooks/exhaustive-deps\r\n  10:2  warning  React Hook useEffect has a missing dependency: 'effect'. Either include it or remove the dependency array. If 'effect' changes too often, find the parent component that defines it and wrap that definition in useCallback  react-hooks/exhaustive-deps\r\n\r\n✖ 2 problems (0 errors, 2 warnings)\r\n```\r\n\r\n## The expected behavior\r\n\r\nIn the additional hooks' definition, the following patterns should be accepted as the dependence for the `effect` function (i.e., the first argument of the additional hook).\r\n\r\n- Pattern 1: `useEffect(() => {effect()}, deps)`\r\n- Pattern 2: `useEffect(() => {effect()}, [...deps])`","state":"open","updated_at":"2021-03-12T18:07:29Z","created_at":"2020-11-05T09:38:32Z","creator_user_login":"tranvansang"}
{"number":20159,"title":"Bug: can not pass some special custom attribute such as `size` ","body":"As we know after react 16 we can use any custom attributes in dom elements \r\nbut there is a bug which some special attributes (such as `size`) are not forwarding to dom element\r\n\r\n![screenshot](https://user-images.githubusercontent.com/30382711/98168556-f91f3d80-1eff-11eb-8518-5647cd854e00.png)\r\n\r\n\r\nReact version: 16.13 & 17.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. render a dom element with some custom attributes including `size`\r\n2. inspect output and you will see your custom attributes but size\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/setting-size-as-custom-attr-hdom2?file=/src/App.js\r\n\r\n## The current behavior\r\n`size` attribute will not show in output\r\n\r\n## The expected behavior\r\n`size` should be in output\r\n","state":"open","updated_at":"2020-11-20T18:32:06Z","created_at":"2020-11-04T21:15:20Z","creator_user_login":"mh-alahdadian"}
{"number":20144,"title":"React Developer Tools triggers console error in Firefox for protected URLs","body":"![Screenshot from 2020-11-02 08-34-31](https://user-images.githubusercontent.com/23744935/97845488-ea147180-1cec-11eb-853a-0b6e3c176903.png)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install React Devtools extension for Firefox\r\n2. Go to \"about:neterror?e=connectionFailure\"\r\n\r\n## The current behavior\r\n\r\nFirefox shows this error in the console: \"The extension \"React Developer Tools\" is not allowed to access about:neterror?e=connectionFailure\"\r\n\r\n\r\n## The expected behavior\r\n\r\nFirefox shows no error in the console","state":"open","updated_at":"2020-11-12T21:31:22Z","created_at":"2020-11-02T08:23:01Z","creator_user_login":"SimonSiefke"}
{"number":20139,"title":"Bug: Usage of \"React.forwardRef\" in \"React.memo\" distorts profiling report","body":"Hello!\r\n\r\nWhen I was working with [this workshop](https://github.com/kentcdodds/react-performance), especially with [this exercise part](https://github.com/kentcdodds/react-performance/blob/main/src/final/06.extra-3.js#L108-L117) (the goal there is to create a convenient, reusable HOC), I found that wrapping a component in `React.forwardRef` and then in `React.memo` distorts profiling report (when using `Profiler` tab of React Developer Tools).\r\n\r\nFor demonstration purposes I removed unrelated stuff and now the application looks like this:\r\n![image](https://user-images.githubusercontent.com/10310491/97773045-b6571180-1b5d-11eb-9025-8f1dcd26f821.png)\r\nWhen you click on a cell, the number inside changes to another one.\r\n\r\nReact version: 17.0.0\r\nReact Developer Tools: 4.9.0\r\n\r\n## Steps To Reproduce\r\n1. Start profiling the app (using `Profiler` tab of React Developer Tools).\r\n2. Click on a cell.\r\n3. Stop profiling the app and check re-rendered components.\r\n4. Wrap `Wrapper` component in `forwardRef` (see the code in the repo below) and repeat steps 1-3.\r\n\r\nLink to code example: https://codesandbox.io/s/usage-of-reacforwardref-in-reactmemo-81cuh?file=/src/App.js\r\n\r\n## The current behavior\r\nWithout `forwardRef`: according to the profiling report, all the cells re-render.\r\n![image](https://user-images.githubusercontent.com/10310491/97772842-c4a42e00-1b5b-11eb-9b49-8d2bd6f122aa.png)\r\n![image](https://user-images.githubusercontent.com/10310491/97772848-d4bc0d80-1b5b-11eb-8f41-9378bc7418ba.png)\r\n\r\nWith `forwardRef`: according to the profiling report, only the changed cell re-renders.\r\n![image](https://user-images.githubusercontent.com/10310491/97772866-fcab7100-1b5b-11eb-9de9-c4aa34b48299.png)\r\n![image](https://user-images.githubusercontent.com/10310491/97772876-07fe9c80-1b5c-11eb-8038-aa9a0ffce473.png)\r\n\r\n## The expected behavior\r\nThere should be no difference in the reports. I added some `console.log`-s and they demonstrate that adding `forwardRef` doesn't improve performance/reduce re-renders, which seems correct.\r\n\r\nCC @kentcdodds","state":"open","updated_at":"2021-04-03T06:19:01Z","created_at":"2020-10-31T07:06:04Z","creator_user_login":"vasilii-kovalev"}
{"number":20135,"title":"react-devtools-inline: How to remount/reuse DevTools frontend after unmount","body":"DevTools closes the bridge whenever it is unmounted [(Link to relevant code)](https://github.com/facebook/react/blob/master/packages/react-devtools-shared/src/devtools/views/DevTools.js#L172-L181). In the case of the chrome extension this is fine because the node is never unmounted, but in use cases with `react-devtools-inline` (eg: codesandbox), where you are only given one <DevTools/> instance this causes the bridge to be closed, and never recreated if for whatever reason <DevTools/> is unmounted (which happens when switching tabs).\r\n\r\nI am willing to submit a PR, but wanted to discuss the fix before making it - the fix I see is adding a flag to <DevTools/> to not close the bridge on unmount, and making it an opt-in flag users of <DevTools/> (recommended in the case of react-devtools-inline). Adding an ability to manually access the bridge would then let the developer manually control the lifecycle - but I'm unsure the risk/issue of keeping a dangling bridge open, so I don't see this as strictly necessary.\r\n\r\nReact version: N/A\r\nReact-devtools-inline: 4.9.0\r\n\r\n## Steps To Reproduce\r\n\r\n1.  Create a code-sandbox React environment\r\n2. Open React DevTools tab\r\n3. Switch to Problems tab (or any other tab)\r\n4. Switch back to React DevTools tab\r\n5. Bridge has been closed, `index.js:55 Cannot send message \"highlightNativeElement\" through a Bridge that has been shutdown.` is printed in console. New react nodes can not be inspected.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: N/A\r\nCode example isn't relevant, any CodeSandbox will reproduce this. (even with no additional code)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nInspecting elements that haven't previously been inspected will fail because bridge communication fails if the <DevTools/> ever unmounts and remounts\r\n\r\n## The expected behavior\r\nThe bridge doesn't close even on unmount when using `react-devtools-inline`, or an option is available when mounting <DevTools/> to not automatically close the bridge.","state":"open","updated_at":"2022-01-03T05:46:35Z","created_at":"2020-10-30T03:12:49Z","creator_user_login":"sean9keenan"}
{"number":20123,"title":"Bug: Should have a queue","body":"```\r\nreact-dom.development.js:89 Warning: React has detected a change in the order of Hooks called by wrappedComponent. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\r\n\r\n   Previous render            Next render\r\n   ------------------------------------------------------\r\n1. useState                   useState\r\n2. useCallback                useCallback\r\n3. useRef                     useRef\r\n4. useDebugValue              useDebugValue\r\n5. useEffect                  useEffect\r\n6. useLayoutEffect            useState\r\n   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n    in wrappedComponent (created by ApprovalManageView)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalManageView)\r\n    in ApprovalManageView (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in Transition (created by ForwardRef(Collapse))\r\n    in ForwardRef(Collapse) (created by WithStyles(ForwardRef(Collapse)))\r\n    in WithStyles(ForwardRef(Collapse)) (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in wrappedComponent (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in wrappedComponent (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in ApprovalsSidebar (created by Context.Consumer)\r\n    in ApprovalsSidebarWrapper (created by ContentSidebarContent)\r\n    in ContentSidebarContent (created by SidebarDesktop)\r\n    in div (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in ErrorBoundary (created by SidebarDesktop)\r\n    in SidebarDesktop (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(AccordionDetails))\r\n    in ForwardRef(AccordionDetails) (created by WithStyles(ForwardRef(AccordionDetails)))\r\n    in WithStyles(ForwardRef(AccordionDetails)) (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Accordion))\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in Transition (created by ForwardRef(Collapse))\r\n    in ForwardRef(Collapse) (created by WithStyles(ForwardRef(Collapse)))\r\n    in WithStyles(ForwardRef(Collapse)) (created by ForwardRef(Accordion))\r\n    in div (created by ForwardRef(Paper))\r\n    in ForwardRef(Paper) (created by WithStyles(ForwardRef(Paper)))\r\n    in WithStyles(ForwardRef(Paper)) (created by ForwardRef(Accordion))\r\n    in ForwardRef(Accordion) (created by WithStyles(ForwardRef(Accordion)))\r\n    in WithStyles(ForwardRef(Accordion)) (created by ContentEditViewUnstyled)\r\n    in span (created by ForwardRef(Badge))\r\n    in ForwardRef(Badge) (created by WithStyles(ForwardRef(Badge)))\r\n    in WithStyles(ForwardRef(Badge)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by Sidebar)\r\n    in Sidebar (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by ContentEditViewUnstyled)\r\n    in ContentEditViewUnstyled (created by WithStyles(ContentEditViewUnstyled))\r\n    in WithStyles(ContentEditViewUnstyled) (created by WithSizeDelayed)\r\n    in div (created by WithSizeDelayed)\r\n    in WithSizeDelayed (created by WithSize(WithStyles(ContentEditViewUnstyled)))\r\n    in WithSize(WithStyles(ContentEditViewUnstyled)) (created by Context.Consumer)\r\n    in form (created by Context.Consumer)\r\n    in FormClassValidator (created by ContentEditForm)\r\n    in ContentEditForm (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditFormLoaderUnstyled)\r\n    in ContentEditFormLoaderUnstyled (created by WithStyles(ContentEditFormLoaderUnstyled))\r\n    in WithStyles(ContentEditFormLoaderUnstyled) (created by WithWidth(WithStyles(ContentEditFormLoaderUnstyled)))\r\n    in WithWidth(WithStyles(ContentEditFormLoaderUnstyled)) (created by LoadableComponent)\r\n    in LoadableComponent (created by ContentEditViewPage)\r\n    in ContentEditViewPage (created by react2angular(ContentEditViewPage))\r\n    in Suspense (created by react2angular(ContentEditViewPage))\r\n    in DropContextProvider\r\n    in Unknown (created by DragDropContext(Component))\r\n    in DragDropContext(Component) (created by Providers)\r\n    in SnackbarProvider (created by Providers)\r\n    in MuiPickersUtilsProvider (created by Providers)\r\n    in ThemeProvider (created by AppThemeProvider)\r\n    in AppThemeProvider (created by Providers)\r\n    in Providers (created by SubProviders)\r\n    in SubProviders (created by react2angular(ContentEditViewPage))\r\n    in react2angular(ContentEditViewPage)\r\n    in Unknown (created by HotExportedComponent)\r\n    in AppContainer (created by HotExportedComponent)\r\n    in HotExportedComponent\r\nprintWarning @ react-dom.development.js:89\r\nerror @ react-dom.development.js:61\r\nwarnOnHookMismatchInDev @ react-dom.development.js:14738\r\nupdateHookTypesDev @ react-dom.development.js:14697\r\nuseState @ react-dom.development.js:15967\r\nuseState @ react.development.js:1497\r\n(anonymous) @ ContentApprovalStatusView.tsx:38\r\n(anonymous) @ mobxreactlite.esm.js:344\r\n(anonymous) @ mobxreactlite.esm.js:306\r\ntrackDerivedFunction @ mobx.module.js:761\r\n./node_modules/mobx/lib/mobx.module.js.Reaction.track @ mobx.module.js:1795\r\nuseObserver @ mobxreactlite.esm.js:304\r\n(anonymous) @ mobxreactlite.esm.js:343\r\nrenderWithHooks @ react-dom.development.js:14826\r\nupdateFunctionComponent @ react-dom.development.js:17059\r\nupdateSimpleMemoComponent @ react-dom.development.js:16997\r\nbeginWork @ react-dom.development.js:18721\r\nbeginWork$1 @ react-dom.development.js:23211\r\nperformUnitOfWork @ react-dom.development.js:22189\r\nworkLoopSync @ react-dom.development.js:22162\r\nperformSyncWorkOnRoot @ react-dom.development.js:21788\r\n(anonymous) @ react-dom.development.js:11112\r\nunstable_runWithPriority @ scheduler.development.js:643\r\nrunWithPriority$1 @ react-dom.development.js:11062\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:11107\r\nflushSyncCallbackQueue @ react-dom.development.js:11095\r\nbatchedUpdates$1 @ react-dom.development.js:21894\r\nreactionScheduler @ mobx.module.js:1905\r\nrunReactions @ mobx.module.js:1881\r\nendBatch @ mobx.module.js:1581\r\n_endAction @ mobx.module.js:967\r\nexecuteAction @ mobx.module.js:921\r\nupdateApproval @ mobx.module.js:901\r\n(anonymous) @ ApprovalManageView.tsx:334\r\n(anonymous) @ tslib.es6.js:74\r\n__awaiter @ tslib.es6.js:70\r\nonApprovalEditFormSubmit @ ApprovalManageView.tsx:268\r\n(anonymous) @ FormClassValidator.tsx:266\r\nPromise.then (async)\r\nonSubmit @ FormClassValidator.tsx:262\r\nonClick @ ApprovalEditView.tsx:1487\r\ncallCallback @ react-dom.development.js:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js:238\r\ninvokeGuardedCallback @ react-dom.development.js:293\r\ninvokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:307\r\nexecuteDispatch @ react-dom.development.js:390\r\nexecuteDispatchesInOrder @ react-dom.development.js:415\r\nexecuteDispatchesAndRelease @ react-dom.development.js:3279\r\nexecuteDispatchesAndReleaseTopLevel @ react-dom.development.js:3288\r\nforEachAccumulated @ react-dom.development.js:3260\r\nrunEventsInBatch @ react-dom.development.js:3305\r\nrunExtractedPluginEventsInBatch @ react-dom.development.js:3515\r\nhandleTopLevel @ react-dom.development.js:3559\r\nbatchedEventUpdates$1 @ react-dom.development.js:21903\r\nbatchedEventUpdates @ react-dom.development.js:1061\r\ndispatchEventForLegacyPluginEventSystem @ react-dom.development.js:3569\r\nattemptToDispatchEvent @ react-dom.development.js:4268\r\ndispatchEvent @ react-dom.development.js:4190\r\nunstable_runWithPriority @ scheduler.development.js:643\r\nrunWithPriority$1 @ react-dom.development.js:11062\r\ndiscreteUpdates$1 @ react-dom.development.js:21919\r\ndiscreteUpdates @ react-dom.development.js:1072\r\ndispatchDiscreteEvent @ react-dom.development.js:4169\r\nShow 8 more frames\r\nreact-dom.development.js:15066 Uncaught Error: Should have a queue. This is likely a bug in React. Please file an issue.\r\n    at updateReducer (react-dom.development.js:15066)\r\n    at updateState (react-dom.development.js:15260)\r\n    at Object.useState (react-dom.development.js:15972)\r\n    at Object.useState (react.development.js:1497)\r\n    at ContentApprovalStatusView.tsx:38\r\n    at mobxreactlite.esm.js:344\r\n    at mobxreactlite.esm.js:306\r\n    at trackDerivedFunction (mobx.module.js:761)\r\n    at Reaction../node_modules/mobx/lib/mobx.module.js.Reaction.track (mobx.module.js:1795)\r\n    at useObserver (mobxreactlite.esm.js:304)\r\nupdateReducer @ react-dom.development.js:15066\r\nupdateState @ react-dom.development.js:15260\r\nuseState @ react-dom.development.js:15972\r\nuseState @ react.development.js:1497\r\n(anonymous) @ ContentApprovalStatusView.tsx:38\r\n(anonymous) @ mobxreactlite.esm.js:344\r\n(anonymous) @ mobxreactlite.esm.js:306\r\ntrackDerivedFunction @ mobx.module.js:761\r\n./node_modules/mobx/lib/mobx.module.js.Reaction.track @ mobx.module.js:1795\r\nuseObserver @ mobxreactlite.esm.js:304\r\n(anonymous) @ mobxreactlite.esm.js:343\r\nrenderWithHooks @ react-dom.development.js:14826\r\nupdateFunctionComponent @ react-dom.development.js:17059\r\nupdateSimpleMemoComponent @ react-dom.development.js:16997\r\nbeginWork @ react-dom.development.js:18721\r\ncallCallback @ react-dom.development.js:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js:238\r\ninvokeGuardedCallback @ react-dom.development.js:293\r\nbeginWork$1 @ react-dom.development.js:23235\r\nperformUnitOfWork @ react-dom.development.js:22189\r\nworkLoopSync @ react-dom.development.js:22162\r\nperformSyncWorkOnRoot @ react-dom.development.js:21788\r\n(anonymous) @ react-dom.development.js:11112\r\nunstable_runWithPriority @ scheduler.development.js:643\r\nrunWithPriority$1 @ react-dom.development.js:11062\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:11107\r\nflushSyncCallbackQueue @ react-dom.development.js:11095\r\nbatchedUpdates$1 @ react-dom.development.js:21894\r\nreactionScheduler @ mobx.module.js:1905\r\nrunReactions @ mobx.module.js:1881\r\nendBatch @ mobx.module.js:1581\r\n_endAction @ mobx.module.js:967\r\nexecuteAction @ mobx.module.js:921\r\nupdateApproval @ mobx.module.js:901\r\n(anonymous) @ ApprovalManageView.tsx:334\r\n(anonymous) @ tslib.es6.js:74\r\n__awaiter @ tslib.es6.js:70\r\nonApprovalEditFormSubmit @ ApprovalManageView.tsx:268\r\n(anonymous) @ FormClassValidator.tsx:266\r\nPromise.then (async)\r\nonSubmit @ FormClassValidator.tsx:262\r\nonClick @ ApprovalEditView.tsx:1487\r\ncallCallback @ react-dom.development.js:189\r\ninvokeGuardedCallbackDev @ react-dom.development.js:238\r\ninvokeGuardedCallback @ react-dom.development.js:293\r\ninvokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:307\r\nexecuteDispatch @ react-dom.development.js:390\r\nexecuteDispatchesInOrder @ react-dom.development.js:415\r\nexecuteDispatchesAndRelease @ react-dom.development.js:3279\r\nexecuteDispatchesAndReleaseTopLevel @ react-dom.development.js:3288\r\nforEachAccumulated @ react-dom.development.js:3260\r\nrunEventsInBatch @ react-dom.development.js:3305\r\nrunExtractedPluginEventsInBatch @ react-dom.development.js:3515\r\nhandleTopLevel @ react-dom.development.js:3559\r\nbatchedEventUpdates$1 @ react-dom.development.js:21903\r\nbatchedEventUpdates @ react-dom.development.js:1061\r\ndispatchEventForLegacyPluginEventSystem @ react-dom.development.js:3569\r\nattemptToDispatchEvent @ react-dom.development.js:4268\r\ndispatchEvent @ react-dom.development.js:4190\r\nunstable_runWithPriority @ scheduler.development.js:643\r\nrunWithPriority$1 @ react-dom.development.js:11062\r\ndiscreteUpdates$1 @ react-dom.development.js:21919\r\ndiscreteUpdates @ react-dom.development.js:1072\r\ndispatchDiscreteEvent @ react-dom.development.js:4169\r\nShow 9 more frames\r\nreact-dom.development.js:19561 The above error occurred in the <wrappedComponent> component:\r\n    in wrappedComponent (created by ApprovalManageView)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalManageView)\r\n    in ApprovalManageView (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in Transition (created by ForwardRef(Collapse))\r\n    in ForwardRef(Collapse) (created by WithStyles(ForwardRef(Collapse)))\r\n    in WithStyles(ForwardRef(Collapse)) (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in wrappedComponent (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by wrappedComponent)\r\n    in wrappedComponent (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ApprovalsSidebar)\r\n    in ApprovalsSidebar (created by Context.Consumer)\r\n    in ApprovalsSidebarWrapper (created by ContentSidebarContent)\r\n    in ContentSidebarContent (created by SidebarDesktop)\r\n    in div (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by SidebarDesktop)\r\n    in ErrorBoundary (created by SidebarDesktop)\r\n    in SidebarDesktop (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(AccordionDetails))\r\n    in ForwardRef(AccordionDetails) (created by WithStyles(ForwardRef(AccordionDetails)))\r\n    in WithStyles(ForwardRef(AccordionDetails)) (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Accordion))\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in div (created by Transition)\r\n    in Transition (created by ForwardRef(Collapse))\r\n    in ForwardRef(Collapse) (created by WithStyles(ForwardRef(Collapse)))\r\n    in WithStyles(ForwardRef(Collapse)) (created by ForwardRef(Accordion))\r\n    in div (created by ForwardRef(Paper))\r\n    in ForwardRef(Paper) (created by WithStyles(ForwardRef(Paper)))\r\n    in WithStyles(ForwardRef(Paper)) (created by ForwardRef(Accordion))\r\n    in ForwardRef(Accordion) (created by WithStyles(ForwardRef(Accordion)))\r\n    in WithStyles(ForwardRef(Accordion)) (created by ContentEditViewUnstyled)\r\n    in span (created by ForwardRef(Badge))\r\n    in ForwardRef(Badge) (created by WithStyles(ForwardRef(Badge)))\r\n    in WithStyles(ForwardRef(Badge)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by Sidebar)\r\n    in Sidebar (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by ContentEditViewUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditViewUnstyled)\r\n    in SidebarStoreProvider (created by ContentEditViewUnstyled)\r\n    in ContentEditViewUnstyled (created by WithStyles(ContentEditViewUnstyled))\r\n    in WithStyles(ContentEditViewUnstyled) (created by WithSizeDelayed)\r\n    in div (created by WithSizeDelayed)\r\n    in WithSizeDelayed (created by WithSize(WithStyles(ContentEditViewUnstyled)))\r\n    in WithSize(WithStyles(ContentEditViewUnstyled)) (created by Context.Consumer)\r\n    in form (created by Context.Consumer)\r\n    in FormClassValidator (created by ContentEditForm)\r\n    in ContentEditForm (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditFormLoaderUnstyled)\r\n    in div (created by ForwardRef(Grid))\r\n    in ForwardRef(Grid) (created by WithStyles(ForwardRef(Grid)))\r\n    in WithStyles(ForwardRef(Grid)) (created by ContentEditFormLoaderUnstyled)\r\n    in ContentEditFormLoaderUnstyled (created by WithStyles(ContentEditFormLoaderUnstyled))\r\n    in WithStyles(ContentEditFormLoaderUnstyled) (created by WithWidth(WithStyles(ContentEditFormLoaderUnstyled)))\r\n    in WithWidth(WithStyles(ContentEditFormLoaderUnstyled)) (created by LoadableComponent)\r\n    in LoadableComponent (created by ContentEditViewPage)\r\n    in ContentEditViewPage (created by react2angular(ContentEditViewPage))\r\n    in Suspense (created by react2angular(ContentEditViewPage))\r\n    in DropContextProvider\r\n    in Unknown (created by DragDropContext(Component))\r\n    in DragDropContext(Component) (created by Providers)\r\n    in SnackbarProvider (created by Providers)\r\n    in MuiPickersUtilsProvider (created by Providers)\r\n    in ThemeProvider (created by AppThemeProvider)\r\n    in AppThemeProvider (created by Providers)\r\n    in Providers (created by SubProviders)\r\n    in SubProviders (created by react2angular(ContentEditViewPage))\r\n    in react2angular(ContentEditViewPage)\r\n    in Unknown (created by HotExportedComponent)\r\n    in AppContainer (created by HotExportedComponent)\r\n    in HotExportedComponent\r\n\r\nReact will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\nReact will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. use condition before hooks\r\n\r\n```typescript\r\n    const [state, setState] = React.useState<State>({...defaultState});\r\n    const actions = store.isBulk ? {} : store.getActions(entity, switchView);\r\n\r\n   // this line if it is below the onToggle then everything fine and have no error\r\n    if (!approval) { return null; }\r\n\r\n    const onToggle = React.useCallback((ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        const collapsibleName = ev.currentTarget.dataset.type + 'Open';\r\n        const value = !state[collapsibleName];\r\n        setState({ ...state, ...defaultState, [collapsibleName]: value });\r\n    }, [state]);\r\n\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\ncrash the rendeing\r\n\r\n## The expected behavior\r\nit should have an error message which localize better where the error was if cannot be fixed this issue :)","state":"open","updated_at":"2020-10-29T14:41:23Z","created_at":"2020-10-29T06:21:45Z","creator_user_login":"shadowvzs"}
{"number":20120,"title":"Bug: React DevTools failing silently on Debian","body":"<!--\r\nReact DevTools fails silently and cannot launch on Linux because of Electron version > 5 and the sandbox issue\r\n-->\r\n\r\nReact version: react-devtools v4.9.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. On debian, install react-devtools as a dev dependency in your project or globally\r\n2. try and run npx react-devtools or just react-devtools\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The current behavior\r\nThe command fails silently and nothing happens.\r\n\r\n## The expected behavior\r\nReact DevTools should start and connect to app.\r\n\r\nI am not sure this is the right place to post this, but since I know how to fix this issue and I think other people might face it, I'm opening this thread to also post the solution.\r\n\r\nI run into this issue on Linux (debian bullseye with kernel 5.7.0). The main problem is connected to Electron (afaik since version 5) not being able to launch without binary being owned by root and chmod 4755. The issue is with the new sandbox and the priviledges it requires to launch. \r\n\r\nThere is also another workaround I found some months ago on the dedicated thread from Electron's GH (since this is a common issue for Linux users of all Electron applications) that works for every packaged Electron app and binary.\r\nInstead of modifying the electron binary permissions, you can instead tweak an option of your running kernel by doing: \r\n```\r\nsudo sysctl kernel.unprivileged_userns_clone=1\r\n``` \r\n\r\nThen your Electron apps will launch, and thus so will React DevTools.\r\n\r\nFeel free to close this if it isn't relevant here (since not really an issue with devtools itself, rather with Electron x Debian), but I haven't found anything regarding this matter and I think someone might encounter this issue in the future (hoping I'm not totaly mistaken about this to begin with :smile:)","state":"open","updated_at":"2023-03-07T12:31:34Z","created_at":"2020-10-29T01:36:45Z","creator_user_login":"Delfshkrimm"}
{"number":20095,"title":"Bug: react-devtools prints too many logs of WS failed","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: Not related\r\n\r\n## The current behavior\r\n\r\nWe're following this to set up react-devtools.\r\n\r\n> If your app is inside an iframe, a Chrome extension, React Native, or in another unusual environment, try the standalone version instead. Chrome apps are currently not inspectable.\r\n\r\nThe standalone version works well, but if the standalone version is not started, `react-devtools` will try to connect `ws://localhost:8097/` and prints too many logs.\r\n\r\n![image](https://user-images.githubusercontent.com/5390719/97136626-9c4cb600-178e-11eb-9d7a-ffd5dc9d99f8.png)\r\n\r\n## The expected behavior\r\n\r\nI hope react-devtools can only print 1 error message if it is not connected to the standalone version.","state":"open","updated_at":"2022-07-12T14:54:59Z","created_at":"2020-10-26T05:25:42Z","creator_user_login":"Jack-Works"}
{"number":20088,"title":"Bug: Input leaks fiber nodes in recent versions of chromium","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: ^16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Mount an input component\r\n2. Type anything\r\n3. Unmount input component\r\n\r\nSmall code sample:\r\n\r\n```\r\nconst InputWrapper = () => {\r\n  const Siblings = React.useMemo(() => new Array(1000).fill(1).map((_,i) => <div key={i}/>), []);\r\n  return (\r\n    <div>\r\n      <input />\r\n      {Siblings}\r\n    </div>\r\n  );\r\n};\r\nexport const Demo = () => {\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  const handleShow = React.useCallback(() => {\r\n    setShow((prev) => !prev);\r\n  }, []);\r\n\r\n  const closeRef = React.useRef<number>(0);\r\n  \r\n  const handleShowMany = React.useCallback(() => {\r\n    closeRef.current = 0;\r\n    const id = setInterval(() => {\r\n      setShow(prev => !prev);\r\n      if (closeRef.current++ > 10000) {\r\n        clearInterval(id);\r\n      }\r\n    }, 1);\r\n  }, [setShow])\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleShow}>{show ? \"hide\" : \"show\"}</button>\r\n      <button onClick={handleShowMany}>{closeRef.current}</button>\r\n      {show && <InputWrapper />}\r\n    </div>\r\n  );\r\n};\r\n``` \r\n\r\n## The current behavior\r\nCurrently when mounting the input controller for the first time, a small increase in fiber nodes occurs, and after typing in the input box, seemingly the entire React fiber tree is leaked. When mounting/unmounting the input again, there is no clean up (even after thousands of iterations).\r\n\r\n## The expected behavior\r\nThe fiber nodes to be cleaned up after unmounting the input element.\r\n\r\nComparison memory+fiber nodes on Chrome 69 vs Chrome 86:\r\n\r\n**Chrome 69**:\r\n![image](https://user-images.githubusercontent.com/54151393/97064044-3e368d80-1558-11eb-8676-3ee913542cc5.png)\r\n\r\n**Chrome 86**:\r\n![image](https://user-images.githubusercontent.com/54151393/97064051-4db5d680-1558-11eb-834b-04a26f4c507a.png)\r\n\r\n**Note the 600kb increase in memory per scenario in Chrome 86, vs the <100KB in Chrome 69, as well as the difference in Fiber nodes**\r\n\r\n**The final number of fiber nodes in the Chome 69 snapshot is the same as the initial count of fiber nodes in Chrome 86 after mounting the input element for the first time:**\r\n![image](https://user-images.githubusercontent.com/54151393/97064148-ca48b500-1558-11eb-9b41-ca397b1156a7.png)\r\n","state":"open","updated_at":"2022-03-30T01:05:31Z","created_at":"2020-10-24T00:56:07Z","creator_user_login":"msjabarr"}
{"number":20087,"title":"Fix muted prop not being shown as an attribute for video elements","body":"## Summary\r\n\r\nFixes: https://github.com/facebook/react/issues/10389\r\n\r\n## Test Plan\r\n\r\nCurrently there is an issue with jest so whenever we try to test <video muted/.> we get a\r\n`Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering ` found on:\r\nhttps://github.com/testing-library/react-testing-library/issues/470\r\n\r\nin order to fix this bug we need to have a muted attribute in the element before we set the prop, that's why you can see the timeout. so it won't detect a change in the volume once the prop is set.\r\n\r\n","state":"open","updated_at":"2023-06-21T08:53:35Z","created_at":"2020-10-23T22:15:02Z","creator_user_login":"antoniopacheco"}
{"number":20085,"title":"Feature Request: Adding filter (search) to react DevTools Profiler","body":"A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.\r\nHowever, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.\r\n\r\nAn easy solution for this to add some search bar, where the user can type down the name of the component, and find the component. \r\n\r\nIf this is something that you think we care about, I can pick it up and add the search field. \r\n\r\n<img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">\r\n\r\n","state":"open","updated_at":"2023-02-15T17:07:10Z","created_at":"2020-10-23T14:17:15Z","creator_user_login":"M-Izadmehr"}
{"number":20068,"title":"Feature request: A useLayoutEffect with read/write batching across a tree","body":"Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.\r\n\r\n```javascript\r\nuseLayoutEffect(() => {\r\n  // Write\r\n  ref.current.style.transform = \"\"\r\n\r\n  // Read\r\n  const box = ref.current.getBoundingClientRect()\r\n})\r\n```\r\n\r\nFor a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.\r\n\r\nHooks and components are designed to be composable, yet it's this trivial to write one that isn't. \r\n\r\nInstead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:\r\n\r\n1. Synchronously before paint\r\n2. In \"parallel\" in reads/writes/reads etc\r\n3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)\r\n\r\nIt could look like this, though I'm more interested in the above specs than actual API:\r\n\r\n```javascript\r\nuseBatchedLayoutEffect((read, write) => {\r\n  write(() =>  {\r\n    ref.current.style.transform = \"\"\r\n  })\r\n\r\n  read(() => {\r\n    const box = ref.current.getBoundingClientRect()\r\n  })\r\n})\r\n```\r\n\r\nThen, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.\r\n\r\n## Measurement accuracy\r\n\r\nIn the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.\r\n\r\n## What about `requestAnimationFrame`?\r\n\r\nTheoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.\r\n\r\nIf you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:\r\n\r\nhttps://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537\r\n\r\nBut if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.","state":"open","updated_at":"2021-05-07T07:42:53Z","created_at":"2020-10-21T09:24:35Z","creator_user_login":"mattgperry"}
{"number":20065,"title":"Bug: onCompositionEnd not called","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  16.7.0\r\nOS: Window 10\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Switch input method to Chinese\r\n2. Type 1 to the input\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:  https://codepen.io/Eoyd/pen/KKMgMzz?editors=0011\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWhen setting the formatted value in the render function, if the formatted return is a string, the combined input will not trigger onCompositionEnd\r\n\r\n## The expected behavior\r\nonCompositionEnd should be called\r\n","state":"open","updated_at":"2021-09-08T13:18:55Z","created_at":"2020-10-21T01:41:49Z","creator_user_login":"Mkamvi"}
{"number":20031,"title":"Suggestion: transforming jsx to jsx-runtime without `createElement` fallback","body":"Current code transform rule is not friendly for custom `jsx-runtime` or react-like lib.\r\n\r\n```js\r\n// have to re export the `createElement`\r\nimport { createElement } from \"@emotion/core\"\r\n\r\nimport { jsx, jsxs, Fragment } from \"@emotion/core/jsx-runtime\"\r\n```\r\n\r\nCould we follow rules like below, could got same behavior.\r\n\r\n* `<span key={key} {...obj} />` => `jsx(\"span\", obj, key)`\r\n* `<span {...obj} key={key} />` => `jsx(\"span\", {...obj, key}, key)`\r\n\r\nhttps://github.com/babel/babel/issues/12177\r\nhttps://github.com/microsoft/TypeScript/pull/39199","state":"open","updated_at":"2022-08-11T11:45:35Z","created_at":"2020-10-15T05:40:57Z","creator_user_login":"morlay"}
{"number":19991,"title":"Bug: Infinite rendering resulting in freezing of tab/browser","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nReact is not preventing infinite rendering/looping and results in freezing of browser. \r\n\r\nThe root cause of this issue is because the dependency array of `useEffect` compares object/array by reference. But, this is a serious issue because \r\n- This is a common trap people might get into because of dynamic nature of Javascript, and people might not know the thing they are passing to dependency array is a primitive value or an array/object.\r\n- React should catch this infinite rendering and throw a helpful error. This error is already thrown by React for some of the cases. But, clearly React does not catch this for all the cases.\r\n- The documentation of  `useEffect` does not have a single reference to this gotcha - guarding against passing object/array to the dependency array, since reference of the object/array is being checked, not a deep comparison value. Some solutions already exist like https://github.com/kentcdodds/use-deep-compare-effect, https://stackoverflow.com/questions/54095994/react-useeffect-comparing-objects/63965274#63965274. But, only people who are aware of this behaviour of `useEffect` will reach out to these solutions (or they might manually deep compare with their own custom hook as some people do in the linked stackoverflow link)\r\n\r\nIt would also be helpful if `useEffect` includes a helpful option like \r\n```javascript\r\nuseEffect(() => {\r\n // myArray, myObject gets new reference on evey render\r\n}, [myArray, myObject], {\r\n   deepCompare: true/false // it would be helpful to have this instead of reaching for custom hooks/npm packages\r\n})\r\n```\r\n\r\nReact version:\r\n`16.12.x` (any latest version)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click the `codesandbox` link - https://codesandbox.io/s/apollo-client-uselazyquery-example-forked-kmc1u?file=/src/App.js. \r\n2. Click `Topics` link and then select `Countries` link. \r\n\r\n`Warning`: Please be aware that tab/browser will freeze. It is better to open the console before hand, so that you can see the looping from console logs.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n[CodeSandbox reproduction](https://codesandbox.io/s/apollo-client-uselazyquery-example-forked-kmc1u?file=/src/App.js)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nCurrent behavior:\r\n- React does not prevent infinite loop/rendering. Browser tab freezes, and the end user has no idea that the tab has freezed. They have to force quit the tab.\r\n\r\n\r\nExpected behavior:\r\n- React should give a helpful warning that an infinite render/loop is going on.\r\n- React should pinpoint the exact issue - the array/object passed to `useEffect` dependency is triggering infinite rendering\r\n","state":"open","updated_at":"2023-08-27T14:41:40Z","created_at":"2020-10-09T15:01:20Z","creator_user_login":"palerdot"}
{"number":19968,"title":"Bug: Fast memory leaks on simple React App","body":"I have created simple test React application where browser tab and JS memory grow fast and don't clear. It is three tabs with same form which contains some count (1000-2000) generated input field. Browser is Edge based on chromium engine and memory report provide browser task monitor. Note: Chrome has same results\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\nRecursively:\r\n1. Enter text on anyone input field.\r\n2. Click to some other inactive tab.\r\n\r\nAfter 5 minutes memory size of browser tab grows from 70mb to > 500mb and JS from 7mb to > 120mb, and stay there forever.\r\n\r\nLink to code example: [GitHub](https://github.com/druzhchenko/react-memory-test)\r\nMy question on:  [StackOverflow](https://stackoverflow.com/questions/64225283/why-browser-tab-and-js-memory-leak-on-clear-react-app)\r\n","state":"open","updated_at":"2020-10-28T19:16:11Z","created_at":"2020-10-06T12:25:35Z","creator_user_login":"druzhchenko"}
{"number":19963,"title":"eslint-plugin-react-hooks: New rule to require useState updater.","body":"`const [state] = useState()`\r\n\r\nCalling `useState` without assigning the second array value should be flagged.","state":"open","updated_at":"2020-10-07T01:27:36Z","created_at":"2020-10-05T23:12:31Z","creator_user_login":"jsphstls"}
{"number":19932,"title":"Better support <template> tags","body":"HTML [`<template>` tag]() is used to pass reusable templates to web components.\r\nHowever, at the moment this doesn't work with React in a way that is useful to users.\r\n\r\n### Context: Basic usage of `<template>`\r\n\r\n\r\nIf you have HTML like this:\r\n\r\n```html\r\n<template>\r\n\t<p>Some Text</p>\r\n</template>\r\n```\r\n\r\nYou can then use this template with pure JS like this:\r\n\r\n```js\r\nconst template = document.querySelector(\"template\")\r\n\r\nconst node = template.content.cloneNode(true)\r\n\r\ndocument.append(node)\r\n```\r\nThe important part here is the `content` property of the template.\r\n\r\n### Whats the problem?\r\n\r\nWriting the template code in HTML is OK. However, if you create the template DOM nodes with JS like this, it won't work:\r\n\r\n```js\r\nconst template = document.createElement(\"template\")\r\nconst p = document.createElement(\"p\")\r\np.textContent = \"Some Text\"\r\ntemplate.appendChild(p)\r\n```\r\n\r\nIn this case, the `content` property of the template will be empty. Instead, one would have to do either of these:\r\n\r\n```js\r\nconst template = document.createElement(\"template\")\r\ntemplate.innerHTML = \"<p>Some Text</p>\"\r\n```\r\n\r\nor\r\n\r\n```js\r\nconst template = document.createElement(\"template\")\r\nconst p = document.createElement(\"p\")\r\np.textContent = \"Some Text\"\r\ntemplate.content.appendChild(p) // notice `content`\r\n```\r\n\r\nThe first does work because there is a special case in `innerHTML` for template tags (see [mdn](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Operational_details)).\r\nThe second example works because the `<p>` DOM node is added directly to the `content` of the template.\r\n\r\n### What does this has to do with React?\r\n\r\nWhen using React to create the template, React is appending the generated DOM nodes directly to the template node and not to the `content` property of the template node. For this reason at the moment you can't really use template tags in React apps.\r\n\r\nI have the impression that this is not the fault of React as the same problem exists for angular and most likely other spa frameworks too. Instead this looks like a misconception of the `template` tag to me (mayby I'm wrong on this and there is a good reason for this behavior). \r\nHowever, maybe React could do something to make this usecase less anoying? A possible solution could be to detect if the parent node is a `template` and to add the child nodes to the `content` property instead of the node itself. But I'm not sure if there would be any negative side-effects of this.\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-02-18T02:32:38Z","created_at":"2020-09-30T17:26:16Z","creator_user_login":"manuel-mauky"}
{"number":19921,"title":"Bug: shallowEqual() is flawed","body":"The `shallowEqual()` function located in `packages/shared/shallowEqual.js` is incorrectly using `Object.prototype.hasOwnProperty()` instead of `Object.prototype.propertyIsEnumerable()`, which is the correct counterpart for `Object.keys()`. \r\n\r\nExplanation:\r\n------------\r\nThe `Object.keys()` method used inside `shallowEqual()` returns an array of a given object's own enumerable property names. But `hasOwnProperty.call(...)` (used in the `for` loop titled `Test for A's keys different from B`), checks only one of those things: ownership. Which causes the bug pointed out below. `Object.prototype.propertyIsEnumerable()` must be used instead which checks both direct ownership and enumerable-ity.\r\n\r\nReact version: v16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n```\r\nconst person = {\r\n  name: 'Salman',\r\n  age: 25,\r\n};\r\n\r\nconst personWithProfession = {\r\n  name: 'Salman',\r\n  profession: 'Software Engineer', // This property goes undetected by shallowEqual()\r\n};\r\n\r\n// Add age\r\nObject.defineProperty(personWithProfession, 'age', {\r\n  value: 25, // non-enumerable by default\r\n});\r\n\r\nconst keysA = Object.keys(person);\r\nconst keysB = Object.keys(personWithProfession);\r\n\r\nconsole.log(keysA); // name,age\r\nconsole.log(keysB); // name,profession\r\n\r\nconsole.log(keysA.length === keysB.length); // true // Passes the length check\r\n```\r\n\r\nLink to code example with a demonstration and fixed version:\r\n[https://codesandbox.io/s/infallible-keldysh-r98gl?file=/src/index.js](https://codesandbox.io/s/infallible-keldysh-r98gl?file=/src/index.js)\r\n\r\n## The current behavior\r\n```\r\nshallowEqual(person, personWithProfession) // true\r\n```\r\n\r\n## The expected behavior\r\n```\r\nshallowEqual(person, personWithProfession) // false\r\n```\r\n\r\n## The fix\r\nReplace\r\n`!hasOwnProperty.call(objB, keysA[i])`\r\nwith:\r\n`!propertyIsEnumerable.call(objB, keysA[i])`","state":"open","updated_at":"2021-01-07T23:55:42Z","created_at":"2020-09-29T03:02:42Z","creator_user_login":"samikatz"}
{"number":19901,"title":"Bug: hydrating fails with nested paragraph and dangerouslySetInnerHTML","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use the `dangerouslySetInnerHTML` on a `p` element where the `__html` contains a `<p>` tag\r\n2. Server-side render this component and try to hydrate\r\n\r\nLink to code example:\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\r\n    <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\r\n  </head>\r\n  <body>\r\n    <!-- Pretend for an instance that this html was generated on the server by ReactDOM.renderToString() -->\r\n    <div id=\"app\"><p><p>Dope!</p></p></div>\r\n  </body>\r\n  <script>\r\n    function Component() {\r\n      return React.createElement(\"p\", {\r\n        dangerouslySetInnerHTML: { __html: \"<p>Dope!</p>\" },\r\n      })\r\n    }\r\n    const component = React.createElement(Component)\r\n    const root = document.getElementById(\"app\")\r\n    ReactDOM.hydrate(component, root)\r\n  </script>\r\n</html>\r\n```\r\n\r\nJSFiddles:\r\n- This one breaks because it has nesting `p`:  https://jsfiddle.net/mw19p0g3/\r\n- This one works because the wrapper is `div` instead of `p`: https://jsfiddle.net/mw19p0g3/2/\r\n- This one works too because there no nesting `p` in the html: https://jsfiddle.net/mw19p0g3/3/\r\n\r\n## The current behaviour\r\nThe `ReactDOM.hydrate` throws a cryptic error:\r\n```\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"\" Client: \"<p>Dope!</p>\"\r\n```\r\nNote the missing `Server: \"\"` string.\r\n\r\n## The expected behavior\r\nDo not throw an error and just hydrate the component as expected.\r\n\r\nI realise that nesting `p` elements does not conform to the [HTML spec for the p element](https://www.w3.org/TR/html401/struct/text.html#h-9.3.1).\r\nIf React chooses not to support the use case of nesting `p` tags through `dangerouslySetInnerHTML`, that's understandable. \r\nIn that case the error should be more descriptive and there should probably also be an error or warning while performing the server side render. \r\nIt should also be documenting somewhere that will easily show up in Google.\r\n\r\nThe current behaviour is very confusing and it took me a while to track down what was going on.\r\n","state":"open","updated_at":"2023-04-04T13:33:46Z","created_at":"2020-09-24T19:36:39Z","creator_user_login":"romeovs"}
{"number":19891,"title":"FR: Allow displaying debug information for reconcilers in DevTools","body":"React allows to develop custom reconcilers. However, currently it is not possible to display custom debug information about the generated Instances in the react DevTools.\r\n\r\nTherefore, I propose to introduce two functions into `HostConfig`:\r\n\r\n```TypeScript\r\n  getInstanceDebugInfo?: (instance: Instance) => any;\r\n  getTextInstanceDebugInfo?: (textInstance: TextInstance) => any\r\n```\r\n\r\nThey should return an object with custom debug information that would be shown in DevTools whenever an Instance-backed Component is highlighted.","state":"open","updated_at":"2020-09-24T20:06:29Z","created_at":"2020-09-23T12:18:50Z","creator_user_login":"derolf"}
{"number":19887,"title":"Feature request: dealing with dependencies in custom React hooks","body":"Let's suppose that I'm trying to define a custom hook using useEffect (the same comment applies for other hooks relying on dependencies such as useCallback, useMemo, useLayoutEffect, etc...):\r\n\r\n```\r\nimport {useEffect} from \"react\"\r\n\r\nexport const useWindowScroll = (dependencies) => {\r\n  useEffect(() => {\r\n    window.scrollTo(0,0)\r\n  }, dependencies)\r\n}\r\n```\r\n\r\nThis would be the ideal code to write to make this hook re-usable:\r\n- It encapsulates the exact business logic, which is to scroll back to the top of the page when one of the dependencies change\r\n- It works using similar syntax to a standard React hook, so provides a nice interface to the developer\r\n- It's as simple as it gets: do the exact thing you've always been doing with the standard hooks. \r\n\r\nHowever, this leads to problems because React complains about the 'dependencies' array. There are different ways one could go about solving this, but they all feel sort of hacky and unnatural to me, one of them being replacing 'dependencies' by 'JSON.stringify(dependencies)' (suggested by Dan Abramov according to a quote I cannot find anymore). It works, but it looks strange to remember that this trick needs to be done.\r\n\r\nSomething else that would also be practical would be to be able to write [someOtherVariable, ...dependencies] in that second argument of a useEffect/useCallback/use(...), without having to wrap it in a JSON.stringify.\r\n\r\nIs there anything that we could do in React itself to make the API for custom hooks simpler when it comes to dependencies? ","state":"open","updated_at":"2020-10-16T01:58:24Z","created_at":"2020-09-22T21:23:34Z","creator_user_login":"Patrick-DS"}
{"number":19870,"title":"Bug: Nested Suspense not catching fast resolved Promises","body":"Given I have two resources stored and initiated in the `useState` of two nested components.\r\nAnd both components have a `<Suspense>` \r\nAnd the resources are read by child components rendered within these Suspense-Boundaries.\r\n\r\nThen I expect both resources to just be created once\r\nAnd I expect the thrown promises to be captured by the closest `<Suspense>`\r\n\r\n⚠️  But when the resources resolve within ~10ms\r\nThen the inner resource is created more then once (i've seen up to 80 creations)\r\nAnd the inner `<Suspense>` seems to be ignored\r\n\r\n\r\nReact version: `0.0.0-experimental-94c0244ba-0.0.0` - `0.0.0-experimental-3310209d0` (maybe also earlier)\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to: https://codesandbox.io/s/youthful-banach-dl5mq?file=/src/index.js\r\n2. Open the console\r\n3. Run the code\r\n4. Observe multiple \"CREATE SUB RES (with INIT) \" logs\r\n5. set `DELAY` in line 7 to `1000` or greater\r\n6. Rerun the code\r\n7. Observe only one \"CREATE SUB RES (with INIT)\"\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n`0.0.0-experimental-94c0244ba`: https://codesandbox.io/s/quirky-bassi-1mbt7?file=/src/index.js\r\n\r\n`0.0.0-experimental-3310209d0`: https://codesandbox.io/s/youthful-banach-dl5mq?file=/src/index.js\r\n\r\n\r\n## The current behavior\r\n\r\nlazy state initiation in nested component is called multiple times when promises/resources resolve fast\r\nand called only once when promises/resources resolve slow\r\n\r\n## The expected behavior\r\n\r\nno change in behaviour weather the promises/resources resolve fast or not\r\n\r\n---\r\n\r\nNot sure if this maybe is intended and meant to prevent UI flickering / loading-waterfalls.\r\nOr I am not supposed to create resources in lazy state initiations\r\n\r\nIn both cases I'd love to see deep docs about the why and how I am supposed to setup my resources.","state":"open","updated_at":"2021-01-04T11:45:43Z","created_at":"2020-09-20T11:17:47Z","creator_user_login":"Xiphe"}
{"number":19865,"title":"Removal of <script> functionality needs to be added to https://reactjs.org/docs/ and a warning displayed while in development mode.","body":"When a <script> tag is used within JSX there is functionality that tricks the browser into not executing the contained code or from fetching the `src`. There is a code comment indicating this behaviour:\r\n\r\n`Create the script via .innerHTML so its \"parser-inserted\" flag is set to true and it does not execute`\r\n\r\nbut for those who are expecting the tag to work like _every other html tag_ in React it is a bit of a surprise that wastes several hours tracking down the cause.  This \"feature\" is obviously there for security reasons, but there are numerous ways around it (changing the case of a letter such as <sCript src=\"...\">).\r\n\r\nPlease either remove this feature and add a warning while in dev mode stating that adding <script> tags is not best practices, or keep the feature but warn that <script> tags are not supported inline and document this behaviour in the React docs. I personally recommend the first once since it simplifies the React code base while allowing the developer to still proceed at their own risk.  The \"risk\" is minor since this isn't readily exploitable as the dangerouslySetHtml feature.\r\n\r\n","state":"open","updated_at":"2020-09-19T02:20:15Z","created_at":"2020-09-18T21:44:45Z","creator_user_login":"infoeon"}
{"number":19860,"title":"Bug: input[type=\"radio\"] controlled value can get out-of-sync","body":"\r\nReact version: 16.13.1 and 17.0.0-alpha.0-2d131d782\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render two `input[type=\"radio\"][name=\"radio\"]`: one is checked, one isn't\r\n2. Get warning about passing `onChange` or `readOnly`\r\n3. Add empty `onChange` to both\r\n\r\nLink to code example:\r\n\r\n- [React 16 repro](https://codesandbox.io/s/react-16-radio-cannot-be-read-only-z9ldc)\r\n- [React 17 repro](https://codesandbox.io/s/react-17-radio-cannot-be-read-only-forked-r6m9r)\r\n- [React 18 repro](https://codesandbox.io/s/react-18-radio-cannot-be-read-only-forked-7j9ckd)\r\n\r\n## The current behavior\r\n\r\n![screencapture of the described behavior](https://i.ibb.co/CMGcrSH/react-readonly-radio.gif)\r\n\r\n1. React recommends `readOnly` for `input[type=\"radio\"]` even though this isn't supported natively (though React could polyfill it)\r\n2. After looping through the radios once with arrow key navigation the checked state changes\r\n\r\n## The expected behavior\r\n\r\nArrow key navigation shouldn't break out of the controlled value. It's debateable whether React should recommend `readOnly` when this isn't a standard attribute like `readOnly` for `<input type=\"text\" />`.\r\n","state":"open","updated_at":"2022-12-23T11:27:40Z","created_at":"2020-09-18T13:26:15Z","creator_user_login":"eps1lon"}
{"number":19857,"title":"Bug: React Portals - Memory Leak","body":"\r\nWe use React and interact with a 3rd party JS library - we use React Portals to create & destroy React Components within the overall application.\r\n\r\nThe supplied repo demonstrates a very simplified version of what we do - after destroying/cleaning up components and detached HTML elements still remain in memory.\r\n\r\nReact version: 16.3.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Check out https://github.com/seanlandsman/react-portal-memory-leak.git\r\n2. take a snapshot (or several until the memory footprint stabilises)\r\n3. click \"Create Portal\"\r\n4. click \"Delete Portal\"\r\n5. If you now take another snapshot and compare against the first one you'll see a \"Detached HTMLDivElement\", as well as the supplied \"TestComponent\"\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/seanlandsman/react-portal-memory-leak.git\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nPost forceUpdate components and HTML elements remain in memory.\r\n\r\n## The expected behavior\r\n\r\nMemory before and after create/destroy(update) should be the same\r\n","state":"open","updated_at":"2020-12-25T13:08:08Z","created_at":"2020-09-18T09:19:11Z","creator_user_login":"seanlandsman"}
{"number":19851,"title":"Bug:  Component with a Symbol as key, causes Crash","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n16.13.1\r\n# Steps To Reproduce\r\n\r\n1. Go To the link https://codesandbox.io/s/happy-ramanujan-xlegp?file=/src/App.js\r\n2. We can see errors caused by this part of code: https://github.com/facebook/react/blob/6fddca27e75950adda92ab4f4946442907dc3bb7/packages/react/src/ReactElement.js#L228\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/happy-ramanujan-xlegp?file=/src/App.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nCrash\r\n## The expected behavior\r\nNo crash\r\n","state":"open","updated_at":"2020-10-01T01:38:34Z","created_at":"2020-09-17T18:14:16Z","creator_user_login":"omarsy"}
{"number":19848,"title":"Bug: Handling of symbols when used as deps incorrectly to create error message results in an unrelated TypeError: Cannot convert a Symbol value to a string","body":"React version: 16.3.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click the button in this Code Sandbox https://codesandbox.io/s/blissful-sun-e0lle?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe wrong error is generated\r\n\r\n## The expected behavior\r\n\r\nAn error should still be generated but the error message should be correct. The problem is that if you do `[Symbol('...')].join(',')` JavaScript will freak out which is what happens if you put symbols incorrectly in the deps to hooks.","state":"open","updated_at":"2023-07-07T12:58:43Z","created_at":"2020-09-17T13:40:58Z","creator_user_login":"leidegre"}
{"number":19846,"title":"Bug: manually created 'change' events via new Event() don't trigger React event handlers","body":"## Description:\r\nManually created events created via `new Event` and emitted from a hidden input work great for `'input'` events, they bubble as expected and can be caught via `onInput` handlers, but using `'change'` events this way doesn't work -- `onChange` handlers are never called.\r\n\r\nThe vanilla JS `'change'` events do bubble normally and can be caught by parents with vanilla JS listeners ( using `addEventListener`), but the React `onChange` listeners don't register anything. \r\n\r\nI've created a codepen to demonstrate a minimal case for this via console logging.  See repro steps below and code comments for additional details.\r\n\r\n### React version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://codepen.io/jesseko/pen/dyMqGKG\r\n2. Observe that logging shows a single entry, the `change` event being emitted from a child component after render.  We expect a second log from a parent's `onChange` but it never comes.\r\n3. Change `EVENT_TYPE` to `'input'`\r\n4. Observe that logging shows two entries, one for the event being emitted and a second for it being detected via an `onInput` handler in the parent component.\r\n5. optional: there's some commented out code at the bottom to test a vanilla JS listener.  Change `EVENT_TYPE` back to `'change'` and uncomment that code and you'll see that that listener does work\r\n\r\n","state":"open","updated_at":"2022-12-12T13:03:36Z","created_at":"2020-09-17T05:48:34Z","creator_user_login":"jesseko"}
{"number":19818,"title":"Bug: Glitchy behaviour when rendering/setState in an onKeyDown event callback","body":"React version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Please open the [minimal reproduction](https://codesandbox.io/s/silly-glitter-5xrdl)\r\n2. Focus your cursor at the end of the third input text\r\n3. Press CMD + Backspace\r\n\r\nThis successfully removes the third todo, but also sets the `text` attribute of the forth to an empty string, because the onChange event callback is called on the same input, but a new model is attached to it. Since CMD + Backspace has deleted the content of the input, the value of `e.target` in the `onChange` callback is an empty string, thus setting the value of the newly attached model to `''`.\r\n\r\nNote that if the input is not being focused on in the `componentDidUpdate` method, the onChange event does not occur. The onChange event also does not occur if we wrap the focusing of the input in a `setTimeout(..., 0)`.\r\n\r\n## The expected behavior\r\n\r\nThe input probably shouldn't be reused for a different model. The parent of the input is `<div key={todo.id}>`, so the input element should probably be recreated.","state":"open","updated_at":"2020-09-30T04:27:53Z","created_at":"2020-09-11T13:56:29Z","creator_user_login":"maximedupre"}
{"number":19800,"title":"Bug: Memory leakage with setInterval","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nI am building an image carousel which changes images on an interval. Because my browser (Brave) showed an increasing memory usage I did a profile and discovered a memory leak. And my fans are are on mental overdrive..\r\n\r\nReact version: 16.13.1\r\nSandbox: https://codesandbox.io/s/eager-franklin-3km4k?file=/src/App.js (not made by me)\r\n\r\n<img width=\"1353\" alt=\"image\" src=\"https://user-images.githubusercontent.com/38684618/92622156-05529a00-f2c5-11ea-82d4-e87fd5feaaab.png\">\r\n\r\nThe image above is taken from profiling this [sandbox](https://codesandbox.io/s/eager-franklin-3km4k?file=/src/App.js). The example is rather simple and can be viewed below.\r\n\r\n```javascript\r\nexport default function App() {\r\n  const [counter, changeCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      changeCounter(prevCounter => prevCounter + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []); // setting [counter] does not remove memory leakage\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>SetInterval()</h1>\r\n      <h2>Sandbox counter: {counter}</h2>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nWhat seems to make it worse (more rapid incline) is putting more useEffects hooks that depend on counter.\r\nIs this a bug? Can I provide more information?","state":"open","updated_at":"2020-10-17T06:03:55Z","created_at":"2020-09-09T16:00:17Z","creator_user_login":"secretlifeof"}
{"number":19778,"title":"Bug: React devtools \"highlight updates when components render\" and profiler output not matching when using memo","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: N/A\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a dynamic list component\r\n2. Use memo to memoize the list, dynamically change one of the properties of an item on the list\r\n3. Open devtools and check the \"highlight updates when components render\" and \"record why component rendered while profiling\" option\r\n4. Start profiling and recording\r\n5. All components of the list are shown as being re-rendered\r\n6. Open React profiler and see the re-rendered items\r\n7. React profiler shows that only the selected item on the list was re-rendered\r\n\r\n\r\n![2020-09-05 13-23-43](https://user-images.githubusercontent.com/1450819/92313029-9222ee00-ef7b-11ea-97c2-6ee0212b2d1d.gif)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/practical-lovelace-ch4mw\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nReact Devtools \"highlight updates when components render\" highlights all components. When using the profiler to do the same recording, it shows that only one component was re-rendering.\r\n\r\n(My guess is that highlight updates is hooking into the function call itself and the profiler is looking into DOM changes and showing only those that actually re-render.)\r\n\r\n## The expected behavior\r\nReact Devtools \"highlight updates when components render\" should only show the components that were re-rendered","state":"open","updated_at":"2023-08-20T02:15:33Z","created_at":"2020-09-05T20:27:48Z","creator_user_login":"saranshkataria"}
{"number":19765,"title":"App crashes upon the automatic attempt to inspect hooks on a Fiber with tag of type ClassComponent","body":"the issue from https://github.com/facebook/react-devtools/issues/1352 still occur when trying to use react-devtools with a nodejs react application (the issue was closed due to the react-devtools rewrite of version 4)","state":"open","updated_at":"2022-08-02T14:29:15Z","created_at":"2020-09-03T19:04:55Z","creator_user_login":"shmuelhizmi"}
{"number":19756,"title":"Bug: React DevTools throws ReferenceError: regeneratorRuntime is not defined","body":"React version: 16.3.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the Chrome script debugger, enable \"Pause on caught exceptions\"\r\n2. Open React DevTools in a app that doesn't use babel or webpack\r\n3. ReferenceError: regeneratorRuntime is not defined\r\n\r\n## The current behavior\r\n\r\n```\r\nReferenceError: regeneratorRuntime is not defined\r\n```\r\n\r\nThe source of this error seems to be something like this:\r\n\r\n```\r\ntry {\r\n  // add if support for Symbol.iterator is present\r\n  __webpack_require__(23)(Yallist);\r\n} catch (er) {}\r\n```\r\n\r\nFrom `chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js`\r\n\r\n## The expected behavior\r\n\r\nNo errors are thrown. It's really annoying when React or it's tooling is throwing exceptions because it makes me having to step through a lot of noise when I'm debugging my own stuff. If this could be avoided that would be much appreciated.\r\n\r\n---\r\n\r\nI get that his might not be fixable and if so, feel free to close but please keep it in mind. Please don't throw exceptions if you absolutely musn't.","state":"open","updated_at":"2021-02-26T11:16:48Z","created_at":"2020-09-03T05:36:57Z","creator_user_login":"leidegre"}
{"number":19749,"title":"Bug: react-hooks/exhaustive-deps includes too much logic?","body":"Judging by the name the rule should check `deps` of some hooks. Instead, it checks for other things as well, such as the asynchronous effects. This violates the single responsibility principle and reduces the flexibility of the rule.\r\n\r\nExample:\r\n\r\nI am writing a new hook that must accept an asynchronous function, but must have deps.\r\n\r\nIf I just write it, I won't get linter errors for missing dependencies:\r\n\r\n```\r\n    useEffectAsync(\r\n        async (getIsIgnore) => {\r\n            console.log(roleCode)\r\n        },\r\n        [], // missing deps: roleCode\r\n    );\r\n```\r\n\r\nNow I can set up a rule, which is very cool:\r\n\r\n```\r\n        'react-hooks/exhaustive-deps': ['warn', {\r\n            'additionalHooks': '(useEffectAsync|useEffectOnUpdate)'\r\n        }],\r\n```\r\n\r\nBut if I do that, I get a warning from the linter about the async function.\r\n\r\n\r\n```\r\n    useEffectAsync(\r\n        async (getIsIgnore) => { // warn about async func, what is useless here\r\n            console.log(roleCode)\r\n        },\r\n        [roleCode], // ok, can be fixed automatically\r\n    );\r\n```\r\n\r\nI think the rule for checking the correctness of the effects functions should be separate. ","state":"open","updated_at":"2022-07-05T19:51:59Z","created_at":"2020-09-02T12:08:27Z","creator_user_login":"dartess"}
{"number":19732,"title":"Bug: React DevTools 'Why did this component render?' incorrectly reports 'The parent component rendered'","body":"React Devtools shows why a component has re-render but sometimes it says 'The parent component rendered' when it just doesn't know. Ideally we would split out these two scenario, otherwise the string should highlight the uncertainty. Me and another Jimmy both went debugging the wrong thing and I lost time assuming the message was correct.\r\n\r\nReact version: React DevTools 4.8.2\r\n\r\n## Steps To Reproduce\r\n\r\nI believe this bug happens when there's a context changing but I'm not positive.","state":"open","updated_at":"2022-04-24T08:56:46Z","created_at":"2020-08-31T23:15:59Z","creator_user_login":"bgirard"}
{"number":19731,"title":"Craft a demo profile for the scheduling profiler","body":"We should create a custom demo profile to show the various performance 'patterns' observed in the scheduling profiler.\r\n\r\n**cc: @bvaughn @taneliang**","state":"open","updated_at":"2020-12-25T13:08:29Z","created_at":"2020-08-31T18:53:34Z","creator_user_login":"kartikcho"}
{"number":19713,"title":"Consider improving React.cloneElement validation in DEV","body":"React version: 16.12.0\r\n\r\nThis bit me earlier: if you try to `cloneElement` a component type, you'll get a confusing error message. `createElement` has validation for silly inputs in DEV, maybe `cloneElement` should have the same.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create new React app\r\n2. `React.render(React.cloneElement(App, {}), document.getElementById('root'));`\r\n\r\nLink to code example: https://codesandbox.io/s/cranky-dawn-ret64?file=/src/index.js\r\n\r\n## The current behavior\r\n\r\n`Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.`\r\n\r\n## The expected behavior\r\n\r\nA more helpful error message, like `createElement` would give, for example `React.cloneElement: element type is invalid -- expected a React element but got: function. You're likely trying to clone a component - you want createElement instead.`","state":"open","updated_at":"2020-12-25T16:14:47Z","created_at":"2020-08-27T22:35:36Z","creator_user_login":"markspolakovs"}
{"number":19695,"title":"Bug ?: Weird reconciliation result on list elements from array with same length as the list.","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n**The thing turns out to be possible something else other than what it looks like when I first post this. So I've changed the title to better reflect the issue and updated some comment to the example code below. Nothing else were modified just to keep a clear record how things are discovered.**\r\n\r\n## Steps To Reproduce\r\n\r\n1. Run this code and check in browser what elements are destroyed or reused.\r\n```\r\nimport React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst num = [3, 4, 5, 6]; // array serving content for list elements\r\nconst loop = [1, 2, 3, 4]; // array to be mapped to generate list\r\n\r\nconst RollingNums = () => {\r\n  const [cur, setCur] = React.useState(0); // control number rolling\r\n\r\n  return (\r\n    <div className=\"problem\">\r\n      <ul>\r\n        {loop.map((value, index) => { // list item counts are fixed to loop.length\r\n          // some simple CS to get continued list item\r\n          let idx = index + cur; \r\n          idx =\r\n            idx >= 0\r\n              ? idx % num.length\r\n              : ((idx % num.length) + num.length) % num.length;\r\n          const target = num[idx].toString(); // get content from array num for current list element\r\n          return (\r\n            <li key={target} className={target}>\r\n              {target}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <div className=\"control\">\r\n        <button onClick={() => setCur((prev) => prev - 1)}>-</button>\r\n        <span>{cur}</span>\r\n        <button onClick={() => setCur((prev) => prev + 1)}>+</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<RollingNums />, document.querySelector('#root'));\r\n```  \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n[Example on codepen](https://codepen.io/mark-night/pen/bGpqvyL).\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nClicking on `+` destroys the first item and recreates it as the last item, while reusing all others. Clicking on `-` reuses first item (the last item from last render) and destroys/recreates all others.\r\n**This only happens if `num` and `loop` have same length.** If `num` has more items than `loop` does, items are destroyed/reused as expected.\r\n\r\n## The expected behavior\r\nAll items should be reused instead of being destroyed.\r\n\r\nAlthough it looks perfectly fine in this simple app, everything still work. However, all class driven transitions mess up due to item destroy/recreate, and children elements underneath `<li>` will reinitialize (e.g. `<img>` reload) due to the same reason.","state":"open","updated_at":"2022-11-18T00:58:51Z","created_at":"2020-08-26T02:49:35Z","creator_user_login":"mark-night"}
{"number":19692,"title":"Bug: different handling of onMouseEnter & onMouseLeave based on pointerEvents in Chrome","body":"React: 16.13.1\r\nReact-DOM: 16.13.1\r\n\r\nChrome 84.0.4147.135.\r\nMS Edge 84.0.522.63.\r\n\r\n---\r\n\r\n_This looks somehow related to #4251._\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open a CodeSandbox, https://codesandbox.io/s/laughing-sound-ox5yz\r\n2. Move your mouse from the \"point 1\" to \"point 2\". Move your mouse from the \"point 2\" to \"point 1\". \r\n\r\n## The current behavior\r\n\r\n![image](https://user-images.githubusercontent.com/14183168/91198165-81ad8080-e6fc-11ea-9148-5a3aac8102e4.png)\r\n\r\nNotice in your console:\r\n```\r\n#disabled:mouseenter \r\n```\r\n\r\nFor the button `#disabled-style` with the same movement:\r\n\r\n```\r\n#disabled-style:mouseenter \r\n#disabled-style:mouseleave \r\n```\r\n\r\n_The difference is that `#disabled-style` has `pointer-events: none`._\r\n\r\n## The expected behavior\r\n\r\nBoth buttons should log the same output.\r\n\r\n## It works?\r\n\r\n- for the native DOM (https://codesandbox.io/s/recursing-leftpad-y5xbb)\r\n- in IE11, Edge Dev 86, Firefox 79/80\r\n","state":"open","updated_at":"2020-12-25T14:06:51Z","created_at":"2020-08-25T16:05:35Z","creator_user_login":"layershifter"}
{"number":19683,"title":"Support Firefox profiles in scheduling profiler","body":"The scheduling profiler only supports Chrome profiles at the moment.\r\n\r\nMigrated from https://github.com/MLH-Fellowship/scheduling-profiler-prototype/issues/52\r\n\r\n## Possible Implementation Plan\r\n\r\n1. Export Firefox importing code from Speedscope in this file in our fork: https://github.com/taneliang/speedscope/blob/fork-for-scheduling-profiler/src/library.ts\r\n1. Refactor `preprocessData` to remove dependency on Chrome-specific types\r\n1. Add Firefox profile support to `preprocessData`. Possibly use this line to read the JSON data: https://github.com/jlfwong/speedscope/blob/64fe369c42d956f6e35f8eb79c19f52cd6427fd6/src/import/index.ts#L146\r\n1. Add separate Firefox profile import button to `ImportPage` (so that we don't have to guess the profile type)","state":"open","updated_at":"2020-12-25T13:08:31Z","created_at":"2020-08-24T08:30:58Z","creator_user_login":"taneliang"}
{"number":19671,"title":"Discussion: Async cleanups of useEffect","body":"Hi 👋 \r\n\r\nI've been asking about this on Twitter but was told that the issues here might be better to discuss this stuff.\r\n\r\nMy general concern is that async cleanups might lead to weird race conditions. It may be unwarranted but the concept itself sounds quite alarming to me and I'd like to discuss this, if possible.\r\n\r\nIf you go with the async cleanups then there is no guarantee that a scheduled work (or just any listeners) would get cleaned up before you get rid of a component instance, so for example:\r\n```js\r\nuseEffect(() => {\r\n  if (state !== 'foo') return\r\n  const id = setTimeout(() => setShouldAnimate(true), 300)\r\n  return () => clearTimeout(id)\r\n}, [state])\r\n```\r\nThis might not work as intended. There is an off-chance that the scheduled timeout will fire after the containing component unmounts but before the timer gets disposed.\r\n\r\nCalling `setState` after unmounting was always a sign of broken assumptions in the code or some programming error and React has been warning about it. I was told though that this has been accounted for and the warning is being suppressed now - so it won't pop up for users if `setState` got called in that short timeframe. So at least that's OK.\r\n\r\nI'm worried though that a disposed component can still cause an unwanted side-effect in a parent. One can imagine some scenarios where that would matter.\r\n\r\n1. orchestrating animation - an unmounted component tells the parent to trigger some sort of animation. The reason why the animation should happen is owned by a child, but it's also based on an additional timer because the reason might become invalid if the user performs some invalidating action quickly enough. It's not obvious here that `useLayoutEffect` should be used here to achieve instant cleanup.\r\n2. similar case: orchestrating some in-product tour, triggering tooltips, arrows, whatever in the parent. It becomes even less apparent that this should be `useLayoutEffect`-based to achieve instant clean up as this is not related to layout, even remotely. This is business logic.\r\n\r\nI hope my concerns are not warranted and you could clear up them for me, but right now I'm worried a lot that this is such a small difference for most of the people and that's it's hard to spot in the code that this might become a source of many very subtle bugs. \r\n\r\ncc @gaearon @bvaughn ","state":"open","updated_at":"2021-02-19T16:06:32Z","created_at":"2020-08-21T10:26:29Z","creator_user_login":"Andarist"}
{"number":19670,"title":"Add documentation for views abstraction","body":"https://github.com/MLH-Fellowship/scheduling-profiler-prototype/pull/80 implemented a views abstraction for the Scheduling Profiler. Although the PR description is reasonably comprehensive, it needs clearer documentation for future contributors.\r\n\r\nThese blogs written by @taneliang explain the design and implementation in detail. We should port these to a MD file as discussed with @bvaughn.\r\n\r\n- https://blog.eliangtan.com/view-framework-1/\r\n- https://blog.eliangtan.com/view-framework-2/","state":"open","updated_at":"2020-12-25T14:06:54Z","created_at":"2020-08-21T10:25:23Z","creator_user_login":"kartikcho"}
{"number":19669,"title":"Show User Timing measures in the Scheduling Profiler UI","body":"Follows up from https://github.com/MLH-Fellowship/scheduling-profiler-prototype/issues/72, which implemented User Timing marks but not measures.\r\n\r\nWe should also highlight a User Timing measure's marks together when one is hovered\r\nThis is a similar idea to https://github.com/MLH-Fellowship/scheduling-profiler-prototype/issues/44. When a measure's start/end mark is hovered over, we can highlight its corresponding mark.\r\n\r\n### Iteration 1: Highlight a User Timing measure's marks together when one is hovered\r\n\r\n#### Steps\r\n\r\nThere are multiple ways to implement this; the easiest way will be to implement something similar to suspense wakeable IDs ([more context](https://github.com/MLH-Fellowship/scheduling-profiler-prototype/issues/44)), so that we can reuse the rendering logic.\r\n\r\n- [ ] Modify types with a measure ID.\r\n- [ ] Update `preprocessData` to process User Timing measures.\r\n- [ ] Update `renderCanvas` to highlight related marks.\r\n\r\n#### Acceptance Criteria\r\n\r\n- When a custom User Timing mark is moused over, all User Timing marks with the same `id` should be highlighted.\r\n- No Flow errors in affected code.\r\n\r\n### Iteration 2: Display User Timing measures\r\n\r\nThis is trickier than the above iteration, as this requires a variable number of rows (or 1 variable-height row) whereas the above only require a fixed-height row.\r\n\r\nThe end result should be something similar to a combination of our React measures and the Chrome Performance tab's Timings section (screenshot below).\r\n\r\n![image](https://user-images.githubusercontent.com/12784593/88007975-b9476c80-cb41-11ea-9177-0fa483886f86.png)\r\n\r\n##### Acceptance Criteria\r\n\r\n- If no User Timing measures are present, there should be no change in the UI.\r\n- Custom User Timing measures should appear as bars in a new canvas section.\r\n- Custom User Timing measures should not overlap.\r\n- Measures should be ordered roughly similar to how Chrome orders them.\r\n- Hovering over the User Timing measures should display a tooltip with more information such as the measure's name, start time, and duration.\r\n- Hovering over other items onscreen should not be broken.\r\n- No Flow errors in affected code.","state":"open","updated_at":"2020-12-25T14:06:55Z","created_at":"2020-08-21T09:47:37Z","creator_user_login":"kartikcho"}
{"number":19668,"title":"Show React version in Scheduling Profiler UI","body":"\r\n\r\nDisplay React version in the profiler UI somewhere. \r\n\r\nReact version mark was added to profiling in #19553 \r\n\r\n**Related:** The idea to display lane labels has been put on hold as discussed in the [original issue.](https://github.com/MLH-Fellowship/scheduling-profiler-prototype/issues/73)","state":"open","updated_at":"2020-12-25T14:06:56Z","created_at":"2020-08-21T09:34:35Z","creator_user_login":"kartikcho"}
{"number":19667,"title":"Normalize panning across browsers in the Scheduling Profiler","body":"Pan behavior differs in different situations:\r\n\r\n* Safari on macOS on a Retina display: pans at about half the speed of Firefox/Chrome\r\n* Chrome when zoomed in: pans faster than the mouse","state":"open","updated_at":"2020-12-25T14:06:57Z","created_at":"2020-08-21T09:34:28Z","creator_user_login":"kartikcho"}
{"number":19644,"title":"Bug: react-hooks/exhaustive-deps does not recognize different signaturres","body":"`eslint-plugin-react-hooks` version: 4.1.2\r\n\r\n## Steps To Reproduce\r\n\r\nThe current `additionalHooks` in the react-hooks/exhaustive-deps eslint plugin accepts a regular expression to match hook names. It always assumes the following format:\r\n \r\n```\r\nfunction useCustomHook(callback, deps) {}\r\n```\r\n\r\nHowever, this format is not always convenient when other arguments are available in the hook's signature, because the set of dependencies could potentially be large. In those cases, it'd be more convenient to place callback and deps as the last two arguments. For instance, the standard `useImperativeHandle` has an additional first argument:\r\n\r\n```\r\nfunction useImperativeHandle(ref, callback, deps) {}\r\n```\r\n\r\n## The current behavior\r\n\r\nThe `react-hooks/exhaustive-deps` rule does not recognize hooks with a function signature as mentioned above.\r\n\r\n## The expected behavior\r\n\r\nThe `react-hooks/exhaustive-deps` rule allows customization to specify the argument offset via the `additionalHooks` config option.\r\n\r\n----\r\n\r\n**Note:** A PR for this already exists at #18861. This issue is meant to increase visibility for it, and allow any additional discussion if necessary.\r\n","state":"open","updated_at":"2021-02-26T12:59:37Z","created_at":"2020-08-19T07:01:23Z","creator_user_login":"swissspidy"}
{"number":19637,"title":"Portal Event Bubbling Use Cases","body":"This is a spillover from https://github.com/facebook/react/issues/11387.\r\n\r\nThe goal of this issue is **not** to argue about whether the current React's behavior makes sense in all situations. Rather, it is **collect a list of use cases, both when the current behavior works well, and when it doesn't**, so that they can inform the next iteration of the related APIs. We can't commit to any concrete timeframe on this at the moment, but a list like this will definitely reduce the amount of time that we'd need to spend to get up to speed on the problem space when we're ready to approach it.\r\n\r\nIf you'd like to contribute a use case, please comment with:\r\n\r\n- A name for your pattern (come up with something unique so we can refer to it later)\r\n- A brief description of the UI (but a screenshot is worth a thousand words)\r\n- A small CodeSandbox demo, if you want to make a stronger case\r\n- How React event bubbling behavior breaks (or helps) your case\r\n  - Include any information about other pitfalls you encountered, be very specific\r\n- A workaround you are currently using, if any\r\n  - If you tried some workarounds but they cause issues, let us know which ones\r\n\r\nPlease keep this thread on topic and let's keep general discussion in https://github.com/facebook/react/issues/11387. This is not a good thread for \"+1\" or requests to solve this faster — it's a thread for gathering research.\r\n\r\nThank you!","state":"open","updated_at":"2022-05-07T02:38:59Z","created_at":"2020-08-18T12:16:29Z","creator_user_login":"gaearon"}
{"number":19611,"title":"Bug: click event is attached to createPortal","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nuse createPortal will have click event attached to the DOM element automatically\r\n\r\n```\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst Modal = ({ children, onClose, open }) =>\r\n  open &&\r\n  createPortal(\r\n    <div />,\r\n    document.getElementById(\"modal\")\r\n  );\r\n```\r\n\r\nthis snippet will add click event attached to the element with id = modal\r\nplease open chrome dev tool to check\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/vibrant-kowalevski-7ginb?file=/src/App.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nclick event is added on the element\r\n\r\n## The expected behavior\r\nclick event should not be added\r\n\r\n\r\n## EDIT\r\n------------------------------------------------------------\r\n```\r\ncreatePortal(\r\n    <h1>This is heading</h1>,\r\n    document.getElementById(\"modal\")\r\n  );\r\n```\r\nThe header is read by **jaws** (not sure about nvda) as\r\n**this is heading, heading level one, clickable**","state":"open","updated_at":"2021-11-09T17:04:38Z","created_at":"2020-08-14T07:57:01Z","creator_user_login":"615349"}
{"number":19587,"title":"DOM attribute stringification fixes","body":"This is regarding the discussion in #17773. \r\n\r\nReact-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.\r\n\r\nCurrently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:\r\n\r\nAttribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.\r\n\r\n- Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).\r\n- React doesn't support IE 8 anymore.\r\n- The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).\r\n- All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.\r\n\r\nI propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected. \r\n\r\nThat way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.","state":"open","updated_at":"2023-07-17T08:44:17Z","created_at":"2020-08-11T11:54:42Z","creator_user_login":"koto"}
{"number":19482,"title":"Bug: the order of effect and cleanup in Parent and Child component is weird","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. just as the code example shows: just click the button 6 times respectively and see the console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://stackblitz.com/edit/react-effect-order-matters?file=index.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nuseEffect logs: `cpcc*1 + ppcc*n + pppc*1`\r\nuseLayoutEffect logs: `cpcp*(1+n) + cppc*1`\r\n\r\n## The expected behavior\r\nboth useEffect and useLayoutEffect should log: `cppc*(1+n+1)`\r\n\r\n## Why I need a stable effect and cleanup order\r\nThere is a vanilla js package `mapbox-gl` whose use case is:\r\n```js\r\nimport mapboxgl from 'mapbox-gl';\r\nvar container = document.querySelector('#map');\r\nvar map = new mapboxgl.Map({ container });\r\n\r\nmap.on('load', function () {\r\n  // every thing should be done after load\r\n  map.addSource('route_source', route_source_data);\r\n  map.addLayer({\r\n    source: 'route_source',  // the layer relies on the source\r\n    id: 'route_layer',\r\n    ...other_layer_config,\r\n  });\r\n  // ...;\r\n  do_many_things();\r\n  // ...;\r\n  // you must remove the layer before removing the source\r\n  map.removeLayer('route_layer');\r\n  map.removeSource('route_source');\r\n});\r\n```\r\n\r\nThen I want to make a react version:\r\n```jsx\r\nvar vdom = (\r\n  <Map opts={x}>\r\n    <Source opts={xx}>\r\n      <Layer opts={xxx}></Layer>\r\n    </Source>\r\n  </Map>\r\n)\r\n```\r\n \r\nBut since the order of react effect and cleanup in parent and child component is not stable (well, it' stable but it's weird), things became complex.\r\n\r\nI think the effect and cleanup order matters because there are dependency relations between parent and child components.\r\n\r\nAnd react should handle it.\r\n\r\nThere are some related(maybe) issues:\r\nhttps://github.com/facebook/react/issues/16728\r\nhttps://github.com/facebook/react/issues/17080\r\n\r\nAnd the react lifecycle order is works right: https://stackblitz.com/edit/react-lifecycle-effect-order-right?file=index.js","state":"open","updated_at":"2023-02-23T15:09:45Z","created_at":"2020-07-29T10:25:37Z","creator_user_login":"xialvjun"}
{"number":19476,"title":"[eslint-plugin-react-hooks] Bug: rules-of-hooks false positive conditional call after foreach","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nWithin a function component, a `React.useState` after a foreach with a conditional inside triggers the rule, even if the foreach doesn't make the hook call conditional. \r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Here is a minimal reproduction: \r\n\r\n```javascript\r\nexport default function App() {\r\n  for (let a of []) {\r\n    if (true) {\r\n    } else {\r\n    }\r\n  }\r\n  React.useState();\r\n  return null;\r\n}\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nSandbox link: https://codesandbox.io/s/elated-sunset-wguwp?file=/src/App.js\r\n\r\nRemoving the `else` block or the `for ... of` both cause the error to not present. \r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nESLint throws a build-time error: `React Hook \"React.useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return? (react-hooks/rules-of-hooks)`\r\n\r\n## The expected behavior\r\n\r\nThere is no error because `React.useState` is not called conditionally.","state":"open","updated_at":"2021-12-10T08:58:50Z","created_at":"2020-07-28T18:40:51Z","creator_user_login":"likuilin"}
{"number":19474,"title":"Bug: Constraint Validation API not reflected on Textarea's value attribute change","body":"Hi,\r\n\r\nthank you very much for what you do and you've been doing so far.\r\n\r\nI've been working on some form validations via the [Validation Constraints API](https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation) and I've noticed that `event.target.validity` read-only object doesn't get updated and is always valid although some constraints are set when the `value` attribute is set to the `Textarea`.\r\n\r\nOn the other hand, when `value` is passed as `children` `validity` gets updated as expected but I'm being warned to `Warning: Use the defaultValue or value props instead of setting children on <textarea>` \r\n\r\n\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\nHere's how you can reproduce:\r\n\r\n1. setup this basic _app_ component with one `Textarea` element, set some constraints and add the `value` attribute as you normally would on any form.\r\n\r\n2. add another `Textarea` element but instead of passing value as an attribute pass it as `children` _see_ code below\r\n```\r\nimport React, { useState } from 'react';\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    first: '',\r\n    second: '',\r\n  });\r\n\r\n  function handleTextChange({ target }) {\r\n    const { name, value, validity } = target;\r\n\r\n    setState({\r\n      [name]: value,\r\n    });\r\n\r\n    console.log(`${name} validity:`, validity);\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <textarea\r\n        name=\"first\"\r\n        placeholder=\"First\"\r\n        value={state.first}\r\n        onChange={handleTextChange}\r\n        required={true}\r\n        minLength={10}\r\n      />\r\n\r\n      <textarea\r\n        name=\"second\"\r\n        placeholder=\"Second\"\r\n        onChange={handleTextChange}\r\n        required={true}\r\n        minLength={10}\r\n      >\r\n        {state.second}\r\n      </textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n   \r\n2. Open your console\r\n3. Type at least one character into the first `Textarea` _see_ screenshot\r\n![Capture d’écran 2020-07-28 à 15 43 33](https://user-images.githubusercontent.com/8101889/88674309-f2f01880-d0e9-11ea-944b-a524b39fd749.png)\r\n\r\n4. Type at least one character into the second `Textarea` _see_ screenshot\r\n![Capture d’écran 2020-07-28 à 15 44 02](https://user-images.githubusercontent.com/8101889/88674323-f71c3600-d0e9-11ea-9bc4-443f613ca491.png)\r\n\r\n## The current behavior\r\nYou'll notice that the first `Textarea` ignores the validation constraints set\r\n\r\n## The expected behavior\r\nValidation constraints should be set and field should be invalid\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## Link to code example\r\nPlease find sample code at https://github.com/tdiluzio/react-dom-textarea-bug\r\n\r\n## Demo\r\nHere's the URL to the demo https://tdiluzio.github.io/react-dom-textarea-bug/\r\n\r\n","state":"open","updated_at":"2022-12-09T23:18:19Z","created_at":"2020-07-28T14:17:45Z","creator_user_login":"tdiluzio"}
{"number":19419,"title":"Bug: MouseEnter does not fire when coming _from_ disabled elements","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/eager-euler-c72fw?file=/src/App.js\r\n\r\n1. move from a disabled element to an element with a `mouseenter` listener.\r\n2. `mouseenter` does not fire\r\n\r\nLink to code example: https://codesandbox.io/s/eager-euler-c72fw?file=/src/App.js\r\n\r\n\r\n## The current behavior\r\n\r\n`mouseenter` does not fire because React calculates mouseenter/leave based on the relative element of the opposing event.\r\ne.g. `mouseenter` calculated from the `mouseout` on the button. Browsers do not fire pointer events on disabled elements\r\n\r\n\r\n## The expected behavior\r\n\r\n`mouseenter` should fire\r\n\r\n\r\nPrevious issue: https://github.com/facebook/react/issues/4251","state":"open","updated_at":"2021-04-02T19:00:52Z","created_at":"2020-07-20T17:18:11Z","creator_user_login":"jquense"}
{"number":19416,"title":"Should act() warnings be deduplicated by component stack?","body":"React version: `16.13.1` (latest) and `0.0.0-7f28234f8` (next)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create component that has multiple effects (i.e. `useEffect` calls)\r\n2. Render component in a jest test\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/long-sound-xhe5w?file=/package.json\r\n\r\n## The current behavior\r\n\r\nA error is logged for each call of `useEffect`.\r\n\r\n## The expected behavior\r\n\r\nAn error per component calling `useEffect`.\r\n\r\n## Context\r\n\r\nCurrent errror:\r\n```\r\nWarning: An update to Component ran an effect, but was not wrapped in act(...).\r\n\r\nWhen testing, code that causes React state updates should be wrapped into act(...):\r\n\r\nact(() => {\r\n  /* fire events that update state */\r\n});\r\n/* assert on the output */\r\n\r\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act\r\n    at Component (https://xhe5w.csb.app/src/index.test.js:23:20)\r\n    at App (https://xhe5w.csb.app/src/index.test.js:35:20)\r\n```\r\n\r\nThe prescription is to wrap the update in act(). The warning may be unintented because a component with an effect rendered unexpectedly. But due to the rules of hooks it's unlikely that we remove a `useEffect` call: It's easier to prevent rendering a component (wrong branch logic, return early etc) than preventing an effect (which requires moving it to a component we render conditionally).\r\n\r\nFrom my experience most of these cases come down to adding an `act()` and not changing component implementation. In these cases firing errors for each effect makes the console output unreadable. Especially if you compose custom hooks and end up with 4+ effects per component.\r\n\r\nAn alternate solution would be to only fire an error if the effect was actually scheduled (see #19318).\r\n","state":"open","updated_at":"2022-04-12T16:53:24Z","created_at":"2020-07-20T12:52:06Z","creator_user_login":"eps1lon"}
{"number":19406,"title":"Bug: Updates to keyed lists break FLIP animations when they occur mid-animation","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open code example below\r\n2. Observe animation\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n[Flems](https://flems.io/#0=N4Igxg9gdgzhA2BTEAucD4EMAONEBMQAaEAMwEskZUBtUKTAW2TQDoALAF0fmPSk6IBqEAB4ARgFdOnaAAJy+ALwAdELIDmGpGoB8AFQhakogPRSZ0XSqij85AG5yYnAJ5JVIezGxZXKUiQADz0bOTlRSXgFZTVsACdEBz1ReHJdAAYzNN1U9IBGbPS83QAmItycgGYKkoAWWpyAVkb0gDZW3QB2WtMo6yhwyOjFT0wockZMQRS++AGhqJjPKEQgzhScrNMcksKd4pzyg8r0mpP6zpaLnI6b9J6LuYGzewddPjwkME5yaGo0BkUBkALRNFBtEAAXyI9CYLBArAAVtQSJABEJOCJ0S45ONJtNEAAlCAQThyJRyfAQMCSZgCVgaRCcACiSHpnAAQq4AJL4AAUanxUxmIAAlDYkOSHJh4JJEDAKXIAILxeKYVysUjxCCMfnAJBQDScdgoOQADhhcn5AH0iAoxRTdA6bDZSJIoD8-oNElB8Ih4vzHcAwnIiYhMD8ACIAeQAsqxff7A6HwjK5QrWFNsPzyE6wxGfqwwIlCWzEBzBSA0mp7cAANaIfwKK3kMVioipvETEXE0kbQZyCVQKGuqBShQY+LppV4Tj6SaICDSfmSbD4QmciD4Vz2poZDLDt0er3yNcbwRbndBuQhwfkKczylzhfMZecVfrzfb3dyfeH0McXJBIkiVdN5RgUNTFMOQuE4XAUGgoRWAAd3IetyGwAhyEwVgIHiDRTDQjDTAAMXIGB2ADABSFlSmo80MmogBOKoAE1CRgG1KMkUhAkQQD-nJVZ1jA2UIKVECHFYGA0jARAg1DUh8OtCc80pETOFYQ1jXYOQQTkfIAG4FDkZ0MhM8gQRBYMuyAuQkSVONpnYLV4FJQNnJNRNxmpPVHQAKmtPMAGpDPbOyhLkQRGGwJVNJoJEAF0uwS5L4rWTgaHIFLB3CBKcqVGLsFDUcoFDRIAEcIM4ZUe2mb1SPVZh+RvJRnTvcJwnsqSABkKPJSlqVpDlGWZcsOW5PkqyktQxWLdhKHwAA5bcFUi2BhMy-rcSGmk6UxMbWXZTEpoFNRNLmhaltW-1IPKvK5Gggt8OTOREBOgRFQfORYzjLtlPiVTmVMykLNM0Q5Ck7ShF0yyQpC2zHvCPqBuypLWEEdYAGFoEEARJMSBx0a7MqurkQHgfJdS5HBvNIc0mGjRNeHEdvLt8u2tGcsxzLcYxAmNMyknHrKjbcSkibFUpVV1U1bVdX5YVCRJMlrvgFa1pgYdya7Z7yPiFxxfJChDc4AAFTBfUG7sCUEVWtKZLllz9B8NGxtJMXDH5FMe+zTd2qGialrMcH5RB8068m5HssBFo1pVECOrcPXsI0PfIL3EB9nXo8SThJHiQYo+j6KIGwM046WzHy-0inyDNy3rZr7BO2RrqkFIThK-j-AYa7uuA4tq3Ds7zg29LsmuqhI9HqTANfb1mDeswXEwp5KAHADAdyfsrAXCbzElWV+3+2Tl20-dz2BG9j9c+6qLGAgLf8ClwmkhDih4EEQNw-tNtI4cxjlFfeNsk5OxTq7dO19OC319qXey+AghKiHujfu5IDL8lAeguuoDD4MjHvfLqiDXAoIbi4NBsg4qYOwVQ3Bq9h7NyoUQ8I5BSDWiQRSJQYM5AADJeFUlIdwsGjp86F0GKQWUeAgFJxcO4JOnB1SwEBowJUAADRR4xZKEn5AAEmAEgqE2AghEH0TuIxQQxRqJkTJNwSBMZKJgOQX40AoyFwavISkagMiQRAEAsRRdorxHlKTWe5N9b4XknIRIII-Dvi7MNA6DJxA-jwnxOcAAJRA5ANBcDHOEmC5s-Bdifi-T++EWSRnYK1RA-9HTtXZu3WOsp4DiEjPWJUbUOpAPCEnRIpTEAsi3gIHa+MF5qE0bAZx3ohD4FrDHFpbSwD1ntJI+AeAWFdSTmAfeMBRmJgrM-BSEzHHTOgHNIBU9ybbN2fszA+BzrqFOS48q4obH3NfsMzgoyhDjKeVos5qw-TzLAIs9pqypGIE2bIuxCjHEqMTrY+RDiAUvLceqF5SoADkWLQmlWHGLP0+1RpOwmqdXkAosWaG0IgLF81oA7PIMszp9Tun3nYbmR8soka7yQFbV8S4VwPh-umIhwqAxPjkFAKI8BSrvXWRHEuchzzfmvLnKeOYqVGBpVi-+XLogAEINIyoJWOeegYxR8EgLFSgAZUDSvgPAGEcJmAiGLDAVE-B8ZYjYJMpxmKo5+sBWaUoio-UqKMjYKEnwPrZxeQCEA+QUD5CaNCJKJA0hQHrACOgIAGCurQKWIs-ot7uWwKNFEfBC68DQHBBC0EPTYHrBoYsupTBFs4AAAXyG0Vg+Qqh9r6IwfA7bCxaRLR9cuFbPVuCwiIGAJZMJYmdXm+EIgO0gj8qwCdZbp1VviDWkAdaYCIT6FAJtLbrWjsjJwTdupu29v7YOukI6N1bp3VOw6laSCzoRAu+IS601QiAA)\r\n\r\n## The current behavior\r\nAnimations are choppy\r\n\r\n## The expected behavior\r\nAnimations are smooth like in [this example](https://flems.io/#0=N4Igxg9gdgzhA2BTEAucD4EMAONEBMQAaEAMwEskZUBtUKTAW2TQDoALAF0fmPSk6IBqEAB4ARgFdOnaAAJy+ALwAdELIDmGpGoB8AFQhakogPRSZ0XSqij85AG5yYnAJ5JVIezGxZXKUiQADz0bOTlRSXgFZTVsACdEBz1ReHJdAAYzNN1U9IBGbPS83QAmItycgGYKkoAWWpyAVkb0gDZW3QB2WtMo6yhwyOjFT0wockZMQRScrNMcksKF4pzylcr0mo36zpadnI6D9J6dvvgBoaiYzyhEIM5Z9PnFnOXX9PWP3W3vhuPdPtvkdvqdFucBmZ7A5dHw8EgwJxyNBqGgqih8hk6iAAL5EehMFggVgAK2oJEgAiEnBElJccnGk2miAAShAIJw5Eo5PgIGBJMwBKwNIhOABRJCCzgAIVcAEl8AAKNSMqYzEAAShsSE5YEwYHYBAliEYMC5cgAgvF4phXKxSPEIIxFarmWyOawDZR8AA5CD4RAwLVQHUKKnxByYaLcvCcfSTRAQaSKyTYfDM6X+1xEORNDIZYM2UiSKCI5GDRJQAPxRUauTAMJyUgQeJyRV0zmISVyCCkOR6g1GyVBhkTNWs9mcVg4bBCfAAYXY3sVXZNwZxNiLJbL8lT6cEmfwrlr9cb5HDkejzlF8eYSc4KbTGazObzBc3g37KM5CSSxtN5oDoa+D-jAjYdnIdwPKBgH6sBMHcr+DigawMBpGAiC1o2pimHIXCcLgKA4UIrAAO7kAA1uQs72JgrAthopjkVRpgAGLkDAhrxAApGKpTcQAHBk3EAJxVAAmsyMAAPqcZIpCBIgjbNq2iqhuQ5pQeKw6sEgUAaJw7ByAAtHI+QANwKHIuhyBklnkMZxl1g2n7hBBJLmgAstM7D2vA7I1t5hmsDaVZOieABUbYaQA1GZGrBuEbnfnIgiMNgmn3NpJowDQJIALqNuEWmgXl+WZdBw40OQhWuZBWWlTV5ppdgjYblAjaJAAjpIgacBaY7TOWrE2swionkoNkuUlX6wD+iQOAAMhxnLcry-JSsKor-tSsoKsqIBIWoGqeku8C+v6gZFbN9Jact9JrXyArUlt2VSntSpqFpx2nd6foBmBHV1Thcgsom8TVnIq5Sma55yAAIgA8p510qW26nmnZVmiHISEoXpBnsPZMUxc513hEh92cNV+WsIIDzztAggCOaeNVTVdNZYzVICNd7Woy26OilZ3JYxpOMlTpBOGcTpOnnVxVZVTNOcwzTPUhVb25Rz9OcNzzOPHV-PA7h7HxC410QRQ5ucAACpglaraOTKCO6U4ijKSZVueGjzmk1Jg4iWF1Vb5A26zC0oVM2ArlyU3kzdupnfg5qIK9mYlvY+l++QAeIEHiUzXIiScJI8SDNNRfhLI2AoP2yd0xAGWmdbLj247jfYEQCfhEgpCcHXXrnbpiD9yZTZh23DsvX3nDdwrcjtTNOKFnVlbVsH10g4tmD0nFcpQA4iDxIbM0QVgU+O+arqu5O6de1nvv+wIgcPoXyVzXIjAQEfIHDhHf4dIUHgIIGsK4czkDrJNeWVdz67ydmnD2GdvbZ2fpwV+wdYEpXwEEc0rdqYc1nuPNS8CR5j1MhfO208hSz3fklCCR48GTwIbTGuxDKGd3HpQ9uL0a50PCOQPsiocFciUKLOQAAyCRPJXCiNFnWEuZdBikCjHgBOacXDuDTpwUKMAVKMHNAAAx0eMNCzJFQABJgA4JxNgIIRArFHlsUEDUhj1GoTcEgOmujyBImgPDMuQ15DcjUBkMCIAE6KPLqleIvU+arxmiDViLYMLF0QMZPw95rrrWekKcQWZ6IKVjAACUQOQDQXAPyJNwrbPw11v6-xQipMUcFxqIAgVA+OC8IJ6ngPAcQ+oKLmgml0qu4Q06JAaYgMUR8BBUyEMfA6JjYC+PLHONQOZen9MGTmFR8A8D8KSmnMAF8YBUxCiaH+mE1DLJgKs6Ax0E5LyLsc055zMD4E+uoHxfiOqancR8kCszODzLuDWG5Py1lVg2f2KM2ywAUV2aoxAhyNGeO0bo-RqcPFaO8aY+5UAAk2l+eaAA5KS+JbV1wfhBgAVSRGkNwchxC+MBjkzaHsdoCA+oqUlmhtCIFJSdaAJzyAIuGZ0mBCghHnlAZeMmIckAO1vImZMsrj7yuuuqiMUZNJRHgG1KG+zEBSvCHuZ8R5MGL0bDHPlRgBWkogReXVABCbkUB9XUqBuvRZwY+CQHSpQY+IgBniC7LifEIAGDMBEJ6GA5J+AG1jbcglUqU2-LrqUM0tz9HmRsDiOEq4dywBEPkDETRcT5RxEAA)\r\n\r\n-----\r\n\r\nContext: this bug is far from unique to React: https://twitter.com/isiahmeadows1/status/1284726730574315522\r\n\r\n**Edit:** Also relevant: https://github.com/whatwg/html/issues/5742","state":"open","updated_at":"2021-02-14T11:06:50Z","created_at":"2020-07-19T05:56:32Z","creator_user_login":"dead-claudia"}
{"number":19404,"title":"Bug: firefox 'select all' menu item not firing select events on textareas","body":"React version: 16.3.1\r\nFirefox version: 78.0.2 (OSX 10.15.5)\r\n\r\n## Steps To Reproduce\r\n\r\nMake a `textarea` (with some text) and listen for select events ( `onSelect={ ...}` ).\r\nUse the firefox browser's 'select all' menu item (not the keyboard shortcut) to expand your selection area.\r\n\r\nLink to code example:\r\nhttps://codepen.io/jedierikb/pen/pogQVLo\r\n\r\n## The current behavior\r\nFirefox browser's 'select all' menu item (not the keyboard shortcut) does not fire a `select` event.\r\n\r\n## The expected behavior\r\nFirefox browser's 'select all' menu item should fire a `select` event on textareas.\r\nWorks in Chrome and Safari.\r\nAlso works in Firefox with an ordinary event listener.  See https://developer.mozilla.org/en-US/docs/Web/API/Element/select_event\r\n","state":"open","updated_at":"2020-12-25T14:06:58Z","created_at":"2020-07-19T02:37:44Z","creator_user_login":"jedierikb"}
{"number":19377,"title":"Run DevTools tests against npm releases","body":"WIP\r\n\r\nAdds a CircleCI job that runs the DevTools tests against a given version of React.","state":"open","updated_at":"2021-07-15T00:47:30Z","created_at":"2020-07-15T19:48:19Z","creator_user_login":"acdlite"}
{"number":19371,"title":"Setup CI infra to run DevTools tests against multiple React versions","body":"PR #19108 caused some Suspense-related DevTools regressions (more info available on #19368) which we did not catch because of the fact that DevTools tests are only run against the version of React in master.\r\n\r\nWe should follow the precedent of the [regression fixtures tests](https://github.com/facebook/react/tree/master/fixtures/devtools/regression) and have CI run DevTools tests against multiple React versions, including v15, all v16 minors, and the current HEAD of master branch.\r\n\r\nSetting this up will involve several things:\r\n* Infra to checkout older React packages and run tests against them.\r\n* Some form of gating so that we can account for expected differences in Store snapshots between React versions.\r\n* Some form of gating so that we can avoid running tests against invalid combinations of features and versions (e.g. don't test for `Suspense` in a version of React that didn't include that component yet).\r\n\r\n---\r\n\r\n## Which React versions should we test?\r\n\r\nIn addition to testing against the latest React version in source, I propose that we should also test every minor version going back as far as we support (e.g. starting with v15). We could automate this process like so:\r\n```js\r\nconst {exec} = require('child_process');\r\nconst semver = require('semver');\r\n\r\nconst versions = {};\r\n\r\nexec('npm view react versions --json', (error, stdout, stderr) => {\r\n  if (stdout) {\r\n    const json = JSON.parse(stdout);\r\n    json.forEach(versionString => {\r\n      if (semver.valid(versionString)) {\r\n        if (semver.gte(versionString, '15.0.0')) {\r\n          const {major, minor, patch} = semver.parse(versionString);\r\n\r\n          // Filter out RCs and CI-published daily releases.\r\n          if (`${major}.${minor}.${patch}` === versionString) {\r\n            // Store the last patch for each minor.\r\n            // This relies on the view command returning a sorted releases list.\r\n            const key = `${major}.${minor}`;\r\n\r\n            versions[key] = versionString;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // The \"versions\" object now contains all versions we should test again.\r\n  }\r\n});\r\n```","state":"open","updated_at":"2022-03-30T14:05:56Z","created_at":"2020-07-15T15:26:15Z","creator_user_login":"bvaughn"}
{"number":19345,"title":"Support iframe for React-Devtools browser extension.","body":"<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\nThis pull request adds a workaround for the React-DevTools iframe support issue ( #18945).\r\nIt contains the modified [regression test](https://github.com/facebook/react/blob/d897c35ecfb7471b55e41933fd4d993b98dbf600/fixtures/devtools/regression/server.js).\r\n\r\nFor this to work `\"all_frames\": true` should be set in the browser extension, which @dmail had mentioned.\r\nBy adding the below code inside an iframe, fixes this issue:\r\n\r\n```javascript\r\nfor (const key in __REACT_DEVTOOLS_GLOBAL_HOOK__) {\r\n      __REACT_DEVTOOLS_GLOBAL_HOOK__[key] = parent.__REACT_DEVTOOLS_GLOBAL_HOOK__[key]\r\n}\r\n```\r\nI don't clearly understand the reason why the below code doesn't work, So, I need @bvaughn help to better understand the reason behind this.\r\n\r\n```javascript\r\n__REACT_DEVTOOLS_GLOBAL_HOOK__ = parent.__REACT_DEVTOOLS_GLOBAL_HOOK__; \r\n```\r\n\r\nBefore:\r\n![react_devtools_iframe_](https://user-images.githubusercontent.com/19655674/87407845-53f2f900-c5e0-11ea-8409-d71a08f23c89.png)\r\n\r\nAfter adding the workaround:\r\n![react_dev_tools_issue](https://user-images.githubusercontent.com/19655674/87407828-4fc6db80-c5e0-11ea-88f9-6674c8c1a7c2.png)\r\n\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n\r\nI have modified the regression test, So, that you can test this workaround.\r\nYou can run the regression test with the below commands:\r\n\r\n1. `node ./fixtures/devtools/regression/server.js`\r\n2. `cd packages/react-devtools-extensions/`\r\n3. `yarn build:chrome`\r\n4. `yarn test:chrome`\r\n5. Open `localhost:3000` in the browser.\r\n\r\n","state":"open","updated_at":"2022-01-09T00:41:57Z","created_at":"2020-07-14T09:22:02Z","creator_user_login":"Reflex-Gravity"}
{"number":19246,"title":"Bug: missing interactions in profiler","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nThere's a few things involved here, so it's hard to describe the exact steps, but here's a reduced test case:\r\n\r\n- Code https://stackblitz.com/edit/react-profiler-missing-interactions?file=index.tsx\r\n- Run the code https://react-profiler-missing-interactions.stackblitz.io/\r\n\r\nThe test case has a parent and child component, both of which are dispatching an action to Redux and subscribing to Redux state. Each action dispatch is wrapped in `unstable_trace`.\r\n\r\nNote I did try to reduce the test case further to see if I could reproduce without Redux and React Redux, but to no avail. However, due to the fact that the state updates occur—we're just missing the interactions—I believe this problem is not due to either of those libraries.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nBoth state updates apply (parent _and_ child), but the profiler only seems to capture the interactions for the child, not the parent. The parent interaction is missing.\r\n\r\nThe test case is logging interactions to the console so you can verify there.\r\n\r\nHere's a screenshot to show what I mean. I took this screenshot after using the profiler's \"reload and start profiling\" feature:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86485667-38226400-bd51-11ea-9ac4-4d216bc7d1dc.png)\r\n\r\n## The expected behavior\r\n\r\nNo missing interactions\r\n\r\n---\r\n\r\nPotentially related: https://github.com/facebook/react/issues/15566","state":"open","updated_at":"2020-12-25T15:42:20Z","created_at":"2020-07-03T16:25:36Z","creator_user_login":"OliverJAsh"}
{"number":19219,"title":"Profiler dev tools suggestion: in \"ranked\" view, add a way to group/aggregate component instances","body":"(Deleted template as this is a suggestion, not a bug.)\r\n\r\nIn the profiler's \"ranked\" view, when there are many instances of a single component, there's no way to answer the question \"how much time did this component spend rendering _across all instances_.\r\n\r\nFor example, here I have a component called `PhotoLink` which is used in many places across the tree. The \"ranked\" view shows us that each render is very cheap, but it does not tell us the aggregate cost of this component.\r\n\r\nPerhaps we could add something to dev tools to group/aggregate component instances?\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86143237-170d0980-baec-11ea-891e-636bbe73d3f5.png)\r\n","state":"open","updated_at":"2020-07-06T19:54:50Z","created_at":"2020-06-30T15:10:54Z","creator_user_login":"OliverJAsh"}
{"number":19177,"title":"Bug: I want to confirm why the parameter of currentTime is missing in Line 68 of schedule.js source code.","body":"React@16.13.1 source code\r\nParameter of currentTime is necessary for the function of handleTimeout. However, this parameter is not inputted under compatibility conditions.\r\n\r\n```\r\n requestHostTimeout = function (cb, ms) {\r\n    _timeoutID = setTimeout(cb, ms);\r\n  };\r\n```\r\n\r\n\r\n```\r\nrequestHostTimeout(handleTimeout, startTime - currentTime);\r\n```\r\n\r\n```\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      var firstTimer = peek(timerQueue);\r\n\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n```","state":"open","updated_at":"2020-12-25T13:08:10Z","created_at":"2020-06-23T03:43:01Z","creator_user_login":"ABCDdouyaer"}
{"number":19162,"title":"Hiding MUI Components inside React Developer Tools","body":"Hello, recently we've overhauled a client's website with the usage of [Material UI](https://material-ui.com/). It's been an enjoyable experience, however one thing that really irks me - given the project is pretty large and there's multiple people working on it, sometimes it gets chaotic which component is exactly what and you need to find out which component you should be working on.\r\n\r\nMy general fallback was using the [React Develeloper Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) extension, however given MUI consists of ready-made JSX components, it essentially spams and halts the usefulness of the 'Components' tab.\r\n\r\n![image](https://user-images.githubusercontent.com/17268815/85140844-25cf0300-b246-11ea-98ec-e0d37aea2707.png)\r\n\r\nIs there perhaps any way that would allow for filtering of specific packages / jsx elements inside the React Developer Tools?\r\n\r\nI know I could technically user regex to filter out a list of all the known MUI Components, but that seems bit overkill.  I sadly suspect such a thing is not supported, but you never know unless you ask.\r\n","state":"open","updated_at":"2020-09-10T18:14:17Z","created_at":"2020-06-19T14:12:47Z","creator_user_login":"samuelhulla"}
{"number":19150,"title":"Proposition about onInput/onChange","body":"Hi :)\r\n\r\nIn ReactDom we can find:\r\n\r\n``` javascript\r\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {\r\n\tif (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {\r\n\t\treturn getInstIfValueChanged(targetInst);\r\n\t}\r\n}\r\n```\r\n\r\nWhy not adding an extra condition here like:\r\n``` javascript\r\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {\r\n\tif ((!React.$$useRealOnChange && topLevelType === TOP_INPUT) || topLevelType === TOP_CHANGE) {\r\n\t\treturn getInstIfValueChanged(targetInst);\r\n\t}\r\n}\r\n```\r\n\r\nBy checking `React.$$useRealOnChange` in this function, a user could add this line:\r\n``` javascript\r\nReact.$$useRealOnChange = true;\r\n```\r\nanywhere in their code (before or after including ReactDom) to find back the more native behavior.\r\n\r\nI'm sorry in advance if this proposition has already been proposed","state":"open","updated_at":"2023-01-08T06:10:18Z","created_at":"2020-06-18T04:20:35Z","creator_user_login":"mr21"}
{"number":19078,"title":"Bug: Form reset lost checkbox onChange event","body":"Hi, I use checkbox uncontrolled mode, onChange in form reset after, lose onChange.\r\n```js\r\n<input type=\"checkbox\" onChange={onChange} />\r\n```\r\n\r\nbut use add ref.addEventListener('change', onChange) is ok\r\n```js\r\nconst checkRef = useRef<HTMLInputElement>();\r\nuseEffect(() => {\r\n        if (checkboxRef) {\r\n            checkboxRef.current.addEventListener('change', onChange);\r\n        }\r\n    }, []);\r\n\r\n<input type=\"checkbox\" ref=\"checkboxRef\" onChange={onChange} />\r\n```\r\n\r\n\r\nReact version: 16.13 and old \r\n\r\n## Steps To Reproduce\r\n\r\n1. checkbox => checked\r\n2. form reset\r\n3. checked  => checked\r\n\r\nLink to code example:\r\n[not react is ok](https://codepen.io/imagine10255/pen/ExPaLOJ?editors=1111)\r\n[reset is lose target onChange](https://codesandbox.io/s/affectionate-brook-96dw9?file=/src/App.js)\r\n\r\n## The current behavior\r\n1. checkbox => checked (target onChange)\r\n2. form reset\r\n3. checked  => checked (lose target onChange)\r\n\r\n## The expected behavior\r\n1. checkbox => checked (target onChange)\r\n2. form reset\r\n3. checked  => checked (target onChange)\r\n","state":"open","updated_at":"2020-06-25T23:48:12Z","created_at":"2020-06-05T08:37:31Z","creator_user_login":"imagine10255"}
{"number":19056,"title":"[eslint-plugin-react-hooks] Add whitelist for functions that are not to be considered as callbacks","body":"I have a library to hook mobx with react: https://github.com/xaviergonz/mobx-react-component\r\n\r\nHooking is usually done via a wrapper method named \"mobxObserver\" and is used like this:\r\n\r\n```ts\r\nexport const MyComponent = memo(\r\n    mobxObserver(\r\n        (props: IMyComponentProps) => {\r\n          // React.useLayoutEffect(...) // will warn\r\n        }\r\n))\r\n```\r\n\r\nhowever as soon as a hook is used inside the component the eslint rule-of-hooks will warn with:\r\n```\r\nReact Hook \"React.useLayoutEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.\r\n```\r\n\r\nIf a named function is used it works, but it is far from ideal (e.g. name repetition):\r\n\r\n```ts\r\nexport const MyComponent = memo(\r\n    mobxObserver(\r\n        function MyComponent(props: IMyComponentProps) {\r\n          // React.useLayoutEffect(...) // won't warn\r\n        }\r\n))\r\n```\r\n\r\nWould it be possible to have a custom whitelist of methods that are allowed to wrap the functional component without raising this warning? (same as React.memo is whitelisted right now)\r\n\r\nE.g. something like:\r\n```\r\nallowedWrappers: [ \"mobxObserver\" ] \r\n```\r\n\r\nOr even better, do not consider a callback something that is just wrapping the functional component, but I'm not sure if that's feasible.\r\n\r\nThanks.","state":"open","updated_at":"2022-11-12T13:56:04Z","created_at":"2020-05-31T17:57:36Z","creator_user_login":"xaviergonz"}
{"number":19034,"title":"exhaustive-deps: custom effects should support async functions","body":"We have a custom hook, `useAsyncEffect`, which works like `useEffect` except it accepts an async function. We would like to check the deps of this function using `exhaustive-deps`, but that lint rule is going a bit beyond its name and also checking the type of function we pass.\r\n\r\nThe `exhaustive-deps` rule can't know anything about the semantics of arbitrary third-party hooks, so I think it's overstepping its bounds a bit (at least if you take the name \"exhaustive deps\" literally)\r\n\r\nReact version: 16.13.1\r\neslint version: 7.0.0\r\neslint-plugin-react-hooks version: 4.0.3\r\n\r\n## Steps To Reproduce\r\n\r\nSource:\r\n\r\n```\r\nimport React from 'react';\r\nimport { useAsyncEffect } from './utilities/react';\r\n\r\nfunction MyComponent() {\r\n  useAsyncEffect(async () => {\r\n    await Promise.resolve()\r\n  }, []);\r\n  return <div />;\r\n}\r\n```\r\n\r\n`.eslintrc.json`:\r\n\r\n```\r\n{\r\n  \"parserOptions\": {\r\n    \"ecmaVersion\": 2020,\r\n    \"sourceType\": \"module\",\r\n    \"ecmaFeatures\": {\r\n      \"jsx\": true\r\n    }\r\n  },\r\n  \"plugins\": [\"react-hooks\"],\r\n  \"rules\": {\r\n    \"react-hooks/exhaustive-deps\": [\r\n      \"error\",\r\n      {\r\n        \"additionalHooks\": \"^useAsyncEffect$\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThen run:\r\n\r\n```\r\nnode_modules/.bin/eslint --ext jsx src/file.jsx\r\n```\r\n\r\n## The current behavior\r\n\r\n```\r\n  5:18  error  Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\r\n\r\n<snip>\r\n\r\n✖ 1 problem (1 error, 0 warnings)\r\n```\r\n\r\n## The expected behavior\r\n\r\nThere should be no lint error","state":"open","updated_at":"2022-08-11T15:38:35Z","created_at":"2020-05-28T14:10:11Z","creator_user_login":"whatisaphone"}
{"number":19016,"title":"Bug: Mouse leave event not fired after removing portal","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to https://1r4ib.csb.app/\r\n2. Open dev tools to see console logs\r\n3. Click on \"Toggle portal\"\r\n4. Leave the popover by moving the mouse out on the lower side.\r\n5. See the logs: Only the portal mouse leave event is logged, not the one from the `<App />` component.\r\n\r\n![Kapture 2020-05-27 at 13 21 52](https://user-images.githubusercontent.com/4038316/83013321-1d0b5880-a01d-11ea-85ba-f592a7027ff6.gif)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/condescending-wilson-1r4ib?file=/src/App.js:890-951\r\n\r\nI noticed this only happens if the event handler that triggers the closing of the popover is registered on a DOM node that is nested within another DOM node within the popover. If you \r\nswap the lines 35 and 36 everything works as expected.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe mouse leave event on the outer div of the `<App />` component is not fired.\r\n\r\n## The expected behavior\r\n\r\nThe mouse leave event on the outer div of the `<App />` component should be fired.","state":"open","updated_at":"2023-01-12T16:45:44Z","created_at":"2020-05-27T11:23:58Z","creator_user_login":"amannn"}
{"number":18986,"title":"Bug: Firefox: Autocomplete/Autofill still not working","body":"Description, steps to reproduce and sandbox example see #17022! \r\nThe native autocomplete function from firefox is still not working.\r\n\r\nThis also affects other frameworks (antd, material UI):\r\n* https://github.com/mui-org/material-ui/issues/16943\r\n* https://github.com/ant-design/ant-design/issues/21232\r\n\r\nIt would be nice if someone of the react community could give it a shot because I think that the native autocomplete is a very important UX feature. ","state":"open","updated_at":"2023-06-18T20:56:29Z","created_at":"2020-05-23T08:21:11Z","creator_user_login":"Hadsch"}
{"number":18965,"title":"Bug: React throws warning on browser default function","body":"I'm receiving the following \"Warning\"\r\n```\r\nWarning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.\r\n    in option (created by styled.option)\r\n    in styled.option (created by Menu)\r\n    in select (created by styled.select)\r\n    in styled.select (created by Menu)\r\n    in div (created by styled.div)\r\n    in styled.div (created by Menu)\r\n````\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1. create a select with options\r\n```\r\nreturn (<select>\r\n  <option>a</option>\r\n  <option selected>b</option>\r\n</select>);\r\n```\r\nas usecase: the selected property is defined outside the state of the select component, it is set by navigating the site. As of now it is only a warning, so it works if I use this, but the customer whom I build the application, has strict standards, so as for this warning, it kills the audit of the  application, even we stated that it is a React specific warning, not a standard, caused by some coding error.\r\n2. see the warnning whowing up *RED* in your browser that a simple already built-in function of all browser if overriden and damned eternally.\r\n\r\nCode does not have any outside dependencies.\r\n\r\n## The current behavior\r\n\r\nIt throws the warning in development.\r\n\r\n## The expected behavior\r\n\r\nIt is a standard behavior of all modern browsers, that you can tell the select dropdown or multiselect, that it has one ora other selected by code even from context.\r\n\r\nThis should not be a warning, as it is a w3c standard feature of the select dropdown. Please remove warnings and what-so-ever that you are forcing developers to do, to avoid using w3c standards.","state":"open","updated_at":"2020-10-28T13:47:33Z","created_at":"2020-05-20T21:20:02Z","creator_user_login":"welsen"}
{"number":18945,"title":"DevTools: Improve browser extension iframe support","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nWhen react is inside an iframe, chrome extension for react devtools fails to detect react.\r\n\r\nThis is because the extension sets `__REACT_DEVTOOLS_GLOBAL_HOOK__` only on the top level window. Apparently it's possible to have `__REACT_DEVTOOLS_GLOBAL_HOOK__` on iframes too by adding `all_frames: true` in extension [manifest.json](https://github.com/facebook/react/blob/c390ab3643612dc08ca4bebadc5b0377e9e7eb79/packages/react-devtools-extensions/chrome/manifest.json#L49). It was done by redux devtools extension in https://github.com/zalmoxisus/redux-devtools-extension/pull/56.\r\n\r\nHave you considered adding `all_frames: true` to chrome extension ?\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a file `react-main.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\r\n    <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\r\n  </head>\r\n  <body></body>\r\n</html>\r\n\r\n```\r\n2. Create a file `react-iframe.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head></head>\r\n  <body>\r\n    <iframe src=\"./react-main.html\" />\r\n  </body>\r\n</html>\r\n```\r\n3. Open `react-iframe.html` in chrome\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n![react-devtools-not-detected](https://user-images.githubusercontent.com/443639/82196553-21879100-98fa-11ea-932b-b9f49a4079c7.png)\r\n\r\n## The expected behavior\r\n\r\n![react-devtools-detected](https://user-images.githubusercontent.com/443639/82196588-2cdabc80-98fa-11ea-925d-186e8c999f44.png)\r\n\r\nPull request: https://github.com/facebook/react/pull/18952\r\n\r\n\r\n\r\n","state":"open","updated_at":"2022-08-04T13:24:00Z","created_at":"2020-05-18T09:35:01Z","creator_user_login":"dmail"}
{"number":18940,"title":"Feature Request: <input type=\"textarea\" .../> ","body":"I'm delighted that you made it so `<textarea>` can take `value=` and `defaultValue=...` but what I really want is `<input type=\"textarea\">`.\r\n\r\nThat would make this use case more fun:\r\n\r\n    <input type={field.type} ...\r\n\r\nNo explanation necessary if you decide not to implement this. I've already made a wrapper class to solve my problem at hand.","state":"open","updated_at":"2020-12-25T14:07:04Z","created_at":"2020-05-17T11:41:47Z","creator_user_login":"JasonWoof"}
{"number":18908,"title":"Show better warning when <React.Fragment> is missing a key","body":"React version: 16.9.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Take an array of data, and render each item inside of `<React.Fragment></React.Fragment>`\r\n2. Load the page to and see the topmost line in the backtrace: `in Fragment (at App.js:6)`\r\n\r\nLink to code example: https://codesandbox.io/s/icy-rgb-wyuyk?file=/src/App.js\r\n\r\n## The current behavior\r\nThe warning says that a `<Fragment>` tag needs a key, but `<React.Fragment>` is the tag that actually needs a key.\r\n\r\n## The expected behavior\r\nAny line in this backtrace that's a `<React.Fragment>` should say `in React.Fragment` for clarity.\r\n\r\nI am suggesting this change because I have a component named `Fragment`, so when I saw a `<Fragment>` tag in the backtrace I thought my `<Fragment>` tag needed a key. But it turns out that `<React.Fragment>` needed a key. Since React does not prevent you from naming a component `Fragment`, it should correctly name `React.Fragment` in the backtrace.\r\n","state":"open","updated_at":"2020-12-25T13:08:25Z","created_at":"2020-05-13T14:59:21Z","creator_user_login":"jtrost"}
{"number":18873,"title":"Deprecate SyntheticKeyboardEvent.{charCode,keyCode,which}","body":"The following `KeyboardEvent` properties have been officially deprecated:\r\n\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\r\n\r\nReact should probably mark these as deprecated too, and issue warnings in development mode.","state":"open","updated_at":"2022-02-10T01:33:40Z","created_at":"2020-05-09T03:48:45Z","creator_user_login":"japgolly"}
{"number":18841,"title":"Bug: Error in useEffect is caught in ErrorBoundary, but still logs uncaught error to console in tests","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with a useEffect hook\r\n2. Render the component in an error boundary using `react-test-renderer`\r\n3. Throw an error synchronously in the effect callback (i.e. not in a promise callback)\r\n4. Observe the error in the console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/mpeyper/error-boundary-error-repro\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n> **When you first clone the repo, all the tests are being skipped.  This is to reduce the noise when observing the output.  Please remove the `.skip` from the tests to see the output.**\r\n>\r\n> Note that I have also used `react-error-boundary` for creating the error boundaries in the example repo to simplify the setup, but if you believe this is interfering with test, I'm happy to hand roll an error boundary instead.\r\n\r\nGiven the following two components, the way in which the error is being handled is inconsistent when using `react-test-renderer` vs. `react-dom` (via `@testing-library/react` in my example):\r\n\r\n```jsx\r\nexport function HasErrorInRender() {\r\n  throw Error(\"This error was expected\")\r\n}\r\n\r\nexport function HasErrorInEffect() {\r\n  useEffect(() => {\r\n    throw Error(\"This error was expected\")\r\n  })\r\n\r\n  return <p>This component has an error in an effect</p>\r\n}\r\n```\r\n\r\nWhen rendering with `react-dom`, both [the following tests](https://github.com/mpeyper/error-boundary-error-repro/blob/master/src/HasError.test.js#L7) pass, and produce the same output in the console:\r\n\r\n```jsx\r\ndescribe('@testing-library/react', () => {\r\n  test('should catch error in render', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    render((\r\n      <ErrorBoundary FallbackComponent={Fallback}>\r\n        <HasErrorInRender />\r\n      </ErrorBoundary>\r\n    ))\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n\r\n  test('should catch error in effect', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    render((\r\n      <ErrorBoundary FallbackComponent={Fallback}>\r\n        <HasErrorInEffect />\r\n      </ErrorBoundary>\r\n    ))\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n})\r\n```\r\n\r\nThe output they produce is:\r\n\r\n```txt\r\n  console.error node_modules/jsdom/lib/jsdom/virtual-console.js:29\r\n    Error: Uncaught [Error: This error was expected]\r\n        at reportException (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:209:9)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:237:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:292:31)\r\n        at beginWork$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:23203:7)\r\n        at performUnitOfWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22157:12) Error: This error was expected\r\n        at HasErrorInRender (/<REDACTED>/error-boundary-error-repro/src/HasError.js:4:9)\r\n        at renderWithHooks (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:14803:18)\r\n        at mountIndeterminateComponent (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:17482:13)\r\n        at beginWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:18596:16)\r\n        at HTMLUnknownElement.callCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:188:14)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:237:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:292:31)\r\n        at beginWork$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:23203:7)\r\n        at performUnitOfWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22157:12)\r\n        at workLoopSync (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22130:22)\r\n        at performSyncWorkOnRoot (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21756:9)\r\n        at scheduleUpdateOnFiber (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21188:7)\r\n        at updateContainer (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24373:3)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24758:7\r\n        at unbatchedUpdates (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21903:12)\r\n        at legacyRenderSubtreeIntoContainer (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24757:5)\r\n        at Object.render (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24840:10)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/@testing-library/react/dist/pure.js:86:25\r\n        at batchedUpdates$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21856:12)\r\n        at act (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom-test-utils.development.js:929:14)\r\n        at render (/<REDACTED>/error-boundary-error-repro/node_modules/@testing-library/react/dist/pure.js:82:26)\r\n        at Object.<anonymous> (/<REDACTED>/error-boundary-error-repro/src/HasError.test.js:15:5)\r\n        at Object.asyncJestTest (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:43:12\r\n        at new Promise (<anonymous>)\r\n        at mapper (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:73:41\r\n        at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n\r\n  console.error node_modules/react-dom/cjs/react-dom.development.js:19527\r\n    The above error occurred in the <HasErrorInRender> component:\r\n        in HasErrorInRender (at HasError.test.js:17)\r\n        in ErrorBoundary (at HasError.test.js:16)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nThis is somewhat expected when using `react-dom` and reflects the output one would see in the browser console if the some components were rendered in an app (you can run `npm start` in the example repo if you would like to observe this).\r\n\r\nHowever, where things start to get a bit strange is when the renderer is [replaced with `react-test-renderer`](https://github.com/mpeyper/error-boundary-error-repro/blob/master/src/HasError.test.js#L41) and the same tests are run:\r\n\r\n```jsx\r\ndescribe('react-test-renderer', () => {\r\n  test('should catch error in render', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    act(() => {\r\n      create((\r\n        <ErrorBoundary FallbackComponent={Fallback}>\r\n          <HasErrorInRender />\r\n        </ErrorBoundary>\r\n      ))\r\n    })\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n\r\n  test('should catch error in effect', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    act(() => {\r\n      create((\r\n        <ErrorBoundary FallbackComponent={Fallback}>\r\n          <HasErrorInEffect />\r\n        </ErrorBoundary>\r\n      ))\r\n    })\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n})\r\n```\r\n\r\nAgain both tests here do pass, but the output they produce is not the same.  When the first test (error in the `render` function) is run, it only produces the following output:\r\n\r\n```txt\r\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10141\r\n    The above error occurred in the <HasErrorInRender> component:\r\n        in HasErrorInRender (at HasError.test.js:52)\r\n        in ErrorBoundary (at HasError.test.js:51)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nAs you can see, the [frustratingly difficult to suppress](https://github.com/facebook/react/issues/15520) error log from the error boundary is present, but the long stack trace from the uncaught error that is present in the `react-dom` output is not.\r\n\r\nWhen the second test (error in the `useEffect` callback) is run, the output is:\r\n\r\n```txt\r\n  console.error node_modules/jsdom/lib/jsdom/virtual-console.js:29\r\n    Error: Uncaught [Error: This error was expected]\r\n        at reportException (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:209:9)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10021:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10073:31)\r\n        at flushPassiveEffectsImpl (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13345:9)\r\n        at unstable_runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/scheduler/cjs/scheduler.development.js:653:12) Error: This error was expected\r\n        at /<REDACTED>/error-boundary-error-repro/src/HasError.js:9:11\r\n        at commitHookEffectListMount (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10345:26)\r\n        at commitPassiveHookEffects (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10383:11)\r\n        at HTMLUnknownElement.callCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9972:14)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10021:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10073:31)\r\n        at flushPassiveEffectsImpl (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13345:9)\r\n        at unstable_runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/scheduler/cjs/scheduler.development.js:653:12)\r\n        at runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:1775:10)\r\n        at flushPassiveEffects (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13312:12)\r\n        at Object.<anonymous>.flushWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:14883:10)\r\n        at act (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:15001:9)\r\n        at Object.<anonymous> (/<REDACTED>/error-boundary-error-repro/src/HasError.test.js:67:5)\r\n        at Object.asyncJestTest (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:43:12\r\n        at new Promise (<anonymous>)\r\n        at mapper (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:73:41\r\n        at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n\r\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10141\r\n    The above error occurred in the <HasErrorInEffect> component:\r\n        in HasErrorInEffect (at HasError.test.js:70)\r\n        in ErrorBoundary (at HasError.test.js:69)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nNow, the uncaught error message is back, which is not what I would have expected.  Even more confusingly, when inspecting the stacktrace of the uncaught error, it has references to `jsdom` which I was of the belief was not a dependency of `react-test-renderer`.  I suspect that there is some `jest` and/or `jsdom` trickery going on to report the uncaught error, rather than `react-test-renderer` using it in some way, but I'm not familiar enough with any of them to know for certain.\r\n\r\nThe part that's has me the most perplexed is how the error boundary can intercept the error to pass into it's handler callbacks (surfaced in my example in `react-error-boundary`'s `FallbackComponent`) without catching the error, unless it is throwing it again after catching it, but then both tests would be producing the uncaught error output, right?\r\n\r\n## The expected behavior\r\n\r\nMy expected (and preferred) behaviour here would be for the the `react-test-renderer` test to only produce the error boundary error log and not have any additional uncaught error output.","state":"open","updated_at":"2022-08-01T07:18:19Z","created_at":"2020-05-06T12:50:33Z","creator_user_login":"mpeyper"}
{"number":18822,"title":"Add devtools \"Inspect React component\" to right-click menu","body":"Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).\r\n\r\nThe React devtools should have the same feature! It would be useful when debugging for sure.\r\n","state":"open","updated_at":"2021-02-18T17:09:26Z","created_at":"2020-05-04T22:50:47Z","creator_user_login":"sophiebits"}
{"number":18818,"title":"Bug: devtools \"rendered at\" for child components uses value of top component","body":"React version: 17.0.2\r\ndevtools version: 4.18.0-f58bbcf9a\r\n\r\n## Steps To Reproduce\r\n\r\n1. Record profiling session\r\n2. Goto flamegraph\r\n3. Click on a \"bar\" that's not the top-most\r\n\r\nLink to code example: https://codesandbox.io/s/vibrant-thunder-bm3so\r\n\r\n## The current behavior\r\n\r\n\"rendered at\" uses the value from the root component\r\n\r\n![devtools-profiler-rendered-at](https://i.ibb.co/pPfBCHM/devtools-profiler-rendered-at.png)\r\n\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nit should use the same value that is displayed in the tooltip. Otherwise I don't see much value in displaying it since I could just read the value directly from the root. I thought it was intended for very dense flamegraphs e.g.\r\n![Screenshot from 2020-05-04 19-53-53](https://user-images.githubusercontent.com/12292047/80996992-02402c80-8e41-11ea-9396-f3777c01cf4d.png)\r\n\r\n","state":"open","updated_at":"2022-01-13T16:30:03Z","created_at":"2020-05-04T17:58:37Z","creator_user_login":"eps1lon"}
{"number":18752,"title":"Bug: <iframe /> onLoad is not getting triggered after the reload triggered by moving the DOM Node","body":"When an `<iframe />` DOM Node is moved to a different place in the tree, Chrome triggers a reload. That reload does not notify event handlers registered via `onLoad=`. In other words:\r\n\r\n* If there is an event handler registered via `onLoad={myCallback}`, it **will not** be fired.\r\n* If there is an event handler registered via `iframe.addEventListener(\"load\", myCallback, false)`, it **will** be fired.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nOpen a code example below and move the iframe **down** using arrow button next to it.\r\n\r\nhttps://codesandbox.io/s/serverless-surf-k1ypg?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe iframe does not say \"Initialized\" anymore.\r\n\r\n## The expected behavior\r\n\r\nThe iframe should say \"Initialized\".\r\n\r\n## Other notes\r\n\r\nIf you move `setIframeContent(e.currentTarget);` to `nativeLoad` and repeat the steps above, it works as expected. The bug does not occur in Firefox.","state":"open","updated_at":"2022-12-09T15:12:30Z","created_at":"2020-04-27T11:26:46Z","creator_user_login":"adamziel"}
{"number":18661,"title":"Bug: Nested SuspenseList may display fallbacks while the component is loaded on re-render","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**React version:** 0.0.0-experimental-e5d06e34b\r\n\r\nHoping this can be helpful for you. Here is what looks to be a bug with concurrent mode and nested SuspenseList.\r\n\r\n## Steps To Reproduce\r\n\r\n_In concurrent mode only_\r\n\r\n0. Setup\r\n\r\nLet's suppose we have three components `<A />` (**not** lazy loaded), `<B />` (**not** lazy loaded) and `<C />` (lazy loaded).\r\n\r\nIn other words:\r\n\r\n```jsx\r\nimport A from './A';\r\nimport B from './B';\r\nconst C = React.lazy(() => import('./C'));\r\n```\r\n\r\n1. Render\r\n\r\n```jsx\r\nrender(\r\n  <SuspenseList key=\"1\" revealOrder=\"forwards\">\r\n    <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\r\n      <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\r\n        <A />\r\n      </Suspense>\r\n    </SuspenseList>\r\n  </SuspenseList>\r\n)\r\n```\r\n\r\n2. Update the component (component now shows A, B, and C)\r\n\r\n```jsx\r\nrender(\r\n  <SuspenseList key=\"1\" revealOrder=\"forwards\">\r\n    <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\r\n      <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\r\n        <A />\r\n      </Suspense>\r\n      <Suspense key=\"1.1.b\" fallback={<div>Loading B</div>}>\r\n        <B />\r\n      </Suspense>\r\n      <Suspense key=\"1.1.c\" fallback={<div>Loading C</div>}>\r\n        <C />\r\n      </Suspense>\r\n    </SuspenseList>\r\n  </SuspenseList>\r\n)\r\n```\r\n\r\n3. Output is: `A / Loading B / Loading C`. While `B` has already been loaded (not lazy loaded). If I understand well the behaviour of `forwards` I would have expect to have `A / B / Loading C` instead.\r\n\r\nPlease note that the behaviour is not the same if I do not use nested `<SuspenseList />`.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCodeSandbox: https://codesandbox.io/s/mutable-rain-3ikor\r\nGitHub pages repro: https://dubzzz.github.io/react-suspenselist-bug/build/\r\nGitHub pages source code: https://github.com/dubzzz/react-suspenselist-bug\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nOutput is: `A / Loading B / Loading C` with nested `SuspenseList`\r\n\r\n## The expected behavior\r\n\r\nOutput is: `A / B / Loading C` with nested `SuspenseList`\r\n\r\n**How did I found this bug?**\r\n\r\nThis _potential bug_ has been discovered while I was trying to run property based tests based on [fast-check](https://github.com/dubzzz/fast-check/) against React library.\r\n\r\nSee https://github.com/dubzzz/react/commit/e2cb4776ea3634fab2021d83cb8259bde03c0f3a\r\n","state":"open","updated_at":"2020-05-22T08:47:00Z","created_at":"2020-04-17T22:29:35Z","creator_user_login":"dubzzz"}
{"number":18616,"title":"Bug: window as new portal will break event delegation","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: any?\r\n\r\n## Steps To Reproduce\r\n\r\n1. Button attach to a window portal with window.open\r\n2. Event not triggering\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n```javascript\r\nconst { useState, useEffect } = React;\r\n\r\n\r\nfunction WindowPortal({ children }) {\r\n  const [container, setContainer] = useState(document.createElement('div'));\r\n  useEffect(() => { \r\n    const newWindow = window.open('', '', 'width=600,height=400,left=200,top=200');\r\n    newWindow.document.body.appendChild(container);\r\n  });\r\n  return ReactDOM.createPortal(children, container);\r\n}\r\nfunction App() {\r\n  const [value, setValue] = useState('unclicked');\r\n  const handleClick = () => setValue('clicked'); \r\n  return (\r\n    <div>\r\n      <div>Portal Test</div>\r\n      <WindowPortal>\r\n        <button onClick={handleClick}>{value}</button>\r\n      </WindowPortal>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  React.createElement(App),\r\n  document.getElementById('root')\r\n);\r\n```\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\nAny event in the new window will not be triggered since all events are bind to the original window. I think react can support a new mode for using native event binding rather than event delegation if it makes sense. [Preact](https://github.com/preactjs/preact) actually uses native browser event and don't use react event delegation system.\r\n## The current behavior\r\nEvent not trigger for components in new window\r\n\r\n## The expected behavior\r\nEvent will trigger","state":"open","updated_at":"2020-07-13T12:50:45Z","created_at":"2020-04-15T19:32:36Z","creator_user_login":"hanq08"}
{"number":18502,"title":"Bug: Server hydration mistmatch and radio group with defaultChecked","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen hydrating from the server, whenever there's a mismatch in the initially checked input in a radio button group and the inputs use `defaultChecked` (uncontrolled), there is no warning of that mismatch and the component behaves in a buggy way for the input that was initially selected in the server payload (the `onChange` callback prop is not fired for the input that was marked as selected in the initial html, when selecting it).\r\n\r\nWorth noting that using a controlled input (using `checked`) makes the bug go away.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the example provided below, make sure you refresh the browser within Code Sandbox.\r\n2. Check the first radio button. Verify that the radio is checked, but the text next to it still shows as \"not checked\" (which means the onChange prop was not triggered)\r\n3. Attempt to select any other option (works fine), and then back the first one (works fine too).\r\n4. Refreshing the page again, choosing any other option other than the first works fine.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/affectionate-stonebraker-3wj68\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nI know that using hydrate doesn't guarantee fixing the mismatches, but it says that it should warn about them in development (https://reactjs.org/docs/react-dom.html#hydrate). In this case, React doesn't warn about the mismatch, and the behavior is buggy, as shown in the example and steps to repro.\r\n\r\n## The expected behavior\r\n\r\nReact should ideally work without the issue, but given that it's not guaranteed to be fixed according to the documentation, it should at least warn about the mismatch.","state":"open","updated_at":"2022-03-30T00:35:51Z","created_at":"2020-04-06T10:24:24Z","creator_user_login":"leoasis"}
{"number":18499,"title":"Provide a renderer-agnostic equivalent of setNativeProps()","body":"Dan asked me to open up an issue: https://twitter.com/dan_abramov/status/1246883821477339139\r\n\r\nMy proposal is to extend React with a small hook that allows us to mutate nodes without causing render. React has no official means to deal with fast occurring updates and libraries like react-spring and framer-motion already do something similar but in a way that forces them to carry a lot of burden.\r\n\r\n```jsx\r\nimport React, { useMutation }\r\n\r\nfunction A() {\r\n  const [specialRef, set] = useMutation()\r\n\r\n  useEffect(() => {\r\n    // the following would execute sync and without causing render\r\n    // going through the same channel as a regular props update with all\r\n    // the internal interpolation (100 --> \"100px\")\r\n    set({ style: { left: 100 } })\r\n  }, [])\r\n\r\n  return <div ref={specialRef} ... />\r\n```\r\n\r\nIt uses the fact that reconcilers know how to handle props, something we don't know in userland unless we cause render to set fresh props, which is not at all optimal for animation or anything frame based. react-dom for instance knows what `margin: 3px` is, react-three-fiber knows what `position: [1,2,3]` is, and so on. These details are defined in the reconciler:\r\n\r\n```jsx\r\n  commitUpdate(instance: any, updatePayload: any, type: string, oldProps: any, newProps: any, fiber: Reconciler.Fiber)\r\n```\r\n\r\nIf libraries could use this knowledge from outside they could deal with any platform. Animation libraries like react-spring or framer-motion would turn x-platform in one strike, they could animate everything: dom nodes, react native views, meshes, hardware diodes. We could finally write libraries that are not reliant on platforms.","state":"open","updated_at":"2021-03-26T08:17:09Z","created_at":"2020-04-05T19:50:35Z","creator_user_login":"drcmda"}
{"number":18434,"title":"Bug: SuspenseList revealOrder=\"backwards\"  is not consistent without tail props","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. If `<SuspenseList revealOrder=\"backwards\">` is expected to show last component to load first if it loads early but it waits for the top components. If `tail` prop is set it works fine. \r\n2. if `<SuspenseList revealOrder=\"backwards\" tail=\"collapsed\">` is given everything works as expected\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n```\r\n<SuspenseList revealOrder=\"backwards\">\r\n      <ProfileDetails resource={resource} />\r\n      <ErrorBoundary fallback={null}>\r\n        <Suspense fallback={<h2>Loading posts...</h2>}>\r\n          <ProfileTimeline resource={resource} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n      <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n        <ProfileTrivia resource={resource} />\r\n      </Suspense>\r\n </SuspenseList>\r\n```\r\n\r\nworks fine when added tail\r\n```\r\n<SuspenseList revealOrder=\"backwards\" tail=\"hidden\">\r\n      <ProfileDetails resource={resource} />\r\n      <ErrorBoundary fallback={null}>\r\n        <Suspense fallback={<h2>Loading posts...</h2>}>\r\n          <ProfileTimeline resource={resource} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n      <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n        <ProfileTrivia resource={resource} />\r\n      </Suspense>\r\n </SuspenseList>\r\n```\r\nLink to code example: [https://codesandbox.io/s/bug-suspenselist-revealordertogether-and-error-boundaries-18429-1oky8](https://codesandbox.io/s/bug-suspenselist-revealordertogether-and-error-boundaries-18429-1oky8)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`<SuspenseList revealOrder=\"backwards\">` waits for the top elements to load unless tail props is set.\r\n\r\n## The expected behavior\r\n It is expected to work backwards order is last component is loaded in suspense without tail prop being set or not.","state":"open","updated_at":"2020-04-06T17:51:36Z","created_at":"2020-03-30T10:53:39Z","creator_user_login":"velusgautam"}
{"number":18413,"title":"Devtools: Allow editing context","body":"React version: 16.13 and `0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz\r\n2. Try editing value of `MessageListContext.Provider`\r\n\r\nLink to code example: https://codesandbox.io/s/xenodochial-field-rfdjz\r\n\r\n## The current behavior\r\n\r\nContext from `createContext` can't be edited in the current devtools (provider, consumer, hooks)\r\n\r\n## The expected behavior\r\n\r\nContext value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).\r\n","state":"open","updated_at":"2022-03-05T12:21:35Z","created_at":"2020-03-28T11:37:38Z","creator_user_login":"eps1lon"}
{"number":18402,"title":"Batching makes it difficult to perform imperative actions like focus","body":"React version: 16.9.5\r\n\r\n## Steps To Reproduce\r\n\r\n1. Overwrite batched updates with the following code: `ReactDOM.unstable_batchedUpdates = callback => callback()`\r\n2. Batched updates aren't actually overwritten.\r\n\r\n## Reasoning\r\n\r\nI recognize that this may not be classified as bug because it isn't a documented feature but I have tried to search for a different solution but to no avail. Fixing this behavior can open a new way of using React. I tried writing on [Stack Overflow](https://stackoverflow.com/questions/60852219/disable-unstable-batchedupdates-on-event-handlers-in-react) and writing to [@gaearon](https://twitter.com/antoniostoilkov/status/1242789762307588097).\r\n\r\nI have a number of arguments which support the disabling of batched updates in event handlers and in effects initialization. If anybody is willing to read a document and consider this scenario I am willing to write an RFC.","state":"open","updated_at":"2022-04-27T09:06:58Z","created_at":"2020-03-27T11:12:19Z","creator_user_login":"astoilkov"}
{"number":18390,"title":"Bug: Event handlers on custom elements work on the client but not on the server","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nReactDOMServer.renderToString(<div-x onClick={() => console.log('clicked')} />)\r\n```\r\n\r\nvs\r\n\r\n```js\r\nReactDOM.render(<div-x onClick={() => { console.log('clicked'); }} />, root)\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jsfiddle.net/hsug65x0/2/\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nCustom element event handlers only work client side. In SSR the code of the event handler becomes an attribute value.\r\n\r\n## The expected behavior\r\n\r\nCustom element event handlers work in SSR.\r\n","state":"open","updated_at":"2022-05-12T15:43:13Z","created_at":"2020-03-25T22:09:40Z","creator_user_login":"esprehn"}
{"number":18314,"title":"Bug: React-test-renderer error when updating state in act","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.0\r\nreact-test-renderer version: 16.13.0\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [Here](https://codesandbox.io/s/dazzling-kare-nxtfs) is a reproducible link.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIt's worth noting this example is using material-ui as a dependency. Regardless, I believe the test should still pass.\r\n\r\n When updating state in my component, a drawer component opens and closes depending on a boolean value. Code works fine in the browser. When running the above test, it fails with a trace error that includes the below.\r\n\r\n```\r\nTypeError: parentInstance.children.indexOf is not a function\r\n    at appendChild (https://psnrk.csb.app/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:720:39)\r\n```\r\n\r\nHere I am drilling down to a child anchor tag to access its `onClick` function. As you'll see in the sandbox example, I am passing it a `mockEvent` because the handler first calls `event.preventDefault`. \r\n\r\nThis does not cause any issues. The error occurs when the `setOpen` hook function gets called. Just wanted to point that out.\r\n```\r\nact(() => {\r\n    tree.root.children[0].props.children.props.children.props.onClick(mockEvent);\r\n});\r\n```\r\n\r\nSame error happens when I try to initiate the `onClose` handler of the `Drawer` component:\r\n\r\n```\r\nact(() => {\r\n    tree.root.children[1].props.onClose(mockEvent);\r\n});\r\n```\r\n\r\n## The expected behavior\r\n\r\nTest should pass. The state should be properly updated in the `onClick` handler or the `onClose` handler and I should be able to make further assertions after that.\r\n\r\nIf this is not the best way to execute a click event with `react-test-renderer` please let me know. I was looking for examples and it seemed like this was the way to do it.","state":"open","updated_at":"2020-12-25T15:06:34Z","created_at":"2020-03-15T13:37:21Z","creator_user_login":"ahummel25"}
{"number":18229,"title":"[Feature Request] Allow dependency length to change in hooks","body":"Not allowing dependency lists to change size limits the usefulness of `useMemo` in this particular use case but I imagine there are other similar use cases.\r\n\r\nTo be clear I am talking about the error triggered here:\r\n\r\nhttps://github.com/facebook/react/blob/024a764310e64ef38963df16970364b9942a60cd/packages/react-reconciler/src/ReactFiberHooks.js#L322\r\n\r\nFor instance, in my app I have a bunch of items and the user can select an unlimited amount of them, in another component I want to compute an expensive derived value based on this selection that is relevant only to this component, a good use case for `useMemo`.\r\n\r\nHowever it is not currently possible to use `useMemo` and I am forced to compute this derived data outside of this component even though I am only interested in doing so whilst this component is mounted.\r\n\r\nI don't understand why a change in dependency list length cannot be assumed to be a change in the dependencies itself?\r\n\r\nI believe this can be implemented by changing the above to:\r\n\r\n```js\r\nif (prevDeps.length !== nextDeps.length) {\r\n    return false;\r\n}\r\n```","state":"open","updated_at":"2022-12-16T03:32:48Z","created_at":"2020-03-05T19:36:28Z","creator_user_login":"georeith"}
{"number":18116,"title":"React retains component references to old renders causing browser memory to increase","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\nLink to deployed demo app - https://tsjohns9.github.io/react-memory-leak/\r\nLink to demo repo - https://github.com/tsjohns9/react-memory-leak\r\n\r\n## The current behavior\r\nReact appears to retain references to old renders of components which prevents the browser from running the garbage collector on unused memory.\r\n\r\n## The expected behavior\r\nReact should release the memory of components from previous renders\r\n\r\n## Description\r\nI have a web app that imports an OAS 3/Swagger 2.0 json spec file, and renders the file using the swagger-ui component, https://github.com/swagger-api/swagger-ui.\r\n\r\nThese json files can be very large. If I upload a file that is 500kb and pass it into the swagger-ui component the heap snapshot in chrome will show about 32.6 MB being used to render the app.\r\n\r\nAt some point during the lifecycle of this component the spec file may be updated by a user. When this happens the swagger-ui component will re-render. Between re-renders I can see from my heap snapshot that about 15 more mb are added to the heap.\r\n\r\nEven if this component is completely unmounted, the memory is still retained and cannot be garbage collected.\r\n\r\nI would expect that after a re-render the heap size would be about the same, and the old references would be released for garbage collection.\r\n\r\nI have come here with this issue and not swagger-ui because based on the heap snapshots the detached DOM elements are being retained by React directly.\r\n\r\nThe spec file that I have used is about 500kb. Unfortunately it is a proprietary file and I cannot share it here. Instead, I have provided a spec file from swagger-ui. This file is much smaller, but it will serve the purpose of showing how react is retaining references to old component renders. In my situation since the file is so large this becomes much more apparent to the user that there is a problem than with a much smaller json file.\r\n\r\n![Screen Shot 2020-02-24 at 1 17 42 PM](https://user-images.githubusercontent.com/24981281/75188107-c97d2c00-5708-11ea-95dd-7320d75cbf99.png)\r\n![Screen Shot 2020-02-24 at 1 21 30 PM](https://user-images.githubusercontent.com/24981281/75188095-c2eeb480-5708-11ea-9ede-c6f29452dde5.png)\r\n\r\n## Steps To Reproduce\r\n1. View the app [here](https://tsjohns9.github.io/react-memory-leak/)\r\n2. Open the console, and take a heap snapshot\r\n3. Press the Update Spec button in the top left of the app, or the Unmount button\r\n4. Take another heap snapshot.\r\n5. You will see that the heap size has increased\r\n6. Compare the two heap sizes and check to see how many new detached objects there are. Here is a screenshot as an example\r\n![Screen Shot 2020-02-24 at 1 26 19 PM](https://user-images.githubusercontent.com/24981281/75188470-6c35aa80-5709-11ea-956b-61022e80fa4b.png)\r\n\r\nLink to code example: https://tsjohns9.github.io/react-memory-leak","state":"open","updated_at":"2022-09-14T13:53:46Z","created_at":"2020-02-24T20:38:48Z","creator_user_login":"tsjohns9"}
{"number":18101,"title":"Arbitrary log lines may appear in between an error and the subsequent \"The above error…\" message","body":"React version: 16.12\r\n\r\nIf one component throws, and one of its siblings logs something else to the console, that sibling's logs appear in between the throwing component and the extra React information about that throw.\r\n\r\nThis is hard to explain in words but easy to explain in code and pictures, so look:\r\n\r\nRepro: https://codesandbox.io/s/boring-firefly-bu79e\r\n\r\n![image](https://user-images.githubusercontent.com/6820/75078940-d822d380-54bb-11ea-99d2-c77fbc0c9a5b.png)\r\n\r\nThe third log line (\"The above…\") refers to the first (\"Uncaught…\") but looks like it refers to the second (\"Please don't…\"). This is confusing when debugging.\r\n\r\nInstead, I would expect \"The above error…\" to be right below the uncaught window-level exception we raise. (Maybe this isn't possible without diverging dev vs. prod behavior? Not sure but thought I'd file…)","state":"open","updated_at":"2023-03-01T19:55:02Z","created_at":"2020-02-21T23:08:59Z","creator_user_login":"sophiebits"}
{"number":18098,"title":"Bug: Unexpected render","body":"<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nhttps://stackoverflow.com/questions/60345064/react-hooks-rendering-cause\r\n\r\nI'm playing with simple React components to understand when rendering occurs.\r\n\r\n\r\n## The current behavior\r\n\r\n[Sample 1][1] - Initially renders once. Regardless of the number of times the button is clicked, it doesn't render. This is expected.\r\n\r\n    import React, { useState } from \"react\";\r\n    import \"./styles.css\";\r\n    \r\n    export default function App() {\r\n      const [state, setState] = useState([\r\n        { id: 1, name: \"test1\" },\r\n        { id: 2, name: \"test2\" }\r\n      ]);\r\n      const onClick = () => setState(data => data);\r\n      console.log(\"App rendered\");\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Test if setting same data causes re-rendering</h1>\r\n          <button onClick={onClick}>Call setState with same data</button>\r\n          {state.map(({ id, name }) => (\r\n            <p key={id}>{name}</p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n[Sample 2][2] - Initially renders twice since `useEffect` updates `setMessages` with a value. This is expected. However, if the button is click 1+ times, it renders once. It shouldn't even re-render since the same value is being set. **Why is it rendering if no new value / reference is being updated?**\r\n\r\n    import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n    import axios from \"axios\";\r\n    import \"./styles.css\";\r\n    \r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    export default function App() {\r\n      const [messages, setMessages] = useState([]);\r\n      useEffect(() => {\r\n        axios\r\n          .get(`https://api.myjson.com/bins/10xva4`)\r\n          .then(({ data: { messages } }) => setMessages(messages));\r\n      }, []);\r\n      const Display = useMemo(\r\n        () =>\r\n          messages.map(({ content, senderUuid, sentAt }, index) => {\r\n            let d = new Date(sentAt);\r\n            return (\r\n              <div className=\"container\" key={index}>\r\n                <p>Content: {content}</p>\r\n                <p>SenderUuid: {senderUuid}</p>\r\n                <p>DayOfTheWeek: {d.getDate()}</p>\r\n                <p>Month: {d.getMonth()}</p>\r\n                <p>Day: {days[d.getDay()]}</p>\r\n                <p>Year: {d.getFullYear()}</p>\r\n              </div>\r\n            );\r\n          }),\r\n        [messages]\r\n      );\r\n      const onClick = useCallback(() => setMessages(messages => messages), []);\r\n      console.log(\"App rendered\");\r\n      // console.log({ messages });\r\n      return useMemo(\r\n        () => (\r\n          <div className=\"App\">\r\n            <button onClick={onClick}>Call setMessages with same data</button>\r\n            {Display}\r\n          </div>\r\n        ),\r\n        [Display, onClick]\r\n      );\r\n    }\r\n\r\n\r\n  [1]: https://codesandbox.io/s/testing-rendering-bo9bp\r\n  [2]: https://codesandbox.io/s/call-api-with-useeffect-vlo34\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The expected behavior\r\n\r\nShould not re-render if no new value or reference is updated.\r\n","state":"open","updated_at":"2022-12-30T11:37:28Z","created_at":"2020-02-21T20:47:07Z","creator_user_login":"TriStarGod"}
{"number":18051,"title":"Bug: [eslint-plugin-react-hooks] exhaustive-deps false positive on \"unnecessary\" dependency if its a React component","body":"## Steps to reproduce\r\n\r\n1. create a memoized value using `useMemo`\r\n2. a React component is used in the creation of this value, in a JSX expression\r\n3. specify the React component in the dependency array\r\n\r\nLink to code example: https://github.com/zeorin/eslint-plugin-react-hooks-repro\r\n\r\n## The current behavior\r\n\r\n```\r\nReact Hook useMemo has an unnecessary dependency: 'Component'. Either exclude it or remove the dependency array react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo lint errors.\r\n\r\n## More details\r\n\r\nA simple repro (taken from the link above) is:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => <Component />\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Workarounds\r\n\r\nIf one changes the component to lowercase, the lint error goes away. It does also mean that we need to change the way we render the component:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: component\r\n\t}), [component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\nAlternatively we can decide not to use JSX, in which case the lint rule functions correctly, too:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => React.createElement(Component)\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Impact\r\n\r\nCurrently it is hard to use props that are components in a JSX expression if one is using the `exhaustive-deps` rule.\r\n\r\nThis is also compounded by the fact that this rule has a ESLint fix that removes the dependency, thus changing the behaviour of the code and leading to bugs. See https://github.com/facebook/react/issues/16313 for that bug report.","state":"open","updated_at":"2020-10-17T08:24:03Z","created_at":"2020-02-17T12:24:15Z","creator_user_login":"zeorin"}
{"number":17997,"title":"Bug: React Dev Tools Firefox extension fails to detect React","body":"React extension version: 4.4.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install Firefox 72.0.2x64\r\n2. Go to Discordapp.com\r\n\r\n## The current behavior\r\nExtension reports: _\"This page does not appears to be using React\"_\r\n\r\n## The expected behavior\r\nReact is detected (just like it is currently in Chrome/Chromium)","state":"open","updated_at":"2023-06-06T21:49:18Z","created_at":"2020-02-07T11:01:14Z","creator_user_login":"Kein"}
{"number":17938,"title":"Bug: Render-phase update to another root causes an over-rendering loop","body":"```js\r\n    let container1 = document.createElement('div');\r\n    let container2 = document.createElement('div');\r\n\r\n    function Root1() {\r\n      _setX(x => x + 1);\r\n      return 'Hello';\r\n    }\r\n\r\n    let _setX = () => {};\r\n    function Root2() {\r\n      console.log('Root 2')\r\n      let [x, setX] = React.useState(0);\r\n      _setX = setX;\r\n      return <div>{x}</div>\r\n    }\r\n\r\n    const root1 = ReactDOM.createRoot(container1);\r\n    root1.render(<Root1 />);\r\n    const root2 = ReactDOM.createRoot(container2);\r\n    root2.render(<Root2 />);\r\n```\r\n\r\nExpected: `Root2` renders twice.\r\nActual: `Root2` renders a non-deterministic number of times.\r\n\r\nThis bisects to https://github.com/facebook/react/pull/15755, which removed the `5000` clamping. Without it, we get updates that have a slightly larger timeout than `5000`, and so the loop doesn't stop until we get to `5000`.","state":"open","updated_at":"2020-01-30T17:08:04Z","created_at":"2020-01-30T16:36:57Z","creator_user_login":"gaearon"}
{"number":17899,"title":"Bug: styles object using css variables and both a shorthand and a specific property renders incorrectly","body":"React does not produce the correct css inline styles when using css variables for both the shorthand property and another specific one (like `padding` and `paddingRight`).\r\n\r\nThe styles object:\r\n\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\nproduces the following styles:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995030-1d39e400-3df0-11ea-9235-0e6ad00718b2.png)\r\n\r\nand the following html:\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\neven though the computed properties tab of the dev-tools appear to be correct and the padding is properly rendered in the screen:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995225-6e49d800-3df0-11ea-9770-98f062008ca3.png)\r\n\r\nIf I remove the css-variable, everything works as expected.\r\n\r\n**React version**: From v15.0.0 to 16.12.0\r\n\r\n_Note_: Below v15.0.0 the styles are correctly produced:\r\n\r\n```html\r\n<span style=\"padding:calc(var(--spacing) * 1);padding-right:calc(var(--spacing) * 3);padding-bottom:calc(var(--spacing) * 4);\">App</span>\r\n```\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add a style object to a component that has both a property shorthand and a specific one (like `padding` and `paddingRight`) and uses a css variable (like `var(--spacing)`.\r\n2. Render that component and inspect using dev-tools.\r\n\r\nLink to code example: https://codesandbox.io/s/heuristic-wood-bjr1y\r\n\r\nstyles object:\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\n## The current behavior\r\n\r\nReact does not produces the correct css inline styles when using css variables for both the shorthand property and another specific one:\r\n\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\n## The expected behavior\r\n\r\nInline styles using css variables that have both a shorthand and a specific one should produce the correct styles.\r\n```html\r\n<span style=\"padding: calc(var(--spacing) * 1); padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4);\">App</span>\r\n```","state":"open","updated_at":"2020-04-11T23:19:58Z","created_at":"2020-01-23T15:58:13Z","creator_user_login":"joaomoleiro"}
{"number":17855,"title":"Bug: DevTools DOM highlighting gets stuck after a prolonged hover","body":"## Steps To Reproduce\r\n\r\n1. Hover a component in DevTools\r\n2. *Keep hovering it for a second or so*\r\n3. Quickly move the cursor out of the DevTools without hovering anything else\r\n\r\nExpected: DOM highlighting goes away.\r\nActual: DOM highlighting gets stuck.\r\n\r\n![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)","state":"open","updated_at":"2023-05-04T21:21:41Z","created_at":"2020-01-16T17:16:35Z","creator_user_login":"gaearon"}
{"number":17831,"title":"Bug: I shouldn't own the DOM fixtures website","body":"Some folks at Google are helping us to think through some ideas to help our input code be more sane, and we discovered that our DOM Text Fixtures site (http://react-dom-fixtures.surge.sh) was both:\r\n\r\n- _Very_ out of date\r\n- Owned by me\r\n\r\nBoth seem fixable. However I think a good first start is to figure out a way to publicly host the fixtures where I am not a bottleneck.\r\n\r\nWhat do you think? Could we setup a deploy process - maybe with netlify - to deploy the fixtures automatically?","state":"open","updated_at":"2020-01-15T19:19:46Z","created_at":"2020-01-14T03:27:48Z","creator_user_login":"nhunzaker"}
{"number":17779,"title":"SuspenseList tail property not working on re-renders","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am reporting a possible bug or otherwise requesting clarification.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a component with a SuspenseList re-renders (such as when it is is passed a new resource), the SuspenseList component still  respects the revealOrder=\"forwards\" or revealOrder=\"backwards\" prop but does not respect the tail=\"collapsed\" or tail=\"hidden\" prop.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/exciting-cherry-g9uc9\r\n\r\nIn order to see bug: \r\n1) Refresh the Code Sandbox browser and see that \"Loading profile...\" displays and \"Loading posts...\" does not due to the tail being collapsed.  This is the expected behavior.\r\n2) Press the \"Next\" button.  Both \"Loading Profile...\" and \"Loading posts...\" display.  The tail is no longer collapsed.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior would be for the tail to be collapsed when pressing the \"Next\" button. \"Loading profile...\" should be displayed, but not \"Loading posts...\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects only the experimental Concurrent Mode build of React.\r\n","state":"open","updated_at":"2020-01-09T20:04:57Z","created_at":"2020-01-04T18:44:35Z","creator_user_login":"kmurgic"}
{"number":17609,"title":"Controlled numeric input gets cleared when unfocused","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to report a bug.\r\n\r\n**What is the current behavior?**\r\nA numeric input field gets cleared accidentally on several occasions.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Open [this sandbox](https://codesandbox.io/embed/sad-rgb-mltuj)\r\n2. Type “12.” into the field, with the trailing decimal separator\r\n3. Unfocus the control\r\n4. Append “.” to the field’s value to see “12..”\r\n5. Unfocus the control once again and see that the number has completely disappeared\r\n\r\n**What is the expected behavior?**\r\n\r\nSimilar to how uncontrolled inputs work (remove the `value` prop and then repeat the steps above), the input should not be cleared on blur.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI’m using React 16.12.0 and experienced the same behavior with the latest version of Chrome and iOS Safari. Regarding this bug, I have no experience with previous versions of React.\r\n","state":"open","updated_at":"2020-04-01T20:58:15Z","created_at":"2019-12-15T01:10:16Z","creator_user_login":"kripod"}
{"number":17594,"title":"DevTools: Profiler: Enable correlating console logs to profiler output (and vice versa)","body":"A challenge with the React DevTools profiler is that it's too hard to correlate profiler results with console logs. This makes diagnosing and fixing render performance issues much more difficult.\r\n\r\nFor example, yesterday I was debugging an app where each render usually took 10ms-20ms except every 20-30 renders it'd take 600-800ms.  It was frustrating that I didn't have a way to correlate the profiler UI (which told me which renders were problematic) with the verbose console log output that might tell me exactly what went wrong during those renders. Instead I had to comb through logs and guess which output came from \"bad\" renders. This was tedious and error-prone.\r\n\r\nAnyway, my proposal is for React DevTools to make it easy to correlate profiler results with console log output.  Both directions would be useful:\r\n1) **navigate from logs to profiler** - if I see a suspicious line in the logs, I'd like to easily navigate to the profiler with the specific component/commit selected that was running when the line was logged.\r\n2) **navigate from profiler to logs** - if I see a suspiciously long commit, I'd like to select it in the profiler pane and have an easy way to see associated logs.\r\n\r\nI don't have a strong opinion about how this should be accomplished, but below are a few ideas to spur discussion.\r\n\r\nA minimal solution could be something like this: \r\na) The profiler assigns a unique ID to each commit\r\nb) The profiler's right pane would show the ID for each commit\r\nc) React would add a new hook that'd return that ID\r\nd) Userland code could include the ID in logs.\r\n\r\nJust this minimal support would be a vast improvement.\r\n\r\nIf we wanted to make it smoother, here's a few ideas that could be layered on top.\r\n\r\n1. **Profiler->Console Links** The ID in the profiler UI could be a hyperlink that'd open the console drawer and put the ID in the console's CMD+F search box. This would be one-click navigation from profiler to logs. I don't know if Chrome allows this kind of cross-pane control, over the console UI so this might not be practical.\r\n\r\n2. **Console -> Profiler Links**  For one-click logging in the other direction., we could have a special URL format (e.g. `react://profiler/commit/2c1056b5-1be1-43d4-a105-1d840cf4f9c3`) that would enable userland code to emit links in the console that, when clicked, would navigate to the specific commit (in the profile pane) that was active when the logs were emitted. Similar caveat as above: I'm not sure if chrome extensions can be \"deeplinked\" like this. \r\n\r\n3. **Log Components Where** Building on (1) and (2) above, we could enable console<->profiler linking without requiring changes to userland code. We could have a profiler setting (e.g. \"log components where\" with UX like \"hide components where\") that, when active, would emit a line to the console log at the start of each render of a matching component. The output would link back to the profiler, e.g. \r\n`[RDT] Starting MyCoolComponent (react://profiler/commit/2c1056b51be143d4a1051d840cf4f9c3)`.\r\n\r\nWhat do you think? I'm unfamiliar with React and RDT internals so there might be much better ways to solve log<->profiler correlation than my naive ideas above. But at least I wanted to call out the problem and encourage discussion about a solution.\r\n","state":"open","updated_at":"2019-12-20T22:42:06Z","created_at":"2019-12-13T09:01:35Z","creator_user_login":"justingrant"}
{"number":17581,"title":"Input nodes leaked by the browser retain React fibers","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\n🐛 \r\n\r\n**What is the current behavior?**\r\n\r\nBrowsers retain references to inputs in their undo stacks, which in turn retain React fibers (including `memoizedProps`)\r\n\r\nSee https://bugs.chromium.org/p/chromium/issues/detail?id=1029189\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/altxg/nzu6ab5e/3/\r\n\r\n**What is the expected behavior?**\r\n\r\nAlthough the leak originates from the browser, it might be helpful if React detached internal fiber references from input and contenteditable nodes on unmount\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of React as far as I know.\r\nI can reproduce the leak on Chrome and Firefox on Mac\r\n\r\n---\r\n\r\nPotentially related issues:\r\nhttps://github.com/facebook/react/issues/12692\r\nhttps://github.com/facebook/react/issues/16087","state":"open","updated_at":"2022-03-30T00:19:17Z","created_at":"2019-12-12T01:40:26Z","creator_user_login":"albertxing"}
{"number":17553,"title":"DevTools: Provide full file path for React Native component stacks","body":"## Overview\r\n\r\nIn React Native, we're working on a new RedBox experience for errors and warnings called LogBox. In LogBox, we separate out component stack traces and show them similar to call stacks.\r\n\r\nWe'd like to be able to tap on these components and open them (like we can with call stacks).\r\n\r\n## Solutions\r\nIn React we have the full file path context, but when we build the component stack trace, we strip the full path so that it displays only the file name.\r\n\r\nThere are two options to achieve this:\r\n- For React Native, don't strip the full path [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-shared/src/backend/describeComponentFrame.js#L25). This will result in longer component stack messages with every frame having the full path.\r\n- Keep the message the same, and instead add structured component stack frame info including the full file path.","state":"open","updated_at":"2020-01-08T23:38:18Z","created_at":"2019-12-09T10:38:24Z","creator_user_login":"rickhanlonii"}
{"number":17494,"title":"Undo behavior in controlled input doesn't work as expected","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n1. Load https://codesandbox.io/s/material-demo-8wgfs.\r\n1. Focus the first input.\r\n1. Type <kbd>a</kbd>.\r\n1. Press <kbd>Tab</kbd> to focus the second input.\r\n1. Type <kbd>a</kbd>.\r\n1. Use Ctrl/Cmd+Z or Edit->Undo to undo these two changes.\r\n\r\nNotice that the uncontrollable input change is reverted\r\nNotice that the controllable input change is **not** reverted\r\n\r\n![undo](https://user-images.githubusercontent.com/3165635/69901991-fb405a00-1388-11ea-9085-ddd4131a42a9.gif)\r\n\r\n**What is the expected behavior?**\r\n\r\nuncontrollable & controllable inputs behave identically.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.12.0\r\nChrome 78.0.3904.108\r\nmacOS 10.14.6\r\n\r\nFirst reported in https://github.com/mui-org/material-ui/issues/18545.\r\n","state":"open","updated_at":"2022-04-13T23:40:31Z","created_at":"2019-11-30T14:49:37Z","creator_user_login":"oliviertassinari"}
{"number":17473,"title":"React Devtools Component: Add hotkeys to start inspecting node","body":"Issue is here https://github.com/facebook/react/issues/17298\r\n\r\nHotkey: Cmd Shift X (mac) or Ctrl Shift X (others)\r\n\r\n![hotkey](https://user-images.githubusercontent.com/25560419/69716735-9c3ed300-1145-11ea-9788-7f311d59bfeb.gif)\r\n\r\n\r\n","state":"open","updated_at":"2023-05-17T20:22:08Z","created_at":"2019-11-27T10:41:41Z","creator_user_login":"gejimayu"}
{"number":17436,"title":"What will suspense look like for the streaming case?","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA discussion, at the request of @gaearon. \r\n\r\n### Questions\r\n\r\nI'm very curious what the public API will be for Suspense in streaming cases. The work I do or have pretty much always done in React involves dealing with streams of data, generally coming over a web socket. What will it look like? Will it be easy for users to implement/use? Is a promise/thenable an appropriate type for dealing with this even internally, given that the first value may never show up?\r\n\r\n### Desire\r\n\r\nThe ability to leverage suspense to \"suspend\" until the first of many values arrives from a stream of data coming from any source. For the sake of conversation, we'll say a web socket.\r\n\r\n\r\n### Constraints\r\n\r\n- The first value may never arrive\r\n- The source may close without error, having never provided a value\r\n- There must be an ergonomic teardown mechanism, for example how developers can currently teardown in the returned function of `useEffect` or in `componentWillUnmount`.\r\n- There may be more than one value returned by the streaming source\r\n\r\n### Optional constraints\r\n\r\n- The first N values form the source may be synchronous (followed by asynchronous values)\r\n\r\n### Scenario\r\n\r\nA simple app with two routes, one where the app needs to open a web socket connection and collect streaming data, and the other where the socket connection should be closed. The values from the web socket may take long enough that the developer will want to move to that routed component right away and show some spinner with suspense until the first bit of data arrives. If the user navigates to the first route, then leaves before the first value arrives, what happens?\r\n\r\nMy concern is, that if, even internally, the mechanism is a promise or thenable, there is a chance leaks will be created in the event that the source of that first value is torn down before the first value arrives. The only way, with a thenable or promise, to avoid that chance would be to make sure that the teardown mechanism was somehow tied to the thenable, so that the thenable to be rejected (or resolved) with a known value, such that it will be \"settled\".","state":"open","updated_at":"2023-06-06T13:57:07Z","created_at":"2019-11-22T16:19:21Z","creator_user_login":"benlesh"}
{"number":17425,"title":"SuspenseList revealOrder=\"forwards\" has issues when Suspense is nested in another element","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSuspenseList is currently experimental, so it's neither. But I think that this should be fixed before it's stable.\r\n\r\n**What is the current behavior?**\r\n\r\n![Screen Recording 2019-11-21 at 12 39 56 PM](https://user-images.githubusercontent.com/1500684/69371223-a6039a80-0c5c-11ea-9fd4-848a3f1672fa.gif)\r\n\r\nNote the 1000ms at the bottom (which should show last based on the `revealOrder`) shows at 2000ms for the nested version.\r\n\r\nThe only difference between those two sets of SuspenseLists is that one has nested the two bottom suspense elements in a `div`. Something like this:\r\n\r\n```javascript\r\nfunction App() {\r\n  return (\r\n    <SuspenseList revealOrder=\"forwards\">\r\n      <Suspense fallback={<div>2000ms loading</div>}>\r\n        <A />\r\n      </Suspense>\r\n      <div> {/* nesting */}\r\n        <Suspense fallback={<div>3000ms loading</div>}>\r\n          <B />\r\n        </Suspense>\r\n        <Suspense fallback={<div>1000ms loading</div>}>\r\n          <C />\r\n        </Suspense>\r\n      </div> {/* nesting */}\r\n    </SuspenseList>\r\n  )\r\n}\r\n```\r\n\r\nhttps://codesandbox.io/s/suspenselist-issues-sdqzb\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect them to behave exactly the same. Nesting things is often necessary for styling reasons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm experiencing this on `react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`. I don't believe this ever worked in previous versions of React.","state":"open","updated_at":"2020-02-20T04:59:44Z","created_at":"2019-11-21T19:44:06Z","creator_user_login":"kentcdodds"}
{"number":17386,"title":"Feature Request: Soft Component","body":"```\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction PageLayout({title, children}) {\r\n  return <div>\r\n    <h1>{title}</h1>\r\n    <input type=\"text\"/>\r\n    {children}\r\n  </div>;\r\n}\r\nfunction Page2({setPage}) {\r\n  return <PageLayout title=\"Page2\">\r\n    <button onClick={() => {setPage(() => Page1);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction Page1({setPage}) {\r\n  return <PageLayout title=\"Page1\">\r\n    <button onClick={() => {setPage(() => Page2);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction App() {\r\n  let [Page, setPage] = useState(() => Page1);\r\n  return <Page setPage={setPage}/>; \r\n}\r\nReactDOM.render(<App />, document.getElementById('app'));\r\n```\r\n\r\nhttps://codesandbox.io/embed/serene-browser-tehj4?fontsize=14\r\n\r\nThe above code is most intuitive pattern for build multiple page web app. -- Don't mind the setPage. Just focus Page component returns PageLayout instance.\r\n\r\nBut react's diff algorithm is not optimized for that pattern.  If you click \"Test\" button. The text you inputed in input will lost.\r\n\r\nSo I proposal \"Soft Component\" concept. Two soft component will be treated as same component in diff algorithm. In the example, we change Page1 and Page2 to soft components. Thus solve the problem I shown above.","state":"open","updated_at":"2022-03-23T18:26:00Z","created_at":"2019-11-16T14:23:06Z","creator_user_login":"hackwaly"}
{"number":17355,"title":"\"Should not already be working\" in Firefox after a breakpoint/alert","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n","state":"open","updated_at":"2023-08-11T12:24:20Z","created_at":"2019-11-13T16:35:19Z","creator_user_login":"gzzo"}
{"number":17351,"title":"Possibility to set min duration of Suspense fallback","body":"**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n\r\n**UPDATE - 04/09/2022** - For anyone looking at this issue, there is a workaround to achieve this fallback min duration behaviour in React 17 🎉 , described here: https://github.com/facebook/react/issues/17351#issuecomment-1236303278\r\n","state":"open","updated_at":"2023-06-28T13:57:59Z","created_at":"2019-11-13T00:33:43Z","creator_user_login":"tonix-tuft"}
{"number":17301,"title":"react-test-renderer: the findByType method doesn't work with memo components","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhenever I try something like:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\r\n```\r\n\r\nI get the following error: `No instances found with node type: \"undefined\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\r\n```\r\n\r\nI am fine with this solution but then flow complains that `type` doesn't exist so I find myself fixing this with `$FlowFixMe` all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNo, it never worked as far as I know.\r\n","state":"open","updated_at":"2020-09-25T19:39:43Z","created_at":"2019-11-07T09:39:23Z","creator_user_login":"bensampaio"}
{"number":17298,"title":"Hotkey for \"Select an element in the page to inspect it\" in Chrome extension","body":"Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.","state":"open","updated_at":"2023-08-16T21:13:47Z","created_at":"2019-11-07T05:20:54Z","creator_user_login":"skoshy"}
{"number":17281,"title":"react-refresh: Dependent functions/data don't trigger refresh","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBoth/neither?\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, react-refresh marks each component whose `type` and/or `signature` has changed as \"dirty\" and will either re-render or re-mount those components selectively.\r\n\r\nThe problem occurs when the dev tooling (webpack, parcel, etc.) loads a module that exports functions or data that are used inside of components, but aren't registered components themselves. For example, a utility function that concatenates a string:\r\n\r\n```js\r\nexport greet(name) {\r\n  return `Hello, ${name}!`;\r\n}\r\n```\r\n\r\nChanging the returned string to `Yo, ${name}!` would trigger this module to reload in the browser, but because components which depended on it don't reload, the old greeting will persist \r\nuntil the next render of each dependent component.\r\n\r\n(BTW in actuality, some tooling will reload immediate dependents of modules that are reloaded in order to get around similar problems. You can extend the dependency chain from two to three modules, where `a.js` depends on `b.js` depends on `c.js`, and you will get the same result when editing `c.js`)\r\n\r\nWhat this forces tooling to do is apply a heuristic to try and guess whether a given module should be refreshed, vs. completely restart the app in order to cause all components to re-mount and pick up any changes that wouldn't be picked up by react-refresh.\r\n\r\nThe problems with the heuristic approach is:\r\n- each dev tool needs to implement this logic, leading to more potential for bugs\r\n- it leads to a degradation of hot reloading capabilities based on what your module exports. not obvious at all on it's face and will lead people to twisting their code base to route around this\r\n- It's very unfriendly to compile-to-JS languages like ReasonML, ClojureScript, etc. which might have different default semantics for what is public / private, different conventions for naming components, etc. which make it difficult to detect whether a module is \"safe\" to refresh\r\n\r\n**What is the expected behavior?**\r\n\r\nThat components depended on newly loaded code will pick up those changes correctly, without losing state.\r\n\r\nA potential (maybe naive?) solution to this in react-refresh is, instead of only re-rendering the components marked as dirty (due to a different `type` being registered), to _re-render from the root_ while maintaining hooks state. If components' signatures have changed, then re-mount.\r\n\r\nI've read through and kind of grok most of the code in react-refresh, but I'm not sure how this would impact the way that the reconciler currently handles the HMR stuff. This is as much of a question, as it is a request: could this be a viable solution?\r\n\r\nI appreciate your time and energy in reading through this. I'm very excited about having first-class support for hot reloading in React, as it's been something that I've loved ever since seeing the first demo of it. I hope that this issue can help create a way to provide a consistently excellent dev experience across tools/platforms/languages!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11","state":"open","updated_at":"2020-07-31T13:51:30Z","created_at":"2019-11-05T20:13:09Z","creator_user_login":"lilactown"}
{"number":17275,"title":"Is it possible to share contexts between renderers?","body":"**What is the current behavior?**\r\n\r\nHey 👋 I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \r\n\r\n I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\r\n\r\nI found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\r\n\r\n**Minimal demo**\r\n\r\nI prepared a quick demo using react-art so you can see how it currently works:\r\n\r\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\r\n\r\n**What is the expected behavior?**\r\n\r\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.11.0\r\nReact-dom: 16.11.0\r\n","state":"open","updated_at":"2022-03-14T12:50:05Z","created_at":"2019-11-05T03:39:28Z","creator_user_login":"diegomura"}
{"number":17256,"title":"\"NotFoundError: Failed to execute 'removeChild' on 'Node'\" when using React.Fragment <></> with Chrome extension which does not modify the DOM tree below the root div of the React app","body":"This has already been discussed before (#14740), but there wasn't a reproducing example for this kind of issue and I think that my use case is also a bit different.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this can be considered a bug.\r\n\r\n**What is the current behavior?**\r\nIn order to reproduce this issue using Chrome, you will need to install the following Chrome extension called TransOver:\r\n\r\n![Screen Shot 2019-11-03 at 22 51 33](https://user-images.githubusercontent.com/10134421/68092541-86165d80-fe8c-11e9-9f39-e566f770fcb2.png)\r\n\r\nhttps://chrome.google.com/webstore/detail/transover/aggiiclaiamajehmlfpkjmlbadmkledi?hl=en\r\n\r\nI use it to translate text on hover.\r\nThe only thing that this extension does is appending a tooltip with the translated text to the `body` HTML element when you hover an element with text (it doesn't seem it appends stuff below the React's root `div` element).\r\n\r\nI have created two code sandboxes to show you better and explain the problem.\r\nIt is a minimal example of a movie app like the one Dan showed at JSConf 2018 in Iceland, though not as beautiful as his and without all that cool Suspense stuff, but at least it uses hooks :) .\r\n\r\n- https://codesandbox.io/s/heuristic-lake-exxvu\r\n\r\n- https://codesandbox.io/s/magical-grass-016kc\r\n\r\nThe two code sandboxes are essentially identical, the only difference is that the first one (`heuristic-lake-exxvu`) uses a `div` element for `MovieApp`, whereas the second (`magical-grass-016kc`) uses a `React.Fragment` (`<></>`) component:\r\n\r\n`heuristic-lake-exxvu`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <div> // <======================= Uses a `div`\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\n`magical-grass-016kc`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <> // <======================= Uses a fragment\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\nNow, if you open `heuristic-lake-exxvu` and click on the `Show movie info` button of any movie in the list, you will see the `Loading...` text before the promise with the data of the movie resolves, and the `Movie` component is rendered.\r\n\r\nBefore the promise resolves, try hovering on the `Loading...` text with the `TransOver` extension enabled, you should see:\r\n\r\n![Screen Shot 2019-11-03 at 23 26 48](https://user-images.githubusercontent.com/10134421/68093013-764d4800-fe91-11e9-8b64-2dbdade0a500.png)\r\n\r\nThe world makes sense here, no errors, no warnings, everything works.\r\n\r\nNow try to do the same thing on `magical-grass-016kc`, as soon as you hover `Loading...`, you will see the `NotFoundError: Failed to execute 'removeChild' on 'Node'` error logged in the browser's console:\r\n\r\n![Screen Shot 2019-11-03 at 23 40 00](https://user-images.githubusercontent.com/10134421/68093177-49019980-fe93-11e9-9f9b-13f91a12e996.png)\r\n\r\n![Screen Shot 2019-11-03 at 23 40 52](https://user-images.githubusercontent.com/10134421/68093194-6df60c80-fe93-11e9-910f-ae748bc9fb91.png)\r\n\r\nHere is a streamable video showing this same error:\r\n\r\nhttps://streamable.com/4gxua\r\n\r\n**What is the expected behavior?**\r\nIn `heuristic-lake-exxvu` (uses a `div` instead of React fragment), everything worked.\r\nThe TransOver extension appends to `body` and does not modify the React's root `div` neither does it append stuff below it, so I would expect the code in the React fragment example (`magical-grass-016kc`) to behave the same and work as in `heuristic-lake-exxvu`.\r\n\r\nChrome is plenty of useful extensions like this one and they should not really interfere with React, I think that users using React applications may also install other extensions which modify the DOM which they find useful.\r\nIf an extension appends to body like TransOver does, I wouldn't expect React to have problems with it and cause undesirable effects and application errors like this one.\r\n\r\nThis is my opinion, I would be very glad to hear what you think about it, and if you think I have spotted a bug of React fragments (I think it's a bug because, again, it works when using a `div` in `heuristic-lake-exxvu`).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nBrowser: Chrome\r\nReact v16.11.0\r\nReact DOM v16.11.0\r\n\r\n\r\n","state":"open","updated_at":"2023-05-04T10:00:05Z","created_at":"2019-11-03T23:06:16Z","creator_user_login":"tonix-tuft"}
{"number":17254,"title":"React DevTools w/ Electron: Profiler \"Reload and start profiling\" doesn't work due to XMLHttpRequest 'null' origin","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nAn error gets thrown when using DevTools Profiler on **Electron** with the \"**Reload and start profiling**\" feature that leaves Profiler in an unexpected state - the profiling session does not end.\r\n\r\nI initially opened [the issue over at Electron](https://github.com/electron/electron/issues/20915), but [got asked to get your opinion first](https://github.com/electron/electron/issues/20915#issuecomment-548996868).\r\n\r\n**What is the current behavior?**\r\n\r\n- Open React DevTools Profiler in **Electron**\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\" - does not work\r\n- Because there are errors in console (actually thrown immediately after reload, don't have to do any extra actions):\r\n  ```\r\n  Access to XMLHttpRequest at 'chrome-extension://react-developer-tools/build/renderer.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https.\r\n  ```\r\n  ```\r\n  Uncaught DOMException: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'chrome-extension://react-developer-tools/build/renderer.js'.\r\n  ```\r\n\r\n![Errors after triggering profiler](https://user-images.githubusercontent.com/1030080/68028419-81e81580-fcbd-11e9-85ae-58b8437df6d8.png)\r\n\r\n![The respective code in React DevTools](https://user-images.githubusercontent.com/1030080/68028680-1ce0ef80-fcbe-11e9-9b63-4fa0494af0dd.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou'll have to use [Electron Fiddle](https://github.com/electron/fiddle) for this one with this gist: https://gist.github.com/joltmode/82574cab4970def210dac0c68d4c34b8\r\n\r\n**What is the expected behavior?**\r\n\r\n- Open React DevTools Profiler\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\"\r\n- See profiler results\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- Latest version of DevTools\r\n- Electron 6.1.2","state":"open","updated_at":"2019-11-02T15:45:02Z","created_at":"2019-11-02T10:44:08Z","creator_user_login":"tomsseisums"}
{"number":17208,"title":"Devtools tabs should not appear in chrome-extension pages when using react-devtools as an entry point","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe React devtools tabs in Chrome devtools can be displayed in extension pages, even though modifying extensions in other extensions is not supported by Chrome, and React devtools are therefore broken.\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774646-21927300-fa34-11e9-99b5-ea3c62a99e0d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774697-38d16080-fa34-11e9-8ea6-fddb21c7bb14.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Install Chrome and React devtools\r\n2. Open devtools in a chrome-extension page implemented with React\r\n\r\nExample: [prettier-chrome-extension](https://github.com/prettier/prettier-chrome-extension/tree/options) (install from source and open extension options)\r\n\r\n**What is the expected behavior?**\r\n\r\nReact devtools should not appear when it's not supported, just like when devtools are opened on a page that doesn't use React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- React Developer Tools 4.2.0 (10/3/2019)\r\n- Chrome 78.0.3904.70\r\n- macOS 10.15","state":"open","updated_at":"2020-12-25T14:07:15Z","created_at":"2019-10-29T14:13:36Z","creator_user_login":"nickmccurdy"}
{"number":17168,"title":"Script tags are rendered inconsistently between client and server (html-encoded on server)","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Render a script tag with quotes on the server.\r\n2. Render a script tag with quotes on the client.\r\n3. Compare the output. \r\n\r\nNote that the quotes are html-encoded to `&quot` when rendered on the server.\r\n\r\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\r\n\r\n**What is the expected behavior?**\r\nThe script tag content is not html-encoded on either the server or the client.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nI'm not sure when this was introduced.","state":"open","updated_at":"2021-05-10T15:16:42Z","created_at":"2019-10-23T01:58:52Z","creator_user_login":"accidentaldeveloper"}
{"number":17157,"title":"[DOM] Add support for the `inert` attribute","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen specifying `inert={false}` on an element, React throws the following message:\r\n\r\n```\r\nWarning: Received `false` for a non-boolean attribute `inert`.\r\n```\r\n\r\nHowever, `inert={undefined}` works fine as a replacement for `false`, while `inert=\"\"` (empty string) provides an escape hatch as a truthy value.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `inert` attribute should be accepted as a boolean DOM attribute, as [proposed](https://html.spec.whatwg.org/multipage/interaction.html#inert) by the HTML Standard.\r\n","state":"open","updated_at":"2023-09-02T18:29:03Z","created_at":"2019-10-21T12:06:09Z","creator_user_login":"kripod"}
{"number":17140,"title":"SuspenseList in DevTools could cycle through the Suspense states","body":"We currently have a way to force a fallback on a Suspense boundary in DevTools.\r\n\r\nIt might be cool to have a \"play\" button or something on SuspenseList that cycles through the states.\r\n\r\nE.g. if it's \"together\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\r\n\r\nIf it's \"forwards\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it's tail \"hidden\" or \"collapsed\" it hides all the ones that are not yet inserted and then inserts one at a time.\r\n\r\nCould be a nice way to demo/test the loading sequence experience.","state":"open","updated_at":"2020-01-08T19:08:53Z","created_at":"2019-10-18T20:59:21Z","creator_user_login":"sebmarkbage"}
{"number":17064,"title":"mouseEnter behaves like mouseOver when using ReactDOM.render() to mount a child element","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using `ReactDOM.render()` to mount a child element, `mouseEnter` behaves like `mouseOver` (`mouseLeave` behaves like `mouseOut`).  you can see the demo, and when my cursor moves between the red and blue blocks, it will repeatedly trigger mouseEnter and mouseLeave.\r\nhttps://codepen.io/sen-dream/pen/VwwvGbm\r\n\r\n**What is the expected behavior?**\r\nhttps://codepen.io/sen-dream/pen/WNNQgoy\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTestes with React 16.8 on Chrome/macOS. It didn't work in previous versions.\r\n","state":"open","updated_at":"2020-04-01T22:07:46Z","created_at":"2019-10-11T07:28:30Z","creator_user_login":"sen14251"}
{"number":17003,"title":"DevTools not properly shutting down between reloads in some cases","body":"Noticed this while testing the recently added \"highlight updates\" feature. It seems like relying on the content script's \"disconnect\" to shutdown things is too late, and we seem to be leaving at least an `Agent` (possibly more) connected.\r\n\r\nI think we may want to add some cleanup code to our initialization path (of the backend) to handle the case where a previous backend instance didn't get to finish shutting down.","state":"open","updated_at":"2022-04-17T19:25:28Z","created_at":"2019-10-03T16:24:08Z","creator_user_login":"bvaughn"}
{"number":16993,"title":"Add DevTools visualization for SSR hydration","body":"This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\r\n\r\n# Background info\r\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn't interactive. React records events to replay them once content becomes interactive- (but that doesn't actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\r\n\r\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\r\n\r\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\"highlight updates\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\r\n\r\n# Visualizing hydration progress\r\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\r\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\r\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\r\n\r\nThis feature would be opt-in via a new DevTools setting.\r\n\r\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\r\n\r\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\r\n\r\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\r\n\r\n# Special cases\r\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\r\n\r\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\r\n* **React can't complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\r\n\r\nI don't know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\r\n\r\nThe following case does **not** need to be highlighted because it is not a deopt:\r\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating.","state":"open","updated_at":"2020-01-08T19:09:21Z","created_at":"2019-10-02T22:01:29Z","creator_user_login":"bvaughn"}
{"number":16965,"title":"Devtools Inspect Button Doesn't Work with Repeat Selections","body":"Maybe we can detect this case by checking $0 and if not we can temporarily select null before reselecting. (?)","state":"open","updated_at":"2020-01-08T19:09:20Z","created_at":"2019-09-30T23:07:10Z","creator_user_login":"lunaruan"}
{"number":16956,"title":"Design decision: why do we need the stale closure problem in the first place?","body":"Hi,\r\n\r\nI initially asked this on Twitter and @gaearon suggested me to open an issue instead.\r\nThe original thread is here: https://twitter.com/sebastienlorber/status/1178328607376232449?s=19\r\nMore easy to read here: https://threadreaderapp.com/thread/1178328607376232449.html\r\nBut will try to make this issue more clear and structured about my args and questions.\r\n\r\nDon't get me wrong, I really like hooks, but wonder if we can't have smarter abstractions and official patterns that make dealing with them more easy for authors and consumers.\r\n\r\n--------------------------------------\r\n\r\n## Workaround for the stale closure\r\n\r\nAfter using hooks for a while, and being familiar with the stale closure problem, I don't really understand why we need to handle closure dependencies, instead of just doing something like the following code, which always executes latest provided closure (capturing fresh variables)\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869094-f7d52600-e379-11e9-9634-1ab06b41e3ca.png)\r\n\r\nCoupling the dependencies of the closure and the conditions to trigger effect re-execution does not make much sense to me. For me it's perfectly valid to want to capture some variables in the closure, yet when those variables change we don't necessarily want to re-execute.\r\n\r\nThere are many cases where people are using refs to \"stabilize\" some value that should not trigger re-execution, or to access fresh values in closures.\r\n\r\nExamples in major libs includes:\r\n- Formik (code is pretty similar to my \"useSafeEffect\" above): https://github.com/jaredpalmer/formik/blob/master/src/Formik.tsx#L975\r\n- React-redux, which uses refs to access fresh props: https://github.com/reduxjs/react-redux/blob/b6b47995acfb8c1ff5d04a31c14aa75f112a47ab/src/components/connectAdvanced.js#L286\r\n\r\nAlso @Andarist (who maintains a few important React libs for a while): \r\n\r\n![image](https://user-images.githubusercontent.com/749374/65872332-9d8b9380-e380-11e9-90b3-bf294991bb82.png)\r\n\r\n\r\nWe often find in such codebase the \"useIsomorphicLayoutEffect\" hook which permits to ensure that the ref is set the earliest, and try to avoid the useLayoutEffect warning (see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85). What we are doing here seems unrelated to layout and makes me a bit uncomfortable btw.\r\n\r\n\r\n\r\n## Do we need an ESLint rule?\r\n\r\nThe ESLint rule looks to me only useful to avoid the stale closure problem. Without the stale closure problem (which the trick above solves), you can just focus on crafting the array/conditions for effect re-execution and don't need ESLint for that.\r\n\r\nAlso this would make it easier to wrap useEffect in userland without the fear to exposing users to stale closure problem, because eslint plugin won't notice missing dependencies for custom hooks.\r\n\r\nHere's some code for react-navigation (alpha/v5). To me this is weird to have to ask the user to \"useCallback\" just to stabilize the closure of useFocusEffect, just to ensure the effect only runs on messageId change.\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869719-3d462300-e37b-11e9-94d2-5200481588bc.png)\r\n\r\nNot sure to understand why we can't simply use the following instead. For which I don't see the point of using any ESLint rule. I just want the effect to run on messageId change, this is explicit enough for me and there's no \"trap\"\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869777-564ed400-e37b-11e9-8570-12534e5f2a53.png)\r\n\r\nI've heard that the [React team recommends rather the later](https://twitter.com/satya164/status/1178571088172896256), asking the user to useCallback, instead of building custom hooks taking a dependency array, why exactly? Also heard that the ESLint plugin now was able to detect missing deps in a custom hook, if you add the [hook name to ESLint conf](https://twitter.com/n1rual/status/1178568248062877701). Not, sure what to think we are supposed to do in the end.\r\n\r\n## Are we safe using workarounds?\r\n\r\nIt's still a bit hard for me to be sure which kind of code is \"safe\" regarding React's upcoming features, particularly Concurrent Mode. \r\n\r\nIf I use the `useEffectSafe` above or something equivalent relying on refs, I am safe and future proof?\r\n\r\nIf this is safe, and makes my life easier, why do I have to build this abstraction myself? \r\n\r\nWouldn't it make sense to make this kind of pattern more \"official\" / documented?\r\n\r\nI keep adding this kind of code to every project I work with:\r\n\r\n```tsx \r\nconst useGetter = <S>(value: S): (() => S) => {\r\n  const ref = useRef(value);\r\n  useIsomorphicLayoutEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return useCallback(() => ref.current, [ref]);\r\n};\r\n```\r\n(including important community projects like [react-navigation-hooks](https://github.com/react-navigation/hooks/blob/master/src/Hooks.ts#L46))\r\n\r\n## Is it a strategy to teach users?\r\n\r\nIs it a choice of the React team to not ship safer abstractions officially and make sure the users hit the closure problem early and get familiar with it? \r\n\r\nBecause anyway, even when using getters, we still can't prevent the user to capture some value. This has been documented by @sebmarkbage [here](https://gist.github.com/sebmarkbage/a5ef436427437a98408672108df01919) with async code, even with a getter, we can't prevent the user to do things like:\r\n\r\n```tsx\r\nonMount(async () => {\r\n  let isEligible = getIsEligible();\r\n  let data = await fetch(...);\r\n  // at this point, isEligible might has changed: we should rather use `getIsEligible()` again instead of storing a boolean in the closure (might depend on the usecase though, but maybe we can imagine isEligible => isMounted)\r\n  if (isEligible) {\r\n    doStuff(data);\r\n  }\r\n});\r\n```  \r\nAs far as I understand, this might be the case:\r\n\r\n> So you can easily get into the same situation even with a mutable source value. React just makes you always deal with it so that you don't get too far down the road before you have to refactor you code to deal with these cases anyway. I'm really glad how well the React community has dealt with this since the release of hooks because it really sets us up to predictably deal with more complex scenario and for doing more things in the future.\r\n\r\n\r\n## A concrete problem\r\n\r\nA react-navigation-hooks user reported that his effect run too much, using the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65870979-bf374b80-e37d-11e9-8a6c-1f7df8503c18.png)\r\n\r\nIn practice, this is because react-navigation core does not provide stable `navigate` function, and thus the hooks too. The core does not necessarily want to \"stabilize\" the navigate function and guarantee that contract in its API.\r\n\r\nIt's not clear to me what should I do, between officially stabilizing the `navigate` function in the hooks project (relying on core, so core can still return distinct navigate functions), or if I should ask the user to stabilize the function himself in userland, leading to pain and boilerplate for many users trying to use the API.\r\n\r\nI don't understand why you can't simply dissociate the closure dependencies to the effect's triggering, and simply omitting the `navigate` function here:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65871264-51d7ea80-e37e-11e9-837d-291775853b2e.png)\r\n\r\n\r\nWhat bothers me is that somehow as hooks lib authors we now have to think about whether what we return to the user is stable or not, ie safe to use in an effect dependency array without unwanted effect re-executions.\r\n\r\nReturning a stable value in v1 and unstable in v2 is a breaking change that might break users apps in nasty ways, and we have to document this too in our api doc, or ask the user to not trust us, and do the memoization work themselves, which is quite error prone and verbose. Now as lib authors we have to think not only about the inputs/outputs, but also about preserving identities or not (it's probably not a new problem, because we already need to in userland for optimisations anyway).\r\n\r\nAsking users to do this memoization themselves is error prone and verbose. And intuitively some people will maybe want to `useMemo` (just because of the naming) which actually can tricks them by not offering the same guarantees than `useCallback`.\r\n\r\n\r\n## A tradeoff between different usecases in the name of a consistent API?\r\n\r\n@satya164 also mentionned that there are also usecases where the [ESLint plugin saved him](https://twitter.com/satya164/status/1178395620236759043) more than once because he forgot some dependency, and for him, it's more easy to fix an effect re-executing too much than to find out about some cached value not updating. \r\n\r\nI see how the ESLint plugin is really handy for usecases such as building a stable object to optimize renders or provide a stable context value. \r\n\r\nBut for useEffect, when capturing functions, sometimes executing 2 functions with distinct identities actually lead to the same result. Having to add those functions to dependencies is quite annoying in such case. \r\n\r\nBut I totally understand we want to guarantee some kind of consistency across all hooks API.\r\n\r\n## Conclusion\r\n\r\nI try to understand some of the tradeoffs being made in the API. Not sure to understand yet the whole picture, and I'm probably not alone. \r\n\r\n@gaearon said to open an issue with a comment: `It's more nuanced`. I'm here to discuss all the nuances if possible :)\r\n\r\nWhat particularly bothers me currently is not necessarily the existing API. It's rather:\r\n- the dogmatism of absolutely wanting to conform the ESLint rules (for which I don't agree with for all usecases). Currently I think users are really afraid to not follow the rules.\r\n- the lack of official patterns on how we are supposed to handle some specific hooks cases. And I think the \"getter\" pattern should be a thing that every hooks users know about and learn very early. Eventually adding such pattern in core would make it even more visible. Currently it's more lib authors and tech leads that all find out about this pattern in userland with small implementation variations.\r\n\r\nThose are the solutions that I think of. As I said I may miss something important and may change my opinions according to the answers.\r\n\r\nAs an author of a few React libs, I feel a bit frustrated to not be 100% sure what kind of API contract I should offer to my lib's users. I'm also not sure about the hooks patterns I can recommend or not. I plan to open-source something soon but don't even know if that's a good idea, and if it goes in the direction the React team want to go with hooks.\r\n\r\nThanks\r\n\r\n\r\n","state":"open","updated_at":"2022-05-04T17:09:03Z","created_at":"2019-09-30T11:07:44Z","creator_user_login":"slorber"}
{"number":16873,"title":"[eslint-plugin-react-hooks] allow configuring custom hooks as \"static\"","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/enhancement\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently the eslint plugin is unable to understand when the **return value** of a custom hook is static.\r\n\r\nExample:\r\n\r\n```jsx\r\nimport React from 'react'\r\n\r\nfunction useToggle(init = false) {\r\n  const [state, setState] = React.useState(init)\r\n  const toggleState = React.useCallback(() => { setState(v => !v) }, [])\r\n  return [state, toggleState]\r\n}\r\n\r\nfunction MyComponent({someProp}) {\r\n  const [enabled, toggleEnabled] = useToggle()\r\n\r\n  const handler = React.useCallback(() => {\r\n    toggleEnabled()\r\n    doSomethingWithTheProp(someProp)\r\n  }, [someProp]) // exhaustive-deps warning for toggleEnabled\r\n\r\n  return <button onClick={handler}>Do something</button>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn't need to be included in a dependency array. This isn't a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.\r\n\r\nAs for how/where to configure it, I would be happy to add something like this to my .eslintrc:\r\n\r\n```js\r\n{\r\n  \"staticHooks\": {\r\n    \"useToggle\": [false, true],  // first return value is not stable, second is\r\n    \"useForm\": true,             // entire return value is stable \r\n  }\r\n}\r\n```\r\n\r\nThen the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of eslint-plugin-react-hooks have the same deficiency.\r\n\r\n## Please read my first comment below and try my fork if you are interested in this feature!","state":"open","updated_at":"2023-05-19T11:19:04Z","created_at":"2019-09-24T11:45:13Z","creator_user_login":"grncdr"}
{"number":16606,"title":"TypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** **Bug**\r\n\r\n**What is the current behavior?**\r\nTypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://github.com/facebook/react/blob/0f6e3cd61cf4a5a1491bb3c92780936aebc2a146/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L88\r\n\r\nIn the WebExtension content script, globalThis !== window.\r\nSo when `const requestAnimationFrame = window.requestAnimationFrame`, the `this` binding of `rAF` is lost.\r\n\r\nIn the after calling, `rAF` rebinds to the globalThis, but globalThis doesn't implements Window interface.\r\n\r\nPoC: Install this extension in the Firefox and you will see the error reported.\r\n```index.js\r\ntry {\r\n    const raf = window.requestAnimationFrame\r\n    raf(() => console.log('Okay.'))\r\n} catch (e) {\r\n    console.warn(e)\r\n}\r\n```\r\n\r\n```manifest.json\r\n{\r\n    \"name\": \"rAF in content script test\",\r\n    \"version\": \"0.0.1\",\r\n    \"manifest_version\": 2,\r\n    \"content_scripts\": [{ \"js\": [\"/index.js\"], \"matches\": [\"<all_urls>\"] }]\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFirefox, in WebExtension. \r\n\r\nRelated to https://github.com/facebook/react/issues/16605","state":"open","updated_at":"2019-08-31T01:25:21Z","created_at":"2019-08-29T05:25:38Z","creator_user_login":"Jack-Works"}
{"number":16589,"title":"Confusing error when passing non-function to useMemo","body":"\r\n\r\n[Example](https://codesandbox.io/s/boring-albattani-grhhp).\r\n\r\nWhen passing something like an object to `useMemo` the error isn't very helpful.\r\n\r\n```\r\nTypeError: nextCreate is not a function\r\n    at mountMemo (https://grhhp.csb.app/node_modules/react-dom/cjs/react-dom.development.js:13459:19)\r\n    ...\r\n```\r\n\r\nMost developers wont know what `nextCreate` is, and passing an object to `useMemo` doesn't seem _obviously_ wrong at first. We could add a `typeof` check that throws a better error, but maybe that's too much overhead? At the very least we could add a DEV warning with more helpful guidance.","state":"open","updated_at":"2022-12-14T15:18:18Z","created_at":"2019-08-27T20:41:37Z","creator_user_login":"aweary"}
{"number":16566,"title":"onMouseEnter event missing when component hides on top of another (i.e. contextual menu)","body":"I provide a codepen example showcasing the issue here,\r\nhttps://codepen.io/ivalduan/pen/VwZpmMQ\r\n\r\n1. The component on the screen tracks correctly a hover state of the mouse pointer\r\n2. With the right button you create a contextual menu without covering the text and the hover state is correct when the mouse is over the menu\r\n3. When you select and option of the contextual menu on top of the background component the second does not receive an onMouseEnter event and the hover state remains false when it should be true","state":"open","updated_at":"2020-04-01T22:31:07Z","created_at":"2019-08-25T16:56:06Z","creator_user_login":"ivalduan"}
{"number":16547,"title":"Devtools v4 does not work with Firefox's private window","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* bug\r\n* This issue has been reported in https://github.com/facebook/react-devtools/issues/1383\r\n\r\n**What is the current behavior?**\r\n\r\n\r\nSteps to Reproduce is here:\r\n\r\n1. Environments are:\r\n2. Open the page which uses react with a private window.\r\n3. Open Firefox's devtools.\r\n\r\nActual Result is:\r\n\r\n* react devtools' _component_ pane show `Unable to find React on the page.`\r\n* From about:debugging, we can see the below messsage:\r\n\r\n```\r\nSecurityError: Permission denied to access property \"container\" on cross-origin object main.js:51:305877\r\n    Kl moz-extension://56db142d-3d36-b04e-91ca-a7504c7708a5/build/main.js:51\r\n    apply self-hosted:4417\r\n    applySafeWithoutClone resource://gre/modules/ExtensionCommon.jsm:588\r\n    asyncWithoutClone resource://gre/modules/ExtensionCommon.jsm:2400\r\n```\r\n\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nreact devtools work\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* Firefox 68\r\n* react devtools v4.0.5\r\n* react v16.9","state":"open","updated_at":"2023-05-16T11:09:33Z","created_at":"2019-08-22T16:42:22Z","creator_user_login":"tetsuharuohzeki"}
{"number":16505,"title":"Chrome's Custom Formatters","body":"**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n_Transferring feature request from the old repo https://github.com/facebook/react-devtools/issues/989_\r\n\r\nHi! Is there any plans on supporting [Chrome's custom formatters](https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview) to display custom data structures in readable format in React dev tools?\r\n\r\nFor example when debugging ClojureScript's immutable data structures we have a custom formatter that outputs data into the console in readable and inspectable format.\r\n\r\nHere how it looks like\r\n![screen shot 2018-02-19 at 3 02 32 pm](https://user-images.githubusercontent.com/1355501/36379156-39e8a882-1586-11e8-8973-7e6d3772cb4e.png)\r\n\r\nAnd here's how data looks like in React Dev Tools inspector (basically underlying implementation of a data structure as seen in plain JS)\r\n![screen shot 2018-02-19 at 2 59 04 pm](https://user-images.githubusercontent.com/1355501/36379177-4b280d90-1586-11e8-808d-ea7f2cebb274.png)\r\n\r\nI think this can be done for React Dev Tools since once Custom Formatters are defined they are applied everywhere in Chrome's Dev Tools where it's possible to inspect data.\r\n","state":"open","updated_at":"2020-01-19T17:36:04Z","created_at":"2019-08-20T07:56:30Z","creator_user_login":"roman01la"}
{"number":16496,"title":"DevTools: Write tests for preserving selection","body":"See https://github.com/bvaughn/react-devtools-experimental/pull/215. It would be nice to have test coverage for it.\r\n\r\n---\r\nI got stuck here:\r\n\r\n```js\r\n    const Component = () => <div>Hi</div>;\r\n\r\n    act(() =>\r\n      ReactDOM.render(<Component />, document.createElement('div'))\r\n    );\r\n    const id = store.getElementIDAtIndex(0);\r\n    const rendererID = store.getRendererIDForElement(id);\r\n\r\n    act(() => {\r\n      global.bridge.send('selectElement', { id, rendererID });\r\n    })\r\n```\r\n\r\nThis test fails on master because bridge object is shared between agent and store. Separating it and emulating having two bridges didn't work because of some regression in the Suspense test. I haven't dug into why because the stack trace display is obscured and points to the wrong line in the test. The stack trace display points to the wrong line likely because of regenerator code. The regenerator code is likely coming from `babel-preset-env` thinking we need to polyfill async/await. I don't know why `babel-preset-env` doesn't realize my Node already has async/await. At that point I punted on this.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/219","state":"open","updated_at":"2020-01-08T19:10:09Z","created_at":"2019-08-19T22:27:51Z","creator_user_login":"bvaughn"}
{"number":16495,"title":"DevTools: Components tree is sometimes unexpectedly empty after navigation","body":"1. Open FB page\r\n2. Open Components tab\r\n3. Change address bar to `https://reactjs.org` and press Enter\r\n\r\nExpected: Components tab gets populated.\r\nActual:\r\n\r\n<img width=\"783\" alt=\"Screen Shot 2019-04-23 at 7 27 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56606380-00247a80-65fe-11e9-988c-2ad3e69eb579.png\">\r\n\r\n~~If I **inspect background page**, I see this:~~ (fixed by #229)\r\n\r\n<img width=\"652\" alt=\"Screen Shot 2019-04-23 at 7 27 12 PM\" src=\"https://user-images.githubusercontent.com/810438/56606408-0b77a600-65fe-11e9-9f65-5502401b7e4a.png\">\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/217","state":"open","updated_at":"2021-11-01T17:38:41Z","created_at":"2019-08-19T22:27:13Z","creator_user_login":"bvaughn"}
{"number":16494,"title":"DevTools: Audit places where we change tags or disconnect alternates in React","body":"Cases like https://github.com/bvaughn/react-devtools-experimental/issues/197 (where a dehydrated Suspense node turns into a regular one) produce confusing failures because we expect Fiber alternates to be \"for life\", whereas in practice they can actually get disconnected by React in some cases. (Search for \"Disconnect\" in ReactFiberBeginWork.)\r\n\r\nAdditionally, I think changing `tag` can also produce confusing failures if it changes from a value that was filtered out, to a value that is not filtered out.\r\n\r\nWe need to be more proactive about handling these cases when we make such changes to React, and we need to look at existing cases where this happens and whether we can handle them.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/198","state":"open","updated_at":"2020-01-08T19:10:09Z","created_at":"2019-08-19T22:26:58Z","creator_user_login":"bvaughn"}
{"number":16490,"title":"DevTools: Check if accessibility regressions exist compared to old DevTools","body":"Before this becomes stable, we need to check if we are regressing accessibility on any important existing interactions.\r\n\r\nAt least, we should probably make the tree view focusable.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/52","state":"open","updated_at":"2020-01-08T19:11:00Z","created_at":"2019-08-19T22:25:36Z","creator_user_login":"bvaughn"}
{"number":16488,"title":"DevTools: Re-enable postMessage transferable for faster ArrayBuffer transfers","body":"I got this on FB.com sandbox:\r\n\r\n<img width=\"815\" alt=\"screen shot 2019-03-01 at 1 15 24 pm\" src=\"https://user-images.githubusercontent.com/810438/53640457-26dcbb00-3c24-11e9-828f-a987ffeec4da.png\">\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/25","state":"open","updated_at":"2020-01-08T19:11:00Z","created_at":"2019-08-19T22:24:43Z","creator_user_login":"bvaughn"}
{"number":16487,"title":"DevTools: Crashes and warnings when quickly collapsing","body":"This is weird. Happens if I select a node deeply and then long-press \"left\" arrow.\r\n\r\n```\r\nInvalid index 154 specified; store contains 154 items.\r\n\r\nUncaught Invariant Violation: Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\r\n    at ReactError (file:///Users/gaearon/p/react-devtools-experimental/shells/dev/build/devtools.js:8529:40)\r\n```\r\n\r\nIt starts with \"invalid index\" and then gives me different React invariants or warnings depending on how lucky I am.\r\n\r\n![Screen Recording 2019-04-25 at 05 58 PM](https://user-images.githubusercontent.com/810438/56754075-fcbafb80-6783-11e9-8fe6-84aa29d1c120.gif)\r\n\r\n---\r\nMore weird symptoms:\r\n\r\n<img width=\"889\" alt=\"Screen Shot 2019-04-25 at 6 38 22 PM\" src=\"https://user-images.githubusercontent.com/810438/56756281-5671f480-6789-11e9-8d0b-631a5217e63b.png\">\r\n\r\n---\r\n<img width=\"832\" alt=\"Screen Shot 2019-04-25 at 6 41 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56756492-c7191100-6789-11e9-8814-cb849590ee01.png\">\r\n\r\n---\r\nThis \"fixes\" it:\r\n\r\n```diff\r\n       runWithPriority(UserBlockingPriority, () => dispatch(action));\r\n-      next(() => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n+      runWithPriority(UserBlockingPriority, () => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n     },\r\n```\r\n\r\nSo I suspect it's a bug with `Scheduler.next()`.\r\n\r\n---\r\nThis also looks funky. Note how somewhere in the middle right pane gets \"stuck\" showing the same cycle of values:\r\n\r\n![Screen Recording 2019-04-25 at 07 36 PM](https://user-images.githubusercontent.com/810438/56759733-8b824500-6791-11e9-95ba-d4d3630a4c5e.gif)\r\n\r\n---\r\nReact bug: https://github.com/facebook/react/issues/15512\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/228","state":"open","updated_at":"2020-01-08T19:10:59Z","created_at":"2019-08-19T22:24:17Z","creator_user_login":"bvaughn"}
{"number":16483,"title":"DevTools: Better linking between browser Performance tab and DevTools Profiler","body":"Notes from a chat with Benoit:\r\n\r\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\r\n\r\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\r\n\r\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\r\n\r\n---\r\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.\r\n\r\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37","state":"open","updated_at":"2020-01-08T19:10:58Z","created_at":"2019-08-19T22:07:31Z","creator_user_login":"bvaughn"}
{"number":16482,"title":"DevTools: Should Profiler surface the base duration?","body":"Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55","state":"open","updated_at":"2020-01-08T19:10:58Z","created_at":"2019-08-19T22:07:02Z","creator_user_login":"bvaughn"}
{"number":16481,"title":"DevTools: Collect more info when profiling","body":"Some feedback I've heard from a DevTools user (roughly transcribed by me):\r\n\r\n> I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\r\n\r\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\r\n\r\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98","state":"open","updated_at":"2020-04-17T18:37:54Z","created_at":"2019-08-19T22:06:29Z","creator_user_login":"bvaughn"}
{"number":16480,"title":"DevTools: Fix disabled hooks lint rule","body":"Disabled via 00f6466\r\n\r\nMore context at https://github.com/bvaughn/react-devtools-experimental/pull/154#discussion_r275134664\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/156","state":"open","updated_at":"2020-01-08T19:10:57Z","created_at":"2019-08-19T22:06:06Z","creator_user_login":"bvaughn"}
{"number":16478,"title":"DevTools: Component bookmarks","body":"Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).\r\n\r\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\r\n\r\n<sup>1</sup> Although this association would be lost with a filter change.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305","state":"open","updated_at":"2020-01-08T19:10:57Z","created_at":"2019-08-19T21:57:12Z","creator_user_login":"bvaughn"}
{"number":16477,"title":"DevTools: Profiler: Show which hooks changed","body":"# \"Can you show which hooks changed?\"\r\n\r\n...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\r\n\r\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\r\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)\r\n\r\nLet's take each of a look at each of these below.\r\n\r\n## 1 - Identifying which hooks values change\r\n\r\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\r\n\r\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.\r\n\r\nI think we could do better than re-running the above hooks override for every component on every commit if we:\r\n* Created a map of Fiber to cached hooks tree structure.\r\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\r\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\r\n\r\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\r\n\r\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\r\n\r\n## 2 - Identifying a hook\r\n\r\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\r\n\r\n```js\r\nfunction useCustomHook(...) {\r\n  const [foo, setFoo] = useState(...);\r\n  // ...\r\n}\r\n\r\nfunction ExampleComponent(props) {\r\n  const [bar, setBar] = useState(...);\r\n  const [baz, setBaz] = useState(...);\r\n  const custom = useCustomHook(...);\r\n  // ...\r\n}\r\n```\r\n\r\nThe example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\r\n\r\n```\r\nState\r\nState *\r\nCustomHook\r\n  State *\r\n```\r\n\r\nThis is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.\r\n\r\n## In summary\r\n\r\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312","state":"open","updated_at":"2021-07-17T01:01:16Z","created_at":"2019-08-19T21:56:36Z","creator_user_login":"bvaughn"}
{"number":16471,"title":"DevTools: React Native: Support reload-and-profile","body":"React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\r\n\r\nIf we did decide to support it,I think we would need to solve the following:\r\n\r\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\r\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\r\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\r\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336","state":"open","updated_at":"2022-03-30T18:25:22Z","created_at":"2019-08-19T21:47:53Z","creator_user_login":"bvaughn"}
{"number":16470,"title":"DevTools: React Native: Remember saved component filters between reloads","body":"DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\r\n\r\n**Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\r\n\r\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337","state":"open","updated_at":"2020-01-08T19:10:55Z","created_at":"2019-08-19T21:47:06Z","creator_user_login":"bvaughn"}
{"number":16468,"title":"Remember saved component filters by url or in bookmarks","body":"It would be cool if it will support saving filter based on url or some bookmarks. I think it will be really useful for switching between different projects. And seems that bookmarks is better solution because usually people have some different stages like production/pre-production/local development.\r\n\r\n---\r\nOriginally reported by @7rulnik via https://github.com/bvaughn/react-devtools-experimental/issues/359","state":"open","updated_at":"2020-07-25T19:40:17Z","created_at":"2019-08-19T21:43:09Z","creator_user_login":"bvaughn"}
{"number":16465,"title":"DevTools: Occasional FOUC when loading DevTools","body":"Seems to only happen the first time DevTools is opened after being installed (or perhaps the first time after the browser is opened).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/381","state":"open","updated_at":"2020-01-08T19:10:53Z","created_at":"2019-08-19T21:38:01Z","creator_user_login":"bvaughn"}
{"number":16463,"title":"DevTools: An easier way to see all siblings","body":"I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\r\n\r\nSay I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.\r\n\r\n* first press: collapse the current node\r\n* second press: collapse all siblings (new)\r\n* third press: move to the parent\r\n\r\nMaybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on — which is now on by default.)\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384","state":"open","updated_at":"2020-02-08T07:47:08Z","created_at":"2019-08-19T21:34:16Z","creator_user_login":"bvaughn"}
{"number":16444,"title":"Refactor ProfilerContext to use reducer instead of multi-state","body":"The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\r\n\r\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\r\n\r\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).","state":"open","updated_at":"2020-01-08T19:10:52Z","created_at":"2019-08-18T15:40:40Z","creator_user_login":"bvaughn"}
{"number":16416,"title":"SSR: Cannot set property 'memoizedState' of null","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug?\r\n\r\n**What is the current behavior?**\r\n\r\n> Cannot set property 'memoizedState' of null\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nconst processLink = html => {\r\n  return renderToStaticMarkup(<Link />)\r\n};\r\n\r\nconst RichText = ({ html }) => {\r\n  const htmlProcessed = useMemo(() => processLink(html), [html]);\r\n}\r\n```\r\nSee https://codesandbox.io/s/cannot-set-property-memoizedstate-of-null-mrxfr\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8~16.9\r\n\r\n","state":"open","updated_at":"2023-05-31T08:29:19Z","created_at":"2019-08-16T09:10:04Z","creator_user_login":"ambar"}
{"number":16374,"title":"Verify that Dehydrated Boundaries (and SuspenseList) Works with DevTools","body":"The fixture might be a good start https://github.com/facebook/react/tree/master/fixtures/ssr (enableSuspenseServerRenderer flag to try it).\r\n\r\nIt has a long suspending thing.\r\n\r\nIt doesn't have a SuspenseList yet but might be nice.","state":"open","updated_at":"2020-01-08T19:11:25Z","created_at":"2019-08-12T23:12:21Z","creator_user_login":"sebmarkbage"}
{"number":16365,"title":"ErrorBoundary rendering multiple copies of itself when ref assignment fails","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a error occurs during the assignment of a `ref` (and maybe other conditions), a error boundary wrapping that error may get confused and it renders itself multiple times inside the same parent. See https://codesandbox.io/s/stoic-fermi-6etqb which renders:\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>content</span></div>\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```","state":"open","updated_at":"2020-01-09T17:05:27Z","created_at":"2019-08-12T14:12:35Z","creator_user_login":"silverwind"}
{"number":16342,"title":"textarea does not show warning when switching from uncontrolled to controlled like inputs do","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhile things like `<input>` correctly get a warning when switching from uncrontrolled to controlled, I'm noticing `<textarea>` does not\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a codesandbox. Type in the input field, we see error (correct), change to textarea and start over, type in field and we don't see the error (incorrect I think) https://codesandbox.io/s/recursing-dawn-jls8i\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8\r\n","state":"open","updated_at":"2019-12-01T22:39:25Z","created_at":"2019-08-09T19:15:55Z","creator_user_login":"bradwestfall"}
{"number":16265,"title":"Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG (possible) in `eslint-plugin-react-hooks`\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm in CodeSanbox using a React Sandbox I can use single properties of the `props` object as dependencies for the `useEffect` hook:\r\n\r\nExample 1:\r\n\r\n```\r\nuseEffect(()=>{\r\n    console.log('Running useEffect...');\r\n    console.log(typeof(props.myProp));\r\n  },[ ]);\r\n```\r\n\r\nThe example 1 gives me the following warning in CodeSandbox environment:\r\n\r\n>React Hook useEffect has a missing dependency: '**props.myProp'**. Either include it or remove the dependency array. (react-hooks/exhaustive-deps) eslint\r\n\r\nAnd if I add `[props.myProp]` to the array, the warning goes away.\r\n\r\nBut the same example 1 in my local environment in VSCode, I get the following warning:\r\n\r\n>React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.eslint(react-hooks/exhaustive-deps)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that I would get the same behavior that I get on CodeSandbox in my local environment in VSCode.\r\n\r\nBut, if I add `[props.myProp]` to the array, the warning DOES NOT go away. Although the code works as intended.\r\n\r\nWhat could be happening? Does CodeSandbox uses a different version of the plugin? Is there any configuration I can make to change this behavior?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions I'm using:\r\n\r\nDEV:\r\n```\r\n\"eslint\": \"^5.10.0\",\r\n\"eslint-plugin-react\": \"^7.11.1\",\r\n\"eslint-plugin-react-hooks\": \"^1.6.1\",\r\n```\r\n\r\nREGULAR\r\n```\r\n\"react\": \"^16.8.6\",\r\n\"react-dom\": \"^16.8.6\",\r\n```\r\n\r\nVSCODE (probably not causing this issue)\r\n\r\nVersion: 1.32.3 (user setup)\r\nCommit: a3db5be9b5c6ba46bb7555ec5d60178ecc2eaae4\r\nDate: 2019-03-14T23:43:35.476Z\r\nElectron: 3.1.6\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n\r\n**.eslintrc.json**\r\n\r\n```\r\n{\r\n  \"root\"  :true,\r\n  \"env\": {\r\n    \"browser\": true,\r\n    \"commonjs\": true,\r\n    \"es6\": true,\r\n    \"node\": true\r\n  },\r\n  \"extends\": [\r\n    \"eslint:recommended\",\r\n    \"plugin:react/recommended\",\r\n    \"plugin:import/errors\"\r\n  ],\r\n  \"parser\":\"babel-eslint\",\r\n  \"parserOptions\": {\r\n    \"ecmaVersion\": 2018,\r\n    \"sourceType\": \"module\",\r\n    \"ecmaFeatures\": {\r\n      \"jsx\":true\r\n    }\r\n  },\r\n  \"plugins\":[\r\n    \"react\",\r\n    \"react-hooks\"\r\n  ],\r\n  \"rules\": {\r\n    \"react/prop-types\": 0,\r\n    \"semi\": \"error\",\r\n    \"no-console\": 0,\r\n    \"react-hooks/rules-of-hooks\": \"error\",\r\n    \"react-hooks/exhaustive-deps\": \"warn\"\r\n  },\r\n  \"settings\": {\r\n    \"import/resolver\" : {\r\n      \"alias\" : {\r\n        \"map\" : [\r\n          [\"@components\",\"./src/components\"],\r\n          [\"@constants\",\"./src/constants\"],\r\n          [\"@helpers\",\"./src/helpers\"]\r\n        ],\r\n        \"extensions\": [\".js\"]\r\n      }\r\n    },\r\n    \"react\" : {\r\n      \"version\": \"detect\"\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n","state":"open","updated_at":"2022-11-18T05:05:36Z","created_at":"2019-07-31T11:18:04Z","creator_user_login":"cbdeveloper"}
{"number":16174,"title":"Request for support of oncuechange event on <track> elements","body":"## What\r\n\r\nFeature request for `oncuechange` event handler as prop for `<track>` html element.\r\n\r\n## Why?\r\n\r\nTo develop custom subtitles/captions it is necessary to listen to listen to this event in order to determine which entry from the subtitle file to render and at what time.\r\n\r\nAs of ReactDOM 16.8.6 this is not supported.\r\n\r\n## Current workaround\r\n\r\nYou can see from [this codesandbox](https://codesandbox.io/s/request-for-oncuechange-support-in-reactdom-7dltb) the only workaround is to manually assign an event listener for the `oncuechange` since `onCueChange` does not exist.","state":"open","updated_at":"2022-09-09T12:08:14Z","created_at":"2019-07-22T16:25:47Z","creator_user_login":"JofBigHealth"}
{"number":16161,"title":"onBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nonBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge\r\nhttps://codesandbox.io/s/modest-franklin-muirj  \r\nNOTE: pasting it would not trigger the bug, you have to type it in. You can use control-command-space to open the emoji keyboard on mac\r\n\r\n**What is the expected behavior?**\r\nDOM should not update before onBeforeInput fires\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.3.1\r\nFirefox: 68.0.1 \r\nMac: 10.14.5\r\n","state":"open","updated_at":"2020-04-01T21:19:04Z","created_at":"2019-07-19T00:07:06Z","creator_user_login":"Chun-Yang"}
{"number":16087,"title":"[Umbrella] Memory Leaks","body":"This issue is a summary of issues mentioned in https://github.com/facebook/react/pull/15157.\r\n\r\nThere are many different ways to create memory leaks with React since we give you access to the imperative power to do so. Most should be dealt with by clean up / unmount functions.\r\n\r\nSome could be pure React bugs. Some could be related to the lack of clean up of render phase effects. Others could be related to leaks that exists but the way React works makes them larger than they otherwise would've.\r\n\r\n# Resolved\r\n\r\n- [x] Land https://github.com/facebook/react/pull/16115 What patterns are actually covered? It can cut down on a potentially larger leak but is that the whole leak? I could imagine some patterns where this is the complete solution but unclear if it's the complete solution for the patterns that people are actually hitting in practice.\r\n\r\n# Actionable\r\n\r\nI think there are at least two actionable patterns to address from #15157:\r\n\r\n- [ ] If a handle on a DOM node is leaked, it takes the React tree with it. This is a fairly easy mistake to make and the effect is pretty high. What we would do here is special case DOM nodes with refs on them, and always detach their back pointer to the React Fiber, if it was ever fully mounted. We currently traverse these trees anyway when they get deleted. We want to stop doing this for most things but for nodes with a ref it seems minor to special case since they typically need to be invoked with null anyway.\r\n- [ ] Investigate the source of the leak in https://github.com/jonnycornwell/potential_react_leak and fix the source of the problem.\r\n\r\n# Unresolved\r\n\r\n- [ ] Closing over setState/dispatch or class component instances to global state can leak too. Does this pattern warrant special casing too? Under what conditions?\r\n- [ ] It appears Chrome (and maybe other browsers?) may retain inputs due to the Undo Stack (https://github.com/facebook/react/issues/17581)\r\n- [ ] What other issues remain after solving the actionable above? Let's make another pass investigating if people's original issues remain.\r\n\r\n# Won't Fix\r\n\r\n- Side-effects in class constructor, componentWillMount, componentWillReceiveProps, componentWillUpdate, getDerivedStateFrom... and render that store a reference to anything stateful outside React won't be able to clean up. This is [documented](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in the 16.3 release and is a major design decision as part of the concurrent/suspense/error handling strategy.\r\n- Effects/state retained temporarily in alternate fiber likely won't be fixed short term. This is due to how Fiber uses two trees and swaps between them. This can lead to additional values being retained until that tree gets some work on it to swap again. This was observed in the Hooks release and there are some confusing cases where a destroy function can hold onto more memory than expected in the closure. Typically this is solved by using a custom hook since that gets its own scope/closure.\r\n- Props/child trees retained by alternate children. Similarly, children that was just removed can sometimes between retained by the alternate copy of that. That is until that node gets another update on it which clears out the old children. These cases are fairly unusual and fix themselves eventually as the app lives on.","state":"open","updated_at":"2021-08-10T20:56:56Z","created_at":"2019-07-09T00:17:45Z","creator_user_login":"sebmarkbage"}
{"number":15989,"title":"Collapsible Error Dialogs for the Ecosystem","body":"Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.","state":"open","updated_at":"2020-01-08T19:11:48Z","created_at":"2019-06-25T17:09:07Z","creator_user_login":"gaearon"}
{"number":15988,"title":"getDerivedStateFromError for Control Flow","body":"Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.","state":"open","updated_at":"2020-01-08T19:11:47Z","created_at":"2019-06-25T17:05:13Z","creator_user_login":"gaearon"}
{"number":15879,"title":"Component delegation to context","body":"**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**Introduction/Concept**\r\nI was trying to make a modal package (bootstrap visual as a placeholder) that instead of instancing modals all over the DOM and virtual DOM, would concentrate the data in a holder/controller. This controller would be responsible for providing the modal context and display/hide when necessary.\r\n\r\n**What is the current behavior?**\r\nThe state of the modal content only updates when I recall the show method. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/modals-react-i8bdn (Bootstrap is included only to make the modal work)\r\n\r\n**What is the expected behavior?**\r\nThat React would keep the state sync with the counter value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nAll browsers/OS\r\nNo","state":"open","updated_at":"2019-06-13T17:47:48Z","created_at":"2019-06-13T17:47:48Z","creator_user_login":"ghost"}
{"number":15739,"title":"Controlled input makes browser not saving submitted value (for autocomplete)","body":"**Bug** (behaves different per browser, but generally inconsistent to uncontrolled inputs)\r\n\r\n**Current behavior**\r\nReproduce with https://jsfiddle.net/bootleq/hos4r6qd/\r\n1. Type `a` in *name* field, and `b` in *uncontrolled* field.\r\n2. Submit.\r\n3. Re-run the fiddle.\r\n4. Focus input fields to see if browser \"saves\" previous input.\r\n\r\n**Expected behavior**\r\nBrowser provides `a` suggestion for *name* and `b` for *uncontrolled* field.\r\nControlled and uncontrolled elements should behave the same.\r\n\r\n**Actual result**\r\nUncontrolled input has `b` suggestion, but controlled input (*name*) has **no** suggestion.\r\nTested on Windows 7, Google Chrome 74.0.3729.169.\r\nAnd on Firefox 68.0b4, we can click the *workaround* button before submit, by reset the `value` DOM attribute it behaves as expected.","state":"open","updated_at":"2022-11-02T12:24:40Z","created_at":"2019-05-25T12:18:13Z","creator_user_login":"bootleq"}
{"number":15727,"title":"Root-level performance events","body":"DevTools (and other perf related infra) would benefit from being able to observer the following:\r\n* Starting (or resuming) work on a root.\r\n* Completing (or yielding) work on a root.\r\n* Committing work for a root.\r\n* A particularly component suspending during a render.\r\n* A suspended (identified by a component stack) promise resolving/retrying.\r\n* An update being scheduled (e.g. `setState`) by a component (identified by a component stack).\r\n* A root-level `render` call being made.\r\n\r\nIn order to fit within the context of the scheduler, we would also want to emit/capture the following events:\r\n* The scheduler is starting to run tasks at a specific priority.\r\n* The scheduler is stopping.\r\n* The scheduler currently has X number of tasks scheduled for each priority. (Maybe this could be logged periodically? Or along with each time we stopped work at a priority?)\r\n\r\nWe could use this info to e.g. draw a timeline in the Profiler UI that showed CPU/IO work breakdown.\r\n\r\nIf we used a mechanism like `performance.mark` to record these events as part of the browser's profiling session, we could also include information about _unscheduled_ JavaScript- as well as other important related concepts, like network requests, paints, etc.\r\n\r\n### Sequencing\r\n- [ ] (ʀᴇᴀᴄᴛ) Add logging to react-reconciler and scheduler packages.\r\n    * e.g. Make sure we are logging start/stop/yield/cancel for renders correctly\r\n    * e.g. Make sure state-updates are being logged with the scheduled priority (not just the current)\r\n    * Research: Make sure performance.mark is actually fast enough to use.\r\n    * Add some basic test coverage to ensure we are marking the expected events in the expected order.\r\n    * (Do not expose component stacks for now).\r\n- [ ] (ʀᴇᴀᴄᴛ) Design API for DevTools to start/stop performance marking.\r\n    * This shouldn’t be on by default, only when we’re actually profiling.\r\n- [ ] (ʀᴇᴀᴄᴛ) Design public API (if we want one) for collecting and logging these new data points.\r\n    * Web-speed would probably like to collect this data.\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) [Parse Chrome](https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview) performance profile JSON output.\r\n    * Filter unsupported event types.\r\n    * Massage data slightly (e.g. combine multiple micro-yields into a single task).\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Create visualization (chart) UI for data.\r\n    * Turn individual events (or “B” and “E” pairs) into graphics on a timeline.\r\n    * Needs exploratory prototyping / design work.\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Create zoom-and-pan controls.\r\n    * Something that works similar to Chrome’s Performance tab probably.\r\n    * Enables zooming in on regions of profiling data.\r\n    * Would be nice to build using the interactions stuff Dominic/Nicolas made for Comet\r\n    * Consider not zooming all the way out by default (but setting some max zoom-out cap?)\r\n    * Consider adding windowing logic to avoid rendering things outside of the viewport?\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Add [Chrome debug protocol](https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-start) support\r\n    * Requires [“debugger” permission](https://developer.chrome.com/extensions/debugger), but it should be an [optional permission](https://developer.chrome.com/extensions/permissions) that we just-in-time prompt for.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Initial integration.\r\n    * When user starts profiling React, Chrome’s profiling recorder should also be started.\r\n        * We may want to enable running one without the other? Depends on how much overhead.\r\n    * Also call the React hook to enable performance.mark calls for scheduler and react-dom.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Improved integration.\r\n    * Add component stack ID to marked “update state” and “suspend” events (e.g. “state-update-normal-123”)\r\n    * Read actual component stack string from DevTools using this ID.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Explore implementing a queue size visualization\r\n    * Would require a new event or a hook into scheduler to get the current queue size.","state":"open","updated_at":"2020-01-08T19:12:23Z","created_at":"2019-05-23T23:00:28Z","creator_user_login":"bvaughn"}
{"number":15726,"title":"Improving the component logging/debugging experience","body":"# Backstory\r\n\r\nDevTools re-renders function components that use hooks in order to build up metadata to display in the selected element panel. This may cause confusion, since these re-renders will trigger breakpoints and cause unexpected console logging (see [this comment](https://github.com/facebook/react-devtools/issues/1215#issuecomment-495382645)). We avoid unnecessary re-renders by caching data (see [PR 289](https://github.com/bvaughn/react-devtools-experimental/pull/289)) but even so this is likely to be a point of confusion.\r\n\r\n# Solution\r\n\r\nIt would be nice if the shallow re-rendering done by DevTools were less observable (e.g. console logs were suppressed to avoid cluttering the console). Breakpoints would still be hit, but that seems like a less common use case. \r\n\r\nWhile we are considering logging, we might also consider if there are additional improvements that could be made, e.g.\r\n\r\n1. Add a new section to the Components tree that shows the most recently logged messages for a given component.\r\n2. Add an option to coalesce render-time logs into a single message that's printed at commit (or error) time to make debug logging easier to read. (Perhaps we could use `console.group` to also indicate the nested structure of these logs.)\r\n\r\nThe proposals below address both (a) collecting per-component logging info and (b) temporarily disabling console logging while re-rendering for inspection purposes.\r\n\r\n# API Proposals\r\n\r\n## 1: Modify built-in `console` methods\r\n\r\nDevTools could spy on the built-in `console` methods and disable the pass-through functionality when re-rendering.\r\n\r\n### Pros\r\n* Requires no effort / code changes for developers to opt in and benefit from this.\r\n* \"Just works\" for advanced methods like `console.group` and `console.table`.\r\n* \"Just works\" for third party libraries that may not even be React-specific.\r\n### Cons\r\n* Feels questionable to modify native browser APIs.\r\n\r\n## 2: Add `React.log` and `React.info` API\r\n\r\nReact will be adding two new logging methods in the upcoming v16.9 release- `React.warn` and `React.error` (see #15170). These methods decorate `console.warn` and `console.error` and append the current component stack to any logged messages. We could extend this pattern and add additional `log` and `info` methods. These APIs could be extended by DevTools as needed.\r\n\r\n### Pros\r\n* Does not require mutating global APIs.\r\n### Cons\r\n* Requires code changes to opt-in.\r\n* Would not cover (or would be a hassle to cover) all `console` methods (e.g. `group`)\r\n* Would not work for third party components or non-React utility code.\r\n\r\n## 3: Add `React.debug(callback)` API\r\n\r\nReact could add a new `debug` API that accepts a callback for general debug operations (most commonly `console` logging, but also potentially breakpoints or other things).\r\n\r\n### Pros\r\n* Works with breakpoints.\r\n* Covers more complex use cases (e.g. pushing to an array for debug purposes).\r\n* Single method rather than mirroring (or spying on) multiple `console` APIs.\r\n### Cons\r\n* Requires code changes to opt-in.\r\n* Requires more boilerplate for simple logging use cases.\r\n","state":"open","updated_at":"2020-02-11T08:41:15Z","created_at":"2019-05-23T22:37:15Z","creator_user_login":"bvaughn"}
{"number":15520,"title":"Cannot suppress error boundary output using react-test-renderer","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen following @gaearon's example on [how to suppress the error boundary logging in tests expecting errors](https://github.com/facebook/react/issues/11098#issuecomment-412682721), it appears to not be working in 16.8.6 (I'm not sure which versions after 16.4.3 is _has_ worked for).\r\n\r\n[Here is a sandbox.](https://codesandbox.io/s/l5mrl747wm?expanddevtools=1&fontsize=14&module=%2Fsrc%2Fexample.test.js&previewwindow=tests)\r\n\r\nI had to make a change to the `renderError` as it looks like the way codesandbox executes the script cause the `event.error` to be hidden from the code (it just had an object with `isTrusted: true` on it - google led me [here](https://stackoverflow.com/a/44862693/6902543) so I changed it to just count the number of errors).\r\n\r\nI also made a change to be able to use `react-test-renderer` as well as `react-dom` as I'm actually after a way to suppress the error using the test renderer for an [issue raised in `react-hooks-testing-library`](https://github.com/mpeyper/react-hooks-testing-library/issues/50).\r\n\r\nIn my sandbox, you will see the errors\r\n\r\n> The above error occurred in the <Darth> component:\r\n> in Darth\r\n> in TestBoundary\r\n>\r\n> React will try to recreate this component tree from scratch using the error boundary you provided, TestBoundary.\r\n\r\nand\r\n\r\n> The above error occurred in the <ObiWan> component:\r\n> in ObiWan\r\n> in TestBoundary\r\n> \r\n> React will try to recreate this component tree from scratch using the error boundary you provided, TestBoundary.\r\n\r\nget printed to the console, despite the `event.preventDefault()` call.\r\n\r\nThe other main thing to note is that the `react-test-renderer` test does not pass, which implies the error listener is not firing for it, which sort of makes sense to me as it's not using the DOM, so it's not erroring on the window, but my understanding of these things is somewhat limited.\r\n\r\n**What is the expected behavior?**\r\n\r\nAssuming the `expectRenderError`, `TestBoundary` and `handleTopLevelError` code is sufficient to suppress the output as indicated in #11098, I would expect the `react-dom` test to produce no output.\r\n\r\nAssuming the same setup should also work for `react-test-renderer`, I would also expect that test to have no output.\r\n\r\nIf either of these assumptions are wrong, how should one go about suppressing the output in these tests?  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react`: `16.8.6`\r\n`react-dom`: `16.8.6`\r\n`react-test-renderer`: `16.8.6`","state":"open","updated_at":"2020-12-12T14:17:18Z","created_at":"2019-04-27T12:50:04Z","creator_user_login":"mpeyper"}
{"number":15488,"title":"eslint-plugin-react-hooks suggests adding a dependency on a function that always changes","body":"If you write:\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\nconst Foo = ({ orgId }) => {\r\n  const fetchOrg = () => {\r\n    alert(orgId);\r\n  };\r\n  useEffect(() => {\r\n    fetchOrg();\r\n  }, [orgId]);\r\n  return <div />;\r\n};\r\n```\r\n\r\nthen you get the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array\r\n\r\nBut if you follow that advice and add `fetchOrg` to the dep array, you get:\r\n\r\n> The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook\r\n\r\nIdeally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about.","state":"open","updated_at":"2020-01-08T23:42:28Z","created_at":"2019-04-24T17:50:17Z","creator_user_login":"sophiebits"}
{"number":15486,"title":"<details> open attribute not synchronised","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**What is the current behavior?**\r\n`open` attribute does not synchronise with the virtual dom on the `details` element, when using the `details` element as a controlled component. \r\n\r\nI have a codesandbox [here](https://codesandbox.io/s/xl756mk82w) that demonstrates the current behaviour. \r\n\r\n**What is the expected behavior?**\r\nThe `open` attribute stays synchronised with the virtual dom and is added/removed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: **`16.8.6`**\r\nBrowser: **Chrome**\r\nDid this work in previous versions of React? **No**\r\n","state":"open","updated_at":"2023-05-06T14:48:52Z","created_at":"2019-04-24T13:55:30Z","creator_user_login":"afenton90"}
{"number":15446,"title":"Events before Client Side Hydration","body":"Recently I detected a problem using React in SSR. Maybe is quite obvious, but all the JavaScript events that are fired before the JavaScript is loaded, are lost...\r\n\r\nThis is something normal. The JS is not there yet... Ok. However, I expect to have some utility to do some exceptions.\r\n\r\nI'm going to try to explain my case:\r\n\r\nI'm using an image, and in the event `onError`, I want to change the src to render a fallback image.\r\n\r\n```jsx\r\nfunction Img(props) {\r\n  return (\r\n    <img {...props} onError={e => { e.target.src = fallbackSrc } } />\r\n  )\r\n}\r\n```\r\n\r\nNevertheless, this code loaded from SSR, is working \"sometimes\"... I guess that this \"sometimes\" is because if the event is fired before the client side hydration. Is not catched by my JS. And the `e => e.target.src = fallbackSrc` is never executed. However, if the JS is loaded faster than the onError event, is catched, and is rendering the fallback image as I expected.\r\n\r\nI want to propose some utility to do sometimes some exceptions, and render the JS inline on the first render. Perhaps, adding some extra config in `ReactDOM.hydrate`? I dunno... \r\n\r\nOr maybe someone can help me providing any tip in order to fix this?\r\n\r\n","state":"open","updated_at":"2023-08-04T22:29:20Z","created_at":"2019-04-18T16:09:41Z","creator_user_login":"aralroca"}
{"number":15418,"title":"Field type=\"email\" with multiple attribute cursor jumps to start","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhile adding multiple comma separated email addresses the cursor will jump to te beginning the input field. First i thought it was a [Formik](https://github.com/jaredpalmer/formik/issues/1428) issue, but it seems to be a React one.\r\n\r\nExample pure React: https://codesandbox.io/embed/0y06zo7l8p\r\nExample React with Formik: https://codesandbox.io/embed/k57zw7wz5\r\nMDN docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple\r\n\r\n**What is the expected behavior?**\r\nCursor stays on current position.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 73, Safari 12.1, Opera 60.0\r\nReact 16.7.0\r\n\r\nMaybe #14551 related?\r\n","state":"open","updated_at":"2020-11-06T20:35:45Z","created_at":"2019-04-15T08:32:08Z","creator_user_login":"jordyvg"}
{"number":15344,"title":"useReducer's dispatch should return a promise which resolves once its action has been delivered","body":"(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```","state":"open","updated_at":"2023-04-04T15:34:28Z","created_at":"2019-04-07T00:04:45Z","creator_user_login":"pelotom"}
{"number":15317,"title":"[Concurrent] Safely disposing uncommitted objects","body":"## How to safely keep a reference to uncommitted objects and dispose of them on unmount? \r\n\r\nFor a MobX world, we are trying to [prepare for the Concurrent mode](https://github.com/mobxjs/mobx-react-lite/issues/53). In short, there is a [Reaction object being created](https://github.com/mobxjs/mobx-react-lite/blob/231be100e6ba458f40642adb9f0bc77aa4d366ce/src/useObserver.ts#L32\r\n) to track for observables and it is stored within `useRef`.\r\n\r\nThe major problem is, that we can't just `useEffect` to create it in a safe way later. We need it to start tracking the observables on a first render otherwise we might miss some updates and cause inconsistent behavior.\r\n\r\nWe do have a [semi-working solution](https://github.com/mobxjs/mobx-react-lite/pull/121), basically, a custom made garbage collector based on `setTimeout`. However, it's unreliable as it can accidentally dispose of Reactions that are actually being used but weren't committed yet.\r\n\r\nWould love to hear we are overlooking some obvious solution there.","state":"open","updated_at":"2020-12-26T18:34:19Z","created_at":"2019-04-04T09:17:29Z","creator_user_login":"danielkcz"}
{"number":15293,"title":"Is it recommended to fetch in effect or should it be imperative","body":"In out team we encountered a explosive discussion on how we should handle the relationship of a fetch and its parameters, after searching in community I still find various solutions to this, I'd like to raise this discussion to find a best practive.\r\n\r\n## Background\r\n\r\nSuppose we have a simple list view like:\r\n\r\n<img width=\"687\" alt=\"Jietu20190402-130206@2x\" src=\"https://user-images.githubusercontent.com/639549/55377435-87268b80-5547-11e9-97a8-313a5713ced3.png\">\r\n\r\nWhenever user types keyword in textbox and clicks \"Search\" button, or they change the page number, we should fetch a new list from remote and render it in table.\r\n\r\nWe use redux to manage global state of this simple app, the store is structured as:\r\n\r\n```js\r\n{\r\n    filter: '',\r\n    pageIndex: 0,\r\n    results: []\r\n}\r\n```\r\n\r\nWe developed a total of 3 solutions to demonstrate how the change of `filter` and `pageIndex` should cause a fetch of `results`.\r\n\r\n## Use effect and separation of view and logic\r\n\r\nThis is the first demo: https://codesandbox.io/s/20x1m39w00\r\n\r\nIn this implementation we tried to:\r\n\r\n1. Utilize `useEffect` to trigger a fetch when any parameter changes.\r\n2. Do not pass any parameter as prop to `components/List` component.\r\n\r\nIn my point of view, I like this solution best because:\r\n\r\n1. It have a very clear separation of view and logic, `components/List` does not receive any redundant props such as `filter` or `pageIndex`.\r\n2. It theoretically treat a callback prop as a normal one, make it a dependency of `useEffect`.\r\n3. It works in a **reactive** way, which means \"we trigger a fetch not because the action taken from user, only because the change of state\".\r\n\r\nStill we have concerns about it:\r\n\r\n1. It obviously triggers more render and updates because change of `filter` or `pageIndex` does not dispatch `FETCH_RESULTS` immediately, this cause a sync dispatch in effect which we previously avoided by `no-set-state-did-update` rule.\r\n2. We create a state update from another state update, this \"chaining\" is not clear enough for developers and may cause unwanted infinite loop.\r\n\r\n## Use effect and params together\r\n\r\nThe second demo is much like the first one: https://codesandbox.io/s/54o1rjvyv4\r\n\r\nThe only change is we pass `filter` and `pageIndex` to `components/List`, in this case we believe **effect is a part of component** so that every dependencies used to form an effect should be passed as prop.\r\n\r\nThis solution gives a more clear view of what is used to fetch data in `components/List`, this is \r\n a highly adopted solution in community, however we're not sure this is recommended officially.\r\n\r\n## Imperative action to fetch data\r\n\r\nAs opposed to previous, this is our third demo: https://codesandbox.io/s/p5yv48x97x\r\n\r\nIn this solution we changed our thought and implement the app in a more \"redux way\":\r\n\r\n1. We trigger the fetch on user interactions, either click on \"Search\" button or change the page number, however either interaction only provides its own parameter, we don't provide `pageIndex` when \"Search\" button is clicked.\r\n2. We have a thunk which computes a new parameter object based on current state using `getState()` function, a `FETCH_RESULTS` action is dispatched.\r\n3. We have several reducers to observe `FETCH_RESULTS` action and updates corresponding parameter in global state.\r\n4. Fetched list is connected to `components/List` component, this component now is a pure presentational component, no lifecycle effect is involved.\r\n5. To solve the first fetch when application is mounted, we create an `containers/App` container component.\r\n\r\nBy doing these we eliminated the \"chaining state update\" issue, however it introduces several concerns:\r\n\r\n1. If we add more user interactions in the future, the `loadResults` thunk could be more and more complex.\r\n2. The use of `getState` in `redux-thunk` is not highly recommended in community, we found some articles stating that developers should avoid to use it in most cases.\r\n3. We can't explain the exist of the `containers/App` container only to trigger a fetch on mount, thee `useEffect` take no dependencies and `exhaustive-deps` rules complains about it, not paring mount and update is also a big uncomfortable point to us.\r\n4. Trigger fetch from user interactions is what we called \"imperative\", we're confused about whether a reactive framework like react recommends imperative programming.\r\n\r\n------\r\n\r\nSince we are not able to get a conclusion for a very long time, we decide to raise this issue for more discussion to find a better solution to these very common use cases.","state":"open","updated_at":"2021-03-24T18:31:38Z","created_at":"2019-04-02T05:34:28Z","creator_user_login":"otakustay"}
{"number":15278,"title":"useMemo / useCallback cache busting opt out","body":"According to the `React` docs, `useMemo` and `useCallback` are subject to cache purging:\r\n\r\n> You may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance. [source](https://reactjs.org/docs/hooks-reference.html#usememo)\r\n\r\nI am working on moving `react-beautiful-dnd` over to using hooks https://github.com/atlassian/react-beautiful-dnd/issues/871. I have the whole thing working and tested 👍 \r\n\r\nIt leans quite heavily on `useMemo` and `useCallback` right now. If the memoization cache for is cleared for a dragging item, the result will be a cancelled drag. This is not good. \r\n\r\nMy understanding is that `useMemo` and `useCallback` are currently *not* subject to cache purging based on this language:\r\n\r\n> In the **future**, React may choose to “forget”\r\n\r\n**Request 1**: Is it possible to opt-out of this cache purging? Perhaps a third `options` argument to `useMemo` and `useCallback`:\r\n\r\n```js\r\nconst value = useMemo(() => ({ hello: 'world' }), [], { usePersistantCache: true });\r\n```\r\n\r\n(Naming up for grabs, but this is just the big idea)\r\n\r\nA work around is to use a custom memoization toolset such as a `useMemoOne` which reimplements `useMemo` and `useCallback` just using `ref`s [see example](https://twitter.com/alexandereardon/status/1108488559881641986)\r\n\r\nI am keen to avoid the work around if possible.\r\n\r\n**Request 2**: While *request 1* is favourable, it would be good to know the exact conditions in which the memoization caches are purged","state":"open","updated_at":"2021-06-16T07:36:40Z","created_at":"2019-03-31T22:12:07Z","creator_user_login":"alexreardon"}
{"number":15255,"title":"Profiler marks","body":"Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff.","state":"open","updated_at":"2020-02-11T03:48:34Z","created_at":"2019-03-29T17:33:27Z","creator_user_login":"bvaughn"}
{"number":15240,"title":"Dancing between state and effects - a real-world use case","body":"I started this as a gist but Dan mentioned that this would be a good discussion issue so here goes. I've been writing with and refactoring code into hooks for a while now. For 95% of code, they are great and very straight-forward once you get the basic idea. There are still a few more complex cases where I struggle with the right answer though. This is an attempt to explain them.\r\n\r\n## The use case\r\n\r\nThis is a real-world use case from an app I'm building: interacting with a list items. I've simplified the examples into codesandboxes though to illustrate the basic idea.\r\n\r\nHere's the first one: https://codesandbox.io/s/lx55q0v3qz. It renders a list of items, and if you click on any of them, an editable input will appear to edit it (it doesn't save yet). The colored box on the right will change whenever an item rerenders.\r\n\r\nIf you click around in the items, you can see that when changing the edited item, all items rerender. But the `Row` component is wrapped with `React.memo`! They all rerender because the `onEdit` is new each time the app renders, causing all items to rerender.\r\n\r\n## Maintaining callback identity\r\n\r\nWe want `onEdit` to be same function for all future renders. In this case, it's easy because it doesn't depend on anything. We can simply wrap it in `useCallback` with an empty dependencies array:\r\n\r\n```js\r\n  let onEdit = useCallback(id => {\r\n    setEditingId(id);\r\n  }, []);\r\n```\r\n\r\nNow, you can see clicking around only rerenders the necessary items (only those colors change): https://codesandbox.io/s/k33klz68yr\r\n\r\n## Implementing saving\r\n\r\nWe're missing a crucial feature: after editing an item, on blur it should save the value. In my app the way the \"save\" event gets triggered is different, but doing it on blur is fine here.\r\n\r\nTo do this, we create an `onSave` callback in the app and pass it down to each item, which calls it on blur with the new value. `onSave` takes a new item and updates the items array with the new item and sets the `items` state.\r\n\r\nHere is it running: https://codesandbox.io/s/yvl79qj5vj\r\n\r\nYou'll notice that all items are rerendering again when saving. The list rerenders twice when you click another item: first when you click down and the input loses focus, and then again to edit a different item. So all the colors change once, and then only the editing rows color changes again.\r\n\r\nThe reason all of them are rerendering is because `onSave` is now a new callback every render. But we can't fix it with the same technique as `onEdit` because it depends on `items` - so we *have* to create a new callback which closes over `items` otherwise you'd lose previous edits. This is the \"callbacks are recreated too many times\" problem with hooks.\r\n\r\nOne solution is to switch to `useReducer`. Here's that implementation:\r\nhttps://codesandbox.io/s/nrq5y77kj0\r\n\r\nNote that I still wrap up the reducer into `onEdit` and `onSave` callbacks that are passed down to the row. I find passing callbacks to be clearer in most cases, and works with any components in the ecosystem that already expect callbacks. We can simply use `useCallback` with no dependencies though since `dispatch` is always the same.\r\n\r\nNote how that even when saving an item, only the necessary rows rerender.\r\n\r\n## The difference between event handlers and dispatch\r\n\r\nThere's a problem though. This works with a simple demo, but in my real app `onSave` *both* optimistically updates local state and saves it off to the server. It does a side effect.\r\n\r\nIt's something like this:\r\n\r\n```js\r\nasync function onSave(transaction) {\r\n  let { changes, newTransactions } = updateTransaction(transactions, transaction);\r\n  // optimistic update\r\n  setTransactions(newTransactions)\r\n  // save to server\r\n  await postToServer('apply-changes', { changes })\r\n}\r\n```\r\n\r\nThere's a big difference between the phase when an event handler and dispatch is run. Event handlers are run whenever they are triggered (naturally) but the dispatching the action (running `reducer`) happens when rendering. The reducer must be pure because of this.\r\n\r\nHere's the reducer from https://codesandbox.io/s/nrq5y77kj0:\r\n\r\n```js\r\n  function reducer(state, action) {\r\n    switch (action.type) {\r\n      case \"save-item\": {\r\n        let { item } = action;\r\n        return {\r\n          ...state,\r\n          items: items.map(it => (it.id === item.id ? item : it))\r\n        };\r\n      }\r\n      case \"edit-item\": {\r\n        return { ...state, editingId: action.id };\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nHow is `save-item` also supposed to trigger a side effect? First, item's important to understand these 3 phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nEvents are run in the first phase, which causes a render (when dispatches happen), and when everything is finally ready to be flushed to the DOM it does it in a \"commit\" phase, which is when all effects are run (more or less).\r\n\r\nWe need our side effect to run in the commit phase.\r\n\r\n### Option 1\r\n\r\nOne option is to use a ref to \"mark\" the saving effect to be run. Here's the code: https://codesandbox.io/s/m5xrrm4ym8\r\n\r\nBasically you create a flag as a ref:\r\n\r\n```js\r\nlet shouldSave = useRef(false);\r\n```\r\n\r\nLuckily, we've already wrapped the save dispatch into an event handler. Inside `onSave` we mark this flag as true. We can't do it inside of the reducer because it must be pure:\r\n\r\n```js\r\n  let onSave = useCallback(item => {\r\n    shouldSave.current = true;\r\n    dispatch({ type: \"save-item\", item });\r\n  }, []);\r\n```\r\n\r\nFinally, we define an effect that always runs after rendering and checks the flag and resets it:\r\n\r\n```js\r\n  useEffect(() => {\r\n    if (shouldSave.current) {\r\n      // save... all the items to the server?\r\n      post(items)\r\n      shouldSave.current = false;\r\n    }\r\n  });\r\n```\r\n\r\nI thought this option was going to work, but just ran into this issue. We don't know *what* to save anymore. We certainly don't want to send the entire items array to the server! I suppose we could store the item in the ref, but what happens if multiple events are fired before the effect runs? I suppose you could store an array, but... do we really need that?\r\n\r\n### Option 2\r\n\r\n**Note**: I just noticed this option is documented in [How to read an often-changing value from useCallback?](https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback), but I disagree with the tone used. I think this is a fine pattern an better in many cases than `dispatch`, even if it's not quite as robust. Especially since it's not as powerful as callbacks. (see end of this section)\r\n\r\nKeeping around all of the data we need to do the effect might work in some cases, but it feels a little clunky. If we could \"queue up\" effect from the reducer, that would work, but we can't do that. Instead, another option is to embrace callbacks.\r\n\r\nGoing back to the version which used a naive `onSave` which forced all items to rerender (https://codesandbox.io/s/yvl79qj5vj), `onSave` looks like this:\r\n\r\n```js\r\n  let onSave = useCallback(\r\n    item => {\r\n      setItems(items.map(it => (it.id === item.id ? item : it)));\r\n    },\r\n    [items]\r\n  );\r\n```\r\n\r\nThe core problem is that it depends on items. We need to recreate `onSave` because it closes over `items`. But what if it didn't close over it? Instead, let's create a ref:\r\n\r\n```js\r\nlet latestItems = useRef(items);\r\n```\r\n\r\nAnd an effect which keeps it up-to-date with items:\r\n\r\n```js\r\nuseEffect(() => {\r\n  latestItems.current = items\r\n});\r\n```\r\n\r\nNow, the `onSave` callback can reference the ref to always get the up-to-date items. Which means we can memoize it with `useCallback`:\r\n\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n}, []);\r\n```\r\n\r\nWe are **intentionally** opting to always referencing the latest item. The biggest change with hooks in my opinion is that they are safe by default: an async function will always reference the exact same state that existed at the time they were called. Classes operate the other way: you access state from this.state which can be mutated between async work. Sometimes you want that though so you can maintain callback identity.\r\n\r\nHere is the running sandbox for it: https://codesandbox.io/s/0129jop840. Notice how you can edit items and only the necessary rows rerender, even though it updates `items`. Now, we can do anything we want in our callback, like posting to a server:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  post('/save-item', { item })\r\n}, []);\r\n```\r\n\r\nBasically, if all you need is the latest data since last commit, **callbacks can be memoized as well as reducers**. The drawback is that you need to put each piece of data you need in a ref. If you have lots of pieces of data and only a few simple effects, reducers would be better, but in my case (and I suspect in many others) it's easier to use callbacks with refs.\r\n\r\nIt's nice too because in my real app the save process is more complicated. It needs to get changes back from the server and apply them locally as well, so it looks more like this:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  let changes = await post('/save-item', { item })\r\n  applyChanges(latestItems.current, changes)\r\n}, []);\r\n```\r\n\r\nMaintainability-wise, it's *really* nice to see this whole flow here in one place. Breakin this up to try to manually queue up effects and do a dance with `useReducer` feels much more convoluted.\r\n\r\n### Option 3\r\n\r\nI suppose another option would be to try to \"mark\" the effect to be run in state itself. That way you could do it in `useReducer` as well, and it would look something like this:\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { item } = action;\r\n      return {\r\n        ...state,\r\n        items: state.items.map(it => (it.id === item.id ? item : it)),\r\n        itemsToSave: itemsToSave.concat([item])\r\n      };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nAnd an effect would check the `itemsToSave` state and save them off. The problem is resetting that state - the effect would have to change state, causing a useless rerender, and it's not determistic to make sure that the effect does not run multiple times before `itemsToSave` gets reset.\r\n\r\nIn my experience mixing effects into state, causing renders, make things a lot more difficult to maintain and debug.\r\n\r\n### What's the difference between Option 1 and 2?\r\n\r\nIs there a crucial difference between 1 and 2? Yes, but I'd argue it's not a big deal if you can accept it. Remember these three phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nThe big difference is option 1 is doing the side effect in the commit phase, and option 2 is doing it in the event handler phase. Why does this matter?\r\n\r\nIf, for some reason, an item called `onSave` multiple times before the next commit phase happened, option 1 is more robust. A reducer will \"queue up\" the actions and run them in order, updating state in between them, so if you did:\r\n\r\n```js\r\nonSave({ id: 1, name: \"Foo\" })\r\nonSave({ id: 2, name: \"Bar\" })\r\n```\r\n\r\nwhich runs the callback twice immediately, the reducer will process the first save and update the items, and process the second save **passing in the already updated state**.\r\n\r\nHowever, with option 2, when processing the second save **the commit phase hasn't been run yet** so the `latestItems` ref hasn't been updated yet. **The first save will be lost**.\r\n\r\nHowever, the ergonomics of option 2 is much better for many use cases, and I think it's fine to weight these benefits and never need the ability to handle such quick updates. Although concurrent mode might introduce some interesting arguments against that.\r\n\r\n## Another small use case for triggering effects\r\n\r\nIn case this wasn't already long enough, there's a similar use case I'll describe quickly. You can also add new items to the list by editing data in an empty row, and the state of this \"new item\" is tracked separately. \"Saving\" this item doesn't touch the backend, but simply updates the local state, and separate explicit \"add\" action is needed to add it to the list.\r\n\r\nThe hard part is that there is a keybinding for adding the item to the list while editing - something like alt+enter. The problem is I want to coordinate with the state change, so first I want to save the existing field and *then* add to the list. The saving process is complicated so it need to run through that first (I can't just duplicate it all in `onAdd`).\r\n\r\nThis isn't a problem specific to hooks, it's just about coordinating with state changes. When I was working with reducers, I had though that something like this would be neat. Basically when the new items detect that you want to save + add it first an action like `{ type: 'save-item', fields: { name: 'Foo' }, shouldAdd: true }`\r\n\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { fields } = action;\r\n      let newItem = { ...state.newItem, ...fields };\r\n\r\n      if(action.shouldAdd) {\r\n        shouldAdd.current = true\r\n      }\r\n\r\n      return { ...state, newItem };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nwhere `shouldAdd` is a ref that is checked on commit phase and saves the item off to the server. This isn't possible though.\r\n\r\nAnother option would be for the item to call `onAdd` instead of `onSave` when saving + adding, and you could manually call the reducer yourself to process the changes:\r\n\r\n```js\r\nasync function onAdd(fields) {\r\n  let action = { type: 'save-item', fields }\r\n  dispatch(action)\r\n  \r\n  let newItem = reducer(state, action)\r\n  post('/add-item', { newItem });\r\n\r\n}\r\n```\r\n\r\nThis is kind of a neat trick: you are manually running the reducer to get the updated state, and React will run the reducer again whenever it wants.\r\n\r\nSince I ended up liking callbacks for my original problems, I ended up going with a similar approach where I have a ref flag that I just set in `onSave`:\r\n\r\n```js\r\nlet [newItem, setNewItem] = useState({})\r\nlet latestNewItem = useRef(newItem);\r\nlet shouldAdd = useRef(false);\r\n\r\nuseEffect(() => {\r\n  latestNewItem.current = newItem;\r\n})\r\n\r\nuseEffect(() => {\r\n  if(shouldAdd.current) {\r\n    setNewItem({})\r\n    post('/add-item', { newItem })\r\n    shouldAdd.current = false;\r\n  }\r\n})\r\n\r\nlet onSave = useCallback((fields, { add }) => {\r\n  // In my real app, applying the changes to the current item is a bit more complicated than this,\r\n  // so it's not an option to separate on an `onAdd` function that duplicates this logic\r\n  setNewItem({ ...latestNewItem.current, ...fields });\r\n\r\n  // This action also should add, mark the effect to be run\r\n  if(add) {\r\n    shouldAdd.current = true;\r\n  }\r\n}, [])\r\n```\r\n\r\n## Conclusions\r\n\r\nSorry for the length of this. I figure I'd be over-detailed rather than under-detailed, and I've been brewing these thoughts since hooks came out. I'll try to conclude my thoughts here:\r\n\r\n* Effects are **very nice**. It feels like we have easy access to the \"commit\" phase of React, whereas previously it was all in `componentDidUpdate` and not composable at all. Now it's super easy to throw on code to the commit phase which makes coordinating stuff with state easier.\r\n\r\n* Reducers have interesting properties, and I can see how they are fully robust in a concurrent world, but for many cases they are too limited. The ergonomics of implementing many effect-ful workflows with them requires an awkward dance, kind of like when you try to track effect states in local state and split up workflows. Keeping a linear workflow in a callback is not only nice, but necessary in many cases for maintainability.\r\n\r\n* Callbacks can be made memoizable without much work. In many cases I think it's easier to use the ref trick than reducers, but the question is: just *how* dangerous is it? Right now it's not that dangerous, but maybe concurrent mode really is going to break it.\r\n\r\n* If that's the case, we should figure out a better way to weave together effects and state changes.\r\n\r\nI hope all of this made sense. Let me know if something is unclear and I'll try to fix it.","state":"open","updated_at":"2022-05-04T17:14:17Z","created_at":"2019-03-28T16:41:29Z","creator_user_login":"jlongster"}
{"number":15238,"title":"Noscript tags no longer rendering components in 16.5.0","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nStarting in version 16.4.3, the following code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\nis being rendered in the browser as:\r\n\r\n```\r\n<noscript></noscript>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nPrior to 16.4.3: https://codesandbox.io/embed/5mww4nzpwp\r\n\r\nAfter 16.4.3: https://codesandbox.io/embed/6v8m4yo303\r\n\r\n(The changes are not visible, but if you `inspect element` you can see that, in the first example, the links are being rendered, and in the second example they're not being rendered.)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should render in the browser the same as in the code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSee above, it was working in versions prior to 16.4.3. (I couldn't find a previous issue mentioning this bug. I think it could have been introduced in the fix for https://github.com/facebook/react/issues/11423)\r\n\r\n**Why is this a problem?**\r\n\r\nI use a snapshot tool with React to generate a set of static pages from a React project. These pages have less functionality than the full application, but they allow webcrawlers and users who have disabled JavaScript to use the site at a basic level. For example, the code might look like this:\r\n\r\n```\r\n<FancyInteractiveButton linksTo=\"page\">link</FancyInteractiveButton>\r\n<noscript>\r\n  <a href=\"page\">link</a>\r\n</noscript>\r\n```\r\n\r\nPreventing components in `<noscript>` tags from rendering breaks this functionality for users with JavaScript disabled. The generated snapshots no longer contain the links. It also makes the site harder to navigate by webcrawlers, even if they have JavaScript enabled, because they have to be smart enough to use the fancy button instead of following the link.","state":"open","updated_at":"2020-08-18T14:54:18Z","created_at":"2019-03-28T15:56:11Z","creator_user_login":"zfletch"}
{"number":15207,"title":"Memoized components should forward displayName","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: ","state":"open","updated_at":"2020-12-25T20:09:09Z","created_at":"2019-03-25T15:57:20Z","creator_user_login":"pbondoer"}
{"number":15187,"title":"Edge 18 & IE 11 server mismatch with SVG icons","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nReact raises a warning:\r\n\r\n![Capture d’écran 2019-03-22 à 00 40 00](https://user-images.githubusercontent.com/3165635/54791630-0c05d100-4c3b-11e9-8426-4ea1ebb6e3f4.png)\r\n\r\nhttps://codesandbox.io/s/k91nr3xzy5\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nexport default () => (\r\n  <div>\r\n    2\r\n    <svg>\r\n      <path d=\"M0 0h24v24H0z\" />\r\n    </svg>\r\n  </div>\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.8.4\r\nBrowser: Edge 18","state":"open","updated_at":"2023-03-12T10:11:22Z","created_at":"2019-03-21T23:43:04Z","creator_user_login":"oliviertassinari"}
{"number":15176,"title":"React callback ref cleanup function","body":"At the time React added callback refs the main use case for them was to replace string refs. A lot of the callback refs looked like this:\r\n\r\n```jsx\r\n<div ref={node => this.node = node} />\r\n```\r\n\r\nWith the introduction of `createRef` and `useRef` this use case is pretty much replaced by these alternatives so the use case of callback refs will shift to advanced use cases like [measuring DOM nodes](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node).\r\n\r\nIt would be nice if you could return a cleanup function from the callback ref which is called instead of the callback with null. This way it will behave more like the `useEffect` API.\r\n\r\n```jsx\r\n<div ref={node => {\r\n  // Normal ref callback\r\n\r\n  return () => {\r\n    // Cleanup function which is called when the ref is removed\r\n  }\r\n}} />\r\n```\r\n\r\nThis will be super helpful when you need to set up a Resize-, Intersection- or  MutationObserver.\r\n\r\n```jsx\r\nfunction useDimensions() {\r\n  const [entry, setEntry] = useState()\r\n  \r\n  const targetRef = useCallback((node) => {\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      setEntry(entry)\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [entry, targetRef]\r\n}\r\n\r\nfunction Comp() {\r\n  const [dimensions, targetRef] = useDimensions()\r\n\r\n  return (\r\n    <pre ref={targetRef}>\r\n      {JSON.stringify(dimensions, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n```\r\n\r\nCurrently, if you want to implement something like this you need to save the observer into a ref and then if the callback ref is called with null you have to clean up the observer from the ref.\r\n\r\nTo be 99% backward compatible we could call both the callback ref with null and the cleanup function. The only case where it isn't backward compatible is if currently someone is returning a function and doesn't expect the function to be called.\r\n\r\n```jsx\r\nfunction ref(node) {\r\n  if (node === null) {\r\n    return\r\n  }\r\n\r\n  // Do something\r\n\r\n  return () => {\r\n    // Cleanup something\r\n  }\r\n}\r\n```","state":"open","updated_at":"2021-09-08T21:36:19Z","created_at":"2019-03-21T09:44:36Z","creator_user_login":"k15a"}
{"number":15171,"title":"dangerouslySetInnerHTML is left empty on client render on top of bad server markup when rendering HTML","body":"This seems to be an edge case of https://github.com/facebook/react/issues/11789 fixed in https://github.com/facebook/react/pull/13353/files.\r\n\r\nI ran into this when trying to hydrate content rendered with https://github.com/prismicio/prismic-dom `asHtml` method.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? I think. \r\n\r\n**What is the current behavior?**\r\n\r\nCurrent behavior:\r\n\r\n1. Server-side stuff comes in from server and contains the things we need\r\n2. Hydration mismatch happens\r\n3. dangerouslySetInnerHTML is called with correct value but an empty string gets rendered instead\r\n\r\nI tried to replicate the issue on https://codesandbox.io/s/2xojk10jln but failed.\r\n\r\nThe following testcase for `packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js` produces the same result (I tried it first with the same PrismicDOM.RichText.asHtml(obj) call I have in the app) but I am not sure if it's correct:\r\n\r\n  ```js\r\n\r\n# test case\r\n    itRenders(\r\n      'a div with dangerouslySetInnerHTML set to html inserted',\r\n      async render => {\r\n        const obj = '<li>bar</li>';\r\n        const e = await render(\r\n          <div dangerouslySetInnerHTML={{__html: obj }} />,\r\n        );\r\n        expect(e.childNodes.length).toBe(1);\r\n        expect(e.firstChild.tagName).toBe('LI');\r\n        expect(e.firstChild.childNodes.length).toBe(1);\r\n      },\r\n    );\r\n```\r\n\r\n```bash\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server string render (190ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server stream render (52ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with clean client render (37ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of good server markup (74ms)\r\n      ✕ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup (34ms)\r\n\r\n  ● ReactDOMServerIntegration › ... › renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"bar\"\r\n    Received: \"\"\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe client render would have rendered `<li>bar</li>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncommit c05b4b8  (latest master) and >16.8.\r\n\r\nSorry for a bit vague bug report.\r\n","state":"open","updated_at":"2022-03-30T00:03:10Z","created_at":"2019-03-20T20:35:18Z","creator_user_login":"petetnt"}
{"number":15154,"title":"Effect memoization and immutable data structures","body":"Current design of `useEffect` requires dependencies to be either primitive values or references to the same object, because shallow equality check relies on `Object.is` which is an identity check for objects.\r\n\r\nThe above means that there's no way to perform structural comparison, which is needed for immutable data structures when identity check fails.\r\n\r\nTo maintain backwards compatibility a comparator function could be provided as the third argument to `useEffect`:\r\n```js\r\nuseEffect(fn, deps, depsComparator);\r\n```\r\n\r\nThe goal here is to preserve an ease of use of the API with immutable data structures in order to provide an idiomatic usage of `useEffect` in ClojureScript and other environments that rely on immutability e.g. Immutable.js\r\n\r\ncc @mhuebert @Lokeh @orestis","state":"open","updated_at":"2019-03-22T16:07:08Z","created_at":"2019-03-19T17:58:05Z","creator_user_login":"roman01la"}
{"number":15153,"title":"eslint-plugin-react-hooks - autofix useCallback/useMemo behaviour","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDiscussion for new feature\r\n\r\n**What is the current behavior?**\r\n\r\nuseCallback/useMemo hook's do nothing when there is no second argument provided for deps. The eslint plugin reports this but does not autofix\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.4\r\n\r\n**PR to implement:** \r\n\r\nhttps://github.com/facebook/react/pull/15146\r\n\r\n&nbsp;\r\n\r\nCurrently, the eslint plugin does not autofix useCallback/useMemo to infer deps if there isn't a second argument provided to the hook. We can autofix it to infer deps if needed, or autofix to remove the hook altogether if there no deps needed (according to https://reactjs.org/docs/hooks-reference.html#usememo, if no second argument is provided it behaves as if the hook doesn't exist anyways).\r\n\r\nWhat would be the best way to implement this autofix? In my opinion, linting shouldn't be breaking functionality on an autofix, so autofixing to remove the hook is the safest to implement. Autofixing to infer deps will change behavior in code so I was thinking of having a config option the dev needs to specify so that linting changes that is affecting behavior is explicit.\r\n","state":"open","updated_at":"2019-03-19T18:21:32Z","created_at":"2019-03-19T17:54:16Z","creator_user_login":"RedTn"}
{"number":15129,"title":"Hooks - unmount and didUpdate","body":"I'm opening this up at Dan's request from a twitter discussion:\r\nhttps://twitter.com/lichstam/status/1106995545938247682\r\n\r\nFrom Twitter:\r\n\r\nI can fill in on this. The first example I would like to point to is a debouncing hook I've created that looks something like this:\r\n  \r\n```javascript\r\nuseEffect(() => {\r\n  const debounced = setTimeout(() => setDebounced(steps), 500);\r\n  return () => clearTimeout(debounced);\r\n}, [steps])\r\n```\r\n\r\nand then I have another one, that actually performs the request:\r\n\r\n```javascript\r\nuseEffect(request, [debounced])\r\n```\r\n\r\nAnd it all works fine, apart from when the component is mounted and unmounted.\r\nIn the class model I was able to make sure it never runs the first time and on unmounting I could clear the timeout and, if the state value differs from prop (yes I know, you shouldn't mirror your props but I have to debounce somewhere), I could just perform a last request before I unmount. \r\nFurthermore, `componentDidUpdate` really made it easy preventing this from running the first time. I'm not quite sure how to approach this with hooks.\r\nPerhaps I'm doing it all wrong but to Patrick's point, the class way was more straight forward.\r\n\r\nAnother example: I code in RN and use the Animated API a lot. I have cases that translates into something like this:\r\n\r\n```javascript\r\nuseEffect(() => {\r\n  if (inAddStage) moveAndShowStep(); // Animate with Animated API\r\n}, [inAddStage]);\r\n```\r\n\r\nThis works well but it does perform an unnecessary initial run which makes me wonder if I've missed the point with hooks (again, to Patrick's point, it seems a bit more complex sometimes). Why isn't there a hook that **doesn't** run the first time btw? Again, with the old lifecycles it was much clearer how to prevent this from happening (using `componentDidUpdate`).\r\n\r\nOn a last note, I just want to say that I'm very fond of the idea and wholeheartedly support the functional approach and I really like the concept of hooks being \"state observers\", that react only when the specified attributes change - which basically makes the whole code more declarative.\r\nI've just started using them so I'll probably figure things out along the way but I thought I could give you something since you didn't get any answer :)","state":"open","updated_at":"2019-03-18T14:33:18Z","created_at":"2019-03-16T19:50:01Z","creator_user_login":"lichstam"}
{"number":15069,"title":"Can an error boundary prevent React's error logging?","body":"I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?","state":"open","updated_at":"2023-08-14T19:25:40Z","created_at":"2019-03-08T20:11:45Z","creator_user_login":"silverwind"}
{"number":15039,"title":"react-debug-tools doesn't support legacy context (Component.contextTypes)","body":"Original report: https://github.com/facebook/react-devtools/issues/1304\r\n\r\nRepro case: https://64yojj2wyk.codesandbox.io/","state":"open","updated_at":"2020-09-03T02:51:41Z","created_at":"2019-03-06T16:54:36Z","creator_user_login":"bvaughn"}
{"number":15019,"title":"The browser crashes when use React.lazy return Promise.resolve(undefined)","body":"**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nThe browser crashes \r\n\r\n```js\r\nconst Loading = () => <div>loading...</div>;\r\nconst Component = lazy(() => Promise.resolve(undefined));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<Loading />}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n*I can't provide an example of CodeSandbox, which would cause the browser to crash*\r\n\r\n**What is the expected behavior?**\r\nthrow Error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.8.3\r\nreact-dom@16.8.3\r\nchrome 72.0.3626.119","state":"open","updated_at":"2020-01-09T21:59:21Z","created_at":"2019-03-05T15:45:18Z","creator_user_login":"angular-moon"}
{"number":14962,"title":"Password input type causes memory leak","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*Bug*\r\n\r\n**What is the current behavior?**\r\n\r\nAn `<input type=\"password\"/>` causes a memory leak.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou can recreate the behavior by visiting https://iericallen.github.io/test-react/ and following the steps listed.\r\n\r\nPlease view our source code at: https://github.com/iericallen/test-react/tree/source\r\n\r\n**What is the expected behavior?**\r\n\r\nUnmounted components including `<input type=\"password\" />` can be garbage collected after next re-rendering.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: macOS X Mojave 10.14.2 (18C54)\r\nChrome: 72.0.3626.109\r\nReact: 16.8.3\r\nReactDOM: 16.8.3","state":"open","updated_at":"2021-04-13T14:24:03Z","created_at":"2019-02-26T20:39:50Z","creator_user_login":"ejallday"}
{"number":14785,"title":"defaultValue does not work with input when type is set to submit","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you use uncontrolled `<input type=\"submit\" />` and set `defaultValue` attribute, it would be ignored in versions 1.5.0 or higher (there would be no `value` attribute in the HTML result). It was working correctly in older versions. Looks like only `type=\"submit\"` is affected, for other input types `defaultValue` behaves correctly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nCorrect behaviour with react 16.4.2: https://codepen.io/anon/pen/zePmrZ\r\nIncorrect behaviour with react 16.8.1: https://codepen.io/anon/pen/PVOyqV\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen `defaultValue=\"foo\"` is set on `<input type=\"submit\"/>` it should result in `<input type=\"submit\" value=\"foo\" />` in the HTML result.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions starting from 16.5.0\r\n","state":"open","updated_at":"2019-02-08T16:27:02Z","created_at":"2019-02-07T09:01:40Z","creator_user_login":"jakubkosinski"}
{"number":14694,"title":"Chrome Autofill overwrites values on controlled components","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug. Initially reported in https://github.com/mozilla-services/react-jsonschema-form/issues/1153\r\n\r\n**What is the current behavior?**\r\nAutofill overwrites existing values in fields when those fields are controlled components in React.\r\n\r\nSee https://jsfiddle.net/epicfaace/9p17e2qx/21/ -- to test this, add a \"Saved Address\" in the Chrome options.\r\n\r\n![2019-01-24 10 37 23](https://user-images.githubusercontent.com/1689183/51700667-91b32a80-1fc4-11e9-876b-6f795225d99b.gif)\r\n\r\n**What is the expected behavior?**\r\nAutofill does not overwrite existing fields. I've made a JSFiddle with a plain HTML form, which works with the expected behavior.\r\n\r\nSee https://jsfiddle.net/epicfaace/1my3f9n4/6/\r\n\r\n![2019-01-24 10 37 02](https://user-images.githubusercontent.com/1689183/51700679-9841a200-1fc4-11e9-9408-dae369ac5366.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.3.2\r\nChrome 71.0.3578.98\r\n","state":"open","updated_at":"2019-02-04T15:19:29Z","created_at":"2019-01-24T18:42:29Z","creator_user_login":"epicfaace"}
{"number":14658,"title":"`useCallback()` & `useMemo()` automatically with a Babel Plug-in","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request.\r\n\r\n**What is the current behavior?**\r\n\r\nWe need to `useCallback()` and `useMemo()` which seems redundant and can cost us in performance if not used right, which is likely to happen.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = data.filter(filterPredicate).sort(sortComparator)\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"back-btn\" onClick={() => history.pop()} />\r\n      <ul className=\"data-list\">\r\n        {transformedData.map(({ id, value }) => (\r\n          <li className=\"data-item\" key={id} onClick={() => history.push(`data/${id}`)}>{value}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nJust like the [docs](https://reactjs.org/docs/hooks-reference.html#usecallback) suggest:\r\n\r\n```\r\nIn the future, a sufficiently advanced compiler could create this array automatically.\r\n```\r\n\r\nAccordingly, I have implemented a Babel-plug-in that does exactly that; see [babel-plugin-react-persist](https://github.com/DAB0mB/babel-plugin-react-persist). Given the code snippet above, the plug-in should generate the following output:\r\n\r\n```js\r\nlet _anonymousFnComponent, _anonymousFnComponent2\r\n\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = React.useMemo(() =>\r\n    data.filter(filterPredicate).sort(sortComparator)\r\n  , [data, data.filter, filterPredicate, sortComparator])\r\n\r\n  return React.createElement(_anonymousFnComponent2 = _anonymousFnComponent2 || (() => {\r\n    const _onClick2 = React.useCallback(() => history.pop(), [history, history.pop])\r\n\r\n    return (\r\n      <div>\r\n        <button className=\"back-btn\" onClick={_onClick2} />\r\n        <ul className=\"data-list\">\r\n          {transformedData.map(({ id, value }) =>\r\n            React.createElement(_anonymousFnComponent = _anonymousFnComponent || (() => {\r\n              const _onClick = React.useCallback(() =>\r\n                history.push(`data/${id}`)\r\n              , [history, history.push, id])\r\n\r\n              return (\r\n                <li className=\"data-item\" key={id} onClick={_onClick}>\r\n                  {value}\r\n                </li>\r\n              )\r\n            }), { key: id })\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }), null)\r\n}\r\n```\r\n\r\nThe plug-in will:\r\n\r\n- `useCallback()` automatically when a function is created.\r\n- `useMemo()` automatically when a value is assigned.\r\n- Will memoize inline callbacks.\r\n\r\nI don't see however how can `useEffect()` be inferred automatically and if it's a good idea. The plug-in is not a feature request directly for React, but since it's stated in the docs I thought maybe it can be useful somehow. Maybe it can potentially be included as part of `create-react-app`? Would like to hear your thoughts about it. An alternative solution is suggested at #14406, but I don't see why do this at runtime when everything can be done ahead of time and save processing power.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8-alpha (hooks)\r\n","state":"open","updated_at":"2019-03-10T06:45:26Z","created_at":"2019-01-22T15:38:42Z","creator_user_login":"DAB0mB"}
{"number":14543,"title":"Add `get` function to `useState`","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- feature\r\n\r\n**What is the current behavior?**\r\nCode from [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html):\r\n```javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n```javascript\r\n// each time \"count\" changed, this arrow function will be created again.\r\n// so that it can access the latest \"count\"\r\nonClick={() => setCount(count + 1)}\r\n```\r\nI don't think it is good to create a fixed function many times, so I try to modify the code:\r\n(Update on Jul 2022: No matter using the inline anonymous function or wrapping with `useCallback`, the function will always be created. The difference is that, in `useCallback` approach, the function reference will not be changed, which could be helpful if we use `memo` to wrap the component who receives the function as a property)\r\n```javascript\r\nconst [count, setCount] = useState(0);\r\nconst handleClick = useCallback(() => setCount(count + 1), []);\r\n```\r\nBut obviously the callback in `useCallback` couldn't get the latest `count` because I pass in an empty inputs array to avoid this callback been generated again and again.\r\n\r\nSo, in fact, the inputs array decide two things:\r\n1. when to recreate the callback\r\n2. which state can be accessed in the callback\r\n\r\nIn most situation, the two things are one thing, but here they conflict. \r\n\r\nSo I think maybe it's good to add a `get` function to `useState` like this:\r\n```javascript\r\nimport { useState, useCallback } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount, getCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => setCount(getCount() + 1), []);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={handleClick}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\nMaybe it's confusing because `getCount` can totally replace `count`, but it brings the possible to avoid creating callbacks again and again.\r\n\r\n### Edited\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452237355 exactly resolves the case above. But there‘re many other scenarios can't use `updater` to resolve. Here are some more code snippets:\r\n#### 1. Access states in a timer.\r\n```javascript\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n#### 2. Access states in WebSocket callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  // create a WebSocket client named \"ws\"\r\n  ws.onopen = () => {\r\n    // access states\r\n  };\r\n  ws.onmessage = () => {\r\n    // access states\r\n  };\r\n  return () => ws.close();\r\n}, inputs);\r\n```\r\n#### 3. Access states in Promise\r\n```javascript\r\nuseEffect(() => {\r\n  create_a_promise().then(() => {\r\n    // access states\r\n  });\r\n}, inputs);\r\n```\r\n#### 4. Access states in event callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  function handleThatEvent() {\r\n    // access states\r\n  }\r\n  instance.addEventListener('eventName', handleThatEvent);\r\n  return instance.removeEventListener('eventName', handleThatEvent);\r\n}, inputs);\r\n```\r\n\r\nWe had to use some workaround patterns to resolve those cases, like\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452676760\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453058025\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453079958\r\nOr a funny way:\r\n```javascript\r\nconst [state, setState] = useState();\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n    setState((prevState) => {\r\n      // Now I can do anything with state...🤮\r\n      ...\r\n      return prevState;\r\n    });\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n\r\nSo let's discuss and wait...\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452713416\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16.7.0-alpha.2\r\n\r\n","state":"open","updated_at":"2022-07-21T12:01:34Z","created_at":"2019-01-08T07:51:31Z","creator_user_login":"liyuanqiu"}
{"number":14540,"title":"Nested portals should be discoverable","body":"This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked","state":"open","updated_at":"2022-12-15T23:18:34Z","created_at":"2019-01-07T04:02:48Z","creator_user_login":"theKashey"}
{"number":14443,"title":"Warning should appear when versions of react and react-dom do not match","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\n\r\nIf the version of react and react-dom do not match, some features fail silently.  See this issue for example: https://github.com/reduxjs/react-redux/issues/1125\r\n\r\nIn this issue, the new Context API wasn't working as intended, but no errors or warnings were visible.  Components simply did not update.  It turns out that this issue was because I updated react to version 16.6.3, but still had react-dom at version 16.5.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to see some sort of warning message in the console in development mode when the versions of react and react-dom do not match.\r\n","state":"open","updated_at":"2019-01-29T22:35:39Z","created_at":"2018-12-14T18:28:45Z","creator_user_login":"mjhoffm2"}
{"number":14398,"title":"calculating context changes in componentDidUpdate","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6","state":"open","updated_at":"2020-10-27T17:09:47Z","created_at":"2018-12-06T15:26:50Z","creator_user_login":"Lexicality"}
{"number":14357,"title":"findDOMNode deprecation","body":"## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html","state":"open","updated_at":"2021-04-19T10:48:53Z","created_at":"2018-11-29T16:24:15Z","creator_user_login":"eps1lon"}
{"number":14356,"title":"Sometimes controlled email inputs break in Chrome due to punycoding","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a  bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn Chrome, when typing a sharp S (ß, a German letter) in an input field with `type=\"email\"`, it converts the `ß` to `ss` (~~expected~~ unexpected behaviour) and the cursor jumps back to the beginning of the input field (unexpected behaviour). This does only happen if the `ß` is part of the domain.\r\nTrying to type `test@testß.de` will end as `.detest@testss`:\r\n![Example](https://i.imgur.com/SWQ0p4f.gif)\r\n\r\nIt can be tested with the latest Google Chrome: \r\nhttps://codepen.io/anon/pen/MzzEqB\r\nIf you don't have a `ß` on your keyboard, you can reproduce the bug by just Copy&Pasting it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with Chrome Version 70.0.3538.110 (Official Build) (64-bit) on Ubuntu 18.04 and React 16.6.3\r\n\r\nIn Firefox, this does not happen, as it does not convert `ß` to `ss`. I didn't test other browsers.","state":"open","updated_at":"2020-06-18T19:51:13Z","created_at":"2018-11-29T13:22:22Z","creator_user_login":"Bastian"}
{"number":14342,"title":"Fail to render input in a separate window on Edge","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nOn Edge, when to render any <input> components in a separate window, it comes to react-dom error for `<input>`, and JS error like\r\n\r\n> SCRIPT5673: Unknown runtime error\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. \r\n\r\n`window.open` dose not work well on JSFiddle or CodeSandbox, so put a page link to reproduce the behavior\r\n\r\nhttps://haojy.github.io/issues/input-error-in-separate-window.html\r\n\r\n**What is the expected behavior?**\r\n\r\n`<input>` component should be rendered as expected without errors\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: v16.6.3 and V16.3.0\r\nbrowser:\r\n- only on Edge v42\r\n- works well on IE 11/Chrome 70/Safari 12","state":"open","updated_at":"2022-08-28T06:30:46Z","created_at":"2018-11-28T07:15:54Z","creator_user_login":"haojy"}
{"number":14319,"title":"API for display name on forwardRef, memo and potential future exotic components","body":"TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n","state":"open","updated_at":"2020-12-25T15:36:53Z","created_at":"2018-11-24T20:28:16Z","creator_user_login":"eps1lon"}
{"number":14285,"title":"Warn when calling dispatch() from useEffect() cleanup function on unmounting","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\naction dispatched in return callback of `useEffect` seem to not work\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5yqmo128v4\r\n\r\nonly foo -> baz is logged\r\n\r\n```javascript\r\nimport React, { useState, useEffect, useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction reducer(state, action) {\r\n  console.log(\"bar\", action); // not logged\r\n  // debugger\r\n  return state;\r\n}\r\n\r\nfunction Foo({ value }) {\r\n  const [state, dispatch] = useReducer(reducer, {});\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        console.log(\"foo\");\r\n        // debugger\r\n        dispatch({ type: \"foo\" });\r\n        // debugger\r\n        console.log(\"baz\");\r\n      };\r\n    },\r\n    [state, value]\r\n  );\r\n\r\n  return <p>{value}</p>;\r\n}\r\n\r\nfunction App() {\r\n  const [value, set] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => set(value + 1)}>INC</button>\r\n      {value % 2 ? <Foo value={value} /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n**What is the expected behavior?**\r\nbar is logged in console\r\n(foo -> baz -> bar`action`)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: \"16.7.0-alpha.2\",\r\nreact-dom: \"16.7.0-alpha.2\"\r\n","state":"open","updated_at":"2023-05-23T04:21:03Z","created_at":"2018-11-20T03:34:44Z","creator_user_login":"merongmerongmerong"}
{"number":14213,"title":"Textarea loses focus after inserting paired punctuation with Chinese IME","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nTextarea lose focus after insert paired punctuation by \"Chinese-Pinyin 10 key\" input source on IOS safari. And then textarea can't be focused when I click it. But after other element has been focused, the textarea could be focused again.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[CodeSandbox Demo](https://codesandbox.io/s/7w23wpl0q1)\r\n\r\n[steps(youtube video)](https://youtu.be/4PJ2WVD83Eg)\r\n\r\n**What is the expected behavior?**\r\njust work fine!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nversions of React: 16+\r\nOS: IOS\r\nbrowser: safari\r\n\r\n\r\n\r\n","state":"open","updated_at":"2018-11-15T03:06:55Z","created_at":"2018-11-13T08:26:59Z","creator_user_login":"ghost"}
{"number":14170,"title":"react-test-renderer doesn't support Suspense and lazy nodes","body":"Hello. How can I test components with Suspense/Lazy?\r\nnow renderer.create(...)toTree() throws\r\n\"toTree() does not yet know how to handle nodes with tag=13\"\r\n\r\nreact 16.6.1\r\nreact-test-renderer 16.6.1","state":"open","updated_at":"2022-03-20T18:30:15Z","created_at":"2018-11-09T07:27:53Z","creator_user_login":"Dem0n13"}
{"number":14168,"title":"Input type email bug","body":"https://codepen.io/anon/pen/GwZeNO\r\n\r\nOpen this codepen and paste this \"example@gmail.com 1\"\r\nThen press backspace, notice that the focus changes to the beginning of the input.\r\n","state":"open","updated_at":"2020-11-06T21:10:35Z","created_at":"2018-11-09T05:28:29Z","creator_user_login":"dominicarrojado"}
{"number":14125,"title":"Autofocus Text puts cursor at end instead of beginning","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn React 16, a text input with a value and autofocus will set the cursor at the _end_ of the input.\r\n`<input autoFocus={true} type=\"text\" defaultValue=\"4444\" />`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee the React 16 repro here: https://codepen.io/matthewg0/pen/XymjYo\r\n\r\n**What is the expected behavior?**\r\nIn React 15, and in plain HTML, the behavior is that the cursor is placed at the _start_ of the input.\r\nReact 15: https://codepen.io/matthewg0/pen/NEGRzv\r\nPlain HTML: https://codepen.io/matthewg0/pen/wQKoap\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReproduces as of React 16.  Worked as expected in React 15.","state":"open","updated_at":"2020-03-25T07:45:56Z","created_at":"2018-11-06T18:57:12Z","creator_user_login":"Matthew-Goldberg"}
{"number":14099,"title":"useCallback() invalidates too often in practice","body":"This is related to https://github.com/facebook/react/issues/14092, https://github.com/facebook/react/issues/14066, https://github.com/reactjs/rfcs/issues/83, and some other issues.\r\n\r\nThe problem is that we often want to avoid invalidating a callback (e.g. to preserve shallow equality below or to avoid re-subscriptions in the effects). But if it depends on props or state, it's likely it'll invalidate too often. See https://github.com/facebook/react/issues/14092#issuecomment-435907249 for current workarounds.\r\n\r\n`useReducer` doesn't suffer from this because the reducer is evaluated directly in the render phase. @sebmarkbage had an idea about giving `useCallback` similar semantics but it'll likely require complex implementation work. Seems like we'd have to do _something_ like this though.\r\n\r\nI'm filing this just to acknowledge the issue exists, and to track further work on this.","state":"open","updated_at":"2023-03-10T14:25:39Z","created_at":"2018-11-05T15:06:53Z","creator_user_login":"gaearon"}
{"number":14057,"title":"Unexpected copies of the props object retained in memory with the new hooks API","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nfunction useCustomHook1() {\r\n  useEffect(() => {\r\n    console.log(\"mounted\");\r\n    return () => {\r\n      console.log(\"unmounted\");\r\n    };\r\n  }, []);\r\n}\r\n\r\nfunction Test3(props) {\r\n  useCustomHook1();\r\n  useEffect(() => {\r\n    console.log(props.test);\r\n  });\r\n\r\n  return <div onClick={() => console.log(props.test)}>{props.items.length}</div>;\r\n}\r\n```\r\n\r\n`props` object that were used when component was rendered for the first time is kept alive. Completely unexpected behavior even when developer understands [closure context sharing](https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/lz61v39r7\r\n\r\n- Select test **3** \r\n- Click on the button \"Create New Array\" 5 times\r\n- Take memory snapshot in the developer tools\r\n- Inspect (array) objects\r\n- There will be 4 arrays retained in memory `t0`, `t-2`, `t-1`, `t`\r\n\r\n**What is the expected behavior?**\r\n\r\nShould be 2 arrays retained in memory `t-1`, `t`.","state":"open","updated_at":"2022-03-29T23:40:21Z","created_at":"2018-11-01T02:48:53Z","creator_user_login":"localvoid"}
{"number":14049,"title":"Using both getDerivedStateFromError and getDerivedStateFromProps can be a foot gun","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf `componentDidCatch` and/or `getDerivedStateFromError` put the component in a state that avoids the cause of the error, and `getDerivedStateFromProps` reverts that state change, the error boundary will (obviously) fail to avert disaster.\r\n\r\nhttps://codesandbox.io/s/pj0lwxk15j\r\n\r\nIt sounds very obvious when simplified like this, but when my team updated to React 16.5.x (and 16.6.0), suddenly this started happening for us. So something changed internally, but it's hard to pinpoint what. Unfortunately I haven't been able to create a small repro for that specific case that works in 16.4.2 but not 16.5.0 – so I'm making this issue about avoiding the cause in the first place.\r\n\r\n**What is the expected behavior?**\r\n\r\nNaively, my thinking is that because errors are more exceptional, let the state from error handlers take precedence. Probably there's a reason why this can't happen so a warning of some kind when this can happen would be nice. Two ways to do this comes to mind:\r\n\r\n1. Cross-check that keys in state from `getDerivedStateFromProps` or `setState` in `componentDidCatch` don't collide with `getDerivedStateFromError` (sounds a bit far fetched?)\r\n2. Be more explicit in documentation for error boundaries about how `getDerivedStateFromProps` will run last so that a developer can consider this case\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 and up (16.4.2 behaves a bit differently – see above), all platforms/browsers.","state":"open","updated_at":"2022-01-06T03:31:54Z","created_at":"2018-10-31T20:10:47Z","creator_user_login":"blixt"}
{"number":13991,"title":"Hooks + multiple instances of React","body":"# To people coming from search: please [read this page first](https://reactjs.org/warnings/invalid-hook-call-warning.html). It contains most common possible fixes!\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nEnhancement\r\n\r\n**What is the current behavior?**\r\n\r\nI had multiple instances of React by mistake.\r\n\r\nWhen trying to use hooks, got this error:\r\n`hooks can only be called inside the body of a function component`\r\n\r\nWhich is not correct since I was using function components. Took me a while to find the real cause of the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nShow the correct error message. Maybe detect that the app has multiple instances of React and say that it may be the reason of bugs. ","state":"open","updated_at":"2023-09-01T12:15:14Z","created_at":"2018-10-27T00:34:08Z","creator_user_login":"brunolemos"}
{"number":13989,"title":"nextContext arg in shouldComponentUpdate() method","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think it is feature, but could be a bug also\r\n\r\n**What is the current behavior?**\r\nWhen I subscribe to context using React16.6.0 contextType API, component rerenders even when unused context properties was changed. So, I want to use shouldComponentUpdate(), but that method don't have nextContext argument.\r\n\r\nIs there any other way to solve this problem?\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n","state":"open","updated_at":"2020-01-16T20:21:43Z","created_at":"2018-10-26T16:09:52Z","creator_user_login":"konsultacijos"}
{"number":13956,"title":"onMouseEnter does not fire on an underlaying element if an element above is removed","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - I did do some searching around the issues to see if there was a similar/dupe, but I could not find one.\r\n\r\n**What is the current behavior?**\r\n\r\nWith 2 elements overlaying on top of each other, if the upper element gets removed while the cursor is over both elements, mouse enter never fires on the element below. I compared this to native browser events and the issue does not appear to persist there (native browser events appear to fire mouse enter for the underlying div when the overlaying div gets removed).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\n[CodeSandbox Example](https://codesandbox.io/s/wonqx3lo7)\r\n\r\nI provided a top level boolean constant to switch between using react's synthetic events and the native browser events. In the console I keep track of state updates as console logs. The simple way to test - open the console, mouse over the upper div in a position that is also on top of the lower div, click to remove the upper div, the lower div SHOULD fire mouse enter. It does not with synthetic events, but it does with browser events.\r\n\r\n**What is the expected behavior?**\r\n\r\nExpected behavior for me would be if react would fire mouse enter on the underlaying div when the upper div is removed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n\"dependencies\": {\r\n    \"react\": \"16.5.2\",\r\n    \"react-dom\": \"16.5.2\",\r\n  },\r\n```\r\n\r\nI have not had a chance to test previous versions.","state":"open","updated_at":"2022-12-27T05:03:18Z","created_at":"2018-10-24T19:59:53Z","creator_user_login":"amadeus"}
{"number":13954,"title":"Receive previous state in getDerivedStateFromError","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n","state":"open","updated_at":"2022-04-12T09:01:26Z","created_at":"2018-10-24T18:28:10Z","creator_user_login":"bisubus"}
{"number":13934,"title":"Update release script to handle alpha react-reconciler deps","body":"This commit 1a57dc6 broke it","state":"open","updated_at":"2020-01-08T19:15:21Z","created_at":"2018-10-23T22:37:35Z","creator_user_login":"bvaughn"}
{"number":13876,"title":"Uncontrolled input type=\"checkbox\" reflects updating `defaultChecked` in Edge and Safari","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nUpdating the value of `defaultChecked` causes a change DOM property's `checked` value.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/yjop5zwmr9\r\n\r\n**What is the expected behavior?**\r\n\r\nUpdating the value of `defaultChecked` should not affect to DOM property's `checked` value.\r\n(no log in codesandbox is expected)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreproduce in React v15.2.0 and v16.5.2, ReactDOM v15.2.0 and v16.5.2.\r\nnot reproduce in v15.1\r\n\r\nbrowser: Safari 12 on macOS Sierra, Edge 42 on Windows 10\r\nnot reproduce in Chrome(70, beta), Chrome(72, canary), Firefox(62), IE11 on Win10\r\nsmartphone browsers are not checked.","state":"open","updated_at":"2020-04-01T23:12:47Z","created_at":"2018-10-17T19:40:11Z","creator_user_login":"berlysia"}
{"number":13838,"title":"head > meta > content escaping issue","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'm guessing it's a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nThe following source code,\r\n\r\n```jsx\r\n<meta property=\"og:image\" content=\"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&q=80&mark=watermark%2Fcenter-v5.png&markalign=center%2Cmiddle&h=500&w=500&s=60ec785603e5f71fe944f76b4dacef08\" />\r\n```\r\n\r\n, is being escaped once server side rendered:\r\n```jsx\r\n<meta property=\"og:image\" content=\"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&amp;q=80&amp;mark=watermark%2Fcenter-v5.png&amp;markalign=center%2Cmiddle&amp;h=500&amp;w=500&amp;s=60ec785603e5f71fe944f76b4dacef08\"/>\r\n```\r\n\r\nYou can reproduce the behavior like this:\r\n```jsx\r\nconst React = require(\"react\");\r\nconst ReactDOMServer = require(\"react-dom/server\");\r\nconst http = require(\"http\");\r\n\r\nconst doc = React.createElement(\"html\", {\r\n  children: [\r\n    React.createElement(\"head\", {\r\n      children: React.createElement(\"meta\", {\r\n        property: \"og:image\",\r\n        content:\r\n          \"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&q=80&mark=watermark%2Fcenter-v5.png&markalign=center%2Cmiddle&h=500&w=500&s=60ec785603e5f71fe944f76b4dacef08\"\r\n      })\r\n    }),\r\n    React.createElement(\"body\", { children: \"og:image\" })\r\n  ]\r\n});\r\n\r\n//create a server object:\r\nhttp\r\n  .createServer(function(req, res) {\r\n    res.write(\"<!DOCTYPE html>\" + ReactDOMServer.renderToStaticMarkup(doc)); //write a response to the client\r\n    res.end(); //end the response\r\n  })\r\n  .listen(8080); //the server object listens on port 8080\r\n```\r\neditor: https://codesandbox.io/s/my299jk7qp\r\noutput : https://my299jk7qp.sse.codesandbox.io/\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the content not being escaped. It's related to https://github.com/zeit/next.js/issues/2006#issuecomment-355917446.\r\nI'm using the `og:image` meta element so my pages can have nice previews within Facebook :).\r\n\r\n![capture d ecran 2018-10-12 a 14 15 26](https://user-images.githubusercontent.com/3165635/46868650-52076f00-ce29-11e8-892f-cfbf924bba82.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.5.2","state":"open","updated_at":"2023-06-02T14:37:32Z","created_at":"2018-10-12T12:01:36Z","creator_user_login":"oliviertassinari"}
{"number":13798,"title":"JAWS reads non-interactive elements as Clickable","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n1. I create an app using [create-react-app](https://github.com/facebook/create-react-app)\r\n2. I use JAWS Professional Edition Version 2018 (build 1710.42 ILM) and Internet Explorer 11 on Windows 7\r\n3. I use arrow keys to navigate to paragraph \"Edit src/App.js and save to reload.\"\r\n4. Jaws announces \"Edit src/App.js and save to reload. **clickable**\"\r\n\r\n**What is the expected behavior?**\r\nThis paragraph is non interactive, it should not be announced as clickable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- JAWS Professional Edition Version 2018 (build 1710.42 ILM) \r\n- Internet Explorer 11\r\n- Windows 7\r\n- create-react-app 2.0.3\r\n\r\n**suspected cause**\r\nUsing Chrome Event Listener Breakpoints I observed there's a function called `trapClickOnNonInteractiveElement` which is the onclick handler for non interactive elements. This noop function is causing JAWS to think this is an interactive element\r\n\r\n**possible solution**\r\nIn [trapClickOnNonInteractiveElement](https://github.com/facebook/react/blob/8a8d973d3cc5623676a84f87af66ef9259c3937c/packages/react-dom/src/client/ReactDOMComponent.js#L245) there is a comment which reads \r\n```\r\n// TODO: Only do this for the relevant Safaris maybe?\r\n```\r\nI think that this would fix this issue.","state":"open","updated_at":"2019-01-29T20:48:00Z","created_at":"2018-10-10T14:07:16Z","creator_user_login":"Lily418"}
{"number":13681,"title":"How to prevent ReactDOM.render errors from bubbling when otherwise explicitly handled","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug. Ordinarily, this would probably be considered a feature request. However, the stated purpose of the feature referenced below is being violated in certain environments.\r\n\r\n**What is the current behavior?** \r\n\r\nReact 16+ surfaces an uncaught error during render, even when using `componentDidCatch` as designed or using try/catch around the render. As described in the comment [above the related code](https://github.com/facebook/react/blob/master/packages/shared/invokeGuardedCallbackImpl.js#L32:L49), this is a convenience provided for developers using DevTools for debugging purposes. However, the convenience provided for development debugging is changing behavior in specs, causing failures for otherwise protected code paths, which goes against this statement from the comment description for the code:\r\n\r\n> But because the error happens in a different event loop context, it does not interrupt the normal program flow.\r\n\r\nWhen the error occurs, a spec runner such as Mocha will fail the test with the uncaught error, then continue with the next test. After advancing, the second render of the component will complete and call the ReactDOM.render callback, which continues code from the already-failed test while a subsequent test is in progress. This pollutes the spec suite and leads to other issues that are not produced when using the Production version of React.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nAll relevant code and content has been included in [this CodeSandbox](https://codesandbox.io/s/vvmv7q7o7y). Due to the use of karma/mocha, tests must be run locally. Inline comments add detail to behavior and expectations.\r\n\r\nTo see the tests pass, switch \"test\" to \"production\" in the `karma.js` file.\r\n\r\n**What is the expected behavior?**\r\n\r\nTypically, DevTools are used in a different context from running specs—automation vs investigation, for lack of more precise terms. It should be an option rather than the default when using React in a non-production environment. At least in an environment of `test`, where spec runners are conditionally sensitive to global errors, developers must have the option to disable or disallow this behavior as it is implemented at this time.\r\n\r\nFor a second, perhaps more intuitive option, refer to this portion of the mentioned comment, talking about \"pause on caught exceptions\":\r\n\r\n> This is untintuitive, though, because even though React has caught the error, from the developer's perspective, the error is uncaught.\r\n\r\nWhen an exception during render is captured using `componentDidCatch` or try/catch as mentioned above, the exception should be considered \"caught,\" as the developer has explicitly created an error boundary around this render. In this case, expected behavior would be for the error to not be surfaced globally and for the developer to debug any exceptions within the error boundary they defined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is present only in the non-production version of React 16+. The `development` or `test` environments of React 16+ feature this behavior. React 15.* and below do not have this issue. Prior to React 16, explicit try/catch handlers were solely responsible for being an error boundary during render.","state":"open","updated_at":"2019-10-02T00:27:48Z","created_at":"2018-09-18T17:48:47Z","creator_user_login":"jneander"}
{"number":13651,"title":"input[type='number'] value isn't updated","body":"**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nwhen I enter \"01\" into input[type=number]，I set the value to 1, but it doesn't work. It still show \"01\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/20ywk1x71n\r\n\r\n**What is the expected behavior?**\r\nwhen I enter \"01\", it should show \"1\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.6.2.   I think it should update in \"updatewrapper\" in  https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMInput.js.","state":"open","updated_at":"2021-09-21T13:16:04Z","created_at":"2018-09-14T13:40:11Z","creator_user_login":"youen123"}
{"number":13567,"title":"Consider stopping auto-adding `px` to number style values (except for a small whitelist)","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA removal of a feature, in a sense.\r\n\r\n**What is the current behavior?**\r\n\r\nReact automatically adds the `px` suffix for numerical values passed to the `style` prop. As some CSS properties accept unitless values, React maintains a blacklist of properties that shouldn't get `px` auto-appended.\r\n\r\nThe problem is that this solution doesn't scale. It requires us to add more & more properties to the list as CSS specs expand and recently the list grows faster; Flexbox & Grid added quite a few of them. What's more confusing, some of those props would work both with & without the `px` suffix and that changes the meaning (`lineHeight` is suffering from that).\r\n\r\nAlthough I'm a React newbie I'm quite familiar with this issue due to being a member of the jQuery Core team. jQuery has the same logic as React here and we keep having to add to the list. We've actually exposed the list at [jQuery.cssNumber](https://api.jquery.com/jQuery.cssNumber/) so that people don't always have to wait for us to add support for a property and do a release.\r\n\r\nThat's why we decided that in jQuery 4 we'll drop the auto-prefixing blacklist and turn to a whitelist that lists only a few most common properties to which we want to auto-append `px` (mostly because they're extremely common and we don't want to break the world too much); we plan to _not_ expand that list unless we missed something really common. You can see the current plan in my PR: https://github.com/jquery/jquery/pull/4055. In particular, see the proposed whitelist in a (visualized) regexp in:\r\nhttps://github.com/jquery/jquery/blob/03e9dba3882868e1ee79f1fb0504326da925644f/src/css/isAutoPx.js.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nI propose that React could do the same thing jQuery is planning to and switch the ever-expanding blacklist of CSS props that shouldn't have the `px` suffix applied to a small whitelist that should have the suffix applied.\r\n\r\nThis topic has been initially described in #13550.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll browses & OSs. I don't know how old this logic is in React.","state":"open","updated_at":"2019-05-14T14:49:38Z","created_at":"2018-09-05T16:08:37Z","creator_user_login":"mgol"}
{"number":13560,"title":"Remove Factory Components","body":"We support a very unusual kind of components that look like functional components but return an *instance*.\r\n\r\n```js\r\nfunction Hello(props) {\r\n  return {\r\n    componentDidMount() {\r\n      alert('wow')\r\n    }\r\n    render() {\r\n      return <div>Hi, {this.props.name}</div>\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nNote these are *not* functional components. They're pretty exotic and don't offer any practical benefits over classes. At the time they were added (I think 0.14?) it was because we thought other type systems might want to compile to a format like this instead of ES classes-like output. But that didn't happen.\r\n\r\nThere's some complexity associated with continuing to support this. Since this is more confusing than useful, I think we should deprecate them in 16.x and remove in 17.x.","state":"open","updated_at":"2020-01-08T19:16:13Z","created_at":"2018-09-04T22:54:03Z","creator_user_login":"gaearon"}
{"number":13559,"title":"\"scheduler\" package umbrella","body":"### Short term\r\n- [x] #13561: Replace the [`__getInteractionsRef` and `__getSubscriberRef` methods](https://github.com/facebook/react/blob/fb88fd9d8c9f72b8e2e7e1ae89652d2a6a707562/packages/schedule/src/Tracking.js#L84-L90) with direct ~~mutable~~ exports  (`__interactions` and `__subscriber`)  and [update the `ScheduleTracking` UMD fork](https://github.com/facebook/react/blob/master/packages/shared/forks/ScheduleTracking.umd.js).\r\n- [x] #13561: Remove `__getInteractionsRef` and `__getSubscriberRef` from the `schedule/tracking` UMD [dev](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.development.js) and [prod](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.production.min.js) bundles since it's not part of the public API.\r\n- [x] Fix interaction-tracking reference count bug (#13574)\r\n- [ ] Split subscriptions entry point apart from tracking (e.g. break `scheduler/tracking` into `scheduler/tracking` and `scheduler/subscriptions`)\r\n\r\n### Long term\r\n- [ ] Move `scheduler` to is own git repo (maybe even its own org) prior to a 1.0 release.\r\n- [ ] Enable it to be used without a build step by replacing the dev/prod check with a single export.\r\n- [ ] Add an ES module entry point as well as the CJS and UMD entry points","state":"open","updated_at":"2020-01-08T19:16:13Z","created_at":"2018-09-04T22:38:53Z","creator_user_login":"bvaughn"}
{"number":13508,"title":"Relax ToString consistency guarantees","body":"We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And there’s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they’re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable — unless we're okay with errors.","state":"open","updated_at":"2020-01-08T19:16:11Z","created_at":"2018-08-29T14:50:15Z","creator_user_login":"gaearon"}
{"number":13499,"title":"Number input breaks when letter \"e\" is entered","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\ninput[type=number] only allows entering numbers and letter \"e\" in the input. Native \"input\" input event is called for both numbers and the letter \"e\". With React the `onChange` event is only called for numbers. There's no way to catch \"e\" with `onChange`.\r\n\r\nThe \"e\" is even being filled when the input is controlled. The only way I can think of to work around this bug right now is to use `onKeyDown` and `preventDefault` when \"e\" or \"E\" is pressed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/ov3ql3ljwz\r\n\r\n**What is the expected behavior?**\r\nIt should pass anything that is being filled into the input to the onChange handler and should not break controlled component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.4.2\r\nChrome: 68.0.3440.106\r\nWindows 10","state":"open","updated_at":"2021-10-08T10:59:18Z","created_at":"2018-08-28T11:58:08Z","creator_user_login":"vahnag"}
{"number":13450,"title":"UMD builds are not enabled on UNPKG","body":"Visiting https://unpkg.com/react displays the CJS build (https://unpkg.com/react@16.4.2/index.js) when the UMD build (https://unpkg.com/react@16.4.2/umd/react.development.js) should be displayed instead. I also noticed this issue with react-dom, so I assume all packages need to be fixed.\r\n\r\nPlease refer to the usage instructions at the bottom of https://unpkg.com/.","state":"open","updated_at":"2023-08-17T03:59:13Z","created_at":"2018-08-21T08:14:19Z","creator_user_login":"nickmccurdy"}
{"number":13424,"title":"onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener","body":"Extracting from https://github.com/facebook/react/issues/12643.\r\n\r\nThis issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity.\r\n\r\nHere is a minimal example.\r\n\r\n```js\r\nclass App extends React.Component {\r\n  state = {value: ''}\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\r\n      \"input\",\r\n      () => {\r\n        // COMMENT OUT THIS LINE TO FIX:\r\n        this.setState({});\r\n      },\r\n      true\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"container\"));\r\n```\r\n\r\nTyping doesn't work — unless I comment out that `setState` call in the capture phase listener.\r\n\r\nSay the input is empty and we're typing `a`.\r\n\r\nWhat happens here is that `setState({})` in the capture phase non-React listener runs first. When re-rendering due to that first empty `setState({})`, input props still contain the old value (`\"\"`) while the DOM node's value is new (`\"a\"`). They're not equal, so we'll set the DOM node value to `\"\"` (according to the props) and remember `\"\"` as the current value.\r\n\r\n<img width=\"549\" alt=\"screen shot 2018-08-17 at 1 08 42 am\" src=\"https://user-images.githubusercontent.com/810438/44241204-4b0e0880-a1ba-11e8-847d-bf9ca43eb954.png\">\r\n\r\nThen, `ChangeEventPlugin` tries to decide whether to emit a change event. It asks the tracker whether the value has changed. The tracker compares the presumably \"new\" `node.value` (it's `\"\"` — we've just set it earlier!) with the `lastValue` it has stored (also `\"\"` — and also just updated). No changes!\r\n\r\n<img width=\"505\" alt=\"screen shot 2018-08-17 at 1 10 59 am\" src=\"https://user-images.githubusercontent.com/810438/44241293-e0110180-a1ba-11e8-9c5a-b0d808f745cd.png\">\r\n\r\n\r\nOur `\"a\"` update is lost. We never get the change event, and never actually get a chance to set the correct state.","state":"open","updated_at":"2022-02-23T20:39:48Z","created_at":"2018-08-17T16:41:41Z","creator_user_login":"gaearon"}
{"number":13413,"title":"Umbrella: Chopping Block","body":"I wanted to create a list of things whose existence makes React bigger and more complicated than necessary. This makes them more likely to need to be deprecated and actually removed in a future version. No clue of when this will happen and what the recommended upgrade path will be so don't take this issue as advice that you should move away from them until there's clear upgrade advice. You might make it worse by doing so.\r\n\r\n(This has some overlap with https://github.com/facebook/react/issues/9475 but those seem more longer term.)\r\n\r\n- [ ] __Unsafe Life Cycles without UNSAFE prefix__ - We'll keep the ones prefixed UNSAFE indefinitely but the original ones will likely be deprecated and removed.\r\n\r\n- [ ] __Legacy context__ - `.contextTypes`, `.childContextTypes`, `getChildContext` - The old context is full of edge cases for when it is accidentally supposed to work and the way it is designed requires all React code to become slower just to support this feature.\r\n\r\n- [ ] __String refs__ - This requires current owner to be exposed at runtime. While it is likely that some form of owner will remain, this particular semantics is likely not what we want out of it. So rather than having two owners, we should just remove this feature. It also requires an extra field on every ReactElement which is otherwise not needed.\r\n\r\n- [ ] __Module pattern components__ - This is a little used feature that lets you return a class instance from a regular function without extending `React.Component`. This is not that useful. In practice the ecosystem has moved around ES class like usage, and other language compiling to JS tries to comply with that model as well. The existence of this feature means that we don't know that something is a functional component by just testing if it's a function that is not extending `React.Component`. Instead we have to do some extra feature testing for every functional component there is. It also prevents us from passing the ref as the second argument by default for all functional components without using `forwardRef` since that wouldn't be valid for class components.\r\n\r\n- [ ] __Uncontrolled onInput__ - This is described in #9657. Because we support uncontrolled polyfilling of this event, we have to do pretty invasive operations to the DOM like attaching setters. This is all in support of imperative usage of the DOM which should be out-of-scope for React.\r\n\r\n- [ ] __setState in componentDidCatch__ - Currently we support error recovery in `componentDidCatch` but once we support `getDerivedStateFromCatch` we might want to consider deprecating the old mechanism which automatically first commits null. The semantics of this are a bit weird and requires complicated code that we likely get wrong sometimes.\r\n\r\n- [ ] __Context Object As Consumer__ - Right now it is possible to use the Context object as a Consumer render prop. That's an artifact of reusing the same object allocation but not documented. We'll want to deprecate that and make it the Provider instead.\r\n\r\n- [ ] __No GC of not unmounted roots__ - This likely won't come with a warning. We'll just do it. It's not a breaking behavior other than memory usage. You have to call `unmountComponentAtNode` or that component won't be cleaned up. Almost always it is not cleaned up anyway since if you have at least one subscription that still holds onto it. Arguably this is not even a breaking change. #13293\r\n\r\n- [ ] __unstable_renderSubtreeIntoContainer__ - This is replaced by Portals. It is already problematic since it can't be used in life-cycles but it also add lots of special case code to transfer the context. Since legacy context itself likely will be deprecated, this serves no purposes.\r\n\r\n- [x] __ReactDOM.render with hydration__ - This has already been deprecated. This requires extra code and requires us to generate an extra attribute in the HTML to auto-select hydration. People should be using ReactDOM.hydrate instead. We just need to remove the old behavior and the attribute in ReactDOMServer.\r\n\r\n- [ ] __Return value of `ReactDOM.render()`__ - We can't synchronously return an instance when inside a lifecycle/callback/effect, or in concurrent mode. Should use a ref instead.\r\n\r\n- [ ] __All of `ReactDOM.render()`__ - Switch everyone over to `createRoot`, with an option to make `createRoot` sync.","state":"open","updated_at":"2020-01-08T19:16:11Z","created_at":"2018-08-16T03:50:15Z","creator_user_login":"sebmarkbage"}
{"number":13400,"title":"Boolean DOM properties coerce empty string to false, contrary to HTML standard","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nThis is in kind of the same space as https://github.com/facebook/react/pull/13372 and is an offshoot of my attempt to better [model React DOM props in Flow](https://github.com/facebook/flow/pull/6727).\r\n\r\n**tl;dr:** Should React warn when the value `\"\"` is passed into a known boolean DOM prop?\r\n\r\n---\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDepends on interpretation 😅  This is possibly a bug, definitely an inconsistency worth mitigating IMHO.\r\n\r\n**What is the current behavior?**\r\n\r\nReact normalises values supplied to [known DOM boolean props](https://github.com/facebook/react/blob/69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965/packages/react-dom/src/shared/DOMProperty.js#L278-L331) (e.g. `readOnly`) such that passing the empty string `\"\"` (being falsy in JavaScript) results in the corresponding attribute being omitted from the HTML output. However, in [HTML](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute), the empty string is a truthy value in this context; it's one of the values that the standard specifically allows in boolean attributes.\r\n\r\nThe above is a potential source of confusion in itself, but React 16's handling of unknown attributes gives rise to the following hypothetical scenario: a new DOM boolean attribute `foobar` is introduced, some people write JSX code that uses it as `foobar=\"\"` (passed through to HTML, truthy), and later React adds `foobar` to its internal whitelist in a minor/patch version and starts processing it as a boolean (JS falsy, omitted from HTML); this would _technically_ be a breaking change for those people.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/y0pmz9149x\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is definitely a clash of expectations here at the interface of JS and HTML.\r\n\r\n1. Coming from JS, `\"\"` is falsy and treating it as such in a \"boolean\" prop is fine; from this perspective, the current behaviour is justifiable.\r\n2. Coming from HTML, it might not be obvious that React is doing this \"extra\" processing and deviating from what's clearly stated in the HTML spec; from this perspective, the current behaviour is surprising.\r\n\r\nThere probably isn't justification for changing React's actual handling of `\"\"` (not least for fear of breaking code that relies on this long-standing behaviour, see version information below), but perhaps a warning about the ambiguity is warranted, a la #13372?\r\n\r\nNote that a warning won't fully mitigate the worst-case scenario I mentioned above (since we can't warn about a prop that we don't _know_ is a DOM boolean), but at least it would give some signal _after_ the React version update that the code might not be doing the expected thing anymore.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions of React as far back as 0.14 (and probably way older) process whitelisted boolean DOM props the same way.","state":"open","updated_at":"2018-08-15T00:22:01Z","created_at":"2018-08-14T23:04:45Z","creator_user_login":"motiz88"}
{"number":13332,"title":"Support cross-renderer portals","body":"Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference.","state":"open","updated_at":"2022-09-22T22:05:33Z","created_at":"2018-08-06T19:26:11Z","creator_user_login":"gaearon"}
{"number":13212,"title":"Investigate IE/Edge select rendering bug","body":"This is a follow up from an issue related to change events on selects in IE/Edge (https://github.com/facebook/react/issues/4672). It looks like this is no longer an issue, but there's a visual regression on IE/Edge that might be avoidable.\r\n\r\n**Reproduction**\r\n\r\nhttps://codepen.io/nhunzaker/pen/qybxmz\r\n\r\n**Observation**\r\n\r\nFrom @jasonwilliams (https://github.com/facebook/react/issues/4672#issuecomment-404534681):\r\n\r\n> change and MouseUp both fire for me in Microsoft Edge 42.17134.1.0 @nhunzaker\r\nAlthough, the rendering of the select box is weird, it doesn't appear to expand when i click on it\r\n\r\n**We need to:**\r\n\r\n- [ ] Capture a GIF of the behavior for documentation purposes (this can just live in this thread)\r\n- [ ] Reproduce the test case outside of React, so that we can isolate the mechanics involved\r\n- [ ] Fix it :)","state":"open","updated_at":"2022-08-27T21:55:42Z","created_at":"2018-07-15T21:36:18Z","creator_user_login":"nhunzaker"}
{"number":13206,"title":"[Umbrella] Releasing Suspense","body":"Let's use this issue to track the remaining tasks for releasing Suspense to open source.\r\n\r\n**Last updated: March 24, 2022**\r\n\r\n**Blog post: [The Plan for React 18](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)**\r\n\r\n## Completed: React 16\r\n\r\n- [x] Release `<Suspense>` with `React.lazy` for client-side lazy loading\r\n\r\n## Completed: [React 18 Alpha](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)\r\n\r\n- [x] Implement concurrent rendering, which is a prerequisite to everything else.\r\n- [x] Fix [fundamental flaws](https://github.com/facebook/react/pull/18796) in the concurrency model that made the behavior difficult to understand and caused many bugs.\r\n- [x] Rewrite [how React traverses the tree](https://github.com/facebook/react/pull/19261) to unblock fixing Suspense quirks.\r\n- [x] Redesign how [React integrates with the scheduler](https://github.com/facebook/react/pull/19121) to simplify the model, fix bugs, and prepare for native browser scheduling.\r\n- [x] [Fix `<Suspense>` quirks](https://github.com/reactwg/react-18/discussions/7): Previously, effects would fire inside a suspended tree too early. For example, you would see an effect from a component that's still hidden behind a placeholder. Now effects will run only _after_ the content has been revealed. We expect this to fix existing application code bugs.\r\n- [x] [Hiding and showing existing content should re-fire layout effects](https://github.com/reactwg/react-18/discussions/31): If a component that's already visible suspends, we show a placeholder, and later show it again. However, there was no way for the component to know that it was hidden or shown. For example, a tooltip component measuring its screen position would get incorrect measurements while it's hidden. Now we fire `useLayoutEffect` cleanup (same as `componentWillUnmount`) on \"hide\", and `useLayoutEffect` setup (same as `componentDidMount`) on \"show\". We expect this to fix existing application and library code bugs.\r\n- [x] [`<Suspense>` on the server no longer throws](https://github.com/reactwg/react-18/discussions/22): It used to be a hard error to render `<Suspense>` in a tree on the server. Now, **for the old server renderer**, it silently emits the fallback (and lets the client try to render the content instead). This shouldn't affect existing apps because previously it was not possible to render `<Suspense>` on the server at all.\r\n- [x] [`startTransition`](https://github.com/reactwg/react-18/discussions/41) lets you avoid hiding existing content even if it suspends again. This is useful to implement the \"show old data while refetching\" pattern with minimal code.\r\n- [x] Built-in throttling of Suspense reveals: To avoid updating the screen too often and causing visual jank, React \"waits\" a little bit before revealing the next level of spinners — in case _even more_ content is available by that time. In other words, revealing nested Suspense fallbacks is automatically throttled by React.\r\n- [x] [New Streaming Suspense Server Renderer](https://github.com/reactwg/react-18/discussions/37):\r\n    - [x] Initial streaming renderer implementation.\r\n    - [x] `React.lazy` works with SSR out of the box.\r\n    - [x] **Streaming HTML:** React uses your `<Suspense>` boundaries to stream the page HTML in visual chunks.\r\n    - [x] **Selective Hydration:** React uses your `<Suspense>` boundaries to hydrate the page in chunks, improving responsiveness.\r\n      - [x] React prioritizes hydrating the part of the page you are interacting with.\r\n      - [x] React keeps the browser responsive during hydration of `<Suspense>` boundaries.\r\n      - [x] React captures and replays missed events after hydration. \r\n- [x] [Technical preview of Server Components:](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html)\r\n  - [x] Implement the server with support for suspending. \r\n  - [x] Prototype a caching layer.\r\n  - [x] Prototype React I/O libraries like `react-fetch` and `react-pg`.\r\n  - [x] Support lazy-loaded elements for server trees.\r\n\r\n## Completed: [React 18](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html#projected-react-18-release-timeline)\r\n\r\n- [x] Finalize [New Streaming Suspense Server Renderer](https://github.com/reactwg/react-18/discussions/37):\r\n  - [x] Make it pass all of our existing tests.\r\n  - [x] Prove it out in production (currently we use a hack in its place).\r\n  - [x] Add the missing \"static markup\" APIs for things like emails.\r\n  - [x] Fix known bugs with hydrating Suspense.\r\n  - [x] Move the new server renderer from `react-dom/unstable-fizz` to `react-dom/server`.\r\n- [x] Fall back to client rendering from closest `<Suspense>` on mismatches instead of patching up the tree.\r\n- [x] Add `onRecoverableError` to gather production reports about SSR mismatches.\r\n\r\n### Features that may or may not appear in 18.x\r\n\r\n- [ ] `<SuspenseList>` lets you declaratively coordinate the order in which `<Suspense>` nodes inside will reveal.\r\n  - [x] Implementation.\r\n  - [ ] Server support\r\n  - [ ] Finalize and document the API.\r\n- [ ] \"Backup\" `<Suspense>` boundaries (not final naming): A way to specify that you'd like React to ignore this boundary during initial render (as if it's not there), unless React is forced to hide existing content. We sometimes call these \"ugly spinners\" or \"last resort spinners\". This use case might seem a bit exotic but we've needed it quite a few times.\r\n  - [x] Initial implementation as `unstable_avoidThisFallback`\r\n  - [x] Server support\r\n  - [ ] Pick a good name\r\n- [ ] `<Suspense>` for CPU-bound trees (not final naming): A way to tell React to immediately show a placeholder _without even trying_ to render the content. This is useful if you have an expensive tree inside. This use case is unrelated to network — it's about showing a spinner for some tree that takes a while to render. See https://github.com/facebook/react/pull/19936.\r\n  - [x] Initial implementation as `unstable_expectedLoadTime`\r\n  - [ ] Adjust the heuristics\r\n  - [x] Server support\r\n  - [ ] Pick a good name\r\n- [ ] An API to prioritize hydrating a particular DOM element's parent tree.\r\n  - [x] Implement as `ReactDOM. unstable_scheduleHydration`\r\n  - [ ] Pick a name \r\n- [ ] Reducing jank: Take another look at adjusting the small details to reduce any visual jank to the minimum. For example, throttle reveal of Suspense boundaries between siblings as well.\r\n\r\n## React 18.x (post-18.0): Suspense for Data Fetching\r\n\r\nAll of the above changes are **foundational architectural improvements** to `<Suspense>`. They fill the gaps in the mechanism and make it deeply integrated with all parts of React (client and server). However, they don't prescribe a particular data fetching strategy. That will likely come after the 18.0 release, and we're hoping that to have something during the next 18.x minor releases.\r\n\r\nThis work will include:\r\n\r\n- [ ] [React I/O libraries like `react-fetch`](https://codesandbox.io/s/sad-banach-tcnim), which is a lightweight and easiest way to fetch data with Suspense.\r\n  - [x] Initial implementation\r\n  - [ ] Finalize the API\r\n- [ ] [Built-in Suspense `<Cache>`](https://github.com/reactwg/react-18/discussions/25) which will likely be the primary recommended way for third-party data fetching libraries to integrate with Suspense. (For example, `react-fetch` uses it internally.)\r\n  - [x] Initial implementation\r\n  - [ ] Try it in production\r\n  - [ ] Investigate what's missing\r\n  - [ ] Figure out the recommended strategy for normalized caches\r\n- [ ] [Server Components](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html), which will be the recommended way to fetch data with Suspense in a way that scales great and integrates with React Fetch as well as third-party libraries.\r\n  - [x] Initial implementation\r\n  - [x] Basic Server Context implementation\r\n  - [ ] Server Context features for refetching\r\n  - [ ] Figure out the layering between Server Components and New SSR\r\n  - [ ] (This section has many follow-up questions, so it's incomplete)\r\n- [ ] Clear documentation and recommendations for data fetching library authors on how to integrate with Suspense","state":"open","updated_at":"2022-11-07T12:41:45Z","created_at":"2018-07-13T20:01:03Z","creator_user_login":"acdlite"}
{"number":13104,"title":"add support for SyntheticKeyboardEvent#isComposing","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSynthetic keyboard events do not contain `isComposing`.\r\nThey should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents\r\n \r\n**What is the expected behavior?**\r\n`event.isComposing === event.nativeEvent.isComposing`\r\n\r\nSyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nall versions, up through at least 16.4.1","state":"open","updated_at":"2022-10-11T08:38:26Z","created_at":"2018-06-24T21:49:31Z","creator_user_login":"mattkrick"}
{"number":13097,"title":"Add support for hydrating portals","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nProbably bug, but arguably a feature request, I suppose.\r\n\r\n**What is the current behavior?**\r\n\r\nI've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.\r\n\r\nhttps://jsfiddle.net/y8o5n2zg/\r\n\r\nAs seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:\r\n> `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`\r\n\r\nAdditionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:\r\n> `<div id=\"test-1\">Hello WorldHello World</div>`\r\n\r\n**What is the expected behavior?**\r\n\r\nIn an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.\r\n\r\n\r\n#### *Why* I'm doing this edge-case-y nonsense:\r\n\r\nWe're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page—20-30, perhaps?).\r\n\r\nIn searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.\r\n\r\nThanks!\r\n","state":"open","updated_at":"2022-12-21T22:37:07Z","created_at":"2018-06-22T18:45:31Z","creator_user_login":"marcusdarmstrong"}
{"number":13044,"title":"Allow Portals to be used for Reparenting","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n[Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.\r\n\r\n```js\r\nReactDOM.render(<Foo />, container);\r\n// This won't get <Foo /> to be unmounted and mounted again:\r\nReactDOM.render(<Foo />, container);\r\n\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n// This also won't get <Foo /> to be unmounted and mounted again, no matter if \r\n// we change parentComponent (and thus call it from a different parent):\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n```\r\n\r\nHowever this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).\r\n\r\nAs an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.\r\n\r\nBefore we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.","state":"open","updated_at":"2023-08-28T08:38:42Z","created_at":"2018-06-14T14:01:27Z","creator_user_login":"philipp-spiess"}
{"number":12989,"title":"Consider removing Mobile Safari empty onclick hack","body":"See https://github.com/facebook/react/issues/238 and https://github.com/facebook/react/pull/1536 for historical context.\r\n\r\nIs that still relevant? The code is here:\r\n\r\nhttps://github.com/facebook/react/blob/52fbe7612e0527b8c86decac519c344626f6bd72/packages/react-dom/src/client/ReactDOMFiberComponent.js#L244-L245\r\n\r\nEven if it's relevant, can we just feature test it, and not do this hack on other browsers? Seems like a waste of memory for event handlers (even though the function is the same every time).","state":"open","updated_at":"2021-11-30T18:07:04Z","created_at":"2018-06-07T00:36:14Z","creator_user_login":"gaearon"}
{"number":12811,"title":"Provide ways to do post-mortem analysis of “Maximum update depth exceeded” error in production.","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nOur error logging systems has been reporting this error in production: “Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.”\r\n\r\nHowever, we can’t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it’s impractical to audit every single component to find out what caused it.\r\n\r\n**What is the expected behavior?**\r\nIt would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWe are using React 16.3.1.","state":"open","updated_at":"2023-07-07T17:08:54Z","created_at":"2018-05-15T06:05:14Z","creator_user_login":"dtinth"}
{"number":12717,"title":"onMouseDown causes splash on real ios browsers","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nunexpected **grey splash** caused by `onMouseDown` on real ios device's browsers, both safari and chrome.\r\n[Please checkout this **grey splash** issue first](https://github.com/mui-org/material-ui/issues/11154)\r\nI did some trial later, and find out that vanilla html `<button onmousedown=\"\">btn</button>` doesn't cause **grey splash**, but with React's jsx `<button onMouseDown={()=>{}}></button>`, there is a noticeable **grey splash**\r\n\r\n**What is the expected behavior?**\r\n\r\nwho wants a splash?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.3.2\"\r\n","state":"open","updated_at":"2018-08-06T23:10:50Z","created_at":"2018-04-29T14:27:00Z","creator_user_login":"huhaixiao"}
{"number":12615,"title":"Unexpected warning when hydrating with portal and SSR","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nGiven the following (simplified) snippet:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  render() {\r\n    if (typeof document === 'undefined') return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n\r\nclass Para extends React.Component {\r\n  render() {\r\n    return (\r\n      <span>\r\n        Some Text\r\n        <HoverMenu />\r\n      </span>\r\n    )\r\n  }\r\n} \r\n```\r\n\r\nwhere `div#root` is a valid `div` that exists, the following error is shown when hydrating after SSR:\r\n\r\n`Warning: Expected server HTML to contain a matching <div> in <span>`\r\n\r\nThe warning goes away if I update the definition of `HoverMenu` to:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({ isActive: true })\r\n  }\r\n  render() {\r\n    const { isActive} = this.state\r\n    if (!isActive) return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n```\r\n\r\nI'd prefer not to do that because of the double rendering caused by `setState` in `componentDidMount`.\r\n\r\nI don't quite understand what that error is telling me. No `<div />` is rendered server-side in either case. The error is particularly confusing, as the `HoverMenu` DOM `div` is not even rendered inside a DOM `span`. (I wonder if this is happening because `HoverMenu` is nested inside a React `span`.)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error is thrown. Or, at least that the error message is clearer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 65\r\nReact 16.2\r\n(SSR through Next 5.1)\r\n","state":"open","updated_at":"2022-10-23T08:31:18Z","created_at":"2018-04-15T07:50:53Z","creator_user_login":"majelbstoat"}
{"number":12525,"title":"Provide a way to detect infinite component rendering recursion in development","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Feature (possibly bug?)\r\n\r\n**What is the current behavior?**\r\n\r\nI've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.\r\n\r\nNothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab. \r\n\r\nI finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React `16.3.0`\r\n- Chrome `65.0.3325.181`\r\n\r\n","state":"open","updated_at":"2022-10-04T15:40:16Z","created_at":"2018-04-03T16:04:05Z","creator_user_login":"josh-degraw"}
{"number":12441,"title":"Dangerous strings can reach browser builtins","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug, but a well known and worked-around one.\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nvar x = 'javascript:alert(1)';\r\nReactDOM.render(\r\n  (<a href={x}>Link</a>),\r\n  document.getElementById('container')\r\n);\r\n```\r\n\r\nproduces a link that alerts.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n* [Load the code above in the codepen REPL](https://jsfiddle.net/Luktwrdm/202/)\r\n* After the REPL loads, click the \"Run\" button at the top left.\r\n* You should see a blue \"link\" in the bottom-right pane.\r\n* Click it.  An alert will popup.\r\n\r\nThe alert should not pop up.\r\n\r\nA simple string that reaches an `href` attribute should not cause arbitrary code execution even with user interaction.\r\n\r\n\r\n**What is the expected behavior?**\r\nA string that reaches a browser builtin like the `HTMLAElement.prototype.href` setter should not cause code execution.\r\n\r\n**Discussion**\r\n\r\n[Polymer Resin](https://docs.google.com/presentation/d/1hepAXMroHSNTM0NV1aGlntjHrw0a0QOM5X5JvfXv_N0/edit#slide=id.g227691820f_0_198) uses hooks in another webcomponents framework to intercept value before they reach browser builtins where they can be vetted.  A similar approach could work for React.\r\n\r\nIt allows values to reach browser builtins when they are innocuous or have a runtime type that indicates that the author intentionally marked them as safe for that kind of browser builtin.\r\n\r\nFor example, an `instanceof SafeURL` would be allowed to reach `HTMLAElement.prototype.href` as would any string that is a relative URL, or one with a whitelisted protocol in (`http`, `https`, `mailto`, `tel`) but not `javascript:...`.\r\n\r\nMany developers know that `<a href={...}>` is risky, but if the link is an implementation detail of a custom React element, then developers don't have the context to know which attributes they need to be careful with.  They shouldn't have to either since it is an implementation detail.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI believe this is widespread across versions.\r\n\r\nAn earlier REPL I tried showed that it worked on version 16.2.0 from https://unpkg.com/react-dom/umd/react-dom.development.js but I don't know what version the jsfiddle above uses.\r\n","state":"open","updated_at":"2019-04-24T15:28:16Z","created_at":"2018-03-23T15:16:28Z","creator_user_login":"mikesamuel"}
{"number":12363,"title":"React onBlur events not firing during unmount","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a DOM element rendered by a React component has focus, and the React component unmounts, the React `onBlur` event does not fire on parent DOM elements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/134wrzy6q7\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that, just like the browser fires a `focusout` event when removing a DOM node, React would fire an `onBlur` events up to parent nodes when the focused node is removed / unmounted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nMac OS X: 10.13.2\r\nBrowser: Chrome 67.0.3366.0, Chrome 64.0.3282.186\r\n\r\nNo idea if this worked in earlier versions of React.","state":"open","updated_at":"2023-06-23T12:39:20Z","created_at":"2018-03-13T17:38:08Z","creator_user_login":"taj-codaio"}
{"number":12334,"title":"For Controlled Input, step does not work as expected unless initialized with null or \"\".","body":"*BUG*\r\n\r\n**What is the current behavior?**\r\nFor input type=\"number\", step does not work as expected if there is an initial value set. Step only seems to get honored if the initial value is \"\" or null.\r\n\r\nExample:\r\nhttps://codepen.io/anon/pen/MQMBmX\r\n\r\nThe example uses a controlled input binding value and step. Step is 1/10th of the value. If you edit the value in the textbox to 50000 and increment using the stepper, it will increment to 50100 (i.e. by the initial value and not by the current step).\r\n\r\nEdit the code so initial value is \"\" or null. Edit textbox to 50000 and step up - value goes to 55000 as expected.\r\n\r\n**What is the expected behavior?**\r\nIt should be possible to render a number input that honors step without having to initialize the input component value to null or \"\" first.\r\n\r\nIt seems when there is an initial value provided, it will write a value attribute into the DOM (e.g. value=\"100\").  When initial value is \"\" or null then just the value attribute is written to DOM with no assignment. e.g. (value).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1  (ported to this version to confirm if still an issue)\r\n0.14.7 (originally found in this version)\r\n\r\nSeems to affect Chrome only (confirmed windows and mac, versions 59 and 64). Bug does not appear in Safari (on a mac at least).","state":"open","updated_at":"2022-03-26T11:16:42Z","created_at":"2018-03-06T10:30:40Z","creator_user_login":"andyboyne"}
{"number":12073,"title":"Fabric Todos","body":"For my own notes here are some spill-overs from the Fabric renderer commit.\r\n\r\n- [ ] Update currentProps for updates in the commit phase. Needs a host effect to be marked and we need a hook to do host updates in the persistent mode.\r\n- [x] Actually use currentProps when extracting events in the component tree.\r\n- [ ] Resuming will need to be able to not reuse host nodes used by another thread.\r\n- [ ] Should always clone direct siblings of a changed node, in case they will relayout.","state":"open","updated_at":"2020-01-08T19:17:20Z","created_at":"2018-01-22T17:55:39Z","creator_user_login":"sebmarkbage"}
{"number":11972,"title":"Consider removing mouseenter/mouseleave polyfill","body":"As suggested in https://github.com/facebook/react/pull/10247.\r\nNot sure we want to do it, but I decided to create an issue to track future attempts (the PR is stale).","state":"open","updated_at":"2022-04-08T10:53:08Z","created_at":"2018-01-05T16:00:10Z","creator_user_login":"gaearon"}
{"number":11949,"title":"Output JUnit XML test metadata for CircleCI","body":"# @benbraou has claimed this issue. Please give them a chance to work on this.\r\n\r\n---\r\n\r\nHere's a screenshot of a CircleCI build for another (private) project I'm a part of:\r\n\r\n![image](https://user-images.githubusercontent.com/6820/34494194-1d3d3f70-efa4-11e7-87b7-0ca9961b2934.png)\r\n\r\nIt clearly highlights the parts of the build that failed.\r\n\r\nIn contrast, see one of our builds: https://circleci.com/gh/facebook/react/8402. In this one the ./scripts/circleci/upload_build.sh step failed but you need to scroll through the output a significant amount to see that. This is in part because we have a custom entry point for all our CI steps ([scripts/circleci/test_entry_point.sh](https://github.com/facebook/react/blob/v16.2.0/scripts/circleci/test_entry_point.sh)) to make it easier for us to parallelize some build steps.\r\n\r\nI'd like us to change that test_entry_point.sh script to output JUnit XML metadata for CircleCI as described in https://circleci.com/docs/2.0/collect-test-data/. Then I believe the CircleCI build results page will show exactly which step failed.\r\n\r\n(Bonus: If we can show individual Jest tests that would be even cooler. But I think the most important part is breaking out jest vs flow vs prettier, etc. into separate chunks.)","state":"open","updated_at":"2023-05-16T21:45:14Z","created_at":"2018-01-02T18:08:39Z","creator_user_login":"sophiebits"}
{"number":11935,"title":"Consider a more specific warning for key={undefined}","body":"Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.","state":"open","updated_at":"2022-09-16T15:35:07Z","created_at":"2017-12-30T17:00:45Z","creator_user_login":"gaearon"}
{"number":11896,"title":"Stop syncing value attribute for controlled inputs","body":"Opening this as a follow up to some quick discussions in https://github.com/facebook/react/issues/11881. Syncing the `value` attribute has been a consistent source of bugs for us, and the benefits of doing so seem minimal. There's some previous discussion on the topic in https://github.com/facebook/react/pull/7359 and in other issues, I can't remember right now 😄 \r\n\r\nThis would be a breaking change, so it would have to be done in a major release. \r\n\r\n## Reasons to keep syncing\r\n\r\n* It prevents `form.reset()` from putting controlled form inputs into a weird state\r\n* Some browser extensions (not sure which) read from the `value` attribute in some cases (not sure which)\r\n* It can be useful for querying inputs with a specific value using an attribute selector\r\n\r\n## Reasons to stop syncing\r\n\r\n* It will reduce the complexity of `react-dom` in a non-trivial way\r\n* In turn, it will likely reduce bundle size as well\r\n* We remove a whole class of bugs (fighting with browsers that want to be helpful about input values)\r\n* Syncing the input value to the attribute potentially exposes sensitive data to third party tools ([1](https://www.reddit.com/r/analytics/comments/7ukw4n/mixpanel_js_library_has_been_harvesting_passwords/))\r\n\r\n______\r\n\r\nWhat do we think? Are these reasons good enough to keep syncing the `value` attribute? Are there other more critical reasons we should keep doing so?\r\n\r\n\r\ncc @nhunzaker @jquense @gaearon ","state":"open","updated_at":"2018-10-04T06:30:59Z","created_at":"2017-12-20T18:21:41Z","creator_user_login":"aweary"}
{"number":11881,"title":"backspace fails to clear values on input type='email'","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug \r\n\r\n**What is the current behavior?**\r\nemail input doesn't control for whitespace // possible variation on [Issue 6368](https://github.com/facebook/react/issues/6368); however, 6368 shows up at 15.0.0 this bug shows up at 15.2\r\n\r\n**If the current behavior is a bug, demo**\r\n\r\nno bug in React 15.0.0\r\nno bug in React 15.1.0\r\nbug on React 15.2\r\n[React~15 fiddle](https://jsfiddle.net/cburnett/79z43qxn/9/)\r\n\r\nbug on React 16 \r\n[React~16 fiddle](https://jsfiddle.net/cburnett/q1297t5w/2/)\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a user presses down the backspace key and holds it, all values in the input are removed, including the whitespaces  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorks on 15.1.0\r\nbug at >= 15.2.0 \r\ntesting on Chrome 63\r\nMacOs Sierra 10.12\r\n","state":"open","updated_at":"2023-03-21T21:15:48Z","created_at":"2017-12-18T18:21:42Z","creator_user_login":"codeangler"}
{"number":11877,"title":"Number input gets cleared when typing period as decimal mark","body":"<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nMy OS and browser are configured to a locale that uses comma as the decimal mark (Finland for those interested). In the codepen below when I accidentally type a period after some number the whole input gets cleared. This is somehow related to the parent component's state being updated because if the `defaultValue` prop is removed from the `<Input>` component the input doesn't get cleared.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/anon/pen/aEOgNL?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should retain its visible value even if it would be invalid (can't be converted to a number).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0 and Chrome 63 on macOS 10.12.6.\r\n\r\nTested in Safari 11.0.2 and typing a period kinda works. After typing the first number after the period it gets converted to a comma but the cursor jumps to the beginning.\r\n\r\nAlso tested in Firefox 57.0.1 but it seems to think that period is the correct decimal mark.","state":"open","updated_at":"2019-03-25T23:38:32Z","created_at":"2017-12-18T11:29:42Z","creator_user_login":"Hilzu"}
{"number":11826,"title":"React does not call onBlur callback","body":"**Do you want to request a *feature* or report a *bug*?**\r\n**Bug**\r\n\r\n**What is the current behavior?**\r\nWhen input control becomes disabled, React does not call onBlur callback\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal https://jsfiddle.net/c22pez5z/\r\n\r\n**What is the expected behavior?**\r\n1. Focus on input element\r\n2. Press Enter button (it makes input disabled)\r\n3. `Blur counter` and `Native blur counter` should be equal.","state":"open","updated_at":"2021-04-19T13:10:23Z","created_at":"2017-12-11T13:20:59Z","creator_user_login":"nbob"}
{"number":11799,"title":"Consider removing XML compatibility from SSR or hiding it behind an option","body":"See https://github.com/facebook/react/pull/11708#issuecomment-349953542.\r\nNot sure if it's important but seems suboptimal to send extra markup if most people don't need XML.","state":"open","updated_at":"2020-08-25T13:43:07Z","created_at":"2017-12-07T22:05:51Z","creator_user_login":"gaearon"}
{"number":11734,"title":"value|defaultValue={Symbol|Function} should be ignored, not stringified","body":"Regression in master from https://github.com/facebook/react/pull/11534.\r\nFound it thanks to the attribute fixture snapshots.","state":"open","updated_at":"2023-08-21T16:38:12Z","created_at":"2017-12-01T01:01:08Z","creator_user_login":"gaearon"}
{"number":11674,"title":"Resetting a form containing a focused controlled number input puts it out of step with state","body":"Here's a fixture demonstrating the issue (first test case): http://react-number-input-form-reset-bug.surge.sh/number-inputs\r\n\r\nIf you have a controlled number input within a form containing a reset button, hitting Enter can trigger that reset event. This causes the focused input to be reset to the `defaultValue`, which won't be in sync with the tracked value because we do that work on blur for number inputs to avoid triggering validation warnings. This doesn't affect other input types, since the tracked value is updated immediately.\r\n\r\nThis might be a viable tradeoff for avoiding those validation warnings, so I'm not sure if this is actionable, but I wanted to at least document it for future reference.\r\n\r\n\r\ncc @nhunzaker @gaearon \r\n\r\n","state":"open","updated_at":"2018-08-30T23:27:11Z","created_at":"2017-11-27T21:29:06Z","creator_user_login":"aweary"}
{"number":11667,"title":"RFC: Drop isAttributeNameSafe() check","body":"We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible.","state":"open","updated_at":"2023-04-21T05:46:27Z","created_at":"2017-11-26T22:50:11Z","creator_user_login":"gaearon"}
{"number":11570,"title":"Reword \"unknown property\" warning to be less obnoxious","body":"I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. ","state":"open","updated_at":"2020-01-08T19:17:54Z","created_at":"2017-11-16T13:40:45Z","creator_user_login":"gaearon"}
{"number":11566,"title":"[Umbrella] New algorithm for resuming interrupted work","body":"*Resuming* is the ability to re-use fibers after they are interrupted by a higher-priority update. Take the following scenario: A component is updated at a normal, async priority. Before the update is finished processing, a higher-priority update is scheduled (let's say it's synchronous, though it could also be a higher-priority async update). The sync update *interrupts* the async update, leaving it unfinished. After the sync update finishes, we go back to processing the interrupted, async update. It's possible, and even likely, that the interrupted work wasn't touched by the sync work and can be *resumed* without starting over completely.\r\n\r\nThis is an important optimization for several async features we have in mind, including error handling, blockers, pre-rendering, and hidden priority.\r\n\r\nWe used to have an implementation of resuming that mostly worked but had some bugs. A few months ago, I spent some time [identifying the bugs using fuzz testing](https://github.com/facebook/react/pull/9952) and fixing them by iterating on the existing algorithm. I eventually got a [version working that passed all the tests](https://github.com/facebook/react/pull/9695). But even this version didn't have all of the features we wanted, and the algorithm seemed inherently flawed. So we decided it would be best to scrap the existing algorithm and revisit resuming in the future.\r\n\r\nWe now believe we have a better idea of how resuming should work. I'm going to split the work into multiple PRs, and use this issue to keep track of our progress.\r\n\r\nMy apologies if some of my descriptions are hard to follow. It can be difficult to describe without resorting to jargon. I'll iterate on this issue as I work.\r\n\r\n\r\nAlways reconcile against current child set (#11564)\r\n---------------------------------------------------\r\n\r\nThis is a small refactor that reflects what we already do without resuming: the set we reconcile against is always the current set. In the reverted resuming algorithm, the set we reconcile against was sometimes a work-in-progress set, and there are a few code paths that are left over from that implementation.\r\n\r\nStash interrupted children\r\n--------------------------\r\n\r\nWhen cloning a work-in-progress fiber from current, and there is already an existing work-in-progress that was interrupted, stash the interrupted work-in-progress children (and corresponding fields) in case we can reuse them later. In begin phase, add an additional check to see if incoming props/state match the interrupted props/state. If so, bail out and re-use the interrupted children. If not, the interrupted children are no longer useful, because we're about to re-render the parent and overwrite them. (Unmounted fibers actually can be re-used even if we re-render the parent; see next step.)\r\n\r\nThis gets us back to the same functionality we had in the old resuming algorithm. We can now resume interrupted children if we come back to it at the same priority at which it was originally rendered. The main limitation is that the work is lost if the parent is re-rendered at a higher priority.\r\n\r\n**Need a way to distinguish between a work-in-progress fiber and the \"previous current\" fiber*\r\n\r\nPool unmounted, interrupted children so they can resume even if parent re-renders at higher priority\r\n------------------------------------------------------------------------------------\r\n\r\nWhen a fiber is about to be re-rendered, and there are interrupted children that could not be reused, search through the interrupted children and find the ones that are unmounted (don't have an alternate). Stash the unmounted children in a separate set; they can be kept around indefinitely without being overwritten. This set acts like a pool of children. The next time the parent is re-rendered at the priority of the interrupted children, check the pool for matches before creating new fibers.\r\n\r\n","state":"open","updated_at":"2020-01-08T19:17:54Z","created_at":"2017-11-15T21:24:06Z","creator_user_login":"acdlite"}
{"number":11565,"title":"React-test-renderer: support for portal","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n","state":"open","updated_at":"2022-12-04T22:09:31Z","created_at":"2017-11-15T19:40:29Z","creator_user_login":"alansouzati"}
{"number":11503,"title":"Formalize top-level ES exports","body":"Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021).\r\n\r\nWe can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about `react-test-renderer/shallow` that currently exports a class (and thus would start failing in Node were it converted to be a default export)?","state":"open","updated_at":"2023-08-10T08:01:46Z","created_at":"2017-11-09T15:56:42Z","creator_user_login":"gaearon"}
{"number":11461,"title":"[RN] Don't receive events on unknown tags","body":"Flow uncovered this:\r\n\r\nhttps://github.com/facebook/react/blob/92b7b172cce9958b846844f0b46fd7bbd8c5140d/packages/react-native-renderer/src/ReactNativeEventEmitter.js#L174-L175\r\n\r\nNeed to verify if we can just return early and not process the events in this case.","state":"open","updated_at":"2020-01-08T19:17:53Z","created_at":"2017-11-05T12:03:39Z","creator_user_login":"gaearon"}
{"number":11417,"title":"Treat value={null} as empty string","body":"Per @gaearon's request, I'm opening up a new issue based on https://github.com/facebook/react/issues/5013#issuecomment-340898727.\r\n\r\nCurrently, if you create an input like `<input value={null} onChange={this.handleChange} />`, the null value is a flag for React to treat this as an uncontrolled input, and a console warning is generated. However, this is often a valid condition. For example, when creating a new object (initialized w/ default values from the server then passed to the component as props) in a form that requires address, Address Line 2 is often optional. As such, passing null as value to this controlled component is a very reasonable thing to do.\r\n\r\nOne can do a workaround, i.e. `<input value={foo || ''} onChange={this.handleChange} />`, but this is an error-prone approach and quite awkward.\r\n\r\nPer issue referenced above, the React team has planned on treating null as an empty string, but that hasn't yet occurred. I'd like to propose tackling this problem in the near future.\r\n\r\nPlease let me know if I can help further.","state":"open","updated_at":"2019-03-15T17:10:34Z","created_at":"2017-10-31T21:10:34Z","creator_user_login":"IndifferentDisdain"}
{"number":11387,"title":"createPortal: support option to stop propagation of events in React tree","body":"**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n","state":"open","updated_at":"2023-06-13T20:05:04Z","created_at":"2017-10-27T15:36:49Z","creator_user_login":"kib357"}
{"number":11369,"title":"React should recognize the `valueAsDate` property on DOM elements","body":"The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.","state":"open","updated_at":"2022-06-24T16:35:26Z","created_at":"2017-10-26T13:37:14Z","creator_user_login":"kreba"}
{"number":11347,"title":"RFC: Plan for custom element attributes/properties in React 19","body":"This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It’s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It’s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React’s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there’s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React—even if those properties were set before the definition loaded—and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]” is not useful.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar” :squid.prop=”ink”>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar” [squid]=”ink”>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', …)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element’s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: ‘x-foo’,\r\n  ‘my-attr’: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn’t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it’s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer’s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That’s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani","state":"open","updated_at":"2023-07-31T14:27:19Z","created_at":"2017-10-24T05:28:49Z","creator_user_login":"robdodson"}
{"number":11211,"title":"Use the native `beforeinput` event if it's supported","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible—which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior—allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n","state":"open","updated_at":"2023-01-25T06:01:11Z","created_at":"2017-10-13T01:45:04Z","creator_user_login":"ianstormtaylor"}
{"number":11101,"title":"Type Fiber by tag as disjoint union","body":"@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday.","state":"open","updated_at":"2020-01-08T19:18:25Z","created_at":"2017-10-04T23:26:51Z","creator_user_login":"gaearon"}
{"number":11097,"title":"Umbrella: React DOM Bugs","body":"Since I was going through all open issues yesterday and today, I also compiled a list of things that seem broken in ReactDOM, grouped by areas.\r\n\r\nI don’t think all of these issues are equally important but I’d like to start a discussion around how we can start attacking them—both in shorter and in longer term. For example any potential fixes to the onChange event logic would need to take https://github.com/facebook/react/issues/9657 into account (or even inform it).\r\n\r\nI think it would be a good topic for our next chat, cc @jquense @aweary @nhunzaker. Maybe we could also broadcast it this time? 😃  \r\n\r\n## Autofill\r\n\r\n* [ ] https://github.com/facebook/react/issues/1159 Provide a way to handle browser-autocompleted form values on controlled components\r\n* [ ] https://github.com/facebook/react/issues/7328 IE 11 and Edge no longer prompt to remember password on controlled form\r\n* [ ] https://github.com/facebook/react/issues/10468 DOM Fixture Form Coverage: Restored State and Auto-fill \r\n\r\n## Composition Events\r\n\r\n### Issues\r\n\r\n* [x] https://github.com/facebook/react/issues/10217 Incorrect data in compositionend event when typing Korean on IE11\r\n* [ ] https://github.com/facebook/react/issues/3926 Change event fires too many times when inputing Chinese characters\r\n* [ ] <s>https://github.com/facebook/react/issues/8423 onChange does not work well with IE11 at Japanese IME. in React 15.4.0</s>\r\n\r\n### PRs\r\n\r\n* [x] https://github.com/facebook/react/pull/7926 <s>Try to generate a beforeInput event for buggy composition scenarios in IE</s>\r\n* [x] https://github.com/facebook/react/pull/8438 Handle composition events in ChangeEventPlugin\r\n\r\n## Mouse Enter / Leave\r\n\r\n* [ ] https://github.com/facebook/react/issues/4251 mouseenter fires on disabled inputs whereas mouseleave does not\r\n* [ ] https://github.com/facebook/react/issues/10109 Mouseenter event not triggered when cursor moves from disabled button\r\n* [ ] https://github.com/facebook/react/issues/7135 onMouseEnter propagation in double reactroot\r\n* [ ] https://github.com/facebook/react/issues/6807 onMouseLeave not working as expected\r\n* [ ] https://github.com/facebook/react/issues/13956 onMouseEnter doesn't fire under removed node\r\n\r\n## Input, Checkbox, and Select\r\n\r\n* [x] https://github.com/facebook/react/issues/4672 Change event does not fire in IE and Edge under certain circumstances\r\n* [x] https://github.com/facebook/react/issues/4854 Pressing spacebar on a checked radio button only fires click in some browsers\r\n* [x] https://github.com/facebook/react/issues/6368 Input type 'email' as controlled component does not control white spaces\r\n* [ ] https://github.com/facebook/react/issues/6951 Changing state in onFocus and onChange for a select multiple element does not work in Firefox\r\n* [x] https://github.com/facebook/react/issues/7024 select onChange not firing when using keyboard\r\n* [ ] https://github.com/facebook/react/issues/7281 <s>Input onChange not triggered every time in IE11 if e.preventDefault() used</s>\r\n* [ ] https://github.com/facebook/react/issues/7489 input element `setSelectionRange` after backspace does not work in IE10\r\n* [x] https://github.com/facebook/react/issues/7630 Radio buttons are not correctly checked when using multiple lists of radio buttons\r\n* [ ] https://github.com/facebook/react/issues/7769 input autoFocus causes focus to be emitted before ref\r\n* [ ] https://github.com/facebook/react/issues/8514 Undo behavior in controlled textareas works differently from the default behaviour in chrome\r\n* [ ] https://github.com/facebook/react/issues/8531 <s>IE10 triggers onChange twice when replacing a text selection</s>\r\n* [x] https://github.com/facebook/react/issues/8642 textarea + onFocus + stopPropagation = incorrect cursor rendering on Firefox\r\n* [x] https://github.com/facebook/react/issues/8876 onBeforeInput fires after Edge updates the DOM\r\n* [ ] https://github.com/facebook/react/issues/8938 Clear button on iOS date input does not return correct event value \r\n* [ ] https://github.com/facebook/react/issues/9023 event.preventDefault in click handler does not prevent onChange from being called \r\n* [x] https://github.com/facebook/react/issues/11010 Reset of select ignores defaultValue\r\n","state":"open","updated_at":"2022-03-29T23:25:11Z","created_at":"2017-10-04T22:02:59Z","creator_user_login":"gaearon"}
{"number":11073,"title":"Performance enhancements in niche situations","body":"I hit on a couple things that were a bit surprising to me... not sure what I'm really asking here, other than if these things are documented somewhere. Also kinda just going with the flow where this seems to be the place to raise generic \"issues\" even if they're not bugs :)\r\n\r\n1. keys can make things slower\r\n\r\nI had a bunch of items, and the only thing that changed was their x/y positions. adding a key with index made rendering slower. It's possible this is short-sighted though since it could very well change once that \"layer\" has more items changing above/below it, but I found it interesting.\r\n\r\n2. rendering null makes a _huge_ difference\r\n\r\nI had two test cases - a full graphics pipeline vs. an essentially empty POJO renderer. The difference in speed didn't matter about the data or graphics, but rather about what was returned in the components `render()`. For DOM this doesn't work of course - but for custom renderers, when it's known that a certain type of element will be an edge node - doing the side effects in render() (or some other lifecycle) and then returning `null` is _significantly_ faster than even a straight functional component that returns a simple element (which does the same side effects). This makes sense, since react then has less branches to consider (even if those branches point to nothing other than simple objects).\r\n\r\n\r\n\r\n\r\n","state":"open","updated_at":"2017-11-03T15:25:10Z","created_at":"2017-10-03T21:14:04Z","creator_user_login":"dakom"}
{"number":10871,"title":"Multiple onFocus events fired on single focus in Safari","body":"I'd like to report a possible bug.\r\n\r\n1. Brief description\r\nOnFocus synthetic event is fired multiple times on single focus occurrence in Safari. Expected behaviour is for it to be fired only once per focus.\r\n\r\n2. Live demo: https://codesandbox.io/s/101pnjxq27\r\n\r\n3. Minimal steps to reproduce\r\n- install create-react-app\r\n`$ npm install -g create-react-app`\r\n\r\n- create an example application\r\n`$ create-react-app input-focus-test`\r\n`$ cd input-focus-test`\r\n\r\n- edit application file and add input with onFocus event handler\r\n`$ vi src/App.js`\r\n\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  handleOnFocus = evt => {\r\n        console.log('handleOnFocus', evt);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to React</h1>\r\n        </header>\r\n        <p className=\"App-intro\">\r\n          To get started, edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>\r\n          Input\r\n          <input onFocus={this.handleOnFocus}/>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n- start application\r\n`$ npm run start`\r\n\r\n- open up locahost:3000 in Safari\r\n- click on the input field with developer’s console opened\r\n- notice focus event fired multiple times\r\n\r\n4. Additional info\r\nThis issue has been found in the following environment:\r\n- macOS Sierra version 10.12.6 (also tested and found on High Sierra)\r\n- Safari 10.1.2 (also tested and found in Safari 10.0 and Safari 11, seems to work on latest Safari mobile, Chrome and Firefox)\r\n- React JS 15.5.4 (also tested and found in React 16)\r\n- example steps to reproduce above generated with create-react-app version 1.4.1\r\n\r\nSome of our observations that might come in handy:\r\n- this issue seems to behave randomly to some extent\r\n- event is usually fired twice when changing focus from input to input (so first click on input fires two events, consequential fire only one, but when changing focus to a different input field it fires twice again)\r\n- additional interesting behavior happens with multiple input fields; for instance with input fields 1 and 2, first focus on input 1 generates two events onFocus with input 1, but then focus on input 2 sometimes generates three events: onFocus with input 1, then input 2, then input 1 again as targets.\r\n","state":"open","updated_at":"2019-04-08T21:40:50Z","created_at":"2017-09-27T13:18:30Z","creator_user_login":"mbryla"}
{"number":10713,"title":"What should portals do when container has a child managed by React?","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n`ReactDOM.unstable_createPortal(<Component/>, target)` appends the rendered component in the target instead of replacing the contents of the target\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\n\r\nhttps://codesandbox.io/s/pjx8x9z2o7\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should replace the contents of the target with the new rendered component\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.0.0-rc.3\r\nreact-dom@16.0.0-rc.3\r\n\r\n\r\nNote: I might have completely misunderstood how portals work. @gaearon [encouraged me](https://twitter.com/dan_abramov/status/908443416173924352) to open this issue 😄 ","state":"open","updated_at":"2023-07-17T08:50:16Z","created_at":"2017-09-14T21:46:38Z","creator_user_login":"siddharthkp"}
{"number":10703,"title":"A faster diff algorithm","body":"This is an invitation to discussion...\r\n\r\nSo, react is pretty freaking awesome and I used it quite a bit. One thing unfortunately where react is not as strong is in performance, which gave roots to Inferno and Preact. Although, this is generally a non-issue on desktop, while mobile might be a bottleneck.\r\n\r\nI know many members of the team have been working on improving bundle size (I believe through rollup support in a talk I heard), asynchronous scheduling, etc. I am also aware that @trueadm (the creator of inferno) joined the React team and is working on improving it.\r\n\r\nThe point I want to bring up is this library [petit-dom](https://github.com/yelouafi/petit-dom). It uses, is a diff algorithm (links that explain it provided in the README) and it seems to score incredibly on [vdom performance tests](https://github.com/krausest/js-framework-benchmark). In fact, it is only beat by 2 technologies, vanillajs and surplusjs [per the benchmark snapshot](https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html).\r\n\r\npetit-dom beats inferno, preact, mithril, vue, angular, etc. Of course, it is not a proper js framework, however the point I am trying to make is that it is far faster and a major difference between the other frameworks seems to be its diff algorithm.\r\n\r\nI realize this would mean a rewrite of a good portion of react-dom, which is why it is simply a discussion :D.\r\n\r\nIf this is unfeasible, or simply going after the wrong target/bottleneck, let me know as it is after all a discussion.","state":"open","updated_at":"2020-12-29T04:00:26Z","created_at":"2017-09-13T23:33:37Z","creator_user_login":"thomas-jeepe"}
{"number":10657,"title":"Form restoration & React hydration","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\n Bug\r\n\r\n**Reproduction**\r\n\r\n1. Open https://codesandbox.io/p/sandbox/form-restoration-react-hydration-cz1xgj?file=%2Fapp%2Fpage.js%3A2%2C1, see the source\r\n2. Open https://cz1xgj-3000.csb.app/\r\n3. Fill in the input, for example, you can type \"foo\"\r\n4. Press submit\r\n5. Undo the navigation\r\n6. See how the \"input value\" is outdated, it doesn’t match what's inside the textbox.\r\n\r\nhttps://github.com/facebook/react/assets/3165635/d29dd884-8896-4b59-8a55-16eb5145dfc7\r\n\r\n**What is the current behavior?**\r\n\r\nLet's say you start filling a form input type text or a select element with `foo`. Then you click on a link and press the back button. The browser back-forward cache (or maybe the form restauration logic) will kick in and change the initial value of the form elements. You will get the `foo` value back in the input. However, React doesn't account for it when the component is controlled.\r\n\r\nFor end-users, it means that they will try to submit a form because they see values in the inputs, but it won't work. They need to go back to each field and make a \"fake\" change so that React registers it.\r\n\r\nThis issue could also be worked around by not controlling the inputs, but I'm not sure how popular form libraries handle this.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect React to trigger an `onChange` event to replicate the actual form value. \r\nAt the fundamental level, there is a coordination issue between the browser and React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React `@latest` (v18.2.0).\r\n- Chrome `@latest` (v112.0)\r\n\r\n**Details**\r\n\r\nWe have been using the following hack on Material UI:\r\n```js\r\n  componentDidMount() {\r\n    // Fix SSR issue with the go back feature of the browsers.\r\n    // Let's say you start filling the input with \"foo\", you change the page then after comes back.\r\n    // The browser will reset the input value to \"foo\", but we also need to tell React about it.\r\n    this.handleChange({\r\n      target: this.input,\r\n    });\r\n  }\r\n```\r\n\r\nBut it comes with issues: https://github.com/mui/material-ui/pull/8110.\r\nSo instead, we tried simulating a change event [as suggested in Stack Overflow](https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-onchange-event-in-react-js) but it doesn't work anymore\r\n```js\r\nvar event = new Event('input', { bubbles: true });\r\nelement.dispatchEvent(event);\r\n```\r\n\r\nSo for now, we are going to disable the cache with `<form autoComplete=\"off\">`.\r\n","state":"open","updated_at":"2023-05-18T12:39:14Z","created_at":"2017-09-09T15:23:08Z","creator_user_login":"oliviertassinari"}
{"number":10506,"title":"Symbol Tagging for dangerouslySetInnerHTML to Help Prevent XSS","body":"If you're spreading props from a user provided source we have a XSS. E.g.\r\n\r\n```js\r\nvar data = JSON.parse(decodeURI(location.search.substr(1)));\r\n\r\nfunction Foo(props) {\r\n  return <div><div {...props} /><span>{props.content}</span></div>;\r\n}\r\n\r\nReactDOM.render(<Foo {...data} />, container);\r\n```\r\n\r\nThat's already true today because this URL is now an XSS hole:\r\n```\r\n?{\"content\":\"Hello\",\"dangerouslySetInnerHTML\":{\"__html\":\"<a%20onclick=\\\"alert(%27p0wned%27)\\\">Click%20me</a>\"}}\r\n```\r\n\r\nThis is very uncommon. There are many different ways to screw up getting user data. However doing that + also spreading is unusual. We decided in #3473 that React should add an extra layer of protection for these types of mistakes. This one is __much__ more uncommon than the one in #3473 though.\r\n\r\nYou should already have a pretty centralized way of sanitizing these objects so it seems to me that adding a Symbol to this object shouldn't be that big of a deal though.\r\n\r\nEither:\r\n\r\n```js\r\n{ $$typeof:Symbol.for('react.rawhtml'), __html: myHTML }\r\n```\r\nor:\r\n```js\r\n{ [Symbol.for('react.rawhtml')]: myHTML }\r\n```","state":"open","updated_at":"2023-04-08T23:06:48Z","created_at":"2017-08-22T01:13:23Z","creator_user_login":"sebmarkbage"}
{"number":10474,"title":"The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder","body":"I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers.","state":"open","updated_at":"2023-07-24T14:36:22Z","created_at":"2017-08-16T19:28:44Z","creator_user_login":"brandonbloom"}
{"number":10441,"title":"Cross-origin error passed to componentDidCatch incorrectly","body":"tl;dr React is passing \"A cross-origin error was thrown\" to `componentDidCatch` when there are no cross-origin scripts.\r\n\r\nSee [this discussion thread](https://github.com/facebook/react/pull/10353#issuecomment-321528685) and [this repro case](https://github.com/tessin/tessin-mini).\r\n\r\nI was able to confirm the behavior. A quick look at `onError` showed a null `event.error`.","state":"open","updated_at":"2022-09-02T06:13:07Z","created_at":"2017-08-11T15:25:18Z","creator_user_login":"bvaughn"}
{"number":10389,"title":"<video /> attribute needed but not guaranteed by React","body":"As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)","state":"open","updated_at":"2023-06-22T07:24:05Z","created_at":"2017-08-04T20:50:39Z","creator_user_login":"elrumordelaluz"}
{"number":10382,"title":"Too much unnecessary updates when a child element is moved to the front","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot sure if it's a bug or an 'accepted' behavior. But this can affect performance in some situations or even 'break the expectations' in others (e.g. animating moved elements [i.e. simple moves]) \r\n\r\n**What is the current behavior?**\r\n\r\nWhen a child element moves from the end of the list to the front  React actually moves all the other elements after the moved/last element instead of simply inserting the moved element at the front of the list.\r\n\r\nThis also can be stated more generally for an element or a block of elements moving backward with a significant shift.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nHere is a [demo](https://codesandbox.io/s/wjZkrGVzJ) that shows the DOM operations performed on DOM nodes (moves & insertions) during reconciliation. To reproduce the issue\r\n\r\n- type '0123456789x' in the input field then click `Patch!`\r\n\r\n- now type 'x0123456789' (move the last 'x' to the front) then click `Patch!` again\r\n\r\nHere's the output\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969007-affc2dae-791a-11e7-951a-37856bc53f00.png)\r\n\r\nInstead of moving the 'x' to the front. React actually moves all the other elements after the 'x'\r\n\r\n*Note: the demo uses MutationObserver api to find out the operations. But you can also verify this behavior directly by commenting out the code that activates the dom observer (in componentDidMount) and watch the dom operations manually in the devtools element inspector*\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should perform the minimal number of operations. I know that the 'minimum' will vary for each situation and not trivial to infer for the general case. But for some common cases like this one it should be feasible.\r\n\r\nFor info this use case is handled in most of the other virtual dom libs like preact, snabbdom. Inferno is a remarkable case as it will always infer the minimum number of operations (it uses an algorithm to find the [longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) on an array containing the indexes of the old elements).\r\n\r\nI found this behavior while working on a demo to find out how vdom libs rearrange nodes during children reconciliation. For example here is the same output for other libs ([demo](https://codesandbox.io/s/BkLpXYQn))\r\n\r\n![image](https://user-images.githubusercontent.com/5453835/28969902-567219c0-791e-11e7-9f3d-29bf988cdab1.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe demo uses the 0.16 version. But I tried with 0.15 and it has the same behavior","state":"open","updated_at":"2018-03-01T13:28:14Z","created_at":"2017-08-04T13:18:50Z","creator_user_login":"yelouafi"}
{"number":10143,"title":"Remove unstable_renderIntoContainer","body":"My hunch is we want to remove it before 16 because `unstable_createPortal` accomplishes the same thing. I remember `unstable_renderIntoContainer` adding a bunch of complexity that would be nice to get rid of before committing to support it for another release cycle.","state":"open","updated_at":"2020-01-08T19:18:58Z","created_at":"2017-07-11T12:25:32Z","creator_user_login":"gaearon"}
{"number":10109,"title":"Mouseenter event not triggered when cursor moves from disabled button","body":"BUG.\r\n\r\nMouseenter event not triggered when cursor moves from disabled button\r\nsee [example](https://alfa-laboratory.github.io/arui-feather/styleguide/#playground/code=%3Cdiv%3E%0A%20%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20disabled=%7B%20true%20%7D%3EDisabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%3ENot%20Disabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%20%0A%3C/div%3E)\r\n\r\n\r\n**What is the expected behavior?**\r\nShould trigger Mouseenter event\r\n\r\nReact 15.5.3\r\nLatest Chrome\r\nMacOs 10.12.5","state":"open","updated_at":"2023-06-14T19:16:52Z","created_at":"2017-07-05T11:01:18Z","creator_user_login":"stepancar"}
{"number":10021,"title":"Feature request: Add a \"module\" entry in package.json to export ES2015 version of React","body":"**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nInstall react and try to import it in a browser with native modules enabled.\r\n\r\n**What is the expected behavior?**\r\nHave an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions","state":"open","updated_at":"2023-06-28T11:34:53Z","created_at":"2017-06-21T21:09:32Z","creator_user_login":"misterfresh"}
{"number":9999,"title":"False positive getDefaultProps warning when mixing development and production versions","body":"As migrating from 15.4 to 15.5, I am rewrite original react components with `create-react-class`. \r\n\r\nHowever, there is a warning.\r\n\r\n```\r\nreact-15.5.4.js?bust=1497843639843:3287 Warning: getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\r\n```\r\n\r\n As I am really transferring from a **classic** `React.createClass` definition, I would like to ask is this warning appropriate? Or, this is a depreciation sames as the level of migrating to `create-react-class`?\r\n\r\nOoops, I get ticket #9999  :D","state":"open","updated_at":"2023-06-15T18:25:06Z","created_at":"2017-06-19T05:50:17Z","creator_user_login":"mondwan"}
{"number":9866,"title":"Add More Cases to Server Rendering Fixture","body":"Server rendering has a lot of quirks that are easy to break. We have a fixture set up for it in [/fixtures/ssr](https://github.com/facebook/react/tree/master/fixtures/ssr).\r\n\r\nThis could be expanded to have more stuff in it. A few things we should have in the fixture and test for:\r\n\r\n- `<input />`, `<select />`, `<option />` and `<textarea />` controlled and uncontrolled. All types of inputs, including dates, numbers etc.\r\n- Where children is a single string/number, children array with multiple string/numbers, children with interleaved nodes and string/numbers.\r\n- Event handlers on hydrated nodes that does something useful when clicked. Reused event handlers on multiple different nodes etc.\r\n- onLoad event handlers.\r\n- Special properties that don't map directly to attribute names like `className`.\r\n- `<div hidden>...</div>` subtrees. (Subtrees with the \"hidden\" attribute set on it. Tests deprioritization.)\r\n\r\nWe probably need some on-screen options to turn on/off these things in the test suite to test under these conditions:\r\n\r\n- Server and Client differences. Turn on a flag that makes the server and client differ in minor ways.\r\n- Async hydration. Use Fiber's async features to hydrate the tree.\r\n- Defer hydration for some time. This is useful to test slow loading conditions where the user may have changed state of form controls before hydration. When combined with async, it can make the async rendering artificially slow. It should reveal issues such as a patching or event handlers being attached too early (before commit phase).\r\n\r\nIt's ok to start small. You don't have to do it all at once.","state":"open","updated_at":"2020-01-08T19:18:57Z","created_at":"2017-06-06T17:31:30Z","creator_user_login":"sebmarkbage"}
{"number":9832,"title":"Error when `__source` is provided to production build","body":"Currently if the `__source` transform is enabled together with the production build there are no indicators of a poorly performant configuration. https://facebook.github.io/react/ even has it.\r\n\r\nWe already check for the [existence of a `__source` field](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElement.js#L203). So we can just reuse the same check to issue something in prod mode if it exists.\r\n\r\nThe problem is that we don't have any warning module in prod and it is unclear if it would get attention or even considered to spammy in prod.\r\n\r\nWe could throw but that might be too extreme since a misconfiguration would kill the site.\r\n\r\nWe could also use this to set a flag on the `__REACT_DEVTOOLS_GLOBAL_HOOK__` object. The icon in the devtools extension could use this to indicate a misconfigured build.","state":"open","updated_at":"2020-01-08T19:18:57Z","created_at":"2017-06-01T20:48:02Z","creator_user_login":"sebmarkbage"}
{"number":9657,"title":"[RFC] onChange -> onInput, and don't polyfill onInput for uncontrolled components","body":"`onChange` is a nicer name for what `onInput` does and the fact that it has propagated up to other high-level components as the default name is much nicer than `onInput` as a high level event name.\r\n\r\nGenerally it has been helpful for the many new-comers to React that don't know the DOM well (which is a lot more than the inverse). However, that doesn't change the fact that it can be confusing for people that are familiar.\r\n\r\nUnfortunately, changing it now would cause confusion for everyone that already knows React.\r\n\r\nThe reason I'd like to change it now is because I'd like to get away from polyfilling it for __uncontrolled__ components. This use case is filled with all kinds of imperative code which leads to edge cases. E.g. reading/setting `e.target.value` or reading/setting `ref.value`.\r\n\r\nWhen you use __controlled__ components you shouldn't need to touch them imperatively and therefore won't hit the edge cases. Ideally we should get away from reading from `e.target.value` and instead just pass the `value` directly to the event handler.\r\n\r\n## Proposal:\r\n\r\n__Controlled Components__\r\n\r\n- `onInput`: Polyfilled and works like `onChange` does today. It is allowed to over-fire many events even if nothing changed. May have special Fiber rules regarding synchronous flushing. _Optional: Pass `value` as second arg._\r\n- `onChange`: Works like `onInput` for one version but warns about being deprecated and suggests switching to `onInput`. In next version it works like the browser but still warns and tells you to use `onInput` forever.\r\n\r\n_Optional: Add a getter/setter on DOM `.value` in development mode and warn if this is used directly._\r\n\r\n__Uncontrolled Components__\r\n\r\n- `onInput`: Not polyfilled. Works however the browser works. Warns about browser differences if you don't also specify `onClick`, `onKeyDown` and/or `onKeyUp`. The warnings suggests implementing those listeners to cover more edge cases, or switch to a controlled component.\r\n- `onChange`: Not polyfilled. Works however the browser works.\r\n","state":"open","updated_at":"2021-06-29T08:06:22Z","created_at":"2017-05-10T23:47:56Z","creator_user_login":"sebmarkbage"}
{"number":9475,"title":"Seb's Deprecation Wishlist Umbrella","body":"I have a list of breaking changes that I'd like to see because I think they're not strictly necessary features, can often be replaced by other APIs and their very existence makes implementations more constrained, even when they're not used.\r\n\r\nThis list is not meant to be anything we're planning on actively doing. It's just a drop point where I can add things as I think of them.\r\n\r\n- [ ] Shallow freeze the `defaultProps` object and make the `defaultProps` property non-configurable/non-writable after the first `createElement` or `createFactory` call. (Enables inlining/resolution of defaults statically.)\r\n\r\n- [ ] Treat `key`/`ref` as a separate namespace in JSX. Meaning that objects that are spread onto JSX don't transfer `key` and `ref`. Enables inlining of props object even if spread type is unknown. E.g.\r\n\r\n```js\r\nlet x = <Foo {...{key:'bar'}} />;\r\nx.key; // null\r\nx.props.key; // 'bar'\r\nlet y = <Foo key=\"bar\" />;\r\ny.key; // 'bar'\r\ny.props.key; // undefined\r\n```\r\n\r\n- [ ] Drop support for string refs.\r\n\r\n- [ ] Drop support for `ReactDOM.findDOMNode(...)` and `ReactNative.findNodeHandle(...)`. These are slower in Fiber and requires a tree to be materialized/stateful/introspectable at arbitrary times/threads even before we know if this will ever get called. Less automatic cleanup. Could possibly have an alternative API that works more like refs. However, just ref forwarding probably solves all legit use cases better.\r\n\r\n- [ ] Make `.type` and `.props` private on `ReactElement`s so that they can't be introspected (just like bound functions/closures). This makes optimizations like automatic making components asynchronous/synchronous safe or inlining components several levels deep.","state":"open","updated_at":"2020-01-08T19:18:56Z","created_at":"2017-04-21T04:35:44Z","creator_user_login":"sebmarkbage"}
{"number":9402,"title":"A number input will always have left pad 0 though parseFloat value in onChange","body":"**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI have a number input with defalut value 0 and in onChange function I'll parse value to float to avoid invalid input, but I'll always get left pad 0 on input UI. But in previouse version, my code works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n<input type=\"number\" value={this.state.value} onChange={e=>this.setState({value: parseFloat(e.target.value)? parseFloat(e.target.value) : 0})}\r\n\r\n**What is the expected behavior?**\r\nShould not have left pad 0.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact 15.5.3, all browser / all OS. It works in 15.4.2","state":"open","updated_at":"2023-08-29T00:25:24Z","created_at":"2017-04-11T10:54:25Z","creator_user_login":"HaydnChen"}
{"number":9301,"title":"Define specific browser support guidelines","body":"As it stands the only real solid guideline we have for browser support is that we support IE9+. But there are so many other outdated browser versions that are unreasonable to support or worry about.\r\n\r\nIt would be useful if we had more specific guidelines on what browsers we should target. Does Safari on iOS 3 matter? FireFox 4? You get the idea.\r\n\r\nIf we had a well-documented range of browser version that we *know* should work it would make it a lot easier to run through our DOM fixtures in BrowserStack and know we're safe.\r\n\r\nMaybe the internal core team can work internally with analytics to see what browsers Facebook needs to support and work forward from there?\r\n\r\ncc @gaearon @nhunzaker ","state":"open","updated_at":"2017-10-06T12:30:31Z","created_at":"2017-03-31T00:10:28Z","creator_user_login":"aweary"}
{"number":9223,"title":"Compiler Optimization Umbrella","body":"Spinoff from https://github.com/reactjs/react-future/issues/50\r\n\r\nI wanted to create an umbrella task for when we start working on compiler level optimizations. We've had [a tag](https://github.com/facebook/react/issues?q=is%3Aopen+is%3Aissue+label%3A%22Component%3A+Optimizing+Compiler%22) open for a while but these are fairly primitive optimizations. We want to be able to go further.\r\n\r\nI don't think we'll start this project immediately but soon after the Fiber stuff is in place.\r\n\r\n__Compiler Infra__\r\n\r\n- [ ] Base-line cross-module full JavaScript AOT compiler.\r\n- [ ] Compiler infra structure that fits well into existing tooling at FB, Webpack, Rollup based ecosysem etc. Support parallelism and incremental builds.\r\n- [ ] Solve things like what the npm ecosystem should do. Compile before publishing or after? Probably after.\r\n\r\n__Optimizations__\r\n\r\n- [ ] Enable multiple levels of host instances / DOM elements to be managed by a single Fiber. I think this is probably a key requirement for many optimizations. I'm not sure if that Fiber's children will have a single placement point (the parent that they get inserted into) or if it could have multiple insertion points. If it manually does the insertion of its children, then the later would work.\r\n- [ ] Optimizing pure host/DOM elements (\"string\" components). Can be reasoned about at the core compiler level.\r\n- [ ] Inlining pure functional components so that now the result can be reasoned about as a flat component.\r\n- [ ] Basic constant folding for static configuration.\r\n- [ ] Optimizing across component boundaries without inlining.\r\n- [ ] Optimizing stateful functional components.\r\n\r\n__Runtime Optimizations__\r\n\r\n- [ ] Dead-code elimination of library code that isn't needed by a particular application. Such as certain events, controlled components or complex attributes.\r\n\r\n__Stretch Goals__\r\n\r\n- [ ] Computing delta updates after code changes and lets Service Workers update based on that.\r\n\r\nMore to come...","state":"open","updated_at":"2020-01-08T19:19:29Z","created_at":"2017-03-20T16:08:03Z","creator_user_login":"sebmarkbage"}
{"number":9142,"title":"No blur event fired when button is disabled/removed","body":"**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen a focussed button becomes disabled, React does not dispatch a blur event.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n1. Attach a blur event to a button\r\n2. Focus the button\r\n3. Make the button disabled or remove it from the DOM\r\n\r\n**What is the expected behavior?**\r\nA blur event will be dispatched.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.1.0, not sure if it worked in previous versions.\r\n\r\nIsolated test case: http://jsbin.com/fuvite/1/edit?html,css,js,output","state":"open","updated_at":"2023-08-22T05:38:50Z","created_at":"2017-03-09T18:13:08Z","creator_user_login":"OliverJAsh"}
{"number":9128,"title":"Switch to using createFactory in compiler steps","body":"```js\r\nvar Foo = require('Foo');\r\nfunction Bar() {\r\n  return <Foo x={1}>Hi</Foo>;\r\n}\r\n```\r\n\r\nOriginally we intended to compile JSX to this format:\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nvar Foo_ = React.createFactory(Foo);\r\nfunction Bar() {\r\n  return Foo_({ x: 1, children: \"Hi\" });\r\n}\r\n```\r\n\r\nThat allows us to generate a factory that can be more optimized and resolves `defaultProps`.\r\n\r\nThere are some problems with generating an optimized factory in many cases because it can slow down start up. However, if you have an optimizing compiler that can resolve that, we can turn that on in those cases.\r\n\r\nAnother thing we can do is that if the function is a simple functional component then we can just return the functional component itself. So that it becomes just a straight through function call. At least if the element doesn't have a key. (Slight change in semantics but mostly not.)\r\n\r\nAn optimizing compiler or VM (that is aware of the type of \"Foo\" which not known to the Babel transform) can then infer that this function is just a function call and can then proceed to actually inline it.\r\n\r\nFor heavy functions it would be bad to do this though since it can expand the time a render is executed and work against the time slicing mechanism of Fiber.\r\n\r\nTherefore, we might want to use a heuristic to determine if a functional component gets to be \"inlined\" or not. E.g. function length or something.\r\n\r\nA good data point to use in a heuristic is whether the component is part of a loop or a closure (such as being part of a map);\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nfunction Bar({ data }) {\r\n  var children = [];\r\n  for (var i = 0; i < data.length; i++) {\r\n    children.push(<Baz>{data[i]}</Baz>);\r\n  }\r\n  return <Foo x={1}>{children}</Foo>;\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nfunction Bar({ data }) {\r\n  return <Foo x={1}>{data.map(d => <Baz>{d}</Baz>)}</Foo>;\r\n}\r\n```\r\n\r\nWe could change the transform to treat these special and flag them as part of a hot path by calling a special createFactory:\r\n\r\n```js\r\nvar Foo = require('Foo');\r\nvar Baz = require('Baz');\r\nvar Foo_ = React.createFactory(Foo);\r\nvar Baz_ = React.createFactoryHot(Baz);\r\nfunction Bar({ data }) {\r\n  return Foo_({ x: 1, children: data.map(d => Baz_({ children: d })) });\r\n}\r\n```\r\n\r\nThe neat part of this model is that the transform can be pretty simple and readable.\r\n\r\nThe optimization itself is in createFactory and createFactoryHot.\r\n\r\nIt also doesn't have to reason about cross-module transforms. That's all taken care of by the optimizing compiler or VM.","state":"open","updated_at":"2021-04-14T02:44:17Z","created_at":"2017-03-07T03:36:44Z","creator_user_login":"sebmarkbage"}
{"number":9046,"title":"Disabling or destroying event's target stops further event propagation.","body":"Disabling a submit button within a form on `onClick`, stops the event propagation to the forms `onSubmit` handler.\r\n\r\nThe fiddle:\r\n ```\r\nimport React from \"react\";\r\n\r\nclass SomeForm extends React.Component {\r\n    constructor(props){\r\n       super(props)\r\n       this.state = {\r\n          disabled:false\r\n       }\r\n    }\r\n    handleClick() {\r\n        this.setState({\r\n          disabled:true\r\n        });\r\n        console.log(\"Clicked button\");\r\n    }\r\n    handleSubmit(e){\r\n      alert(\"Submitted the form\")\r\n    }\r\n    render() {\r\n        let opts = {};\r\n        opts.disabled = this.state.disabled; // disabling the button stops the event propagation\r\n        \r\n        return (<form onSubmit={this.handleSubmit.bind(this)}>\r\n              <button {...opts} \r\n                type=\"submit\" \r\n                onClick={this.handleClick.bind(this)}>\r\n                Continue\r\n              </button>\r\n         </form>)\r\n    }\r\n}\r\n\r\nReactDOM.render(<SomeForm />, document.getElementById('a'));\r\n```\r\n[JsBin with the live example](http://jsbin.com/kidabifono/1/edit?js,output)\r\n\r\nExpected behavior: The event gets propagated unless explicitly swallowed via `e.preventDefault() && e.stopPropagation()`\r\n\r\n**React version:** 15.4.2\r\n**Browser:** Chrome 56.0.2924.87 x64\r\n\r\nUnfortunately I cannot tell if this happens with older versions.","state":"open","updated_at":"2017-10-04T18:08:51Z","created_at":"2017-02-22T16:39:52Z","creator_user_login":"cristian-eriomenco"}
{"number":9023,"title":"event.preventDefault in click handler does not prevent onChange from being called","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug!\r\n\r\n**What is the current behavior?**\r\n\r\nWhen rendering an `input` element of type `checkbox` with an `onClick` and `onChange` handler, `onChange` is still called even though `event.preventDefault()` is called in the `onClick` handler.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nhttp://jsfiddle.net/rf3w7apc/\r\n\r\n**What is the expected behavior?**\r\n\r\nCalling `event.preventDefault` in the `onClick` handler should prevent the default action  from occurring (or undo its effect), which is to update the value of the `input` element. This should stop any `change` event listener from being invoked. See https://jsfiddle.net/L1eskzsq/ for expected behavior\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested using a build from master, macOS 10.12.2, verified in:\r\n\r\n* Chrome  56.0.2924.87 (64-bit)\r\n* Firefox 51.0.1 (64-bit)\r\n\r\nSafari 10.0.2 calls the `change` event listener in both cases.\r\n","state":"open","updated_at":"2020-11-30T10:13:00Z","created_at":"2017-02-17T18:31:19Z","creator_user_login":"aweary"}
{"number":8938,"title":"Clear button on iOS date input does not return correct event value","body":"**Bug**\r\nFor iOS only.\r\nWhen pressing `clear` on a date input, the `onChange` event is fired but` event.target.value` is showing the original value rather than an empty string.\r\n\r\n**What is the current behavior?**\r\nOn Chrome and Android, when the clear button is pressed the onChange event has a value of `''`.\r\nOn iOS when the clear button is pressed the onChange event has a value of `previousValue`.\r\n\r\n**Demo**\r\nhttps://output.jsbin.com/zojuteloto/5/\r\nTry on Chrome/Android. Then on iOS.\r\n\r\n**What is the expected behavior?**\r\nValue should be returned an an empty string.\r\n\r\n**Versions**\r\nAffects React 15+ & iOS 10. Unsure of previous versions.\r\n","state":"open","updated_at":"2022-02-09T09:49:20Z","created_at":"2017-02-07T01:29:52Z","creator_user_login":"ro-savage"}
{"number":8733,"title":"[Fiber] Should we clear an error boundary's update queue whenever it captures an error?","body":"Seems like we should at least do this on the root.","state":"open","updated_at":"2020-01-08T19:19:27Z","created_at":"2017-01-10T08:32:00Z","creator_user_login":"acdlite"}
{"number":8514,"title":"Undo behavior in controlled textareas works differently from the default behaviour in chrome","body":"If you control a textarea with **value**, it behaves differently when you use undo. When the textarea is controlled, you can only undo one letter at a time. This is not how undo works normally with an uncontrolled component. Undo seems to work as expected with input components.\r\n\r\nWith a controlled textarea component, you can only undo one letter at a time. The normal undo works with some kind of algorithm for how much is going to be un- or redone.\r\n\r\nYou can try the difference in this codepen:\r\n\r\nhttps://codepen.io/fabsor/pen/LbmBOv\r\n\r\nTested with React 15.3.1 and Chrome 54 and Chrome Canary. Works as expected in Firefox and Safari. It might be a Chrome bug?","state":"open","updated_at":"2020-09-30T02:44:24Z","created_at":"2016-12-07T12:33:02Z","creator_user_login":"fabsor"}
{"number":8012,"title":"[Fiber] Formalize States","body":"In Fiber there are a number of states that a component can be in. However, it is not formalized in the code right now. Instead, the state is inferred. This leads to hard to follow code. Instead we can organize the code in terms of explicit states - which is what the original prototype did.\n\nBefore componentDidMount (i.e. `current === null`):\n- Never begun.\n- Have been begun before but never completed.\n- Have been completed before, not committed, but hasn't begun this time around.\n- Begun but not yet completed.\n- Completed but not yet committed.\n\nAfter componentDidMount (i.e. `current !== null`):\n- Haven't begun an update yet\n- Have been begun before but never completed.\n- An update have been completed before, not committed, but hasn't begun this update.\n- Begun update but not yet completed.\n- Completed update but not yet committed.\n\nThe \"children\" set of a component also have some states:\n- Never reconciled.\n- The current set last committed.\n- A previously reconciled set that hasn't committed yet.\n","state":"open","updated_at":"2020-01-08T19:19:27Z","created_at":"2016-10-19T05:13:46Z","creator_user_login":"sebmarkbage"}
{"number":7901,"title":"Bypass synthetic event system for Web Component events","body":"To use a Web Component in React, you must directly attach an event listener to the React ref for that WC. We could change the implementation so that when React detects a custom element (tag names with dashes, like `my-component`), it will bypass the synthetic event system (and the whitelist) and just attach the event listener on the element itself.\n\nWhy bypass the synthetic event system? Because _anyway_ we already need to bypass it manually when using a Web Component. I'm not so familiar with the React codebase, but this naive approach seems to work. Whoever uses Web Components in React can be responsible for whatever downsides that would cause, maybe in performance, I don't know. They are already having those (supposed) downsides, this issue is just about the convenience of WC usage inside React.\n\nI was about to send a PR for this, but thought of opening an issue. I looked through the issues and didn't see any existing one related to the handling of WC events.\n\n**What is the current behavior?**\n\nA WC custom event (e.g. `flipend`) must be handled by attaching the event listener directly to the element in componentDidMount using a ref.\n\nhttp://jsbin.com/yutocopasu/1/edit?js,output\n\nReact v15.1.0\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  componentDidMount() {\n    this.refs['foo'].addEventListener('flipend', ev =>\n      this.handleFlipend(ev);\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\n**What is the expected behavior?**\n\nA WC custom event can be handled with `onMyEvent={ev => this.handleMyEvent(ev)}` on the ReactElement corresponding to the WC.\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox onFlipend={ev => this.handleFlipend(ev)} class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\nPS: this snippet above still has the `ref`, but for unrelated reasons. Ideally we wouldn't need refs for handling events of WCs.\n","state":"open","updated_at":"2022-07-27T09:12:44Z","created_at":"2016-10-06T19:27:26Z","creator_user_login":"staltz"}
{"number":7769,"title":"input autoFocus causes focus to be emitted before ref","body":"https://jsfiddle.net/nnwd2c34/\n\nCan reproduce on Chrome, but not in IE11.\n","state":"open","updated_at":"2019-06-18T12:33:12Z","created_at":"2016-09-19T20:56:27Z","creator_user_login":"syranide"}
{"number":7711,"title":"[bug] click not disabled on <fieldset disabled><button onClick={() => alert('clicked')}><span>click me</span></button></fieldset>","body":"**bug**\n\nIn the following\n\n``` jsx\nconst Component = () =>\n        <fieldset disabled>\n            <button\n              onClick={() => alert('clicked by React')}\n            >click me here and <span style={{color: 'red'}}>here</span></button>\n        </fieldset>;\n```\n\nclicking on `click me here and` will not trigger `alert('clicked by React')` whereas clicking on the red `here` will trigger `alert('clicked by React')`.\n\nDemo: https://jsfiddle.net/ropbvL3y/\n\nThanks for React, it's an incredibly well designed tool.\n","state":"open","updated_at":"2021-08-25T15:44:55Z","created_at":"2016-09-13T11:28:53Z","creator_user_login":"brillout"}
{"number":7387,"title":"Attach Stack at setState Calls in DEV Mode","body":"We have a queue for state transitions. There is a natural place for a `new Error()` stack frame to be stored there.\n\nWe could use this information to work our way back from errors to show information about which `setState` call was the source of the error.\n\nBecause of batching, it is not always possible to make the correct attribution. It could be one of several possible sources.\n\n(Specifically I'd like to use this in Fiber when the starvation protection kicks in. We can show which state transition was kept getting deferred due to higher priority work.)\n","state":"open","updated_at":"2020-01-08T19:19:56Z","created_at":"2016-07-31T19:52:24Z","creator_user_login":"sebmarkbage"}
{"number":7328,"title":"IE 11 and Edge no longer prompt to remember password on controlled form","body":"**Do you want to request a _feature_ or report a _bug_?**\nBug (regression) IE/Edge\n\n**What is the current behavior?**\nOn React > v15.2.0, Edge and IE11 do not prompt the user to save the password for the form\n\n**Steps to reproduce**\nWith react 15.1.0:\nhttps://jsfiddle.net/69z2wepo/49876/\nWith React 15.2.0:\nhttps://jsfiddle.net/69z2wepo/49877/\n\n**What is the expected behavior?**\nThe browser prompts the user to save their password for the form\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact > 15.2.0. It worked in React 15.2.0\nIE 11, Edge\n","state":"open","updated_at":"2018-08-29T23:50:29Z","created_at":"2016-07-21T12:26:25Z","creator_user_login":"lPadier"}
{"number":7324,"title":"Optimizing Compiler: Compiling to Internals","body":"This optimization is a renderer specific optimization. It is about knowing how React will process a particular component in its internals and then inlining that internal work into the user code.\n\nIt comes in two flavors.\n# Known Host Component\n\n``` js\nfunction Foo(props) {\n  if (props.data.type === 'img') {\n    return <img src={props.data.src} className={props.className} />;\n  }\n  return <span className={props.className}>{props.children}</span>;\n}\n```\n\nInto this:\n\n``` js\nfunction Foo_optimizedMount(props) {\n  if (props.data.type === 'img') {\n    var img = document.createElement('img');\n    img.className = props.className;\n    img.src = props.data.src;\n    return {\n      node: img,\n      listeners: ReactEventListeners.trap(img, 'error', 'load')\n    };\n  }\n  var span = document.createElement('span');\n  span.className = props.className;\n  var children = ReactChildren.mountNestedChildrenIntoParent(this.props.children, span);\n  return { node: span, children };\n}\n\nfunction Foo_optimizedUpdate(instance, oldProps, newProps) {\n  if (oldProps.data.type !== newProps.data.type) {\n    Foo_optimizedUnmount(instance);\n    return Foo_optimizedMount(newProps);\n  }\n  if (props.data.type === 'img') {\n    img.className = props.className;\n    img.src = props.data.src;\n    return instance;\n  }\n  span.className = props.className;\n  ReactChildren.updateNestedChildrenInParent(this.props.children, instance);\n  return instance;\n}\n\nfunction Foo_optimizedUnmount(instance) {\n  if (oldProps.data.type !== newProps.data.type) {\n    Foo_optimizedUnmount(instance);\n    return Foo_optimizedMount(newProps);\n  }\n  if (props.data.type === 'img') {\n    ReactEventListeners.release(instance.listeners);\n  }\n  ReactChildren.unmountNestedChildrenInParent(instance);\n}\n```\n# Composite Components\n\nSimilarly, composite components can pick different code branches to imperatively update its children. For example, a known constant value wouldn't be considered, and comparison of a single property can potentially bail out a tree.\n\nAlthough it is unclear if this has significant benefits over these two other optimizations:\n\nhttps://github.com/facebook/react/issues/3227\nhttps://github.com/facebook/react/issues/7323\n","state":"open","updated_at":"2020-01-08T19:19:56Z","created_at":"2016-07-21T00:42:29Z","creator_user_login":"sebmarkbage"}
{"number":7323,"title":"Optimizing Compiler: Component Folding","body":"This is like the final frontier for React but I never really wrote anything about it so I figured I'd create an issue.\n\nBasically, the idea is to utilize information about how React works to do [constant folding](https://en.wikipedia.org/wiki/Constant_folding) and [inlining](https://en.wikipedia.org/wiki/Inline_expansion) of components under certain conditions.\n\nExample Source:\n\n``` js\nfunction Foo(props) {\n  if (props.data.type === 'img') {\n    return <img src={props.data.src} className={props.className} alt={props.alt} />;\n  }\n  return <span>{props.data.type}</span>;\n}\nFoo.defaultProps = {\n  alt: \"An image of Foo.\"\n};\n```\n\n``` js\nvar CSSClasses = {\n  bar: 'bar'\n};\nmodule.exports = CSSClasses;\n```\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\n```\n\nBy knowing what Foo and Classes is made up of, we can turn the Bar component into this:\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\n[Dead-code elimination](https://en.wikipedia.org/wiki/Dead_code_elimination) then strips it down to just:\n\n``` js\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\nNow there are a bunch of different cases where this needs to bail out. For example, we need to know that the `CSSClasses` object and the `defaultProps` object is immutable, or we need to infer that it is immutable using [Escape analysis](https://en.wikipedia.org/wiki/Escape_analysis).\n\nWith classes these bail out cases are even more complex.\n\nThe problem is that current JS infrastructure is particularly bad at this kind of whole program or whole package linking. Node doesn't have a notion of per package private modules so anything can mutate anything by default. Transpilers such as Babel are set up to work on a single file at a time. They don't have access to the source of other files to do this analysis. [Rollup](https://github.com/rollup/rollup) is closer but is limited to a small set of static primitives.\n\nHowever, once smarter compilers become more prevalent in the JS world or we find ways to hack around the limitations, we can start building out more of these smarter compiler optimizations.\n","state":"open","updated_at":"2020-06-09T03:09:06Z","created_at":"2016-07-21T00:21:56Z","creator_user_login":"sebmarkbage"}
{"number":7249,"title":"Attributes and properties for Custom Components","body":"**Do you want to request a _feature_ or report a _bug_?**\nFeature\n**What is the current behavior?**\nCustom component's properties are always set as attribute.\n**What is the expected behavior?**\nMaybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.\n","state":"open","updated_at":"2022-01-09T08:09:11Z","created_at":"2016-07-12T10:19:46Z","creator_user_login":"edoardocavazza"}
{"number":7221,"title":"Consider exposing an opaque component path somehow","body":"This is something I've thought about in regard to focus, hover and selection.\n\nIf you implement hover as a top level state value with the currently hovered root component as `hoverID: component` and currently focused component as `focusID: component`.\n\nNow anything in between gets rerendered and can respond to those things changing. However, that also means that everything gets rerendered. Not just the previous and next path.\n\nThe ideal would be that you store the path to that component, or extract the path from internal state.\n\nThat way we can quickly rerender only the previous and next path, while still letting anything in between react to focus/hover changing.\n\nMaybe this is more generally useful.\n\nSelection is a bit special because it might need to rerender anything in between two paths but that can also be optimized similarly - by checking if any child node corresponds to a start and end path and anything between is selected or unselected.\n","state":"open","updated_at":"2020-01-08T19:19:55Z","created_at":"2016-07-07T22:29:20Z","creator_user_login":"sebmarkbage"}
{"number":7135,"title":"onMouseEnter propagation in double reactroot","body":"I think it is bug\r\n\r\nNow onMouseEnter event handler calls in child element when there are several reactroots. \r\n\r\nTo reproduce - run fiddle and move mouse from white square to red and back. In console you can see log when you do it. Link - https://jsfiddle.net/47sn3j5c/ . It works wrong.\r\n\r\nExpected behavior: handler has to call just when mouse enter to red square. See here simiar example but with one reactroot - https://jsfiddle.net/bs3rc2wp/1/ . It works right.\r\n\r\nReact 15.1.0\r\n","state":"open","updated_at":"2019-10-20T11:39:57Z","created_at":"2016-06-28T04:08:47Z","creator_user_login":"dsvgit"}
{"number":6951,"title":"Changing state in onFocus and onChange for a select multiple element does not work in Firefox","body":"I want to use a controlled `<select multiple={true} />` component in React. In addition to the value I also want to keep the focused state of the select in the state. To do this, I update the state with `setState` in the `onChange`, `onFocus` and `onBlur` event handlers. Unfortunately there is an issue in Firefox: Firefox will only update the value on a change event after the select has gained focus. This means that a user has to click twice on the select element to change its value when it does not have focus. I would expect the select to gain focus and change the value at the same click.\n\nI created a jsFiddle to demonstrate the prolem: [React select multiple issue in Firefox demonstration](https://jsfiddle.net/fugf1kw9/2/)\n\nI only see this problem in Firefox and with select multiple. In IE and Chrome it is working as expected, and in Firefox it is working as expected for other form elements (simple select, checkbox, radio, text input, textarea).\n\nMy environment:\n- Firefox 46.0.1 under Win7 x64\n- React 15.1.0\n","state":"open","updated_at":"2021-02-12T12:37:27Z","created_at":"2016-06-02T12:57:36Z","creator_user_login":"skleeschulte"}
{"number":6807,"title":"onMouseLeave doesn't work if the node gets detached","body":"I have a problem with this kind of component:\n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <span>[OPTION1] show after onMouseEnter</span>\n          ) : (\n            <div>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n\nNotice that the first option1 is a `span`, option2 is a `div`.\n\nThis works fine when I move the mouse slowly.\nThough, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.\n\nIt is always working though, if both options have the same tag (if both are `div` or both are `span`). \n\nEDIT:\nI think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues. \n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <div key={Math.random()}>[OPTION1] show after onMouseEnter</div>\n          ) : (\n            <div key={Math.random()}>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n","state":"open","updated_at":"2022-12-19T06:44:08Z","created_at":"2016-05-19T16:10:59Z","creator_user_login":"ghost"}
{"number":6683,"title":"RFC: Configure Warning Levels Using ENV Variable","body":"Would it be feasible to specify the version of warnings you want through a static environment variable?\n\nThat would silence new warnings so that you can safely update minor versions without worrying about warning spew.\n\nDynamic configuration creates stateful shared module dependencies which we're very close to getting rid of for the isomorphic package (ReactCurrentOwner being the last one).\n","state":"open","updated_at":"2020-01-08T19:19:55Z","created_at":"2016-05-02T23:17:24Z","creator_user_login":"sebmarkbage"}
{"number":6541,"title":"Iframe load event not firing in Chrome and Safari when src is 'about:blank'","body":"See: https://jsfiddle.net/pnct6b7r/\n\nIt will not trigger the alert in Chrome and Safari, but it will work in Firefox and even IE8.\n\nIs this a React issue or Webkit issue? If it is a Webkit issue, should we \"fix it\" in React given that we want [consistent events across browsers](http://facebook.github.io/react/docs/events.html)?\n\nps: The JSFiddle was based on the isuse #5332.\n","state":"open","updated_at":"2022-10-26T12:19:31Z","created_at":"2016-04-18T14:35:13Z","creator_user_login":"pirelenito"}
{"number":6436,"title":"Support Passive Event Listeners","body":"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n","state":"open","updated_at":"2020-08-19T14:35:25Z","created_at":"2016-04-07T18:42:47Z","creator_user_login":"sebmarkbage"}
{"number":6325,"title":"Consider Special Casing Certain DOM Attributes to Accept Elements","body":"The use case is for example, translation components rendering string content.\n\nThe HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.\n\nSince we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.\n\nThat would probably have to go in after we figure out a way to render strings at the root of a React composite component.\n","state":"open","updated_at":"2022-10-24T10:35:20Z","created_at":"2016-03-23T21:52:14Z","creator_user_login":"sebmarkbage"}
{"number":6284,"title":"Form input name='nodeName' breaks onSubmit event handling","body":"It happened that I stumbled on following edge case. If you add `name='nodeName'` attribute to form's _input_, at some point of React event handling (`ChangeEventPlugin.js: shouldUseChangeEvent()`) it will call: `elem.nodeName && elem.nodeName.toLowerCase()`, but coincidentally `nodeName` property refers to _input_ and invocation fails.\n\nHere's a [jsFiddle example](https://jsfiddle.net/tLd7xvwc/)\n","state":"open","updated_at":"2020-04-16T02:43:04Z","created_at":"2016-03-17T12:58:47Z","creator_user_login":"insonifi"}
{"number":6217,"title":"onResponderGrant called before onResponderTerminate","body":"When a responder captures the active responder, it seems that `onResponderTerminate` is not called until after `onResponderGrant`. This seems like the wrong thing to do. Are there reasons for this behavior?\n","state":"open","updated_at":"2017-11-21T14:12:50Z","created_at":"2016-03-08T18:46:34Z","creator_user_login":"aleclarson"}
{"number":5700,"title":"DataTransfer's dropEffect not working on IE/Edge with not minified version react.js","body":"code exmaple: [Non-minified version](https://jsfiddle.net/sy7eja68/) and [Minified version](https://jsfiddle.net/sy7eja68/1/)\n\nBoth have the same code, html and js, the only difference is referenced to different version of react.js files.\n\nThere are three boxes.  Dragging the \"**drag me**\" box will show a \"**start**\" at the top, then show a \"**over**\" if it is dragged over either \"**normal drop**\" or \"**drop react**\" box, and show a \"**end**\" with a drop to the two drop boxes.\n\nEverything works fine on my Firefox(43.0.1), and the the [Minified version](https://jsfiddle.net/sy7eja68/1/) works fine on my IE 11, and Edge(13).\n\nThe only thing dose not work is the  [Non-minified version](https://jsfiddle.net/sy7eja68/) on IE/Edge.\n\nWhen dragging over the  \"**drop react**\" box, there shows **NO** \"over\".  In the F12 console, I can see lines of \"`SCRIPT16389: Unspecified error.`\". And with `console.log(ev.dataTransfer)`, I get this result: \n\n```\n[object DataTransfer] {\n   dropEffect: <Permission denied>,\n   effectAllowed: \"all\",\n   files: FileList {...}, \n   items: DataTransferItemList {...}, \n   types: DOMStringList {...}\n}\n```\n\nI thought the `dropEffect` should also be accessible on IE/Edge with non-minified version react.js files?\n","state":"open","updated_at":"2022-08-27T21:55:57Z","created_at":"2015-12-21T16:28:31Z","creator_user_login":"srayuws"}
{"number":4751,"title":"Play Nicely with The DOM Event System (because it's legacy anyway)","body":"Currently React implements its own plugin system and event bubbling rules. This is important for systems like the responder system since the DOM event system is incapable of implementing proper event negotiation support.\n\nHowever, on desktop, we don't really take full advantage of our custom event system other than to polyfill mouseenter/leave and implement more bubbling.\n\nThere are plenty of other things that are wrong with the DOM but instead of patching it, maybe it would be better to build a new view system on top of the DOM that integrates with the custom event system. Similarly to how React Native handles things.\n\nThat way, the lowest level could just do what the DOM would do, however broken it may be.\n\nQuestion though: How do we handle things like onChange?\n\ncc @spicyj and @syranide since I know you always wanted this.\n","state":"open","updated_at":"2020-01-08T19:20:27Z","created_at":"2015-09-01T02:25:32Z","creator_user_login":"sebmarkbage"}
{"number":4595,"title":"Externalize the State Tree (or alternatives)","body":"React provides the notion of implicitly allowing a child component to store state (using the `setState` functionality). However, it is not just used for business logic state. It is also used to remember DOM state, or tiny ephemeral state such as scroll position, text selection etc. It is also used for temporary state such as memoization.\n\nThis is kind of a magic black box in React and the implementation details are largely hidden. People tend to reinvent the wheel because of it, and invent their own state management systems. E.g. using Flux.\n\nThere is still plenty of use cases for Flux, but not all state belongs in Flux stores.\n\nManually managing the adding/removing of state nodes for all of this becomes a huge burden. So, regardless you're not going to keep doing this manually, you'll end up with your own system that does something similar. We need a convenient and standard way to handle this across components. This is not something that should be 100% in user space because then components won't be able to integrate well with each other. Even if you think you're not using it, because you're not calling setState, you still are relying on the capability being there.\n\nIt undermines the ecosystem and eventually everyone will reconverge on a single external state library anyway. We should just make sure that gets baked into React.\n\nWe designed the state tree so that the state tree data structure would be opaque so that we can optimize the internals in clever ways. It blocks many anti-patterns where external users breaks through the encapsulation boundaries to touch someone else's state. That's exactly the problem React's programming model tries to address.\n\nHowever, unfortunately this state tree is opaque to end users. This means that there are a bunch of legitimate use cases are not available to external libraries. E.g. undo/redo, reclaiming memory, restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.\n\nWe could provide a standard externalized state-tree. E.g. using an immutable-js data structure. However, that might make clever optimizations and future features more difficult to adopt. It also isn't capable of fully encapsulating the true state of the tree which may include DOM state, it may be ok to treat this state differently as a heuristic but the API need to account for it. It also doesn't allow us to enforce a certain level of encapsulation between components.\n\nAnother approach is to try to add support for more use cases to React, one-by-one until the external state tree doesn't become useful anymore. I've created separate issues for the ones we we're already planning on supporting:\n#4593 Debugger Hooks as Public API\n#4594 Hibernating State (not the serialized form)\n\nWhat else do we need?\n\nPinging some stake holders:\n\n@leebyron @swannodette @gaearon @yungsters @ryanflorence\n","state":"open","updated_at":"2020-02-03T21:23:59Z","created_at":"2015-08-10T20:32:19Z","creator_user_login":"sebmarkbage"}
{"number":4594,"title":"Hibernating State (Not Necessarily Serialized)","body":"Relay and others currently abuses some internals to get some persistent identity of a component. This effectively is used to restore the state of a component after it has been temporarily unmounted. It is also common to abuse Flux stores for this use case. Basically, since this capability doesn't currently exists, you're encouraged to use Flux for everything just in case you need this capability later on.\n\nThe purpose of this issue is to discuss a public API for hibernating the state of a component and then restoring it once the component remounts.\n\nThe use cases can be broken down into three scenarios:\n- **List Item Out of View**:  E.g. Infinite scrolling (such as \"table views\") where one row eventually needs to be reclaimed to save the memory used by the tree that is out of view.\n- **Detail View**: In a master-detail view, clicking one item in the list switches the state of the detail view. When you click on the original view again.\n- **Back/Forward Button**: You want to save a snapshot of the state when you navigate. The new view can then change the state and when you hit the back button to return to a previous state, you want to restore the original state of the subtree.\n\nWe would like to support this at least in a non-serialized form. You could imagine having an API that serializes this to JSON or some other data structure too but that's a potential follow up and not necessarily part of this.\n\nOne potential API:\n\n``` js\nclass View {\n  state = { stateKeys: [{}, {}, {}] }\n  render() {\n    return <ChildView key={this.state.stateKeys[this.props.index]} />;\n  }\n}\n```\n\nBasically, an object is used as a key. Unlike the normal key semantics, the state of the subtree is kept in memory indefinitely. We use a WeakMap to keep the state. If the object ever goes away, the GC will collect the state of that subtree. This solves all three use cases.\n","state":"open","updated_at":"2020-01-08T19:20:27Z","created_at":"2015-08-10T20:09:41Z","creator_user_login":"sebmarkbage"}
{"number":4593,"title":"Include DevTools as Public API","body":"The idea is to have a multi-version extension that allow you to attach a \"debugger\" to a running React instance. This debugger protocol injects intercepted functions into a particular version of React which exposes development hooks.\n\nEffectively this: https://github.com/facebook/react-devtools/tree/devtools-next/backend/integration\n\nThis is not intended to expose stateful reflection APIs in production use since it will negatively affect performance.\n","state":"open","updated_at":"2020-01-08T19:20:26Z","created_at":"2015-08-10T19:13:05Z","creator_user_login":"sebmarkbage"}
{"number":4166,"title":"Use Inline Event Handlers for trapBubbledEventsLocal and the iOS Safari Click Hack","body":"We currently do a lot of work at the end of mount to find all the nodes and attach listeners after the fact. This is severely impacting initial rendering performance of `<form />`, `<img />` and click handlers.\n\nInstead we can just use inline event handlers in the innerHTML string. For the iOS Safari hack it should be trivial. The handler doesn't even have to do anything.\n\nThe inline event handler would need to either redispatch the event, or call into some other event handler system. Probably a global listeners.\n\n``` js\nwindow._handleReactEvent = ...;\n```\n\n``` html\n<img onload=\"_handleReactEvent(event)\">\n```\n\nSince there could potentially be multiple Reacts, they should probably chain the handler if there already is one registered. (Although multiple Reacts in the same document is already pretty broken in this regard.)\n\nIt doesn't have to be a global. Since inline event handlers gets the element added as a `with(element)` scope around itself. It is equivalent to add it to the prototype:\n\n``` js\nElement.prototype._handleReactEvent = ...;\n```\n\nor\n\n``` js\nHTMLImgElement.prototype._handleReactEvent = ...;\n```\n\nThis makes them a bit more hidden, unobtrusive.\n\nWe still need to render this string for server-side rendering to avoid needing to change the HTML or wire up handlers after-the-fact on the client.\n\nSince these events can fire before React has loaded, we need to check for the existence of the handler before it is used.\n\n``` js\n<img onload=\"this._handleReactEvent&&_handleReactEvent(event)\">\n```\n\nIt is critical that this string is short - for innerHTML string concat performance and network performance. Yet it needs to be unlikely to collide with anything else.\n\nIs there a unicode character we could use?\n","state":"open","updated_at":"2020-01-08T19:20:56Z","created_at":"2015-06-18T05:00:09Z","creator_user_login":"sebmarkbage"}
{"number":3965,"title":"Support for reparenting","body":"When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.\n\nFor example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.\n\n``` jsx\nrender() {\n    var blockA = <div>AAA</div>,\n        blockB = <div>BBB</div>;\n\n    if ( this.props.layoutA ) {\n        return <div>\n            <div className=\"something\">{blockB}</div>\n            <div className=\"something\">{blockA}</div>\n        </div>;\n    } else {\n        return <div>\n            {blockA}\n            {blockB}\n        </div>;\n    }\n}\n```\n\nBecause the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.\n\nI understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.\n\nBut I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.\n\nNote that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.\n\nI understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.\n","state":"open","updated_at":"2021-08-02T19:04:51Z","created_at":"2015-05-27T12:14:07Z","creator_user_login":"dantman"}
{"number":3926,"title":"Change event fires extra times before IME composition ends","body":"### Extra details\r\n\r\n* Similar discussion with extra details and reproducing analysis: https://github.com/facebook/react/issues/8683\r\n* Previous attempt to fix it: https://github.com/facebook/react/pull/8438 (includes some unit tests, but sufficient to be confident in the fix)\r\n\r\n------\r\n\r\n### Original Issue\r\n\r\n\r\nWhen I was trying this [example](https://jsfiddle.net/reactjs/n47gckhr/light/) from https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, any Chinese characters inputted by Chinese pinyin input method would fire too many renders like:\r\n\r\n![screen shot 2015-05-21 at 14 04 36](https://cloud.githubusercontent.com/assets/1091472/7742565/2c8625b0-ffc3-11e4-8ac2-d7eb22a3aef3.png)\r\n\r\nActually I would expect those not to fire before I confirm the Chinese character.\r\n\r\nThen I tried another kind of input method - wubi input method, I got this:\r\n\r\n![screen shot 2015-05-21 at 14 17 15](https://cloud.githubusercontent.com/assets/1091472/7742657/42c27bac-ffc4-11e4-8a3a-7d4550e88a59.png)\r\n\r\nIt's weird too. So I did a test [in jQuery](http://jsbin.com/yepogahobo/1/edit?html,js,console,output):\r\n\r\n![screen shot 2015-05-21 at 14 05 12](https://cloud.githubusercontent.com/assets/1091472/7742591/71da6842-ffc3-11e4-9d7a-a8438721029c.png)\r\n\r\nOnly after I press the space bar to confirm the character, the `keyup` event would fire.\r\n\r\nI know it might be different between the implementation of jQuery `keyup` and react `onChange` , but I would expect the way how jQuery `keyup` handles Chinese characters instead of react's `onChange`.\r\n","state":"open","updated_at":"2023-06-08T02:21:55Z","created_at":"2015-05-21T06:30:30Z","creator_user_login":"chenxsan"}
{"number":3227,"title":"Optimizing Compiler: Tagging ReactElements","body":"We can make more optimized reconciliation by tagging ReactElements with the \"hidden class\" of their props.\n\nFor example, this is guaranteed to always have three props: `className`, `width`, `children`.\n\n``` javascript\n<div className=\"foo\" style={{ width: w, height: 100 }}>{c}</div>\n```\n\nIf we could tag every element with these properties with a unique ID:\n\n``` javascript\n{ __t: 7, type: 'div', props: { className: 'foo', style: { width: w, height: 5 }, children: c } }\n```\n\nThen we could use the hidden class to generate an optimized diffing algorithm for these instead of iterating over the properties. Presumably, we would only need to do this for `type: <string>` since we only diff native components.\n\nBonus points if we can determine which properties are constant. Perhaps using a property descriptor object:\n\n``` javascript\n// Constant properties are annotated as 1, other properties are excluded and inferred by props.\nvar t = { className: 1, style: { height: 1 } };\n{ __t: t, type: 'div', props: { className: 'foo', style: { width: w, height: 5 }, children: c } }\n```\n\nWe would use a heuristic inside React to determine when to create an optimized differ. For example, after 10+ updates to the same component. Just like a JIT would do.\n\n``` javascript\nif (oldElement.__t === newElement.__t) {\n  numberOfUpdates++;\n} else {\n  numberOfUpdates = 0;\n}\n\nif (numberOfUpdates === 10) {\n  optimizedDiffer = generateOptimizedDiffer(newElement);\n  optimizedDiffer(oldElement, newElement);\n} else if (numberOfUpdates > 10) {\n  optimizedDiffer(oldElement, newElement);\n} else {\n  manualDiffing(oldElement, newElement);\n}\n```\n","state":"open","updated_at":"2020-01-08T19:20:55Z","created_at":"2015-02-22T03:21:18Z","creator_user_login":"sebmarkbage"}
{"number":2193,"title":"getEventKey implementation inconsistent with DOM3 spec / Firefox implementation","body":"There are some inconsistencies between `getEventKey` and the DOM3 keyboard event spec (as well as what Firefox has implemented):\n- `key` property is not correctly set for printable characters on `keydown` and `keyup` events. This works properly in Firefox, and my interpretation of the standard is that Firefox's behaviour is correct here. From the spec: _If the key generates a printable character, and there exists an appropriate Unicode code point, then the KeyboardEvent.key attribute must be a string consisting of the char value of that character._\n- Enter key only fires keydown in Firefox, but fires both keydown and keypress in Chrome. This should be consistent across browsers\n- CapsLock key only fires keydown when it is toggled on. When caps lock is toggled from on to off, no keydown event is fired (this may be a browser limitation in Chrome)\n\nRepro: Test this page in Firefox and compare the result to Chrome: http://jsfiddle.net/63ycmLhe/1/\n","state":"open","updated_at":"2018-06-25T18:11:25Z","created_at":"2014-09-15T04:41:21Z","creator_user_login":"Daniel15"}
{"number":1791,"title":"Add api for focus management","body":"There are currently a couple of problems with focus management in React.\n## current problems\n- `this.getDOMElement().focus()`\n\ndoes not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render().\n- `this.refs.x.getDOMElement().focus()`\n\ndoes not guarantee that x has finished any pending renders. if `x` renders, focus is lost.\n- `componentDidUpdate`\n\nthis fires on the child nodes before parents so in the case of:\n\n```\n<ul style=\"display:none\">\n  <li><button>can't focus</button></li>\n</ul>\n```\n\nif we want to show the `<ul/>` and focus the button.\n\nthe component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden.\n## discussion\n\nif looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.\n\nThe issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.\n\nI would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.\n","state":"open","updated_at":"2020-01-08T18:31:17Z","created_at":"2014-07-05T16:05:32Z","creator_user_login":"bmeck"}
{"number":1739,"title":"Support asynchronous server rendering (waiting for data before rendering)","body":"It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n","state":"open","updated_at":"2022-12-26T17:06:33Z","created_at":"2014-06-24T12:36:38Z","creator_user_login":"fdecampredon"}
{"number":1355,"title":"touchmove doesn't fire on removed element","body":"If you have\n\n```\n{this.state.show &&\n  <div onTouchStart={this.hideTheDiv} onTouchMove={...} />}\n```\n\nsuch that the onTouchStart handler removes the div (and maybe replaces it with another one in the same place, useful in certain draggable interactions), the onTouchMove handler doesn't fire because the events of a detached element no longer bubble to document. We should probably bind the touchmove handler when the element receives touchstart instead of delegating to document.\n\nSort of related to #1254.\n\ncc @merbs @eater\n","state":"open","updated_at":"2023-01-23T13:22:51Z","created_at":"2014-04-04T22:32:30Z","creator_user_login":"sophiebits"}
{"number":1259,"title":"Stop doing data-*, aria-*, start using dataSet","body":"The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):\n\n```\n<div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe\n</div>\n\nvar el = document.querySelector('#user');\n\n// el.id == 'user'\n// el.dataset.id === '1234567890'\n// el.dataset.user === 'johndoe'\n// el.dataset.dateOfBirth === ''\n\nel.dataset.dateOfBirth = '1960-10-03'; // set the DOB.\n\n// 'someDataAttr' in el.dataset === false\n\nel.dataset.someDataAttr = 'mydata';\n// 'someDataAttr' in el.dataset === true\n```\n\nWe should just start supporting `dataSet` (because camelCase). This will allow a couple things:\n- easier reasoning about data attributes (`Object.keys(this.props.dataSet)`)\n- easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`)\n- easier (potentially faster?) updates (just modify `node.dataset`)\n\nWe'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.\n\nTo the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.\n","state":"open","updated_at":"2023-03-02T17:14:41Z","created_at":"2014-03-14T20:30:18Z","creator_user_login":"zpao"}
{"number":1253,"title":"iframe contents cause invariant violation","body":"When using server rendering, putting an `<img>` in an `<iframe>` seems to invariably cause an invariant violation (it can't find the image).\n\nThis is related to #1252, but not identical. In both cases, the browser isn't aware of the inner elements however, in this case, it's because browsers that support iframes are actually mutating the DOM (by replacing the contents with the document specified in the `src` attribute).\n","state":"open","updated_at":"2017-10-01T22:40:24Z","created_at":"2014-03-12T21:35:00Z","creator_user_login":"matthewwithanm"}
{"number":1159,"title":"Provide a way to handle browser-autocompleted form values on controlled components","body":"When there's a controlled component for form names that the user has saved in their browser (common with username/password fields), the browser will sometimes render the page with values in those fields without firing onChange events.  If the user submits the form, the component state does not reflect what is showing to the user.\n\nIn experimenting with this, it appears that the data is there on load (tested by logging this.refs.myinput.getDOMNode().value)\n","state":"open","updated_at":"2023-08-05T14:58:15Z","created_at":"2014-02-22T02:05:11Z","creator_user_login":"ericflo"}
{"number":285,"title":"Declarative API for installing global DOM event handlers","body":"#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n","state":"open","updated_at":"2020-08-10T17:58:43Z","created_at":"2013-08-21T21:41:26Z","creator_user_login":"sophiebits"}
