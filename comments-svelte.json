{"number":9057,"comment_id":"1656731922","body":"I try with \"{#each displayData as row, i (i)}\" instead {#key sortIndex} and its works, can you try?","updated_at":"2023-07-29T13:32:13Z","created_at":"2023-07-29T13:32:13Z","creator_user_login":"StagnantIce"}
{"number":9057,"comment_id":"1659395755","body":"That did not fix the problem. When you update the code it will sort it properly, so you'd have to refresh the app to see this SSR hydration bug again.","updated_at":"2023-08-01T00:39:55Z","created_at":"2023-08-01T00:39:40Z","creator_user_login":"formula349"}
{"number":9057,"comment_id":"1680459758","body":"Same here. I've a wordy workaround using an \"action\" instead of @html as described here: https://youtu.be/R_C8jLh5yIs?t=13","updated_at":"2023-08-16T11:50:41Z","created_at":"2023-08-16T11:50:41Z","creator_user_login":"Crenshinibon"}
{"number":9058,"comment_id":"1657217776","body":"I think if you pass `physicalWidth` to the function returning the promise then it updates, but I'm unsure if thats what you are going for here, but checkout https://svelte.dev/repl/6d5de4c31a2445f7b3f67e04af0e55b9?version=4.1.1 might be a potential workaround to what you are trying to do ","updated_at":"2023-07-30T16:47:39Z","created_at":"2023-07-30T16:47:39Z","creator_user_login":"KaiErikNiermann"}
{"number":9058,"comment_id":"1657230240","body":"> I think if you pass physicalWidth to the function returning the promise then it updates\r\n\r\nThat doesn't change the fact that my original example showcases a bug.\r\n\r\n> but checkout https://svelte.dev/repl/6d5de4c31a2445f7b3f67e04af0e55b9?version=4.1.1 might be a potential workaround to what you are trying to do\r\n\r\nI'm not really asking for a workaround, I'm just reporting a bug.","updated_at":"2023-07-30T18:18:04Z","created_at":"2023-07-30T17:52:50Z","creator_user_login":"aradalvand"}
{"number":9089,"comment_id":"1673590089","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: dbeaee265c0ad41d0ce258e431569f2de8fc6a7e\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/teobgeno/svelte/new/master?filename=.changeset/nine-shirts-punch.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20nodes%20match%20when%20right%20expression%20has%20trailing%20comments%0A)\n\n","updated_at":"2023-08-18T17:16:06Z","created_at":"2023-08-10T17:03:59Z","creator_user_login":"changeset-bot[bot]"}
{"number":9098,"comment_id":"1675654660","body":"###  ü¶ã  Changeset detected\n\nLatest commit: 15bef57aecc3006b6aa88425a6f3b72b304b61cd\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/ngtr6788/svelte/new/css-at-import-layer?filename=.changeset/new-kiwis-mate.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afeat%3A%20%60%40import%60%20CSS%20at-rule%20supports%20both%20%60layer%60%20and%20%60supports%60%0A)\n\n","updated_at":"2023-08-12T15:41:00Z","created_at":"2023-08-12T03:26:37Z","creator_user_login":"changeset-bot[bot]"}
{"number":9064,"comment_id":"1661750677","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 61f6bead32ba20a4cdef824a37e263588fcd673f\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/fix-stale-await-ctx?filename=.changeset/tame-knives-hammer.md&value=---%0A%22playground%22%3A%20patch%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20stale%20ctx%20for%20await%20block%20in%20slot%0A)\n\n","updated_at":"2023-08-02T08:33:36Z","created_at":"2023-08-02T08:33:36Z","creator_user_login":"changeset-bot[bot]"}
{"number":8997,"comment_id":"1641579809","body":"`extend` isn't available yet, apologies for the confusion. It will be available in the next release.","updated_at":"2023-07-19T07:39:31Z","created_at":"2023-07-19T07:39:31Z","creator_user_login":"dummdidumm"}
{"number":8997,"comment_id":"1642134231","body":"The problem with the slot is that the DOM for the slot isn't available when Svelte loads the inner component and determines whether or not a slot is present. You can work around it by moving the script tag to the bottom of the body tag.","updated_at":"2023-07-19T13:55:09Z","created_at":"2023-07-19T13:55:09Z","creator_user_login":"dummdidumm"}
{"number":9016,"comment_id":"1645040799","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 632f49600a60368b4b7c56645d4a6089aa3748f3\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/fix-dyn-component-test?filename=.changeset/happy-deers-act.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Achore%3A%20fix%20dynamic%20component%20update%20test%0A)\n\n","updated_at":"2023-07-21T06:18:57Z","created_at":"2023-07-21T06:18:57Z","creator_user_login":"changeset-bot[bot]"}
{"number":8885,"comment_id":"1614525510","body":"The original idea was to make this a warning in Svelte 4 and then an error in Svelte 5 (so that we could it being technically a breaking change whenever we added a new directive to the language). Maybe when we do make it an error, we could also add a compiler option that lets people opt in to a less-safe mode where these kinds of attributes are allowed.","updated_at":"2023-06-30T11:33:21Z","created_at":"2023-06-30T11:33:21Z","creator_user_login":"Conduitry"}
{"number":8885,"comment_id":"1615877368","body":"@Conduitry Thanks for explaining. yes it could be a compiler option. Would be even nicer to allow only some. Right now `on:` is already accepted and gives no warning. I would like for us in svelte-native to be able to add some and still keep warning for others.\r\nBTW would love to already have a way to do it now and prevent warnings. It gives really messy output.","updated_at":"2023-07-01T12:13:44Z","created_at":"2023-07-01T12:13:44Z","creator_user_login":"farfromrefug"}
{"number":8846,"comment_id":"1666904778","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: d06979ad7c1925edc95573a71aa325d0f6cd73b3\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/ngtr6788/svelte/new/invalidate-non-first?filename=.changeset/red-taxis-melt.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20refactor%20'invalidate'%20to%20work%20with%20store%20variables%20that%20are%20not%20first%20on%20object%20destructuring%0A)\n\n","updated_at":"2023-08-06T15:59:49Z","created_at":"2023-08-06T15:59:49Z","creator_user_login":"changeset-bot[bot]"}
{"number":8726,"comment_id":"1589155233","body":"This is an implementation detail for rxjs interop, but I'm not sure we want to expose it publicly. If you have a rxjs observable, why would you want to use it with `derived` anyway? Can't use you `.pipe` and the rxjs operators for that?","updated_at":"2023-06-13T11:55:40Z","created_at":"2023-06-13T11:55:40Z","creator_user_login":"dummdidumm"}
{"number":8726,"comment_id":"1589279282","body":"I want to mix svelte stores with rx observables","updated_at":"2023-06-13T13:07:32Z","created_at":"2023-06-13T13:07:32Z","creator_user_login":"olehmisar"}
{"number":8726,"comment_id":"1606196960","body":"Your request is legit, however the severity is so over-stated. I can easily fix it with `@ts-ignore` and move on. Please report severity properly.","updated_at":"2023-06-25T17:54:56Z","created_at":"2023-06-25T17:54:56Z","creator_user_login":"hackape"}
{"number":8680,"comment_id":"1571244995","body":"In my particular situation now, the redundancy is a bit expensive too, as it requires doing a map lookup on each iteration, twice now:\r\n\r\nHaving to use this:\r\n\r\n<img width=\"1063\" alt=\"\" src=\"https://github.com/sveltejs/svelte/assets/5913254/882f4732-03f0-422b-9dba-61b02b80afea\">\r\n\r\n\r\nInstead of this:\r\n\r\n<img width=\"1071\" alt=\"\" src=\"https://github.com/sveltejs/svelte/assets/5913254/e93733c2-c318-42da-ae6c-7ca8d071998f\">","updated_at":"2023-06-01T02:54:52Z","created_at":"2023-06-01T02:47:46Z","creator_user_login":"brandonmcconnell"}
{"number":8850,"comment_id":"1607370649","body":"One of the best things about Svelte is having all component parts in a single file (ie: the script, HTML and style). Because of this, it might even make sense for `component` to be the default behaviour for transitions.\r\n\r\nI know this has been a breaking change in 4.0.0, so I understand if there would be push-back against this.","updated_at":"2023-06-26T12:28:26Z","created_at":"2023-06-26T12:28:26Z","creator_user_login":"oodavid"}
{"number":8750,"comment_id":"1616867429","body":"@ibmua I've been able to recreate what you've described in learn.svelte.dev, but after creating this [repro repl](https://svelte.dev/repl/6c5b65cad61c44eea7c644a8e21348bc?version=4.0.1), I don't think this is a Svelte issue. Could be something about the web containers setup (I'm not really sure). Let me know if the repro accurately reproduces the scenario you've outlined ","updated_at":"2023-07-02T22:21:42Z","created_at":"2023-07-02T22:21:42Z","creator_user_login":"stordahl"}
{"number":8825,"comment_id":"1605768052","body":"This is probably due to an upgrade of `aria-query`. Can you try again with `aria-query` 5.3.0? It was just released to back out some breaking changes","updated_at":"2023-06-24T23:06:35Z","created_at":"2023-06-24T23:06:35Z","creator_user_login":"benmccann"}
{"number":8825,"comment_id":"1611042653","body":"Opened https://github.com/A11yance/axobject-query/issues/319 because this might be a bug in `axobject-query` - but not sure yet.","updated_at":"2023-06-28T09:05:47Z","created_at":"2023-06-28T09:05:47Z","creator_user_login":"dummdidumm"}
{"number":8825,"comment_id":"1682217902","body":"Now fixed on upstream, hopefully it's released soon so that we then just need to bump the version and that fixes it","updated_at":"2023-08-17T12:42:29Z","created_at":"2023-08-17T12:41:21Z","creator_user_login":"dummdidumm"}
{"number":8669,"comment_id":"1569511981","body":"Quasar is built on top of VueJS. Similarly there exists libraries built on top of Svelte. Styled components are outside the scope of Svelte itself. To get started, search the community website Svelte Society for [components and frameworks like Quasar](https://sveltesociety.dev/components) built on top of Svelte based on your needs.","updated_at":"2023-05-31T05:16:48Z","created_at":"2023-05-31T05:16:48Z","creator_user_login":"kwangure"}
{"number":8669,"comment_id":"1569564722","body":"I have used Svelte-Materialify in the past. However, I was suggesting that instead of using html elements and passing classes to it, we could directly use the style components. Anyway, thanks for your response.","updated_at":"2023-05-31T06:21:46Z","created_at":"2023-05-31T06:21:46Z","creator_user_login":"srikantgudi"}
{"number":8653,"comment_id":"1566109881","body":"[vc]: #D2YaxbIABdVYN78g2Vk0AZ0ozRBGiWjjRf31eV2seNw=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vc3ZlbHRlL3N2ZWx0ZS1kZXYtMi9DOGNmTlNWVUZoWURmemhGN3hQSGRTeFM5cEJ3IiwibmV4dENvbW1pdFN0YXR1cyI6IkZBSUxFRCIsInByZXZpZXdVcmwiOiIifV19\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Updated (UTC) |\n| :--- | :----- | :------ | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/C8cfNSVUFhYDfzhF7xPHdSxS9pBw)) |  | May 28, 2023 11:52am |\n\n","updated_at":"2023-05-28T11:52:49Z","created_at":"2023-05-28T11:52:49Z","creator_user_login":"vercel[bot]"}
{"number":9080,"comment_id":"1666902672","body":"###  ü¶ã  Changeset detected\n\nLatest commit: 3e08d2a69ef55a4d9b9a84edb2e763d4c7a71f88\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/s3812497/svelte/new/fix-files-binding?filename=.changeset/great-avocados-hunt.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20allow%20setting%20%60files%60%20binding%20for%20%60%3Cinput%20type%3D%22file%22%20%2F%3E%60%0A)\n\n","updated_at":"2023-08-06T15:51:32Z","created_at":"2023-08-06T15:51:32Z","creator_user_login":"changeset-bot[bot]"}
{"number":8992,"comment_id":"1641319473","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 0e5e4715c6b02176a4d066e57defe35f85cb3770\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/hackape/svelte/new/gh-4265?filename=.changeset/cold-pianos-fetch.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20%234265%20prevent%20double%20update%20when%20bind%20to%20object%0A)\n\n","updated_at":"2023-07-23T01:19:05Z","created_at":"2023-07-19T03:15:40Z","creator_user_login":"changeset-bot[bot]"}
{"number":8992,"comment_id":"1644232102","body":"4.2 working now but not working anymore is a breaking change very strictly speaking - though this case is probably rare and you shouldn't be doing something like this anyway, so I could be persuaded to agree with this PR. I'll wait on the opinion of other maintainers here, cc @benmccann / @Conduitry ","updated_at":"2023-07-20T16:28:59Z","created_at":"2023-07-20T16:28:59Z","creator_user_login":"dummdidumm"}
{"number":8992,"comment_id":"1645072872","body":"@dummdidumm  It's possible to cater for case 4.2 and get rid of breaking change. Basically we need to insert `$$invalidate` calls also at instance top level, so that `$$.bound[i] = true` can get a chance to pick up the signal.\r\n\r\n```html\r\n<script>\r\n\texport let value = {}\r\n\tvalue.foo = 'bar'\r\n</script>\r\n```\r\n\r\ncompiled to \r\n\r\n```diff\r\nfunction instance($$self, $$props, $$invalidate) {\r\n    let { value = {} } = $$props;\r\n-   value.foo = 'bar';\r\n+   $$invalidate(0, value.foo = 'bar', value);\r\n```\r\n\r\nIMO that comes at the cost of breaking the elegancy of `instance`, which in its current state leaves most of the things untouched. To me, \"init phase is plain JS without magic\" is a mind model that I love a lot.\r\n\r\nSo I don't think it's worth it, since 4.2 feels like a really bad pattern to begin with and shouldn't be encouraged. But if you guys decide that it's really important to stick to non-breaking-change policy, I'll look further into it. Look forward to feedback.","updated_at":"2023-07-21T06:58:55Z","created_at":"2023-07-21T06:55:26Z","creator_user_login":"hackape"}
{"number":8992,"comment_id":"1646719449","body":"https://github.com/sveltejs/svelte/blob/0e5e4715c6b02176a4d066e57defe35f85cb3770/packages/svelte/src/compiler/compile/render_dom/invalidate.js#L130-L132\r\n\r\nMod `invalidate.js` to also account for props at `main_execution_context`, so that we detect assign-to-prop at init phase. Now case 4.2 is correctly handled, no more breaking change ü•π","updated_at":"2023-07-23T01:41:17Z","created_at":"2023-07-23T01:41:17Z","creator_user_login":"hackape"}
{"number":8992,"comment_id":"1659869382","body":"Hi @dummdidumm and other core team members, I'd like to push forward this PR. Now that I've removed the breaking change issue, would you take another look and give me some feedback on how to proceed? cc @benmccann @Conduitry ","updated_at":"2023-08-01T08:53:30Z","created_at":"2023-08-01T08:53:30Z","creator_user_login":"hackape"}
{"number":9043,"comment_id":"1651666360","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: fb7bba166ed25db30abcae433006e625e4067e93\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/Svelte-Society-Fr/svelte/new/radiofrance?filename=.changeset/little-items-eat.md&value=---%0A%22svelte.dev%22%3A%20patch%0A---%0A%0Aadd%20radiofrance%20logo%0A)\n\n","updated_at":"2023-07-26T13:57:10Z","created_at":"2023-07-26T11:59:22Z","creator_user_login":"changeset-bot[bot]"}
{"number":9043,"comment_id":"1651735970","body":"Please run the SVG through `svgo`, or set the PR so that Svelte maintainers can push to it so I can do it (might not be possible since this PR was opened from an org's fork rather than your own fork).","updated_at":"2023-07-26T12:45:39Z","created_at":"2023-07-26T12:45:39Z","creator_user_login":"Conduitry"}
{"number":9043,"comment_id":"1651864412","body":"Okay, i hope it's fine now.","updated_at":"2023-07-26T13:57:48Z","created_at":"2023-07-26T13:57:48Z","creator_user_login":"bleucitron"}
{"number":9043,"comment_id":"1653094810","body":"I tried playing with the `--row-size` and widths of `a` and `.spacer`, but nothing really shined (i didn't really like having the names perfectly aligned).\r\n\r\nMaybe it's okay to limit the number of names to 14, but randomize the ones actually displayed ?","updated_at":"2023-07-27T07:58:58Z","created_at":"2023-07-27T07:58:58Z","creator_user_login":"bleucitron"}
{"number":8678,"comment_id":"1570960637","body":"@TomFevrier is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22b75a8d58e59b3c0b809e61928c70ec9a49d5112a%22%7D%2C%22id%22%3A%22QmcB9j7FPZVzQvJHaDur6QeoDzKUizCbwEcCmysEz9onih%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8678%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-31T21:09:21Z","created_at":"2023-05-31T21:09:21Z","creator_user_login":"vercel[bot]"}
{"number":8678,"comment_id":"1581761470","body":"I don't think this is a good idea. We really shouldn't be interpolating between non-numeric values. What if someone expects the boolean to flip halfway through instead of immediately or at the end? How is it affected by easing?\r\n\r\nYou can pass a custom interpolator with the exact behaviour that you desire.","updated_at":"2023-06-08T01:41:18Z","created_at":"2023-06-08T01:39:04Z","creator_user_login":"gtm-nayan"}
{"number":8678,"comment_id":"1582089588","body":"> I don't think this is a good idea. We really shouldn't be interpolating between non-numeric values. What if someone expects the boolean to flip halfway through instead of immediately or at the end? How is it affected by easing?\r\n> \r\n> You can pass a custom interpolator with the exact behaviour that you desire.\r\n\r\nWhy would anyone expect anything, since Svelte currently doesn't allow it? How could it be affected by easing, since a boolean cannot be interpolated anyway?\r\n\r\nIn my opinion, it makes sense that the boolean would flip immediately, since this boolean would mostly be used:\r\n- either as a `class:` directive to trigger a CSS transition\r\n- or in the condition of an `{#if}...{/if}` block, to mount content conditionally and animate it using a `transition:` directive\r\nIn both cases, the delay and duration of the transition triggered by the boolean can be customized.\r\n\r\nI admit this is a very niche case, but as a visual journalist, I've encountered this problem a few times while using `tweened` to animate graphics and datavisualizations. Of course, one can always use a custom interpolator, but it's quite painful to copy the entire `get_interpolator` function from the Svelte source code simply to add one line to make it work with booleans. For a common usage of Svelte, I don't see how it would cause any issue and I think the benefits outweigh the drawbacks, if any. ","updated_at":"2023-06-08T08:01:04Z","created_at":"2023-06-08T07:59:46Z","creator_user_login":"TomFevrier"}
{"number":8678,"comment_id":"1603141296","body":"Deployment failed with the following error:\n~~~\nThere is no GitHub account connected to this Vercel account.\n~~~\n","updated_at":"2023-06-22T18:39:49Z","created_at":"2023-06-22T18:39:49Z","creator_user_login":"vercel[bot]"}
{"number":8646,"comment_id":"1565079997","body":"@ngtr6788 is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2282fd18939c24f59d9605b9fcdf0a1396eb7e396b%22%7D%2C%22id%22%3A%22QmPDeTPFzSU55JLSSUm8Ki7SCUEpkkRzjfaNiiVgZrs8YJ%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8646%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-26T23:51:04Z","created_at":"2023-05-26T23:51:04Z","creator_user_login":"vercel[bot]"}
{"number":8646,"comment_id":"1666904371","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 167772585ef30d9abc00168e299c405e7f1caaf3\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/ngtr6788/svelte/new/storable-var-in-bracket?filename=.changeset/empty-flowers-melt.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20dealt%20with%20var%20declarations%20in%20bracket%20issue%0A)\n\n","updated_at":"2023-08-06T15:58:13Z","created_at":"2023-08-06T15:58:13Z","creator_user_login":"changeset-bot[bot]"}
{"number":8978,"comment_id":"1640204357","body":"did you try `|global` ?","updated_at":"2023-07-18T13:11:25Z","created_at":"2023-07-18T13:11:25Z","creator_user_login":"elron"}
{"number":8978,"comment_id":"1646871519","body":"> did you try `|global` ?\r\n\r\nI'm not sure what you are referring to","updated_at":"2023-07-23T15:36:43Z","created_at":"2023-07-23T15:36:43Z","creator_user_login":"Moonlander1"}
{"number":8978,"comment_id":"1646898880","body":"I'm [referring to this](https://svelte.dev/tutorial/global-transitions)\r\n`<h3 out:typewriter|global in:typewriter|global> {random_text} </h3>`\r\n","updated_at":"2023-07-23T17:30:29Z","created_at":"2023-07-23T17:30:29Z","creator_user_login":"elron"}
{"number":8978,"comment_id":"1646964684","body":"> I'm [referring to this](https://svelte.dev/tutorial/global-transitions) `<h3 out:typewriter|global in:typewriter|global> {random_text} </h3>`\r\n\r\nThat's not really related to the problem. The problem isn't triggering the animation, rather the overlap of the in and out animation. If you don't know the exact duration of the out aniamtion you can't delay the in animation so the new and old element overlap ruining the layout for the duration of the overlap.","updated_at":"2023-07-23T21:33:00Z","created_at":"2023-07-23T21:33:00Z","creator_user_login":"Moonlander1"}
{"number":8660,"comment_id":"1567690952","body":"In the shared link the second record has location as `null`.\r\n\r\nI guess the `?` doesn't work in Svelte. Hence it can be made an empty object, like so: `location: {}`\r\n\r\nAs empty object:\r\n\r\nhttps://svelte.dev/repl/8b62518f09464dfd986f726d9324c7fa?version=3.59.1\r\n\r\nI hope this helps.","updated_at":"2023-05-30T03:20:12Z","created_at":"2023-05-30T02:51:25Z","creator_user_login":"srikantgudi"}
{"number":8660,"comment_id":"1574604581","body":"temporary i using this to convert null to object, \r\n\r\nhttps://stackoverflow.com/questions/38078630/javascript-null-to-empty-object-properties\r\n\r\nthanks","updated_at":"2023-06-03T03:22:57Z","created_at":"2023-06-03T03:22:57Z","creator_user_login":"sciefylab"}
{"number":8606,"comment_id":"1560748895","body":"I'm facing the same issue","updated_at":"2023-05-24T09:16:57Z","created_at":"2023-05-24T09:16:57Z","creator_user_login":"vlrevolution"}
{"number":8513,"comment_id":"1513382664","body":"Heh, this only happens in dev mode, https://stackblitz.com/edit/vitejs-vite-ycnbsv?file=package.json&terminal=bnp\r\n\r\nleads me to believe it's the key validation calling get_each_context again that's the problem\r\n\r\n","updated_at":"2023-04-18T15:40:29Z","created_at":"2023-04-18T15:40:07Z","creator_user_login":"gtm-nayan"}
{"number":8637,"comment_id":"1563511361","body":"@joelmukuthu is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22ba40850e82681e44ab380fdb98d4dbf4d337d000%22%7D%2C%22id%22%3A%22QmZT59tLTPqrGqzqn4WFsETsNuf85wqNPq4uQX9asNUdvF%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8637%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-25T21:11:31Z","created_at":"2023-05-25T21:11:31Z","creator_user_login":"vercel[bot]"}
{"number":8556,"comment_id":"1558826174","body":"I'd like to work on this and could use some help getting started. Am I missing something or are there no tests for `get_slot_definition.ts`? Is there a way I can test any changes I make to that file?","updated_at":"2023-06-01T08:02:55Z","created_at":"2023-05-23T08:44:51Z","creator_user_login":"joelmukuthu"}
{"number":8652,"comment_id":"1565910501","body":"More context can be found here as well\r\nhttps://discord.com/channels/457912077277855764/1111309554018439258","updated_at":"2023-05-26T17:18:24Z","created_at":"2023-05-26T17:18:24Z","creator_user_login":"LukeHagar"}
{"number":8597,"comment_id":"1552119802","body":"note: Not a problem with SSR, problem with hydration. Setting `csr = false` for the page will result in all of the options being selected. Haven't had time to investigate further.","updated_at":"2023-05-17T17:21:29Z","created_at":"2023-05-17T17:21:29Z","creator_user_login":"tcc-sejohnson"}
{"number":9168,"comment_id":"1702532696","body":"Rather odd, for some reason adding `ComponentA` breaks the slot in `ComponentB`.\r\nSo if you delete this line it will update again:\r\n```svelte\r\n<ComponentA propA={data.propA} bind:propB={data.propB}></ComponentA>\r\n```\r\n\r\n`ComponentA` can also be moved to *after* `ComponentB` and it will work again. ","updated_at":"2023-09-01T10:58:15Z","created_at":"2023-09-01T10:30:34Z","creator_user_login":"brunnerh"}
{"number":9155,"comment_id":"1696500888","body":"Related: https://github.com/sveltejs/svelte/issues/9155","updated_at":"2023-08-28T22:16:34Z","created_at":"2023-08-28T22:16:34Z","creator_user_login":"danielniccoli"}
{"number":9155,"comment_id":"1702120040","body":"Try with using CSS transitions and animations to achieve the desired effects on the HTMLDialogElement and its backdrop. Apply the necessary CSS properties and values to create smooth transitions between display states, and use keyframes to define custom animations. Make sure to include the necessary selectors and pseudo-classes to target the specific elements that need the transitions.","updated_at":"2023-09-01T03:55:33Z","created_at":"2023-09-01T03:55:33Z","creator_user_login":"msf-caesar"}
{"number":9155,"comment_id":"1702494119","body":"I was not asking for a workaround, but thanks for proving my point.","updated_at":"2023-09-01T09:59:08Z","created_at":"2023-09-01T09:59:08Z","creator_user_login":"danielniccoli"}
{"number":9142,"comment_id":"1692174559","body":"We're not, in general, going to be able to tell at compile time whether a given attribute is going to be present. I guess the question, then, is whether we ought to disable all missing-attribute a11y warnings for a given element when it has spread attributes. And I don't know what my answer is to that.","updated_at":"2023-08-24T18:00:19Z","created_at":"2023-08-24T18:00:19Z","creator_user_login":"Conduitry"}
{"number":9142,"comment_id":"1692235813","body":"My vote would be to not throw the warning if the element has a spread attribute. In the past we've seemed to opt for false negatives over false positives and this would be in line with that.","updated_at":"2023-08-24T18:48:34Z","created_at":"2023-08-24T18:48:34Z","creator_user_login":"geoffrich"}
{"number":9126,"comment_id":"1685430933","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: fa4b1a3bc91aca957f845fea1726f371f5bf5084\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/raythurnevoid/svelte/new/fix/@sveltejs/kit/#2044?filename=.changeset/tall-masks-approve.md&value=---%0A%22%40fake-scope%2Ffake-pkg%22%3A%20patch%0A---%0A%0Afix%3A%20prevent%20animation%20keyframes%20being%20deleted%20before%20animation%20execution%20end%0A)\n\n","updated_at":"2023-08-20T23:57:15Z","created_at":"2023-08-20T23:57:15Z","creator_user_login":"changeset-bot[bot]"}
{"number":9116,"comment_id":"1684243123","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 4e8e4d90977851bfd817a8bd664317b1357e8957\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/quicker-redirects?filename=.changeset/hot-cars-prove.md&value=---%0A%22svelte.dev%22%3A%20patch%0A---%0A%0Asite%3A%20quicker%20redirects%20to%20appease%20the%20SEO%20deities%0A)\n\n","updated_at":"2023-08-19T12:10:54Z","created_at":"2023-08-18T17:50:46Z","creator_user_login":"changeset-bot[bot]"}
{"number":9172,"comment_id":"1703882045","body":"> There is no reason to use bind within key block like this\r\n\r\nThen don't :smile: \r\n\r\nIt's essentially creating some sort of infinite reactive loop, the underlying bug likely being https://github.com/sveltejs/svelte/issues/5689 because otherwise there is no reason for `arr` to be invalidated in this scenario.","updated_at":"2023-09-02T16:28:07Z","created_at":"2023-09-02T16:28:07Z","creator_user_login":"Prinzhorn"}
{"number":9085,"comment_id":"1670506288","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 5c8d3e8ee5aba41623b72a6623edbf937dcd2933\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/martgnz/svelte/new/full-rss-feed?filename=.changeset/proud-ghosts-march.md&value=---%0A%22svelte.dev%22%3A%20patch%0A---%0A%0Afeat%3A%20Generate%20blog%20RSS%20feed%20with%20full%20content%20rather%20than%20a%20description%0A)\n\n","updated_at":"2023-08-09T01:55:31Z","created_at":"2023-08-09T01:00:33Z","creator_user_login":"changeset-bot[bot]"}
{"number":9128,"comment_id":"1685911470","body":"I'm not sure if we should deem this expected behavior or not, since `$$restProps` can't know which things have updated and which haven't.","updated_at":"2023-08-21T08:46:36Z","created_at":"2023-08-21T08:46:36Z","creator_user_login":"dummdidumm"}
{"number":9128,"comment_id":"1685924100","body":"`value` is defined explicitly though, and only that was changed, so I did not expect `$$restProps` to get invalidated (if there is such a thing here).\r\n\r\nBut I would concede that this is a bit of a corner case, which also has an easy workaround.","updated_at":"2023-08-21T08:55:13Z","created_at":"2023-08-21T08:55:13Z","creator_user_login":"brunnerh"}
{"number":9145,"comment_id":"1702120335","body":"Try with modifying the `$set` call to only include the optional props that are present. In this case, remove the `Charlie` prop from the `$set` call.","updated_at":"2023-09-01T03:56:08Z","created_at":"2023-09-01T03:56:08Z","creator_user_login":"msf-caesar"}
{"number":9084,"comment_id":"1671049301","body":"This would be a breaking change, but even if we swapped the order I don't think it would help because you can't just omit the second parameter to let it be inferred. Probably blocked by https://github.com/microsoft/TypeScript/pull/26349","updated_at":"2023-08-09T10:13:45Z","created_at":"2023-08-09T10:13:45Z","creator_user_login":"gtm-nayan"}
{"number":9081,"comment_id":"1668595180","body":"Are you looking for sveltekit?","updated_at":"2023-08-07T21:24:05Z","created_at":"2023-08-07T21:24:05Z","creator_user_login":"fehnomenal"}
{"number":9081,"comment_id":"1669414253","body":"Well, I don't really want to use SvelteKit, I just want to use Svelte with a my own server framework... And I also didn't find in its docs anything like what I described -- the closest is [this](https://kit.svelte.dev/docs/page-options#ssr) which I described in the Alternatives section.","updated_at":"2023-08-08T11:11:55Z","created_at":"2023-08-08T11:11:55Z","creator_user_login":"LeviPesin"}
{"number":9081,"comment_id":"1673504949","body":"+1","updated_at":"2023-08-10T16:01:28Z","created_at":"2023-08-10T16:01:28Z","creator_user_login":"cblanquera"}
{"number":9112,"comment_id":"1682692876","body":"###  ü¶ã  Changeset detected\n\nLatest commit: 0cc0230e73558ac049d60244af898f99fb4b5562\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/teobgeno/svelte/new/gh-9092?filename=.changeset/twelve-nails-exercise.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20svelte%3Aelement%20with%20dynamic%20this%20and%20spread%20attributes%20throws%20error%0A)\n\n","updated_at":"2023-08-18T17:19:48Z","created_at":"2023-08-17T17:33:21Z","creator_user_login":"changeset-bot[bot]"}
{"number":9112,"comment_id":"1683960123","body":"Just add it. Thanks for the tip.","updated_at":"2023-08-18T13:56:15Z","created_at":"2023-08-18T13:56:05Z","creator_user_login":"teobgeno"}
{"number":9163,"comment_id":"1702119616","body":"Try with separating the rendering of the parent component's head and body in different statements, so that the head content of the nested component is not stripped out in SSR. Alternatively, you could modify the `create_ssr_component` function to return both the head and body, ensuring that the head content is included in the SSR output.","updated_at":"2023-09-01T03:54:45Z","created_at":"2023-09-01T03:54:45Z","creator_user_login":"msf-caesar"}
{"number":9147,"comment_id":"1702120155","body":"Try with modifying the `slide()` function to allow for specifying the anchor point of the transition. Add a new parameter to the function that takes values like `left`, `right`, `top`, and `bottom`. This way, you can choose the desired direction of the slide transition. Additionally, set the outgoing element's position to absolute and introduce a small delay to create space between the outgoing and incoming elements during the transition.","updated_at":"2023-09-01T03:55:46Z","created_at":"2023-09-01T03:55:46Z","creator_user_login":"msf-caesar"}
{"number":9147,"comment_id":"1702122787","body":"Thanks, but why are you repeating what I did?  As I stated in the description, I use the negative symbol in axis to set the anchor, and I also set the absolute position attribute.  I also added the small delay.  I'm just not a UI guy and I am not qualified to call this a solution.  This is why I brought the issue to the experts.  Are you trolling me, perhaps?","updated_at":"2023-09-01T04:00:23Z","created_at":"2023-09-01T04:00:23Z","creator_user_login":"webJose"}
{"number":9133,"comment_id":"1686728052","body":"The `App.svelte` CSS selectors have a noteworthy issue:\r\n\r\n```html\r\n<style>\r\n\tdiv a h1 {\r\n\t\tcolor: red;\r\n\t}\r\n</style>\r\n```\r\n\r\nWhich outputs as:\r\n\r\n```css\r\ndiv.svelte-1pvgo6d a h1.svelte-1pvgo6d{color:red}\r\n```\r\n\r\nAnd the `a` selector isn't scoped; but I would expect Svelte to apply a scoped class to `a`.","updated_at":"2023-08-21T17:17:26Z","created_at":"2023-08-21T17:17:08Z","creator_user_login":"theetrain"}
{"number":9146,"comment_id":"1694702523","body":"I agree that the behavior is somewhat undefined, and my expectation is also that filter is readonly and so the binding shouldn't do much. We'll revisit this behavior with Svelte 5 ","updated_at":"2023-08-27T16:00:36Z","created_at":"2023-08-27T16:00:36Z","creator_user_login":"dummdidumm"}
{"number":9146,"comment_id":"1702120245","body":"Try with ensuring that the `a` variable is always reactively declared and not a regular var. Also, make sure that `b` is a reactively declared variable with a dependency on `a`. Additionally, ensure that `b` is either in another reactive statement or added to the template so that it can be invalidated. Finally, self-assign `b` at some point to trigger the desired behavior.","updated_at":"2023-09-01T03:55:58Z","created_at":"2023-09-01T03:55:58Z","creator_user_login":"msf-caesar"}
{"number":9094,"comment_id":"1674702355","body":"###  ü¶ã  Changeset detected\n\nLatest commit: ba6aca9fa9a136280907a04e46794332bde82beb\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/sveltejs/svelte/new/false-reactive-component?filename=.changeset/violet-penguins-brake.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20false%20reactive%20component%20warning%0A)\n\n","updated_at":"2023-08-11T12:51:05Z","created_at":"2023-08-11T12:36:45Z","creator_user_login":"changeset-bot[bot]"}
{"number":9161,"comment_id":"1702119697","body":"Try with explicitly defining separate props for each variant of the union type in the `Test` component. Instead of using `$$Props`, define two separate interfaces or types, one for `{a: string}` and another for `{a: number; b: number}`. Then, use the appropriate props in the `Test` component and provide the correct props when using the component in `TestWrapper.svelte`.","updated_at":"2023-09-01T03:54:55Z","created_at":"2023-09-01T03:54:55Z","creator_user_login":"msf-caesar"}
{"number":9078,"comment_id":"1674435815","body":"`||` is a boolean operator, calling that \"true syntax\" is a stretch as you are misusing it and it will misbehave for any values that are coerced to `false`, e.g. `0` or `''`.\r\n\r\nAlso, the statement should do nothing since it has no assignment.\r\nIf anything it should be:\r\n```js\r\n$: myProp ??= 'defaultValue';\r\n```","updated_at":"2023-08-11T09:13:10Z","created_at":"2023-08-11T09:12:56Z","creator_user_login":"brunnerh"}
{"number":9078,"comment_id":"1675502405","body":"Indeed, ??= is preferred to capture the full use case without exceptions. \r\n\r\nThe primary point being `export let myProp = \"initialValue\";` is not comprehensively a default value but is being taught as such without clarification.","updated_at":"2023-08-11T23:08:54Z","created_at":"2023-08-11T23:07:07Z","creator_user_login":"kenbankspeng"}
{"number":9141,"comment_id":"1691356412","body":"Can confirm, I've seen this as well","updated_at":"2023-08-24T09:41:32Z","created_at":"2023-08-24T09:41:32Z","creator_user_login":"PuruVJ"}
{"number":9141,"comment_id":"1691938666","body":"Related / duplicate https://github.com/sveltejs/svelte/issues/7010 (via https://github.com/sveltejs/svelte/issues?q=is%3Aissue+is%3Aopen+spring+tab)","updated_at":"2023-08-24T15:43:31Z","created_at":"2023-08-24T15:42:45Z","creator_user_login":"Prinzhorn"}
{"number":9050,"comment_id":"1656724077","body":"```js\r\n// Svelte 4\r\ncustomElements.define('my-element', MyElement.element);\r\n// Svelte 3\r\ncustomElements.define('my-element', MyElement);\r\n```","updated_at":"2023-07-29T12:54:24Z","created_at":"2023-07-29T12:53:54Z","creator_user_login":"potatotomatobanana"}
{"number":8958,"comment_id":"1649896223","body":"Why can you not just do this:\r\n\r\n```svelte\r\n{#each items as item (i)}\r\n\t<button bind:this={buttons[i]}>{item}</button>\r\n{/each}\r\n```","updated_at":"2023-07-25T13:56:03Z","created_at":"2023-07-25T13:56:03Z","creator_user_login":"Zachiah"}
{"number":8958,"comment_id":"1656810177","body":"@Zachiah The issue is that `buttons[i]` is not deleted when an item gets removed:\r\n\r\n```svelte\r\n<style>\r\nbutton {\r\n\tdisplay: block;\r\n\tmargin-top: 1em;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport { onMount } from 'svelte';\r\n\r\nlet items = [\r\n\t'Apple',\r\n\t'Banana',\r\n];\r\n\r\nlet buttons = [];\r\n\r\nonMount(() => {\r\n\tconst interval = setInterval(() => {\r\n\t\tconsole.log(items.length, buttons.length);\r\n\t}, 1000);\r\n\r\n\tsetTimeout(() => {\r\n\t\titems = items.slice(0, 1);\r\n\t}, 1000);\r\n\t\r\n\treturn () => {\r\n\t\tclearInterval(interval);\r\n\t};\r\n});\r\n</script>\r\n\r\n{#each items as item, i}\r\n\t<button bind:this={buttons[i]}>{item}</button>\r\n{/each}\r\n```","updated_at":"2023-07-29T18:11:30Z","created_at":"2023-07-29T18:11:20Z","creator_user_login":"szmarczak"}
{"number":8958,"comment_id":"1662410270","body":"Could you add something like:\r\n\r\n```svelte\r\n<script>\r\n$: buttons.length = items.length;\r\n</script>\r\n```","updated_at":"2023-08-02T15:22:25Z","created_at":"2023-08-02T15:22:25Z","creator_user_login":"Zachiah"}
{"number":9029,"comment_id":"1646761557","body":"###  ü¶ã  Changeset detected\n\nLatest commit: 6773057dd8ca157a53e0d066c21aeae025120a5c\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Minor |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/oscarhermoso/svelte/new/nonself-event-modifier?filename=.changeset/serious-papayas-care.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afeat%3A%20add%20%60%7Cnonself%60%20event%20modifier%20for%20non-interactive%20elements%20with%20event%20listeners%0A)\n\n","updated_at":"2023-07-27T09:18:09Z","created_at":"2023-07-23T06:45:29Z","creator_user_login":"changeset-bot[bot]"}
{"number":9029,"comment_id":"1654935755","body":"Raised an accompanying PR in sveltejs/language-tools:\r\n\r\nhttps://github.com/sveltejs/language-tools/pull/2110","updated_at":"2023-07-28T03:32:35Z","created_at":"2023-07-28T03:32:35Z","creator_user_login":"oscarhermoso"}
{"number":8905,"comment_id":"1620202332","body":"to be honest most of this is somewhat unspecified behavior, some things are considered bugs. With Svelte 5 we'll make things more consistent and predictable - so I'm somewhat hesitant to write out all the nuances in behavior since some of them will change.","updated_at":"2023-07-04T12:56:17Z","created_at":"2023-07-04T12:56:17Z","creator_user_login":"dummdidumm"}
{"number":9011,"comment_id":"1644847575","body":"Another bug is setting the value with duration 0, but non-zero delay. Delay is ignored https://github.com/sveltejs/svelte/blob/6827709373faf01245d0284968b365b7e032058c/packages/svelte/src/runtime/motion/tweened.js#L79-L86","updated_at":"2023-07-21T00:59:00Z","created_at":"2023-07-21T00:58:43Z","creator_user_login":"davydhyk"}
{"number":8941,"comment_id":"1629359784","body":"Maybe just call it `ContextKey`, though?","updated_at":"2023-07-10T16:58:24Z","created_at":"2023-07-10T16:58:24Z","creator_user_login":"brunnerh"}
{"number":8941,"comment_id":"1676116844","body":"I would like to work on this ","updated_at":"2023-08-12T21:57:07Z","created_at":"2023-08-12T21:57:07Z","creator_user_login":"criticalAY"}
{"number":8999,"comment_id":"1642088331","body":"###  ü¶ã  Changeset detected\n\nLatest commit: 7ffa5f49b070ebecfaf68b86bd848000458f82b4\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/sveltejs/svelte/new/ce-tick?filename=.changeset/thin-pillows-trade.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20wait%20a%20longer%20tick%20before%20checking%20slots%0A)\n\n","updated_at":"2023-07-19T13:29:37Z","created_at":"2023-07-19T13:29:37Z","creator_user_login":"changeset-bot[bot]"}
{"number":8999,"comment_id":"1642129475","body":"An alternative is to add some kind of mutation observer and adjust Svelte's fallback logic to swap out to fallback dynamically.","updated_at":"2023-07-19T13:53:00Z","created_at":"2023-07-19T13:53:00Z","creator_user_login":"dummdidumm"}
{"number":8656,"comment_id":"1566685243","body":"@rmunn is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22d3f04043263dea5f3846fa9def3bec9c3de8ae2e%22%7D%2C%22id%22%3A%22QmUWa9eaXMX2DNMkW4bjNR3qxqbwBKmm6TwPAaAoQBCidp%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8656%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-29T07:27:38Z","created_at":"2023-05-29T07:27:38Z","creator_user_login":"vercel[bot]"}
{"number":8656,"comment_id":"1566690612","body":"Note that @dummdidumm assigned #6786 to the \"One Day\" milestone [on March 20](https://github.com/sveltejs/svelte/pull/6786#event-8794410945). This one will probably also go in the same milestone.","updated_at":"2023-05-29T07:32:54Z","created_at":"2023-05-29T07:32:54Z","creator_user_login":"rmunn"}
{"number":8656,"comment_id":"1666559044","body":"Deployment failed with the following error:\n~~~\nThere is no GitHub account connected to this Vercel account.\n~~~\n","updated_at":"2023-08-05T17:23:30Z","created_at":"2023-08-05T17:23:30Z","creator_user_login":"vercel[bot]"}
{"number":9158,"comment_id":"1698388856","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 626fbe8dee2b5b7c243b18a05358f51262c400e0\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/DreaminDani/svelte/new/master?filename=.changeset/gentle-stingrays-dance.md&value=---%0A%0A---%0A%0Adocs%3A%20%22What's%20new%20in%20Svelte%22%20September%20newsletter%0A)\n\n","updated_at":"2023-08-31T19:49:37Z","created_at":"2023-08-30T02:15:09Z","creator_user_login":"changeset-bot[bot]"}
{"number":9158,"comment_id":"1698747386","body":"Launching Svelte Summit website in a couple of days, can we hold off until like 2nd of September? üôè ","updated_at":"2023-08-30T08:43:50Z","created_at":"2023-08-30T08:43:50Z","creator_user_login":"kevmodrome"}
{"number":9158,"comment_id":"1699065574","body":"skeleton ui released 2.0 https://github.com/skeletonlabs/skeleton/discussions/1945","updated_at":"2023-08-30T12:23:52Z","created_at":"2023-08-30T12:23:52Z","creator_user_login":"dominikg"}
{"number":9158,"comment_id":"1701582215","body":"> Launching Svelte Summit website in a couple of days, can we hold off until like 2nd of September? üôè\r\n\r\n@kevmodrome yeah that's fine with me.","updated_at":"2023-08-31T18:47:31Z","created_at":"2023-08-31T18:47:31Z","creator_user_login":"DreaminDani"}
{"number":9158,"comment_id":"1701693407","body":"Okay. I think this is ready to go. @kevmodrome please contribute the Svelte Summit website as a proposed change when you're ready: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request (or just commit directly to the branch, if you're able to access it)\r\n\r\nI'll plan on sending out the newsletter via email on the 3rd so that you have time to contribute by the end of your day on the 2nd.","updated_at":"2023-08-31T19:51:40Z","created_at":"2023-08-31T19:51:40Z","creator_user_login":"DreaminDani"}
{"number":9095,"comment_id":"1674788520","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 9c18bd5731c77e87da45e1712eb9f84b38472625\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/Artxe2/svelte/new/fix-eslint-error?filename=.changeset/ten-radios-worry.md&value=---%0A%22svelte.dev%22%3A%20patch%0A%22playground%22%3A%20patch%0A%22svelte%22%3A%20patch%0A---%0A%0Achore%3A%20some%20changes%20to%20eliminate%20eslint%20error%20messages%0A)\n\n","updated_at":"2023-08-14T17:14:51Z","created_at":"2023-08-11T13:22:11Z","creator_user_login":"changeset-bot[bot]"}
{"number":9095,"comment_id":"1676620393","body":"These generally look like good changes, but I'm curious how you discovered these issues and why they weren't being caught by the existing `lint` CI job. Can we enforce it so that we don't have regressions?","updated_at":"2023-08-14T03:33:29Z","created_at":"2023-08-14T03:33:29Z","creator_user_login":"benmccann"}
{"number":9095,"comment_id":"1676635761","body":"The fixes are usually not error levels or targets for `eslintignore`.\r\nI saw an error by eslint VSCE when I opened the file or a warning message on the Problem tab at the bottom of the editor.","updated_at":"2023-08-14T03:58:28Z","created_at":"2023-08-14T03:58:28Z","creator_user_login":"Artxe2"}
{"number":9095,"comment_id":"1677563417","body":"> The fixes are usually not error levels or targets for eslintignore\r\n\r\nThat shouldn't be the case. E.g. we have set the rule `'unicorn/prefer-node-protocol': 'error'` to cause an error if `node:` prefix is not being used.\r\n\r\nhttps://github.com/sveltejs/eslint-config/blob/1b6263fef66d1f0828ec404c53ca5105276c71b1/index.js#L38\r\n\r\nIf this isn't causing an error then it seems like there's some problem in the project's setup that needs to be corrected.","updated_at":"2023-08-14T15:32:01Z","created_at":"2023-08-14T15:32:01Z","creator_user_login":"benmccann"}
{"number":9095,"comment_id":"1677744162","body":"You're right.  \r\nI checked and found that the scripts folder was not included in the eslint pattern,  \r\nAfter branching back from version `4.2`, we added a commit to modify the script so that the fix can be captured as `lint` CI job.","updated_at":"2023-08-14T17:21:08Z","created_at":"2023-08-14T17:19:45Z","creator_user_login":"Artxe2"}
{"number":9118,"comment_id":"1684973699","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: ff9f0005be659f42ef9515cd410d125a688e4576\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/chore-init-params-documentation?filename=.changeset/orange-rocks-fetch.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Achore%3A%20document%20init%20parameters%0A)\n\n","updated_at":"2023-08-19T14:04:22Z","created_at":"2023-08-19T14:04:22Z","creator_user_login":"changeset-bot[bot]"}
{"number":9118,"comment_id":"1692232462","body":"> it'd be nice to document these anyway just so no one forgets what these are when we context switch to the next major\r\n\r\nwill we need to remember what they are once we stop working on this codebase?","updated_at":"2023-08-24T18:45:46Z","created_at":"2023-08-24T18:45:46Z","creator_user_login":"benmccann"}
{"number":9088,"comment_id":"1672617954","body":"Seems related to #4265","updated_at":"2023-08-10T06:14:43Z","created_at":"2023-08-10T06:14:43Z","creator_user_login":"teobgeno"}
{"number":9088,"comment_id":"1672729277","body":"The `export let` is a duplicate of #4265, the comment thing is very strange","updated_at":"2023-08-10T07:46:42Z","created_at":"2023-08-10T07:46:42Z","creator_user_login":"dummdidumm"}
{"number":9088,"comment_id":"1673174646","body":"> The `export let` is a duplicate of #4265, the comment thing is very strange\r\n\r\n@dummdidumm,\r\nThank you for finding that similar issue. I looked, but didn't find it since the symptoms of my version surface in a different way. While I agree the behavior seems very related, do you think the `export let` part of this issue might constitute it's own distinct issue? #4265 is triggering a reactivity twice where it should trigger once. This issue here triggers reactivity once where it should trigger it zero times. Semantically this bug is presenting itself quite differently. \r\n\r\nNot opposed either way if it's still decided the reactivity part of this bug is a duplicate, just voicing my additional thoughts. Thanks for the help!\r\n\r\nedit: I found #7749 which does seem to be a duplicate of my reactivity issue, minus the comment weirdness. However, it has remained unresolved/unassigned since August, 2022. After seeing the long history of #4265 without any confirmation of a fix, is there any way to get this issue recognized by someone on the team? This bug has lead to many lost hours by 10's of developers by the looks of it.","updated_at":"2023-08-10T13:10:15Z","created_at":"2023-08-10T12:59:46Z","creator_user_login":"Kcwidman"}
{"number":9088,"comment_id":"1673554979","body":"Hello,\r\n\r\n\r\nFirst, it seem that invalidate a reactive declaration will invalidate all his dependencies.\r\n\r\nExemple :\r\n```javascript\r\n// This line\r\nnamesCopy = namesCopy;\r\n// is converted to\r\n($$invalidate(0, namesCopy), $$invalidate(2, names));\r\n// but IMHO, it should be :\r\n$$invalidate(0, namesCopy);\r\n```\r\n\r\nI don't understand why, but it seems to be intentional, based on this code :\r\n\r\nhttps://github.com/sveltejs/svelte/blob/f4c4d99e136831934364d89f032922881feb7bc0/packages/svelte/src/compiler/compile/render_dom/invalidate.js#L129-L140\r\n\r\n\r\n\r\nAnd the different behavior with the comment seems to come from there :\r\n\r\nhttps://github.com/sveltejs/svelte/blob/f4c4d99e136831934364d89f032922881feb7bc0/packages/svelte/src/compiler/compile/render_dom/invalidate.js#L50-L57\r\n\r\n=> The **nodes_match()** will be falsy with a comment, since it is only present on one of the nodes.\r\nMaybe  **nodes_match()** should ignore trailingComments ?\r\n\r\n","updated_at":"2023-08-10T16:36:58Z","created_at":"2023-08-10T16:36:58Z","creator_user_login":"adiguba"}
{"number":9088,"comment_id":"1673639001","body":"Hello @Kcwidman \r\nAs @adiguba mention a reactive declaration will invalidate all his dependencies. \r\nI suppose that as long as the variable **namesCopy** has a reactive declaration and a dependency with the variable **names**, svelte will invalidate both variables. I got your point about the spread operator but seems, If I'm not mistaken, that is not working that way. I do not know if you are searching a solution for this but a possible workaround would be not to declare the variable in a reactive declarations. Taking your example from [REPL](https://svelte.dev/repl/0dd63d22d975452687d3e13523cbfa12?version=4.1.2 ) I would modify **someComponent.svelte** like below\r\n\r\n```<script>\r\nexport let names\r\nlet namesCopy = []\r\n\r\n$: console.log(\"This should not have reactivity triggered repeatedly...\", names)\r\n\r\nconst clickAction = () => {\r\n\tnamesCopy = [...names]\r\n}\r\n</script>\r\n<button on:click={clickAction}>click me!</button>\r\n{namesCopy}\r\n```\r\n","updated_at":"2023-08-10T17:42:04Z","created_at":"2023-08-10T17:40:08Z","creator_user_login":"teobgeno"}
{"number":9091,"comment_id":"1673899389","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 9b05fd6237f6ce9ca78778ca4b048c0ff8ae82ca\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/Link-the-elf/svelte/new/get_directive_type_refactor?filename=.changeset/stale-parents-sort.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Achore%3A%20refactor%20get_directive_type%20function%0A)\n\n","updated_at":"2023-08-10T20:49:56Z","created_at":"2023-08-10T20:49:56Z","creator_user_login":"changeset-bot[bot]"}
{"number":9091,"comment_id":"1676621201","body":"`lint` is failing. I'm not sure how much time I'd spend refactoring this code as we're about to ditch the entire codebase and move to a reimplemented version of the compiler for Svelte 5","updated_at":"2023-08-14T03:35:01Z","created_at":"2023-08-14T03:35:01Z","creator_user_login":"benmccann"}
{"number":9107,"comment_id":"1680037335","body":"Here's the problem.\r\n[https://github.com/sveltejs/svelte/blob/d2ed2ca32918eab7da531a42021946f6149afdc4/packages/svelte/src/runtime/internal/dom.js#L443](https://github.com/sveltejs/svelte/blob/d2ed2ca32918eab7da531a42021946f6149afdc4/packages/svelte/src/runtime/internal/dom.js#L443)\r\n\r\n```js\r\n} else if (key === '__value') {\r\n\t/** @type {any} */ (node).value = node[key] = attributes[key];\r\n}\r\n```\r\nI think that need to change it as follows.\r\n```js\r\n} else if (key === '__value') {\r\n\tnode[key] = attributes[key];\r\n\t// @ts-ignore\r\n\tif (!('value' in attributes)) node.value = node[key];\r\n}\r\n```","updated_at":"2023-08-16T06:31:28Z","created_at":"2023-08-16T06:30:52Z","creator_user_login":"Artxe2"}
{"number":9107,"comment_id":"1680332062","body":"\r\n\r\n\r\n> Here's the problem.\r\n> \r\n> https://github.com/sveltejs/svelte/blob/d2ed2ca32918eab7da531a42021946f6149afdc4/packages/svelte/src/runtime/internal/dom.js#L443\r\n> \r\n> ```js\r\n> } else if (key === '__value') {\r\n> \t/** @type {any} */ (node).value = node[key] = attributes[key];\r\n> }\r\n> ```\r\n> \r\n> I think that need to change it as follows.\r\n> \r\n> ```js\r\n> } else if (key === '__value') {\r\n> \tnode[key] = attributes[key];\r\n> \t// @ts-ignore\r\n> \tif (!('value' in attributes)) node.value = node[key];\r\n> }\r\n> ```\r\n\r\nI'm not at all familiar with the internals of svelte to be honest, however, I'm not sure if this maybe should be a fix for the compiler instead of runtime as I also noticed in the repl JS output it was down to `__value` taking precedence.\r\n\r\nHowever, looking at your fix\r\n\r\nIn your example `node['__value'] = attributes['__value'];` will be set regardless of whether there is a `value` attribute. wouldn't we want to skip the `__value` key altogether if we have a `value` attribute?\r\n\r\nUnless there is a further purpose to having the key `__value` always set, might it be better to change to?\r\n```js\r\n} else if (key === '__value' && !('value' in attributes)) {\r\n\t/** @type {any} */ (node).value = node[key] = attributes[key];\r\n}\r\n```\r\nand the `value` attribute would get treated like any other attribute being added to the node.\r\n","updated_at":"2023-08-16T10:11:45Z","created_at":"2023-08-16T10:11:45Z","creator_user_login":"yusaf"}
{"number":9107,"comment_id":"1680685101","body":"> I'm not at all familiar with the internals of svelte to be honest\r\n\r\nThe same goes for me.  \r\n  \r\nI saw your question and tried the following code\r\n```js\r\n<select value=\"email\">\r\n\t<option value='sms' class='option'>SMS</option>\r\n\t<option value='email' class='option'>E-mail</option>\r\n\t<option value='letter' class='option'>Letter</option>\r\n</select>\r\n```\r\nIt seems like a bug that doesn't recognize that `__value` is not necessary when pass on the `value` with `...`.","updated_at":"2023-08-16T14:06:37Z","created_at":"2023-08-16T14:06:37Z","creator_user_login":"Artxe2"}
{"number":9107,"comment_id":"1680696609","body":"\r\n> It seems like a bug that doesn't recognize that `__value` is not necessary when pass on the `value` with `...`.\r\n\r\nYep you hit the nail on the head, using attributes normally works fine, it's just when spread it's an issue.","updated_at":"2023-08-16T14:13:15Z","created_at":"2023-08-16T14:12:39Z","creator_user_login":"yusaf"}
{"number":9122,"comment_id":"1685268637","body":"###  ü¶ã  Changeset detected\n\nLatest commit: add87ae85ad9f7e5d033c7f81f8b179578ee98f6\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/sveltejs/svelte/new/module-variable-dirty-check?filename=.changeset/red-pugs-lay.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20do%20not%20add%20module%20declared%20variables%20as%20dependencies%0A)\n\n","updated_at":"2023-08-20T12:11:59Z","created_at":"2023-08-20T12:11:59Z","creator_user_login":"changeset-bot[bot]"}
{"number":9122,"comment_id":"1685273185","body":"I vaguely remember that @tanhauhau did something similar a year or more ago but that introduced a bug. Anyone has any ideas what that was, or am I misremembering? cc @Conduitry ","updated_at":"2023-08-20T12:32:04Z","created_at":"2023-08-20T12:32:04Z","creator_user_login":"dummdidumm"}
{"number":9122,"comment_id":"1685282214","body":"What immediately springs to mind is #7942 (which we had to revert), but that was less than a year ago. Although it was based on #4066 which was a few years older.","updated_at":"2023-08-20T13:10:45Z","created_at":"2023-08-20T13:10:45Z","creator_user_login":"Conduitry"}
{"number":9122,"comment_id":"1685311907","body":"Ah yeah I meant the first one you mentioned ,thanks for digging it up","updated_at":"2023-08-20T15:26:51Z","created_at":"2023-08-20T15:26:41Z","creator_user_login":"dummdidumm"}
{"number":9122,"comment_id":"1685315010","body":"Is there a test case to prevent the regression from #7942, going by the tests at least this shouldn't break anything because the `dirty & 0` that's removed now would've never been true anyway.","updated_at":"2023-08-20T15:41:12Z","created_at":"2023-08-20T15:41:01Z","creator_user_login":"gtm-nayan"}
{"number":9122,"comment_id":"1685319560","body":"Yeah it looks like #8382 (which reverted #7942) included a new test.","updated_at":"2023-08-20T16:02:53Z","created_at":"2023-08-20T16:02:53Z","creator_user_login":"Conduitry"}
{"number":9082,"comment_id":"1668684793","body":"I believe this is due to `CodeBracket` being a dependency in a reactive block. The compiler appears to see `CodeBracket` as potentially dynamic, and so warns about it changing. This isn't happening for the other components because they don't appear as dependencies in reactive blocks.\r\n\r\nHere's a minimal reproduction:\r\n\r\n```svelte\r\n<script>\r\n\timport Foo from './Foo.svelte';\r\n\t$: Foo;\r\n</script>\r\n\r\n<Foo/>\r\n```","updated_at":"2023-08-07T23:07:35Z","created_at":"2023-08-07T23:06:32Z","creator_user_login":"Conduitry"}
{"number":9082,"comment_id":"1668687613","body":"FWIW, you can pass a `class` _prop_ to components when using `<svelte:component>`, which is exactly what you're doing now with `<CodeBracket class=\"h-full w-full\" />` anyway - that's a prop, not an attribute. But in any case, this is an erroneous warning.","updated_at":"2023-08-07T23:10:38Z","created_at":"2023-08-07T23:10:38Z","creator_user_login":"Conduitry"}
{"number":9082,"comment_id":"1668708866","body":"> The compiler appears to see `CodeBracket` as potentially dynamic, and so warns about it changing. This isn't happening for the other components because they don't appear as dependencies in reactive blocks.\n\nOooh, could it come from [here](https://github.com/EmeraldHQ/Website/blob/1bfd559d0470f11e74519a1085623765c693c0e1/src/routes/%2Bpage.svelte#L44), falsely considering it as a reactive component?\n\nI might be wrong but this is wrong anyway because the component in `$:` and the one used in the markup are 2 separate instance aren't they?\n\n> this is an erroneous warning\n\nIs it going to be fixed then? Or should I refactor my code to not make that happen? (If so, how?)","updated_at":"2023-08-07T23:53:36Z","created_at":"2023-08-07T23:39:35Z","creator_user_login":"WarningImHack3r"}
{"number":9125,"comment_id":"1685361453","body":"###  ü¶ã  Changeset detected\n\nLatest commit: a8f8158c72e3cf34df470e3760d65cace6ddcd09\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/teobgeno/svelte/new/gh-9107?filename=.changeset/small-seals-know.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20spreading%20attributes%20on%20option%20value%20attribute%20get's%20replaced%20by%20option's%20inner%20text%0A)\n\n","updated_at":"2023-08-20T18:35:06Z","created_at":"2023-08-20T18:35:06Z","creator_user_login":"changeset-bot[bot]"}
{"number":9097,"comment_id":"1675391838","body":"> [...] For values shared between multiple components, consider using a store.\r\nhttps://svelte.dev/docs/svelte-components#script-context-module\r\n\r\nLike the docs say, use store if you want values to update between components.. You get something like this:\r\n\r\n```svelte\r\n<!-- Parent -->\r\n<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport Child from './child.svelte';\r\n\timport Grandchild from './grandchild.svelte';\r\n\tconst disabled = writable(false);\r\n</script>\r\n\r\n<button on:click={() => {disabled.update(s=>!s)}}>Toggle</button>\r\n<Child {disabled}><Grandchild /></Child>\r\n\r\n\r\n<!-- Child -->\r\n<script>\r\n\timport { setContext } from 'svelte';\r\n\texport let disabled;\r\n\tsetContext('child', disabled);\r\n</script>\r\n\r\n<slot />\r\n\r\n\r\n<!-- Grandchild -->\r\n<script>\r\n\timport { getContext } from 'svelte';\r\n\tconst state = getContext('child');\r\n</script>\r\n\r\n<p>{$state}</p>\r\n```\r\n\r\n","updated_at":"2023-08-11T20:52:58Z","created_at":"2023-08-11T20:52:58Z","creator_user_login":"wwwdepot"}
{"number":9097,"comment_id":"1675405629","body":"Thank you for your quick response. I understand the solution, but implementing it would necessitate the parent component to consistently send a store. It would be ideal to maintain a similar code length to your example, while enabling the ability to pass a plain value, particularly for developers who are creating libraries.","updated_at":"2023-08-11T21:09:59Z","created_at":"2023-08-11T21:09:59Z","creator_user_login":"WailAbou"}
{"number":9097,"comment_id":"1675742906","body":"https://github.com/sveltejs/svelte/issues/7773","updated_at":"2023-08-12T06:35:58Z","created_at":"2023-08-12T06:35:58Z","creator_user_login":"Prinzhorn"}
{"number":9097,"comment_id":"1676407743","body":"I appreciate the link you shared for the issue. Despite searching, I hadn't come across a similar problem previously. Essentially, it's the same request with another syntax preference. Since an official response hasn't been provided yet, it would be highly valuable to receive a clear confirmation or rejection from the Svelte creators/maintainers before this issue being closed.","updated_at":"2023-08-13T16:39:04Z","created_at":"2023-08-13T16:39:04Z","creator_user_login":"WailAbou"}
{"number":9097,"comment_id":"1677959083","body":"I've said this before but I think this is a subset of a greater problem that it is difficult to access reactive component values outside of the component tree. Svelte has a syntax for accessing stores inside of components (the `$`) if svelte had a syntax to go the other way that would be great:\r\n```typescript\r\nexport let val;\r\n\r\n// _$_ syntax just for demonstration purposes\r\nsetContext(_$_val);\r\n```\r\ncould be roughly equivalent to:\r\n\r\n```typescript\r\nexport let val;\r\n\r\n/* Essentially generated section */\r\nconst _$_store_for__val = writable();\r\n$: _$_store_for__val.set(val);\r\n\r\nconst _$_val = {\r\n    subscribe: _$_store_for__val.subscribe,\r\n    set: (v) => { val = v };\r\n}\r\n/* End of essentially generated section*/\r\n\r\nsetContext(_$_val);\r\n```","updated_at":"2023-08-14T19:45:05Z","created_at":"2023-08-14T19:45:05Z","creator_user_login":"Zachiah"}
{"number":9108,"comment_id":"1681566586","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: b72373286803c6a61679516cf465e97c1e6bc416\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/typescript-faq?filename=.changeset/spicy-cycles-sniff.md&value=---%0A%0A---%0A%0Adocs%3A%20remove%20typescript%20FAQ%0A)\n\n","updated_at":"2023-08-17T03:45:20Z","created_at":"2023-08-17T03:45:20Z","creator_user_login":"changeset-bot[bot]"}
{"number":9028,"comment_id":"1666249198","body":"After some triage, I think I found a race condition between any `out` transition (also bidirectional-transition) and the kit navigation code.\r\n\r\nThe out transition will run before navigation. It then enters `loop(fn)` which dispatches fn to `requestAnimtionFrame`. This causes other JS to run, namely the navigation code in kit: `src/runtime/client.js`:`navigate` which will now call `scrollTo(scroll.x, scroll.y)`. This is called while the element that is transitioned out is still present in the DOM and the new content has been added to the DOM. The DOM is therefore now \"longer\" and calling `scrollTo` will result in visible Y scroll after the transitioned element is removed from the DOM.\r\n\r\nIf we were to wrap kit's `scrollTo(scroll.x, scroll.y)` and `deep_linked.scrollIntoView()` in `requestAnimtionFrame` this would be at least fixed for null_transition's.\r\n\r\nFor a visualization, see video below:\r\n\r\nhttps://github.com/sveltejs/svelte/assets/33808743/0f992a62-c80b-421a-8110-04635f0c4788\r\n\r\n### Update:\r\n\r\nThis is my first time looking at Svelte's source code, so I am not very familiar with its internal workings. But does it even make sense to out run transitions and therefore keep elements in the DOM when navigating away? If the transition is defined on a scope that stays in the tree like this:\r\n\r\n(`show` simply changes from `true` ‚Üí `false`)\r\n```svelte\r\n{#if show}\r\n  <p out:fade>Hello there :P</p>\r\n{/if}\r\n```\r\nit makes sense to me to run the transition. But if we change the whole page, I wouldn't expect that transition to be run.\r\n\r\nAfter understanding the forces at play a little better and looking at the documentation again, this seems to be one of those \"it's a feature, not a bug\" cases:\r\n\r\nThe relevant documentation [tutorial](https://svelte.dev/tutorial/global-transitions) states: \"_Ordinarily, transitions will only play on elements when their direct containing block is added or destroyed_\". While this is technically true for page navigation, there should probably be an option to explicitly disable it on navigation (or make that the default and let users enable it) to avoid this issue. I as a user would not expect a simple slide animation like in the example or even a `null_animation` to \"mess up\" my navigation ^^","updated_at":"2023-08-04T23:15:00Z","created_at":"2023-08-04T22:46:12Z","creator_user_login":"Coronon"}
{"number":9028,"comment_id":"1666288685","body":"I just experimented with a `|nonav` modifier ([file](https://github.com/sveltejs/svelte/blob/master/packages/svelte/src/compiler/compile/nodes/Transition.js)) for transitions that works just like `|local` but wraps the transition block in a check for `!globalThis.__sveltekit_is_navigating` ([file](https://github.com/sveltejs/svelte/blob/master/packages/svelte/src/compiler/compile/render_dom/wrappers/Element/index.js)). I then simply set `globalThis.__sveltekit_is_navigating` everywhere where we set `navigating` in kit's runtime client ([file](https://github.com/sveltejs/kit/blob/master/packages/kit/src/runtime/client/client.js)). This fixes my issue like a charm!\r\n\r\nIs there any cleaner way to communicate between `Svelte` and `SvelteKit`?","updated_at":"2023-08-05T00:02:42Z","created_at":"2023-08-04T23:56:54Z","creator_user_login":"Coronon"}
{"number":9063,"comment_id":"1661610815","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 1b6291482533b0be67c03c5106e2e2b3a53dbab8\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/raw-hydration-mismatch?filename=.changeset/quiet-gorillas-jog.md&value=---%0A%22svelte.dev%22%3A%20patch%0A%22playground%22%3A%20patch%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20%40html%20mismatch%20in%20hydration%0A)\n\n","updated_at":"2023-08-05T17:19:27Z","created_at":"2023-08-02T06:58:30Z","creator_user_login":"changeset-bot[bot]"}
{"number":9063,"comment_id":"1661722791","body":"Contains changes to `playground`, maybe not intended?","updated_at":"2023-08-02T08:14:40Z","created_at":"2023-08-02T08:14:40Z","creator_user_login":"brunnerh"}
{"number":9063,"comment_id":"1661751192","body":"Yeah, still have to write tests and clean things up, thanks for the heads up.","updated_at":"2023-08-02T08:33:56Z","created_at":"2023-08-02T08:33:56Z","creator_user_login":"gtm-nayan"}
{"number":9056,"comment_id":"1655801842","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 85e83ae43180c6262c1dc01bdaeadbbfb5f929c4\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/ehrencrona/svelte/new/fix-4056-outro-on-destroy?filename=.changeset/beige-sheep-vanish.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afeat%3A%20parameter%20for%20running%20outro%20transitions%20on%20%60%24destroy%60%0A)\n\n","updated_at":"2023-07-31T06:53:11Z","created_at":"2023-07-28T14:38:28Z","creator_user_login":"changeset-bot[bot]"}
{"number":9056,"comment_id":"1655911713","body":"If we want to do this, we should strongly consider having it be an options object (with only one option for now), rather than being a positional parameter that we may come to regret.","updated_at":"2023-07-28T15:47:50Z","created_at":"2023-07-28T15:47:50Z","creator_user_login":"Conduitry"}
{"number":9056,"comment_id":"1657778912","body":"@benmccann @Conduitry good feedback, thanks! i've updated the PR.","updated_at":"2023-07-31T06:56:57Z","created_at":"2023-07-31T06:56:57Z","creator_user_login":"ehrencrona"}
{"number":8908,"comment_id":"1622729780","body":"sorry i dont get how does `::selection` relates to svelte? do you have a reproduction in Svelte that explains the issue you are facing?","updated_at":"2023-07-06T00:27:17Z","created_at":"2023-07-06T00:27:17Z","creator_user_login":"tanhauhau"}
{"number":8908,"comment_id":"1623512467","body":"it have not something to do with svelte but the sveltes own website. that makes use of `::selection` on https://svelte.dev/","updated_at":"2023-07-06T11:28:57Z","created_at":"2023-07-06T11:28:57Z","creator_user_login":"jimmywarting"}
{"number":8908,"comment_id":"1623518158","body":"eg: https://svelte.dev/_app/immutable/assets/TryTerminal.b09557f2.css\r\n\r\n```css\r\n::selection {\r\n  background: var(--sk-selection-color)\r\n}\r\n```\r\nthe variable is not found...","updated_at":"2023-07-06T11:31:33Z","created_at":"2023-07-06T11:31:33Z","creator_user_login":"jimmywarting"}
{"number":8908,"comment_id":"1623531783","body":"It works for me though ü§î Can you post a video or screenshot? Also, whats your OS","updated_at":"2023-07-06T11:38:43Z","created_at":"2023-07-06T11:38:43Z","creator_user_login":"PuruVJ"}
{"number":8908,"comment_id":"1623610584","body":"> Note that https://github.com/primer/css/issues/2411 is currently only reproducible with Chrome's chrome://flags/#enable-experimental-web-platform-features enabled.","updated_at":"2023-07-06T12:39:47Z","created_at":"2023-07-06T12:39:47Z","creator_user_login":"jimmywarting"}
{"number":9046,"comment_id":"1652301074","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: fd8ebd89409ad968331c26db23e118bd4db4ea19\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/word-wrap?filename=.changeset/quiet-grapes-suffer.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Achore%3A%20bump%20jsdom%20to%20address%20word-wrap%20vulnerability%0A)\n\n","updated_at":"2023-08-22T21:57:57Z","created_at":"2023-07-26T18:30:19Z","creator_user_login":"changeset-bot[bot]"}
{"number":9046,"comment_id":"1652307677","body":"`TypeError: The \"path\" argument must be of type string or an instance of URL. Received an instance of URL`\r\n\r\nwhat a great error message, thanks","updated_at":"2023-07-26T18:36:08Z","created_at":"2023-07-26T18:36:08Z","creator_user_login":"Conduitry"}
{"number":9046,"comment_id":"1652379187","body":"Hmm. Maybe this is not related to this PR since there are multiple other PRs failing with this same issue","updated_at":"2023-07-26T19:36:25Z","created_at":"2023-07-26T19:36:25Z","creator_user_login":"benmccann"}
{"number":9046,"comment_id":"1652538321","body":"With the tests fixed on `master`, I'm merging that back into this branch. However, it looks like (at least locally for me - CI hasn't finished yet) there are still test failures, but at least they look JSDOM-related. It appears that the new version of JSDOM normalizes computed style colors to `rgb(...)` strings.","updated_at":"2023-07-26T21:44:08Z","created_at":"2023-07-26T21:44:08Z","creator_user_login":"Conduitry"}
{"number":9046,"comment_id":"1652571749","body":"Okay, for now I've downgraded to 22.0.0, which fixes the security vulnerability warning without changing the test output\r\n\r\nI guess longer-term we'll have to update the tests. This seems to be a result of https://github.com/jsdom/jsdom/pull/3560","updated_at":"2023-08-03T17:03:46Z","created_at":"2023-07-26T22:09:50Z","creator_user_login":"benmccann"}
{"number":9065,"comment_id":"1662041028","body":"This would have to be fixed in css-tree or its forked version within the repo.\r\n\r\ncc @typhonrt if this is something that'd be interesting to you","updated_at":"2023-08-02T11:30:59Z","created_at":"2023-08-02T11:30:59Z","creator_user_login":"gtm-nayan"}
{"number":9065,"comment_id":"1662102472","body":"Would you be that kind @gtm-nayan and elaborate more what you mean?\r\nI am beginner in this so would like to know more","updated_at":"2023-08-02T12:15:18Z","created_at":"2023-08-02T12:14:51Z","creator_user_login":"stano561"}
{"number":9065,"comment_id":"1663561815","body":"> Would you be that kind @gtm-nayan and elaborate more what you mean?\r\n\r\nSvelte uses the `css-tree` package to parse CSS into an AST (Abstract Syntax Tree) for processing. `css-tree` is a bit behind on updating to the latest syntax for modern features, but can be extended locally. I did this to support container queries / media queries level 4 features. Nested parenthesis used in this manner is not supported by css-tree currently and you can find the issue already has been reported.... 3 years ago: https://github.com/csstree/csstree/issues/118\r\n\r\nOut of curiosity can you write your SCSS with a level 4 query?\r\n```scss\r\n$breakpoints: (\r\n'sm': '567px <= width <= 767px',\r\n```\r\n\r\nI gather that will work and avoid the nested queries. It would be nice to fix all css-tree bugs / issues, but is a bit of a slippery slope per se. ","updated_at":"2023-08-03T08:51:37Z","created_at":"2023-08-03T08:51:37Z","creator_user_login":"typhonrt"}
{"number":9065,"comment_id":"1665087913","body":"Yes that worked but anyway if you got the taste and time would be neat to have also the other option ","updated_at":"2023-08-04T06:37:46Z","created_at":"2023-08-04T06:37:46Z","creator_user_login":"stano561"}
{"number":9065,"comment_id":"1666186153","body":"> Yes that worked but anyway if you got the taste and time would be neat to have also the other option\r\n\r\nIt should be possible to modify the extended CQ / MQ parsing to take into account nested queries in respect to how Svelte utilizes `css-tree`; IE it probably wouldn't be the same solution that the `css-tree` author / maintainer would implement. I'd have to do a little more investigation before saying everything is a go per se. As far as timing is related to this quite likely it will have to wait until ~October as I'll have a window between Oct - Dec for more full time OSS efforts on my side. \r\n\r\nIn the meantime level 4 queries will work as long as you can release your efforts for more modern browsers that support MQ lv 4. ","updated_at":"2023-08-04T21:12:54Z","created_at":"2023-08-04T21:12:54Z","creator_user_login":"typhonrt"}
{"number":8842,"comment_id":"1606127102","body":"What exactly do you mean? Do you mean that you want back api.svelte.dev and how svelte.dev used it? Or the one page docs? Or something else?","updated_at":"2023-06-25T15:06:10Z","created_at":"2023-06-25T15:06:10Z","creator_user_login":"dummdidumm"}
{"number":8842,"comment_id":"1606223405","body":"I agree, Svelte 3 site was very simple and counterintuitive, now its harder to find what you are looking for especially if you are new to svelte.","updated_at":"2023-06-25T19:10:47Z","created_at":"2023-06-25T19:10:47Z","creator_user_login":"sherifsalah"}
{"number":8842,"comment_id":"1606247230","body":"In what way is it harder now? The side bar contains all the headlines of the sub pages which stayed largely the same compared to the V3 site and you can search across all pages using the search bar at the top.","updated_at":"2023-06-25T20:04:24Z","created_at":"2023-06-25T20:04:24Z","creator_user_login":"dummdidumm"}
{"number":8842,"comment_id":"1612571777","body":"> In what way is it harder now? The side bar contains all the headlines of the sub pages which stayed largely the same compared to the V4 site and you can search across all pages using the search bar at the top.\r\n\r\nThe documentation of the v4 version feels hidden, and it is very unfriendly to novices. Instead, I like the old version of the documentation. All apis are on the left. You can click on which api you want to view the examples. If you are a novice, it is difficult to see the current one. Get started, if I just plan to learn svelte today, I may be discouraged by the documentation. Documentation determines its first impression! ! !\r\n","updated_at":"2023-06-29T07:46:57Z","created_at":"2023-06-29T07:44:55Z","creator_user_login":"allmors"}
{"number":8842,"comment_id":"1612586271","body":"> In what way is it harder now? The side bar contains all the headlines of the sub pages which stayed largely the same compared to the V3 site and you can search across all pages using the search bar at the top.\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/93471589/8050ce5a-e793-4c75-bcef-ba1cefc9eec5)\r\nReact is very similar to the old version of svelte, showing the relevant API instead of categorizing it like the new version of svelte. I am glad that I have been exposed to the old version of svelte, so that I think it is very simple. If I am a Novice learning svelte, seeing this new version of the document, I may find it difficult!","updated_at":"2023-06-29T07:57:05Z","created_at":"2023-06-29T07:57:05Z","creator_user_login":"allmors"}
{"number":8987,"comment_id":"1639829520","body":"Context works for regular Svelte components used within a custom elements now (this is why the mentioned issue was closed), but it does not work across custom elements. There's no reliably way to make this happen, ultimately `getContext` is a Svelte feature, not a custom element feature. We should clarify this in the documentation.","updated_at":"2023-07-18T09:04:31Z","created_at":"2023-07-18T09:04:31Z","creator_user_login":"dummdidumm"}
{"number":8987,"comment_id":"1639844476","body":"@dummdidumm well i if im correct parent component gets mounted before the child ones when using slots right so this way there could be a message bus of some kind between them, not sure how vue for example did this is vue3 they also did something with there inject provide i think https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue im also on discord posted this also here https://discord.com/channels/457912077277855764/1130569409388367932 if you want a more active conversation thing is that its then not documented as good ","updated_at":"2023-07-18T09:21:47Z","created_at":"2023-07-18T09:14:14Z","creator_user_login":"pascalvos"}
{"number":8987,"comment_id":"1640643183","body":"i saw your pr, @dummdidumm looks nice the way you can extend now. \r\ni do think it is a missed chance to allow the use of svelte context or try to make them work somehow \r\ni know there not a part of the webcomponent spec, but svelte is a compiler driven framework and allows for these kind of abstraction to be more easly and some gaps or add some kind of abstraction same goes for #8963. \r\nthink there is a real big ask for custom components and being able to write them in a non class based syntax.\r\n","updated_at":"2023-07-18T17:16:16Z","created_at":"2023-07-18T17:16:16Z","creator_user_login":"pascalvos"}
{"number":8804,"comment_id":"1604276451","body":"Thank you for the quick response! Hopefully those patches address your review notes appropriately.\r\n\r\n> Since there's no previous issue for this: What's the use case for this feature?\r\n\r\nWe're implementing an internal GUI tool to modify Svelte files similar to #5972. This tool gets the AST with `parse` then mutates it, we're looking for a way to get that AST back into Svelte to compile .\r\n\r\nAlthough the AST isn't a public API, because `parse` exists at all, we'd expect there to be a way to \"unparse\".\r\n\r\n> As suggested it would be if compileAst would be called by compile if that doesn't result in more complex code.\r\n\r\nMy only concern with this is that we'd be always passing `null` as the second argument to `new Component`, unless we refactored out into a common function. We haven't seen anything affected by using `null` here, but haven't done any testing outside of our tool.","updated_at":"2023-06-23T13:19:16Z","created_at":"2023-06-23T13:19:16Z","creator_user_login":"benjamingwynn"}
{"number":8950,"comment_id":"1628819792","body":"Ah, didn't knew about this issue. I updated it to use `null` instead.","updated_at":"2023-07-10T11:58:49Z","created_at":"2023-07-10T11:58:49Z","creator_user_login":"ivanhofer"}
{"number":8950,"comment_id":"1629470189","body":"The types are more restrictive, but you wouldn't have been able to pass something that doesn't conform to these types without the code at least breaking at runtime I think? So maybe it's not really a breaking change?","updated_at":"2023-07-10T18:17:14Z","created_at":"2023-07-10T18:17:14Z","creator_user_login":"benmccann"}
{"number":8861,"comment_id":"1610240830","body":"Just tested this on my end and got the same results.\r\n\r\nOS: macOS 13.4 (22F66)\r\nBrowser: Firefox 13.4 (22F66) & Chrome Version 114.0.5735.133 (Official Build) (arm64)","updated_at":"2023-06-27T21:24:57Z","created_at":"2023-06-27T21:24:57Z","creator_user_login":"tuckerbeauchamp"}
{"number":8861,"comment_id":"1610352193","body":"I assume this is iframe-related, since those can often do weird things to the browser history stack.\r\n\r\nFWIW, does not seem related to the recent site redesign. The same issue appears on an [older site version](https://svelte-2qvbpiudg-svelte.vercel.app/) from Feb, before the site/REPL went through the refactor. I grabbed the vercel deployment link from [this commit](https://github.com/sveltejs/sites/commit/015cf906d524afc16fabc35958065fb0acadd874)","updated_at":"2023-06-27T23:21:18Z","created_at":"2023-06-27T23:21:18Z","creator_user_login":"geoffrich"}
{"number":8931,"comment_id":"1637516672","body":"Thanks a lot for this PR! Here are my thoughts on this üëá\r\n\r\nAs an \"example\" point of view, I find duplication much easier to parse, whereas the loop being more concise, would require thinking a bit more, which is not the point of the example. And these examples are primarily for the beginners, and we'd be making parsing harder for them. \r\n\r\nIf this was an example demonstrating the each block, it'd be fine. Overall, I'd say this change isn't an improvement, necessarily.","updated_at":"2023-07-17T07:28:13Z","created_at":"2023-07-17T07:28:13Z","creator_user_login":"PuruVJ"}
{"number":8837,"comment_id":"1605677076","body":"Can you change the indentation back to tabs please? It's difficult to tell what this changes when almost every line has changed.","updated_at":"2023-06-24T18:20:38Z","created_at":"2023-06-24T18:20:38Z","creator_user_login":"Conduitry"}
{"number":8837,"comment_id":"1627892985","body":"@KARTHIK07GUPTA can you explain why each change was made? I.e. please explain what the behavior is before and after and why you prefer the new behavior. If there's no response we'll go ahead and close this PR","updated_at":"2023-07-10T00:51:29Z","created_at":"2023-07-10T00:51:29Z","creator_user_login":"benmccann"}
{"number":8670,"comment_id":"1570547721","body":"When I [checked csstree](https://astexplorer.net/#/gist/3eaefd02f9aaa8a62e4c92fa0841cedb/fc3a2cd399bfe212338f0fe4c016370fe3796ae9) it seemed to already be supported. I think Svelte just needs to updated now.","updated_at":"2023-05-31T16:27:57Z","created_at":"2023-05-31T16:27:57Z","creator_user_login":"kwangure"}
{"number":8670,"comment_id":"1570561906","body":"It looks like `@layer` was added to Svelte in a one-line change here: https://github.com/sveltejs/svelte/pull/7514\r\n\r\nHopefully `@import layer()` wouldn't be much harder though I confess ignorance to this section of the code","updated_at":"2023-05-31T16:38:39Z","created_at":"2023-05-31T16:38:39Z","creator_user_login":"benmccann"}
{"number":8670,"comment_id":"1668822597","body":"I noticed that `css-tree` itself doesn't quite lex/parse the `@import` rule properly yet, as per this issue: https://github.com/csstree/csstree/issues/259","updated_at":"2023-08-08T02:38:39Z","created_at":"2023-08-08T02:38:39Z","creator_user_login":"ngtr6788"}
{"number":8784,"comment_id":"1605089550","body":"https://github.com/sveltejs/site-kit/pull/158\r\n\r\nhttps://github.com/sveltejs/site-kit/pull/159","updated_at":"2023-06-24T00:35:25Z","created_at":"2023-06-23T23:02:57Z","creator_user_login":"Loldator"}
{"number":8784,"comment_id":"1622731236","body":"console output dark mode fixed in https://github.com/sveltejs/sites/pull/517","updated_at":"2023-07-06T00:29:25Z","created_at":"2023-07-06T00:29:25Z","creator_user_login":"tanhauhau"}
{"number":8784,"comment_id":"1622774019","body":"what do you mean by the 3rd item: `can't switch tabs on ...` ?\r\n\r\nlooks okay to me right now","updated_at":"2023-07-06T01:20:43Z","created_at":"2023-07-06T01:20:43Z","creator_user_login":"tanhauhau"}
{"number":8784,"comment_id":"1636775973","body":"gentle ping for https://github.com/sveltejs/site-kit/pull/164","updated_at":"2023-07-15T13:54:34Z","created_at":"2023-07-15T13:54:34Z","creator_user_login":"zqianem"}
{"number":8663,"comment_id":"1569443323","body":"That would be a good addition, I guess.","updated_at":"2023-05-31T03:29:31Z","created_at":"2023-05-31T03:29:31Z","creator_user_login":"srikantgudi"}
{"number":8595,"comment_id":"1551790618","body":"What terminal are you using? Searching for that error message turned up this question on SO https://stackoverflow.com/questions/75750730","updated_at":"2023-05-17T17:22:32Z","created_at":"2023-05-17T17:22:32Z","creator_user_login":"Conduitry"}
{"number":8595,"comment_id":"1551974822","body":"I got the same error in Windows but it worked when I ran cmd as administrator outside vs code.","updated_at":"2023-05-17T20:02:48Z","created_at":"2023-05-17T20:02:48Z","creator_user_login":"raunakhajela"}
{"number":8595,"comment_id":"1560640424","body":"Was using Git Bash on windows, It worked on `Command Prompt` app. ","updated_at":"2023-05-24T08:04:33Z","created_at":"2023-05-24T08:04:33Z","creator_user_login":"broken-vagrant"}
{"number":8635,"comment_id":"1563277985","body":"Related issue: #4661 ","updated_at":"2023-05-25T17:41:58Z","created_at":"2023-05-25T17:41:58Z","creator_user_login":"karimfromjordan"}
{"number":8635,"comment_id":"1631237384","body":"Kinda related to #8538","updated_at":"2023-07-11T17:44:01Z","created_at":"2023-07-11T17:44:01Z","creator_user_login":"Tyrenn"}
{"number":8541,"comment_id":"1529712256","body":"I had write a REPL of this issue.\r\nhttps://svelte.dev/repl/437e5054e5694b449077c6ae9b9dbf91?version=3.58.0\r\nSince the fragment is an empty node, I'm not sure if this can be defined as a bug.","updated_at":"2023-05-01T13:28:54Z","created_at":"2023-05-01T13:28:54Z","creator_user_login":"xxkl1"}
{"number":8576,"comment_id":"1542504287","body":"This may or may not be related to https://github.com/sveltejs/svelte/issues/8351","updated_at":"2023-05-10T16:35:51Z","created_at":"2023-05-10T16:35:51Z","creator_user_login":"jrouleau"}
{"number":8522,"comment_id":"1517346887","body":"This seems to be slightly related to #8513 in which calls to `get_context` seem to be the culprit. Where `get_context` is called, it evaluates the `@const` directive, regardless of whether or not its contents are dirty, & without marking anything inside its contents as dirty.","updated_at":"2023-04-21T06:47:16Z","created_at":"2023-04-21T06:47:16Z","creator_user_login":"Sxxov"}
{"number":8495,"comment_id":"1505559489","body":"@jamesscottbrown is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22dd5d96c07fd0e8247859395e0c249cfde402cc91%22%7D%2C%22id%22%3A%22QmTvWDPPjW1ny5kGUx3ekQiFznyJdjaL3ZGP5BZYvqVWGh%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8495%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-12T16:15:43Z","created_at":"2023-04-12T16:15:43Z","creator_user_login":"vercel[bot]"}
{"number":8495,"comment_id":"1637530012","body":"Hi! Could you resolve merge conflicts? The file structure has changed, so you may wanna move these changes to `documentation/docs/02-template-syntax/07-special-elements.md` üòÅ ","updated_at":"2023-07-17T07:39:25Z","created_at":"2023-07-17T07:39:25Z","creator_user_login":"PuruVJ"}
{"number":8401,"comment_id":"1476572267","body":"~This already works. If not, please provide a [REPL](https://svelte.dev/repl/hello-world). Using the comma operator turns `(variable1, variable2, variable3)` into a single expression and the block should update when the expression (any of the variables) changes.~\r\n\r\nI'm sorry, I was confused. See the linked issue below.","updated_at":"2023-03-20T16:39:36Z","created_at":"2023-03-20T16:36:08Z","creator_user_login":"Prinzhorn"}
{"number":8401,"comment_id":"1476574554","body":"Also https://github.com/sveltejs/svelte/issues/7793","updated_at":"2023-03-20T16:37:40Z","created_at":"2023-03-20T16:37:40Z","creator_user_login":"Prinzhorn"}
{"number":8401,"comment_id":"1476757765","body":"Your REPL in that issue seems interesting, we could do that until this is implemented","updated_at":"2023-03-20T18:46:47Z","created_at":"2023-03-20T18:46:47Z","creator_user_login":"Addeuz"}
{"number":8401,"comment_id":"1483411933","body":"This seems to works with the following:\r\n\r\n```svelte\r\n{#key [variable1, variable2, variable3]}\r\n  ...\r\n{/key}\r\n```","updated_at":"2023-03-24T21:12:52Z","created_at":"2023-03-24T21:12:52Z","creator_user_login":"andirady"}
{"number":8529,"comment_id":"1522687689","body":"I tried testing similar markup in React JSX instead of Svelte + `jsx-eslint`  (which Svelte's a11y checks are based on), and this is what I see \r\n![image](https://user-images.githubusercontent.com/88808276/234452503-c4610ba5-4425-4786-89b8-bf58db71189c.png)\r\nYou are correct for seeing that `menu`'s implicit role is `list`. As for the `no-noninteractive-element-to-interactive-role`, I'm not too sure what to do, because the statement seems a bit contradictory, doesn't it? Maybe we could ask `jsx-eslint`?","updated_at":"2023-04-26T02:43:40Z","created_at":"2023-04-26T02:42:23Z","creator_user_login":"ngtr6788"}
{"number":8529,"comment_id":"1522696710","body":"> I tried testing similar markup in React JSX instead of Svelte + `jsx-eslint` (which Svelte's a11y checks are based on), and this is what I see ![image](https://user-images.githubusercontent.com/88808276/234452503-c4610ba5-4425-4786-89b8-bf58db71189c.png) You are correct for seeing that `menu`'s implicit role is `list`. As for the `no-noninteractive-element-to-interactive-role`, I'm not too sure what to do, because the statement seems a bit contradictory, doesn't it? Maybe we could ask `jsx-eslint`?\r\n\r\nyeah, I'm not very familiar with it but as a general thought I think that as long as a role is marked as \"permitted\" on MDN, I don't see why eslint should tell me not to use it and MDN doesn't distinguish between interactive and non-interactive roles.","updated_at":"2023-04-26T02:56:31Z","created_at":"2023-04-26T02:56:01Z","creator_user_login":"raythurnevoid"}
{"number":8446,"comment_id":"1499513506","body":"It looks like Svelte somehow removes the `value` property from the input element. (in dom.ts L519)\r\n\r\nhttps://github.com/sveltejs/svelte/blob/d42ca041dd7817ae772a9da2d0aea56f557088d1/src/runtime/internal/dom.ts#L507-L524\r\n\r\nThis causes the DevTools warning. `<input type=\"color\">` only accepts values in `#rrggbb` format and do not accept empty or null which causes validation errors.\r\nhttps://html.spec.whatwg.org/multipage/input.html#color-state-(type=color)\r\n\r\nI guess similar warnings happen to `<input type=\"datetime\">` or some types that do not accept empty strings.","updated_at":"2023-04-06T19:23:18Z","created_at":"2023-04-06T19:23:18Z","creator_user_login":"myakura"}
{"number":8446,"comment_id":"1646772304","body":"I got the same issue, even if I set the proper value for init `bind`. ","updated_at":"2023-07-23T07:50:54Z","created_at":"2023-07-23T07:50:54Z","creator_user_login":"stalkerg"}
{"number":8433,"comment_id":"1699431156","body":"Can reproduce, having the exact same bug with Tiptap in my setup, the transition jumps when I try to collapse or open a text editor","updated_at":"2023-08-30T15:48:49Z","created_at":"2023-08-30T15:48:49Z","creator_user_login":"adminorcail"}
{"number":8459,"comment_id":"1500210472","body":"The bug only appears with the `then` and `error` blocks, but not in the `pending` block. Replacing a pending promise with another pending promise does not unmount and remount the pending block.","updated_at":"2023-04-07T11:40:11Z","created_at":"2023-04-07T11:40:11Z","creator_user_login":"lovasoa"}
{"number":8459,"comment_id":"1500265577","body":"I wrote a small component to use instead of the native `{#await}` that works around this problem\r\n\r\n```svelte\r\n<script>\r\n\tconst PENDING = {};\r\n\tlet data = PENDING;\r\n\tlet error = PENDING;\r\n\t\r\n\texport let promise;\r\n\t\r\n\tasync function onChange() {\r\n\t\t[data, error] = await Promise.race([promise, PENDING]).then(\r\n\t\t\td => [d, PENDING],\r\n\t\t\te => [PENDING, e],\r\n\t\t);\r\n\t\tif (data === PENDING && error === PENDING) promise.then(onChange, onChange)\r\n\t}\r\n\r\n\t$: onChange(promise)\r\n</script>\r\n\r\n{#if data !== PENDING}\r\n\t<slot {data} />\r\n{:else if error !== PENDING}\r\n\t<slot name=\"error\" {error} />\r\n{:else}\r\n\t<slot name=\"pending\"/>\r\n{/if}\r\n```\r\n\r\nIt can be used like so\r\n\r\n```svelte\r\n<Await {promise} let:data>\r\n\tResolved with {data}\r\n\t<div slot=\"pending\">Pending...</div>\r\n\t<div slot=\"error\" let:error>Error: {error}</div>\r\n</Await>\r\n```","updated_at":"2023-04-07T12:57:39Z","created_at":"2023-04-07T12:57:10Z","creator_user_login":"lovasoa"}
{"number":8443,"comment_id":"1492905162","body":"@adiguba is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22668ed8cda83507d9d49818803ca2d7081c465609%22%7D%2C%22id%22%3A%22QmQ1q1B7okf1oYex1GMwQY5dRUGrjM65Mnm25MyAFJWAxA%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8443%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-01T10:01:28Z","created_at":"2023-04-01T10:01:28Z","creator_user_login":"vercel[bot]"}
{"number":8316,"comment_id":"1442680798","body":"Note that you cannot reset the selected files with `null` according to [the spec](https://html.spec.whatwg.org/multipage/input.html#dom-input-files):\r\n\r\n> On setting, it must run these steps:\r\n> - If the IDL attribute [does not apply](https://html.spec.whatwg.org/multipage/input.html#do-not-apply) or the given value is null, then return.\r\n> - Replace the element's [selected files](https://html.spec.whatwg.org/multipage/input.html#concept-input-type-file-selected) with the given value.\r\n\r\nBut it looks like the binding is only one-way (read). Related:\r\n- https://github.com/sveltejs/svelte/issues/3828\r\n\r\nWhere Rich Harris stated:\r\n> Svelte shouldn't attempt to assign to `input.files`\r\n\r\nIt should, though. The spec does not define the attribute as `readonly`.\r\n","updated_at":"2023-02-24T01:50:38Z","created_at":"2023-02-24T01:49:59Z","creator_user_login":"brunnerh"}
{"number":8367,"comment_id":"1462706514","body":"Not every special character is allowed:\r\n> only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_)\r\n\r\n`/` is not listed explicitly and its code `0x2f` is lower than the `0xA0` cutoff.\r\n\r\nThough this only applies to unescaped characters in CSS *rules*; as far as I know there is no restriction on the characters used in the class *attribute* and if the identifier in the CSS is escaped correctly, the class is valid.","updated_at":"2023-04-06T11:17:39Z","created_at":"2023-03-09T20:13:12Z","creator_user_login":"brunnerh"}
{"number":8367,"comment_id":"1516362102","body":"Would allowing the following syntax be something to consider?\r\n\r\n```svelte\r\nclass:\"w-1/2\"={current === 'foo'}\r\n```\r\n\r\nQuotes around the classname","updated_at":"2023-04-20T13:47:22Z","created_at":"2023-04-20T13:47:12Z","creator_user_login":"MathiasWP"}
{"number":8332,"comment_id":"1446387570","body":"Interesting.\r\n\r\n\r\nAnother solution would be to have a function similar to onMount() :\r\n\r\n```js\r\nonEventHandler( (eventName) => {\r\n\t// This code is executed when the first handler for 'eventName' is added\r\n\t\r\n\treturn () => {\r\n\t\t// This code is executed when the last handler for 'eventName' is removed\r\n\t}\r\n});\r\n```","updated_at":"2023-02-27T14:09:37Z","created_at":"2023-02-27T14:09:37Z","creator_user_login":"adiguba"}
{"number":8343,"comment_id":"1451807737","body":"workaround for svelte-inspector via dynamicCompileOptions\r\n```js\r\n// svelte.config.js\r\nimport adapter from '@sveltejs/adapter-auto';\r\nimport { vitePreprocess } from '@sveltejs/kit/vite';\r\nconst cwd = process.cwd();\r\n/** @type {import('@sveltejs/kit').Config} */\r\nconst config = {\r\n    preprocess: vitePreprocess(),\r\n    vitePlugin: {\r\n        experimental: {\r\n            inspector: true,\r\n            dynamicCompileOptions({filename}) {\r\n                return {\r\n                    filename: !filename.startsWith(cwd) ? `/${filename}` : filename\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    kit: {\r\n        adapter: adapter()\r\n    }\r\n};\r\n\r\nexport default config;\r\n```","updated_at":"2023-03-02T12:41:06Z","created_at":"2023-03-02T12:41:06Z","creator_user_login":"dominikg"}
{"number":8346,"comment_id":"1457841850","body":"This warning reproduces without TypeScript and ESLint.\r\nI think it's a compiler warning.\r\n\r\n[https://svelte.dev/repl/3b718c7376f34cb49b15d11b67314a0b?version=3.55.1](https://svelte.dev/repl/3b718c7376f34cb49b15d11b67314a0b?version=3.55.1)\r\n\r\nIt's possible to add exceptions\r\n`<!-- svelte-ignore missing-declaration -->`\r\nbut it's very inconvenient if there are many entries.","updated_at":"2023-03-07T09:32:00Z","created_at":"2023-03-07T09:32:00Z","creator_user_login":"mench32"}
{"number":8346,"comment_id":"1457907843","body":"+1\r\nI have the same issue when using window variables","updated_at":"2023-03-07T10:15:25Z","created_at":"2023-03-07T10:15:25Z","creator_user_login":"vasilynikulichev"}
{"number":8346,"comment_id":"1457943462","body":"I looked at the source code, and I don't think it's easy to solve this problem.\r\nThe compiler can't know that the variable exists.\r\nI found a list of global variables in `src/compiler/utils/globals.ts`\r\n\r\nIt would be possible to expand the list of global variables from a compilerOptions.\r\n\r\n```JavaScript\r\nsvelte({\r\n    ...\r\n    compileOptions: {\r\n        globals: ['test', 'fn']\r\n    }\r\n    ...\r\n})\r\n```","updated_at":"2023-03-07T10:48:18Z","created_at":"2023-03-07T10:41:45Z","creator_user_login":"mench32"}
{"number":8313,"comment_id":"1445311536","body":"I just had another thought about this. \r\n\r\nInstead of magically giving the developer the \"type\" of the form, consider the opposite. Passing an interface to a form that then gets enforced. This would probably end up less verbose and be a lot closer to the mental model developers have while writing code.","updated_at":"2023-02-26T09:46:38Z","created_at":"2023-02-26T09:46:38Z","creator_user_login":"LorisSigrist"}
{"number":8313,"comment_id":"1608055170","body":"Svelte super forms looks promising.\nhttps://superforms.rocks/","updated_at":"2023-06-26T18:52:30Z","created_at":"2023-06-26T18:52:30Z","creator_user_login":"dreitzner"}
{"number":8358,"comment_id":"1458832174","body":"I copy/paste my response from discord, for information :\r\n\r\nLooking at the generated code we can see that the update code has a strange condition :\r\n```javascript\r\n    if (!current || dirty & /*disabled*/ 1 && div_attr__value !== (div_attr__value = /*disabled*/ ctx[0] ? 'foo' : 'bar')) {\r\n        attr(div, \"attr1\", div_attr__value);\r\n    }\r\n```\r\n\r\nThis is a condition of the form `A || B && C`, and `A` has a precedence.\r\nIf `A` is true the rest of the instruction is not executed.\r\n\r\nHere current is never assigned, so `!current` is always true.\r\nSo the \"attr1\" is updated with the variable `div_attr__value`, but this variable is not updated (because the update is done on the C part of the condition)","updated_at":"2023-03-07T20:32:11Z","created_at":"2023-03-07T20:32:11Z","creator_user_login":"adiguba"}
{"number":8320,"comment_id":"1443716048","body":"I was able to work-around the issue in my project by consolidating all the lines of the {#each} blocks into a single line without any inline spaces, then letting prettier format it into multiple lines. The result looks like this:\r\n\r\n```ts\r\n{#each searchGroups as searchGroup}<div>\r\n\t\t<button on:click={searchGroup.handleClickAll}>All {searchGroup.name}</button\r\n\t\t>{#each searchGroup.engines as engine}<button\r\n\t\t\t\tclass=\"secondary\"\r\n\t\t\t\ton:click={engine.clickHandler}\r\n\t\t\t\tdisabled={engine.getUrlTemplate(query) === ''}>{engine.name}</button\r\n\t\t\t>{/each}\r\n\t</div>{/each}\r\n\r\n```\r\n\r\nIt's harder to read, but the layout no longer shifts.\r\n\r\nRelevant commit: https://github.com/Leftium/multi-launch/commit/f50a91149d7ecd9a36e7faf463659a092ea09184","updated_at":"2023-02-23T17:26:04Z","created_at":"2023-02-23T17:24:11Z","creator_user_login":"Leftium"}
{"number":8293,"comment_id":"1438040626","body":"I figure this is related to [#8150](https://github.com/sveltejs/svelte/issues/8150), [#8035](https://github.com/sveltejs/svelte/issues/8035) and [#8232](https://github.com/sveltejs/svelte/issues/8232)\r\n","updated_at":"2023-02-21T08:30:41Z","created_at":"2023-02-21T08:30:31Z","creator_user_login":"torrfura"}
{"number":8301,"comment_id":"1528758701","body":"+ 1\r\n","updated_at":"2023-04-29T10:59:53Z","created_at":"2023-04-29T10:59:53Z","creator_user_login":"gi4no"}
{"number":8305,"comment_id":"1439307721","body":"MEMO: 3.55.0 doesn't occurs, but 3.55.1 occurs.","updated_at":"2023-02-22T01:24:51Z","created_at":"2023-02-22T01:24:51Z","creator_user_login":"baseballyama"}
{"number":8340,"comment_id":"1448771030","body":"Someone is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22af61aa9ac9a74e0e2cad6caaa8e5cdd341152569%22%7D%2C%22id%22%3A%22QmQ2p1BVuQyoTmcGnwpN8mRvdRHRfrjWbW7gsJqBeKaUFs%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8340%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-02-28T19:48:57Z","created_at":"2023-02-28T19:48:57Z","creator_user_login":"vercel[bot]"}
{"number":8340,"comment_id":"1449750819","body":"Could you give an example where that happens, and why it's not circumventable by just not setting that property as a dev?","updated_at":"2023-03-01T10:00:13Z","created_at":"2023-03-01T09:59:40Z","creator_user_login":"dummdidumm"}
{"number":8202,"comment_id":"1385277831","body":"Btw here's a workaround for the [repl case](https://svelte.dev/repl/54395e0587fc49cebf931d11f57f22dc?version=3.55.1). Remove the `Title` component manually before the `Head` is removed.\r\n\r\n```svelte\r\n<!-- Head.svelte -->\r\n<script>\r\n\timport Title from './Title.svelte'\r\n\timport {onDestroy} from 'svelte'\r\n\t\r\n\texport let title = ''\r\n\t\r\n\tlet enabled = true\r\n\tonDestroy(() => enabled = false)\r\n</script>\r\n\r\n<svelte:head>\r\n\t{#if enabled}\r\n\t<Title {title} />\r\n\t{/if}\r\n\t<meta name=\"test\">\r\n</svelte:head>\r\n```\r\n\r\nTrying the same cleanup inside `Title` doesn't seem to help, even though `onDestroy` is called.","updated_at":"2023-01-17T11:27:04Z","created_at":"2023-01-17T11:22:50Z","creator_user_login":"tontonsb"}
{"number":8298,"comment_id":"1681370298","body":"More info on `invalidate` on StackOverflow:\r\nhttps://stackoverflow.com/questions/76915395/what-is-the-second-invalidate-argument-to-readable-subscribe\r\n\r\nSeems like an implementation detail to fix glitchy derived stores. Is there any use case for the public? If not then it should be from the docs, right?","updated_at":"2023-08-16T22:55:46Z","created_at":"2023-08-16T22:54:53Z","creator_user_login":"samal-rasmussen"}
{"number":8279,"comment_id":"1427025876","body":"Or maybe a non-interactive element should be used because this could be simplified to:\r\n```svelte\r\n<button on:click={toggle}>\r\n  {user.loggedIn ? 'Log out' : 'Log in'}\r\n</button>\r\n```\r\n\r\nWhich has no `#if` at all.","updated_at":"2023-02-12T12:54:11Z","created_at":"2023-02-12T12:54:11Z","creator_user_login":"brunnerh"}
{"number":8279,"comment_id":"1430691117","body":"> non-interactive element\r\n\r\nWhich for Real World code, a blog post, or whatever, that would be ideal.\r\n\r\nBut for THIS suggestion, **no**.  I'm changing a code example for `#if :else`, not ternary \r\nYou might have missed the URL I listed ;)","updated_at":"2023-02-15T03:12:36Z","created_at":"2023-02-15T03:12:36Z","creator_user_login":"tomByrer"}
{"number":8279,"comment_id":"1431013237","body":"I have not, my point was that the example should use code that makes sense, and using `#if :else` to switch out text is overkill as a ternary could be used. As the tutorial is about `:else` there should be a good reason to use it.\r\n\r\nHence my suggestion to use other elements and leave the `#if :else` around the elements.","updated_at":"2023-02-15T09:31:50Z","created_at":"2023-02-15T09:31:50Z","creator_user_login":"brunnerh"}
{"number":8216,"comment_id":"1398823461","body":"This is a limitation within Svelte itself ‚Äî we need to subscribe to the store in order to read the value, but then unsubscribe to avoid memory leaks. I feel like this could be solved with better coordination between the rendering and subscription, but that's something that would need to happen in Svelte so I'll transfer this issue to that repo.","updated_at":"2023-01-20T19:13:24Z","created_at":"2023-01-20T19:13:24Z","creator_user_login":"Rich-Harris"}
{"number":8194,"comment_id":"1382058221","body":"Transferred to `sveltejs/svelte`","updated_at":"2023-01-13T16:02:58Z","created_at":"2023-01-13T16:02:58Z","creator_user_login":"Rich-Harris"}
{"number":8194,"comment_id":"1489523482","body":"Will moving svelte:head to the end of the file affect performance? I am using partytown for google analytics and am trying to retain as much performance as possible.","updated_at":"2023-03-30T00:38:48Z","created_at":"2023-03-30T00:38:48Z","creator_user_login":"jcsmithf22"}
{"number":8164,"comment_id":"1370374229","body":"I don't remember why we were doing it this way. To support older browsers without the `URL` global I'm guessing? Do you get the same behavior if you compare `element_src === new URL(url, document.location).href` (and is that appreciably faster)? Maybe we could have two versions of this code and use the `URL` global if it's available.","updated_at":"2023-01-04T00:55:30Z","created_at":"2023-01-04T00:55:30Z","creator_user_login":"Conduitry"}
{"number":8164,"comment_id":"1370637376","body":"we should try to avoid doing any assignments that are not needed in this case. If this is only relevant for relative/absolute conversion, testing that url is indeed relative and does not start with a protocol would be the first thing that comes to my mind to prevent this. Using URL instead of a is just a slight difference in implementation, which is slightly slower according to this comment: https://github.com/sveltejs/svelte/pull/6449#issuecomment-876705198\r\n","updated_at":"2023-01-04T08:56:00Z","created_at":"2023-01-04T08:56:00Z","creator_user_login":"dominikg"}
{"number":8095,"comment_id":"1416811054","body":"I've tried with 3 different browsers (Chrome, Edge and Firefox), all results in undefined rather than null","updated_at":"2023-02-04T17:49:13Z","created_at":"2023-02-04T17:49:13Z","creator_user_login":"phamduylong"}
{"number":8095,"comment_id":"1416880782","body":"It's undefined initially, but when emptying the input, it becomes `null`. Updated the REPL to make that clearer","updated_at":"2023-02-05T00:05:58Z","created_at":"2023-02-05T00:05:58Z","creator_user_login":"probablykasper"}
{"number":8102,"comment_id":"1345539066","body":"What global variables? If you're bundling to ESM, you're expected to load it as `<script type=\"module\">`, which means that top-level variables in the script won't define global variables. If you want to load it as just `<script>`, then you need to bundle to an IIFE to avoid defining global variables.","updated_at":"2022-12-11T12:15:22Z","created_at":"2022-12-11T12:15:22Z","creator_user_login":"Conduitry"}
{"number":8102,"comment_id":"1497583447","body":"@Conduitry  this is what i am doing for a while without any issues with 2 svelte apps mounted to the same root html file. i am sure this is not a svelte issue but some problem with the bundler setup","updated_at":"2023-04-05T14:26:36Z","created_at":"2023-04-05T14:26:36Z","creator_user_login":"lucidNTR"}
{"number":8073,"comment_id":"1335011149","body":"note that vite-plugin-svelte is going to resolve this problem by passing in a filename normalized to vite root. Other bundler plugins however might still be affected by this.\r\n\r\n","updated_at":"2022-12-02T09:59:10Z","created_at":"2022-12-02T09:59:10Z","creator_user_login":"dominikg"}
{"number":8066,"comment_id":"1332718047","body":"> all of my components end up being destroyed and then recreated\r\n\r\nThat just sounds like a plain bug.\r\n","updated_at":"2022-11-30T20:47:41Z","created_at":"2022-11-30T20:47:41Z","creator_user_login":"brunnerh"}
{"number":8086,"comment_id":"1337745532","body":"Currently working around it by surrounding all of my animated elements with {#key} so they get recreated.","updated_at":"2022-12-05T17:06:22Z","created_at":"2022-12-05T17:06:22Z","creator_user_login":"Roboroads"}
{"number":8052,"comment_id":"1527188085","body":"We are facing a similar issue here. The provided REPL above already demonstrates it well.\r\nI tried to debug my way through this problem. My hunch is that something here could be the culprit:\r\nhttps://github.com/sveltejs/svelte/blob/a74caf1381f4007a33bdeac43c3562c366c1a3a8/src/runtime/internal/keyed_each.ts#L44-L50\r\nIn line 45, `create_each_block` is called, which will in the REPL eventually call that `console.log(4` with that faulty undefined value.\r\nI'm new to the internals of Svelte, so I'd like to apologize in advance for not knowing how this should work.\r\nThe cited code snippet is in the `update_keyed_each` function here. This can be called from `flush`, inside that while loop:\r\nhttps://github.com/sveltejs/svelte/blob/a74caf1381f4007a33bdeac43c3562c366c1a3a8/src/runtime/internal/scheduler.ts#L72 \r\nAt this point Svelte hasn't finished updating everything, so we're in a possibly invalid intermediate state. Is it ok to call user-provided code at this point? `create_each_block ` does exactly that. I guess that user-provided code like that `console.log` would not expect to be called when the variables are in some intermediate state.\r\nWould it make sense to defer that call to `create_each_block ` until all the updates are through? I saw @tanhauhau already doing something in that direction. Would there be a good reason not to defer it?\r\nHope this helps!","updated_at":"2023-04-28T08:31:59Z","created_at":"2023-04-28T08:31:59Z","creator_user_login":"berndfuhrmann"}
{"number":7954,"comment_id":"1280031195","body":"Hello,\r\n\r\nIndeed, action and class modifier can be very convenient.\r\n\r\nOn the other hand for style, I am more skeptical for :before and :hover.\r\nThere are not concrete elements, and therefore their styles cannot be modified by JavaScript like normal √©l√©ments.\r\nIt can be possible in an 'hacky' way by creating a stylesheets, but this can have edge effets... \r\n\r\n=> In this case I think it's preferable to use a class or CSS variable.\r\n\r\nThe style|important modifiers is  more useful, and precisely it has just been implemented : https://github.com/sveltejs/svelte/pull/7489\r\n\r\n\r\n","updated_at":"2022-10-16T18:57:58Z","created_at":"2022-10-16T18:57:58Z","creator_user_login":"adiguba"}
{"number":7954,"comment_id":"1280055857","body":"@adiguba Oh, I missed #7489. Thank you for letting me know!","updated_at":"2022-10-16T20:57:21Z","created_at":"2022-10-16T20:57:21Z","creator_user_login":"seo-rii"}
{"number":7991,"comment_id":"1301173156","body":"FYI only seems to happen in dev mode, running build in kit for example fixes the issue.","updated_at":"2022-11-02T20:11:46Z","created_at":"2022-11-02T20:11:29Z","creator_user_login":"rob-balfre"}
{"number":7991,"comment_id":"1340237761","body":"Yes just noticed this. Have a lot of duplicate class names now being rendered.\r\nIn one case this is causing the browser to crash.","updated_at":"2022-12-07T01:11:27Z","created_at":"2022-12-07T01:11:27Z","creator_user_login":"subpx"}
{"number":7980,"comment_id":"1293582175","body":"Related: https://github.com/sveltejs/rfcs/pull/60","updated_at":"2022-10-27T14:08:32Z","created_at":"2022-10-27T14:08:32Z","creator_user_login":"brunnerh"}
{"number":7980,"comment_id":"1293884088","body":"Didn't see this before.\r\nShould I close this ?","updated_at":"2022-10-27T18:03:40Z","created_at":"2022-10-27T18:03:40Z","creator_user_login":"adiguba"}
{"number":7917,"comment_id":"1272145802","body":"It seems to have something to do with if the spring still has energy when you do the hard set, then the issue occurs. So to repro you'll need to click kind of quickly back and forth.","updated_at":"2022-10-07T22:57:37Z","created_at":"2022-10-07T22:57:37Z","creator_user_login":"johnnysprinkles"}
{"number":7972,"comment_id":"1289162539","body":"There is existing discussion for this sort of thing over in https://github.com/sveltejs/rfcs/pull/34","updated_at":"2022-10-24T14:53:49Z","created_at":"2022-10-24T14:53:49Z","creator_user_login":"Conduitry"}
{"number":7900,"comment_id":"1261552203","body":"Pretty sure the transition function call happens before the onMount:\r\nhttps://svelte.dev/repl/ff7585c7987f4100867655a1cc475819?version=3.18.1","updated_at":"2022-09-28T23:04:37Z","created_at":"2022-09-28T23:04:37Z","creator_user_login":"jrmoynihan"}
{"number":7776,"comment_id":"1209993926","body":"This would really make a big difference for me, having the ability to pass unique classNames from parent to child components would be a big win","updated_at":"2022-08-09T23:34:06Z","created_at":"2022-08-09T23:34:06Z","creator_user_login":"ramiroaisen"}
{"number":7379,"comment_id":"1137473444","body":"I'm having this same issue with trying to use web components in a SvelteKit app, that are built with StencilJS.","updated_at":"2022-05-25T15:59:26Z","created_at":"2022-05-25T15:59:26Z","creator_user_login":"tytusplanck-8451"}
{"number":7465,"comment_id":"1114200696","body":"@smithliam I want the style not to be visible outside the source component and the target component. It should not leak either up or down - in harmony with the Svelte idea.\r\n\r\nEDIT: Oh, I see you may have deleted the comment.","updated_at":"2022-05-01T10:56:58Z","created_at":"2022-05-01T10:55:19Z","creator_user_login":"lukaszpolowczyk"}
{"number":7342,"comment_id":"1257215951","body":"I too experience this same issue with the `<video>` element and its `buffered` property.","updated_at":"2022-09-25T15:13:57Z","created_at":"2022-09-25T15:13:57Z","creator_user_login":"davidfrp"}
{"number":7342,"comment_id":"1474873790","body":"Same here. It's easy to work around it, the extra line is yet annoying. I created this REPL https://svelte.dev/repl/38429f4787f04e6ea4ebf2246becd289?version=3.57.0","updated_at":"2023-03-18T15:05:22Z","created_at":"2023-03-18T15:05:22Z","creator_user_login":"anito"}
{"number":7227,"comment_id":"1030668254","body":"Firefox on Ubuntu behaves correctly, Chromium behaves as you describe\r\n\r\nhttps://user-images.githubusercontent.com/679144/152652901-b8712264-6e6e-48b5-95f2-97a6b59076ca.mp4\r\n\r\n\r\n","updated_at":"2022-02-05T17:47:54Z","created_at":"2022-02-05T17:47:54Z","creator_user_login":"Prinzhorn"}
{"number":7236,"comment_id":"1033481507","body":"The iframe hack to measure the size adds `position: relative`. A workaround would be to add an additional wrapper element (or manually mess with z-index). Until ResizeObserver is implemented to replace the current solution.\r\n\r\nAnother one for the collection\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4233\r\nhttps://github.com/sveltejs/svelte/issues/6127\r\nhttps://github.com/sveltejs/svelte/issues/6708\r\nhttps://github.com/sveltejs/svelte/issues/7099\r\nhttps://github.com/sveltejs/svelte/pull/5963","updated_at":"2022-02-09T08:29:20Z","created_at":"2022-02-09T08:26:40Z","creator_user_login":"Prinzhorn"}
{"number":7266,"comment_id":"1041480930","body":"i have updated the description and added a example repo, because my original description was wrong i think","updated_at":"2022-02-16T13:16:03Z","created_at":"2022-02-16T13:16:03Z","creator_user_login":"QuickMick"}
{"number":7243,"comment_id":"1035951320","body":"A quick DuckDuckGo search for the `NS_ERROR_DOM_MEDIA_METADATA_ERR` code led me to https://bugzilla.mozilla.org/show_bug.cgi?id=1377278, which is about invalid and/or unsupported video formats. One possible cause for your issue that I can think of is that perhaps the Android device you're playing the video on is an older device that doesn't support the AV1 codec. https://en.wikipedia.org/wiki/AV1 says that AV1 is supported starting from Android 10. If your device is running Android version 9 or earlier, it's possible that that's the cause.\r\n\r\nWhatever the root cause of the issue, though, I don't think it's a bug in Svelte. https://github.com/mozilla-mobile/fenix/issues/23675 might be the right place to report this bug, rather than here.","updated_at":"2022-02-11T07:45:30Z","created_at":"2022-02-11T07:45:30Z","creator_user_login":"rmunn"}
{"number":7243,"comment_id":"1035984130","body":"> A quick DuckDuckGo search for the `NS_ERROR_DOM_MEDIA_METADATA_ERR` code led me to https://bugzilla.mozilla.org/show_bug.cgi?id=1377278, which is about invalid and/or unsupported video formats. One possible cause for your issue that I can think of is that perhaps the Android device you're playing the video on is an older device that doesn't support the AV1 codec. https://en.wikipedia.org/wiki/AV1 says that AV1 is supported starting from Android 10. If your device is running Android version 9 or earlier, it's possible that that's the cause.\n> \n> Whatever the root cause of the issue, though, I don't think it's a bug in Svelte. https://github.com/mozilla-mobile/fenix/issues/23675 might be the right place to report this bug, rather than here.\n\nAs already mentioned in my first comment does work inside `chrome` and `Opera` on same device which runs on Android 9 but issue with `Firefox` only so it might be an issue with `Firefox` itself I have raised the issue on Android Firefox github as well","updated_at":"2022-02-11T08:41:58Z","created_at":"2022-02-11T08:41:40Z","creator_user_login":"santhoshnumberone"}
{"number":7207,"comment_id":"1033468606","body":"looks like one test took too long to execute... can't find a \"retry\" button :/ ","updated_at":"2022-02-09T08:10:34Z","created_at":"2022-02-09T08:10:34Z","creator_user_login":"simeydotme"}
{"number":7207,"comment_id":"1065951145","body":"I rebased to try and trigger the CI again, as last time it timed-out on an osx test, and I couldn't re-run the tests ... and I wondered if the failed CI meant the PR would be glossed over during review :)","updated_at":"2022-03-12T19:43:24Z","created_at":"2022-03-12T19:43:24Z","creator_user_login":"simeydotme"}
{"number":7207,"comment_id":"1114694941","body":"oh cool the checks pass now... I guess the failing tests were fixed in `main` :) ","updated_at":"2022-05-02T10:15:07Z","created_at":"2022-05-02T10:15:07Z","creator_user_login":"simeydotme"}
{"number":7143,"comment_id":"1152654991","body":"\\~.svelte, /\\~/index.svelte also cause this errror","updated_at":"2022-06-10T19:09:32Z","created_at":"2022-06-10T19:09:22Z","creator_user_login":"mavdotjs"}
{"number":7143,"comment_id":"1463039800","body":"#7664 has been released in 3.56.0, but I'm not entirely certain that's resolved this issue. Reopening for the time being.","updated_at":"2023-03-10T00:42:01Z","created_at":"2023-03-10T00:42:01Z","creator_user_login":"Conduitry"}
{"number":6553,"comment_id":"900994276","body":"Not sure if I understand completely what is going on but I made some changes to your repl, does this look like what you're trying to achieve?\r\n\r\nhttps://svelte.dev/repl/acbe3a6893614010a92305714a7a450c?version=3.40.0","updated_at":"2021-08-18T10:15:24Z","created_at":"2021-08-18T10:15:24Z","creator_user_login":"brgrz"}
{"number":6553,"comment_id":"901219630","body":"@brgrz if you delete the second `h4` you'll see that the default slot doesn't apply.","updated_at":"2021-08-18T15:39:54Z","created_at":"2021-08-18T15:39:54Z","creator_user_login":"ctwheels"}
{"number":6708,"comment_id":"912982548","body":"For any passerbys, you may replace `visibility: hidden/collapsed` with:\r\n\r\n```css\r\nopacity: 0;\r\npointer-events: none;\r\n```","updated_at":"2021-09-04T14:22:23Z","created_at":"2021-09-04T14:22:23Z","creator_user_login":"Sxxov"}
{"number":6708,"comment_id":"913011078","body":"Another edge case, related\r\n\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1295245\r\nhttps://github.com/sveltejs/svelte/issues/4233\r\nhttps://github.com/sveltejs/svelte/issues/6127\r\nhttps://github.com/sveltejs/svelte/pull/5524","updated_at":"2021-09-04T17:38:44Z","created_at":"2021-09-04T17:37:25Z","creator_user_login":"Prinzhorn"}
{"number":6708,"comment_id":"913040214","body":"> https://bugzilla.mozilla.org/show_bug.cgi?id=1295245\r\n\r\n\"Opened 5 years ago\"\r\n\r\nThe bug's old enough to go to kindergarten. I guess we'll just have to deal with it for now.\r\n","updated_at":"2021-09-04T21:00:35Z","created_at":"2021-09-04T21:00:35Z","creator_user_login":"Sxxov"}
{"number":6763,"comment_id":"926702408","body":"My discoveries:\r\n\r\n* Clicking on the Confirm button three times causes all three of the added components to eventually be removed.\r\n* Clicking on Open once, then Confirm once, then clicking on Open again, causes the \"Bar\" component to be *replaced* by Foo, so that there are two Foo components open. And then you have to click Confirm three more times, four in total, and then all four components (two Foos, a Bar, and another Foo) are removed.\r\n* If you add a `console.log` call to the `cleanup()` function and then click Confirm three times, you'll see that `cleanup()` is called three times, at the time you'd expect. If you add an `onDestroy` call to the Foo and Bar components and log \"Destroying Foo\" and \"Destroying Bar\" respectively, then you'll see that \"Destroying Foo\" is printed only once, and \"Destroying Bar\" is never printed, even when all three components are removed from the page.\r\n* Removing `transition:fade` does indeed fix the issue; you see the `cleanup()` function log to the console followed by \"Destroying Foo\", then another `cleanup()` function logged to the console followed by \"Destroying Bar\", then finally one more `cleanup()` function followed by \"Destroying Foo\".","updated_at":"2021-09-24T15:08:07Z","created_at":"2021-09-24T15:08:07Z","creator_user_login":"rmunn"}
{"number":6599,"comment_id":"890284280","body":"this root cause of this bug is introduced in https://github.com/sveltejs/svelte/issues/2444\r\n\r\nwhich lead to a class of issues: https://github.com/sveltejs/svelte/issues/4933\r\n\r\nwhat happened is that in #2444, where we fixed:\r\n\r\n```\r\n<script>\r\n  let todos = [];\r\n  $: filtered = todos.filter(...);\r\n</script>\r\n{#each filtered as todo}\r\n    <input type=\"checkbox\" bind:checked={todo.done}>\r\n{/each}\r\n\r\n{todos.filter(...).length}\r\n```\r\n\r\nwhenever we invalidate `filtered`, we invalidate `todos` as well, (such that places in need of `todos` item value are updated, when modifying it through `filtered`.\r\n\r\n> NOTE: `todos` is a reactive dependency of `filtered`\r\n\r\nso how does this relates to this bug?\r\n\r\nwhen we invalidate `y`, we trigger the similar logic, thus invalidating `b` and `c` at the same time.\r\n\r\nbut why invalidating `x` or `a` does not invalidate `b` and `c`? \r\n\r\nwell, we have a bit of duplicated code over [here](https://github.com/sveltejs/svelte/blob/999032835b90ebfa29d7ef2dea3b69518fc7d6ac/src/compiler/compile/render_dom/invalidate.ts) (`invalidate` and `renderer_invalidate`), so, they are not going through the same function _(which maybe they should, so [that this should work](https://svelte.dev/repl/b8ec58d77a6e49feab65363b512cc217?version=3.41.0) )_","updated_at":"2021-07-31T03:36:24Z","created_at":"2021-07-31T03:29:15Z","creator_user_login":"tanhauhau"}
{"number":6642,"comment_id":"1288070255","body":"https://svelte.dev/repl/9b8fdcd976624bf58d70fda29149c2a7?version=3.52.0\r\n\r\nAdditional REPL showing the issue","updated_at":"2022-10-23T09:54:32Z","created_at":"2022-10-23T09:54:32Z","creator_user_login":"mattpilott"}
{"number":6442,"comment_id":"867924826","body":"This has been mentioned in https://github.com/sveltejs/svelte/issues/5528 but did not have its own issue.","updated_at":"2021-06-24T20:18:43Z","created_at":"2021-06-24T20:18:43Z","creator_user_login":"MarcusOtter"}
{"number":6442,"comment_id":"873392142","body":"Also possibly related to https://github.com/sveltejs/svelte/issues/6469","updated_at":"2021-07-03T11:19:38Z","created_at":"2021-07-03T11:19:38Z","creator_user_login":"MarcusOtter"}
{"number":6545,"comment_id":"883804122","body":"If somebody gets around to implementing this before I do, please also add the same sort of support for `:where()`, and also (if it's not too soon) `:has()`.\r\n\r\nHere's a somewhat related bug: https://github.com/sveltejs/svelte/issues/6550 This bug is about adding the encapsulator class to the beginning of css selectors that start with `:global(...)` in some cases. I say it's related because I think it will do exactly the same damage to `:not(...)`.","updated_at":"2021-07-21T00:58:07Z","created_at":"2021-07-21T00:58:07Z","creator_user_login":"JasonWoof"}
{"number":6381,"comment_id":"864571468","body":"This is likely actually a bug, even though it's been around since v3.0.0. See: https://svelte.dev/repl/4c6d1164f6434abaadf5c062b643d54c?version=3.0.0\r\n\r\nHowever, since this behavior has been fairly long-standing, one could almost think of it as a breaking change. Not sure what to do, since it could break applications in the wild.\r\n\r\nNote that white space at the end of `{#if}` statements is preserved: https://svelte.dev/repl/b161491bbf014f54a349f834e82c7d92?version=3.38.2 So if the thinking is that the whitespace trimming is intentional, it's not consistent.\r\n\r\nOne way or another this will likely lead to a breaking change if we want consistency.","updated_at":"2021-06-20T16:50:58Z","created_at":"2021-06-20T15:29:10Z","creator_user_login":"arxpoetica"}
{"number":6381,"comment_id":"996892906","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-17T17:24:48Z","created_at":"2021-12-17T17:24:48Z","creator_user_login":"stale[bot]"}
{"number":6436,"comment_id":"998672428","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-21T10:44:48Z","created_at":"2021-12-21T10:44:48Z","creator_user_login":"stale[bot]"}
{"number":5637,"comment_id":"720787009","body":"Unfortunately this is expected, as css only applies the latest occurrence of a property, only the latest `transform` is taken into account","updated_at":"2020-11-02T23:37:52Z","created_at":"2020-11-02T23:37:52Z","creator_user_login":"pushkine"}
{"number":5637,"comment_id":"869074815","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:47Z","created_at":"2021-06-26T23:46:47Z","creator_user_login":"stale[bot]"}
{"number":5637,"comment_id":"1000871210","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:25Z","created_at":"2021-12-24T15:15:25Z","creator_user_login":"stale[bot]"}
{"number":5694,"comment_id":"869070418","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:57Z","created_at":"2021-06-26T22:46:57Z","creator_user_login":"stale[bot]"}
{"number":5694,"comment_id":"1000871235","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:29Z","created_at":"2021-12-24T15:15:29Z","creator_user_login":"stale[bot]"}
{"number":5658,"comment_id":"869074794","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:38Z","created_at":"2021-06-26T23:46:38Z","creator_user_login":"stale[bot]"}
{"number":5658,"comment_id":"1647148159","body":"```js\r\n<img {...{src, width}}     /> \r\n<img {...{src, ...baz}}    /> \r\n<img {...{...bar, ...baz}} /> \r\n// work, but unfriendly, I wonder if there is any problem with this feature not being implemented\r\n```","updated_at":"2023-07-24T03:34:35Z","created_at":"2023-07-24T03:34:35Z","creator_user_login":"zhangenming"}
{"number":5900,"comment_id":"869061467","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:51Z","created_at":"2021-06-26T21:03:51Z","creator_user_login":"stale[bot]"}
{"number":5900,"comment_id":"1000871279","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:38Z","created_at":"2021-12-24T15:15:38Z","creator_user_login":"stale[bot]"}
{"number":5733,"comment_id":"869070391","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:46Z","created_at":"2021-06-26T22:46:46Z","creator_user_login":"stale[bot]"}
{"number":5733,"comment_id":"880494262","body":"This one bit me today, I wanted to add a CSS class to the transitioning nodes so I can raise the z-index of the node. Does anyone know a possible workaround until this is being fixed?","updated_at":"2021-07-15T08:15:25Z","created_at":"2021-07-15T08:15:25Z","creator_user_login":"kinglouie"}
{"number":5733,"comment_id":"1009747966","body":"I have the same problem as @kinglouie, wanted to add a class to the transitioning element but the events aren't working as I expected. ","updated_at":"2022-01-11T09:18:12Z","created_at":"2022-01-11T09:18:12Z","creator_user_login":"kling90"}
{"number":5842,"comment_id":"869066698","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:49Z","created_at":"2021-06-26T22:03:49Z","creator_user_login":"stale[bot]"}
{"number":5842,"comment_id":"1000871260","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:34Z","created_at":"2021-12-24T15:15:34Z","creator_user_login":"stale[bot]"}
{"number":5833,"comment_id":"869066683","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:41Z","created_at":"2021-06-26T22:03:41Z","creator_user_login":"stale[bot]"}
{"number":5833,"comment_id":"1000871257","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:33Z","created_at":"2021-12-24T15:15:33Z","creator_user_login":"stale[bot]"}
{"number":5904,"comment_id":"869061456","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:48Z","created_at":"2021-06-26T21:03:48Z","creator_user_login":"stale[bot]"}
{"number":5894,"comment_id":"869066660","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:32Z","created_at":"2021-06-26T22:03:32Z","creator_user_login":"stale[bot]"}
{"number":5894,"comment_id":"1000871277","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:38Z","created_at":"2021-12-24T15:15:38Z","creator_user_login":"stale[bot]"}
{"number":5592,"comment_id":"869074823","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:51Z","created_at":"2021-06-26T23:46:51Z","creator_user_login":"stale[bot]"}
{"number":5592,"comment_id":"1000871192","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:21Z","created_at":"2021-12-24T15:15:21Z","creator_user_login":"stale[bot]"}
{"number":5719,"comment_id":"733367968","body":"I had left in one of my fixes...updated REPL now. Sorry bout that","updated_at":"2020-11-25T00:33:58Z","created_at":"2020-11-25T00:33:58Z","creator_user_login":"JohnnyFun"}
{"number":5719,"comment_id":"869070395","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:48Z","created_at":"2021-06-26T22:46:48Z","creator_user_login":"stale[bot]"}
{"number":6000,"comment_id":"869055139","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:50Z","created_at":"2021-06-26T20:04:50Z","creator_user_login":"stale[bot]"}
{"number":6000,"comment_id":"1000871324","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:47Z","created_at":"2021-12-24T15:15:47Z","creator_user_login":"stale[bot]"}
{"number":5655,"comment_id":"723612852","body":"**Update:**\r\n\r\nI was able to solve my issue by using a store. If using a store is generally the recommended way to handle this, this issue can be closed.","updated_at":"2020-11-08T16:15:32Z","created_at":"2020-11-08T16:15:32Z","creator_user_login":"timrosskamp"}
{"number":5655,"comment_id":"869074799","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:40Z","created_at":"2021-06-26T23:46:40Z","creator_user_login":"stale[bot]"}
{"number":5655,"comment_id":"1000871223","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:27Z","created_at":"2021-12-24T15:15:27Z","creator_user_login":"stale[bot]"}
{"number":5668,"comment_id":"869074793","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:37Z","created_at":"2021-06-26T23:46:37Z","creator_user_login":"stale[bot]"}
{"number":5668,"comment_id":"1000871225","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:28Z","created_at":"2021-12-24T15:15:28Z","creator_user_login":"stale[bot]"}
{"number":5507,"comment_id":"869080626","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:46:38Z","created_at":"2021-06-27T00:46:38Z","creator_user_login":"stale[bot]"}
{"number":5507,"comment_id":"870186494","body":"you shouldn't bind to a variable defined via reactive declaration, in this case `visibleData`","updated_at":"2021-06-29T02:43:46Z","created_at":"2021-06-29T02:43:46Z","creator_user_login":"tanhauhau"}
{"number":5507,"comment_id":"870752206","body":"Thanks. As a best practice or never? Just wondering as it works if indexWindow is an object an not a store.","updated_at":"2021-06-29T16:40:58Z","created_at":"2021-06-29T16:40:58Z","creator_user_login":"fredrikvin"}
{"number":5507,"comment_id":"1001222299","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T18:00:06Z","created_at":"2021-12-26T18:00:06Z","creator_user_login":"stale[bot]"}
{"number":5549,"comment_id":"713931037","body":"This is being handled by [this code](https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/utils/html.ts#L71) which is returning `\\0` for characters it deems to be invalid, but I'm not sure what this ought to be doing. The Wikipedia link in the comment above the function appears to be out of date.","updated_at":"2020-10-21T22:59:45Z","created_at":"2020-10-21T22:59:45Z","creator_user_login":"Conduitry"}
{"number":5549,"comment_id":"869074840","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:59Z","created_at":"2021-06-26T23:46:59Z","creator_user_login":"stale[bot]"}
{"number":5549,"comment_id":"1000889596","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:49Z","created_at":"2021-12-24T16:15:49Z","creator_user_login":"stale[bot]"}
{"number":5453,"comment_id":"698447056","body":"Why is the `.call(null, <el>` form necessary for local actions? I don't see any comments or commit messages describing it.\r\n\r\nhttps://github.com/sveltejs/svelte/commit/f45e2b70fdaad54e86fbdf725ed19176b8746262#diff-d1ebc375a97576f79267cd9014ba4ff7R36","updated_at":"2020-09-24T16:19:19Z","created_at":"2020-09-24T16:19:19Z","creator_user_login":"tivac"}
{"number":5453,"comment_id":"1000889566","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:43Z","created_at":"2021-12-24T16:15:43Z","creator_user_login":"stale[bot]"}
{"number":5502,"comment_id":"869080629","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:46:39Z","created_at":"2021-06-27T00:46:39Z","creator_user_login":"stale[bot]"}
{"number":5502,"comment_id":"1000889577","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:45Z","created_at":"2021-12-24T16:15:45Z","creator_user_login":"stale[bot]"}
{"number":5502,"comment_id":"1129078287","body":"Still happens in 3.48.0: https://svelte.dev/repl/d91cff8ca54947e2bbc56143ec06fe04?version=3.48.0","updated_at":"2022-05-17T16:29:50Z","created_at":"2022-05-17T16:29:50Z","creator_user_login":"raythurnevoid"}
{"number":5505,"comment_id":"869074854","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:47:05Z","created_at":"2021-06-26T23:47:05Z","creator_user_login":"stale[bot]"}
{"number":5505,"comment_id":"1000889586","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:47Z","created_at":"2021-12-24T16:15:47Z","creator_user_login":"stale[bot]"}
{"number":4974,"comment_id":"646045988","body":"I'm not sure if this is an issue or not. It certainly causes an error, but I'm not certain that wrapping transitions is supported behaviour.\r\n\r\nIt certainly might be nice to fix, but I'm holding off on the *bug* demarcation, for the time being.","updated_at":"2020-06-18T14:13:21Z","created_at":"2020-06-18T14:13:21Z","creator_user_login":"antony"}
{"number":4974,"comment_id":"1000889510","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:29Z","created_at":"2021-12-24T16:15:29Z","creator_user_login":"stale[bot]"}
{"number":4842,"comment_id":"1000920103","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:50Z","created_at":"2021-12-24T19:24:50Z","creator_user_login":"stale[bot]"}
{"number":4787,"comment_id":"1000920098","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:47Z","created_at":"2021-12-24T19:24:47Z","creator_user_login":"stale[bot]"}
{"number":4219,"comment_id":"1000620156","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:03Z","created_at":"2021-12-24T02:48:03Z","creator_user_login":"stale[bot]"}
{"number":4017,"comment_id":"559897039","body":"I'm upgrading this to a bug, though admittedly an obscure one, because there is no guarantee (nor do I think there should be one) that calling `.set()` on a store will in fact synchronously set it to anything.","updated_at":"2019-11-29T23:58:41Z","created_at":"2019-11-29T23:58:28Z","creator_user_login":"Conduitry"}
{"number":4017,"comment_id":"559897439","body":"This is a bit more fiddly with stuff like `$foo += 42;` or `$foo++;`, where we can't just grab the right hand side of an assignment for the second argument to `set_store_value()`. Alas.","updated_at":"2019-11-30T00:03:06Z","created_at":"2019-11-30T00:03:06Z","creator_user_login":"Conduitry"}
{"number":4017,"comment_id":"560036507","body":"There's even more I wasn't thinking about: The assignment could be a destructuring, which I don't see a nice way of handling right now without first assigning the `$`-prefixed autosubscription variables. Ehh. I'm putting this down for the time being. If I have a situation where I need a store update to cause nothing to happen synchronously, I'll just use `foo.set()` and not `$foo = `.","updated_at":"2019-12-01T01:27:15Z","created_at":"2019-12-01T01:27:15Z","creator_user_login":"Conduitry"}
{"number":4165,"comment_id":"569140763","body":"If you use a keyed each block, it _seems_ to work:\r\n\r\n`{#each items as item (item.id)}`\r\n\r\nMore info here: https://svelte.dev/tutorial/keyed-each-blocks\r\n\r\nBut that _does_ seem weird that it wouldn't just work otherwise. I'm running into a similar issue that I'm trying to boil down to simple REPL, but haven't been able to yet.","updated_at":"2019-12-26T23:06:31Z","created_at":"2019-12-26T22:06:23Z","creator_user_login":"JohnnyFun"}
{"number":4165,"comment_id":"569150215","body":"Fwiw, I also just noticed it seems to work if you get rid of the \"title\" slot. And similarly, works if you give the default slot a name.\r\n\r\nAlso works if you move the slot content to be the default slot content and then don't pass the component slot content.\r\n\r\nDefinitely some weirdness going on...","updated_at":"2019-12-26T23:52:28Z","created_at":"2019-12-26T23:35:49Z","creator_user_login":"JohnnyFun"}
{"number":4165,"comment_id":"593867294","body":"Something wrong with the `has_outro` logic in the compiler.","updated_at":"2020-03-03T10:03:44Z","created_at":"2020-03-03T10:03:28Z","creator_user_login":"tanhauhau"}
{"number":4657,"comment_id":"683920330","body":"Here's an article about the impact of applying the Closure Compiler: https://www.syntaxsuccess.com/viewarticle/the-closure-compiler-and-svelte\r\n\r\nI'm not sure there's much to do in Svelte here. This seems more like something the end user would configure on their project","updated_at":"2020-08-31T17:29:30Z","created_at":"2020-08-31T17:29:30Z","creator_user_login":"benmccann"}
{"number":4657,"comment_id":"1000920087","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:43Z","created_at":"2021-12-24T19:24:43Z","creator_user_login":"stale[bot]"}
{"number":4642,"comment_id":"1000920080","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:41Z","created_at":"2021-12-24T19:24:41Z","creator_user_login":"stale[bot]"}
{"number":4831,"comment_id":"628952597","body":"will be fixed with #4742","updated_at":"2020-05-15T00:17:25Z","created_at":"2020-05-15T00:17:25Z","creator_user_login":"pushkine"}
{"number":4732,"comment_id":"620095206","body":"This seems sort of adjacent to #4111/#4344 but it might not actually be related.","updated_at":"2020-04-27T16:31:50Z","created_at":"2020-04-27T16:31:50Z","creator_user_login":"Conduitry"}
{"number":4270,"comment_id":"576716004","body":"You don't need to use document.getElementById as you could just use the [bind:this](https://svelte.dev/tutorial/bind-this) binding, but even beyond that the example could further follow svelte patterns by using class: and on:animationend if the animate.min.css library is absolutely necessary (remember svelte has its own [transitions](https://svelte.dev/docs#svelte_transition). \r\nE.G.\r\nhttps://svelte.dev/repl/23c94a656b59431cb1bfc790df64755c?version=3.17.1","updated_at":"2020-01-21T14:50:12Z","created_at":"2020-01-21T14:50:12Z","creator_user_login":"vipero07"}
{"number":4270,"comment_id":"576720642","body":"I‚Äôll try to incorporate many of these excellent suggestions.  ","updated_at":"2020-01-21T15:00:02Z","created_at":"2020-01-21T15:00:02Z","creator_user_login":"rlaferla"}
{"number":4270,"comment_id":"579645705","body":"@rlaferla I'd suggest that we remove the dependency on `animate.css` to keep the example lean / reduce the issues of depending on a third party.","updated_at":"2020-01-29T08:21:42Z","created_at":"2020-01-29T08:21:42Z","creator_user_login":"antony"}
{"number":3719,"comment_id":"542748366","body":"Quick note, updated the spreadsheet link as apparently it was the wrong one (sorry for the noise)","updated_at":"2019-10-18T11:38:59Z","created_at":"2019-10-16T15:08:19Z","creator_user_login":"mindrones"}
{"number":3719,"comment_id":"869080696","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:47:08Z","created_at":"2021-06-27T00:47:08Z","creator_user_login":"stale[bot]"}
{"number":3719,"comment_id":"1001869948","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T04:59:55Z","created_at":"2021-12-28T04:59:55Z","creator_user_login":"stale[bot]"}
{"number":3195,"comment_id":"1000776192","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:06Z","created_at":"2021-12-24T10:28:06Z","creator_user_login":"stale[bot]"}
{"number":7624,"comment_id":"1173013934","body":"well, i've tried to eliminate anything that is unnecessary in the `BrowseTaxaDialog.svelte`, which lead to this minimal repro:\r\n\r\nhttps://svelte.dev/repl/16594af9475441c9b3b98ba560368520?version=3.48.0","updated_at":"2022-07-03T05:18:31Z","created_at":"2022-07-03T05:18:31Z","creator_user_login":"tanhauhau"}
{"number":7349,"comment_id":"1061603200","body":"You can also do this:\r\n\r\n```svelte\r\n<script>\r\n  const config = {\r\n    duration: 500, \r\n    start: 0.5, \r\n    opacity: 0.5\r\n  };\r\n</script>\r\n\r\n<article \r\n  in:scale={{ ...config, easing: quintOut }} \r\n  out:scale={{ ...config, easing: quintIn }}\r\n>\r\n  Content goes here...\r\n</article>\r\n```","updated_at":"2022-03-08T10:01:09Z","created_at":"2022-03-08T10:01:09Z","creator_user_login":"pngwn"}
{"number":7352,"comment_id":"1095313564","body":"maybe duplication of #7157 ;)","updated_at":"2022-04-11T17:09:05Z","created_at":"2022-04-11T17:08:46Z","creator_user_login":"7antra"}
{"number":7400,"comment_id":"1083229627","body":"Is there another event that we could be listening to instead that would provide better updates? If not, we're probably stuck, unfortunately.","updated_at":"2022-03-30T14:43:10Z","created_at":"2022-03-30T14:43:10Z","creator_user_login":"Conduitry"}
{"number":7400,"comment_id":"1083936443","body":"Perhaps a combination of `loadeddata` and `timeupdate`, would that work? Without `loadeddata` you don't get the initial buffered state. It looks like `loadeddata` really only fires once, so its not too much redundancy to depend on both.\r\n\r\nhttps://svelte.dev/repl/7135667f84a24d469440d30cfc814245?version=3.46.4","updated_at":"2022-03-31T01:25:29Z","created_at":"2022-03-31T01:25:29Z","creator_user_login":"fartinmartin"}
{"number":7367,"comment_id":"1070811709","body":"[This](https://stackoverflow.com/a/60793965) is a relevant answer to your issue. \r\nEven if `splice` didn't cause an error you should probably still not use it. You should look into the concept of immutability and its benefits if you're not familiar with it.","updated_at":"2022-03-17T11:25:40Z","created_at":"2022-03-17T11:25:11Z","creator_user_login":"raul-saez"}
{"number":7367,"comment_id":"1070825484","body":"Thanks for the feedback. I know about immutability and I use it whenever the trade-off on performance is acceptable, but using splice when I have to remove an element from an array containing thousands of elements is much more efficient than creating two slices  and concatenating them or using filter.\r\n\r\nThis issue could be an indication of an asymmetry in how Svelte handles the binding of props vs the binding of this.","updated_at":"2022-03-17T11:42:30Z","created_at":"2022-03-17T11:42:30Z","creator_user_login":"cdellacqua"}
{"number":7376,"comment_id":"1080949948","body":"My gut instinct is that, until we have more documentation of ancillary tooling on svelte.dev, that this isn't the sort of thing that should live here. It's not part of the core Svelte language, and the compiler ignores it. If this is documented somewhere else, like in the language tools repo somewhere, I could get behind having a link to that.\r\n\r\nI know at some point we had a vision of separate tabs on the svelte.dev site for all of the different official bits of tooling (generated in some way from markdown files in individual repos), but I'm not sure whether that's still something we see happening now that we've moved away from the centralized docs API.","updated_at":"2022-03-28T17:35:49Z","created_at":"2022-03-28T17:35:49Z","creator_user_login":"Conduitry"}
{"number":7399,"comment_id":"1082355288","body":"I believe this is purposefully a non-feature. Components shouldn't generally be interacting with parts of the DOM that are outside their jurisdiction.\r\n\r\nI'd be wary, in any case, of exposing something with a variable that would necessarily only have meaning in a client-rendered component and not in a server-rendered one.\r\n\r\nIf you really need or want this, there are workarounds like `elm.parentElement`, but I don't think this is something we want to be making easy to do, because it breaks the encapsulation of the component.","updated_at":"2022-03-29T20:43:11Z","created_at":"2022-03-29T20:43:11Z","creator_user_login":"Conduitry"}
{"number":7399,"comment_id":"1082362580","body":"@Conduitry Where would `elm` come from, in this case?","updated_at":"2022-03-29T20:52:48Z","created_at":"2022-03-29T20:52:48Z","creator_user_login":"Bilge"}
{"number":7399,"comment_id":"1082640242","body":"> Where would `elm` come from, in this case?\r\n\r\n`bind:this={elm}` on the root element of `MyComponent`","updated_at":"2022-03-30T05:34:38Z","created_at":"2022-03-30T05:34:38Z","creator_user_login":"Prinzhorn"}
{"number":7614,"comment_id":"1172920757","body":"it's really hard to tell what is the type of the value specified by the css variables.\r\n\r\nyou can opt out the scoped keyframes by prefixing `-global-` to the animation name.\r\n\r\n","updated_at":"2022-07-02T16:03:43Z","created_at":"2022-07-02T16:03:43Z","creator_user_login":"tanhauhau"}
{"number":7503,"comment_id":"1114679870","body":"Maybe already you know but you need to remove last `;` from `style:font=\"bold 6px '{theme.numerals.fontFamily}', sans-serif;\"`.\r\nAs compiler/runtime implementation, maybe we should remove last `;`.\r\n","updated_at":"2022-05-02T09:55:25Z","created_at":"2022-05-02T09:55:25Z","creator_user_login":"baseballyama"}
{"number":7493,"comment_id":"1113149313","body":"This modification of [SlotTemplate](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_ssr/handlers/SlotTemplate.ts) seems to fix the issue, but I imagine it would be better dealt with upstream.\r\n\r\n```diff\r\nfunction is_empty_template_literal(template_literal) {\r\n\treturn (\r\n\t\ttemplate_literal.expressions.length === 0 &&\r\n\t\ttemplate_literal.quasis.length === 1 &&\r\n-\t\ttemplate_literal.quasis[0].value.raw === ''\r\n+\t\ttemplate_literal.quasis[0].value.raw.trim() === ''\r\n\t);\r\n}\r\n```\r\n\r\nI have a local test case prepared if useful.\r\n\r\n","updated_at":"2022-04-29T10:24:08Z","created_at":"2022-04-29T10:24:08Z","creator_user_login":"bayre"}
{"number":7583,"comment_id":"1146609087","body":"If this is implemented internally in `bind:clientWidth`, ResizeObserver could be used by default with a compiler/`<svelte:options>` flag to fall back to the current implementation if really necessary.","updated_at":"2022-06-04T13:19:59Z","created_at":"2022-06-04T13:19:59Z","creator_user_login":"brunnerh"}
{"number":7583,"comment_id":"1146615051","body":"Pending PR: #5963 ","updated_at":"2022-06-04T13:44:41Z","created_at":"2022-06-04T13:44:41Z","creator_user_login":"dummdidumm"}
{"number":7607,"comment_id":"1179478450","body":"did you try:\r\n```svelte\r\n<script>\r\n  import * as FooModal from \"./FooModal.svelte\"\r\n  FooModal.someStaticMethod()\r\n</script>\r\n\r\n<FooModal.default  {...props} />\r\n```","updated_at":"2022-07-09T04:42:38Z","created_at":"2022-07-09T04:42:38Z","creator_user_login":"ramiroaisen"}
{"number":7607,"comment_id":"1180677681","body":"That's an interesting idea but these are generic components that are used frequently, I shouldn't have to pollute everything with `.default` all over the place.","updated_at":"2022-07-11T17:30:04Z","created_at":"2022-07-11T17:30:04Z","creator_user_login":"SystemParadox"}
{"number":8108,"comment_id":"1362761485","body":"The problem is that `on:error` could also be a media event: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event\r\nThat event does not bubble however, so maybe it's possible to satisfy both constraints. The problem is that we need to ensure not both events end up in the same type, conflicting with each other and producing an error https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event","updated_at":"2022-12-22T12:07:46Z","created_at":"2022-12-22T12:05:15Z","creator_user_login":"dummdidumm"}
{"number":7719,"comment_id":"1194379882","body":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font This element is deprecated, and I don't think we should be going much out of our way trying to support it.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/font However, the SVG version of it is also deprecated. It looks like support for it is almost non-existent now, while the HTML version is still widely supported.\r\n\r\nI wouldn't be against completely removing `<font>` as an element that triggers SVG mode.","updated_at":"2022-07-25T17:21:19Z","created_at":"2022-07-25T17:21:19Z","creator_user_login":"Conduitry"}
{"number":7651,"comment_id":"1173000482","body":"Currently you can't dynamically pass in elements with slot attribute,\r\n\r\nso, all of the \r\n\r\n```svelte\r\n{#if left}\r\n  <Btn slot=\"left\" text=\"{left}\" />\r\n{/if} {#if right}\r\n  <Btn slot=\"right\" text=\"{right}\" />\r\n{/if}\r\n```\r\n\r\nin your example is considered as passed into the default <slot />\r\n\r\nso, a workaround for this would be\r\n\r\n```svelte\r\n{#if left && !right}\r\n  <NavBar {title}>\r\n    <Btn slot=\"left\" text=\"{left}\" />\r\n  </NavBar>\r\n{:else if !left && right}\r\n  <NavBar {title}>\r\n    <Btn slot=\"right\" text=\"{right}\" />\r\n  </NavBar>\r\n{:else if left && right}\r\n  <NavBar {title}>\r\n    <Btn slot=\"left\" text=\"{left}\" />\r\n    <Btn slot=\"right\" text=\"{right}\" />\r\n  </NavBar>\r\n{:else if !left && !right}\r\n  <NavBar {title} />\r\n{/if}\r\n``` ","updated_at":"2022-07-03T02:50:44Z","created_at":"2022-07-03T02:49:02Z","creator_user_login":"tanhauhau"}
{"number":7651,"comment_id":"1173134516","body":"Thank you for explanation and workaround, but workaround looks complicated, and will be more complicated with more props...\r\nSo, may be we can convert it to feature request? \r\nThat behavior looks logical and will be really useful for multiple scenarios. Thank you!","updated_at":"2022-07-03T16:50:10Z","created_at":"2022-07-03T16:50:10Z","creator_user_login":"borgius"}
{"number":7616,"comment_id":"1166241164","body":"# Additional Insight\r\n\r\nThe above scenario happens when the [key](https://svelte.dev/docs#template-syntax-each) of `#each` statement is the same as list item.(i.e [key](https://svelte.dev/docs#template-syntax-each) is also changed when you swap the list items)\r\n\r\nwhen the [key](https://svelte.dev/docs#template-syntax-each) is a list index( or with no [key](https://svelte.dev/docs#template-syntax-each)), then `beforeUpdate` and `Reactivity Statement($:)` is called.\r\n\r\n## CODE\r\n```svelte\r\n{#each list as item, index (index)}\r\n  <Foo {item} />\r\n{/each}\r\n\r\n<button on:click={swapItems}>Click</button>\r\n```","updated_at":"2022-06-25T09:34:52Z","created_at":"2022-06-25T09:34:52Z","creator_user_login":"ajeeth-b"}
{"number":7616,"comment_id":"1167441035","body":"Yes, if you don't provide a key, or you provide an index as a key, the elements aren't moved in the DOM. Instead, they are modified in-place, which calls both `beforeUpdate` and `afterUpdate`. By providing unique keys that faithfully track the array elements, you force Svelte to move the elements across DOM, which triggers this bug / non-intuitive behavior.","updated_at":"2022-06-27T14:42:06Z","created_at":"2022-06-27T14:41:32Z","creator_user_login":"m93a"}
{"number":8123,"comment_id":"1359928600","body":"There are also other scoping inconsistencies that I noticed when comparing `vite dev` with `vite build`. Is the CSS handled differently between dev mode and build mode?","updated_at":"2022-12-20T18:06:35Z","created_at":"2022-12-20T18:06:35Z","creator_user_login":"longnguyen2004"}
{"number":8123,"comment_id":"1425169715","body":"It's still a problem in v3.55.1. Can anyone look into this?","updated_at":"2023-02-10T04:49:39Z","created_at":"2023-02-10T04:49:39Z","creator_user_login":"longnguyen2004"}
{"number":7582,"comment_id":"1148780352","body":"This discussion has been conducted here in the past.\r\nAnd we decided not to implement it.\r\n\r\nhttps://github.com/sveltejs/rfcs/pull/22\r\n\r\nThis is personal opinion but for such a use case, I prefer that implement a child component with a variant prop as a style pattern, and style of the child component changes according to the passed variant.\r\nThem child components can keep responsibility to render with correct styling.","updated_at":"2022-06-07T14:50:18Z","created_at":"2022-06-07T14:50:18Z","creator_user_login":"baseballyama"}
{"number":7582,"comment_id":"1518943141","body":"> This discussion has been conducted here in the past. And we decided not to implement it.\r\n> \r\n> [sveltejs/rfcs#22](https://github.com/sveltejs/rfcs/pull/22)\r\n> \r\n> This is personal opinion but for such a use case, I prefer that implement a child component with a variant prop as a style pattern, and style of the child component changes according to the passed variant. Them child components can keep responsibility to render with correct styling.\r\n\r\nYour case implementation is structurally incorrect.\r\nThe simplest example is the button component. Stylistic and functional variations (for example, the search button, the close button, the burger menu button, etc.) are wrong to describe in the original component of the button, it is more logical to describe them in separate wrapping components.\r\n\r\nBest regards.","updated_at":"2023-04-23T04:55:04Z","created_at":"2023-04-23T04:55:04Z","creator_user_login":"zigphrid"}
{"number":8213,"comment_id":"1397841626","body":"Transferred to the `svelte` repo","updated_at":"2023-01-20T02:11:15Z","created_at":"2023-01-20T02:11:15Z","creator_user_login":"Rich-Harris"}
{"number":8213,"comment_id":"1636173181","body":"Seems like this issue is still going on.\r\n\r\nHere's another (very minimalistic) way to reproduce the issue:\r\nhttps://www.sveltelab.dev/iziz4nvzfq2g6l9\r\n\r\n\r\nJust one file: `+page.svelte`\r\n```\r\n<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport { browser } from '$app/environment';\r\n\r\n\tconst posts = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tcontent: '<span style=\"color:red;\">Post One</span>'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tcontent: '<span style=\"color:blue;\">Post Two</span>'\r\n\t\t}\r\n\t];\r\n\r\n\tconst postId = writable(1);\r\n\tif (browser) $postId = 2\r\n\r\n\t$: currentPost = posts.find((post) => post.id === $postId);\r\n</script>\r\n\r\n<h1>Post ID: {currentPost.id}</h1>\r\n<h2>{@html currentPost.content}</h2>\r\n```\r\n\r\n(Thanks @MacFJA)","updated_at":"2023-07-14T18:01:43Z","created_at":"2023-07-14T17:35:22Z","creator_user_login":"elron"}
{"number":8239,"comment_id":"1410868119","body":"The bug also occurs without the conditional expression.\r\n```svelte\r\n<script>\r\n\texport let style = \";background:yellow;\"\r\n</script>\r\n\r\n<h1 style=\"color:red{style}\">Should be yellow background, red text</h1>\r\n```\r\nhttps://svelte.dev/repl/31a0c3277fec41b8b9522ee7a697f262?version=3.55.1","updated_at":"2023-01-31T18:23:21Z","created_at":"2023-01-31T18:23:21Z","creator_user_login":"s3812497"}
{"number":8239,"comment_id":"1414896434","body":"Seems to be the same as #5204\r\n\r\nIt was closed by the style directive PR but the bug remains, and probably any sort of attempted optimization would break in the case of interpolated strings.\r\n\r\nPeople were originally opposed to removing that optimization but not sure what the consensus is now with the style directive in place.\r\n","updated_at":"2023-02-03T04:22:35Z","created_at":"2023-02-03T04:22:35Z","creator_user_login":"gtm-nayan"}
{"number":7823,"comment_id":"1236247605","body":"Might be a while for this one.  I suspect the maintainers will wait until it lands in the HTML spec (\"use the platform\" is the mantra around Svelte).\r\n\r\nSo far, not much movement on implementation outside of the experimental flag in Chromium:\r\nhttps://chromestatus.com/feature/5737365999976448","updated_at":"2022-09-04T03:38:28Z","created_at":"2022-09-04T03:38:28Z","creator_user_login":"jrmoynihan"}
{"number":7653,"comment_id":"1175249181","body":"I've created another [reproduction](https://stackblitz.com/edit/svelte-ssr-bug-no-sveltekit?file=src%2FApp.svelte&terminal=dev) of this bug without using SvelteKit","updated_at":"2022-08-03T15:34:25Z","created_at":"2022-07-05T16:24:12Z","creator_user_login":"plmrry"}
{"number":7563,"comment_id":"1139353554","body":"This is very similar to https://github.com/sveltejs/svelte/issues/7450 and https://github.com/sveltejs/svelte/issues/7807\r\n\r\n```\r\nArray.from(document.querySelectorAll('foreignObject')).map(e => e.namespaceURI)\r\n\r\n0: \"http://www.w3.org/2000/svg\"\r\n1: \"http://www.w3.org/1999/xhtml\" <=============\r\n```","updated_at":"2022-08-25T07:13:41Z","created_at":"2022-05-27T07:19:06Z","creator_user_login":"Prinzhorn"}
{"number":7574,"comment_id":"1141833596","body":"Line 125 of the generated code contains `($$invalidate(0, names), $$invalidate(1, hello))`, since `hello` is getting invalidated, it resets `names` again\r\n\r\nRelated #7416, #4933\r\n\r\nSee https://github.com/sveltejs/svelte/issues/7416#issuecomment-1088075138","updated_at":"2022-05-31T08:35:24Z","created_at":"2022-05-31T08:29:03Z","creator_user_login":"gtm-nayan"}
{"number":7574,"comment_id":"1142260862","body":"@gtm-nayan it's a known issue then. We stumble upon it from time to time in our projects and it's quite frustrating.\r\nIt's also VERY frustrating to Svelte beginners, because it seems illogical until you look at the generated source code. And even then it's hard to understand why compiler does this...\r\n\r\nSvelte otherwise has an easy way to explain the reactivity - \"if the compiler sees a read, it will re-run the code on change\", and \"this only happens on some variable assignment\". But in this case, there is no obvious reason that `hello` should be invalidated.\r\n\r\nI think this wasn't an issue a while ago when I started using Svelte 3. Do we really need Svelte 4 to fix this obviously bad behavior?","updated_at":"2022-05-31T15:11:27Z","created_at":"2022-05-31T15:09:26Z","creator_user_login":"tenor-dev"}
{"number":8139,"comment_id":"1363384223","body":"I made much simpler REPL: https://svelte.dev/repl/6b5ac21cf0684cce805397e975929475?version=3.55.0\r\n\r\nYou don't really need stores. Looks like reason is that slot prop invalidates all slot's child components, even if they don't use the slot prop.","updated_at":"2022-12-22T21:55:41Z","created_at":"2022-12-22T21:55:41Z","creator_user_login":"stanf0rd"}
{"number":8144,"comment_id":"1611902385","body":"What would be the ideal fix. Removing the CSS or the inline styles?","updated_at":"2023-06-28T18:39:53Z","created_at":"2023-06-28T18:39:53Z","creator_user_login":"tuckerbeauchamp"}
{"number":8248,"comment_id":"1416289068","body":"You have the wrong namespace ‚Äî it's `http://www.w3.org/2000/svg`, not `https://www.w3.org/2000/svg` (`http`, not `https`).\r\n\r\nSvelte should probably be more forgiving in this case. Transferring the issue to `sveltejs/svelte`","updated_at":"2023-02-03T19:12:41Z","created_at":"2023-02-03T19:12:41Z","creator_user_login":"Rich-Harris"}
{"number":8174,"comment_id":"1416809309","body":"Can you give some information on what plugins are you having for svelte on VS Code? This seems to be some kind of warning by the plugins more than Svelte itself","updated_at":"2023-02-04T17:40:18Z","created_at":"2023-02-04T17:40:18Z","creator_user_login":"phamduylong"}
{"number":8174,"comment_id":"1436399572","body":"From your reproduction, you indeed didn't use the id props. So the warning should be correct. Are you missing something from the reproduction? Or what were you expected it to be?","updated_at":"2023-02-20T06:24:01Z","created_at":"2023-02-20T06:24:01Z","creator_user_login":"jasonlyu123"}
{"number":8174,"comment_id":"1500243778","body":"You probably want to put this in your vscode workspace settings:\r\n`\r\n\"svelte.plugin.svelte.compilerWarnings\": {\r\n    \"unused-export-let\": \"ignore\",\r\n}\r\n`","updated_at":"2023-04-07T12:23:58Z","created_at":"2023-04-07T12:23:58Z","creator_user_login":"sandersrd33"}
{"number":7119,"comment_id":"1009262002","body":"This issue might be what's causing https://github.com/sveltejs/svelte/issues/1591","updated_at":"2022-01-10T19:17:13Z","created_at":"2022-01-10T19:17:13Z","creator_user_login":"probablykasper"}
{"number":7119,"comment_id":"1222477425","body":"A possible cause of this issue is an active transition belonging to a child component, in this case applying the `local` modifier may resolve the issue.\r\n\r\nhttps://svelte.dev/tutorial/local-transitions\r\nhttps://svelte.dev/docs#template-syntax-element-directives-transition-fn","updated_at":"2022-08-22T14:56:26Z","created_at":"2022-08-22T14:56:26Z","creator_user_login":"homerjam"}
{"number":7085,"comment_id":"1003189979","body":"This had come up before in #1255 and it's not at all clear to me who would actually be running these tests.\n\nIf, from the Svelte compiler's point of view, all it had to do was ignore these script blocks when building the app, that would be easy to do with a preprocessor. And telling the test runner how to read these files would have to be specific to that particular test runner.","updated_at":"2021-12-30T21:41:31Z","created_at":"2021-12-30T21:41:31Z","creator_user_login":"Conduitry"}
{"number":7085,"comment_id":"1003242454","body":"I agree with @Conduitry too. This seems to be possible to be supported in userland, and I think it should stay that way as it depends on the test runner. The most Svelte can do is endorse the `context=\"test\"` convention, but I don't think there's a need to. ","updated_at":"2021-12-31T02:18:33Z","created_at":"2021-12-31T02:18:33Z","creator_user_login":"bluwy"}
{"number":7160,"comment_id":"1386385477","body":"REPL https://svelte.dev/repl/8cf99db4663c4071a939497570b9b21d?version=3.2.2 \r\nnot working when javascript is disabled ","updated_at":"2023-01-18T02:31:53Z","created_at":"2023-01-18T02:31:53Z","creator_user_login":"xmlking"}
{"number":7160,"comment_id":"1579613014","body":"Still occurring in latest","updated_at":"2023-06-06T23:53:01Z","created_at":"2023-06-06T23:52:49Z","creator_user_login":"MaximSagan"}
{"number":7210,"comment_id":"1084132751","body":"I think I am having a similar issue.  I am showing and hiding svelte:components to have one fly in as the other flies out. As the toggle happens a few times, multiple components start showing up.\r\n\r\nHere is my repro: https://svelte.dev/repl/3a977e56b07d4eeebc472a891bbb7253?version=3.46.5\r\n\r\nI have found that wrapping my <svelte:component> in another svelte component makes the problem go away.","updated_at":"2022-03-31T20:02:33Z","created_at":"2022-03-31T06:06:53Z","creator_user_login":"GeoffCox"}
{"number":7021,"comment_id":"1006496261","body":"Your example is too complicated. Working example: https://svelte.dev/repl/c5841a328c6f490f960388906e9bf184?version=3.44.3\r\n\r\nThis is related to you calling `onOptionsChange` (passed in as prop). Please use component event instead of that.\r\n\r\nChange `export let things` to `let things = []` fix the issue.","updated_at":"2022-01-06T11:26:47Z","created_at":"2022-01-06T11:23:01Z","creator_user_login":"iacore"}
{"number":7021,"comment_id":"1006707955","body":"@locriacyber The example is not too complicated and provides a reduced test case for a real bug. I am not looking for workarounds, I am looking for the bug to be resolved.","updated_at":"2022-01-06T16:04:38Z","created_at":"2022-01-06T16:04:38Z","creator_user_login":"scottgonzalez"}
{"number":7003,"comment_id":"989675685","body":"This is just sharing but I have seen an issue related to this in the past.\r\n\r\nhttps://github.com/sveltejs/svelte/issues/6562","updated_at":"2021-12-09T09:39:11Z","created_at":"2021-12-09T09:39:11Z","creator_user_login":"baseballyama"}
{"number":7040,"comment_id":"1003510408","body":"> For inputs, I want to be able to bind:value on my svelte component just like I would on a vanilla <input /> element, so I add in <svelte:options accessors /> to allow it.\r\n\r\nyou can use bind:value without accessors\r\n\r\nlike this\r\n\r\nmy-form.svelte\r\n```svelte\r\n<script>\r\n\r\nlet myValue = \"initial\"\r\n\r\n$: console.log(myValue)\r\n</script>\r\n\r\n<Input bind:value={myValue}/>\r\n\r\n```\r\n\r\nInput.svelte\r\n```svelte\r\n<script>\r\n\r\nexport let value\r\n\r\n</script>\r\n\r\n<input bind:value />\r\n```","updated_at":"2022-01-01T05:51:32Z","created_at":"2022-01-01T05:51:32Z","creator_user_login":"TheHadiAhmadi"}
{"number":6979,"comment_id":"984857531","body":"I wouldn't call it just annoyance, exactly this issue prevents me from having full page transitions in svelteKit on __layout.svelte level, so app that im making using lovely svelte instead of being absolutely beautiful (with transitions) is just beautiful.","updated_at":"2021-12-02T17:49:38Z","created_at":"2021-12-02T17:49:38Z","creator_user_login":"tohodakilla"}
{"number":6979,"comment_id":"991712033","body":"The out-transition blocks umounting the whole block until transition ends so you temporarily get two components. It's written in [the docs](https://svelte.dev/docs#transition_fn).\r\nBut there is a real bug #5950 - in the `#key` block a local in-transition isn't played at all.","updated_at":"2021-12-11T16:59:54Z","created_at":"2021-12-11T16:59:54Z","creator_user_login":"7nik"}
{"number":6979,"comment_id":"991714511","body":"Yes you should get two components temporarily, but when I use #key + local transition isnt played and im left with two components (in my case SvelteKit - two pages being displayed at once) and they are gone only after refresh.","updated_at":"2021-12-11T17:07:56Z","created_at":"2021-12-11T17:07:56Z","creator_user_login":"tohodakilla"}
{"number":6825,"comment_id":"939082656","body":"`on:message{handleMessage}` is technically valid. It means that `message{handleMessage}` events will be passed on to the parent component. One of the things considered for Svelte 4 is to have more strict rules around the characters allowed in event names.","updated_at":"2021-10-08T19:56:34Z","created_at":"2021-10-08T19:56:34Z","creator_user_login":"Conduitry"}
{"number":6825,"comment_id":"1439841040","body":"I've seen some pretty strange event names in the wild, partially to work around the current Svelte limitation that you can't bubble all events at once, so I'm not sure what we can do here.\r\nSlightly related to #6823  which is also about restricting things.","updated_at":"2023-02-22T11:14:42Z","created_at":"2023-02-22T11:14:42Z","creator_user_login":"dummdidumm"}
{"number":7099,"comment_id":"1004998366","body":"This appears to be another limitation of the iframe workaround (hopefully to be replaced with `ResizeObserver` at some point):\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4233\r\nhttps://github.com/sveltejs/svelte/issues/6127\r\nhttps://github.com/sveltejs/svelte/issues/6708\r\nhttps://github.com/sveltejs/svelte/pull/5524\r\n\r\n\r\n> Is it possible to fix it or should I not use asynchronous loading of css, or use `position:absolute!important`?\r\n\r\nI guess that's up to you how you want to workaround it. Depending on what type of application your are working on synchronous CSS might be beneficial. You could also add an inline style for this edge case and have a comment point to this issue. Or use `ResizeObserver` manually. All of these options are legit.","updated_at":"2022-01-04T16:57:41Z","created_at":"2022-01-04T16:57:13Z","creator_user_login":"Prinzhorn"}
{"number":7157,"comment_id":"1014449398","body":"Somewhat related to #6942 ","updated_at":"2022-01-17T12:05:40Z","created_at":"2022-01-17T12:05:40Z","creator_user_login":"dummdidumm"}
{"number":6955,"comment_id":"975827479","body":"Basically https://github.com/sveltejs/svelte/issues/3524 was never fully solved from looking at the comments","updated_at":"2021-11-22T19:00:31Z","created_at":"2021-11-22T19:00:31Z","creator_user_login":"Prinzhorn"}
{"number":6955,"comment_id":"1265961617","body":"Can still reproduce this in Firefox 97 and the latest version of Svelte.","updated_at":"2022-10-03T19:59:42Z","created_at":"2022-10-03T19:59:42Z","creator_user_login":"llui85"}
{"number":6955,"comment_id":"1276957155","body":"Can reproduce in Firefox 105.0.3. Same thing occurs with `<audio>` element.","updated_at":"2022-10-13T02:47:40Z","created_at":"2022-10-13T02:47:40Z","creator_user_login":"j-tai"}
{"number":7101,"comment_id":"1006007479","body":"Yep, basically the main issue in https://github.com/sveltejs/svelte/issues/7084\r\n\r\n> But I think the compiler shouldn't compile let:value without slot, so I think this is a valid issue.","updated_at":"2022-01-05T19:17:22Z","created_at":"2022-01-05T19:17:22Z","creator_user_login":"Prinzhorn"}
{"number":6779,"comment_id":"928253677","body":"This sounds like a duplicate of #6763 or #6226.","updated_at":"2021-09-27T20:35:52Z","created_at":"2021-09-27T20:35:18Z","creator_user_login":"Conduitry"}
{"number":6779,"comment_id":"983185322","body":"I got a workaround for anybody having the same issue. Communicate with the viewport from the view components through events. The first event notifies the viewport that the current view has an outro transition which it should await and the second event tells the viewport that the outro has finished and that it may switch to the next component.\r\n\r\nExample implementation: https://github.com/DanielSharkov/svelte-router/blob/master/src/Viewport.svelte\r\nUpgraded REPL: https://svelte.dev/repl/0c31ad0d80144f43acecc6753a54b94a?version=3.43.0\r\n\r\nI hope this will help someone! üòÑ","updated_at":"2021-12-01T01:08:19Z","created_at":"2021-12-01T01:08:19Z","creator_user_login":"DanielSharkov"}
{"number":6850,"comment_id":"1018456163","body":"Investigating","updated_at":"2022-01-21T12:17:20Z","created_at":"2022-01-21T12:17:20Z","creator_user_login":"tsxoxo"}
{"number":6850,"comment_id":"1069235505","body":"It turns out that replacing `transition:slide` with `in:slide` and `out:slide` solves this bug for now. Seems like `transition:slide` has problems if child elements use `transition:slide|local`, but `in:slide` and `in:slide|local`  with `out:slide` and `out:slide|local` work perfectly even with child elements.\r\nhttps://svelte.dev/repl/169ce3d61a144e0c948f80ffc03bdc5e","updated_at":"2022-03-16T15:12:44Z","created_at":"2022-03-16T15:12:44Z","creator_user_login":"zxcq544"}
{"number":6856,"comment_id":"946103594","body":"I haven't tried this out, but, looking at the compiled code, it seems quite unlikely that there would be a difference in behavior between `count++` and `count+=1` in SSR mode. Is this what you're seeing?\r\n\r\nIf the issue is that this doesn't work at all in either case, this would probably be a 'won't fix' currently, because of the way SSR works.","updated_at":"2021-10-18T19:39:58Z","created_at":"2021-10-18T19:39:58Z","creator_user_login":"Conduitry"}
{"number":6856,"comment_id":"946112496","body":"> I haven't tried this out, but, looking at the compiled code, it seems quite unlikely that there would be a difference in behavior between `count++` and `count+=1` in SSR mode. Is this what you're seeing?\r\n\r\nYes, it looks like I wasn't careful in testing.  `bind:count` in the example is acting the exact same as `{ count }` during SSR.  I've updated the examples to reflect that.\r\n\r\nAre you sure that is a \"won't fix\"?  The SSR output certainly looks like it is *supposed* to catch updates.\r\n\r\n```js\r\ndo {\r\n$$settled = true;\r\n$$rendered = `${validate_component(Child, \"Child\").$$render(\r\n\t$$result,\r\n\t{ count },\r\n\t{\r\n\t\tcount: $$value => {\r\n\t\t\tcount = $$value;\r\n\t\t\t$$settled = false;\r\n\t\t}\r\n\t},\r\n\t{}\r\n)}\r\nOutside: ${escape(count)}`;\r\n} while (!$$settled);\r\n```\r\n","updated_at":"2021-10-18T20:05:05Z","created_at":"2021-10-18T19:52:09Z","creator_user_login":"WaltzingPenguin"}
{"number":7036,"comment_id":"1366077160","body":"I really like the double-colon idea. `on:eventName:forwardAsName`.\r\n\r\nIt seems so intuitive, I found myself trying it just to see if it worked already. The `on:message` and `on:someEventName` forwarding is great, but there are two situations where it's clunky:\r\n\r\n- You have two identically named events you need to forward out of a wrapper component\r\n- You want to give component events simple names for parent consumers, but need a more specific name so the event makes sense when consumed by grandparents","updated_at":"2022-12-27T17:54:33Z","created_at":"2022-12-27T17:54:21Z","creator_user_login":"markjaquith"}
{"number":7036,"comment_id":"1414154072","body":"I'd like to +1 this.   If I have two or more buttons that need their on:click forwarded, I end up needing a dispatcher solely for the purpose of the name collision.  something like `on:click:left-button-click` would be really nice and I agree it would fit with svelte's..._svelte_.\r\n\r\nIn my case the child control is simple enough that I could use a slot to keep the buttons (and events) defined in the parent.","updated_at":"2023-02-02T18:05:01Z","created_at":"2023-02-02T18:05:01Z","creator_user_login":"joepetrakovich"}
{"number":6659,"comment_id":"920737430","body":"I made a version of this at https://svelte.dev/repl/9f6c3fb809ac45cd9b5d83deacadfb14?version=3.42.1 which adds some console logging so it's easier to see the order of events: first the Component is initialized with `false`, which is the correct value for `b` at that point in time. Then ConditionA is destroyed because ConditionB's `{#if $b}` has become false. Because ConditionA is being destroyed, it destroys Component, but it still allows the `bind:value` on Component to fire after Component has been destroyed.","updated_at":"2021-09-16T09:25:01Z","created_at":"2021-09-16T09:25:01Z","creator_user_login":"rmunn"}
{"number":6659,"comment_id":"921571874","body":"Thank you @rmunn! Now it has become much clearer.","updated_at":"2021-09-17T07:32:32Z","created_at":"2021-09-17T07:32:32Z","creator_user_login":"vkurko"}
{"number":7131,"comment_id":"1013661018","body":"Have updated my comment, only one potential issue remaining but the main ones are solved ","updated_at":"2022-01-15T10:51:27Z","created_at":"2022-01-15T10:51:27Z","creator_user_login":"ghostdevv"}
{"number":7131,"comment_id":"1684945602","body":"@ghostdevv Was the last one fixed by https://github.com/sveltejs/svelte/pull/7435 ?","updated_at":"2023-08-19T13:38:16Z","created_at":"2023-08-19T13:38:06Z","creator_user_login":"gtm-nayan"}
{"number":6062,"comment_id":"869048056","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:51Z","created_at":"2021-06-26T19:04:51Z","creator_user_login":"stale[bot]"}
{"number":6062,"comment_id":"1000920112","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:55Z","created_at":"2021-12-24T19:24:55Z","creator_user_login":"stale[bot]"}
{"number":6082,"comment_id":"869048036","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:46Z","created_at":"2021-06-26T19:04:46Z","creator_user_login":"stale[bot]"}
{"number":6082,"comment_id":"1000920117","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:56Z","created_at":"2021-12-24T19:24:56Z","creator_user_login":"stale[bot]"}
{"number":6024,"comment_id":"787071978","body":"`<select bind:value />` works on `select:change` event, meaning `form:input` event fires before the binding gets updated.\r\nIf the mentioned behavior is EXPECTED, we can update the `value` on `select:input` event manually.\r\nLike so,\r\n```\r\nlet value = \"\";\r\n<select on:input={function () { value = this.value }}>\r\n...\r\n</select>\r\n```\r\n---\r\n\r\nIMO, that's not how we(maybe I) code in `svelte`. The values are already bound. We can just `$: console.log(formData)`.\r\nListening on `form:input` event feels redundant.","updated_at":"2021-02-27T13:21:49Z","created_at":"2021-02-27T13:21:49Z","creator_user_login":"mdynnl"}
{"number":6024,"comment_id":"869055098","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:35Z","created_at":"2021-06-26T20:04:35Z","creator_user_login":"stale[bot]"}
{"number":6024,"comment_id":"1000871343","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:50Z","created_at":"2021-12-24T15:15:50Z","creator_user_login":"stale[bot]"}
{"number":6132,"comment_id":"869047990","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:34Z","created_at":"2021-06-26T19:04:34Z","creator_user_login":"stale[bot]"}
{"number":6132,"comment_id":"1000920131","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:25:00Z","created_at":"2021-12-24T19:25:00Z","creator_user_login":"stale[bot]"}
{"number":6085,"comment_id":"869048033","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:45Z","created_at":"2021-06-26T19:04:45Z","creator_user_login":"stale[bot]"}
{"number":6432,"comment_id":"1000776176","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:03Z","created_at":"2021-12-24T10:28:03Z","creator_user_login":"stale[bot]"}
{"number":6098,"comment_id":"869048013","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:41Z","created_at":"2021-06-26T19:04:41Z","creator_user_login":"stale[bot]"}
{"number":6098,"comment_id":"1000920119","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:56Z","created_at":"2021-12-24T19:24:56Z","creator_user_login":"stale[bot]"}
{"number":6115,"comment_id":"804161504","body":"It would be nice to if the callback could receive the same info. For instance by providing an additional optional argument to the callback for both versions (sync and async) of the derived store. ","updated_at":"2021-03-22T15:42:55Z","created_at":"2021-03-22T15:39:57Z","creator_user_login":"voscausa"}
{"number":6115,"comment_id":"855187182","body":"label: proposal?","updated_at":"2021-06-05T05:32:27Z","created_at":"2021-06-05T05:32:27Z","creator_user_login":"Zachiah"}
{"number":6115,"comment_id":"855204927","body":"Yes label \"proposal\" makes sense.","updated_at":"2021-06-05T08:23:18Z","created_at":"2021-06-05T08:23:18Z","creator_user_login":"voscausa"}
{"number":6115,"comment_id":"1000920121","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:57Z","created_at":"2021-12-24T19:24:57Z","creator_user_login":"stale[bot]"}
{"number":6254,"comment_id":"846721881","body":"This would probably be a breaking change, so the question is whether the current behavior is a bug, and I don't have a clear opinion on that.","updated_at":"2021-05-24T04:22:37Z","created_at":"2021-05-24T04:22:37Z","creator_user_login":"Conduitry"}
{"number":6254,"comment_id":"974594254","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-11-20T04:54:43Z","created_at":"2021-11-20T04:54:43Z","creator_user_login":"stale[bot]"}
{"number":5915,"comment_id":"869061450","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:43Z","created_at":"2021-06-26T21:03:43Z","creator_user_login":"stale[bot]"}
{"number":5915,"comment_id":"1000871289","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:40Z","created_at":"2021-12-24T15:15:40Z","creator_user_login":"stale[bot]"}
{"number":5948,"comment_id":"869061432","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:34Z","created_at":"2021-06-26T21:03:34Z","creator_user_login":"stale[bot]"}
{"number":5948,"comment_id":"1000871304","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:43Z","created_at":"2021-12-24T15:15:43Z","creator_user_login":"stale[bot]"}
{"number":5948,"comment_id":"1129081660","body":"Still happens in 3.48.0: https://svelte.dev/repl/71e978db32d34e25918ed2d196768ea5?version=3.48.0","updated_at":"2022-05-17T16:33:19Z","created_at":"2022-05-17T16:33:19Z","creator_user_login":"raythurnevoid"}
{"number":6326,"comment_id":"966521167","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-11-11T18:17:23Z","created_at":"2021-11-11T18:17:23Z","creator_user_login":"stale[bot]"}
{"number":6326,"comment_id":"966523486","body":"I find it interesting that no one is responding to this.\r\nThis is a bug.","updated_at":"2021-11-11T18:20:43Z","created_at":"2021-11-11T18:20:43Z","creator_user_login":"lukaszpolowczyk"}
{"number":6326,"comment_id":"975484938","body":"It's likely because there are similar existing ones already: #4776 and #5792. A warning would be fairly complex to implement and wouldn't catch all the cases, so I'd prefer an updated in the docs instead. A documentation PR is welcome!\r\n\r\nThough if you want to escape Svelte's custom technique, you could use https://github.com/bluwy/svelte-fast-dimension too (make sure to check browser support).","updated_at":"2021-11-22T12:44:06Z","created_at":"2021-11-22T12:44:06Z","creator_user_login":"bluwy"}
{"number":5953,"comment_id":"772614860","body":"Possibly related to #5736? In that issue, the CSS transform was cached and not updated until after the next run.\r\n\r\nAs with that issue, using `in` and `out` instead of the `transition` shorthand causes the delay to be updated immediately, though it is annoying to duplicate the parameters.\r\n\r\n```html\r\n<nav in:fly={{\r\n\tx: -100,\r\n\tdelay,\r\n}} out:fly={{\r\n\tx: -100,\r\n\tdelay,\r\n}}>\r\n```","updated_at":"2021-02-03T15:56:15Z","created_at":"2021-02-03T15:56:15Z","creator_user_login":"geoffrich"}
{"number":5953,"comment_id":"869061419","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:28Z","created_at":"2021-06-26T21:03:28Z","creator_user_login":"stale[bot]"}
{"number":5953,"comment_id":"1000871310","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:44Z","created_at":"2021-12-24T15:15:44Z","creator_user_login":"stale[bot]"}
{"number":5953,"comment_id":"1002300905","body":"Still an issue.","updated_at":"2021-12-28T22:09:13Z","created_at":"2021-12-28T22:09:13Z","creator_user_login":"geoffrich"}
{"number":5943,"comment_id":"869061439","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:37Z","created_at":"2021-06-26T21:03:37Z","creator_user_login":"stale[bot]"}
{"number":5943,"comment_id":"1000871292","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:41Z","created_at":"2021-12-24T15:15:41Z","creator_user_login":"stale[bot]"}
{"number":5996,"comment_id":"869055133","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:48Z","created_at":"2021-06-26T20:04:48Z","creator_user_login":"stale[bot]"}
{"number":5996,"comment_id":"869056619","body":"This behavior continues on 3.38.3.","updated_at":"2021-06-26T20:15:34Z","created_at":"2021-06-26T20:15:34Z","creator_user_login":"lights0123"}
{"number":5996,"comment_id":"1000620181","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:09Z","created_at":"2021-12-24T02:48:09Z","creator_user_login":"stale[bot]"}
{"number":5996,"comment_id":"1399332636","body":"This bug is still present. It's also a dupe of https://github.com/sveltejs/svelte/issues/4910","updated_at":"2023-01-21T21:06:20Z","created_at":"2023-01-21T21:06:20Z","creator_user_login":"null-dev"}
{"number":5914,"comment_id":"869061451","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:44Z","created_at":"2021-06-26T21:03:44Z","creator_user_login":"stale[bot]"}
{"number":5914,"comment_id":"1000871287","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:39Z","created_at":"2021-12-24T15:15:39Z","creator_user_login":"stale[bot]"}
{"number":5914,"comment_id":"1240163486","body":"Hey, any update on this issue? I have updated the repl because it had 404 links: https://svelte.dev/repl/1e2a6d6b6d4d4272bb5515e21b95d224?version=3.50.0\r\nthis is also a bug for video media: https://svelte.dev/repl/76edd1d0c0e84cbc9ab25abb5b443416?version=3.50.0","updated_at":"2022-09-08T03:13:11Z","created_at":"2022-09-08T03:10:01Z","creator_user_login":"jer-0"}
{"number":5914,"comment_id":"1613812484","body":"Bumping this, issue still exists.","updated_at":"2023-06-29T21:09:25Z","created_at":"2023-06-29T21:09:25Z","creator_user_login":"lc-guy"}
{"number":5972,"comment_id":"783383374","body":"I created fork for my usecase.\r\n\r\nhttps://github.com/mizchi/prettier-plugin-svelte","updated_at":"2021-02-22T13:43:22Z","created_at":"2021-02-22T13:43:22Z","creator_user_login":"mizchi"}
{"number":5972,"comment_id":"869055122","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:44Z","created_at":"2021-06-26T20:04:44Z","creator_user_login":"stale[bot]"}
{"number":5972,"comment_id":"1000871315","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:45Z","created_at":"2021-12-24T15:15:45Z","creator_user_login":"stale[bot]"}
{"number":6023,"comment_id":"869055095","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:34Z","created_at":"2021-06-26T20:04:34Z","creator_user_login":"stale[bot]"}
{"number":6023,"comment_id":"1000871339","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:49Z","created_at":"2021-12-24T15:15:49Z","creator_user_login":"stale[bot]"}
{"number":6482,"comment_id":"873117368","body":"I think this should live in eslint rather than being built into the Svelte compiler. There's a [similar closed issue](https://github.com/sveltejs/eslint-plugin-svelte3/issues/42) there, and I agree with the consensus that there are cases where keyed each blocks aren't always needed.","updated_at":"2021-07-02T16:26:25Z","created_at":"2021-07-02T16:26:25Z","creator_user_login":"bluwy"}
{"number":6396,"comment_id":"863849366","body":"Another workaround => REPL: https://svelte.dev/repl/8dcde41369cf440da948b65bc069322b?version=3.38.2","updated_at":"2021-06-18T08:11:53Z","created_at":"2021-06-18T08:11:53Z","creator_user_login":"mdynnl"}
{"number":6396,"comment_id":"1217394146","body":"Thank you @mdynnl . This was driving me insane.","updated_at":"2022-08-17T02:45:33Z","created_at":"2022-08-17T02:45:33Z","creator_user_login":"Lucasmiguelmac"}
{"number":6396,"comment_id":"1403230911","body":"It seems it got partially fixed in svelte `3.51.0` - specifically (im guessing) #7860 but \"before unmount\" still is getting called before the component even mounts.\r\n\r\nHere is the output\r\n```\r\n\"Inner1 mount\"\r\n\"Before Inner1 unmount\"\r\n\"Inner1 unmount\"\r\n\"Inner2 mount\"\r\n\"Inner2 unmount\"\r\n> \"Before unmount\" is still before mount!\r\n\"Before Inner1 unmount\"\r\n\"Inner1 mount\"\r\n> Before it did not output \"unmount\"\r\n\"Inner1 unmount\"\r\n````\r\n\r\nEDIT: the bug still occurs in Svelte 4","updated_at":"2023-06-23T06:41:10Z","created_at":"2023-01-25T08:06:13Z","creator_user_login":"jkbz64"}
{"number":6328,"comment_id":"841710448","body":"Moreover there is the same glitch if just to replace original `const fullname = ...` with:\r\n```ts\r\nconst fullname = derived([lastname, firstname], names => names.reverse().join(' '));\r\n```\r\nI.e. swap `lastname` and `firstname` in the array.\r\n[REPL](https://svelte.dev/repl/81bf186386e84f9f90f892782433578d?version=3.38.2)","updated_at":"2021-05-15T19:11:01Z","created_at":"2021-05-15T19:11:01Z","creator_user_login":"Heliconter"}
{"number":6328,"comment_id":"921564521","body":"The example in https://svelte.dev/repl/81bf186386e84f9f90f892782433578d?version=3.38.2 has a bug in it, where it's producing `'Jekyll Hyde'` due to the `names` array being modified in-place by `names.reverse()`. If I change that to `names.slice().reverse()` so that a copy of the input array is being made before modifying it, then it produces `[\"Henry Jekyll\",\"Henry Hyde\",\"Edward Hyde\"]` just like the first example.","updated_at":"2021-09-17T07:27:17Z","created_at":"2021-09-17T07:27:17Z","creator_user_login":"rmunn"}
{"number":5264,"comment_id":"869080685","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:47:04Z","created_at":"2021-06-27T00:47:04Z","creator_user_login":"stale[bot]"}
{"number":5264,"comment_id":"872669905","body":"It appears that this bug still occurs in latest svelte (3.38.3). So I don't think this issue should be closed.","updated_at":"2021-07-02T02:37:23Z","created_at":"2021-07-02T02:37:23Z","creator_user_login":"mosheduminer"}
{"number":5264,"comment_id":"1002370771","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T02:52:46Z","created_at":"2021-12-29T02:52:46Z","creator_user_login":"stale[bot]"}
{"number":5264,"comment_id":"1016052525","body":"This issue can still be seen with latest svelte (3.46.2), as can be seen [here](https://svelte.dev/repl/1ad9b6b4883e4b92bb679418a529ea00?version=3.46.2). A carousel behavior is expected, but the direction of the outro is incorrect, as described in the opening comment of this issue.","updated_at":"2022-01-19T03:45:59Z","created_at":"2022-01-19T03:45:59Z","creator_user_login":"mosheduminer"}
{"number":5104,"comment_id":"653951486","body":"Thanks for writing up this issue.\r\n\r\n> Tailwind seems to be pretty popular in Svelte projects, so I guess it has the potential to frustrate quite a few people.\r\n\r\nThis is an issue specific to twin.macro and other macros. From what I've seen, most tailwind users use PostCSS and write class names directly. I like twin.macro for the static guarantees that it gives me + some additional DX bonuses, but its use isn't that prolific\r\n\r\nWould still love to see a solution to this, though üòÖ","updated_at":"2020-07-05T23:17:18Z","created_at":"2020-07-05T23:16:28Z","creator_user_login":"itsMapleLeaf"}
{"number":5504,"comment_id":"869074848","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:47:03Z","created_at":"2021-06-26T23:47:03Z","creator_user_login":"stale[bot]"}
{"number":5504,"comment_id":"1000889581","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:46Z","created_at":"2021-12-24T16:15:46Z","creator_user_login":"stale[bot]"}
{"number":5506,"comment_id":"869074847","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:47:02Z","created_at":"2021-06-26T23:47:02Z","creator_user_login":"stale[bot]"}
{"number":5506,"comment_id":"1000889591","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:48Z","created_at":"2021-12-24T16:15:48Z","creator_user_login":"stale[bot]"}
{"number":7905,"comment_id":"1283913882","body":"This is possibly the same issue as #7913.","updated_at":"2022-10-19T12:11:58Z","created_at":"2022-10-19T12:11:58Z","creator_user_login":"james-camilleri"}
{"number":7794,"comment_id":"1382459805","body":"I think this is essentially the same issue as https://github.com/sveltejs/svelte/issues/4933 ","updated_at":"2023-01-13T22:23:34Z","created_at":"2023-01-13T22:23:34Z","creator_user_login":"fkling"}
{"number":7821,"comment_id":"1232001293","body":"Whoops, just remembered svelte does deduping if the value is the same, my bad","updated_at":"2022-08-30T18:12:31Z","created_at":"2022-08-30T18:12:31Z","creator_user_login":"Sxxov"}
{"number":7821,"comment_id":"1232011105","body":"The deduping only works for primitives, this \"unexpected\" behaviour for this still applies to object assignment","updated_at":"2022-08-30T18:23:02Z","created_at":"2022-08-30T18:23:02Z","creator_user_login":"Sxxov"}
{"number":7829,"comment_id":"1236378283","body":"Another solution to solve this problem is to \"exclude\" the unneeded variable from the reactive block:\r\n```js\r\nfunction cancelAnimation() {\r\n    cancelAnimationFrame(animationFrameId);\r\n}\r\nfunction animationFrame() {\r\n    animationFrameId = requestAnimationFrame(animationFrame);\r\n}\r\n```\r\n```js\r\n$: if (scrollbarHidden) cancelAnimation(); // The only variable watched by Svelte is scrollbarHidden\r\n```\r\n```js\r\n$: scrollbarHidden && cancelAnimation(); // The only variable watched by Svelte is scrollbarHidden\r\n```\r\n```js\r\n$: scrollbarHidden ? cancelAnimation() : {}; // The only variable watched by Svelte is scrollbarHidden\r\n```\r\n----\r\nSvelte only look for variable directly in the reactive block, to into called function","updated_at":"2022-09-04T16:51:43Z","created_at":"2022-09-04T16:51:43Z","creator_user_login":"MacFJA"}
{"number":7829,"comment_id":"1244878810","body":"> Another solution to solve this problem is to \"exclude\" the unneeded variable from the reactive block:\r\n\r\nThis is the system I use to control what data is being reacted to, but i must say a more ergonomic syntax would be good. Creating a named function that only gets called from one place gets a bit yukky.\r\nStill, this is only a minor annoyance.","updated_at":"2022-09-13T04:21:58Z","created_at":"2022-09-13T04:21:58Z","creator_user_login":"WHenderson"}
{"number":7782,"comment_id":"1243603098","body":"related: https://mathiasbynens.be/notes/unquoted-attribute-values","updated_at":"2022-09-12T11:28:50Z","created_at":"2022-09-12T11:28:50Z","creator_user_login":"tanhauhau"}
{"number":7774,"comment_id":"1442134653","body":"@dummdidumm is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%226476e5657eb84bf8410f507c4b4d62154c520412%22%7D%2C%22id%22%3A%22QmWF9wLo4RgUv9hZagqcTFgQiwN1oPZyuYJ6LCcNzCVWpC%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A7774%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-02-23T17:09:38Z","created_at":"2023-02-23T17:09:38Z","creator_user_login":"vercel[bot]"}
{"number":7774,"comment_id":"1450397023","body":"Not merging for v3 or v4 to give us room to think about the whole thing more deeply for v5","updated_at":"2023-03-01T16:01:10Z","created_at":"2023-03-01T16:01:10Z","creator_user_login":"dummdidumm"}
{"number":7670,"comment_id":"1179682610","body":"Svelte has no opinion on how many dom nodes there should be in the root of a component.\r\n\r\nThe cleanest solution is most likely to implement an ESLint rule for this! I believe this project can help you achieve your goals @willnationsdev: https://github.com/ota-meshi/svelte-eslint-parser","updated_at":"2022-07-12T12:27:46Z","created_at":"2022-07-10T08:29:02Z","creator_user_login":"MathiasWP"}
{"number":7618,"comment_id":"1159583245","body":"Ah, the _‚Äúbizarre reason‚Äù_ seems to be the fact that updates have to run breadth-first (#3219) in order for derived store's dependencies to resolve properly. That makes sense! However, I think it still should be made a little more resilient.","updated_at":"2022-06-18T23:46:36Z","created_at":"2022-06-18T23:45:40Z","creator_user_login":"m93a"}
{"number":7618,"comment_id":"1255688341","body":"> Ah, the _‚Äúbizarre reason‚Äù_ seems to be the fact that updates have to run breadth-first (#3219) in order for derived store's dependencies to resolve properly. That makes sense! However, I think it still should be made a little more resilient.\r\n\r\nI came up against this sort of thing too and switched to my own store implementations https://github.com/WHenderson/stores-mono\r\n\r\nThe standard svelte stores are often described as an example implementation, so advanced caess such as this seem to be left as an exercise for the user.","updated_at":"2022-09-23T00:39:32Z","created_at":"2022-09-23T00:39:32Z","creator_user_login":"WHenderson"}
{"number":7950,"comment_id":"1289554997","body":"In order for it to work you must follow the hierarchy, first its `<svg>` then its `<circle>`.","updated_at":"2022-10-24T20:13:56Z","created_at":"2022-10-24T20:13:56Z","creator_user_login":"msf-caesar"}
{"number":7962,"comment_id":"1336574746","body":"This would be really great addition! One last thing missing from perfect framework/compiler üòÅ\r\nAs long term svelte user/addict, I delt with this issue many times. Simple workaround is to created parent div for this component and style that, but it does not work in all cases and i kinda hate growing html tree. So I also usually pick making the class global, which in my opinion is unnecessary chore and could be improved.","updated_at":"2022-12-05T00:38:20Z","created_at":"2022-12-05T00:38:20Z","creator_user_login":"ToP29"}
{"number":7656,"comment_id":"1175718748","body":"I think thats on purpose, because when you would remove the title, without setting a new one the page would have no title at all. So the only way to change the title is to set a new one.\r\nYou could of cause keep track of the previeous titles and set it to the last one. This could be a possible solution","updated_at":"2022-07-06T02:47:52Z","created_at":"2022-07-06T02:47:52Z","creator_user_login":"pedeEli"}
{"number":7656,"comment_id":"1583255301","body":"This actually blocks fallback titles, maybe we can (at least) remove the title when one is present in a parent, like:\r\n```html\r\n<!-- src/routes/+layout.svelte -->\r\n<svelte:head>\r\n  <title>Fallback</title>\r\n</svelte:head>\r\n```\r\n```html\r\n<!-- src/routes/+page.svelte -->\r\n<svelte:head>\r\n  <title>Home</title>\r\n</svelte:head>\r\n\r\n<a href=\"/404\">Go to 404 page</a>\r\n```\r\nGive the above example a direct call to \"/404\" will result in the title \"Fallback\" while a call using CSR will result in the old title \"Home\" still being displayed instead of the fallback one.","updated_at":"2023-06-08T19:55:09Z","created_at":"2023-06-08T19:55:09Z","creator_user_login":"UnlimitedBytes"}
{"number":7674,"comment_id":"1179980058","body":"Without an example of cases where the layout breaks, it's hard to know whether this is truly needed. I assume you've already encountered one such case. In that case, would `{#key}` (https://svelte.dev/docs#template-syntax-key) have worked for you in place of `{#if}`?","updated_at":"2022-07-11T05:24:03Z","created_at":"2022-07-11T05:24:03Z","creator_user_login":"rmunn"}
{"number":7674,"comment_id":"1180407213","body":"I tried, specifically I'm using Fly for scrolling, but as such #key just updates it.\n\nI'm reevaluating my comments, because the layout as such doesn't break, it would break if the Handle Button was visible in the mobile version.\n\nBut now that we are here I still consider that it would be nice to control the state of the transitions with a parameter, or something that solves repeating code that many have chosen to do this.\n\n`{#if some}\n<div transition:fly={{ x: -250 }}>\n<slot />\n</div>\n{/else}\n<div>\n<slot />\n</div>\n{/if}`","updated_at":"2022-07-11T13:25:17Z","created_at":"2022-07-11T13:25:17Z","creator_user_login":"caesar-exploit"}
{"number":7620,"comment_id":"1160625629","body":"I support this, this can be a huge pain. Local also doesn't always reliably work for some reason (fly transition sometimes doesn't work at all with local?)","updated_at":"2022-06-20T16:07:51Z","created_at":"2022-06-20T16:07:51Z","creator_user_login":"vlrevolution"}
{"number":7701,"comment_id":"1190193844","body":"Do you have a REPL showing what you're trying to do now? This sounds like #7696, which is related to how reactivity works.","updated_at":"2022-07-20T12:07:22Z","created_at":"2022-07-20T12:07:22Z","creator_user_login":"Conduitry"}
{"number":7701,"comment_id":"1190246212","body":"@Conduitry For some reason the window to authenticate with my Github instantly closes on the repl, but here is the code for the repl:\r\n```\r\n<script>\r\n\tlet input\r\n\t\r\n\tlet value = 100\r\n\t\r\n\tfunction removeLeadingZeros() {\r\n\t\tvalue = Number( value.toString()) // Usually removes leading zeros\r\n\t}\r\n\r\n</script>\r\n\r\n<input type=\"number\" bind:value \r\n\t\t\t on:input={removeLeadingZeros} \r\n\t\t\t bind:this={input} \r\n\t\t\t id=\"x\"\r\n\t\t\t >\r\n<p>\r\n\t^ It is possible to input the \"number\" 00100\r\n</p>\r\n\r\n<div>\r\n\tNumeric value of the variable:\r\n\t{value}\r\n</div>\r\n```\r\n\r\nAnd yes, it is basically #7696 and the answer of @stephane-vanraes solves it quite well. (Thanks man :) )\r\nI just think that there is no use-case for the leading zeros and that it might be a nice feature for Svelte to do this automatically.","updated_at":"2022-07-20T16:08:13Z","created_at":"2022-07-20T12:49:12Z","creator_user_login":"Visual-Dawg"}
{"number":8043,"comment_id":"1321831525","body":"> give svelte animations a functionality similar to the Ternary conditional operator so we have more control over when to make it animate\r\n\r\nhttps://github.com/sveltejs/svelte/issues/6942","updated_at":"2022-11-21T10:26:10Z","created_at":"2022-11-21T10:26:10Z","creator_user_login":"Prinzhorn"}
{"number":8041,"comment_id":"1321142433","body":"How about to generate also to epub and mobi?","updated_at":"2022-11-20T14:06:07Z","created_at":"2022-11-20T14:06:07Z","creator_user_login":"wallasfmorais"}
{"number":8041,"comment_id":"1332445687","body":"thanks for this!","updated_at":"2022-11-30T16:41:35Z","created_at":"2022-11-30T16:41:35Z","creator_user_login":"mhessdev"}
{"number":8041,"comment_id":"1584012076","body":"Writing to +1 this as an official thing. Helpful for people who want to fix up their code on an airplane etc (not all have onboard wifi).","updated_at":"2023-06-09T05:50:31Z","created_at":"2023-06-09T05:50:31Z","creator_user_login":"SohamG"}
{"number":7983,"comment_id":"1294657247","body":"I'm not sure what exactly is going on, but this looks like undefined behavior and the question is what would be the expected behavior? By adding `data1` as parameter you add `data1` as a reactive dependency to the expression `filter1(1, data1)`. So the `#each` will re-run when `bind:value={data1[1]}` changes, because it makes `data1` dirty. So far this is expected behavior. In certain cases you actually want this and add variables to your expression to make it reactive, e.g. what you have could be written as `{#each (data1, filter1(1)) as option}` as well (the comma operator is quite useful in Svelte to add dependencies to an expression).\r\nYour code might just as well cause an endless loop of `bind:value` and `{#each}` bouncing back and forward.\r\n\r\nThis is a variant of an issue that pops up regularly (I can't find the perfect one, but https://github.com/sveltejs/svelte/issues/7229 is related). Functions called inside template expressions should be pure and not have any side-effects.\r\n\r\nHere's the relevant difference in generated code:\r\n\r\n![image](https://user-images.githubusercontent.com/679144/198535483-f92679ff-b178-4bb5-8c45-e55c0855c9b0.png)\r\n","updated_at":"2022-10-28T08:10:28Z","created_at":"2022-10-28T08:09:47Z","creator_user_login":"Prinzhorn"}
{"number":7968,"comment_id":"1310479482","body":"I didn't run your project but from looking at it, here's what I think: Your component library does not specify a `svelte` entry point in `package.json`. So your project is importing the compiled components and now at runtime you have two Svelte instances (with potentially different versions). Refs https://github.com/sveltejs/svelte/issues/3165 \r\n\r\nExamples:\r\n\r\nhttps://github.com/sveltejs/svelte-scroller/blob/b50ec28bb7fdd9dc8b08ec59b8a34ea7b1d684e6/package.json#L5\r\nhttps://github.com/isaacHagoel/svelte-dnd-action/blob/148ee38b63919074637095aecfd6e3dcf6770772/package.json#L3\r\nhttps://grep.app/search?current=2&q=%22svelte%22%3A%20%22.&filter[path.pattern][0]=package.json","updated_at":"2022-11-10T15:40:16Z","created_at":"2022-11-10T15:38:09Z","creator_user_login":"Prinzhorn"}
{"number":7968,"comment_id":"1310481697","body":"Yeah, this perfectly explains it given your comment here https://github.com/damianof/large-scale-apps-my-svelte-project/blob/b078d3328024ee34d7322a427eddbb218e447923/my-svelte-project/src/App.svelte#L2-L3\r\nBecause when you import `from 'my-component-library'` it's the compiled components.","updated_at":"2022-11-10T15:39:59Z","created_at":"2022-11-10T15:39:45Z","creator_user_login":"Prinzhorn"}
{"number":7943,"comment_id":"1284505483","body":"It's not straightforward to do this because we want to attach custom properties to each element for use by dev tools. So, if we created it all at once with `.innerHTML`, we'd need to then use selectors to pick out the individual elements to attach the properties.","updated_at":"2022-10-19T19:57:45Z","created_at":"2022-10-19T19:57:45Z","creator_user_login":"Conduitry"}
{"number":7929,"comment_id":"1275244707","body":"This seems reasonable. But I think it should be a compiler error, not just a warning. There's no reason currently to even have code like this, and warnings are often missed.","updated_at":"2022-10-11T20:34:57Z","created_at":"2022-10-11T20:34:57Z","creator_user_login":"Conduitry"}
{"number":7851,"comment_id":"1242656318","body":"https://github.com/sveltejs/rfcs/pull/41\r\n\r\nWhat you describe is exactly what I want declarative actions to be. And Svelte should be able to compile them to the same declarative code that vanilla actions already use with 100% backwards compat.\r\n\r\nThe comments I made in that rfc should resonate with you, e.g.\r\n\r\n> I realized that declarative actions would change my mental model for actions.;\r\n>\r\n>  * Currently: actions are my escape hatch into the DOM world and I can do with the node whatever I want\r\n> * New: actions allow horizontal extension of elements. In contrast to the component system (with composition/context etc.) which are all vertical.\r\n","updated_at":"2022-09-10T07:35:58Z","created_at":"2022-09-10T07:26:15Z","creator_user_login":"Prinzhorn"}
{"number":7851,"comment_id":"1242697144","body":"@Prinzhorn Thanks, that is a very similar proposal, though it looks a bit like it's heading in a different direction. I've added my thoughts over there.","updated_at":"2022-09-10T10:28:12Z","created_at":"2022-09-10T10:28:12Z","creator_user_login":"mimbrown"}
{"number":7967,"comment_id":"1336298702","body":"I will close or review this PR after solving this comment.\r\nhttps://github.com/sveltejs/svelte/issues/7888#issuecomment-1336298623","updated_at":"2022-12-04T01:52:22Z","created_at":"2022-12-04T01:52:22Z","creator_user_login":"baseballyama"}
{"number":7967,"comment_id":"1441688987","body":"@baseballyama is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22a32d7c2ead7f5bd9384e6932d4797bf86f06589d%22%7D%2C%22id%22%3A%22QmUon4h5Zi9unVMJpWtGRi5DkDT7ReqXs36kSFKzbGdCeg%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A7967%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-02-23T12:29:55Z","created_at":"2023-02-23T12:29:55Z","creator_user_login":"vercel[bot]"}
{"number":7967,"comment_id":"1441695048","body":"@RaiVaibhav I went back to this PR and issue, and now I got this properly. (Sorry for late understandingüôè)\r\nI refactor this PR and format test.","updated_at":"2023-02-23T12:34:17Z","created_at":"2023-02-23T12:34:17Z","creator_user_login":"baseballyama"}
{"number":7908,"comment_id":"1268059738","body":"even in today's firefox innerHTML is still quite slow\r\nhttps://andrew.hedges.name/experiments/innerhtml/original.html","updated_at":"2022-10-05T07:33:02Z","created_at":"2022-10-05T07:33:02Z","creator_user_login":"cyan-2048"}
{"number":7908,"comment_id":"1268285394","body":"oh wow so that's why inferno beats svelte even though inferno uses vdom.. because inferno only uses innerHTML **once**","updated_at":"2022-10-05T11:07:03Z","created_at":"2022-10-05T11:07:03Z","creator_user_login":"cyan-2048"}
{"number":7908,"comment_id":"1276580847","body":"> even in today's firefox innerHTML is still quite slow [andrew.hedges.name/experiments/innerhtml/original.html](https://andrew.hedges.name/experiments/innerhtml/original.html)\r\n\r\nThat speed test is one of the weirder i've seen lately... I have no idea how he manages to make the innerHTML example so slow - it is nowhere near realistic","updated_at":"2022-10-12T18:37:41Z","created_at":"2022-10-12T18:37:41Z","creator_user_login":"MathiasWP"}
{"number":7325,"comment_id":"1054590429","body":"can I do that?","updated_at":"2022-02-28T19:29:30Z","created_at":"2022-02-28T19:29:30Z","creator_user_login":"Ash-KODES"}
{"number":7325,"comment_id":"1054597732","body":"What sort of contribution guidelines? Do you just mean a link to the existing CONTRIBUTING.md?","updated_at":"2022-02-28T19:40:17Z","created_at":"2022-02-28T19:40:17Z","creator_user_login":"Conduitry"}
{"number":7282,"comment_id":"1044116957","body":"I think this is a duplicate of https://github.com/sveltejs/svelte/issues/4933 and falls under the same umbrella. In your case `a = inputText` and `b = value.s`","updated_at":"2022-02-18T08:14:21Z","created_at":"2022-02-18T08:14:21Z","creator_user_login":"Prinzhorn"}
{"number":7282,"comment_id":"1044290344","body":"that seems to be similar, yes. i also thought, that https://github.com/sveltejs/svelte/issues/2444 could be the reason for this behavior, but the code there has changed a lot in the new versions.\r\n\r\nbut there is one additional thing, i am wondering:\r\nwhy does the \"input\" event of the textarea cause to update the reactive block, but just if there is an object used? is it the same issue, or another one?","updated_at":"2022-02-18T10:35:54Z","created_at":"2022-02-18T10:28:54Z","creator_user_login":"QuickMick"}
{"number":7314,"comment_id":"1092322900","body":"hi, could you share a repl on what is the value of `text` and `marked` that can reproduce this error?","updated_at":"2022-04-08T00:22:42Z","created_at":"2022-04-08T00:22:42Z","creator_user_login":"tanhauhau"}
{"number":8815,"comment_id":"1604635567","body":"What about an order based approach, where the parent can specify an optional order of slots?\r\n\r\nThis way the children can remain as they are, and it would be backwards compatible for the most part.","updated_at":"2023-06-23T17:57:06Z","created_at":"2023-06-23T17:57:06Z","creator_user_login":"finnhvman"}
{"number":8815,"comment_id":"1604703593","body":"@stephane-vanraes \r\n\r\nI like the idea in concept. However, the one caveat I have is the code smell of configuring this information directly into the child component since the child shouldn't need to know anything about the types it is used in or how it is integrated into those things. Furthermore, the same component *type* may serve to fill different default *slots* depending on what the parent component's type is (though not in the quoted use case).\r\n\r\nFor that reason, I think it'd be better to do it as a set of default slot matchups you configure by pairing specific component types (used within the current component) with specific header slots. This keeps the data where it is strictly relevant, and as a default, users would always be free to override it by manually specifying the intended slot during use.\r\n\r\nAs for syntax, you'd likely use a `<script type=\"module\">` if you wanted to also be able to import the child components' types and get name-refactoring support accounted for. On the flip side, you'd also need to define some new special-case variable (like `$$defaultSlots` or something) to avoid name collisions and I don't like the idea of further polluting that namespace over such a small feature. So...we probably shouldn't use a module script.\r\n\r\nInstead, this could just live in `<svelte:options />` as you suggested (where it more reasonably belongs anyway), but the Svelte devs might also want to modify whatever tools handle name-refactoring (that is VS Code specific, right?) so that the stringified name references from the configured default slot pairings are also updated accordingly.\r\n\r\n```svelte\r\n<!-- Modal.svelte -->\r\n<svelte:options defaultSlots={\r\n  \"ModalHeader\":  \"header\",\r\n  \"ModalContent\": \"content\",\r\n  \"ModalFooter\": \"footer\"\r\n} />\r\n```\r\n\r\nFor example, whenever the name of the `ModalHeader` component changes, you'd want to update the corresponding \"ModalHeader\" text.\r\n\r\nA major issue with *that* though is that refactoring tools wouldn't necessarily have a clear idea to *which* `ModalHeader` class it was referring. You'd need a requirement that the component's `<script>` tag include an import statement resolving to an alias of the same name. Then, if no imported Svelte components' aliases matched the key, the Svelte compiler could issue a warning.\r\n\r\n```svelte\r\n<script>\r\n  import Header from \"./lib1/ModalHeader.svelte\"; // would be ignored\r\n  import ModalHeader from \"./lib2/ModalHeader.svelte\"; // would implicitly hook up to above options in same component\r\n  // With current code, compiler would issue warnings that\r\n  // `ModalContent` and `ModalFooter` aliases are missing for `defaultSlots` options.\r\n</script>\r\n```\r\n\r\n@finnhvman \r\n\r\n> What about an order based approach, where the parent can specify an optional order of slots?\r\n\r\nI'm not a fan of this approach since it leads to behavioral changes whenever someone comes in later and inserts a new child component into the sequence. From my perspective, merely adding another slot or element (or reordering them, for that matter) shouldn't lead directly to the elements ceasing to match up with their intended slot anymore. That would just be hard/annoying to catch and debug.","updated_at":"2023-06-23T18:44:21Z","created_at":"2023-06-23T18:43:24Z","creator_user_login":"willnationsdev"}
{"number":8815,"comment_id":"1604775552","body":"Not 100% sure about the best way to define, this is only really usefull in \"sets of components\" that are made to be used together, in a framework like React these might all live in the same file, which is not possible in Svelte. \r\n\r\nNote that this is also not a \"must have\" feature, the current system works just fine but is merely a thing that would make it smoother.  On the other hand, it could be shelved as introducing an _inconsistence_ in the sense that the block showing the usage could be interpreted in two ways depending on how the individual components are implemented, adding a little bit of \"magic\" that can be strange.\r\n\r\n> What about an order based approach, where the parent can specify an optional order of slots?\r\n> \r\n> This way the children can remain as they are, and it would be backwards compatible for the most part.\r\n\r\nThis would not be backwards compatible, currently all those children would be rendered in the `default` slot, changing this would break a lot of implementations.\r\n\r\n\r\n","updated_at":"2023-06-23T19:30:18Z","created_at":"2023-06-23T19:30:18Z","creator_user_login":"stephane-vanraes"}
{"number":8975,"comment_id":"1641997978","body":"@geoffrich can you have a look? I've read the spec and it sounds like `role=\"application\"` should be considered interactive. I'm wondering though why [eslint-a11y-jsx also expects this to fail](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/f0d2ddb65f21278ad29be43fb167a1092287b4b1/__tests__/src/rules/no-noninteractive-element-interactions-test.js#L346)? Should the spec instead be read as \"the contents can be interactive but the element on which the role is placed is not\"?","updated_at":"2023-07-19T12:31:05Z","created_at":"2023-07-19T12:31:05Z","creator_user_login":"dummdidumm"}
{"number":8975,"comment_id":"1642953697","body":"Hm, [reading the spec](https://www.w3.org/TR/wai-aria-1.1/#application) I'm not sure that `application` itself is interactive? \r\n\r\n> containing one or more focusable elements requiring user input, such as keyboard or gesture events, that do not follow a standard interaction pattern supported by a [widget](https://www.w3.org/TR/wai-aria-1.1/#widget) role.\r\n\r\nIt contains interactive elements but I'm not sure it's able to be interacted with directly. But I have to admit this is a role I haven't used before\r\n\r\nOne worry I have with merging this PR is that it would encourage people to start throwing the `application` role on everything to get around the lint warnings, and using this role [should be used rarely and carefully](https://www.marcozehe.de/if-you-use-the-wai-aria-role-application-please-do-so-wisely/).\r\n\r\nBut I think the fact that these warnings are telling people to throw ARIA roles on everything without fully understanding the implications points at a larger issue that may require some thought on how to provide better guidance and reduce false positives (see also #8964, #8273, #8001). I'm unfortunately pretty busy prepping for a conference talk at the end of the month, but that's something I want to take a closer look at when I have more time.","updated_at":"2023-07-20T00:58:42Z","created_at":"2023-07-20T00:58:42Z","creator_user_login":"geoffrich"}
{"number":8975,"comment_id":"1643609016","body":"Thanks guys, appreciate the caution on the review, and no rush - it's just a build warning :slightly_smiling_face: \r\n\r\nWhen I read the spec, _\"An `application` is listed as a `structure` containing one more more focusable elements.\"_ - My interpretation was that a single, focusable element satisfied the requirements, but I could be misinterpreting.\r\n\r\n...I also wouldn't be the only misinterpreting: https://github.com/dequelabs/axe-core/issues/890\r\n\r\n@geoffrich - The blogpost that you linked was written in 2012 with reference to concerns with the [ARIA 1.0](https://www.w3.org/TR/wai-aria-1.0/roles#application) spec. Previously the `application` role was derived from the `landmark` abstract role, but was changed to be derived from the `structure` abstract role in 2015 with ARIA 1.1.\r\n\r\n The `structure` abstract role is [\"not usually interactive\"](https://www.w3.org/TR/wai-aria-1.2/#document_structure_roles), but here are some interactive(ish) subclasses of `structure`:\r\n\r\n* [`separator`](https://www.w3.org/TR/wai-aria-1.2/#separator) is a subclass of `structure` that may be interactive... but it changes (?) to a subclass of `widget` when it is focusable\r\n* [`tab`](https://www.w3.org/TR/wai-aria-1.1/#tab) is interactive and extends abstract role [`sectionhead`](https://www.w3.org/TR/wai-aria-1.2/#sectionhead), which extends `structure`... but `tab` also extends `widget` so we can assume it's interactivity is derived from there\r\n* [`menu`](https://www.w3.org/TR/wai-aria-1.2/#menu) extends [`select`](https://www.w3.org/TR/wai-aria-1.2/#select) and is described as a \"type of widget\", and is expected to be interactive by `eslint-plugin-jsx-a11y`... but isn't actually a subclass of widget in the spec? ...And surely it would make more sense for the `menuitem` elements within would be interactive, whilst the `menu` itself is not?\r\n* An of course `application` is listed as a structure containing one more more focusable elements.\r\n \r\n\r\n@dummdidumm - I'm not sure `eslint-plugin-jsx-a11y` should be the ultimate source of truth, because, their tests expect `separator` to be non-interactive, [despite being explicitly allowed in the spec](https://www.w3.org/TR/wai-aria-1.2/#separator), and `menu` is expected to be interactive, even though it doesn't actually derive from the `widget` abstract role (but the spec is very unclear).\r\n\r\nIf we are worried about people \"_throwing the `application` role on everything to get around the lint warnings_\", then enforcing that the element is accessibly described  ([as per the spec](https://www.w3.org/TR/wai-aria-1.2/#application)) might be enough disincentive to use `role=\"application\"` as a work-around.","updated_at":"2023-07-20T10:27:57Z","created_at":"2023-07-20T09:43:16Z","creator_user_login":"oscarhermoso"}
{"number":8975,"comment_id":"1643621551","body":"I raised the query in https://github.com/w3c/aria/issues/1985","updated_at":"2023-07-20T09:52:05Z","created_at":"2023-07-20T09:52:05Z","creator_user_login":"oscarhermoso"}
{"number":8949,"comment_id":"1629349733","body":"It would be convenient, but you already can get pretty close using actions.\r\n\r\nSomething along the lines of:\r\n\r\n```js\r\nexport function focused(node, store) {\r\n    const onChange = () => store.set(document.activeElement == node);\r\n    node.addEventListener('focus', onChange);\r\n    node.addEventListener('blur', onChange);\r\n\r\n    const cancel = store.subscribe(shouldFocus => {\r\n        const focused = document.activeElement == node;\r\n        if (focused && shouldFocus == false)\r\n            node.blur();\r\n        else if (focused == false && shouldFocus)\r\n            node.focus();\r\n    });\r\n\r\n    return {\r\n        destroy() {\r\n            node.removeEventListener('focus', onChange);\r\n            node.removeEventListener('blur', onChange);\r\n            cancel();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nUsage:\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n  import { focused } from './actions.js';\r\n\r\n  const inputFocused = writable(false);\r\n</script>\r\n\r\n<input use:focused={inputFocused} />\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/73b9d010640d40be8aa926510fdcc553?version=4.0.5)\r\n\r\nOf course that is more verbose as it requires imports and stores.\r\n\r\n---\r\n\r\nFor convenience the action and store could be combined into one object, e.g.\r\n\r\n```js\r\nimport { writable } from 'svelte/store';\r\n\r\nexport function createFocused(initialValue) {\r\n  const store = writable(initialValue);\r\n\r\n  function action(node) {\r\n    // [action as above]\r\n  }\r\n\r\n  Object.assign(action, store);\r\n  return action;\r\n}\r\n```\r\n```svelte\r\n<script>\r\n  import { createFocused } from './actions.js';\r\n  const focused = createFocused(false);\r\n</script>\r\n\r\n<input use:focused />\r\nFocused: {$focused}\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/8962699b52b64a38b6c54e1bddd83f89?version=4.0.5)","updated_at":"2023-08-07T05:58:43Z","created_at":"2023-07-10T16:51:32Z","creator_user_login":"brunnerh"}
{"number":8949,"comment_id":"1630212525","body":"Ah youre right it could also be done this way but would it also be possible without a store?","updated_at":"2023-07-11T06:20:11Z","created_at":"2023-07-11T06:20:11Z","creator_user_login":"Maximinodotpy"}
{"number":8949,"comment_id":"1630330339","body":"I do not think so. You need some way to bridge reactivity between component and non-component code.","updated_at":"2023-07-11T07:53:08Z","created_at":"2023-07-11T07:53:08Z","creator_user_login":"brunnerh"}
{"number":8949,"comment_id":"1630363228","body":"I'm not sure but I imagine that normal let variables internally somewhat behave like stores and other dom things like the width are also possible so I think it would be easiest to make this a built in feature, of course dont take me too seriously because I have no idea of the source code.","updated_at":"2023-07-11T08:15:25Z","created_at":"2023-07-11T08:15:25Z","creator_user_login":"Maximinodotpy"}
{"number":8949,"comment_id":"1656734253","body":"Without store you can use callback in this case\r\n```\r\n\r\nexport function focused(node, onFocused) {\r\n       const onChange = () => onFocused(document.activeElement == node);\r\n       node.addEventListener('focus', onChange);\r\n       node.addEventListener('blur', onChange);\r\n       ...\r\n}\r\n```\r\n```\r\n\r\nfunction onFocused(isFocused: boolean) {\r\n\r\n}\r\n\r\n<input use:focused={{onFocused}} />\r\n```","updated_at":"2023-07-29T13:42:59Z","created_at":"2023-07-29T13:42:32Z","creator_user_login":"StagnantIce"}
{"number":8655,"comment_id":"1568636846","body":"You're pushing the HMR engine to its limits with this kind of cyclical dependencies.\r\n\r\nI am not sure this can be fixed in a reasonable way on the Svelte side. On Vite side, it is debatable whether this could / should be fixed, or if it is like it is. The only thing I'm sure for now is that we're in a pretty gray area :sweat_smile: \r\n\r\nCurrently, you can work around this limitation either by explicitly breaking the import loop, by extracting the `context=module` part to its own module:\r\n\r\n`Parent.js`\r\n\r\n```js\r\nexport const CONTEXT = {}\r\n```\r\n\r\nThis is probably the cleanest and more solid approach.\r\n\r\nAlternatively, you can make your precise use case work with a sprinkle of HMR incantations:\r\n\r\n```diff\r\n<script context=\"module\" lang=\"ts\">\r\n-  export const CONTEXT = {}\r\n+  export const CONTEXT = import.meta.hot?.data?.CONTEXT || {}\r\n+  if (import.meta.hot?.data) {\r\n+    import.meta.hot.data.CONTEXT = CONTEXT\r\n+  }\r\n</script>\r\n```\r\n\r\n(This makes sure the identity of your `CONTEXT` object is preserved across HMR updates.)","updated_at":"2023-05-30T15:24:35Z","created_at":"2023-05-30T15:24:35Z","creator_user_login":"rixo"}
{"number":8655,"comment_id":"1569188808","body":"Understood but I wasn't aware it was an HMR limitation since the repro was so minimal. Thanks for the example by the way, I think it would be worth putting in the docs for `getContext`/`setContext`","updated_at":"2023-05-30T22:11:30Z","created_at":"2023-05-30T22:11:30Z","creator_user_login":"space-nuko"}
{"number":8655,"comment_id":"1570168566","body":"After further investigation, it turns out it is a known bug in Vite, and it is in the process of being fixed in [this PR](https://github.com/vitejs/vite/pull/13024). So I think we just need to wait it out.","updated_at":"2023-05-31T12:46:14Z","created_at":"2023-05-31T12:46:14Z","creator_user_login":"rixo"}
{"number":8623,"comment_id":"1559932109","body":"@MathiasWP is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2207a7ff4b4a1681a79eea65379ae6b172168bd388%22%7D%2C%22id%22%3A%22QmWnA9QAFqtyHEFYo9BtxD6dJ1TeArnUpMsEyJtVNs9e9m%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8623%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-23T18:20:28Z","created_at":"2023-05-23T18:20:28Z","creator_user_login":"vercel[bot]"}
{"number":8623,"comment_id":"1559986432","body":"Not sure why test is failing, everything is passing locally","updated_at":"2023-05-23T19:06:01Z","created_at":"2023-05-23T19:06:01Z","creator_user_login":"MathiasWP"}
{"number":8623,"comment_id":"1559990861","body":"Puppeteer doesn't always start up properly, I've triggered a rerun.","updated_at":"2023-05-23T19:09:33Z","created_at":"2023-05-23T19:09:33Z","creator_user_login":"gtm-nayan"}
{"number":8623,"comment_id":"1560011269","body":"> Puppeteer doesn't always start up properly, I've triggered a rerun.\r\n\r\nthanks! that fixed it","updated_at":"2023-05-23T19:28:27Z","created_at":"2023-05-23T19:28:27Z","creator_user_login":"MathiasWP"}
{"number":8623,"comment_id":"1675930181","body":"###  ü¶ã  Changeset detected\n\nLatest commit: d9cb81fc35f1e7d0cf80c288a087e7c0e6ea7712\n\n**The changes in this PR will be included in the next version bump.**\n\n<details><summary>This PR includes changesets to release 1 package</summary>\n\n  | Name   | Type  |\n| ------ | ----- |\n| svelte | Patch |\n\n</details>\n\nNot sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/MathiasWP/svelte/new/skip-to-then-if-promise-has-been-resolved?filename=.changeset/pink-seas-eat.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afeat%3A%20automatically%20skip%20to%20%60then%60%2F%60catch%60%20if%20promise%20has%20already%20been%20rejected%20or%20resolved%0A)\n\n","updated_at":"2023-08-12T14:10:07Z","created_at":"2023-08-12T14:04:46Z","creator_user_login":"changeset-bot[bot]"}
{"number":8560,"comment_id":"1536215585","body":"@bytesnz is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%220b4b70d66f12310a97736f63dab41ba94e13698c%22%7D%2C%22id%22%3A%22QmQDFrBFre1GyFuyn6FZqPxTeAmPAQtWugwe9RkUuEp3aP%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8560%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-05T12:50:28Z","created_at":"2023-05-05T12:50:28Z","creator_user_login":"vercel[bot]"}
{"number":8560,"comment_id":"1637525398","body":"Hi, could you resolve the conflicts? The file structure has changed, so the file you'd want to add this change to is `documentation/docs/02-template-syntax/02-basic-markup.md`. Remember to remove the `---` from your markdown, that's a convention we left behind in the old site üòÅ","updated_at":"2023-07-17T07:35:27Z","created_at":"2023-07-17T07:35:27Z","creator_user_login":"PuruVJ"}
{"number":8560,"comment_id":"1641054614","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 646f4ad5b736a30578277fcb304f94499fce9a96\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/bytesnz/svelte/new/patch-2?filename=.changeset/late-trains-scream.md&value=---%0A%0A---%0A%0Adocs%3A%20Add%20escaping%20of%20curly%20braces%20to%20docs%0A)\n\n","updated_at":"2023-07-18T22:06:26Z","created_at":"2023-07-18T22:06:26Z","creator_user_login":"changeset-bot[bot]"}
{"number":8560,"comment_id":"1641055684","body":"> Hi, could you resolve the conflicts? The file structure has changed, so the file you'd want to add this change to is `documentation/docs/02-template-syntax/02-basic-markup.md`. Remember to remove the `---` from your markdown, that's a convention we left behind in the old site grin\r\n\r\nDone :smile: ","updated_at":"2023-07-18T22:07:31Z","created_at":"2023-07-18T22:07:31Z","creator_user_login":"bytesnz"}
{"number":8765,"comment_id":"1598467128","body":"I'm honestly not sure what the more correct behavior is - arguably that slot _is_ taken, by the component passing things through, so you could make the argument that the one passing through now should take care of the fallback.","updated_at":"2023-06-20T09:51:22Z","created_at":"2023-06-20T09:51:22Z","creator_user_login":"dummdidumm"}
{"number":8765,"comment_id":"1598510135","body":"@dummdidumm It is slot **forwarding** (not a nesting) that worked in specific way from the start until .29 in the same Svelte 3. Breaking changes in slot behavior are clearly not correct. Not to mention it breaks composition.","updated_at":"2023-06-20T10:37:21Z","created_at":"2023-06-20T10:22:12Z","creator_user_login":"kkarpeev"}
{"number":8765,"comment_id":"1600478042","body":"@dummdidumm Will you answer, please? It's a quite critical bug that ruins basic svelte composition feature. Same for the default slot.","updated_at":"2023-06-21T10:22:57Z","created_at":"2023-06-21T09:10:11Z","creator_user_login":"kkarpeev"}
{"number":8765,"comment_id":"1603075471","body":"I just tried it using a fragment instead and that seems to work so it seems to be an inconsistent behavior at least?\r\n\r\n@kkarpeev Maybe this works as a workaround for you? https://svelte.dev/repl/6c5c247ba9eb4cd8941d72cc57376a35?version=3.59.1\r\n","updated_at":"2023-06-22T17:46:06Z","created_at":"2023-06-22T17:46:06Z","creator_user_login":"hjalmar"}
{"number":8765,"comment_id":"1603504943","body":"@hjalmar The way I see it, your example does one forward (using the `slot`) and one assignment (using the `svelte:fragment`).\r\n\r\nAs I understand the issue, it's specifically that forwarding currently breaks any `if` blocks that use `$$slots` as well as any fallback slot contents, as demonstrated here: https://svelte.dev/repl/e07f09d9fd9d4fde8dd32a42bf4cd110?version=3.59.1\r\n\r\nThe second use of `Component1` in this example doesn't actually use any of the slots, but the default slot content still isn't shown and the `if` test shows that `$$slots` property, incorrectly, is `true`.\r\n\r\nhttps://github.com/sveltejs/svelte/issues/2079 may also be relevant.","updated_at":"2023-06-23T01:24:17Z","created_at":"2023-06-23T01:22:09Z","creator_user_login":"Cybolic"}
{"number":8765,"comment_id":"1630961203","body":"well, in `3.28` it didnt work completely as you think too, as shown in:\r\n\r\nhttps://svelte.dev/repl/2cdf3c12fda14ff980bcc8426179dd4f?version=3.28.0\r\n\r\nyou would not be able to pass content from `App` all the way into `Component2` through slot forwarding.\r\n\r\nthe problem that you are pointing out is that `Component2` has no idea if there's no actual content passed from a slot content from `Component1`, so i think one of the solutions for this is to have a conditional slot content:\r\n\r\n```svelte\r\n<Component2>\r\n  {#if $$slots['1']}\r\n    <slot name=\"1\" slot=\"2\" />\r\n  {/if}\r\n</Component2>\r\n```\r\n\r\nthough the conditional slot is currently undecided as the team is still settling down what would be for svelte 5\r\n\r\nhttps://github.com/sveltejs/svelte/pull/8304","updated_at":"2023-07-11T14:42:20Z","created_at":"2023-07-11T14:42:20Z","creator_user_login":"tanhauhau"}
{"number":8592,"comment_id":"1549721649","body":"Can you add LOCAL_SVELTE_PATHto your .env.local file?\n\nIt can br an empty string, the variable just needs to be there ","updated_at":"2023-05-16T13:54:49Z","created_at":"2023-05-16T13:54:49Z","creator_user_login":"PuruVJ"}
{"number":8592,"comment_id":"1549740011","body":"@PuruVJ I thought that when I local svelte path is not provided the website use automatically other,\r\nso all I need is to provide the local svelte path?","updated_at":"2023-05-16T14:01:24Z","created_at":"2023-05-16T14:01:24Z","creator_user_login":"nazarepiedady"}
{"number":8592,"comment_id":"1549744351","body":"the environment variable is actually imported. This means that if it can't find the variable, the roll-up bundling breaks. So it needs something there for now.\n\nI'll later change it to use dynamic env later to avoid this","updated_at":"2023-05-16T14:03:44Z","created_at":"2023-05-16T14:03:44Z","creator_user_login":"PuruVJ"}
{"number":8592,"comment_id":"1550174812","body":"@PuruVJ can I fix this uncomment the `LOCAL_SVELTE_PATH`?\r\n\r\nAlso the the router algoritm is not supporting localization, what do you advice?","updated_at":"2023-05-16T18:36:11Z","created_at":"2023-05-16T18:36:11Z","creator_user_login":"nazarepiedady"}
{"number":8592,"comment_id":"1550187318","body":"I fixed in `sites` branch, check the last few commits\r\n\r\nCan you elaborate the point about routing algo not supporting localisation?","updated_at":"2023-05-16T18:47:30Z","created_at":"2023-05-16T18:47:30Z","creator_user_login":"PuruVJ"}
{"number":8592,"comment_id":"1550370455","body":"@PuruVJ \r\nSorry, I confused things here, the problem with routes is in the svelte-kit site,\r\nwhere I am having trouble with the translation of the content which is breaking\r\nthe route checking.\r\n\r\nSo about `LOCAL_SVELTE_PATH` noticed the resolution but I am having another problem\r\nwith the Supabase whose it is being said to be required.","updated_at":"2023-05-16T21:27:46Z","created_at":"2023-05-16T21:21:55Z","creator_user_login":"nazarepiedady"}
{"number":8592,"comment_id":"1692492718","body":"@PuruVJ and @benmccann could you shed some light on this problem I having?\r\n\r\nI really do not know what is happening, I just translated markdown files and content without touching on the code but the build breaks all times.\r\n\r\nTo be honest I never had such problems working on [vuejs-translations/docs-pt](https://github.com/vuejs-translations/docs-pt), but producing a community translation of the svelte website is being an absolute hell.\r\n\r\n![Screenshot 2023-08-24 at 23-10-34 Deployment Overview ‚Äì Dashboard ‚Äì Vercel](https://github.com/sveltejs/svelte/assets/31008635/e35da5a6-564a-493a-99b2-a3049663b470)","updated_at":"2023-08-24T22:24:15Z","created_at":"2023-08-24T22:24:15Z","creator_user_login":"nazarepiedady"}
{"number":8673,"comment_id":"1570253017","body":"@ngtr6788 is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22e9de5f3f81a5efe91e593da3bd2db38d92f76cde%22%7D%2C%22id%22%3A%22Qme4m52sbvxJYBaiDBLqwPSRAnimjY5F3xB8esQQ8PV9vU%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8673%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-31T13:36:45Z","created_at":"2023-05-31T13:36:45Z","creator_user_login":"vercel[bot]"}
{"number":8673,"comment_id":"1605991544","body":"Thanks for adding support for XYZ. That was exactly what I needed!","updated_at":"2023-06-25T09:38:39Z","created_at":"2023-06-25T09:38:39Z","creator_user_login":"yycdd456"}
{"number":8673,"comment_id":"1666559152","body":"Deployment failed with the following error:\n~~~\nThere is no GitHub account connected to this Vercel account.\n~~~\n","updated_at":"2023-08-05T17:23:55Z","created_at":"2023-08-05T17:23:55Z","creator_user_login":"vercel[bot]"}
{"number":8673,"comment_id":"1666904650","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 4855c27ab29c45bcef616d0202bdcb6a3bca1adc\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/ngtr6788/svelte/new/lazy-array-in-each-binding?filename=.changeset/proud-icons-hope.md&value=---%0A%22svelte%22%3A%20patch%0A---%0A%0Afix%3A%20infinite%20loop%20caused%20by%20having%20bind%3Athis%20in%20an%20each%20loop%0A)\n\n","updated_at":"2023-08-06T15:59:16Z","created_at":"2023-08-06T15:59:16Z","creator_user_login":"changeset-bot[bot]"}
{"number":8594,"comment_id":"1551338001","body":"@Lootwig is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22817e98ee52411b18bfda74584aa3db7bf970fde8%22%7D%2C%22id%22%3A%22QmZtkyBxPgpFuX11F8KuMi5nzBGK5bgBEEaUk6DqSfWQ1o%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8594%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-17T12:53:06Z","created_at":"2023-05-17T12:53:06Z","creator_user_login":"vercel[bot]"}
{"number":8594,"comment_id":"1551512377","body":"[vc]: #/ab1TSGC7AGgTR0+RZ3mO6Kg/pJMip+ubmPcdi4v8lc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJyb290RGlyZWN0b3J5Ijoic2l0ZXMvc3ZlbHRlLmRldiIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiIifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL3N2ZWx0ZS9zdmVsdGUtZGV2LTIvQ3VSd1ZkNldxNnZQWFBLZThuQzVYZ2R5Vm1hNSIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJwcmV2aWV3VXJsIjoiIn1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated (UTC) |\n| :--- | :----- | :------ | :------- | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/CuRwVd6Wq6vPXPKe8nC5XgdyVma5)) |  |  | May 17, 2023 2:30pm |\n\n","updated_at":"2023-05-17T14:30:57Z","created_at":"2023-05-17T14:30:52Z","creator_user_login":"vercel[bot]"}
{"number":8594,"comment_id":"1637508535","body":"Could you resolve the merge conflicts? The content has moved from site/content to `documentation` now","updated_at":"2023-07-17T07:21:33Z","created_at":"2023-07-17T07:21:33Z","creator_user_login":"PuruVJ"}
{"number":8568,"comment_id":"1539853390","body":"This is fixed by https://github.com/sveltejs/svelte/releases/tag/v3.59.1. Please close. :)","updated_at":"2023-05-09T10:10:50Z","created_at":"2023-05-09T10:10:50Z","creator_user_login":"frederikhors"}
{"number":8568,"comment_id":"1540006696","body":"3.59.1 doesn't fix this issue.\r\n\r\nhttps://svelte.dev/repl/764933c9d9154d33b23291304a3be380?version=3.59.1","updated_at":"2023-05-09T11:43:12Z","created_at":"2023-05-09T11:43:12Z","creator_user_login":"SourceR85"}
{"number":8568,"comment_id":"1540007332","body":"Sorry","updated_at":"2023-05-09T11:44:17Z","created_at":"2023-05-09T11:44:17Z","creator_user_login":"frederikhors"}
{"number":8568,"comment_id":"1540012148","body":"Judging from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-processing-model it sounds like this behavior might be expected - `webauthn` should come last.\r\n\r\n> ... when paired with the autocomplete=\"off\" attribute\r\n\r\nwhat do you mean by that? I don't see that in the REPL","updated_at":"2023-05-09T11:53:48Z","created_at":"2023-05-09T11:52:29Z","creator_user_login":"dummdidumm"}
{"number":8568,"comment_id":"1540034222","body":"> Judging from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-processing-model it sounds like this behavior might be expected - `webauthn` should come last.\r\n\r\nI think, you may be right.\r\nMy thought, that the token order may be independent, comes from a note at the simplewebauthn docs:\r\nhttps://simplewebauthn.dev/docs/packages/browser/#browser-autofill-aka-conditional-ui\r\n\r\n> > ... when paired with the autocomplete=\"off\" attribute\r\n> \r\n> what do you mean by that? I don't see that in the REPL\r\n\r\nSry, just a copy&paste error üòÖ\r\n","updated_at":"2023-05-09T12:32:59Z","created_at":"2023-05-09T12:32:59Z","creator_user_login":"SourceR85"}
{"number":8568,"comment_id":"1540071094","body":"Although the spec reads like the order is important, the question is if browsers really are that strict, or if they are more robust and can parse it \"out of order\". If they can, we could relax this rule for `webauthn` to appear anywhere in the field.","updated_at":"2023-05-09T12:55:41Z","created_at":"2023-05-09T12:55:41Z","creator_user_login":"dummdidumm"}
{"number":8615,"comment_id":"1557605206","body":"The same issue happens even when setting `export const csr = false`. Interestingly, the only workaround seems to be wrapping for loops in a flexbox.\r\n\r\n```svelte\r\n<div style=\"display:flex;\">\r\n   {#each item as item}\r\n       <!-- represent the item details in a tailwind card -->\r\n       <div class=\"w-64 inline-block bg-pink\">\r\n           <div>\r\n               <a href=\"/media/{item}\">Page</a>\r\n           </div>\r\n       </div>\r\n   {/each}\r\n</div>\r\n```\r\n\r\nBut I would suggest this approach be avoided. When setting e.g. 5 divs (without the for loop), there are no spaces. Only through the above do they have spaces on the server-rendered HTML, and then revert to no spaces / gaps as expected (see repro). So this seems to be more of a workaround than expected behavior.","updated_at":"2023-05-21T19:04:04Z","created_at":"2023-05-21T19:04:04Z","creator_user_login":"Destaq"}
{"number":8615,"comment_id":"1557605212","body":"This issue is not caused by when styles are applied, but differences in the whitespace present in the SSR markup and the client-side rendered elements.\r\n\r\nThe SSR markup inserts a text node with \"\\n     \" between each child div:\r\n<img width=\"618\" alt=\"image\" src=\"https://github.com/sveltejs/kit/assets/4992896/822e343a-0c8f-4231-a436-687250250fef\">\r\n\r\nBut when client-side rendered, those nodes are removed:\r\n<img width=\"615\" alt=\"image\" src=\"https://github.com/sveltejs/kit/assets/4992896/7abcd463-770d-4d1f-8e3e-42208f3459a5\">\r\n\r\nThere are multiple whitespace issues open in the Svelte repo, so not sure if this is a duplicate or not (or what workarounds would be). Transferring over there for now.","updated_at":"2023-05-22T17:16:27Z","created_at":"2023-05-22T17:16:27Z","creator_user_login":"geoffrich"}
{"number":8615,"comment_id":"1627761632","body":"I've looked through the issues and I don't see an exact duplicate.\r\n\r\nIf it wasn't clear from the OP, if you don't need SSR, disabling it avoids the issue:\r\n\r\n```ts\r\n// +layout.ts\r\nexport const ssr = false;\r\n```","updated_at":"2023-07-09T16:12:42Z","created_at":"2023-07-09T16:12:42Z","creator_user_login":"ryanatkn"}
{"number":8558,"comment_id":"1535646309","body":"I think I'm -1 on providing an API in the compiler for this. The compiler just returns an array of warnings - it's up to the consumer what it wants to do with those warnings.\r\n\r\nThe `onwarn` in `vite-plugin-svelte` is actually more powerful than a filter, because it lets you decide how exactly you want the warning to be handled - and not just whether or not you want each warning to be handled with the default handler. The Rollup and webpack plugins work similarly.\r\n\r\nBut also, any of these tools would also need to provide their own handling for this as a fallback anyway even if the compiler provided it, unless they want to bump their peerdep on the compiler as a breaking change. And for v-p-s, it's not really clear to me what it could do that's simpler, unless it removed the `onwarn` feature in favor of a less-powerful warning filter option.","updated_at":"2023-05-05T03:13:55Z","created_at":"2023-05-05T03:13:55Z","creator_user_login":"Conduitry"}
{"number":8558,"comment_id":"1535683909","body":"Thank you for your response quickly!\r\nThis makes sense.\r\n\r\nSo I updated my opinion.\r\n\r\nESlint plugin will add an option to `svelte/valid-compile` rule that is a filtering function. Then users who want to have a shared warning filter, create a function and use it at both `svelte.config.js` and `.eslintrc.js`.\r\n\r\n\r\n```js\r\n// is-ignore-svelte-compile-warn.js\r\n\r\nexport default function (warning) {\r\n  if (warning.code === 'a11y-distracting-elements') return true;\r\n  return false;\r\n}\r\n```\r\n\r\n```js\r\n// svelte.config.js\r\nimport isIgnore from './is-ignore-svelte-compile-warn';\r\n\r\n// based on https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#onwarn\r\nexport default defineConfig({\r\n  plugins: [\r\n    svelte({\r\n      onwarn(warning, defaultHandler) {\r\n        // don't warn on <marquee> elements, cos they're cool\r\n        if (isIgnore(warning)) return;\r\n\r\n        // handle all other warnings normally\r\n        defaultHandler(warning);\r\n      }\r\n    })\r\n  ]\r\n});\r\n```\r\n\r\n```js\r\nimport isIgnore from './is-ignore-svelte-compile-warn';\r\n\r\n// .eslintrc.js\r\nmodule.exports = {\r\n  rules: {\r\n    \"svelte/valid-compile\": [\r\n      \"error\",\r\n      {\r\n        ignoreWarnings: false,\r\n        ignore: isIgnore,\r\n      },\r\n    ],\r\n  },\r\n};\r\n```","updated_at":"2023-05-05T04:32:52Z","created_at":"2023-05-05T04:32:26Z","creator_user_login":"baseballyama"}
{"number":8558,"comment_id":"1541120419","body":"Something else I just thought of - if we want to use some CJS-ESM mechanism where we serialize the inputs and outputs of the Svelte compiler, we won't be able to pass callbacks to it anyway. It will have to be the consuming project's job to filter the warnings.","updated_at":"2023-05-10T01:13:33Z","created_at":"2023-05-10T01:13:33Z","creator_user_login":"Conduitry"}
{"number":8476,"comment_id":"1504308096","body":"Yes, this is possible. Take a look at the REPL [here](https://svelte.dev/repl/144a5277e16047b181a2a2ac101369a4?version=3.58.0).","updated_at":"2023-04-12T00:11:54Z","created_at":"2023-04-12T00:11:54Z","creator_user_login":"modernphilosophy"}
{"number":8476,"comment_id":"1505079577","body":"Yeah. I know thanks. But you already know that you need `data-stat` here.\r\n\r\n`data-` attributes are used when you don't know yet what you need.","updated_at":"2023-04-12T11:03:35Z","created_at":"2023-04-12T11:03:35Z","creator_user_login":"frederikhors"}
{"number":8476,"comment_id":"1512202741","body":"Hey, I think you can use a `data` prop like [this](https://svelte.dev/repl/04e9384e676d4d628bfee58bc14eb199?version=3.58.0).\r\n\r\nJuste convert it on data-* with this line: \r\n```svelte\r\n$: dataProps = Object.entries(data).reduce((acc, [key, value]) => ({...acc, [`data-${key}`]: value}), {})\r\n```","updated_at":"2023-04-17T23:03:31Z","created_at":"2023-04-17T23:03:31Z","creator_user_login":"peufo"}
{"number":8476,"comment_id":"1527080655","body":"@peufo that is possible, but this is a very computational expensive pattern.\r\n\r\nI would propose a different strategy.\r\nThere is currently no way to export a prop like `data-foo` from a child component (`data_foo`, `dataFoo` work fine).\r\nSo in my opinion, if those data props can not be used anyway, they should pass through to the element.\r\nThe logic would be similar to style props\r\nIn that case, we would have the all `data-*` available in the `element.dataset`.\r\nThis should also be a non breaking change.\r\nHere is an example on how the ergonomics could work: https://svelte.dev/repl/1c33e633aaa7499dbbc408a46a25e650?version=3.58.0\r\n\r\n@dummdidumm do you think this could be a viable option?","updated_at":"2023-04-28T06:59:00Z","created_at":"2023-04-28T06:59:00Z","creator_user_login":"dreitzner"}
{"number":8476,"comment_id":"1527126631","body":"I think we shouldn't change any runtime semantics here, `{...$$restProps}` is the way to go. What's requested is to get type errors when using `$$restProps`, and for that we have the (still experimental) `$$Props` interface: https://github.com/dummdidumm/rfcs/blob/ts-typedefs-within-svelte-components/text/ts-typing-props-slots-events.md#typing-props","updated_at":"2023-04-28T07:37:33Z","created_at":"2023-04-28T07:37:33Z","creator_user_login":"dummdidumm"}
{"number":8476,"comment_id":"1529608208","body":"The `$$Props` interface is great to implement *inheritance* of components. And that pattern works perfectly:\r\n```svelte\r\n<script>\r\n  import Button from \"./Button.svelte\";\r\n  import type { ComponentProps } from 'svelte';\r\n\r\n  export let extraProp: boolean = false;\r\n\r\n  // propagate props type from parent comp\r\n  interface $$Props extends ComponentProps<Button> {\r\n    extraProp: boolean | undefined;\r\n  }\r\n</script>\r\n\r\n<Button {...$$restProps}>\r\n  {something using extraProp variable}\r\n</Button>\r\n```\r\n\r\nThe only drawback is that if we have lots of extra props it's a nightmare to double the declarations.\r\nWould it be possible to have some kind of `self` type for props from current component?\r\n```ts\r\n  // propagate props type from parent component and the current one\r\n  interface $$Props extends ComponentProps<Button>, ComponentProps<Self> {}\r\n```","updated_at":"2023-05-01T11:35:06Z","created_at":"2023-05-01T11:35:06Z","creator_user_login":"jjagielka"}
{"number":8470,"comment_id":"1533357863","body":"I think this can be done today, without needing to do those checks. I think the issues is that the right side of the reactive assignment is still suggesting that user is a dependency.\r\n\r\n```\r\n<script lang=\"ts\">\r\n\timport { writable } from 'svelte/store';\r\n\tfunction nameCheck(name: string) {\r\n\t\tconsole.log('Called only when name changes');\r\n\t\treturn name;\r\n\t}\r\n\r\n\tfunction dobToAge(dob: number) {\r\n\t\tconsole.log('Called only when dob changes');\r\n\t\tvar diff_ms = Date.now() - new Date(dob).getTime();\r\n\t\tvar age_dt = new Date(diff_ms);\r\n\t\treturn Math.abs(age_dt.getUTCFullYear() - 1970);\r\n\t}\r\n\r\n\tinterface User {\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t\tdob: Date;\r\n\t}\r\n\r\n\tconst user = writable<User>({\r\n\t\tname: 'jane',\r\n\t\temail: 'some@email.com',\r\n\t\tdob: new Date('1990-01-01')\r\n\t});\r\n\r\n\t$: dobAsNum = +$user.dob; // evaluates when user changes\r\n\t$: age = dobToAge(dobAsNum); // evaluate when dobAsNum changes\r\n\t$: nameTracker = $user.name;  // evaluates when user changes\r\n\t$: name = nameCheck(nameTracker); // evaluates when nameTracker changes\r\n</script>\r\n\r\n<p>\r\n\tName:\r\n\t{name}\r\n</p>\r\n<p>\r\n\t{age}\r\n</p>\r\n\r\n<button\r\n\ton:click={() =>\r\n\t\tuser.update((u) => {\r\n\t\t\tlet end = new Date('2000-01-01');\r\n\t\t\tlet start = new Date('1990-01-01');\r\n\r\n\t\t\tconst timeDiff = end.getTime() - start.getTime();\r\n\t\t\tconst randomTime = Math.random() * timeDiff;\r\n\t\t\tconst randomDate = new Date(start.getTime() + randomTime);\r\n\t\t\treturn { ...u, dob: randomDate };\r\n\t\t})}>Change to random dob</button\r\n>\r\n<button on:click={() => user.update((u) => ({ ...u, name: u.name == 'jane' ? 'john' : 'jane' }))}\r\n\t>Toggle name</button\r\n>\r\n```\r\n\r\nnote that I'm not tracking dob, as it will always emit when user changes, but it's numeric value.\r\n\r\nThe same can be achieved with stores\r\n```\r\nconst dobAsNum = derived(user, user => +user.dob); // evaluates when user changes\r\nconst age = derived(dobAsNum, dobToAge); // evaluate when dobAsNum changes\r\n```\r\n\r\nif you want to extract some of this into a select fn.\r\n```\r\nfunction select<T, U extends Readable<T>>(store: U, prop: keyof T) {\r\n    return derived(store, (s) => s[prop]);\r\n}\r\n\r\nconst nameTracker = select(user, 'name')  // evaluates when user changes\r\n$: name = nameCheck($nameTracker); // evaluates when nameTracker changes\r\n\r\n```\r\n\r\nBut it will still have the same issues with derived values where typeof is 'object'\r\n\r\n\r\nSo for Dates you could\r\n```\r\nfunction selectDateAsNumber<T, U extends Readable<T>>(store: U, prop: keyof T) {\r\n        let isDate = s[prop] instanceof Date\r\n        if(!isDate) {\r\n             throw new Error(\"a Date was expected\")\r\n        }\r\n\treturn derived(store, (s) => +s[prop]);\r\n}\r\n\r\nconst dobAsNum =  selectDateAsNumber(user, 'dob'); // evaluates when user changes\r\n$: age = dobToAge($dobAsNum); // evaluate when dobAsNum changes\r\n```\r\n\r\nnote: Only parts of the code have been tested.\r\n\r\n","updated_at":"2023-05-04T02:56:50Z","created_at":"2023-05-03T16:37:17Z","creator_user_login":"flakolefluk"}
{"number":8518,"comment_id":"1519053396","body":"This is whether the check is to be done at compile time or at runtime?","updated_at":"2023-04-23T12:15:00Z","created_at":"2023-04-23T12:15:00Z","creator_user_login":"sunshine001"}
{"number":8518,"comment_id":"1524940023","body":"> This is whether the check is to be done at compile time or at runtime?\n\nThe issue itself is not about the compile/run-time timing but rather that **(1)** the variable can be used before its initialization, which should produce an error, and **(2)** doing so makes a noticeable difference in terms of whitespace rendered to the DOM.","updated_at":"2023-04-27T07:14:16Z","created_at":"2023-04-27T07:14:16Z","creator_user_login":"brandonmcconnell"}
{"number":8518,"comment_id":"1575636661","body":"Turns out the \"hoisting\" property of the `@const` tag was discussed in its [RFC](https://github.com/sveltejs/rfcs/blob/master/text/0007-markup-constants.md) and seems to be a feature with its own [unit test](https://github.com/sveltejs/svelte/tree/master/test/runtime/samples/const-tag-hoisting)\r\n\r\nThe missing space error within the `#if` tag is probably the same as #6381.\r\n\r\nDid a little bit of experiment, and the extra whitespace created in the second REPL is due to the whitespace between ending `{/if}` tag and the `@const` tag in the next line. This behavior is observed even when tags other than `@const` is used.\r\n```svelte\r\n<!-- no extra whitespace -->\r\n{#if condition},{/if}{@const a=1} \r\n<!-- extra whitespace -->\r\n{#if condition},{/if}\r\n{@const a=1} \r\n<!-- extra whitespace -->\r\n{#if condition},{/if} {#if false}never{/if}\r\n```\r\n\r\nFinally, the workaround for your original issue of the space after the comma may be to invoke a JavaScript expression \r\n```svelte\r\n{#if condition}{\", \"}{/if}\r\n```\r\n\r\n[My experiments in this REPL](https://svelte.dev/repl/06e7f66b1c7a4e5492ad86ddd35c71b2?version=3.59.1)","updated_at":"2023-06-04T16:50:36Z","created_at":"2023-06-04T16:50:36Z","creator_user_login":"kelvinsjk"}
{"number":8518,"comment_id":"1575640067","body":"@kelvinsjk Thanks, I haven't tested it locally, but if the JS expression workaround works, that would fix my original issue!\n\nAside from that, do you think it would make sense to repurpose this ticket, removing that example, focusing solely on the lack of an error?","updated_at":"2023-06-04T17:03:01Z","created_at":"2023-06-04T17:03:01Z","creator_user_login":"brandonmcconnell"}
{"number":8461,"comment_id":"1500118453","body":"@lovasoa is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%225afef37513acd5902ba54e7c56ab24eb9a5bebe2%22%7D%2C%22id%22%3A%22QmZrqnpVrXL4PXDJP3ZGdampEAAYNpsrJMpdi3EuJh5nox%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8461%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-07T09:32:38Z","created_at":"2023-04-07T09:32:38Z","creator_user_login":"vercel[bot]"}
{"number":8461,"comment_id":"1500531772","body":"@benmccann : I see you re-triggered the tests, but they are supposed to fail, in the current state of this PR. It just adds a test to the test suite that illustrates the bug reported in #8459 .\r\n\r\nI am willing to help with solving the bug, but I would need some pointers. Looking at the code, I guess the issue is here:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/d42ca041dd7817ae772a9da2d0aea56f557088d1/src/runtime/internal/await_block.ts#L82-L101\r\n\r\nI can see that that the block always immediately changes to a pending state when the function runs, even if the given promise is already resolved.\r\n\r\nBut I do not grasp what exactly is the role of each field in `PromiseInfo` and what invariants about it `handle_promise` is supposed to hold.\r\n\r\nOn a broader level, I am not sure I understand why a special `AwaitBlockWrapper` is needed. Couldn't the compiler just compile the `{#await}` syntax down to three if blocks and two variables storing the data and the error in the promise ?","updated_at":"2023-04-07T18:33:11Z","created_at":"2023-04-07T18:30:29Z","creator_user_login":"lovasoa"}
{"number":8461,"comment_id":"1500535468","body":"@Rich-Harris @tanhauhau , I see you are the latest contributors to this part of the code, I would love if you could give me some pointers too :)","updated_at":"2023-04-07T18:35:52Z","created_at":"2023-04-07T18:35:52Z","creator_user_login":"lovasoa"}
{"number":8461,"comment_id":"1503127670","body":"The underlying issue is that promises that are resolved already are still treated as \"need to render the await first and then resolve once the result is there\". We want to look into changing this, but that won't happen before Svelte 5.","updated_at":"2023-04-11T11:07:06Z","created_at":"2023-04-11T11:07:06Z","creator_user_login":"dummdidumm"}
{"number":8461,"comment_id":"1503218459","body":"Ok, should I close this pr, then ?","updated_at":"2023-04-11T12:12:15Z","created_at":"2023-04-11T12:12:15Z","creator_user_login":"lovasoa"}
{"number":8461,"comment_id":"1503224570","body":"I added the \"one day\" label instead of closing so it has visibility, no further action needed from your side üëç ","updated_at":"2023-04-11T12:17:09Z","created_at":"2023-04-11T12:17:09Z","creator_user_login":"dummdidumm"}
{"number":8403,"comment_id":"1477659637","body":"I have a fix for that, but I need some information to complete it.\r\n\r\n\r\nActually, the bubbling do dispatch()  use a `forEach()` to invoke all the handlers.\r\nSomething like this :\r\n```javascript\r\n\tcallbacks.slice().forEach(fn => fn.call(source, event));\r\n```\r\n\r\nSo any error will stop the `forEach()`, and others handlers will not be called.\r\n\r\n\r\nI think this should be changed to something like this :\r\n\r\n```javascript\r\n\tcallbacks.slice().forEach(fn => {\r\n\t\ttry {\r\n\t\t\treturn fn.call(source, event);\r\n\t\t} catch (err) {\r\n\t\t\t// report the error\r\n\t\t\twindow.reportError(err);\r\n\t\t}\r\n\t});\r\n```\r\n\r\n\r\nI'm not sure if we can use `window.reportError()`.\r\nIt has a good support, but quite recent : https://caniuse.com/mdn-api_reporterror\r\n\r\nOther solution would be to fall back to the equivalent setTimeout() trick :\r\n```javascript\r\n\t// report the error\r\n\tif (window.reportError) {\r\n\t\twindow.reportError(err);\r\n\t} else {\r\n\t\tsetTimeout(()=> { throw err; }, 0);\r\n\t}\r\n```\r\n\r\n\r\nFinally, I want to make a test, but it fail because of the \"Uncaught Error\", and I don't know how to handle that...","updated_at":"2023-03-21T11:17:47Z","created_at":"2023-03-21T11:17:47Z","creator_user_login":"adiguba"}
{"number":8406,"comment_id":"1478327532","body":"Any change to this would be a breaking change, and I think a bad one, and not one we want to provide a way to opt in to either.\r\n\r\nI don't know why you would want this. If you're doing something to mutate the value of a store, my expectation would certainly be that everyone subscribed to it would like to be informed, not just have the value mutated under their feet. If you really want to mutate a value without triggering invalidation, you could presumably do something like\r\n\r\n```js\r\nconst temp = $whatever;\r\ntemp.deep.value = 42;\r\n```","updated_at":"2023-03-21T17:39:28Z","created_at":"2023-03-21T17:39:28Z","creator_user_login":"Conduitry"}
{"number":8406,"comment_id":"1478382195","body":"> If you're doing something to mutate the value of a store, my expectation would certainly be that everyone subscribed to it would like to be informed, not just have the value mutated under their feet.\r\n\r\nI think you misunderstood. In this case, we're not modifying the value held by a store. If I did something like:\r\n```\r\n$mystore = 5;\r\n$mystore.deep_property++;\r\n```\r\n... then yes, that makes sense to notify subscribers. And that goes through `mystore.set` internally, as you'd expect. However, in the snippet:\r\n```\r\n$: foo = $mystore + 10;\r\nmystore.internal = \"bar\";\r\n```\r\n... we've explicitly stated that `foo` depends on mystore's internal value, `$mystore`. I don't think Svelte should be making assumptions that we also want to listen to properties of the `mystore` container as well. Make sense? Consider that in the following code:\r\n```\r\n$: foo = $mystore + 10;\r\nmystore.set(12);\r\nmystore.internal_setting = \"bar\";\r\n```\r\n... Svelte does *not* inject `$$invalidate` for line 2, so there is no sense in injecting it for line 3 either. We shouldn't assume a change to `mystore` automatically affects `$mystore`; if it happens to modify `$mystore`, the store is responsible for notifying subscribers, just as is the case with `mystore.set`.","updated_at":"2023-03-21T18:31:31Z","created_at":"2023-03-21T18:18:42Z","creator_user_login":"Azmisov"}
{"number":8448,"comment_id":"1495377311","body":"I think this could be some kind of a race condition between `style` and `style:width` in the markup. If you do this this way - [REPL](https://svelte.dev/repl/a8b42b0deea8482689cfe8ca8d7a0ed8?version=3.58.0) - it seems to fix the problem. The `style:width` doesn't seem to get applied sometimes for some reason.\r\n\r\nIt does seem unexpected in my opinion too though.","updated_at":"2023-04-04T05:43:35Z","created_at":"2023-04-04T05:43:35Z","creator_user_login":"FilipSzutkowski"}
{"number":8448,"comment_id":"1497724969","body":"I'm currently investigating this.\r\n\r\nI found out that if the animation outro is still playing and `width >= trigger`, `if_block` is not `null` yet so it is _updated_ rather than created.\r\n\r\nBased on this [REPL](https://svelte.dev/repl/26221b6e9c344f88a5182b371665f188?version=3.58.0), this is the JS output concerning the style update for the block creation:\r\n\r\n```js\r\nattr(div, \"style\", /*style*/ ctx[1]);\r\nattr(div, \"class\", \"svelte-16mu3x7\");\r\nset_style(div, \"width\", /*size*/ ctx[0] ? /*size*/ ctx[0] + 'px' : undefined);\r\n```\r\n\r\nand this is for the block update:\r\n\r\n```js\r\nif (!current || dirty & /*style*/ 2) {\r\n    attr(div, \"style\", /*style*/ ctx[1]);\r\n}\r\n\r\nconst style_changed = dirty & /*style*/ 2;\r\n\r\nif (style_changed || dirty & /*size, style*/ 3) {\r\n    set_style(div, \"width\", /*size*/ ctx[0] ? /*size*/ ctx[0] + 'px' : undefined);\r\n}\r\n```\r\n\r\nIt seems that the `current` variable keeps track of the fact that the block is outro-ing (it's `false` when outro-ing) and it should also be checked for calling `set_style`, similarly to `attr`.\r\n\r\nIf that's the case, a possible fix would be to emit the current code instead:\r\n\r\n```js\r\nif (!current || style_changed || dirty & /*size, style*/ 3) {\r\n    set_style(div, \"width\", /*size*/ ctx[0] ? /*size*/ ctx[0] + 'px' : undefined);\r\n}\r\n```\r\n\r\nWhile experimenting, I found out where I could modify the compiler code to emit the updated version of the JS, but I would appreciate some expert guidance on this before I move on.\r\n\r\nThanks!","updated_at":"2023-04-05T15:52:12Z","created_at":"2023-04-05T15:52:12Z","creator_user_login":"limi7break"}
{"number":8345,"comment_id":"1452712951","body":"Although this doesn't deal with consumer/children components, it sounds quite familiar to one of the long standing debates in svelte discussed here: https://github.com/sveltejs/svelte/issues/2870.\r\n\r\nUltimately, i'd boil it down to \"Who should have access to a component's scoping class and what api should provide access to it outside compile-time?\". If there ever is a way to access scoped classes through directives, should or shouldn't the same apply to component props (explicit or implicit is left tbd)?","updated_at":"2023-03-02T23:21:26Z","created_at":"2023-03-02T23:20:32Z","creator_user_login":"iolyd"}
{"number":8345,"comment_id":"1455799615","body":"I have make a small prototype, available here : https://github.com/adiguba/svelte/tree/use-class\r\n\r\nWork pretty well with `npm run check` an `npm run build` , but VS Code still mark `use:class=\"x\"` as error.\r\n","updated_at":"2023-03-06T09:42:23Z","created_at":"2023-03-06T09:42:23Z","creator_user_login":"adiguba"}
{"number":8345,"comment_id":"1475326560","body":"This simple template causes the issue identified here and in so many other related issues: ```{@html myvar}```. If you pass in various optional HTML, say from CMS, where there are known classes allowed for styling, you define them at this scope. However, they get removed because they are not specifically visible in the template when compiled.\r\n\r\nSimply, I think it is great to warn and display the warnings, but not necessary to go to the extent of cleaning it up (removing). That should be the QC part of development, not the framework itself. It's a frustrating part of this framework which I think is otherwise great. Using ```:global``` or some other solution just pollutes the global space with unnecessary non-sense. It also gets quite confusing when you go back to it months later.\r\n\r\nThe solutions seem to just complicate it even more. Why should a framework decide what you include or not include? Love the warnings so I can go clean up my development code once I'm done experimenting and messing around. Hate that it decides to do it for me. That's my decision not the frameworks.\r\nMy two cents...","updated_at":"2023-03-19T17:18:14Z","created_at":"2023-03-19T17:18:14Z","creator_user_login":"censys-git"}
{"number":8345,"comment_id":"1476547371","body":"The purpose of this issue is not to question the utility of scoped classes.\r\nPersonally i think that it's a must-have !\r\n\r\nThe interest of scoped classes is to handle the style of your component, and not the one from an external HTML...\r\n\r\nIn your case (or if you don't want it), you can simply import a separate CSS file :\r\n\r\n```svelte\r\n<script>\r\n    import \"./style.css\";\r\n\r\n    let myvar = ...\r\n</script>\r\n\r\n{@html myvar}\r\n```","updated_at":"2023-03-20T16:22:10Z","created_at":"2023-03-20T16:22:10Z","creator_user_login":"adiguba"}
{"number":8333,"comment_id":"1445919980","body":"~You'll need to specifically use adapter-node if you want to deploy it as an AWS lambda.\r\nadapter-auto does not support this by default.~\r\nRead more here https://kit.svelte.dev/docs/adapter-auto\r\n\r\nAlso, this should be moved to the kit repository and a minimal reproduction should be provided. (Something we can download and upload to AWS to get the exact same error)","updated_at":"2023-02-27T12:26:18Z","created_at":"2023-02-27T08:42:05Z","creator_user_login":"s3812497"}
{"number":8333,"comment_id":"1446095589","body":"Thanks for your valuable support.\r\n\r\nWe are following the serverless architecture and if I am not wrong then 'adapter-node' will create a node server.\r\nHere I have used 'adapter-auto' and everything is working fine with lambda function except 'update()' function and the callback success message.","updated_at":"2023-02-27T10:43:29Z","created_at":"2023-02-27T10:43:29Z","creator_user_login":"manassingh64"}
{"number":8333,"comment_id":"1446240351","body":"> We are following the serverless architecture and if I am not wrong then 'adapter-node' will create a node server. Here I have used 'adapter-auto' and everything is working fine with lambda function except 'update()' function and the callback success message.\r\n\r\nOh whoops. Sorry, that‚Äôs my mistake. I‚Äôve misunderstood how kit works with AWS lambda.\r\n\r\nAlthough, I also had no idea adapter-auto worked out of the box with AWS lambdas. It‚Äôs not listed in the official supported list.","updated_at":"2023-02-27T12:25:34Z","created_at":"2023-02-27T12:25:34Z","creator_user_login":"s3812497"}
{"number":8333,"comment_id":"1446354189","body":"@s3812497 - No issue. Thanks for your suggestion about 'adapter-auto'.\r\nCan anyone help me with this issue?\r\nI am looking for a solution where we can deploy svelte project in AWS CDK with serevrless architecture with AWS Lambda.\r\n\r\nHere the strange part is that the code is perfectly working on local environment but when we deploy it on AWS with CDK and AWS Lambda. Then the 'update()' function and the callback response showing error in browser console.\r\n\r\nI have done the code based on the official document of svelteKit form action 'https://kit.svelte.dev/docs/form-actions'.\r\n\r\nIt is greatly appreciated if anyone helps me with this issue. ","updated_at":"2023-02-27T13:48:53Z","created_at":"2023-02-27T13:48:53Z","creator_user_login":"manassingh64"}
{"number":8333,"comment_id":"1446366548","body":"> I am looking for a solution where we can deploy svelte project in AWS CDK with serevrless architecture with AWS Lambda.\n\nI found a community maintained adapter you may be interested in.\n\nhttps://github.com/yarbsemaj/sveltekit-adapter-lambda\n\n> Here the strange part is that the code is perfectly working on local environment but when we deploy it on AWS with CDK and AWS Lambda. Then the 'update()' function and the callback response showing error in browser console.\n\nThis is because the dev environment runs differently from when the application is built for deployment. It is served by Vite during development. You may find other differences as well after building the app.\n\nI highly recommend seeking further advice from the svelte discord community. https://discord.gg/qxebBKvBNF there are more active members there that would be able to help with this","updated_at":"2023-02-27T13:58:05Z","created_at":"2023-02-27T13:57:18Z","creator_user_login":"s3812497"}
{"number":8348,"comment_id":"1453905045","body":"Can you post an actual example where this would be needed? As this is much simpler written as:\r\n\r\n```svelte\r\n<div style:width=\"{indent * 10}px\" />\r\n```\r\n\r\nEven if there is such an example, I don't think it warrants the additional syntax. This is also a duplicate of https://github.com/sveltejs/svelte/issues/2968 because you just want to iterate N times. Such a `#range` block could arguably have `...as...` be optional.","updated_at":"2023-03-03T18:06:55Z","created_at":"2023-03-03T18:06:44Z","creator_user_login":"Prinzhorn"}
{"number":8348,"comment_id":"1453970674","body":"Closing in favor of #2968","updated_at":"2023-03-03T18:57:09Z","created_at":"2023-03-03T18:57:09Z","creator_user_login":"hgiesel"}
{"number":8348,"comment_id":"1653289932","body":"@hgiesel Consider reopening this?\r\n\r\nNow that Svelte 4 supports iterators, this could be the syntax for a range expression\r\n\r\n```\r\n{#each range(1, 5)}\r\n  ...\r\n{/each}\r\n```","updated_at":"2023-07-27T09:57:23Z","created_at":"2023-07-27T09:56:33Z","creator_user_login":"oscarhermoso"}
{"number":8348,"comment_id":"1653300048","body":"@oscarhermoso Sure! With the support for iterators, this makes a whole lot more sense than a new keyword","updated_at":"2023-07-27T10:02:43Z","created_at":"2023-07-27T10:02:43Z","creator_user_login":"hgiesel"}
{"number":8264,"comment_id":"1424135395","body":"I would go with `$mounted` then.","updated_at":"2023-02-09T12:42:20Z","created_at":"2023-02-09T12:42:20Z","creator_user_login":"brunnerh"}
{"number":8264,"comment_id":"1426910641","body":"I've often wondered if there's a good reason this can't be the default behavior under-the-hood.  In instances where we want to have both the binding to a DOM element _and_ a reactive statement that depends on the element being mounted/bound, don't we _always_ want it to wait for the mount before trying to run?  I.E. The reactive statement should have knowledge of both requirements and just wait before trying to access an unbound/unmounted variable/element. \r\n\r\nI think this is one of those seemingly obvious heuristics.  Maybe there's a version I'm not thinking of where you wouldn't want that, but it's probably the exception to this more typical usage.","updated_at":"2023-02-12T00:51:10Z","created_at":"2023-02-12T00:50:03Z","creator_user_login":"jrmoynihan"}
{"number":8264,"comment_id":"1435705616","body":"We can achieve this easily by using `onMount` or reactive statement.\r\nWe want one way to do things so personally, I don't want to add API for this.\r\n\r\nIf you feel redundant to import `onMount` every time, for example, we can use [unplugin-auto-import](https://github.com/antfu/unplugin-auto-import). ","updated_at":"2023-02-18T15:58:36Z","created_at":"2023-02-18T15:58:36Z","creator_user_login":"baseballyama"}
{"number":8273,"comment_id":"1425094080","body":"This has come up before in #4427 and in some other issues. I'm not that much more enthusiastic about the idea than I was then. I'm definitely against a syntax like `on:enter={}`, because `enter` isn't the name of the event.","updated_at":"2023-02-10T02:34:44Z","created_at":"2023-02-10T02:34:44Z","creator_user_login":"Conduitry"}
{"number":8273,"comment_id":"1425255709","body":"I see where you're coming from. Would it be better to use more verbose names like `on:returnkey` or is it just the fact that they wouldn't be the names of real DOM events at all?\n\nThe only other approach I can think of would be scoping. Maybe like `on:keydown:enter` would be a good compromise? It's just a modification of a real event that would still save space and remove boilerplate.","updated_at":"2023-02-10T06:29:14Z","created_at":"2023-02-10T06:29:14Z","creator_user_login":"danielimmke"}
{"number":8273,"comment_id":"1425293087","body":"Just use the correct elements, see:\r\n- #8001 \r\n","updated_at":"2023-02-10T07:13:27Z","created_at":"2023-02-10T07:13:27Z","creator_user_login":"brunnerh"}
{"number":8273,"comment_id":"1502212512","body":"What about letting people create custom event modifiers?\r\n```ts\r\nfunction enter (fn: (ev: KeyboardEvent) => void) {\r\n    return function (this: HTMLElement, ev: KeyboardEvent) {\r\n        if (ev.key === \"Enter\") {\r\n             fn.call(this, ev);\r\n        }\r\n    }\r\n}\r\n\r\non:keypress|enter={handler}\r\n```","updated_at":"2023-04-10T19:24:00Z","created_at":"2023-04-10T19:24:00Z","creator_user_login":"7nik"}
{"number":8273,"comment_id":"1561183559","body":"> Just use the correct elements, see:\r\n> \r\n> * [Improve click event handler accessibility warning¬†#8001](https://github.com/sveltejs/svelte/issues/8001)\r\n\r\nThis really isn't always practical, especially when you have more complex UI elements. Wrapping everything in an anchor tag or button brings a lot of additional potential issues. SvelteKit does its own magic with anchors, and a lot of times you aren't trying to navigate to a different route but affect a state change on the current route. The existence of aria attributes in the HTML spec acknowledges that you can't always use the correct elements, so I think it's worth discussing further here too.","updated_at":"2023-05-24T13:45:55Z","created_at":"2023-05-24T13:45:32Z","creator_user_login":"danielimmke"}
{"number":8273,"comment_id":"1561904761","body":"I would agree that there are edge cases where you may need to use other elements, but this does not justify adding obscure magic to Svelte that will lead to problems elsewhere. Often what people try to do as a workaround via events does not even work; the warning you get from Svelte also confirms that, as it fails to mention that enabling focus is also required to make keyboard events trigger.\r\n\r\n> a lot of times you aren't trying to navigate to a different route but affect a state change on the current route\r\n\r\nThat is why most of the time you should just use `<button>`, anchors are for navigation after all. Would love to hear about those other issues because I fail to see them when using the correct elements for the job.","updated_at":"2023-05-24T20:46:53Z","created_at":"2023-05-24T20:46:53Z","creator_user_login":"brunnerh"}
{"number":8271,"comment_id":"1425096299","body":"Where in https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track#browser_compatibility does it say that `track` doesn't work in Safari? All I see is that it's supported since Safari 6, released in 2012.","updated_at":"2023-02-10T02:38:48Z","created_at":"2023-02-10T02:38:48Z","creator_user_login":"Conduitry"}
{"number":8271,"comment_id":"1425174806","body":"As an aside, we use `<track>` inside a `<video>` on the [SvelteKit homepage](https://kit.svelte.dev/) and the captions display just fine in Safari, so Safari does at least support `<track>` in this case: https://github.com/sveltejs/kit/blob/81432d135a472d0e421bf8ca945d98769296fa97/sites/kit.svelte.dev/src/routes/home/Video.svelte#L119\r\n\r\nWe'll need a reproduction/better documentation of what _doesn't_ work in Safari if we're to add a warning.","updated_at":"2023-02-10T04:59:12Z","created_at":"2023-02-10T04:59:12Z","creator_user_login":"geoffrich"}
{"number":8271,"comment_id":"1426370712","body":"It brokes WEB-RTC, I will ask for reproduction.","updated_at":"2023-02-10T21:33:06Z","created_at":"2023-02-10T21:33:06Z","creator_user_login":"nosovk"}
{"number":8271,"comment_id":"1438869078","body":"<img width=\"402\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1398808/220212392-3df897cc-263c-4b43-9462-a3655ee11732.png\">\r\n\r\nhttps://realliveslot--demo-apple-track-5y1jnzvr.web.app/ with track tag,\r\nand without <track>: https://realliveslot--apple-no-track-7sstjd04.web.app/\r\n\r\nYou may check it on IPhone XS Max - the link with track will not show video, but link without track works as expected.","updated_at":"2023-02-21T17:46:46Z","created_at":"2023-02-21T17:41:46Z","creator_user_login":"nosovk"}
{"number":8271,"comment_id":"1438887605","body":"It took a month to find a reason why videos are broken on IPhone MAX 16.x.x (and working on normal IPhone). I suggest to remove that recommendation now (we actually added that tag because of hint from svelte-check) because if you need iphone mobile devices support - it's very hard to find out that on some phones that recommendation causes broken video without any explanation what was wrong.","updated_at":"2023-02-21T17:57:48Z","created_at":"2023-02-21T17:57:01Z","creator_user_login":"nosovk"}
{"number":8287,"comment_id":"1434374909","body":"If you lean into the whole \"svelte is a language\" idea, you could start to take inspiration from things like [Pytest](https://docs.pytest.org/en/7.2.x/), which is a Python testing framework that does rewriting of built-in `assert` statements to build a test runner.  The use is super ergonomic: you just write a normal Python file with functions start with `test_` and `assert` the things you want to check as if you're doing a runtime asserting. Something like this:\r\n\r\n```python\r\nfrom my_button_component import Button\r\n\r\ndef test_button():\r\n    button = Button(color=green, slots=['yay slots'])\r\n    assert button.inner_html == 'yay slots'\r\n```\r\n\r\n1-to-1 translating that to Svelte:\r\n\r\n```javascript\r\nimport {Button} from 'my-button-component'\r\n\r\nfunction test_button_works() {\r\n    const button = render(`<Button color=\"green\">yay slots!</Button>`);\r\n    console.assert(button.innerText === 'yay slots`);\r\n}\r\n```\r\n\r\nI think there are a lot of other design questions that need asking, like how to deal with dispatching events etc. But I think this already reads a lot easier than `expect(button.innerText).toBe('yay slots')`.","updated_at":"2023-02-17T09:31:42Z","created_at":"2023-02-17T09:31:42Z","creator_user_login":"Rik-de-Kort"}
{"number":8287,"comment_id":"1434982918","body":"@Rik-de-Kort you can use [svelte-htm](https://www.npmjs.com/package/svelte-htm) for rending components as a string. My point is more that we need to be able to test Svelte components in the same way that we use them. This is not about reinventing how testing frameworks work in the javascript/typescript ecosystem.  As for assertions, I think it would be nice to be agnostic in this respect. Use whatever you like `chai`, `should` etc.... That said, Svelte is for building UI and we need access to the DOM and the ability to mock user events.","updated_at":"2023-02-17T17:27:53Z","created_at":"2023-02-17T17:27:53Z","creator_user_login":"jwerre"}
{"number":8287,"comment_id":"1435480572","body":"This package/feature is more of a SvelteKit feature, testing library itself wrapped in svelte core package wouldn't be ideal and specific thing. (IMO)","updated_at":"2023-02-18T04:33:29Z","created_at":"2023-02-18T04:33:29Z","creator_user_login":"Devr-pro"}
{"number":8287,"comment_id":"1435701363","body":"> testing library itself wrapped in svelte core package wouldn't be ideal and specific thing.\r\n\r\nI agree.","updated_at":"2023-02-18T15:35:03Z","created_at":"2023-02-18T15:35:03Z","creator_user_login":"jwerre"}
{"number":8287,"comment_id":"1435706472","body":"I guess, something like `import {Describe, It, Before, After, expect, userEvent} from '@sveltejs/kit/test'` could be nice","updated_at":"2023-02-18T16:02:57Z","created_at":"2023-02-18T16:02:57Z","creator_user_login":"Devr-pro"}
{"number":8234,"comment_id":"1413071599","body":"It would be possible to do this via a preprocessor but the tooling support is not there.  \r\nI.e. no properly generated type definitions or property completions, combined with errors for missing variable declarations.\r\n\r\nIt runs, though.\r\n\r\n<details><summary>A sketch that does not handle imports</summary>\r\n\r\n```js\r\nimport ts from 'typescript';\r\n\r\n/** @returns {import('svelte/types/compiler/preprocess').PreprocessorGroup} */\r\nexport function tsPropsPreprocessor() {\r\n\treturn {\r\n\t\tscript: ({ filename, content, attributes }) => {\r\n\t\t\tif (!attributes.lang || attributes.lang !== 'ts' || content == null)\r\n\t\t\t\treturn;\r\n\r\n\t\t\ttry {\r\n\t\t\t\treturn process(filename, content);\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tconsole.error(`Failed to parse ${filename}.`, e);\r\n\t\t\t}\r\n\t\t},\r\n\t}\r\n}\r\n\r\n/** @param {string} filename */\r\n/** @param {string} content */\r\nfunction process(filename, content) {\r\n\tconst file = ts.createSourceFile(\r\n\t\tfilename, content,\r\n\t\tts.ScriptTarget.Latest,\r\n\t);\r\n\r\n\t/** @type {ts.Node} */\r\n\tlet propsNode = null;\r\n\tconst props = {};\r\n\r\n\t/** @param {ts.Node} node */\r\n\tfunction visit(node) {\r\n\t\tif (node.kind == ts.SyntaxKind.InterfaceDeclaration &&\r\n\t\t\tnode.name.text === 'Props') {\r\n\t\t\tfor (const member of node.members) {\r\n\t\t\t\tif (member.kind == ts.SyntaxKind.PropertySignature) {\r\n\t\t\t\t\tconst { name, type } = member;\r\n\t\t\t\t\tprops[name.text] = content.substring(type.pos, type.end);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propsNode != null)\r\n\t\t\t\tthrow new Error('Multiple Props interfaces found.');\r\n\r\n\t\t\tpropsNode = node;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnode.forEachChild(visit);\r\n\t}\r\n\r\n\tvisit(file);\r\n\r\n\tif (propsNode == null || Object.keys(props).length === 0)\r\n\t\treturn;\r\n\r\n\tconst code =\r\n\t\tcontent.substring(0, propsNode.pos) +\r\n\t\tObject.entries(props)\r\n\t\t\t.map(([name, type]) => `export let ${name}:${type};`)\r\n\t\t\t.join('\\n') +\r\n\t\tcontent.substring(propsNode.end);\r\n\r\n\treturn { code };\r\n}\r\n```\r\n\r\n</details>\r\n\r\nThat turns this:\r\n```svelte\r\n<script lang=\"ts\">\r\n\tinterface Props {\r\n\t\tname: string;\r\n\t\tage: number;\r\n\t}\r\n</script>\r\n```\r\nInto something like this:\r\n```svelte\r\n<script lang=\"ts\">\r\n\texport let name: string;\r\n\texport let age: number;\r\n</script>\r\n```\r\n\r\n(Manually formatted; white space will be garbled.)","updated_at":"2023-02-02T02:43:17Z","created_at":"2023-02-02T02:43:17Z","creator_user_login":"brunnerh"}
{"number":8234,"comment_id":"1426372939","body":"+1 to something like this (new to Svelte/Typescript, from Scala).\r\n\r\nPersonally, I would love to see something like a function declaration.\r\n\r\nA component definition is `(Props, others...) => Component`, maybe something like `satisfies ((Props, Reactives, Events, etc) => Component)`.\r\n\r\nMaybe we could even have a special variable\r\n```\r\n<script lang=\"ts\">\r\n$$def.props = { name: string, age: number}\r\n<script />\r\n```\r\nor \r\n```\r\n<script lang=\"ts\">\r\ninterface Props {\r\n\t\tname: string;\r\n\t\tage: number;\r\n\t}\r\n$$def.props satistfies Props\r\n<script />\r\n```\r\nNot sure if these make sense, but I think that having Svelte's special sauces link closer into Typescript's typing is a good direction.\r\n\r\nPersonally, it would be cool if Svelte could export some predefined \"components\", allowing syntax like:\r\n```\r\n// top of SomeComponent.svelte\r\n<Def component\r\n    props={name: string, age: number}\r\n    reactives={}\r\n/>\r\n```\r\n```\r\n// top of SomeComponent.svelte\r\n<script>\r\ninterface Props {\r\n    ...\r\n}\r\n</script>\r\n<Def component {Props} />\r\n```","updated_at":"2023-02-10T21:40:21Z","created_at":"2023-02-10T21:35:15Z","creator_user_login":"wiwa"}
{"number":8234,"comment_id":"1694815819","body":"Hey @Rich-Harris, any chance something like this could be considered? I know you're not the biggest fan of TypeScript, anyway, but even in normal JavaScript, this proposal could potentially be useful. Destructuring an object that's the return value of a function, like `defineProps()`, feels much more idiomatic in web development than exporting variables, to represent component props.\r\n\r\n```js\r\nconst { count = 0, name = '' } = defineProps()\r\n```\r\n\r\n```js\r\nexport let count = 0\r\nexport let name = ''\r\n```\r\n\r\nThe former example feels like it would be much more natural to a beginner who just learned JavaScript.","updated_at":"2023-08-28T00:28:29Z","created_at":"2023-08-28T00:28:29Z","creator_user_login":"D-Marc1"}
{"number":8235,"comment_id":"1429853410","body":"Hi, can i work in this issue, is my first issue. ","updated_at":"2023-02-14T14:40:29Z","created_at":"2023-02-14T14:40:29Z","creator_user_login":"pedroferreira37"}
{"number":8235,"comment_id":"1597830109","body":"I got back to work on this issue, I found the problem, is because of the way css-tree lib handles the parsing. I facing issues to implement it, @Conduitry can you help, or find someone most experiences in the codebase for it? ","updated_at":"2023-06-19T22:17:07Z","created_at":"2023-06-19T22:17:07Z","creator_user_login":"pedroferreira37"}
{"number":8235,"comment_id":"1627138182","body":"Hi @pedroferreira37 \r\n\r\nI did a litle experiment on this and I found that css-tree as you said will strip  all the comments form except exclamation comments (i.e. /*! .. */). \r\n\r\n[https://github.com/csstree/csstree/blob/master/lib/syntax/node/StyleSheet.js#L40-L48](https://github.com/csstree/csstree/blob/master/lib/syntax/node/StyleSheet.js#L40-L48)\r\n\r\nSo I suppose you must convert any css comments to this form before provide the source to the css-tree parser. \r\nTheir documentation also mention an onComment callback [https://github.com/csstree/csstree/blob/master/docs/parsing.md#oncomment](https://github.com/csstree/csstree/blob/master/docs/parsing.md#oncomment) that you may find useful for this conversion.\r\n\r\nThe next step is during svelte compilation and more specific when the stylesheet propery of the component object is being initialized \r\n[https://github.com/sveltejs/svelte/blob/master/packages/svelte/src/compiler/compile/css/Stylesheet.js#L391-L432](https://github.com/sveltejs/svelte/blob/master/packages/svelte/src/compiler/compile/css/Stylesheet.js#L391-L432)\r\n\r\nFor node.type === 'Comment' I think you must create a new class like Atrule or Rule in order to add it to the Stylesheet class.\r\n\r\nI hope this will be of some help.\r\n","updated_at":"2023-07-08T11:21:22Z","created_at":"2023-07-08T11:21:22Z","creator_user_login":"teobgeno"}
{"number":8235,"comment_id":"1627640149","body":"@teobgeno  Hi Theo, appreciate the help, this was exactly what I did, but seems that the compiler itself don't handle it, I created it, but in another tests it breaks. The reason is that before creating atrules and walking trough the nodes, I have to return the comments. As you mention, the css-tree don't handle it by default, and will stripe all comments, to make this to work, I have to store the comments, and return it before atrules, but when storing it, it's where it breaks, because the comments propertie it's not expected. \r\n\r\nI will glad if you join me to show you more about.","updated_at":"2023-07-09T07:57:32Z","created_at":"2023-07-09T07:57:32Z","creator_user_login":"pedroferreira37"}
{"number":8196,"comment_id":"1383168947","body":"> it produce different results when referencing by object name and \"this\" including to reactive ui\r\n\r\nAre you referring to adding an event like this?\r\n\r\n```\r\non:click={listenerObj.myhandleEvent}\r\n```\r\n\r\nThen that has nothing to do with Svelte. If you reference a function like that, `this` will *not*  be bound; that is just how JS works. Which is why you are supposed to use an anonymous function if you want `this` to be bound to the object the function is defined on:\r\n\r\n```\r\non:click={() => listenerObj.myhandleEvent()}\r\n```\r\n\r\nI do not see any wrong behavior here.","updated_at":"2023-01-15T14:56:32Z","created_at":"2023-01-15T14:45:48Z","creator_user_login":"brunnerh"}
{"number":8196,"comment_id":"1383171610","body":"There is something off about how the event handler object is attached, though...\r\n\r\nIf the `handleEvent` method only contains the log statement it is attached via:\r\n```js\r\nlisten(button1, \"click\", /*listenerObjHandleEvent*/ ctx[1])\r\n```\r\n\r\nIf an increment statement is added (`listenerObjHandleEvent.count++`), that code changes to:\r\n```js\r\nlisten(button1, \"click\", function () {\r\n    if (is_function(/*listenerObjHandleEvent*/ ctx[1]))\r\n        /*listenerObjHandleEvent*/ ctx[1].apply(this, arguments);\r\n})\r\n```\r\nAnd since the handler object is not a function, it will no longer work.","updated_at":"2023-01-15T14:55:52Z","created_at":"2023-01-15T14:55:52Z","creator_user_login":"brunnerh"}
{"number":8196,"comment_id":"1384738160","body":"> \r\nThank you for quick reply, yes I saw compiled code in REPL\r\n```\r\nlisten(button1, \"click\", function () {\r\n    if (is_function(/*listenerObjHandleEvent*/ ctx[1]))\r\n        /*listenerObjHandleEvent*/ ctx[1].apply(this, arguments);\r\n})\r\n```\r\nMy Intension is to want svelte compiler support listener object with a handleEvent() according to the DOM API specification.\r\n","updated_at":"2023-01-17T01:51:56Z","created_at":"2023-01-17T01:51:56Z","creator_user_login":"tanangular"}
{"number":8151,"comment_id":"1367395080","body":"I don't know if what you're suggesting is possible. You are mixing props and stores. So on one hand you are passing down props (`connectionId`) but you also manipulate the stores, which directly \"reach\" into the other components (ignoring any hierarchy). So you end up with two competing sources of truth and expect them to be in sync. What you are suggesting would be something like this:\r\n\r\n1. A store changes\r\n2. Svelte needs to identify all components that use this store (which is a higher level task then just invalidating the individual spots)\r\n3. Svelte needs to figure out if they are in some sort of hierarchy\r\n4. Svelte needs to update the components according to the hierarchy and also understand then components might unmount\r\n\r\n2 might not be possible, I think 3 is definitely not possible (intuitively, I don't know how Svelte works in detail). With props all these things just \"happen\" naturally.\r\n\r\nIf you want to keep using this pattern then you need to make your components more robust to data being (briefly) out of sync, e.g. in `ConnectionPoint.svelte`\r\n\r\n```diff\r\n-{connectionId} {$connections[connectionId].points[pointId]}\r\n+{connectionId} {$connections[connectionId]?.points[pointId]}\r\n```\r\n\r\nhttps://svelte.dev/repl/3c4f72ebbd7e4b06ae75bc9a5f65c9dc?version=3.55.0","updated_at":"2022-12-29T15:29:35Z","created_at":"2022-12-29T15:05:32Z","creator_user_login":"Prinzhorn"}
{"number":8151,"comment_id":"1368244808","body":"The stores should be the only source of truth. The data in the stores is always consistent. The problem is (as far as i unterstand) that stores update synchronously while the dom updates asynchronously. The store `selected` is updated first, so these dom-updates happen first. All instances of `ConnectionPoint` depend on `selected,` so they are updated. At this moment, the store `connections` already has its new value. The instances of `ConnectionPoint`, that should be removed, can't find their data in the store `connections.`\r\nThere is an inconsistency between the existing components and the components that should exist.\r\n\r\nI understand that it might be hard to fix this issue. If this is not possible, it would be nice to have an additional chapter in the documentation. This chapter could explain:\r\n- how updates of the dom work (async)\r\n- how updates of stores work (sync)\r\n- when all of this happens in the event loop\r\n- issues like this and solutions for these issues\r\n\r\nAt the moment, i use code like this:\r\n```\r\nselected.set(...)\r\nawait tick()\r\nconnections.set(...)\r\n```\r\nI think this works because (please correct me if I'm wrong): tick() resolves, after the changes because of selected.set(...) have been applied to the dom. During these updates, the store connections still has its old value. connections.set(...) runs in the next microtask. Because of this, no task, that could potentially modify stores, could run between selected.set(...) and connections.set(...).","updated_at":"2022-12-31T15:53:54Z","created_at":"2022-12-31T15:53:54Z","creator_user_login":"michAtEl"}
{"number":8151,"comment_id":"1651171936","body":"Here's a much simpler example showing the same problem:\r\nhttps://svelte.dev/repl/0b2d23c3004b4192a0491d6167a4c620?version=4.1.1\r\n\r\nBecause of <code>selected.set('b');</code> both items will be updated.\r\nBecause of `items.set({ b: {  text: \"item b\" } });`, App will be updated. This Code removes Item a from the store.\r\nThe update of Item a happens after item a item a has been removed from the store. Because of this, there is an error, when the Component Item a tries to read item a from the store.\r\n\r\nThis might be a solution: Svelte seems to have list of items that need a update. Before Svelte processes this list: Sort the list so that components closer to the root are processed first. In this case component a would be removed before it is updated.\r\n\r\n","updated_at":"2023-07-26T07:55:01Z","created_at":"2023-07-26T07:55:01Z","creator_user_login":"michAtEl"}
{"number":8084,"comment_id":"1337332361","body":"https://github.com/sveltejs/svelte/search?q=slide+height&type=issues\r\nhttps://github.com/sveltejs/svelte/issues/4831","updated_at":"2022-12-05T13:23:07Z","created_at":"2022-12-05T13:23:07Z","creator_user_login":"Prinzhorn"}
{"number":8084,"comment_id":"1337346384","body":"Cheers.\r\n\r\nI'd spotted #4831, but [this comment](https://github.com/sveltejs/svelte/issues/4831#issuecomment-628952597) made me think the issue was fixed and I was seeing a regression.\r\n\r\nHappy to close, merge or comment. Not sure how we do things here :)","updated_at":"2022-12-05T13:30:04Z","created_at":"2022-12-05T13:29:54Z","creator_user_login":"oodavid"}
{"number":8084,"comment_id":"1337364465","body":"> I'd spotted #4831, but [this comment](https://github.com/sveltejs/svelte/issues/4831#issuecomment-628952597) made me think the issue was fixed and I was seeing a regression.\r\n\r\nIn the future please link related issues and other materials you've found during your search. This avoids duplicate work on the maintainers' end (I comment duplicate issue refs on roughly 20% to 30% of all issues that I triage). This is a duplicate. If you follow the PR in the comment you've linked you'll find that the PR is closed and was never merged. Hence why the issue is still open, it has not been fixed from what I can tell.\r\n\r\n> Not sure how we do things here :)\r\n\r\nNo worries, I don't think anyone knows.","updated_at":"2022-12-05T13:40:30Z","created_at":"2022-12-05T13:35:36Z","creator_user_login":"Prinzhorn"}
{"number":8084,"comment_id":"1337408450","body":"> In the future please link related issues and other material you've found during your search. This avoids duplicate work on the maintainers' end (I comment duplicate issue refs on roughly 20% to 30% of all issues that I triage). This is a duplicate. \r\n\r\nThat's good advice. Sorry for the duplication.\r\n\r\n> If you follow the PR in the comment you've linked you'll find that the PR is closed and was never merged. Hence why the issue is still open, it has not been fixed from what I can tell.\r\n\r\nFab. That might make a good first-fix for me. Will see if I can carve out some time for that.","updated_at":"2022-12-05T13:54:10Z","created_at":"2022-12-05T13:54:10Z","creator_user_login":"oodavid"}
{"number":8084,"comment_id":"1368121457","body":"Until this issue is fixed, explicitly setting slide to both in and out transitions feels like a good workaround. If you do it like this, the new height is calculated before both transitions.\r\n\r\n```svelte\r\n<div\r\n  in:slide={{ duration: 100 }}\r\n  out:slide={{ duration: 100 }}\r\n/>\r\n```\r\n\r\nEdit: I just found that this workaround was already described here https://github.com/sveltejs/svelte/issues/6850#issuecomment-1069235505","updated_at":"2022-12-30T23:25:35Z","created_at":"2022-12-30T23:22:12Z","creator_user_login":"AntonNevsgodov"}
{"number":8067,"comment_id":"1333717179","body":"This is basically https://github.com/sveltejs/svelte/issues/7082, correct?","updated_at":"2022-12-01T12:49:06Z","created_at":"2022-12-01T12:49:06Z","creator_user_login":"Prinzhorn"}
{"number":8067,"comment_id":"1494545650","body":"> This is basically #7082, correct?\r\n\r\nNo, if the portal is implemented as `<svelte:portal to={LOCATION}>CONTENT</svelte:portal>`, with `LOCATION` being a DOM node, as it is suggested in #7082, I think getting a svelte component in `$$slots` is a very different feature.\r\n\r\nIt is true that it is easy to do a portal component once we get a svelte component in `$$slots` (by creating an instance with [the constructor](https://svelte.dev/docs#run-time-client-side-component-api-creating-a-component), passing the right `target`). But calling the constructor of a svelte component is not the only way to use it.\r\n\r\nIf you can get a svelte component in `$$slots` (instead of a boolean), you could for example put that component in the context (with [setContext](https://svelte.dev/docs#run-time-svelte-setcontext)) and some component deeper in the hierarchy could use it directly inside its template wherever it wants (even multiple times), without having to deal with DOM nodes. This would not be (easily) possible with `svelte:portal`.\r\n\r\nI think it would be great to implement this feature, it would make slots much more powerful.","updated_at":"2023-04-03T15:34:08Z","created_at":"2023-04-03T15:34:08Z","creator_user_login":"divdavem"}
{"number":8006,"comment_id":"1309449190","body":"The `volume` binding is provided by the `volumechange` event.\r\nIf the user does not interact with the volume controls, this event will never fire.\r\n\r\nMaybe code could be generated that reads the value once, if the bound variable is `undefined`.\r\nAs a workaround, just initialize the variable yourself.","updated_at":"2022-11-09T22:13:47Z","created_at":"2022-11-09T22:13:47Z","creator_user_login":"brunnerh"}
{"number":8006,"comment_id":"1309476325","body":"The `.volume` prop _is_ set on the DOM element right away though, I'm not sure why we're not running the code once upon creation that would grab that volume even before the event has fired once, like we're doing for the other types of bindings.","updated_at":"2022-11-09T22:34:17Z","created_at":"2022-11-09T22:34:17Z","creator_user_login":"Conduitry"}
{"number":8006,"comment_id":"1309659611","body":"Can confirm that initializing it fixes the problem. However, I feel like that's counter-intuitive as all other bindings do not need initialization.\r\n\r\nMaybe we could just do one of these:\r\n - return `1` in case volume is undefined\r\n - initializing it as 1 when creating the declaring the binding *(I believe that this is the best choice)*\r\n - require initialization by adding it to the list https://github.com/sveltejs/svelte/blob/b2d36075aeb5a9110caa66d2d383d44befcf00b8/src/compiler/compile/render_dom/wrappers/Element/index.ts#L714-L724","updated_at":"2022-11-10T01:53:13Z","created_at":"2022-11-10T01:53:13Z","creator_user_login":"Layendan"}
{"number":8006,"comment_id":"1310558496","body":"@Conduitry Can you give an example for where that happens?\r\nI assumed that it might happen on `input` elements, but to my surprise that does not seem to be the case.\r\n```svelte\r\n<script>\r\n\tlet value;\r\n\tlet checked;\r\n</script>\r\n\r\n<input type=text bind:value />\r\n<input type=checkbox bind:checked />\r\n\r\n<p>{value}</p>\r\n<p>{checked}</p>\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/07b50c58c835499ea0fb0c7cee52ff7b?version=3.53.1)\r\n\r\nBoth `value` and `checked` are `undefined` until user interaction.\r\n\r\n---\r\n\r\n@Layendan\r\nIt should not be initialized to `1` but simply the value of the DOM property as @Conduitry suggested.\r\nYou cannot assume 1 because user agents may use different defaults.\r\n\r\nYou can easily read the value yourself with an action, by the way:\r\n\r\n```svelte\r\n<script>\r\n\tlet volume;\r\n\tconst action = (node, callback) => callback(node);\r\n</script>\r\n\r\n<!-- svelte-ignore a11y-media-has-caption -->\r\n<video src=\"https://sveltejs.github.io/assets/caminandes-llamigos.mp4\"\r\n\tuse:action={v => volume = v.volume}\r\n\tbind:volume\r\n\tcontrols />\r\n\r\n<div>Volume: {volume}</div>\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/4fdc0cb2ed2b4b43bae63d3559a65e3d?version=3.53.1)","updated_at":"2022-11-10T16:27:40Z","created_at":"2022-11-10T16:27:40Z","creator_user_login":"brunnerh"}
{"number":8006,"comment_id":"1311613659","body":"@Conduitry  I would like to work on this issue, there is few things here I noticed.\r\n\r\n`like we're doing for the other types of bindings.` what do you mean here? the initial value of the state inside the instance is same as the value provided.\r\n","updated_at":"2022-11-12T08:35:42Z","created_at":"2022-11-11T12:03:32Z","creator_user_login":"RaiVaibhav"}
{"number":7926,"comment_id":"1285559643","body":"Am I doing something wrong or do I misunderstand? I get both console logs in Chrome and Firefox\r\n\r\n1. Select \"2\" on first Dropdown\r\n2. Reset\r\n3. Select \"2\" on second Dropdown\r\n\r\n![image](https://user-images.githubusercontent.com/679144/196964421-844bde23-394b-4f3b-a724-b787eab1ca70.png)\r\n\r\n\r\n> I know the order of bind vs on:change matters, but that's not what is being questioned.\r\n\r\nIt kind of is. In one case the change event would be triggered before the binding, hence the if-block would run after the event. In the other case there would be no DOM element that could trigger an event.\r\n\r\nSo maybe you just phrased it wrong and you would _expect_ the function to _not_ be called? In one case?","updated_at":"2022-10-20T13:43:15Z","created_at":"2022-10-20T13:40:36Z","creator_user_login":"Prinzhorn"}
{"number":7926,"comment_id":"1285708539","body":"Thanks for the response. It's interesting that you're seeing both logs, I just tried again in Chrome and I only see \"Second Change\" logged, but Firefox I see both changes logged.\r\n\r\nMy expectation would be that there's consistent behavior between both examples, which you can reproduce but I can't.\r\n\r\nYou state \"In the other case there would be no DOM element that could trigger an event.\", but then I'd expect that we would never see \"First Change\" logged as the element should be removed from the DOM before the `on:change` fires.","updated_at":"2022-10-20T15:08:25Z","created_at":"2022-10-20T15:08:25Z","creator_user_login":"cohansen"}
{"number":7926,"comment_id":"1285864232","body":"> You state \"In the other case there would be no DOM element that could trigger an event.\", but then I'd expect that we would never see \"First Change\" logged as the element should be removed from the DOM before the `on:change` fires.\r\n\r\nExactly. What I'm saying is that what you're seeing and reported as a bug is what I could accept as expected behavior. The main issue is the browser inconsistency though. Not sure if Svelte can do anything about that, there have been similar issues in the past, not sure what exactly they were about.","updated_at":"2022-10-20T16:48:57Z","created_at":"2022-10-20T16:48:57Z","creator_user_login":"Prinzhorn"}
{"number":7976,"comment_id":"1292734984","body":"This sounds like it would be on Brave. We don't want to be attempting to normalize events between browsers. `on:` should just attach the event handler and leave the rest to the browser.","updated_at":"2022-10-26T22:32:18Z","created_at":"2022-10-26T22:32:18Z","creator_user_login":"Conduitry"}
{"number":7976,"comment_id":"1292735852","body":"Should try whether the events work *without* Svelte; personally I suspect some privacy protection simply disregarding the events.","updated_at":"2022-10-26T22:33:26Z","created_at":"2022-10-26T22:33:26Z","creator_user_login":"brunnerh"}
{"number":7976,"comment_id":"1292825684","body":"It sounds like I should do some more testing and send a bug request to brave","updated_at":"2022-10-27T00:54:07Z","created_at":"2022-10-27T00:54:07Z","creator_user_login":"PeytonHanel"}
{"number":7976,"comment_id":"1293058616","body":"Works for me in Brave Version 1.44.112 Chromium: 106.0.5249.119 (Official Build) (64-bit). Try without any extensions in a clean instance.\r\n\r\nI also recommend using the Svelte REPL in the future https://svelte.dev/repl/dea6a5cafffd4179b73fc1a34812001a?version=3.52.0\r\n\r\n> The events are only fired once the mouse is clicked.\r\n\r\nThis sounds an awful lot like a Firefox bug I've been fighting since Ubuntu 22.04 where any mouseover/hover would break randomly, see https://bugzilla.mozilla.org/show_bug.cgi?id=1789602. Fixed via `MOZ_ENABLE_WAYLAND=1`, maybe Brave also breaks with XWayland\r\n\r\n![image](https://user-images.githubusercontent.com/679144/198208046-25666d07-a39b-406a-bab4-87bfc05826d0.png)\r\n","updated_at":"2022-10-27T06:34:11Z","created_at":"2022-10-27T06:34:11Z","creator_user_login":"Prinzhorn"}
{"number":7976,"comment_id":"1293861906","body":"> I also recommend using the Svelte REPL in the future\r\n\r\nWell the thing is that it works in the REPL but it doesn't work in an actual running instance, with a yarn run dev server going. That's why I didn't link the REPL.\r\n\r\n> maybe Brave also breaks with XWayland\r\n\r\nI am using X11 without Wayland, maybe that's the problem, I'll look into it.","updated_at":"2022-10-27T17:42:33Z","created_at":"2022-10-27T17:42:33Z","creator_user_login":"PeytonHanel"}
{"number":8040,"comment_id":"1327654666","body":"Another use case is loading 3rd party styles for a component on demand. Something like\r\n\r\n```js\r\n<svelte:head>\r\n  <link\r\n\trel=\"stylesheet\"\r\n\thref=\"https://...stylesheet.css\"\r\n\tcrossorigin=\"anonymous\"\r\n  />\r\n</svelte:head>\r\n```\r\n\r\nwill duplicate the `link` element in the head when you use your component multiple times on a page. \r\n\r\nAnd the network panel says the stylesheet is loaded twice as opposed to when the `link` is in `app.html`","updated_at":"2022-11-25T16:03:15Z","created_at":"2022-11-25T15:59:34Z","creator_user_login":"fcrozatier"}
{"number":8040,"comment_id":"1341708085","body":"@fcrozatier this was something that I ran into while I was experimenting with duplicated `<head>` elements, I had originally wrote out a section on ad hoc stylesheet loading, but decided to discard it as it was just reiterating the SEO stuff (which is a bit easier to follow along with than what I had for `<link />`).\r\nI did make a note about link elements, but I'm glad you highlighted it as it's a bit tucked away in the original post.\r\n> [...context etc]\r\n>  This means that if I depend on something external to the site, say an icon lib or a font, I have to do it within a component.","updated_at":"2022-12-07T22:58:00Z","created_at":"2022-12-07T22:58:00Z","creator_user_login":"WillsterJohnson"}
{"number":8030,"comment_id":"1313838959","body":"Are you using any third party Svelte components? They need to specify a `svelte` entrypoint in their `package.json` (and your bundler needs to be configured accordingly to respect said entry point, e.g. `mainFields` in esbuild). Otherwise errors like yours appear because of two conflicting Svelte \"instances\" in parallel. Because you are essentially importing a compiled component and not the Svelte file. See discussion in https://github.com/sveltejs/svelte/issues/3165","updated_at":"2022-11-14T14:30:13Z","created_at":"2022-11-14T14:30:13Z","creator_user_login":"Prinzhorn"}
{"number":8030,"comment_id":"1315344441","body":"Only one, `svelte-loadable`. I'm aware of the \"multiple Svelte instances\" -problem and even have a script written for our specific environment that checks there's only one \"instance\" of Svelte installed inside the repo folder. This problem seems to happen only with this one specific component: if it was caused by multiple \"instances\" of Svelte, I'd assume there would be other symptoms as well, in other components & other parts of our (rather large) app, right?","updated_at":"2022-11-15T13:56:38Z","created_at":"2022-11-15T13:56:38Z","creator_user_login":"arggh"}
{"number":8030,"comment_id":"1316523958","body":"> if it was caused by multiple \"instances\" of Svelte, I'd assume there would be other symptoms as well, in other components & other parts of our (rather large) app, right?\r\n\r\nI don't know, it was just a guess. Because in #3165 the symptoms only occurred when using transitions, that's why it immediately came to mind. And the fact that you cannot turn it into a REPL might be a sign that it's related to some sort of bundling issue. But it doesn't have to be, it might just as well be an ordinary bug.","updated_at":"2022-11-16T07:45:58Z","created_at":"2022-11-16T07:45:58Z","creator_user_login":"Prinzhorn"}
{"number":7870,"comment_id":"1248336040","body":"https://github.com/sveltejs/svelte/search?q=contenteditable+html&type=issues\r\nhttps://github.com/sveltejs/svelte/issues/4978#issuecomment-641652213","updated_at":"2022-09-15T16:25:51Z","created_at":"2022-09-15T16:25:51Z","creator_user_login":"Prinzhorn"}
{"number":7870,"comment_id":"1249207842","body":"Better not use a Svelte component inside a contenteditable element.\r\nAs you are editing the element in the browser, you might delete the elements within the component.\r\nHowever, as far as the Svelte component is concern, it has no idea that the element has removed from the DOM.\r\n\r\nwhen you unmount your component, it may have problem with the detached element.\r\n\r\nyou can `bind:innerHTML` with a `contenteditable` element. it is 2-way binding.\r\n\r\nChanging the value of the variable `innerHTML`, will update back to the `contenteditable` element.\r\n\r\n```svelte\r\n<script>\r\n\tlet innerHTML = '';\r\n</script>\r\n\r\n<div bind:innerHTML contenteditable>Hello {name}!</div>\r\n\r\n<textarea bind:value />\r\n```","updated_at":"2022-09-16T10:37:39Z","created_at":"2022-09-16T10:37:17Z","creator_user_login":"tanhauhau"}
{"number":7870,"comment_id":"1249207925","body":"Better not use a Svelte component inside a contenteditable element.\r\nAs you are editing the element in the browser, you might delete the elements within the component.\r\nHowever, as far as the Svelte component is concern, it has no idea that the element has removed from the DOM.\r\n\r\nwhen you unmount your component, it may have problem with the detached element.\r\n\r\nyou can `bind:innerHTML` with a `contenteditable` element. it is 2-way binding.\r\n\r\nChanging the value of the variable `innerHTML`, will update back to the `contenteditable` element.\r\n\r\n```sv\r\n<script>\r\n\tlet innerHTML = '';\r\n</script>\r\n\r\n<div bind:innerHTML contenteditable>Hello {name}!</div>\r\n\r\n<textarea bind:value />\r\n```","updated_at":"2022-09-16T10:37:22Z","created_at":"2022-09-16T10:37:22Z","creator_user_login":"tanhauhau"}
{"number":7870,"comment_id":"1249246162","body":"TIL about those bindings, that's neat","updated_at":"2022-09-16T11:24:28Z","created_at":"2022-09-16T11:24:28Z","creator_user_login":"Prinzhorn"}
{"number":7975,"comment_id":"1292763694","body":"Odd indeed‚Ä¶ but personally I‚Äôd just stick a margin-inline: .2em; and the problem goes away.","updated_at":"2022-10-26T23:15:03Z","created_at":"2022-10-26T23:15:03Z","creator_user_login":"Mark2M"}
{"number":7975,"comment_id":"1293048060","body":"`display: inline` is weird, please compare these two minimal examples, which don't require Svelte at all\r\n\r\nhttps://svelte.dev/repl/bab55fc1bbf24f9e9d988907b45d23f3?version=3.52.0\r\n\r\nso if you remove the newline it works\r\n\r\nhttps://svelte.dev/repl/205b608760474e20b2a418f60bea897d?version=3.52.0\r\n\r\nThere are countless open issues here about white-space control in Svelte, but I'm not sure if this is something that can be solved in a nice way. Even if `{#if}` would allow more control about trimming white-space, you'd still have to know what you're doing and that the newline breaks `display: inline`.","updated_at":"2022-10-27T06:24:31Z","created_at":"2022-10-27T06:21:04Z","creator_user_login":"Prinzhorn"}
{"number":7975,"comment_id":"1293115333","body":"Switching to `display: inline-block;` would also fix this (if that is an option here).\r\nI am curious why this behaves the way it does, though...","updated_at":"2022-10-27T07:36:12Z","created_at":"2022-10-27T07:36:12Z","creator_user_login":"brunnerh"}
{"number":7975,"comment_id":"1293308603","body":"> I am curious why this behaves the way it does, though...\r\n\r\nSvelte or `inline`? Svelte arguably does the correct thing and the newline is preserved. The `span` in the last example fixes the spacing, see updated version here: https://svelte.dev/repl/bab55fc1bbf24f9e9d988907b45d23f3?version=3.52.0","updated_at":"2022-10-27T10:18:39Z","created_at":"2022-10-27T10:18:39Z","creator_user_login":"Prinzhorn"}
{"number":7975,"comment_id":"1293321487","body":"The `inline`. Usually people battle it adding unwanted white space, not removing it.","updated_at":"2022-10-27T10:29:51Z","created_at":"2022-10-27T10:29:51Z","creator_user_login":"brunnerh"}
{"number":7975,"comment_id":"1293326714","body":"All I can say is that\r\n\r\n1. It behaves the same in Firefox and Chromium, so it's probably according to spec\r\n2. It behaves the same without Svelte in jsbin\r\n\r\nFor some reason the browser decides not to add a whitespace between the middle one (see dev tools).\r\n\r\n![image](https://user-images.githubusercontent.com/679144/198262319-7ca986c4-e59a-4c8b-8d6b-2431f6cac338.png)\r\n","updated_at":"2022-10-27T10:34:40Z","created_at":"2022-10-27T10:34:40Z","creator_user_login":"Prinzhorn"}
{"number":7975,"comment_id":"1293941889","body":"Thanks for taking a look at this. In my case I'm actually using an inline-block already, and if I run things together on one line it fixes case 2 but breaks case 3, deleting the interstitial space.\r\n\r\nhttps://svelte.dev/repl/8345055991ef4814a65738ea940edd5b?version=3.52.0\r\n\r\nI'll keep playing with this.","updated_at":"2022-10-27T18:59:51Z","created_at":"2022-10-27T18:59:51Z","creator_user_login":"johnnysprinkles"}
{"number":7975,"comment_id":"1293943630","body":"I guess a nonbreaking space could work: https://svelte.dev/repl/20151491249640cb956a39536924085c?version=3.52.0","updated_at":"2022-10-27T19:01:33Z","created_at":"2022-10-27T19:01:33Z","creator_user_login":"johnnysprinkles"}
{"number":7889,"comment_id":"1258797950","body":"Here's one way to disable the flip animation: [REPL](https://svelte.dev/repl/a79b5ff366fc4d22b9de71c5cfb92e8d?version=3.50.1)\r\n\r\nEssentially, you toggle between the imported `flip` function and a dummy function that returns an object with a no-op CSS animation.\r\n\r\n```html\r\n<script>\r\n\timport { flip } from 'svelte/animate';\r\n\t\r\n\tlet items = [`item ${0}`];\r\n\tlet idx = 1;\r\n\tlet shouldFlip = true;\r\n\t\r\n\tfunction removeItem(idx) {\r\n\t\titems.splice(idx, 1);\r\n\t\titems = items;\r\n\t}\r\n\t\r\n\t$: flipFn = shouldFlip ? flip : () => ({ css: () => ''});\r\n</script>\r\n\r\n<label><input type=\"checkbox\" bind:checked={shouldFlip}> Use flip?</label>\r\n<button on:click={() => items = [...items, `item ${idx++}`]}>\r\n\tAdd item\r\n</button>\r\n\r\n{#each items as item, idx (item)}\r\n<p animate:flipFn>\r\n\t{item}\r\n\t<button on:click={() => removeItem(idx)}>\r\n\t\tRemove\r\n\t</button>\r\n</p>\r\n{/each}\r\n```\r\n","updated_at":"2022-09-27T00:00:08Z","created_at":"2022-09-27T00:00:08Z","creator_user_login":"geoffrich"}
{"number":7889,"comment_id":"1259589797","body":"Thanks for your answer, but unfortunately, it didn't work in my case.\r\nThere is no animation, of course, but when scrolling, it still jumps back.\r\nIf I completely remove the animate directive, it doesn't jump back.\r\nThere is still something going on in the background.","updated_at":"2022-09-27T14:26:42Z","created_at":"2022-09-27T14:26:42Z","creator_user_login":"JuanDouek"}
{"number":7889,"comment_id":"1259595175","body":"Can you provide a [REPL](https://svelte.dev/repl) or minimal reproduction reproducing the issue?","updated_at":"2022-09-27T14:30:41Z","created_at":"2022-09-27T14:30:41Z","creator_user_login":"geoffrich"}
{"number":7889,"comment_id":"1259957546","body":"Here you have: [REPL](https://svelte.dev/repl/ca8378c01a004297b8b9e740e2a74537?version=3.50.1)\r\nThe red list in the right is the one with animate disabled.\r\nThe green list has no animate directive.\r\n\r\nThe lags/jumps are more noticeable in Safari than in Chrome and when scrolling from bottom to top.\r\nIn Safari, try both using the scrollbar, there should be a difference.\r\nUsing the mouse wheel from the bottom sometimes it breaks and I can't go up, I have to grab the scrollbar.","updated_at":"2022-09-27T19:31:18Z","created_at":"2022-09-27T19:31:18Z","creator_user_login":"JuanDouek"}
{"number":7907,"comment_id":"1268031314","body":"I don't understand how that would solve your problem, wouldn't that imply that consumers of your component would need to know about this or else their overrides would break in Edge v87? So your consumers also need to duplicate their styles (to increase specifity), making this whole dance pointless?","updated_at":"2022-10-05T07:02:35Z","created_at":"2022-10-05T07:02:35Z","creator_user_login":"Prinzhorn"}
{"number":7907,"comment_id":"1268575262","body":"Yes, overrides would break in Edge v87. But missing overrides is a much smaller impact on the component's functionality (presumably none, just suboptimal appearance) compared to all default styles missing which makes the component completely unusable (see the screenshot in https://github.com/janosh/svelte-multiselect/issues/117).\r\n\r\n> So your consumers also need to duplicate their styles (to increase specifity), making this whole dance pointless?\r\n\r\nThere wouldn't be a need to duplicate overrides, they'd just have to resort to `!important` if they know they want to support Edge 87 and earlier.","updated_at":"2022-10-05T15:08:08Z","created_at":"2022-10-05T15:08:08Z","creator_user_login":"janosh"}
{"number":7907,"comment_id":"1268587894","body":"I see. I don't think what you want is possible, because at runtime these styles might live in a bundled CSS file etc.\r\n\r\nHowever, if you're only worried about SSOT (and not size), then you could use Sass (https://github.com/sveltejs/svelte-preprocess) instead of duplicating the styles. Something along the lines of\r\n\r\n```scss\r\n@mixin stuff() {\r\n  .foo {\r\n  \tcolor: red;\r\n  }\r\n  \r\n  .bar {\r\n  \tdisplay: flex;\r\n  }\r\n}\r\n\r\n:where(div.multiselect) {\r\n  @include stuff();\r\n}\r\n\r\n@supports not selector(:where(div.multiselect)) {\r\n  div.multiselect {\r\n\t@include stuff();\r\n  }\r\n}\r\n```\r\n\r\nwhich compiles to\r\n\r\n```css\r\n:where(div.multiselect) .foo {\r\n  color: red;\r\n}\r\n:where(div.multiselect) .bar {\r\n  display: flex;\r\n}\r\n\r\n@supports not selector(:where(div.multiselect)) {\r\n  div.multiselect .foo {\r\n    color: red;\r\n  }\r\n  div.multiselect .bar {\r\n    display: flex;\r\n  }\r\n}\r\n```","updated_at":"2022-10-05T15:24:19Z","created_at":"2022-10-05T15:18:52Z","creator_user_login":"Prinzhorn"}
{"number":7907,"comment_id":"1268602553","body":"@Prinzhorn Cool! I usually try to avoid preprocessors if possible but sounds like Sass might be the best solution here.","updated_at":"2022-10-05T15:33:44Z","created_at":"2022-10-05T15:33:44Z","creator_user_login":"janosh"}
{"number":7518,"comment_id":"1120500529","body":"From doing a little digging, I've noticed a few things:\r\n\r\n- It doesn't seem like Tailwind _itself_ is part of the problem. As an accident, I forgot to create a `postcss.config.cjs` file for my demo reproduction, so Tailwind isn't even _running_; Svelte (or SvelteKit; I'm not sure which) seems to just choke on the `@apply` line within a media query\r\n- Nested media queries _in general_ are not the issue; placing one `@media` within another `@media` does _not_ cause a problem. The `@apply` syntax _specifically_ within a media query is what seems to cause the error","updated_at":"2022-05-08T22:49:05Z","created_at":"2022-05-08T22:49:05Z","creator_user_login":"alexlafroscia"}
{"number":7518,"comment_id":"1201956119","body":"From what I know, it's a bad practice to use the `@apply` inside `<style> ... </style>`.\r\n\r\n\r\nSee what they say in the Tailwind Docs: https://tailwindcss.com/docs/functions-and-directives#using-apply-with-per-component-css\r\n\r\n> under-the-hood, frameworks like Vue and Svelte are processing every single <style> block independently, and running your PostCSS plugin chain against each one in isolation.\r\n> That means if you have 10 components that each have a <style> block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs.\r\n\r\nI'm not sure if this applies tough (no pun intended), since you're using it inside `__layout.svelte` with `:global()`\r\n\r\nI would put the class directly on `app.css` or, preferably, `app.html`\r\n\r\n```html\r\n<!-- app.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<link rel=\"icon\" href=\"%svelte.assets%/favicon.png\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\t\t%svelte.head%\r\n\t</head>\r\n\t<body class=\"dark:bg-gray-900\">\r\n\t\t<div>%svelte.body%</div>\r\n\t</body>\r\n</html>\r\n```","updated_at":"2022-08-02T03:05:57Z","created_at":"2022-08-02T02:53:35Z","creator_user_login":"heloineto"}
{"number":7518,"comment_id":"1305507098","body":"Just leaving this here in case anyone stumbles on to this thread, hopefully it might save someone the time I wasted ü§™:\r\n\r\nI had the same issue except that I was nesting `@apply` inside of `@screen`. But as @heloineto said, avoid using Tailwind funcs inside `<style> ... </style>`. It sounds obvious, but my experience taught me that aside from the aforementioned reasons there is a very non-trivial performance implication as well. So if you're using Tailwind with Svelte, just to recap:\r\n\r\n### Don't\r\n- Use Tailwind funcs inside `<style>` or risk Tailwind running over and over\r\n\r\n### Do\r\n- Use `<style>` for handcrafted, component scoped CSS (if you need to)\r\n- Follow normal Tailwind conventions and only use the utilities inside the actual component markup **_(doesn't apply to OP)_**, or ...\r\n- If possible, try to abstract your classes to something more generic that you can implement in `tailwind.config.js` or `app.css`\r\n- If it really is very specific and not suited to a component (as in the case of @alexlafroscia), you may need to go the `app.css` route","updated_at":"2022-11-07T12:05:09Z","created_at":"2022-11-07T12:04:29Z","creator_user_login":"mattpfeffer"}
{"number":7500,"comment_id":"1114224420","body":"Could you clarify what you mean by \"can Svelte have this\"?","updated_at":"2022-05-01T12:31:55Z","created_at":"2022-05-01T12:31:55Z","creator_user_login":"dummdidumm"}
{"number":7500,"comment_id":"1114250416","body":"I would _guess_ this means to handle `inert` as a boolean attribute (on certain elements? on all elements?) but I'm not sure.","updated_at":"2022-05-01T14:15:24Z","created_at":"2022-05-01T14:15:24Z","creator_user_login":"Conduitry"}
{"number":7500,"comment_id":"1114327829","body":"Sorry that I was not clear. After watching the Svelte Summit, I thought Svelte doc can have the a11y section that explains how Svelte take the a11y seriously and show some examples how to improve a11y. \r\nSince `inert` is coming to major browsers, I thought it will be a good example to use it in the doc.\r\n\r\nSo that my point was that Svelte cares about a11y and show more examples in doc.\r\n","updated_at":"2022-05-02T20:02:31Z","created_at":"2022-05-01T20:20:26Z","creator_user_login":"shinokada"}
{"number":7500,"comment_id":"1115288934","body":"I agree that a dedicated section on a11y with more context would be great, but I'm not sure I would use an attribute as an example that most browsers only have behind a flag.","updated_at":"2022-05-02T19:41:17Z","created_at":"2022-05-02T19:41:17Z","creator_user_login":"dummdidumm"}
{"number":7500,"comment_id":"1126693103","body":"As I'm a bit confused now, I would like to ask if this issue should track the effort to bring `inert` to `svelte` or if a new issue should be opened? \r\n\r\n`Inert` is available in Firefox and Chrome and in preview for Edge and Safari. So I would love to see native support in `sveltekit` as I <3 to play with those latest features :)","updated_at":"2022-05-14T11:12:20Z","created_at":"2022-05-14T11:12:20Z","creator_user_login":"benbender"}
{"number":7500,"comment_id":"1463045518","body":"The handling of `inert` should be improved now in 3.56.0.","updated_at":"2023-03-10T00:51:43Z","created_at":"2023-03-10T00:51:43Z","creator_user_login":"Conduitry"}
{"number":7361,"comment_id":"1065805280","body":"A bit related: https://github.com/sveltejs/svelte/issues/7160","updated_at":"2022-03-12T03:45:59Z","created_at":"2022-03-12T03:45:59Z","creator_user_login":"lukaszpolowczyk"}
{"number":7361,"comment_id":"1065842725","body":"There's a difference between which select element is selected and which one has focus. When I press Z the first element becomes selected but the second element still has focus. I can tell because there's a dotted outline.\r\n\r\nChromium on the other hand behaves \"correct\" (as you expect) because it seems to move the focus to the selected element. Either this is a browser bug in Firefox/Chromium (none of them is right or wrong in my opinion) or maybe unspecified behavior? Svelte _could_ also `focus()` the `<option>` when it changes to make the behavior consistent. I think it's just that `[size] > 1` is incredibly rarely used and nobody ran into this yet, with a regular select element this does not happen.\r\n\r\nEdit: I changed my mind and think this is a Firefox bug. Because having focus on a non-selected option element is pointless. You cannot use tab navigation _inside_ the select element, so these two states should never diverge.","updated_at":"2022-03-12T08:46:57Z","created_at":"2022-03-12T08:43:14Z","creator_user_login":"Prinzhorn"}
{"number":7361,"comment_id":"1065843976","body":"Well, you cannot `focus()` an `<option>`. `document.activeElement` will be the `<select>`. So yeah, Firefox does some weird things here with keeping a `focus` state for each `<option>`. So you can't even workaround it using `e.target.selectedOptions[0]?.focus()`.","updated_at":"2022-03-12T08:52:59Z","created_at":"2022-03-12T08:52:37Z","creator_user_login":"Prinzhorn"}
{"number":7361,"comment_id":"1065858054","body":"https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts#L544-L547 needs `select.selectedIndex = i`\n\nhttps://svelte.dev/repl/a9eaa116f4dd4a4489157a54f9d7d792?version=3.46.4\n\nedit: you might wanna roll out a slotted select component before the fix lands, i mean if the above is actually a fix","updated_at":"2022-03-12T10:31:17Z","created_at":"2022-03-12T10:28:04Z","creator_user_login":"mdynnl"}
{"number":7361,"comment_id":"1065983185","body":"@mdynnl It works, thanks.","updated_at":"2022-03-12T23:23:04Z","created_at":"2022-03-12T23:23:04Z","creator_user_login":"lukaszpolowczyk"}
{"number":7361,"comment_id":"1066723189","body":"@lukaszpolowczyk while it works, that method relies on internal functions, i've added another approach that doesn't\n\n<https://svelte.dev/repl/a9eaa116f4dd4a4489157a54f9d7d792?version=3.46.4>","updated_at":"2022-03-14T12:23:04Z","created_at":"2022-03-14T12:23:04Z","creator_user_login":"mdynnl"}
{"number":7361,"comment_id":"1066767137","body":"@mdynnl The method with `no_internat.svelte` does not work.","updated_at":"2022-03-14T13:11:10Z","created_at":"2022-03-14T13:11:10Z","creator_user_login":"lukaszpolowczyk"}
{"number":7361,"comment_id":"1073236248","body":"Hmm, it's working for me on firefox mobile. For some reason, `size` has no effect on chrome.\r\nThe important part is setting `selectedIndex`.\r\n\r\nEdit: Updated again @lukaszpolowczyk. Should work now.","updated_at":"2022-03-23T17:39:28Z","created_at":"2022-03-20T12:02:43Z","creator_user_login":"mdynnl"}
{"number":7549,"comment_id":"1131903661","body":"This would be an issue with Svelte itself, though it's unclear whether it's supposed to be one. Did Svelte ever guarantee expressions in the template happen during component initialization?\r\n\r\nThe problem here appears to be that hydration isn't considered part of component initialization, which is why this works in SSR and the repl. It may be possible to change this cleanly, but I'm not sure if there would be other implications.","updated_at":"2022-05-19T15:56:51Z","created_at":"2022-05-19T15:56:51Z","creator_user_login":"mrkishi"}
{"number":7549,"comment_id":"1131904743","body":"We don't make that guarantee. It's the SSR behaviour that's wrong, in fact, though I haven't looked into how straightforward that would be to change","updated_at":"2022-05-19T15:59:50Z","created_at":"2022-05-19T15:59:50Z","creator_user_login":"Rich-Harris"}
{"number":7549,"comment_id":"1131984410","body":"I was thinking that this should probably be throwing an exception in both DOM and SSR mode, and it sounds like Rich is leaning in that same direction. We already have a function in `svelte/internal` that's supposed to throw when called other than in top-level component initialization code, but that's apparently not working correctly (or consistently) in this case.","updated_at":"2022-05-19T17:23:03Z","created_at":"2022-05-19T17:23:03Z","creator_user_login":"Conduitry"}
{"number":7474,"comment_id":"1104624015","body":"I may have misunderstood but if the bug is the unknown prop warning then here's a simpler repro: https://svelte.dev/repl/3b8631768b874557b3987bdd10e29d76?version=3.47.0\r\n\r\nWarning seems to stem from line 3 in `App.svelte`, where `null` is assigned to `thing` (also if you assign any value to `thing` other than `undefined`)\r\n\r\nArguably export function is a one way binding from the child to the parent and shouldn't get a value from the parent and the warning is expected behavior here.","updated_at":"2022-04-21T01:47:40Z","created_at":"2022-04-21T01:47:40Z","creator_user_login":"gtm-nayan"}
{"number":7474,"comment_id":"1104688816","body":"@gtm-nayan The expected behavior?\r\n\r\nAnd how to do it differently so that the warning doesn't display?\r\nThe function exported from C.svelte, must work inside it, because it refers to inside it.","updated_at":"2022-04-21T04:13:51Z","created_at":"2022-04-21T04:13:51Z","creator_user_login":"lukaszpolowczyk"}
{"number":7474,"comment_id":"1104712265","body":"> @gtm-nayan The expected behavior?\r\n\r\nFor me it is, but the consensus might be different.\r\n\r\n> And how to do it differently so that the warning doesn't display?\r\n\r\nJust don't assign anything to the receiver of the binding and the warning goes away. *(`undefined` is fine)*. In my repl, it'd be changing `let thing = null;` to `let thing;`, in your repl it'd be changing `export let saveForm = null` to `export let saveForm = undefined;` inside `Wrapper.svelte`.","updated_at":"2022-04-21T05:04:46Z","created_at":"2022-04-21T05:04:46Z","creator_user_login":"gtm-nayan"}
{"number":7305,"comment_id":"1564248859","body":"the same problem!","updated_at":"2023-05-26T11:27:21Z","created_at":"2023-05-26T11:27:21Z","creator_user_login":"IharKrasnik"}
{"number":7305,"comment_id":"1565068208","body":"@IharKrasnik Do you have a minimal reproduction? The link in the OP's message no longer works","updated_at":"2023-05-26T23:29:22Z","created_at":"2023-05-26T23:29:22Z","creator_user_login":"ghostdevv"}
{"number":7305,"comment_id":"1610789804","body":"Same issue. As a temporary fix I'm using the on:loadmetadata event to set the volume to 0. \r\n\r\n```Svelte\r\n<script>\r\n  let videos = [\"1.mp4\",\"2.mp4\"];\r\n  let videoElements = [];\r\n</script>\r\n\r\n{#each videos as src, index}\r\n  <video \r\n    bind:this={ videoElements[index] }\r\n    on:loadmetadata={()=>{ videoElements[index].volume = 0; }}\r\n    preload=\"none\" \r\n    autoplay \r\n    loop \r\n    muted \r\n    playsinline \r\n    controlsList=\"nodownload\"\r\n  >\r\n    <source src=\"{src}\" type=\"video/mp4\">\r\n    Your browser does not support the video tag.\r\n  </video>\r\n{/each}\r\n```\r\n\r\nI also tried to use intersection observer to pause and play the video, but it will then randomly play the video with sound again.\r\n\r\nVersions:\r\n\"svelte\": \"4.0.0\",\r\n\"@sveltejs/kit\": \"1.20.4\",\r\n","updated_at":"2023-06-28T05:54:34Z","created_at":"2023-06-28T05:52:44Z","creator_user_login":"johannesmutter"}
{"number":7305,"comment_id":"1610940304","body":"I found a hacky solution which works quite well:\r\n\r\n`````\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\texport let paused;\r\n\texport let src;\r\n\texport let poster = '';\r\n\texport let autoplay = false;\r\n\texport let muted = false;\r\n\texport let loop = false;\r\n\texport let controls = false;\r\n\texport let time;\r\n\texport let duration = '';\r\n\texport let video;\r\n\r\n\tonMount(() => {\r\n\t\tif (autoplay == false) {\r\n\t\t\tpaused = true;\r\n\r\n\t\t\tif (muted == false) {\r\n\t\t\t\tvideo.volume = 1;\r\n\t\t\t} else {\r\n\t\t\t\tvideo.volume = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpaused = false;\r\n\t\t\tvideo.volume = 0;\r\n\t\t}\r\n\t});\r\n\r\n\tfunction videoMute() {\r\n\t\tif (muted == false) {\r\n\t\t\tvideo.volume = 1;\r\n\t\t} else {\r\n\t\t\tvideo.volume = 0;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<!-- svelte-ignore a11y-media-has-caption -->\r\n<video\r\n\tclass=\"w-full\"\r\n\tbind:this={video}\r\n\ton:load={videoMute}\r\n\tbind:paused\r\n\tbind:duration\r\n\tbind:currentTime={time}\r\n\t{poster}\r\n\t{loop}\r\n\t{controls}\r\n\tplaysinline\r\n>\r\n\t<source {src} type=\"video/mp4\" />\r\n\tYour browser does not support the video tag.\r\n</video>\r\n\r\n````","updated_at":"2023-06-28T07:54:30Z","created_at":"2023-06-28T07:53:17Z","creator_user_login":"marius-jopen"}
{"number":7358,"comment_id":"1073310643","body":"Related, I want to use the types `SpringOpts` and `SpringUpdateOpts` from `svelte/motion` but they're not exported.\r\n\r\nI'm using this workaround for the spring module to avoid copy/pasting, but this strategy does not work for all of the types exported in this PR:\r\n\r\n```ts\r\ntype SpringOpts = Exclude<Parameters<typeof spring>[1], undefined>;\r\ntype SpringUpdateOpts = Exclude<Parameters<ReturnType<typeof spring>['update']>[1], undefined>;\r\n```\r\n\r\nMy apologies if this is the wrong place for this. In my case it's a trivial issue.","updated_at":"2022-03-20T18:57:14Z","created_at":"2022-03-20T18:53:20Z","creator_user_login":"ryanatkn"}
{"number":7358,"comment_id":"1098988922","body":":wave: Any updates? The PR is ready, all tests pass, is there anything else left? Thanks!","updated_at":"2022-04-14T10:09:23Z","created_at":"2022-04-14T10:09:23Z","creator_user_login":"vrde"}
{"number":7358,"comment_id":"1217582973","body":"@baseballyama @bluwy: would it make sense to update this PR to export also the types mentioned by @ryanatkn? Wondering if there are more types that should be exported :thinking:.\r\n\r\nPS: sorry for the direct mention, just wanted to move this forward if possible :heart: ","updated_at":"2022-08-17T07:33:27Z","created_at":"2022-08-17T07:33:27Z","creator_user_login":"vrde"}
{"number":7358,"comment_id":"1244469839","body":"Just came to make this same PR. I keep having to manually add export directives each time I update the package.","updated_at":"2022-09-12T21:03:41Z","created_at":"2022-09-12T21:03:41Z","creator_user_login":"jrmoynihan"}
{"number":7358,"comment_id":"1448576932","body":"AFAIK @Conduitry had reservations of exposing the `Invalidator` type because strictly speaking that's internal API - though since it's available in other public types, that's kind of a lost cause.","updated_at":"2023-02-28T17:24:55Z","created_at":"2023-02-28T17:24:55Z","creator_user_login":"dummdidumm"}
{"number":7358,"comment_id":"1577060510","body":"> AFAIK @Conduitry had reservations of exposing the `Invalidator` type because strictly speaking that's internal API - though since it's available in other public types, that's kind of a lost cause.\r\n\r\nNot sure why you say it's a lost cause. You have devs that are asking for these types to be exported. That's a clear need. I'm not sure why this is not part of the discussion.\r\n\r\n\r\n\r\n","updated_at":"2023-06-05T15:56:11Z","created_at":"2023-06-05T15:55:22Z","creator_user_login":"vrde"}
{"number":7337,"comment_id":"1058358626","body":"I have been working on a [datepicker component](https://github.com/Tropix126/fluent-svelte/blob/main/src/lib/CalendarView/CalendarView.svelte) for my library and I have a few things I noticed in your example.\r\n\r\n- Locales can be automated using the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) browser API (supported by ie11+).\r\n- It seems that clicking a date sometimes selects the wrong day (often the day before).\r\n- I think this could benefit from having accessible keyboard navigation features, notably a proper tab order and moving selection via arrow keys.","updated_at":"2022-03-03T18:30:40Z","created_at":"2022-03-03T18:30:30Z","creator_user_login":"Tropix126"}
{"number":7337,"comment_id":"1059726974","body":"> It seems that clicking a date sometimes selects the wrong day (often the day before).\r\n\r\nI can't seem to reproduce that. Maybe you're getting confused because it switches months when you click on the grayed-out days in the next/previous month?\r\n\r\nYou library looks nice. My date-picker is only meant as an example, I don't intend to make a full-blown date-picker - it's just something simple to demonstrate some features of the UI library.\r\n\r\nIf there's a bug, I'd like to fix it though. üôÇ\r\n","updated_at":"2022-03-05T09:12:57Z","created_at":"2022-03-05T09:12:57Z","creator_user_login":"mindplay-dk"}
{"number":7337,"comment_id":"1062186989","body":"> > It seems that clicking a date sometimes selects the wrong day (often the day before).\r\n> \r\n> I can't seem to reproduce that. Maybe you're getting confused because it switches months when you click on the grayed-out days in the next/previous month?\r\n\r\nStrange, it happens 100% of the time when selecting a date, even without switching months. Could it be timezone related?\r\n\r\n> You library looks nice. My date-picker is only meant as an example, I don't intend to make a full-blown date-picker - it's just something simple to demonstrate some features of the UI library.\r\n\r\nYeah, that's reasonable, although I think that the examples should encourage accessibility, so i'd still suggest keyboard navigation.","updated_at":"2022-03-08T20:38:44Z","created_at":"2022-03-08T20:38:44Z","creator_user_login":"Tropix126"}
{"number":7337,"comment_id":"1064074713","body":"> Strange, it happens 100% of the time when selecting a date, even without switching months. Could it be timezone related?\r\n\r\nYeah, the JS Date API is a nightmare. üòÖ\r\n\r\nCan you try this fork? I've switched everything over to the `ISO` version of the Date APIs.\r\n\r\nhttps://svelte.dev/repl/94fbf9f0d62f44239db819b5afa53eaf?version=3.46.4\r\n\r\n(I'm in Denmark, so a timezone issue would affect me for an hour or two around midnight - I'm never awake then, and definitely never working, so it's possible I've never seen it.)\r\n\r\n> Yeah, that's reasonable, although I think that the examples should encourage accessibility, so i'd still suggest keyboard navigation.\r\n\r\nIf it doesn't add too much complexity, I guess we could do that.\r\n\r\nI'm not an expert, so maybe you wanna help out? üôÇ\r\n","updated_at":"2022-03-10T13:39:09Z","created_at":"2022-03-10T13:39:09Z","creator_user_login":"mindplay-dk"}
{"number":7317,"comment_id":"1146636795","body":"Experiencing the same issue, any fixes so far?","updated_at":"2022-06-04T15:38:11Z","created_at":"2022-06-04T15:38:11Z","creator_user_login":"kbrgl"}
{"number":7317,"comment_id":"1146638663","body":"> \r\n\r\nI added a messy fix to the repl, it fakes an empty element with the same height/content. It works for some use cases but not all. No other fixes to this as far as I know.\r\n\r\n~~~\r\n{#if loaded}\r\n    <h1>Hello {name}!</h1>\t\r\n{:else}\r\n    <h1>&nbsp;</h1>\r\n{/if}\r\n~~~","updated_at":"2022-06-04T15:48:47Z","created_at":"2022-06-04T15:48:21Z","creator_user_login":"nodra-vr"}
{"number":7317,"comment_id":"1146874667","body":"Adding `<style>div { height: 100vh }</style>` to the repl example seems to solve the issue. But I agree this should match `bind:clientWidth` behavior since that doesn't require a `width: 100%` rule.","updated_at":"2022-06-05T20:02:40Z","created_at":"2022-06-05T20:02:40Z","creator_user_login":"brycedorn"}
{"number":7317,"comment_id":"1147971359","body":"As a ref. this was the workaround and info provided on discord by rmunn (not an easy setup, but it is a solid fix if you do not require IE support)\r\n\r\n\r\n> One workaround would be to use [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) if you don't need to keep IE support. https://github.com/sveltejs/svelte/issues/7099#issuecomment-1004998366 mentions wanting to drop the current iframe-based implementation of bind:clientHeight in favor of a ResizeObserver method, due to the several bugs that appear to be linked to it. The only reason not to use ResizeObserver is that IE doesn't implement it (and never will, since IE is dead and nobody's working on it anymore). Svelte, AFAIK, still wants to support IE because there are still some sites that have to support it (due to having customers in large organizations, sometimes governments, that still mandate things like IE 8 (!) on their computers because at some point in the past it passed some sort of security audit). So as long as Svelte still supports IE, it's not possible for Svelte to use ResizeObserver. But you could implement it yourself if you don't need IE support. \r\n\r\n[ResizeObserver - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\r\n","updated_at":"2022-06-06T21:54:12Z","created_at":"2022-06-06T21:54:12Z","creator_user_login":"nodra-vr"}
{"number":7332,"comment_id":"1057706675","body":"> I do not know if the compiler can easily determine whether the event is custom or not (could be forwarded from multiple levels down), so maybe this is just technically not possible right now.\r\n\r\nYeah, this is kinda the case right now. Components are compiled in isolation, so any events from a component are all assumed to be a custom event by the compiler. Don't think there's a way to fix this at the meantime.","updated_at":"2022-03-03T06:02:40Z","created_at":"2022-03-03T06:02:40Z","creator_user_login":"bluwy"}
{"number":7332,"comment_id":"1287271648","body":"Does it even have to know? If we loosened this restriction and let it call \"preventDefault\" on anything, which may or may not be a native event, all it would need is an extra check here:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/01a91163a9ffd6d18ea4699cef4c531b72fbfc00/src/runtime/internal/dom.ts#L262\r\n\r\nTo be like:\r\n\r\n```diff\r\n+ if (event.preventDefault) {\r\n    event.preventDefault();\r\n+ }\r\n```","updated_at":"2022-10-21T17:54:47Z","created_at":"2022-10-21T17:54:47Z","creator_user_login":"johnnysprinkles"}
{"number":7332,"comment_id":"1287323094","body":"I guess the problem is potential confusion. The compiler would not complain but nothing happens when used on a custom event.\r\n\r\nOf course if such a change is made it should work for all modifiers, not just `preventDefault`.\r\n\r\nThe check itself is not even necessary, custom events have all those methods as well via the prototype.","updated_at":"2022-10-21T18:48:00Z","created_at":"2022-10-21T18:47:33Z","creator_user_login":"brunnerh"}
{"number":7083,"comment_id":"1003187787","body":"I think I got the trick. Here is what happens:\r\n1. when you click on the checkbox, the `handleCheckboxClick` is called before binding\r\n2. `handleCheckboxClick` does \r\n```js\r\nstore.set({ clicked: true, checked: $store.checked });\r\n```\r\n3. this triggers updating of the `<input>` with `$store.checked`, which is still `false`\r\n4. the checkbox gets unchecked\r\n5. Sveltes proceed `bind:checked={$store.checked}` and, as checkbox is unchecked, `$store.checked` updates from `false` to `false`","updated_at":"2021-12-30T21:32:33Z","created_at":"2021-12-30T21:32:33Z","creator_user_login":"7nik"}
{"number":7083,"comment_id":"1032283788","body":"If you remove the `bind:` and handle toggling the checked state yourself, then this works:\r\n\r\n```js\r\nconst handleCheckboxClick = evt => {\r\n  store.set({checked: evt.target.checked, clicked: true });\r\n}\r\n\r\n<input type=\"checkbox\" on:click={handleCheckboxClick} checked={$store.checked} />\r\n```\r\n\r\nSo I think @7nik is correct: it's a race condition between when `bind:` runs and when the `on:click` handler runs.\r\n\r\nIt's unclear to me whether this is a Svelte bug and the behavior should be changed, or whether this is simply something that should be documented better, and this should be considered a documentation bug.","updated_at":"2022-02-08T07:16:30Z","created_at":"2022-02-08T07:16:07Z","creator_user_login":"rmunn"}
{"number":7083,"comment_id":"1032341405","body":"I need to clarify a few things: \r\n1. binding for checkboxes happens on `change` event;\r\n2. the element itself changes its state right before the `click` event;\r\n3. events fire in the following order:\r\n* `mousedown` / `keydown`;\r\n* `mouseup` / `keyup`;\r\n* _element changes its state_;\r\n* `click` ;\r\n* `input`;\r\n* `change`.\r\n\r\nThus, you can avoid overwriting new state with the old one by:\r\n* using event `mousedown` or `mouseup` - here the state isn't updated yet, but these events, unlike to `click` event, can be triggered only by mouse;\r\n* using `change` event after binding (the order in which directives are used matters):\r\n```html\r\n<input type=\"checkbox\" bind:checked={$store.checked} on:change={handleCheckboxClick} />\r\n```\r\n* also, you can counterchange the state in the handler (`$store.checked = !$store.checked;`), but this is a smelling approach;\r\n* and lastly, maybe you can keep `clicked` and `checked` in different stores.\r\n","updated_at":"2022-02-08T08:34:09Z","created_at":"2022-02-08T08:29:38Z","creator_user_login":"7nik"}
{"number":7341,"comment_id":"1059608318","body":"fixed\r\n```html\r\n<div bind:clientHeight={h} /><main>{@html html}{''}</main>\r\n```","updated_at":"2022-03-04T23:44:37Z","created_at":"2022-03-04T23:44:37Z","creator_user_login":"lidlanca"}
{"number":7341,"comment_id":"1060065912","body":"> Aside: it would be nice if there was a way to say 'you don't need to replace me, I promise my contents won't have changed since SSR'\r\n\r\n+1 this is easily my geatest desire for Svelte. I would love to be able to turn off repair mode","updated_at":"2022-03-06T23:44:09Z","created_at":"2022-03-06T23:44:09Z","creator_user_login":"benmccann"}
{"number":7341,"comment_id":"1069899054","body":"This is a bit more than annoyance, it actually broke my code.\r\n\r\nI've created a REPL to replicate my issue:\r\nhttps://svelte.dev/repl/6398f723b642481da32c1c52903fd88e?version=3.46.4\r\n\r\nThe \"display\" is shifted right and down compared to the cursor, but aligns perfectly in 3.46.3:\r\nhttps://svelte.dev/repl/6398f723b642481da32c1c52903fd88e?version=3.46.3\r\n","updated_at":"2022-03-17T02:25:57Z","created_at":"2022-03-17T02:25:57Z","creator_user_login":"Herdubreid"}
{"number":7341,"comment_id":"1069950168","body":"@Herdubreid That doesn't seem related to this issue, but to #6990 instead. Svelte's behavior was changed because it didn't respect whitespace inside `<pre>`, even though it should to align with browsers.","updated_at":"2022-03-17T02:41:23Z","created_at":"2022-03-17T02:41:23Z","creator_user_login":"mrkishi"}
{"number":7341,"comment_id":"1070037749","body":"That makes sense @mrkishi, changing `{@html code}` to `{code}` makes no difference.","updated_at":"2022-03-17T03:00:44Z","created_at":"2022-03-17T03:00:44Z","creator_user_login":"Herdubreid"}
{"number":7341,"comment_id":"1070127021","body":"This fix is quite simple.\r\n\r\nChange:\r\n```html\r\n<div>\r\n  <textarea bind:value={text} style:height={height} spellcheck=\"false\" />\r\n  <pre>\r\n    <code id=\"display\">\r\n      {@html code}\r\n    </code>\r\n  </pre>\r\n</div>\r\n```\r\nTo:\r\n```html\r\n<div>\r\n  <textarea bind:value={text} style:height={height} spellcheck=\"false\" />\r\n  <pre><code id=\"display\">{@html code}</code></pre>\r\n</div>\r\n```\r\nBasically remove unwanted whitespaces within the `<pre>` tag.\r\n\r\nThanks for pointing me in the right direction @mrkishi (this has been doing my head in for days)!","updated_at":"2022-03-17T03:16:21Z","created_at":"2022-03-17T03:16:21Z","creator_user_login":"Herdubreid"}
{"number":7212,"comment_id":"1028381419","body":"@hyunbinseo I'm not sure if the first case is a bug or not, but I can explain why it's happening. Actually, Svelte doesn't do anything to bring described ability to work. I mean `bind: can be used together with on: directives. ` bla-bla. It's based on standard events workflow. So, `bind:value` on text input is just based on `input` event, but `on:group` on radio input is based on `change` event which always happens **after** all `input` events. So, we can re-write these two examples like this:\r\n\r\n#### example 1  - with bind:value and inpute type=\"text\"\r\n\r\n```javascript\r\ninput.addEventListener('input', oldValueHandler);\r\ninput.addEventListener('input', bindingHandler);\r\ninput.addEventListener('input', newValueHandler);\r\n```\r\n\r\n#### example 2 - with bind:group and inpute type=\"radio\"\r\n\r\n```javascript\r\ninput.addEventListener('input', oldValueHandler);\r\ninput.addEventListener('change', bindingHandler);\r\ninput.addEventListener('input', newValueHandler);\r\n```\r\n\r\nSo, the order of event handlers in example 2 is not important - `input` events are always firing before `change` events. Hope it will help you.\r\n\r\nBut I agree that the developer shouldn't think about it and it needs to be fixed OR maybe somehow described in docs in more detail. @Conduitry what do you think about it?","updated_at":"2022-02-02T21:49:05Z","created_at":"2022-02-02T21:37:45Z","creator_user_login":"PaulMaly"}
{"number":7212,"comment_id":"1028539460","body":"@PaulMaly Thank you for the explanation. I have partially updated the issue to address the following.\r\n\r\n---\r\n\r\nAdded the following code which works as expected, since `bind:group` uses `change` event.\r\n\r\n```svelte\r\n<script>\r\n  let value = 'A';\r\n</script>\r\n\r\n<input\r\n  type=\"radio\"\r\n  name=\"alphabet\"\r\n  on:change={() => console.log('Old value:', value)}\r\n  bind:group={value}\r\n  on:change={() => console.log('New value:', value)}\r\n/>\r\n```\r\n\r\n---\r\n\r\nChanged `bind` to `bind:property` in the blockquote for clarification.\r\n\r\n> `bind:property` can be used together with `on:` directives. The order that they are defined in determines the value of the bound variable when the event handler is called.","updated_at":"2022-02-03T02:16:09Z","created_at":"2022-02-03T02:16:09Z","creator_user_login":"hyunbinseo"}
{"number":7212,"comment_id":"1028542601","body":"Changing '`on:` directives' to '`on:input`' in the docs might be viable.\r\n\r\nThis is because `bind:value` uses an `input` event as @PaulMaly explained.\r\n\r\n---\r\n\r\nCurrent\r\n> `bind:` can be used together with `on:` directives. The order that they are defined in determines the value of the bound variable when the event handler is called.\r\n\r\nSuggested\r\n> `bind:property` can be used together with `on:input`. The order that they are defined in determines the value of the bound variable when the event handler is called.\r\n\r\n---\r\n\r\nThis fixes the following case that follows the current documentation but does not work.\r\n\r\n```svelte\r\n<script>\r\n  let value = 'Hello World';\r\n</script>\r\n\r\n<input\r\n  <!-- Defined before `bind:value` but always logs the changed value (as expected). -->\r\n  on:change=\"{() => console.log('Old value:', value)}\"\r\n  bind:value\r\n  on:change=\"{() => console.log('New value:', value)}\"\r\n/>\r\n```","updated_at":"2022-02-03T02:23:20Z","created_at":"2022-02-03T02:23:20Z","creator_user_login":"hyunbinseo"}
{"number":6582,"comment_id":"922352305","body":"Perhaps I'm misunderstanding the question, but since components are assumed to be in the html namespace by default, I believe you need to explicitly declare the non-html namespace you need for your particular component using `svelte:options`.\r\n\r\nhttps://svelte.dev/tutorial/svelte-options\r\n\r\nhttps://svelte.dev/repl/265b310cc1b44e33a232be19d4e852b0?version=3.40.3\r\n\r\nThis does seem a bit confusing since, by default, you can use `mathml` namespace elements in html5 (but not xhtml!) without explicitly needing to declare their xmlns.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/MathML/Element/math\r\n\r\n```svelte\r\n<svelte:options namespace=\"mathml\"/>\r\n\r\n<math>\r\n\t<mrow>mrow</mrow>\r\n</math>\r\n```\r\n\r\nThis will allow the svelte compiler to invoke `.createElementNS(\"http://www.w3.org/1998/Math/MathML\", \"math\")` rather than `.createElement(\"math\")`/.\r\n\r\n### your repl example\r\n![Screen Shot 2021-09-18 at 2 23 51 PM](https://user-images.githubusercontent.com/9257785/133898852-c230e94e-7a4c-4b48-bc0e-31c97b5cf814.png)\r\n\r\n### my repl example\r\n![Screen Shot 2021-09-18 at 2 23 42 PM](https://user-images.githubusercontent.com/9257785/133898831-f7b5f4c5-b090-482a-9519-920bbc963f3a.png)\r\n\r\n![Screen Shot 2021-09-18 at 1 49 02 PM](https://user-images.githubusercontent.com/9257785/133897892-ba8aede1-bffd-442e-8f01-c8f31eac8201.png)","updated_at":"2021-09-18T18:32:48Z","created_at":"2021-09-18T18:29:49Z","creator_user_login":"JohnDDuncanIII"}
{"number":6582,"comment_id":"922425166","body":"Thank you for the comment!\r\nAnd I understand better regarding namespace by your explanation.ü§©\r\n\r\nYes, I have a workaround if I use `<svelte:options namespace=\"mathml\"/>`.\r\n[REPL (math, workaround)](https://svelte.dev/repl/18f0c31cc7b045bab295b1af8669f7b2?version=3.42.6)\r\nMEMO: Your REPL gets below error, so I re-create the new REPL.\r\n`Cannot read properties of undefined (reading 'setProperty')`\r\n\r\n> This does seem a bit confusing since, by default, you can use mathml namespace elements in html5 (but not xhtml!) without explicitly needing to declare their xmlns.\r\n\r\nYes. So I think a namespace declaration should be same behavior between plain HTML and Svelte for preventing confusion.\r\n\r\nFor instance, if I use `svg` tag in Svelte component, namespace is `http://www.w3.org/2000/svg` without using `<svelte:options>`.\r\n[Plain HTML (svg)](https://codepen.io/baseballyama/pen/LYLdLWB)\r\n[Svelte (svg)](https://svelte.dev/repl/7760dafab7e14034afe68af5a843a8cc?version=3.42.6)\r\nThese behavior are same.\r\n\r\nBut, in case of `math`, behavior is different.\r\n[Plain HTML (math)](https://codepen.io/baseballyama/pen/RwgMgbe)\r\n[Svelte (math)](https://svelte.dev/repl/f2ecf5f3aa4f4258b54fda9b2a4e39f4?version=3.42.6)\r\n\r\nThis difference has a chance to make confusion.\r\nTherefore namespace declaration should be same behavior between plain HTML and Svelte in my opinion.\r\n\r\nThank you for reading!üéà\r\n\r\n","updated_at":"2021-09-19T06:55:11Z","created_at":"2021-09-19T06:55:11Z","creator_user_login":"baseballyama"}
{"number":6469,"comment_id":"870322423","body":"There's not really a reasonable way to handle this well, because each component is compiled independently. I guess we could not emit a warning whenever there's any component inside the label. That would eliminate these false positives but add false negatives. I'm not sure which is better.\n\nYou can also always add a comment to suppress the warning. This isn't an error and isn't stopping the component from being compiled.","updated_at":"2021-06-29T07:04:10Z","created_at":"2021-06-29T07:04:10Z","creator_user_login":"Conduitry"}
{"number":6469,"comment_id":"870804233","body":"@Conduitry thanks for the explanation!\r\n\r\nThe [`label-has-associated-control`](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/label-has-associated-control.md) rule from the `jsx-a11y` package has an optional configuration called `controlComponents` that allows you to specify names of custom components that should be considered controls. Could something like that work here?\r\n\r\nEven though this is only a warning, I think it's important to have some way of satisfying this rule, as \"noisy\" warnings start to get ignored at some point, which makes them less useful. For now, I'm suppressing the warning as you suggest, but it would be nice to have some other options.","updated_at":"2021-06-29T18:03:36Z","created_at":"2021-06-29T18:03:36Z","creator_user_login":"nikmolnar"}
{"number":6469,"comment_id":"1001268133","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T00:49:17Z","created_at":"2021-12-27T00:49:17Z","creator_user_login":"stale[bot]"}
{"number":6469,"comment_id":"1063052771","body":"I'm pretty new to Svelte, but from what I understand the warnings are emitted from the Svelte compiler.\r\nOne thing we could do is have an option tag to mark something as having an input.\r\n```svelte\r\n<svelte:options isInput={true}/>\r\n```\r\nThis of course requires that (sub)components are compiled before their parents. \r\n\r\nAlternatively, a simple but very powerful option is to implement some kind of annotation to silence a warning locally:\r\n```svelte\r\n<svelte:options ignore-a11y-label-has-associated-control/>\r\n<label>\r\n    A label\r\n    \r\n    <TextInput />\r\n</label>\r\n```\r\nThis would then allow the compiler to ignore an error on a component level. The benefit of this approach is that it'll always be available as a workaround for false positives, even if we reduce the number of false positives in the future.","updated_at":"2022-03-09T15:39:55Z","created_at":"2022-03-09T15:39:29Z","creator_user_login":"SamMousa"}
{"number":6469,"comment_id":"1336480705","body":"> Alternatively, a simple but very powerful option is to implement some kind of annotation to silence a warning locally:\r\n\r\nFor completeness sake, this exists:\r\n\r\n```svelte\r\n<!-- svelte-ignore a11y-label-has-associated-control -->\r\n<label>\r\n    A label\r\n    \r\n    <TextInput />\r\n</label>\r\n```","updated_at":"2022-12-04T18:05:11Z","created_at":"2022-12-04T18:05:11Z","creator_user_login":"Prinzhorn"}
{"number":6469,"comment_id":"1336482748","body":"> There's not really a reasonable way to handle this well, because each component is compiled independently.\n\nIs that the only possible way to compile?","updated_at":"2022-12-04T18:15:30Z","created_at":"2022-12-04T18:15:30Z","creator_user_login":"Lootwig"}
{"number":6755,"comment_id":"924924706","body":"I'm not sure if this something we want to add to the examples section of the site as it seems fairly specific. The examples are there to provide basic usage, not detailed interaction with d3.","updated_at":"2021-09-22T13:20:13Z","created_at":"2021-09-22T13:20:13Z","creator_user_login":"dummdidumm"}
{"number":6755,"comment_id":"924926604","body":"Fair, it was just copy paste scatter plot example, change to match canvas example and it wasn't working for me. Not sure about svelte-canvas and I already spent enough time trying to figure out what is going on with no success. Since canvas supports larger plots (in regards to data elements) and svelte is all about performance it would nice to be able to use both with animation. the svg animation is, uh, laggy at best :P ","updated_at":"2021-09-22T13:22:26Z","created_at":"2021-09-22T13:22:26Z","creator_user_login":"SumNeuron"}
{"number":6755,"comment_id":"924927620","body":"I agree that this sounds too specific for the examples section. The goal there is to show how Svelte's DOM handling is also suited for generating and manipulating SVGs directly, not to provide a bunch of recipes or to showcase third-party libraries like svelte-canvas.","updated_at":"2021-09-22T13:23:42Z","created_at":"2021-09-22T13:23:42Z","creator_user_login":"Conduitry"}
{"number":6755,"comment_id":"924928564","body":"Well this is more about canvas and svelte's tween interaction...","updated_at":"2021-09-22T13:24:46Z","created_at":"2021-09-22T13:24:46Z","creator_user_login":"SumNeuron"}
{"number":6720,"comment_id":"917360471","body":"You have two conflicting interests.\r\n\r\n1. You have a reactive `$: innerTeam =`  assignment and create a new object everytime the dependencies (`team`) change\r\n2. You want to _also_ manually change `innerTeam.full` property via the `checked` binding\r\n\r\nI can't find it right now, but there is an open feature request to allow that. But the semantic would need to be defined. One possible semantic would allow you to touch `innerTeam` and update it manually and temporaritly, but the reactive statement would overwrite it once the dependencies change (in your example when `team` changes you create a new `innerTeam` object with `full` being `team.full === false`).\r\n\r\nSvelte currently consistently gives the reactive statement priority over your `checked` binding.\r\n\r\nOnce you realize that there are two conflicting interests, you can now rethink your problem and find a different solution. I don't know what you are trying to achieve, so I can't give you that.\r\n\r\nEdit: I think it works without the `onMount` because then `team` is basically `const`, which can be statically determined. This also makes your reactive `innerTeam` a constant expression.","updated_at":"2021-09-11T07:48:15Z","created_at":"2021-09-11T07:38:12Z","creator_user_login":"Prinzhorn"}
{"number":6720,"comment_id":"917361531","body":"There we go, duplicate of: https://github.com/sveltejs/svelte/issues/4933\r\n\r\nOooof, you already commented there :smile: . Please for future issues put the things you've found during your research in there :pray: ","updated_at":"2021-09-11T07:52:41Z","created_at":"2021-09-11T07:47:13Z","creator_user_login":"Prinzhorn"}
{"number":6720,"comment_id":"917364302","body":"I don't think these are two different interests in contrast with each other.\r\n\r\nI wanna update that temporary object and when the dep changes I re-create the temporary object. Simple as that.","updated_at":"2021-09-11T08:07:08Z","created_at":"2021-09-11T08:07:08Z","creator_user_login":"frederikhors"}
{"number":6720,"comment_id":"917364364","body":"Thanks for your answer tough, @Prinzhorn.","updated_at":"2021-09-11T08:07:37Z","created_at":"2021-09-11T08:07:37Z","creator_user_login":"frederikhors"}
{"number":6720,"comment_id":"917364917","body":"To me personally this behavior makes sense, we both seem to have a different mental model of what the given reactive statement does. And I don't see it change before a new major version. I personally think what you're doing is not \"correct\" (but it's just an example, not your actual code). What if you add a `team.title` property in the top level and bind it to a `input[type=text]`. Now every time you change the title your checkbox is unchecked, because `innerTeam` is re-created. I'd be more specific about what I want to happen.\r\n\r\nBut I think we can agree that this is a duplicate?\r\n\r\nEdit: my mental model for this example is \"here's my recipe on how to create a `innerTeam` object, Svelte please make sure it's always up to date\". And the recipe is complete, nothing else can change the thing.","updated_at":"2021-09-11T08:14:06Z","created_at":"2021-09-11T08:12:07Z","creator_user_login":"Prinzhorn"}
{"number":6720,"comment_id":"917367405","body":"One more thing that might help: you don't need `let innerTeam;` at all, `$: innerTeam = ...` is enough (Svelte will handle defining the actual variable for you). Maybe this helps. Because you don't declare an `innerTeam` variable and then make it reactive. You declare a reactive variable and it's dependencies (\"recipe\"). See `doubled` here https://svelte.dev/tutorial/reactive-declarations","updated_at":"2021-09-11T08:30:55Z","created_at":"2021-09-11T08:30:23Z","creator_user_login":"Prinzhorn"}
{"number":6710,"comment_id":"913091190","body":"[MEMO]\r\nThis is related to  https://github.com/sveltejs/svelte/issues/6562.\r\nMaybe the root cause is same.","updated_at":"2021-09-05T05:48:39Z","created_at":"2021-09-05T05:48:39Z","creator_user_login":"baseballyama"}
{"number":6710,"comment_id":"913092072","body":"`animate:flip`","updated_at":"2021-09-05T05:59:39Z","created_at":"2021-09-05T05:59:31Z","creator_user_login":"Valexr"}
{"number":6710,"comment_id":"915138623","body":"By looking at the compiled JavaScript code, I found that the reason for the exception is that the transition was broken when adjusting the actual order of the elements through the Element.prototype.insertBefore method.\r\n\r\nThe following example avoids this exception\r\nhttps://svelte.dev/repl/5fde5636df1c472296405e35689acf92?version=3.42.4","updated_at":"2021-09-08T11:05:05Z","created_at":"2021-09-08T11:05:05Z","creator_user_login":"Jet-Li-Glow"}
{"number":6710,"comment_id":"915165126","body":"> By looking at the compiled JavaScript code, I found that the reason for the exception is that the transition was broken when adjusting the actual order of the elements through the Element.prototype.insertBefore method.\r\n> \r\n> The following example avoids this exception\r\n> https://svelte.dev/repl/5fde5636df1c472296405e35689acf92?version=3.42.4\r\n\r\n{#each} block optimisationü§ì","updated_at":"2021-09-08T11:48:30Z","created_at":"2021-09-08T11:48:30Z","creator_user_login":"Valexr"}
{"number":6625,"comment_id":"893835949","body":"This particular issue seems to reproduce back to Svelte 3.25 ‚Äì before then, the `select` in that REPL seems to be broken in a different way, in all browsers.","updated_at":"2021-08-05T22:02:00Z","created_at":"2021-08-05T22:02:00Z","creator_user_login":"TehShrike"}
{"number":6625,"comment_id":"898591400","body":"This seemed really weird (and an a11y concern), so I took a little time to look into it. I don't know why this is Firefox + Windows specific, but I think the underlying issue is that you're binding to `value` on the `<select>`, but also setting the `value` when spreading `$$props` onto that same element. This is why the issue doesn't happen with `$$restProps` -- `value` is not included in that case.\r\n\r\nIf you do this without going through `$$props`, you get an error: \"attributes need to be unique\".\r\n```html\r\n<!-- Warning: Attributes need to be unique -->\r\n<select {value} bind:value>\r\n</select>\r\n```\r\n\r\nI believe the same behavior should be disallowed when setting the props indirectly with `$$props` -- you shouldn't be able to set a prop and bind to it. However, this might be tricky since the compiler might not be able to detect this at compile time.\r\n\r\nIf you still want to use `$$props`, you can work around this by renaming the `value` prop to `val` or similar. The issue doesn't happen with the following:\r\n\r\n```html\r\n<script>\r\n\texport let val;\r\n</script>\r\n\r\n<select {...$$props} bind:value={val}>\r\n\t<slot></slot>\r\n</select>\r\n```\r\n","updated_at":"2021-08-13T16:47:19Z","created_at":"2021-08-13T16:47:19Z","creator_user_login":"geoffrich"}
{"number":6562,"comment_id":"885820036","body":"~~I think this is because Svelte called `fallback`.~~\r\n\r\n~~In my opinion,~~\r\n~~In this case, to use `debounce` is useful for avoiding such error.~~\r\n\r\n~~This is REPL code based on your code.~~\r\n~~https://svelte.dev/repl/2aee9e35d6c4467ca8092b9cd53e8e7c?version=3.40.1~~\r\n\r\nEDIT: \r\nSorry still such issue is there even using `debounce`.\r\nSo I need to check more.","updated_at":"2021-07-23T18:31:12Z","created_at":"2021-07-23T18:23:28Z","creator_user_login":"baseballyama"}
{"number":6562,"comment_id":"913159588","body":"https://svelte.dev/repl/e0fcf8b60cf4441db24d01eb65fa2d33?version=3.42.4\r\nIn this example, it is possible to make the transition animation continuous in the simple case, but there are still other problems.\r\nThe key code is on line 26.\r\nIt affects the work of the fix_position function in the source code.\r\n","updated_at":"2021-09-05T13:57:12Z","created_at":"2021-09-05T13:57:12Z","creator_user_login":"Jet-Li-Glow"}
{"number":6562,"comment_id":"941359597","body":"I have experienced sort of the same issue. When I remove a component and quickly append it again before the out animation is finished, svelte removes the new component, while the first is still there with the out animation style (Meaning nothing shows up). This should be fixed!","updated_at":"2021-10-12T19:34:45Z","created_at":"2021-10-12T19:34:45Z","creator_user_login":"vassbo"}
{"number":6562,"comment_id":"1435760220","body":"I agree this should be fixed. This is actually quite a major bug and it sorta completely inhibits me from using Svelte's list transition feature if it can be broken by simply toggling stuff quickly.\r\n\r\nI would assist in fixing this if somebody could point me to the relevant parts of the codebase that handles/generates animation/transition code.","updated_at":"2023-02-18T20:14:41Z","created_at":"2023-02-18T20:14:41Z","creator_user_login":"Vanilagy"}
{"number":6663,"comment_id":"920754045","body":"The docs say that `afterUpdate` is called \"immediately after the component has been updated\". From the *parent* component's point of view, it has been updated when its own markup changes, e.g. when the number of Message components changes and so the `{#each comments as comment}` loop re-runs. That triggers a call to `afterUpdate` in the parent component, and at the time it runs, the `{#await}` blocks in the Message components haven't been resolved yet.\r\n\r\nLater on, the `{#await}` blocks in Message components resolve, and that causes the Message components to update their markup. But *this does not change the markup of the parent component*, which still contains the same number of `<Message>` elements as it did before. So the parent component does not run `afterUpdate` again, because it did not update; only the child components updated.\r\n\r\n(Think about how inefficient it would be if a child component updating triggered an update on parent components all the way up the chain. If every time you check a checkbox in a form, it caused the form component to update, and the form's container to update, and so on all the way up to the root layout component... that would be a LOT of contentless updates to process.)\r\n\r\nHere's an updated version of your REPL that adds console.log calls to the Message component: https://svelte.dev/repl/60f7a62c35a74c7f951ab2822861c4a6?version=3.42.6. As you can see if you watch the console, when the `{#await}` resolves on the Message component, it *does* update the Message component, whose innerHTML property then logs correctly. (You might also notice that *every* Message component is updating. That's because you're not using a `key` on your `{#each}` loop. Put a key on it and you'll find that only the final components update, making the page much more efficient).\r\n\r\nI think this is not a bug, but rather a misunderstanding of which components are updated after an `{#await}` block resolves.","updated_at":"2021-09-16T09:49:07Z","created_at":"2021-09-16T09:49:07Z","creator_user_login":"rmunn"}
{"number":6663,"comment_id":"1248628418","body":"Just ran into this unexpected behavior.\r\nIt's even more of an issue when using just a single component.\r\nHere's my simplest demo: https://svelte.dev/repl/10b4ef1830e846eb8a7bf587bda5df65?version=3.50.1\r\nAs you can see, the update is triggered after clicking, not after the text is rendered.\r\n\r\nUsing the await block you have no way of triggering something after the DOM is updated. No `then` block, no afterUpdate. It really limits usability of this tool. Also it's unintuitive.","updated_at":"2022-09-15T21:04:10Z","created_at":"2022-09-15T21:04:10Z","creator_user_login":"EskelCz"}
{"number":6536,"comment_id":"918683248","body":"This is a serious issue, because autoplay will not work on ios without the muted attribute.","updated_at":"2021-09-14T00:14:02Z","created_at":"2021-09-14T00:14:02Z","creator_user_login":"jer-0"}
{"number":6536,"comment_id":"1197424968","body":"Workaround like this:\r\n\r\n```svelte\r\n\tlet ref!: HTMLVideoElement\r\n\r\n\tonMount(() => {\r\n\t\tref.setAttribute(\"muted\", `true`)\r\n\t})\r\n```\r\n\r\nBut still, a fix on this will be appreciated","updated_at":"2022-07-27T22:10:45Z","created_at":"2022-07-27T22:10:45Z","creator_user_login":"winston0410"}
{"number":6536,"comment_id":"1278244113","body":"That workaround fixed the issue for me, but would also appreciate this for iOS safari autoplay","updated_at":"2022-10-13T22:27:30Z","created_at":"2022-10-13T22:27:30Z","creator_user_login":"alizauf"}
{"number":6536,"comment_id":"1603108634","body":"Weirdly I have the same problem. On one page it just removes the muted from all videos... üòÖ The workaround doesn't help either.","updated_at":"2023-08-17T17:36:30Z","created_at":"2023-06-22T18:11:32Z","creator_user_login":"eriksachse"}
{"number":6536,"comment_id":"1603141466","body":"@eriksachse Try this sample workaround:\r\n```svelte\r\n<div>\r\n  {@html '<video muted autoplay loop defaultmuted playsinline src=\"/animation.mp4\" />'}\r\n</div>\r\n```\r\nSo you put the `<video>` as an HTML string.","updated_at":"2023-06-22T18:43:15Z","created_at":"2023-06-22T18:39:57Z","creator_user_login":"rafaucau"}
{"number":6536,"comment_id":"1648075976","body":"Another workaround (?), I don't have the issue if I've imported the file using Vite static imports: https://vitejs.dev/guide/assets.html#importing-asset-as-url\r\n\r\n```svelte\r\n<script>\r\n\timport hero_mp4 from '$lib/assets/marketing/landing/hero-gif.mp4';\r\n\tconst kedyou_mp4 = '/comparisons/kedyou.mp4';\r\n</script>\r\n\r\n<video autoplay playsinline loop muted>\r\n\t<source src={hero_mp4} type=\"video/mp4\" />\r\n</video>\r\n<video autoplay playsinline loop muted>\r\n\t<source src={kedyou_mp4} type=\"video/mp4\" />\r\n</video>\r\n```\r\n\r\nProduces the output:\r\n\r\n```html\r\n<video autoplay playsinline loop muted>\r\n  <source src=\"/_app/immutable/assets/hero-gif.631030a2.mp4\" type=\"video/mp4\">\r\n</video>\r\n<video autoplay playsinline loop>  <!-- muted missing??? -->\r\n  <source src=\"/comparisons/kedyou.mp4\" type=\"video/mp4\">\r\n</video>\r\n```\r\n","updated_at":"2023-07-24T14:57:08Z","created_at":"2023-07-24T14:57:08Z","creator_user_login":"oscarhermoso"}
{"number":5736,"comment_id":"753434644","body":"the `fly` transition will apply `transform` to the same element, setting the `translate` from `0px` to `-100px`, thus, the jump from the initially `-50px` to `0px`.\r\n\r\nI wonder what will be your expectation after setting translate to `-50px`?\r\n\r\n1) the fly will translate the element from `-50px` to `-150px`?\r\n\r\nor\r\n\r\n2) the fly will translate the element from `-50px` to `-100px`, thus travelling a shorter distance in the same duration?\r\n","updated_at":"2021-01-02T05:35:58Z","created_at":"2021-01-02T05:35:58Z","creator_user_login":"tanhauhau"}
{"number":5736,"comment_id":"754066367","body":"Good question -- I would expect the element to translate from -50px to -150px. I should be able to translate the element all around the screen. When the time comes to transition the element out, it should be translated out from its current position with the parameters specified so the transition is smooth.\r\n\r\nInterestingly, this only seems to be an issue when the `transition` directive is used. If you update my linked REPL to use `in:fly={{x: -100, opacity: 1}} out:fly={{x: -100, opacity: 1}}` instead of `transition:fly={{x: -100, opacity: 1}}`, the problem does not occur.","updated_at":"2021-01-04T16:12:34Z","created_at":"2021-01-04T16:12:34Z","creator_user_login":"geoffrich"}
{"number":5736,"comment_id":"869066695","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:48Z","created_at":"2021-06-26T22:03:48Z","creator_user_login":"stale[bot]"}
{"number":5736,"comment_id":"869071325","body":"Still an issue as of v3.38.3.","updated_at":"2021-06-26T22:57:47Z","created_at":"2021-06-26T22:57:47Z","creator_user_login":"geoffrich"}
{"number":5736,"comment_id":"1000568809","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:54Z","created_at":"2021-12-23T23:55:54Z","creator_user_login":"stale[bot]"}
{"number":5641,"comment_id":"721491115","body":"I believe this is because the option is not available in the select element when it's set.  And also, would adding a option with the attribute `selected` not be the proper way to set a select input's value?","updated_at":"2020-11-04T03:26:39Z","created_at":"2020-11-04T03:26:39Z","creator_user_login":"MichealPearce"}
{"number":5641,"comment_id":"721492316","body":"Would this work?\r\n\r\n```\r\n<script>\r\n\timport { onMount } from 'svelte'\r\n\r\n\tlet items = []\r\n\tlet selected = 'two'\r\n\r\n\tonMount(() => {\r\n\t\tsetTimeout(() => {\r\n\t\t\titems = ['One', 'Two', 'Three'].map(d => ({\r\n\t\t\t\tslug: d.toLowerCase(),\r\n\t\t\t\tname: d,\r\n\t\t\t}))\r\n\t\t}, 1000)\r\n\t})\r\n</script>\r\n\r\n<h2>{selected} is selected</h2>\r\n\r\n{#if items.length}\r\n\t<select>\r\n\t\t{#each items as item (item.slug)}\r\n\t\t\t<option value={item.slug} selected={item.slug === selected}>\r\n\t\t\t\t{item.name}\r\n\t\t\t</option>\r\n\t\t{/each}\r\n\t</select>\r\n{/if}\r\n```","updated_at":"2020-11-04T03:31:48Z","created_at":"2020-11-04T03:31:48Z","creator_user_login":"MichealPearce"}
{"number":5641,"comment_id":"722411523","body":"> I believe this is because the option is not available in the select element when it's set. And also, would adding a option with the attribute `selected` not be the proper way to set a select input's value?\r\n\r\nThis works for `bind:value`, and for what I read on other issues this should work for `value` also, it is only not working. This seems like the only inconsistency between `bind:value` and `value`.\r\n\r\n> Would this work?\r\n> \r\n> ```\r\n> <script>\r\n> \timport { onMount } from 'svelte'\r\n> \r\n> \tlet items = []\r\n> \tlet selected = 'two'\r\n> \r\n> \tonMount(() => {\r\n> \t\tsetTimeout(() => {\r\n> \t\t\titems = ['One', 'Two', 'Three'].map(d => ({\r\n> \t\t\t\tslug: d.toLowerCase(),\r\n> \t\t\t\tname: d,\r\n> \t\t\t}))\r\n> \t\t}, 1000)\r\n> \t})\r\n> </script>\r\n> \r\n> <h2>{selected} is selected</h2>\r\n> \r\n> {#if items.length}\r\n> \t<select>\r\n> \t\t{#each items as item (item.slug)}\r\n> \t\t\t<option value={item.slug} selected={item.slug === selected}>\r\n> \t\t\t\t{item.name}\r\n> \t\t\t</option>\r\n> \t\t{/each}\r\n> \t</select>\r\n> {/if}\r\n> ```\r\n> \r\n> ![](chrome-extension://annlhfjgbkfmbbejkbdpgbmpbcjnehbb/images/saveicon.png) Save\r\n\r\nThis works, as I pointed the same workaround in the issue itself.\r\n","updated_at":"2020-11-05T14:26:28Z","created_at":"2020-11-05T14:26:28Z","creator_user_login":"mynomoto"}
{"number":5641,"comment_id":"869070429","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:47:03Z","created_at":"2021-06-26T22:47:03Z","creator_user_login":"stale[bot]"}
{"number":5641,"comment_id":"1000871217","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:26Z","created_at":"2021-12-24T15:15:26Z","creator_user_login":"stale[bot]"}
{"number":5776,"comment_id":"743797321","body":"I can reproduce this on Chrome but not on Firefox. On Chrome, when running from a downloaded copy of that component (whether in dev or prod mode), I can't use the mousewheel to change the number input, but I can in the REPL. Very peculiar.","updated_at":"2020-12-12T18:34:09Z","created_at":"2020-12-12T18:34:09Z","creator_user_login":"Conduitry"}
{"number":5776,"comment_id":"744021449","body":"I just checked in FF (v. 83.0) again.  I must have made a mistake in my testing.   Nothing works in Firefox on my Mac.  I changed on \"on:mousewheel\" to \"on:wheel\" as well.   This seems to be an improvement in that the events are now picked up in FF.  \r\n\r\nI am using OS X version: 10.15.7.   \r\n ","updated_at":"2020-12-13T15:12:02Z","created_at":"2020-12-13T15:12:02Z","creator_user_login":"saewoonam"}
{"number":5776,"comment_id":"869066735","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:04:09Z","created_at":"2021-06-26T22:04:09Z","creator_user_login":"stale[bot]"}
{"number":5595,"comment_id":"718715811","body":"There is a section discussing this in the [tutorial](https://svelte.dev/tutorial/custom-css-transitions).\r\n\r\n> The t value is 0 at the beginning of an intro or the end of an outro, and 1 at the end of an intro or beginning of an outro.","updated_at":"2020-10-29T12:18:18Z","created_at":"2020-10-29T12:18:18Z","creator_user_login":"ankarhem"}
{"number":5595,"comment_id":"718882985","body":"Thank you, @JAnken123. I still think it would be good to document this a little more thoroughly. Especially a the part about what to return from the function. A good place might be the API docs.","updated_at":"2020-10-29T16:50:21Z","created_at":"2020-10-29T16:50:21Z","creator_user_login":"teggno"}
{"number":5595,"comment_id":"719074154","body":"Maybe adding a link to this part of the docs would suffice? https://svelte.dev/docs#Custom_transition_functions","updated_at":"2020-10-29T23:09:46Z","created_at":"2020-10-29T23:08:53Z","creator_user_login":"ankarhem"}
{"number":5595,"comment_id":"1000776219","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:10Z","created_at":"2021-12-24T10:28:10Z","creator_user_login":"stale[bot]"}
{"number":6474,"comment_id":"870864043","body":"I'm not sure what the question is here. Changing the values of `w` and `h` wouldn't have any direct effect on the size of the element in question, but other things might depend on `w` and `h` - for example the text on the page - and so `afterUpdate` is called after anything depending on `w` or `h` is updated.","updated_at":"2021-06-29T19:40:24Z","created_at":"2021-06-29T19:40:24Z","creator_user_login":"Conduitry"}
{"number":6474,"comment_id":"870889440","body":"I'll see if i can replicate it properly tomorrow. Tunneled a bit on my unexpected error that i see my repl is not displaying the actual unexpected behavior. But in the end not unlikely it could be a user error by me.","updated_at":"2021-06-29T20:20:48Z","created_at":"2021-06-29T20:20:48Z","creator_user_login":"hjalmar"}
{"number":6474,"comment_id":"871316291","body":"> I'm not sure what the question is here. Changing the values of `w` and `h` wouldn't have any direct effect on the size of the element in question, but other things might depend on `w` and `h` - for example the text on the page - and so `afterUpdate` is called after anything depending on `w` or `h` is updated.\r\n\r\nYou made me question my sanity for a moment. But I think I've narrowed it down to an issue with `$$props` or `$$restProps` in combination with `clientWidth/Height` binds(or binds in general?). \r\n\r\nSo potentially the issue could be more trivial than just my specific issue.\r\n\r\nTo the issue. If you resize the div you'll see the `$$restProps` gets updated with a new object so the iframe and video restarts playing. However remove either the `clientWidth/Height` binds or the `$$restProps` and everything works as expected. And also as can be seen is that the local `clientWidth` and `clientHeight` variables isn't in use, the `$$resProps` gets updated anyways. \r\n\r\n_repl is updated_","updated_at":"2021-06-30T11:19:19Z","created_at":"2021-06-30T11:19:19Z","creator_user_login":"hjalmar"}
{"number":6474,"comment_id":"872052821","body":"This does not seem to happen in 3.23.2. So something changed after that, around 3.24, to introduce this behavior.\r\n\r\nhttps://svelte.dev/repl/89b195d8a5994c499be841c55ad46d05?version=3.23.2","updated_at":"2021-07-01T08:45:56Z","created_at":"2021-07-01T08:45:56Z","creator_user_login":"hjalmar"}
{"number":6474,"comment_id":"872060648","body":"Culprit indeed seems to be the spread, it generates the following code:\r\n```javascript\r\n\r\n\t\tp(ctx, [dirty]) {\r\n\t\t\tset_attributes(iframe, iframe_data = get_spread_update(iframe_levels, [\r\n\t\t\t\tdirty & /*title*/ 1 && { title: /*title*/ ctx[0] },\r\n\t\t\t\t{ src: iframe_src_value },\r\n\t\t\t\tdirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]\r\n\t\t\t]));\r\n\r\n\t\t\ttoggle_class(iframe, \"svelte-1ds9f70\", true);\r\n\t\t},\r\n```\r\n\r\nThis code updates all attributes, and since `src` is also part of it, I guess this triggers a restart of the video.\r\nThe code in 3.23.2 is different as it contains a `dirty` check for the `src` attribute as well\r\n\r\n```javascript\r\n\t\t\tset_attributes(iframe, iframe_data = get_spread_update(iframe_levels, [\r\n\t\t\t\tdirty & /*title*/ 1 && { title: /*title*/ ctx[0] },\r\n\t\t\t\tdirty & /*src*/ 8 && { src: /*src*/ ctx[3] },\r\n\t\t\t\tdirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]\r\n\t\t\t]));\r\n```\r\n\r\nI guess in 3.24 there was some optimization around `const` that these don't get dirty flags because they can never update, but the `get_spread_update` code was not adjusted accordingly to just omit the `src` attribute from the array of attributes to update.\r\nEdit: Omitting these might lead to broken behavior in other cases. If I do `const a = { b: 'c' }` and then for example do `<a href={a.b} />` and I update the code for `a.b`, it well trigger an update for `href` rightfully so. If the attribute was omitted from the update code, this wouldn't happen.","updated_at":"2021-07-01T09:06:12Z","created_at":"2021-07-01T08:57:17Z","creator_user_login":"dummdidumm"}
{"number":5793,"comment_id":"745696297","body":"CC'ing our recent source mapping experts  @dmitrage @milahu :smile: ","updated_at":"2020-12-16T01:05:55Z","created_at":"2020-12-16T01:05:55Z","creator_user_login":"benmccann"}
{"number":5793,"comment_id":"745711406","body":"could be easy as https://github.com/sveltejs/svelte/compare/master...milahu:patch-2\r\n","updated_at":"2020-12-16T18:44:03Z","created_at":"2020-12-16T01:52:43Z","creator_user_login":"milahu"}
{"number":5793,"comment_id":"746498512","body":"Is it how preprocess is expected to work then?\r\n- We continue passing `filename` (not `file://` url) to preprocess\r\n- It generates source map with `sources` relative to component source file location (basename for component itself)\r\n- When combining (`apply_preprocessor_sourcemap`), we resolve sources to `file://` form relative to passed url\r\n\r\nExample:\r\npreprocess map sources: `[\"index.svelte\", \"external.css\"]`\r\ncompile input filename: `file:///path/to/project/index.svelte`\r\nresult map sources: `[\"file:///path/to/project/index.svelte\", \"file:///path/to/project/external.css\"]`\r\n","updated_at":"2020-12-16T15:41:35Z","created_at":"2020-12-16T15:41:35Z","creator_user_login":"dmitrage"}
{"number":5793,"comment_id":"869066720","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:59Z","created_at":"2021-06-26T22:03:59Z","creator_user_login":"stale[bot]"}
{"number":5793,"comment_id":"1000871248","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:31Z","created_at":"2021-12-24T15:15:31Z","creator_user_login":"stale[bot]"}
{"number":5814,"comment_id":"753806418","body":"It is all the same with Chrome. The only difference is the default invalid styles on Chrome and Firefox. If you add a styling to your REPL like so:\r\n\r\n```\r\ninput:invalid {\r\n\tbox-shadow : 0 0 5px 1px red;  \r\n}\r\n```\r\n\r\nIn Chrome, the result is the same on both the version 3.23.3 and 3.31.0: all inputs are marked as invalid on load.","updated_at":"2021-01-04T07:25:33Z","created_at":"2021-01-04T07:25:33Z","creator_user_login":"Ennoriel"}
{"number":5814,"comment_id":"788193243","body":"Still happening on Firefox 86 and Svelte 3.34.0.  I've been working around this for a while by resetting the form after mount, as seen in this [REPL](https://svelte.dev/repl/8583e2e32f2c48508e0ffa6799888243?version=3.34.0)\r\n\r\nNote: this doesn't help with forms that are initially populated on some inputs as the reset will clear the data\r\n\r\nSeems to be related to #3569, #4849, etc with commits 081f7cd878a4624cf5c74570ad281193f2434f43 and d8fb0bb62c27d2cbb4097ca25953258813c158a7","updated_at":"2021-03-01T19:04:24Z","created_at":"2021-03-01T19:04:24Z","creator_user_login":"danphil"}
{"number":5814,"comment_id":"869055089","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:33Z","created_at":"2021-06-26T20:04:33Z","creator_user_login":"stale[bot]"}
{"number":5814,"comment_id":"982682697","body":"I've uncounted such behavior in Svelte v3.44.2 ([see comment](https://github.com/sveltejs/svelte/pull/3430#issuecomment-981780660))\r\n\r\nThe **root of the problem** is that Svelte uses the same function [set_input_value](https://github.com/sveltejs/svelte/blob/81fc3f898a49f10856db17014521556a2f18b9dc/src/runtime/internal/dom.ts#L520-L522) for both initialization and update.\r\n\r\nI'd separate initialization code from update, since it requires different behavior. The initial value is `undefined` in most cases, so on mounting something like this could be more appropriate instead of the current unconditional setting:\r\n```js\r\nfunction init_input_value(input, value) {\r\n  if (value !== undefined) {\r\n    set_input_value(input, value)\r\n  }\r\n}\r\n```\r\nIn my current project to avoid marking required inputs marked as invalid I've changed the existing function as follows:\r\n```js\r\n// node_modules/svelte/internal/index.mjs\r\nfunction set_input_value(input, value) {\r\n    if (value != undefined) {\r\n        input.value = value == null ? '' : value;\r\n    }\r\n}\r\n```\r\nObviously, in this case you shouldn't update the value to `undefined` explicitly, as it would have no effect.","updated_at":"2021-11-30T14:23:51Z","created_at":"2021-11-30T14:22:28Z","creator_user_login":"DmitryMyadzelets"}
{"number":5593,"comment_id":"716815803","body":"For me it would be unexpected if it would trigger another `afterUpdate`. I see `onMount` as some kind of initialisation method, that triggering other hooks depending on it's content seems inconsistent to me. Having an Angular background `onMount` is similar to `ngOnInit` to me, and that doesn't trigger `ngOnChange` either.","updated_at":"2020-10-26T20:51:42Z","created_at":"2020-10-26T20:51:42Z","creator_user_login":"dummdidumm"}
{"number":5593,"comment_id":"869074825","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:53Z","created_at":"2021-06-26T23:46:53Z","creator_user_login":"stale[bot]"}
{"number":5593,"comment_id":"1000871197","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:22Z","created_at":"2021-12-24T15:15:22Z","creator_user_login":"stale[bot]"}
{"number":5593,"comment_id":"1032392594","body":"The Svelte docs say that the first time `afterUpdate` runs will be *after* the initial `onMount`, but that applies to lifecycle functions run within the *same* component. The docs say nothing about what order lifecycle functions will run in parent and child components, so it's not clear to me what the expected behavior is. So I'm not sure if this is a bug, or working as designed.\r\n\r\nP.S. The behavior in current Svelte is unchanged: https://svelte.dev/repl/a3a7cb61eb7b4b74aed5eb1340fd0c33?version=3.46.4","updated_at":"2022-02-08T09:27:25Z","created_at":"2022-02-08T09:26:58Z","creator_user_login":"rmunn"}
{"number":5602,"comment_id":"870219058","body":"this sounds like a big change, i would suggest open a RFC https://github.com/sveltejs/rfcs/ and have a better discussion over there","updated_at":"2021-06-29T04:19:18Z","created_at":"2021-06-29T04:19:18Z","creator_user_login":"tanhauhau"}
{"number":5602,"comment_id":"983187886","body":"I like the idea of dispatching an event without having to deal with it being an actual `Event` object, but some downsides:\r\n- It's not obvious what it does\r\n- What if you actually just want to export an empty function as a no-op for whatever reason?\r\n- You may get warnings for unused arguments\r\n- With `on:` you'll have an event without an `Event` object. You might expect to be able to pass the event to a function that handles all events.\r\n- It might be confusing to have an event handler take different arguments depending on if it's called from `on:` or `addEventListener`.\r\n- Would not work if you want an argument with the same name as an event","updated_at":"2021-12-01T01:18:33Z","created_at":"2021-12-01T01:13:09Z","creator_user_login":"probablykasper"}
{"number":5602,"comment_id":"1169028737","body":"Hi it might be naive of me thinking this but for me a fix for what @probablykasper said would look like this:\r\n```html\r\n<script lang=\"ts\">\r\n    export message = createEventDispatcher<string>();//message is of type function ()=> string\r\n    message(\"I just dispatched a message event!\");\r\n</script>\r\n```\r\nThis would make it possible to create and export empty functions without messing with the type system.\r\nWould there be any problem with this aproach.\r\n\r\nI am a little scared that such a feature will not make it into svelte.","updated_at":"2022-06-28T17:38:31Z","created_at":"2022-06-28T17:38:17Z","creator_user_login":"nbrugger-tgm"}
{"number":5602,"comment_id":"1658584625","body":"An awesome idea! I too came up with something very similar called [Auto-dispatch](https://github.com/sveltejs/svelte/issues/9060). But it has added default behaviour which I think is very powerful. Svelte is about being svelte after all and `createEventDispatcher()` is just downright ugly. I think this proposal should be seriously considered. And since it has some minor breaking changes, it could be a part of Svelte 5 which is supposed to be a full rewrite of the Svelte compiler with new features and breaking changes anyway.","updated_at":"2023-07-31T15:18:20Z","created_at":"2023-07-31T15:18:20Z","creator_user_login":"ethanlal04"}
{"number":5922,"comment_id":"792051352","body":"When will the release be released?","updated_at":"2021-03-06T20:43:54Z","created_at":"2021-03-06T20:43:54Z","creator_user_login":"flymedllva"}
{"number":5922,"comment_id":"809038492","body":"Added a test and cleaned up the PR.\r\nWanted to use `window.getComputedStyle` to get the computed styles for component, but the tests would fail only in the hydration flow. Not sure if that's because the stylesheet doesn't exist through hydration flow. ","updated_at":"2021-03-29T03:23:12Z","created_at":"2021-03-29T03:23:12Z","creator_user_login":"chrisirhc"}
{"number":5922,"comment_id":"1515076185","body":"@benmccann is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%225baf255c694a88c2a3fa5f45b08129cc9b62137e%22%7D%2C%22id%22%3A%22QmSx9AuyZM8nxPU1og6iZLkzntk8WcNwwYEH6upoTzq2eW%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A5922%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-19T17:02:57Z","created_at":"2023-04-19T17:02:57Z","creator_user_login":"vercel[bot]"}
{"number":5734,"comment_id":"739131020","body":"It seems the point is that 'isLoading' and 'items' changed at the same time (because the Promise is resolved immediately). \r\n\r\nYour example worked correctly after this change: \r\n```\r\nsetTimeout(() => items = [], 0);\r\n```\r\nnow 'items' is updated at the next iteration of the EventLoop.\r\n\r\nBut the simple case works as expected without this trick:\r\nhttps://svelte.dev/repl/ab0d599bbe084b67b632724e4834876f?version=3.31.0\r\n\r\n^^^ UPDATE ^^^\r\n\r\nI continued to play with your example and made this change:\r\n\r\n```\r\nif (state == 1) isLoading = false;\r\n```\r\nhttps://svelte.dev/repl/b4dc5c7eeca04281a8df050402c1a856?version=3.30.1\r\n\r\nThe wrong screen was drawn for a moment:\r\n\r\n![image](https://user-images.githubusercontent.com/47115080/101235309-c328d100-36d8-11eb-806e-d27b5a1e8a12.png)\r\n\r\nThis is clearly not what should have happened. After a second, the screen refreshed as it should.\r\n","updated_at":"2020-12-05T06:08:32Z","created_at":"2020-12-05T05:46:46Z","creator_user_login":"kiri2lov"}
{"number":5734,"comment_id":"739140670","body":"@kiri2lov I'm confused. Your example doesn't seem to reflect the same problem. In real application the issue happens even when the promise is not resolved immediately. In addition this doesn't explain why the position of the menu component matter or why removing the transitions \"fixes\" the issue.","updated_at":"2020-12-05T08:20:01Z","created_at":"2020-12-05T07:46:39Z","creator_user_login":"ganigeorgiev"}
{"number":5734,"comment_id":"869070382","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:41Z","created_at":"2021-06-26T22:46:41Z","creator_user_login":"stale[bot]"}
{"number":5734,"comment_id":"869097563","body":"@pngwn The issue is still reproducible with the latest svelte version - https://svelte.dev/repl/638d0a980c1b47fc8b1e7c270c8e5bc2?version=3.38.3","updated_at":"2021-06-27T04:14:05Z","created_at":"2021-06-27T04:14:05Z","creator_user_login":"ganigeorgiev"}
{"number":5734,"comment_id":"1000651567","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T04:47:57Z","created_at":"2021-12-24T04:47:57Z","creator_user_login":"stale[bot]"}
{"number":5734,"comment_id":"1000663126","body":"The issue still could be reproduced with the latest svelte version (3.44.3) - https://svelte.dev/repl/638d0a980c1b47fc8b1e7c270c8e5bc2?version=3.44.3","updated_at":"2021-12-24T05:29:52Z","created_at":"2021-12-24T05:29:52Z","creator_user_login":"ganigeorgiev"}
{"number":5734,"comment_id":"1161524747","body":"I experienced quite the same problem ‚Ä¶","updated_at":"2022-06-21T09:53:45Z","created_at":"2022-06-21T09:53:45Z","creator_user_login":"mstoltenburg"}
{"number":5603,"comment_id":"717883120","body":"Sometimes Svelte isn't quite normal html. The docs show how to [bind_element_property](https://svelte.dev/docs#bind_element_property) to a `textarea`  \r\n`<textarea bind:value={name}></textarea>`","updated_at":"2020-10-28T11:52:29Z","created_at":"2020-10-28T11:52:29Z","creator_user_login":"nickolasgregory"}
{"number":5603,"comment_id":"717948130","body":"Yes, it is true that I can use `bind:value` with `<textarea>`, but for my use case, that does not work out. As stated in the original report, TinyMCE wants the content to be raw HTML children nodes of the main editor element, which `bind:value` does not fulfill.","updated_at":"2020-10-28T13:53:03Z","created_at":"2020-10-28T13:53:03Z","creator_user_login":"ethan-tqa"}
{"number":5603,"comment_id":"718044963","body":"I don't know what I'd expect `{@html foo}` to do inside a `<textarea>` that's different from just `{foo}`. Perhaps we can improve the parser error here, but I don't see what the desired behavior is. I don't think `<textarea>`s _have_ child elements.","updated_at":"2020-10-28T16:17:22Z","created_at":"2020-10-28T16:17:22Z","creator_user_login":"Conduitry"}
{"number":5603,"comment_id":"721493322","body":"To achieve your desired outcome, you could use a div tag with the attribute `contenteditable`. I'm not sure TinyMCE's requirements however.","updated_at":"2020-11-04T03:35:49Z","created_at":"2020-11-04T03:35:49Z","creator_user_login":"MichealPearce"}
{"number":5603,"comment_id":"869074811","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:45Z","created_at":"2021-06-26T23:46:45Z","creator_user_login":"stale[bot]"}
{"number":5603,"comment_id":"1000871200","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:23Z","created_at":"2021-12-24T15:15:23Z","creator_user_login":"stale[bot]"}
{"number":5568,"comment_id":"715134454","body":"You might be interested in this https://github.com/AlexxNB/svelte3-translation-ru also site is available here https://ru.svelte.dev/\r\n\r\nAlso please check #5122 ","updated_at":"2020-10-23T08:08:35Z","created_at":"2020-10-23T08:07:28Z","creator_user_login":"peopledrivemecrazy"}
{"number":5568,"comment_id":"869074839","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2023-08-20T05:33:46Z","created_at":"2021-06-26T23:46:58Z","creator_user_login":"stale[bot]"}
{"number":5568,"comment_id":"1000889599","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2023-08-20T05:34:12Z","created_at":"2021-12-24T16:15:50Z","creator_user_login":"stale[bot]"}
{"number":5568,"comment_id":"1695483191","body":"I think the file structure in sites should be adjusted to extract the text that needs to be displayed and make it into a configurable multilingual structure, so that we can do multilingual translation on this basis. Thank you.","updated_at":"2023-08-28T10:53:56Z","created_at":"2023-08-28T10:53:56Z","creator_user_login":"dufu1991"}
{"number":5520,"comment_id":"707108570","body":"This is expected. It's not that `$store` doesn't update right away, it's that `$:` only runs at most once per microtask.","updated_at":"2020-10-12T13:06:33Z","created_at":"2020-10-12T13:06:33Z","creator_user_login":"Conduitry"}
{"number":5520,"comment_id":"793034976","body":"I've made a [reproduction of the issue in a REPL](https://svelte.dev/repl/1afe59d2c99d4919a34985e34c5913ba?version=3.35.0), where using either the increment or the fetch buttons should switch a `loading` store to false for one second.\r\n\r\nUsing `$store` directly in markup or subscribing manually to it works fine in either case. Using a reactive statement works only if the update is done via a direct update call, but NOT when reacting to `value` increment.\r\n\r\nIf I use `await tick()` before updating the `loading` store, reactive assignment works as expected in both cases.\r\n\r\nThis to me is very confusing and misleading, since I was expecting `$store` to be syntactic sugar for a manual subscription with lifecycle safety, but it is obviously quite different. I don't really understand how microtask management is affecting this behavior, since the value of the store has plenty of time to get updated.\r\n\r\nThanks for the help...","updated_at":"2021-03-08T20:01:22Z","created_at":"2021-03-08T20:01:22Z","creator_user_login":"davidsavoie1"}
{"number":5520,"comment_id":"838936753","body":"I just looked at the issue reproduction I had made and I now understand what I was doing wrong (I've learned the hard way when dealing with other similar issues): **The order of the reactive statements is important.** \r\n\r\nDoing\r\n```js\r\n$: loading2 = $loading;\r\n$: {\r\n  value;\r\n  loading.fetch();\r\n}\r\n```\r\nis not the same as\r\n```js\r\n$: {\r\n  value;\r\n  loading.fetch();\r\n}\r\n$: loading2 = $loading;\r\n```\r\nIt seems obvious now that I understand it, but reactive assignments and statements seem so magical sometimes that it's easy to forget basic principles.","updated_at":"2021-05-11T18:13:05Z","created_at":"2021-05-11T18:13:05Z","creator_user_login":"davidsavoie1"}
{"number":5520,"comment_id":"1000776212","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:09Z","created_at":"2021-12-24T10:28:09Z","creator_user_login":"stale[bot]"}
{"number":5589,"comment_id":"716515074","body":"It seems to me this bug is quite bad, because actually it cannot be worked around at all. Even actions have stale links to DOM elements.\r\nFor now I use an action up very high on a parent node, that searches for an element based on a selector and triggers a form submit. Sic.\r\n\r\n@Conduitry Just a ping to be sure someone will see this.","updated_at":"2020-10-26T12:29:22Z","created_at":"2020-10-26T12:29:22Z","creator_user_login":"dkzlv"}
{"number":5589,"comment_id":"716541918","body":"The bug becomes even peskier.\r\n\r\nI've updated the REPL. It now also has an exported function in the wrapper (`export let`; we cannot use `export const`, because refs turn into `null`), that we bind to a local variable in the parent component. It _never_ updates. The same goes for any other variables.\r\n\r\nWill try some mix of context and stores, maybe I'll have some luck there.","updated_at":"2020-10-26T13:24:28Z","created_at":"2020-10-26T13:22:02Z","creator_user_login":"dkzlv"}
{"number":5589,"comment_id":"907630666","body":"Hi,\r\nI encountered the same problem with #key and transitions. Any clue to solve this @dkzlv ?","updated_at":"2021-08-28T14:02:21Z","created_at":"2021-08-28T14:02:21Z","creator_user_login":"gbouteiller"}
{"number":4839,"comment_id":"1000920099","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:48Z","created_at":"2021-12-24T19:24:48Z","creator_user_login":"stale[bot]"}
{"number":4839,"comment_id":"1179229601","body":"I think this is the same issue that we have run into. Minimal example:\r\n\r\n```\r\n<script>\r\n\tconst WX = {};\r\n\texport let manifestId;\r\n\tlet foo;\r\n\t$: view = WX.View({\r\n\t\tmanifestId,\r\n\t}, state => {\r\n\t\tfoo = 'x';\r\n\t});\r\n</script>\r\n<input bind:value={foo} />\r\n```\r\n\r\nIf you put this into the REPL, notice that the generated code for the binding looks like this:\r\n\r\n```\r\n\tfunction input_input_handler() {\r\n\t\tfoo = this.value;\r\n\t\t($$invalidate(0, foo), $$invalidate(1, manifestId));\r\n\t}\r\n```\r\n\r\nThis is wrong - why is the binding invalidating manifestId? It should just be invalidating `foo`.\r\n\r\nCommenting out either the `manifestId` option to `WX.View` or the `foo = 'x'` line results in the expected code which is this:\r\n\r\n```\r\n\tfunction input_input_handler() {\r\n\t\tfoo = this.value;\r\n\t\t$$invalidate(0, foo);\r\n\t}\r\n```\r\n\r\nIn practice this is also causing infinite loops for us.","updated_at":"2022-07-08T17:50:59Z","created_at":"2022-07-08T17:46:42Z","creator_user_login":"SystemParadox"}
{"number":4839,"comment_id":"1457197319","body":"Probably the same issue here: https://stackoverflow.com/q/75655792/546730\r\n\r\nExample being given:\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let data: PageData;\r\n  $: roleName = data.role.name;\r\n</script>\r\n<TextInput bind:value={roleName} />\r\n```\r\n\r\nWhere the input value cannot be edited because the binding invalidates `data`, causing an immediate reset via the reactive statement.","updated_at":"2023-03-06T23:18:02Z","created_at":"2023-03-06T23:17:34Z","creator_user_login":"brunnerh"}
{"number":4839,"comment_id":"1457199054","body":"@Conduitry I think there should be enough repros now.","updated_at":"2023-03-06T23:19:21Z","created_at":"2023-03-06T23:19:21Z","creator_user_login":"brunnerh"}
{"number":5064,"comment_id":"650743492","body":"I think the issue is caused by the line `$: indeterminate = checked === undefined;`, which is unnecessary because you already have the indeterminate bound to the input component.\r\n\r\nHere, what you're trying to achieve can be done by setting the `indeterminate = true` (which should be the initial value). \r\n\r\nSee the modified version here: https://svelte.dev/repl/a23549e44c964496826da992512ae6c7?version=3.23.2","updated_at":"2020-06-28T12:12:02Z","created_at":"2020-06-28T12:12:02Z","creator_user_login":"irshadshalu"}
{"number":5064,"comment_id":"651022549","body":"Hi @irshadshalu,\r\n\r\nThe modified version makes it look visually correct, but you'll note from the logging that the \"checked\" binding is still triggering an update, making it look as though the user has interacted with the control.\r\n\r\nIf instead the idea is that bind:checked should always coerce the type, than it should probably do so regardless of the presence of the indeterminate binding.\r\n\r\nNote that the idea of the original REPL was to wind up with a tri-state boolean. i.e. undefined/true/false for indeterminate/checked/unchecked.\r\n\r\nRegards,\r\nWill\r\n\r\n\r\n\r\n","updated_at":"2020-06-29T08:45:44Z","created_at":"2020-06-29T08:45:44Z","creator_user_login":"WHenderson"}
{"number":5064,"comment_id":"1000889521","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:32Z","created_at":"2021-12-24T16:15:32Z","creator_user_login":"stale[bot]"}
{"number":4794,"comment_id":"624991202","body":"One concern with changing this is that it potentially relies on the observers being called in the same order in which they were subscribed. For example, if in the future stores are changed so that the callbacks are called in reverse order of subscription, the behavior of the example above would change so that both callbacks are called once again. \r\n\r\nWith that in mind, I think I would feel most comfortable with this change if Svelte made one of these behaviors official:\r\n\r\n1. Store subscriptions will always be called in the same order that they subscribed.\r\n\r\nor\r\n\r\n2. There is explicitly no guarantee about the order in which subscribers are called. Kind of the same thing that Go says about iterating over maps.\r\n\r\nWhat do you think?","updated_at":"2020-05-07T02:24:28Z","created_at":"2020-05-07T02:24:00Z","creator_user_login":"dimfeld"}
{"number":4794,"comment_id":"624995970","body":"Observables are just arrays of callbacks so as per ECMA the order is guaranteed, I don't see how that could change in the future","updated_at":"2020-05-07T02:47:16Z","created_at":"2020-05-07T02:41:34Z","creator_user_login":"pushkine"}
{"number":4794,"comment_id":"625052521","body":"The most obvious possibility in my mind is that at some point in the future there is a need for better performance of unsubscribing, and so the array of subscribers is replaced with some other data structure. It would probably be a Map though, and so iteration would still be in insertion order. I suppose some other change could necessitate iterating in reverse order, but I cant think of any real reason to do that.\r\n\r\nBut mostly I'm just thinking about the formal promises made by the Svelte API vs. the logical, but undocumented behavior that it exhibits, such as iterating over subscribers in the order they were added. If the answer is that I'm just worrying too much, that's fine and I'm happy to drop the issue :)","updated_at":"2020-05-07T06:18:33Z","created_at":"2020-05-07T06:18:33Z","creator_user_login":"dimfeld"}
{"number":4794,"comment_id":"1000620109","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:47:55Z","created_at":"2021-12-24T02:47:55Z","creator_user_login":"stale[bot]"}
{"number":4929,"comment_id":"636135351","body":"> For assignments other than = (i.e. += 1 etc), it would use update instead of set\r\n\r\nThe `update` method isn't a part of the store spec\r\n\r\n> Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store","updated_at":"2020-05-29T19:00:48Z","created_at":"2020-05-29T19:00:28Z","creator_user_login":"pushkine"}
{"number":4929,"comment_id":"636139765","body":"Yeah, we shouldn't depend on the existence of `.update()`, even though it's present in Svelte's default writable stores.\r\n\r\nSee also #4017 which, while a different problem, will have a solution somewhat adjacent to this optimization; namely, that we'd like to be able to update stores without touching or depending on an existing `$autosubscription` variable.","updated_at":"2020-05-29T19:11:05Z","created_at":"2020-05-29T19:11:05Z","creator_user_login":"Conduitry"}
{"number":4929,"comment_id":"636143997","body":"It might be worth mentioning that changes in this regard will affect StartStopListeners, so it could just as much be deemed a bug if `count` were to run side effects on first sub\r\n\r\nOverall I do not think this issue should be addressed. That's not the first time I see a component subscribing to a store whose value it does not need, and it's probably not the last one either\r\n```js\r\n<script>\r\n  import { count } from './stores.js';\r\n</script>\r\n\r\n{#if false}\r\n\t{$count}\r\n{/if}\r\n```\r\nhttps://svelte.dev/repl/c548bac309fb4fb6b9ea4eedd76366a8?version=3.23.0\r\n\r\nIt has been implicitly established that `$store`s will be subscribed to on mount and unsubscribed to on destroy, it would be a mistake to break that pattern for some cases while leaving it in others","updated_at":"2020-05-29T19:24:42Z","created_at":"2020-05-29T19:21:22Z","creator_user_login":"pushkine"}
{"number":4929,"comment_id":"1000889501","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:26Z","created_at":"2021-12-24T16:15:26Z","creator_user_login":"stale[bot]"}
{"number":4649,"comment_id":"610893825","body":"[`svelte.compile`](https://svelte.dev/docs#svelte_compile) already exposes this information, but at a lower level (you have to actually be calling the compiler yourself). Adding this information as another named export from the compiled component sounds like it has the possibility of being a reasonable feature, but I don't like the idea of exposing it on the constructor itself or on instances, because that would be extra untreeshakable code that everyone would get whether they needed it or not.\r\n\r\nIf the goal of this is purely to avoid showing a runtime warning (and isn't needed for other functionality) I think we should try to consider other ways of dealing with the root issue. See also #4652, which has been opened for just this concern.","updated_at":"2020-04-08T11:03:30Z","created_at":"2020-04-08T11:03:30Z","creator_user_login":"Conduitry"}
{"number":4649,"comment_id":"611013548","body":"Thanks a lot for the answer. I understand your point and yes, at least as of now, the issue is purely related to #4652 (can‚Äôt exclude that others will find different uses in the future, however).","updated_at":"2020-04-08T15:06:56Z","created_at":"2020-04-08T15:06:56Z","creator_user_login":"ItalyPaleAle"}
{"number":4649,"comment_id":"1000920085","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:43Z","created_at":"2021-12-24T19:24:43Z","creator_user_login":"stale[bot]"}
{"number":4649,"comment_id":"1000930761","body":"Nope","updated_at":"2021-12-24T21:01:47Z","created_at":"2021-12-24T21:01:47Z","creator_user_login":"frederikhors"}
{"number":4649,"comment_id":"1075245476","body":"I'd appreciate the requested solution as well, but indeed the root issue is the console warning during runtime, which make development a less joyful experience.","updated_at":"2022-03-22T14:21:54Z","created_at":"2022-03-22T14:21:54Z","creator_user_login":"benrogmans"}
{"number":4696,"comment_id":"620983823","body":"Not sure if it's helpful but I found if I change `Promise.resolve()` to `new Promise(resolve => ...)` it seems to work.\r\n\r\n```diff\r\n+$: $store[currentTab] !== 'LOADED' && new Promise(resolve => {...})\r\n-$: $store[currentTab] !== 'LOADED' && Promise.resolve(...)\r\n```\r\n\r\nYou can check [repl](https://svelte.dev/repl/1cae62c93790452683788ba37eff42a1?version=3.21.0) here.\r\n","updated_at":"2020-04-29T04:35:28Z","created_at":"2020-04-29T04:35:28Z","creator_user_login":"kjj6198"}
{"number":4696,"comment_id":"625783844","body":"Hello,\r\n\r\nThat's not exactly a resolution as you are setting a timeout in order to wait for the promise to resolve. The codes provided are slightly different, as the first snippet resolves immediately, but the second one has a timeout with 1s delay. If you set the delay to 0ms it would behave the same.\r\n\r\nThe issue is that you are updating the currentTab before the store has been updated, so when the if statment passes the condition, it will not update the children because the currentTab variable is not being reassinged.\r\n\r\nA solution to that would be to either create a store that will store the currentTab as well as the loading. Or based on the current code with a small tweek if you add this reactive value:\r\n\r\n```\r\n$: current = $store[currentTab] === 'LOADED' && currentTab;\r\n```\r\n\r\nAnd update the template:\r\n\r\n```\r\n<Title title={`Hello ${current}`}>\r\n\t<caption slot=\"caption\">{current}</caption>\r\n</Title>\r\n```\r\n\r\nThis would update the children because the `current` variable will be updated when the store is updated resulting in updating the view.\r\n\r\nYou can check the [repl](https://svelte.dev/repl/c01f7abe44d14e9f959dc0f857f15a14?version=3.20.1) here.","updated_at":"2020-05-08T12:06:27Z","created_at":"2020-05-08T12:06:27Z","creator_user_login":"markoboy"}
{"number":4673,"comment_id":"613710345","body":"I remember I didn't find it great when I did it months ago\r\nthe workaround is to go to the page anyway then cmd click the `history.back` button instead","updated_at":"2020-04-14T22:22:09Z","created_at":"2020-04-14T22:22:09Z","creator_user_login":"pushkine"}
{"number":4673,"comment_id":"1000920091","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:45Z","created_at":"2021-12-24T19:24:45Z","creator_user_login":"stale[bot]"}
{"number":4811,"comment_id":"626266130","body":"This is the expected behavior, although not particularly documented at the moment.\r\n\r\nWhen compiling a component, Svelte looks at which reactive blocks depend on other ones - based on what variables are used and what variables are assigned _within the reactive block_ - and sorts them accordingly, resolving ties according to the order that they're original in the component source. During each invalidation/update phase, the reactive blocks are run through in this order. Invalidations happening in one of them can cause later blocks to also be run - but once a block has been passed, no validations this cycle can make it be run again.\r\n\r\nIn the case of your component, the compiler can't see that it would be helpful to put `$: if(b > 0) changeA();` before `$: console.log(\"Detected A value change: \", a);` because it can't see that it might invalidate `a`.","updated_at":"2020-05-10T03:09:26Z","created_at":"2020-05-10T03:09:26Z","creator_user_login":"Conduitry"}
{"number":4811,"comment_id":"1000776207","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:08Z","created_at":"2021-12-24T10:28:08Z","creator_user_login":"stale[bot]"}
{"number":4683,"comment_id":"789418985","body":"I ran into this today. I'm trying to conditionally set a class to play a \"completion\" animation as a fade out starts, but the class never gets set as described by this bug.\r\n\r\n```svelte\r\n{#if $isVisible}\r\n  <div\r\n    class=\"loading-progress\"\r\n    class:finished={$isVisible === false}\r\n    out:fade={{ delay: 600 }}\r\n  />\r\n{/if}\r\n```\r\n\r\nAre there any workarounds to this? I don't think I can get the behavior I want with this bug.","updated_at":"2021-03-03T04:31:48Z","created_at":"2021-03-03T04:27:53Z","creator_user_login":"furudean"}
{"number":4683,"comment_id":"789419847","body":"As an aside - setting a `delay` on the transition blocks updates too. Before the full rework it might be worth to look into if it's possible to allow state to update during a delay, as a separate PR.","updated_at":"2021-03-03T04:34:11Z","created_at":"2021-03-03T04:30:39Z","creator_user_login":"furudean"}
{"number":4683,"comment_id":"869048062","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:54Z","created_at":"2021-06-26T19:04:54Z","creator_user_login":"stale[bot]"}
{"number":4683,"comment_id":"952455541","body":"Is this still being worked on? Is there a workaround?","updated_at":"2021-10-27T01:18:44Z","created_at":"2021-10-27T01:18:44Z","creator_user_login":"9ParsonsB"}
{"number":4683,"comment_id":"952465767","body":"Issues with no traction like this are pretty far down in the to-do for the core team. Pull requests are always welcome!","updated_at":"2021-10-27T01:46:35Z","created_at":"2021-10-27T01:46:35Z","creator_user_login":"furudean"}
{"number":4072,"comment_id":"610535284","body":"This bug is not reproducible now and I'm closing the issue.","updated_at":"2020-04-07T17:59:52Z","created_at":"2020-04-07T17:59:52Z","creator_user_login":"jerriclynsjohn"}
{"number":4072,"comment_id":"1055581328","body":"I'm also having this bug.","updated_at":"2022-03-01T15:46:13Z","created_at":"2022-03-01T15:46:13Z","creator_user_login":"simonbernard2"}
{"number":4072,"comment_id":"1056072878","body":"I'm experiencing this too, in 3.44.2, what version are you on? \r\n\r\n<img width=\"879\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1472981/156282956-eb71e8fe-8710-4f00-864b-fd557816e15a.png\">\r\n\r\nAlso finding that Svelte doesn't recognise `border-gray-400` and `border-gray-400/50` as distinct attributes:\r\n\r\n<img width=\"787\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1472981/156283838-e0f649b6-fd9c-44d6-80fd-67c8b0397b39.png\">\r\n\r\n\r\nEDIT: Also happening if I remove the shorthand syntax: \r\n\r\n<img width=\"888\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1472981/156283746-38d6a37e-27f4-4ab7-ab8c-d493732de0e3.png\">\r\n\r\n\r\nEDIT: Also happening if the class doesn't clash at all: \r\n\r\n<img width=\"900\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1472981/156283718-a414589a-d8bc-4c06-a465-157bb4e2c2b5.png\">\r\n\r\nI should add that I'm using `windicss` v3.2.1 and `vite-plugin-windicss` v1.5.4.\r\n\r\nEDIT: Upgrading to `svelte` 3.46.4, `windicss` 3.5.0 and `vite-plugin-windicss` v1.8.1 did not fix this issue for me. ","updated_at":"2022-03-02T02:44:44Z","created_at":"2022-03-02T02:28:36Z","creator_user_login":"benwoodward"}
{"number":4072,"comment_id":"1057111294","body":"Reopening since this still seems to be an issue - can someone provide a REPL showing the issue?","updated_at":"2022-03-02T16:19:44Z","created_at":"2022-03-02T16:19:44Z","creator_user_login":"geoffrich"}
{"number":4072,"comment_id":"1068392720","body":"@geoffrich \r\n> Reopening since this still seems to be an issue - can someone provide a REPL showing the issue?\r\n\r\nHere is example repositoryI created for you  with the issue in index.svelte [git repo](https://github.com/git-no/sveltekit-divider-issue)","updated_at":"2022-03-15T19:39:59Z","created_at":"2022-03-15T19:39:59Z","creator_user_login":"git-no"}
{"number":4072,"comment_id":"1068503662","body":"@git-no thanks, I totally forgot to do this.","updated_at":"2022-03-15T21:48:19Z","created_at":"2022-03-15T21:48:19Z","creator_user_login":"benwoodward"}
{"number":4072,"comment_id":"1068960714","body":"I have also this issue, Class directive breaks with token \"/\" for TailwindCSS ","updated_at":"2022-03-16T10:20:43Z","created_at":"2022-03-16T10:20:43Z","creator_user_login":"git-no"}
{"number":4313,"comment_id":"578126271","body":"Interesting. I guess the first way I'm thinking about to handle this is to compute the hash based on the CSS with the unused selectors already removed. (Right now it's a hash of the literal string inside the `<style>` tag.) If that's going to be too much fiddly work or require too many changes, we could just have it be a hash of the styles concatenated with a list of the removed selectors, since it doesn't matter what sort of string it's the hash of.","updated_at":"2020-01-24T13:18:33Z","created_at":"2020-01-24T13:18:33Z","creator_user_login":"Conduitry"}
{"number":4313,"comment_id":"590070013","body":"To preserve the comment from the closed PR, @tanhauhau suggested basing the CSS hash class on the entire component's string, not just the styles. This would certainly work, and is how it worked before #1091. Some of the reasoning for that change was in the now-deleted Gitter channel, but I _think_ it had something to do with writing a component that you `rollup-plugin-replace` bits of the HTML of to handle localization, and to let this not affect the generated CSS.","updated_at":"2020-02-23T13:40:19Z","created_at":"2020-02-23T13:40:19Z","creator_user_login":"Conduitry"}
{"number":4313,"comment_id":"748054178","body":"I'm also running into this issue. My use case is that I'm dynamically generating multiple components based on a shared template (which contains `<script>` and `<style>`), but each component has different content.\r\n\r\nMy current workaround is to inject the unique name of the component into a comment in the CSS.\r\n\r\nThough it looks like if the CSS is emitted as a separate file, then the styles work regardless in which order the components are loaded.","updated_at":"2020-12-18T12:15:29Z","created_at":"2020-12-18T12:15:29Z","creator_user_login":"fkling"}
{"number":4313,"comment_id":"869066714","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:57Z","created_at":"2021-06-26T22:03:57Z","creator_user_login":"stale[bot]"}
{"number":4313,"comment_id":"1296126381","body":"@Conduitry The bug is still reproduced in v3.52.0. This is a critical bug, svelte must guarantee the style isolation. Maybe it's time to fix it? We can simply add svelte file path to the hash function of the `svelte-{hash}` class.\r\n\r\nhttps://svelte.dev/repl/6474b1394fa94fb1af2ef3445c5ef96f?version=3.52.0","updated_at":"2022-10-30T06:04:45Z","created_at":"2022-10-30T06:04:45Z","creator_user_login":"NikolayMakhonin"}
{"number":4313,"comment_id":"1296129935","body":"Temporary solution:\r\n\r\n**rollup.config.js**\r\n```js\r\nfunction normalizePath(filepath) {\r\n  return filepath.replace(/\\\\/g, '/')\r\n}\r\n\r\nconst preprocessBase = sveltePreprocess({\r\n  postcss   : true,\r\n  typescript: true,\r\n})\r\n\r\nconst preprocess = {\r\n  ...preprocessBase,\r\n  async style({content, filename, ...others}) {\r\n    const result = await preprocessBase.style({\r\n      content,\r\n      filename,\r\n      ...others,\r\n    })\r\n\r\n    // fix the style isolation bug: https://github.com/sveltejs/svelte/issues/4313\r\n    result.code = `/* ${normalizePath(filename)} */\\r\\n${result.code}`\r\n\r\n    return result\r\n  },\r\n}\r\n\r\nexport default {\r\n  ...\r\n  plugins: [\r\n    ...\r\n    svelte({\r\n      preprocess,\r\n      ...\r\n    }),\r\n    ...\r\n  ],\r\n  ...\r\n}\r\n```","updated_at":"2022-10-30T06:20:13Z","created_at":"2022-10-30T06:20:13Z","creator_user_login":"NikolayMakhonin"}
{"number":3787,"comment_id":"545834827","body":"https://svelte.dev/repl/eaad873d99074982a1a0e8005ab88d79?version=3.12.1\r\n\r\nWorks fine now.\r\nYou're assigning to the variable twice in the same frame, which means that it won't work, because Svelte won't be able to react to it.\r\n\r\nYou need to execute the statement inside a `setTimeout` or the `onMount` lifecycle hook (which is imported from `svelte/internal`)","updated_at":"2019-10-24T09:40:18Z","created_at":"2019-10-24T09:35:13Z","creator_user_login":"marcus-sa"}
{"number":3787,"comment_id":"545883348","body":"I checked the internal state of the subcomponents, and there is something wrong still.\r\n\r\nhttps://svelte.dev/repl/72a81fcf45334f7cb19b42e770149ea1?version=3.12.1\r\n\r\nThe subcomponent state isn't updated","updated_at":"2019-10-24T11:56:07Z","created_at":"2019-10-24T11:56:07Z","creator_user_login":"dxlbnl"}
{"number":3787,"comment_id":"546027551","body":"Yes - I still don't understand how this works. I've defined the variable reactively in each component - shouldn't it update in the way expected?","updated_at":"2019-10-24T17:45:39Z","created_at":"2019-10-24T17:45:39Z","creator_user_login":"kewp"}
{"number":3787,"comment_id":"1002149057","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T15:06:58Z","created_at":"2021-12-28T15:06:58Z","creator_user_login":"stale[bot]"}
{"number":3793,"comment_id":"546765548","body":"It [renders correctly with `bar = 1`](https://svelte.dev/repl/ca73a19d4e0b43c993a56937aaa91ac1?version=3.12.1)\r\n\r\nHowever, if `bar` is marked as `reassigned` or `mutated` due to code somewhere else, [it will have a runtime error](https://svelte.dev/repl/691f56e536744f7ba903f5d31d6b6fb3?version=3.12.1):\r\n\r\n```svelte\r\n<script>\r\n\tlet bar = 0;\r\n</script>\r\n\r\n<h1>{bar = 1}</h1>\r\n<h2>{bar}</h2>\r\n<button on:click={() => {bar++}}>bar ++</button>\r\n```","updated_at":"2019-10-28T02:18:26Z","created_at":"2019-10-28T02:17:51Z","creator_user_login":"tanhauhau"}
{"number":3793,"comment_id":"560037779","body":"The runtime error mentioned above is no longer happening as of 3.13.0, but there's another issue - the inline update in the template is only affecting the component's `ctx` object/array, and not the `bar` variable that's accessed in the event handlers. Changes made in the event handler are making their way into `ctx` (by way of `$$invalidate`) but changes to `ctx` can't find their way back.","updated_at":"2019-12-01T01:41:24Z","created_at":"2019-12-01T01:41:24Z","creator_user_login":"Conduitry"}
{"number":3793,"comment_id":"593049952","body":"was revisiting this, and realise that @Rich-Harris wrote a comment on this \r\n\r\nhttps://github.com/sveltejs/svelte/blob/3a37de364bfbe75202d8e9fcef9e76b9ce6faaa2/src/compiler/compile/nodes/shared/Expression.ts#L224-L226\r\n\r\nwe can mark it as `referenced/mutated` to prevent eslint to change it, but still i dont see any reason of wanting to write:\r\n```svelte\r\n{bar = 1}\r\n```\r\n\r\nand regarding the impact on compiled output, i tried, it seems that the only difference is that, it will try to be reactive in the `update` function:\r\n\r\n```js\r\n   if (dirty & /*bar*/ 4 && t4_value !== (t4_value = (/*bar*/ ctx[2] = 1) + \"\")) set_data_dev(t4, t4_value);\r\n```\r\n\r\nyet, as you said, the changes made here may / may not make its way back to the `ctx`, (depending whether we optimistically destruct the `ctx` array it in the params or not based on the number of variables), still it does not trigger `$$invalidate` to run the update cycle.\r\n\r\n","updated_at":"2020-03-01T03:52:08Z","created_at":"2020-03-01T03:52:08Z","creator_user_login":"tanhauhau"}
{"number":3793,"comment_id":"593155539","body":"Writing something like `{bar = 1}` has come up a number of times, with people wondering how to do 'inline' assignments to variables, often for one iteration of an each loop. For example:\r\n\r\n```svelte\r\n<script>\r\n\tlet y;\r\n</script>\r\n\r\n{#each [1, 2, 3, 4, 5] as x}\r\n\t{(y = x * x, '')}\r\n\t<div>\r\n\t\t{y}\r\n\t</div>\r\n{/each}\r\n```\r\n\r\nThis is something we probably want to discourage, but at this point, depending on how many people are using it, it might not be something I feel comfortable making stop working.\r\n\r\nA few months ago, something else I had suggested in chat was to make assignments from the template not trigger reactivity. That would let something like `{foo} {(foo += 1, '')} {foo}` work in a (possibly) slightly more expected way, where I think the two values shown for `foo` would differ. This might be a really bad idea, though, I'm not sure.\r\n\r\nI suppose on the whole, I'm a little worried about doing something like #4492 and calling it a bugfix, because it seems to start to make a decision about some of this stuff that would be a bit hard to walk back later. I feel like I want to have at least some answers for how all this stuff should work before proceeding, and I don't think I do currently.","updated_at":"2020-03-01T22:44:14Z","created_at":"2020-03-01T22:44:14Z","creator_user_login":"Conduitry"}
{"number":3847,"comment_id":"575920491","body":"just saw @pushkine's PR - i think i like this and cant find any objections! wonderful idea.","updated_at":"2020-01-18T17:25:07Z","created_at":"2020-01-18T17:25:07Z","creator_user_login":"swyxio"}
{"number":3847,"comment_id":"623172423","body":"@sw-yx @pushkine any reason PR #4272 was closed and not merged? Also seems related to #4056 ","updated_at":"2020-05-03T20:03:49Z","created_at":"2020-05-03T20:03:49Z","creator_user_login":"russellsamora"}
{"number":3847,"comment_id":"623174133","body":"idk man i dont run things","updated_at":"2020-05-03T20:15:28Z","created_at":"2020-05-03T20:15:28Z","creator_user_login":"swyxio"}
{"number":3847,"comment_id":"624996838","body":"@russellgoldenberg it will come built in to #4742","updated_at":"2020-05-07T02:46:00Z","created_at":"2020-05-07T02:44:49Z","creator_user_login":"pushkine"}
{"number":3847,"comment_id":"631173146","body":"I initially planned to get this implemented at the same time as spring transitions, those did not make it into #4742 so it'll come in a follow-up to that pr","updated_at":"2020-05-20T01:07:44Z","created_at":"2020-05-20T01:07:44Z","creator_user_login":"pushkine"}
{"number":3847,"comment_id":"1002264399","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T20:10:17Z","created_at":"2021-12-28T20:10:17Z","creator_user_login":"stale[bot]"}
{"number":3847,"comment_id":"1377965634","body":"Is this still being considered? I want to use [MotionOne](https://motion.dev/dom/timeline) animation library, because of it's great DX of orchestrating animations, but unfortunately without non duration based animations it is very hard to do it, I found this to be a major friction point, compared to other parts of svelte.","updated_at":"2023-01-10T22:15:49Z","created_at":"2023-01-10T22:15:49Z","creator_user_login":"minht11"}
{"number":7625,"comment_id":"1162339200","body":"This is a duplicate of https://github.com/sveltejs/svelte/issues/5112. Keep up with that issue for updates.\r\n","updated_at":"2022-06-21T20:49:42Z","created_at":"2022-06-21T20:49:42Z","creator_user_login":"babichjacob"}
{"number":7625,"comment_id":"1162402120","body":"In my use case, I cannot circumvent it with the `use:action` [workaround](https://github.com/sveltejs/svelte/issues/5112#issuecomment-671019753) because event handlers need to be passed down to Components, not native HTML elements. It was surprising to see this issue had been hanging for 2 years. \r\n\r\nThe ability to `use:action` on Components would solve it. \r\n\r\nHypothetical proposal:\r\n- `use:action` in Component applies action to all root nodes inside the Component by default\r\n- `use:action|1` in Component applies to a specific root node index `1` with a modifier\r\n- ignore `use:action` If the Component is headless (no root node)\r\n\r\nThis pattern of spread events is so frequently encountered, that it may make sense to put it under `$$eventProps`, similar to `$$restProps`, and provide built-in svelte solution for it. Though not as intuitive as simply spreading a prop, but perhaps, something like this would do the trick:\r\n```html\r\n<Component use:events={$$eventProps}/>\r\n```","updated_at":"2022-06-21T22:04:57Z","created_at":"2022-06-21T21:51:28Z","creator_user_login":"ecoinomist"}
{"number":7625,"comment_id":"1163079713","body":"It is also impossible to pass down actions, binds and style directives. Actually there is no way to pass down any directives. It's not even possible to pass a className from a parent component to a child component.\r\n\r\nsvelte is unfortunately a poorly composable framework. It's hard to write common components like your own `<Button>` or your own `<Link>`. Nobody cares about it. This problem delays the development of any high-composable ui-kit library and goes against the DRY principle.","updated_at":"2022-06-22T13:11:44Z","created_at":"2022-06-22T13:11:44Z","creator_user_login":"trash-and-fire"}
{"number":7625,"comment_id":"1163177249","body":"I agree, the lack of directives spread props, and the inability to pass down dynamic event handlers to child components **_in any other way_** is a deal breaker for serious projects.\r\n\r\nFortunately for my use case, I'm writing my own compiler on top of Svelte compiler, so there are hacks to work around it.\r\n\r\nOther things considered, Svelte is such as pleasing disruptive change compared to what you have to do in other frameworks, like React. No more boilerplate reselect memoizers to setup, or manual state management edge cases to fix, especially animations, etc.","updated_at":"2022-06-24T10:34:46Z","created_at":"2022-06-22T14:29:54Z","creator_user_login":"ecoinomist"}
{"number":7625,"comment_id":"1171655848","body":"Some work has been done on this, in yet another duplicate thread for this. This PR does not pass all the tests but it does work (for me).  Ive done some updates since so this might work for you. Ill get the newer version pushed once Ive got the tests passing.\r\n\r\nhttps://github.com/sveltejs/svelte/pull/6876\r\n\r\n","updated_at":"2022-06-30T20:40:47Z","created_at":"2022-06-30T20:40:47Z","creator_user_login":"flipkickmedia"}
{"number":7520,"comment_id":"1195064584","body":"Similar to (but slightly different from) https://github.com/sveltejs/svelte/pull/6750, which was [deemed a breaking change](https://github.com/sveltejs/svelte/pull/6750#issuecomment-1140286284) as it would change the Typescript signature of stores.\r\n\r\nAlso worth noting https://github.com/sveltejs/svelte/pull/6750#issuecomment-1122294203 from @WHenderson which suggests that v4 should make the second parameter an object with multiple properties, `set` among them, so that future changes to the API can be made in a backwards-compatible way by just adding another property. I agree that that seems the best approach for stores in Svelte v4.","updated_at":"2022-07-26T06:34:10Z","created_at":"2022-07-26T06:34:10Z","creator_user_login":"rmunn"}
{"number":7520,"comment_id":"1195069640","body":"Oh, of course: #6750 was a PR to implement the suggestion in #6737. I knew that looked familiar... :blush:","updated_at":"2022-07-26T06:40:33Z","created_at":"2022-07-26T06:40:33Z","creator_user_login":"rmunn"}
{"number":7520,"comment_id":"1641399095","body":"I think I have the same problem. I just want the final value in the teardown callback. I use update as a workaround.\r\n\r\n```ts\r\nexport const text: Writable<string> = writable<string>(\r\n  localStorage.getItem('text') ?? '',\r\n  (_, update) => {\r\n    return () =>\r\n      // hack: re-update the store with the same value just to get the current\r\n      // value; it'd be ideal if we were given the val in cleanup\r\n      update(text => {\r\n        localStorage.setItem('text', text)\r\n        return text\r\n      })\r\n  }\r\n)\r\n```","updated_at":"2023-07-19T04:39:43Z","created_at":"2023-07-19T04:38:35Z","creator_user_login":"niedzielski"}
{"number":7524,"comment_id":"1131661456","body":"I'm in favor of easier syntax, but what _exactly_ would you be looking for the Svelte-provided solution to do?  Replicate/incorporate the **svelte-dnd-action** library linked above?  You can already use transition and animate directives with the `on:[event]` directives for drag-and-drop events.\r\n\r\nHowever, I do agree a specialized accessibility-first approach might be fitting for Svelte.  Perhaps if Svelte's `on:drag` also handled touch events out-of-the-box?  The only issue there is how you might need to opt out of that behavior for something more explicit, in case you don't want the same event to occur on touch/drag and mouse drag.","updated_at":"2022-05-19T13:02:36Z","created_at":"2022-05-19T13:02:36Z","creator_user_login":"jrmoynihan"}
{"number":7524,"comment_id":"1131674427","body":"> I'm in favor of easier syntax, but what _exactly_ would you be looking for the Svelte-provided solution to do? Replicate/incorporate the **svelte-dnd-action** library linked above? You can already use transition and animate directives with the `on:[event]` directives for drag-and-drop events.\r\n> \r\n> However, I do agree a specialized accessibility-first approach might be fitting for Svelte. Perhaps if Svelte's `on:drag` also handled touch events out-of-the-box? The only issue there is how you might need to opt out of that behavior for something more explicit, in case you don't want the same event to occur on touch/drag and mouse drag.\r\n\r\nMaybe the hooks API can be used to replicate all events but with better accessibility, The library I posted was only an example any approach which fits best can be used, it should definitely handle edge cases like different events on touch/drag, I'm not so familiar with the compiler but maybe adding custom events which are called slightly different would be an option too.","updated_at":"2022-05-19T13:14:44Z","created_at":"2022-05-19T13:14:44Z","creator_user_login":"ivanjeremic"}
{"number":7525,"comment_id":"1123641784","body":"Related #5572 ","updated_at":"2022-05-11T11:49:23Z","created_at":"2022-05-11T11:49:23Z","creator_user_login":"dummdidumm"}
{"number":7525,"comment_id":"1124597387","body":"Also https://github.com/sveltejs/svelte/issues/2718","updated_at":"2022-05-12T06:47:28Z","created_at":"2022-05-12T06:47:28Z","creator_user_login":"Prinzhorn"}
{"number":7525,"comment_id":"1304562581","body":"I also want this. \r\n\r\nMy understanding is that Svelte uses JavaScript grammar. For example, reactive statements are JS labels, and store binds are valid identifiers. ~~For this reason the bind syntax would not work.~~\r\n\r\nDecorators can't be used with variables. I don't know if this is enforced by grammar or something that can be overwritten by Svelte.\r\n\r\nVariable decorators are in discussion. \r\nhttps://github.com/wycats/javascript-decorators/issues/32\r\nhttps://github.com/tc39/proposal-decorators/issues/306\r\n","updated_at":"2022-11-22T10:43:26Z","created_at":"2022-11-05T15:00:44Z","creator_user_login":"TheCymaera"}
{"number":7525,"comment_id":"1323467507","body":" > reactive statements are JS labels, and store binds are valid identifiers. For this reason the bind syntax would not work.\r\n\r\nWhy wouldn't it work? This is perfectly valid JS code:\r\n```js\r\nbind: myProp;\r\nbind: optionalBindProp = 42;\r\n```\r\n[REPL](https://replit.com/@m93a/Bind-labels-are-valid-JavaScript?v=1#index.js)","updated_at":"2022-11-22T10:41:08Z","created_at":"2022-11-22T10:41:08Z","creator_user_login":"m93a"}
{"number":7525,"comment_id":"1323471787","body":"Sorry, I misread. You're right, that would work.","updated_at":"2022-11-22T10:44:42Z","created_at":"2022-11-22T10:44:42Z","creator_user_login":"TheCymaera"}
{"number":7661,"comment_id":"1176484265","body":"I'm working on it and I've pinpointed the issue. Basically when it moves the b element where a was  getClientBoundRect does not take into consideration the rotation. The fix could be moving all the already present rotation at the end...but this won't take into account elements that are rotated not in multiples of 90 deg.","updated_at":"2022-07-06T17:19:55Z","created_at":"2022-07-06T17:19:55Z","creator_user_login":"paoloricciuti"}
{"number":7661,"comment_id":"1177209164","body":"As an update: you can't move the rotation at the end because the getComputedStyle().transform return a matrix of all the transformation applied. I have to dig deeper into this to find a way to get the actual position of a rotated object instead of the clientBoundRect.","updated_at":"2022-07-07T07:47:40Z","created_at":"2022-07-07T07:47:40Z","creator_user_login":"paoloricciuti"}
{"number":7661,"comment_id":"1617836111","body":"is this still being worked on, because i think i have an idea on how to solve this issue?","updated_at":"2023-07-03T10:23:58Z","created_at":"2023-07-03T10:23:58Z","creator_user_login":"pedeEli"}
{"number":7661,"comment_id":"1617851425","body":"> is this still being worked on, because i think i have an idea on how to solve this issue?\r\n\r\nCompletely forgot to update this issue, feel free to go ahead and solve this if you have a solution ","updated_at":"2023-07-03T10:29:23Z","created_at":"2023-07-03T10:29:23Z","creator_user_login":"paoloricciuti"}
{"number":7661,"comment_id":"1618065236","body":"do you know of an easy way to test this?","updated_at":"2023-07-03T11:48:51Z","created_at":"2023-07-03T11:48:51Z","creator_user_login":"pedeEli"}
{"number":7661,"comment_id":"1618179587","body":"> do you know of an easy way to test this?\r\n\r\nSure, just copy the code of the action inside the repl, do your modification there. This way you can easily test it","updated_at":"2023-07-03T12:35:45Z","created_at":"2023-07-03T12:35:45Z","creator_user_login":"paoloricciuti"}
{"number":7428,"comment_id":"1094233422","body":"Here is a working version: https://svelte.dev/repl/e6c8287c4a454fb8b8cfa0d474a5f34d?version=3.46.6. The reason is the slot doesn't get passed on to the Icon component because you didn't declare as named slot and because the slot attribute is reserved, you need to use `$$restProps` to pass it to the component.","updated_at":"2022-04-10T09:50:40Z","created_at":"2022-04-10T09:50:40Z","creator_user_login":"abdo643-HULK"}
{"number":7428,"comment_id":"1094235456","body":"There are an issue about slots: https://github.com/sveltejs/svelte/issues/1689","updated_at":"2022-04-10T10:02:10Z","created_at":"2022-04-10T10:02:10Z","creator_user_login":"abdo643-HULK"}
{"number":7428,"comment_id":"1094255778","body":"@abdo643-HULK Thanks a lot for taking the time to find a workaround! Also thanks for pointing out the existing issue, I had overlooked that one.\r\n\r\nI tried the workaround given in that issue, of wrapping the component in the slot inside a `div`. That also works.\r\n\r\nSo there is really something wrong here... Interesting to see that this is something that is over three years old. I guess not many people use custom elements inside Svelte components. Maybe even partly because of this issue.\r\n\r\nJust one question: what do you mean by saying \"because you didn't declare as named slot\"? Did I forget anything?","updated_at":"2022-04-10T11:58:07Z","created_at":"2022-04-10T11:58:07Z","creator_user_login":"winterkind"}
{"number":7428,"comment_id":"1094258931","body":"If svelte doesn't recognise a named slot it won't render it and that's what happend. And passing it as a prop doesn't work because the compiler will complain about slot being dynamic. There are a lot of problems around the compatibility of web-components and svelte and even other frameworks. But because svelte uses something like slot for itself, it starts to interfere with the web-components spec","updated_at":"2022-04-10T12:13:00Z","created_at":"2022-04-10T12:13:00Z","creator_user_login":"abdo643-HULK"}
{"number":7718,"comment_id":"1194207612","body":"I'm split. On one hand - yes, things can be undefined when they don't exist -, on the other hand, if you type this function you probably already made sure that this in fact exists in that part of the code base, so changing this would mean worse ergonomics. Either way, it's a breaking change for everyone who uses strict null checks, so we can do this in Svelte 4 at the earliest.","updated_at":"2022-07-25T15:30:10Z","created_at":"2022-07-25T15:30:10Z","creator_user_login":"dummdidumm"}
{"number":7718,"comment_id":"1194283676","body":"> if you type this function you probably already made sure that this in fact exists in that part of the code base\r\n\r\nSounds reasonable! And in most cases it should be like that indeed, unless you write something pretty generic which can be also used outside the context.\r\nFor example, in a project I'm currently working on we decided to create component-adapters for `<form>` and `<input>` elements. And of course you can use inputs outside a form!","updated_at":"2022-07-25T16:01:03Z","created_at":"2022-07-25T16:01:03Z","creator_user_login":"SoundAsleep192"}
{"number":7718,"comment_id":"1232018878","body":"I would suggest keeping it as is due to the mentioned ergonomics.\r\n\r\nIf a component can validly be used without the given context, the `undefined` can still be added as part of `T`. E.g.\r\n\r\n```ts\r\nconst x = getContext<number | undefined>('key');\r\n```","updated_at":"2022-08-30T18:31:07Z","created_at":"2022-08-30T18:31:07Z","creator_user_login":"brunnerh"}
{"number":7644,"comment_id":"1170943568","body":"`export * from \"./some component.svelte\"` has already a semantic meaning which is unrelated to props. Overloading the meaning would be very confusing, so this isn't an option. I agree thought that it would be cool to have some mechanism to tell that this component implements a certain interface, or that it takes all props a certain other component takes.","updated_at":"2022-06-30T08:47:59Z","created_at":"2022-06-30T08:47:59Z","creator_user_login":"dummdidumm"}
{"number":7644,"comment_id":"1170950078","body":"@dummdidumm agree.\r\n\r\nmy second thought was to do a spread syntax after exports:\r\n\r\n```js\r\nimport * as props from './library'\r\nexport ...props\r\n```","updated_at":"2022-06-30T08:54:16Z","created_at":"2022-06-30T08:54:16Z","creator_user_login":"s1ghn"}
{"number":7644,"comment_id":"1175090373","body":"@dummdidumm \r\n\r\nSo, I thought about this more in detail and played with the compiler a bit.\r\n\r\nThe Problem is that it needs to be valid ECMA, due to using the acorn package. So just spreading as i proposed wouldn't work.\r\n\r\nI would agree not having a different semantic meaning, but to be clear, the \"export\" statement in itself is semantically different from what it does in svelte vs. modules. For me personally i find this not as confusing, because properties designwise are some kind of export which get used by parent components. but from a code perspective its not a module export statement which is compiled. you get my point.\r\n\r\nThen again if you do a named export right now like `export {a, b} from './component.js'` it will actually compile an import statement which is not named (`import './component.js'`), same with export all statements, that are not further used. I don't really know why to be honest? Is this expected behaviour?\r\n\r\nGenerally speaking, i would find it more clear to just use the export statement then to the fullest.\r\n\r\nNot only have let and const but just use Named Exports or *. Create an Import and build them into the props.\r\n\r\nYou could then use just the ECMA Syntax as it is, which i think would be significantly more intuitive for new users, who know the syntax of export and also allow you to reuse components / props and also write interfaces.\r\n\r\nI would want to contribute this code but i want to know what you think about my proposal first.","updated_at":"2022-07-05T13:56:20Z","created_at":"2022-07-05T13:55:05Z","creator_user_login":"s1ghn"}
{"number":7644,"comment_id":"1189236920","body":"Sorry, @fabianschoepgens not quite sure understand what your proposal is about.\r\n\r\nif you are referring to doing \r\n\r\n```svelte\r\n<script>\r\n  export * from './Component.svelte';\r\n</script>\r\n```\r\n\r\nto re-export the props from `./Component.svelte`, then I don't think this is a good idea.","updated_at":"2022-07-19T15:59:33Z","created_at":"2022-07-19T15:59:33Z","creator_user_login":"tanhauhau"}
{"number":7644,"comment_id":"1244839071","body":"This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.","updated_at":"2022-09-13T03:09:22Z","created_at":"2022-09-13T03:09:22Z","creator_user_login":"tanhauhau"}
{"number":7655,"comment_id":"1173953605","body":"Hi @MathiasWP wow, you've made such great progress!\r\n\r\nThanks for picking this up and work on it. There's 1 huge todo that was missing in your list, which is to decide whether to introduce `{#switch}` as well as finalised on the syntax would be.\r\n\r\nThe one mentioned by rich in the video is more of a thinking-out-loud, where the syntax and such has not been finalized by the maintainers.\r\n\r\nI'll help you bring this topic up to the maintainers again, and let you know the decision.","updated_at":"2022-07-04T15:45:03Z","created_at":"2022-07-04T15:45:03Z","creator_user_login":"tanhauhau"}
{"number":7655,"comment_id":"1173994245","body":"> Hi @MathiasWP wow, you've made such great progress!\r\n> \r\n> Thanks for picking this up and work on it. There's 1 huge todo that was missing in your list, which is to decide whether to introduce `{#switch}` as well as finalised on the syntax would be.\r\n> \r\n> The one mentioned by rich in the video is more of a thinking-out-loud, where the syntax and such has not been finalized by the maintainers.\r\n> \r\n> I'll help you bring this topic up to the maintainers again, and let you know the decision.\r\n\r\nHi @tanhauhau, thank you for the kind words!\r\n\r\nI wanted to initiate the implementation of `switch-case` syntax, so i thought the best way would be to simply start, and perform changes along the way! I have no problem with discussing the syntax, i expected this to be honest. Creating the Nodes and parser logic was not difficult, so if we decide to change it then i have no issue changing it!\r\n\r\nThank you for taking this up with the maintainers! Looking forward to hearing what the decision is - no matter the outcome!\r\n\r\nIf it's okay, i'd like to add my thoughts to the syntax discussion. Rich mentioned that having a flat syntax like\r\n\r\n```svelte\r\n{#switch foo}\r\n\tI am default!\r\n{:case \"bar\"}\r\n\tI am bar!\r\n{:case \"baz\"}\r\n\tI am baz!\r\n{/switch}\r\n```\r\n\r\nwas more \"svelte-like\", compared to the following syntax:\r\n\r\n```svelte\r\n{#switch foo}\r\n\t{:case \"bar\"}\r\n\t\tI am bar!  \r\n\t{:case \"baz\"}\r\n\t\tI am baz!\r\n\t{:default}\r\n\t\tI am default!\r\n{/switch}\r\n```\r\n\r\nHowever, i want to address a couple of things:\r\n\r\n### 1. Switch-case statements are not flat by nature\r\n\r\nIf-else blocks are flat by nature:\r\n\r\n```ts\r\nif(foo) {\r\n\treturn 'I am foo'\r\n}\r\nelse if(bar)¬†{\r\n\treturn 'I am bar'\r\n}\r\nelse {\r\n\treturn 'I am default'\r\n}\r\n```\r\n\r\nWhile switch-case blocks are not flat by nature:\r\n\r\n```ts\r\nswitch (key) {\r\n\tcase foo:\r\n\t\treturn 'I am foo'\r\n\r\n\tcase bar:\r\n\t\treturn 'I am bar'\r\n\r\n\tdefault:\r\n\t\treturn 'I am default'\r\n}\r\n```\r\n\r\nProgrammers are already used to switch-case blocks not being flat, so is it important to make them flat in Svelte? I personally think that it looks better when it is not flat.\r\n\r\n### 2. Is it a good idea to change the behaviour of the switch statement?\r\n\r\nI feel that it is a little scary moving the default statement to the top, only to keep the \"flatness\". Personally i believe that Svelte has done a good job at following existing and well known programming concepts and keeping things simple.\r\n\r\nSo why all of the sudden change the switch-case block to behave different than it naturally does?","updated_at":"2022-07-04T17:33:39Z","created_at":"2022-07-04T16:38:16Z","creator_user_login":"MathiasWP"}
{"number":7575,"comment_id":"1142647854","body":"`<svelte:head>` isn't a real element. It's an indicator to the compiler how to treat the elements inside. We don't want to make `<svelte:element>` responsible at runtime for checking whether the element name is one of the names that has a special meaning to Svelte and include all the necessary code for that just in case.\r\n\r\nI'm labeling this \"docs\" because mentioning this in the docs is the most we'd want to do here. I'm personally -0.5 on mentioning this in the docs, but could be swayed by other maintainers.","updated_at":"2022-05-31T21:16:58Z","created_at":"2022-05-31T21:16:58Z","creator_user_login":"Conduitry"}
{"number":7575,"comment_id":"1153083153","body":"@jack-weilage \r\n\r\nWhat is the use case of this?\r\nWhy just using `<svelte:head>` is not enough?\r\n\r\nThis is a personal opinion, but I feel that including this in the documentation would make more noise than information gained.","updated_at":"2022-06-12T06:24:43Z","created_at":"2022-06-12T06:24:43Z","creator_user_login":"baseballyama"}
{"number":7575,"comment_id":"1153265317","body":"I was working on a component which had data that could be placed into either the header or body, depending on a prop, kinda like:\r\n```html\r\n<script>\r\n    export let output;\r\n    export let data;\r\n</script>\r\n\r\n<#if output === \"head\">\r\n    <svelte:head>\r\n        <@html data>\r\n        <!-- other html... -->\r\n    </svelte:head>\r\n<:else>\r\n    <div>\r\n        <@html data>\r\n        <!-- other html... -->\r\n    </div>\r\n</if>\r\n```\r\nand I thought that I could remove the repeated html (a lot longer than this example) with code like\r\n```html\r\n<script>\r\n    export let output;\r\n    export let data;\r\n\r\n    $: element = output === \"head\" ? \"svelte:head\" : \"div\"\r\n</script>\r\n\r\n<svelte:element this={element}>\r\n    <@html data>\r\n    <!-- other html... -->\r\n</svelte:element>\r\n```\r\n\r\nWe could just add a line to the documentation for `svelte:element` saying \r\n> `this` cannot be a `svelte` namespaced element.\r\n","updated_at":"2022-06-12T19:10:45Z","created_at":"2022-06-12T19:10:45Z","creator_user_login":"jack-weilage"}
{"number":7806,"comment_id":"1223498684","body":"Did you forget to add the link to \"the application\"? Please provide a reproduction in a repository form or a REPL link. There's much we can do with this little information. ","updated_at":"2022-08-23T03:49:09Z","created_at":"2022-08-23T03:49:09Z","creator_user_login":"jasonlyu123"}
{"number":7806,"comment_id":"1224555281","body":"I cannot expose all the code due to client's NDA, but I can share the public link to the application: http://35.166.98.10:8080/spy, I can also share the specific lines involved in a repository format or try to make a simpler REPL of that part of the app is that works.  I'll work on that and come back. In the meantime, any hint might help.","updated_at":"2022-08-23T18:38:09Z","created_at":"2022-08-23T18:27:10Z","creator_user_login":"codewithpatelo"}
{"number":7806,"comment_id":"1224628296","body":"Here you have the REPL link with the code related with the problem: https://replit.com/join/jnafdssdbw-patriciojulian","updated_at":"2022-08-23T18:59:07Z","created_at":"2022-08-23T18:59:07Z","creator_user_login":"codewithpatelo"}
{"number":7806,"comment_id":"1284524960","body":"Please provide a simple, minimal reproduction of the issue, preferably as a link to Svelte own REPL. When I click the link you gave above, I'm asked to log in or register.","updated_at":"2022-10-19T20:17:02Z","created_at":"2022-10-19T20:17:02Z","creator_user_login":"Conduitry"}
{"number":8198,"comment_id":"1385344880","body":"The attributes getting reapplied is not specifically because of spread attributes. It is normal that the components get re-rendered when a state in the component changes and when it does it uses the current state value.\r\n\r\nReferring to the [link](https://svelte.dev/repl/1b3257d4624d4b4b80d45c182310a486?version=3.55.1) you have shared to reproduce the error, you have updated the state of toggle when focus is out of the input element and you doesn't maintain the state of the input element(no bind or on:change handler has been used).\r\n\r\nWhen the element is out of focus the handler is called and hence the state changes, which will trigger the component to be updated. If you keep the toggle commented, then the component is not updated.\r\n\r\n`<input type=\"text\" {...attrs} bind:value={attrs.value} on:blur={handleBlur} />`\r\n\r\nIf you add the bind to the value attribute then the state is retained in the attrs.value and hence when the component is updated the value from attrs.value is used.\r\n\r\nHence I don't feel it as an unexpected behaviour! Hope it makes sense.","updated_at":"2023-01-17T12:22:37Z","created_at":"2023-01-17T12:22:00Z","creator_user_login":"mr0a"}
{"number":8198,"comment_id":"1385953375","body":"Thank you for helping look into this! I do understand the component re-rendering is causing my issue/misunderstanding. But I'm still not entirely clear why spread attributes are being treated differently from how normal attributes are treated during re-renders.\r\n\r\nFor example, you mentioned `bind:value` or `on:change` would be needed to explicitly track the state. But I [can actually do that](https://svelte.dev/repl/6ba5fe04e3a44be88efd63bc91169cbc?version=3.55.1) without using either. I could also just do `value={attrs.value}` (still without `bind:`) and it also [works the same](https://svelte.dev/repl/7bf89a694058480e9864ff424a133ebe?version=3.55.1) that I expect spread attributes would.\r\n\r\nIf it's similar to other reactivity in Svelte, I would expect spread attributes to _only_ get reapplied if the referenced object changes through reassignment, or if one of the nested properties changes. ü§î If that makes sense? Thanks again!","updated_at":"2023-01-17T19:40:29Z","created_at":"2023-01-17T19:40:29Z","creator_user_login":"dslatkin"}
{"number":8267,"comment_id":"1423397961","body":"This is a Svelte issue rather than a SvelteKit issue ‚Äî transferring to that repo","updated_at":"2023-02-09T00:03:52Z","created_at":"2023-02-09T00:03:52Z","creator_user_login":"Rich-Harris"}
{"number":8267,"comment_id":"1604889120","body":"@ebeloded would you be able to check if this issue is still present in Svelte 4?","updated_at":"2023-06-23T20:11:49Z","created_at":"2023-06-23T20:11:49Z","creator_user_login":"benmccann"}
{"number":8267,"comment_id":"1606416874","body":"@benmccann yes, I can confirm that the problem persists with Svelte 4. \r\n\r\nI created a reproduction in stackblitz with svelte 4, which contains the default app + mutations observer added in app.html:\r\n\r\nhttps://stackblitz.com/edit/sveltejs-kit-template-default-c4ryyv\r\n\r\nIn the console you can see the log of applied mutations - most of them are about adding/removing empty text nodes:\r\n![CleanShot 2023-06-26 at 08 42 48@2x](https://github.com/sveltejs/svelte/assets/5859177/844e5974-92a0-47c1-825c-d93baac46a1e)\r\n\r\nThe desired behavior is to have none of those mutations.","updated_at":"2023-06-26T01:48:54Z","created_at":"2023-06-26T01:48:54Z","creator_user_login":"ebeloded"}
{"number":8211,"comment_id":"1397748650","body":"You break the dependency analysis by using `store.set(...)` rather than `$store = ...`.\r\n\r\nChange\r\n```js\r\n$: s.set(clickCount)\r\n```\r\nto\r\n```js\r\n$: $s = clickCount\r\n```\r\n\r\nand Svelte will order the statements correctly.\r\n\r\nOriginal compiled update order:\r\n```js\r\n$$self.$$.update = () => {\r\n\tif ($$self.$$.dirty & /*$s*/ 1) {\r\n\t\t// defining these two statments are defined before the set statement it results in weird reactivity behavior, but defined at the bottom of this script, it works correctly.\r\n\t\t// try commenting these two lines and uncommenting the corresponding lines below\r\n\t\t$: console.log($s);\r\n\t}\r\n\r\n\tif ($$self.$$.dirty & /*$s*/ 1) {\r\n\t\t$: $$invalidate(1, directReaction = $s);\r\n\t}\r\n\r\n\tif ($$self.$$.dirty & /*clickCount*/ 16) {\r\n\t\t$: s.set(clickCount);\r\n\t}\r\n};\r\n```\r\n\r\nAfter change:\r\n```js\r\n$$self.$$.update = () => {\r\n\tif ($$self.$$.dirty & /*clickCount*/ 16) {\r\n\t\t$: set_store_value(s, $s = clickCount, $s);\r\n\t}\r\n\r\n\tif ($$self.$$.dirty & /*$s*/ 1) {\r\n\t\t// defining these two statments are defined before the set statement it results in weird reactivity behavior, but defined at the bottom of this script, it works correctly.\r\n\t\t// try commenting these two lines and uncommenting the corresponding lines below\r\n\t\t$: console.log($s);\r\n\t}\r\n\r\n\tif ($$self.$$.dirty & /*$s*/ 1) {\r\n\t\t$: $$invalidate(1, directReaction = $s);\r\n\t}\r\n};\r\n```\r\n\r\nThe order can also just manually be fixed in cases where the topological ordering is not possible, so this would work too:\r\n```js\r\n$: s.set(clickCount)\r\n$: directReaction = $s\r\n```","updated_at":"2023-01-19T23:45:39Z","created_at":"2023-01-19T23:41:41Z","creator_user_login":"brunnerh"}
{"number":8211,"comment_id":"1398459817","body":"Interesting. I would have guessed $s = clickCount is just syntactic sugar for s.set(clickCount). So, is there any reason one should ever use Store.set() vs $store = x? Thanks for the info!","updated_at":"2023-01-20T14:20:02Z","created_at":"2023-01-20T14:20:02Z","creator_user_login":"Kcwidman"}
{"number":8211,"comment_id":"1398722489","body":"Outside of Svelte files you can't use the special syntax e.g. when implementing custom stores.","updated_at":"2023-01-20T17:33:04Z","created_at":"2023-01-20T17:33:04Z","creator_user_login":"brunnerh"}
{"number":8211,"comment_id":"1478012504","body":"Re-opening this issue because I found an example where your suggestion doesn't solve the issue. Namely, this same behavior isn't fixed by using the `$` notation to set a store vs `.set`. If the `$s = someVal` occurs inside of a function, this same behavior persists. Is there some other solution/issue with my code? Or is this an issue with svelte reactivity?\r\n\r\nhttps://svelte.dev/repl/461f1b59c3e74177a1dcaa3371933bb8?version=3.57.0","updated_at":"2023-03-21T15:10:09Z","created_at":"2023-03-21T15:10:09Z","creator_user_login":"Kcwidman"}
{"number":8218,"comment_id":"1399278553","body":">When creating a component, I notice that there are essentially three types of props:\r\n>\r\n>1. Those that **should** be bound with `bind:name`, otherwise the component doesn't work properly\r\n>2. Those that **could** be bound with `bind:name`\r\n>3. Those that **should** be static data or configuration: `key=\"configValue\"`\r\n\r\nGiven the following typed component example:\r\n\r\n```ts\r\nexport default class Dropdown extends SvelteComponentTyped<{\r\n    [x: string]: any;\r\n    selectedId: any;\r\n    invalid?: boolean;\r\n    size?: \"sm\" | \"xl\" | \"lg\";\r\n    // ...\r\n}>\r\n```\r\n\r\nWe know that:\r\n\r\n1. `selectedId` is required, but we're not sure if the component writes to it (implied 2-way binding)\r\n2. `invalid` is optional, but we're not sure if there's 2-way binding available\r\n\r\nWith Sveld, we collect and document \"Reactive\" props by determining which variables are `writable` and `reassigned`. Here's the [logic for collecting reactive variables](https://github.com/carbon-design-system/sveld/blob/f2ad4aab49a23ce460c7d1e139a50113490129b9/src/ComponentParser.ts#L161-L165).\r\n\r\nI don't know if there's a way to indicate `reassigned` with TypeScript. Perhaps as an idea to solve for 1-3 above, inferred types for 2-way-bound props could include a `Supports 2-way binding` message in the prop popover. I'm not sure about the i18n efforts involved, so if hard-coding this in English isn't appropriate, perhaps a non-standard `@bound` tag could be used instead. Here's how that might look:\r\n\r\n![image](https://user-images.githubusercontent.com/12798751/213875702-23638660-73e0-4ce1-b4d0-2671ed585f8c.png)\r\n","updated_at":"2023-01-21T16:07:13Z","created_at":"2023-01-21T16:00:29Z","creator_user_login":"theetrain"}
{"number":8218,"comment_id":"1399284207","body":"https://github.com/sveltejs/svelte/issues/7525","updated_at":"2023-01-21T16:32:48Z","created_at":"2023-01-21T16:32:48Z","creator_user_login":"Prinzhorn"}
{"number":8218,"comment_id":"1402613021","body":"Wouldn't it be more typescript-y to define non-reassignable variables the `readonly` type qualifier? That might also enable enforcement/hinting of the immutable component option.\r\n\r\nhttps://svelte.dev/tutorial/svelte-options","updated_at":"2023-01-24T20:37:09Z","created_at":"2023-01-24T20:37:09Z","creator_user_login":"coryvirok"}
{"number":8101,"comment_id":"1345655228","body":"I think it's the wrong repository to post this issue: This is the repository of the language/framework, not of the lib/project template.\r\nIt should be on the template repositories or on the kit repository.\r\n\r\nSecondly, Prettier is an option, not an obligation. In the templates, you are asked if you want it or not.\r\n_(And in the SvelteKit template, the plugin `prettier-plugin-svelte` is already added)_\r\n\r\nNext, VSCode is popular, I know, but not everyone uses it. There are plenty of other tools/applications to write Svelte code (JetBrains IDE, Netbeans, Eclipse, Atom, TextMate, vi (and its derivatives like vim, neovim, etc.), emacs, CodeSandbox, CodePen, etc.)\r\nIf configuration is done for VSCode, configuration for all others IDE/editor should also be added.\r\nIn the end, the repo will have lots of boilerplate code/configuration not used.\r\n\r\n---\r\n\r\nBut that only my opinion, I have no power here :sweat_smile: ","updated_at":"2022-12-11T21:01:11Z","created_at":"2022-12-11T21:01:11Z","creator_user_login":"MacFJA"}
{"number":8101,"comment_id":"1354725260","body":"@mislam I think this info would be beneficial to have, but how about adding it to the README of the [plugin itself](https://github.com/sveltejs/prettier-plugin-svelte)? I'd love to see a section on IDE setups, including the VSCode snippet you've provided ","updated_at":"2022-12-16T12:53:59Z","created_at":"2022-12-16T12:53:59Z","creator_user_login":"stordahl"}
{"number":7561,"comment_id":"1138873908","body":"I guess the question is whether `on:click|stopPropagation={null}` should stop propagation or not. (If it does, we need to attach an event handler to do that.) If we were designing this feature fresh today, I'm not sure what my opinion on that would be. But since this is how the feature has behaved for years, I would definitely be in favor of documenting it and not changing the behavior.","updated_at":"2022-05-26T18:13:28Z","created_at":"2022-05-26T18:13:28Z","creator_user_login":"Conduitry"}
{"number":7561,"comment_id":"1139342417","body":"My question is actually \"How to add or remove event listener dynamically ? \"\r\nI don't want to call any \"addEventListener\" \r\nIf I pass null, svelte should remove the listener, and If I pass any callBack on runtime, It should add listener.","updated_at":"2022-05-27T07:02:23Z","created_at":"2022-05-27T07:01:59Z","creator_user_login":"humbleCoder1990"}
{"number":7561,"comment_id":"1155179020","body":"@humbleCoder1990 you can probably achieve something like that with an `action` instead of using `on:{eventname}`. here's a rough example:\r\n\r\n```js\r\nfunction conditionalEvent(node, callback) {\r\n  let _callback;\r\n\r\n  function setListener(callback) {    \r\n    if (callback) {\r\n      node.addEventListener('click', callback);\r\n      _callback = callback; // save callback for when it's null\r\n    } else {\r\n      node.removeEventListener('click', _callback);\r\n      _callback = null;\r\n    }\r\n  }\r\n\r\n  setListener(callback);\r\n\r\n  return {\r\n    update(callback) {\r\n      setListener(callback)\r\n    },\r\n    destroy() {\r\n      node.removeEventListener('click', _callback);\r\n      _callback = null;\r\n    }\r\n  }\r\n}\r\n```\r\nhttps://svelte.dev/repl/7aeb74bcc4b44308bb3ab6ac0da734c3?version=3.48.0","updated_at":"2022-06-14T13:21:27Z","created_at":"2022-06-14T13:20:35Z","creator_user_login":"kindoflew"}
{"number":7567,"comment_id":"1140391853","body":"Please provide a complete reproduction using the [REPL](https://svelte.dev/repl/hello-world)","updated_at":"2022-05-29T07:10:44Z","created_at":"2022-05-29T07:10:44Z","creator_user_login":"dummdidumm"}
{"number":7567,"comment_id":"1140404050","body":"@dummdidumm I tried to reproduce it on the REPL that I added, but there it is working. The scenario is a bit complex, as I fetch some async data and the click handler that causes the error lies in an if-block.\r\n\r\nAlso the component that I show (comp1) has another conditional component inside (comp2).","updated_at":"2022-05-29T08:40:38Z","created_at":"2022-05-29T08:39:42Z","creator_user_login":"kevinXmichael"}
{"number":7567,"comment_id":"1229112717","body":"> ### Describe the bug\r\n> When I use a `{#key}` block that has a reactive variable from a store (let's call it `someVar`), my binding for a component will get lost. On initial render this variable is bound and I can interact with my component. But when `someVar` changes, I cannot longer use the component, the binding turns `undefined` or `null`.\r\n> \r\n> Is this intended? Or is there a workaround? When I just put the component outside that block it will work, but will cause me some \"flickering\" in the UI that I want to prevent.\r\n> \r\n> ### Reproduction\r\n> This this [REPL](https://svelte.dev/repl/bbef7e7043744e9eb9467c9197d63727?version=3.48.0).\r\n> \r\n> ### Logs\r\n> This is a dialog component with a click handler that calls a `show` function.\r\n> \r\n> `Uncaught TypeError: Cannot read properties of null (reading 'show') at HTMLDivElement.click_handler`\r\n> \r\n> ### System Info\r\n> ```shell\r\n> - macOS v12.4\r\n> - Chrome v102\r\n> - vscode\r\n> ```\r\n> \r\n> ### Severity\r\n> annoyance\r\n\r\nhappening to me as well when using it with  array and SveltyPicker component whenever anything on the array changed all the dates in the array turn null.\r\ni also having a problem because im renderin this array into a table using each and if blocks , but some changes are not making it rerender correctly and cousin errors (undefined on sometime  that use to be excluded by if and now need to be rendered) the only thing that make it reactiv is the key blocks.. ","updated_at":"2022-08-27T03:31:11Z","created_at":"2022-08-27T03:31:11Z","creator_user_login":"Avi-ADAM"}
{"number":7567,"comment_id":"1244890440","body":"@kevinXmichael the REPL you shared is working, even if i tried to call `update()`. is there a way i can replicate your issue?\r\n\r\n@Avi-ADAM could you please share a reproduction using the https://svelte.dev/repl, this would help a lot on figuring out what's going wrong","updated_at":"2022-09-13T04:43:33Z","created_at":"2022-09-13T04:43:33Z","creator_user_login":"tanhauhau"}
{"number":8130,"comment_id":"1359257925","body":"I think the way you phrased everything makes it hard to follow and very unspecific. I honestly don't even know what exactly you're asking for or what your problem is. Do you use SSR? It's not clear from what you said but it's the only explanation I can think of that explain what you're trying to say.\r\n\r\nCan you show a code example of what you are trying to do and where you think Svelte should help you? That would make things a lot easier to follow. Preferably using the [REPL](https://svelte.dev/repl/hello-world)","updated_at":"2022-12-20T12:01:07Z","created_at":"2022-12-20T12:01:07Z","creator_user_login":"Prinzhorn"}
{"number":8130,"comment_id":"1359292712","body":"i think he is talking about this:\r\n\r\n```js\r\nonMount(()=>{\r\n  if (browser) {\r\n    console.log('window is ready', window)\r\n  }\r\n})\r\n```","updated_at":"2022-12-20T12:34:47Z","created_at":"2022-12-20T12:34:47Z","creator_user_login":"woss"}
{"number":8130,"comment_id":"1361025373","body":"The line between helpful syntactic sugar and too much compiler magic is thin. I totally agree, having to use if-statements and livecycle hooks only to be sure that `window` is available is kinda... frustrating. It adds nothing to help your mental model. But I am a bit skeptical about how it feel like when you can refer to `window` everywhere and the compiler will make it so every code that uses `window` only executes when he browser is ready. Well, it could work and it could fit into our way of interpreting code in our head, but it would definitely be a lot of compiler magic. The thumb rule would be: \"Code that uses `window` only runs once `window` is defined.\"\r\n\r\nIn comparison, this is actually not much more magic than the reactive label that basically runs everytime a used variable inside the label changes by assignment. So I think its worth a thought at least.","updated_at":"2022-12-21T08:52:03Z","created_at":"2022-12-21T08:52:03Z","creator_user_login":"KevsRepos"}
{"number":8112,"comment_id":"1511287647","body":"I just found out that I'm a victim of this too. It's a really nasty \"bug\" because like you mentioned it went unnoticed for a long time.\r\nI only caught it now because I manually used Google Rich Results Test only to find our `json+ld` is invalid because everything is duplicated.\r\n\r\nI had to turn off cloudflare HTML  auto minify (Credits to you)","updated_at":"2023-04-17T12:56:55Z","created_at":"2023-04-17T12:56:55Z","creator_user_login":"imdj"}
{"number":8112,"comment_id":"1512136146","body":"It sure would be great if this sneaky bug was fixed!","updated_at":"2023-04-17T21:59:23Z","created_at":"2023-04-17T21:59:23Z","creator_user_login":"ryans-usafacts"}
{"number":8112,"comment_id":"1572332369","body":"I'm noticing this issue too. It's causing a problem with my theme system as if the user changes their theme, the head element is not being correctly updated to remove the old stylesheet when the new one is included. This leads to both stylesheets being active at the same time, and has created an annoying difference between development and production builds.","updated_at":"2023-06-01T16:05:08Z","created_at":"2023-06-01T16:05:08Z","creator_user_login":"NickantX"}
{"number":8112,"comment_id":"1700232833","body":"+1","updated_at":"2023-08-31T01:51:54Z","created_at":"2023-08-31T01:51:54Z","creator_user_login":"LittleTasteOfHeaven"}
{"number":8166,"comment_id":"1382152101","body":"To follow the standards, it seems to me that it is better to follow the traditional way. \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent","updated_at":"2023-01-13T17:12:31Z","created_at":"2023-01-13T17:12:31Z","creator_user_login":"msf-caesar"}
{"number":8166,"comment_id":"1382165369","body":"I believe what he is asking is could the `on:` directive take a variable for attribute name.\r\n```\r\n<Button  on:{MY_CUSTOM_EVENT}={onMyCustomEvent} />\r\n```\r\nThere is nothing really related to standards in this respect.","updated_at":"2023-01-13T17:25:18Z","created_at":"2023-01-13T17:25:18Z","creator_user_login":"BigAB"}
{"number":8166,"comment_id":"1382171088","body":"There is an alternative for now.\r\n\r\nFor element events, you can write an action to attach the event handler and detach it.\r\n\r\nFor component events, you could use `bind:this` to get a reference to an instance of the component, and then manually subscribe using the component API (and make sure to manually unsubscribe when appropriate) - https://svelte.dev/docs#run-time-client-side-component-api-$on","updated_at":"2023-01-13T17:30:52Z","created_at":"2023-01-13T17:30:52Z","creator_user_login":"Conduitry"}
{"number":8166,"comment_id":"1382174197","body":"This isn't really about standard. Looking at the example you sent @msf-caesar, I think a better way of doing this would be:\r\n\r\n```js\r\n\r\nconst ANIMAL_FOUND_EVENT = 'animalfound';\r\n\r\n// create custom events\r\nconst catFound = new CustomEvent(ANIMAL_FOUND_EVENT, {\r\n  detail: {\r\n    name: 'cat'\r\n  }\r\n});\r\nconst dogFound = new CustomEvent(ANIMAL_FOUND_EVENT, {\r\n  detail: {\r\n    name: 'dog'\r\n  }\r\n});\r\n\r\n// add an appropriate event listener\r\nobj.addEventListener(ANIMAL_FOUND_EVENT, (e) => console.log(e.detail.name));\r\n\r\n// dispatch the events\r\nobj.dispatchEvent(catFound);\r\nobj.dispatchEvent(dogFound);\r\n\r\n```\r\nThis code is more maintainable and easier to read.","updated_at":"2023-01-13T17:32:50Z","created_at":"2023-01-13T17:32:50Z","creator_user_login":"jwerre"}
{"number":8111,"comment_id":"1352159637","body":"I got that error too, but on the one hand it doesn't make sense. Try using `<svelte:options>`.","updated_at":"2022-12-14T20:54:21Z","created_at":"2022-12-14T20:54:21Z","creator_user_login":"msf-caesar"}
{"number":8111,"comment_id":"1352161538","body":"> I got that error too, but on the one hand it doesn't make sense. Try using `<svelte:options>`.\r\n\r\nThanks for your response, but not sure how can `<svelte:options>` help? Could you please elaborate? Thank you.\r\n\r\nAlso not sure why it does not make sense to do this?","updated_at":"2022-12-14T21:15:04Z","created_at":"2022-12-14T20:56:15Z","creator_user_login":"shirotech"}
{"number":8111,"comment_id":"1354716529","body":"@shirotech Do you have a repro?","updated_at":"2022-12-16T12:49:48Z","created_at":"2022-12-16T12:49:48Z","creator_user_login":"stordahl"}
{"number":8111,"comment_id":"1367709655","body":"Be sure to mount it once, I suggest you post a REPL.\r\n\r\n> > I got that error too, but on the one hand it doesn't make sense. Try using `<svelte:options>`.\r\n> \r\n> Thanks for your response, but not sure how can `<svelte:options>` help? Could you please elaborate? Thank you.\r\n> \r\n> Also not sure why it does not make sense to do this?\r\n\r\n","updated_at":"2022-12-30T03:57:42Z","created_at":"2022-12-30T03:57:42Z","creator_user_login":"msf-caesar"}
{"number":8111,"comment_id":"1426675809","body":"I'm experiencing the same issue with svelte head, tried creating a REPL but svelte.dev won't let me save without logging in, and the Github-based login isn't working for me (the window flickers and closes). Moreover, REPL doesn't show title so it's kinda useless in that regard anyway. To reproduce it, you can literally just use something along the lines of:\r\n\r\nBox.svelte:\r\n```\r\n<svelte:head>\r\n\t<slot name=\"meta\">\r\n\t\t<title>original</title>\r\n\t</slot>\r\n</svelte:head>\r\n\r\n<div class=\"box\">\r\n\t<slot name=\"box\"></slot>\r\n</div>\r\n```\r\n\r\nApp.svelte:\r\n```\r\n<script>\r\n\timport Box from './Box.svelte';\r\n</script>\r\n\r\n<Box>\r\n\t<title slot=\"meta\">new</title>\r\n\t<div slot=\"box\">\r\n\t\tfoo\r\n\t</div>\r\n</Box>\r\n```\r\nExpected result: page title becomes \"new\"\r\nActual result: page title stays \"original\" and \"new\" gets appended as another title element at the bottom of head. This 2nd instance of title gets ignored by the browser.","updated_at":"2023-02-11T09:37:35Z","created_at":"2023-02-11T09:35:36Z","creator_user_login":"atsepkov"}
{"number":8184,"comment_id":"1377855933","body":"The initial double logging sounds like https://github.com/sveltejs/svelte/issues/5689\r\n\r\nThe double logging when clicking the button seems to be caused by `x = x`, can you explain the intent? If you have `$: x, y, console.log('hello');` it logs once and should do exactly the same?\r\n\r\nEdit:\r\n\r\n> Ran into this when trying to use the Broadcast Channel API to sync bound Svelte variables across tabs. The extra call would cause infinite loops in sending messages between tabs.\r\n\r\nSame, see https://github.com/sveltejs/svelte/issues/6298, which is just a special case of #5689","updated_at":"2023-01-10T21:12:01Z","created_at":"2023-01-10T21:08:37Z","creator_user_login":"Prinzhorn"}
{"number":8184,"comment_id":"1377864115","body":"Sorry, I just edited the repro (now it's `x = {...x}`).\r\n\r\nMy use case was to have updates to `x` in the parent also trigger the reactive statement, which would sometimes update the value of `x` itself.\r\n\r\nEdit:\r\n\r\n> Same, see https://github.com/sveltejs/svelte/issues/6298, which is just a special case of https://github.com/sveltejs/svelte/issues/5689\r\n\r\nFrom what I understand, those issues were temporarily fixed from v3.54.0 to v3.55.0 but that doesn't seem to be the case for this issue: https://svelte.dev/repl/2b38363381f6400b9b9a8a870fbb7b24?version=3.54.0","updated_at":"2023-01-10T21:20:45Z","created_at":"2023-01-10T21:12:46Z","creator_user_login":"zqianem"}
{"number":8184,"comment_id":"1377894659","body":"To be clear, based on https://github.com/sveltejs/svelte/issues/6298#issuecomment-1368674996, this behavior isn't really a bug and instead an example of conservative reactivity. I just wanted to document the reproduction and the `<svelte:options immutable/>` workaround.","updated_at":"2023-01-10T21:28:14Z","created_at":"2023-01-10T21:28:14Z","creator_user_login":"zqianem"}
{"number":8184,"comment_id":"1378431371","body":"> From what I understand, those issues were temporarily fixed from v3.54.0 to v3.55.0 but that doesn't seem to be the case for this issue:\r\n\r\nYou are right, but it _did_ change the initial logging behavior (the fix was for initial binding after all)\r\n\r\nTwice: https://svelte.dev/repl/2b38363381f6400b9b9a8a870fbb7b24?version=3.53.1\r\nOnce: https://svelte.dev/repl/2b38363381f6400b9b9a8a870fbb7b24?version=3.54.0","updated_at":"2023-01-11T09:03:25Z","created_at":"2023-01-11T09:03:25Z","creator_user_login":"Prinzhorn"}
{"number":7193,"comment_id":"1023256715","body":"I don't think we want to have two ways of doing the same thing. The default store implementations are just examples that could well live in userland. Nothing is really an integral part of the framework apart from the store contact. If someone wanted to publish their own store classes that they feel make it easier to create stores, they're of course free to do so. Add long as the resultant objects abide by the store contact, it wouldn't matter where they came from.","updated_at":"2022-01-27T14:17:41Z","created_at":"2022-01-27T14:17:41Z","creator_user_login":"Conduitry"}
{"number":7193,"comment_id":"1023272281","body":"That's right, I'm definitely aware that you can create these classes yourself if you want, but that means you'd then have to mostly duplicate the work already done [here](https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts). And that doesn't make much sense.\r\n\r\nMy suggestion here is that I think it would be very useful if Svelte provided its **standard**, **canonical** implementation of stores as classes that could then be extended by users, and also if it started promoting this as the recommended way to create custom stores, since as I explained, this is in fact the superior approach.","updated_at":"2022-01-27T14:47:00Z","created_at":"2022-01-27T14:33:15Z","creator_user_login":"ponderingexistence"}
{"number":7193,"comment_id":"1023358424","body":"Seems like a duplicate of #6640","updated_at":"2022-01-27T15:50:37Z","created_at":"2022-01-27T15:50:37Z","creator_user_login":"bluwy"}
{"number":7193,"comment_id":"1024348602","body":"> Seems like a duplicate of #6640\r\n\r\nWell, kind of.\r\nThe OP there didn't really elaborate on the various reasons as to WHY classes would be superior, so the suggestion was dismissed more or less out of hand.\r\nHere, on the other hand, I've outlined exactly why this has several key advantages over the current approach. If you believe any of the points I made are invalid, I'd love to hear your thoughts.","updated_at":"2022-01-28T15:50:32Z","created_at":"2022-01-28T15:50:16Z","creator_user_login":"ponderingexistence"}
{"number":7193,"comment_id":"1024918534","body":"> Access to the current value without subscription\r\n\r\nI agree that `get()` makes things awkward, but that's because of how the store contract works, which is an object with a subscribe method. I think the better solution is to have `writable` specifically to have a `.get()` function, but that's a topic for another day.\r\n\r\n> Polymorphism\r\n\r\nIt does look like a class would make the implementation cleaner, though it relies on the fact that we know the `Store` `update()` calls `set()` internally. I'm not sure if this is a safe assumption, if we want to extend other external stores, they might not implement the logic the same way. In the end, we have to re-implement `update()` too with the same tedious code.\r\n\r\n---\r\n\r\nThough with all these said, I don't think classes are bad. There are trade-off between classes and functions, e.g. classes can't be spreaded. And in my experience, I don't always extend a store, my custom function may use multiple stores in which the syntax between classes and functions aren't much different.\r\n\r\nFor now, I think a better path is to implement these class alternative in userland first, and if it proves to be more handy than functions, then this proposal would have a solid start from the get-go.","updated_at":"2022-01-29T14:06:26Z","created_at":"2022-01-29T14:06:26Z","creator_user_login":"bluwy"}
{"number":7226,"comment_id":"1030527269","body":"I opened #2152 for this ages ago but it got closed at some point.","updated_at":"2022-02-05T04:59:52Z","created_at":"2022-02-05T04:59:52Z","creator_user_login":"Conduitry"}
{"number":7226,"comment_id":"1030530429","body":"Ah. And from there I see that @tanhauhau even had a PR at one point to implement the performance improvement: https://github.com/sveltejs/svelte/pull/4297","updated_at":"2022-02-05T05:23:36Z","created_at":"2022-02-05T05:23:36Z","creator_user_login":"benmccann"}
{"number":7226,"comment_id":"1030623283","body":"Yeah, which was opening the can of worms about hydration trusting that is starting HTML was accurate, which isn't something we can assume generally. There's definitely work to do here, but there's planning first.\n\nWill this be done in a compatible, opt-in way? Will it be a Svelte 4 thing? Will there be a way to tell the compiler to not trust certain bits of the DOM when hydrating?","updated_at":"2022-02-05T13:17:35Z","created_at":"2022-02-05T13:17:35Z","creator_user_login":"Conduitry"}
{"number":7226,"comment_id":"1052775033","body":"Recap of discussion earlier today: we could do this by changing the output of [this](https://svelte.dev/repl/72a3b69490fd4cfb9123ad2ce3823c7a?version=3.46.4)...\r\n\r\n```svelte\r\n<div>\r\n\t<p>some HTML</p>\r\n</div>\r\n```\r\n\r\n...like so:\r\n\r\n```diff\r\n/* App.svelte generated by Svelte v3.46.4 */\r\nimport {\r\n\tSvelteComponent,\r\n\tappend_hydration,\r\n\tchildren,\r\n\tclaim_element,\r\n\tclaim_text,\r\n\tdetach,\r\n\telement,\r\n\tinit,\r\n\tinsert_hydration,\r\n\tnoop,\r\n\tsafe_not_equal,\r\n\ttext\r\n} from \"svelte/internal\";\r\n\r\nfunction create_fragment(ctx) {\r\n\tlet div;\r\n\tlet p;\r\n\tlet t;\r\n\r\n\tconst innerHTML = \"some HTML\";\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\tdiv = element(\"div\");\r\n-\t\t\tp = element(\"p\");\r\n-\t\t\tt = text(\"some HTML\");\r\n+\t\t\tdiv.innerHTML = innerHTML;\r\n\t\t},\r\n\t\tl(nodes) {\r\n\t\t\tdiv = claim_element(nodes, \"DIV\", {});\r\n-\t\t\tvar div_nodes = children(div);\r\n-\t\t\tp = claim_element(div_nodes, \"P\", {});\r\n-\t\t\tvar p_nodes = children(p);\r\n-\t\t\tt = claim_text(p_nodes, \"some HTML\");\r\n-\t\t\tp_nodes.forEach(detach);\r\n-\t\t\tdiv_nodes.forEach(detach);\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert_hydration(target, div, anchor);\r\n\t\t\tappend_hydration(div, p);\r\n\t\t\tappend_hydration(p, t);\r\n\t\t},\r\n\t\tp: noop,\r\n\t\ti: noop,\r\n\t\to: noop,\r\n\t\td(detaching) {\r\n\t\t\tif (detaching) detach(div);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nclass App extends SvelteComponent {\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n(Note that the `c()` block is just what you get with `hydratable: false`.)\r\n\r\nThis assumes that the server and client renders match. In order for this to be a non-breaking change (and more generally, to deal with the possibility that they _don't_ match), we could add a hash of the HTML during SSR so that it looks something like this...\r\n\r\n```html\r\n<div svelte:hash=\"xyz123\">\r\n\t<p>some HTML</p>\r\n</div>\r\n```\r\n\r\n...and update the compiler output accordingly:\r\n\r\n```diff\r\n\t\tl(nodes) {\r\n\t\t\tdiv = claim_element(nodes, \"DIV\", {});\r\n+\t\t\tif (div.getAttribute('svelte:hash') !== 'xyz123') div.innerHTML = innerHTML;\r\n```\r\n\r\n`svelte:hash` open to bikeshedding, obviously.","updated_at":"2022-02-26T23:20:25Z","created_at":"2022-02-26T23:20:25Z","creator_user_login":"Rich-Harris"}
{"number":7226,"comment_id":"1062177409","body":"The biggest impact I've seen is actually shipping the hydration code over the wire. We could simply check if the contents are equal directly and then do `div.innerHTML = innerHTML` if they are not to get a big win by really shrinking the size of the hydration code","updated_at":"2022-03-08T20:26:32Z","created_at":"2022-03-08T20:26:32Z","creator_user_login":"benmccann"}
{"number":6923,"comment_id":"967830044","body":"Almost certainly related to Svelte's use of regexes for finding things like the `<script>` and `<style>` tags. See #6844 which was also caused by a regex in the Svelte compiler, and https://github.com/sveltejs/kit/issues/2742#issuecomment-962531568 where @Conduitry was pondering switching away from regexes to a proper HTML parser. That would be slower, but the speed penalty would only be paid at compile-time and wouldn't affect the speed of the compiled code.","updated_at":"2021-11-13T08:40:41Z","created_at":"2021-11-13T08:40:41Z","creator_user_login":"rmunn"}
{"number":6923,"comment_id":"967840797","body":"That SvelteKit issue was specifically about using an HTML parser on SSR'd output (which actually is HTML and not Svelte component source) for the purposes of crawling an app for static rendering, and I don't think it's really related to this issue. I don't think we want to be trying to parse Svelte components with an HTML parser.\r\n\r\nThis issue does seem related to the one addressed in #3894 but I haven't poked around at what the difference in the two situations is.","updated_at":"2021-11-13T08:46:25Z","created_at":"2021-11-13T08:46:25Z","creator_user_login":"Conduitry"}
{"number":6923,"comment_id":"968077229","body":"May be fixed by #6611, but I believe we may need to break up that PR before the feature/fix gets in.","updated_at":"2021-11-13T14:29:02Z","created_at":"2021-11-13T14:29:02Z","creator_user_login":"bluwy"}
{"number":6923,"comment_id":"973086720","body":"Svelte uses HTML comment syntax for tags. And the parser fails for the given regex. There should be a fix on the regex level or change the comment style to JS syntax comments for svelte components.","updated_at":"2021-11-18T17:22:41Z","created_at":"2021-11-18T17:22:11Z","creator_user_login":"suman-kr"}
{"number":6923,"comment_id":"1019527170","body":"I have a similar error which is likely caused by same root cause. As this example isn't triggered by a comment I think it's worth to mention here:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import CodeMirror from './CodeMirror.svelte';\r\n\r\n    const code = `<style>\\n  \\n</style>`;\r\n</script>\r\n\r\n<CodeMirror {code} />\r\n```\r\n\r\n> /\\<path\\>/src/lib/StyleEditor.svelte:1:1: Unknown words\r\n\r\nA work-around is to trick the compiler a bit:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import CodeMirror from './CodeMirror.svelte';\r\n\r\n    // Svelte seems to break if style tag is written in string literal directly\r\n    const code = '<' + `style>\\n  \\n</style>`;\r\n</script>\r\n\r\n<CodeMirror {code} />\r\n```","updated_at":"2022-01-23T17:08:48Z","created_at":"2022-01-23T17:08:48Z","creator_user_login":"AriPerkkio"}
{"number":7001,"comment_id":"989488785","body":"Note that when I edit the REPL and trigger the `onDestroy` callbacks because the DOM is being updated with my new code, the `onDestroy` callbacks fire in the following order:\r\n\r\n```text\r\n\"Parent onDestroy\"\r\n\"Child #1 onDestroy\"\r\n\"Child #2 onDestroy\"\r\n```\r\n\r\nI'm not sure if this should be the same order as `onMount` or the reverse order. For `onMount` it makes sense that the parent's callback would fire last, so that by the time the parent `onMount` runs, all its children have been fully mounted and (for example) their `bind:this` bindings are available to the parent. But when destroying the components, which of these two options makes the most sense?\r\n\r\n1. The parent's `onDestroy` should fire first, so that its children are still mounted at the time `onDestroy` runs. Then the children's `onDestroy` fires, at which time they have no parent component.\r\n2. The children's `onDestroy` fires first, so that their parent component still exists at the time `onDestroy` runs. Then the parent's `onDestroy` fires, at which time its child components have already been destroyed.\r\n\r\nI think option 1 (the current behavior) makes the most sense now that I've thought about it, since in `onDestroy` you might want to undo what you did in `onMount`. So I don't think that call order is a bug. But I wanted to mention this in case others think option 2 makes more sense.","updated_at":"2021-12-09T04:01:42Z","created_at":"2021-12-09T04:01:42Z","creator_user_login":"rmunn"}
{"number":7001,"comment_id":"989499826","body":"Related to https://github.com/sveltejs/svelte/pull/3150 and https://github.com/sveltejs/svelte/issues/2281. It's clear from #3150 that the intended order for `afterUpdate` **during mounting** is that children should fire `afterUpdate` before parents do, and that's indeed what I'm seeing. But it seems to me that the same call order would make sense in \"normal\" updates, and that's not happening.","updated_at":"2021-12-09T04:26:23Z","created_at":"2021-12-09T04:26:23Z","creator_user_login":"rmunn"}
{"number":6942,"comment_id":"974645067","body":"Related https://github.com/sveltejs/svelte/issues/6754","updated_at":"2021-11-20T12:45:04Z","created_at":"2021-11-20T12:45:04Z","creator_user_login":"Prinzhorn"}
{"number":6942,"comment_id":"1278972647","body":"Not directly an issue with Svelte itself, but...\r\n\r\nIf this gets merged and lets you apply `undefined` to a `transition:` it could possibly mean this will be solved as well:\r\n\r\nhttps://github.com/testing-library/svelte-testing-library/issues/206\r\nWhere the only workaround I found was to explicitly create two different elements - one for testing and one for real use.\r\n```svelte\r\n        {#if import.meta.env.VITEST}\r\n          <div data-testid=\"alert\" role=\"alert\">\r\n            ....\r\n          </div>\r\n        {:else}\r\n          <div\r\n            data-testid=\"alert\"\r\n            role=\"alert\"\r\n            transition:fly \r\n          >\r\n            ....\r\n          </div>\r\n        {/if}\r\n```\r\nnotice the transition can only be applied if not in VITEST env, if any kind of transition: directive is applied the tests will fail","updated_at":"2022-10-14T12:56:12Z","created_at":"2022-10-14T12:56:12Z","creator_user_login":"bartektelec"}
{"number":6942,"comment_id":"1695050045","body":"This would still be really nice, actions are super-powerful but weirdly static compared to how reactive the rest of svelte is currently.","updated_at":"2023-08-28T05:48:39Z","created_at":"2023-08-28T05:48:39Z","creator_user_login":"tivac"}
{"number":7011,"comment_id":"992639076","body":"I've just noticed two more issues with the current spring implementation.\r\n\r\nFirstly, the acceleration is not being multiplied by ctx.dt, which makes changes to acceleration incorrectly calculated when the frame rate is anything other than exactly 60fps. I think that this is an important and trivial change (the changes in this branch make it easy to see this issue, by setting the 'tick' setting to a low number).\r\n\r\nSecondly, there is an assumption that the elapsed time between the last_value and current_value, is the same as between the current_value and next_value. They will usually be similar, which is why the bug isn't obvious, but in those cases where the frame times can vary, it introduces a considerable source of error.\r\n\r\nI will update this branch to fix both issues, but I think that this all needs some good unit tests to make the intended and actual behaviour clearer. Hopefully there is a good way to mock the 'now' and 'loop' functions.","updated_at":"2021-12-13T16:17:44Z","created_at":"2021-12-13T16:17:44Z","creator_user_login":"robertadamsonsmith"}
{"number":7011,"comment_id":"1490984693","body":"@Rich-Harris is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%228ccfa7f53226453abe2c66e8298d0de9063cd7a9%22%7D%2C%22id%22%3A%22QmaokLfaLoLn65vZFuU9RaHTZ6wsgQATNPKXzsdC44hw3W%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A7011%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-03-30T21:24:18Z","created_at":"2023-03-30T21:24:18Z","creator_user_login":"vercel[bot]"}
{"number":7011,"comment_id":"1491223935","body":"[vc]: #sUgAbxIF7Xcpnai3WSdGPw/k0qFhtIHPYjL0sNz18aM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJyb290RGlyZWN0b3J5Ijoic2l0ZXMvc3ZlbHRlLmRldiIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiIifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL3N2ZWx0ZS9zdmVsdGUtZGV2LTIvOHZWZWt5Yjl5cHM1M29NQVRkdkdvb3l5Y1puaSIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJwcmV2aWV3VXJsIjoiIn1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated |\n| :--- | :----- | :------ | :------- | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/8vVekyb9yps53oMATdvGooyycZni)) |  |  | Mar 31, 2023 at 3:01AM (UTC) |\n\n","updated_at":"2023-03-31T03:01:28Z","created_at":"2023-03-31T03:01:26Z","creator_user_login":"vercel[bot]"}
{"number":6932,"comment_id":"970055931","body":"Unlike class hashes which are \"unique\" for each component, IDs would have to be unique for each instance of a component as well. The hash added to class names is evaluated at compile time, whereas IDs would need additional runtime code to do this.\r\n\r\nClasses on an element can be added without affecting existing classes, but since an element can't have multiple IDs, appending the hash would change the existing ID, which breaks any other user code that might rely on the ID.\r\n\r\nIDs aren't solely used to link labels with input elements, **(which btw can be achieved by putting the form input inside the label element)**. I think they're more commonly used to link to a section of a document instead, so the hash would have to be the same for every visitor to the webpage. Because of this, there would also need to be a way for the component instance to expose what it's hash is.\r\n\r\nWhile your suggestion to have extra syntax does prevent some of these problems it also comes with its own. Therefore, it is probably best to leave it up to the user. It's clearer and more predictable for the user that way. And it's not that much boilerplate since most components already have a script tag.","updated_at":"2021-11-16T08:55:17Z","created_at":"2021-11-16T08:55:17Z","creator_user_login":"gtm-nayan"}
{"number":6932,"comment_id":"970252718","body":"Ah -- makes sense. I hadn't thought about the compile-time vs. run-time difference in computing the hash. In that case, I'm thinking the ideal solution would look like the below, which might make [the proposal for an API to access the css hash](https://github.com/sveltejs/svelte/issues/6044) worthy of consideration.\r\n\r\n```\r\n<script context=\"module\">\r\n   import {getHash} from 'svelte/future';\r\n   let counter = 0\r\n   const hash = getHash()\r\n</script>\r\n<script>\r\n  counter += 1;\r\n  function genId (name) {\r\n     return `${name}-${hash}-${counter}`\r\n  }\r\n</script>\r\n<div>\r\n  <label for={getId('text-input')}><slot/></label>\r\n  <input id={getId('text-input')}>\r\n</div>\r\n```\r\n\r\nIs there a better way to generate IDs in e.g. a component library and prevent collision with other code?","updated_at":"2021-11-16T13:03:33Z","created_at":"2021-11-16T13:03:33Z","creator_user_login":"thinkle"}
{"number":6932,"comment_id":"970278513","body":"Using svelte-generated-class for id wouldn't work for multiple uses, would have the same id.\n\nEven `(Math.random() * 10e15).toString(16)` should be pretty good enough to avoid collision or use `lukeed/uuid` or any other light-weight uuid generator.\n\nNot related with this issue, but a good use case for\nhttps://github.com/sveltejs/svelte/issues/6044 is component-aware-css. But this needs custom css syntax which has very little chance for approval/implementation.\n ","updated_at":"2021-11-16T13:32:09Z","created_at":"2021-11-16T13:32:09Z","creator_user_login":"mdynnl"}
{"number":6928,"comment_id":"992616952","body":"As I mentioned on #3105, I'm worried about doing this without it also working in SSR, and we would need to agree on an API for that. It should probably look like stringified attributes - rather than just a list of class names - so that it can be expanded to other features later.\r\n\r\nThat these classes would not be scoped makes more sense than them being scoped, I think, but needing `:global()` still feels confusing and it would help to document it. Also, if someone specifically styled the selector `body.foo`, how should that be treated? I don't have a clear answer for that one yet.","updated_at":"2021-12-13T15:54:37Z","created_at":"2021-12-13T15:54:37Z","creator_user_login":"Conduitry"}
{"number":6928,"comment_id":"1023183217","body":"Is there any movement on this request?\r\n\r\nissue #3105  was created 3 years ago\r\nbut still no results :(","updated_at":"2022-01-27T13:02:39Z","created_at":"2022-01-27T13:02:39Z","creator_user_login":"ghost"}
{"number":6928,"comment_id":"1024234946","body":"I would also be interested in using this with SSR","updated_at":"2022-01-28T13:39:34Z","created_at":"2022-01-28T13:39:34Z","creator_user_login":"el-schneider"}
{"number":6928,"comment_id":"1046289350","body":"> I would also be interested in using this with SSR\r\n\r\nSince this is only adding class to the body element, I don't think SSR support is really necessary. The script can add the class once it's loaded.","updated_at":"2022-02-20T17:55:06Z","created_at":"2022-02-20T17:55:06Z","creator_user_login":"andirady"}
{"number":6928,"comment_id":"1046299733","body":"> Since this is only adding class to the body element, I don't think SSR support is really necessary. The script can add the class once it's loaded.\r\n\r\nIn my specific case it was a static page that didn't hydrate, which is something sveltekit supports and is a not too uncommon use-case. In this case it wouldn't work an still be handy.","updated_at":"2022-02-20T18:59:07Z","created_at":"2022-02-20T18:58:06Z","creator_user_login":"el-schneider"}
{"number":6928,"comment_id":"1560516652","body":"@andirady is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22c3efa98d067aeedf6496243ba03e938d4370c562%22%7D%2C%22id%22%3A%22QmesxmFgdDHRz89WbGuiwtnLgR4nBFYcq7pfffNX6VQ19V%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A6928%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-05-24T06:18:15Z","created_at":"2023-05-24T06:18:15Z","creator_user_login":"vercel[bot]"}
{"number":6928,"comment_id":"1574540781","body":"Can someone please authorize this?","updated_at":"2023-06-03T01:39:03Z","created_at":"2023-06-03T01:39:03Z","creator_user_login":"Stephen10121"}
{"number":6858,"comment_id":"946686026","body":"This PR doesn't touch on the cases related to reactivity, please check the comment https://github.com/sveltejs/svelte/issues/6685#issuecomment-946685606","updated_at":"2021-10-19T12:46:49Z","created_at":"2021-10-19T12:46:49Z","creator_user_login":"RaiVaibhav"}
{"number":6858,"comment_id":"964728411","body":"Thanks for the extra refactors! We'll have to wait and see if the other maintainers have an opinion on this update strategy.","updated_at":"2021-11-10T02:36:20Z","created_at":"2021-11-10T02:36:20Z","creator_user_login":"bluwy"}
{"number":6858,"comment_id":"1123902849","body":"@rmunn is this PR still valid?","updated_at":"2022-05-11T15:05:36Z","created_at":"2022-05-11T15:05:36Z","creator_user_login":"RaiVaibhav"}
{"number":6858,"comment_id":"1439461203","body":"@RaiVaibhav if you don't mind rebasing this PR, we hope to review the outstanding PRs in the coming weeks","updated_at":"2023-02-22T05:30:10Z","created_at":"2023-02-22T05:30:10Z","creator_user_login":"benmccann"}
{"number":6858,"comment_id":"1441874037","body":"Hey Ben McCann, unfortunately I am not with my laptop for few days,\nrequesting you or anyone else to kindly continue from here\n\nThanks\n\nOn Wed, Feb 22, 2023 at 11:00 AM Ben McCann ***@***.***>\nwrote:\n\n> @RaiVaibhav <https://github.com/RaiVaibhav> if you don't mind rebasing\n> this PR, we hope to review the outstanding PRs in the coming weeks\n>\n> ‚Äî\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/pull/6858#issuecomment-1439461203>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AFJ7CJT456NZPN2G3AJGWXTWYWP65ANCNFSM5GJBWBYQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n","updated_at":"2023-02-23T14:16:13Z","created_at":"2023-02-23T14:16:13Z","creator_user_login":"RaiVaibhav"}
{"number":6858,"comment_id":"1441881734","body":"You can update it a few days from now. That will be fine ","updated_at":"2023-02-23T14:21:51Z","created_at":"2023-02-23T14:21:51Z","creator_user_login":"benmccann"}
{"number":6858,"comment_id":"1468238465","body":"@dummdidumm is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%225f73064ac73833e79a2395868f55b460d6c65623%22%7D%2C%22id%22%3A%22QmNPXVmsW8jzcJZ6m6r8ZvZhpMbtNMt78EpFhNDEo9tpbk%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A6858%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-03-14T14:46:44Z","created_at":"2023-03-14T14:46:44Z","creator_user_login":"vercel[bot]"}
{"number":6971,"comment_id":"983644522","body":"It works if you rename it to `readOnly` because the compiler spreads the attributes to the DOM imperative API, where the property is called `readOnly`. `{readonly}` (no `$$props`) works because I guess the Svelte compiler handles this as a special case. I'm not sure what the best way forward here is.","updated_at":"2021-12-01T13:31:37Z","created_at":"2021-12-01T13:31:37Z","creator_user_login":"dummdidumm"}
{"number":6971,"comment_id":"983653412","body":"We keep running into issues with spread attributes and not knowing at runtime what DOM properties they correspond to. It's a hard problem to solve without burdening everyone's shipped app with a big lookup table. Maybe we could also look for case variations of the attribute in question when seeing whether it has a prop? That wouldn't be a ton more code, but it would be slower and I don't know how many additional situations it would handle. I'm almost ready to say we should just close all of the issues about this and better document the limitations of spread attributes.","updated_at":"2021-12-01T13:42:37Z","created_at":"2021-12-01T13:42:37Z","creator_user_login":"Conduitry"}
{"number":6971,"comment_id":"983665501","body":"Do you mean [this lookup table](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_dom/wrappers/Element/Attribute.ts#L308)? If I counted correctly, that's 8 entries in there with a different property name compared to the attribute name. I wouldn't say that this is very big, and it would only be added if `$$props` is used.","updated_at":"2021-12-01T13:57:33Z","created_at":"2021-12-01T13:57:33Z","creator_user_login":"dummdidumm"}
{"number":6971,"comment_id":"983679799","body":"I did mean that one, although I wasn't thinking about how (since we have access to the DOM API) we probably won't need all of it. I'm a lot more open to the idea of including it if we just need to include the ones where the attribute and prop have different names. In any case I'd probably first want to track down the other similar spread issues to get reacquainted with what they were exactly.","updated_at":"2021-12-01T14:11:01Z","created_at":"2021-12-01T14:11:01Z","creator_user_login":"Conduitry"}
{"number":6967,"comment_id":"981896881","body":"The same code is being sent to all browsers, so I suspect the Firefox vs Chrome difference is a race condition, depending on whether the event has already fired by the time the handler is attached.\r\n\r\nSimilarly, I suspect what's happening in SvelteKit is that the event handler isn't being attached until hydration, by which time the server-side rendered iframe has already loaded.\r\n\r\nIf you want to run code regardless of whether the iframe has already loaded by the time the event handler is attached, I would suggest writing an action that checks whether the iframe has already loaded, and if it has, then immediately call the callback - and if it hasn't, then attach a `load` event handler that then calls the callback.","updated_at":"2021-11-29T18:23:19Z","created_at":"2021-11-29T18:23:19Z","creator_user_login":"Conduitry"}
{"number":6967,"comment_id":"982011109","body":"thanks for the response! I'll try `frame.contentDocument.readyState`, I'm already using an action in my real code anyway. -- Edit: unfortunately at least that's not the way - I don't want `allow-same-origin`...\r\n\r\nThe reason that I'd consider it a Svelte(Kit) bug is that the vanilla `<iframe onload=\"...\">` or the equivalent DOM manipulation works. But yeah, it's really low priority.","updated_at":"2021-11-29T21:39:31Z","created_at":"2021-11-29T20:51:05Z","creator_user_login":"SillyFreak"}
{"number":6967,"comment_id":"1154066198","body":"Wanted to see if there was an update for this issue? Looking at iframes with SvelteKit and thi seems it could be a blocker for a project my team and I are are working on. ","updated_at":"2022-06-13T15:27:30Z","created_at":"2022-06-13T15:27:30Z","creator_user_login":"teds31"}
{"number":6967,"comment_id":"1624790753","body":"Any update on this?","updated_at":"2023-07-07T06:00:26Z","created_at":"2023-07-07T06:00:26Z","creator_user_login":"sujeetjaiswara"}
{"number":6821,"comment_id":"938591359","body":"You are correct, but the right way to use it is.\r\n\r\n```js\r\n  compilerOptions: {\r\n        cssHash: ({ hash, css }) => `custom-${hash(css)}`,\r\n },\r\n```\r\ncheck https://github.com/sveltejs/svelte/pull/6026/files#diff-a5eff3ac7f9d7a3c6fd0d3f987f936192b62c36eb9d2d275a982d055f588bd21R278","updated_at":"2021-10-08T12:09:52Z","created_at":"2021-10-08T12:09:52Z","creator_user_login":"peopledrivemecrazy"}
{"number":6821,"comment_id":"938591947","body":">Here's a custom hashing option, but don't you dare use it the _wrong_ way!\r\n\r\nI'm well aware how it's supposed to be used. This is a quick POC to prove Svelte does not escape problematic identifiers (howsoever arising).","updated_at":"2021-10-08T12:13:12Z","created_at":"2021-10-08T12:10:47Z","creator_user_login":"Bilge"}
{"number":6821,"comment_id":"938597948","body":"The hash function provided is implemented with the assumption that it's output will be prefixed in order to turn the hash into a valid css class name. If you want a truly custom solution, you could very easily substitute the hash function for some other hashing function that guarantees that it's output will always be a valid css class name.","updated_at":"2021-10-08T12:19:55Z","created_at":"2021-10-08T12:19:55Z","creator_user_login":"gtm-nayan"}
{"number":6821,"comment_id":"938614380","body":"https://mathiasbynens.be/notes/css-escapes\r\n\r\nEscaping CSS identifiers is a bit of a pain. If someone wants to implement that, great. Another viable option might be to have the compiler throw an exception when the value returned by your `cssHash` function can't be used without escaping, to at least avoid producing incorrect code.","updated_at":"2021-10-08T12:45:45Z","created_at":"2021-10-08T12:45:45Z","creator_user_login":"Conduitry"}
{"number":6821,"comment_id":"938620811","body":"https://github.com/mathiasbynens/cssesc looks like a nice, small, self-contained library for this CSS identifier escaping. If we want to use that to do the escaping, that sounds fine to me.","updated_at":"2021-10-08T12:55:55Z","created_at":"2021-10-08T12:55:55Z","creator_user_login":"Conduitry"}
{"number":6821,"comment_id":"938980700","body":"Alternatively we could renamed `cssHash` to `cssIdentifier` (or `generateCSSIdentifier` or `cssClassName` or `generateCSSClassName`) to get rid of the ambiguity (the implementation doesn't _have_ to use to build-in hash function either). Returning a valid identifier is then in the hands of whoever overrides the default implementation. This person could then include such a library in their code instead of having it in the core. I assume this is a very rare use-case? And most of the time probably to replace the `svelte` keyword.","updated_at":"2021-10-08T17:55:12Z","created_at":"2021-10-08T17:55:12Z","creator_user_login":"Prinzhorn"}
{"number":6802,"comment_id":"933325530","body":"I don't think this is related to stores at all. You can do `{v+=1}` with any variable.\r\n\r\nhttps://svelte.dev/repl/443f2863daf84f92a1b32d2c1a47e0b7?version=3.43.1\r\n\r\nI _personally_ think all these things should not compile with v4 and throw. Having side-effects inside `{}` is dangerous and an anti-pattern. Due to the surgical updates, elements re-use and things like keyed each it's basically undefined behavior what your variable will eventually hold. The statements don't run to to bottom as you'd expect in a classic templating language.\r\n\r\nI _personally_ also believe `{foo()}` should not compile, unless `foo` itself is not a constant and can be replaced. To me it's an anti-pattern to _pull_ data from inside the template and people expect `foo()` to be called when it's not. But `{foo(bar)}` is a different story, because it will update when `bar` changes (things like `{formatDistance(date, $now)}` are common). But my feelings on that are not as strong as with `{foo = bar}`. Maybe a lint rule would be enough here.","updated_at":"2021-10-04T09:56:38Z","created_at":"2021-10-04T09:53:48Z","creator_user_login":"Prinzhorn"}
{"number":6802,"comment_id":"933398839","body":"I'm aware this also applys to variables and also agree Svelte v4 not compiling them at all and throw. \n\nBut this is currently allowed and `$store`s don't get treated as they should be. `$readableStore = 1` would throw in the instance but it doesn't in the template.\n\nIf v4 still allows this regardless of a lint-rule, store assignments should be wrapped like I said. But this is low-prior.","updated_at":"2021-10-04T11:38:08Z","created_at":"2021-10-04T11:38:08Z","creator_user_login":"mdynnl"}
{"number":6802,"comment_id":"933428087","body":"> But this is currently allowed and `$store`s don't get treated as they should be. `$readableStore = 1` would throw in the instance but it doesn't in the template.\r\n\r\nI missed that part. Maybe make it clear in the title and description that this is specifically an issue with readable stores. It's definitely weird that `$readable = 9` \"works\". It doesn't update the store (how could it, there is not `set`) but only updates the local context, masking the store value.\r\n\r\n**Bug: assigning a value to a _readable_ store inside the template masks the actual store value within the rest of the template**\r\n\r\nI think this REPL makes it more obvious what this is about\r\n\r\nhttps://svelte.dev/repl/0b790800a8eb4f0babef778590c4fd35?version=3.43.1","updated_at":"2021-10-04T12:18:59Z","created_at":"2021-10-04T12:18:30Z","creator_user_login":"Prinzhorn"}
{"number":6868,"comment_id":"1004876789","body":"As a pancake user, I started looking into this myself!\r\n\r\n[`draw`](https://svelte.dev/docs#run-time-svelte-transition-draw) relies on [`node.getTotalLength()`](https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement/getTotalLength) to provide the length of the path. However, a [`non-scaling-stroke`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/vector-effect) scales the path to a new coordinate system. \r\n\r\nI [found](https://stackoverflow.com/questions/44389668/svg-gettotallength-wont-return-the-right-size-for-non-scaling-stroke-get-sv) that we can translate between the two coordinate systems by leveraging the fact that [getBoundingClientRectangle](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) returns to us the size in DOM units and [getBBox](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox) returns the size in SVG units:\r\n\r\n```ts\r\nconst { width: domWidth } = node.getBoundingClientRect();\r\nconst { width: svgWidth } = node.getBBox();\r\nconst scale = domWidth / svgWidth;\r\nlen = len * scale;\r\n```\r\n\r\n> Note: I've literally never used it or heard of it before... but I noticed that `node.getCTM()` actually returns the same scaling factor. That being said, I didn't pay attention in linear algebra, so when `getCTM` tells me it returns a matrix... I run away.\r\n\r\nIt's not perfect for some reason. I'm still trying to figure that out. I went ahead and [implemented by own version of the draw function for the REPL that you linked above](https://svelte.dev/repl/12c04abd157e4504a4884408d697d5ed?version=3.44.0), and as you can see, there's no weird artifacts (which means that it's good enough for my purposes), but the timing is still slightly off. ~I'll report back if I figure out why that is.~\r\n\r\n---\r\n\r\nEDIT: whoops, yep, figured out why that is. My solution seems to work in situations **where the viewBox aspect ratio is the same as the DOM aspect ratio**. (Updated REPL to demonstrate). Where that isn't the case, the vertical and horizontal scaling factors are different, and therefore, the path length calculation is different.","updated_at":"2022-01-04T15:29:53Z","created_at":"2022-01-04T14:52:37Z","creator_user_login":"decepulis"}
{"number":7089,"comment_id":"1007361151","body":"Two notes:\r\n- Remember that `<Component on:changeNum />` will forward the event (just to be clearer to whoever sees this issue);\r\n- Usually the way of dealing with event callbacks is, for example, for a `click` event, to have a function called `handleClick` or `onClick`. That's one possible reason why such a shortcut wasn't implemented, I would guess.","updated_at":"2022-01-07T12:14:33Z","created_at":"2022-01-07T12:14:33Z","creator_user_login":"msandrini"}
{"number":7089,"comment_id":"1008331134","body":"I'm against that syntax, as it could lead to missunderstanding what is prop and what is handler... but I'm for idea its self,... just with different syntax.","updated_at":"2022-01-09T16:29:32Z","created_at":"2022-01-09T16:29:32Z","creator_user_login":"Mlocik97"}
{"number":7089,"comment_id":"1008566081","body":"The only directive that does not have shorthand is specifically this `on:event` which is already used as event forwarding. Others simply shorthand even the new `style:prop`. If a new concise event forwarding syntax were to be introduced maybe v4 which would be breaking, this could be supported to shorthand syntax which is a reasonable change for consistency.\r\n\r\nDisclaimer: I'm not currently involved with maintaining svelte and above are all my opinions.","updated_at":"2022-01-10T06:06:10Z","created_at":"2022-01-10T06:06:10Z","creator_user_login":"mdynnl"}
{"number":7044,"comment_id":"1000954855","body":"I'm not sure it's a bug. The template says the element has only `old-class` class. And when it isn't so, Svelte corrects the list of classes. \r\n\r\nIf you want dynamically change classes, add there a variable with additional classes or use directive `class:`.\r\n`class=\"old-class {extraClasses}\"`\r\n`class:new-class={testProp}`\r\n\r\nBtw, don't use `document.getElementById` and similar methods when you can use `bind:this`.","updated_at":"2021-12-25T01:11:52Z","created_at":"2021-12-25T01:11:52Z","creator_user_login":"7nik"}
{"number":7044,"comment_id":"1001005978","body":"I just updated the [REPL](https://svelte.dev/repl/23dae347f532427ea77e95192dd6c466?version=3.44.3) to make clear that the behaviour differs. We have 3 buttons which behave different but should behave the same.\r\n\r\n```svelte\r\n<script>\r\n\timport {onMount} from \"svelte\"\r\n\tlet testProp = true;\r\n\t\r\n\tonMount(() => {\r\n\t\tdocument.getElementById('btn1').classList.add('new-class');\r\n\t\tdocument.getElementById('btn2').classList.add('new-class');\r\n\t\tdocument.getElementById('btn3').classList.add('new-class');\r\n\t});\r\n</script>\r\n\r\n<button id='btn1' class='old-class' {...$$props} on:click={() => testProp = !testProp}>\r\n\tIs not red anymore after click\r\n</button>\r\n<button id='btn2' {...$$props} on:click={() => testProp = !testProp}>\r\n\tStays red after click\r\n</button>\r\n<button id='btn3' class:old-class={true} {...$$props} on:click={() => testProp = !testProp}>\r\n\tWorkaround\r\n</button>\r\n\r\n<style>\r\n\t.old-class {\r\n\t\tcolor: blue;\r\n\t}\r\n\t\r\n\t.new-class {\r\n\t\tbackground: red;\r\n\t}\r\n</style>\r\n```\r\n\r\nWe are currently using Webcomponents build with Stencil in our project. Theses components will get a class `hydrated` if the component is fully loaded. This class will get overwritten with the implementation way of `btn1`. Currently we are using the workaround of `btn3`.","updated_at":"2021-12-25T11:20:02Z","created_at":"2021-12-25T11:20:02Z","creator_user_login":"tiloio"}
{"number":7150,"comment_id":"1013750348","body":"What would you expect to happen if you did:\r\n\r\n```html\r\n<script>\r\n    let value = undefined;\r\n</script>\r\n\r\n<div value={value} />\r\n```","updated_at":"2022-01-15T20:38:10Z","created_at":"2022-01-15T20:37:57Z","creator_user_login":"ghostdevv"}
{"number":7150,"comment_id":"1013765398","body":"Personally I would prefer it to be consistent (if that's possible) so no matter the element or attribute I would expect a value of `undefined` to always remove the attribute entirely.\r\n```html\r\n<div />\r\n```","updated_at":"2022-01-15T22:39:37Z","created_at":"2022-01-15T22:39:37Z","creator_user_login":"ghost"}
{"number":7150,"comment_id":"1029032027","body":"I am currently experiencing similar issue while using `aria-current` and `disabled` attributes. I'd like to test values of both  against `null` (i.e. non-present) and not against `false`.\r\n\r\nJust a side note: Vue.js in version 3 makes a good move to [normalize boolean attribute values](https://v3.vuejs.org/guide/migration/attribute-coercion.html#enumerated-attributes) so the list of such is out of maintaining scope and developers' experience is somewhat more consistent.\r\n\r\nPlease pardon my ignorance if I've missed something.\n\nEDIT:\nOK, disregard this. I've found out, svelte was kindly teaching me not to apply `disabled` to an anchor. I'd only wish I have found it out earlier without a riddle why the server-side render applies `disabled` as expected and I get `disabled=\"false\"` in browser right after hydration.","updated_at":"2022-02-03T22:53:43Z","created_at":"2022-02-03T14:14:41Z","creator_user_login":"pooledge"}
{"number":7150,"comment_id":"1131496309","body":"I'm having similar problems when using the ```<progress>``` element (and attempting to utilize the indeterminate state of progress bars).\r\n```\r\n<script>\r\n\texport let max = 1;\r\n\texport let value = null;\r\n</script>\r\n<progress {max} {value}/>\r\n```\r\nrenders to:\r\n```\r\n<progress max=\"1\" value=\"0\"/>\r\n```\r\nso instead I needed the workaround of:\r\n```\r\n<script>\r\n\texport let max = 1;\r\n\texport let value = null;\r\n</script>\r\n{#if value === null}  \r\n\t<progress {max}/>\r\n{:else}\r\n\t<progress {max} {value}/>\r\n{/if}\r\n```","updated_at":"2022-07-19T07:41:55Z","created_at":"2022-05-19T10:04:04Z","creator_user_login":"Roger322"}
{"number":7150,"comment_id":"1292434336","body":"I looked into this a bit and it appears that this is because the `value` attribute is handled specially. Instead of being removed for `undefined`, `null` or `false` like other attributes the value is set directly via `HTMLElement.value = `. This is apparently do to support `bind`ing to the `value` more naturally for things like `input` elements however it causes the issues mentioned above. For example if trying to remove the `value` attribute for the `progress` element (very useful when doing something indeterminate like establishing a connection before starting a transfer) `null` and `false` just get assigned to `value `which is coerced to `0` which is not what is intended. `undefined` raises an exception \"Failed to set the 'value' property on 'HTMLProgressElement': The provided double value is non-finite.\". What I expect is for the attribute to be removed like other attributes would be. This special casing of `value` can be very surprising.\r\n\r\nOf course it is too late to go back and use something like `$value` to handle the special-case value. But maybe this can be updated to only be done on a whitelist of elements such as `input` to avoid the problems seen with `button` and `progress`.","updated_at":"2022-10-26T18:26:44Z","created_at":"2022-10-26T18:26:44Z","creator_user_login":"kevincox"}
{"number":7078,"comment_id":"1003235209","body":"You can trigger CSS transitions with built-in directives in svelte when the elements leave or enter the DOM.  Set opacity to 1 if you only want the translate, not the fade-in-out effect\r\nhttps://svelte.dev/docs#run-time-svelte-transition-fly\r\n\r\nE.g.\r\n```svelte\r\n<div class=\"sidebar\" transition:fly={{ opacity: 1, duration: 300, x: 36}}\r\n    <p>hello</p>\r\n</div>\r\n```","updated_at":"2021-12-31T01:35:42Z","created_at":"2021-12-31T01:35:42Z","creator_user_login":"jrmoynihan"}
{"number":7078,"comment_id":"1003321195","body":"Hi @jrmoynihan thank you for reply. I know this built-in JS function and I tested this approach across 50 websites with different level of CSS animation this week. \r\n\r\nUnfortunately, on more than half of the sites, this type of build-in transition was not smooth. So I'm looking for a pure CSS solution that is more reliable.","updated_at":"2021-12-31T09:25:54Z","created_at":"2021-12-31T09:25:30Z","creator_user_login":"honzahana"}
{"number":7078,"comment_id":"1003379644","body":"@honzahana Well, just to be clear, it's not a JS function that provides the animation.  It's a [CSS animation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API) applied as the node enters/leaves the DOM that simulates a pure CSS transition and importantly, does not run on the main thread.  It's hard to know what may be causing your issue without a reproducible example, but it's likely not the transition directive.\r\n\r\nIt's possible the transition is running into cumulative layout shift and re-flow issues, which are expensive to render, so the problem may exist elsewhere.\r\n\r\nTry comparing what you're trying to do with the directives with the pure CSS in a Svelte component style tag: \r\n```css\r\n.class-the-component-always-has{\r\ntransition: translateX 300ms ease-in-out;\r\n}\r\n.class-applied-when-animating{\r\ntransform: translateX(36px)\r\n}\r\n```\r\n\r\nYou can also cheat a little by trying to add GPU acceleration, with `translate3d(36px, 0, 0)` instead of `translateX`","updated_at":"2022-01-02T03:07:43Z","created_at":"2021-12-31T13:40:16Z","creator_user_login":"jrmoynihan"}
{"number":7096,"comment_id":"1004022771","body":"Hey. Check if this helps:\r\nhttps://svelte.dev/docs#component-format-script-1-export-creates-a-component-prop\r\n![image](https://user-images.githubusercontent.com/39976114/147924414-b1eb8422-6ab2-4ee9-89f6-acaf3f49eab5.png)\r\n\r\nCheck if you re-assign the array it works \r\n","updated_at":"2022-01-03T11:14:55Z","created_at":"2022-01-03T11:14:02Z","creator_user_login":"jwandekoken"}
{"number":7096,"comment_id":"1004023239","body":"Can you provide a minimal [REPL](https://svelte.dev/repl/hello-world?version=3.44.3)? I think there are multiple misconceptions hidden in what you say (e.g. what @jwandekoken just posted) but it's hard to tell. E.g. what does \"and this statement is run whenever searchedEvents array is updated\" even mean?","updated_at":"2022-01-03T11:15:13Z","created_at":"2022-01-03T11:14:50Z","creator_user_login":"Prinzhorn"}
{"number":7096,"comment_id":"1004025662","body":"@Prinzhorn \"and this statement is run whenever searchedEvents array is updated\" does not imply any reactivity. I just meant that the function that is used to search for events, just updates the eventZero too. Something like\r\n\r\nasync function search() {\r\n   searchedEvents = await someApiCall();\r\n   eventZero = searchedEvents[0];\r\n}","updated_at":"2022-01-03T11:19:14Z","created_at":"2022-01-03T11:19:14Z","creator_user_login":"rahulserver"}
{"number":7096,"comment_id":"1556651638","body":"I think what @rahulserver is asking about, at least the way I'm interpreting it, is the ability to execute a function whenever an object property changes. The answer is YES -- you need to modify your syntax a little:\r\n\r\nhttps://svelte.dev/repl/7375a06bce0c4b93a26642c41521e16f\r\n\r\nIf you're after specific property reactivity, then something like this (using store is optional):\r\n\r\nhttps://svelte.dev/repl/4dfe6ff2f4e84173b7e3370cf840ff7c","updated_at":"2023-05-22T22:32:42Z","created_at":"2023-05-22T07:03:48Z","creator_user_login":"thdoan"}
{"number":6866,"comment_id":"949605939","body":"I can reproduce this issue but not only within the svelte-window-bindings example but in every REPL opened in Safari.\r\nSafari seems to render a scroll bar that does not do anything above the actual usable scroll bar to the Result window.\r\nAs you can see in the picture attached there is this scroll bar that stretches from the the top to approximately 3/4 of the result without there being anything to scroll.\r\n\r\n<img width=\"670\" alt=\"safari_scroll_bar_repl\" src=\"https://user-images.githubusercontent.com/57948036/138456482-b8fd5bae-3d81-4383-940f-913c9d0abf7c.png\">\r\n\r\nYou can also see this in the example REPL you mentioned when scrolling down to the bottom as the actual scroll bar emerges from below the unusable scroll bar.\r\n\r\n<img width=\"524\" alt=\"window_bindings_repl_2nd_scrollbar\" src=\"https://user-images.githubusercontent.com/57948036/138456610-263928f7-1d74-4c9c-a8ec-124627513acd.png\">\r\n","updated_at":"2021-10-22T12:56:04Z","created_at":"2021-10-22T12:56:04Z","creator_user_login":"henninggross"}
{"number":7045,"comment_id":"1000391025","body":"I'm not sure what behaviour it is that you expect. \"$; foo = bar.a\" means that you expect foo to always be whatever bar.a is, and \"bind:value={foo}\" means that you expect foo to to be whatever has been entered in the input. It can't be both!\r\n\r\nMaybe svelte should raise an error to stop any attempt to bind to a reactive value, instead of allowing it to work (albeit with likely undesired behaviour)","updated_at":"2021-12-23T15:53:24Z","created_at":"2021-12-23T15:53:24Z","creator_user_login":"robertadamsonsmith"}
{"number":7045,"comment_id":"1000399832","body":">¬†\"$; foo = bar.a\" means that you expect foo to always be whatever bar.a is\r\n\r\nis not true... this means, value of foo is set to same as value of bar.a, whenever bar.a change... means, foo can be different than bar.a, if foo is changed, because it doesn't change bar.a so reactive statement is not executed so, foo should have value from bind:value. And this works correctly, if not using bind:value,.. see example with setTimeout():\r\n\r\nhttps://svelte.dev/repl/707142058b574f3eb1e674f72551b19f?version=3.44.3\r\n\r\nE: and this is correct behaviour, that should work also with bind:value and object properties.\r\n\r\nE: Interesting,... robertadamsonsmirth answered totally incorrect answer and got thumb up emoji, even tho, right here is proof, they were incorrect.","updated_at":"2021-12-24T19:51:44Z","created_at":"2021-12-23T16:09:52Z","creator_user_login":"Mlocik97"}
{"number":7045,"comment_id":"1000420021","body":"https://github.com/sveltejs/svelte/issues/4933, sounds like the third point there","updated_at":"2021-12-23T16:48:26Z","created_at":"2021-12-23T16:48:26Z","creator_user_login":"gtm-nayan"}
{"number":7045,"comment_id":"1011802235","body":"Yes, this is confusing. It's not clear why you're not able to change `foo` independently of `foo.a` and have foo be temporarily \"out-of-sync\" (see #4933) from `$: foo = bar.a`. As long as `bar.a` hasn't changed since `foo` has changed, it seems like `$: foo = bar.a` should not re-run.\r\n\r\n... depending on your mental model of how you _expect_ reactive statements to work, as discussed in #4933. If you expect `$: foo = bar.a` to be expression an invariant that must _always_ be kept true by the Svelte run-time, then I guess it's working as expected. But if you expect (as is my expectation after using Svelte for a year or so now) `$: foo = bar.a` to _only_ re-run if it's dependency (`bar.a`) changes, then this is a surprising and incorrect behavior.\r\n\r\nThis behavior was introduced by #2444 in Svelte 3.2.1+, so if you run your first example using 3.2.0 (https://svelte.dev/repl/60487dd8d6f941b3bc2e0d72124a2abb?version=3.2.0), you'll see that it did indeed _use to_ allow you to change the foo input independently, and then only reset foo based on your `$: foo = bar.a;` if you changed the `bar.a` input.","updated_at":"2022-01-13T05:11:42Z","created_at":"2022-01-13T05:11:42Z","creator_user_login":"TylerRick"}
{"number":6735,"comment_id":"921794031","body":"~~Moreover, int keys don't seem to work at all, even with `bind:`... https://svelte.dev/repl/fcd1d8128ef540f38b53a784fad0d353?version=3.42.6~~\r\n\r\nNevermind, `Object.entries()` converts numeric keys to strings :unamused: ","updated_at":"2021-09-17T13:30:06Z","created_at":"2021-09-17T13:23:18Z","creator_user_login":"iluuu1994"}
{"number":6735,"comment_id":"922211312","body":"> the presence of the `updateValue` function changing the output seems weird.\r\n\r\nI believe there's an optimization in the Svelte compiler where if it sees a variable assigned to once and never changed, it treats it like a constant. So when that variable is assigned to in a function, Svelte can't know that that function will never actually be called, so it disables the \"treat as constant\" optimization, leading to different compiled code.\r\n\r\nHere's a diff between the JS output of your two REPLs, trimmed down to just the relevant parts. Notice how in the version with the `updateValue` function, `value` has been moved to being an instance variable, whereas in the version without it was defined *outside* the `instance()` function so that it would be the same in every instance of the component:\r\n\r\n```diff\r\n--- without-fn.js\t2021-09-18 01:10:40.877489922 -0500\r\n+++ with-fn.js\t2021-09-18 01:10:45.669696386 -0500\r\n@@ -99,12 +99,12 @@\r\n \t\t\t\teach_blocks[i].m(select, null);\r\n \t\t\t}\r\n \r\n-\t\t\tselect_option(select, value);\r\n+\t\t\tselect_option(select, /*value*/ ctx[1]);\r\n \t\t\tinsert(target, t0, anchor);\r\n \t\t\tinsert(target, button, anchor);\r\n \r\n \t\t\tif (!mounted) {\r\n-\t\t\t\tdispose = listen(button, \"click\", /*loadOptions*/ ctx[1]);\r\n+\t\t\t\tdispose = listen(button, \"click\", /*loadOptions*/ ctx[2]);\r\n \t\t\t\tmounted = true;\r\n \t\t\t}\r\n \t\t},\r\n@@ -113,6 +113,10 @@\r\n \t\t\t\teach_value = Object.entries(/*options*/ ctx[0]);\r\n \t\t\t\teach_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, select, destroy_block, create_each_block, null, get_each_context);\r\n \t\t\t}\r\n+\r\n+\t\t\tif (dirty & /*value, Object, options*/ 3) {\r\n+\t\t\t\tselect_option(select, /*value*/ ctx[1]);\r\n+\t\t\t}\r\n \t\t},\r\n \t\ti: noop,\r\n \t\to: noop,\r\n@@ -131,9 +135,8 @@\r\n \t};\r\n }\r\n \r\n-let value = 'foo';\r\n-\r\n function instance($$self, $$props, $$invalidate) {\r\n+\tlet value = 'foo';\r\n \tlet options = {};\r\n \r\n \tfunction loadOptions() {\r\n@@ -145,7 +148,12 @@\r\n \t\t});\r\n \t}\r\n \r\n-\treturn [options, loadOptions];\r\n+\t// This function is never executed but it being there changes the behavior of the program\r\n+\tfunction updateValue() {\r\n+\t\t$$invalidate(1, value = 'foo');\r\n+\t}\r\n+\r\n+\treturn [options, value, loadOptions];\r\n }\r\n \r\n class App extends SvelteComponent {\r\n```","updated_at":"2021-09-18T06:14:14Z","created_at":"2021-09-18T06:14:14Z","creator_user_login":"rmunn"}
{"number":6735,"comment_id":"925168801","body":"@iluuu1994 `Object()` and `Record()` keys can only be strings. If you want to use anything other than strings, you need to use `Map()`.","updated_at":"2021-09-22T18:16:25Z","created_at":"2021-09-22T18:15:32Z","creator_user_login":"palnes"}
{"number":6117,"comment_id":"804656238","body":"Curiously this only happens in the very last block. If you repeat it more than two times it's always the last block. And if you add anything after the each block the space disappears. I hope this helps.\r\n\r\nNo spaces because of the \"x\" at the end:\r\n\r\n```svelte\r\n<script>\r\n\tlet name = 'Hello world';\r\n</script>\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\nx\r\n```","updated_at":"2021-03-23T06:33:41Z","created_at":"2021-03-23T06:33:32Z","creator_user_login":"Prinzhorn"}
{"number":6117,"comment_id":"804856237","body":"Yea, I actually noticed that after filing but forgot to come back and add it in. It's super variable, (if of course not actually random).","updated_at":"2021-03-23T12:17:48Z","created_at":"2021-03-23T12:17:28Z","creator_user_login":"ezfe"}
{"number":6117,"comment_id":"807858309","body":"Also, we still have these issues https://github.com/sveltejs/svelte/issues/4731 and https://github.com/sveltejs/svelte/issues/189","updated_at":"2021-03-26T01:20:10Z","created_at":"2021-03-26T01:20:10Z","creator_user_login":"stalkerg"}
{"number":6117,"comment_id":"807889912","body":"heh this space exists but not working inside Svelte runtime tests","updated_at":"2021-03-26T02:32:16Z","created_at":"2021-03-26T02:32:16Z","creator_user_login":"stalkerg"}
{"number":6117,"comment_id":"807891725","body":"I found a REPL that actually identifies the same issue: https://svelte.dev/repl/b6c71bf8825f46028793d804facf5e08?version=3.5.1","updated_at":"2021-03-26T02:36:27Z","created_at":"2021-03-26T02:36:27Z","creator_user_login":"ezfe"}
{"number":6117,"comment_id":"807928347","body":"@ezfe I think is different issue","updated_at":"2021-03-26T04:33:26Z","created_at":"2021-03-26T04:33:26Z","creator_user_login":"stalkerg"}
{"number":6117,"comment_id":"808040544","body":"ok, I know why it's happens","updated_at":"2021-03-26T08:39:29Z","created_at":"2021-03-26T08:39:29Z","creator_user_login":"stalkerg"}
{"number":6117,"comment_id":"808314341","body":"because the first \\n (actually something more) between two Fragments (each) we can remove, but the last \\n have no obvious reasons to remove. \r\nThis part in compiler a little tricky... basically here we can see some inconsistency between the parser and internal compiler AST. \r\nI will try to find way to solve it. ","updated_at":"2021-03-26T15:33:09Z","created_at":"2021-03-26T15:33:09Z","creator_user_login":"stalkerg"}
{"number":6117,"comment_id":"869047995","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:36Z","created_at":"2021-06-26T19:04:36Z","creator_user_login":"stale[bot]"}
{"number":6134,"comment_id":"808669011","body":"I debugged that the reason the update is skipped, is because `previousSafeValue` will always be 0 when typing characters, so the assignment to `inputValue` always becomes 0=0.\r\n\r\nHowever, then it seems that there is a lack of synchronization between the fact that the actual input value may be \"0awaw\", and the variable `inputValue` will be 0. Since the input `value` prop is 1-way binded to `inputValue` I would still expect them to be synchronized.\r\n\r\nThe above example can be resolved with something like: https://svelte.dev/repl/4afa6bc5639546d2a7026aceb5d4baa7?version=3.35.0\r\n\r\n\r\n```javascript\r\n<script lang=\"typescript\">\r\n  let bindedInputValue = 0;\r\n  let previousBlockSize = 0;\r\n\r\n  $: {\r\n    if (!isNaN(+bindedInputValue)) {\r\n      bindedInputValue = previousBlockSize = +bindedInputValue;\r\n    } else {\r\n      bindedInputValue = previousBlockSize;\r\n    }\r\n  }\r\n</script>\r\n\r\n <input bind:value={bindedInputValue} />\r\n```\r\n\r\nHowever, it's a little messy having to create an extra variable to two-way bind to the input explicitly, when 1-way should be synced as I described.","updated_at":"2021-03-27T06:29:28Z","created_at":"2021-03-27T06:26:47Z","creator_user_login":"jajabarr"}
{"number":6134,"comment_id":"869047988","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:33Z","created_at":"2021-06-26T19:04:33Z","creator_user_login":"stale[bot]"}
{"number":6134,"comment_id":"964523317","body":"I have a similar issue with the following code:\r\n```svelte\r\n<script>\r\n\tlet name = 'world';\r\n\t\r\n\tfunction onChange(e) {\r\n\t\te.preventDefault() // redundant but still doesnt work\r\n\t\tname = e.currentTarget.value.substr(0, 5); // length shouldnt exceed 5\r\n\t}\r\n\t\r\n\t$: console.log({name})\r\n</script>\r\n\r\n<input value=\"{name}\" on:input|preventDefault=\"{onChange}\" />\r\n```\r\n\r\nThough the length of `name` never exceeds 5 characters, the visual content of `input` is unbounded","updated_at":"2021-11-09T20:38:43Z","created_at":"2021-11-09T20:38:05Z","creator_user_login":"VKBobyr"}
{"number":6134,"comment_id":"998412198","body":"I am also running into this:\r\n\r\n```html\r\n<script>\r\n\tlet noDigits = '';\r\n\t\r\n\tconst handleInput = (ev) => {\r\n\t\tconst rawInput = ev.target.value;\r\n\t\tconst cleanedInput = rawInput.replace(/\\d/g, '');\r\n\t\tnoDigits = cleanedInput;\r\n\t\t\r\n\t\t// it works if you add this line in\r\n\t\t// ev.target.value = noDigits;\r\n\t}\r\n</script>\r\n\r\n<input on:input|preventDefault={handleInput} value={noDigits} />\r\n```","updated_at":"2021-12-21T02:15:04Z","created_at":"2021-12-21T02:14:32Z","creator_user_login":"dotch"}
{"number":6332,"comment_id":"885769296","body":"@subtle-byte it looks like this PR will need to be rebased","updated_at":"2021-07-23T16:51:40Z","created_at":"2021-07-23T16:51:40Z","creator_user_login":"benmccann"}
{"number":6332,"comment_id":"887896701","body":"@benmccann It is rebased now","updated_at":"2021-07-27T23:19:48Z","created_at":"2021-07-27T23:19:48Z","creator_user_login":"subtle-byte"}
{"number":6332,"comment_id":"921641219","body":"I think this needs a lot of testing and user feedback to verify whether it's what people would expect. If I write `derived([storeA, storeB])`, normally my derived store's callback is called whenever *any* of the values in any of its input stores have changed. So if storeA changes from 'hello' to 'bye' and then later on storeB changes from 'world' to 'folks', I'd expect to see 'bye world' before I see 'bye folks'. And that's just what's happening here: the `lastname` store is changing from 'Jekyll' to 'Hyde' *first*, and *then* the `firstname` store changes from 'Henry' to 'Edward', and so we see a 'Henry Hyde' entry first before we see 'Edward Hyde'.\r\n\r\nThing is, I suspect there are probably use cases where that's absolutely the desired behavior, where you *want* to see both changes. And there are other use cases where you only want to see the change after the dependent store has finished updating. The question is how to accomodate both use cases, and that's why I think it's important to do a lot of testing and get user feedback before merging this PR, to make sure that this is what people would expect.","updated_at":"2021-09-17T09:14:57Z","created_at":"2021-09-17T09:14:57Z","creator_user_login":"rmunn"}
{"number":6389,"comment_id":"909440054","body":"It's a bit difficult to see your exact use-case here, I might suggest that you could pair down the REPL into an even simpler format.\r\n\r\nWhat I did was I modified your switch method so that it switched between the two components rather than always switching to input, and the binding is then never undefined, and is in fact always bound to the correct component (the visible one).\r\n\r\nIf this works for you, I would suggest that you are able to do whatever you need to here, and this isn't an issue.\r\n\r\nIf you think there is still an issue, I think a simpler REPL would help us understand and fix it.","updated_at":"2021-08-31T17:29:22Z","created_at":"2021-08-31T17:29:22Z","creator_user_login":"antony"}
{"number":6389,"comment_id":"910090420","body":"Thanks for taking a look into this. The REPL indeed doesn't represent the actual use case all that well, which looks like this: The app has an always visible sidebar, and a main area that different components are slotted into. One of them contains a form, and whenever you switch away from it, I need to call a method to see if its content was changed. So I keep a reference to the current component using `bind:this`. But it turned out that if you transition (e.g. fade in/out) the components when switching them AND interact with the form, then the reference to the component is set to `null`.\r\n\r\nI don't know how to simplify the REPL even further while keeping all three conditions that seem to be necessary to reproduce in there (1: 'bind:this`, 2: transition, 3: interaction with an input field inside the component).\r\n\r\n> What I did was I modified your switch method so that it switched between the two components rather than always switching to input, and the binding is then never undefined, and is in fact always bound to the correct component (the visible one).\r\n\r\nI'd be grateful to see the modification you made. With it, does the reference stay not `null` if you type something into the input?\r\n\r\nAlso, I just noticed that if you click the button twice, `childNode` is also set to `null`, which seems to be another issue that shouldn't be happening, since the `childNode` is not explicitly unset inside the the `switch_` function. Should I open a separate issue for this?","updated_at":"2021-09-01T09:08:06Z","created_at":"2021-09-01T09:08:06Z","creator_user_login":"elpres"}
{"number":6076,"comment_id":"797354242","body":"[https://svelte.dev/repl/7527e3ba5ae148389cb43a5453e3b828?version=3.35.0](https://svelte.dev/repl/7527e3ba5ae148389cb43a5453e3b828?version=3.35.0)","updated_at":"2021-03-12T09:18:05Z","created_at":"2021-03-12T09:18:05Z","creator_user_login":"meiseayoung"}
{"number":6076,"comment_id":"797398000","body":"@meiseayoung <svelte:fragment slot=\"name\" let:prop> is also working fine, the issue appears only when using component as a named slot","updated_at":"2021-03-12T10:32:17Z","created_at":"2021-03-12T10:32:17Z","creator_user_login":"ryu-man"}
{"number":6076,"comment_id":"819835568","body":"A component that has a slot attribute will not provide his slot props, but rather you will access the slot props provided by the direct parent","updated_at":"2021-04-14T21:11:12Z","created_at":"2021-04-14T21:11:12Z","creator_user_login":"ryu-man"}
{"number":6076,"comment_id":"940473258","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-10-11T22:01:31Z","created_at":"2021-10-11T22:01:31Z","creator_user_login":"stale[bot]"}
{"number":6076,"comment_id":"1586354754","body":"I have run into this situation this week as well.\r\n\r\nFortunately it can be worked around by wrapping the component with some element (i.e. 'div').\r\n\r\nIf this is not a bug however it is surprising and at best it's not properly documented.","updated_at":"2023-06-11T22:02:50Z","created_at":"2023-06-11T22:02:50Z","creator_user_login":"saabi"}
{"number":6135,"comment_id":"808651383","body":"before \r\n![Screenshot from 2021-03-26 21-26-39](https://user-images.githubusercontent.com/322311/112710012-42eecd00-8e7b-11eb-88b3-4a68571c9922.png)\r\n\r\nafter\r\n![Screenshot from 2021-03-26 21-26-40](https://user-images.githubusercontent.com/322311/112710013-42eecd00-8e7b-11eb-8d59-8d2efcb5ded4.png)\r\n\r\nYou can fix this by putting `{text1}` and `{text2}` on the same line. If you change `{text1}` to `text1` the text stops moving as well. I think that SSR and CSR render the text nodes slightly differently. This will be easier to investigate once SvelteKit has the ability to variously toggle CSR vs SSR","updated_at":"2021-03-27T04:43:31Z","created_at":"2021-03-27T04:43:31Z","creator_user_login":"benmccann"}
{"number":6135,"comment_id":"808665412","body":"@benmccann \r\nIf replace text nodes to:\r\n```\r\n<div>{text1}</div>\r\n<div>{text2}</div>\r\n```\r\ntext moving too. I think it not related to text nodes only.\r\n\r\nLooks like break new lines are removed after ssr.","updated_at":"2021-03-27T06:29:26Z","created_at":"2021-03-27T06:03:26Z","creator_user_login":"asv7c2"}
{"number":6135,"comment_id":"808881186","body":"@benmccann \r\nMaybe just disable ssr during dev?","updated_at":"2021-03-28T11:06:57Z","created_at":"2021-03-28T11:06:57Z","creator_user_login":"asv7c2"}
{"number":6135,"comment_id":"869047976","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:29Z","created_at":"2021-06-26T19:04:29Z","creator_user_login":"stale[bot]"}
{"number":6135,"comment_id":"1000920125","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:25:00Z","created_at":"2021-12-24T19:25:00Z","creator_user_login":"stale[bot]"}
{"number":6249,"comment_id":"827817121","body":"Also, in my REPL, if you remove the first item (\"apple\") then the new second item (\"cranberry\"), there are two items left in the `vals` array (\"banana\" and \"orange\"), but the bound `items` array only contains the \"orange\" element in the second spot.","updated_at":"2021-04-27T18:21:02Z","created_at":"2021-04-27T18:21:02Z","creator_user_login":"geoffrich"}
{"number":6249,"comment_id":"855269715","body":"label: triage: bug?","updated_at":"2021-06-05T17:22:50Z","created_at":"2021-06-05T17:22:50Z","creator_user_login":"Zachiah"}
{"number":6249,"comment_id":"984880589","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-02T18:19:37Z","created_at":"2021-12-02T18:19:37Z","creator_user_login":"stale[bot]"}
{"number":6249,"comment_id":"984907087","body":"This is still a bug in the [latest Svelte version](https://svelte.dev/repl/6ef0eeb08bc84f268f37281846d836e5?version=3.44.2).","updated_at":"2021-12-02T18:55:27Z","created_at":"2021-12-02T18:55:27Z","creator_user_login":"geoffrich"}
{"number":6249,"comment_id":"996119905","body":"This issue has been closed as it was previously marked as stale and saw no subsequent activity.\n","updated_at":"2021-12-16T19:36:00Z","created_at":"2021-12-16T19:36:00Z","creator_user_login":"stale[bot]"}
{"number":6249,"comment_id":"1183523243","body":"Reopen?","updated_at":"2022-07-13T18:03:50Z","created_at":"2022-07-13T18:03:50Z","creator_user_login":"homerjam"}
{"number":6249,"comment_id":"1511917638","body":"Can confirm, this is still present in latest 3.58.0. \r\n\r\nhttps://svelte.dev/repl/6ef0eeb08bc84f268f37281846d836e5?version=3.58.0\r\n(as stated by the OP, remove the items from bottom to top)","updated_at":"2023-04-17T18:54:24Z","created_at":"2023-04-17T18:53:49Z","creator_user_login":"ptrxyz"}
{"number":6530,"comment_id":"880748727","body":"I could hack it to work by changing:\r\n\r\n```javascript\r\nvar binding_callbacks = [];\r\n```\r\n\r\nfrom [here](https://github.com/sveltejs/svelte/blob/931738e8219eb6bc9afe68d1c383f920c45c45cf/src/runtime/internal/scheduler.ts#L7) to be\r\n\r\n```javascript\r\nglobalThis.binding_callbacks = globalThis.binding_callbacks || [];\r\n```\r\n\r\nThat's obviously not the way to go, but it seems to me, that it's not just a bug, but that Svelte does not support combining multiple compilation outputs together. Is this out of scope for Svelte? I assume that in order for this to work, `binding_callbacks`, `render_callbacks`, etc. would have to be able to be passed into Svelte components, and also exported on demand so that it can be referenced by other components.","updated_at":"2021-07-15T17:53:43Z","created_at":"2021-07-15T14:37:51Z","creator_user_login":"hgiesel"}
{"number":6530,"comment_id":"898553501","body":"Could I get a feedback for this issue. It would really help me plan for the future.","updated_at":"2021-08-13T15:44:01Z","created_at":"2021-08-13T15:44:01Z","creator_user_login":"hgiesel"}
{"number":6530,"comment_id":"904242617","body":"So, the problem here turned out to be bundling multiple copies of svelte/internal, as each copy retains its own state. We were able to work around the issue by exporting the copy bundled with the base code as a global. We exclude svelte from the add-on bundle, and map the call to require(\"svelte/internal\") at runtime to the base code's copy of svelte/internal. ","updated_at":"2021-08-24T01:14:39Z","created_at":"2021-08-24T01:14:39Z","creator_user_login":"dae"}
{"number":7720,"comment_id":"1194445736","body":"I'm not sure I see the bug here and I don't think the behavior is related to Promises. In both cases your code both depends on `imArr` and _also_ modifies it:\r\n\r\n```js\r\nimgArr = [res.url]\r\nconsole.log(imgArr)\r\n```\r\n\r\nAfter all you are modifying `imgArr`, which causes an update, which causes `afterUpdate`, which will again modify `imgArr`. Removing `console.log(imgArr)` also removes the endless async loop (I think? nvm it doesn't).\r\n\r\nMoving it to it's own function removes `console.log(imgArr)` from Svelte's dependency tracking, so `console.log(imgArr)` won't cause another update to be scheduled.\r\n\r\nEdit: I think my explanation is butchered but my point stands. What confused me is that your workaround doesn't actually prevent the loop for the `afterUpdate` case.","updated_at":"2022-07-25T18:25:59Z","created_at":"2022-07-25T18:22:03Z","creator_user_login":"Prinzhorn"}
{"number":7720,"comment_id":"1194482942","body":"Checked again, and your right, afterUpdate does not change with the second repl (I think that happened bc I ran into the issue, and in trying to solve it, switched to the reactive statement). Also, I updated both to log a plain string, and there is still an issue with the afterUpdate, but not the reactive statement.\r\n\r\nSo I guess the issue is not with the fact that it is async, but rather that it is modifying a value that in turn triggers an update","updated_at":"2022-07-25T18:59:25Z","created_at":"2022-07-25T18:55:27Z","creator_user_login":"Tormak9970"}
{"number":7824,"comment_id":"1402445770","body":"Here is one example in details. Complete setup for inspecting the source maps of transpiled and instrumented code can be found at https://github.com/AriPerkkio/svelte-istanbul-reproduction, especially the [debug-svelte-sourcemaps.mjs](https://github.com/AriPerkkio/svelte-istanbul-reproduction/blob/main/debug-svelte-sourcemaps.mjs) part should reveal the process of code coverage.\r\n\r\nConsidering the line 13 of the following each block:\r\n\r\n```js\r\n12 |  {#each users as user}\r\n13 |    <li>{user}</li>\r\n14 |  {/each}\r\n```\r\n\r\nWhen the Svelte code is transpiled to Javascript there will be following position in source map:\r\n\r\n- `#1`: `[24, 0, 12, 9], [27, 0, 12, 13]`\r\n- `#2`: `[62, 0, 12, 9], [65, 0, 12, 13]`\r\n\r\n```js\r\n26          |  let t_value = /*user*/ ctx[1] + \"\";\r\nMapping  #1 |                         ^^^\r\n39          |   if (dirty & /*users*/ 1 && t_value !== (t_value = /*user*/ ctx[1] + \"\")) set_data(t, t_value);\r\nMapping  #2 |                                                              ^^^\r\n```\r\n\r\n```js\r\n13         |    <li>{user}</li>\r\nMapping #1 |         ^^^^\r\nMapping #2 |         ^^^^\r\n```\r\n\r\nWhen the transpiled Javascript is instrumented, Istanbul will add the counters as below:\r\n\r\n- `#3`: `[51, 0, 12, 9, 0],[54, 0, 12, 13]`\r\n- `#4`: `[122, 0, 12, 9, 0],[125, 0, 12, 13]`\r\n- `#5`: `[8, 0, 12, 13]`\r\n\r\n```js\r\n1878       |  let t_value = ( /*user*/cov_208gup579f().s[3]++, ctx[1] + \"\");\r\nMapping #3 |                                                   ^^^\r\n1899       |      if ((cov_208gup579f().b[1][0]++, dirty & /*users*/1) && (cov_208gup579f().b[1][1]++, t_value !== (t_value = /*user*/ctx[1] + \"\"))) {\r\nMapping #4 |                                                                                                                          ^^^\r\n1900       |        cov_208gup579f().b[0][0]++;\r\nMapping #5 |        ^\r\n```\r\n\r\nThese map to the sources as below:\r\n\r\n```js\r\n13         |    <li>{user}</li>\r\nMapping #3 |         ^^^^\r\nMapping #4 |         ^^^^\r\nMapping #5 |            ^\r\n```\r\n\r\nAnd now finally in the coverage report:\r\n\r\n```js\r\n13                          |    <li>{user}</li>\r\nstatementMap[\"0\"]           |         ^^^^^^^^^^\r\nstatementMap[\"1\"]           |    ^\r\nstatementMap[\"2\"]           |             ^^^^^^\r\nbranchMap[\"0\"].locations[0] |         ^^^^^^^^^^\r\nbranchMap[\"1\"].locations[0] |         ^^^^\r\nbranchMap[\"1\"].locations[1] |         ^^^^^^^^^^\r\n```\r\n\r\n‚ùó Both entries in `branchMap` are not present in sources but are present in transpiled code. They should be excluded from instrumentation.\r\n\r\nSo the tricky part in transpiled code is this one:\r\n\r\n```js\r\n39 |   if (dirty & /*users*/ 1 && t_value !== (t_value = /*user*/ ctx[1] + \"\")) set_data(t, t_value);\r\n```\r\n\r\nThe \"Mapping pair `#2`\" mentioned above has to be in source maps for debuggers.\r\nBut that means that it will also end up in coverage reports when the preceding `if (dirty & ...)` gets instrumented with branch counter.\r\nSince the part cannot be removed from source maps, I think the only option is to place ignore hint before the if-block. Svelte compiler should do this.\r\n\r\n```diff\r\n+ 38 |   /* istanbul ignore if */\r\n  39 |   if (dirty & /*users*/ 1 && t_value !== (t_value = /*user*/ ctx[1] + \"\")) set_data(t, t_value);\r\n```\r\n\r\nThere are likely other similar cases that should be covered as well. ","updated_at":"2023-01-24T19:02:42Z","created_at":"2023-01-24T19:02:42Z","creator_user_login":"AriPerkkio"}
{"number":7758,"comment_id":"1205949111","body":"Everything seems to be switching between \"Alice\" and \"Bob\" correctly for me when I select options in the first dropdown in your REPL. What are you doing and what are you seeing?","updated_at":"2022-08-05T01:46:06Z","created_at":"2022-08-05T01:46:06Z","creator_user_login":"Conduitry"}
{"number":7758,"comment_id":"1205999497","body":"This is what I'm seeing. The top most one, the value doesn't change with menu selection. \n\nForgot to report that this is latest Chrome on iOS and Safari is same result. So is Mac Chrome. \n\n\nhttps://youtu.be/KK4RCyVaOco","updated_at":"2022-08-05T03:23:03Z","created_at":"2022-08-05T03:20:50Z","creator_user_login":"basuke"}
{"number":7758,"comment_id":"1206003472","body":"It works well on Mac Firefox. \r\n\r\nGood:\r\n- Mac Firefox (104.0b6)\r\n\r\nBad:\r\n- Mac Safari (15.6)\r\n- Mac Chrome (103.0.5060.134)\r\n- iOS Safari\r\n- iOS Chrome","updated_at":"2022-08-05T03:30:07Z","created_at":"2022-08-05T03:30:07Z","creator_user_login":"basuke"}
{"number":7758,"comment_id":"1206031876","body":"I checked this issue and I found 1 thing.\r\n\r\nI created minimum REPL by vanilla JS.\r\nhttps://codepen.io/baseballyama/pen/rNJOwGX\r\n\r\nI think the reson is that Google Chrome on mac hundles input event before change event.\r\nAFAIK, browser doesn't have garantee of event firering order. so I'm not sure what we can do for this. ","updated_at":"2022-08-05T04:33:18Z","created_at":"2022-08-05T04:33:18Z","creator_user_login":"baseballyama"}
{"number":7758,"comment_id":"1341005889","body":"would it be possible to check OS and adjust behavior accordingly in svelte? or force event firing order in some way? or is that not something we can do?","updated_at":"2022-12-07T13:57:39Z","created_at":"2022-12-07T13:57:39Z","creator_user_login":"elialbert"}
{"number":7758,"comment_id":"1626005093","body":"Tested on MacOS + Chromium 114.0.5735.198 AND MacOS + Safari 16:  \r\n\r\n`on:input`: Does not work as expected - Apparently the `<select>` WITH `on:input` has issues updating the component state.\r\n`on:change`: Works as expected.","updated_at":"2023-07-07T20:03:24Z","created_at":"2023-07-07T20:03:24Z","creator_user_login":"victorhazbun"}
{"number":7888,"comment_id":"1273187541","body":"Findings - the destroy check whether it has some parent div and since block chunks read from top to bottom, it says to detach the div first then destroy the child component.\r\n\r\nI would like to work on this issue\r\n","updated_at":"2022-10-10T11:40:33Z","created_at":"2022-10-10T11:40:33Z","creator_user_login":"RaiVaibhav"}
{"number":7888,"comment_id":"1273229897","body":"Hey @tanhauhau can you guide me if this solution can cause any edge case?, in this case, I am checking if there is a parent node instead of push append to the first, and for nested components then the last child will be at the first index.\r\n```\r\n\tif (parent_node) {\r\n\t\tblock.chunks.destroy.unshift(b`\r\n\t\t\t@destroy_component(${name}, detaching);\r\n\t\t`);\r\n\t} else {\r\n\t\tblock.chunks.destroy.push(b`\r\n\t\t\t@destroy_component(${name}, ${parent_node ? null : 'detaching'});\r\n\t\t`);\r\n\t}\r\n```","updated_at":"2022-10-10T12:19:45Z","created_at":"2022-10-10T12:19:45Z","creator_user_login":"RaiVaibhav"}
{"number":7888,"comment_id":"1336298623","body":"~~I think current behaivior is correct.~~\r\n~~I created REPL with valinna JS but blur event occured.~~\r\n~~https://codepen.io/baseballyama/pen/VwdVXMY~~\r\n\r\n~~We should have same behaivior between vanilla JS and Svelte.~~\r\n\r\n-> This is not related to the issue.","updated_at":"2023-02-23T12:34:57Z","created_at":"2022-12-04T01:51:38Z","creator_user_login":"baseballyama"}
{"number":7696,"comment_id":"1188281098","body":"In your exemple you capitalise the first letter on every change so the value won't update if you upper/lower the first letter in the input. ","updated_at":"2022-07-19T07:54:37Z","created_at":"2022-07-18T20:36:53Z","creator_user_login":"Jonathan-J8"}
{"number":7696,"comment_id":"1188297192","body":"I see what's happening, it's setting to the same value it already is, so the `input.value =` gets optimized away. One workaround is to set to raw updated value first, then the programmatically altered value, as in:\r\n\r\nhttps://svelte.dev/repl/435add48355b45ecba561fc9440e60c5?version=3.49.0\r\n\r\nI guess this isn't actually a bug. Let me resolve.","updated_at":"2022-07-18T20:51:00Z","created_at":"2022-07-18T20:51:00Z","creator_user_login":"johnnysprinkles"}
{"number":7696,"comment_id":"1188618120","body":"You are right this is not a bug as `name` never changes, you can also add a `$: console.log(name)` in the script to make it even more obvious (it will only log once). \r\n\r\nUnsetting the value first _is_ a workaround but it will trigger unnecessary rerenders where you use that variable, it is likely better to force the input element's value itself: \r\n```html\r\n<script>\r\n  let name = 'World';\r\n\r\n  function capitalize(e) {\r\n    let newName = e.currentTarget.value;\r\n    e.currentTarget.value = name = newName.slice(0, 1).toUpperCase() + newName.slice(1);\r\n  }\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input value={name} on:change|preventDefault={capitalize}>\r\n```\r\n\r\n","updated_at":"2022-07-19T05:34:48Z","created_at":"2022-07-19T05:34:48Z","creator_user_login":"stephane-vanraes"}
{"number":7694,"comment_id":"1186839411","body":"I was thinking and, or maybe something like:\r\n```css\r\ndiv > :$Foo {\r\n  ...\r\n}\r\n\r\ndiv > :$Foo(div) {\r\n  ...\r\n}\r\n```\r\nAlso can be used like\r\n```css\r\ndiv > :$Foo(div > img) {\r\n  ...\r\n}\r\n```\r\nwhich lets you use the selectors inside the component's scope\r\nwhich is similar to `:global()` but more specific and IDE knows more it, so it can give warnings or auto suggestions.","updated_at":"2022-07-18T07:29:13Z","created_at":"2022-07-18T07:05:49Z","creator_user_login":"DeepDoge"}
{"number":7694,"comment_id":"1193041868","body":"Having a way to target components with CSS would be awesome.\r\n\r\nThere must be existing proposals or discussions that have touched on this but for me personally this would be a great quality of life improvement, saves having to make classes and pass those down.\r\n\r\nAs a start, you could have it only work on components that have a single, top-level HTML element in them (so in your case the `<a />` in _foo.svelte_ would be disallowed). Potentially later you could introduce a syntax to target elements in that child component as you've shown.","updated_at":"2022-07-23T02:30:07Z","created_at":"2022-07-23T02:30:07Z","creator_user_login":"jhwz"}
{"number":7694,"comment_id":"1214227935","body":"Related to:\r\n- #6972\r\n- #7125 ?\r\n- sveltejs/rfcs#63\r\n- sveltejs/rfcs#66\r\n- #6422\r\n- #2870 ?\r\n- #5804\r\n- #7776 ?","updated_at":"2022-08-13T22:01:19Z","created_at":"2022-08-13T21:57:07Z","creator_user_login":"MacFJA"}
{"number":7694,"comment_id":"1214245606","body":"> Having a way to target components with CSS would be awesome.\r\n> \r\n> There must be existing proposals or discussions that have touched on this but for me personally this would be a great quality of life improvement, saves having to make classes and pass those down.\r\n> \r\n> As a start, you could have it only work on components that have a single, top-level HTML element in them (so in your case the `<a />` in _foo.svelte_ would be disallowed). Potentially later you could introduce a syntax to target elements in that child component as you've shown.\r\n\r\ntbh `:$Foo` would selects everything inside the component and `div > :$Foo` selects only the top ones. \r\n`:$Foo` really stands for the component's component css id.  `:$Foo` would be equal to `:$Foo(*)`\r\nso if you say `:$Foo(img)` it selects every image inside every Foo component inside the current component\r\n\r\nso in theory to select the first top element you can do tricks like `* > :$Foo` or `* > :$Foo(*)`\r\n\r\nso as i said similar to `:global()` and it just gives more info to IDE and more control over your selection.","updated_at":"2022-08-13T23:43:39Z","created_at":"2022-08-13T23:26:02Z","creator_user_login":"DeepDoge"}
{"number":7694,"comment_id":"1277485271","body":"I proposed a different Component selector approach in https://github.com/sveltejs/svelte/issues/6972#issuecomment-1277463898, and even created a POC svelte-preprocessor that allows you to use the approach today! üòÑ","updated_at":"2022-10-13T11:49:21Z","created_at":"2022-10-13T11:49:21Z","creator_user_login":"valterkraemer"}
{"number":7749,"comment_id":"1203639988","body":"https://github.com/sveltejs/svelte/issues/5689\r\n\r\nEven if you remove the button, you get two logs, which is the original bug. Svelte triggers updates for no reason when binding objects.","updated_at":"2022-08-03T08:25:49Z","created_at":"2022-08-03T08:23:03Z","creator_user_login":"Prinzhorn"}
{"number":7749,"comment_id":"1203711062","body":"> [Prinzhorn](https://github.com/Prinzhorn),\r\nYep\r\nNot only binding, passing too","updated_at":"2022-08-03T09:32:36Z","created_at":"2022-08-03T09:31:05Z","creator_user_login":"siroBS"}
{"number":7749,"comment_id":"1203714916","body":"Can you elaborate and provide a REPL? You're saying you see unnecessary updates without using `bind:` at all?","updated_at":"2022-08-03T09:34:50Z","created_at":"2022-08-03T09:34:50Z","creator_user_login":"Prinzhorn"}
{"number":7749,"comment_id":"1203720518","body":"> Can you elaborate and provide a REPL? You're saying you see unnecessary updates without using `bind:` at all?\r\n\r\nPlease,\r\n[Issue with passing args to child](https://svelte.dev/repl/7d4ca8d7d6274308bdb3cca75f4b105b?version=3.49.0)","updated_at":"2022-08-03T09:40:21Z","created_at":"2022-08-03T09:40:21Z","creator_user_login":"siroBS"}
{"number":7749,"comment_id":"1203726419","body":"Thanks, this looks like a different bug to me (there might already be a duplicate issue though).\r\n\r\nFor some reason Svelte invalidates the expression used in the condition. If you do this:\r\n\r\n```diff\r\n-\t$: if (data) {\r\n+\t$: if (true) {\r\n\t\tconsole.log('--- WTF-Trigger---');\r\n\t\tdataNew = [{key: 1, val: '1'}];\r\n\t}\r\n```\r\n\r\nthen nothing is logged. Which doesn't make sense, because `data` is const throughout the entire application. It is never changed, but Svelte invalidates it anyway.","updated_at":"2022-08-03T09:46:12Z","created_at":"2022-08-03T09:46:12Z","creator_user_login":"Prinzhorn"}
{"number":7749,"comment_id":"1203728969","body":"Seems closely related to this https://github.com/sveltejs/svelte/issues/7129#issuecomment-1012533937","updated_at":"2022-08-03T09:48:40Z","created_at":"2022-08-03T09:48:40Z","creator_user_login":"Prinzhorn"}
{"number":7749,"comment_id":"1203856003","body":"Interesting, with a primitive attributes does nothing going on like this. Looks like a hidden linking (bounding) under the hood, that causes Svelte to track passed arguments as a single object. And what is even more interesting is that if we change in the click handler to the SAME assignment (even though the value of the ENTIRE object \"data\" also changes), but the object is not itself, the problem also disappears.\r\nUnfortunately, I don't have the resources to dive further into the problem and do research, but this may be the root of the problem.\r\n[REPL](https://svelte.dev/repl/e4341b55badd4d2abf917a04bc6a573d?version=3.49.0)","updated_at":"2022-08-03T12:02:20Z","created_at":"2022-08-03T11:59:39Z","creator_user_login":"siroBS"}
{"number":7749,"comment_id":"1221587557","body":"In case it might be useful: here's another eample where this issue manifests itself:\r\n\r\n* StackOverflow question: https://stackoverflow.com/questions/73432013/trying-to-understand-why-changing-a-variable-re-triggers-reactive-statements-of\r\n* REPL demonstrating the issue: https://svelte.dev/repl/d07ffc88e4a34cb797d2ceb6ba0ec6a4?version=3.49.0\r\n\r\nAccording to a comment on the linked stackoverlow question, this bug seems to have been introduced after the `3.2.0` release: the same eample linked above works with that version: https://svelte.dev/repl/d07ffc88e4a34cb797d2ceb6ba0ec6a4?version=3.2.0\r\n\r\nEdit: the bug can be reproduced with `3.2.1`, so that's where it was probably introduced: https://github.com/sveltejs/svelte/compare/v3.2.0...v3.2.1","updated_at":"2022-08-21T17:28:56Z","created_at":"2022-08-21T17:23:27Z","creator_user_login":"jawher"}
{"number":7634,"comment_id":"1166200413","body":"Do you think [named slots](https://svelte.dev/docs#template-syntax-slot-slot-name-name) already achieve this?\r\n","updated_at":"2022-06-25T05:59:57Z","created_at":"2022-06-25T05:59:57Z","creator_user_login":"babichjacob"}
{"number":7634,"comment_id":"1166409359","body":"@babichjacob Slots can't be passed to sibling components. This is a slimmed down version of what I have in my layout file:\r\n\r\n```\r\n<main>\r\n  <Header />\r\n  <Banner />\r\n  <Page />\r\n</main>\r\n```\r\n\r\nBanner is where the banner contents are displayed/styled, but Page is the one that sets the banner contents. Banner contents varies per page. Currently there is no native way to set content for one component via another. I either have to bubble an event up to the parent and back down, or set content on a store, but storing HTML in a svelte store feels wrong.","updated_at":"2022-06-26T03:29:30Z","created_at":"2022-06-26T03:29:30Z","creator_user_login":"KieranP"}
{"number":7634,"comment_id":"1172902667","body":"I would also say that named slots are a good approach. It depends a bit on how your layout component is used.   \r\n<details>\r\n<summary>Here is one example that might work for you</summary>\r\nLayout.svelte:  \r\n\r\n```svelte\r\n<main>\r\n  <Header />\r\n  <Banner>\r\n    <slot slot=\"page-header-title\" name=\"page-header-title\" />\r\n    <slot slot=\"page-header-action\" />\r\n  </Banner>\r\n  <slot />\r\n</main>\r\n```\r\n\r\nBanner.svelte:  \r\n```svelte\r\n<div>\r\n  <h1>\r\n    <slot name=\"page-header-title\" />\r\n  </h1>\r\n\r\n  <div class=\"actions\">\r\n    <slot name=\"page-header-action\" />\r\n  </div>\r\n</div>\r\n```\r\nand lastly Page.svelte:  \r\n```svelte\r\n  <Layout>\r\n   <svelte:fragment slot=\"page-header-title\">\r\n     Test\r\n  </svelte:fragment>\r\n  \r\n  <svelte:fragment slot=\"page-header-action\">\r\n    <a href=\"...\"></a>\r\n  </svelte:fragment>\r\n  \r\n  Remaining page content here...\r\n</Layout>\r\n```\r\nThis setup of course assumes that you can decide where, how and when your layout component is instantiated.\r\n</details>","updated_at":"2022-07-02T13:57:26Z","created_at":"2022-07-02T13:56:11Z","creator_user_login":"JAAvander"}
{"number":7677,"comment_id":"1186455634","body":"when you use `transition:fn`, the function will be called once throughout the lifetime of the element, and the returned object will be used for transitioning in and out until the element is completely removed from the DOM.\r\n\r\ntry click quickly to make the element transition out and in in succession multiple times, as long as the element is not completely removed, the same return object is used on the element.\r\n\r\nso if u want to run some calculation, right before the out transition is played, you can listen to the [`outrostart` event](https://svelte.dev/docs#template-syntax-element-directives-transition-fn-transition-events), but be sure to unlisten when the element is completely removed, possibly with a `outroend` event\r\n\r\n```js\r\nexport function slide(node) {\r\n  node.addEventListener('outrostart', () => {\r\n    console.log(`${node.textContent} css is calculated`); // Added\r\n  });\r\n\r\n  return { ... };\r\n}","updated_at":"2022-07-17T09:16:51Z","created_at":"2022-07-17T09:16:51Z","creator_user_login":"tanhauhau"}
{"number":7677,"comment_id":"1186779191","body":"The easiest fix seems to be using `in:` and `out:`, instead of `transition:`. ([REPL](https://svelte.dev/repl/8e4398315ff145a7866d0a2de2dc1bdb?version=3.49.0))\r\n\r\n> Unlike with `transition:`, transitions applied with `in:` and `out:` are not bidirectional ‚Äî an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch. ([Source](https://svelte.dev/docs#template-syntax-element-directives-in-fn-out-fn))\r\n\r\nhttps://user-images.githubusercontent.com/47051820/179446044-99c63602-e5d8-4dfb-98e9-d50fe8479e7d.mp4\r\n\r\n---\r\n\r\nI still hope there is an easier way to recalculate the transitions using the `transition:` directive.\r\n\r\nSince it has to be bidirectional, maybe recalculate the outro only after the intro has ended?\r\n\r\nTransition functions use the node's current computed styles, which can change over its lifecycle.\r\n\r\nFor example, closing a foldable device can change the `px` values of `height` or `padding-top`.\r\n\r\nhttps://user-images.githubusercontent.com/47051820/179448615-7074dc6f-ba74-4a15-afee-29da145cb6fe.mp4\r\n\r\n‚ñ≥ Slide transition breaks on outro (intro played on unfold, outro played on fold state)","updated_at":"2022-07-18T05:20:45Z","created_at":"2022-07-18T05:20:45Z","creator_user_login":"hyunbinseo"}
{"number":7735,"comment_id":"1207211631","body":"Since Action receives an HTMLElement, so it cannot follow below rule.\r\n\r\nhttps://svelte.dev/docs#run-time-svelte-onmount\r\n> It must be called during the component's initialisation\r\n\r\nI have implemented an alternative. Would this be a workaround?\r\n\r\nhttps://svelte.dev/repl/aa220a4dc8ef4ab9ad79faa7feb7200d?version=3.49.0","updated_at":"2022-08-06T13:05:27Z","created_at":"2022-08-06T13:05:27Z","creator_user_login":"baseballyama"}
{"number":7735,"comment_id":"1207220875","body":"@baseballyama I'm the original poster of the discord discussion. Thanks for your input. It is certainly a workaround. But for a self-contained action (say an action that does some internal stuff when component has been mounted), requiring users to manually execute the exported `onMountProcess` is probably not the best experience.\r\n\r\nAnd now that i have thought about it, you are right. `action` is executed when `HTMLElement` is created, not during component initialization. In fact, if we look at the compiled code in the [original repl](https://svelte.dev/repl/7aa63b40621344c1a7459516c2ca03a4?version=3.49.0), the `action` is called during the mount instruction:\r\n\r\n```javascript\r\n// portion of compiled JS of `C1.svelte`\r\nm(target, anchor) {\r\n\tinsert(target, main, anchor);\r\n\r\n\tif (!mounted) {\r\n\t\tdispose = action_destroyer(action_action = action.call(null, main));\r\n\t\tmounted = true;\r\n\t}\r\n},\r\n```\r\n\r\nSo the bottom line is we should not use `onMount` in `action`, although the fact that it sometimes works still bothers me (try removing the `if` condition in the [original repl](https://svelte.dev/repl/7aa63b40621344c1a7459516c2ca03a4?version=3.49.0)).\r\n\r\nFor people coming to this thread, here is my workaround (thanks [Geoff Rich](https://github.com/geoffrich))\r\n\r\n```javascript\r\nimport { tick } from 'svelte';\r\nexport function yourAction() {\r\n  // ...\r\n  \r\n  tick().then(() => {\r\n    // do stuff for when mounted\r\n  });\r\n  \r\n  // ...\r\n}\r\n```\r\n\r\nFWIW, I have also tried `setTimeout(..., 0)` in place of `tick` and it works as well, although i think we should stick to `tick` here. Also, I imagine that [beforeUpdate](https://svelte.dev/docs#run-time-svelte-beforeupdate) and [afterUpdate](https://svelte.dev/docs#run-time-svelte-afterupdate) can be used in `action` and might come in handy in some use cases.\r\n\r\n@tanhauhau (sorry for tagging) consider you've made [this wonderful video about component initialization](https://www.youtube.com/watch?v=PI54YD4GsCc), perhaps you can give some insights and decide whether this is a proper issue (or close it)?","updated_at":"2022-08-06T14:13:59Z","created_at":"2022-08-06T14:06:11Z","creator_user_login":"vnphanquang"}
{"number":7735,"comment_id":"1207239143","body":"How about something like that?\r\nhttps://svelte.dev/repl/237823ed53614c60902db0745dff0d6e?version=3.49.0","updated_at":"2022-08-06T16:03:34Z","created_at":"2022-08-06T16:03:34Z","creator_user_login":"PatrickG"}
{"number":7807,"comment_id":"1226867516","body":"Very similar to https://github.com/sveltejs/svelte/issues/7450 and https://github.com/sveltejs/svelte/issues/7563 (basically a duplicate I would say)\r\n\r\n```\r\nArray.from(document.querySelectorAll('a')).map(e => e.namespaceURI)\r\n\r\n0: \"http://www.w3.org/2000/svg\" <=============\r\n1: \"http://www.w3.org/1999/xhtml\" \r\n```","updated_at":"2022-08-25T07:15:24Z","created_at":"2022-08-25T07:13:19Z","creator_user_login":"Prinzhorn"}
{"number":7807,"comment_id":"1362454410","body":"If you can't add `<svelte:options namespace=\"svg\">` into all nested components you can use this action :\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\r\n  /** Ensure all \"a\" elements inside an SVG node belong to the correct namespace */\r\n  function ensureSVGA(node: SVGSVGElement) {\r\n    const namespaceSVG = 'http://www.w3.org/2000/svg'\r\n    const links = node.querySelectorAll<HTMLLinkElement>('a')\r\n    for (const link of links) {\r\n      if (link.namespaceURI === namespaceSVG) continue\r\n      const a = document.createElementNS(namespaceSVG, 'a')\r\n      for (const { name, value } of link.attributes) {\r\n        a.setAttribute(name, value)\r\n      }\r\n      a.append(...link.children)\r\n      link.insertAdjacentElement('beforebegin', a)\r\n      link.remove()\r\n    }\r\n  }\r\n</script>\r\n\r\n<svg use:ensureSVGA>\r\n  <slot />\r\n</svg>\r\n\r\n```\r\n\r\n","updated_at":"2022-12-25T13:29:42Z","created_at":"2022-12-22T06:04:43Z","creator_user_login":"peufo"}
{"number":7807,"comment_id":"1364466227","body":"I've found a similar problem when loading SVG defs via a `svelte:fragment` when the svg element is also a slot and the parent element is an HTML div.\r\n\r\nHere's the repro: https://svelte.dev/repl/2647caa253d648428dfd96b8d1d6b974?version=3.55.0\r\n\r\nIf you comment out the main wrapper div, svelte is able to detect the SVG namspace and the gradient shows up. If you wrap the whole thing in a div, it will interpret `<linearGradient>` an HTML tag. I tried adding `<svelte:options namespace=\"svg\"/`> to the `Svg.svelte` component but that has no effect.","updated_at":"2022-12-24T05:36:32Z","created_at":"2022-12-24T05:36:32Z","creator_user_login":"mhkeller"}
{"number":7807,"comment_id":"1364684038","body":"@mhkeller can you `<svelte:options namespace=\"svg\"/>` in nested component? [https://svelte.dev/repl/822371299ddf401885091c66715c66f7?version=3.55.0](https://svelte.dev/repl/822371299ddf401885091c66715c66f7?version=3.55.0)","updated_at":"2022-12-25T13:38:52Z","created_at":"2022-12-25T13:38:52Z","creator_user_login":"peufo"}
{"number":7807,"comment_id":"1364709499","body":"Yes that it as a viable workaround for now ‚Äì¬†similar to adding the xmlns attribute inline to the `linearGradient` tag. It would still be nice if Svelte detected that the children of the defs object were svg elements, though. ","updated_at":"2022-12-25T16:57:02Z","created_at":"2022-12-25T16:57:02Z","creator_user_login":"mhkeller"}
{"number":7990,"comment_id":"1299081001","body":"This is a bug in Svelte rather than SvelteKit ‚Äî it's visible in this reproduction: https://svelte.dev/repl/e14ddc6557ac4352b86fbbe574bcc843?version=3.52.0\r\n\r\nThe scoping class shouldn't be added to the `<tr>` elements or the corresponding `tr:hover` selectors ‚Äî we only need to add the scoping class to the outer elements. Adding the class to the `tr` is superfluous. Yet for some reason, that's what's happening here, but only in the case of the `th` block ‚Äî the selector is (incorrectly) being scoped (`tr.svelte-xyz123:hover`) but the class (correctly) isn't being added to the element.\r\n\r\nIt's very weird that it's working differently for the `th` and the `td`. Doesn't seem to matter if they're separate declarations or comma-separated selectors, or what order they appear in. Have no idea what could be causing that. Am also at a loss as to why it's working as you expect in dev.\r\n\r\nUntil we get to the bottom of this, there's a workaround:\r\n\r\n```diff\r\n-tbody tr:hover th {\r\n+tbody tr:hover :is(th) {\r\n```","updated_at":"2022-11-01T20:11:27Z","created_at":"2022-11-01T20:11:27Z","creator_user_login":"Rich-Harris"}
{"number":7990,"comment_id":"1300855867","body":"Workaround is perfectly fine for me right now.\r\nThanks, Rich!","updated_at":"2022-11-02T16:36:34Z","created_at":"2022-11-02T16:36:34Z","creator_user_login":"Florinstruct"}
{"number":7990,"comment_id":"1341607018","body":"There is definitely something up with css scoping. See #7991 ","updated_at":"2022-12-07T21:14:57Z","created_at":"2022-12-07T21:14:57Z","creator_user_login":"subpx"}
{"number":8065,"comment_id":"1502202552","body":"@Rich-Harris @dummdidumm @Conduitry\r\n\r\nI'd love to get this added for Svelte 4. It would make event-oriented architecture much more manageable.","updated_at":"2023-04-10T19:15:24Z","created_at":"2023-04-10T19:15:24Z","creator_user_login":"brandonmcconnell"}
{"number":8065,"comment_id":"1503237603","body":"Here's a simple real-world scenario where I might've used this if it were supported:\r\n\r\n### PrintlessLink.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { isPrint } from 'css-utils';\r\n  const print = isPrint();\r\n\r\n  export let href: string = '';\r\n  export let openNewWindow = false;\r\n  \r\n  $: isButton = !href && $$events.click;\r\n  $: noAction = !href && !$$events.click;\r\n</script>\r\n\r\n{#if $print || noAction}\r\n  <div>\r\n    <slot />\r\n  </div>\r\n{:else}\r\n  <svelte:element\r\n    this={isButton ? 'button' : 'a'}\r\n    {href}\r\n    type={isButton ? 'button' : undefined}\r\n    on:click\r\n    target={!isButton && openNewWindow ? '_blank' : undefined}\r\n  >\r\n    <slot />\r\n  </svelte:element>\r\n{/if}\r\n```\r\n\r\nNotably, `$$events.click` is not satisfied because the `else` block contains an element forwarding/using `on:click`, bit rather because the expression calling/building this component instance uses `on:click`, like this:\r\n\r\n```svelte\r\n<PrintlessLink on:click={() => goToPage(id)}> Visit the page </PrintlessLink>\r\n```\r\n\r\nThis aligns with how both `$$slots` and `$$props` work, where their values depend on which slots and props are used when creating the component instance from within the parent component.","updated_at":"2023-04-11T12:30:24Z","created_at":"2023-04-11T12:27:35Z","creator_user_login":"brandonmcconnell"}
{"number":7704,"comment_id":"1191688310","body":"I looked at the source code, and it seems like when generating `adder_x_binding`, the following line is added (in render_dom/wrappers/Element/index.ts:679): \r\n`${this.renderer.invalidate(dep)};` - this line is supposed to invalidate `counter`.\r\n\r\nWhen looking at `renderer_invalidate` in render_dom/invalidate.ts:132, I found that `'program'` gets added to the `deps` set when calling the function with `name: 'counter'`. The deps, ie. `program` and `counter` are then invalidated.\r\n\r\nI found out that the bug is the result of a bugfix of #2444. It is the reason that `deps` exist at all. Check out the REPL in the issue for insight. The REPL's behaviour was fixed in 3.2.1, and after that, if you have a reactive statement like `$: x = y`, then changing `x.foo` invalidates `y` too. This fixed the REPL in the issue, where x is a filtered and displayed version of the todos array (y). So the event handler for the checkbox that changes `filtered[/*eachBlockIndex*/].done` also invalidates `todos`.\r\n\r\nThis behaviour happens in renderer_invalidate, where when generating an invalidate for `x`, it checks all reactive statements to see if `x` is ever set by assignment to another variable, and then invalidates that too:\r\n\r\n        // I added some comments to tie the above example of x and y to this piece of code\r\n\tconst deps = new Set([name/*x*/]);\r\n\tdeps.forEach(name/*x*/ => {\r\n\t\tconst reactive_declarations = renderer.component.reactive_declarations.filter(z =>\r\n                /* get all reactive declarations where name is assigned to */\r\n\t\t\tz.assignees.has(name)\r\n\t\t);\r\n\t\treactive_declarations.forEach(declaration => {\r\n                  /* invalidate all dependencies of the reactive declaration */\r\n\t\t\tdeclaration.dependencies.forEach(name => deps.add(name));\r\n\t\t});)\r\n\t});\r\n\r\nIt fixes the specific REPL, but introduces problems which are the source of many other issues (I would consider looking into at least #4933, #4448, #7416 and #7574)\r\n\r\n- For example the case is where the \"x\" is reassigned entirely (`x=foo`). Only changing a property of `x` should result in `y` getting invalidated.\r\n- Also, if the \"y\" in the reactive statement is a primitive, it's copied by value, so changing \"x\" (that was copied by value) shouldn't invalidate the primitive it was copied from. \r\n- Third, the assignment might never happen, the reactive declaration could even be `$: if (false) x = y`\r\n\r\nIn my example, all of these are fulfilled. To fix the issues entirely, we would need to add checks for all of the above cases before invalidating other variables. \r\n\r\nHowever, since the behaviour that #2444 introduced now works as it did before (change the todo REPL version to 3.49, it doesn't work again), I propose to just remove the code snippet entirely. Also, I think the behaviour that changing `filtered` should invalidate `todos` is not necessarily wanted, since the docs say nothing about it, and instead beginners are taught that variables are invalidated only by direct assignment or binding. In the other case, you would also need to consider assignments like `x = y` that happen *outside* of reactive declarations, which is a far bigger task.","updated_at":"2022-07-21T16:18:07Z","created_at":"2022-07-21T16:18:07Z","creator_user_login":"discapes"}
{"number":7925,"comment_id":"1273685939","body":"This dates back a long time ago (I think Svelte 1?) where people would generally use HTML syntax highlighting when editing Svelte components, so we encouraged people to use `foo=\"{bar}\"` rather than `foo={bar}` so that their file would be highlighted correctly. I wouldn't be against changing this in Svelte 4.","updated_at":"2022-10-10T18:42:17Z","created_at":"2022-10-10T18:42:17Z","creator_user_login":"Conduitry"}
{"number":7925,"comment_id":"1273691954","body":"A counter argument to changing this is that you can do this today: `class=\"{foo} some string\"`","updated_at":"2022-10-10T18:49:49Z","created_at":"2022-10-10T18:49:49Z","creator_user_login":"dummdidumm"}
{"number":7925,"comment_id":"1273695389","body":"How is that a counter argument? This is just string interpolation in exactly the way I expect it to work.\r\n(Same as in element text content.)","updated_at":"2022-10-10T18:54:44Z","created_at":"2022-10-10T18:54:00Z","creator_user_login":"brunnerh"}
{"number":7925,"comment_id":"1273700941","body":"I'm sorry, forget my comment, didn't read thoroughly enough. Note to self: this would also need adjustment in prettier-plugin-svelte","updated_at":"2022-10-10T19:01:43Z","created_at":"2022-10-10T19:00:51Z","creator_user_login":"dummdidumm"}
{"number":7925,"comment_id":"1439843259","body":"Given how big of a breaking change this is I suggest to first adjust `prettier-plugin-svelte` rules around this in a major that aligns with the Svelte 4 release to never have quotes in that scenario, and then see if we do it for Svelte 5.","updated_at":"2023-02-22T11:16:35Z","created_at":"2023-02-22T11:16:35Z","creator_user_login":"dummdidumm"}
{"number":7925,"comment_id":"1585025731","body":"Either add some types or configure your prettier/linter to format or yell at you. ","updated_at":"2023-06-09T19:13:10Z","created_at":"2023-06-09T19:13:10Z","creator_user_login":"koodeau"}
{"number":7925,"comment_id":"1602555335","body":"If you‚Äôre passing the string value to a component property which expects a number then you‚Äôd get an error message immediately. I guess jsdoc can solve this problem by specifying property types if you‚Äôre not using typescript. ","updated_at":"2023-06-22T12:31:31Z","created_at":"2023-06-22T12:31:31Z","creator_user_login":"koodeau"}
{"number":7961,"comment_id":"1284498801","body":"I can't tell what this is actually asking for. What is the proposed new syntax, and what DOM would it result in? Please give examples that include as few extraneous details as possible, and not a screenshot of code from your app.","updated_at":"2022-10-19T19:51:27Z","created_at":"2022-10-19T19:51:27Z","creator_user_login":"Conduitry"}
{"number":7961,"comment_id":"1284618195","body":"@Conduitry I think the point here is: A directive to directly add DOM node instances to the document, rather than parsing raw HTML.\r\n\r\nAdvantages to having this as a directive probably are:\r\n- Better readability as it hierarchically fits into the content of elements/components where it should be\r\n- You do not need an extra wrapper element to use the action on (could also be used at the top level of a component)\r\n- Preserves anything like properties and event handlers that have been added to the node instances\r\n\r\n(As a workaround I have been using `Node.outerHTML` in conjunction with `@html` in some places but that is definitely not ideal. I also use this to generate localized text with links in it, at least that is what `linkify` up there sounds like.)","updated_at":"2022-10-19T22:00:50Z","created_at":"2022-10-19T22:00:50Z","creator_user_login":"brunnerh"}
{"number":7961,"comment_id":"1285355827","body":"This probably should fit better in Svelte's RFC, but until then, wouldn't this be better as a svelte custom tag? Such as:\r\n\r\n```html\r\n<script lang=\"ts\">\r\n  import { someHTMLNodeGenerator } from \"some-library\";\r\n\r\n  let node = someHTMLNodeGenerator()\r\n</script>\r\n\r\n<svelte:node bind:this={node}>","updated_at":"2022-10-20T11:21:58Z","created_at":"2022-10-20T11:21:58Z","creator_user_login":"LeoDog896"}
{"number":7868,"comment_id":"1249464673","body":">¬†and the only way to override them (that I know of) is via window.getComputedStyle() that cannot run during Serverside Rendering.\r\n\r\nNot true at all... see:\r\n\r\nhttps://svelte.dev/repl/8123d474edb04f198c3b83363716a709?version=3.23.2\r\nor\r\nhttps://svelte.dev/repl/6ee34efa8b57411faf6bccb24e3f95a9?version=3.37.0","updated_at":"2022-09-16T14:51:21Z","created_at":"2022-09-16T14:49:32Z","creator_user_login":"Mlocik97"}
{"number":7868,"comment_id":"1249618143","body":"@Mlocik97 thanks for taking the time to share those helpful examples. They're similar to my Alternative (2) since they utilize JS variables to define colour (bound to color `<input />`s), and could theoretically use props as well. However, I'm not sure if it's possible (or appropriate) to be able to compute styles from `--style-props`.\r\n\r\nThe experience I'm looking for is the ability to consume a component in code (not client-side), pass in a style prop, and have that style prop be consumed for a \"computed\" style. Take for example this High Contrast Button demo: https://svelte.dev/repl/8615f71b48304f2dba94b23edbe758ae?version=3.50.1\r\n\r\nIn here I want to pass `--color` to the `<Button />` component in order to compute the variable `--bgColor`, but as far as I know this doesn't seem possible with `--style-props` since those aren't directly accessible in JS unless I use `window.getComputedStyle()`. It's achievable with regular Svelte props as mentioned in Alternative (2).\r\n\r\nDoes it seem useful to be able to compute CSS variables based on other CSS variables defined via `--style-props`?","updated_at":"2022-09-16T17:36:00Z","created_at":"2022-09-16T17:36:00Z","creator_user_login":"theetrain"}
{"number":7864,"comment_id":"1251837989","body":"I think CI is actually failed.","updated_at":"2022-09-20T04:50:03Z","created_at":"2022-09-20T04:50:03Z","creator_user_login":"baseballyama"}
{"number":7864,"comment_id":"1251905148","body":"oh okay i'll take a look at it üôà ","updated_at":"2022-09-20T06:39:15Z","created_at":"2022-09-20T06:39:15Z","creator_user_login":"tanhauhau"}
{"number":7864,"comment_id":"1440249404","body":"marked this as v4 because strictly speaking it's a breaking change","updated_at":"2023-02-22T15:23:47Z","created_at":"2023-02-22T15:23:47Z","creator_user_login":"dummdidumm"}
{"number":7864,"comment_id":"1503369844","body":"@dummdidumm is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%220407a2e12c1569e3c58f263cab19b9a55f282fe6%22%7D%2C%22id%22%3A%22QmYQXwVRRTgniT9xDeKNqxCFZzcE3oe8nVUJQGUhkQfF28%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A7864%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-11T13:37:46Z","created_at":"2023-04-11T13:37:46Z","creator_user_login":"vercel[bot]"}
{"number":7864,"comment_id":"1505557434","body":"@tanhauhau if you get a chance, it looks like the tests will need to be updated on this one","updated_at":"2023-04-12T16:13:59Z","created_at":"2023-04-12T16:13:59Z","creator_user_login":"benmccann"}
{"number":7864,"comment_id":"1508784527","body":"Wondering if we should just leave it be and not do this explicitly, instead stating in the docs that using `getContext` inside the markup is undefined behavior. That would free us from having to keep that check for Svelte 5, which may or may not be hard.","updated_at":"2023-04-14T15:22:09Z","created_at":"2023-04-14T15:22:09Z","creator_user_login":"dummdidumm"}
{"number":7864,"comment_id":"1508949112","body":"If we added the check now, I don't think we'd be obligated to keep if for Svelte 5. For Svelte 4, it seems a bit safer than a warning the docs that people may or may not see.","updated_at":"2023-04-14T16:50:30Z","created_at":"2023-04-14T16:50:30Z","creator_user_login":"benmccann"}
{"number":7864,"comment_id":"1522931182","body":"Given that it looks to be really tricky to get this working properly I'm giving this the \"one day\" label. I think a note in the docs that you shouldn't use Svelte functions in the template would be enough.","updated_at":"2023-04-26T07:37:44Z","created_at":"2023-04-26T07:37:44Z","creator_user_login":"dummdidumm"}
{"number":7304,"comment_id":"1091743303","body":"are you having some `.d.ts` file that has something like\r\n\r\n```ts\r\ndeclare module \"*.svelte\" {\r\n  export default any\r\n}\r\n```\r\n?","updated_at":"2022-04-07T13:32:06Z","created_at":"2022-04-07T13:32:06Z","creator_user_login":"tanhauhau"}
{"number":7304,"comment_id":"1100301782","body":"> are you having some `.d.ts` file that has something like\r\n> \r\n> ```ts\r\n> declare module \"*.svelte\" {\r\n>   export default any\r\n> }\r\n> ```\r\n> \r\n> ?\r\n\r\nEverything I have is in [my test repository](https://github.com/Alexandre-Fernandez/svelte-rollup-typescript-bug).","updated_at":"2022-04-15T19:13:56Z","created_at":"2022-04-15T19:13:56Z","creator_user_login":"Alexandre-Fernandez"}
{"number":7304,"comment_id":"1100323743","body":"Between now and then nothing has changed, everything inside that issue is still valid (the explanation why it happens). There's just nothing we can do against that other than relaxing the module declaration in Svelte core. You can add one on your own to relax it, that should work (`declare module \"*.svelte\";`)","updated_at":"2022-04-15T19:46:08Z","created_at":"2022-04-15T19:45:18Z","creator_user_login":"dummdidumm"}
{"number":7304,"comment_id":"1215865259","body":"I personally wouldn't want to *relax* it to everything being `any`, my whole motive for importing `*.svelte` is to reuse types from it.\r\n\r\nFor now, I've moved all of that stuff out of into a separate `*.ts` file.","updated_at":"2022-08-15T21:30:04Z","created_at":"2022-08-15T21:30:04Z","creator_user_login":"tv42"}
{"number":7866,"comment_id":"1246158737","body":"i maybe glossing over the scenarios here.\r\n\r\nif you need to attach event listeners, you could:\r\n1. use onMount\r\n   - this allows you to return a function that will call to destroy when component unmount\r\n2. if you need to reattach event listeners on an element every time when a variable changes, you could consider using [actions](https://svelte.dev/tutorial/actions)\r\n  - `<div use:action={xxx} />`\r\n  - the update method on the action will be called everytime `xxx` changes (much similar to a reactive statement)\r\n  - you can have proper cleanup when the element is removed\r\n\r\nif you need to subscribe and unsubscribe a svelte store,\r\n1. you can use the `$store` syntax. it auto-subscribes and unsubscribes when the component is destroyed\r\n2. you can derive a store, in which you can pass in a callback which will be called everytime the store value changes, and you can also return a function to do cleanup when the store unsubscribes or when thers' a new value ","updated_at":"2022-09-14T02:38:42Z","created_at":"2022-09-14T02:38:42Z","creator_user_login":"tanhauhau"}
{"number":7866,"comment_id":"1364499510","body":"@tanhauhau, Your scenarios are all talking about the component lifecycle & store changes.\r\nBut we really want to have a cleanup function in the reactive language of svelte.\r\nThe use case is when a ```let``` value changes.\r\nThere are a lot of cases when you want to do work when a variable changes.\r\nExample:\r\n\r\n```js\r\nlet value;\r\nconst onChange = (value) => {\r\n  register(value)\r\n  return () => {\r\n    unregister(value); /* cleanup performed on next call & when the component is destroyed */\r\n  }\r\n}\r\n$$: onChange(value);\r\n```\r\n\r\nAnother syntax example:\r\n```js\r\nlet value;\r\n\r\n$: {\r\n  register(value) \r\n  return () => {\r\n    unregister(value); /* cleanup performed on next call & when the component is destroyed */\r\n  }\r\n}\r\n```\r\n\r\nWriting this right now is horrible in svelte.","updated_at":"2022-12-24T09:49:03Z","created_at":"2022-12-24T09:43:03Z","creator_user_login":"ivands"}
{"number":7308,"comment_id":"1049318161","body":"When I remove the opacity from the options object it works as expected. But I want the opacity to be 100 all the time.","updated_at":"2022-02-23T23:22:53Z","created_at":"2022-02-23T23:22:53Z","creator_user_login":"Xeronic"}
{"number":7308,"comment_id":"1166564866","body":"Since its width depends on the width of its parent, the `.expandedpip` div can end up being wider than the 300 pixels that is specified for the x offset in the `in:fly` and `out:fly` transitions.  That's what's causing the transition to appear jaggy.\r\n\r\nIf the div is wider than 300px a portion of it (its width less 300px) will still be visible when the `out:fly` transition ends, and will then disappear abruptly when the div is destroyed.  Similarly, when `show` becomes `true` the `.expandedpip` div gets created and a portion of it (its width less 300px) suddenly appears, before the `in:fly` transition starts.\r\n\r\nThe [fly transition](https://svelte.dev/docs#run-time-svelte-transition-fly) doesn't accept percentage values for the x and y offsets. (It might be a nice feature to have, and the [CSS translate transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate) (which is what the fly transition uses under the hood) does allow percentage values for the x and y translations).\r\n\r\nAs a workaround you could add a [custom CSS transition](https://svelte.dev/tutorial/custom-css-transitions) to your component, like this.  First add this within the <script> tags:\r\n```\r\nimport { cubicOut } from 'svelte/easing';\r\nfunction fly_percentage(node, {\r\n  percent_x = 0,\r\n  percent_y = 0,\r\n  delay = 0,\r\n  duration = 400\r\n}) {\r\n  return {\r\n    delay,\r\n    duration,\r\n    easing: cubicOut,\r\n    css: t => {\r\n      return `\r\n        transform: translate(${percent_x * (1 - t)}%, ${percent_y * (1 - t)}%);\r\n      `\r\n    }\r\n  }\r\n}\r\n```\r\nThen use the custom transition on the `.expandedpip` div:\r\n```\r\n{#if show}\r\n<div in:fly_percentage={{ percent_x:100, delay:200 }} out:fly_percentage={{ percent_x: 100 }} class=\"expandedpip\">\r\n\tExpanded Pip\r\n</div>\r\n{/if}\r\n```\r\nPassing 100 as the value of `percent_x` means that the div will move by a distance equal to its own width during the `in:fly` and `out:fly` transitions, with the effect that (since it it's styled `right: 0;`) it'll be off screen when it is destroyed or created, thus preventing the jaggy behavior.","updated_at":"2022-06-26T15:28:46Z","created_at":"2022-06-26T15:28:46Z","creator_user_login":"jb297686"}
{"number":7308,"comment_id":"1178026647","body":"I found a way to cheat around this even further, by simply using node.clientWidth/Height rather a percentage at all ","updated_at":"2022-07-07T18:13:00Z","created_at":"2022-07-07T18:13:00Z","creator_user_login":"stop-amertime"}
{"number":5997,"comment_id":"869055157","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:59Z","created_at":"2021-06-26T20:04:59Z","creator_user_login":"stale[bot]"}
{"number":5997,"comment_id":"869062449","body":"Any ideas? (just asking because the stale bot is threatening to close this even though nobody seemed to have looked at it yet)\r\n\r\nI know I don't have a way to reproduce it stand-alone but maybe someone can think of a possible cause based on the info I provided already...? Let me know which additional details I can provide to help figuring this out. Thank you","updated_at":"2021-06-26T21:13:51Z","created_at":"2021-06-26T21:13:51Z","creator_user_login":"CherryDT"}
{"number":5997,"comment_id":"1000539077","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T21:55:46Z","created_at":"2021-12-23T21:55:46Z","creator_user_login":"stale[bot]"}
{"number":8640,"comment_id":"1564201761","body":"Svelte adds the properties in order. Right now what's happening is that you set value to 150, but max hasn't been set to 200 yet so the value becomes 100, which is the default maximum.","updated_at":"2023-05-26T10:47:19Z","created_at":"2023-05-26T10:47:19Z","creator_user_login":"gtm-nayan"}
{"number":8640,"comment_id":"1564298701","body":"Thanks for clarification, when I put {value} as last property it works as expected. \r\nI've changed severity to just annoyance, \r\n\r\nThis is a little bit confusing mix of declarative and procedural approach - when I create a <input> element, I'd expect it to be applied \"all at once\", but Svelte does it in order. I've already had issue with ordering of `bind:value` and `on:change` - where the order is also important to get updated value in change handler. \r\n\r\nIs this something I have to get used to (still I'm new to Svelte), or is it planned some other solution? \r\nE.g. it would make sense to reorder `value`, `min`, `max` in this `<input type=\"range\">` case - there is probably no use-case when value before max/min gives sense - but the cost would be breaking the simple rule \"properties are added in order\".\r\n\r\nSo there is a tradeoff - \"Simple rules sometimes producing unexpected behaviour\" vs \"Mostly expected behaviour with not so simple rules\"\r\n\r\n\r\n","updated_at":"2023-05-26T12:11:00Z","created_at":"2023-05-26T12:11:00Z","creator_user_login":"lopisan"}
{"number":8640,"comment_id":"1567695904","body":"You need to use `bind:value` instead of just {value}.\r\n\r\nWith `{value}`:\r\n![image](https://github.com/sveltejs/svelte/assets/53587620/df5183aa-4006-40b9-bae2-47a90d1f9022)\r\n\r\nUsing `bind:value`:\r\n![image](https://github.com/sveltejs/svelte/assets/53587620/147d7463-4eb2-4164-b02f-4db6092b6aa3)\r\n\r\nHope this helps!","updated_at":"2023-05-30T03:01:46Z","created_at":"2023-05-30T03:00:46Z","creator_user_login":"srikantgudi"}
{"number":8640,"comment_id":"1568793668","body":"@srikantgudi thanks for response, but I wanted to point out the problem with just using `{value}`. @gtm-nayan already clarified why is this happending, but I left the issue open with additional question https://github.com/sveltejs/svelte/issues/8640#issuecomment-1564298701","updated_at":"2023-05-30T17:17:30Z","created_at":"2023-05-30T17:17:30Z","creator_user_login":"lopisan"}
{"number":8640,"comment_id":"1569438331","body":"@lopisan Thanks for letting me know. Well, I now get what @gtm-nayan meant üòÑ However, the slider was not reflecting the `value` bcoz it was not 'bound' to the variable. The changes would be reflected only if it is bound as `bind:value'","updated_at":"2023-05-31T03:26:08Z","created_at":"2023-05-31T03:20:41Z","creator_user_login":"srikantgudi"}
{"number":8640,"comment_id":"1660381646","body":"I ran into the same issue today. Also seems to be an issue only when the value is over 100 üòÖ\r\n\r\nTested on Safari, Chrome and Firefox.\r\n\r\nHere is a simplified example:\r\n\r\n<img width=\"803\" alt=\"Screenshot 2023-08-01 at 16 47 41\" src=\"https://github.com/sveltejs/svelte/assets/5527296/e3b21c97-604b-41f4-a0e2-a7b1c1e3537f\">\r\n\r\n\r\nhttps://svelte.dev/repl/5ce8f0dae37e458d87b413c9cf7e278c?version=4.1.2","updated_at":"2023-08-01T13:53:02Z","created_at":"2023-08-01T13:53:02Z","creator_user_login":"valterkraemer"}
{"number":8640,"comment_id":"1660461694","body":"Just using `{value}` does not mean anything, unless it is defined in the script tag as follows:\r\n```\r\n<script>\r\nlet value = 100;\r\n</script>\r\n```","updated_at":"2023-08-01T14:38:02Z","created_at":"2023-08-01T14:38:02Z","creator_user_login":"srikantgudi"}
{"number":8674,"comment_id":"1570451412","body":"Vercel build is failing because the examples page never linked to the `/blog` example. it is only for the REPL embed on the blog post its referring to. Maybe add an image for it or filter it out in `lib/server/examples/index.js`?","updated_at":"2023-05-31T15:28:05Z","created_at":"2023-05-31T15:28:05Z","creator_user_login":"PuruVJ"}
{"number":8674,"comment_id":"1570479698","body":"So if I understand correctly, this keeps the examples, but changes the navigation so that there's a page listing all of them and then you click it and it takes you to just that example?\r\n\r\nI kind of think that having the examples in the left pane as we do now is really nice for navigating between examples. Having to click back to a separate page to navigate to a different example adds extra steps. But I would probably remove the thumbnails from the current left nav as they don't add much and mean that the left nav is far less compact.","updated_at":"2023-05-31T15:44:33Z","created_at":"2023-05-31T15:44:33Z","creator_user_login":"benmccann"}
{"number":8674,"comment_id":"1570507154","body":"It's just really weird and pointless to have `/examples/hello-world` and `/repl/hello-world` be basically identical except for the fact that the `/examples` page has less space and you can't save any changes you make. If we care that much about not having to navigate between pages, then incorporating the menu on `/repl` (but collapsible) would make more sense, I think.\r\n\r\nAlso, I forgot dark mode exists.","updated_at":"2023-05-31T15:59:56Z","created_at":"2023-05-31T15:59:56Z","creator_user_login":"Rich-Harris"}
{"number":8674,"comment_id":"1572339179","body":"TBH I agree with Ben. Examples page is very convenient in its current form, and I can browse all examples as well as trying out stuff. This PR adds an extra step to an already convenient page. I suggest keeping it as is, barring some style tweaks if you want to","updated_at":"2023-06-01T16:08:56Z","created_at":"2023-06-01T16:08:56Z","creator_user_login":"PuruVJ"}
{"number":8674,"comment_id":"1586336477","body":"A concept we discussed on Discord was including a dropdown menu:\r\n\r\n<img width=\"1521\" alt=\"examples\" src=\"https://github.com/sveltejs/svelte/assets/322311/f5bcba2e-9860-4d67-bb90-0271704a7945\">\r\n\r\nI think at that point we could possibly combine the REPL and Examples into a Playground or something along those lines. My main concern would be dumping people into the REPL and feeling a bit lost whereas the Examples provide a nice jumping off point. I wonder if a left bar like we have in the Examples now might make a bit more sense from that perspective, but maybe with some tweaks like reduced margin, no images, and being collapsible so that it doesn't take up too much space and be too distracting for just straight REPL users. We could then have it expanded by default if you just visit svelte.dev/playground, but collapsed if you visit a specific saved REPL like svelte.dev/playground/5e140076757c4a9cab98628fff08d9cd?version=3.59.1","updated_at":"2023-06-11T21:04:20Z","created_at":"2023-06-11T21:04:20Z","creator_user_login":"benmccann"}
{"number":8587,"comment_id":"1550093465","body":"Pretty sure you need\n\n```css\np {\n  & strong {\n    line-height: 1.2;\n  }\n}\n```\n\nThe other is invalid. I think a good rule of thumb is every must start with a symbol.","updated_at":"2023-05-16T17:35:44Z","created_at":"2023-05-16T17:35:19Z","creator_user_login":"Jothsa"}
{"number":8587,"comment_id":"1554525547","body":"I think there is still an issue. According to [this Chrome article](https://developer.chrome.com/articles/css-nesting/#understanding-the-nesting-parser) the following should work but in Svelte it doesn't:\r\n```html\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<div class=\"card\">\r\n  <h1>Hello {name}!</h1>\r\n</div>\r\n\r\n<style>\r\n  .card {\r\n    :is(h1) {\r\n      color: red;\r\n    }\r\n  }\r\n</style>\r\n```\r\nIt does however work with the additional ampersand `&`.\r\n```css\r\n  .card {\r\n    & :is(h1) {\r\n      color: red;\r\n    }\r\n  }\r\n  ```\r\nSo my guess is that it is currently intentionally always expecting the `&` to make it easier for the CSS parser to parse.","updated_at":"2023-05-19T12:51:08Z","created_at":"2023-05-19T12:51:08Z","creator_user_login":"karimfromjordan"}
{"number":8587,"comment_id":"1555090676","body":"> I think there is still an issue. According to [this Chrome article](https://developer.chrome.com/articles/css-nesting/#understanding-the-nesting-parser) the following should work but in Svelte it doesn't:\r\n> \r\n> ```\r\n> <script>\r\n>   let name = 'world';\r\n> </script>\r\n> \r\n> <div class=\"card\">\r\n>   <h1>Hello {name}!</h1>\r\n> </div>\r\n> \r\n> <style>\r\n>   .card {\r\n>     :is(h1) {\r\n>       color: red;\r\n>     }\r\n>   }\r\n> </style>\r\n> ```\r\n> \r\n> It does however work with the additional ampersand `&`.\r\n> \r\n> ```css\r\n>   .card {\r\n>     & :is(h1) {\r\n>       color: red;\r\n>     }\r\n>   }\r\n> ```\r\n> \r\n> So my guess is that it is currently intentionally always expecting the `&` to make it easier for the CSS parser to parse.\r\n\r\nYa, I was wrong on the first example (it _always_ requires either a starting symbol like an `&`, or a nested `:is()` pseudo-selector).  But this example with the :is() selector should work without an ampersand.","updated_at":"2023-05-19T18:47:37Z","created_at":"2023-05-19T18:47:37Z","creator_user_login":"jrmoynihan"}
{"number":8587,"comment_id":"1555888470","body":"It doesn't work without an ampersand. I tried it in a [REPL](https://svelte.dev/repl/1af777763dad4afa9ea97169417ea1c0?version=3.59.1) and in SvelteKit. From what I understand the CSS parser that Svelte uses doesn't support optional ampersands and potentially other features yet, see: https://github.com/csstree/csstree/discussions/186#discussioncomment-4578093","updated_at":"2023-05-20T11:08:15Z","created_at":"2023-05-20T11:08:15Z","creator_user_login":"karimfromjordan"}
{"number":8587,"comment_id":"1556225273","body":"I found another potential issue. The following styles:\r\n```html\r\n<style>\r\n  div {\r\n    & :global(*) {\r\n      color: yellow;\r\n    }\r\n  }\r\n  div :global(*) {\r\n    color: red;\r\n  }\r\n</style>\r\n```\r\nproduce the following output:\r\n```html\r\n<style>\r\n  div.svelte-ofba00 {\r\n    & :global(*) {\r\n      color: yellow;\r\n    }\r\n  }\r\n  div.svelte-ofba00 * {\r\n    color: red;\r\n  }\r\n</style>\r\n```\r\nwhich means either `:global()` doesn't work with CSS nesting or there is another way to do this.\r\n\r\n**Edit:** Actually, it looks like nested rules aren't scoped at all and are global by default https://svelte.dev/repl/783f0b40b80140efbcf486d29a9c41a4?version=3.59.1","updated_at":"2023-05-21T17:09:11Z","created_at":"2023-05-21T17:00:07Z","creator_user_login":"karimfromjordan"}
{"number":8587,"comment_id":"1616811928","body":"Hi, I would like to highlight a bug created due to the lack of support of native CSS nesting. See the [REPL](https://svelte.dev/repl/0a2638d41d044c30af68dd36449889f0?version=4.0.1).\r\n\r\nAs code in nested selectors is not processed, and thus output _as is_, `@keyframes` names used in these selectors are not prefixed with the classname hash, leading to an animation that can‚Äôt be used in nested selectors.\r\n\r\nMinimal input:\r\n\r\n```html\r\n<style>\r\n\r\n@keyframes dialog-background-light {\r\n  to { background: oklch(1 0 0 / .3); }\r\n}\r\n\t\r\ndialog::backdrop {\r\n  /* works as intended: animation is renamed with a hashed ID */\r\n  animation: dialog-background-light .5s ease-out forwards;\r\n}\r\n\r\ndialog {\r\n  &::backdrop {\r\n    /* animation is not renamed */\r\n    animation: dialog-background-light .5s ease-out forwards;\r\n  }\r\n}\r\n\r\n</style>\r\n```\r\n\r\nOutput (beautified):\r\n\r\n```css\r\n@keyframes svelte-1ci0amd-dialog-background-light {\r\n  to {\r\n    background: oklch(1 0 0 / 0.3);\r\n  }\r\n}\r\ndialog.svelte-1ci0amd::backdrop {\r\n  animation: svelte-1ci0amd-dialog-background-light 0.5s ease-out forwards;\r\n}\r\ndialog.svelte-1ci0amd {\r\n  &::backdrop {\r\n    /* animation is not renamed */\r\n    animation: dialog-background-light 0.5s ease-out forwards;\r\n  }\r\n}\r\n```\r\n\r\nAs you can see, the non-nested `dialog::backdrop` receives the expected animation name (`svelte-1ci0amd-dialog-background-light`) while the nested one receives `dialog-background-light`.","updated_at":"2023-07-02T20:39:36Z","created_at":"2023-07-02T20:39:36Z","creator_user_login":"meduzen"}
{"number":8587,"comment_id":"1634559690","body":"Nested media rules are not working correctly. These two examples should be equivalent but only the last one works.\n\n```css\n\na {\n     &::after {\n         @media (prefers-reduced-motion: reduce) {\n             opacity: 0;\n             transition: opacity var(--nav-transition-time) ease-in-out;\n        }\n    }\n}\n\n```\n\n\n```css\n\na {\n    @media (prefers-reduced-motion: reduce) {\n         &::after {\n             opacity: 0;\n             transition: opacity var(--nav-transition-time) ease-in-out;\n        }\n    }\n}\n\n```\n\n\n[Spec for reference](https://www.w3.org/TR/css-nesting-1/#conditionals)\n\n[An example of nesting @media from the spec](https://www.w3.org/TR/css-nesting-1/#example-f2b8b339)","updated_at":"2023-07-13T16:44:18Z","created_at":"2023-07-13T16:40:49Z","creator_user_login":"Jothsa"}
{"number":8538,"comment_id":"1559519563","body":"I wholeheartedly agree with OP and all the other people that called for this feature. I'm absolutely loving Svelte for my pet projects, and I'm even trying to push it at work.\r\n\r\nHowever, I have to say, that the complete lack of (scoped) style delegation feels like a huge oversight. As soon as your application reaches a certain size, where you might want to override a few properties of even something as basic as a `<Button />` component, you'll have to resort to artificially bumping up your `:global` specificity or some other hacky workaround.\r\n\r\nI hope we'll finally find a solution for this soon, otherwise Svelte will stay behind React and Vue in adoption at bigger companies.","updated_at":"2023-05-23T14:29:15Z","created_at":"2023-05-23T14:25:04Z","creator_user_login":"robinloeffel"}
{"number":8538,"comment_id":"1703430039","body":"The solution is Tailwind. Every other dev I've talked to with a sufficiently complex Svelte app has dropped Svelte's broken `<style>` tag preprocessing completely and adopted a less ideologically stiff system like Tailwind or CSS modules.","updated_at":"2023-09-01T23:01:37Z","created_at":"2023-09-01T23:01:37Z","creator_user_login":"malammar"}
{"number":8538,"comment_id":"1703745398","body":"Tailwind is a great tool especially to achieve fast styling, but in this context it is more a painkiller than a solution. Also it comes with 2 big counterparts that are a \"no go\" for me in a big project context :\r\n- Style in DOM\r\n- \"Tailwind\" kinda vibe in the final result\r\n\r\nIn fact Tailwind is not CSS. It is something different, a whole new syntax with different ways to achieve same goals as CSS. The mechanism I asked for should rely on pure CSS.\r\n\r\nPlus, exposing the `class` prop is equivalent to using `global` css or rule. It does not complies with the whole \"A component must be its own master\" and the idea that a component should be aware of the style properties it exposes.\r\n\r\n> \"This API (component styling API) should not open the flood gates of global cascading CSS, and it should offer excellent ergonomics, preferably taking advantage of the recent language tooling developments. We need a theming solution.\" - @pngwn ","updated_at":"2023-09-02T18:52:52Z","created_at":"2023-09-02T07:19:21Z","creator_user_login":"Tyrenn"}
{"number":8538,"comment_id":"1703824702","body":"In my opinion the best mechanism for theming/styling components by far is the Web Components `part` attribute and `::part` selector (https://css-tricks.com/styling-in-the-shadow-dom-with-css-shadow-parts/). It's very flexible and powerful and retains the ergonomics of styling built-in HTML elements. Unfortunately it heavily depends on the Shadow DOM for isolating styles, but I think it is worth looking at as inspiration at least. ","updated_at":"2023-09-02T13:14:41Z","created_at":"2023-09-02T12:49:52Z","creator_user_login":"FeldrinH"}
{"number":8266,"comment_id":"1423372274","body":"This sounds like a timing issue - hydration happens too late, so it clears out the value the user has already typed in. This is not strictly related to SvelteKit, more a general limitation of the current Svelte hydration.","updated_at":"2023-02-06T16:10:27Z","created_at":"2023-02-06T16:10:27Z","creator_user_login":"dummdidumm"}
{"number":8266,"comment_id":"1423372281","body":"A decent workaround is to disable the input until hydration has completed:\r\n\r\n```diff\r\n<script lang=\"ts\">\r\n+\timport { browser } from '$app/environment';\r\n\tlet a = \"234\"\r\n</script>\r\n\r\n-<input bind:value={a}>\r\n+<input disabled={!browser} bind:value={a}>\r\n```\r\n\r\nUltimately it would be better if the binding was initialized with the input value ‚Äî not sure if that would cause other problems, but I'd like it if we could do that in a future version of Svelte.","updated_at":"2023-02-08T07:58:18Z","created_at":"2023-02-06T16:20:38Z","creator_user_login":"Rich-Harris"}
{"number":8266,"comment_id":"1423372285","body":"Yeah, the suggested workaround is good enough for my use-case. It is interesting that `browser` is `false` until hydration. ","updated_at":"2023-02-09T16:26:50Z","created_at":"2023-02-08T01:40:19Z","creator_user_login":"nkitsaini"}
{"number":8266,"comment_id":"1423372288","body":"Transferring to `sveltejs/svelte` since there's nothing we can do here","updated_at":"2023-02-08T23:27:30Z","created_at":"2023-02-08T23:27:30Z","creator_user_login":"Rich-Harris"}
{"number":8266,"comment_id":"1456411585","body":"\r\nSvelte could perhaps check the value of the binding just after hydration ?\r\n\r\nSomething like this approximately :\r\n```javascript\r\n\tinput = claim_element(nodes, \"INPUT\", {});\r\n\t\r\n\t// When input is different from the context value\r\n\tif (input.value !== /*a*/ ctx[0]) {\r\n\t\t// We use the binding handler to update it's value\r\n\t\t/*input_input_handler*/ ctx[1].call(input).\r\n\t}\r\n```","updated_at":"2023-03-06T16:03:19Z","created_at":"2023-03-06T16:03:19Z","creator_user_login":"adiguba"}
{"number":8266,"comment_id":"1628018917","body":"Probably a duplicate of #1755, which tells you how long this problem has been around.","updated_at":"2023-07-10T03:12:24Z","created_at":"2023-07-10T03:12:24Z","creator_user_login":"rmunn"}
{"number":8266,"comment_id":"1698850269","body":"> @Rich-Harris Ultimately it would be better if the binding was initialized with the input value ‚Äî not sure if that would cause other problems, but I'd like it if we could do that in a future version of Svelte.\r\n\r\nDid you have a look into this idea already? I think it would be a good thing to implement because this issue is indeed quite annoying and disabling the input until JS loads also seems like a unnecessary delay.\r\n\r\nWould be great to have at least the option to enable that via svelte without some hacky workarounds. What do you think? Would love to support you there on that topic, despite svelte code base being new for me :)","updated_at":"2023-08-30T09:50:21Z","created_at":"2023-08-30T09:50:21Z","creator_user_login":"Gerschtli"}
{"number":8304,"comment_id":"1438802332","body":"@tanhauhau is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%221497cf4c35970c9caef5713de7b51743a5a4ba15%22%7D%2C%22id%22%3A%22QmNhDkgELt5sMxJaqajqvGXUowrgSFdnUP9yRjZg46ARwJ%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8304%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-02-21T16:51:55Z","created_at":"2023-02-21T16:51:55Z","creator_user_login":"vercel[bot]"}
{"number":8304,"comment_id":"1441071087","body":"[vc]: #Xc4Bl2g6i/XhVfc7omHo6Bg+rWPKJkQf5iAk/kij0Kg=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJyb290RGlyZWN0b3J5Ijoic2l0ZXMvc3ZlbHRlLmRldiIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiIifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL3N2ZWx0ZS9zdmVsdGUtZGV2LTIvM3FXS0J5SnZpczlkcE5MVGJOMWdoQmplU2VldCIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJwcmV2aWV3VXJsIjoiIn1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated |\n| :--- | :----- | :------ | :------- | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/3qWKByJvis9dpNLTbN1ghBjeSeet)) |  |  | Feb 23, 2023 at 5:57PM (UTC) |\n\n","updated_at":"2023-02-23T17:57:54Z","created_at":"2023-02-23T00:39:47Z","creator_user_login":"vercel[bot]"}
{"number":8304,"comment_id":"1460281263","body":"Does this make it work with `{#each}` too, or only for `{#if}` conditions?\r\n\r\nEg. would this work:\r\n\r\n```svelte\r\n<script>\r\n  // an array of tuples, [['slotName', SlotContent],...];\r\n  const someDynamicSlots = getSlots();\r\n</script>\r\n\r\n<ChildComponent>\r\n\t{#each someDynamicSlots as [name, Content]}\r\n\t\t<Content slot={name} />\r\n\t{/each}\r\n</ChildComponent>\r\n```\r\n\r\nThis is useful when at compile time you don't know which or how many slots you have, but that might be out of scope for this.","updated_at":"2023-03-08T14:53:04Z","created_at":"2023-03-08T14:53:04Z","creator_user_login":"JReinhold"}
{"number":8304,"comment_id":"1490317758","body":"I'm currently designing the structure of a few composable components for a project and was wondering if this feature is still projected for `3.x` or if it is more likely to be postponed to `4.x`? (p.s. I really don't want to come off as putting pressure or anything, I know the core team is already hard at work on quite a few features. Simply curious as knowing this can steer some decisions on my side.) ","updated_at":"2023-03-30T13:35:40Z","created_at":"2023-03-30T13:35:40Z","creator_user_login":"iolyd"}
{"number":8304,"comment_id":"1522935096","body":"Svelte 5 will substantially rewrite how things works under the hood. Adding such a big enhancement prior to us knowing if it and how it would work in Svelte 5 feels dangerous, so we're holding off from merging until we have more confidence in how Svelte 5 shapes out. Sorry to make everyone wait a little longer, but we're very aware of people wanting such a feature and are thinking actively about it.","updated_at":"2023-04-26T07:41:09Z","created_at":"2023-04-26T07:41:09Z","creator_user_login":"dummdidumm"}
{"number":8220,"comment_id":"1400483958","body":"As a workaround you can use an action that calls `setAttribute`:\r\n\r\n```js\r\nconst value = (node, param) => node.setAttribute('value', param);\r\n```\r\n```svelte\r\n<input use:value={'Default value'} />\r\n```\r\n\r\n([From SO](https://stackoverflow.com/a/73309391/546730))","updated_at":"2023-01-23T14:54:06Z","created_at":"2023-01-23T14:54:06Z","creator_user_login":"brunnerh"}
{"number":8220,"comment_id":"1400541246","body":"Maybe Svelte should set the `defaultValue` property in these cases? The action provided by @brunnerh also works with `node.defaultValue = param`\r\n\r\nWhat I don't understand is why that is needed when the generated code literally uses `innerHTML` with the blob of HTML.","updated_at":"2023-01-23T15:29:26Z","created_at":"2023-01-23T15:29:26Z","creator_user_login":"Prinzhorn"}
{"number":8220,"comment_id":"1400559713","body":"> What I don't understand is why that is needed when the generated code literally uses innerHTML with the blob of HTML.\r\n\r\nProbably an inconsistency in dev mode which doesn't do the innerHTML optimization","updated_at":"2023-01-23T15:41:02Z","created_at":"2023-01-23T15:41:02Z","creator_user_login":"gtm-nayan"}
{"number":8220,"comment_id":"1417868486","body":"could placeholder be an alternative? If you don't strictly need an initial value for those inputs it might even be the right thing to use ","updated_at":"2023-02-05T13:38:48Z","created_at":"2023-02-05T13:38:48Z","creator_user_login":"phamduylong"}
{"number":8220,"comment_id":"1461609941","body":"Hello,\r\n\r\nFrom what I see, apart from innerHTML optimization (which is not used when using a variable on the template), some specific attributes like `value`, `checked` are not added to the node's attributes, but directly in the corresponding JavaScript property.\r\n\r\nSo something like this : \r\n```svelte\r\n<input type=\"text\" name=\"{name}\" value={value} />\r\n```\r\n\r\nWill generate a code like that : \r\n```javascript\r\n    input = element(\"input\");\r\n    attr(input, \"type\", \"text\");\r\n    attr(input, \"name\", /*name*/ ctx[0]);\r\n    input.value = /*value*/ ctx[1];\r\n```\r\n\r\nI think that Svelte should explicitly add defaultValue in this case : \r\n```javascript\r\n    input = element(\"input\");\r\n    attr(input, \"type\", \"text\");\r\n    attr(input, \"name\", /*name*/ ctx[0]);\r\n    input.value = input.defaultValue = /*value*/ ctx[1];\r\n```\r\n\r\nThis apply also to `defaultChecked` on `checkbox/radio`, and `defaultSelected` on `option` (and maybe others?)\r\n\r\n\r\nAnother solution would be to use the attributes in all cases : \r\n```javascript\r\n    input = element(\"input\");\r\n    attr(input, \"type\", \"text\");\r\n    attr(input, \"name\", /*name*/ ctx[0]);\r\n    attr(input, \"value\", /*value*/ ctx[1]);\r\n```\r\n\r\nBut I don't know why Svelte treats these attributes differently, so I dont' know what the best solution.\r\n","updated_at":"2023-03-09T09:04:19Z","created_at":"2023-03-09T09:04:19Z","creator_user_login":"adiguba"}
{"number":8220,"comment_id":"1671934527","body":"Just wanted to point out that the workaround mentioned in https://github.com/sveltejs/svelte/issues/8220#issuecomment-1400483958 won't work for users who don't have access to JavaScript.\r\n\r\nI agree with `adiguba` that just using the raw attributes would be an excellent solution. (I think it would be the best solution.) As things stand, Svelte doesn't have a way for developers to apply a `defaultValue` to their inputs (in the HTML). One reason that this is significant (besides the `reset` bug) is that it makes things more difficult for developers who want to track the dirty/clean state of their form fields. Such a check can be done very easily with regular JS by checking `input.value !== input.defaultValue` (or the equivalent for checkboxes, `select` elements, and the like) while the user interacts with a field. But if Svelte doesn't support default values out of the box, awkward hacks have to be added in -- like calling a function (`action`) on every single form control with a default value when the page loads.\r\n\r\nIf Svelte is truly only going to be a superset of HTML (as it claims to be), then that needs to be 100% true -- especially for important elements like form controls. Even React supports this, and they've done a lot of awkward/abnormal things in their framework. :sweat_smile:","updated_at":"2023-08-09T18:31:05Z","created_at":"2023-08-09T18:31:05Z","creator_user_login":"ITenthusiasm"}
{"number":7881,"comment_id":"1253762147","body":"From the code snippets you showed above, the parent component of `ComponentTwo` is `Page.svelte`, as you can see it is `Page.svelte` that have ` <ComponentTwo />`.\r\n\r\nSo in this case, the `customevent` event is dispatched to `Page.svelte` and you can listen the event from there: \r\n\r\n```svelte\r\n<ComponentTwo on:customevent />\r\n```\r\n\r\nOn the other hand, `ComponentTwo.svelte` is `ComponentOne.svelte`', evidently you have `<ComponentOne />` in `ComponentTwo.svelte`.\r\n\r\nTo call a function within `ComponentOne.svelte` when a button within `ComponentTwo.svelte` is clicked (even though within the component tree, the button is within `ComponentOne`, but it is `ComponentTwo.svelte` that the button is specified.), there are a few options:\r\n\r\n1. you can export a function as component method and call it\r\n```svelte\r\n<!-- ComponentOne.svelte -->\r\n<script>\r\n  export function customEvent() {}\r\n</script>\r\n<p>This is a page.</p>\r\n<slot />\r\n\r\n<!-- ComponentTwo.svelte -->\r\n<script>\r\n  import ComponentOne from './ComponentOne.svelte'\r\n  let component;\r\n  const runCustomEvent = () => component.customEvent();\r\n</script>\r\n<ComponentOne bind:this={component}>\r\n  <button on:click={runCustomEvent}>Click me!</button>\r\n</ComponentOne>\r\n```\r\n\r\n2. you can pass a function into the slot from `ComponentOne`\r\n\r\n```svelte\r\n<!-- ComponentOne.svelte -->\r\n<script>\r\n  function customEvent() {}\r\n</script>\r\n<p>This is a page.</p>\r\n<slot {customEvent} />\r\n\r\n<!-- ComponentTwo.svelte -->\r\n<script>\r\n  import ComponentOne from './ComponentOne.svelte'\r\n</script>\r\n<ComponentOne let:customEvent>\r\n  <button on:click={customEvent}>Click me!</button>\r\n</ComponentOne>\r\n```\r\n","updated_at":"2022-09-21T14:05:10Z","created_at":"2022-09-21T14:05:10Z","creator_user_login":"tanhauhau"}
{"number":7881,"comment_id":"1253801148","body":"Thanks @tanhauhau for sharing those ideas, those techniques should come in handy!\r\n\r\nI guess I'm searching for \"Svelte thinking\" when it comes to forwarding events, and cross-component communication. There's no official protocol, but maybe we can establish one for ideological purposes. How about this:\r\n\r\n- Components can forward events, but no more than 1 component up (though you have the option to forward indefinitely) because bubbling events is considered difficult to track without an explicit interface. This is currently not possible in the slotted scenario, hence this ticket.\r\n- When components want to send a signal to parents more than 1 level up the DOM tree, they should make use of Stores.\r\n- When many child components need to react to a config set by a wrapper, use Context.\r\n\r\nI hope we can refine this protocol so that it can make its way to the docs to better advise developers like me. \r\n\r\nAs for component library maintainers, how would they best allow parent components up the DOM tree to react to their events? They can set up event dispatchers, but the \"slot forwarding\" conundrum may appear again when the component you're consuming doesn't have a defined prop to receive a callback function. Should all component library maintainers be setting up callback props?","updated_at":"2022-09-21T14:33:46Z","created_at":"2022-09-21T14:33:46Z","creator_user_login":"theetrain"}
{"number":7881,"comment_id":"1441144208","body":"+1 for allowing slots to handle and/or forward events. i don't see why the approach should be any different than handling/forwarding events from directly-referenced components\r\n\r\ni have a layout for my documentation route which has a slot for the individual pages, and it also directly references a navigation component. the navigation component can trigger a navigation event. i want the pages to be able to trigger a navigation event as well, but unfortunately \"\\<slot\\> cannot have directives\"\r\n\r\ni'm probably going to use a simple 3rd party events library instead since i can't do this nicely the svelte way","updated_at":"2023-02-23T02:43:09Z","created_at":"2023-02-23T02:32:48Z","creator_user_login":"anxpara"}
{"number":7881,"comment_id":"1613871545","body":"I really like Svelte so far, but I'm annoyed by the limitations on the \"slot\". It would be much simpler if we could simply forward dispatches and handle events from it, and I don't see why that would be a problem. ","updated_at":"2023-06-29T22:17:20Z","created_at":"2023-06-29T22:17:20Z","creator_user_login":"humanist-bean"}
{"number":7872,"comment_id":"1248556363","body":"There's a manually maintained list within the compiler of (among other things) which attributes are boolean. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#webkitdirectory says it's non-standard, which is presumably the main reason it was never added. I don't know where I stand on adding handling for non-standard attributes.\r\n\r\nBut in any case, in the meantime, you can do what you would do to conditionally have any non-boolean attribute present, which is to have `webkitdirectory={whatever ? '' : null}`.","updated_at":"2022-09-15T20:04:34Z","created_at":"2022-09-15T20:04:34Z","creator_user_login":"Conduitry"}
{"number":7872,"comment_id":"1248561027","body":"Thanks for the ternary tip. Yeah that's way better than using if/else.\r\n\r\nIf all browsers support it can it be considered non-standard though?\r\n\r\n<img width=\"1152\" alt=\"image\" src=\"https://user-images.githubusercontent.com/226483/190499128-152e30a9-82c6-4a89-830c-44846b85ae26.png\">\r\n","updated_at":"2022-09-15T20:09:06Z","created_at":"2022-09-15T20:09:06Z","creator_user_login":"PierBover"}
{"number":7872,"comment_id":"1249273720","body":"https://github.com/sveltejs/svelte/blob/25a05bf952579423b31582ee085388ce0be140cb/src/shared/boolean_attributes.ts#L4\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest\r\n\r\n> I don't know where I stand on adding handling for non-standard attributes.\r\n\r\nIf `allowpaymentrequest` (which is deprecated and not recommended) is in the list then `webkitdirectory` (which is supported in every browser and won't go anywhere) should be added as well. In my opinion there's no reason for Svelte to increase friction here.","updated_at":"2022-09-16T11:55:50Z","created_at":"2022-09-16T11:55:50Z","creator_user_login":"Prinzhorn"}
{"number":7872,"comment_id":"1249286056","body":"One hurdle is that adding this as a boolean attribute _would_ be a breaking change for people doing the `webkitdirectory={whatever ? '' : null}` thing I mentioned above, since both `''` and `null` are falsy.","updated_at":"2022-09-16T12:09:28Z","created_at":"2022-09-16T12:09:28Z","creator_user_login":"Conduitry"}
{"number":7872,"comment_id":"1249294428","body":"I see, I don't have any opinion either way then (other than adding it for Svelte 4)","updated_at":"2022-09-16T12:18:16Z","created_at":"2022-09-16T12:18:16Z","creator_user_login":"Prinzhorn"}
{"number":7872,"comment_id":"1249538441","body":"> One hurdle is that adding this as a boolean attribute _would_ be a breaking change for people doing the `webkitdirectory={whatever ? '' : null}` thing I mentioned above, since both `''` and `null` are falsy.\r\n\r\nYeah that's a good reason for not adding it to Svelte 3.\r\n\r\nHopefully you will consider it for Svelte 4 though!","updated_at":"2022-09-16T16:03:24Z","created_at":"2022-09-16T16:03:24Z","creator_user_login":"PierBover"}
{"number":7872,"comment_id":"1614721024","body":"Sorry to bump, but is there any workaround to this except adding `@ts-nocheck`?\r\n\r\n<img width=\"1073\" alt=\"image\" src=\"https://github.com/sveltejs/svelte/assets/20214420/d59ab088-36f3-46b5-b24d-b221ea14a635\">\r\n\r\nI'm using Svelte 4.0.1, maybe start considering adding this to `svelte/elements`?\r\n","updated_at":"2023-06-30T14:17:46Z","created_at":"2023-06-30T14:17:46Z","creator_user_login":"willnode"}
{"number":7456,"comment_id":"1098838694","body":"I'm not saying this should or shouldn't work, but the comment is not inside your function. It works inside the function, e.g.\r\n\r\n```svelte\r\n<button on:click=\"{() => {/* asdf */}}\" />\r\n```\r\n\r\nI'm not an expert on the Svelte syntax definition, but to me everything inside the outer curly brackets needs to be _a single JavaScript expression_. And comments are not part of the JavaScript expression. So what you've posted is the same as doing this:\r\n\r\n```svelte\r\n<script>\r\n\tlet name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name /* asdf */}!</h1>\r\n```\r\n\r\nwhich equally doesn't work.\r\n\r\nThe docs always talk about \"JavaScript expressions\" when talking about what comes inside the curly brackets. And comments aren't expressions.","updated_at":"2022-04-14T08:20:00Z","created_at":"2022-04-14T08:19:15Z","creator_user_login":"Prinzhorn"}
{"number":7456,"comment_id":"1098941250","body":"the way i see it comments should have no impact on the code whatsoever. so if an expression has a comment after it, it should still be considered an expression","updated_at":"2022-04-14T09:41:13Z","created_at":"2022-04-14T09:41:13Z","creator_user_login":"DetachHead"}
{"number":7456,"comment_id":"1107852568","body":"So you thing:\r\n\r\n```html\r\n<input type=\"number /* this is input for age */ \">hello</input>\r\n```\r\n\r\nshould work too? Actually you can't put comment everywhere in HTML or JS too... like in middle of regex or attribute... So I disagree that \"you can put comment everywhere\"... but I actually agree that having ability to add comments inside expressions would be nice.","updated_at":"2022-04-24T15:47:16Z","created_at":"2022-04-24T14:27:08Z","creator_user_login":"Mlocik97"}
{"number":7456,"comment_id":"1107861516","body":"@Mlocik97 In your example that is not a Javascript context expression, so a javascript comment should not work, so...\r\n\r\nSome flavors of regex supports comments: [regex comments](https://www.regular-expressions.info/freespacing.html)\r\n\r\nhtml supports comments: \r\n```html\r\n<input input=\"number /* this is input for age */ \"><!--this is a comment-->hello</input>\r\n```\r\n\r\nThe comment is not stating that Javascript comment syntax should work in every possible context, it's only stating that it should be valid for expressions to be able to be prepended/appended with comments.","updated_at":"2022-04-24T15:15:56Z","created_at":"2022-04-24T15:15:56Z","creator_user_login":"KotlinIsland"}
{"number":7456,"comment_id":"1107866914","body":"yeah, you put that HTML comment outside of attribute value... so tell me...\r\n\r\n```html\r\n<input type=\"number <!-- doesn't work either -->\">hello</input>\r\n```\r\n\r\nI didn't said it's expression, but I'm just arguing against \"you can put comment everywhere\", or resp. \"the way i see it comments should have no impact on the code whatsoever.\", even tho it has nothing to do if it's allowed at specific place such as expression.\r\n\r\nAnother possible way is put IIFE in expression, and pass comments inside it. As it was already mentoyed here.\r\n\r\nStill I'm ofc for this feature request.","updated_at":"2022-04-24T15:54:02Z","created_at":"2022-04-24T15:47:08Z","creator_user_login":"Mlocik97"}
{"number":7456,"comment_id":"1107996572","body":"By \"comments should have no impact on the code\" I didn't mean html comments should work in JavaScript or anything like that, all I meant is that whether or not some JavaScript code is considered a valid expression shouldn't be effected by whether or not there's a valid JavaScript comment in the code. just linke in plain html:\r\n\r\n```html\r\n<!-- no error -->\r\n<button onclick=\"foo() /*asdf*/\">asdf</button>\r\n```","updated_at":"2022-04-25T02:21:32Z","created_at":"2022-04-25T02:20:51Z","creator_user_login":"DetachHead"}
{"number":7456,"comment_id":"1108463548","body":">¬†By \"comments should have no impact on the code\" I didn't mean html comments should work in JavaScript or anything like that,\r\n\r\nI was not talking about it as well... ","updated_at":"2022-04-25T11:41:21Z","created_at":"2022-04-25T11:41:21Z","creator_user_login":"Mlocik97"}
{"number":7456,"comment_id":"1131671016","body":"What is the use-case for _needing_ a comment inside of an inline function?  What problem does that solve?","updated_at":"2022-05-19T13:11:37Z","created_at":"2022-05-19T13:11:37Z","creator_user_login":"jrmoynihan"}
{"number":7265,"comment_id":"1040216502","body":"I think for two way binding this sounds like a useful thing, for simple props this saves exactly one character and I don't see it solving a real problem there:\r\n\r\n```svelte\r\n<input value|trim={value} />\r\n\r\nvs\r\n\r\n<input value={trim(value)} />\r\n```\r\n\r\nI don't think chaining multiple of these transforms is a good idea. They most likely will always be asymmetric and once you have more than one of them chained it'll take some mental gymnastics to figure out what's happening with your two way binding.\r\n\r\n> I cannot really think of a good alternative but am happy to hear of any, if they exist.\r\n\r\nIn a similar scenario I'm using what I call \"upgraded\" stores. They are like derived stores, but two way. They have an `upgrade` and `downgrade` function (similar to your in/out). One example where I use this is with settings. My underlying settings store is serialized to JSON. But in my application I want to use `Set` for performance reason. So I have an upgraded store that lets me read/write the stored data as `Set` but it will transparently turn it into something that can be serialized (an array).\r\n\r\n```js\r\nlet setStore = upgradeStore(\r\n  arrayStore,\r\n  (a) => new Set(a),\r\n  (s) => [...s]\r\n);\r\n```\r\n\r\nI'm sure you can apply something similar to your problem and abstract this nicely into a helper function.\r\n\r\nOnce again stores save the day :superhero: ","updated_at":"2022-02-15T12:31:43Z","created_at":"2022-02-15T12:30:12Z","creator_user_login":"Prinzhorn"}
{"number":7265,"comment_id":"1040248320","body":"The problem with the store solution is that it is quite verbose and requires the existence another store to begin with. This is an unfortunate tendency that I have observed when it comes to stores: They tend to proliferate.\r\n\r\nI would like to avoid introducing stores as much as possible, especially since there currently are some limitations (like using `$` syntax for nested stores).\r\n\r\nI agree that for just property input this feature is of limited use; my main use cases also revolve around `bind`. It might still be helpful if access to the component/element is required (second parameter to pipe function) and thus save an additional `this` binding.\r\n\r\nNot being able to chain the pipes directly would not be that big of a deal, they can easily be combined manually in code. E.g.\r\n\r\n```js\r\nimport { toUpper, trim } from './pipes';\r\nconst combined = x => toUpper(trim(x));\r\n```\r\n\r\n(Or higher order functions could be used to combine pipes arbitrarily.)","updated_at":"2022-02-15T13:04:57Z","created_at":"2022-02-15T13:04:57Z","creator_user_login":"brunnerh"}
{"number":7265,"comment_id":"1046633268","body":"> and requires the existence another store to begin with\r\n\r\nThat's not 100% accurate, as you could two-way sync the upgraded store with the local `value` variable via a closure + a reactive statement. But yes, this this far from ergonomic.\r\n\r\nTo me \"stores\" aren't really stores. They are the glue to make imperative code accessible in a declarative environment. The fact that you can treat `$store` like a variable and read/write/bind it is _insane_. That to me is what makes Svelte incredible.\r\n\r\nAnyway, I agree that stores are not the solution here. But maybe what you are proposing does not capture the big picture. What I would love to see is being able to hook into reactivity in general. So that I can give regular variables the same treatment I do with stores. I want to hide imperative code behind declarative code. And that is essentially what you are asking for here as well, but only for a limited use-case. I want to do that _everywhere_. And I think some changes to reactivity are planned in v4 anyway, so let's hope someone comes up with a nice way to do that.\r\n\r\nBasically I want something like [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) for reactivity. That would solve your problem among many others. You could just hook into reading / writing of your `value`. Now someone go ahead and write a nice rfc for \"Reactive proxies\" :smile: ","updated_at":"2022-02-21T09:12:10Z","created_at":"2022-02-21T09:10:30Z","creator_user_login":"Prinzhorn"}
{"number":7265,"comment_id":"1057364073","body":"Just stumbled upon this issue which seems to be a more specific version of what I wrote here: #3937\r\n\r\nDummdidumm even [suggested][1] the same object-based extension:\r\n> Thought about the same recently, too, but in a more extendable way: what if the modifier is an object you can provide which has two methods transforming the value on the way in/out?\r\n\r\n[1]: https://github.com/sveltejs/svelte/issues/3937#issuecomment-1000710369","updated_at":"2022-03-02T20:49:31Z","created_at":"2022-03-02T20:49:31Z","creator_user_login":"brunnerh"}
{"number":7265,"comment_id":"1504945152","body":"Using actions is not too verbose:\r\n\r\n```ts\r\nexport function trim(node: HTMLInputElement, cb?: (val: string) => unknown) {\r\n\tconst updateVal = () => {\r\n\t\tconst oldValue = node.value;\r\n\t\tnode.value = node.value.trim();\r\n\r\n\t\tif (oldValue !== node.value) {\r\n\t\t\tcb?.(node.value);\r\n\t\t}\r\n\t};\r\n\r\n\tnode.addEventListener('blur', updateVal);\r\n\tnode.addEventListener('keydown', (val) => {\r\n\t\tif (val.key === 'Enter') {\r\n\t\t\tupdateVal();\r\n\t\t}\r\n\t});\r\n}\r\n```\r\n\r\nand \r\n\r\n```ts\r\n<input type=\"text\" bind:value={filename} use:trim={val => filename=val}>\r\n```\r\n","updated_at":"2023-04-12T09:19:55Z","created_at":"2023-04-12T09:19:55Z","creator_user_login":"coyotte508"}
{"number":7294,"comment_id":"1046196849","body":"\r\n```\r\nclass={cond && dynamicClass}\r\n```","updated_at":"2022-02-20T09:23:03Z","created_at":"2022-02-20T09:23:03Z","creator_user_login":"windyclory"}
{"number":7294,"comment_id":"1046201536","body":"@windyclory Gives `class=\"false\"` if `!cond`.","updated_at":"2022-02-20T09:53:48Z","created_at":"2022-02-20T09:53:48Z","creator_user_login":"janosh"}
{"number":7294,"comment_id":"1065915787","body":"What about using a reactive-variable ?\r\n\r\n```svelte\r\n<script>\r\nexport let dynamicClass = ''\r\nlet cond = false\r\n\r\n$: theDynamicClass = cond ? dynamicClass : '';\r\n</script>\r\n\r\n<button class=\"my-class-name {theDynamicClass}\" on:click={() => cond = !cond}>click me</button>\r\n```","updated_at":"2022-03-12T16:42:25Z","created_at":"2022-03-12T16:42:25Z","creator_user_login":"adiguba"}
{"number":7294,"comment_id":"1065918671","body":"@adiguba Sure that's what I'm using now and it works but I think the syntax could be improved. That's what I meant with \"looks cleaner here than in the real world where [...] you need to manually combine classes\".","updated_at":"2022-03-12T16:57:54Z","created_at":"2022-03-12T16:57:54Z","creator_user_login":"janosh"}
{"number":7294,"comment_id":"1134454320","body":"I'm interested in this as well. I haven't touched svelte source before but I tried to make an initial assessment.  Maybe someone else could chime in on an idea on how to implement it. But by playing around with the parser I got the impression we would need a new node type to solve this problem.\r\n\r\nIf someone with deeper knowledge about the parser could give some insight into how the AST could be structured it would probably be easier for someone to pick this one up.","updated_at":"2022-05-23T09:56:30Z","created_at":"2022-05-23T09:53:55Z","creator_user_login":"ankarhem"}
{"number":7294,"comment_id":"1160711341","body":"Something more nuanced would be great.. even using the `class` directive like this `class:{applyLogicAndReturnClass()}` would work pretty good.","updated_at":"2022-06-20T17:56:44Z","created_at":"2022-06-20T17:56:15Z","creator_user_login":"tytusplanck-8451"}
{"number":7294,"comment_id":"1173336615","body":"I think I have a similar issue,\r\nI am building components from tailwind and daisyui classes, and need to set conditional classes from a long list of props.\r\n\r\nWanted to know if something like this is doable.\r\n```js\r\n export const classes = {\r\n    'btn-primary': color === 'primary',\r\n    'btn-secondary': color === 'secondary',\r\n    'btn-accent': color === 'accent',\r\n    'btn-ghost': color === 'ghost',\r\n    'btn-link': color === 'link',\r\n    'btn-square': shape === 'square',\r\n    'btn-circle': shape === 'circle',\r\n    'btn-active': active,\r\n    'btn-outline': outline,\r\n    'btn-disabled': disabled,\r\n    'btn-loading': loading,\r\n}\r\n```\r\nand then set `class={classes}` to apple classes.\r\n\r\nThese are some of the props here, but the actual list is quite long.\r\n\r\nCurrent work-around is building a string by iterating through classes object and set `class={classString}`\r\n\r\nWonder if this could be integrated into svelte itself.\r\nBtw, the proposed approach works in React, Vue and even SolidJS.\r\n","updated_at":"2022-07-04T04:39:26Z","created_at":"2022-07-04T04:39:26Z","creator_user_login":"lightyaer"}
{"number":7294,"comment_id":"1476932314","body":"Ran into a use-case for this as well. I think syntactically, it would be nice to have it similar to how SolidJS uses computed values in classList:\r\n```\r\n<div class:[dynamicprop]> \r\n```\r\nwhere bracket notation denotes a computed value inside an object like `{[styles.fancydiv] : true}`","updated_at":"2023-03-20T21:04:26Z","created_at":"2023-03-20T21:04:26Z","creator_user_login":"KyleFontenot"}
{"number":7175,"comment_id":"1019400393","body":"`<ul>` get's moved in front of `1`\r\n\r\n![image](https://user-images.githubusercontent.com/367185/150662660-f074d767-c893-4bbd-950a-f8476f4122c3.png)\r\n","updated_at":"2022-01-23T02:42:49Z","created_at":"2022-01-23T02:42:49Z","creator_user_login":"janvotava"}
{"number":7175,"comment_id":"1019420150","body":"Even minimal examples like this will break it\r\n\r\n```svelte\r\n{#each [1] as item}\r\n\t{item}\r\n\r\n\t{#each [2] as item}\r\n\t\t{item}\r\n\t{/each}\r\n{/each}\r\n```\r\n\r\nor even\r\n\r\n```svelte\r\n<script>\r\nlet a = 1\r\nlet b = 2\r\n</script>\r\n\r\n{a}\r\n{b}\r\n```\r\n\r\nafter hydration will result in\r\n\r\n![image](https://user-images.githubusercontent.com/367185/150666757-1bff7957-bba3-4537-b7d4-ba1492ccef40.png)\r\n","updated_at":"2022-01-23T06:00:51Z","created_at":"2022-01-23T05:58:37Z","creator_user_login":"janvotava"}
{"number":7175,"comment_id":"1019425699","body":"If I bisected correctly, it's not working since commit https://github.com/sveltejs/svelte/commit/ecbd96af95eddf7d53d24fa78aeb5818f2cf71b9.\r\n\r\nIE 11 does not have `Text.prototype.parentElement`.\r\n\r\n![image](https://user-images.githubusercontent.com/367185/150683423-64ca0cd1-c188-43c1-88c6-f6094009ea53.png)\r\n\r\nIt seems that using part of https://github.com/wessberg/node.parentelement polyfill fixes the problem.\r\nIs it a bug or just something that should be added into the documentation? Using `parentNode` instead with an `instanceof Element` check would be an easy fix too.","updated_at":"2022-01-23T15:06:32Z","created_at":"2022-01-23T06:40:14Z","creator_user_login":"janvotava"}
{"number":7175,"comment_id":"1024399515","body":"Should we support also NetScape? \r\n\r\nIE11 is already unsupported by Microsoft.","updated_at":"2022-01-28T16:53:50Z","created_at":"2022-01-28T16:41:39Z","creator_user_login":"Mlocik97"}
{"number":7175,"comment_id":"1027047989","body":"@Mlocik97 Since Browser support (https://github.com/sveltejs/svelte/issues/558) is not closed yet, proposing such an issue seems valid.\r\n\r\n@janvotava Since IE 11 is not supported out of the box, I do not think this is a bug or requires documentation.\r\n\r\nIf the only build setting that you used to target IE 11 is [`@vitejs/plugin-legacy`](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy), and if it was insufficient - requiring `Node.parentElement` polyfill, maybe this issue should be created in [`vitejs/vite`](https://github.com/vitejs/vite).\r\n\r\nAlso, `System Info` should be updated to include specific Internet Explorer version in the `Browsers` section.\r\n\r\n> ### System Info\r\n> ```shell\r\n> System:\r\n>     OS: macOS 12.2\r\n>     CPU: (10) arm64 Apple M1 Pro\r\n>     Memory: 1.75 GB / 16.00 GB\r\n>     Shell: 5.8 - /bin/zsh\r\n>   Binaries:\r\n>     Node: 16.13.2 - /opt/homebrew/opt/node@16/bin/node\r\n>     Yarn: 1.22.17 - /opt/homebrew/bin/yarn\r\n>     npm: 8.1.2 - /opt/homebrew/opt/node@16/bin/npm\r\n>     Watchman: 2021.12.20.00 - /opt/homebrew/bin/watchman\r\n>   Browsers:\r\n>     Brave Browser: 97.1.34.80\r\n>     Chrome: 97.0.4692.99\r\n>     Chrome Canary: 99.0.4840.0\r\n>     Firefox: 96.0.1\r\n>     Safari: 15.3\r\n>     Safari Technology Preview: 15.4\r\n>   npmPackages:\r\n>     svelte: ^3.46.2 => 3.46.2\r\n> ```","updated_at":"2022-02-01T16:43:35Z","created_at":"2022-02-01T16:43:35Z","creator_user_login":"hyunbinseo"}
{"number":7175,"comment_id":"1027522319","body":"Sadly IE11 is still used by a few of non tech-savvy users and still supported by Microsoft.\r\n\r\n[@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy) just uses [@babel/preset-env](https://babeljs.io/docs/en/babel-preset-env) (which does not care about DOM) so I think it's out of their scope.\r\n\r\nIn the documentation, we have an info about supporting IE[9,10] during the compilation by passing `legacy: true`, maybe some little note about supporting IE11, so other's don't have to dig through the code like me would be a nice to have.\r\n\r\nAlso this was a breaking change during a minor semver update, although just for IE11 and I'm not sure if using `Node.parentElement` instead of `Node.parentNode` and checking if it's an `Element` will even save a lot of code in the runtime library?\r\n\r\n","updated_at":"2022-02-02T02:41:18Z","created_at":"2022-02-02T02:41:18Z","creator_user_login":"janvotava"}
{"number":7170,"comment_id":"1133634339","body":"I need this in my life.\r\n","updated_at":"2022-05-21T13:27:30Z","created_at":"2022-05-21T13:27:30Z","creator_user_login":"irishburlybear"}
{"number":7170,"comment_id":"1133666868","body":"cool","updated_at":"2022-05-21T16:44:10Z","created_at":"2022-05-21T16:44:10Z","creator_user_login":"Conduitry"}
{"number":7170,"comment_id":"1152895996","body":"Current alternative to using the tenary operator would be to use an action like the following. It's more or less the same count of characters but can be in some circumstances be more verbose. [REPL](https://svelte.dev/repl/8b59cba5f6a44d78873bfe2d2f368fba?version=3.19.1)\r\n\r\n```JS\r\n  function clazz(node, props) {\r\n   for (let prop of props) {\r\n      if (prop[0]) {\r\n         node.classList.add(...prop[1].split(\" \"));\r\n      }\r\n   }\r\n\r\n   return {\r\n      update(props) {\r\n         for (let prop of props) {\r\n            if (prop[0]) {\r\n               node.classList.add(...prop[1].split(\" \"));\r\n            } else {\r\n               node.classList.remove(...prop[1].split(\" \"));\r\n            }\r\n         }\r\n      },\r\n   };\r\n  }\r\n```\r\n\r\n```\r\n<button\r\n\ton:click\r\n\tclass=\"px-3 py-2 text-white rounded shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2\"\r\n\tuse:clazz={[\r\n\t\t\t\t[color === 'primary', \"bg-blue-700 hover:bg-blue-800 ring-blue-400\"],\r\n\t\t\t\t[color === 'danger', \"bg-red-600 hover:bg-red-700 ring-red-500\"]\r\n\t\t\t\t]}\r\n>\r\n\t<slot />\r\n</button>\r\n```\r\n\r\n","updated_at":"2022-06-11T10:32:07Z","created_at":"2022-06-11T10:32:07Z","creator_user_login":"tobiaskohlbau"}
{"number":7170,"comment_id":"1218449923","body":"Hey! If anyone wants to use this feature here is my [vite plugin](https://github.com/fernandolguevara/svelte-multicssclass)\r\n\r\n```sh\r\nnpm i svelte-multicssclass\r\n```\r\n\r\nupdate your vite.config\r\n```js\r\n// vite.config.js\r\n\r\nimport { sveltekit } from '@sveltejs/kit/vite';\r\nimport { multicssclass } from 'svelte-multicssclass';\r\n\r\n/** @type {import('vite').UserConfig} */\r\nconst config = {\r\n  plugins: [multicssclass(), sveltekit()],\r\n};\r\n\r\nexport default config;\r\n```\r\n\r\nbefore:\r\n\r\n```html\r\n<label\r\n  class:text-gray-500=\"{isValid}\"\r\n  class:bg-gray-50=\"{isValid}\"\r\n  class:border-gray-300=\"{isValid}\"\r\n  class:text-red-700=\"{!isValid}\"\r\n  class:bg-red-50=\"{!isValid}\"\r\n  class:border-red-300=\"{!isValid}\"\r\n>\r\n  text\r\n</label>\r\n```\r\n\r\n```\r\nusage:\r\n  - choose a separator char ;  ,  | or configure your own multicssclass({ sep: '@' })\r\n  - write your classes using the sep \r\n      <element class:class1;class2;class3={condition} />\r\n      Custom sep\r\n     <element class:class1@class2@class3={condition} />\r\n  - two separators for toggle \r\n      <element class:true-class1;true-class2;;false-class1;false-class2={condition} />\r\n      Custom sep \r\n      <element class:true-class1@true-class2@@false-class1@false-class2={condition} />\r\n```\r\n\r\nafter:\r\n\r\n```html\r\n<label\r\n  class:text-gray-500;bg-gray-50;border-gray-300;;text-red-700;bg-red-50;border-red-300=\"{isValid}\"\r\n>\r\n  text\r\n</label>\r\n\r\n<!-- OR -->\r\n\r\n<label\r\n  class:text-gray-500,bg-gray-50,border-gray-300,,text-red-700,bg-red-50,border-red-300=\"{isValid}\"\r\n>\r\n  text\r\n</label>\r\n\r\n<!-- OR -->\r\n\r\n<label\r\n  class:text-gray-500|bg-gray-50|border-gray-300||text-red-700|bg-red-50|border-red-300=\"{isValid}\"\r\n>\r\n  text\r\n</label>\r\n```\r\n\r\nenjoy\r\n\r\nüåå  \r\n\r\n\r\n","updated_at":"2022-11-12T16:52:40Z","created_at":"2022-08-17T20:16:06Z","creator_user_login":"fernandolguevara"}
{"number":7170,"comment_id":"1505785163","body":"Maybe a simple option to pass an array into the class directive.\r\n\r\n`class:[class1,class2]={someBooleanVariable}`\r\n\r\nWhere class1 and class2 would be applied if someBooleanVariable is true.","updated_at":"2023-04-12T19:05:46Z","created_at":"2023-04-12T19:05:46Z","creator_user_login":"bwklein"}
{"number":7238,"comment_id":"1034284816","body":"I can't reproduce -- the following snippet applies the `:focus-visible` styles properly, and there are no warnings about unused styles. Clicking the button shows normal focus styles, but tabbing to the button shows focus-visible styles.\r\n\r\n```\r\n<button>\r\n\tHello\r\n</button>\r\n\r\n<style>\r\n\tbutton:focus-visible {\r\n\t\toutline: 2px solid red;\r\n\t}\r\n</style>\r\n```","updated_at":"2022-02-09T22:57:19Z","created_at":"2022-02-09T22:57:19Z","creator_user_login":"geoffrich"}
{"number":7238,"comment_id":"1034302195","body":"You're using a PostCSS plugin that adds a `focus-visible` polyfill, potentially through `postcss-preset-env`. It changes `whatever:focus-visible` to `whatever:focus-visible, whatever.focus-visible` and expects that you have an accompanying JavaScript polyfill (to control the `.focus-visible` class).\r\n\r\nYou can disable the polyfill to resolve the issue, but if you still need it (and didn't just have it enabled as an unknown default) I don't personally know what the solution is.\r\n","updated_at":"2022-02-09T23:21:44Z","created_at":"2022-02-09T23:21:44Z","creator_user_login":"babichjacob"}
{"number":7238,"comment_id":"1034383827","body":"\r\n@babichjacob you are correct. I was able to disable it. It does bring up an interesting point though. I kind of want the polyfill. \r\n\r\nThe option to disable the unused css feature in svelte seems like a better choice in this instance. Seeing as it won't be a reliably stable feature in Safari for some time. Especially for older devices locked to an older version.\r\n\r\nhttps://caniuse.com/?search=focus-visible\r\n\r\nThis seems like a tricky choice. I see the value in warning against unused css, but there is clear value in being able to polyfill css features as well.","updated_at":"2022-02-10T01:18:54Z","created_at":"2022-02-10T01:18:54Z","creator_user_login":"jameygleason"}
{"number":7238,"comment_id":"1034385492","body":"I don't think changes in Svelte nor `svelte-preprocess` are needed to solve this.\n\nTry this:\n\n```svelte\n<style lang=\"postcss\" global>\n    :local(button):focus-visible {\n        outline: blue;\n    }\n</style>\n```\n","updated_at":"2022-02-10T01:21:57Z","created_at":"2022-02-10T01:21:57Z","creator_user_login":"babichjacob"}
{"number":7238,"comment_id":"1035171119","body":"If you use the global attribute on a style block, you lose scoping. Adding `:local()` to all of the selectors in that block to get scoping back seems like a bit of an unnecessary work around. Also it doesn't seem to solve the problem of getting rid of the warning for unused css.\r\n\r\nExample repo:\r\nhttps://github.com/jameygleason/svelte-focus-visible-polyfill-example","updated_at":"2022-02-10T17:03:00Z","created_at":"2022-02-10T17:03:00Z","creator_user_login":"jameygleason"}
{"number":7238,"comment_id":"1035372153","body":"> It does bring up an interesting point though. I kind of want the polyfill.\r\n\r\nJust in case it wasn't clear from my previous comment, you do have to install and set up the JS polyfill too https://github.com/WICG/focus-visible, otherwise this has no value.\r\n\r\n> If you use the global attribute on a style block, you lose scoping. Adding :local() to all of the selectors in that block to get scoping back seems like a bit of an unnecessary work around. \r\n\r\nI tested it in your repository, and you can isolate the `global` effect by putting it in a block instead:\r\n\r\n```svelte\r\n<style lang=\"scss\">\r\n\tsection {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\t:global {\t\r\n\t\t:local(button):focus-visible {\r\n\t\t\tbackground: green;\r\n\t\t}\r\n\t}\r\n</style>\r\n```\r\n\r\n> Also it doesn't seem to solve the problem of getting rid of the warning for unused css.\r\n\r\nI also see this and am surprised. There's something unexpected happening during the CSS build chain that results in Svelte seeing an additional `button.focus-visible` and removing it.\r\n\r\nThat being said, the CSS it creates in the end is correct despite the warning. I know other people have had questions about silencing warnings like this and if I remember correctly, they used the `onwarn` option https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#onwarn ‚Äî but search around more if I'm mistaken.\r\n","updated_at":"2022-02-10T19:18:30Z","created_at":"2022-02-10T19:17:16Z","creator_user_login":"babichjacob"}
{"number":6668,"comment_id":"901980857","body":"(one fairly major wrinkle that was just pointed out to me ‚Äî maintaining full opacity for the bottom element doesn't really work if the top element's non-opaque areas don't correspond exactly with the bottom element. So this only really works for rectangles)","updated_at":"2021-08-19T14:50:50Z","created_at":"2021-08-19T14:50:50Z","creator_user_login":"Rich-Harris"}
{"number":6668,"comment_id":"902187045","body":"Hi,  I would like to work on this issue.  can I try?","updated_at":"2021-08-19T19:36:37Z","created_at":"2021-08-19T19:36:37Z","creator_user_login":"vicky1999"}
{"number":6668,"comment_id":"912335422","body":"Hi, I'm currently trying to work on this issue. So far I've made it work for most cases except when the opacity is 1. For this case, I need to determine which element is on 'top' and I'm unsure if I can install the [stacking-order library](https://gitlab.com/Rich-Harris/stacking-order) for this.","updated_at":"2021-09-03T07:52:46Z","created_at":"2021-09-03T07:52:46Z","creator_user_login":"VincentSastra"}
{"number":6668,"comment_id":"1113452573","body":"Hey, just wondering if there's any progress on this issue, and if not could I contribute to getting this over the finish line? I'm developing a [game](https://gramjam.app) in the svelte framework and use the crossfade effect for a pretty prominent UI transition.","updated_at":"2022-04-29T15:33:09Z","created_at":"2022-04-29T15:32:16Z","creator_user_login":"jessecoleman"}
{"number":6668,"comment_id":"1207192208","body":"Check out [mix-blend-mode: plus-lighter](https://chromestatus.com/feature/5677338286096384). It seems to have been created exactly for this purpose. [Support isn't that awful either](https://caniuse.com/mdn-css_properties_mix-blend-mode_plus-lighter). It might be a progressive enhancement anyway. The problem is we need a way to tell it which elements we should and shouldn't blend. I tried playing around with [isolation](https://developer.mozilla.org/en-US/docs/Web/CSS/isolation) property, but no luck so far...\r\n\r\nTry it out [in REPL](https://svelte.dev/repl/835b27ec776044bc837f7ebe414eb78b?version=3.42.1). (Only works for the white rectangle)","updated_at":"2022-08-06T10:41:46Z","created_at":"2022-08-06T10:41:19Z","creator_user_login":"Azarattum"}
{"number":6668,"comment_id":"1207192883","body":"We really need this to be solved along with [the other crossfade bugs](https://github.com/sveltejs/svelte/search?p=1&q=crossfade&type=issues) to be able to use crossfade for anything serious like page transitions. Ideally we want it to be able to do something like the [page transition API](https://developer.chrome.com/blog/shared-element-transitions-for-spas/) crossfades between pages in svelte's native router.","updated_at":"2022-08-06T10:46:48Z","created_at":"2022-08-06T10:46:48Z","creator_user_login":"Azarattum"}
{"number":6668,"comment_id":"1464916892","body":"Are there any updates on this issue? There is a lot of useful information in this [stackoverflow post](https://stackoverflow.com/questions/73873803/how-to-avoid-the-element-slightly-fading-out-when-using-crossfade-transition).\r\nAlthough not perfect, changing the crossfade opacity function to an exponential function (as explained in the stackoverflow answer) would already bring a lot of improvement. \r\nAnd mix-blend-mode: plus-lighter already has over 90% browser support. Using it in combination with the css isolation property as nicely explained in this [video](https://youtu.be/PYSOnC2CrD8?t=919) would be a great option. ","updated_at":"2023-03-11T13:54:18Z","created_at":"2023-03-11T13:54:18Z","creator_user_login":"moonclimber1"}
{"number":6717,"comment_id":"924377511","body":"I'm not sure what your REPL is intended to demonstrate exactly, as I'm getting a runtime error from it. `svelteSelectFix` isn't returning a DOM node.\r\n\r\nBut, nevertheless, I'm not really sure what Svelte could do about this. If you're cloning nodes create by Svelte, they're now in your control, and Svelte can't change anything about them.","updated_at":"2021-09-21T20:57:01Z","created_at":"2021-09-21T20:57:01Z","creator_user_login":"Conduitry"}
{"number":6717,"comment_id":"924649450","body":"@Conduitry \r\n\r\nAh, pardon me, I must have messed with the repl while prototyping fix. It should be working now.\r\n\r\n > But, nevertheless, I'm not really sure what Svelte could do about this. If you're cloning nodes create by Svelte, they're now in your control, and Svelte can't change anything about them.\r\n \r\nIt would be ideal if svelte used the selected attribute (adding selected to the active option). So after cloning, the output would be the same as the clone input. \r\n\r\nI did come with this fix https://github.com/isaacHagoel/svelte-dnd-action/pull/320/commits/c263f562c7cf1f582594c9a86356626b96b47c00 in case svelte wouldn't apply any change however I don't like it at all. Maybe there's some better way.","updated_at":"2021-09-22T14:15:02Z","created_at":"2021-09-22T07:10:02Z","creator_user_login":"mataslib"}
{"number":6717,"comment_id":"924965657","body":"Hi.\r\n\r\nI created small reproduction code with plain HTML and JavaScript.\r\nhttps://codepen.io/baseballyama/pen/OJgwVGQ\r\n\r\n[IMO] I think this behavior should be the same between Svelte and Plain HTML / JavaScript.\r\nAnd I want to share with you 2 points.\r\n\r\n### 1. `selected` attribute is not used\r\n\r\nThis is your original REPL case.\r\nAt this time, `cloneNode` will not copy selected status even on a plain JavaScript environment.\r\nSo I think we don't need to do anything. (This is expected behavior.)\r\n\r\n### 2. use `selected` attribute\r\n\r\nIn this case, behavior is different.\r\nIn case of plain JavaScript, you can see on my reproduction code after uncomment `selectEl.options[2].setAttribute(\"selected\", \"\");`.\r\ncloned element is selected `opt2`.\r\nBut Svelte, it doesn't.\r\n\r\n---\r\n\r\nSo what do you think regarding point 2?\r\nIs it better to fix it?","updated_at":"2021-09-22T14:06:20Z","created_at":"2021-09-22T14:06:20Z","creator_user_login":"baseballyama"}
{"number":6717,"comment_id":"924979311","body":"@baseballyama \r\n\r\nWell, yeah, that's basically what I'm asking for.\r\n\r\n> however maybe svelte should at least allow to set selected attribute manually?\r\n\r\nIn the worst case: Svelte should at least allow manual attribute like this ```<option selected={value===\"opt2\"} value=\"opt2\">opt2</option>``` (Seems currently not possible). I think this is related to your point 2, where you state that `selectEl.options[2].setAttribute(\"selected\", \"\");` does not work in case of Svelte but does work for vanilla js.\r\n\r\nIn the best case: Svelte itself would manage (set) selected attribute to active option. \r\n\r\n---\r\n\r\nI'm certainly not interested in setting it manually like this `selectEl.options[2].setAttribute(\"selected\", \"\");`","updated_at":"2021-09-22T14:26:17Z","created_at":"2021-09-22T14:21:32Z","creator_user_login":"mataslib"}
{"number":6717,"comment_id":"925022338","body":"`<option selected={value===\"opt2\"} value=\"opt2\">opt2</option>` is also good to me!\r\n\r\nSo we have 2 options for now.\r\n\r\n1. Support like `<option selected={value===\"opt2\"} value=\"opt2\">opt2</option>`.\r\n2. Maybe add `option.setAttribute('selected', '');` at below runtime code for adding `selected` attribute  for getting same behavior.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/dad02847718084df495c7272c9e0d0f122d99c27/src/runtime/internal/dom.ts#L536-L554\r\n\r\nBut anyway I need to follow maintainer's decision.\r\nSo I will wait for it.\r\n\r\nNOTE:\r\nRegarding `selected` attribute,\r\nEven vanilla JS doesn't update `selected` attribute when a selected option is changed.\r\nThe reproduction code is here.\r\nhttps://codepen.io/baseballyama/pen/YzQjWpr?editors=1111","updated_at":"2021-09-22T15:20:58Z","created_at":"2021-09-22T15:08:49Z","creator_user_login":"baseballyama"}
{"number":6717,"comment_id":"972024107","body":"@baseballyama are there any news about this?\r\nI am wondering whether I should merge @mataslib's fix into svelte-dnd-action. I would much rather to have a proper solution within Svelte itself.\r\nThanks","updated_at":"2021-11-17T21:05:14Z","created_at":"2021-11-17T21:05:14Z","creator_user_login":"isaacHagoel"}
{"number":6717,"comment_id":"972787376","body":"Thanks for mentioning it!\r\n\r\nI have checked the PR and issue of `svelte-dnd-action`.\r\nIn the PR, it seems like it is copying the selected value even in the `<select bind:value={selected}>` case.\r\nThis is not copied in VanillaJS behavior as I already wrote.\r\nSo if this is what you want, I think it needs to be handled in `svelte-dnd-action`.\r\n\r\nBy the way, I checked how it works in Vue.js, and as with Svelte, even if `selected` is specified, it is not reflected in the HTML after rendered.\r\n\r\n[Vue.js REPL](https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0ZWQ6IFwiXCIsXG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8c2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZFwiPlxuICAgIDxvcHRpb24gc2VsZWN0ZWQ+QTwvb3B0aW9uPlxuICAgIDxvcHRpb24+Qjwvb3B0aW9uPlxuICAgIDxvcHRpb24+Qzwvb3B0aW9uPlxuICA8L3NlbGVjdD5cbiAgPHNwYW4+U2VsZWN0ZWQ6IHt7IHNlbGVjdGVkIH19PC9zcGFuPlxuPC90ZW1wbGF0ZT4iLCJpbXBvcnQtbWFwLmpzb24iOiJ7XG4gIFwiaW1wb3J0c1wiOiB7XG4gICAgXCJ2dWVcIjogXCJodHRwczovL3NmYy52dWVqcy5vcmcvdnVlLnJ1bnRpbWUuZXNtLWJyb3dzZXIuanNcIlxuICB9XG59In0=)\r\n\r\nPersonally, I think it would be confusing to lose `selected`, but at least other well-known frameworks seem to behave the same as `Svelte` does.","updated_at":"2021-11-18T11:39:22Z","created_at":"2021-11-18T11:39:22Z","creator_user_login":"baseballyama"}
{"number":6754,"comment_id":"924478280","body":"There are several things going on here, but one of them is that you are setting the action to `_>{}`, not `_=>{}`. I'm not sure what else you are saying. That updating a value used as an action should call the `destroy` method on the old value?","updated_at":"2021-09-22T00:11:20Z","created_at":"2021-09-22T00:11:20Z","creator_user_login":"Conduitry"}
{"number":6754,"comment_id":"924483781","body":"@Conduitry Ok, sorry, I corrected it.\r\nBut it does not change anything. \r\n\r\nChanging action to `_=>{}` changes nothing in First case. When I click \"remove action\" in First case, \"+1\" in First case still works, but should stop working.\r\nWhen I use `{#key action} <button use:action>+1</button> {/key}` in Second case, the action updates.\r\n\r\n> That updating a value used as an action should call the destroy method on the old value?\r\n\r\nI would like `destroy` to execute when the previous action ceases to be used. The action should then \"end life\" and execute `destroy`.\r\nDef is: \r\n`let action = fn;`\r\nand:\r\n`<button use:action>+1</button>`\r\nand click \"remove action\" do:\r\n`action = _=>{}`\r\n\r\n`action` in `use:action` change from `fn` to `_=>{}`. - Then `destroy` with `fn` should execute, then add `_=>{}`.","updated_at":"2021-09-22T00:45:07Z","created_at":"2021-09-22T00:22:36Z","creator_user_login":"lukaszpolowczyk"}
{"number":6754,"comment_id":"924551915","body":"I think what OP tries to explain is that the action should \"remount\" when it's invalidated, which I think is a fair assumption. Though I never really had the need for something like this, usually I'd have an `enabled`/`disabled` prop in the action's options to toggle it.","updated_at":"2021-09-22T03:27:19Z","created_at":"2021-09-22T03:26:57Z","creator_user_login":"bluwy"}
{"number":6754,"comment_id":"924736761","body":"In other words: when using `use:foo` `foo` is not reactive. What OP wants is to swap out the entire implementation of an action with a NOOP to remove it. I don't think that's a use-case that has been considered and it is odd. But it solves a problem.\r\n\r\n> Though I never really had the need for something like this, usually I'd have an `enabled`/`disabled` prop in the action's options to toggle it.\r\n\r\nSame, but it's a pain because actions already give you a lot of responsibility (e.g. manually unbinding events) and keeping things consistent when not only the options can change but you can also disable the entire thing is hard. I always wished there was a way to remove an action, but swapping out the entire thing is not what I had in mind.","updated_at":"2021-09-22T09:12:18Z","created_at":"2021-09-22T09:12:18Z","creator_user_login":"Prinzhorn"}
{"number":6754,"comment_id":"925297834","body":"> I always wished there was a way to remove an action, but swapping out the entire thing is not what I had in mind.\r\n\r\nI was thinking about the possibility of setting `null`, which would act as a shutdown:\r\n`use:action`\r\n`action = null`.\r\n\r\nThis is how it works in Svelte, with the normal properties of HTML elements.\r\n\r\n---\r\n\r\nBut I was also thinking about a general way to turn off atypical element properties in Svelte (for use:action bind:value, on:click etc.).\r\n\r\nA loose idea, e.g. `use:(condition?action:null)`.\r\n\r\nThat would be a new, unusual syntax, next to the proposition `<Component bind:...={object} />`:\r\n\"Implement spread binding\" - https://github.com/sveltejs/rfcs/pull/57\r\n\r\n","updated_at":"2021-09-22T20:17:21Z","created_at":"2021-09-22T20:17:21Z","creator_user_login":"lukaszpolowczyk"}
{"number":6661,"comment_id":"906228146","body":"I think the problem is the `instance` method is called eagerly during initialization of the Svelte component class (https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/Component.ts#L141)","updated_at":"2021-08-26T09:03:59Z","created_at":"2021-08-26T09:03:59Z","creator_user_login":"dummdidumm"}
{"number":6661,"comment_id":"917374300","body":"@dummdidumm (@techniq )\r\n\r\nHi.\r\nNow I',m working on this issue.\r\nBut before fixing the code, I need to know about this issue properly.\r\n\r\n--- \r\n\r\nI checked [Conditional store subscription](https://svelte.dev/repl/ee6145641d664528b895ab75dc6ff5ac?version=3.42.1).\r\nI think always `{#if selected}` should be `true` because `writable(null)` returns object.\r\nSo if you want to check stored variables, you need to use stored variables like my [updated REPL](https://svelte.dev/repl/9ebdadb532ab4760b8821fe7a2b4bfe5?version=3.42.1) at least as a workaround.\r\n\r\nSo my question is that Svelte should judge by stored variable if a user uses stored object at `{#if}` statement? @dummdidumm \r\nFor instance `{#if selected}` should return `false` in [Conditional store subscription](https://svelte.dev/repl/ee6145641d664528b895ab75dc6ff5ac?version=3.42.1)?\r\n\r\nIf the answer is Yes, we need to consider the difference between `if (!!selected)` and `{#if selected}`.\r\nIf the answer is No, this is not a Svelte bug and I need to do nothing.\r\n\r\n---\r\n\r\nI checked [Slot store subscription update](https://svelte.dev/repl/abc58f213eb242579c55f34762c797b8?version=3.42.1)\r\n\r\nActually Svelte component's lifecycle and store lifecycle don't have a relationship.\r\nSo I think that the Svelte compiler considers this issue is very difficult.\r\nAnd a developer can check nullability for it.\r\nI share with you my [updated REPL](https://svelte.dev/repl/2d6564bb2ea2459f8a67b620ec8d6319?version=3.42.1).\r\n(Please check `View.svelte`)\r\n\r\n--- \r\n\r\nIf my comment is proper and it doesn't need to fix the code, I will close this issue.\r\nThank you for reading and sorry if I misunderstand any Svelte specifications.\r\n","updated_at":"2021-09-11T09:21:26Z","created_at":"2021-09-11T09:21:26Z","creator_user_login":"baseballyama"}
{"number":6661,"comment_id":"917399699","body":"Hi @baseballyama, thanks for taking a look at this.  Some notes below\r\n\r\n---\r\n\r\n## Regarding `Conditional store subscription.`\r\n\r\nSorry, this was an oversight by me when I was working on boiling down a simpler use case.  This is actually an issue in my example (and not a bug in Svelte).  I was not subscribing to selected as it should be.  I've updated the REPL as well.\r\n\r\n```svelte\r\n{#if $selected}\r\n\t<View {selected} />\r\n{/if}\r\n```\r\n\r\nThe use case I had was much more complex with nested stores and missed this while boiling this downs.\r\n\r\n---\r\n## Regarding `Slot store subscription update`\r\n\r\nYour example of checking for null could work, but would require more special handling on the client side.  Notice the flash of \"undefined\" as the drawer is transitioning a away from an unmount.\r\n\r\nI didn't come up with a [workaround](https://svelte.dev/repl/303de2dc9e5d46a1999822b3644da519?version=3.42.1) (although isn't perfect, but works for my use case).\r\n\r\nI use `svelte/store`'s `get` to do a single value subscription (and ignore future changes).\r\n\r\nso this...\r\n```svelte\r\n<h1>{$selected.name}</h1>\r\n```\r\nbecomes...\r\n```svelte\r\n<h1>{get(selected).name}</h1>\r\n```\r\n\r\nThis works as long as the component is unmounted between selections, which works for my use case (I add a Backdrop behind the drawer to deselect on clickaway or at least restrict making selection changes until the drawer is closed).\r\n\r\nNoticing on the workaround example works if you click `Select Svelte` => `Deselect` => `Select SvelteKit` but not if you click `Select Svelte` => `Select SvelteKit`.\r\n\r\nOnce again this works for my use case, but if another non-modal case, it would be an issue.  If having a subscription unsubscribing right before component unmount is difficult, I'm fine with closing the issue (since I have a workaround), but it would be awesome to not require the workaround (as if someone else has this issue it would require them to find this issue to know how to work around the issue, and might not work for there use case).\r\n\r\nThanks again for taking a look.","updated_at":"2022-03-04T12:47:09Z","created_at":"2021-09-11T12:31:29Z","creator_user_login":"techniq"}
{"number":6661,"comment_id":"918186709","body":"Thank you for the answer!\r\n\r\n> Regarding Conditional store subscription.\r\n\r\nSo this is not an issue in my understanding.\r\n\r\n> The use case I had was much more complex with nested stores and missed this while boiling this downs.\r\n\r\nThis is my updated [REPL](https://svelte.dev/repl/bf3c1ff86b814b17b6183e0282d6711a?version=3.42.5).\r\n(Please check `View.svelte`)\r\n\r\nAnd `get` function returns just snapshot value. (Not reactive)\r\n\r\n[details]\r\n`get` is alias of ` get_store_value`.\r\nhttps://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts#L214\r\n\r\n` get_store_value` calls `subscribe` but immediately call `unsbscribe`.\r\nhttps://github.com/sveltejs/svelte/blob/master/src/runtime/internal/utils.ts#L75\r\n```\r\nsubscribe(store, _ => value = _)();\r\n                                 ^The return of `subscribe()` is `unsbscribe` and call it here.\r\n```\r\n\r\n> but it would be awesome to not require the workaround\r\n\r\nTotally agree with you.\r\nBut unfortunately, now I don't have any idea how to handle it at least for now...\r\n\r\n@dummdidumm \r\n\r\nI think this issue is not related to a bug.\r\nSo I think we can remove the label of the issue.\r\n(Can/Should I do such action?)\r\n\r\nThank you for reading!","updated_at":"2021-09-13T13:23:41Z","created_at":"2021-09-13T13:23:41Z","creator_user_login":"baseballyama"}
{"number":6479,"comment_id":"871635078","body":"Could you provide some use cases where this behavior is desired?","updated_at":"2021-06-30T18:31:33Z","created_at":"2021-06-30T18:31:33Z","creator_user_login":"dummdidumm"}
{"number":6479,"comment_id":"871842593","body":"@dummdidumm Sure. Although the use cases that I personally encountered are a bit niche; I'll try my best to describe them:\r\n\r\n1. **Imagine a play/pause button of a video player**:\r\nI've encountered a number of situations of this sort, notice how in the below video, when the play button is clicked, its icon immediately changes to a pause icon, and then it starts to fade out, this wouldn't be possible to achieve with Svelte transitions.\r\nI should acknowledge that this one isn't a deal-breaker or something, it simply would've been a little nicer if it was possible to do in Svelte:\r\n\r\nhttps://user-images.githubusercontent.com/26527405/124051245-5d63b400-da31-11eb-84b1-dcebf858b83a.mp4\r\n\r\n2. **More severe example, when you want to decide whether an element should have a transition or not:**\r\nImagine again a video player where you have a poster element, and you want this poster to disappear as soon as the video either starts or the user seeks to another point in the video. But:\r\n\r\n```svelte\r\n{#if !hasEverPlayed && !hasEverSeeked}\r\n    <!-- NOTE: If the poster is being removed but not as a result of the video being played but as a result of user's seeking, then we don't want to have a fade out transition since we want the relevant frame of the video to be shown instantly, which is to say no transition for the poster. -->\r\n    <Poster\r\n        {posterUrl}\r\n        shouldHaveTransition={hasEverPlayed && !hasEverSeeked}\r\n    />\r\n{/if}\r\n```\r\nThis wouldn't work, as Svelte doesn't update the state within the {#if} block, namely the value of the `shouldHaveTransition`, once the condition evaluates to `false`.\r\nThe contents of `Poster.svelte`:\r\n```svelte\r\n<script lang=\"ts\">\r\n    // Imports:\r\n    import { fade } from \"svelte/transition\";\r\n\r\n    // Props:\r\n    export let posterUrl: string;\r\n    export let shouldHaveTransition: boolean;\r\n</script>\r\n\r\n<img\r\n    src={posterUrl}\r\n    alt=\"foo\"\r\n    class=\"video-player__poster\"\r\n    out:fade|local={{ duration: shouldHaveTransition ? 80 : 0 }}\r\n/>\r\n```\r\n\r\nAgain, the examples I'm providing are perhaps a bit too niche, and that's because I'm currently building a full-fledged video player in Svelte and so these were some of the cases where this limitation was annoying.\r\nBut I'm sure there are also similar cases in other types of components and UIs, where the behavior I described in my original comment would be more desirable.","updated_at":"2021-07-01T01:43:14Z","created_at":"2021-07-01T01:37:13Z","creator_user_login":"aradalvand"}
{"number":6479,"comment_id":"1001097855","body":"@dummdidumm Hey, I just stumbled into this again and I actually think this wouldn't make sense logically, so unless I'm missing something, we can close this issue.\r\n\r\nImagine you have something like this:\r\n```svelte\r\n{#if someObject != null}\r\n    <div transition:fade>\r\n        {someObject.someProperty}\r\n    </div>\r\n{/if}\r\n```\r\n\r\nIf Svelte continues to keep the state inside the `{#if}` block updated during out transition ‚Äî which is what I originally proposed ‚Äî in an instance like the code above, we'll get a `Cannot read properties of null (reading 'someProperty')` error during the out transition while the browser tries to evaluate the expression inside the div (`someObject.someProperty`).\r\n\r\nThe larger point being that any time you have an `if` block, **the code inside always assumes the true-ness of the if condition**, but if Svelte implements what I originally asked for, namely that it continues to update the state during out transition, that would break this principle.\r\n\r\nLet me know what you think. Am I right here?\r\nIf yes, then I think it would be nice if this was pointed out somewhere in the docs or the FAQ section, I think we should explain the rationale behind why Svelte couldn't/shouldn't update the state during out transitions, since it isn't really obvious at first, and might lead to confusion.","updated_at":"2021-12-26T02:41:33Z","created_at":"2021-12-26T02:23:22Z","creator_user_login":"aradalvand"}
{"number":6479,"comment_id":"1228191771","body":"Just encountered the same issue, since I wanted to update a class on an element via the `outrostart` event. eg.\r\n\r\n```svelte\r\n<script>\r\n\timport {fade} from \"svelte/transition\";\r\n\r\n\texport let isOpen = false;\r\n\tlet isAnimatingOut = false;\r\n</script>\r\n\r\n{#if isOpen}\r\n<aside\r\n\tin:fade\r\n\tout:fade\r\n\ton:introstart={() => isAnimatingOut = false}\r\n\ton:outrostart={() => isAnimatingOut = true}\r\n\tclass:animate-out={isAnimatingOut}\r\n>\r\n   Content\r\n</aside>\r\n{/if}\r\n```\r\n\r\nIn this case, the class `animate-out` is never set on the element, which would be nice in order to animate or change things  before/while animating out. \r\nI think if the `outrostart` event would trigger just before \"freezing\" the element, it would be enough for that case","updated_at":"2022-08-26T08:10:50Z","created_at":"2022-08-26T08:10:50Z","creator_user_login":"bummzack"}
{"number":5721,"comment_id":"733757632","body":"Same thing with group binds and `Set` https://svelte.dev/repl/805638d52bc74bd38aac2655dd3a6455?version=3.30.0","updated_at":"2020-11-25T14:58:19Z","created_at":"2020-11-25T14:58:19Z","creator_user_login":"sphinxc0re"}
{"number":5721,"comment_id":"733778668","body":"@sphinxc0re The group binds and Set makes kind of sense that they don't work because you are not working against an array with normal array methods. I think this cannot work. \r\n\r\nMy case is different because i want to directly change the value of a specific property.","updated_at":"2020-11-25T15:32:57Z","created_at":"2020-11-25T15:32:57Z","creator_user_login":"firewave-remo"}
{"number":5721,"comment_id":"869070393","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:47Z","created_at":"2021-06-26T22:46:47Z","creator_user_login":"stale[bot]"}
{"number":5721,"comment_id":"901598302","body":"Still an important issue IMO","updated_at":"2021-08-19T04:22:15Z","created_at":"2021-08-19T04:22:15Z","creator_user_login":"ecstrema"}
{"number":5721,"comment_id":"1018850721","body":"i would be glad to see this feature in a close futur too ;) ","updated_at":"2022-01-21T20:51:51Z","created_at":"2022-01-21T20:51:51Z","creator_user_login":"besstiolle"}
{"number":5721,"comment_id":"1143165612","body":"Recently spent quite a bit of time debugging an issue with this as the root.\r\nThis would be an excellent feature to add.\r\n\r\nHowever, in the meantime, I would appreciate a warning or error from the Svelte compiler for map[x] or map.get(x) showing up in a binding that lets users know that it doesn't work.\r\n\r\n(I realize map[x] also doesn't do what users of other languages might expect, but somewhat surprisingly the Svelte + TypeScript compiler doesn't catch that mistake either).","updated_at":"2022-06-01T06:22:48Z","created_at":"2022-06-01T06:22:48Z","creator_user_login":"Riizade"}
{"number":5721,"comment_id":"1632302302","body":"This is doable with an action (but I'm +1 for supporting a Map-like interfaces):\r\n\r\n```svelte\r\n<script>\r\nconst bindToMap = map => {\r\n\treturn (node, key) => {\r\n\t\tmap.set(key, node);\r\n\r\n\t\treturn {\r\n\t\t\tupdate(newKey) {\r\n\t\t\t\tmap.delete(key);\r\n\t\t\t\tkey = newKey;\r\n\t\t\t\tmap.set(key, node);\r\n\t\t\t},\r\n\t\t\tdestroy() {\r\n\t\t\t\tmap.delete(key);\r\n\t\t\t},\r\n\t\t};\r\n\t};\r\n};\r\n\r\nconst map = new Map();\r\nconst bindAs = bindToMap(map);\r\n\r\nconst fruits = [\r\n\t{\r\n\t\tname: 'Apple',\r\n\t},\r\n\t{\r\n\t\tname: 'Banana',\r\n\t},\r\n];\r\n</script>\r\n\r\n{#each fruits as fruit}\r\n\t<input use:bindAs={fruit} placeholder={fruit.name} />\r\n\t<br />\r\n{/each}\r\n\r\n<hr />\r\n\r\n<button on:click={() => map.get(fruits[0]).focus()}>Focus Apple</button>\r\n<br />\r\n<button on:click={() => map.get(fruits[1]).focus()}>Focus Banana</button>\r\n```","updated_at":"2023-07-12T11:31:03Z","created_at":"2023-07-12T11:07:54Z","creator_user_login":"szmarczak"}
{"number":5721,"comment_id":"1639099700","body":"The error message I received from trying this was:\r\n```\r\nundefined is not declared\r\n```\r\nNot very helpful.","updated_at":"2023-07-18T00:35:10Z","created_at":"2023-07-18T00:35:10Z","creator_user_login":"tgf9"}
{"number":5509,"comment_id":"706210502","body":"I think what you want here is to bind to name `<input bind:value={name} />` rather than title. By binding the input to `title` I think `title` is then only referring to the value of the input and no longer the reactive statement.","updated_at":"2020-10-09T14:20:37Z","created_at":"2020-10-09T14:20:37Z","creator_user_login":"srmullen"}
{"number":5509,"comment_id":"706278881","body":"I think the lesson here then is; don't bind to computed/reactive properties.\r\n\r\nMy assumption was that I could alter the value of a computed thing, and it would be altered back when something led to it being recomputed. This isn't really a sensible design, more I was playing with things to see what worked and what didn't, and I guess in this case my assumption doesn't hold? (should an error be thrown or something if I _do_ try doing this (perhaps by mistake)?","updated_at":"2020-10-09T16:28:28Z","created_at":"2020-10-09T16:27:56Z","creator_user_login":"jsdw"}
{"number":5509,"comment_id":"709228001","body":"I think binding implies a two-way read/write scenario for a variable, and computing a variable implies one-way. Svelte can't really do much if you tell it two different things.\r\n\r\nI am inclined to say there could be a dev warning here, but I don't really know how feasible it is.","updated_at":"2020-10-15T11:39:56Z","created_at":"2020-10-15T11:39:56Z","creator_user_login":"antony"}
{"number":5509,"comment_id":"827800277","body":"I think this is confusing. Manual \"binds\" work.\r\n\r\nhttps://svelte.dev/repl/4bedd5473d294e88a5ab4148ce9346d5\r\n\r\nThe case is:\r\n- user clicks things and populates textarea with them\r\n- the result of clicking is then edited and used\r\n- if user changes selection of things - adds, removes or reorders them, then it should recompute `combined`\r\n\r\nI expect `combined = things.join(' ')` to only run when `things` change. Then everything would be easy to understand.\r\n\r\nI feel like I shouldn't have to use `on:input`, or a buffer variable, or mask `combined` from reactivity like:\r\n\r\n```svelte\r\n<script>\r\n  $: if (things) updateCombined(); \r\n\r\n  function updateCombined() {\r\n    combined = things.join(' ');\r\n  }\r\n</script>\r\n\r\n<input bind:value={combined} />\r\n```\r\n\r\nThe funny thing is that `<svelte:options immutable />` fixes binds. Just why...\r\nthx @MarkTanashchuk for the find.","updated_at":"2021-04-27T17:59:32Z","created_at":"2021-04-27T17:57:17Z","creator_user_login":"non25"}
{"number":5509,"comment_id":"1000620174","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:08Z","created_at":"2021-12-24T02:48:08Z","creator_user_login":"stale[bot]"}
{"number":5106,"comment_id":"666970765","body":"I just ran up against this trying to implement React-like patterns in Svelte. I'm curious what the appropriate idiom to follow here is.\r\n\r\nIn React apps, it was quite common for me to implement \"controller\" components which have dynamic children. Such controllers were usually for fetching external data (example: the active user ID) and passing it down to a dynamic child component. So basically, any pure view component which knows how to render something about the active user could be wrapped in one of these \"controllers\" to have the user ID dynamically assigned.\r\n\r\nThe naive approach I tried looks like this:\r\n\r\n```svelte\r\n<script>\r\n  import { getClient, query } from 'svelte-apollo'\r\n\r\n  import { queryMyAgent } from './queries.ts'\r\n\r\n  const client = getClient()\r\n  const agent = query(client, { query: queryMyAgent })\r\n</script>\r\n\r\n{#await $agent}\r\n  Loading...\r\n{:then result}\r\n  <slot contextAgent={result.data.myAgent.id}></slot>\r\n{:catch error}\r\n  Agent loading failed: {error}\r\n{/await}\r\n```\r\n\r\nBut the nested component does not seem to get its own `contextAgent` prop assigned via the `slot`. Which means that this boilerplate would have to be included directly in every component that wishes to inject a context agent, correct? Not ideal.","updated_at":"2020-07-31T07:12:38Z","created_at":"2020-07-31T07:12:07Z","creator_user_login":"pospi"}
{"number":5106,"comment_id":"666980980","body":"@pospi that sounds more like a support question than an issue, which you should try using the [discord chat](https://svelte.dev/chat) for.  But you can achieve this by using the `slot let:` bindings: https://svelte.dev/docs#slot_let ","updated_at":"2020-07-31T07:36:04Z","created_at":"2020-07-31T07:36:04Z","creator_user_login":"stephane-vanraes"}
{"number":5106,"comment_id":"666988079","body":"Thanks for that @stephane-vanraes. It looks like you need to unpack the promise to get at the real value in order for `slot let:` to expose the binding. But it works, and the boilerplate is only in one component now which is nice:\r\n\r\n```svelte\r\n<script>\r\n  import { getClient, query } from 'svelte-apollo'\r\n\r\n  import { queryMyAgent } from './queries.ts'\r\n\r\n  const client = getClient()\r\n  const agent = query(client, { query: queryMyAgent })\r\n\r\n  let loading = true\r\n  let contextAgent\r\n  let error\r\n\r\n  agent.subscribe(promise => {\r\n    promise\r\n      /* eslint no-return-assign: 0 */\r\n      .then(val => contextAgent = val)\r\n      .catch(e => error = e)\r\n      .finally(() => loading = false)\r\n  })\r\n</script>\r\n\r\n{#if loading}\r\n  Loading...\r\n{:else if error}\r\n  Agent loading failed: {error}\r\n{:else}\r\n  <slot {contextAgent}></slot>\r\n{/if}\r\n```\r\n\r\nShould I be able to bind to the reactive props directly?","updated_at":"2020-07-31T07:53:43Z","created_at":"2020-07-31T07:53:43Z","creator_user_login":"pospi"}
{"number":5106,"comment_id":"746900951","body":"I've only started using Svelte recently but I've already run into the need to forward event bindings a few times. See e.g. codefeathers/rollup-plugin-svelte-svg#11. Would be great to know if this is on the roadmap or what's preventing it.","updated_at":"2020-12-16T19:42:59Z","created_at":"2020-12-16T19:42:59Z","creator_user_login":"janosh"}
{"number":5106,"comment_id":"869066718","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:58Z","created_at":"2021-06-26T22:03:58Z","creator_user_login":"stale[bot]"}
{"number":5106,"comment_id":"890425356","body":"I've written an RFC at https://github.com/sveltejs/rfcs/pull/57 in an attempt to propose a solution for this. Anyone one looking at this problem should feel free to chime in.","updated_at":"2021-08-01T00:57:09Z","created_at":"2021-08-01T00:57:09Z","creator_user_login":"Sxxov"}
{"number":4818,"comment_id":"637196216","body":"Hi @dummdidumm , wanna understand more on this issue, I'm pretty new to this topic, so I am curious is there examples of how other language is doing this?\r\n\r\nAlso\r\n- how do you get the partial output of the parser? Within the Error object?\r\n- should you pass a custom flag to indicate for a partial output? It seemed unnecessary to return that for a normal user","updated_at":"2020-06-02T00:25:58Z","created_at":"2020-06-02T00:25:58Z","creator_user_login":"tanhauhau"}
{"number":4818,"comment_id":"637307042","body":"Basically, all intermediate states where the user is in the middle of typing something, you get an error. This is bad for `svelte-language-server` because it uses the svelte compiler to transform the code into Jsx/Tsx:\r\n1. Let svelte compiler parse the code\r\n2. Walk resulting AST tree to transform the code into Jsx/Tsx code\r\n\r\nThe transformation is done because that way we can leverage typescripts autocompletions/diagnostics/go to definition etc.\r\n\r\nSome examples where parsing fails:\r\n\r\n```\r\n<SomeComponent someProp={someVariable.\r\n```\r\n--> The svelte compiler will throw an error \"unexpected token\". What I would like to have is to get output up until that point with the last AST element being \"Component SomeComponent with someProp\", or even better somehow try to parse the stuff afterwards, too, with a best guess where `someProp` might be closed.\r\n\r\n```\r\n{#if \r\n```\r\n--> as a user, I want to see what variable are available for `#if`, but svelte compiler will throw an error. What I would like to have is to get output up until that point with the last AST element being \"Moustache Tag if\", or even better somehow try to parse the stuff afterwards, too, with a best guess where `#if` might be closed.\r\n\r\nAn alternative would be to don't use the svelte compiler at all and try to parse the code ourselves, but I feel that is unnecessary work if it could be done in the compiler itself.\r\n\r\nHow other languages are doing this - frankly I don't know, but they are definitely doing it. If you use typescript for example, it will complain about invalid syntax but will not completely stop giving valid output in other places. Or HTML-parsers, they are very robust with regards to missing closing tags etc.\r\n\r\nAnswering your questions:\r\n- I would expect the partial output either as part of the Error object, or the normal object is returned with the error set as part of the `warnings` property. Or maybe both, kind of: Normal object for `parse` with new prop `errors`, part of error object for `compile` (because you cannot create js code from an invalid AST, that is also not needed). We can discuss the specifics if you like, and what works best for you given what code already exists in the compiler.\r\n- Yes, I would expect a custom flag, because as you say this is no common use case / could change the behaviour.","updated_at":"2020-06-02T12:37:10Z","created_at":"2020-06-02T06:27:43Z","creator_user_login":"dummdidumm"}
{"number":4818,"comment_id":"639461423","body":"I just saw on another thread that @simlrh suggested that `acorn-loose` allows for this: https://github.com/sveltejs/svelte/issues/4518#issuecomment-597519107","updated_at":"2020-06-05T12:52:07Z","created_at":"2020-06-05T12:52:07Z","creator_user_login":"benmccann"}
{"number":4818,"comment_id":"656135052","body":"I dipped a little into the svelte compiler code and I don't know if `acorn` is part of the problem. The \"I open a tag and don't have closed it yet because I'm in the middle of typing\" error is thrown [in the svelte parser](https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts#L509) doing tag analysis. Maybe parsing could be relaxed in such a way (if a `relaxed`-flag or sth like this is set) that if a `{` or `<` is encountered before the `>` that the tag is autoclosed.","updated_at":"2020-07-09T13:42:38Z","created_at":"2020-07-09T13:42:38Z","creator_user_login":"dummdidumm"}
{"number":4818,"comment_id":"1000568779","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:48Z","created_at":"2021-12-23T23:55:48Z","creator_user_login":"stale[bot]"}
{"number":4818,"comment_id":"1000705164","body":"Still needed","updated_at":"2021-12-24T07:44:45Z","created_at":"2021-12-24T07:44:45Z","creator_user_login":"dummdidumm"}
{"number":4818,"comment_id":"1356903242","body":"[Lezer](https://lezer.codemirror.net/) (Codemirror 6's new parser) is notably great at error-recovery and incremental parsing. Replit recently released their first stab at a [Codemirror 6 plugin for Svelte](https://github.com/replit/codemirror-lang-svelte) which has a Lezer grammar for Svelte. It might be possible to shoehorn something out of that to run on broken code in the short term? I have no idea.\r\n\r\nThe caveat is that Lezer produces a non-abstract syntax tree in an effort to be light since it's optimized for syntax-highlighting. I don't know enough about the Svelte compiler and have not seen Lezer being used for anything but syntax-highlighting. At the very least the [Lezer writeup](https://marijnhaverbeke.nl/blog/lezer.html) could serve as inspiration for whoever takes this up and edutainment everyone else.\r\n\r\nFun unrelated fact: the creator of `acorn` also authored `Lezer`.","updated_at":"2022-12-18T23:33:34Z","created_at":"2022-12-18T23:33:34Z","creator_user_login":"kwangure"}
{"number":4890,"comment_id":"632697357","body":"What if you were to initially assign an undefined variable as the handler, and then assign it later?","updated_at":"2020-05-22T13:43:52Z","created_at":"2020-05-22T13:43:52Z","creator_user_login":"antony"}
{"number":4890,"comment_id":"632979496","body":"Attaching listeners right away was originally done so that there wouldn't be repeated adding and removing of listeners later on, which is less efficient and more complicated to implement than just an even handler that either bails early or calls the function you've specifies as the event handler.\r\n\r\nI suppose I don't have much of an opinion about whether `on:event|preventDefault={undefined}` ought to actually still prevent default. The current behavior seems fine to me if it were documented. I don't think the other behavior seems sufficiently objectively more correct to justify the subtle breaking change this would be for everyone who was relying on the current undocumented behavior.","updated_at":"2020-05-23T03:44:02Z","created_at":"2020-05-23T03:44:02Z","creator_user_login":"Conduitry"}
{"number":4890,"comment_id":"632994844","body":"A breaking change and complicated implementation are certainly material costs to consider. So that you have complete information for your decision, I otherwise only see advantages:\r\n\r\n1. Without the change omitting handler functions becomes awkward and cumbersome:\r\n\r\n```\r\n{#if handler}\r\n    <input {manyprops1} {manyprops2} {manyprops2} ... on:click|preventDefault={handler} />\r\n{:else}\r\n    <input {manyprops1} {manyprops2} {manyprops2} ... />\r\n{/if}\r\n```\r\n\r\nWhereas you can still cleanly achieve the existing behaviour if the change is applied:\r\n\r\n```\r\n<input {manyprops1} {manyprops2} {manyprops2} ... on:click|preventDefault={()=>{}} />\r\n```\r\n\r\n2. It is more consistent with the rest of svelte: when a class expression or prop does not exist, they are simply omitted (as I personally expected with the listener).\r\n\r\n3. It is more consistent with regular js - there is no function, so what's running, a secret function?\r\n\r\n4. Why waste resources running empty functions, especially if there are no modifiers? What if the event is something intensive like `on:mousemove` or `on:input`? What about analytics that capture all top-level events? Or simply opening avenues for unintended consequences?\r\n\r\nJust some considerations.","updated_at":"2020-05-23T06:41:17Z","created_at":"2020-05-23T06:31:03Z","creator_user_login":"thinkloop"}
{"number":4890,"comment_id":"632998170","body":"I often use `<dive on:click|stopPropagation></div>` to prevent click events for reaching a parent element. Would this change break that use case?","updated_at":"2020-05-23T07:02:05Z","created_at":"2020-05-23T07:02:05Z","creator_user_login":"RedHatter"}
{"number":4890,"comment_id":"633009999","body":"Yes, but the change would simply be `<div on:click|stopPropagation={true}>` whereas a full conditional is required right now to not have that behaviour:\r\n\r\n```\r\n{#if handler}\r\n    <div on:click|stopPropagation={handler}></div>\r\n{:else}\r\n    <div></div>\r\n{/if}\r\n```","updated_at":"2020-05-23T09:11:49Z","created_at":"2020-05-23T08:57:23Z","creator_user_login":"thinkloop"}
{"number":4890,"comment_id":"1000889486","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:21Z","created_at":"2021-12-24T16:15:21Z","creator_user_login":"stale[bot]"}
{"number":4784,"comment_id":"624882716","body":"Here's an interesting wrinkle. In Chrome I see the behavior described above. In MacOS Safari 13.1 (Catalina) I see all the nested transitions run, but the positions of elements don't update completely until all the transitions have finished running, so things slide around and a bunch of the elements overlap until they jump to the right place at the end of the transition.\r\n\r\nEdit: also I just checked and the changes in #4742 do not appear to fix this.","updated_at":"2020-05-06T20:55:05Z","created_at":"2020-05-06T20:47:45Z","creator_user_login":"dimfeld"}
{"number":4784,"comment_id":"626779582","body":"Thanks for you analyses @dimfeld.\r\n\r\nI'm wondering if the author of #4742 (@pushkine) might have any insight on this issue?","updated_at":"2020-05-11T15:35:32Z","created_at":"2020-05-11T15:35:32Z","creator_user_login":"KevinAst"}
{"number":4784,"comment_id":"626879897","body":"it'll be fixed with #4742\r\n![2020-05-11 20-09-58_1](https://user-images.githubusercontent.com/30108880/81597982-dedc2b00-93c6-11ea-8ec8-9f63616e9f65.gif)\r\n","updated_at":"2020-05-11T18:35:13Z","created_at":"2020-05-11T18:35:13Z","creator_user_login":"pushkine"}
{"number":4784,"comment_id":"626899750","body":"WowZee ... Very Nice ... thanks for all your hard work @pushkine!!","updated_at":"2020-05-11T19:09:52Z","created_at":"2020-05-11T19:09:52Z","creator_user_login":"KevinAst"}
{"number":4784,"comment_id":"762614921","body":"Hey broskis, broettes, etc.\r\n\r\nAre there any updates on this issue?‚Äîseeing as #4742 and #4999 are substantial and therefore not likely to be merged in the short term.\r\n\r\nI'd break out the specific logic and PR to fix this hanky panky janky myself, but I'm only a Google expert in HTML. cc @pushkine \r\n\r\nThanks fam! ‚úåÔ∏è‚ô•Ô∏è & BLM","updated_at":"2021-01-19T05:42:59Z","created_at":"2021-01-19T05:42:59Z","creator_user_login":"tiemyshoe"}
{"number":4784,"comment_id":"869061472","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:53Z","created_at":"2021-06-26T21:03:53Z","creator_user_login":"stale[bot]"}
{"number":4784,"comment_id":"1053922081","body":"wow i finally found the exact issue, due to this i have to use conditional inline style to add scope effect","updated_at":"2022-02-28T06:09:00Z","created_at":"2022-02-28T06:09:00Z","creator_user_login":"sooxt98"}
{"number":4784,"comment_id":"1333745775","body":"Just facing the same issue.\r\nIt's a real shame that @pushkine 's work didn't end up pulled, although I completely understand the maintainers reaction considering the size of the PR. Hopefully someone will find time and motivation to make it work.","updated_at":"2022-12-01T13:10:18Z","created_at":"2022-12-01T13:10:18Z","creator_user_login":"Oreilles"}
{"number":4784,"comment_id":"1336255682","body":"Here's a REPL to replicate the issue: https://svelte.dev/repl/df7aa3512eef4dfc948212a3141c1556?version=3.53.1\r\n\r\nThe issue seems to be that the `slide` transition function calculating the element's height is called before the second level children have been added to the the DOM. For the transitions to work correctly, they should only be called *after* all the child elements have been added.","updated_at":"2022-12-03T20:50:53Z","created_at":"2022-12-03T20:50:53Z","creator_user_login":"Oreilles"}
{"number":4891,"comment_id":"633307191","body":"This would be awesome. VS Code recently introduced a contribution point using a standard Custom Data schema that can be shipped alongside components and automatically picked up by LSP aware tools: https://github.com/microsoft/vscode-custom-data\r\n\r\nWhich you could fetch from github/unpkg and it would look like this: https://raw.githubusercontent.com/mavoweb/mavo.io/master/docs/index.json\r\n\r\nThere are also already some awesome tools being built that even work standalone in the browser. https://runem.github.io/web-component-analyzer/?format=json2\r\n\r\nTo distribute components with type info in the REPL I have been curious if we could potentially preprocess a custom \"types/JS Doc\" comment block on each component and store the static data in a standalone json file that could be be used as a makeshift runtime type system. Not sure if that's feasible though, or if anyone else would even find it useful. . ","updated_at":"2020-05-24T22:02:38Z","created_at":"2020-05-24T22:02:38Z","creator_user_login":"mjgartendev"}
{"number":4891,"comment_id":"642789728","body":"Came across this thread while looking for information on how to create svelte components at runtime (dynamically from memory).\r\n\r\nMay be it is answered elsewhere, but could not find much information - is it possible to create a svelt component completely at runtime (without having to save it to files, or read from files)?\r\n\r\nThat is:\r\n\r\n- given a svelte component code (or `.svelete` file content) as a string, can we compile that string into js-code and load that component onto the DOM binding some data on the fly with all reactivity and other properties intact?\r\n\r\nAny example of this would be great. (All the examples available in the docs showcase a \"static / manual compilation\" option, where as I am looking for dynamic/runtime compilation example, to create and load the svelte component on the fly in the browser page)","updated_at":"2020-06-11T16:28:12Z","created_at":"2020-06-11T16:27:18Z","creator_user_login":"KrishnaPG"}
{"number":4891,"comment_id":"642958362","body":"Check out the code for the REPL itself, specifically https://github.com/sveltejs/svelte-repl/blob/a98ab3a4fa8af8646314a2517510cafe6ac47006/src/Output/Viewer.svelte#L88.\r\n\r\nIt runs the svelte compiler and rollup in the browser as workers. My understanding is the rollup generated dom code gets passed to the eval method on the ReplProxy class which is used by the Viewer component to display the result (linked above).\r\n\r\n@AlexxNB  posted a repl link to a trimmed down version on discord a while ago: https://svelte.dev/repl/eefc5b3e2311457693f153dcdf3ece2f?version=3.19.2\r\n\r\nAnother option is to lazy load a component (i.e. the compiler output) and pass the constructor to `<svelte:component/>`: https://github.com/sveltejs/svelte/blob/master/site/src/components/Lazy.svelte","updated_at":"2020-06-11T22:21:24Z","created_at":"2020-06-11T22:15:57Z","creator_user_login":"mjgartendev"}
{"number":4891,"comment_id":"643008508","body":"Thank you @mjgartendev Will look into the docs suggested.","updated_at":"2020-06-12T01:05:21Z","created_at":"2020-06-12T01:05:21Z","creator_user_login":"KrishnaPG"}
{"number":4891,"comment_id":"1000889490","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:22Z","created_at":"2021-12-24T16:15:22Z","creator_user_login":"stale[bot]"}
{"number":4712,"comment_id":"618842504","body":"@palask would it be possible for you to create a REPL for this (I tried copy pasting your code but the styles are missing) so that we can reproduce this ourselves please?","updated_at":"2020-04-24T07:07:07Z","created_at":"2020-04-24T07:07:07Z","creator_user_login":"antony"}
{"number":4712,"comment_id":"619135823","body":"@antony Here you go: [https://svelte.dev/repl/f0a579625c9f4d69978e3e87911a5ac9?version=3.21.0](https://svelte.dev/repl/f0a579625c9f4d69978e3e87911a5ac9?version=3.21.0)\r\nThis simplified REPL still does not include all of the styles from the original project, but even there you can see the inner contents just fading out (and not sliding away) at the end on Safari: [https://streamable.com/a5h6od](https://streamable.com/a5h6od)","updated_at":"2020-04-24T17:07:11Z","created_at":"2020-04-24T17:07:11Z","creator_user_login":"palask"}
{"number":4712,"comment_id":"619649366","body":"Another way I found it useful to do this on safari (without adding css property) is don't use built-in `slide` function with transition directive in Safari since it uses css animation. Safari has a bug that it'll ignore element `overflow: hidden` when element is transitioning.\r\nIn this demo I used `slide` function and change css property directly each frame, which might not be a good idea because it requires you to understand how the internal function works and require JavaScript to do more but at least it solves the issue on Safari.\r\n\r\n[demo](https://svelte.dev/repl/0cd77b3c17c641abb08458818c5abf89?version=3.21.0)\r\n","updated_at":"2020-04-27T00:28:41Z","created_at":"2020-04-27T00:26:48Z","creator_user_login":"kjj6198"}
{"number":4712,"comment_id":"660772186","body":"Added a small fix, I'm having a little trouble setting up my local (in the linked issue). Going to try again tomorrow.","updated_at":"2020-07-20T02:52:47Z","created_at":"2020-07-20T02:52:47Z","creator_user_login":"benschac"}
{"number":4712,"comment_id":"662149213","body":"As mentioned earlier, Safari won't recognize `overflow: hidden` in keyframe animations. Adding `node.style.overflow = 'hidden'` in the bundle (in function `create_rule`) makes it work. I wonder, before opening a PR, would that be an acceptable approach to solve it? Are we open to add (and subsequently remove) other styles at runtime other than `animation`? \r\n\r\n`overflow: hidden` is present in all the frames of the slide animation so it'd be equivalent to just set it as a style in the node.","updated_at":"2020-07-21T23:00:26Z","created_at":"2020-07-21T23:00:26Z","creator_user_login":"caroso1222"}
{"number":4712,"comment_id":"720146231","body":"Following @caroso1222 solution, it seems to be working with custom action as well.\r\n\r\nI'm using something like:\r\n```svelte\r\n<script>\r\n  import { slide } from \"svelte/transition\";\r\n  function safariWorkaround(node) {\r\n    if(navigator.appVersion.includes('Safari')) {\r\n      node.style.overflow = 'hidden';\r\n    }\r\n  }\r\n</script>\r\n\r\n{#if open}\r\n  <div transition:slide use:safariWorkaround>\r\n{/if}\r\n```\r\n\r\nBut like mentioned in the comment here https://github.com/sveltejs/svelte/pull/5168#issuecomment-663245096 it's probably best to undo that style once transition is done. In my case it's fine","updated_at":"2020-11-01T20:32:31Z","created_at":"2020-11-01T20:25:11Z","creator_user_login":"chmelevskij"}
{"number":4712,"comment_id":"1114288772","body":"It looks like this isn't an issue any longer. I just opened the test REPL in Safari and I'm on longer seeing the bug in the video linked above in the original post.","updated_at":"2022-05-01T17:12:27Z","created_at":"2022-05-01T17:12:27Z","creator_user_login":"benschac"}
{"number":4695,"comment_id":"616517265","body":"The key on a keyed each is used to control where new items in the array get added (instead of always adding them at the end and then forcing the new data into each component). It doesn't mean that as long as the key is unchanged, any props sent to any child components are assumed to be unchanged. Svelte doesn't know whether you might have mutated any of these objects in the meantime. The behavior for that component, as it is written, isn't going to change.\r\n\r\nBeing able to specify `immutable` in the _parent_ instead of in the child has come up before in #1740 but I don't think that's really been looked into at all.\r\n\r\nBeing able to mark certain props as immutable has probably come up before, although I'm not sure whether there's an issue. It's also not really clear to me how that would work, because a compiled component does lots of comparison checks between things that aren't props, and are instead directly or indirectly computed from various props or from browser events or from other sources - and how do we decide whether each one of these should be a `not_equal` or a `safe_not_equal`?","updated_at":"2020-04-20T12:21:17Z","created_at":"2020-04-20T12:21:17Z","creator_user_login":"Conduitry"}
{"number":4695,"comment_id":"616536733","body":"Thanks for the swift response!\r\n\r\nSo what I'm starting to get is, when I do `items = [...items, newItem]`, Svelte assumes that all the item properties have been modified, because the special semantics of the `=` operator in Svelte say so?\r\n\r\nPerhaps `safe_not_equal` could allow me to mark objects as immutable somehow, perhaps by allowing me to use `Object.freeze()` and checking `Object.isFrozen()`, or otherwise a Svelte-specific flag?  If the object is known to be immutable, Svelte would just do an identity comparison.\r\n\r\nFailing that, perhaps it would be a useful feature to be able to provide a callback on Item that determines whether the component should be updated when a property is changed from outside the component.","updated_at":"2020-04-20T13:00:26Z","created_at":"2020-04-20T13:00:05Z","creator_user_login":"rdb"}
{"number":4695,"comment_id":"666522020","body":"For me, it wasn't clear from the original post that you would NOT have this problem if you [spread the props](https://svelte.dev/tutorial/spread-props), or passed in each object property [separately](https://svelte.dev/tutorial/declaring-props). Here is a [modified version](https://svelte.dev/repl/ad080e29af9d4ddbb85d2068774f71f4?version=3.24.0) of @rdb 's REPL to demonstrate this.\r\n\r\nAn example where this came up for me was I had a component that operated in say 3 distinct states, which required different sets of variables for each state. To enforce correctly setting the variables for a given state, I had a single property `state` that would take a state object that was created through exported functions.\r\n\r\nI ended up exporting functions to update the state directly vs exporting functions to generate a state object and pass that object back in via a `state` property, for a few reasons:\r\n1. False reactions required extra logic to prevent\r\n2. I would have to call an exported function anyway with matched definitions\r\n3. I had no use to modify or store the generated state externally","updated_at":"2020-07-30T17:22:32Z","created_at":"2020-07-30T16:53:38Z","creator_user_login":"nous-"}
{"number":4695,"comment_id":"1000920096","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:47Z","created_at":"2021-12-24T19:24:47Z","creator_user_login":"stale[bot]"}
{"number":4695,"comment_id":"1252804153","body":"I ran into the same issue today and wanted to just add it as a reference.\r\n\r\nIf you take this repl: https://svelte.dev/repl/1ce699aa893b4bd983763f75796818fa?version=3.20.1\r\n\r\nWhen you click `Change` you see it changes the 2nd component, but it will also trigger all the other components.\r\n\r\nThis is expected because the `list` variable gets re-assigned, even though it's keyed.\r\n\r\nI wonder if there is an optimization that can be made here to either check the references of each element in the array (updating a single element causes the whole array to be updated) or use a smarted update mechanism for arrays.","updated_at":"2022-09-20T19:20:56Z","created_at":"2022-09-20T19:20:56Z","creator_user_login":"rogerfar"}
{"number":4695,"comment_id":"1435821701","body":"Svelte should provide a way for the user to control the comparison strategy. Something like:\r\n```js\r\nimport {equals} from 'svelte';\r\nequals((propName, currentValue, newValue) => /* returns true/false */);\r\n```\r\nThen you could even do deep equality.","updated_at":"2023-02-19T02:25:37Z","created_at":"2023-02-19T02:25:37Z","creator_user_login":"mariusnita"}
{"number":3895,"comment_id":"552460244","body":"Actually, I don't think this is quite right. The timeout (which is designed to prevent scroll being set in *response* to a scroll event) is preventing spring/tweened values from controlling scroll, which isn't what we want. This might also affect `<svelte:window>`? More work needed","updated_at":"2019-11-11T14:10:15Z","created_at":"2019-11-11T14:10:15Z","creator_user_login":"Rich-Harris"}
{"number":3895,"comment_id":"581172160","body":"What about an approach where you simply set an ignore flag that's cleared in the scroll handler, following https://stackoverflow.com/a/1386750","updated_at":"2020-02-02T20:11:19Z","created_at":"2020-02-02T20:11:19Z","creator_user_login":"freedmand"}
{"number":3895,"comment_id":"844330902","body":"> What about an approach where you simply set an ignore flag that's cleared in the scroll handler, following https://stackoverflow.com/a/1386750\r\n\r\nI've implemented something like this for one of my projects. It's determined whether the scroll was user-triggered or script-triggered. We can tell because scripts have to set a variable when trying to scroll.","updated_at":"2021-05-19T17:48:47Z","created_at":"2021-05-19T17:48:47Z","creator_user_login":"Xylobol"}
{"number":3895,"comment_id":"995023754","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-15T17:49:09Z","created_at":"2021-12-15T17:49:09Z","creator_user_login":"stale[bot]"}
{"number":3895,"comment_id":"1451746998","body":"[vc]: #ZwuBOMbdYkje5frn58iShWAJCIewJpwqjZN2kclBfoc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJyb290RGlyZWN0b3J5Ijoic2l0ZXMvc3ZlbHRlLmRldiIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9zdmVsdGUvc3ZlbHRlLWRldi0yLzdxZEsyQjlKMlhUaTM2cXNHWlhvd2ZmZ3pYeHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiRkFJTEVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6IiJ9LCJwcmV2aWV3VXJsIjoiIn1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated |\n| :--- | :----- | :------ | :------- | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/7qdK2B9J2XTi36qsGZXowffgzXxp)) |  |  | Mar 2, 2023 at 11:53AM (UTC) |\n\n","updated_at":"2023-03-02T11:53:54Z","created_at":"2023-03-02T11:53:52Z","creator_user_login":"vercel[bot]"}
{"number":3368,"comment_id":"519100227","body":"I got the impression from https://svelte.dev/tutorial/updating-arrays-and-objects since I came from React and Vue background, `list = list` never crosses to my mind.","updated_at":"2019-08-07T13:36:52Z","created_at":"2019-08-07T13:36:52Z","creator_user_login":"hepiBatman"}
{"number":3368,"comment_id":"519261419","body":"So, I was just testing #3373 a bit further and found something interesting.\r\n\r\nWhen using a method in a top-level object to modify its state, such object isn't updated either. Here's a simple example ([REPL](https://svelte.dev/repl/b59cb474d14941f9bcfd7533214d2325?version=3.7.1)):\r\n\r\n```html\r\n<script>\r\n\tlet person = {\r\n\t\tname: '',\r\n\t\tchangeMyName() {\r\n\t\t\tthis.name = 'wat'\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction handler() {\r\n\t\t// doesn't update the object\r\n\t\tperson.changeMyName()\r\n\t\t\r\n\t\t// does update the object\r\n\t\tperson.name = 'ok'\r\n\t}\r\n</script>\r\n\r\n<form>\t\r\n\t<button type=\"button\" on:click={handler}>Change my name</button>\r\n\t\r\n\t<pre>{JSON.stringify(person)}</pre>\r\n</form>\r\n```\r\n\r\nThis one caught me by surprise as well.","updated_at":"2019-08-07T20:43:07Z","created_at":"2019-08-07T20:43:07Z","creator_user_login":"ericmdantas"}
{"number":3368,"comment_id":"519287976","body":"yeah, until you put `person = person` to the handler, it seems `object = object` is the norm in svelte. It would be great if it can automatically understands this like Vue.\r\n\r\nSeparate issue, REPL does not allow user to update REPL on mobile, it keeps deleting the typed character.","updated_at":"2019-08-07T22:13:07Z","created_at":"2019-08-07T22:13:07Z","creator_user_login":"hepiBatman"}
{"number":3368,"comment_id":"519289238","body":"To answer the original post, can we have a page like Vue does (https://vuejs.org/v2/guide/reactivity.html) where svelte reactivity can be explain **and** the above explanation can be placed.","updated_at":"2019-08-07T22:18:14Z","created_at":"2019-08-07T22:18:14Z","creator_user_login":"hepiBatman"}
{"number":3368,"comment_id":"716899830","body":"Reminder to mention this caveat (`$:` reactive blocks are batched), and possible workaround, as mentioned in\r\nhttps://github.com/sveltejs/svelte/issues/4586#issuecomment-602034126:\r\n\r\n> For performance reasons, `$:` reactive blocks are batched up and run in the next microtask. This is the expected behavior. This is one of the things that we should talk about when we figure out how and where we want to have a section in the docs that goes into more details about reactivity.\r\n\r\n> If you want something that updates synchronously and depends on another value, you can use a derived store: ...\r\n\r\n","updated_at":"2020-10-27T00:27:26Z","created_at":"2020-10-27T00:27:26Z","creator_user_login":"TylerRick"}
{"number":3368,"comment_id":"716916017","body":"An even more confusing behavior (which I believe should be considered a bug) is this one: https://github.com/sveltejs/svelte/issues/5190\r\n\r\nIf that one somehow ends up being deemed an intended behavior rather than a bug, then it should definitely get explained in the docs too.","updated_at":"2020-10-27T01:21:35Z","created_at":"2020-10-27T01:21:35Z","creator_user_login":"TylerRick"}
{"number":3368,"comment_id":"1001562730","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T13:10:57Z","created_at":"2021-12-27T13:10:57Z","creator_user_login":"stale[bot]"}
{"number":7773,"comment_id":"1208479961","body":"The core problem here is that we want the functions exported from `'svelte'` to be real, regular functions. There's nothing that `setContextReactive` or `getContextReactive` could be defined as that would cause their arguments or their return values to be reactive. We don't want the Svelte compiler to treat these as magic imports and to emit any different code as it would for any other call to any other function imported from any other module. And the way to have reactive values, when you don't have access to the compiler magic and when the reactivity could come from anywhere else in the code, is to use stores.","updated_at":"2022-08-08T18:46:38Z","created_at":"2022-08-08T18:46:38Z","creator_user_login":"Conduitry"}
{"number":7773,"comment_id":"1208488204","body":"Understood. I just wanted to bring this issue to the forefront so it could be discussed. I completely understand if my proposals are not possible or more trouble than they are worth, but wanted to illustrate what I was aiming for.\r\n\r\nThe current solution (passing stores down the tree) definitely works, but is a bit verbose and adds complexity. Complexity seems to go against what Svelte is all about. It's a pain point us and our users have run into, so I'm 100% open to any other proposed ideas or solutions to make this better.\r\n\r\nWe very much plan to continue working with things as they are now in the meantime!\r\n\r\nThanks!","updated_at":"2022-09-07T23:35:03Z","created_at":"2022-08-08T18:53:39Z","creator_user_login":"endigo9740"}
{"number":7773,"comment_id":"1236018102","body":"> The core problem here is that we want the functions exported from `'svelte'` to be real, regular functions. There's nothing that `setContextReactive` or `getContextReactive` could be defined as that would cause their arguments or their return values to be reactive. We don't want the Svelte compiler to treat these as magic imports and to emit any different code as it would for any other call to any other function imported from any other module. And the way to have reactive values, when you don't have access to the compiler magic and when the reactivity could come from anywhere else in the code, is to use stores.\r\n\r\nI completely agree with @endigo9740 that there should probably be some way to both create a store and limit its subscribers to child components _at the same time_.  This feels like a **very** appropriate thing to tackle in Svelte v4.0 @Rich-Harris (although, **it doesn't require _any_ breaking changes**).  It seems like we just lack the _built-in_ expressiveness to wrap both a store declaration and set a context in one _concise_ statement.\r\n\r\nWhile it's better than `bind:` directives _ad nauseum_, a parent component that sets lots of contexts for numerous child components can still get really bloated by this boilerplate:\r\n\r\n<details>\r\n<summary><strong>A bad, bloated way to set lots of stores in contexts</strong></summary>\r\n<img width=\"656\" alt=\"CleanShot 2022-09-02 at 22 34 20@2x\" src=\"https://user-images.githubusercontent.com/65916939/188252593-4744e5f1-6360-49ff-885f-59b0bb598ed2.png\">\r\n</details>\r\n\r\n<hr/>\r\nHere's a more concise version of that same pattern:\r\n<img width=\"629\" alt=\"CleanShot 2022-09-02 at 21 50 48@2x\" src=\"https://user-images.githubusercontent.com/65916939/188251324-b475bf2d-b85b-47fc-9f4f-cb5ba6add933.png\">\r\n\r\nIt's ok, but still not very new-user-friendly.  I certainly stayed away from the context API when I first started learning Svelte because **stores just felt better to write** -- a credit to the ease of using the `$` syntax.  I think we can still improve the ergonomics and default \"key safety\" of using reactive contexts as described in the tutorial, all in one fell swoop:\r\n\r\n<img width=\"601\" alt=\"CleanShot 2022-09-03 at 01 45 05@2x\" src=\"https://user-images.githubusercontent.com/65916939/188257669-e5d090f9-f45e-4f6b-85a5-165ee6910306.png\">\r\n\r\nI love that this is so easily composable with Svelte!  I just wish it was more accessible to newcomers, i.e. built-in to the framework!  Now, when we use it, even the typing (both keystrokes, and the type-safety) get slightly easier!\r\n<img width=\"669\" alt=\"CleanShot 2022-09-03 at 02 01 21@2x\" src=\"https://user-images.githubusercontent.com/65916939/188258111-fd8131cb-cdf0-4651-9a03-0c7730350890.png\">\r\nI avoided re-importing `Writable` and `writable()` in this scenario entirely and still get the full type-safety/intellisense benefits!\r\n<img width=\"314\" alt=\"CleanShot 2022-09-03 at 02 03 46@2x\" src=\"https://user-images.githubusercontent.com/65916939/188258157-b3b4e8ae-2f76-4227-9fd0-318f71e043db.png\">\r\n<img width=\"274\" alt=\"CleanShot 2022-09-03 at 02 09 27@2x\" src=\"https://user-images.githubusercontent.com/65916939/188258301-316e3b21-1090-43fe-b206-7ef59a6e269d.png\">\r\n\r\n\r\nIn this highly opinionated framework that aims to make web-dev fun, easy, and accessible, we should continue to encourage using the best-practices --using stores and contexts instead of prop-drilling, and unique keys for reliable access-- not just in the tutorial, but in the language itself!  Maybe it's worth putting in an option to escape using Symbols (and the required string keys), but this seems like the sensible default use-case.","updated_at":"2022-09-04T03:43:17Z","created_at":"2022-09-03T01:21:39Z","creator_user_login":"jrmoynihan"}
{"number":7850,"comment_id":"1242655492","body":"https://github.com/sveltejs/svelte/issues/7480\r\n\r\n`bind:this` cleans up after itself by setting the binding to `null`. You need to rethink your implementation.\r\n\r\nhttps://svelte.dev/repl/5a315d8a59004f1d8867f7fbb3646184?version=3.50.1","updated_at":"2022-09-10T07:23:51Z","created_at":"2022-09-10T07:21:37Z","creator_user_login":"Prinzhorn"}
{"number":7850,"comment_id":"1242725190","body":"1. How am I supposed to know how the internals of how this:bind works?\r\n2. I need the reference to all the DOM nodes in the list to do some other processing work, you removed the external variable concept in your REPL. I made my REPL small to easily explain the issue.\r\n3. The fact that this works via `setTimeout(() => {}, 0)` is a red flag\r\n4. This is extremely unintuitive. When you explicitly set an array = [ ] in svelte (or...anywhere else) ...it clears it\r\n5. This behavior makes it very very easy to produce a bug in your code\r\n","updated_at":"2022-09-10T13:10:40Z","created_at":"2022-09-10T13:09:57Z","creator_user_login":"Jojoshua"}
{"number":7850,"comment_id":"1242741086","body":"> How am I supposed to know how the internals of how this:bind works?\r\n\r\nI'm probably the wrong person to ask, since Svelte and its reactivity clicked for me from the beginning. But I think the docs and tutorials could be improved in this regard? They don't mention what happens when the element is unmounted at all.\r\n\r\nhttps://svelte.dev/docs#template-syntax-element-directives-bind-this\r\nhttps://svelte.dev/tutorial/bind-this\r\n\r\nIf it's technically possible then in dev mode Svelte should also warn about this and tell you to not assign to variables that are used in readonly bindings. E.g. in this example Svelte should warn that you shouldn't assign to `width`, because that's pointless (the readonly binding will override the value immediately, but in a different way than your example) https://svelte.dev/repl/960c50bf742441f283d60e9c333a6045?version=3.50.1\r\n\r\n> This is extremely unintuitive. When you explicitly set an array = [ ] in svelte (or...anywhere else) ...it clears it\r\n\r\n`bind:this` is a readonly binding. That means it's essentially an assignment to `elements[i]`. That conflicts with your assignment to `elements`. The order is well defined, but you still shouldn't manually assign a value to something that is bound to a readonly binding. You have two conflicting code paths that try to control the `elements` array.\r\n\r\n> The fact that this works via `setTimeout(() => {}, 0)` is a red flag\r\n\r\nI never heard the term \"red flag\" in the context of software. Does using [`await tick()`](https://svelte.dev/docs#run-time-svelte-tick) instead of `setTimeout` make it more clear what's happening? Because it's not magic, it's how the reactivity works. This won't solve your problem though, you will still end up with an intermediate array that has `null` values, because of the conflicting interests regarding the `elements` variable.\r\n\r\n> This is extremely unintuitive. When you explicitly set an array = [ ] in svelte (or...anywhere else) ...it clears it\r\n\r\nIt does clear it, you get your `console.log` with an empty array. But right in the next tick the `bind:this` cleanup will assign a value to your array (the conflicting code path).\r\n\r\n> I need the reference to all the DOM nodes in the list to do some other processing work, you removed the external variable concept in your REPL\r\n\r\nYou still have all DOM nodes. This REPL makes it even more clear what's happening and you can see that for one tick the binding is undefined (before the node exists).\r\n\r\nhttps://svelte.dev/repl/604be68b6f4a4cdfa66e9f16aa29ed0b?version=3.50.1","updated_at":"2022-09-10T14:28:01Z","created_at":"2022-09-10T14:25:41Z","creator_user_login":"Prinzhorn"}
{"number":7850,"comment_id":"1242751021","body":"> But I think the docs and tutorials could be improved in this regard? They don't mention what happens when the element is unmounted at all.\r\n\r\nAgreed, I couldn't find anything in depth. The docs are easy to read but I feel like there are idiosyncrasies that need more detail such as this.\r\n\r\n> \r\n> If it's technically possible then in dev mode Svelte should also warn about this and tell you to not assign to variables that are used in readonly bindings. E.g. in this example Svelte should warn that you shouldn't assign to `width`, because that's pointless (the readonly binding will override the value immediately, but in a different way than your example) https://svelte.dev/repl/960c50bf742441f283d60e9c333a6045?version=3.50.1\r\n\r\nIf this behavior won't be changed then I suppose a warning or something to help out the user would be beneficial. It's super easy to miss this behavior.\r\n\r\n> > This is extremely unintuitive. When you explicitly set an array = [ ] in svelte (or...anywhere else) ...it clears it\r\n> \r\n> `bind:this` is a readonly binding. That means it's essentially an assignment to `elements[i]`. That conflicts with your assignment to `elements`. The order is well defined, but you still shouldn't manually assign a value to something that is bound to a readonly binding. You have two conflicting code paths that try to control the `elements` array.\r\n\r\nI can accept this explanation but it's still unintuitive.\r\n\r\n\r\n>  Does using [`await tick()`](https://svelte.dev/docs#run-time-svelte-tick) instead of `setTimeout` make it more clear what's happening? \r\n\r\nYes it would. I thought of using await tick when trying to solve the issue but I can't remember what the results were now.\r\n\r\n> > This is extremely unintuitive. When you explicitly set an array = [ ] in svelte (or...anywhere else) ...it clears it\r\n> \r\n> It does clear it, you get your `console.log` with an empty array. But right in the next tick the `bind:this` cleanup will assign a value to your array (the conflicting code path).\r\n> \r\n> > I need the reference to all the DOM nodes in the list to do some other processing work, you removed the external variable concept in your REPL\r\n> \r\n> You still have all DOM nodes. This REPL makes it even more clear what's happening and you can see that for one tick the binding is undefined (before the node exists).\r\n> \r\n> https://svelte.dev/repl/604be68b6f4a4cdfa66e9f16aa29ed0b?version=3.50.1\r\n\r\nThank you for this example. It's closer to what I am doing. Maybe this makes sense \r\n to others and maybe I'll come around but right now it still feels awkward. \r\n\r\nFor one, I will have to add all the dynamic \"element\" properties on my typescript interface  **bind:this=\"{item.element}** and that is a detail I really don't need/want in the TS public interface. This would then require more and more code to work around.\r\n\r\n","updated_at":"2022-09-10T15:17:15Z","created_at":"2022-09-10T15:17:15Z","creator_user_login":"Jojoshua"}
{"number":7844,"comment_id":"1239521387","body":"By \"batch\", do you mean something like a derived store that always waits til the next tick before updating its value? An async store like that is something that has been discussed before, but I'm not sure that it has its own issue.\r\n\r\nBut in any case, this is something that can happily live in userland in the meantime. The store implementations that come with Svelte are basically just blessed userland code. It's the store contract that's the important part. It's not too difficult to write a derived store composition function (or any other custom store) that has precisely the characteristics you need for a particular problem.","updated_at":"2022-09-07T15:11:39Z","created_at":"2022-09-07T15:11:39Z","creator_user_login":"Conduitry"}
{"number":7844,"comment_id":"1239532085","body":"Yes, I suppose it could be a variant of the derived store that waits for the next tick. Alternatively, there could be an explicit `batch` function like in the linked SolidJS example, which might be useful if the updates you're making affect multiple derived stores.\r\n\r\nI did find [this alternative store](https://whenderson.github.io/stores-mono/modules/_crikey_stores_base.html), which claims to solve the \"diamond\" update problem (as it's described there). I'm trying it out now.\r\n\r\nEdit: That store library is actually solving a slightly different problem. Leaving my issue here open as a feature request.","updated_at":"2022-09-07T18:09:38Z","created_at":"2022-09-07T15:20:16Z","creator_user_login":"dpmccabe"}
{"number":7844,"comment_id":"1240427160","body":"@dpmccabe You can use [@amadeus-it-group/tansu](https://github.com/AmadeusITGroup/tansu/) instead of `svelte/store`. It has a compatible API and, in addition, has a [`batch`](https://amadeusitgroup.github.io/tansu/tansu.batch.html) function that can be called to delay updates synchronously:\r\n\r\n```js\r\n\t\tbatch(() => {\r\n\t\t\t$searchText = searchEl.value;\r\n\t\t\t$page = 1;\r\n\t\t})\t\t\r\n```\r\n\r\nCf the following updated REPL: https://svelte.dev/repl/445ef0a0ce684a47ac67222c686784f5?version=3.50.0\r\n\r\nNote that the \"diamond\" problem you are talking about is also solved in `@amadeus-it-group/tansu` (cf [this pull request](https://github.com/AmadeusITGroup/tansu/pull/31)).\r\n","updated_at":"2022-09-08T08:55:37Z","created_at":"2022-09-08T08:55:37Z","creator_user_login":"divdavem"}
{"number":7844,"comment_id":"1241050006","body":"Wow, thanks @divdavem. I've been looking for something exactly like this for a while!","updated_at":"2022-09-08T17:59:04Z","created_at":"2022-09-08T17:59:04Z","creator_user_login":"dpmccabe"}
{"number":7844,"comment_id":"1242878808","body":"you can create a store to subscribe them in batches \r\n```js\r\nconst batch = (...stores) => {\r\n    const values = stores.map(a => get(a))\r\n    return readable(values, set => {\r\n        let requestId\r\n        stores.forEach((s, i) => {\r\n            s.subscribe(v => {\r\n\t        if(values[i]!==v){\r\n\t\t    cancelAnimationFrame(requestId)\r\n\t\t    values[i] = v\r\n\t\t    requestId = requestAnimationFrame(() => set(values))\r\n\t        }\r\n            })\r\n        })\r\n    })\r\n}\r\n```\r\nthen:\r\n```js\r\nconst results = derived(batch(searchText, page), ([theSearchText, thePage], set) => {\r\n```\r\nhttps://svelte.dev/repl/aa26bf2b4cb247e3a60f02d0c6e4757b?version=3.50.0","updated_at":"2022-09-11T04:00:16Z","created_at":"2022-09-11T03:44:21Z","creator_user_login":"aolose"}
{"number":7844,"comment_id":"1255671114","body":"> Yes, I suppose it could be a variant of the derived store that waits for the next tick. Alternatively, there could be an explicit `batch` function like in the linked SolidJS example, which might be useful if the updates you're making affect multiple derived stores.\r\n> \r\n> I did find [this alternative store](https://whenderson.github.io/stores-mono/modules/_crikey_stores_base.html), which claims to solve the \"diamond\" update problem (as it's described there). I'm trying it out now.\r\n> \r\n> Edit: That store library is actually solving a slightly different problem. Leaving my issue here open as a feature request.\r\n\r\nI'm the author of the @crikey libraries you mentioned. You are correct that the diamon dependency problem I describe is slightly different.\r\n\r\nAnother way you could go is to store the value as a single object.\r\n\r\n`{ searchText: 'xxx', page: 1 }`\r\n\r\nYou could then change this composite value atomically and avoid any need for batching.\r\n\r\nYou could either manage this composite value manually, or use something like @crikey/stores-immer and @crikey/stores-selectable to help you. ","updated_at":"2022-09-23T00:01:36Z","created_at":"2022-09-23T00:01:36Z","creator_user_login":"WHenderson"}
{"number":7009,"comment_id":"991873020","body":"From my experience (I've played with it [a while ago](https://twitter.com/Prinzhorn/status/989809146831753216), Chromium had this for years) there is a lot of foot gun potential. It requires careful consideration for each element you apply it to and I don't think your regular website needs to use it (or _can_ even use it). The use-cases are also rather limited. In the CodePen in the article you've linked the `main` element has a fixed width and height for a reason. Because otherwise changes inside the element _would_ have an effect on things outside of it. If you don't carefully apply `contain` you will end up with funny rendering issues and inconsistent layouts.\r\n\r\nHere's what happens without `height: 50vh`, `strict` will just collapse the element:\r\n\r\nhttps://user-images.githubusercontent.com/679144/145708939-f96c3a30-7386-4f7f-9982-64ebacc7ff1d.mp4\r\n\r\nI don't think it's realistic to \"aggressively adding the property to elements\" at all. The property changes some semantics, e.g. try adding a `position: absolute` element inside the `main` in the CodePen. It will move inside the element once you enable `contain`.\r\n\r\nhttps://user-images.githubusercontent.com/679144/145708823-994fa912-bf97-4c97-975b-d0ecce4a0fa7.mp4","updated_at":"2021-12-12T10:33:42Z","created_at":"2021-12-12T10:33:42Z","creator_user_login":"Prinzhorn"}
{"number":7009,"comment_id":"991879601","body":"This is a fair point. `strict` applies all of the contain options. That is obviously not always ideal. It'd be interesting to see performance differences if you're just applying `size`, `paint` or `layout` independently. ","updated_at":"2021-12-12T11:22:33Z","created_at":"2021-12-12T11:22:33Z","creator_user_login":"kevmodrome"}
{"number":7009,"comment_id":"991893507","body":"I think the most important question is: what are the conditions under which each of them can be set and if Svelte can detect these conditions. Because there must be conditions for each, otherwise the browsers would apply these optimization by default. If these conditions could be detected at compile time by Svelte (or even at runtime), then once again what keeps the browser from doing it for us? I _think_ each case needs to be carefully evaluated by a person and it cannot be automated. But I'm by no means an expert on `contain` and it would of course be great if Svelte could do something automatically if it is 100% safe to do so.","updated_at":"2021-12-12T12:55:08Z","created_at":"2021-12-12T12:55:08Z","creator_user_login":"Prinzhorn"}
{"number":7009,"comment_id":"994199248","body":"It's arbitrarily hard to determine. JavaScript might dynamically add classes, etc. I can think of lots of cases where children are not neatly contained: badges, floating labels, etc. Svelte implicitly injecting CSS, especially considering the risk, seems like a severe overreach. Not to mention, the \"contain\" rule is not even verbose to begin with, and explicitly promising Svelte that it's ok to add it saves you no code and just adds complexity and more mental overhead.","updated_at":"2021-12-15T01:20:55Z","created_at":"2021-12-15T01:20:55Z","creator_user_login":"samclaus"}
{"number":6882,"comment_id":"952582185","body":"That's one use-case I want to use declarative actions for https://github.com/sveltejs/rfcs/pull/41 . Because creating wrapper components just for styling feels wrong to me.\r\n\r\n`styled/button/primary.svelte`\r\n\r\n```svelte\r\n<svelte:target class:primary /> \r\n\r\n<style>\r\n  .primary {\r\n    background: brown;\r\n    color: white;\r\n  }\r\n</style>\r\n```\r\n\r\nAnd then:\r\n\r\n```svelte\r\n<script>\r\n  import primary from 'styled/button/primary.svelte'\r\n</script>\r\n\r\n<button use:primary></button>\r\n```\r\n\r\nYou can't really do that with imperative actions right now because handling of `<style>` blocks with consolidation and class name generation is missing.","updated_at":"2021-10-27T06:27:40Z","created_at":"2021-10-27T06:27:40Z","creator_user_login":"Prinzhorn"}
{"number":6882,"comment_id":"952588287","body":"To break this down:\r\n- you don't want to use `$$props` because of the performance implications. But use cases like this are exactly what this special variable is made for. The performance hit is probably neglectable\r\n- you want to bubble all events: there's discussion about how to solve this in other issues (#2837) as well as a draft PR which would allow to do this. A more general API would be preferred because it can also be useful in other circumstances\r\n- you want to be able to apply actions/transitions etc to a component. This was requested in various ways already and the stance on this so far is \"no\". Reason: components are self-contained and have a strict boundary. Loosening that would make components harder to author as there's now more ways to use that component. It also fails the case where people might want to assign different transitions to multiple different elements of the component. You explicitly ruled that case out but I guarantee it will come up if something like this is implemented. Btw you can do this today using props to pass transitions etc, which I agree does not feel idiomatic. Personally I'm not saying something like this will never happen, but it needs more thought and discussions.","updated_at":"2021-10-27T06:39:46Z","created_at":"2021-10-27T06:39:46Z","creator_user_login":"dummdidumm"}
{"number":6882,"comment_id":"952671473","body":"@dummdidumm\r\n\r\n* I am happy enough using `$$prop` and in React spreading props is going to pass through everything (e.g. handlers). However spreading props does not give you the ability to bind.\r\n\r\n```html\r\n<input {...$$props} />\r\n```\r\n\r\n```html\r\n<script>\r\n  import MyInput from \"./MyInput.svelte\"\r\n  let value\r\n</script>\r\n<MyInput bind:value />\r\n```\r\n\r\n* `on:*` would be helpful for events but would only get you a little further.\r\n*  I am asking for a new kind of component to be introduced the `elementComponent` it only allows you to create a component with a single element and only allows you to apply style to that element by classes and style prop. By limiting the scope we get some guarantees that make transparently spreading all bindings, handlers, props, transitions and actions safe and predictable. This limited scope means these `elementComponent` can have the same optimisations that Svelte's built in elements have. Think of them as a way to apply style to the built in elements that ship with Svelte without changing their API (other than adding props that affect styles). Because there is only one element in the component we always know which element should be transitioned, bound, styled etc.\r\n\r\nI think most of the need for spreading props, handlers, bindings is on single element components. For compound components spreading is mostly an anti pattern (it makes typing, documentation and testing hard). Compound components should aim to have a narrow interface. But HTML elements start with a massive API surface area this is very hard to recreate by hand and needs a lot of knowledge. Nearly all the time what we want is just something that behaves the same as `<button>` or `<input>` but has our custom styling applied. This is something beginners will want. So we are making a trade. Trading the flexibility of being able to have multiple elements in a component in order to get the simplicity keeping the base element API. The compiler can do the wiring.\r\n\r\n```html\r\n<script>\r\n  export let primary\r\n</script>\r\n\r\n<svelte:element\r\n  default='button' \r\n  class:primary\r\n/> \r\n\r\n<style>\r\n  .primary {\r\n    background: brown;\r\n    color: white;\r\n  }\r\n</style>\r\n```\r\n\r\nvs\r\n\r\n```html\r\n<script>\r\n  export let primary\r\n</script>\r\n\r\n<button\r\n  class:primary\r\n  on:*\r\n  {...$$props}\r\n><slot/></button>\r\n\r\n<style>\r\n  .primary {\r\n    background: brown;\r\n    color: white;\r\n  }\r\n</style>\r\n```\r\n\r\nIn the second example `bind:this` is broken `use:action` is broken `bind:value` does not get wired, transitions and animations don't work, we also lose clientWidth etc. The idea is they would just work out of the box for the first example.\r\n\r\nI have written three component libraries in React. Most of this work has been getting the single element components right. I love Svelte because the reactive nature of components removes most of the performance code needed in React. Transitions in Svelte are so much easier too. I am doing all my side projects in Svelte. I'd love to move to Svelte for the next iteration of our companies UI library however the story around wrapping elements and keeping their API makes me hesitate. ","updated_at":"2021-11-16T16:05:56Z","created_at":"2021-10-27T08:35:41Z","creator_user_login":"philholden"}
{"number":6882,"comment_id":"970422425","body":"@Rich-Harris Congratulations on new job. Any thoughts on `<svelte:element>` proposal?\r\n\r\nIs it feasible to make this perform as well as native Svelte elements both in terms of terse compiled output and runtime performance?\r\n ","updated_at":"2021-11-16T16:06:12Z","created_at":"2021-11-16T16:06:12Z","creator_user_login":"philholden"}
{"number":7020,"comment_id":"996158265","body":"Try logging into the REPL, then opening a new tab and saving. Failing that, please post your reproduction from https://github.com/sveltejs/kit/issues/3056#issuecomment-996111992 as an issue comment, because so far I've been unable to reproduce this.","updated_at":"2021-12-16T20:08:15Z","created_at":"2021-12-16T20:08:15Z","creator_user_login":"rmunn"}
{"number":7020,"comment_id":"996165917","body":"Dropdown.svelte:\r\n\r\n```\r\n<script>\r\n  import { onMount } from 'svelte'\r\n  import { fade } from 'svelte/transition'\r\n\r\n  export let id = Math.ceil(Math.random() * 100)\r\n  export let small = false\r\n  export let extraSmall = false\r\n  export let hideValues = false\r\n  export let hideLabels = false\r\n  export let label = 'Label Missing'\r\n  export let value\r\n  export let valueTitle = label\r\n  export let dropdownOptions = []\r\n  export let disabled = false\r\n  export let addSearch = false\r\n  export let searchPlaceholder = '...'\r\n  export let required = false\r\n  export let errors = []\r\n  export let hideErrors = false\r\n  export let locked = false\r\n  export let elseLocked = true\r\n  export let helper = ''\r\n  export let errorHelper = ''\r\n  let defaultIcon = ''\r\n  let hasError = false\r\n\r\n  $: {\r\n    errors.forEach(error => {\r\n      if (error.errorId === id) {\r\n        hasError = true\r\n        if (error.errorMessage) errorHelper = error.errorMessage\r\n      }\r\n    })\r\n  }\r\n\r\n  $: if (!value || Object.keys(value).length === 0) found = false\r\n\r\n  let show = false // menu state\r\n  let found = false\r\n\r\n  let clientHeight = 0\r\n  let filterListText = ''\r\n  let searchInput\r\n\r\n  function setItem (title, newValue, icon) {\r\n    if (!disabled) {\r\n      valueTitle = title\r\n      value = newValue || title\r\n      defaultIcon = icon || ''\r\n      show = false\r\n      found = true\r\n      removeErrors()\r\n    }\r\n  }\r\n\r\n  function removeErrors () {\r\n    let newErrors = []\r\n    errors.forEach(error => {\r\n      if (error.errorId !== id) newErrors.push(error)\r\n    })\r\n    errors = newErrors\r\n    hasError = false\r\n  }\r\n\r\n  function toggle () {\r\n    show = (!disabled && !show)\r\n    if (show && addSearch) {\r\n      setTimeout(() => { if (searchInput) searchInput.focus() }, 10)\r\n    }\r\n    if (!show) filterListText = ''\r\n  }\r\n\r\n  const handleKeyupSearch = (event) => {\r\n    filterListText = event.target.value\r\n    if (event.code === 'Enter') {\r\n      let selectedIndex\r\n      dropdownOptions.forEach((item, index) => {\r\n        if (!selectedIndex && item.title.toLowerCase().includes(filterListText.toLowerCase())) {\r\n          selectedIndex = index\r\n        }\r\n      })\r\n      if (selectedIndex) {\r\n        let selected = dropdownOptions[selectedIndex]\r\n        setItem(selected.title, selected.value || selected.title, selected.icon)\r\n      }\r\n    }\r\n  }\r\n\r\n  let showBottom\r\n  $: {\r\n    showBottom = clientHeight\r\n  }\r\n\r\n  onMount(() => {\r\n    if (dropdownOptions && dropdownOptions.length > 1) {\r\n      dropdownOptions.forEach(item => {\r\n        if (value && item.value === value && valueTitle && item.title === valueTitle) {\r\n          valueTitle = item.title\r\n          value = (typeof item.value !== 'undefined' ? item.value : item.title)\r\n          defaultIcon = item.icon\r\n          found = true\r\n        }\r\n      })\r\n      if (!found) {\r\n        dropdownOptions.forEach(item => {\r\n          if ((item.value === value && value) || (item.title === value && value)) {\r\n            valueTitle = item.title\r\n            value = (typeof item.value !== 'undefined' ? item.value : item.title)\r\n            defaultIcon = item.icon\r\n            found = true\r\n          }\r\n        })\r\n      }\r\n    } else if (dropdownOptions && dropdownOptions.length === 1) {\r\n      valueTitle = dropdownOptions[0].title\r\n      value = (typeof dropdownOptions[0].value !== 'undefined' ? dropdownOptions[0].value : dropdownOptions[0].title)\r\n      defaultIcon = dropdownOptions[0].icon\r\n      found = true\r\n    }\r\n\r\n    const handleEscape = (event) => {\r\n      if (show && event.key === 'Escape') {\r\n        show = false\r\n      }\r\n    }\r\n    // add events when element is added to the DOM\r\n    document.addEventListener('keyup', handleEscape, false)\r\n    // remove events when element is removed from the DOM\r\n    return () => {\r\n      document.removeEventListener('keyup', handleEscape, false)\r\n    }\r\n  })\r\n</script>\r\n\r\n<div>\r\n  {#if !locked}\r\n    <div class=\"relative\">\r\n      {#if !small && label && !hideLabels}\r\n        <label for={id} class=\"input-label\" class:error={hasError}>\r\n          {label} {#if required}<span class=\"text-danger\">*</span>{/if}\r\n        </label>\r\n      {/if}\r\n      <div id={id}>\r\n        <button on:click={() => toggle()} class:open=\"{show}\" class:error={hasError} class:disabled={disabled}\r\n                type=\"button\" class:input-field-sm={small} class:input-field={!small}\r\n                class=\"inline-flex w-full input-primary mt-0 overflow-hidden\" id=\"options-menu\"\r\n                aria-haspopup=\"true\" aria-expanded=\"true\">\r\n          {#if !found}\r\n            <span class=\"pr-6 font-normal text-opacity-50 whitespace-nowrap\" class:text-gray-300={show}\r\n                  class:dark:text-gray-500={show} class:text-gray-500={!show} class:dark:text-gray-700={!show} >{label}...</span>\r\n          {:else}\r\n            <span class=\"pr-6 flex text-gray-800 dark:text-gray-800 whitespace-nowrap\" class:text-sm={extraSmall}>\r\n              {#if defaultIcon}<img src=\"{defaultIcon}\" alt=\"{valueTitle}\" class=\"h-6 w-6 m-auto\">{/if}\r\n              <span class:ml-5={defaultIcon}>{valueTitle} {#if !hideValues && value}({value}){/if}</span>\r\n            </span>\r\n          {/if}\r\n        </button>\r\n      </div>\r\n      {#if show && dropdownOptions.length}\r\n        <div id=\"box-{id}\" transition:fade={{ duration: 150 }} bind:clientHeight={clientHeight} class=\"dropdown-box z-20\"\r\n             class:up={showBottom} role=\"menu\" aria-orientation=\"vertical\"\r\n             aria-labelledby=\"options-menu\">\r\n          <div class=\"py-1 max-h-96 overflow-scroll\" class:text-sm={extraSmall}>\r\n            {#if addSearch}\r\n              <div class=\"dropdown-box-non-item\">\r\n                <input bind:this={searchInput} placeholder=\"{searchPlaceholder}\" on:keyup=\"{handleKeyupSearch}\"\r\n                       class=\"input-field-sm input-primary text-gray-400 dark:text-gray-700 mt-0\">\r\n              </div>\r\n              <div class=\"dropdown-box-divider\"><hr></div>\r\n            {/if}\r\n            {#each dropdownOptions as item}\r\n              {#if item.title}\r\n                {#if !filterListText || item.title.toLowerCase().includes(filterListText.toLowerCase())}\r\n                  {#if item.disabled}\r\n                    <div class=\"flex dropdown-box-item disabled\">\r\n                      {#if item.icon}<img src=\"{item.icon}\" alt=\"{item.title}\" class=\"h-6 w-6 m-auto\">{/if}\r\n                      <span class=\"w-full text-left\" class:ml-5={item.icon} role=\"menuitem\">{item.title} {#if !hideValues && item.value}({item.value}){/if}</span>\r\n                    </div>\r\n                  {:else}\r\n                    <div on:click={() => setItem(item.title, item.value, item.icon)} class=\"flex dropdown-box-item\">\r\n                      {#if item.icon}<img src=\"{item.icon}\" alt=\"{item.title}\" class=\"h-6 w-6 m-auto\">{/if}\r\n                      <span class=\"w-full text-left\" class:ml-5={item.icon} role=\"menuitem\">{item.title} {#if !hideValues && item.value}({item.value}){/if}</span>\r\n                    </div>\r\n                  {/if}\r\n                {/if}\r\n              {/if}\r\n            {/each}\r\n          </div>\r\n        </div>\r\n      {/if}\r\n      {#if helper}<div class=\"input-helper\">{helper}</div>{/if}\r\n      {#if errorHelper && hasError && !hideErrors}<div class=\"input-error-helper\">{errorHelper}</div>{/if}\r\n    </div>\r\n  {:else if elseLocked}\r\n    {#if !small && label && !hideLabels}<label for=\"input-locked\" class=\"input-label\">{label}</label>{/if}\r\n    <div id=\"input-locked\" class=\"input-locked\">\r\n      <span class=\"flex\" class:text-sm={extraSmall}>\r\n        {#if defaultIcon}<img src=\"{defaultIcon}\" alt=\"{valueTitle}\" class=\"h-6 w-6 m-auto\">{/if}\r\n        <span class:ml-5={defaultIcon}>{valueTitle} {#if !hideValues && value}({value}){/if}</span>\r\n      </span>\r\n    </div>\r\n  {/if}\r\n</div>\r\n```\r\n\r\nand App.svelte:\r\n\r\n\r\n```\r\n<script>\r\n\timport Dropdown from './Dropdown.svelte'\r\n\tlet show = 'one';\r\n\tlet options = [{ title: 'one' }, { title:'two'} ]\r\n\t\r\n</script>\r\n\r\n{#if show === 'one'}\r\n\t<Dropdown bind:value={show} dropdownOptions={options} label=\"Show Dropdown\" />\r\n{:else}\r\n\t{#each options as item}\r\n\t\t{#if item.title === show}\r\n\t\t\t{show} | {item}\r\n\t\t{/if}\r\n\t{/each}\r\n{/if}\r\n```","updated_at":"2021-12-16T20:20:18Z","created_at":"2021-12-16T20:20:18Z","creator_user_login":"MarcGodard"}
{"number":7020,"comment_id":"996166806","body":"Please note there are some simplifications to work with REPL, however the above recreated the console log error.","updated_at":"2021-12-16T20:21:42Z","created_at":"2021-12-16T20:21:42Z","creator_user_login":"MarcGodard"}
{"number":6998,"comment_id":"988608029","body":"The REPL looks almost identical to what is being discussed in https://github.com/sveltejs/svelte/issues/6997\r\n\r\nREPL from other issue https://svelte.dev/repl/899d537c364f43fd8d3d0b92e56b7cd0?version=3.44.2 (doesn't work in Firefox either)\r\n\r\nArguably the behavior in Firefox is the _expected_ behavior with a two way `bind:value`","updated_at":"2021-12-08T08:43:01Z","created_at":"2021-12-08T08:40:35Z","creator_user_login":"Prinzhorn"}
{"number":6998,"comment_id":"989042311","body":"@BryIsTheGuy Could you be more specific about the value \"not properly getting set\"? Is the value not getting set at all? Is it getting set, but in a weird way? Something else?","updated_at":"2021-12-08T17:57:09Z","created_at":"2021-12-08T17:57:09Z","creator_user_login":"ITenthusiasm"}
{"number":6998,"comment_id":"989047064","body":"Ah. [Looking at that twitter thread](https://twitter.com/kevmodrome/status/1468248292853272579), though, I do think this might be a separate issue. That's really weird.\r\n\r\nMaybe it's a problem with `action`s in Firefox?","updated_at":"2021-12-08T18:03:37Z","created_at":"2021-12-08T18:03:37Z","creator_user_login":"ITenthusiasm"}
{"number":6998,"comment_id":"989047306","body":"@ITenthusiasm it's identical to your credit card REPL. In Firefox the formatting is not applied, in Chromium it is.\r\n\r\nHere's a video with https://svelte.dev/repl/899d537c364f43fd8d3d0b92e56b7cd0?version=3.44.2\r\n\r\nFirefox\r\n\r\nhttps://user-images.githubusercontent.com/679144/145260130-2aa4aea4-3a07-41f8-9836-098dcd249bf5.mp4\r\n\r\nChromium\r\n\r\nhttps://user-images.githubusercontent.com/679144/145260135-f662ea6d-d9b8-48fb-b473-ff18c857e30e.mp4\r\n","updated_at":"2021-12-08T18:03:55Z","created_at":"2021-12-08T18:03:55Z","creator_user_login":"Prinzhorn"}
{"number":6998,"comment_id":"989054322","body":"@Prinzhorn The problem seems to vanish when `bind:value` is placed _after_ the `action` -- which would be necessary anyway to correctly keep the values in sync anyway. Interesting","updated_at":"2021-12-08T18:13:05Z","created_at":"2021-12-08T18:13:05Z","creator_user_login":"ITenthusiasm"}
{"number":6998,"comment_id":"993255626","body":"Interesting, in Chrome binding value update occurs BEFORE the action updateValue. In Firefox, the binding update takes place AFTER the update from updateValue;\r\nhttps://svelte.dev/repl/dfa6908da7e94317b97a0161e1fd04ee?version=3.44.2\r\nchrome:\r\n![chrome](https://user-images.githubusercontent.com/71869645/145956360-bdbd4f36-8745-4778-a4b0-6e907c14f8a6.png)\r\nfirefox:\r\n![image](https://user-images.githubusercontent.com/71869645/145956442-d8e1c09b-1d87-4512-a79c-ce726b75afa5.png)\r\n\r\nQuick workaround would be to make updateValue async and add `await tick()` before the `node.value = formatCardNumber(node.value);`.\r\nNot sure if this is a good workaround as I am not sure if Svelte checks if a value was changed before making it dirty. If it does, then no harm done in adding the await, if it does mark it as dirty no matter what, then adding the await tick() could trigger an update potentially 3 times in firefox.\r\n\r\nEdit: This looks a lot like competing to update the value. Personally, in my application I defer the value update to using event instead of binding to the value;\r\n`bind:value` is a good great way to add a quick hook for the code to get update based on input events, however, if you have to parse the value to specific format like in this case, I usually go with `on:change={formatValue}` and in there I also validate based on expected format. This allows me to keep user input in the field, but update the value only when it's valid.","updated_at":"2021-12-14T08:19:53Z","created_at":"2021-12-14T08:01:52Z","creator_user_login":"visma-sorinbroscaru"}
{"number":6998,"comment_id":"993575874","body":"@visma-sorinbroscaru Did you read https://github.com/sveltejs/svelte/issues/6998#issuecomment-989054322? I think that should address how to make things consistent, no? :thinking:","updated_at":"2021-12-14T14:06:02Z","created_at":"2021-12-14T14:06:02Z","creator_user_login":"ITenthusiasm"}
{"number":6914,"comment_id":"965054853","body":"Yup, looking at #4179 where this code was originally added, this sounds like a reasonable suggestion. Are there other text-like input `type`s we should also be handling? Or, would it be better to just exclude all of the `type`s that _aren't_ text-like, which might make this a little more future-proof?","updated_at":"2021-11-10T11:48:14Z","created_at":"2021-11-10T11:48:14Z","creator_user_login":"Conduitry"}
{"number":6914,"comment_id":"992813790","body":"I don't have easy access to Safari to test this, but this should be fixed in 3.44.3 thanks to @skippednote ","updated_at":"2021-12-13T19:44:45Z","created_at":"2021-12-13T19:44:45Z","creator_user_login":"Conduitry"}
{"number":6914,"comment_id":"992844782","body":"Unfortunately it doesn't seem to have fixed it, tested with https://svelte.dev/repl/ede78dee46f74e088fcc07241a389363?version=3.44.3.","updated_at":"2021-12-13T20:08:49Z","created_at":"2021-12-13T20:08:49Z","creator_user_login":"layday"}
{"number":6914,"comment_id":"992862849","body":"This seems to be working correctly on `Release 136 (Safari 15.4, WebKit 17613.1.9.2)` (Technical Preview) on my end. Issue in Safari?","updated_at":"2021-12-13T20:26:42Z","created_at":"2021-12-13T20:26:42Z","creator_user_login":"kevmodrome"}
{"number":6914,"comment_id":"992870775","body":"The additional `input.value !== /*foo*/ ctx[0]` condition that I would have expected to see in 3.44.3 isn't present, which means that the change to handle `type=search` (and others) the same way as `type=text` isn't working as intended, which I'd like to dig into, regardless of which versions of Safari this bug affected.\r\n\r\n@kevmodrome Did you see the behaior in 3.44.1, the original version this issue was opened against?","updated_at":"2021-12-13T20:33:01Z","created_at":"2021-12-13T20:33:01Z","creator_user_login":"Conduitry"}
{"number":6914,"comment_id":"992875035","body":"> @kevmodrome Did you see the behaior in 3.44.1, the original version this issue was opened against?\r\n\r\nI've tried in the current version of Safari as well as the TP. In the current version both Svelte 3.44.1 and 3.44.3 are broken. In the TP version they both work correctly.","updated_at":"2021-12-13T20:36:13Z","created_at":"2021-12-13T20:36:13Z","creator_user_login":"kevmodrome"}
{"number":6914,"comment_id":"992889167","body":"Ah! It looks like #6941 just handled the code for one-way binding. And that's all that was originally covered in #3449 and in #4179. So, the two-way binding mentioned here would be a separate issue, which I'd completely missed while looking at this before.\r\n\r\nI'll update the changelog for 3.44.3 so it correctly reflects what that version fixed, but I'm still unclear what specifically is happening in this issue or what can be done about it.","updated_at":"2021-12-13T20:45:39Z","created_at":"2021-12-13T20:45:39Z","creator_user_login":"Conduitry"}
{"number":6914,"comment_id":"1072434888","body":"I can confirm, input type \"search\" and \"tel\" not working properly on iOS 15.2\r\n\r\nLink to repl: https://svelte.dev/repl/f2f27573a86c4940b0749005f3d7233b?version=3.44.3\r\n\r\nhttps://user-images.githubusercontent.com/49361135/159015454-850f5626-aa93-49da-a092-05ef805dd3a6.mp4\r\n\r\n\r\n","updated_at":"2022-03-18T13:55:05Z","created_at":"2022-03-18T13:55:05Z","creator_user_login":"pointmax"}
{"number":6914,"comment_id":"1193959981","body":"Confirmed (again). Still broken on Safari 13 (iOS 13.6.1). This is a really annoying bug :(","updated_at":"2022-07-25T12:02:04Z","created_at":"2022-07-25T12:01:45Z","creator_user_login":"Azarattum"}
{"number":7053,"comment_id":"1001921547","body":"If I understand correctly, you're proposing to be able to read stuff like `export const ssr = true` in `<script context=\"module\">`, without actually executing the component compiled code. I don't think this is desirable/possible, do you have a compiler output code in mind that would work with this?\r\n\r\nI think the better solution overall is to have SvelteKit not actually importing the component at all, but lexes the exports to determine the options. This has its own caveats, like `export const ssr = __SOME_VAR__` not working, but I don't think it's a common pattern.\r\n\r\nRoutify on the other hand tackles this with special comments like `<!-- routify:options bundle=true -->`, which can be analyzed without importing too.","updated_at":"2021-12-28T07:51:25Z","created_at":"2021-12-28T07:51:25Z","creator_user_login":"bluwy"}
{"number":7053,"comment_id":"1002336423","body":"> This has its own caveats, like export const ssr = __SOME_VAR__ not working, but I don't think it's a common pattern.\r\n\r\nThe template uses this pattern to conditionally add a router and hydrate the page.\r\n\r\nHere is an example on how I think it would work:\r\n\r\n\r\n```svelte\r\n<!-- ClientThing.svelte -->\r\n<script>\r\n\texport let name;\r\n</script>\r\n\r\n<span>hello, {name}</span>\r\n```\r\n\r\n```svelte\r\n<!-- index.svelte -->\r\n<script context=\"module\">\r\n\texport const ssr = Math.floor(Math.random() * 2)\r\n</script>\r\n\r\n<script>\r\n\t  import ClientThing from './ClientThing.svelte'\r\n</script>\r\n<ClientThing name=\"user\"/>\r\n```\r\n\r\nThe compiled code currently looks like:\r\n\r\n```js\r\n/* index.svelte generated by Svelte v3.44.3 */\r\nimport { create_ssr_component, validate_component } from \"svelte/internal\";\r\n\r\nimport ClientThing from './ClientThing.svelte';\r\nconst ssr = Math.floor(Math.random() * 2);\r\n\r\nconst Index = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\treturn `${validate_component(ClientThing, \"ClientThing\").$$render($$result, { name: \"user\" }, {}, {})}`;\r\n});\r\n\r\nexport default Index;\r\nexport { ssr };\r\n```\r\n\r\nBut if the option was enabled, the output could look like this:\r\n\r\n```js\r\n\r\nimport { create_ssr_component, validate_component } from \"svelte/internal\";\r\n\r\nconst ssr = Math.floor(Math.random() * 2);\r\n\r\nasync function load_Index() {\r\n  const {default: ClientThing} = await import(\"./ClientThing.svelte\")\r\n  return create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\treturn `${validate_component(ClientThing, \"ClientThing\").$$render($$result, { name: \"user\" }, {}, {})}`;\r\n});\r\n}\r\n\r\nexport default load_Index;\r\nexport { ssr };\r\n```","updated_at":"2021-12-29T13:33:42Z","created_at":"2021-12-29T00:29:33Z","creator_user_login":"JeanJPNM"}
{"number":7053,"comment_id":"1002498823","body":"Thanks for the explanation, I see what you mean now. From a glance, a caveat with this approach is that Svelte is re-writing imports to dynamic imports. This feels like it would open a can of worms. For example, if a dependency has side effects. I'm still not quite convinced that we have to change Svelte to accommodate this syntax though. But I think there are ways to support this at the bundler level, like importing only the `script context=\"module\"` part, or some sort of manifest (though I'm not too familiar where/how SvelteKit reads it). I think it'd be risky to go this way forward, but that's my 2c.","updated_at":"2021-12-29T09:45:20Z","created_at":"2021-12-29T09:45:20Z","creator_user_login":"bluwy"}
{"number":7053,"comment_id":"1008317609","body":"Although the manifest would be easier to implement, it could bring problems because we would be duplicating the module part of each page. And unlike sveltejs/kit#2804 this particular solution would not require additional configuration from the sveltekit users, and would keep the logic scoped inside each page again.\r\n\r\nAlthough I'm not sure as to how to tell if a module should be lazy loaded because:\r\n- Tracking where the imported variables are used can take a significant amount of time to process and may not produce the desired results.\r\n- Using the place of declaration (either `<script>` or `<script context=\"module\">`) could potentially break existing code, since there was no clear distinction between the two before.","updated_at":"2022-01-09T15:23:08Z","created_at":"2022-01-09T15:22:12Z","creator_user_login":"JeanJPNM"}
{"number":7053,"comment_id":"1008349341","body":"What if instead of using a compiler otion, we add a new option to `<svelte:options>` so that each component can individually trigger this behaviour. Like this:\r\n\r\n```svelte\r\n<svelte:options lazy={true}/>\r\n```","updated_at":"2022-01-09T18:23:28Z","created_at":"2022-01-09T18:23:28Z","creator_user_login":"JeanJPNM"}
{"number":7082,"comment_id":"1003139640","body":"If ignoring the portal server-side isn't desirable, [some potential SSR approaches were mentioned](https://github.com/sveltejs/svelte/issues/1133#issuecomment-361026507). I'm not aware of Svelte's internals, but perhaps another solution is the following:\r\n\r\nWhile the HTML to render is being generated server-side, `<svelte:portal />`s could be excluded from the originally rendered HTML. Instead, they'd be added to a separate array/map of sorts that tracks the portals that need to be rendered later. This list would use the `LOCATION` (denoted by `to`) for keys and the physical `CONTENT` for values. Once the HTML is generated, the process would check for any potential portals that need to be resolved. If none are present, the HTML gets sent to the client immediately. If portals are present, the process could loop through each portal and use pattern matching to place portals in the proper location. Then the HTML would get sent to the client.\r\n\r\nFor instance `<svelte:portal to=\"#modals\">` would denote that the HTML string should be searched for the first occurrence of `id=\"modals\"`. The portal's content string could be inserted either right after the opening tag or right before the closing tag.\r\n\r\nIf we're going with the approach of ignoring portals server-side, then we'd just exclude portals from the rendered HTML.","updated_at":"2021-12-30T18:34:11Z","created_at":"2021-12-30T18:34:11Z","creator_user_login":"ITenthusiasm"}
{"number":7082,"comment_id":"1003141233","body":"Related (and potentially related) issues: #3088, #1133, #4237 (becomes obsolete if this feature is addressed), #4036\r\n\r\nOutside `sveltejs/svelte`: romkor/svelte-portal#101","updated_at":"2021-12-30T18:39:18Z","created_at":"2021-12-30T18:39:18Z","creator_user_login":"ITenthusiasm"}
{"number":7082,"comment_id":"1346425114","body":"I solved this issue, this is what I created https://github.com/YeungKC/svelte-portal\r\n\r\nNo dom move\r\nSupport SSR\r\nSupport update\r\n\r\nBut I still think svelte should provide `<portal >`","updated_at":"2022-12-12T12:36:12Z","created_at":"2022-12-12T12:35:15Z","creator_user_login":"YeungKC"}
{"number":7082,"comment_id":"1399078632","body":"> No dom move Support SSR Support update\r\n\r\nNo ability to pass `<slot>` as well (as it uses svelte:component).\r\n\r\nI really hope this feature gets implemented.","updated_at":"2023-01-20T23:41:30Z","created_at":"2023-01-20T23:41:20Z","creator_user_login":"Algoinde"}
{"number":7082,"comment_id":"1429367021","body":"Here is my hack:\r\n```html\r\n<script>\r\nfunction portal(node,{to}){\r\n    const target = document.querySelector(to);\r\n    target&&target.appendChild(node);\r\n    return {}\r\n}\r\n</script>\r\n<div use:portal={{to:'body'}}></div>\r\n```\r\nIt's works.\r\nBut I don't know if it has any side effects.","updated_at":"2023-02-14T09:05:16Z","created_at":"2023-02-14T09:05:16Z","creator_user_login":"Char-Ten"}
{"number":7082,"comment_id":"1495521060","body":"> No ability to pass `<slot>` as well (as it uses svelte:component).\r\n\r\nIf #8067 was implemented, it would be easy to support slots as well.","updated_at":"2023-04-04T08:00:49Z","created_at":"2023-04-04T08:00:49Z","creator_user_login":"divdavem"}
{"number":7082,"comment_id":"1678998892","body":"It's a bit unfortunate to say this given the additional interest shown by the other votes on the OP... But this feature request (and its brothers, such as #4036) may not be valid anymore. As I mentioned previously, I agree with [someone else's statement](https://github.com/sveltejs/svelte/issues/4036#issuecomment-562122592) that the large majority of the use cases for portals are probably Modals. However, now we have the _standardized_ [`dialog`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element. So that defeats the need for portals in many situations.\r\n\r\nThere's perhaps a smaller set of scenarios where portals are needed for other things like popovers. But now we have browsers rushing to support the [Popover API](https://developer.mozilla.org/en-US/docs/Web/API/Popover_API). If this API gets adopted, Svelte may not need to bother with portals at all considering that: A) Popovers will be a part of the native spec and B) We already have an [albeit-undesirable] workaround in Svelte.\r\n\r\nPinging @Conduitry because you commented on #4036 and @pngwn because you've managed the tags on that issue. I just want to make sure that this is a visible consideration. Not sure where Svelte stands on portals at the moment. I'm only leaving this open in case Svelte is interested in supporting portals; otherwise, I might close.\r\n\r\n---\r\n\r\nIf people are aware of other use cases that browsers aren't ultimately intending to support, that might change things... maybe. But for now, it seems like browsers are seeking to give us what we need.","updated_at":"2023-08-15T14:10:01Z","created_at":"2023-08-15T14:10:01Z","creator_user_login":"ITenthusiasm"}
{"number":7037,"comment_id":"1041366138","body":"This is also blocking for me. Is there any response or update? Thanks!","updated_at":"2022-02-16T11:00:24Z","created_at":"2022-02-16T11:00:24Z","creator_user_login":"ssuess"}
{"number":7037,"comment_id":"1087416747","body":"This is still happening as of 3.46.6","updated_at":"2022-04-04T11:05:32Z","created_at":"2022-04-04T11:05:32Z","creator_user_login":"TommasoAmici"}
{"number":7037,"comment_id":"1097568695","body":"We maintain a library of web components made in Svelte, and this issue is blocking an upgrade for us.\r\n\r\nThis issue seems to have been introduced with this PR:  \r\nhttps://github.com/sveltejs/svelte/pull/6073","updated_at":"2022-04-13T05:17:42Z","created_at":"2022-04-13T05:17:42Z","creator_user_login":"abdullahkamran"}
{"number":7037,"comment_id":"1097569860","body":"Is there no fix for this yet?","updated_at":"2022-04-13T05:19:53Z","created_at":"2022-04-13T05:19:53Z","creator_user_login":"ssuess"}
{"number":7037,"comment_id":"1098170795","body":"Is someone able to provide a smaller reproduction for this? The linked repo contains 400+ lines of component code and Storybook, which will make it difficult to pinpoint the issue.\r\n\r\nI doubt it was introduced by #6073, since a) the error is thrown before the line that PR changed and b) that change was released in [3.38.0](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3380), where this issue was introduced with [3.44.3](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3443).","updated_at":"2022-04-13T15:10:12Z","created_at":"2022-04-13T15:10:12Z","creator_user_login":"geoffrich"}
{"number":7037,"comment_id":"1375506340","body":"Any progress on this issue? \r\nAs a workaround I am doing for every array refresh instead of list=list\r\n\r\n        setTimeout(function() {           \r\n            list=list\r\n            },200)  \r\n\r\nin my project. I have this now on many places in my application - makes current Svelte version not very usable to be honest.\r\n","updated_at":"2023-01-09T11:46:40Z","created_at":"2023-01-09T11:46:40Z","creator_user_login":"imperator-maximus"}
{"number":7037,"comment_id":"1375747172","body":"In case this helps anyone we are testing a fix (that has its own issues still) where we replace our repeating component with `<svelte:self >` and it seems promising","updated_at":"2023-01-09T14:57:44Z","created_at":"2023-01-09T14:57:44Z","creator_user_login":"ssuess"}
{"number":7037,"comment_id":"1375839626","body":"@imperator-maximus @ssuess please see my comment above - we need a smaller reproduction to properly investigate this issue.","updated_at":"2023-01-09T15:49:16Z","created_at":"2023-01-09T15:49:16Z","creator_user_login":"geoffrich"}
{"number":7037,"comment_id":"1375841990","body":"I cannot provide one: it seems that this only occurs in very large projects. If projects are smaller I never had such an issue. ","updated_at":"2023-01-09T15:51:05Z","created_at":"2023-01-09T15:51:05Z","creator_user_login":"imperator-maximus"}
{"number":6059,"comment_id":"797813030","body":"I struggle with same issue..\r\nI would welcome that the svelte compiler would mark slots that result in empty markup (or consisting of whitespaces) as 'not provided'.\r\nThus allowing us to write constructs like conditional rendering of slots.","updated_at":"2021-03-12T23:31:36Z","created_at":"2021-03-12T23:31:36Z","creator_user_login":"FilipJakab"}
{"number":6059,"comment_id":"797831152","body":"@TheMaikXX While I struggle with that issue as well, I think that is more related to https://github.com/sveltejs/svelte/issues/5312 where the slot is defined, but rendered empty from a `{#if}` conditional.  This issue is the lack of slot usage with forwarding.\r\n\r\nGiven some thought, both these issues might be solved in the runtime (and not compiler) by using a [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) and watching `childList` changes.  Would be great to be handled by the compiler and `$$slots`, but might be at least a workaround.  I haven't had time to experiment to confirm though...","updated_at":"2021-03-13T00:32:01Z","created_at":"2021-03-13T00:32:01Z","creator_user_login":"techniq"}
{"number":6059,"comment_id":"797842479","body":"> @TheMaikXX While I struggle with that issue as well, I think that is more related to #5312 where the slot is defined, but rendered empty from a `{#if}` conditional. This issue is the lack of slot usage with forwarding.\r\n\r\nI mean something little bit different... Here I created very similar REPL to yours: https://svelte.dev/repl/36e864ce20704538a32a063f77e51981?version=3.35.0\r\nBut it more clearly illustrates what I was talking about.\r\nWhen I inspect the generated HTML:\r\n![image](https://user-images.githubusercontent.com/30082602/111013550-2002ea00-83a0-11eb-8e02-d09d8d8f91e4.png)\r\nThe div `<div class=\"header\"></div>` is empty so the slot `header` must be empty as well. And I think that this case could be handled (at least partially) at compile-time to say something like (from `Child`'s point of view): \"The slot is given to me but it resolved into no content so I will treat it as not provided at all.\"\r\nOr it could be handled by the user if he would have access to the inner content the slots so that the user could check if the slot is not empty..","updated_at":"2021-03-13T01:29:21Z","created_at":"2021-03-13T01:29:21Z","creator_user_login":"FilipJakab"}
{"number":6059,"comment_id":"826016127","body":"> Or it could be handled by the user if he would have access to the inner content the slots so that the user could check if the slot is not empty..\r\n\r\nIf $$slots contained a reference to the passed HtmlElement instead of a simple `true`, you are right that it would be easy to check. And i see many other perks to it. \r\n\r\nBut that would still only be a workaround to fix slot forwarding.","updated_at":"2021-04-24T01:54:06Z","created_at":"2021-04-24T01:54:06Z","creator_user_login":"ecstrema"}
{"number":6059,"comment_id":"937019797","body":"One slight workaround for some use cases is to use [:empty](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty) to apply `display: none` on the block (or `empty:hidden` class for tailwind). [REPL](https://svelte.dev/repl/dbffdd1bc78c4b37ae6341cc198a5814?version=3.43.1)\r\n\r\nThis doesn't solve a lot of other uses cases, and also falls apart if you have any markup within it (basically more than anything but a simple slot).  Even a `{#if false}{/if}` causes a single space to render which breaks `:empty` until [Selectors Level 4](https://drafts.csswg.org/selectors-4/#the-empty-pseudo) is implemented by browsers.","updated_at":"2021-10-06T19:58:26Z","created_at":"2021-10-06T19:58:26Z","creator_user_login":"techniq"}
{"number":6059,"comment_id":"1049183817","body":"> One slight workaround for some use cases is to use [:empty](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty) to apply `display: none` on the block (or `empty:hidden` class for tailwind). [REPL](https://svelte.dev/repl/dbffdd1bc78c4b37ae6341cc198a5814?version=3.43.1)\r\n> \r\n> This doesn't solve a lot of other uses cases, and also falls apart if you have any markup within it (basically more than anything but a simple slot). Even a `{#if false}{/if}` causes a single space to render which breaks `:empty` until [Selectors Level 4](https://drafts.csswg.org/selectors-4/#the-empty-pseudo) is implemented by browsers.\r\n\r\nFormalized this into a helper component if anyone wants to use it, like @techniq said it doesn't help in all situations, but does work for many small ones: https://svelte.dev/repl/70edd01caf664f29885348853aaf59b1?version=3.46.4","updated_at":"2022-02-23T20:26:35Z","created_at":"2022-02-23T20:26:35Z","creator_user_login":"pzuraq"}
{"number":6059,"comment_id":"1119506120","body":"[Conditional Slots](https://github.com/sveltejs/rfcs/pull/64) RFC by @tanhauhau would be able to handle this by checking if the slot is declared\r\n\r\n```svelte\r\n<Field>\r\n   {#if $$slots.label}\r\n\t<slot name=\"label\" slot=\"label\" />\r\n   {/if}\r\n   {#if $$slots.description}\r\n\t<slot name=\"description\" slot=\"description\" />\r\n   {/if}\r\n</Field>\r\n```","updated_at":"2022-05-06T11:13:37Z","created_at":"2022-05-06T11:13:37Z","creator_user_login":"techniq"}
{"number":6127,"comment_id":"807318938","body":"Initial state is correct:\r\n![image](https://user-images.githubusercontent.com/61658/112530905-30ce3b00-8d64-11eb-8faf-52372e66defb.png)\r\nAfter user resize, it is incorrect:\r\n![image](https://user-images.githubusercontent.com/61658/112530942-3b88d000-8d64-11eb-8358-7d3c130378d2.png)\r\n","updated_at":"2021-03-25T19:19:13Z","created_at":"2021-03-25T19:18:43Z","creator_user_login":"colah"}
{"number":6127,"comment_id":"807994790","body":"These are \"Block-level element bindings\", `textarea` is not a [block-level element](https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements). The current implementation cannot work for `textarea`, see:\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4233\r\nhttps://github.com/sveltejs/svelte/pull/5524\r\n\r\nBut I think there should be a warning in this case.\r\n\r\nAs a workaround wrap the element, but I think you are already aware of that https://svelte.dev/repl/9883af1a955148f0a57ca9caefa59e61?version=3.35.0","updated_at":"2021-03-26T07:14:37Z","created_at":"2021-03-26T07:13:36Z","creator_user_login":"Prinzhorn"}
{"number":6127,"comment_id":"808015815","body":"bind:this={node} > node.clientWidth...","updated_at":"2021-03-26T07:54:01Z","created_at":"2021-03-26T07:54:01Z","creator_user_login":"Valexr"}
{"number":6127,"comment_id":"808027364","body":"> bind:this={node} > node.clientWidth...\r\n\r\n@Valexr maybe I misunderstand your comment, but this is not reactive. You'd have to poll it (e.g. using raf) which can be expensive because the browser might have to do layout every single time you access the `clientWidth` property even though the size rarely changes. That's the reason why solutions like [this](http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/) exist in the first place because polling is (usually) expensive.","updated_at":"2021-03-26T08:15:30Z","created_at":"2021-03-26T08:15:30Z","creator_user_login":"Prinzhorn"}
{"number":6127,"comment_id":"808206024","body":"https://svelte.dev/repl/1c7c89b3a80c48708f0f07720fb37a53","updated_at":"2021-03-26T13:15:16Z","created_at":"2021-03-26T13:15:16Z","creator_user_login":"Valexr"}
{"number":6127,"comment_id":"808328839","body":"D'oh, I thought \"block element\" referred to the CSS display property, rather than something else.\r\n\r\nIt would be nice if svelte emitted error messages when a user binds to an element that svelte doesn't support that type of binding to.\r\n","updated_at":"2021-03-26T15:55:21Z","created_at":"2021-03-26T15:55:21Z","creator_user_login":"colah"}
{"number":6127,"comment_id":"869047993","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:35Z","created_at":"2021-06-26T19:04:35Z","creator_user_login":"stale[bot]"}
{"number":6127,"comment_id":"1000920124","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:58Z","created_at":"2021-12-24T19:24:58Z","creator_user_login":"stale[bot]"}
{"number":6016,"comment_id":"830147065","body":"I might not have realized when I submitted them but there is one important concept change to my PR #3308. \r\n> It chooses to call the `bindings` before the `beforeUpdate` and that fixes the issue but that could have many possible side-effects","updated_at":"2021-04-30T14:48:56Z","created_at":"2021-04-30T14:48:28Z","creator_user_login":"deviprsd"}
{"number":6016,"comment_id":"942307334","body":"It happened because of the update call on the dirty component from schedulers i.e. when variable bind to the this, svelte mark it as a dirty and call the scheduler update\r\n\r\n```\r\nfunction update($$) {\r\n\tif ($$.fragment !== null) {\r\n\t\t$$.update();\r\n\t\trun_all($$.before_update);\r\n\t\tconst dirty = $$.dirty;\r\n\t\t$$.dirty = [-1];\r\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\r\n\r\n\t\t$$.after_update.forEach(add_render_callback);\r\n\t}\r\n}\r\n```\r\nIn the above before_update gets called again and the same will happen if there are any reactive statements.\r\nSince I don't know the reason for calling the before update again, so I will be trying to dig deep into this issue and propose some initial solution.","updated_at":"2021-10-13T13:31:01Z","created_at":"2021-10-13T13:27:01Z","creator_user_login":"RaiVaibhav"}
{"number":6016,"comment_id":"1112598704","body":"The issue still exists. Tested on Svelte 3.47.0.","updated_at":"2022-04-28T19:54:25Z","created_at":"2022-04-28T19:54:25Z","creator_user_login":"mihaon"}
{"number":6016,"comment_id":"1286587268","body":"The issue still exists in Svelte 3.52.0.","updated_at":"2022-10-21T07:45:47Z","created_at":"2022-10-21T07:45:47Z","creator_user_login":"claudiofelber"}
{"number":6016,"comment_id":"1365519710","body":"Issue still exists in Svelte 3.55. Quick and hacky work-around by checking if the variable to store reference has been set:\r\n\r\nhttps://svelte.dev/repl/28d44e6712604fe0b52c632e313f2359?version=3.55.0\r\n\r\n```\r\n<script>\r\n  import { beforeUpdate, afterUpdate } from 'svelte';\r\n  let p, count = 0;\r\n\r\n  let skipNextUpdate = false;\r\n  beforeUpdate(() => {\r\n    if (!skipNextUpdate) {\r\n      // Do beforeUpdate logic here.\r\n      console.log(\"beforeUpdate\");\r\n    }\r\n    skipNextUpdate = !p;\r\n  })\r\n\r\n  afterUpdate(() => {\r\n    console.log(\"afterUpdate\");\r\n  })\r\n</script>\r\n\r\n<p bind:this={p}>{count}</p>\r\n<button on:click={() => count++}>Counter Up!</button>\r\n```","updated_at":"2022-12-27T00:25:55Z","created_at":"2022-12-27T00:24:12Z","creator_user_login":"larbear"}
{"number":6016,"comment_id":"1605255759","body":"This issue still exists 4.0.0.","updated_at":"2023-06-24T04:06:23Z","created_at":"2023-06-24T04:06:23Z","creator_user_login":"larbear"}
{"number":6341,"comment_id":"843241800","body":"One way I could deal with it, is removing the bind syntax and later iterate over the childNodes of table to gather the values the user wrote, this comes with performance drawbacks and maintainability, besides the great svelte's bind syntax works well in other components outside of each blocks; but is the only solution i found to still be using svelte template syntax, another would be creating the rows with just JS, but avoiding the great boundaries of Svelte üòû ","updated_at":"2021-05-18T14:54:42Z","created_at":"2021-05-18T14:54:42Z","creator_user_login":"moisesGarmendia"}
{"number":6341,"comment_id":"843328780","body":"Even when the error still persist, I made a component for the <tr></tr> part, and completely works!\r\nhttps://svelte.dev/repl/ca483a22730540428be0dae26a1740af?version=3.38.2\r\nThanks for taking the time to read this, i will not close the issue since i think that should be possible to work directly with the bind syntax, but if this is an issue that will be not tackled since there is a workaround, it is good for me, hope some devs find this helpfull in its journey of using Svelte! thanks @Rich-Harris and all Svelte team for such an amazing frameworkless framework ü•á ","updated_at":"2021-05-18T16:56:49Z","created_at":"2021-05-18T16:31:56Z","creator_user_login":"moisesGarmendia"}
{"number":6341,"comment_id":"844925403","body":"To me this is definitely a (one-off) bug in the `#each` implementation. It tries to access the `each_value` with an index of `1`, but the there's only a single element in it.\r\n\r\n![Selection_894](https://user-images.githubusercontent.com/679144/118957065-7a9c6180-b960-11eb-8653-7ef3f71d51be.png)\r\n","updated_at":"2021-05-20T09:46:07Z","created_at":"2021-05-20T09:46:07Z","creator_user_login":"Prinzhorn"}
{"number":6341,"comment_id":"845106579","body":"> To me this is definitely a (one-off) bug in the `#each` implementation. It tries to access the `each_value` with an index of `1`, but the there's only a single element in it.\r\n\r\nLooks like it is not passing the last element of the array, cause even does not work with multiple rows üòü, can we call it a lazy assignment?, it adds to the DOM accordingly, but JS says there's unknown thing at that position; when values are reassigned in previous fields, the last element gets added to the `#each` in a way it does not throw any error.\r\n\r\nAnyway, making a component of the `<tr></tr>` part solved my needs.","updated_at":"2021-05-20T13:10:41Z","created_at":"2021-05-20T13:10:41Z","creator_user_login":"moisesGarmendia"}
{"number":6341,"comment_id":"961693976","body":"Any update on a fix? Running into this currently\r\n","updated_at":"2021-11-05T08:00:29Z","created_at":"2021-11-05T08:00:29Z","creator_user_login":"AydanGaite"}
{"number":6341,"comment_id":"961886722","body":"Hey @ka1to1, try wrapping the logic of the iteration member and pass it what needs (index, data, etc...)","updated_at":"2021-11-05T13:16:20Z","created_at":"2021-11-05T13:16:20Z","creator_user_login":"moisesGarmendia"}
{"number":5156,"comment_id":"660115936","body":"I do have the same problem on the last svelte version using inputs from https://github.com/matyunya/smelte.\r\nVersion 3.24.0 erase input content when blurring the field.\r\nVersion 3.23.2 works just fine.","updated_at":"2020-07-17T13:46:01Z","created_at":"2020-07-17T13:46:01Z","creator_user_login":"ticruz38"}
{"number":5156,"comment_id":"660119313","body":"I can reproduce this issue with version 3.23.2 as well: https://svelte.dev/repl/4080ea1bee0249fba011f3f25707dbd8?version=3.23.2","updated_at":"2020-07-17T13:53:05Z","created_at":"2020-07-17T13:53:05Z","creator_user_login":"lukasmoellerch"}
{"number":5156,"comment_id":"696096728","body":"Hello, I have the same issue on latest version 3.25 as well : https://svelte.dev/repl/ea825f47db4e44b1b29864ebe2f61e34?version=3.25.1\r\n\r\nWhen using a simple string it works as expected but using an object will trigger reactivity on the object and not only its property.","updated_at":"2020-09-21T12:58:11Z","created_at":"2020-09-21T12:58:11Z","creator_user_login":"Vaxarm"}
{"number":5156,"comment_id":"1278061440","body":"Here is another example that triggers this behaviour:\r\nhttps://svelte.dev/repl/257464acef204b68a2c2ae77d56db5f5?version=3.51.0","updated_at":"2022-10-13T19:09:14Z","created_at":"2022-10-13T19:09:14Z","creator_user_login":"ivanhofer"}
{"number":5296,"comment_id":"1000889553","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:40Z","created_at":"2021-12-24T16:15:40Z","creator_user_login":"stale[bot]"}
{"number":5110,"comment_id":"655778857","body":"After playing around I've realised I can avoid this issue if I wrap my style blocks in a div or span. This should work for most cases and to be safe I can apply a style of `display=\"none\"` to the wrapper spans.","updated_at":"2020-07-08T21:56:28Z","created_at":"2020-07-08T21:56:28Z","creator_user_login":"gavinmcfarland"}
{"number":5110,"comment_id":"1000889529","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:34Z","created_at":"2021-12-24T16:15:34Z","creator_user_login":"stale[bot]"}
{"number":9130,"comment_id":"1686207558","body":"Please provide a proper reproduction. You code snippets are missing some code or contain bugs - for example, where is `iconType` coming from?","updated_at":"2023-08-21T12:07:42Z","created_at":"2023-08-21T12:07:42Z","creator_user_login":"dummdidumm"}
{"number":9130,"comment_id":"1686212330","body":"> Please provide a proper reproduction. You code snippets are missing some code or contain bugs - for example, where is `iconType` coming from?\r\n\r\nUpdated with iconType exported","updated_at":"2023-08-21T12:11:09Z","created_at":"2023-08-21T12:11:09Z","creator_user_login":"arkmech"}
{"number":9130,"comment_id":"1687357647","body":"> Please provide a proper reproduction. You code snippets are missing some code or contain bugs - for example, where is `iconType` coming from?\r\n\r\nReproduction https://github.com/arkmech/svelte-discriminating-union","updated_at":"2023-08-22T03:23:43Z","created_at":"2023-08-22T03:23:43Z","creator_user_login":"arkmech"}
{"number":9130,"comment_id":"1687380399","body":"This is something React has that Svelte does not","updated_at":"2023-08-22T04:00:28Z","created_at":"2023-08-22T04:00:28Z","creator_user_login":"TomDo1234"}
{"number":9130,"comment_id":"1688376423","body":"> > Please provide a proper reproduction. You code snippets are missing some code or contain bugs - for example, where is `iconType` coming from?\r\n> \r\n> Reproduction https://github.com/arkmech/svelte-discriminating-union\r\n\r\nNot sure if solves all the issues but this works.\r\n\r\n```ts\r\n<script context=\"module\" lang=\"ts\">\r\n\ttype Props = {\r\n\t\tname: string;\r\n\t} & (\r\n\t\t| { color?: 'red' }\r\n\t\t| {\r\n\t\t\t\tcolor: 'green';\r\n\t\t\t\tuniqueProp?: string;\r\n\t\t  }\r\n\t);\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n\ttype $$Props = Props;\r\n\tconst props = $$props as $$Props;\r\n</script>\r\n\r\n<div>{props.name}</div>\r\n{#if props.color === 'red'}\r\n\t<div>Red</div>\r\n{:else if props.color === 'green'}\r\n\t<div>Green</div>\r\n\t<div>{props.uniqueProp}</div>\r\n{/if}\r\n\r\n```","updated_at":"2023-08-22T15:06:45Z","created_at":"2023-08-22T15:06:45Z","creator_user_login":"amit13k"}
{"number":9130,"comment_id":"1688468005","body":"IMO it's already easy to use discriminated unions in Svelte, here's an example (imagine a blog admin page, needing to show the content for a URL, which could be a file download, an article page, or a redirect to another URL):\r\n\r\n```html\r\n<script lang=\"ts\">\r\n  import type { Content } from '$lib/models'\r\n  import ContentDownload from './ContentDownload.svelte'\r\n  import ContentPage from './ContentPage.svelte'\r\n  import ContentRedirect from './ContentRedirect.svelte'\r\n  import ContentUnknown from './ContentUnknown.svelte'\r\n\r\n  export let content: Content\r\n\r\n  function component(content: Content) {\r\n    switch (content.type) {\r\n      case 'Page':\r\n        return ContentPage\r\n      case 'Redirect':\r\n        return ContentRedirect\r\n      case 'Download':\r\n        return ContentDownload\r\n      default:\r\n        return ContentUnknown\r\n    }\r\n  }\r\n</script>\r\n\r\n<svelte:component this={component(content)} {content} />\r\n```\r\n\r\nEach type-specific component gets the strongly typed content to do whatever it needs with it.","updated_at":"2023-08-22T15:48:48Z","created_at":"2023-08-22T15:47:09Z","creator_user_login":"CaptainCodeman"}
{"number":9130,"comment_id":"1689095380","body":"> IMO it's already easy to use discriminated unions in Svelte, here's an example (imagine a blog admin page, needing to show the content for a URL, which could be a file download, an article page, or a redirect to another URL):\r\n> \r\n> ```\r\n> <script lang=\"ts\">\r\n>   import type { Content } from '$lib/models'\r\n>   import ContentDownload from './ContentDownload.svelte'\r\n>   import ContentPage from './ContentPage.svelte'\r\n>   import ContentRedirect from './ContentRedirect.svelte'\r\n>   import ContentUnknown from './ContentUnknown.svelte'\r\n> \r\n>   export let content: Content\r\n> \r\n>   function component(content: Content) {\r\n>     switch (content.type) {\r\n>       case 'Page':\r\n>         return ContentPage\r\n>       case 'Redirect':\r\n>         return ContentRedirect\r\n>       case 'Download':\r\n>         return ContentDownload\r\n>       default:\r\n>         return ContentUnknown\r\n>     }\r\n>   }\r\n> </script>\r\n> \r\n> <svelte:component this={component(content)} {content} />\r\n> ```\r\n> \r\n> Each type-specific component gets the strongly typed content to do whatever it needs with it.\r\n\r\nYes but what we mean is type discrimination on \"top level\", not \"Make every prop and wrap it into an object prop, then type discriminate that\"","updated_at":"2023-08-23T00:35:25Z","created_at":"2023-08-23T00:35:25Z","creator_user_login":"TomDo1234"}
{"number":9130,"comment_id":"1689096038","body":"> > > Please provide a proper reproduction. You code snippets are missing some code or contain bugs - for example, where is `iconType` coming from?\r\n> > \r\n> > \r\n> > Reproduction https://github.com/arkmech/svelte-discriminating-union\r\n> \r\n> Not sure if solves all the issues but this works.\r\n> \r\n> ```ts\r\n> <script context=\"module\" lang=\"ts\">\r\n> \ttype Props = {\r\n> \t\tname: string;\r\n> \t} & (\r\n> \t\t| { color?: 'red' }\r\n> \t\t| {\r\n> \t\t\t\tcolor: 'green';\r\n> \t\t\t\tuniqueProp?: string;\r\n> \t\t  }\r\n> \t);\r\n> </script>\r\n> \r\n> <script lang=\"ts\">\r\n> \ttype $$Props = Props;\r\n> \tconst props = $$props as $$Props;\r\n> </script>\r\n> \r\n> <div>{props.name}</div>\r\n> {#if props.color === 'red'}\r\n> \t<div>Red</div>\r\n> {:else if props.color === 'green'}\r\n> \t<div>Green</div>\r\n> \t<div>{props.uniqueProp}</div>\r\n> {/if}\r\n> ```\r\n\r\nYes that \"works\" but you get type linting when you actually use the component and put props on it on the parent component.","updated_at":"2023-08-23T00:36:25Z","created_at":"2023-08-23T00:36:25Z","creator_user_login":"TomDo1234"}
{"number":9130,"comment_id":"1689820812","body":"> Yes that \"works\" but you get type linting when you actually use the component and put props on it on the parent component.\r\n\r\nHmm, are you saying type linting doesn't work when using this component ?. You do get type errors when you use the component. Here is a REPL example, https://www.sveltelab.dev/0ds6ozd652e1o1e","updated_at":"2023-08-23T11:50:34Z","created_at":"2023-08-23T11:50:14Z","creator_user_login":"amit13k"}
{"number":9130,"comment_id":"1689929088","body":"> Yes but what we mean is type discrimination on \"top level\", not \"Make every prop and wrap it into an object prop, then type discriminate that\"\r\n\r\nFor what purpose? If you're using Typescript discriminated types in a project wouldn't it make more sense to ... well, _use_ them? Why start splitting apart the props to pass them separately when you more than likely already have everything as an object anyway (the whole point of discriminated unions). Why wouldn't you pass that object?\r\n\r\nAnd if you \"must\" do it in a single component, you can add a little type casting to get the props:\r\n\r\n```html\r\n<script lang=\"ts\" context=\"module\">\r\n  type NetworkLoadingState = {\r\n    state: \"loading\";\r\n  };\r\n\r\n  type NetworkFailedState = {\r\n    state: \"failed\";\r\n    code: number;\r\n  };\r\n\r\n  type NetworkSuccessState = {\r\n    state: \"success\";\r\n    response: {\r\n      title: string;\r\n      duration: number;\r\n      summary: string;\r\n    };\r\n  };\r\n\r\n  // Create a type which represents only one of the above types\r\n  // but you aren't sure which it is yet.\r\n  type NetworkState =\r\n    | NetworkLoadingState\r\n    | NetworkFailedState\r\n    | NetworkSuccessState;\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n  export let value: NetworkState\r\n\r\n  const asLoading = (value: NetworkState) => value as NetworkLoadingState\r\n  const asFailed = (value: NetworkState) => value as NetworkFailedState\r\n  const asSuccess = (value: NetworkState) => value as NetworkSuccessState\r\n</script>\r\n\r\n{#if value.state === 'loading'}\r\n  {@const loading = asLoading(value)}\r\n  {loading.state}\r\n{/if}\r\n\r\n{#if value.state === 'failed'}\r\n  {@const failed = asFailed(value)}\r\n  {failed.state}\r\n  {failed.code}\r\n{/if}\r\n\r\n{#if value.state === 'success'}\r\n  {@const success = asSuccess(value)}\r\n  {success.state}\r\n  {success.response.title}\r\n  {success.response.duration}\r\n  {success.response.summary}\r\n{/if}\r\n```","updated_at":"2023-08-23T13:04:51Z","created_at":"2023-08-23T13:04:51Z","creator_user_login":"CaptainCodeman"}
{"number":9130,"comment_id":"1689962015","body":"Using a more straight forward example, to make the issue clearer, and echoing other comments.\r\n\r\nIf you need to type $$Props directly like this, so that the components props can vary, it is most probably a good idea to then just use $$props. You get full typescript safety from within and outside your component this way:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\ttype Circle = { shape: 'circle'; radius: number };\r\n\ttype Rectangle = { shape: 'rectangle'; width: number; height: number };\r\n\ttype $$Props = Circle | Rectangle;\r\n\r\n\t$:props = $$props as $$Props;\r\n</script>\r\n\r\n{#if props.shape===\"circle\"}\r\n\t<div>Circle, radius = {props.radius}</div>\r\n{:else}\r\n\t<div>Rectangle, width = {props.width}, height = {props.height}</div>\r\n{/if}\r\n```\r\n\r\nThe only issue, is that it would be better ergonomics if $$props was already typed to $$Props, so that you could simply use $$props directly, and avoid having to write the props^3 line:\r\n```svelte\r\n\t$:props = $$props as $$Props;\r\n```","updated_at":"2023-08-23T13:25:17Z","created_at":"2023-08-23T13:25:17Z","creator_user_login":"robertadamsonsmith"}
{"number":9130,"comment_id":"1693990366","body":"Thank you everyone that has responded so far.\r\nIt seems that this is the key:\r\n`props = $$props as $$Props;`\r\n\r\nExternal Component API works\r\nInternal - No Errors.\r\n\r\nWhen accessing properties on `props`, there is no TS intellisense. Let me know if anyone else gets no intellisense on `props`","updated_at":"2023-08-25T22:19:25Z","created_at":"2023-08-25T22:19:10Z","creator_user_login":"arkmech"}
{"number":9130,"comment_id":"1694521555","body":"Using a regular sveltekit project with typescript enabled, and visual studio code with the svelte for vs code extension, you should get full intellisense internally\r\n\r\n![props3](https://github.com/sveltejs/svelte/assets/1746701/2377a5e5-1e32-4e51-a1c2-ccf63b22bc17)\r\n\r\nand externally\r\n\r\n![props3-2](https://github.com/sveltejs/svelte/assets/1746701/41a93878-eab2-4d54-9436-c3148a224811)\r\n","updated_at":"2023-08-26T23:24:52Z","created_at":"2023-08-26T23:24:52Z","creator_user_login":"robertadamsonsmith"}
{"number":9130,"comment_id":"1694720968","body":"Also note that, for the intellisense to work, the `{#if}` block should already have `{/if}.` Also `{props. ` without closing } won't work for intellisense. ","updated_at":"2023-08-27T17:29:41Z","created_at":"2023-08-27T17:29:41Z","creator_user_login":"amit13k"}
{"number":8923,"comment_id":"1623244117","body":"We're following Prettier's code style here which also does this. Where is that HTML output from, server side rendering with Svelte? In that case I think it would be better to adjust Svelte core to not do this.","updated_at":"2023-07-06T07:04:58Z","created_at":"2023-07-06T07:04:58Z","creator_user_login":"dummdidumm"}
{"number":8923,"comment_id":"1623244124","body":"I see it within the head of my app.html and between <svelte:head> elements on my main +layout.svelte. All my routes are prerendered, if that helps. (I haven't inspected any body html elements.)","updated_at":"2023-07-06T07:47:45Z","created_at":"2023-07-06T07:47:03Z","creator_user_login":"jasongitmail"}
{"number":8923,"comment_id":"1623787583","body":"It is a bit strange that [W3C validator](https://validator.w3.org/) complains about that since `interacts badly with unquoted attribute values` is only true if the `/` is next to the attribute which is never the case with Prettier formatting. After that it's just `Trailing slash on void elements has no effect` which is true I guess, not sure why the validator feels that I need to know that.","updated_at":"2023-07-06T14:30:46Z","created_at":"2023-07-06T14:30:46Z","creator_user_login":"henrikvilhelmberglund"}
{"number":8923,"comment_id":"1625703823","body":"This was on HN yesterday: https://news.ycombinator.com/item?id=36615691","updated_at":"2023-07-07T17:10:09Z","created_at":"2023-07-07T17:10:09Z","creator_user_login":"hanszoons"}
{"number":8923,"comment_id":"1626354277","body":"From the post:\r\n> I think it's a confusing relic from a time past, and I don't think tools like Prettier should be pushing it.  ... I respect Prettier's \"our way or the highway\" approach, but I don't think it's consistent here.\r\n\r\n+1 thanks for sharing\r\n\r\n","updated_at":"2023-07-07T23:20:08Z","created_at":"2023-07-07T23:20:08Z","creator_user_login":"jasongitmail"}
{"number":8923,"comment_id":"1626969303","body":"@jasongitmail Can you provide the source that produces these tags? It doesn't output the slash for me if I try to ssr `<svelte:head><link rel=\"alternate\" href=\"/\" type=\"application/atom+xml\" /></svelte:head>`. \r\n\r\nThe first two warnings come from the kit templates which should be trivial to change.","updated_at":"2023-07-08T09:24:09Z","created_at":"2023-07-08T09:24:09Z","creator_user_login":"gtm-nayan"}
{"number":8923,"comment_id":"1627391859","body":"@gtm-nayan I'm prerendering, not using SSR. That might be the difference there. This is Prettier related and Prettier wouldn't run on SSR-generated HTML.  The code repro is to use any similar line from the screenshot in \r\n`<svelte:head></svelte:head>` within a site's main `+layout.svelte` and `export const prerender = true;` in a sibling `+layout.js` in my case.\r\n\r\n\r\n","updated_at":"2023-07-08T16:15:10Z","created_at":"2023-07-08T16:15:10Z","creator_user_login":"jasongitmail"}
{"number":8923,"comment_id":"1627396087","body":"I also tried it on a prerendered page and it still didn't insert the slash. Are you using `@html` there anywhere or inserting the link tag in the app.html or in transformPageChunk?","updated_at":"2023-07-08T16:38:43Z","created_at":"2023-07-08T16:36:43Z","creator_user_login":"gtm-nayan"}
{"number":8923,"comment_id":"1627447093","body":"@gtm-nayan No, I'm not. This is about the prettier config, not the output, so you can see what we're talking about in the editor.  On Stackblitz, you can repro with:\r\n1. Create a new SK project--click this [Stackblitz](https://node.new/sveltekit). Notice the self closing tags in `app.html`.\r\n2. In `src/routes/+layout.svelte`, add the following and save: \r\n```\r\n<svelte:head>\r\n\t<meta name=\"description\" content=\"Foo bar\" /> <!-- intentionally added slash -->\r\n\t<link rel=\"canonical\" href=\"https://example.com\" > <!-- intentionally no slash -->\r\n</svelte:head>\r\n```\r\n4. Stackblitz doesn't format on save, so run `npm run format`. Inspect both `+layout.svelte` and `app.html` and you'll see Prettier keeps any existing closing `/`, in our link and meta elements in this case, and adds it where we intentionally left it out.\r\n\r\nThis demonstrates what Prettier is doing for both .html and .svelte files.\r\n\r\n___\r\n\r\nIt's not necessary to build it to see what Prettier is doing. But as a side note, if you're looking at browser's Elements tab in dev console, you're not looking at the HTML string sent over the wire. The Elements tab shows _parsed_ HTML based on the doc type, and for SK's HTML5 doc type will remove the self close on items we're talking about because it's not supposed to exist. But, visit your SK website in Chrome and hit \"command+option+u\" (Mac) and you can see the HTML sent over the wire, including the trailing slashes added by Prettier.  \r\n\r\n","updated_at":"2023-07-08T17:58:05Z","created_at":"2023-07-08T17:57:16Z","creator_user_login":"jasongitmail"}
{"number":8923,"comment_id":"1627573616","body":"Hmm, I thought the warnings were for the HTML in the prerendered HTML files. Prettier shouldn't have any effect on those. Do you have a link to the page where this occurs?","updated_at":"2023-07-09T02:12:08Z","created_at":"2023-07-09T02:12:08Z","creator_user_login":"gtm-nayan"}
{"number":8481,"comment_id":"1503487107","body":"I don't know that there's a particular behavior here that's objectively better than the other. We've never defined what the behavior should be in this case. I'm sure there's someone out there relying (perhaps inadvertently) on the scoping class being at the end, and moving this would be a breaking change for them.","updated_at":"2023-04-11T14:34:21Z","created_at":"2023-04-11T14:34:21Z","creator_user_login":"Conduitry"}
{"number":8481,"comment_id":"1503494485","body":"I think this is super important!\r\n\r\nAs you can see if I need to use a class when I use the custom component Svelte gets in the way and won't let me.\r\n\r\nI think maybe an option might fit in `svelte.config`, like: \"style_class_first: true\".","updated_at":"2023-04-11T14:38:10Z","created_at":"2023-04-11T14:38:10Z","creator_user_login":"frederikhors"}
{"number":8481,"comment_id":"1503560706","body":"It works if you wrap the element with a div.\r\n\r\n```html\r\n<script>\r\n\timport Button from \"./Button.svelte\"\r\n</script>\r\n\r\n<Button>\r\n\tHello!\r\n</Button>\r\n\r\n<br><br>\r\n\r\n<div>\r\n\t<Button class=\"hidden\">\r\n\t\tHello!\r\n\t</Button>\r\n</div>\r\n\r\n<style>\r\n\tdiv :global(.hidden) {\r\n\t\tdisplay: none;\r\n\t}\r\n</style>\r\n```","updated_at":"2023-04-11T15:06:04Z","created_at":"2023-04-11T15:06:04Z","creator_user_login":"khromov"}
{"number":8481,"comment_id":"1503575742","body":"What I'm asking about is not how to fix this but if it's right that Svelte put the generated svelte class at the end of the class list without a way to override it.","updated_at":"2023-04-11T15:11:48Z","created_at":"2023-04-11T15:11:48Z","creator_user_login":"frederikhors"}
{"number":8481,"comment_id":"1503604879","body":"@frederikhors Classes are scoped to the component, so what you are doing is not supported and also problematic, because you just added a global style that *any* `button`  with a class `hidden` will be affected by your change. In my example, the class will still only be scoped to the component and this is imho the far superior way. Svelte should not encourage hacks that tell users to write `:global()` declarations that bleed into other components.","updated_at":"2023-04-11T15:24:15Z","created_at":"2023-04-11T15:23:12Z","creator_user_login":"khromov"}
{"number":8481,"comment_id":"1503614352","body":"I used the global because I'm simulating a css with global classes like Tailwind. Just for this REPL.","updated_at":"2023-04-11T15:28:20Z","created_at":"2023-04-11T15:28:20Z","creator_user_login":"frederikhors"}
{"number":8481,"comment_id":"1503620019","body":"Somewhat relevant comment https://github.com/sveltejs/svelte/issues/8208#issuecomment-1397546117\r\n\r\nI think relying on the order of the classes to make a combination of global and scoped styles work together is pretty fragile and as @Conduitry said an argument can be made in either direction. You could argue that the current way is correct, because scoped styles are more relevant/specific than global ones. Imagine you had a global \".btn\" class and would then use scoped styles to refine your button component. Now you would rely on the `btn svelte-foo` order or else you couldn't override them in your component. A global compiler option wouldn't improve this situation at all.\r\n\r\nI personally would use a `hidden` prop on the button and give all the responsibility to the button component.","updated_at":"2023-04-11T15:31:04Z","created_at":"2023-04-11T15:31:04Z","creator_user_login":"Prinzhorn"}
{"number":8481,"comment_id":"1503637448","body":"Thanks @Prinzhorn.\r\n\r\nIn that case I would like to have something like: `btn svelte-foo my-override-class`.","updated_at":"2023-04-11T15:41:36Z","created_at":"2023-04-11T15:41:36Z","creator_user_login":"frederikhors"}
{"number":8481,"comment_id":"1503638085","body":"In general, I would like to be free to use the css class behavior.","updated_at":"2023-04-11T15:42:02Z","created_at":"2023-04-11T15:42:02Z","creator_user_login":"frederikhors"}
{"number":8481,"comment_id":"1504790612","body":"The scoped component-level css overwrites the global css. This sounds familiar and expected to me. Programming works like that. The inner scope overwrites the outer scope:\r\n\r\n```js\r\nlet age = 23;\r\n\r\nfunction() {\r\n  let age = 42;\r\n  console.log(age) // 42 because the function scope overwrites the global scope.\r\n}\r\n```\r\nSo I would not change this behavior. Instead try to rely on solutions which do not include overwriting styles. Like this:\r\nhttps://svelte.dev/repl/98620e5379054aba9032b88a46aa465e?version=3.58.0","updated_at":"2023-04-12T07:21:57Z","created_at":"2023-04-12T07:21:57Z","creator_user_login":"KevsRepos"}
{"number":8469,"comment_id":"1518612996","body":"This would not work in a normal js/ts file:\r\n\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = reactive<number>((set) => {\r\n  set($numerator / $denominator);\r\n});\r\n```","updated_at":"2023-04-22T11:27:06Z","created_at":"2023-04-22T11:27:06Z","creator_user_login":"MathiasWP"}
{"number":8469,"comment_id":"1519613809","body":"Hmm. Would it be possible within a module block?\r\n\r\n```svelte\r\n<script lang=\"ts\" context=\"module\">\r\n  const numerator = writable<number>(1);\r\n  const denominator = writable<number>(1);\r\n  const fraction = reactive<number>((set) => {\r\n    set($numerator / $denominator);\r\n  });\r\n</script>\r\n```","updated_at":"2023-04-24T08:24:12Z","created_at":"2023-04-24T08:24:12Z","creator_user_login":"oodavid"}
{"number":8469,"comment_id":"1519912487","body":"The stores inside Svelte are just normal JS.\r\nThe reason we have \"magic\" in Svelte files is that the Svelte compiler only parses Svelte files.\r\nWe probably don't want \"magic\" to happen in normal JS files.","updated_at":"2023-04-24T11:01:15Z","created_at":"2023-04-24T11:01:15Z","creator_user_login":"ivands"}
{"number":8469,"comment_id":"1528688696","body":"@ivands could it be made to work within a `.svelte` module script block?","updated_at":"2023-04-29T06:34:38Z","created_at":"2023-04-29T06:34:38Z","creator_user_login":"oodavid"}
{"number":8469,"comment_id":"1535274396","body":"I don't understand how\r\n\r\n> (with added types, to show verbosity)\r\n\r\nshould be a valid part of the argument. If you are specifically looking for dependency \"magic\", isn't asserting every type manually to illustrate your case somewhat dishonest to what you are striving for?\r\n\r\nAs mentioned by others, I dont think it's a good path to leak svelte-specific magic, such as auto subscription, out of reactive blocks in `svelte` files into `js` files or into non-reactive `context=module` scripts. (Although I can agree that component-level module scripts being reactive without requiring stores could be a nice feat, but probably can't due to how svelte handles reactivity)\r\n\r\nI would also note that this is barely more verbose than the proposed syntax and provides the same adequate typing as expected:\r\n\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = derived([numerator, denominator], ([n, d]) => n / d);\r\n```","updated_at":"2023-05-04T19:11:08Z","created_at":"2023-05-04T19:10:47Z","creator_user_login":"iolyd"}
{"number":8469,"comment_id":"1536667191","body":"I think my emphasis on typing is maybe a red-herring. I prefer to assert in that way, maybe it's a bad habit?\r\n\r\nThe additional issue that I want to highlight is that the dependencies-to-arguments map is prone to human error. If you have a derived store with the same types being used, naming your arguments incorrectly will cause issues in the code. Spot the error:\r\n\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = derived([numerator, denominator], ([d, n]) => n / d);\r\n```\r\n\r\n^ this is especially true when you have (as I do, in some cases) many dependencies with the same type.\r\n\r\nI recall reading a long discussion about this issue on AngularJs WRT to their approach to handling module / component dependencies via `$inject`. TLDR; it's prone to human-error. Annoyingly I can't find it, not for want of looking.","updated_at":"2023-05-05T19:12:59Z","created_at":"2023-05-05T19:12:59Z","creator_user_login":"oodavid"}
{"number":8469,"comment_id":"1623502914","body":"> dependencies-to-arguments map is prone to human error. If you have a derived store with the same types being used, naming your arguments incorrectly will cause issues in the code. Spot the error:\r\n> \r\n> ```ts\r\n> const numerator = writable<number>(1);\r\n> const denominator = writable<number>(1);\r\n> const fraction = derived([numerator, denominator], ([d, n]) => n / d);\r\n> ```\r\n\r\nWhat about passing stores inside a map, not an array:\r\n```ts\r\nconst numerator = writable<number>(1);\r\nconst denominator = writable<number>(1);\r\nconst fraction = derived({ numerator, denominator }, ({ denominator, numerator }) => numerator / denominator);\r\n```\r\n\r\nBut this is still very verbose compared to\r\n```ts\r\n$: fraction = $numerator / $denominator;\r\n```","updated_at":"2023-07-06T11:23:54Z","created_at":"2023-07-06T11:23:54Z","creator_user_login":"olehmisar"}
{"number":8469,"comment_id":"1635653049","body":"What about this API?\r\n\r\n```ts\r\nconst numerator = writable(1)\r\nconst denominator = writable(2)\r\nconst fraction = derived(($) => $(numerator) / $(denominator))\r\n```\r\n\r\nI implemented a POC of this API here https://svelte.dev/repl/7cb03909dd8c48aea94cd63ee696abae?version=4.0.5","updated_at":"2023-07-14T10:25:58Z","created_at":"2023-07-14T10:25:58Z","creator_user_login":"olehmisar"}
{"number":8469,"comment_id":"1636561620","body":"I really like this API, so I created a simple library: https://www.npmjs.com/package/svelte-reactive\r\n```ts\r\nimport { reactive } from \"svelte-reactive\";\r\n\r\nconst numerator = writable(1)\r\nconst denominator = writable(2)\r\nconst fraction = reactive(($) => $(numerator) / $(denominator))\r\n```\r\n","updated_at":"2023-07-14T23:41:26Z","created_at":"2023-07-14T23:41:26Z","creator_user_login":"olehmisar"}
{"number":8469,"comment_id":"1636757505","body":"@olehmisar - you've done a fantastic job with that library, gonna roll that into my app - would be magic to get this into svelte core ;)","updated_at":"2023-07-15T12:51:05Z","created_at":"2023-07-15T12:51:05Z","creator_user_login":"oodavid"}
{"number":8245,"comment_id":"1413571486","body":"That could lead to CSS styles bleeding into sub components. Suppose you have\r\n```svelte\r\n<div class=\"foo\">\r\n  <SubComponent />\r\n  <span>something</span>\r\n</div>\r\n\r\n<style>\r\n  .foo > span {\r\n    color: green;\r\n  }\r\n</style>\r\n```\r\nNow if `SubComponent` has a `span` at the top level, it would also become green, which is not what you want.\r\nThere could probably be some kind of optimization through analysing the AST and seing whether or not an inner component is inside the HTML, but that seems unlikely to be worth the additional complexity.\r\n","updated_at":"2023-02-02T11:14:39Z","created_at":"2023-02-02T11:14:39Z","creator_user_login":"dummdidumm"}
{"number":8245,"comment_id":"1413576314","body":"That's also pretty much exactly what I had written in response on #8241.","updated_at":"2023-02-02T11:18:11Z","created_at":"2023-02-02T11:18:11Z","creator_user_login":"Conduitry"}
{"number":8245,"comment_id":"1413605156","body":"@Conduitry no its not its quite related but not exact same thing.\r\n\r\nIf we can able to disable cascadiation I can use scope class as root. And It will really fit my needs.\r\n```\r\n<style lang=\"scss\" scoped>\r\n\t*{\r\n\t\tbackground-color: #aacadd; // became root one \r\n\t}\r\n</style>\r\n```\r\n\r\nOutput become: .svelte-9cpc8h{background-color:#aacadd} \r\n\r\nAnd due to no one used this class within the component i can use this as component's root selector.","updated_at":"2023-02-02T11:43:14Z","created_at":"2023-02-02T11:43:14Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1413606972","body":"Which top-level option for scoping would be useful suggestion and enough for lots of cases","updated_at":"2023-02-02T11:44:47Z","created_at":"2023-02-02T11:44:47Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1413616988","body":"> That could lead to CSS styles bleeding into sub components. Suppose you have\r\n> \r\n> ```svelte\r\n> <div class=\"foo\">\r\n>   <SubComponent />\r\n>   <span>something</span>\r\n> </div>\r\n> \r\n> <style>\r\n>   .foo > span {\r\n>     color: green;\r\n>   }\r\n> </style>\r\n> ```\r\n> \r\n> Now if `SubComponent` has a `span` at the top level, it would also become green, which is not what you want. There could probably be some kind of optimization through analysing the AST and seing whether or not an inner component is inside the HTML, but that seems unlikely to be worth the additional complexity.\r\n\r\nYes, of course, putting scope class all around prevents bleeding but its not big deal for some cases and we actually might wanna do that to keep our design system consistent. When we want to change style for a spesific sub-component's elements we can just override it without doing any effort.\r\n","updated_at":"2023-02-02T11:53:10Z","created_at":"2023-02-02T11:53:10Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1413621085","body":"For example:\r\n\r\nMy main component which contains my whole design system typography sizing colors etc. When i put for example light button of course it will inherit lots of styles from main component and i just need to write background color (not all sizing spacing etc again and again). Consistency is sustained.","updated_at":"2023-02-02T11:56:47Z","created_at":"2023-02-02T11:56:47Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1413637168","body":"So the problem appears if we want completely different styled-components. Which is not good practice but lots of times designers do not follow some patterns. If such case happens in your project basically do not turn the top-level option on.\r\n\r\nOr we can create a backdoor to do that we can put all styles :not(weirdo) attribute and we can use this one to escape (I admit its not a good solution but it will solve if your project straggling from well thought consistent design system)","updated_at":"2023-02-02T12:09:14Z","created_at":"2023-02-02T12:09:14Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1414140308","body":"The workaround with `svelte-preprocess` is really trivial, you don't need to repeat `:global()` everywhere:\r\n\r\n```scss\r\ndiv {\r\n    position: relative;\r\n    font-weight: 200;\r\n\r\n    :global {\r\n        span {\r\n            position: relative;\r\n            // ...\r\n    \r\n            & > span {\r\n                transform-origin: 50% 100%;\r\n                // ...\r\n            }\r\n        }\r\n    }\r\n}\r\n```","updated_at":"2023-02-02T17:54:18Z","created_at":"2023-02-02T17:54:18Z","creator_user_login":"brunnerh"}
{"number":8245,"comment_id":"1415092414","body":"@brunnerh Oh, I wasn't know that. Thank you for the additional info. But issue's topic is different","updated_at":"2023-02-03T06:15:42Z","created_at":"2023-02-03T06:15:42Z","creator_user_login":"emircanerkul"}
{"number":8245,"comment_id":"1435711993","body":"Sorry, I don't get what the request is properly.\r\nBut for example, there is a component that manages typography as a design system like `<Text>` component, `<Text>` should know all typography knowledge.\r\nThen, through props, specify the typography, e.g. `<Text variant=\"denger\">`.\r\nDOM structure of a child component can change by their circumstances. So parent components should not write CSS that depends on the DOM structure of child components.","updated_at":"2023-02-18T16:32:27Z","created_at":"2023-02-18T16:32:27Z","creator_user_login":"baseballyama"}
{"number":7953,"comment_id":"1279772793","body":"I can reproduce this in 3.52.0. It's coming from #6693. @tanhauhau since you merged this, do you have an opinion about it? The message says \"positive tabindex values\" but the check in the code is for `>= 0`. Do you know what we want to be checking for? There's also a comment on that PR from a couple days ago that would seem to indicate that this new rule is overzealous.","updated_at":"2022-10-15T15:59:51Z","created_at":"2022-10-15T15:59:51Z","creator_user_login":"Conduitry"}
{"number":7953,"comment_id":"1279874614","body":"In case this rule is working as intended, I'd be curious how your supposed to make a list tabbable without using `tabindex=\"0\"`?\r\n```\r\n<li tabindex=\"0\">foo</li>\r\n```","updated_at":"2022-10-16T02:22:54Z","created_at":"2022-10-16T02:22:54Z","creator_user_login":"janosh"}
{"number":7953,"comment_id":"1279878926","body":"@Conduitry all a11y rules are based on [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y), and this particular rule comes from https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md\r\n\r\nadding an interactive `role` to the `<div>` element instead of a generic div would help resolve the issue.\r\n\r\n@janosh also [according to the eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md#case-shouldnt-i-add-a-tabindex-so-that-users-can-navigate-to-this-item), It is not necessary to put a tabindex on an <article>, for instance or on <li> items; assistive technologies provide affordances to users to find and traverse these containers.","updated_at":"2022-10-16T02:58:45Z","created_at":"2022-10-16T02:58:45Z","creator_user_login":"tanhauhau"}
{"number":7953,"comment_id":"1279879894","body":"> @janosh also [according to the eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md#case-shouldnt-i-add-a-tabindex-so-that-users-can-navigate-to-this-item), It is not necessary to put a tabindex on an\r\n\r\nYeah, I saw that. But my use case is non-assistive. I want to be able to tab-traverse list items myself. It's for this ToC component: https://svelte-toc.netlify.app.\r\n\r\n> adding an interactive role to the <div> element instead of a generic div would help resolve the issue.\r\n\r\nThanks. `role=link` sounds like a good solution.\r\n\r\n```\r\n<li tabindex=\"0\" role=\"link\">foo</li>\r\n```","updated_at":"2022-10-16T03:05:29Z","created_at":"2022-10-16T03:05:29Z","creator_user_login":"janosh"}
{"number":7953,"comment_id":"1279892974","body":"> @Conduitry all a11y rules are based on [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y), and this particular rule comes from https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md\r\n> \r\n> adding an interactive `role` to the `<div>` element instead of a generic div would help resolve the issue.\r\n> \r\n> @janosh also [according to the eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md#case-shouldnt-i-add-a-tabindex-so-that-users-can-navigate-to-this-item), It is not necessary to put a tabindex on an\r\n> \r\n> , for instance or on\r\n> * items; assistive technologies provide affordances to users to find and traverse these containers.\r\n\r\nHonestly, it doesn't matter what [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y) says, it's a poorly worded, misleading warning... When did 0 become a positive number?","updated_at":"2022-10-16T05:04:07Z","created_at":"2022-10-16T05:04:07Z","creator_user_login":"charbelnicolas"}
{"number":7953,"comment_id":"1279895508","body":"> When did 0 become a positive number?\r\n\r\n@charbelnicolas It's debatable. I mostly agree with your stance but [in mathematics](https://math.stackexchange.com/q/26705), people often use positive to include zero and the term \"strictly positive\" when they want to exclude it.","updated_at":"2022-10-17T17:37:11Z","created_at":"2022-10-16T05:28:45Z","creator_user_login":"janosh"}
{"number":7953,"comment_id":"1313475054","body":"This rule is also triggered in a number of situations, for example when `tabindex` is set to `-1`, `undefined`, or the result of a ternary expression containing either of these.\r\n\r\nRepro: https://svelte.dev/repl/0bd4ce269ee64d48a51929a95be6d6e7?version=3.53.1\r\n\r\nI would add a role to indicate interactivity, but I don't know of one that represents a draggable or droppable area.","updated_at":"2022-11-14T10:55:20Z","created_at":"2022-11-14T10:55:20Z","creator_user_login":"oatymart"}
{"number":7953,"comment_id":"1328164850","body":"In my case, I have a noninteractive element with a tooltip. I want the tooltip to open when a sighted user tabs to the element. The element should not have an interactive role, as it is only informational. Screen reader users will get the same information that is provided in the tooltip. So it doesn't make sense to use an interactive element or role like `button`.\r\n\r\nTabbing isn't only for screen reader users.","updated_at":"2022-11-27T03:49:41Z","created_at":"2022-11-27T03:49:41Z","creator_user_login":"benignant"}
{"number":7953,"comment_id":"1372281091","body":"Also getting this warning, and good accessibility is important. Given a very long list of searchable items where the user can select one option, would the correct schematics be something like this?\r\n```html\r\n<ul role=\"radiogroup\">\r\n  <li role=\"radio\"\r\n    tabindex=\"0\"\r\n    aria-checked=\"false/true\"\r\n    on:click={select}\r\n    on:keyup={select}>\r\n    <!-- content -->\r\n  </li>\r\n</ul>\r\n```\r\n(Given select() handles mouse and keyboard event.key === 'Enter')\r\n\r\nPreviously not been using `role` attribute, and role=button/link seems misleading if it's a list where one option can be selected.\r\n\r\nWas thinking the default `role=\"listitem\"` of an `<li>` was acceptable, but this  non-interactive element A11y warning thinks otherwise.","updated_at":"2023-01-05T14:22:53Z","created_at":"2023-01-05T14:22:53Z","creator_user_login":"ecker00"}
{"number":7469,"comment_id":"1108722363","body":"According to the repl of https://github.com/sveltejs/kit/issues/2977, now it works OK.\r\nBut if `{@html}` has multiple root nodes like `<div>foo</div><div>bar</div>`, always `if (ssr_html !== html)` returns false now.\r\nSo I think we should handle this case also.\r\n\r\nShould we do like this way?\r\n\r\n```ts\r\nlet ssr_html = '';\r\nfor (const n of claimed_nodes) {\r\n  ssr_html += n.outerHTML || '';\r\n}\r\n\r\nlet normalized_html = '';\r\nconst temp_div = document.createElement('div');\r\ntemp_div.innerHTML = html;\r\nfor (const n of normalized_html.childNodes) {\r\n  normalized_html += n.outerHTML || '';\r\n}\r\nif (ssr_html !== normalized_html) {\r\n  for (const n of claimed_nodes) {\r\n    detach(n);\r\n  }\r\n  return new HtmlTagHydration(undefined, is_svg);\r\n}\r\n```","updated_at":"2022-04-25T15:27:14Z","created_at":"2022-04-25T15:27:14Z","creator_user_login":"baseballyama"}
{"number":7469,"comment_id":"1108734186","body":"i hvnt tried, but what was the reason that multiple root nodes causes the `ssr_html !== html`?\r\n\r\none thing i can think of that this approach has potential bug is that, the parent element cannot always be `div`. i remember that elements like `<td>` need to be added into `<tr>`","updated_at":"2022-04-25T15:40:19Z","created_at":"2022-04-25T15:37:43Z","creator_user_login":"tanhauhau"}
{"number":7469,"comment_id":"1108740767","body":"I realise if there's text nodes, will need to `ssr_html += node.outerHTML || node.data || ''` since text nodes does not have outerHTML","updated_at":"2022-04-25T15:43:48Z","created_at":"2022-04-25T15:43:48Z","creator_user_login":"tanhauhau"}
{"number":7469,"comment_id":"1108742046","body":"I have good specific example!\r\n\r\nIf I have this svelte file.\r\n\r\n```sv\r\n<script context=\"module\">\r\n\texport const hydrate = true;\r\n\texport const prerender = true;\r\n</script>\r\n<script>\r\n  const content = `<div>xxxxxxx</div>\r\n\t\t<p>yyyy<b>yyyy</b>yyyy</p>\r\n\t\t<p>zzzzzz</p>`;\r\n</script>\r\n\r\n<h1>Hello World</h1>\r\n{@html content}\r\n<p id=\"p\">Bye World</p>\r\n```\r\n\r\nssr_html is:\r\n```html\r\n<div>xxxxxxx</div>undefined<p>yyyy<b>yyyy</b>yyyy</p>undefined<p>zzzzzz</p>\r\n```\r\n\r\nhtml is:\r\n```html\r\n<div>xxxxxxx</div>\r\n\t\t<p>yyyy<b>yyyy</b>yyyy</p>\r\n\t\t<p>zzzzzz</p>\r\n```\r\n\r\nDIfferent points are `undefined` and break-line / indent.\r\n\r\n> one thing i can think of that this approach has potential bug is that, the parent element cannot always be div. i remember that elements like <td> need to be added into <tr>\r\n\r\nAh yes. But in any way, I think we need to handle this in some way.","updated_at":"2022-04-25T15:44:58Z","created_at":"2022-04-25T15:44:58Z","creator_user_login":"baseballyama"}
{"number":7469,"comment_id":"1108745994","body":"> I realise if there's text nodes, will need to ssr_html += node.outerHTML || node.data || '' since text nodes does not have outerHTML\r\n\r\nYeah I also forgot `node.data` but this is required!\r\n\r\nAnd after adding this, now `ssr_html` and `html` are same in my above example!","updated_at":"2022-04-25T15:48:35Z","created_at":"2022-04-25T15:48:35Z","creator_user_login":"baseballyama"}
{"number":7469,"comment_id":"1108791662","body":"oh really, so the extra indent, newline, spaces are captured nicely within `textNode.data`?","updated_at":"2022-04-25T16:31:38Z","created_at":"2022-04-25T16:31:38Z","creator_user_login":"tanhauhau"}
{"number":7469,"comment_id":"1109202837","body":"> oh really, so the extra indent, newline, spaces are captured nicely within textNode.data?\r\n\r\nYes. \r\n\r\n---\r\nI found one more issue which is boolean attr issue.\r\nIf `{@html content}`'s content is ``<button class=\"abc\" disabled>xxxxxxx</button>``,\r\nssr_html is `<button class=\"abc\" disabled=\"\">xxxxxxx</button>`.\r\nBut html is `<button class=\"abc\" disabled>xxxxxxx</button>`.\r\n\r\n---\r\nAnd regarding SVG.\r\nAt least in my local, it works fine with my [suggested idea](https://github.com/sveltejs/svelte/pull/7469#issuecomment-1108742046).\r\n\r\n---\r\n\r\nAnd when I check SVG, I realized the below pattern.\r\n\r\n```sv\r\n<script context=\"module\">\r\n  export const hydrate = true;\r\n  export const prerender = true;\r\n</script>\r\n\r\n<script>\r\n  const content = `<svg><rect x=\"0\" y=\"0\" width=\"100\" height=\"60\" fill=\"#ddd\" />\r\n  <polygon points=\"50 10, 70 30, 50 50, 30 30\" fill=\"#99f\" /></svg>`;\r\n</script>\r\n\r\n{@html content}\r\n```\r\n\r\nssr_html is:\r\n```html\r\n<svg><rect x=\"0\" y=\"0\" width=\"100\" height=\"60\" fill=\"#ddd\"></rect>\r\n  <polygon points=\"50 10, 70 30, 50 50, 30 30\" fill=\"#99f\"></polygon></svg>\r\n```\r\n\r\nbut html is\r\n```html\r\n<svg><rect x=\"0\" y=\"0\" width=\"100\" height=\"60\" fill=\"#ddd\" />\r\n  <polygon points=\"50 10, 70 30, 50 50, 30 30\" fill=\"#99f\" /></svg>\r\n```\r\n","updated_at":"2022-04-26T01:30:18Z","created_at":"2022-04-26T01:30:18Z","creator_user_login":"baseballyama"}
{"number":7469,"comment_id":"1513360211","body":"What's the status of this? Haven't followed the conversation closely, but it sounds like there's some improvements to be made to this PR?","updated_at":"2023-04-18T15:26:03Z","created_at":"2023-04-18T15:26:03Z","creator_user_login":"dummdidumm"}
{"number":7240,"comment_id":"1034772861","body":"Another alternative would be to use the `onwarn` property that I believe rollup/vite/webpack-plugin-svelte support. It expects a function which you can use to filter out false positive warnings.","updated_at":"2022-02-10T10:52:14Z","created_at":"2022-02-10T10:52:14Z","creator_user_login":"dummdidumm"}
{"number":7240,"comment_id":"1034775595","body":"> Another alternative would be to use the `onwarn` property that I believe rollup/vite/webpack-plugin-svelte support. It expects a function which you can use to filter out false positive warnings.\r\n\r\nThanks, I did stumble across `onwarn` in some related issues but didn't find any docs. If it's not a Svelte feature then this explains why. And I guess https://github.com/EMH333/esbuild-svelte/issues/85 settles that.\r\n\r\nEdit: this also came up before in the rollup plugin repo https://github.com/sveltejs/rollup-plugin-svelte/issues/179","updated_at":"2022-02-10T11:39:50Z","created_at":"2022-02-10T10:55:01Z","creator_user_login":"Prinzhorn"}
{"number":7240,"comment_id":"1236256211","body":"https://github.com/sveltejs/svelte/pull/7786 registered all global objects / functions.","updated_at":"2022-09-04T04:15:50Z","created_at":"2022-09-04T04:15:50Z","creator_user_login":"baseballyama"}
{"number":7240,"comment_id":"1236271473","body":"@baseballyama this issue is about defining _my own_ globals (equivalent to the eslint `globals` config), please re-read my original post.","updated_at":"2022-09-04T06:40:46Z","created_at":"2022-09-04T06:40:46Z","creator_user_login":"Prinzhorn"}
{"number":7240,"comment_id":"1236291740","body":"Ahh üò©üò©üò©\r\nSorry for the misunderstanding.\r\n","updated_at":"2022-09-04T08:53:04Z","created_at":"2022-09-04T08:53:04Z","creator_user_login":"baseballyama"}
{"number":7240,"comment_id":"1342351203","body":"Does this issue address existing type declaration files not being used?\r\n\r\nE.g. if I have a `vite.d.ts` file:\r\n```typescript\r\n/**\r\n * If this is a debug build.  \r\n * Constant is defined in `vite.config.js` and is replaced everywhere automatically.\r\n */\r\ndeclare const DEBUG: boolean;\r\n```\r\n\r\nInterestingly the language tooling picks up on it, but you still get the warning:\r\n\r\n![image](https://user-images.githubusercontent.com/834235/206409258-f76e4243-ba29-4ce2-bdef-7116bce30cef.png)\r\n","updated_at":"2022-12-08T09:28:18Z","created_at":"2022-12-08T09:28:18Z","creator_user_login":"brunnerh"}
{"number":7240,"comment_id":"1356895912","body":"I am also experiencing this false positive warning. This variable is declared in `vite-env.d.ts` and then defined in entry file `main.ts`.\r\n\r\n```ts\r\n// vite-env.d.ts\r\ndeclare var PageHash: {\r\n\tSignUp: 'signup';\r\n\tLogin: 'login';\r\n};\r\n\r\n// main.ts\r\nglobalThis.PageHash = {\r\n\tSignUp: 'signup',\r\n\tLogin: 'login',\r\n};\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/34796192/208323335-cb019907-2bc2-40c0-be4e-758f67cbf258.png)\r\n\r\nThe language server complains but the compiler is still able to pick up the global variable.\r\n\r\nOh well, the language server is good if I explicitly access `PageHash` through `globalThis` object, like `globalThis.PageHash`.\r\n","updated_at":"2022-12-19T01:11:50Z","created_at":"2022-12-18T23:02:09Z","creator_user_login":"duydang2311"}
{"number":7240,"comment_id":"1657786876","body":"Would be pretty cool if we could do this for example. Or just provide List of global functions.\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/32091524/c61252f5-caa7-4cef-b892-5c2debf49a1f)\r\n","updated_at":"2023-07-31T07:04:21Z","created_at":"2023-07-31T07:04:21Z","creator_user_login":"kobe-ra"}
{"number":7240,"comment_id":"1658186290","body":"Part of me wonders if we still need this warning at all in 2023. TypeScript/typed JavaScript is ubiquitous at this point, which does a  much better job at knowing which globals exist.","updated_at":"2023-07-31T11:26:58Z","created_at":"2023-07-31T11:26:58Z","creator_user_login":"dummdidumm"}
{"number":7209,"comment_id":"1034575054","body":"@matths I found a solution after facing the same:\r\n\r\n\"What you have is an indexed each block, which won't work. A keyed each block looks like this. (preferably with a proper key)\"\r\n    Change your each block: `{#each todos.filter(t => !t.done) as todo (todo.id)}`\r\n    To this: ` {#each todos.filter(t => !t.done) as index (todo)}`\r\n\r\nYou can then use index to set an id on the element you're creating\r\n\r\nhttps://stackoverflow.com/questions/59497908/animations-in-svelte-component","updated_at":"2022-02-10T07:22:30Z","created_at":"2022-02-10T07:22:30Z","creator_user_login":"barcovanrhijn"}
{"number":7209,"comment_id":"1039897425","body":"@barcovanrhijn I'll have a look at your suggestion soon and give you feedback afterwards. Thanks for the comment.","updated_at":"2022-02-15T06:14:45Z","created_at":"2022-02-15T06:14:45Z","creator_user_login":"matths"}
{"number":7209,"comment_id":"1197563668","body":"I just ran into the same problem. Any ideas on how we should move forward?","updated_at":"2022-07-28T01:59:25Z","created_at":"2022-07-28T01:59:25Z","creator_user_login":"justin-robinson"}
{"number":7209,"comment_id":"1229118677","body":"@matths ,\r\nI am running into a similar error\r\n```svelte\r\n <section use:dndzone={{ items: $store, flipDurationMs }} on:consider={handleSort} on:finalize={handleSort}>\r\n    {#each $store as item (item.id)}\r\n      <div id={item.id} animate:flip={{ duration: flipDurationMs }}>...</div>\r\n    {/each}\r\n</section>\r\n```\r\n\r\nError:\r\n` An element that uses the animate directive must be the sole child of a keyed each block`\r\n\r\nAny ideas how to prevent this, I got the same issue trying to use index.\r\ncc: @justin-robinson did you find a fix to your issue you were having?","updated_at":"2022-08-27T04:15:14Z","created_at":"2022-08-27T04:15:14Z","creator_user_login":"3daddict"}
{"number":7209,"comment_id":"1270069578","body":"Any news ?","updated_at":"2022-10-06T13:39:55Z","created_at":"2022-10-06T13:39:55Z","creator_user_login":"eytanProxi"}
{"number":7209,"comment_id":"1271187050","body":"This is a major pain point for users of Svelte Headless Table as well. The main sell is that Svelte Headless Table is truly headless so all of Svelte's native directives should work out of the box.\r\n\r\nHowever, we use a `<Subscribe/>` helper component to auto-subscribe to non-top-level Svelte stores.\r\n\r\n```svelte\r\n<tbody {...$tableBodyAttrs}>\r\n  {#each $rows as row (row.id)}\r\n    <Subscribe rowAttrs={row.attrs()} let:rowAttrs>\r\n      <tr animate:flip={{duration: 200}} {...rowAttrs}>\r\n        {#each row.cells as cell (cell.id)}\r\n          <Subscribe attrs={cell.attrs()} let:attrs>\r\n            <td {...attrs}>\r\n              <Render of={cell.render()} />\r\n            </td>\r\n          </Subscribe>\r\n        {/each}\r\n      </tr>\r\n    </Subscribe>\r\n  {/each}\r\n</tbody>\r\n```\r\n\r\nWithout support for `$row.attrs()` in the template, `<Subscribe/>` is necessary. However, `animate:flip` throws an error because it's not the direct child of the each block, even though `Subscribe` does not add anything to the template.\r\n\r\nIt would be nice if `animate:flip` is able to detect these behaviours.","updated_at":"2022-10-07T07:02:08Z","created_at":"2022-10-07T06:58:21Z","creator_user_login":"bryanmylee"}
{"number":7209,"comment_id":"1282841094","body":"I am experiencing same issue. Did anyone find a possible solution?","updated_at":"2022-10-18T18:32:52Z","created_at":"2022-10-18T18:32:52Z","creator_user_login":"amorfati254"}
{"number":7209,"comment_id":"1426927314","body":"Same issue. Simple letter adding to a grid, without the animate, simple to add another letter once you've exhausted your initial array of letters: [repl here](https://svelte.dev/repl/729afb80433f49c7a56b06abfb96724b?version=3.15.0)\r\n\r\nBut if you add animate, you have to change the syntax of the #each, and once you hit the end of your list it fails to add another letter (I assume because n is no longer unique?)\r\n\r\n[repl here](https://svelte.dev/repl/5671b70a9c9c4890befabd0e8896d881?version=3.55.1)\r\n","updated_at":"2023-02-12T02:44:46Z","created_at":"2023-02-12T02:44:46Z","creator_user_login":"mspanish"}
{"number":7209,"comment_id":"1540912209","body":"+1","updated_at":"2023-05-09T21:24:23Z","created_at":"2023-05-09T21:24:23Z","creator_user_login":"Valentin-Seehausen"}
{"number":7209,"comment_id":"1543173706","body":"Is there no way around this? It means I have to update the parent of the child widget I want the state to update in a list, so the entire parent container tree has to be rerendered, because I can't move my state contained in the direct child `div` wrapping the component into the component itself","updated_at":"2023-05-11T01:52:55Z","created_at":"2023-05-11T01:52:55Z","creator_user_login":"space-nuko"}
{"number":5687,"comment_id":"752273651","body":">`createSlot, slot` seems really confusing, what would be good names?\r\n\r\n<strike>If it's not too late, here's my 2c:\r\n\r\n`createSlot` may not be needed, at all. It's so simple I would think people are okay doing a `.map` when needed. For providing the default slot only, the case without `createSlot` is simpler than with it:</strike>\r\n\r\nThis could be done just with `createSlots`, as @lukeed does [here](https://github.com/sveltejs/svelte/pull/4296#issuecomment-701731455).\r\n\r\nI would prefer the plural name, since the object can carry information for multiple slots. If wanted, there can be a `createSlot` for only defining the default slot but that may be unnecessary overkill (and people can do such wraps easily, ourselves).\r\n\r\nThis would make your sample look like:\r\n\r\n```javascript\r\n// parent.svelte\r\nimport { createSlots } from 'svelte';\r\nimport MyChild from './mychild.svelte';\r\n\r\nnew MyCmp({\r\n  slots: createSlots({\r\n    default: MyChild\r\n  })\r\n});\r\n```\r\n\r\nThe values can be components, elements, or arrays thereof.\r\n\r\n---\r\n\r\nWould like to use this with SVG - and it can (I have a project doing that). The PR however currently contains `div`s, making it HTML specific.","updated_at":"2020-12-30T12:49:18Z","created_at":"2020-12-29T23:21:11Z","creator_user_login":"akauppi"}
{"number":5687,"comment_id":"753216059","body":"@truongsinh this PR has a merge conflict. You will need to rebase against `master`","updated_at":"2020-12-31T22:09:41Z","created_at":"2020-12-31T22:09:41Z","creator_user_login":"benmccann"}
{"number":5687,"comment_id":"778746524","body":"This would help a lot when we are trying to write unit tests and we need to programmatically assign something to a slot?","updated_at":"2021-02-14T08:40:48Z","created_at":"2021-02-14T08:40:48Z","creator_user_login":"jmsunseri"}
{"number":5687,"comment_id":"880709791","body":"Any update on the status of these tickets/pull requests? Would love to see this feature added.","updated_at":"2021-07-15T13:48:41Z","created_at":"2021-07-15T13:48:41Z","creator_user_login":"zachstence"}
{"number":5687,"comment_id":"1024101243","body":"Any update on this? It has pretty big ramifications for testing svelte components? ","updated_at":"2022-01-28T10:54:33Z","created_at":"2022-01-28T10:54:33Z","creator_user_login":"PClmnt"}
{"number":5687,"comment_id":"1096303130","body":"looks like this blocks testing slots with vitest and @testing-library/svelte, bummer...","updated_at":"2022-04-12T07:59:49Z","created_at":"2022-04-12T07:59:42Z","creator_user_login":"SarcevicAntonio"}
{"number":5687,"comment_id":"1144952678","body":"Are there any updates on this? This prevents us from testing our components well.\r\n\r\nWe need to create slot content to thoroughly test our components with unit tests.","updated_at":"2022-06-02T14:46:25Z","created_at":"2022-06-02T14:46:25Z","creator_user_login":"vekunz"}
{"number":5687,"comment_id":"1223850409","body":"Would love for this to get worked on!","updated_at":"2022-08-23T10:06:06Z","created_at":"2022-08-23T10:06:06Z","creator_user_login":"rousah"}
{"number":5687,"comment_id":"1441026060","body":"@truongsinh just a reminder that this PR needs a rebase","updated_at":"2023-02-23T00:05:03Z","created_at":"2023-02-23T00:05:03Z","creator_user_login":"benmccann"}
{"number":5687,"comment_id":"1450561743","body":"The lack of the ability to pass slots when creating a component is blocking a lot of people here: https://github.com/testing-library/svelte-testing-library/issues/48 (the two workarounds listed there don't seem to work currently, at least for me ‚Äî I really don't want to have to use Playwright's experimental component tests to do this!)\r\n\r\n_Please_ could this make it to release? It's been over two years for this PR‚Ä¶","updated_at":"2023-03-01T17:35:38Z","created_at":"2023-03-01T17:35:38Z","creator_user_login":"unikitty37"}
{"number":5944,"comment_id":"770335035","body":"By looking at generated code in above REPL example at where it append the external script to `document.head`,  I suspect this is an Svelte issue rather than only Sapper issue;\r\n\r\n```js\r\n    m: async function mount(target, anchor) {\t// changed to async for the wait-a-sec\r\n    \tappend_dev(document.head, script);\r\n\r\n\t// if add wait a sec here (to simulate some delay) before attach the 'load' event listener,\r\n\t//   then the script is almost sure finished loading and the initializeRemarkable listener will NOT get called\r\n\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    \t// ... omitted many lines here\r\n\r\n    \tif (!mounted) {\r\n    \t\tdispose = [\r\n    \t\t\tlisten_dev(script, \"load\", /*initializeRemarkable*/ ctx[2], false, false, false),\r\n    \t\t\tlisten_dev(textarea, \"input\", /*textarea_input_handler*/ ctx[3])\r\n    \t\t];\r\n   \t\tmounted = true;\r\n    \t}\r\n    },\r\n```\r\n\r\ncompare with a normal vanilla js of loading an external js tag on the fly (below), it needs to attach the `onload` listener before append to the DOM;  if not this order, then it's.a racing issue, there might be a delay between and then that link might be loaded very fast before the `onload` listener attached, then the `onload` listener will NOT get called;\r\n\r\n```js\r\nconst script = document.createElement('script');\r\nscript.scr = 'https://cdnjs.cloudflare.com/ajax/libs/remarkable/2.0.0/remarkable.min.js';\r\nscript.onload = function() { ... }\t// or .attachEventListener('load', function() { ... })\r\ndocument.head.appendChild(script);\r\n```\r\n\r\nSo I believe this Svelte generated code for `on:load` needs to change order to before `append_dev(document.head, script);` ?","updated_at":"2021-02-06T03:58:05Z","created_at":"2021-01-31T06:29:51Z","creator_user_login":"t829702"}
{"number":5944,"comment_id":"773768467","body":"@Conduitry this isn't only a question but can also be a bug report?  I believe the attaching 'load' event too late after mounted to the DOM could be root cause of the problem","updated_at":"2021-02-05T03:50:44Z","created_at":"2021-02-05T03:50:21Z","creator_user_login":"t829702"}
{"number":5944,"comment_id":"773835355","body":"Technically speaking, I'd say it's a bug, yes.\r\n\r\nIt may be very unlikely to happen, given that the time it takes to request the source script, is probably a lot longer than the time it takes to reach the point in the mount function where the 'load' handler is attached... but then again, what do I know about the browser's and scripts intricacies. If we insist on not marking this is a bug, we should at least be very, very certain that this racy bug is extremely unlikely to happen - but it's probably a lot easier to just fix the code generation to correctly add the event listener before appending the script to the DOM.","updated_at":"2021-02-05T06:55:59Z","created_at":"2021-02-05T06:55:59Z","creator_user_login":"Phaqui"}
{"number":5944,"comment_id":"778712118","body":"I believe #5988 may be a similar race condition of `load` event on external resources?","updated_at":"2021-02-14T02:40:26Z","created_at":"2021-02-14T02:40:26Z","creator_user_login":"t829702"}
{"number":5944,"comment_id":"781118050","body":"it's weird seems no one from core maintainer want to have a look? even with PR #5968 available from @Phaqui (Thanks to @Phaqui !)\r\n /cc @antony who responded on #5988 which makes me believe there are multiple race condition problems exist in Svelte","updated_at":"2021-02-18T07:26:27Z","created_at":"2021-02-18T07:26:27Z","creator_user_login":"t829702"}
{"number":5944,"comment_id":"781192506","body":"@t829702 I'm not sure what your notion of the Svelte SLA is, but far from not wanting to have a look, we have a lot on our plate as well as full time jobs, and we simply haven't got around to looking at this yet. Feel free to do your own investigation and come up with a solution for it if there is an issue, but don't expect us to be able to jump on every single issue immediately.\r\n\r\nSkimming the issue briefly, I'm going to say a delay in script load and execution has nothing to do with Svelte nor is it an issue, it's just the nature of Javascript and the way browsers work. This is the specific reason I created https://github.com/beyonk-adventures/async-script-loader - which is based off something I found in React, as a workaround for the exact same issue there.\r\n\r\nYou can't guarantee the load execution time of scripts without holding up the page load, which is bad - so you simply trigger your execution based on when a script is \"ready\". Have a look.","updated_at":"2021-02-18T09:04:58Z","created_at":"2021-02-18T09:01:42Z","creator_user_login":"antony"}
{"number":5944,"comment_id":"806373004","body":"> based on when a script is \"ready\".\r\n\r\n```\r\nscript.onload = function() { ... }\t// or .attachEventListener('load', function() { ... })\r\n```","updated_at":"2021-03-25T05:23:46Z","created_at":"2021-03-25T05:23:46Z","creator_user_login":"t829702"}
{"number":5944,"comment_id":"869048008","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:39Z","created_at":"2021-06-26T19:04:39Z","creator_user_login":"stale[bot]"}
{"number":5944,"comment_id":"1000871298","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:42Z","created_at":"2021-12-24T15:15:42Z","creator_user_login":"stale[bot]"}
{"number":5347,"comment_id":"686222809","body":"Hi, I tried to reproduce the issue in the magnificent REPL (with svelte 3.17.3) but I couldn't:\r\n[sample](https://svelte.dev/repl/d46a97a2993441babd89a70113e79b27?version=3.17.3)\r\nI used Firefox 80 though. Does the issue happens in that REPL sample?","updated_at":"2020-09-03T03:11:12Z","created_at":"2020-09-03T03:09:13Z","creator_user_login":"dmorganb"}
{"number":5347,"comment_id":"686660088","body":"Hey! Thanks for having a look. Unfortunately, I believe this issue only occurs when Svelte is mounting a DOM from an SSR render, so I can't reliably reproduce in the REPL. I couldn't figure out a way to convince the REPL to hydrate before page load, but if that's possible I bet you could reproduce there.","updated_at":"2020-09-03T23:38:52Z","created_at":"2020-09-03T18:06:11Z","creator_user_login":"qstearns"}
{"number":5347,"comment_id":"686933434","body":"I tried to log the duration of the audio element using an action\r\n```svelte\r\n<script>\r\n\tconst action = (audio) => {\r\n\t\tconsole.log(audio.duration)\r\n\t}\r\n</script>\r\n<audio use:action>\r\n```\r\nit behaves differently on firefox and chrome. firefox always logs the actual duration on reload while chrome would log `NaN`. \r\nIt seems like firefox already loads the source of the audio element before hydration and before attaching the event handler for watch duration value.","updated_at":"2020-09-04T06:10:16Z","created_at":"2020-09-04T06:10:16Z","creator_user_login":"jasonlyu123"}
{"number":5347,"comment_id":"687229654","body":"https://github.com/sveltejs/svelte/blob/c752ed3527a64a5705c3e005f9bc18862fa6ad3a/src/compiler/compile/render_dom/wrappers/Element/index.ts#L619\r\nI'm guessing it has something to do with the line. it would not check the value if the variable is already initialized. Maybe because these binding are readonly. \r\n\r\nOn Chrome, it's not an issue because the audio would be loaded after hydration, so event handler would update the value. Firefox won't load the audio source again after page reload. so it got stuck with the initial value.","updated_at":"2020-09-04T15:44:45Z","created_at":"2020-09-04T15:44:45Z","creator_user_login":"jasonlyu123"}
{"number":5347,"comment_id":"687240942","body":"That definitely checks out - I'm guessing that changing these undefined checks would potentially have some pretty undesirable consequences, so I might be out of luck. FWIW, I think the regression on #3524 is probably the bigger issue here\r\n\r\n","updated_at":"2020-09-04T16:04:21Z","created_at":"2020-09-04T16:04:21Z","creator_user_login":"qstearns"}
{"number":5347,"comment_id":"869080659","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:46:54Z","created_at":"2021-06-27T00:46:54Z","creator_user_login":"stale[bot]"}
{"number":5347,"comment_id":"869176183","body":"I don't think it's a good idea to close issues that represent serious problems that exist in Svelte just because nobody has commented on them for a while.","updated_at":"2021-06-27T14:53:15Z","created_at":"2021-06-27T14:53:15Z","creator_user_login":"aradalvand"}
{"number":5347,"comment_id":"870968744","body":"@AradAral are you experiencing this issue? Or the one from #3524? I'm having a hard time reproducing at this point, so it's possible that it's been fixed since the issue went stale.","updated_at":"2021-06-29T22:49:13Z","created_at":"2021-06-29T22:49:13Z","creator_user_login":"qstearns"}
{"number":5347,"comment_id":"1001252438","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T23:02:23Z","created_at":"2021-12-26T23:02:23Z","creator_user_login":"stale[bot]"}
{"number":5347,"comment_id":"1610067789","body":"Still getting this issue, fwiw, in the latest Firefox (using https://github.com/Linkcube/svelte-audio-controls). Initial page refresh does not actually set the duration parameter, despite the audio element loading correctly.","updated_at":"2023-06-27T19:20:21Z","created_at":"2023-06-27T19:05:02Z","creator_user_login":"lc-guy"}
{"number":5018,"comment_id":"644668403","body":"@noahlh You can use binding `bind:textContent={text}` instead of placing the content within the element.\r\nhttps://svelte.dev/repl/a3c3b7e51b2647f3b8aebef533e93321?version=3.23.2\r\n\r\nHowever, this does seem to be a bug to me. I'm looking into it.","updated_at":"2020-06-16T10:06:35Z","created_at":"2020-06-16T10:06:35Z","creator_user_login":"skippednote"}
{"number":5018,"comment_id":"644688662","body":"I'm getting positive results if we check for the `wholeText` property on the `childNode` instead of `data`.\r\n\r\nSwapping the following \r\n```js\r\nexport function set_data(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.data !== data) text.data = data;\r\n}\r\n```\r\n\r\nwith the this\r\n```js\r\nexport function set_data(text, data) {\r\n\tdata = '' + data;\r\n\tif (text.wholeText !== data) text.data = data;\r\n}\r\n```\r\nhttps://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts#L196","updated_at":"2020-06-16T10:50:25Z","created_at":"2020-06-16T10:50:25Z","creator_user_login":"skippednote"}
{"number":5018,"comment_id":"644901725","body":"@skippednote Awesome!!  Thanks for the quick ID & fix on this.\r\n\r\nI did originally use the 2-way binding (which indeed works perfectly), but unfortunately for my application I need to do manual binding, since `contenteditable` gets set dynamically based on component state, and Svelte doesn't support 2-way binding w/ a dynamic attribute on `contenteditable`. ","updated_at":"2020-06-16T17:22:45Z","created_at":"2020-06-16T17:22:45Z","creator_user_login":"noahlh"}
{"number":5018,"comment_id":"655028511","body":"This is fixed in 3.24.0 - https://svelte.dev/repl/04d08576e3db43d6a7f5c3fd7ae593a3?version=3.24.0","updated_at":"2020-07-07T17:59:09Z","created_at":"2020-07-07T17:59:09Z","creator_user_login":"Conduitry"}
{"number":5018,"comment_id":"656483272","body":"@Conduitry @skippednote Sorry to be difficult, but I think this might not quite be fixed -- check out the REPL link above, but start typing and hit \"enter\" in the field.  Same issue reappears :(","updated_at":"2020-07-10T05:00:51Z","created_at":"2020-07-10T05:00:51Z","creator_user_login":"noahlh"}
{"number":5018,"comment_id":"656483998","body":"@noahlh The URL you had shared earlier uses an older version of Svelte\n\nTry this https://svelte.dev/repl/04d08576e3db43d6a7f5c3fd7ae593a3?version=3.24.0","updated_at":"2020-07-10T05:03:28Z","created_at":"2020-07-10T05:03:28Z","creator_user_login":"skippednote"}
{"number":5018,"comment_id":"656485742","body":"@skippednote Sorry - i wasn't clear.  I was indeed referring to the link that Conduitry shared (same as yours).  The issue appears resolved IF you only type text.  But try typing some text then hitting Enter (eg putting in a line break).","updated_at":"2020-07-10T05:09:17Z","created_at":"2020-07-10T05:09:17Z","creator_user_login":"noahlh"}
{"number":5018,"comment_id":"945638472","body":"Hey @noahlh\r\nThe reason why content editable worked when clear the input is because mustache tag which is actually a Text node exits inside the editable div, so on clear it gets removed from the editable div, after that there wasn't any text node (which is binded with the  state value) and why replication of value happening on pressing next line or enter because `{text}` (or say Text node) already exits inside the editable div and when we enter something like `a\\na\\na` we set this directly to the `data` of Text node but instead it should be `innerText`. (this part need the fix in svelte code)\r\n\r\nI will definitely say no to the using `contenteditable` case with a mustache as a child element, it will always create confusion everywhere for cases like `<div contenteditable=true on:input={handleInput}>{text}<b>some</b></div>`  and begineers who is dealing with will have a lot of confusion till then they go through the mdn docs, I think svelte needs to add a warning or info to avoid these cases.\r\n\r\nI will open the PR soon for review","updated_at":"2021-10-18T10:43:05Z","created_at":"2021-10-18T10:43:05Z","creator_user_login":"RaiVaibhav"}
{"number":5018,"comment_id":"946000686","body":"After digging a little bit, realised innerText will not even work in the first place, a wrong approach, mostly IMO there should be a warning from svelte to avoid this kind of regression and use binding only.","updated_at":"2021-10-18T17:30:50Z","created_at":"2021-10-18T17:30:50Z","creator_user_login":"RaiVaibhav"}
{"number":5018,"comment_id":"1437502393","body":"If this has to do with two adjacent text nodes can we just make an action that constantly [normalizes](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize)? Seems to work here:\r\n\r\nhttps://svelte.dev/repl/6a2b5691f4c04889b9a68b3f60be6ce3?version=3.23.2","updated_at":"2023-02-20T20:10:45Z","created_at":"2023-02-20T20:10:45Z","creator_user_login":"johnnysprinkles"}
{"number":4875,"comment_id":"631824824","body":"I agree, when I first used the REPL I didn't realize how much it could do\r\n","updated_at":"2020-05-21T01:30:16Z","created_at":"2020-05-21T01:30:16Z","creator_user_login":"ConProgramming"}
{"number":4875,"comment_id":"632698094","body":"I don't really like this as it is a lot to delete when you just want to use the REPL, as I often do.\r\n\r\nIf there were a less wordy way to express the same information, it might be more useful.\r\n\r\nI definitely wouldn't want there to be multiple files.","updated_at":"2020-05-22T13:45:34Z","created_at":"2020-05-22T13:45:34Z","creator_user_login":"antony"}
{"number":4875,"comment_id":"632701195","body":"Good point @antony. An alternative would be to keep the Hello World simple, but provide a link to instructions like this:\r\n[https://svelte.dev/repl/d217fb89cb0d40d9b81163bb68149076?version=3.22.3](https://svelte.dev/repl/d217fb89cb0d40d9b81163bb68149076?version=3.22.3)","updated_at":"2020-05-22T13:52:51Z","created_at":"2020-05-22T13:52:35Z","creator_user_login":"kuhlaid"}
{"number":4875,"comment_id":"633120792","body":"This seems like a reasonable use for the markdown support implemented recently:\r\n\r\n![image](https://user-images.githubusercontent.com/32685677/82738351-90028f80-9cfc-11ea-873f-932e45c404dc.png)\r\n\r\nI think the intent was to document component examples, so including a single md file as part of the base REPL template doesn't seem too intrusive?\r\n\r\nAlthough I think the gist import removes the README.md file if it exists so I'm not sure how much work this would take.","updated_at":"2020-05-23T19:14:20Z","created_at":"2020-05-23T19:14:20Z","creator_user_login":"mjgartendev"}
{"number":4875,"comment_id":"633332063","body":"@mjgartendev \r\nClarification: With README tab greets the user upon landing to [https://svelte.dev/repl/](https://svelte.dev/repl/)?","updated_at":"2020-05-25T01:18:11Z","created_at":"2020-05-25T01:18:11Z","creator_user_login":"tbmreza"}
{"number":4875,"comment_id":"636033876","body":"It could be helpful to give users (especially new ones) more details about using the REPL. \r\nHowever, I really appreciate how straightforward the code editor itself is. I wouldn't want any additional files or extra details to delete from within the REPL itself. \r\n\r\nInstead, I wonder if some version of an Intro text for the REPL elaborating on the UI and its options might be better suited elsewhere on the site: as a longer blog post, part of the FAQs, or even adding something like an Info button to the App Controls. \r\n\r\n","updated_at":"2020-05-29T15:24:09Z","created_at":"2020-05-29T15:24:09Z","creator_user_login":"mattwolff"}
{"number":4875,"comment_id":"641191214","body":"> Good point @antony. An alternative would be to keep the Hello World simple, but provide a link to instructions like this:\r\n> https://svelte.dev/repl/d217fb89cb0d40d9b81163bb68149076?version=3.22.3\r\n\r\nAgree on this one, I think this is the best option. And I also agree that the repl is quite often an underestimated tool, so a message like this could be very helpful.","updated_at":"2020-06-09T10:17:19Z","created_at":"2020-06-09T10:17:19Z","creator_user_login":"opensas"}
{"number":4875,"comment_id":"1000920106","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:51Z","created_at":"2021-12-24T19:24:51Z","creator_user_login":"stale[bot]"}
{"number":4875,"comment_id":"1000937437","body":"Anther posibility could be to show a _welcome tour_ with a check stating _do not show again_, that would give us the best of both worlds\r\nWith the same logic, we could show a readme with new features (similar to what vscode does), I didn't even know that md files were supported, for example","updated_at":"2021-12-24T21:51:55Z","created_at":"2021-12-24T21:51:55Z","creator_user_login":"opensas"}
{"number":4858,"comment_id":"630646435","body":"@Conduitry  what kind of clarification do you need, except maybe my very bad english ? :-)","updated_at":"2020-05-19T07:44:31Z","created_at":"2020-05-19T07:44:31Z","creator_user_login":"j3rem1e"}
{"number":4858,"comment_id":"645944914","body":"It's not clear what to expect if you were to omit target from the options.\r\n\r\n`target` is a dom element in which Svelte mounts the component. Without it, what would be the expected behaviour?","updated_at":"2020-06-18T11:01:21Z","created_at":"2020-06-18T11:01:21Z","creator_user_login":"antony"}
{"number":4858,"comment_id":"645951770","body":"`target` is only required when calling the constructor explicitly in javascript. Svelte instanciates components without the target property (but add a $$inline property to disable this check, see [1]). \r\n\r\nIf a template build with svelte without development mode links at runtime to a svelte library with devmod activated, then $$inline is not injected by the template and the check fails.\r\n\r\n[1] https://github.com/sveltejs/svelte/blob/f111cf6881d6708f0e7d0b7db9653f411dd6bab1/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L193 ","updated_at":"2020-06-18T11:17:15Z","created_at":"2020-06-18T11:17:15Z","creator_user_login":"j3rem1e"}
{"number":4858,"comment_id":"776352799","body":"@j3rem1e thanks for sharing, I have the same issue now. Have you found any solution/workaround? Thanks","updated_at":"2021-02-10T00:57:15Z","created_at":"2021-02-10T00:57:15Z","creator_user_login":"withinoneyear"}
{"number":4858,"comment_id":"776649201","body":"@withinoneyear No, I had to disable dev build for most if not all of my sub-project","updated_at":"2021-02-10T11:39:29Z","created_at":"2021-02-10T11:39:29Z","creator_user_login":"j3rem1e"}
{"number":4858,"comment_id":"776652334","body":"We are not packaging svelte components as raw svelte files but are transpiling one for development and one for production.\r\n\r\nCurrently, we are using the `browser:module` package.json field for development builds which is picked by snowpack (our dev server) and `module` for production builds which used by our bundler (rollup). In the future, we like to use export conditions to achieve better separation. \r\n\r\nFor the typescript support, we are generating a d.ts file using svelte jsx.\r\n\r\nMaybe that helps. If you like to know more just let me know.","updated_at":"2021-02-10T11:45:58Z","created_at":"2021-02-10T11:45:58Z","creator_user_login":"sastan"}
{"number":4858,"comment_id":"869055164","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:05:02Z","created_at":"2021-06-26T20:05:02Z","creator_user_login":"stale[bot]"}
{"number":4858,"comment_id":"869056480","body":"It still doesn't work.","updated_at":"2021-06-26T20:14:22Z","created_at":"2021-06-26T20:14:22Z","creator_user_login":"j3rem1e"}
{"number":4858,"comment_id":"1000539081","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T21:55:47Z","created_at":"2021-12-23T21:55:47Z","creator_user_login":"stale[bot]"}
{"number":4858,"comment_id":"1255140051","body":"up, I'd like to have to throw replaced by just a log.","updated_at":"2022-09-22T14:50:15Z","created_at":"2022-09-22T14:50:15Z","creator_user_login":"j3rem1e"}
{"number":4599,"comment_id":"629783561","body":"Rebased off master.\r\n\r\n@Conduitry Any chance this can be looked at soon? I don't believe there's anything controversial about this one.","updated_at":"2020-05-17T11:42:31Z","created_at":"2020-05-17T11:42:31Z","creator_user_login":"RedHatter"}
{"number":4599,"comment_id":"631677656","body":"Any chance this could be reviewed and possibly merged? This would be extremely useful.\r\n\r\n@tanhauhau \r\n@Rich-Harris \r\n@Conduitry ","updated_at":"2020-05-20T20:22:48Z","created_at":"2020-05-20T19:27:15Z","creator_user_login":"thes0n1x"}
{"number":4599,"comment_id":"636774133","body":"This is conflicting now with the work from #4860. I briefly tried to resolve it but was unable to.","updated_at":"2020-06-01T10:37:21Z","created_at":"2020-06-01T10:37:21Z","creator_user_login":"Conduitry"}
{"number":4599,"comment_id":"637655823","body":"@Conduitry Should be good now","updated_at":"2020-06-02T16:11:24Z","created_at":"2020-06-02T16:11:24Z","creator_user_login":"RedHatter"}
{"number":4599,"comment_id":"701186802","body":"I've rebased this again on the current master so it should cleanly merge now.","updated_at":"2020-09-30T06:31:46Z","created_at":"2020-09-30T06:31:46Z","creator_user_login":"antony"}
{"number":4599,"comment_id":"740298625","body":"Is this feature still being considered for inclusion?","updated_at":"2020-12-08T01:23:52Z","created_at":"2020-12-08T01:23:52Z","creator_user_login":"btakita"}
{"number":4599,"comment_id":"752030303","body":"This PR looks like it needs only a tiny bit more attention to get merged.","updated_at":"2020-12-29T10:40:08Z","created_at":"2020-12-29T10:40:08Z","creator_user_login":"janosh"}
{"number":4599,"comment_id":"784353507","body":"Any news on this?","updated_at":"2021-02-23T17:06:28Z","created_at":"2021-02-23T17:03:39Z","creator_user_login":"Drevoed"}
{"number":4599,"comment_id":"789849529","body":"I hope this will be merged soon <3","updated_at":"2021-03-03T16:30:47Z","created_at":"2021-03-03T16:30:47Z","creator_user_login":"ZerdoX-x"}
{"number":4599,"comment_id":"830336280","body":"Some thoughts from the other maintainers: Having a dedicated `bubble:` directive may be preferable to the `on:` directive. `bubble:foo` could do the same thing as what a lone `on:foo` does now, and would become the preferred syntax. `on:foo` is problematic because we can't do `on:foo|preventDefault` to prevent the default without bubbling. `on:foo|preventDefault bubble:foo` would be more explicit and more useful. Obviously we can't change the behaviour of `on:foo` until v4, but in the meantime we may wish to avoid doubling down.","updated_at":"2021-04-30T19:38:04Z","created_at":"2021-04-30T19:38:04Z","creator_user_login":"benmccann"}
{"number":4599,"comment_id":"928037819","body":"> Some thoughts from the other maintainers: Having a dedicated `bubble:` directive may be preferable to the `on:` directive. `bubble:foo` could do the same thing as what a lone `on:foo` does now, and would become the preferred syntax. `on:foo` is problematic because we can't do `on:foo|preventDefault` to prevent the default without bubbling. `on:foo|preventDefault bubble:foo` would be more explicit and more useful. Obviously we can't change the behaviour of `on:foo` until v4, but in the meantime we may wish to avoid doubling down.\r\n\r\nId be an advocate of providing the bindings as `bubble:<xyz>` but if you are allowing a parent to provide handling of the events of a child, before they are known then it would be sensible to assume you need to pass these in at runtime as some sort of config.\r\n\r\nWould: `<svelte:component this={componentInstance} bubble:config={config} />` be acceptable?  Im not sure it's in the scope of this PR but this would seem a more sensible way to allow bubbling in the spirit of the concept.","updated_at":"2021-09-27T16:18:00Z","created_at":"2021-09-27T16:14:25Z","creator_user_login":"flipkickmedia"}
{"number":4599,"comment_id":"929058951","body":"The merge-conflicts are really small, I also made a fork and fixed them, but would be silly to do a new PR for this, as it is @RedHatter's work.","updated_at":"2021-09-28T10:24:16Z","created_at":"2021-09-28T10:24:16Z","creator_user_login":"Florian-Schoenherr"}
{"number":4599,"comment_id":"938213834","body":"Here is an RFC that I wrote which proposes another possible solution: https://github.com/sveltejs/rfcs/pull/60","updated_at":"2021-10-07T23:01:50Z","created_at":"2021-10-07T23:01:38Z","creator_user_login":"Tropix126"}
{"number":4599,"comment_id":"1052463856","body":"Seems like @RedHatter has not been active on GitHub for a while\r\nIs there some problems with the review? Seems like this PR should have been merged at least a year ago","updated_at":"2022-02-26T19:00:41Z","created_at":"2022-02-26T19:00:41Z","creator_user_login":"IgorLo"}
{"number":4599,"comment_id":"1052526849","body":"It needs more work. It breaks a lot of the tests but in actual use, Ive not found a single problem using it. Maybe in SSR it presents problems. Ive since done some updates to it so once Ive revisited this (Im using this in a production system) Ill push these changes and see if I can get it to pass the tests.","updated_at":"2022-02-26T19:52:38Z","created_at":"2022-02-26T19:52:38Z","creator_user_login":"flipkickmedia"}
{"number":4237,"comment_id":"572754266","body":"I found https://github.com/romkor/svelte-portal","updated_at":"2020-01-09T21:02:29Z","created_at":"2020-01-09T21:02:29Z","creator_user_login":"frederikhors"}
{"number":4237,"comment_id":"572806119","body":"Could be a bit simpler\r\n\r\n```html\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\tlet ref;\r\n\tonMount(() => document.body.appendChild(ref));\r\n</script>\r\n\r\n<div class=\"portal\" bind:this={ref}>\r\n\t<slot></slot>\r\n</div>\r\n```","updated_at":"2020-01-09T23:40:54Z","created_at":"2020-01-09T23:35:22Z","creator_user_login":"PatrickG"}
{"number":4237,"comment_id":"572833172","body":"@PatrickG, You forgot `onDestroy()`.","updated_at":"2020-01-10T01:31:30Z","created_at":"2020-01-10T01:31:30Z","creator_user_login":"frederikhors"}
{"number":4237,"comment_id":"572835329","body":"You don't need the onDestroy. Svelte removes the element anyway.\r\nYou can event do it like that:\r\n\r\n```html\r\n<script>\r\n\tlet ref;\r\n\t$: ref && document.body.appendChild(ref);\r\n</script>\r\n\r\n<div class=\"portal\" bind:this={ref}>\r\n\t<slot></slot>\r\n</div>\r\n```","updated_at":"2020-01-10T22:11:09Z","created_at":"2020-01-10T01:41:25Z","creator_user_login":"PatrickG"}
{"number":4237,"comment_id":"572845933","body":"Ok. And what If I need to \"append\" it not on body but in another component?\r\n\r\nFor example in `<Sidebar />` already in `App.svelte`?\r\n\r\nI'm using the `id` with `document.getElementById(\"sidebar\")` right now but I'm wondering if there is a better way.\r\n\r\nAnd sometimes (based on routing or custom logic, maybe behind a Svelte `if false`) the sidebar div is not present on the page, so it's a problem.\r\n\r\nI opened this issue to address this \"situation\" \"the right way\".\r\n\r\nYour hint?","updated_at":"2020-01-10T02:31:35Z","created_at":"2020-01-10T02:31:35Z","creator_user_login":"frederikhors"}
{"number":4237,"comment_id":"572850638","body":"That's not the right place to ask this kind of questions, you should discuss this on discord.\r\nYou could do something like this\r\n\r\n```html\r\n<script>\r\n  // App.svelte\r\n  import Whatever from './Whatever.svelte';\r\n  import Sidebar from './Sidebar.svelte';\r\n</script>\r\n\r\n<Sidebar Child={Whatever} />\r\n```\r\n\r\n```html\r\n<script>\r\n  // Sidebar.svelte\r\n  export Child = undefined;\r\n</script>\r\n\r\n{#if Child}\r\n  <Child />\r\n{/if}\r\n```","updated_at":"2020-01-10T02:55:16Z","created_at":"2020-01-10T02:55:16Z","creator_user_login":"PatrickG"}
{"number":4237,"comment_id":"573004886","body":"@PatrickG this is not what I'm asking, but it's ok.\r\n\r\nTalking about the `onDestroy` question, see here: https://github.com/romkor/svelte-portal/blob/master/src/Portal.svelte#L16-L18.\r\n\r\nThe guy here is using the `onDestroy`.\r\n\r\nIs it wrong?","updated_at":"2020-01-10T11:47:41Z","created_at":"2020-01-10T11:47:41Z","creator_user_login":"frederikhors"}
{"number":4237,"comment_id":"573005302","body":"It's not wrong, just another way.","updated_at":"2020-01-10T11:49:06Z","created_at":"2020-01-10T11:49:06Z","creator_user_login":"PatrickG"}
{"number":4237,"comment_id":"573039205","body":"There's a typo in your code, a double `)` in `...appendChild(ref));`.\r\n\r\nCan you explain it better the magic of this line?\r\n\r\n```svelte\r\n$: ref && document.body.appendChild(ref);\r\n```\r\n\r\nI can open a PR for this example with your amazing code.","updated_at":"2020-01-10T13:40:26Z","created_at":"2020-01-10T13:40:26Z","creator_user_login":"frederikhors"}
{"number":4237,"comment_id":"573145120","body":"`$:` means it's a reactive statement.\r\nAs soon as the value of `ref` changes, it gets executed.\r\n`ref && ...` is the same as `if (ref) { ... }`\r\n\r\nYou better ask such questions on [discord](https://discordapp.com/invite/yy75DKs).","updated_at":"2020-01-10T18:12:12Z","created_at":"2020-01-10T18:10:06Z","creator_user_login":"PatrickG"}
{"number":4237,"comment_id":"576724929","body":"> ```\r\n> <script>\r\n> \tlet ref;\r\n> \t$: ref && document.body.appendChild(ref);\r\n> </script>\r\n> \r\n> <div class=\"portal\" bind:this={ref}>\r\n> \t<slot></slot>\r\n> </div>\r\n> ```\r\n\r\nThis should absolutely be in the svelte examples.\r\n\r\nhttps://svelte.dev/repl/48afb902e70a4349bd0bfbe69d514df1?version=3.17.2 here is a repl","updated_at":"2020-01-21T15:19:37Z","created_at":"2020-01-21T15:08:59Z","creator_user_login":"vipero07"}
{"number":3768,"comment_id":"546366107","body":"Hmm, I remember looking at how to integrate [FastDOM](https://github.com/wilsonpage/fastdom) but decided against it because I thought I saw these reads already wrapped in a RAF.","updated_at":"2019-10-25T14:00:03Z","created_at":"2019-10-25T14:00:03Z","creator_user_login":"ghost"}
{"number":3768,"comment_id":"546819368","body":"@dkondrad it doesn't group the reads of all components so it's still problematic.\r\n\r\nI ran the test again with 130 bars and the difference (reading the DOM vs not reading) is dramatic.\r\n\r\nWith DOM reads in `beforeUpdate`\r\n![Screenshot 2019-10-28 at 08 05 19](https://user-images.githubusercontent.com/1132575/67658437-d2780f80-f959-11e9-83d3-a0613c14559c.png)\r\n\r\nWithout DOM reads\r\n![Screenshot 2019-10-28 at 08 05 43](https://user-images.githubusercontent.com/1132575/67658431-d015b580-f959-11e9-932c-aa5277e93030.png)\r\n\r\nThe \"run with FastDOM demo\" shows that as long as the reads are grouped, you get a similar chart.\r\nhttps://wilsonpage.github.io/fastdom/examples/animation.html","updated_at":"2019-10-28T07:11:19Z","created_at":"2019-10-28T07:08:48Z","creator_user_login":"rikschennink"}
{"number":3768,"comment_id":"546970244","body":"@rikschennink,\r\nGood to know!\r\n\r\nI added fastdom to your repl and I can achieve the same performance gain that you mentioned.\r\nhttps://svelte.dev/repl/6df68ea571574563b722b7ea157ea98c?version=3.12.1\r\n\r\nI'm not sure if this belongs in the core code though because not everyone will be performing these kinds of reads/writes. Also, it is trivial to integrate fastdom and make use of it, as I've demonstrated.","updated_at":"2019-10-28T14:25:22Z","created_at":"2019-10-28T14:25:22Z","creator_user_login":"ghost"}
{"number":3768,"comment_id":"547085871","body":"@dkondrad While it does group the reads (which is nice) it also results in two `requestAnimationFrame` calls.\r\n\r\n![Screenshot 2019-10-28 at 19 24 55](https://user-images.githubusercontent.com/1132575/67708137-f0765c00-f9bb-11e9-8b10-480adb591378.png)\r\n\r\nThe value retrieved within the `measure` function in `beforeUpdate` is not available in `afterUpdate` or the `template`, (as it's returned in the second raf).","updated_at":"2019-10-28T18:49:10Z","created_at":"2019-10-28T18:32:35Z","creator_user_login":"rikschennink"}
{"number":3768,"comment_id":"808829792","body":"Hi, everybody I am by no means an expert, but popmotion [framesync](https://www.npmjs.com/package/framesync) library might be helpful here because it gives you more control. Framesync can do the following splits a frame into discrete read, update, preRender, render, and postRender steps. If you don't want to use this library you should at least have a look at it's code.","updated_at":"2021-03-28T02:21:03Z","created_at":"2021-03-28T01:39:16Z","creator_user_login":"joseDaKing"}
{"number":3768,"comment_id":"869047985","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:32Z","created_at":"2021-06-26T19:04:32Z","creator_user_login":"stale[bot]"}
{"number":3768,"comment_id":"869048160","body":"Oh my gosh this stale!","updated_at":"2021-06-26T19:05:43Z","created_at":"2021-06-26T19:05:43Z","creator_user_login":"frederikhors"}
{"number":3768,"comment_id":"1000494163","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T19:42:54Z","created_at":"2021-12-23T19:42:54Z","creator_user_login":"stale[bot]"}
{"number":3768,"comment_id":"1000495855","body":"Nope","updated_at":"2021-12-23T19:47:55Z","created_at":"2021-12-23T19:47:55Z","creator_user_login":"frederikhors"}
{"number":7437,"comment_id":"1100571976","body":"I second this, as I suggested something similar: https://github.com/sveltejs/svelte/pull/6898#issuecomment-1046275644\r\nIn my case it would be `this=\"svelte:fragment\"`. :)","updated_at":"2022-04-16T05:02:23Z","created_at":"2022-04-16T05:02:23Z","creator_user_login":"lukaszpolowczyk"}
{"number":7437,"comment_id":"1100589875","body":"Rendering the slot by itself when `this` is falsy would be a breaking change in Svelte. Less important perhaps for `svelte:element` since it's new but `svelte:component` has been around for a long time. Something like a `Fragment` component seems fine for that case. \r\n\r\nFor `svelte:element`, I like @lukaszpolowczyk's  idea of using `\"svelte:fragment\"` to trigger the \"render the slot with no wrapping element\" behavior.\r\n\r\n","updated_at":"2022-04-16T06:58:41Z","created_at":"2022-04-16T06:58:22Z","creator_user_login":"dimfeld"}
{"number":7437,"comment_id":"1100595608","body":"@dimfeld  I believe part of the purpose of `svelte:element` is to be able to bind to a dynamically created element within svelte.\r\n\r\nI am curious why you can't use an `#if` block to do this, as it's only two possibilities, as compared to dozens of HTML elements","updated_at":"2022-04-16T07:36:06Z","created_at":"2022-04-16T07:35:34Z","creator_user_login":"AlbertMarashi"}
{"number":7437,"comment_id":"1100596053","body":"Contrived example and you could definitely make a component to make it easier to manage, but basically this:\r\n\r\n```\r\n{#if element}\r\n  <svelte:element this={element}>\r\n    500 lines of markup\r\n  </svelte:element>\r\n{:else}\r\n  same 500 lines of markup\r\n{/if}\r\n```","updated_at":"2022-04-16T07:37:45Z","created_at":"2022-04-16T07:37:45Z","creator_user_login":"dimfeld"}
{"number":7437,"comment_id":"1100669166","body":"> Rendering the slot by itself when `this` is falsy would be a breaking change in Svelte. Less important perhaps for `svelte:element` since it's new but `svelte:component` has been around for a long time. Something like a `Fragment` component seems fine for that case. \n> \n> \n> \n> For `svelte:element`, I like @lukaszpolowczyk's  idea of using `\"svelte:fragment\"` to trigger the \"render the slot with no wrapping element\" behavior.\n\nI may be mistaken here, but wouldn't it constitute as a breaking change if this change were to break projects that are currently working?\n\nI believe this change would do the opposite; it would not break any working codebases, but it would cause Svelte to see `this={condition && MyComponent}`, as valid where it presently throws an error in such cases (when the returned value is falsy or nullish). Any codebases that currently employ this syntax would be potentially erroneous already; this change would change that to make it an acceptable syntax.\n\n(Again, I may very we'll be mistaken here ‚òùüèº)\n\nYes, I also really like @lukaszpolowczyk's idea of being able to use `svelte:fragment` as the `this` value, and I think it could be valuable if supported for both `svelte:component` as well as the new `svelte:element`. I opened another feature request related to this specifically (#7396), but it was closed with the reasoning that `svelte:fragment` is not an actual variable or class that can be referenced at runtime, though I'd think the compiler could be adjusted to accommodate for a change like this. _This_ issue birthed from that issue's resolution.","updated_at":"2022-04-16T13:51:51Z","created_at":"2022-04-16T13:51:51Z","creator_user_login":"brandonmcconnell"}
{"number":7437,"comment_id":"1100717730","body":"The current (and officially documented) behavior of svelte:component is to render nothing if `this` is falsy. See https://svelte.dev/repl/654a4be7e34e4aec81a6fb48c5e9a30c?version=3.47.0","updated_at":"2022-04-16T18:54:10Z","created_at":"2022-04-16T17:43:29Z","creator_user_login":"dimfeld"}
{"number":7437,"comment_id":"1101012629","body":"Great call-out, @dimfeld. I was mistaken here and thought I had seen a similar example throw an error.\n\nMy suggestion would then be to support `svelte:fragment` per my previous request (#7396), and @lukaszpolowczyk's suggestion in #6898.\n\nSeeing as those were closed and this current suggestion would be a breaking change, I will close this ticket. Thanks, all. üëãüèº","updated_at":"2022-04-29T04:24:25Z","created_at":"2022-04-18T01:37:29Z","creator_user_login":"brandonmcconnell"}
{"number":7437,"comment_id":"1105937010","body":"I agree there should be a way of conditionally rendering some content in a component or element with a single tag. I'm currently using the svelte component below to handle this, but a built-in solution would be preferable.\r\n\r\n```\r\n<script>\r\n  export { this_ as this }\r\n\r\n  let this_\r\n</script>\r\n\r\n{#if this_ === '#'}\r\n  <slot />\r\n{:else if typeof this_ === 'string'}\r\n  <svelte:element this={this_} {...$$restProps}>\r\n    <slot />\r\n  </svelte:element>\r\n{:else}\r\n  <svelte:component this={this_} {...$$restProps}>\r\n    <slot />\r\n  </svelte:component>\r\n{/if}\r\n```","updated_at":"2022-04-22T02:25:16Z","created_at":"2022-04-22T02:20:58Z","creator_user_login":"ghost"}
{"number":7437,"comment_id":"1370081148","body":"Curious if anyone has an argument _against_\r\n\r\n```\r\n<svelte:element this=\"svelte:fragment\" /> == <svelte:fragment />\r\n```","updated_at":"2023-01-03T18:14:08Z","created_at":"2023-01-03T18:14:08Z","creator_user_login":"janosh"}
{"number":7703,"comment_id":"1190594603","body":"Tests are failing with following error: `ReferenceError: HTMLElement is not defined`\r\n\r\n_edited_\r\n\r\nIs this whole `if` block just to make the tests pass? Or is there also another reason behind it?\r\nhttps://github.com/sveltejs/svelte/pull/7703/files#diff-da9bae4e28c441de5ba3a074e30775fe69109100b3d921ad8f2592d93cd67b7fR180","updated_at":"2022-07-21T07:21:10Z","created_at":"2022-07-20T18:07:38Z","creator_user_login":"ivanhofer"}
{"number":7703,"comment_id":"1192262429","body":"Note that `Object.create(null)` is not the same as `{}`: https://stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as","updated_at":"2022-07-22T07:17:01Z","created_at":"2022-07-22T07:17:01Z","creator_user_login":"MathiasWP"}
{"number":7703,"comment_id":"1192286395","body":"> Note that `Object.create(null)` is not the same as `{}`: [stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as](https://stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as)\r\n\r\nTIL. I wasn't aware of that difference. Thanks for posting the SO link!","updated_at":"2022-07-22T07:48:06Z","created_at":"2022-07-22T07:48:06Z","creator_user_login":"ivanhofer"}
{"number":7703,"comment_id":"1192478920","body":"I have updated the size chart above. The bundle size is 20 bytes less then the current master branch. Not that much, but something ^^.\r\n\r\nBy using `{}` instead of `Object.create(null)` it could be reduced even further. I stumbled across [this blog post from 2017](https://codeburst.io/performance-creating-map-object-create-null-d9265331f0d4) and it seems that the raw `{}` is more performant. A quick test in on my machine came to similar results.\r\nAny reason why `Object.create(null)` was chosen? Is it really needed to get rid of the prototype chain?\r\n(Changing it will probably not have a big impact on performance since it doesn't get called a few thousand times to really feel the difference)","updated_at":"2022-07-22T11:33:06Z","created_at":"2022-07-22T11:33:06Z","creator_user_login":"ivanhofer"}
{"number":7703,"comment_id":"1439441632","body":"@ivanhofer would you be able to fix the merge conflict on this PR? We're trying to get as many outstanding PRs merged as we can in the coming weeks. Thanks!","updated_at":"2023-02-22T04:57:43Z","created_at":"2023-02-22T04:57:43Z","creator_user_login":"benmccann"}
{"number":7703,"comment_id":"1440256957","body":"It's hard to tell because we have no benchmarks testing these things, but how much difference does it make to have all these \"is function\" calls behind one more function? Also `!Object.length` is probably slower than `... === 0`.","updated_at":"2023-02-22T15:28:33Z","created_at":"2023-02-22T15:28:33Z","creator_user_login":"dummdidumm"}
{"number":7703,"comment_id":"1440565115","body":"> It's hard to tell because we have no benchmarks testing these things, but how much difference does it make to have all these \"is function\" calls behind one more function? Also `!Object.length` is probably slower than `... === 0`.\r\n\r\nThe `is_function` call seems to be exactly as performant as the direct usage: https://jsbench.me/ailefztu9k\r\nSame goes for the `!Object.length` vs. `.length === 0` calls: https://jsbench.me/xzleg06cir\r\n\r\nMaybe I test it wrong, please tell me If did a mistake. ","updated_at":"2023-02-22T18:24:20Z","created_at":"2023-02-22T18:23:57Z","creator_user_login":"ivanhofer"}
{"number":7703,"comment_id":"1440650384","body":"@ivanhofer is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22811a69214f8523eaffceecf16f9dc86d6ae1ad57%22%7D%2C%22id%22%3A%22QmWzYoNrBN3esabUox8johffbdgjcQxG4kGg6gZos1Lp7R%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A7703%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-02-22T19:09:20Z","created_at":"2023-02-22T19:09:20Z","creator_user_login":"vercel[bot]"}
{"number":7703,"comment_id":"1440653597","body":"I'm done resolving the merge conflicts.","updated_at":"2023-02-22T19:12:08Z","created_at":"2023-02-22T19:12:08Z","creator_user_login":"ivanhofer"}
{"number":7703,"comment_id":"1446231255","body":"I'm giving this the \"one day\" label because I don't feel confident merging this without having a benchmarking setup in place (which we want to have soon). The microbenchmarks I ran had `typeof function` inlined _very slightly_ ahead.","updated_at":"2023-02-27T12:19:07Z","created_at":"2023-02-27T12:19:07Z","creator_user_login":"dummdidumm"}
{"number":7100,"comment_id":"1005658250","body":"Please elaborate more on what you want to achieve with these global hooks/plugins. You can use the existing lifecycle functions outside of Svelte components just fine, you just need to make sure they are called synchronously during component initialization.\r\n\r\n```\r\n// somejavascripefile.js\r\nimport { onDestroy } from 'svelte';\r\n\r\nfunction watch(stuff) {\r\n  const unwatch = ...;\r\n  onDestroy(() => unwatch());\r\n}\r\n\r\n// svelte component\r\n<script>\r\n  import { watch } from '..';\r\n  watch(() => ..);\r\n</script>\r\n}\r\n```","updated_at":"2022-01-05T12:49:11Z","created_at":"2022-01-05T12:49:11Z","creator_user_login":"dummdidumm"}
{"number":7100,"comment_id":"1005710238","body":"@dummdidumm A simple example plugin could look like \r\n```js\r\n// Plugin\r\nimport {beforeCreate, afterCreate, afterDestroy} from \"svelte\"\r\nvar toCleanup = new Map // instance => handlers[]\r\nvar currentInstance\r\nbeforeCreate(instance => currentInstance = instance) // the component initialization runs between beforeCreate and afterCreate\r\nafterCreate(instance => currentInstance = null)\r\nafterDestroy(instance => {\r\n\tvar handlers = toCleanup.get(instance)\r\n\tif (handlers) {\r\n\t\tunwatch(...handlers)\r\n\t\ttoCleanup.delete(instance)\r\n\t}\r\n})\r\nexport function watch(handler) {\r\n\twatchEffect(handler);\r\n\ttoCleanup.get(currentInstance)?.push(handler) ?? toCleanup.set(currentInstance, [handler])\r\n}\r\n```\r\nYour suggestion can also work in this case but you can't combine the handlers so it can create a lot of closures. Of course these hooks can be used for other meta things that do not involve or are limited to the component calling a function during initialization. A plugin could support asynchronous registration, like how `createEventDispatcher` works. Your suggested example will not support that.","updated_at":"2022-01-05T14:01:31Z","created_at":"2022-01-05T14:01:31Z","creator_user_login":"brandon942"}
{"number":7100,"comment_id":"1013537997","body":"@brandon942\r\n\r\nMan, your issue is so incredibly vague. I tried to make sense of it and I really couldn't. I'm going to give you the benefit of the doubt and assume you're not a troll because your example code felt somewhat legitimate.\r\n\r\nI come from working on a gigantic Angular frontend that is basically like a native app level SPA with tons of state and pages and forms and widgets galore. Angular locks you in to their stupid CLI project setup and Angular modules are basically just a waste of time on top of regular TypeScript imports.  I'm not even sure I can get access to the WebPack config the Angular CLI uses behind the scenes so I can incrementally port components to Svelte.\r\n\r\nNow, the beauty of Svelte is that every `.svelte` file will literally compile to a _single_ JavaScript class. Svelte is basically just a file loader for WebPack or Rollup so that when it sees a file like `UserContactCard.svelte`, it runs the Svelte compiler to turn it into `UserContactCard.js`, with content akin to:\r\n\r\n```JS\r\n// NOTE: this is pseudo-code, look at the Svelte docs to see what the actual method names are\r\n\r\nexport default class UserContactCard {\r\n\r\n    // Svelte-generated code for DOM manipulation..\r\n\r\n    function hookupToDOM(parent, sibling) {\r\n        // ...\r\n    }\r\n\r\n    // Svelte can even add getters/setters for props (inputs and outputs) that will\r\n    // contain generated code to schedule DOM updates when you set the values\r\n\r\n}\r\n```\r\n\r\nThe elegance of this approach is that you can import that Svelte component **as a regular JS class** literally anywhere you want. You can mix and match vanilla JS (with your own custom DOM manipulation code) and Svelte components however you like. `.svelte` files are nothing more than a class boundary.\r\n\r\nThis means adding Svelte to a React or Vue project is as easy as adding the Svelte plugin for WebPack or Rollup (whichever you are using), write some Svelte component(s), and then import them into your TSX/JSX workflow. Use teardown hooks in your React component to then tell the Svelte child component to tear itself down. If you have a vanilla JS/TS module for UI like modals or popup notifications (\"toasts\"), you can add a function to that file that takes a Svelte component for a custom toast and then calls its `hookupToDOM(...)` (or whatever the real method name is) with your toast container DOM element reference that your code creates at the root of the DOM on page load or whatever.\r\n\r\nRegarding the thing you said about interop with `{#each}`, I am not sure, but we may have the same opinions there. Like I said, I work on a big app which essentially talks to a bunch of CRUD (create-update-delete) APIs with `GET` requests to refresh the whole list of items from the database. My TypeScript code makes heavy use of a custom `SubscribableList` interface which is basically like any pub-sub observable (Svelte stores and others), except it can either emit a brand new array of objects (when information is refreshed from the backend) or it can emit more fine-grained events like \"an item was modified\" or \"an item was deleted\". I compose these lists to do simple operations like filtering (whenever the filtered list gets an \"item was added\" event, it only has to run the predicate on that ONE item instead of the whole array again), and also to do aggregate for one-to-many and other relations between collections. The frontend is sort of like a reactive SQL engine, and every list and table in the UI is sort of like a top-level query that needs to get granularly updated whenever one of the data sources further down in the pipeline gets updated. It would be cool if I could custom hook into Angular's `*ngFor` or Svelte's `{#each}` to explicitly tell it \"hey this ONE item was added, you don't need to a diff of the whole list\". AFAIK, none of the frameworks support that, and if you want it, you have to manually write the DOM manipulation code yourself--which you can easily do with Svelte by binding an element in the markup to a variable and then passing that DOM element variable along to your own list/table rendering code.\r\n\r\nAs far as \"plugins\" go, Svelte seems like it hit a sweet spot for simplicitly and elegance. Like I said, you can also mix and match it with vanilla JS when you need to write custom code for performance (like rendering big data tables intelligently). It does not try to add too many fancy abstractions over the native DOM elements and it does not try to hide stuff from you and take over your whole life with an enterprise workflow (lookin' at you, Angular). Probably best not to try and make Svelte yet another \"do it ALL\" highly opinionated framework, and keep it at a lower-level so you can mix and match it just like you build up trees of functions in any programming language.","updated_at":"2022-01-14T23:22:33Z","created_at":"2022-01-14T23:22:12Z","creator_user_login":"samclaus"}
{"number":7100,"comment_id":"1013541437","body":"Also, what do you mean by \"serious frameworks like Angular and React\"?  Angular is heavily opinionated, but I would argue it gets a number of things wrong, and that quickly becomes a problem when you're locked into the workflow with a gigantic application and you want to shop for alternatives. Svelte may not have an equivalent for Angular Material, but I literally skipped all the other \"1st party\" parts of Angular like the HttpClient (I just use a thin layer on top of `fetch` API) because I despise RxJS and I think its a way for people to keep busy without actually doing much--maybe I'm just not smart enough to understand RxJS though..","updated_at":"2022-01-14T23:31:34Z","created_at":"2022-01-14T23:31:34Z","creator_user_login":"samclaus"}
{"number":6844,"comment_id":"944892141","body":"That seems extremely weird. Have you tried reproducing this on a Mac running an Intel processor? Because I see \"CPU: (8) arm64 Apple M1\" and I think about the issues one of my colleagues, who has a new Mac, has run into with NPM packages containing pre-built binaries for Intel. I wonder if the architecture is causing you to pull in an older version of some NPM dependency, which contains a bug that's fixed in a later release and is triggering this behavior.\r\n\r\nAlso, have you tried reproducing this on any Linux machines? If you have access to a Raspberry Pi (which runs on an ARM architecture chip), perhaps you could try this repro on a Pi.","updated_at":"2021-10-16T10:10:01Z","created_at":"2021-10-16T10:10:01Z","creator_user_login":"rmunn"}
{"number":6844,"comment_id":"946580546","body":"Yes, the same happens on a RaspberryPi:\r\n\r\n  System:\r\n    OS: Linux 4.19 Raspbian GNU/Linux 10 (buster) 10 (buster)\r\n    CPU: (4) arm ARMv7 Processor rev 4 (v7l)\r\n    Memory: 155.99 MB / 874.53 MB\r\n    Container: Yes\r\n    Shell: 5.0.3 - /bin/bash\r\n  Binaries:\r\n    Node: 14.18.1 - /usr/bin/node\r\n    npm: 6.14.15 - /usr/bin/npm\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.56.3\r\n    svelte: ^3.0.0 => 3.42.4\r\n\r\nI got these two warnings when running npm install:\r\n\r\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules/fsevents):\r\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"arm\"})\r\n\r\n(Edit: These warnings do not appear when running npm install on a mac M1)\r\n\r\nI Will test it on a mac with an Intel processor next.\r\n\r\n","updated_at":"2021-10-19T10:27:41Z","created_at":"2021-10-19T10:15:25Z","creator_user_login":"Karlo-Emilo"}
{"number":6844,"comment_id":"946589320","body":"At the moment, I do not have the time to isolate the bug in a public repository. But I can grant access on request to a private repository with the whole project where the bug has emerged.","updated_at":"2021-10-19T10:28:19Z","created_at":"2021-10-19T10:28:19Z","creator_user_login":"Karlo-Emilo"}
{"number":6844,"comment_id":"946648553","body":"I'd be willing to try to reproduce the bug on my Linux machine (with an Intel processor). My public SSH key is:\r\n\r\n```plaintext\r\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCk1jqwWJQNbU2wIxDnu9LWXNMidPsghs1UGrdMu+0uRZGJYwajk3WVKwbXkPqlAou7vBayKK1eNBCvZRLcDNTl3VelWLD2lCPePjxRTM1uiG/hJ3KSJ22uDeztTgsgTugi161zvklQfm5A6im0HyvGbDha5aPq3rjz6EgqXq0Yg68Wl9HDE03t2IcF9alGbntZln+1yQPuXwDHqhACPyYJqxwn0z4WUorE3EUnqW2p05S7Wcsx2lt8D/23yd1n8gqesiSPlUNIHGFqPQ3Vc22aGupnQw/N5Z8j3UQNJUtgJSEwUxMog2amKE4F9kPd4MYrSzmfXUqDMn28l3xVPzpmwoPzHeezd6uwHfk/83/mZAOVIsTAb5Qdg76FreTXuKe+7dG0/drBvkcNWP/suEODR2I9O0PcW2XYfVVc6FTDhaaWa5NNxEhJUwzstQeRra2OLfVpOr7/I4P64P+83gD3Mgo0OkRDsuAcwkKux1itLE4CPWBzZ1cxJA6myvkV6AursB3UOBQzV3Rq7ynF9ZwP6xgRaD6KxRHSBqqn2jzeNnzJmU9jDScOcSrSWUdWiCgD/GxgJBqewxwmFSFBZvM1gpIfNMWYQNOt7LXHyFHp+0eaYRofkcEhdbrdFkuneaE2/nPgT+68gBH29ZATMDeXtQWsNZhK0sOnJSvIfMcH+w== rmunn@github\r\n```\r\n\r\nIf you need to email me the repo URL or anything else without putting it in the issue comments, you can email me at (my Github username) at p o b o x dot com.","updated_at":"2021-10-19T11:57:11Z","created_at":"2021-10-19T11:57:11Z","creator_user_login":"rmunn"}
{"number":6844,"comment_id":"947008804","body":"@rmunn I have sent you an email.","updated_at":"2021-10-19T18:46:15Z","created_at":"2021-10-19T18:46:15Z","creator_user_login":"Karlo-Emilo"}
{"number":6844,"comment_id":"947322822","body":"Can reproduce on Linux with an Intel processor. Furthermore, I think I've isolated the cause of the bug, which is probably a regex. This block right here is the key:\r\n\r\n```js\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i<25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n```\r\n\r\nIf you place `// A comment` *before* that `if` block, the bug does not trigger. If you place it *after* the `if` block (anywhere after the if block), the bug triggers, and everything below the comment is not compiled.\r\n\r\nFurthermore, I experimented a bit more and found the following:\r\n\r\n**This triggers the bug:**\r\n```js\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i<25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n    // A comment\r\n```\r\n\r\n**This does NOT trigger the bug:**\r\n```js\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i< 25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n    // A comment\r\n```\r\n\r\n**This also does not trigger the bug:**\r\n```js\r\n    if(matrix.length < 25) {\r\n        for(let i = 0; i<25; i++){\r\n            matrix.push(false);\r\n        }  \r\n    };\r\n    // A comment >\r\n```\r\n\r\nAdding a space between the `<` and 25 in `i<25` caused the bug to not trigger. Adding a `>` character inside the comment also caused the bug to not trigger.\r\n\r\nBased on those findings, I conclude that there's a regex somewhere in the Svelte compiler that's looking for closing tags, probably because it needs to find a closing `</script>` tag. I don't know how this is happening exactly, but it looks like the regex is seeing the `<` followed by a non-whitespace character in `i<25`, then later the `/` of the comment, and later the `>` of the `</script>` tag. If I put a `>` at the end of the comment, that makes the regex not find `<.*/.*script>` and so the regex doesn't swallow up the rest of the code.\r\n\r\nTo quickly solve your issue, @Karlo-Emilo, I suggest putting spaces around any `<` operators in your code, which will make the bug not trigger.\r\n\r\nI'll see if I can isolate a repro. I did find that when I created a similar `for` loop with `i<25` in a new Svelte-Kit project, which uses Vite rather than Rollup as the bundler, the bug did *not* trigger. So I suspect that the bug may be in the Rollup Svelte plugin. Which means I might not be able to isolate a repro easily, as I'm not familiar with the Rollup Svelte plugin. But I'll give it a shot, and if I have any success, I'll post a repro repo here.","updated_at":"2021-10-20T04:39:24Z","created_at":"2021-10-20T04:39:24Z","creator_user_login":"rmunn"}
{"number":6028,"comment_id":"787128884","body":"you can do this:\r\n```html\r\n<!-- MyComponent.svelte -->\r\n<script>\r\nimport { get_current_component } from \"svelte/internal\"\r\nconst self = get_current_component()\r\n</script>\r\n```\r\n\r\nin case you wonder, this is not officially documented. I first heard of it asking a question in the [Svelte Discord channel](https://discord.com/channels/457912077277855764/457912077277855766), now I always take a look at \"svelte/internal\" module if I need something exotic.\r\n","updated_at":"2021-02-27T20:21:35Z","created_at":"2021-02-27T20:13:54Z","creator_user_login":"vatro"}
{"number":6028,"comment_id":"787410861","body":"Thanks, it works perfect. Svelte/internal is good start point to see, how it works.\r\n\r\nI have asked this question on svelte discord channel, I have got here 2 workarounds, which are described in this issue.\r\n\r\nI am not closing this issue, it's question, whether not to publish get_current_component in public API.","updated_at":"2021-02-28T07:33:46Z","created_at":"2021-02-28T07:33:46Z","creator_user_login":"janproch"}
{"number":6028,"comment_id":"806888981","body":"You can do that, although it's strange\r\n```js\r\n<script>\r\nconst self = arguments[0]\r\n</script>\r\n```","updated_at":"2021-03-25T14:50:56Z","created_at":"2021-03-25T14:50:56Z","creator_user_login":"cereschen"}
{"number":6028,"comment_id":"869047996","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:37Z","created_at":"2021-06-26T19:04:37Z","creator_user_login":"stale[bot]"}
{"number":6028,"comment_id":"910038475","body":"Here's another use-case: I'm working on some inline-editing where you can edit individual properties of a document. Clicking the property turns it into an appropriate `<input />` (slots etc.). Only a single property should be editable at any given time. Synchronizing this using `focus/blur/focusin/focusout/click` is painful. Hence I have a mutex store in `<script context=\"module\">` that holds a reference to the current `InlineEdit` instance. When the user clicks a property they want to edit, it sets the mutex and makes it editable. Now if another component was already in editing-mode it will automatically stop because it subscribed to the store and realizes it no longer has the mutex.\r\n\r\nMoving `get_current_component()` away from `/internal` would make me more confident this implementation will continue to work.\r\n\r\nA simple workaround would be to give each component an id (hold a counter in `<script context=\"module\">` as usual) but why, when we can compare references.\r\n\r\nEdit: Just ran into a second use-case where I think using `get_current_component` is appropriate. I have a form with several components that abstract away complex inputs. E.g. one `AttachmentsInput` that allows uploading/adding/removing files. Now I want to disable submitting of the form while any of the inputs is working (e.g. for `AttachmentsInput` while files are being uploaded). Naturally I'm using `setContext` to pass information from the form down to all of these inputs. The context is a store with a `Set` (potentially `WeakSet`) of active components. Now any of those inputs that the user needs to wait on can add themselves (`get_current_component()`) to said `Set`. And then `disabled={$activeInputs.size > 0}` on the submit button and boom, Svelte magic. Alternative approaches would be a counter which active components increment/decrement (error prone, e.g. double increment, the `Set` just works).\r\n\r\nEdit2: Possible clean API https://github.com/sveltejs/rfcs/pull/58","updated_at":"2021-09-24T11:04:37Z","created_at":"2021-09-01T08:01:11Z","creator_user_login":"Prinzhorn"}
{"number":4848,"comment_id":"999754647","body":"I think I'm being bitten by this too, with the result that one of my components renders an infinite loop during SSR","updated_at":"2021-12-22T17:41:55Z","created_at":"2021-12-22T17:41:55Z","creator_user_login":"aredridel"}
{"number":4848,"comment_id":"999757703","body":"I have three components, a root component and two child components, all binding the same variable. In the child components, that property is optional (has a default value of false)","updated_at":"2021-12-22T17:47:28Z","created_at":"2021-12-22T17:47:28Z","creator_user_login":"aredridel"}
{"number":4848,"comment_id":"999764683","body":"Notably, they're being bound to the value of a writable store in my case.","updated_at":"2022-01-10T16:36:23Z","created_at":"2021-12-22T17:59:18Z","creator_user_login":"aredridel"}
{"number":4848,"comment_id":"1159552031","body":"I want to say that this feature is important not only for props binding, but also for context communication between a parent to a child component.\r\n\r\nFor example, see @Rich-Harris [answer in Stackoverlow](https://stackoverflow.com/a/56826594/2968864), explaining how you can implement a tab list using the context API. The user should have code [like this](https://svelte.dev/repl/8e68120858e5322272dc9136c4bb79cc?version=3.5.1) (a REPL refed in Stackoverflow's answer).\r\nAssume you want for example to display the number of tabs in the parent for example, you can't do this on SSR, unless you'd allow reactivity as demanded here.\r\n\r\nI'd like to here what Svelte's main developers thinks about this issue.","updated_at":"2022-06-18T20:05:52Z","created_at":"2022-06-18T20:05:52Z","creator_user_login":"Tal500"}
{"number":6548,"comment_id":"883452287","body":"The JS output shows that `getContext` is called once immediately and once in the `c` (aka create) function of the component.\r\n\r\nIndependently of that I'm unsure if this should even be allowed. Calling `getContext` only works at component initialization, and moving that inside the template makes it prone for \"called after component initialization\" errors.","updated_at":"2021-07-20T14:45:07Z","created_at":"2021-07-20T14:45:07Z","creator_user_login":"dummdidumm"}
{"number":6548,"comment_id":"883479147","body":"FWIW, I don't think many people use them directly inside the template. I only put them there to make a minimal reproducible. In my production setting, getContext is called inside a reactive store - these should AFAIK always register themselves at component initialization.\r\n\r\n","updated_at":"2021-07-20T15:19:19Z","created_at":"2021-07-20T15:19:19Z","creator_user_login":"jakobrosenberg"}
{"number":6548,"comment_id":"884634242","body":"you are trying to read from the context, that you are setting for the same component?\r\n\r\nwhy not have it as a variable, and read it directly?\r\n\r\n```svelte\r\n<script>\r\n  import { setContext, getContext } from 'svelte'\t    \r\n  let color = 'green';\r\n  setContext('myClass', color)\r\n</script>\r\n\r\ncolor1: {color}\r\n<br />\r\ncolor2: <input value={color} />\r\n```","updated_at":"2021-07-22T03:30:33Z","created_at":"2021-07-22T03:30:33Z","creator_user_login":"tanhauhau"}
{"number":6548,"comment_id":"884656046","body":"@tanhauhau if I read it directly, it would be a terrible reproducible. üôÇ\r\n\r\nThis isn't an issue I'm facing. Just strange behavior I came across while debugging a related issue. For anyone using a function or store in their template that uses get/setContext, this could be an issue.\r\n\r\nMy actual issue was a `getContext` in a derived store which wouldn't read the nearest context, even if the context was set by a grandparent component. I ended up solving it by using `getContext` in the main store and then passing it to the derived store.","updated_at":"2021-07-22T04:58:14Z","created_at":"2021-07-22T04:58:14Z","creator_user_login":"jakobrosenberg"}
{"number":6548,"comment_id":"884946653","body":"probably can show a minimal repro on how you use `getContext` in a derived store?\r\n\r\ni wanna see if it is an actual bug, or its something we need to improve on our tutorial / docs","updated_at":"2021-07-22T14:13:33Z","created_at":"2021-07-22T14:13:33Z","creator_user_login":"tanhauhau"}
{"number":6548,"comment_id":"904949032","body":"I think the way that this should be getting handled is that all calls to `getContext` (or other things that can only be called during component initialization) in the template should be an error. I'm a little surprised it's not already, and if there's a bug here, I think that's probably it. Presumably, we need to be a little more careful about clearing `current_component` earlier in the rendering of this component.","updated_at":"2021-08-24T20:23:52Z","created_at":"2021-08-24T20:23:52Z","creator_user_login":"Conduitry"}
{"number":6548,"comment_id":"904954874","body":"Adding a `set_current_component(null);` before https://github.com/sveltejs/svelte/blob/5cfefeb6e72f8085e418150b644cdc4b4f6f260d/src/runtime/internal/Component.ts#L158 appears to prevent this while not breaking any existing tests. I'm not entirely convinced that's the best place to add it, though. More investigation would be required.","updated_at":"2021-08-24T20:33:22Z","created_at":"2021-08-24T20:33:22Z","creator_user_login":"Conduitry"}
{"number":5903,"comment_id":"762657453","body":"Agree with that. From a tooling perspective it would be ideal to only allow alphanumeric characters and `$_` and _maybe_ `-` ","updated_at":"2021-01-19T07:31:16Z","created_at":"2021-01-19T07:31:16Z","creator_user_login":"dummdidumm"}
{"number":5903,"comment_id":"762776095","body":"Is this actually causing a bug, or is it just unsightly?","updated_at":"2021-01-19T11:15:15Z","created_at":"2021-01-19T11:15:15Z","creator_user_login":"Conduitry"}
{"number":5903,"comment_id":"762797943","body":"From a tooling perspective it causes some problems because JSX/TSX, which code is transformed to for intellisense features, is more restrictive, but I've not yet encountered an actual bug. So from my point of view it would be more of a \"more well defined\" thing.","updated_at":"2021-01-19T12:01:39Z","created_at":"2021-01-19T12:01:27Z","creator_user_login":"dummdidumm"}
{"number":5903,"comment_id":"869061425","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:31Z","created_at":"2021-06-26T21:03:31Z","creator_user_login":"stale[bot]"}
{"number":5903,"comment_id":"869062056","body":"I still think this would be good to make more strict. It would make tooling easier. Strictly speaking it's probably a breaking change though.","updated_at":"2021-06-26T21:09:33Z","created_at":"2021-06-26T21:09:33Z","creator_user_login":"dummdidumm"}
{"number":5903,"comment_id":"1000568796","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:51Z","created_at":"2021-12-23T23:55:51Z","creator_user_login":"stale[bot]"}
{"number":5903,"comment_id":"1000706102","body":"Thinking about this differently now. Still would be cool but many libraries take advantage of the more permissive nature of props and events and added things like `-` to their prop names. Also some libraries work around current limitations of event bubbling by using special characters that are not `!` to simulate event modifiers. ","updated_at":"2021-12-24T07:47:41Z","created_at":"2021-12-24T07:47:41Z","creator_user_login":"dummdidumm"}
{"number":4064,"comment_id":"562839214","body":"I wonder if this is caused by the same problem as \r\nhttps://github.com/sveltejs/svelte/issues/3685\r\n","updated_at":"2019-12-07T10:46:31Z","created_at":"2019-12-07T10:46:31Z","creator_user_login":"halfnelson"}
{"number":4064,"comment_id":"562839722","body":"@halfnelson \r\nlooks very similar, agree","updated_at":"2019-12-07T10:54:15Z","created_at":"2019-12-07T10:54:15Z","creator_user_login":"yazonnile"}
{"number":4064,"comment_id":"562840998","body":"I can repro without slots\r\nhttps://svelte.dev/repl/efc4d7292a6549e888c4a0ab98807e61?version=3.16.0\r\n\r\nso I feel it is more likely the same problem, local \"transition_in\" on inner if block \"end\"ing a global outro which means the \"on outro complete\" callbacks aren't called which means the destroy is never called on the other part of the if","updated_at":"2019-12-07T11:10:12Z","created_at":"2019-12-07T11:10:12Z","creator_user_login":"halfnelson"}
{"number":4064,"comment_id":"633864854","body":"Just tested to see if  #4634 fixed it. No such luck, can still reproduce with \r\nhttps://svelte.dev/repl/efc4d7292a6549e888c4a0ab98807e61?version=3.22.3","updated_at":"2020-05-26T07:44:04Z","created_at":"2020-05-26T07:44:04Z","creator_user_login":"halfnelson"}
{"number":3277,"comment_id":"582637130","body":"FYI: still the same glitch in current 3.18.1.","updated_at":"2020-02-05T22:09:12Z","created_at":"2020-02-05T22:09:12Z","creator_user_login":"henrikhermansen"}
{"number":3760,"comment_id":"1030443436","body":"This is pretty similar to https://github.com/sveltejs/svelte/issues/3898 in a lot of ways though a slightly different solution that could be combined with it. I'd be curious to see some benchmark results to see if this still has value after https://github.com/sveltejs/svelte/issues/3898","updated_at":"2022-02-04T23:53:54Z","created_at":"2022-02-04T23:53:35Z","creator_user_login":"benmccann"}
{"number":5281,"comment_id":"678804577","body":"Maybe it's also a bug because every warning should be ignorable? Not sure.","updated_at":"2020-08-23T17:55:27Z","created_at":"2020-08-23T17:55:27Z","creator_user_login":"dummdidumm"}
{"number":5281,"comment_id":"869080645","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:46:44Z","created_at":"2021-06-27T00:46:44Z","creator_user_login":"stale[bot]"}
{"number":5281,"comment_id":"869111174","body":"Still want this","updated_at":"2021-06-27T06:38:49Z","created_at":"2021-06-27T06:38:49Z","creator_user_login":"dummdidumm"}
{"number":5281,"comment_id":"874844113","body":"Looked into this a little. Seems like the problem for all css/js warnings is that the \"should be ignored\"-code does not apply there because the \"ignore next thing\"-logic only runs on the template, not in css/js. That would need to be added I guess.","updated_at":"2021-07-06T15:08:45Z","created_at":"2021-07-06T15:08:45Z","creator_user_login":"dummdidumm"}
{"number":3313,"comment_id":"944340883","body":"Bump. I think this would be a very valuable feature that should not be hard to add, seeing how it basically exists already. \r\n\r\nLooking at [the tutorial](https://svelte.dev/tutorial/debug), the current situation is almost comical. The first sentence there states:\r\n\r\n> Occasionally, it's useful to inspect a piece of data as it flows through your app.\r\n\r\nWell, exactly! Now, when I hear \"inspect a piece of data as it flows through your app\", I don't envision a constant stop/start approach like `@debug` facilitates - and in those cases where I would mainly be interested in the feature (such as debugging event based data interaction between components) the debugger actually interrupts the flow when it hits the breakpoint, rendering the whole feature useless.","updated_at":"2021-10-15T14:19:44Z","created_at":"2021-10-15T14:19:44Z","creator_user_login":"oliversturm"}
{"number":3750,"comment_id":"1001884032","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T05:59:56Z","created_at":"2021-12-28T05:59:56Z","creator_user_login":"stale[bot]"}
{"number":8826,"comment_id":"1606253475","body":"I have also noticed that the output for custom elements are larger in Svelte 4 (~50% larger).\r\n\r\nI have tried to reproduce the difference with a minimal implementation:\r\n1. Created a clean Svelte 3 project (`npm init vite`)\r\n2. Made `Counter.svelte` a custom element, and configured the project to build custom elements.\r\n3. Upgraded to Svelte 4 and compared the output\r\n\r\n[https://github.com/mnorlin/svelte-4-custom-element-issue](https://github.com/mnorlin/svelte-4-custom-element-issue)\r\n\r\n| commit  | description | js output size |\r\n| ------- | ----------- | -------------- |\r\n| 318d240 | Svelte 4    | `7.74 kB`      |\r\n| 22e7f08 | Svelte 3    | `4.58 kB`      |\r\n\r\n\r\n(@sherifsalah: your reproduction don't seem to build, and I think all the bundled CSS in the component makes it hard to compare the output size of the generated javascript, as the size differences probably becomes less significant with more CSS).","updated_at":"2023-06-25T20:30:41Z","created_at":"2023-06-25T20:30:41Z","creator_user_login":"mnorlin"}
{"number":8826,"comment_id":"1607227736","body":"A slight increase in the baseline bundle size is expected, since we're now using a wrapper around the existing Svelte components to create the custom elements. It shouldn't account for that big of an increase though.\r\n\r\nI instead suspect this being due to the CSS being inlined into the JavaScript (else there's no reliable way to load them since shadow dom is used). Could you share your repository where this happens? If that's not possible, what are the compiler options you pass to Svelte?","updated_at":"2023-06-26T11:05:44Z","created_at":"2023-06-26T11:05:44Z","creator_user_login":"dummdidumm"}
{"number":8826,"comment_id":"1607648847","body":"@mnorlin @dummdidumm I used a lot of CSS and sometimes imports from CSS Frameworks and i know all the limitations cause i made a lot of plugins using svelte custom elements, and currently i do my best to manually purge any unsed css based on the used classes' names, anyways in any case logically the same amount of inline CSS shouldn't change in both versions. (10KB of CSS as example shouldn't increase!)\r\nthe main problem here, the size grows exponentially as i mentioned 70KB in svelte 3 became 120KB in svelte 4 so it is up to 100% increase in size!\r\n@dummdidumm sorrowfully i can't share any existing repos that's why i tried to fabricate a close example using an existing repl, if you need me to fabricate another example or fix any issues with the current one i'll gladly do so, i depend a lot on svelte for more than 3 or 4 years now and i really need to help fixing this problem or i'll stuck with svelte 3 for a long time or until i find an alternative. i don't mind a \"slight\" increase in the wrapper as you mentioned maybe 5 or 10 more Kbs not a big deal but not 50Kbs!","updated_at":"2023-06-26T15:07:12Z","created_at":"2023-06-26T14:49:01Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1607714963","body":"I tried to isolate the problem is it JS or CSS and compiled the plugin without any CSS at all and here is the results:\r\nwith Svelte 3:\r\n```\r\nvite v4.3.9 building for production...\r\n‚úì 19 modules transformed.\r\ndist/index.html                54.93 kB ‚îÇ gzip:  7.33 kB\r\ndist/assets/index-260c33d6.js  39.28 kB ‚îÇ gzip: 13.82 kB\r\n‚úì built in 3.85s\r\n```\r\nwith Svelte 4:\r\n```\r\n‚úì 40 modules transformed.\r\ndist/index.html                54.93 kB ‚îÇ gzip:  7.33 kB\r\ndist/assets/index-d5085aed.js  42.51 kB ‚îÇ gzip: 14.60 kB\r\n‚úì built in 4.27s\r\n```\r\nAnd with CSS with Svelte 3:\r\n```\r\n‚úì 19 modules transformed.\r\ndist/index.html                54.93 kB ‚îÇ gzip:  7.33 kB\r\ndist/assets/index-c1c13d88.js  69.78 kB ‚îÇ gzip: 19.79 kB\r\n‚úì built in 4.68s\r\n```\r\nwith Svelte 4:\r\n```\r\n‚úì 40 modules transformed.\r\ndist/index.html                 54.93 kB ‚îÇ gzip:  7.33 kB\r\ndist/assets/index-6a6bdca3.js  106.18 kB ‚îÇ gzip: 22.35 kB\r\n‚úì built in 4.88s\r\n```\r\n\r\nConcluding that the JS difference is `3.23KB` which is not a big deal and with CSS the difference is `36.4KB`\r\n\r\nThe provided example without CSS in Svelte 3:\r\n```\r\n‚úì 8 modules transformed.\r\ndist/index.html                 0.40 kB ‚îÇ gzip: 0.28 kB\r\ndist/assets/index-6028c763.js  15.18 kB ‚îÇ gzip: 6.65 kB\r\n‚úì built in 665ms\r\n```\r\nand without CSS in Svelte 4:\r\n```\r\n‚úì 29 modules transformed.\r\ndist/index.html                 0.40 kB ‚îÇ gzip: 0.28 kB\r\ndist/assets/index-8d43cd03.js  17.97 kB ‚îÇ gzip: 7.53 kB\r\n‚úì built in 774ms\r\n```\r\nWith CSS in Svelte 3:\r\n```\r\n‚úì 8 modules transformed.\r\ndist/index.html                 0.40 kB ‚îÇ gzip: 0.28 kB\r\ndist/assets/index-e5819c2c.js  22.67 kB ‚îÇ gzip: 8.95 kB\r\n‚úì built in 5.24s\r\n```\r\nAnd with CSS in Svelte 4:\r\n```\r\n‚úì 29 modules transformed.\r\ndist/index.html                 0.40 kB ‚îÇ gzip: 0.28 kB\r\ndist/assets/index-d63461f3.js  27.21 kB ‚îÇ gzip: 9.97 kB\r\n‚úì built in 5.30s\r\n```\r\nConcluding that the JS difference is `7.49KB` which is not a big deal and with CSS the difference is `9.24KB`\r\nAnd with @mnorlin example which doesn't have any CSS its `3.16KB`\r\n\r\nSo JS increases as the component grows but not that much, and CSS explodes which is so weird cause its supposed to be a simple same sized string that will be injected into the header.","updated_at":"2023-06-26T15:23:48Z","created_at":"2023-06-26T15:23:48Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1607720725","body":"Quick note: (maybe not related but it affectes the size a tiny bit) there is a lot of fragments in the bundle as well, mostly comes from transition functions i guess!\r\n```\r\nreturn{delay:t,duration:n,easing:s,css:(l,b)=>`\r\n\t\t\ttransform: ${d} scale(${1-a*b});\r\n\t\t\topacity: ${f-c*b}\r\n\t\t`\r\n```","updated_at":"2023-06-26T15:27:20Z","created_at":"2023-06-26T15:27:20Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1609623146","body":"From that comparison, the increase in size is mainly due to the new baseline size and due to the Svelte class names now being applied within Svelte components:\r\n\r\n```diff\r\n-.foo { color: red }\r\n+.foo.svelte-xyz { color: red }\r\n```\r\n\r\nwhich is necessary because internally you can now use Svelte components as normally. This also shows due to the very small difference in size when gzipped as the hashes can be minified very well.\r\n\r\nSo far this all looks like expected, but the increase of almost 100% from 70kb to 120kb still sounds weird - which is why we need a proper reproduction for this.","updated_at":"2023-06-27T14:27:52Z","created_at":"2023-06-27T14:27:26Z","creator_user_login":"dummdidumm"}
{"number":8826,"comment_id":"1620013568","body":"@dummdidumm \r\nI guess i found the problem, there is redundant class names in CSS, i'll share portions of my actual code and the built bundle and you will get the idea.\r\nHere is the actual CSS code:\r\n![image](https://github.com/sveltejs/svelte/assets/6384006/7a8339f2-74a5-4e18-9461-6b39874d5539)\r\nand this is the result:\r\n![image](https://github.com/sveltejs/svelte/assets/6384006/1dee4dc1-bf92-46cf-982d-27ed6cb8e76a)\r\n\r\nAs you can see the class name is written multiple times:\r\n`.svelte-11mb47x.svelte-11mb47x.svelte-11mb47x.svelte-11mb47x::after{box-sizing:border-box}`\r\nwhile we only need it once?!\r\n\r\nAfter manually deleting the redundant `.svelte-11mb47x` and minify the script again it became pretty normal reduced to `83KB`","updated_at":"2023-07-04T10:51:35Z","created_at":"2023-07-04T10:47:35Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1620171720","body":"@dummdidumm can I suggest to have an option to change ‚Äòsvelte-‚Äò prefix to a shorter abbreviation or something to save some bytes! Maybe ‚Äòsv-‚Äò or whatever.","updated_at":"2023-07-04T12:36:38Z","created_at":"2023-07-04T12:36:38Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1620198658","body":"You can do that yourself using the [cssHash option](https://svelte.dev/docs/svelte-compiler#types-compileoptions) - if you're sure that your styles don't need to be scoped in any way, you can just return a single character from that option, which should get your script size down.\r\n\r\nIn the end it won't make a big difference though since most servers will compress everything and those algorithms are very good at shrinking character sequences that appear often.","updated_at":"2023-07-04T13:19:48Z","created_at":"2023-07-04T12:53:57Z","creator_user_login":"dummdidumm"}
{"number":8826,"comment_id":"1620400892","body":"> You can do that yourself using the [cssHash option](https://svelte.dev/docs/svelte-compiler#types-compileoptions) - if you're sure that your styles don't need to be scoped in any way, you can just return a single character from that option, which should get your script size down.\r\n> \r\n> In the end it won't make a big difference though since most servers will compress everything and those algorithms are very good at shrinking character sequences that appear often.\r\n\r\nThat was a side request anyways.. Thank you so much for this info, i know it will not make a big difference in small elements but in my case it will save a few KBs.\r\n\r\nApart from that i hope that my last example is clear enough, the same redundancy problem exists in the original provided example as well like this `.svelte-1wbq7af.svelte-1wbq7af`","updated_at":"2023-07-04T14:54:34Z","created_at":"2023-07-04T14:54:34Z","creator_user_login":"sherifsalah"}
{"number":8826,"comment_id":"1620422865","body":"The issue is somewhat more general, [example REPL](https://svelte.dev/repl/83481cf0c4654811beef405de21b0d6e?version=4.0.3). We'll look into whether or not it's safe to deduplicate the hash in that case.","updated_at":"2023-07-04T15:09:39Z","created_at":"2023-07-04T15:09:39Z","creator_user_login":"dummdidumm"}
{"number":8826,"comment_id":"1620426800","body":"> The issue is somewhat more general, [example REPL](https://svelte.dev/repl/83481cf0c4654811beef405de21b0d6e?version=4.0.3). We'll look into whether or not it's safe to deduplicate the hash in that case.\r\n\r\nOooh wow, never noticed that before (nobody digs into the generated css code i guess üòÑ), i hope you can find a solution for that, thanks.","updated_at":"2023-07-04T15:12:41Z","created_at":"2023-07-04T15:12:41Z","creator_user_login":"sherifsalah"}
{"number":8351,"comment_id":"1454735362","body":"Does appending `|local` to your transition directive help as a workaround for now? e.g., `transition:fade|local`","updated_at":"2023-03-04T13:10:52Z","created_at":"2023-03-04T13:10:52Z","creator_user_login":"s3812497"}
{"number":8351,"comment_id":"1455867760","body":"No! Then there is no transition at all.","updated_at":"2023-03-06T10:25:42Z","created_at":"2023-03-06T10:25:42Z","creator_user_login":"Vanilagy"}
{"number":8351,"comment_id":"1456033030","body":"Right. I‚Äôm not sure if this is an issue with transitions.\r\nThe if block in your component is never false, so the transition never takes effect. To get the fading effect, you can remove it (since the outer component already has an if block) or ensure the toggle changes the component state to true / false","updated_at":"2023-03-06T12:18:42Z","created_at":"2023-03-06T12:18:42Z","creator_user_login":"s3812497"}
{"number":8351,"comment_id":"1456686606","body":"Sure, the inner `if` block is never false, yet the component gets unmounted. Clearly, according to my intuition, this should be playing any \"out\" transitions. At the very least, having the component Comp never disappear despite it clearly being excluded by the outer `if` doesn't feel right.","updated_at":"2023-03-06T18:11:55Z","created_at":"2023-03-06T18:11:55Z","creator_user_login":"Vanilagy"}
{"number":8351,"comment_id":"1456688352","body":"An `if` that is never false should be indistinguishable in behavior from not being there at all, but here this is not the case.","updated_at":"2023-03-06T18:12:49Z","created_at":"2023-03-06T18:12:49Z","creator_user_login":"Vanilagy"}
{"number":8351,"comment_id":"1504234946","body":"I have encountered this issue in production where a component is getting stuck on the screen when it receives a store update during its out transition. Here is a repl reproducing this bug: https://svelte.dev/repl/8e158d1f24fc4dd08f8bad9808ca6169?version=3.58.0\r\n\r\nThe requirements to reproduce are an out transition within an if block that depends on a store that is updated after the component is transitioning out due to an external condition.","updated_at":"2023-04-12T00:43:10Z","created_at":"2023-04-11T23:02:41Z","creator_user_login":"jrouleau"}
{"number":8351,"comment_id":"1575862110","body":"@Vanilagy you have a small error in the REPL:\r\n\r\n```html\r\n<script>\r\n\timport { things } from './state.js';\r\n\timport { fade } from 'svelte/transition';\r\n\t\r\n\t$: thing = $things[0];\r\n</script>\r\n\r\n<div>\r\n       <!-- change this -->\r\n       <!-- {#if thing} -->\r\n\r\n      <!-- to this: -->\r\n\t{#if !thing.done}\r\n\t\t<p out:fade style=\"background: blue; color: white\">\r\n\t\t\tThis should be fading out when toggling {thing.text}\r\n\t\t</p>\r\n\t{/if}\r\n</div>\r\n```\r\nYour toggle function to update the `things` store never sets the first item (thing) to a falsy value, so the if block and transition never trigger.","updated_at":"2023-06-05T00:28:06Z","created_at":"2023-06-05T00:28:06Z","creator_user_login":"jrmoynihan"}
{"number":8351,"comment_id":"1576189722","body":"@jrmoynihan No, this is intentional. `{#if thing}` should be equivalent to no if, since `thing` never goes away. However, the component `Comp` (which is properly conditionally rendered in App.svelte), fails to fade out.","updated_at":"2023-06-05T07:17:32Z","created_at":"2023-06-05T07:17:32Z","creator_user_login":"Vanilagy"}
{"number":8351,"comment_id":"1602266945","body":"I've managed to [reproduce the bug](https://github.com/EzraEn1/transition-bug) using `goto()` and a layout component (not actual layout), [and it seems that it also affects `capture()`](https://discord.com/channels/457912077277855764/1121233902158237848)","updated_at":"2023-06-22T08:56:02Z","created_at":"2023-06-22T08:56:02Z","creator_user_login":"ezra-en"}
{"number":8351,"comment_id":"1602839351","body":"I've made some progress on tracking down where the issue may be using the REPL @Vanilagy provided, but here's a video to show y'all that I'm not insane: \r\n\r\nhttps://github.com/sveltejs/svelte/assets/7076802/dd6e8eab-37c6-4393-8ef9-3edd723dc7cd\r\n\r\nPresumably it's got something to do with what `transition_out()` does, but this issue has me wondering if it's something to do with the animation engine...\r\n\r\n","updated_at":"2023-06-22T15:25:24Z","created_at":"2023-06-22T15:25:24Z","creator_user_login":"ezra-en"}
{"number":8351,"comment_id":"1602988484","body":"It's been a couple months since I looked at this, but IIRC, at least for the example above, it's related to how transitions are tied into the `if` blocks and how the `if` blocks respond to reactive updates. When an `if` block toggles false, it propagates  `transition_out` down the tree. When it toggles true, `transition_in`. This creates a race-condition where if there is a component with an out transition within a nested if block and that nested `if` block toggles to true while the component is still outroing, it propagates `transition_in` and cancels the outro and therefore keeps the component stuck on the screen illogically.","updated_at":"2023-06-22T16:38:38Z","created_at":"2023-06-22T16:38:38Z","creator_user_login":"jrouleau"}
{"number":8351,"comment_id":"1603024967","body":"So what would cause that `if` block to toggle to true? This isn't exclusive to `if` blocks so I presume there are other race conditions that other blocks are also dealing with? ","updated_at":"2023-06-22T17:07:54Z","created_at":"2023-06-22T17:07:54Z","creator_user_login":"ezra-en"}
{"number":8351,"comment_id":"1603034950","body":"Could that be why the breakpoints cause the issue to resolve? How do we approach this? From the animation loop? Do we approach it via the style manager?","updated_at":"2023-06-22T17:14:34Z","created_at":"2023-06-22T17:14:34Z","creator_user_login":"ezra-en"}
{"number":8351,"comment_id":"1603205432","body":"I can't explain why the breakpoints were changing the behaviour. Some weird low level browser implementation stuff I presume.\r\n\r\nI think `if` blocks need to know when their parents are outroing so they can propagate the `transition_in` to their children only when their parent isn't outroing.\r\n\r\nI cannot remember if this issue also affects other conditional blocks like `each`, `await`, etc.","updated_at":"2023-06-22T19:30:54Z","created_at":"2023-06-22T19:30:54Z","creator_user_login":"jrouleau"}
{"number":6667,"comment_id":"901856346","body":"Is couple of excessive updates really that big of a deal that you can't use svelte though?\r\nIt seems like you should be able to write your derived stores to be correct in both cases, or am I missing something?","updated_at":"2021-08-19T12:01:31Z","created_at":"2021-08-19T12:01:31Z","creator_user_login":"DzmitryFil"}
{"number":6667,"comment_id":"901872730","body":"I'm really wary about adding anything to the official store contract, and I'm also wary about adding anything to the public APIs for the store implementations that isn't part of the contract.","updated_at":"2021-08-19T12:27:25Z","created_at":"2021-08-19T12:27:25Z","creator_user_login":"Conduitry"}
{"number":6667,"comment_id":"901934808","body":"> Is couple of excessive updates really that big of a deal that you can't use svelte though?\r\nThe updates aren't simply excessive, they are wrong. \r\nDerived stores derive the wrong values because they are operating on a mix of old and new data.\r\n\r\n> It seems like you should be able to write your derived stores to be correct in both cases, or am I missing something?\r\n\r\nThe svelte implementation solves the diamond dependency issue by sending signals breadth first. It does this by queuing signals in an internal list.\r\n\r\n```js\r\nconst run_queue = !subscriber_queue.length;\r\nfor (const subscriber of subscribers) {\r\n\tsubscriber[1]();\r\n\tsubscriber_queue.push(subscriber, value);\r\n}\r\nif (run_queue) {\r\n\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\r\n\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\r\n\t}\r\n\tsubscriber_queue.length = 0;\r\n}\r\n```\r\n\r\nGiven that `subscriber_queue` is private, the 3rd party stores cannot add to it and are thus not executed in a breadth first manner.","updated_at":"2021-08-19T13:53:09Z","created_at":"2021-08-19T13:53:09Z","creator_user_login":"WHenderson"}
{"number":6667,"comment_id":"901946095","body":"> I'm really wary about adding anything to the official store contract, and I'm also wary about adding anything to the public APIs for the store implementations that isn't part of the contract.\r\n\r\nAny changes would need to be 100% backwards compatible and fall in line with the existing design.\r\nThe notable changes I would seek to make are:\r\n\r\n1) Change the implementation of the subscriber_queue to be more generic:\r\nInstead of an array of alternating `SubscribeInvalidateTuple`/`value` elements, to change it to a simple array of `() => void` actions\r\n2) Expose enough of this queue to allow for additional store types:\r\nSimplest would be to export queue directly. Safest (for future extensions) would be to separate out the code above into an exported function.\r\n3) Export the `Invalidator` type since it is implicitly exported anyway and a necessary feature to interop with derived stores\r\n\r\nEach of the above should carry very little risk.\r\n","updated_at":"2021-08-19T14:07:08Z","created_at":"2021-08-19T14:07:08Z","creator_user_login":"WHenderson"}
{"number":6667,"comment_id":"902091549","body":"> > Is couple of excessive updates really that big of a deal that you can't use svelte though?\r\n> > The updates aren't simply excessive, they are wrong.\r\n> > Derived stores derive the wrong values because they are operating on a mix of old and new data.\r\n> \r\n> > It seems like you should be able to write your derived stores to be correct in both cases, or am I missing something?\r\n> \r\n> The svelte implementation solves the diamond dependency issue by sending signals breadth first. It does this by queuing signals in an internal list.\r\n> \r\n> ```js\r\n> const run_queue = !subscriber_queue.length;\r\n> for (const subscriber of subscribers) {\r\n> \tsubscriber[1]();\r\n> \tsubscriber_queue.push(subscriber, value);\r\n> }\r\n> if (run_queue) {\r\n> \tfor (let i = 0; i < subscriber_queue.length; i += 2) {\r\n> \t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\r\n> \t}\r\n> \tsubscriber_queue.length = 0;\r\n> }\r\n> ```\r\n> \r\n> Given that `subscriber_queue` is private, the 3rd party stores cannot add to it and are thus not executed in a breadth first manner.\r\n\r\nYeah i get that. I don't get what real world problem you can't solve with the current setup. Your sample just demonstrates order of internal updates, and isn't anything useful to the end user.","updated_at":"2021-08-19T17:11:40Z","created_at":"2021-08-19T17:11:40Z","creator_user_login":"DzmitryFil"}
{"number":6667,"comment_id":"902319520","body":"> Yeah i get that. I don't get what real world problem you can't solve with the current setup. Your sample just demonstrates order of internal updates, and isn't anything useful to the end user.\r\n\r\nThe sample demonstrates that if I use a 3rd party store for some stores, then derived stores will emit incorrect signals.\r\nIn the REPL, each update should result in a value of axbx, where x is always the same number, but when mixing the stores, you'll see axby (where x is the new value and y is the old value).\r\n","updated_at":"2021-08-19T23:32:06Z","created_at":"2021-08-19T23:32:06Z","creator_user_login":"WHenderson"}
{"number":6667,"comment_id":"903219114","body":"I apologize if I am being obtuse. \r\nI'm not sure the issue was coming across well in the original repl.\r\nAre you saying that you don't see the issue, or that you see the issue but don't see how it would effect real-world usages?\r\n\r\nIf it's the former, I've made a clearer example of the issue:\r\nhttps://svelte.dev/repl/17a1c4570af9434bb2deed80a493aad4?version=3.42.2\r\n\r\nAs you can see, when not using the built-in store, the derived store gets prematurely evaluated with a mix of old and new data.\r\nThe derived store is _eventually_ evaluated with all new data, but it's that brief incorrect evaluation that is at issue.\r\nDepending on what the derived store is being used for, that brief incorrect result could cause untold issues down the line in a complex application.\r\n\r\n\r\n\r\n","updated_at":"2021-08-22T06:05:36Z","created_at":"2021-08-22T06:05:36Z","creator_user_login":"WHenderson"}
{"number":6667,"comment_id":"1128515387","body":"I'm also running into this issue when implementing a store that syncs across multiple window contexts using the Channel Messaging API.","updated_at":"2022-05-17T07:29:59Z","created_at":"2022-05-17T07:29:59Z","creator_user_login":"jnordberg"}
{"number":6667,"comment_id":"1128956763","body":"> I'm also running into this issue when implementing a store that syncs across multiple window contexts using the Channel Messaging API.\r\n\r\nIf it's of use, I've written a rather comprehensive replacement for the default store implementations [stores-mono](https://github.com/whenderson/stores-mono/).\r\n\r\nIf you are after a drop-in replacement, try [@crikey/stores-svelte](https://www.npmjs.com/package/@crikey/stores-svelte).\r\n\r\nAs suggested by this ticket though, you'll need to ensure that all stores use this or similar replacement to solve the issue.\r\nI also found a further dependency tracking/premature evaluation issue referenced here: [premature-evaluation](https://github.com/WHenderson/stores-mono/blob/develop/packages/stores-base/README.md#premature-evaluation)\r\nThis also contains a list of notable differences between these stores and the svelte default implementation.\r\n\r\nI hope this helps.\r\n","updated_at":"2022-05-17T14:40:08Z","created_at":"2022-05-17T14:40:08Z","creator_user_login":"WHenderson"}
{"number":6667,"comment_id":"1129638282","body":"Thanks @WHenderson that is really helpful!","updated_at":"2022-05-18T06:52:45Z","created_at":"2022-05-18T06:52:45Z","creator_user_login":"jnordberg"}
{"number":5967,"comment_id":"775297424","body":"I agree that it makes sense to remove this check for `<audio>` elements:\r\n- The [corresponding axe-core rule](https://github.com/dequelabs/axe-core/pull/1071) has been deprecated\r\n- The [corresponding Lighthouse audit](https://web.dev/audio-caption/) has been deprecated\r\n- As you mentioned, [browsers ignore tracks within audio elements](https://www.iandevlin.com/blog/2015/12/html5/webvtt-and-audio/)\r\n\r\nHowever, the same is [not true](https://web.dev/video-caption/) for the corresponding rule for `<video>` elements and [browser support](https://caniuse.com/webvtt) is good. I think it still makes sense to encourage captions on videos. The warning can always be ignored in the component using `<!-- svelte-ignore a11y-media-has-caption -->`.\r\n\r\nAs a side note, I don't read the warning as suggesting you add an empty `<track kind=\"caption\">` -- it's implied that you add a `src`. We could make the rule require a `src` as well to make this clear.","updated_at":"2021-02-08T17:09:03Z","created_at":"2021-02-08T17:09:03Z","creator_user_login":"geoffrich"}
{"number":5967,"comment_id":"775299954","body":"Also note that the [Svelte tutorial](https://svelte.dev/tutorial/sharing-code) currently has a compiler warning for missing audio captions. Either the rule should not check audio elements or the tutorial should be updated to resolve the warning. This is also a case where it wouldn't make sense to have captions even if audio captions were supported since it's music only, no speech.","updated_at":"2021-02-08T17:12:54Z","created_at":"2021-02-08T17:12:54Z","creator_user_login":"geoffrich"}
{"number":5967,"comment_id":"775310857","body":"The one for `video` makes a lot more sense than one for `audio`, since it at least works, but I'd recommend removing it as well, as absolutely overwhelming majority of video content available has no subtitles and will never have any.\r\n\r\n[Svelte tutorial having invalid fake `<track kind=\"captions\">` for `video` just to make this rule shut up](https://svelte.dev/tutorial/media-elements) just proves this point.\r\n\r\n`<!-- svelte-ignore a11y-media-has-caption -->` is not much of a solution, as most devs will have no idea it's even a thing, and the warning message doesn't mention that option.","updated_at":"2021-02-08T17:26:29Z","created_at":"2021-02-08T17:26:29Z","creator_user_login":"taw"}
{"number":5967,"comment_id":"788327368","body":"> As a side note, I don't read the warning as suggesting you add an empty `<track kind=\"caption\">` -- it's implied that you add a `src`.\r\n\r\nOnly to someone familiar enough with the `track` tag to begin with. Just a couple days ago, I created https://github.com/sveltejs/svelte/issues/6034 which quotes a developer who broke his app by including `<track kind=\"caption\">` _exactly_.\r\n\r\nFWIW, I like the solution proposed in this issue better than the proposed solution in mine.","updated_at":"2021-03-01T21:57:05Z","created_at":"2021-03-01T21:57:05Z","creator_user_login":"happycollision"}
{"number":5967,"comment_id":"791750755","body":"I agree...I followed this direction and put a `<track kind=\"captions\"/>` in my `<audio>` tag and the app completely broke in iOS 14.4 Safari on the iPhone 12 Pro...filed a bug report with webkit and was able to confirm that removing it completely made the app work again...and I am one of those people who had no idea that I needed a src file, to be honest...it was just something I did to make the warning go away...I get wanting to add this to a video with dialog and visual cues, etc...but don't see the value for <audio> tracks, especially instrumentals...I could, of course, be mistaken, as I don't know too much about a11y in general, and am very much willing to learn...but...yeah...seems not super useful for instrumental audio.","updated_at":"2021-03-05T22:23:59Z","created_at":"2021-03-05T22:23:59Z","creator_user_login":"rchrdnsh"}
{"number":5967,"comment_id":"791819496","body":"I opened a PR to remove the warning for audio elements since it's causing the most issues and browsers don't support it. I made sure to note in the PR that it doesn't completely resolve this issue, since there's still some discussion around removing the warning for video elements as well.","updated_at":"2021-03-06T00:53:15Z","created_at":"2021-03-06T00:53:15Z","creator_user_login":"geoffrich"}
{"number":5967,"comment_id":"869048057","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:52Z","created_at":"2021-06-26T19:04:52Z","creator_user_login":"stale[bot]"}
{"number":5967,"comment_id":"940037513","body":"just to chime in here, we are building a custom video conferencing app using AWS chime and svelte. We get this warning when we are using the `<video>` tag as this is required for the AWS chime to inject the video stream. As the stream is live, there won't be any captions/subtitles.               \r\n`<!-- svelte-ignore a11y-media-has-caption -->` was added to suppress the warning albeit not optimal.","updated_at":"2021-10-11T13:34:01Z","created_at":"2021-10-11T13:33:35Z","creator_user_login":"lingster"}
{"number":5967,"comment_id":"955760775","body":"More often than not this warning isn't helpful at all. There are numerous reasons why captions wouldn't make sense + some libraries like hls.js set captions dynamically via `videoElement.textTracks` after parsing the HLS manifest, so there's no `<track>` tag in the markup.\r\n\r\nEven in one of the official tutorials there's a dummy `<track>` just to silence this warning; which goes to show how annoying and unhelpful it is most of the time.","updated_at":"2023-04-12T01:16:17Z","created_at":"2021-10-31T17:27:30Z","creator_user_login":"aradalvand"}
{"number":5967,"comment_id":"1504111420","body":"I'm working on an app that serves silent video. We have no use for an audio track inside of the video, so this warning doesn't even make sense in our context.","updated_at":"2023-04-11T21:24:26Z","created_at":"2023-04-11T21:24:26Z","creator_user_login":"tgf9"}
{"number":5728,"comment_id":"734830613","body":"This is breaking linting and type checking.\r\n\r\nI'm also not entirely convinced that traversing through `CallExpression`s here is a good idea in general. What effects will this have throughout the codebase for things other than `map.get(key)`? We can't assume that arbitrary function calls `foo(bar)` should be treated like `foo` for the purposes of binding or invalidation, and we don't want to have special handling for certain JS objects like `Map`s.","updated_at":"2020-11-27T13:17:04Z","created_at":"2020-11-27T13:17:04Z","creator_user_login":"Conduitry"}
{"number":5728,"comment_id":"734856541","body":"if that's the case, should we instead throw a meaningful error, eg `\"map.get(key)\" cannot be use in bind:value`\r\n\r\nthe current error message is a bit unfriendly","updated_at":"2020-11-27T14:18:47Z","created_at":"2020-11-27T14:18:23Z","creator_user_login":"tanhauhau"}
{"number":5728,"comment_id":"734906407","body":"One main thing I was concerned about is that treating `foo.get(bar).baz` as invalidating when `foo` changes is that it wouldn't also invalidate when `bar` changes. However, I was just testing some stuff, and it looks like binding to `foo[bar].baz` also doesn't work properly if `bar` is allowed to change.\r\n\r\nI don't know whether there's already an issue for discussions this sort of thing. Maybe we need to hammer it out in an RFC. I also don't know whether there's precedent for two-way bindings whose field value on the page is invalidated when any of two or more values change.\r\n\r\nIf you have `bind:value={foo[bar].baz}` or `bind:value={foo.get(bar).baz}` and you change the input field, I think it's pretty obvious what should happen: Whatever is in `foo[bar]`/`foo.get(bar)` should have its `.baz` key updated to the new value.\r\n\r\nIf `foo` changes, presumably we should now re-evaluate `foo[bar].baz`/`foo.get(bar).baz` and display that in the field.\r\n\r\nIf `bar` changes, then _I think_ we should also re-evaluate `foo[bar].baz`/`foo.get(bar).baz` and display that in the field. Another option would be to re-evaluate `foo[bar]`/`foo.get(bar)` and assign the current field value to its `.baz` key. I don't know which is more correct.\r\n\r\nIf we're not comfortable with settling on a behavior yet, we should probably make two-way binding to `foo.get(bar).baz` an explicit error (and probably also `foo[bar].baz` as well) at least if `bar` isn't a constant. If someone has particular needs, they can manually implement this with one-way binding plus on `on:input` that does precisely what they require.\r\n\r\n---\r\n\r\nSomething else I just thought of is how this all interacts with _contextual_ two-bindings (i.e., those inside `{#each}` blocks to something depending on the iterating values), but I don't have answers or even specific questions about that yet.","updated_at":"2020-11-27T16:22:48Z","created_at":"2020-11-27T16:22:48Z","creator_user_login":"Conduitry"}
{"number":5728,"comment_id":"737296593","body":"Maybe i can write down the expectations that i had. (I have opened the Issue)\r\n\r\nGiven:\r\n`bind:value={foo[bar].baz}` or `bind:value={foo.get(bar).baz}`\r\n\r\nIf `foo` changes\r\nRe-evaluate `foo[bar].baz`/`foo.get(bar).baz` and display that in the field\r\n\r\nIf `bar` changes\r\nRe-evaluate `foo[bar].baz`/`foo.get(bar).baz` and display that in the field\r\n\r\nIf `baz` changes from somewhere else\r\nRe-evaluate `foo[bar].baz`/`foo.get(bar).baz` and display that in the field\r\n\r\nIf `on:input` happens\r\nUpdate `baz` with the field value\r\n\r\nI am totally okay with the case that `Map()` does not work at all if there is a better error message. I would like to keep the `foo[bar].baz` part, because that is currently working and i think i am not the only one who uses this and `bar` should not have to be `const` because i use this very dynamically as Props which i add from outside of the component. ","updated_at":"2020-12-02T15:18:56Z","created_at":"2020-12-02T15:18:56Z","creator_user_login":"firewave-remo"}
{"number":5728,"comment_id":"869047805","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:03:25Z","created_at":"2021-06-26T19:03:25Z","creator_user_login":"stale[bot]"}
{"number":5728,"comment_id":"1277712335","body":"@firewave-remo @Conduitry i checked, `bind:value={foo[bar].baz}` actually works when changing `foo` or `bar` in the current svelte version. see [repl](https://svelte.dev/repl/cd2e079f72c549348894db725b5e7a91?version=3.51.0)\r\n\r\ni've also take the liberty to rebase this PR","updated_at":"2022-10-13T14:33:47Z","created_at":"2022-10-13T14:33:47Z","creator_user_login":"tanhauhau"}
{"number":5728,"comment_id":"1451188165","body":"hmm.. looking back at this, i think the general rule of thumb for 2-way binding is that if anything changes on the variable side, we should update the value of the input, and only when the input changes we update back to the variable itself.\r\n\r\nie:\r\n\r\n```svelte\r\n<input bind:value={a[b][c](d).e} />\r\n```\r\n\r\nwhenever value of `a`, `b`, `c` or `d` or `a[b][c](d).e` changes, we will evaluate `a[b][c](d).e` and update the value to `<input>`.\r\n\r\nand only when the user types into the `input`, we update it back to `a[b][c](d).e`\r\n\r\nand this is how it behaves right now: https://svelte.dev/repl/2f93701f78e2446c8075fc5126acfb5f?version=3.55.1\r\n\r\nthough of course having a function call expression inside the `bind:value` opens up a foot gun in the scenario where the function always return a new object, eg:\r\n\r\n```svelte\r\n<script>\r\n  let key = 'a';\r\n  const obj = {\r\n    get(value) {\r\n      return { value };\r\n    }\r\n  };\r\n</script>\r\n\r\n<input bind:value={obj.get(key).value />\r\n```\r\n\r\nin this case the input will update back the ephemeral object that would be gone the next time `obj` or `key` changes","updated_at":"2023-03-02T02:41:42Z","created_at":"2023-03-02T02:41:42Z","creator_user_login":"tanhauhau"}
{"number":5728,"comment_id":"1452429361","body":"I agree with that reasoning - anything inside the binding we can track changes -> reevaluate. Regarding the footgun: What would be \"more wrong\" or \"more footgunny\" here than before?","updated_at":"2023-03-02T19:20:34Z","created_at":"2023-03-02T19:20:34Z","creator_user_login":"dummdidumm"}
{"number":5728,"comment_id":"1493212191","body":"@benmccann is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2290988b663f64c885e187f94a0fdaf58f22807547%22%7D%2C%22id%22%3A%22QmWzXSA7QbTZMMWqr6L2Fx7iW9AD9jmScvWfgUgmEHztS5%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A5728%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-04-02T03:26:48Z","created_at":"2023-04-02T03:26:48Z","creator_user_login":"vercel[bot]"}
{"number":5728,"comment_id":"1493212365","body":"[vc]: #yJgyGT7+prXfxMnbYytAi9SQUxcAoWStt+IgYgkjO38=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJzdmVsdGUtZGV2LTIiLCJyb290RGlyZWN0b3J5Ijoic2l0ZXMvc3ZlbHRlLmRldiIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiIifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL3N2ZWx0ZS9zdmVsdGUtZGV2LTIvSDhjZGQzZDNKUVp1Z21manFCS1paR0xaZUQ2eiIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJwcmV2aWV3VXJsIjoiIn1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated (UTC) |\n| :--- | :----- | :------ | :------- | :------ |\n| **svelte-dev-2** | ‚ùå Failed ([Inspect](https://vercel.com/svelte/svelte-dev-2/H8cdd3d3JQZugmfjqBKZZGLZeD6z)) |  |  | Apr 2, 2023 3:28am |\n\n","updated_at":"2023-04-02T03:28:07Z","created_at":"2023-04-02T03:28:03Z","creator_user_login":"vercel[bot]"}
{"number":4723,"comment_id":"619463833","body":"I'd love to make a PR but I'm not sure how to write the test.\r\n\r\nIf anyone could look at my attempt and tell me what I'm doing wrong, that'd be swell.\r\n\r\nhttps://github.com/sveltejs/svelte/compare/master...tvanc:openBindingForDialog","updated_at":"2020-04-26T01:21:19Z","created_at":"2020-04-26T01:21:19Z","creator_user_login":"tvanc"}
{"number":4723,"comment_id":"619474780","body":"interestingly, based on the MDN docs, https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement, there's no event we can listen to determine when a dialog is open.\r\n\r\nthere's [`close`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event) to know when it is closed. but no way we can tell if it is opened.","updated_at":"2020-04-26T03:24:34Z","created_at":"2020-04-26T03:24:34Z","creator_user_login":"tanhauhau"}
{"number":4723,"comment_id":"619614689","body":"Is having an event necessary for the directive and the test? Maybe we can use `MutationObserver` as a workaround","updated_at":"2020-04-26T19:48:08Z","created_at":"2020-04-26T19:48:08Z","creator_user_login":"tvanc"}
{"number":4723,"comment_id":"620853344","body":"I don't have a strong opinion on if Svelte should support this, but here's an example I found of using a MutationObserver to fire an event when the dialog opens: https://jsfiddle.net/vmj8d79q/. Looks like it works fine.","updated_at":"2020-04-28T21:02:48Z","created_at":"2020-04-28T21:02:48Z","creator_user_login":"dimfeld"}
{"number":4723,"comment_id":"681620681","body":"I really would like to have the ability to bind open property for dialogs in svelte","updated_at":"2020-08-27T06:29:12Z","created_at":"2020-08-27T06:29:12Z","creator_user_login":"ZerdoX-x"}
{"number":4723,"comment_id":"869080670","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T00:46:58Z","created_at":"2021-06-27T00:46:58Z","creator_user_login":"stale[bot]"}
{"number":4723,"comment_id":"869122972","body":"Why details has this option but dialog does not? I don't think it's that hard. I'll try to implement this later","updated_at":"2021-06-27T08:29:50Z","created_at":"2021-06-27T08:29:50Z","creator_user_login":"ZerdoX-x"}
{"number":4723,"comment_id":"873505644","body":"@ZerdoX-x I'd love to see how you do it. I don't know svelte internals very well. I couldn't figure it out.","updated_at":"2021-07-04T03:07:02Z","created_at":"2021-07-04T03:07:02Z","creator_user_login":"tvanc"}
{"number":4723,"comment_id":"988154565","body":"The lack of a close event could be problematic. I'm also running into this issue, but I wonder if it's actually solveable.","updated_at":"2021-12-07T18:05:55Z","created_at":"2021-12-07T18:05:55Z","creator_user_login":"antony"}
{"number":4723,"comment_id":"1264422444","body":"I'm not sure if I should make a separate issue for this but I noticed something in the same area.\r\n\r\nI'm using a dialog like in the below code, which works fine, but if I try to use the `<form method='dialog'>` technique for closing the dialog based on button clicks, it makes it so the dialog cannot be reopened.  Clicking the close button will close the dialog, but subsequent calls to `.$set({ open: true})` will not reopen it.  I'm guessing because the way the browser implements the form close is destroying the attribute in some way so svelte can't use it.\r\n\r\nIf I remove the form and just use svelte reactivity, it works fine and allows the dialog to be reopened.\r\n\r\n```\r\n<script>\r\n    export let open = true;\r\n</script>\r\n\r\n<dialog {open}>\r\n   <form method='dialog'>\r\n        <button value=\"cancel\">Cancel</button>  //doesn't allow reopening\r\n  </form>\r\n</dialog>\r\n\r\n<dialog {open}>\r\n        <button value=\"cancel\" on:click={() => open = false}>Cancel</button> //allows reopening\r\n</dialog>\r\n\r\n```","updated_at":"2022-10-01T17:04:24Z","created_at":"2022-10-01T17:04:24Z","creator_user_login":"joepetrakovich"}
{"number":4723,"comment_id":"1399297190","body":"idk how bindings internally work but this could be implemented by\r\n- externally set? if you need to make it open, use dialog.showModal(); if you need to make it close use dialog.close()\r\n- changed by browser? listen for the cancel event (fired on esc)","updated_at":"2023-01-21T17:43:30Z","created_at":"2023-01-21T17:43:30Z","creator_user_login":"KTibow"}
{"number":4723,"comment_id":"1696502356","body":"> The lack of a close event could be problematic. I'm also running into this issue, but I wonder if it's actually solveable.\r\n\r\nHTMLDialogElement has a close and cancel event (although that may not have been true at the time you wrote your comment)","updated_at":"2023-08-28T22:18:18Z","created_at":"2023-08-28T22:18:18Z","creator_user_login":"danielniccoli"}
{"number":4296,"comment_id":"577260532","body":"I'm assuming this doesn't support any sort of interactivity between the component and the slots you pass to it?\r\n\r\nI think the main thing I'm worried about here is forcing everyone who uses slots to ship this extra code, whether they want the functionality or not.","updated_at":"2020-01-22T16:09:59Z","created_at":"2020-01-22T16:09:59Z","creator_user_login":"Conduitry"}
{"number":4296,"comment_id":"577261922","body":"So I guess maybe we can add a compile option to turn this on?","updated_at":"2020-01-22T16:12:48Z","created_at":"2020-01-22T16:12:48Z","creator_user_login":"tanhauhau"}
{"number":4296,"comment_id":"577263716","body":"_Maybe._ I'd prefer in general not to add compiler options though - and it feels like most of this feature already exists, just as part of the private `$$slots` prop. Is there any way to re-use more of the existing code when implementing this, or a way to change the private API so that it's more usable?","updated_at":"2020-01-22T16:16:31Z","created_at":"2020-01-22T16:16:31Z","creator_user_login":"Conduitry"}
{"number":4296,"comment_id":"581575369","body":"If the extra bytes are only added in the case of components that accept slot content, that seems reasonable to me.\r\n\r\nI imagine that the general case by far for a component with `<slot>` is to pass in slotted content.","updated_at":"2020-02-03T19:22:05Z","created_at":"2020-02-03T19:22:05Z","creator_user_login":"TehShrike"}
{"number":4296,"comment_id":"582985009","body":"Requiring a compilation option or special outside code to pass in slot content to the constructor function of a component that has a `<slot>` feels like the equivalent of requiring a special option/custom code in order to pass in `props`.","updated_at":"2020-02-06T16:21:38Z","created_at":"2020-02-06T16:21:38Z","creator_user_login":"TehShrike"}
{"number":4296,"comment_id":"585275966","body":"will it be too much if to ask the user to call `createSlot({ slotName: slotElements })` before passing in as `options.slot`?","updated_at":"2020-02-12T15:59:30Z","created_at":"2020-02-12T15:59:30Z","creator_user_login":"tanhauhau"}
{"number":4296,"comment_id":"629589581","body":"How would a user create Svelte components to pass as slots? Since creating such a component requires a `target: DOMElement`, the component will either need an arbitrary `document.createElement(\"div\")` wrapper or use some magic to not require `target` for the slot component. How does Svelte internally do this?\r\n\r\n```js\r\nconst wrapper = document.createElement(\"div\");\r\nconst slot = new SlotComponent({target: wrapper});\r\nconst actual = new ActualComponent({target: ..., slots: {default: slot}});\r\n```","updated_at":"2020-05-16T05:07:04Z","created_at":"2020-05-16T05:07:04Z","creator_user_login":"wyozi"}
{"number":4296,"comment_id":"701485379","body":"I think this is missing the ability to mount a Component inside a slot?\r\n\r\n```js\r\nnew Parent({\r\n  target: document.body,\r\n  props: { ... },\r\n  slots: {\r\n    // Parent has all info to `new Child`\r\n    default: Child\r\n  }\r\n});","updated_at":"2020-09-30T16:01:01Z","created_at":"2020-09-30T16:01:01Z","creator_user_login":"lukeed"}
{"number":4296,"comment_id":"701725178","body":"Is this how we are going to pass a component into a slot? What would be the props of the component?","updated_at":"2020-10-01T00:59:15Z","created_at":"2020-10-01T00:59:15Z","creator_user_login":"tanhauhau"}
{"number":4296,"comment_id":"701731455","body":"This is what I ended up with, and is working for me already:\r\n\r\n```js\r\nnew Parent({\r\n  target: document.body,\r\n  props: {\r\n    $$scope: {},\r\n    $$slots: create({\r\n      default: [ Child ],\r\n      // Or\r\n      default: [ new Child({ $$inline: true, props: {...} }) ]\r\n    })\r\n  }\r\n});\r\n```\r\n\r\n> This works in current svelte@latest\r\n\r\nIf this is the approach we want to take, we can work on making it nicer / have pieces hidden. For example, a top-level `slots` option can implicitly call this `create` method when passing to props.","updated_at":"2020-10-01T01:19:23Z","created_at":"2020-10-01T01:19:23Z","creator_user_login":"lukeed"}
{"number":4296,"comment_id":"701731937","body":"I should also note that my `create` helper is based off the one in this PR and even with the additional Component support, it's still a small utility","updated_at":"2020-10-01T01:21:11Z","created_at":"2020-10-01T01:21:11Z","creator_user_login":"lukeed"}
{"number":4296,"comment_id":"729504423","body":"FYI I continue this PR at https://github.com/sveltejs/svelte/pull/5687","updated_at":"2020-11-18T07:56:17Z","created_at":"2020-11-18T07:56:17Z","creator_user_login":"truongsinh"}
{"number":4296,"comment_id":"752268742","body":"@tanhauhau @truongsinh Isn't it weird to have two PRs with the same title, both open?","updated_at":"2020-12-29T22:56:30Z","created_at":"2020-12-29T22:56:30Z","creator_user_login":"akauppi"}
{"number":4296,"comment_id":"1181711007","body":"Will this be merged, it is highly needed for testing üëÄ ","updated_at":"2022-07-12T12:39:59Z","created_at":"2022-07-12T12:39:59Z","creator_user_login":"timonmasberg"}
{"number":4296,"comment_id":"1233200082","body":"Looking forward to this, which is very necessary, especially for developing components.","updated_at":"2022-08-31T17:08:02Z","created_at":"2022-08-31T17:08:02Z","creator_user_login":"CcSimple"}
{"number":4296,"comment_id":"1465118882","body":"Looks like svelte team work on what only matters for themselves. You'd better listen to what community want right? This is second PR that is awaiting merge related to slot. Slot is turning into a nightmare for me. You don't even bother making clear your plan about these PRs. These PRs are 2-3 years old. This is not something to postpone to later time. I wonder how you do component testing without being able to pass slot to theme? Please make clear you roadmap about slots. PLEASE! ","updated_at":"2023-03-12T08:04:17Z","created_at":"2023-03-12T08:04:17Z","creator_user_login":"B-Esmaili"}
{"number":3973,"comment_id":"557284613","body":"Even if I remove the `bind:value={item.name}` on each `<input>`, I'm seeing the values swap correctly (if I'd previously entered some), which is leading me to believe that the inputs are actually _not_ being re-created, and that this is only a matter of where the focus ends up afterwards, which I suppose I don't have as strong opinions about.","updated_at":"2019-11-21T21:41:14Z","created_at":"2019-11-21T21:41:14Z","creator_user_login":"Conduitry"}
{"number":3973,"comment_id":"557299168","body":"You can confirm that the input element is re-created by inspecting the elements. The re-created input is flashing when you swap them. only the first one though others are preserved. Since focused input does not exist anymore the focus is also lost.","updated_at":"2019-11-21T22:29:52Z","created_at":"2019-11-21T22:21:35Z","creator_user_login":"kutlugsahin"}
{"number":3973,"comment_id":"557303942","body":"I've been bitten by this problem too, when doing a invoice editor of sort.\r\n\r\nThe element is indeed removed from the DOM by `insertBefore` by this code (confirmed by debugger in Chrome):\r\n\r\n~~~js\r\nfunction insert(target, node, anchor) {\r\n    target.insertBefore(node, anchor || null);\r\n}\r\n~~~\r\n\r\nBut so it is by React that runs this code:\r\n\r\n~~~js\r\nfunction insertBefore(parentInstance, child, beforeChild) {\r\n  parentInstance.insertBefore(child, beforeChild);\r\n}\r\n~~~\r\n\r\nBut then React actively restores focus:\r\n\r\n~~~js\r\n    if (typeof priorFocusedElem.focus === 'function') {\r\n      priorFocusedElem.focus();\r\n    }\r\n~~~\r\n\r\nI would appreciate Svelte doing the same so that code of this kind just works as intended when you write it the first time.\r\n\r\nOtherwise, or meanwhile, could the same solution as React be implemented in user's code? With an action + MutationObserver or something?","updated_at":"2019-11-21T22:36:41Z","created_at":"2019-11-21T22:36:41Z","creator_user_login":"rixo"}
{"number":3973,"comment_id":"557306570","body":"Re-reading the conversation above... The element is indeed not recreated, allowing it to keep its internal value, but the mere act of removing it (temporarily) from the DOM steals focus from it.\r\n\r\nNow, the interesting question is: why doesn't it lose focus when moved forward in Svelte? Chrome's \"break on node removal\" doesn't trigger in this case either.\r\n\r\nThere is apparently a difference in implementation in Svelte when moving forward or backward. Maybe it is possible to achieve the same effect when moving forward as when moving backward, and that would make restoring the focus unneeded. Or maybe that's some browser quirks and the forceful focus fix would be needed to ensure proper behaviour...","updated_at":"2019-11-21T22:45:46Z","created_at":"2019-11-21T22:45:46Z","creator_user_login":"rixo"}
{"number":3973,"comment_id":"557312927","body":"The difference is that when moving forward, it's the following node that is moved before the focused node. The focused node is only used as the anchor, but it stays in the DOM. That explains everything.\r\n\r\nMaybe Svelte could ensure that it doesn't remove the focused element from the DOM? I still fail to appreciate if that would be practical.\r\n\r\nNote: React apparently relies on `document.activeElement` to know if the moved element needs to have focus restored. My understanding is that the focus would be lost on browsers that don't support that.\r\n\r\nNote 2: It's not just the focus that is restored by React, it also restores the selection. It might be worth considering.","updated_at":"2019-11-21T23:06:52Z","created_at":"2019-11-21T23:06:52Z","creator_user_login":"rixo"}
{"number":3973,"comment_id":"557316108","body":"Perhaps better than attempting to restore the focus and selection afterwards might be to just avoid removing from the DOM the `{#each}` entry containing the active element. I'm not too familiar with the keyed each code and don't know how practical that would be.","updated_at":"2019-11-21T23:18:56Z","created_at":"2019-11-21T23:18:56Z","creator_user_login":"Conduitry"}
{"number":3973,"comment_id":"557461746","body":"@rixo yes indeed the elements are not re-created. it seems like the algorithm for reordering causes the active element detached and attached before the previous node when moving backwards. Instead the previous node should be attached after the current node keeping the active element in the dom if possible.\r\nSo React seems to rely on an algorithm that keeps the active element in the dom always and move the others, so that the focus and selection will be preserved.","updated_at":"2019-11-22T09:44:49Z","created_at":"2019-11-22T09:36:14Z","creator_user_login":"kutlugsahin"}
{"number":3973,"comment_id":"557471577","body":"I created a similar issue in vanillajs. Removing the focused element causes it's focus and selection to get lost. That might be the reason why Svelte is not able to preserve it. So the possible solution would be to update the diff algorithm to take the active element into account and keep it in the dom while editing the element array.\r\n[vanilla-demo](https://codesandbox.io/s/vanilla-move-focus-hod11)","updated_at":"2019-11-22T10:05:37Z","created_at":"2019-11-22T10:05:37Z","creator_user_login":"kutlugsahin"}
{"number":3973,"comment_id":"557475423","body":"> So React seems to rely on an algorithm that keeps the active element in the dom always and move the others, so that the focus and selection will be preserved.\r\n\r\nThat's not what I have seen. React always (forward or backward) removes the element from the DOM, but it saves focus & selection beforehand, and reapply them after the operation.\r\n\r\nBut indeed, tweaking the reorder algorithm in Svelte to avoid removing the activeElement from the DOM seems like it could be a more appealing solution.","updated_at":"2019-11-22T10:17:31Z","created_at":"2019-11-22T10:17:31Z","creator_user_login":"rixo"}
{"number":3973,"comment_id":"557484725","body":"Yes my assumption was wrong about how react handles this. It restores the focus, the selection and also the scroll position if the focus() causes an undesirable scrolls in the page. So keeping the active element in the dom while reordering the list might seem a good solution but in a scenario that you move the last element to the first place you actually need to move whole list after the last one and I'm not sure how costly it is compared to just moving the last element to the beginning of the list.\r\nMaybe some sort of best of both approach could be applied in this case.","updated_at":"2019-11-22T10:46:18Z","created_at":"2019-11-22T10:46:18Z","creator_user_login":"kutlugsahin"}
{"number":3973,"comment_id":"778717359","body":"Just ran into this myself. Trying to implement drag-and-drop keyboard functionality. Moving things up in the list removes focus from the selected item. Anyone found a workaround in the meantime?","updated_at":"2021-02-14T03:32:58Z","created_at":"2021-02-14T03:32:58Z","creator_user_login":"danny-andrews"}
{"number":3973,"comment_id":"778750169","body":"@danny-andrews Play it like React?\r\n\r\n```js\r\nimport { beforeUpdate, afterUpdate } from 'svelte'\t\r\n\t\r\nlet activeElement\r\n\t\r\nbeforeUpdate(() => {\r\n  activeElement = document.activeElement\r\n})\r\n\r\nafterUpdate(() => {\r\n  if (activeElement) activeElement.focus()\r\n})\t\r\n```","updated_at":"2021-02-14T09:14:31Z","created_at":"2021-02-14T09:14:31Z","creator_user_login":"rixo"}
{"number":3973,"comment_id":"778825409","body":"Thanks @rixo. I I ended up doing something similar.","updated_at":"2021-02-14T19:06:47Z","created_at":"2021-02-14T19:06:47Z","creator_user_login":"danny-andrews"}
{"number":3973,"comment_id":"869055158","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:59Z","created_at":"2021-06-26T20:04:59Z","creator_user_login":"stale[bot]"}
{"number":3973,"comment_id":"1002557450","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T11:51:09Z","created_at":"2021-12-29T11:51:09Z","creator_user_login":"stale[bot]"}
{"number":3973,"comment_id":"1002607163","body":"I think that should stay open. It's pretty annoying when you run into this (and it can take some time before realizing there's a problem, so you may have built on it...). Maybe not a high priority, but it would be great that this gets addressed eventually.","updated_at":"2021-12-29T13:58:17Z","created_at":"2021-12-29T13:58:17Z","creator_user_login":"rixo"}
{"number":4117,"comment_id":"566169665","body":"Hi, see my comment for #4115.","updated_at":"2019-12-16T17:52:28Z","created_at":"2019-12-16T17:52:28Z","creator_user_login":"ghost"}
{"number":4117,"comment_id":"566995826","body":"See https://github.com/sveltejs/svelte/issues/4124#issuecomment-566833142 and start of standalone module @ https://github.com/pospi/svelte-universal-component-compiler","updated_at":"2019-12-18T11:35:55Z","created_at":"2019-12-18T11:35:55Z","creator_user_login":"pospi"}
{"number":4117,"comment_id":"567769710","body":"> I have logged this in [valueflows/vf-ui#5](https://github.com/valueflows/vf-ui/issues/5) but am reaching out here to see if this is being attempted by anyone else. I'm unsatisfied with the provided options that increase complexity for developers integrating components into their own projects- [this thread](https://github.com/sveltejs/svelte/issues/3638) provides all necessary evidence to suggest that there is a barrier to entry present.\r\n> \r\n> The user story is **\"As a developer, I can bring vf-ui components into my project of choice, without having to reconfigure my build system or bundler or [eject from CRNA](https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md)\"**. So that means I want:\r\n> \r\n> * separate NPM packages for the same component in runtime-dependant flavours (`mycomponentlib`, `mycomponentlib-react`, `mycomponentlib-angular` etc)\r\n> * zero-config components written in the native component format of the framework (eg. `ReactComponent`) without runtime dependencies\r\n>   \r\n>   * probably adapted via small adapter modules eg. [webcomponents-in-react](https://www.npmjs.com/package/webcomponents-in-react)\r\n> * pluggable styles that work \"natively\" (at the framework's module resolution layer)\r\n> * file separation between component DOM logic and styles, to promote re-styling\r\n> * a default export of the component which mixes in a theme that is loaded from another file on top of the \"unstyled\" component; yielding the option to inject a custom theme if desired\r\n> \r\n> I've [already started working on this](https://github.com/valueflows/vf-ui/blob/3158ed4/scripts/build.js), but before I go too much further I want to see what other options I have. FWIW my next steps will be dealing with the _output_ code that Svelte generates, which I don't see an API for... so expect I am going to have to do some brittle regexing to remove the CSS injection in order that the end-developer's bundler can manage it.\r\n> \r\n> While I'm here I suppose it's worth asking my related pending questions in case I need to go ahead with this:\r\n> \r\n> * Is there a way to make Webpack generate sane bundle sizes and clean output that is appropriate for drop-in use in a React or Angular project?\r\n> * How heavy is the Svelte runtime, bytesize-wise? Would you advocate embedding `SvelteComponent` instances within React, Angular etc projects rather than `SvelteElement` ones?\r\n> * What would be involved with doing this \"properly\"? It seems like a different template is used for generating the output when `customElement` is defined. Can I author my own compiler targets?\r\n\r\nGee, you're not asking for much are you?\r\n\r\nRealistically, mixing frameworks together is a TERRIBLE idea, and from the sounds of it you're trying to kludge it all together which is an even worse idea. \r\n\r\nThink of it this way, just because you can take a bunch of different puzzles and force the pieces together doesn't mean it's a good idea. ","updated_at":"2019-12-20T03:14:15Z","created_at":"2019-12-20T03:14:15Z","creator_user_login":"hybridwebdev"}
{"number":4117,"comment_id":"568152435","body":"Perhaps you're misinterpreting what I'm proposing. I don't see those as particularly big asks, nor as things outside of the scope of what Svelte proposes to be. Either way I can't say the disparaging way you're approaching this discussion is particularly constructive or inclusive.\r\n\r\nI'm not planning on \"mixing frameworks together\" nor am I attempting to 'kludge' anything. My only proposal is wiring up a bunch of existing well-vetted modules to bind Svelte build output natively into multiple UI frameworks. Since Svelte build output is just raw JS / WebComponents and CSS, doing so with minimal dependencies can mostly be done pretty easily.\r\n\r\nIn other words&mdash; the way Svelte works currently looks like this:\r\n\r\n    rollup (or webpack)\r\n     ‚Ü≥ svelte loader / plugin\r\n        ‚Ü≥ svelte compiler\r\n           ‚Ü≥ optional CSS injection ('css' option)\r\n              ‚Ü≥ [Svelte component]‚îÄ‚îê\r\n    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\r\n    ‚îî‚Üí framework-specific app (Svelte)\r\n        ‚Ü≥ [bundled app output]\r\n           ‚Ü≥ [STORAGE ON DISK]\r\n\r\n    - OR -\r\n\r\n    rollup (or webpack)\r\n     ‚Ü≥ svelte loader / plugin\r\n        ‚Ü≥ svelte compiler\r\n           ‚Ü≥ CSS injection\r\n              ‚Ü≥ [customElement component]‚îÄ‚îê\r\n    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\r\n    ‚îî‚Üí framework adapter component\r\n        ‚Ü≥ framework-specific app (React, Angular, Vue etc)\r\n           ‚Ü≥ [bundled app output]\r\n              ‚Ü≥ [STORAGE ON DISK]\r\n\r\nMy proposal is to improve pluggability with the latter case by allowing more control over the generation of the `[customElement component]`:\r\n\r\n    svelte-universal-component-compiler\r\n     ‚Ü≥ svelte compiler\r\n       ‚îú‚Üí optional CSS injection (enabled)\r\n       ‚îÇ   ‚Ü≥ [customElement component] \r\n       ‚îÇ      ‚Ü≥ [STORAGE ON DISK]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Üí apps without build system\r\n       ‚îî‚Üí optional CSS injection (disabled)\r\n           ‚Ü≥ [customElement component] \r\n              ‚Ü≥ [STORAGE ON DISK]‚îÄ‚îê\r\n    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\r\n    ‚îî‚Üí generate framework adapter component\r\n        ‚Ü≥ [STORAGE ON DISK] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\r\n                                   ‚îÇ\r\n                                   ‚îÇ\r\n    rollup (or webpack)            ‚ñë\r\n     ‚Ü≥ compiled adapter component ‚Üê‚îò\r\n        ‚Ü≥ framework-specific app (React, Angular, Vue etc)\r\n           ‚Ü≥ [bundled app output]\r\n              ‚Ü≥ [STORAGE ON DISK]\r\n\r\nNote that this is basically the same workflow and that most of the logic happens outside of Svelte itself. The only internal differences that would affect this library are to enable more intermediary compiler targets (i.e. `[STORAGE ON DISK]`).\r\n\r\nI can see few enhancements being necessary to Svelte itself in order to accomplish this and no need to introduce any breaking changes. In any case, easiest way to prove it is just to go ahead and implement it.\r\n\r\n----\r\n\r\nThere are two paths I could follow here- would really appreciate advice from @Rich-Harris and other contributors on which option best aligns with the roadmap of Svelte.\r\n\r\nExperimentation of **option 1** is underway&mdash; see [next post](#issuecomment-678935111).\r\n\r\n**Option 2** is making `render_dom` & `render_ssr` pluggable in [`compile`](https://github.com/sveltejs/svelte/blob/6a5e1d5/src/compiler/compile/index.ts#L93). This actually feels like the most future-proof method of approaching a solution, because it opens up the possibility of Svelte being used *natively* as a framework-agnostic compilation pipeline, rather than requiring a third-party wrapper module such as [svelte-universal-component-compiler](https://github.com/pospi/svelte-universal-component-compiler) to implement compilation targets via runtime `customElement` wrappers like [this one](https://www.npmjs.com/package/webcomponents-in-react). But... I'm not sure if that would be considered within the domain of Svelte. If the ideological intention is to be only \"a WebComponents compiler\" and not to be, say, supporting `render_react` and `render_vue` compiler output plugins, then maybe this is an undesired degree of flexibility at this point.\r\n\r\nAll this stated, 1 would probably get my vote at the present time. But I'm curious to hear from Svelte's creators whether they have leanings one way or the other.","updated_at":"2020-08-24T06:42:30Z","created_at":"2019-12-21T04:52:45Z","creator_user_login":"pospi"}
{"number":4117,"comment_id":"678935111","body":"I have [started work on option 1](https://github.com/pospi/svelte-universal-component-compiler#behaviour) as an exploration. Edited the original task list a bit for clarity, added checkboxes to the individual requirements & some others as test cases to check off.\r\n\r\n1. Upgrade compiler options to allow the necessary flexibility:\r\n    - [x] Change build output to use a `createStyledElement` helper which can dynamically generate `SvelteElement` sub-classes with injected CSS. Similar to [as depicted here](https://github.com/sveltejs/svelte/issues/4124#issuecomment-566833142) except advocating moving the component base class to an argument of the function, and re-using the function as a common helper.\r\n    - [x] Wire up the `css: false` compiler option such that CSS injection is also ommitted from the `customElement` build if defined (see #4124).\r\n    - ~~Add a `defineCustomElement` compiler option (default `true`) which determines whether to write the `customElements.define` call into the component source.~~ *(Note: you can just use `customElement: null` here.)*\r\n    - These changes would then yield the following results:\r\n        - Svelte runtime becomes very slightly heavier due to the addition of `createStyledElement`. Since Svelte is *not* a zero-runtime framework, but a *minimal*-runtime framework, I think the addition of these half dozen lines of code is acceptable.\r\n            - [ ] These helpers could be added to the core runtime as curried helpers in `svelte/internal` to reduce the size of the per-component boilerplate. `const styledElement = (baseElement) => (stylesheetCSS) => /* ... */`\r\n        - Use of Svelte in normal compilation mode would function the same as previously.\r\n        - Use of Svelte in `customElement` compilation mode would yield output depending on the value of the `css` compiler option:\r\n            - [x] If `false`, unstyled elements are emitted and may be registered as Custom Elements depending on the value of `customElement`.\r\n            - [x] If `true`, a styled element class is created via `createStyledElement` and the component is optionally registered as a Custom Element.\r\n            - [x] Default behaviour would be to output a styled element which is automatically registered as a Custom Element.","updated_at":"2020-08-24T06:57:28Z","created_at":"2020-08-24T06:38:02Z","creator_user_login":"pospi"}
{"number":7517,"comment_id":"1275491166","body":"Yes please was just looking for this as forms might be used more than once on the same page.\r\nI'm using SvelteKit.","updated_at":"2022-10-12T02:07:24Z","created_at":"2022-10-12T02:07:24Z","creator_user_login":"CanRau"}
{"number":7517,"comment_id":"1429682256","body":"To solve this you could use `SubtleCrypto.digest()` and create a hash that would be unique. As data you could pass in an object, the props that you take into a component, or something else that you know is unique.","updated_at":"2023-02-14T12:37:31Z","created_at":"2023-02-14T12:37:31Z","creator_user_login":"kevmodrome"}
{"number":7517,"comment_id":"1429695103","body":"@kevmodrome this doesn't scale well. Form components usually either don't take props or take complex objects, whose identity depends on their location in memory, and is subject to change. Also this would mean that two components with the same props would get the same ID. The success of React's `useId` is that is uses the knowledge of the component tree, which is stable and unique across SSR. This is something that only the framework knows internally","updated_at":"2023-02-14T12:48:44Z","created_at":"2023-02-14T12:48:44Z","creator_user_login":"illright"}
{"number":7517,"comment_id":"1452628554","body":"> utilizing all the component tree knowledge of the framework and using that to generate IDs that are stable across SSR and unique across component instances.\r\n\r\n> The success of React's useId is that is uses the knowledge of the component tree, which is stable and unique across SSR\r\n\r\nIn theory, yes, but a bunch of edge cases even break with React's `useId`. If the structure is only slightly different on server and client, you have to either delete a few or generate new ones. For example, if you want to render a list of n elements where n is the screen height divided by 100, or 5 when SSRing. This is a bit simplified and could be fixed, but you'd sometimes have more elements and sometimes less elements. And at this point you have to guesstimate, and this isn't an implementation issue, but a general issue with the concept of hydration consistency, because hydration consistency is ironically not always consistent. You'd have to completely prohibit all SSR checks, which would do way more harm than good. Also, this is not just a theoretical thing, exactly those mismatches with `useId` happen on prod on an app I know. \r\n\r\nTL;DR It's complicated to implement: It is theoretically impossible, we either have to skip some IDs or guess some IDs.","updated_at":"2023-03-02T22:16:49Z","created_at":"2023-03-02T22:16:49Z","creator_user_login":"lxhom"}
{"number":7517,"comment_id":"1561898421","body":"Is there a reproducible example of how this could currently create problems in SvelteKit and if not @illright could you create one?","updated_at":"2023-05-24T20:41:14Z","created_at":"2023-05-24T20:41:14Z","creator_user_login":"karimfromjordan"}
{"number":7517,"comment_id":"1562342166","body":"Considering the `id` is not sent along with the rest of the data when submitting the form I doubt there is a way that this information goes back to the server, pretty sure this is solving a problem that does not exist except in theory.","updated_at":"2023-05-25T06:19:49Z","created_at":"2023-05-25T06:19:49Z","creator_user_login":"stephane-vanraes"}
{"number":7517,"comment_id":"1563795604","body":"> Considering the `id` is not sent along with the rest of the data when submitting the form I doubt there is a way that this information goes back to the server, pretty sure this is solving a problem that does not exist except in theory.\r\n\r\nThis has nothing to do with form submission, but with using the separated-tag approach for `<input id=‚Ä¶>` and `<label for=‚Ä¶>` tags. If a form has multiple instances of a single component (say, you can add multiple instances of an address because people have more than one address), then having stable-dynamic IDs for the `input` tags so they can be referenced in the `label` tags is *absolutely* required.\r\n\r\nIt‚Äôs even more required for various `aria-*` attributes which expect DOM references or DOM reference lists. The original request indicates both of these cases *plus* points to a discussion from the ReactWG where multiple use cases are listed explicitly.\r\n\r\nAnd, frankly, I need this in Svelte *proper* for ARIA as I‚Äôm not using SvelteKit.","updated_at":"2023-05-26T04:31:27Z","created_at":"2023-05-26T04:31:27Z","creator_user_login":"halostatue"}
{"number":7517,"comment_id":"1563872477","body":"I look through the examples given on the linked issue and all of them require consistency of ids within the context of the browser, none of them require consistency across the server-client boundary.\r\n\r\nIf the server renders this \r\n```html\r\n<label for=\"1234\">\r\n<input id=\"1234\">\r\n```\r\n\r\nand Svelte hydrates this to\r\n```html\r\n<label for=\"5678\">\r\n<input id=\"5678\">\r\n```\r\nEverything still works as expected because the ids are consistent within their context.  This is something that can be achieved with any of the already mentioned methods, just generate the id one place and pass it to both components (it is exactly the same as you would do in React).\r\n\r\nReact introduced `useId` to fix a specific problem with hydration with their framework that does not appear in Svelte (which has other issues but hydration)\r\n\r\nSo far I have not seen any example where it is of vital importance that both ids are the same on client and server.","updated_at":"2023-05-26T06:29:35Z","created_at":"2023-05-26T06:29:35Z","creator_user_login":"stephane-vanraes"}
{"number":7517,"comment_id":"1661328118","body":"It's  not clear to me whether a hydration mismatch is a big issue in Svelte (I'm coming from a React world)?\r\n\r\nMismatch is pretty much guaranteed when doing SSR, because:\r\n- libs that generate a unique hash do so independently on the server and the client\r\n- libs that do count++ have to keep track of count, and the count will persist over multiple user requests on the server, given the count is simply stored as a `let` in a module.\r\n\r\nThe solution for this is to put a function for getting the count in a store that is initialised during render of the top-most `+layout.svelte`.\r\n\r\n`uid.store.js`\r\n\r\n```js\r\nimport { setContext, getContext } from 'svelte'\r\nimport { readable, type Readable, get } from 'svelte/store'\r\nimport context from './context'\r\n\r\ntype GetCount = () => number\r\ntype UIDStore = Readable<GetCount>\r\n\r\nexport function initUIDStore() {\r\n\tlet count = 0\r\n\tconst uidStore: UIDStore = readable(() => ++count)\r\n\tsetContext(context.uid, uidStore)\r\n}\r\n\r\nexport function initUIDGenerator() {\r\n\tconst uidStore = getContext<UIDStore>(context.uid)\r\n\tlet getCount: GetCount\r\n\tif (!uidStore) {\r\n\t\tconsole.warn(\r\n\t\t\t`getContext(${context.uid}) returned undefined. You need to call initUIDStore() in the root page component.`,\r\n\t\t)\r\n\t\tgetCount = () => 1\r\n\t} else {\r\n\t\tgetCount = get(uidStore)\r\n\t}\r\n\treturn (prefix: string) => `${prefix}_${getCount()}`\r\n}\r\n\r\n```\r\n\r\n\r\n`+layout.svelte` (root)\r\n\r\n```svelte\r\n<script>\r\n\timport { initUIDStore } from '$lib/uid-store'\r\n\r\n\tinitUIDStore()\r\n</script>\r\n```\r\n\r\n\r\n`some-component.svelte`\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { initUIDGenerator } from '$lib/uid-store'\r\n\r\n\tconst uid = initUIDGenerator()\r\n\tconst tabId = uid('tab')\r\n\tconst panelId = uid('tabpanel')\r\n</script>\r\n```\r\n\r\nüí° The above will work flawlessly, unless you start introducing deliberate mismatches like rendering something on the client but not on the server.\r\n\r\nHappy to hear feedback on this, whether this makes sense at all. Even if hydration mismatch isn't a performance issue in Svelte, having a counter on the server that doesn't reset between visits is still an indirect way of exposing your website's visitor count.","updated_at":"2023-08-02T01:31:18Z","created_at":"2023-08-02T01:29:56Z","creator_user_login":"gersomvg"}
{"number":7605,"comment_id":"1155746712","body":"What's the use case for this? Your workaround sounds like what you would want in this case.\r\n\r\nYou can achieve what you want by using the experimental `$$Props` type, you'd write `type $$Props = ListItem`. More info here: https://github.com/sveltejs/rfcs/pull/38","updated_at":"2022-06-14T21:52:50Z","created_at":"2022-06-14T21:52:50Z","creator_user_login":"dummdidumm"}
{"number":7605,"comment_id":"1155755111","body":"Okay cool. Looks like there's already some traction on this issue. The use case would be defining multiple props from an object interface you are going to ...spread from. Otherwise spreading is clunky and unsafe.","updated_at":"2022-06-14T22:03:49Z","created_at":"2022-06-14T22:03:49Z","creator_user_login":"seeker-3"}
{"number":7605,"comment_id":"1155766127","body":"Here's a react tsx example\r\n```tsx\r\nimport type { FC } from 'react'\r\n\r\ninterface ItemData {\r\n  x: number\r\n  y: number\r\n  z: number\r\n}\r\n\r\nconst list: ItemData[] = [\r\n  { x: 1, y: 1, z: 1 },\r\n  { x: 1, y: 1, z: 1 },\r\n]\r\n\r\ninterface OtherProps {}\r\n\r\nconst ListItem: FC<ItemData & OtherProps> = ({ x, y, z }) => {\r\n  return (\r\n    <li>\r\n      x: {x} y: {y} z: {z}\r\n    </li>\r\n  )\r\n}\r\n\r\nconst List: FC = () => {\r\n  return (\r\n    <ul>\r\n      {list.map(item => (\r\n        <ListItem {...item} />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n```","updated_at":"2022-06-14T22:19:19Z","created_at":"2022-06-14T22:19:19Z","creator_user_login":"seeker-3"}
{"number":7605,"comment_id":"1156000553","body":"\"Generic Slots for Svelte Components\" sounds like a misnomer to me then. If I understand you correctly, you want some way to tell Svelte components that they need to implement a certain interface. This is what the `$$Props` I mentioned are for. You can use this today already:\r\n\r\n```\r\n<!-- ListItem.svelte -->\r\n<script lang=\"ts\">\r\n  import type { ItemData } from './List.svelte'\r\n\r\n  interface $$Props extends ItemData {}\r\n\r\n  export let x: $$Props['x'];\r\n  export let y: $$Props['y'];\r\n  export let z: $$Props['z'];\r\n</script>\r\n\r\n<li>\r\n  x: {x} y: {y} z: {z}\r\n</li>\r\n```\r\nWhat's missing yet is automatic inference of the prop type so you don't have to write it twice (in other words, a way that `$$Props['x']` is unnecessary)","updated_at":"2022-06-15T05:21:35Z","created_at":"2022-06-15T05:21:35Z","creator_user_login":"dummdidumm"}
{"number":7605,"comment_id":"1156007766","body":"Maybe not the best titling of the issue. In vanilla TS or TSX these would probably be type slots for generics, but svelte kind of has it's own \"magic\" way of doing things (which I think is cooler). You are welcome to give it a more appropriate name.\r\n\r\nI am still learning svelte, and I was not sure if there was already a way to do this. I posted on the Discord first and I didn't get any good responses. Thanks for helping me out!","updated_at":"2022-06-15T05:38:32Z","created_at":"2022-06-15T05:34:21Z","creator_user_login":"seeker-3"}
{"number":7605,"comment_id":"1157529492","body":"> What's missing yet is automatic inference of the prop type so you don't have to write it twice (in other words, a way that $$Props['x'] is unnecessary)\r\n\r\nWhat would you write then? Just\r\n`export let x;`\r\n?\r\nI guess the svelte extension would handle it, but how would typescript infer the type?","updated_at":"2022-06-16T11:03:46Z","created_at":"2022-06-16T11:03:37Z","creator_user_login":"Etchelon"}
{"number":7605,"comment_id":"1158392943","body":"That does seem tricky. The type inference would be NICE. But I probably care more about type safety than the inference initially, which seems like more of a svelte language tool feature rather than a typescript feature.\r\n\r\nSome examples:\r\n\r\nError: Prop `booleanValue` is not defined\r\n```svelte\r\n<script lang=\"ts\">\r\n  interface $$Props {\r\n    stringValue: string\r\n    numberValue: number\r\n    booleanValue: boolean\r\n  }\r\n\r\n  export let stringValue: string\r\n  export let numberValue: number\r\n</script>\r\n```\r\n\r\nError: `numberValue` type declarations are incompatible.\r\n```svelte\r\n<script lang=\"ts\">\r\n  interface $$Props {\r\n    stringValue: string\r\n    numberValue: number\r\n    booleanValue: boolean\r\n  }\r\n\r\n  export let stringValue: string\r\n  export let numberValue: string\r\n  export let booleanValue: boolean\r\n</script>\r\n```\r\n\r\nError: svelte component has no prop `unknownValue`\r\n```svelte\r\n<script lang=\"ts\">\r\n  interface $$Props {\r\n    stringValue: string\r\n    numberValue: number\r\n    booleanValue: boolean\r\n  }\r\n\r\n  export let stringValue: string\r\n  export let numberValue: number\r\n  export let booleanValue: boolean\r\n  export let unknownValue: unknown \r\n</script>\r\n```\r\n\r\nThe last one is a little subjective, but if I declared a `$$Props` interface, I'd probably want it to be the \"source of truth\" for that component ü§∑‚Äç‚ôÇÔ∏è.","updated_at":"2022-06-17T01:59:42Z","created_at":"2022-06-17T01:59:42Z","creator_user_login":"seeker-3"}
{"number":7605,"comment_id":"1159069369","body":"Both these examples do what you want, they produce a type error","updated_at":"2022-06-17T16:58:54Z","created_at":"2022-06-17T16:58:54Z","creator_user_login":"dummdidumm"}
{"number":7605,"comment_id":"1360417062","body":"This could be useful in combination with `svelte:component` where the used component is dynamic, like in this far fetched example for demo purposes:\r\n\r\n```html\r\n<script lang=\"ts\">\r\n  import type { SvelteComponent } from 'svelte';\r\n  // type $$Props = Vehicle\r\n  import Bike from '$lib/Bike.svelte';\r\n  // type $$Props = Vehicle & { fuel: string }\r\n  import Car from '$lib/Car.svelte';\r\n  \r\n  let selected = Car; // [1]\r\n  let selected: typeof SvelteComponent = Car;  // [2]\r\n</script>\r\n\r\n<select bind:value={selected}>\r\n   <option value={Car}>Car</option>\r\n   <option value={Bike}>Bike</option>\r\n</select>\r\n\r\n<svelte:component this={selected} fuel=\"gasoline\" speed={123} range={456} />\r\n```\r\n\r\nNow, because `Bike` doesn't have the prop `fuel` typescript should shout at me, but in both cases it is doing it wrong: \r\n\r\n**[1] let selected = Car**\r\nIn this case `selected` will be of type Car, which has fuel defined and therefore I can use it as a prop\r\n\r\n**[2] let selected : typeof SvelteComponent = Car**\r\nNow it has just become a generic component and I don't get anything at all anymore!\r\n\r\nWith a more baked in way of doing this, it might be possible to do something like:\r\n```ts\r\nlet selected: typeof SvelteComponent<Vehicle> = Car\r\n```\r\n\r\nI think this can help when dealing with array of components, or with selectors like above.","updated_at":"2022-12-20T22:54:08Z","created_at":"2022-12-20T22:54:08Z","creator_user_login":"stephane-vanraes"}
{"number":7605,"comment_id":"1406000304","body":"I'm interested in a similar use case, except for enforcing an interface of functions on a list of <svelte:component>, and not as props.\r\n\r\n```ts\r\n// Demo.ts (DemoControls interface not used in this example)\r\nexport interface DemoControls {\r\n  reset(): void;\r\n  start(): void;\r\n}\r\n\r\nexport class Demo {\r\n  demoComponent?: SvelteComponent;\r\n\r\n  constructor(\r\n    public name: string,\r\n    public demoType: ComponentType,\r\n  ) {}\r\n}\r\n```\r\n```ts\r\n// WaypointsDemo.svelte\r\n<script lang=\"ts\">\r\n  export function reset(): void { ... }\r\n  export function start(): void { ... }\r\n</script>\r\n```\r\n```ts\r\n// +page.svelte\r\n<script lang=\"ts\">\r\n  import type { Demo } from '.demos';\r\n  import WaypointsDemo from './WaypointsDemo.svelte';\r\n  import TravelersDemo from './TravelersDemo.svelte';\r\n  \r\n  const waypointsDemo = new Demo('waypoints', WaypointsDemo);\r\n  const travelersDemo = new Demo('travelers', TravelersDemo);\r\n  const demos = [waypointsDemo, travelersDemo];\r\n\r\n  onMount(() => {\r\n    demos.forEach((demo: Demo) => {\r\n      // reset and start are currently being interpreted as 'any'\r\n      demo.demoComponent!.reset();\r\n    });\r\n  });\r\n\r\n  function handleDemoClick(demo: Demo): void {\r\n    demo.demoComponent!.start();\r\n  }\r\n</script>\r\n\r\n{#each demos as demo}\r\n  <div\r\n    class=\"{demo.name}-demo-container\"\r\n    on:click={(e) => handleDemoClick(demo)}\r\n  >\r\n    <h2>{demo.title}</h2>\r\n    <svelte:component this={demo.demoType} bind:this={demo.demoComponent} />\r\n  </div>\r\n{/each}\r\n```","updated_at":"2023-01-27T04:18:49Z","created_at":"2023-01-27T04:18:49Z","creator_user_login":"anxpara"}
{"number":7605,"comment_id":"1406714307","body":"> \r\n\r\nalright, i figured out how to enforce the interface\r\n\r\n```typescript\r\n// Demo.ts\r\nexport interface DemoControls {\r\n  reset(): void;\r\n  start(): void;\r\n}\r\n\r\nexport class Demo {\r\n  demoComponent?: SvelteComponent & DemoControls;\r\n\r\n  constructor(\r\n    public name: string,\r\n    public demoType: ComponentType<SvelteComponentTyped & DemoControls>,\r\n  ) {}\r\n}\r\n```\r\n\r\nwhich correctly throws a compile error if a component is passed to Demo() which doesn't implement the interface","updated_at":"2023-01-27T16:13:37Z","created_at":"2023-01-27T16:13:37Z","creator_user_login":"anxpara"}
{"number":7112,"comment_id":"952784901","body":"The warning is emitted by vite-plugin-svelte when it detects that a file change results in similar compiler output to inform the user of a skipped hmr update.\r\n\r\nThe output comparison omits `add_location()` calls as the arguments change when you edit whitespace. In this case it seems that the svelte compiler itself strips the `&emsp;` value, so when you remove one of the 2, an add_location call changes and causes the warning you posted.\r\n\r\nhttps://github.com/sveltejs/vite-plugin-svelte/blob/51a1449a88e469ab7bb9ae438ebdb742240481e6/packages/vite-plugin-svelte/src/handle-hot-update.ts#L106\r\n\r\nIt seems the svelte compiler removes `&emsp;` if it is not accompanied by additional non-whitespace characters within the same textnode. you can try it in the svelte repl: https://svelte.dev/repl  . \r\n `<p>x;&emsp;<span>y</span></p>` shows the emsp,  `<p>&emsp;<span>y</span></p>` doesn't.\r\n\r\nThis may even be correct according to spec. https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace  I havn't been able to find definitions on how emsp should be treated. https://stackoverflow.com/questions/42463838/html-emsp-entity-exact-behavior is an old question regarding it but not really answered.\r\n\r\n","updated_at":"2021-10-27T10:41:52Z","created_at":"2021-10-27T10:40:58Z","creator_user_login":"dominikg"}
{"number":7112,"comment_id":"952797078","body":"> This may even be correct according to spec.\r\n\r\nEven if (or especially if) the spec says not to render white space entities without following non-whitespace content, it shouldn't be briefly flashing in `kit` on reloads, right?","updated_at":"2021-10-27T10:56:00Z","created_at":"2021-10-27T10:56:00Z","creator_user_login":"janosh"}
{"number":7112,"comment_id":"952799504","body":"Could be a difference in SSR rendering/hydration. I'll try to summon someone with deeper svelte compiler knowledge.","updated_at":"2021-10-27T10:58:51Z","created_at":"2021-10-27T10:58:51Z","creator_user_login":"dominikg"}
{"number":7112,"comment_id":"962445858","body":"I found 2 things about it.\r\n\r\n## Summary\r\n\r\n### 1. Differences of compiled file between `SSR` and `hydration`.\r\n\r\nShould we update white space processing for `SSR` mode in the compiler?\r\n\r\n### 2. Why briefly flashing in kit on reloads is not happen\r\n\r\nThis is expected behavior I think.\r\n\r\n## Details\r\n\r\n### 1. Differences of compiled file between `SSR` and `hydration`.\r\n\r\nRegarding compiler,\r\n`SSR` mode just render what a developer writes.\r\nhttps://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_ssr/handlers/Text.ts\r\nBut for `hydration`, there is whitespace normalization process.\r\nhttps://github.com/sveltejs/svelte/blob/4d4f959f1643f45702c71c01dff13f43f64fef77/src/compiler/compile/render_dom/wrappers/Text.ts#L28-L41\r\n\r\nAnd when Kit creates `entry HTML`, it compiles as SSR mode.\r\nBut `bundled index.svelte` is created as `hydration` mode.\r\nThat's why you can see spaces briefly flashes at the beginning\r\nbecause `entry HTML` has compiled HTML by `SSR` mode which doesn't have whitespace processing.\r\n\r\nI think already we followed whitespace processing for `hydration`.\r\nBut for `SSR` is not like that.\r\nShould we follow this?\r\nI think we should follow because an initial HTML should be the same between `SSR` and `hydration`.\r\n\r\n<details>\r\n<summary>entry HTML</summary>\r\n\r\n```js\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<link rel=\"icon\" href=\"/favicon.png\" />\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\t\t\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\t\t<script type=\"module\">\r\n\t\t\timport { start } from \"/.svelte-kit/dev/runtime/internal/start.js\";\r\n\t\t\tstart({\r\n\t\t\t\ttarget: document.querySelector(\"#svelte\"),\r\n\t\t\t\tpaths: {\"base\":\"\",\"assets\":\"\"},\r\n\t\t\t\tsession: {},\r\n\t\t\t\thost: \"localhost:3000\",\r\n\t\t\t\troute: true,\r\n\t\t\t\tspa: false,\r\n\t\t\t\ttrailing_slash: \"never\",\r\n\t\t\t\thydrate: {\r\n\t\t\t\t\tstatus: 200,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tnodes: [\r\n\t\t\t\t\t\timport(\"/.svelte-kit/dev/components/layout.svelte\"),\r\n\t\t\t\t\t\timport(\"/src/routes/index.svelte\")\r\n\t\t\t\t\t],\r\n\t\t\t\t\tpage: {\r\n\t\t\t\t\t\thost: \"localhost:3000\", // TODO this is redundant\r\n\t\t\t\t\t\tpath: \"\\u002F\",\r\n\t\t\t\t\t\tquery: new URLSearchParams(\"\"),\r\n\t\t\t\t\t\tparams: {}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t</script>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"svelte\">\r\n\r\n\r\n<p>‚ÄÉ‚ÄÉ\r\n\t<span>1</span><span>2</span><span>3</span></p>\r\n\r\n\r\n\r\n\t\t\t\r\n\t\t</div>\r\n\t</body>\r\n</html>\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>bundled index.svelte</summary>\r\n\r\n```js\r\nimport { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/routes/index.svelte\");/* C:/Users/baseballyama/Desktop/git/svelte-contributes/kit-2693/my-app/src/routes/index.svelte generated by Svelte v3.44.1 */\r\nimport {\r\n\tSvelteComponentDev,\r\n\tadd_location,\r\n\tappend_hydration_dev,\r\n\tchildren,\r\n\tclaim_element,\r\n\tclaim_space,\r\n\tclaim_text,\r\n\tdestroy_each,\r\n\tdetach_dev,\r\n\tdispatch_dev,\r\n\telement,\r\n\tinit,\r\n\tinsert_hydration_dev,\r\n\tnoop,\r\n\tsafe_not_equal,\r\n\tspace,\r\n\ttext,\r\n\tvalidate_each_argument,\r\n\tvalidate_slots\r\n} from \"/node_modules/.vite/svelte_internal.js?v=54e66b1a\";\r\n\r\nconst file = \"C:/Users/baseballyama/Desktop/git/svelte-contributes/kit-2693/my-app/src/routes/index.svelte\";\r\n\r\nfunction get_each_context(ctx, list, i) {\r\n\tconst child_ctx = ctx.slice();\r\n\tchild_ctx[0] = list[i];\r\n\treturn child_ctx;\r\n}\r\n\r\n// (3:1) {#each [1, 2, 3] as idx}\r\nfunction create_each_block(ctx) {\r\n\tlet span;\r\n\tlet t;\r\n\r\n\tconst block = {\r\n\t\tc: function create() {\r\n\t\t\tspan = element(\"span\");\r\n\t\t\tt = text(/*idx*/ ctx[0]);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\tl: function claim(nodes) {\r\n\t\t\tspan = claim_element(nodes, \"SPAN\", {});\r\n\t\t\tvar span_nodes = children(span);\r\n\t\t\tt = claim_text(span_nodes, /*idx*/ ctx[0]);\r\n\t\t\tspan_nodes.forEach(detach_dev);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\th: function hydrate() {\r\n\t\t\tadd_location(span, file, 3, 2, 46);\r\n\t\t},\r\n\t\tm: function mount(target, anchor) {\r\n\t\t\tinsert_hydration_dev(target, span, anchor);\r\n\t\t\tappend_hydration_dev(span, t);\r\n\t\t},\r\n\t\tp: noop,\r\n\t\td: function destroy(detaching) {\r\n\t\t\tif (detaching) detach_dev(span);\r\n\t\t}\r\n\t};\r\n\r\n\tdispatch_dev(\"SvelteRegisterBlock\", {\r\n\t\tblock,\r\n\t\tid: create_each_block.name,\r\n\t\ttype: \"each\",\r\n\t\tsource: \"(3:1) {#each [1, 2, 3] as idx}\",\r\n\t\tctx\r\n\t});\r\n\r\n\treturn block;\r\n}\r\n\r\nfunction create_fragment(ctx) {\r\n\tlet p;\r\n\tlet t;\r\n\tlet each_value = [1, 2, 3];\r\n\tvalidate_each_argument(each_value);\r\n\tlet each_blocks = [];\r\n\r\n\tfor (let i = 0; i < 3; i += 1) {\r\n\t\teach_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));\r\n\t}\r\n\r\n\tconst block = {\r\n\t\tc: function create() {\r\n\t\t\tp = element(\"p\");\r\n\t\t\tt = space();\r\n\r\n\t\t\tfor (let i = 0; i < 3; i += 1) {\r\n\t\t\t\teach_blocks[i].c();\r\n\t\t\t}\r\n\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\tl: function claim(nodes) {\r\n\t\t\tp = claim_element(nodes, \"P\", {});\r\n\t\t\tvar p_nodes = children(p);\r\n\t\t\tt = claim_space(p_nodes);\r\n\r\n\t\t\tfor (let i = 0; i < 3; i += 1) {\r\n\t\t\t\teach_blocks[i].l(p_nodes);\r\n\t\t\t}\r\n\r\n\t\t\tp_nodes.forEach(detach_dev);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\th: function hydrate() {\r\n\t\t\tadd_location(p, file, 0, 0, 0);\r\n\t\t},\r\n\t\tm: function mount(target, anchor) {\r\n\t\t\tinsert_hydration_dev(target, p, anchor);\r\n\t\t\tappend_hydration_dev(p, t);\r\n\r\n\t\t\tfor (let i = 0; i < 3; i += 1) {\r\n\t\t\t\teach_blocks[i].m(p, null);\r\n\t\t\t}\r\n\t\t},\r\n\t\tp: noop,\r\n\t\ti: noop,\r\n\t\to: noop,\r\n\t\td: function destroy(detaching) {\r\n\t\t\tif (detaching) detach_dev(p);\r\n\t\t\tdestroy_each(each_blocks, detaching);\r\n\t\t}\r\n\t};\r\n\r\n\tdispatch_dev(\"SvelteRegisterBlock\", {\r\n\t\tblock,\r\n\t\tid: create_fragment.name,\r\n\t\ttype: \"component\",\r\n\t\tsource: \"\",\r\n\t\tctx\r\n\t});\r\n\r\n\treturn block;\r\n}\r\n\r\nfunction instance($$self, $$props) {\r\n\tlet { $$slots: slots = {}, $$scope } = $$props;\r\n\tvalidate_slots('Routes', slots, []);\r\n\tconst writable_props = [];\r\n\r\n\tObject.keys($$props).forEach(key => {\r\n\t\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Routes> was created with unknown prop '${key}'`);\r\n\t});\r\n\r\n\treturn [];\r\n}\r\n\r\nclass Routes extends SvelteComponentDev {\r\n\tconstructor(options) {\r\n\t\tsuper(options);\r\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});\r\n\r\n\t\tdispatch_dev(\"SvelteRegisterComponent\", {\r\n\t\t\tcomponent: this,\r\n\t\t\ttagName: \"Routes\",\r\n\t\t\toptions,\r\n\t\t\tid: create_fragment.name\r\n\t\t});\r\n\t}\r\n}\r\n\r\nimport * as ___SVELTE_HMR_HOT_API from '/node_modules/svelte-hmr/runtime/hot-api-esm.js';import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from '/node_modules/svelte-hmr/runtime/proxy-adapter-dom.js';if (import.meta && import.meta.hot) { if (false) import.meta.hot.accept(); Routes = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: \"C:/Users/baseballyama/Desktop/git/svelte-contributes/kit-2693/my-app/src/routes/index.svelte\", hotOptions: {\"preserveLocalState\":false,\"noPreserveStateKey\":[\"@hmr:reset\",\"@!hmr\"],\"preserveAllLocalStateKey\":\"@hmr:keep-all\",\"preserveLocalStateKey\":\"@hmr:keep\",\"noReload\":false,\"optimistic\":true,\"acceptNamedExports\":true,\"acceptAccessors\":true,\"injectCss\":false,\"cssEjectDelay\":100,\"native\":false,\"importAdapterName\":\"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\",\"noOverlay\":true}, Component: Routes, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }\r\nexport default Routes;\r\n\r\n\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUdTLEdBQUc7Ozs7OztzQ0FBSCxHQUFHOzs7Ozs7OztHQUFWLG9CQUFpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBRFYsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQUZoQixvQkFLRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibmFtZXMiOltdLCJzb3VyY2VzIjpbImluZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8cD5cblx0JmVtc3A7JmVtc3A7XG5cdHsjZWFjaCBbMSwgMiwgM10gYXMgaWR4fVxuXHRcdDxzcGFuPntpZHh9PC9zcGFuPlxuXHR7L2VhY2h9XG48L3A+Il19\r\n```\r\n</details>\r\n\r\n### 2. Why briefly flashing in kit on reloads is not happen\r\n\r\nIn the case of HMR, `entry HTML` is not updated.\r\nIt just updates `bundled index.svelte`.\r\nI think this behavior is ok in terms of developer experience.\r\n\r\nI mentioned that `bundled index.svelte` is created by `hydration` mode.\r\nTherefore if you change only spaces, `hydration` mode will normalize spaces, and `bundled index.svelte` will not change.\r\nThen both `entry HTML` and `bundled index.svelte` are not changed and briefly flashing is not happen.\r\nTherefore I think this is expected behavior.","updated_at":"2021-11-06T12:40:40Z","created_at":"2021-11-06T12:40:40Z","creator_user_login":"baseballyama"}
{"number":6046,"comment_id":"790086725","body":"You can also use `class='whatever-other-classes {isOn ? 'on' : 'off'}'`, which is only a couple of characters more than `class='whatever-other-classed' class:on|off={isOn}` and is more explicit. This doesn't feel like an especially valuable addition to me.","updated_at":"2021-03-03T21:52:34Z","created_at":"2021-03-03T21:52:34Z","creator_user_login":"Conduitry"}
{"number":6046,"comment_id":"790088444","body":"i included a version of that hacky option in my initial comment, which only works when you already have an explicit class on the element, not when class is also something more dynamic.\r\n\r\nit is a less optimal pattern for several reasons.\r\n\r\nIt isn't ideal and inefficient to start with as it is hacking a string in, and it breaks as soon as you already use dynamic classes:\r\n```\r\nüö´ class={dynamic} class=\"{isOn ? 'on' : 'off'} {darkMode ? 'dark' : 'light'} {isAdmin ? 'is-admin' : 'is-user'}\"\r\n```\r\nto do it properly using current svelte class directive we currently have to resort to the less than ideal double entries:\r\n```\r\nüëé  class={dynamic} class:on={isOn} class:off={!isOff} class:dark={darkMode} class:light={!darkMode} class:is-admin={isAdmin} class:is-user={!isAdmin}\r\n```\r\nWhereas the suggested pattern would always work and can be implemented internally using a more optimal class insertion rather than string manipulation on the property and would improve the syntax to:\r\n```\r\n‚úÖ class={dynamic} class:on|off={isOn} class:dark|light={darkMode} class:is-admin|is-user={isAdmin}\r\n```\r\n(_you don't always want to swap. just showing how much less fragile and more clear and inline with svelte class directive this pattern extension would be.  the other is a workaround that fails at places.  hope that helps explain better why this would be a valuable improvement.  it's like a new superpower for the class directive and the cleanest, tightest, clearest notation.  the class directive `class:whatever` wouldn't exist if string manipulation in the class parameter was ideal.  this suggested follows that philosophy._)\r\n\r\nWhat I'm suggesting is `class:on|off={isOn}` as syntactic sugar shortcut for the ideal unbreakable pattern `class:on={isOn} class:off={!isOff}` and that `class={isOn ? 'on' : 'off'}` should be used with care as it is breaky/fragile with how it combines with the svelte class directive and it does string insertion on the property which is far less ideal that direct class injection.  Hopefully the value of that addition makes sense.  Thanks.","updated_at":"2021-03-04T02:01:03Z","created_at":"2021-03-03T21:55:49Z","creator_user_login":"JoshuaJarman"}
{"number":6046,"comment_id":"790148709","body":"I'm not completely against this, although I think it is a nice-to-have, rather than incredibly valuable.\r\n\r\nI do think that this is a bit less readable:\r\n\r\n```svelte\r\n<div class='whatever-other-classes {isOn ? 'on' : 'off'}' />\r\n```\r\n\r\nthan this:\r\n\r\n```svelte\r\n<div class='whatever-other-classes' class:on|off={isOn} />\r\n```\r\n\r\nBut there isn't a huge amount in it.","updated_at":"2021-03-03T23:29:41Z","created_at":"2021-03-03T23:29:18Z","creator_user_login":"pngwn"}
{"number":6046,"comment_id":"790220545","body":"apparently people instinctively reach for an anti-pattern and recommend that without understanding all the implications or are fine with the tradeoff for in exchange having to write less code (still more than the suggestion).\r\n\r\nwe have the class directive specifically to avoid hacking on the class property string and the problems associated with that.   if it were simply writing less code i'd let the tooling/vscode handle that automatically and never look back,  it isn't that although that is also true and nice, it is about making doing it right easier than doing it in a way that the class directive was created to avoid.  does that make sense?\r\n\r\nif people are reaching for an anti-pattern, it is a sign we should make doing it the proper way easier.\r\ni agree, this is not critical, but worth recommending and should be simple, so i captured the suggestion.\r\n\r\nagain this isn't just about readability or verbosity, the hacky pattern is also less efficient (doing string manipulation on the property instead of class injection/browser internals and efficiency) and breaks when used under various standard svelte class directive scenario like alongside dynamically declared classes.  it isn't good practice and it is fragile and if it were good practice we wouldn't even have the class directive we'd just do that.\r\n\r\nthanks for considering, especially since other svelte directives use modifiers in a similar fashion.\r\nthis was supposed to have been tagged \"proposal\", not sure why it wasn't.","updated_at":"2021-03-04T08:31:10Z","created_at":"2021-03-04T01:49:16Z","creator_user_login":"JoshuaJarman"}
{"number":6046,"comment_id":"791308694","body":"For described situation I use this workaround (it seems to be more readable than suggested solution)\r\n\r\n```svelte\r\n<div class:on={isOn}>XXX</div>\r\n\r\n<style>\r\n:not(.on) [\r\n  /* style for OFF variant */\r\n}\r\n</style>\r\n```","updated_at":"2021-03-05T09:53:52Z","created_at":"2021-03-05T09:53:52Z","creator_user_login":"janproch"}
{"number":6046,"comment_id":"791334000","body":"@janproch your workaround works very nicely if you have full control over the styling, you don't even need the `:not(.on)`, just make the 'off' styling default and override where required in the `on` style.\r\n\r\nBut this approach becomes harder when using css utility frameworks like tailwind where you would want to toggle between two classed defined elsewhere\r\n\r\n```html\r\n<div class:bg-gray-400|bg-red-400={active}>...</div>\r\n```\r\n","updated_at":"2021-03-05T10:36:40Z","created_at":"2021-03-05T10:36:40Z","creator_user_login":"stephane-vanraes"}
{"number":6046,"comment_id":"808591871","body":"I think my issue with this proposal is that we've generally used the pipe | character for modifiers, whereas `class:on|off` uses it as a sort of `or` statement. I don't like that inconsistency.","updated_at":"2021-03-26T23:46:11Z","created_at":"2021-03-26T23:46:11Z","creator_user_login":"antony"}
{"number":6046,"comment_id":"864494807","body":"@antony do you think it would be better to use syntax that more closely follows js like\r\n`class:on||off={isOn}`","updated_at":"2021-06-20T03:39:11Z","created_at":"2021-06-20T03:39:11Z","creator_user_login":"Zachiah"}
{"number":6046,"comment_id":"996430177","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-17T04:32:52Z","created_at":"2021-12-17T04:32:52Z","creator_user_login":"stale[bot]"}
{"number":7913,"comment_id":"1279118560","body":"I've also encountered this scenario - or at least I believe it's the same scenario. I've spent a couple of days digging into the update/dirty flagging system and I'm, pretty confident about the scenarios that cause it to happen, but I haven't yet built up a clear enough picture of the compiler in my head to trace the exact causes of the bug.\r\n\r\nThe problem seems to be rooted in how the `$$scope` of a component is marked as dirty over updates within the same flush. \r\n\r\nMy component structure is something like this:\r\n```svelte\r\n<script>\r\n  export let value\r\n  export let error\r\n  valid = !error\r\n</script>\r\n\r\n<Wrapper>\r\n  <Input {value} {valid} />\r\n</Wrapper>\r\n```\r\n\r\nThe problem arises due to the wrapper element having an additional component with a slot in it:\r\n```svelte\r\n// Within Wrapper.svelte\r\n<Grid>\r\n  A label:\r\n  <slot />\r\n</Grid>\r\n```\r\n\r\nIn this scenario, the required context for the Input to render properly is passed through 2 successive slots, first via the `Wrapper`, and then via the `Grid`.\r\n\r\nSince the error is set via an external (synchronous) service, the component is updated twice. This is the sequence of events I have observed:\r\n\r\n1. The value prop is updated.\r\n2. The bitmask is correctly set to flag `value` as dirty.\r\n3. The `<Wrapper>` $$scope is invalidated. This scope includes the context of the root component, i.e. `value`, `error`, and `valid`, and the correctly set `dirty` bitmask.\r\n4. The external service is triggered (I've left out the details because I don't think they're relevant to the issue, but it's essentially an XState state machine).\r\n5. The `error` prop is changed, causing the component to be invalidated again. This is still within the same microtask queue, before any rendering to the DOM.\r\n6. The bitmask is updated again, and this time `valid` is marked as dirty, but the original `value` isn't, as the bitmask is reset after a component is processed in the `flush()` function within Svelte.\r\n7. The `<Wrapper>` scope is invalidated again. The data in the scope is all correct, but the bitmask only refers to the latest change - the `valid` flag and not the `value`.\r\n8. The `<Grid>` is on the flush queue at this point. Its scope has been received from the `<Wrapper>` component, and all seems correct. This scope also includes the scope of the original root component however, with correct data but an invalid bitmask.\r\n9. At this point the elements are rendered, and the `<Input>` in question is marked as invalid but still contains the previous text as that prop was not flagged for rerendering.\r\n\r\nMoving the `<slot>` out of the `<Grid>` in the wrapper component solves the issue, which is what leads me to think that some additional information is being lost across that second barrier.\r\n\r\nWhile looking through the compiler code I also noticed that there seems to be a function to cater for this kind of situation. The `get_slot_changes` function in the internal runtime utils seems to be merging scopes for slots and returning the correct bitmask. I'd hazard a guess that this is only being done one level deep, and that the second levels of slot contexts are just overwritten as the example seems to show. Then again I've never spent so much time looking at the Svelte internals before so I could be totally wrong.\r\n\r\nI'm not sure if this is an actual issue, or something that was intentionally not handled due to being too complex or rare - although in the latter case perhaps it should be added to the documentation. The fact that both changes are carried out within the same queue cycle but as successive operations seems to be a vital component to reproducing this. If I throw in an `await tick()` after the `value` is initially updated the problem disappears.\r\n","updated_at":"2022-10-14T14:55:15Z","created_at":"2022-10-14T14:55:15Z","creator_user_login":"james-camilleri"}
{"number":7913,"comment_id":"1307527049","body":"I'm currently having some issues with reactivity in nested slots as well. I tried to run your REPL with different Svelte versions and it appears that prior to version 3.14.0, this issue did not exist:\r\n\r\nhttps://svelte.dev/repl/39bafbb43d2a44af874156720f6e1cad?version=3.13.0\r\n\r\nHowever, starting with 3.14.0, it does:\r\n\r\nhttps://svelte.dev/repl/39bafbb43d2a44af874156720f6e1cad?version=3.14.0","updated_at":"2022-11-08T16:55:27Z","created_at":"2022-11-08T16:55:27Z","creator_user_login":"ilokhov"}
{"number":7913,"comment_id":"1493744186","body":"Just wanted to chime in and say I think I'm hitting this same issue on 3.58.0. It's very weird... I'm updating two props inside several nested slots, and while those update fine, it's affecting the reactivity of the third prop which I'm also updating at the same time.\r\n\r\nWhat workarounds have you folks used to get around this?\r\n\r\n**Edit:** Confirmed that the above REPL is still [failing on 3.58.0](https://svelte.dev/repl/39bafbb43d2a44af874156720f6e1cad?version=3.58.0), so clearly this is still an issue :( ","updated_at":"2023-04-03T06:31:45Z","created_at":"2023-04-03T06:30:17Z","creator_user_login":"Nickersoft"}
{"number":7913,"comment_id":"1503144611","body":"Hey @Nickersoft - I worked around it by removing one of the intermediary components (it was basically a style wrapper so it was easy to replace). This isn't a great solution obviously. You could try using a context coupled with a store perhaps? ","updated_at":"2023-04-11T11:17:04Z","created_at":"2023-04-11T11:17:04Z","creator_user_login":"james-camilleri"}
{"number":7913,"comment_id":"1524570647","body":"> I'm currently having some issues with reactivity in nested slots as well. I tried to run your REPL with different Svelte versions and it appears that prior to version 3.14.0, this issue did not exist:\r\n\r\nThat would make sense. Svelte 3.14 changed a lot of stuff about how the dirty tracking worked. I just hit this today as well.\r\n\r\nCan't make any promises since I haven't made changes in this particular part of the code before but I'll try to take a crack at this one later this week.","updated_at":"2023-04-27T03:11:29Z","created_at":"2023-04-27T03:11:29Z","creator_user_login":"dimfeld"}
{"number":7913,"comment_id":"1524729093","body":"The `bind` seems to be a factor here. If I change `bind:steps={steps}` to just `steps={steps}` then the bug goes away.\r\n\r\nIn the case where I encountered this, I also was using `bind`, although it was on a different variable than the one that was not correctly updating.","updated_at":"2023-04-27T05:43:22Z","created_at":"2023-04-27T05:34:46Z","creator_user_login":"dimfeld"}
{"number":7913,"comment_id":"1690300575","body":"The bug still exists [in version 4](https://svelte.dev/repl/39bafbb43d2a44af874156720f6e1cad?version=4.2.0)! ","updated_at":"2023-08-23T16:48:46Z","created_at":"2023-08-23T16:48:46Z","creator_user_login":"msigwart"}
{"number":7913,"comment_id":"1691175494","body":"Another REPL which is still confusing but maybe a little easier to reason about: https://svelte.dev/repl/571ca8a8bed644838375a0a037a4ec1c?version=4.2.0","updated_at":"2023-08-24T07:43:35Z","created_at":"2023-08-24T07:43:35Z","creator_user_login":"msigwart"}
{"number":6859,"comment_id":"946889862","body":"Would would this compile to in the output CSS for a component? We're limited by what's actually supported in CSS, and there's nothing like `!unimportant` in CSS as far as I know.","updated_at":"2021-10-19T16:23:02Z","created_at":"2021-10-19T16:23:02Z","creator_user_login":"Conduitry"}
{"number":6859,"comment_id":"946892605","body":"It exists, and it's called the `:where` selector. It has 0 specificity, and can be overrided by any other selector. ","updated_at":"2021-10-19T16:26:21Z","created_at":"2021-10-19T16:26:12Z","creator_user_login":"TheOnlyTails"}
{"number":6859,"comment_id":"946908618","body":"Does `:where()` itself make sense to be what you'd use for this feature then? Right now, `:where(.par)` compiles to `.svelte-123:where(.par)`, which isn't helpful in this case. If that compiled to `:where(.par.svelte-123)` that would suffice for this I think.\r\n\r\nThe question then is whether making that change would be considered breaking. Probably technically, but I'm also having a hard time imagining anyone depending on the current `.svelte-123:where(.par)` behavior for anything practical.","updated_at":"2021-10-19T16:45:41Z","created_at":"2021-10-19T16:45:41Z","creator_user_login":"Conduitry"}
{"number":6859,"comment_id":"947028805","body":"@TheOnlyTails made an excellent point here!\r\n\r\n> Does `:where()` itself make sense to be what you'd use for this feature then?\r\n\r\nUsing `:where()` itself would probably work but seems less succinct and in particular less semantic than it could be.\r\n\r\n![Screen Shot 2021-10-19 at 20 05 54](https://user-images.githubusercontent.com/30958850/137974942-8b6e5853-d840-4bd3-ae3f-62d1874a14b9.png)\r\n\r\nI assume Svelte's policy on CSS is that anything inside the style tag must parse as valid CSS, i.e. we can't define any new keyword or syntax?","updated_at":"2021-10-19T19:11:55Z","created_at":"2021-10-19T19:11:55Z","creator_user_login":"janosh"}
{"number":6859,"comment_id":"947031342","body":"Assuming the CSS scoping system works like I think it does, if you insert each selector into the `:where` selector _after_ being added the scoping class, it should work just fine.","updated_at":"2021-10-19T19:15:31Z","created_at":"2021-10-19T19:15:31Z","creator_user_login":"TheOnlyTails"}
{"number":6859,"comment_id":"947050578","body":"I just tried this out and what's odd is the REPL and the latest SvelteKit `v1.0.0-next.186` seem to behave differently here.\r\n\r\nIn the REPL, the local styles even wrapped in `:where()` take precedence. But in SvelteKit, the outside `:global()` styles take effect.","updated_at":"2021-10-19T19:44:55Z","created_at":"2021-10-19T19:44:55Z","creator_user_login":"janosh"}
{"number":6859,"comment_id":"947113653","body":"If this is changed, it could be regarded as a breaking change since people may rely on this, consciously or not.","updated_at":"2021-10-19T21:19:25Z","created_at":"2021-10-19T21:19:25Z","creator_user_login":"dummdidumm"}
{"number":6859,"comment_id":"947125759","body":"If you want a verbose workaround, you can avoid the use of `!important` by making your global CSS selector more specific:\n\n```css\n.foo.foo {\n  color: red;\n}\n```\n\nI'm not saying that this is a good alternative, just that it doesn't use `!important`. In general, Svelte has trouble supporting external theming and I do wish there were more options for tweaking Svelte's CSS output. Personally, I wouldn't mind `<style global>` to just not have CSS hashing, but the `:where` solution is pretty clever.","updated_at":"2021-10-19T21:37:46Z","created_at":"2021-10-19T21:37:46Z","creator_user_login":"Monkatraz"}
{"number":6859,"comment_id":"947820997","body":"So how about a having a new style tag\r\n\r\n```html\r\n<style context=\"fallback\">\r\n  color: red\r\n</style>\r\n```\r\n\r\nsimilar to how there are two types of script tags (`<script context=\"module\">`) where every CSS rule in this `<style>` block would be wrapped in `:where()` (after hashing) to make it easily overridable? That would not be a breaking change and would make component styling easier imo.","updated_at":"2021-10-22T08:58:45Z","created_at":"2021-10-20T16:12:44Z","creator_user_login":"janosh"}
{"number":6859,"comment_id":"949401794","body":"I'm not sure it is related, but I currently face an issue when trying to integrate daisyUI in my Svelte application. daisyUI uses this syntax: `*:where(.btn),:global(.mockup-code),:global(.mockup-window),:global(.badge),:global(.card)`, which causes a compilation error with Svelte: `Error during bundle: :global(...) must contain a single selector`.","updated_at":"2021-10-22T08:25:47Z","created_at":"2021-10-22T08:25:47Z","creator_user_login":"dsebastien"}
{"number":6859,"comment_id":"949623575","body":"@dsebastien ~See https://github.com/sveltejs/svelte/issues/6477.~\r\n\r\nSorry, copy-paste error. Meant to link https://github.com/sveltejs/svelte/issues/6434.","updated_at":"2021-10-22T14:04:58Z","created_at":"2021-10-22T13:17:11Z","creator_user_login":"janosh"}
{"number":6859,"comment_id":"976231013","body":"Is svelte syntax different from react ? which is better?","updated_at":"2021-11-23T09:04:31Z","created_at":"2021-11-23T07:49:22Z","creator_user_login":"rcmangnale"}
{"number":6143,"comment_id":"808935510","body":"With only a compiled deployed version somewhere, and without the source of your app, there's nothing that anybody can do.","updated_at":"2021-03-28T18:13:59Z","created_at":"2021-03-28T18:13:59Z","creator_user_login":"Conduitry"}
{"number":6143,"comment_id":"808939090","body":"It's uploaded with the source maps so the code which produces the error can be viewed. I can't reproduce the error in REPL. Mostly because I don't know it's cause and what to include. Would the source code help?","updated_at":"2021-03-28T18:34:34Z","created_at":"2021-03-28T18:34:34Z","creator_user_login":"m1212e"}
{"number":6143,"comment_id":"809273729","body":"So I FINALLY tracked it down with simply commenting out code snippets each at a time. I still have no idea why, but this was the cause of the svelte internal error which was thrown:\r\n`             {#if index < element.petitions.length - 1}\r\n                <Divider />\r\n            {/if}`\r\n\r\nThe complete component for reference: [Pastebin](https://pastebin.com/gXDg3qHk)\r\nThere were no undefined or null errors, all checks were perfectly valid and gave the correct results on logging.\r\nNo Idea why this happened.\r\nThanks for anyone who took the time :)","updated_at":"2021-03-29T10:37:19Z","created_at":"2021-03-29T10:36:51Z","creator_user_login":"m1212e"}
{"number":6143,"comment_id":"811111898","body":"As it seems it's a svelte error or I made a mistake which I'm unable to identify. @Florian-Schoenherr  managed to reproduce the error in a REPL so you can take a look easyily: https://svelte.dev/repl/837a844775ec43c98dc769de0d95ed07?version=3.36.0 which is originated in this https://github.com/TheComputerM/svelte-materialify/issues/199 issue.","updated_at":"2021-03-31T14:38:43Z","created_at":"2021-03-31T14:27:41Z","creator_user_login":"m1212e"}
{"number":6143,"comment_id":"811118282","body":"@m1212e *This guy managed","updated_at":"2021-03-31T14:36:00Z","created_at":"2021-03-31T14:36:00Z","creator_user_login":"Florian-Schoenherr"}
{"number":6143,"comment_id":"811119763","body":"@Florian-Schoenherr Sorry, didn't mean to forget you xD I edited my comment without proof reading it correctly. Surely the credit belongs to you.","updated_at":"2021-03-31T14:38:04Z","created_at":"2021-03-31T14:38:04Z","creator_user_login":"m1212e"}
{"number":6143,"comment_id":"811122864","body":"I updated the REPL again, it seems to be some modification error. I set the Interval really low to see the error faster.","updated_at":"2021-03-31T14:42:25Z","created_at":"2021-03-31T14:42:25Z","creator_user_login":"Florian-Schoenherr"}
{"number":6143,"comment_id":"870699901","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-29T15:29:13Z","created_at":"2021-06-29T15:29:13Z","creator_user_login":"stale[bot]"}
{"number":6143,"comment_id":"870780036","body":"@m1212e does this work now (can't remember what it does)?","updated_at":"2021-06-29T17:24:26Z","created_at":"2021-06-29T17:24:18Z","creator_user_login":"Florian-Schoenherr"}
{"number":6143,"comment_id":"871204673","body":"It doesn't. The REPL still throws errors. It was about the interval modifying the list which randomly crashes.","updated_at":"2021-06-30T08:32:23Z","created_at":"2021-06-30T08:32:23Z","creator_user_login":"m1212e"}
{"number":6143,"comment_id":"871288982","body":"Ah it was about line 145, mounting a component right there doesn't work, only html elements.\r\nSo there's a problem with mounting. I would suggest renaming the issue?\r\n\"Weird error (when modifying array) at Object.mount at update_keyed_each\"\r\nwith or without the words in parens","updated_at":"2021-06-30T10:36:17Z","created_at":"2021-06-30T10:36:17Z","creator_user_login":"Florian-Schoenherr"}
{"number":6143,"comment_id":"1374455999","body":"Is there any resolution or progress on this ?\r\nI have the same - intermittent issue - it completely breaks my app, and I'm unable to find a workaround ! \r\n","updated_at":"2023-01-07T11:56:55Z","created_at":"2023-01-07T11:56:55Z","creator_user_login":"weepy"}
{"number":6143,"comment_id":"1374487717","body":"> As it seems it's a svelte error or I made a mistake which I'm unable to identify. @Florian-Schoenherr managed to reproduce the error in a REPL so you can take a look easyily: https://svelte.dev/repl/837a844775ec43c98dc769de0d95ed07?version=3.36.0 which is originated in this [TheComputerM/svelte-materialify#199](https://github.com/TheComputerM/svelte-materialify/issues/199) issue.\r\n\r\nit seems this example no longer works - the api request is not working I think - `https://restcountries.eu/rest/v2/all?fields=name;alpha2Code;translations;flag;`","updated_at":"2023-01-07T13:48:30Z","created_at":"2023-01-07T13:48:30Z","creator_user_login":"weepy"}
{"number":6298,"comment_id":"832640790","body":"> I'll probably have to workaround this by sprinkling some `fast-deep-equal` over my stores.\r\n\r\nNope, that doesn't generically work, because the point is that I work with mutable objects. I update a property deep inside an object that is held by a store and then call `set` to notify everyone (or like in this issue `bind` does that for me). Checking for equality is always true because it's the same reference.","updated_at":"2021-05-05T12:16:57Z","created_at":"2021-05-05T12:16:57Z","creator_user_login":"Prinzhorn"}
{"number":6298,"comment_id":"889262027","body":"Thanks to #6590 I can confirm that this is not related to `#each` and repros without it, `bind:` just seems to trigger an unnecessary update.\r\n\r\nUpdated REPL with 3.41.0 will log a store.set call https://svelte.dev/repl/1e967d0310c3428989dde2ec1bf70087?version=3.41.0","updated_at":"2021-07-29T15:51:45Z","created_at":"2021-07-29T15:51:45Z","creator_user_login":"Prinzhorn"}
{"number":6298,"comment_id":"906212200","body":"Likely the same underlying reason as for #5689","updated_at":"2021-08-26T08:41:04Z","created_at":"2021-08-26T08:41:04Z","creator_user_login":"dummdidumm"}
{"number":6298,"comment_id":"1012504313","body":"It is about the binding data being an 'object' .\r\nprimitive and object comparison :\r\nhttps://svelte.dev/repl/a58cf5f308904c02b34d0a26f3a4e9fa","updated_at":"2022-01-13T20:54:07Z","created_at":"2022-01-13T20:49:25Z","creator_user_login":"SiaEmgee"}
{"number":6298,"comment_id":"1339910226","body":"This should be fixed in 3.54.0 - https://svelte.dev/repl/1e967d0310c3428989dde2ec1bf70087?version=3.54.0","updated_at":"2022-12-06T19:37:24Z","created_at":"2022-12-06T19:37:24Z","creator_user_login":"Conduitry"}
{"number":6298,"comment_id":"1368674996","body":"https://github.com/sveltejs/svelte/pull/7981 is rollbacked by https://github.com/sveltejs/svelte/pull/8114.\r\nTherefore again I reopen this issue now.\r\nAnd I removed the \"bug\" label, such conservative setter / reactive statement calling is one of Svelte's trade-offs between performance and this issue.\r\nFor example, Svelte doesn't use a Proxy, but it uses `[safe_not_equal](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/utils.ts#L39-L41)`.\r\nA reactive statement is always executed whenever there is a possibility of a change in the object's properties.\r\nIt means reactive statements should have idempotence. ","updated_at":"2023-01-02T06:01:08Z","created_at":"2023-01-02T06:01:08Z","creator_user_login":"baseballyama"}
{"number":6298,"comment_id":"1412298306","body":"@dummdidumm @baseballyama I understand that this is not trivial to fix or potentially even impossible with the current architecture. However, I'm curious if it is possible and if there is _any_ way forward? I was thinking about funding it, but the fact that the Open Collective money is basically not touched makes me think putting money into it won't help.\r\n\r\nI've worked with Svelte for quite some time now and I absolutely love it. In all this time I've hardly encountered any larger issues. But this bug is a serious concern to me and I think a lot of apps are wasting CPU cycles and don't even know it. Originally I noticed this because of pointless network requests (for persisting store changes) that happened just by rendering a component (that was binding to that store). I was able to workaround that by deep-clone + deep-equal to at least prevent the network requests.\r\n\r\nNow I noticed that there's another problem that I cannot workaround. I'm using bidirectionally derived stores. Essentially I store serializable objects in my store (e.g. `{selectedItemsIds: []}`) but I work with things like Sets (e.g. `{selectedItemsIds: new Set([])}`). So my app can use performant `selectedItemsIds.has(id)` while the backing store doesn't have to worry about these. I realized that a larger object I'm using throughout parts of the app causes `750` (!!) `set` calls. For nothing. Just by opening a certain component. That accumulates to anywhere from a few ms to hundreds of ms of scripting, depending on the cost of my store (e.g. calling `new Set(x)` 750 times with a large array is slow).\r\n\r\nThis is a rerecording of me clicking a button that renders the component.\r\n\r\n![Screenshot from 2023-02-01 16-32-49](https://user-images.githubusercontent.com/679144/216091275-48d4a143-a20e-4e24-9a12-d1325b996195.png)\r\n\r\nI don't see a workaround. Using something like `memoize-one` to at least save on `new Set()` calls doesn't work, since I'm using mutable objects. Using `immutable` is not an option, because binding to subsets of objects within components is a huge part of why I love Svelte in the first place. It just feels magical that every change comes back to the root.\r\n\r\nMaybe there can be a new compiler options to enable some of the fix in https://github.com/sveltejs/svelte/pull/8114 including something like using the dirty checks for eager updates too? I'm sure there must be some sort of middle ground or clever way we can at least improve the current situation.","updated_at":"2023-02-01T15:57:39Z","created_at":"2023-02-01T15:57:39Z","creator_user_login":"Prinzhorn"}
{"number":6298,"comment_id":"1412302593","body":"The reactivity is definitely something we will have a conversation about in the near future to see what we can improve here - sorry, can't be more specific than that, simply because we didn't get to thinking about it more deeply yet.","updated_at":"2023-02-01T16:00:37Z","created_at":"2023-02-01T16:00:37Z","creator_user_login":"dummdidumm"}
{"number":6001,"comment_id":"781630921","body":"I think a simple solution to solve this problem just change the duration of transition and animate. I tried duration to 600ms or less than 600ms and it's work...","updated_at":"2021-02-18T20:59:23Z","created_at":"2021-02-18T20:59:23Z","creator_user_login":"apriliandi246"}
{"number":6001,"comment_id":"781639138","body":"Yup, that works in this case.\n\nHowever, if you go to https://shreyas44.vercel.app and scroll down to the *My Projects* section and keep clicking the next button, the same thing happens. And in that case the duration is set to 400ms.","updated_at":"2021-02-18T21:15:25Z","created_at":"2021-02-18T21:14:56Z","creator_user_login":"shreyas44"}
{"number":6001,"comment_id":"781663104","body":"I think fly has to have a significantly shorter duration than flip. When they are the same duration, there is a race condition somewhere and the animation isn't calling the function to remove the `position: absolute` that it uses to figure out where things are. If you inspect one of the stuck items and look in the actual console, you'll see it's temporary absolute position is never removed.","updated_at":"2021-02-18T22:01:17Z","created_at":"2021-02-18T22:01:17Z","creator_user_login":"kindoflew"}
{"number":6001,"comment_id":"782049143","body":"@kindoflew that does make sense. \r\n\r\nOne thing I forgot to mention is that, this problem doesn't occur when the transition is only set to `in`, similar to #3202. However, I'm guessing this is because the `animate` doesn't affect the element until it finishes it's *in transition*?\r\n\r\nI tried a workaround where I use a `shouldTransition` state variable, and if it's set to true, render the element with the animate directive else without it. When the next/back button is clicked, this would first set `shouldTransition` to false resulting in rendering the element without the animate directive (only if it's in the edge card that will be removed from the DOM) and then set the `shouldTransition` to true, which results in only the fly transition and not flip animate acting on the card leaving the DOM. First problem with this is that it's very hacky. Second, the svelte compiler raises an error `An element that uses the animate directive must be the immediate child of a keyed each block`, because I use an `if` block inside the `each` block and I'm guessing this error is raised because it could cause errors at runtime?\r\n","updated_at":"2021-02-19T12:37:50Z","created_at":"2021-02-19T12:37:50Z","creator_user_login":"shreyas44"}
{"number":6001,"comment_id":"782117099","body":"Probably also related to  #4732. The docs on [animate](https://svelte.dev/docs#animate_fn) do say that about being the immediate child, I'm assuming so Svelte can know specifically which items to move to new positions before animating.  The solution for your portfolio might be to forgo using flip and instead use a carousel component like [svelte-carousel](https://github.com/beyonk-adventures/svelte-carousel) or roll your own.","updated_at":"2021-03-28T21:36:29Z","created_at":"2021-02-19T14:41:42Z","creator_user_login":"kindoflew"}
{"number":6001,"comment_id":"862351046","body":"Seems to happen when using `flip` with _any_ transition: `scale`, `fade`, `fly`, etc.\r\n\r\n[Demo (REPL)](https://svelte.dev/repl/eab4210b9726479ca1f90e9583354e96?version=3.38.2)\r\n\r\n![flipflop](https://user-images.githubusercontent.com/12453/122221726-902d7a00-ce7f-11eb-97d6-554ec59f079f.gif)\r\n\r\nSimilar to #4910, and probably related to #4732","updated_at":"2021-06-16T12:48:35Z","created_at":"2021-06-16T12:48:35Z","creator_user_login":"twobitfool"}
{"number":6001,"comment_id":"885961247","body":"Duplicate #4910","updated_at":"2021-07-23T23:31:32Z","created_at":"2021-07-23T23:31:32Z","creator_user_login":"pushkine"}
{"number":6001,"comment_id":"1396375706","body":"I wonder if this is related to my StackOverflow post: [how to animate:flip with in/out:fade?](https://stackoverflow.com/questions/75154309/how-to-animateflip-with-in-outfade)\r\n\r\n[REPL](https://svelte.dev/repl/5feb66e2ac544e10a11b98890c1b24dd?version=3.55.1)\r\n\r\n![Screen Recording 2023-01-17 at 9 53 39 PM](https://user-images.githubusercontent.com/6892407/213344459-a9be1e5a-15c6-4f26-9b65-e0238f5fc089.gif)\r\n","updated_at":"2023-01-19T02:54:25Z","created_at":"2023-01-19T02:54:25Z","creator_user_login":"pejalo"}
{"number":5764,"comment_id":"741799401","body":"Very interesting!","updated_at":"2020-12-09T14:18:07Z","created_at":"2020-12-09T14:18:07Z","creator_user_login":"peopledrivemecrazy"}
{"number":5764,"comment_id":"744497723","body":"I'd say that SVG XML !== HTML maybe?\r\n`@html` probably doesn't know how to parse the `<circle/>` tag since it's not a valid HTML tag.\r\n\r\nEdit: Hmm .. your working examples actually debunk that theory - feel free to ignore the comment above!","updated_at":"2020-12-14T15:02:21Z","created_at":"2020-12-14T15:00:13Z","creator_user_login":"chimp1nski"}
{"number":5764,"comment_id":"753292326","body":"The difference here is that the standalone component uses an HtmlTag class to add the `<circle>` HTML, while the others just set innerHTML on the container. The latter appears to be an optimization when there is only an `@html` and nothing else inside an element.\r\n\r\nSo that means that this also reproduces the bug, since it uses an HtmlTag to add the `@html` contents:\r\n```svelte\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n  <circle cx=\"200\" cy=\"500\" r=\"200\"></circle>\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\r\n</svg>\r\n```\r\n\r\nIn the above case the circle at cx=200 appears while the circle at cx=500 does not. Oddly, the browser devtools actually do show the `<circle ...>` markup as expected. But when examining the elements, I see this on the working one:\r\n![image](https://user-images.githubusercontent.com/1369558/103436381-e30bc180-4bbe-11eb-8889-85a88ecad03d.png)\r\n\r\nMeanwhile, that section is missing completely on the broken element, as if the attributes are not actually being set somehow. Likewise, examining an attribute on the two elements returns `undefined` in the broken case but an attribute, as expected, in the working case:\r\n\r\n![image](https://user-images.githubusercontent.com/1369558/103436410-1b130480-4bbf-11eb-9ba3-12d83dbb357d.png)\r\n\r\nMy best guess is that HtmlTag is using `document.createElement` to create the element that stores the rendered text, but it may need to use `document.createElementNS` with the appropriate namespace when inside an SVG. Not 100% sure on that though.\r\n\r\nI'm also not sure how easy this will be to detect since it seems like it would require walking all the way up the component tree at runtime to see if the element is inside an SVG, and also accounting for `foreignObject` and so on. Not great, but maybe someone knows a better way?\r\n\r\n## Workaround\r\n\r\nAll this means that the proper workaround is to always wrap an `@html` directive inside an SVG with a `<g>` (or any other SVG element) and put nothing else inside that `<g>`.","updated_at":"2021-01-03T07:12:01Z","created_at":"2021-01-01T09:27:30Z","creator_user_login":"dimfeld"}
{"number":5764,"comment_id":"806667275","body":"A side-effect of the bug is that svg case-sensitive attributes are all lowercased when inserted into the DOM.\r\n\r\n**Results in incorrect behavior**\r\n`{@html '<pattern patternUnits=\"userSpaceOnUse\">...</pattern>'}` => `patternunits=\"userSpaceOnUse\"`\r\n\r\n**Results in desired behavior**\r\n`<g>{@html '<pattern patternUnits=\"userSpaceOnUse\">...</pattern>'}</g>` => `patternUnits=\"userSpaceOnUse\"`","updated_at":"2021-03-25T12:43:19Z","created_at":"2021-03-25T12:40:27Z","creator_user_login":"timvanoostrom"}
{"number":5764,"comment_id":"869048002","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:38Z","created_at":"2021-06-26T19:04:38Z","creator_user_login":"stale[bot]"}
{"number":5764,"comment_id":"1000871244","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T15:15:30Z","created_at":"2021-12-24T15:15:30Z","creator_user_login":"stale[bot]"}
{"number":5764,"comment_id":"1008100584","body":"Hi, just stumbled on this issue (actually on the repl page). Thank you a lot for the `<g>` workaround. I think this is a real issue and should not be marked stale.","updated_at":"2022-01-08T18:42:34Z","created_at":"2022-01-08T18:42:34Z","creator_user_login":"louisabraham"}
{"number":5764,"comment_id":"1214406652","body":"I would suggest extending `@html` with a second, optional argument that can be used to specify the current namespace, if Svelte is unable to determine it correctly.","updated_at":"2022-08-14T16:04:15Z","created_at":"2022-08-14T16:04:15Z","creator_user_login":"brunnerh"}
{"number":5326,"comment_id":"683364562","body":"I've added a pull request that fixes the deletion/removal of element scenario.","updated_at":"2020-08-30T01:38:48Z","created_at":"2020-08-30T01:38:48Z","creator_user_login":"benbenbenbenbenben"}
{"number":5326,"comment_id":"768291758","body":"I had a similar problem when trying to implement a WYSIWYG editor in Svelte.\r\n\r\nHere is a REPL demonstrating the problem: https://svelte.dev/repl/a2edc54a9c3046c9b6b214ded94674b4?version=3.32.0\r\n\r\nAnother related REPL that I found:\r\nhttps://svelte.dev/repl/fa601199d8d345d3977bf48bdb8d14f4?version=3.24.1","updated_at":"2021-01-28T09:26:26Z","created_at":"2021-01-27T13:39:55Z","creator_user_login":"nicolodavis"}
{"number":5326,"comment_id":"768317155","body":"@benbenbenbenbenben What's the link to your PR?","updated_at":"2021-01-27T14:20:40Z","created_at":"2021-01-27T14:20:40Z","creator_user_login":"nicolodavis"}
{"number":5326,"comment_id":"869061442","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:39Z","created_at":"2021-06-26T21:03:39Z","creator_user_login":"stale[bot]"}
{"number":5326,"comment_id":"1000889561","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:42Z","created_at":"2021-12-24T16:15:42Z","creator_user_login":"stale[bot]"}
{"number":3553,"comment_id":"530850302","body":"Edit of Edit: \"I don't think this word means what I think it means...\"\r\n\r\nAnyway, I see what is meant by inlining after reading all the diffs.\r\nNevermind!\r\n","updated_at":"2019-09-12T14:45:21Z","created_at":"2019-09-12T14:24:50Z","creator_user_login":"ghost"}
{"number":3553,"comment_id":"542853678","body":"Made some progress on this front:\r\n\r\nIt appears https://github.com/sveltejs/svelte/blob/231fbfa020d477e265b14f99a7cb93e934c79719/src/compiler/compile/render_dom/wrappers/Element/index.ts#L495-L500 is the culprit. As for how to fix this issue, I'm not familiar enough with the code-base to provide meaningful input.","updated_at":"2019-10-16T19:22:59Z","created_at":"2019-10-16T19:22:59Z","creator_user_login":"dasZGFz"}
{"number":3553,"comment_id":"543132695","body":"I think this can be closed now?","updated_at":"2019-10-17T11:34:48Z","created_at":"2019-10-17T11:34:48Z","creator_user_login":"Conduitry"}
{"number":3553,"comment_id":"543256999","body":"@Conduitry The issue is still present as can be seen in this [REPL](https://svelte.dev/repl/126c10e8b6fa4d30904013a0f4849b79?version=3.13.0-alpha.0). My PR didn't fix these $$invalidate calls.","updated_at":"2019-10-17T16:31:58Z","created_at":"2019-10-17T16:31:47Z","creator_user_login":"dasZGFz"}
{"number":3553,"comment_id":"1001743876","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T20:38:14Z","created_at":"2021-12-27T20:38:14Z","creator_user_login":"stale[bot]"}
{"number":4922,"comment_id":"635364188","body":"Small observation: if you move the `bind:value` part after the `on:input` you get consistent behaviour: https://svelte.dev/repl/9a597057c12b4dcb89c7c16f24cec894?version=3.22.3","updated_at":"2020-05-28T13:54:44Z","created_at":"2020-05-28T13:53:16Z","creator_user_login":"kevmodrome"}
{"number":4922,"comment_id":"635372751","body":"Is this the same issue? I am fixing it in my component in this very moment...\r\nhttps://svelte.dev/repl/a6af64083fb844a99a0e8f4dd1bf1564?version=3.23.0 (e.g. type 'a' into the field)\r\nChrome: works as expected (2 results for 'a'), Firefox: doesn't filter it (6 results for 'a')","updated_at":"2020-05-28T14:08:56Z","created_at":"2020-05-28T14:08:04Z","creator_user_login":"Fygo"}
{"number":4922,"comment_id":"635387997","body":"See also #4826 and in particular [this comment](https://github.com/sveltejs/svelte/issues/4826#issuecomment-629130350) where I dug a little into something that sounds like the same issue. I'm still inclined to say that this isn't a bug, but perhaps a gotcha to be documented.","updated_at":"2020-05-28T14:34:43Z","created_at":"2020-05-28T14:34:43Z","creator_user_login":"Conduitry"}
{"number":4922,"comment_id":"635438937","body":"firefox - chrome\r\n![chrome_2020-05-28_18-03-22](https://user-images.githubusercontent.com/30108880/83165300-9aae9180-a10d-11ea-8a09-f8db3207b2d3.png)\r\n\r\n\r\nhttps://svelte.dev/repl/eb67900496e94128b8a54133c3e5c1b0?version=3.22.3\r\nhttps://georgezouq.github.io/2018/01/09/NOTE-Task-Microtask-Queues-and-Schedules/\r\n\r\nthe fix is to mimic chromium behavior by adding an intermediary function\r\n```js\r\ndispose = [\r\n\tlisten(input_1, \"input\", /*input_1_input_handler*/ ctx[7]),\r\n\tlisten(input_1, \"input\", /*input*/ ctx[3])\r\n];\r\n```\r\n```js\r\nfunction input_handlers(e) {\r\n\t/*input_1_input_handler*/ ctx[7](e);\r\n\ttick().then(() => /*input*/ ctx[3](e))\r\n}\r\ndispose = listen(input_1, \"input\", input_handlers);\r\n```\r\n\r\n","updated_at":"2020-06-21T15:05:41Z","created_at":"2020-05-28T16:00:21Z","creator_user_login":"pushkine"}
{"number":4922,"comment_id":"1000889496","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:25Z","created_at":"2021-12-24T16:15:25Z","creator_user_login":"stale[bot]"}
{"number":5162,"comment_id":"660181044","body":"Ah ‚Äî looks like someone caught this a few days ago https://github.com/Rich-Harris/pancake/issues/19","updated_at":"2020-07-17T15:47:09Z","created_at":"2020-07-17T15:47:09Z","creator_user_login":"Rich-Harris"}
{"number":5162,"comment_id":"660187468","body":"Yeah I tried to solicit input on #5079. It is technically a breaking change, but I'd argue that the code that is now disallowed was confusing. I'd kind of push for changing components that were affected by this, rather than rolling back part of this check. Having a scope where `foo` and `$foo` refer to different variables seems quite confusing.","updated_at":"2020-07-17T15:58:33Z","created_at":"2020-07-17T15:58:33Z","creator_user_login":"Conduitry"}
{"number":5162,"comment_id":"660191502","body":"Yeah, I guess in this situation we get to decide whether the code is 'valid' or not. For the time being at least I've made the change in pancake. I guess I wouldn't be put out if we closed this accordingly; at least there's an issue to land on if someone searches for the text of the error now.","updated_at":"2020-07-17T16:05:28Z","created_at":"2020-07-17T16:05:28Z","creator_user_login":"Rich-Harris"}
{"number":5162,"comment_id":"660194802","body":"Something else I had mentioned on that other PR - if we ever plan to allow subscribing to stores that are not defined at the top-level, that would have itself technically been a breaking change vs. the old behavior. (Because using `$foo` in a scope where `foo` was shadowing a top-level `foo` would suddenly mean something different.) Having a nice long intervening period where it throws a compile time error seems a lot safer.","updated_at":"2020-07-17T16:11:09Z","created_at":"2020-07-17T16:11:09Z","creator_user_login":"Conduitry"}
{"number":5162,"comment_id":"1118387960","body":"A problem I had was that I wanted to use the values of stores that have been bound by components. The solution for getting the values of the stores is using \r\n```js\r\nimport { get } from 'svelte/store'\r\n\r\nfunction getValue(store) {\r\n  // works\r\n  return get(store)\r\n  \r\n  // doesn't work\r\n  return $store\r\n}\r\n...\r\n```\r\nI made an example of my use case in a repl: https://svelte.dev/repl/acccf5911f7e41af8025ee88fc005a56?version=3.48.0","updated_at":"2022-05-05T10:13:24Z","created_at":"2022-05-05T10:13:24Z","creator_user_login":"Myrmod"}
{"number":5043,"comment_id":"647085017","body":"It feels like this is not `volume` only, it seemed like dom binding don't work well with tweening store","updated_at":"2020-06-21T06:25:47Z","created_at":"2020-06-21T06:25:47Z","creator_user_login":"tanhauhau"}
{"number":5043,"comment_id":"647093931","body":"@tanhauhau It does seem to work fine for input fields https://svelte.dev/repl/e318656eadcb466e949e28fb6867ad41?version=3.23.2","updated_at":"2020-06-21T07:59:00Z","created_at":"2020-06-21T07:59:00Z","creator_user_login":"skippednote"}
{"number":5043,"comment_id":"647135792","body":"`bind:value` listens to `input` events\r\n`bind:volume` listens to `volumechange` events\r\n\r\nyou can fix by guarding the setter\r\n\r\nhttps://svelte.dev/repl/a37443ed1b604a479219df59ce8f5a0d?version=3.23.2\r\nhttps://svelte.dev/repl/8c99ae976e27445995fb483585c6a36b?version=3.23.2","updated_at":"2020-06-21T14:30:47Z","created_at":"2020-06-21T14:30:47Z","creator_user_login":"pushkine"}
{"number":5043,"comment_id":"647209873","body":"> you can fix by guarding the setter\r\n\r\nJust to be clear, it's still indirect bindings.","updated_at":"2020-06-22T00:59:06Z","created_at":"2020-06-22T00:59:06Z","creator_user_login":"arxpoetica"}
{"number":5043,"comment_id":"647374187","body":"It's not a bug, `volumechange` fires every time `volume` changes, you cannot tween it without a guard\r\n\r\nYou could raise a proposal for svelte to auto guard all bindings to events that trigger on change\r\n\r\n```diff\r\nfunction audio_volumechange_handler() {\r\n+\t if ($volume !== this.volume) {\r\n\t\t$volume = this.volume;\r\n\t\tvolume.set($volume);\r\n+\t }\r\n}\r\n```","updated_at":"2020-06-22T08:40:41Z","created_at":"2020-06-22T08:40:41Z","creator_user_login":"pushkine"}
{"number":5043,"comment_id":"647788776","body":"Volume is a two-way binding, so expected behavior would be to change according to tween.","updated_at":"2020-06-22T21:55:01Z","created_at":"2020-06-22T21:55:01Z","creator_user_login":"arxpoetica"}
{"number":5043,"comment_id":"647917530","body":"An alternate method (non bindings): https://svelte.dev/repl/9a5e9dcf08fd4db58ac0fc522bba97aa?version=3.23.2","updated_at":"2020-06-23T05:30:34Z","created_at":"2020-06-23T05:30:34Z","creator_user_login":"arxpoetica"}
{"number":5017,"comment_id":"644245844","body":"@frederikhors could you please raise this feature request using the template, rather than linking to the article? It would be much easier for us to consider if it were more concise and to the point :)\r\n\r\nI'll re-open once the description is updated to provide the what, why, and perhaps some examples of why this feature is useful!","updated_at":"2020-06-15T16:43:48Z","created_at":"2020-06-15T16:43:48Z","creator_user_login":"antony"}
{"number":5017,"comment_id":"644262155","body":"@antony, do you like it now? üòÑ","updated_at":"2020-06-15T17:16:55Z","created_at":"2020-06-15T17:16:37Z","creator_user_login":"frederikhors"}
{"number":5017,"comment_id":"644291784","body":"There are a few existing issues that are probably relevant that come up in a search for \"suspense\". I haven't really looked at any of them too closely though.","updated_at":"2020-06-15T18:18:41Z","created_at":"2020-06-15T18:18:41Z","creator_user_login":"Conduitry"}
{"number":5017,"comment_id":"869091361","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-27T02:51:06Z","created_at":"2021-06-27T02:51:06Z","creator_user_login":"stale[bot]"}
{"number":5017,"comment_id":"1000889516","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:31Z","created_at":"2021-12-24T16:15:31Z","creator_user_login":"stale[bot]"}
{"number":5017,"comment_id":"1000889883","body":"Nope","updated_at":"2021-12-24T16:17:08Z","created_at":"2021-12-24T16:17:08Z","creator_user_login":"frederikhors"}
{"number":5198,"comment_id":"663750070","body":"I've never seen such a pattern before but, as you point out, it seems to be valid HTML. That change was introduced in [this PR](https://github.com/sveltejs/svelte/commit/9031c1690588f7dfe6633b876d025814d94ad6c9#diff-c9908ba4565df074928a36b53be55786) but there's no apparent reason as to why. I can open a PR removing that but I'm afraid I'm missing something here.","updated_at":"2020-07-24T21:56:21Z","created_at":"2020-07-24T21:56:21Z","creator_user_login":"caroso1222"}
{"number":5198,"comment_id":"667382687","body":"It makes sense to remove the validation since the spec allows global attributes. https://html.spec.whatwg.org/#the-title-element","updated_at":"2020-07-31T21:35:18Z","created_at":"2020-07-31T21:35:18Z","creator_user_login":"umanghome"}
{"number":5198,"comment_id":"667513233","body":"I talked about this on Discord and it seems like the maintainers are not willing to remove the validation. The argument being that the article posted by op is an experiment more than good practice. I too consider the validation to be irrelevant given that it should be allowed, according to the spec.","updated_at":"2020-08-01T10:55:40Z","created_at":"2020-08-01T10:55:40Z","creator_user_login":"caroso1222"}
{"number":5198,"comment_id":"1000889544","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:38Z","created_at":"2021-12-24T16:15:38Z","creator_user_login":"stale[bot]"}
{"number":5045,"comment_id":"648166787","body":"The test failure here looks to be legitimate.","updated_at":"2020-06-23T13:57:39Z","created_at":"2020-06-23T13:57:39Z","creator_user_login":"Conduitry"}
{"number":5045,"comment_id":"869054967","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:36Z","created_at":"2021-06-26T20:03:36Z","creator_user_login":"stale[bot]"}
{"number":5045,"comment_id":"1471812152","body":"@dummdidumm is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22a2add25764a0b51c5dc43d0e44ba9712c071f9ec%22%7D%2C%22id%22%3A%22QmbqQwyPmmnaTs4tjmBwLLXY2FJzMNJopSn31G7RDrA2E8%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A5045%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-03-16T11:50:57Z","created_at":"2023-03-16T11:50:57Z","creator_user_login":"vercel[bot]"}
{"number":5045,"comment_id":"1471863772","body":"I'm not sure how I feel about this change. \r\n- Con: It could result in a lot of false positive reruns\r\n- Con: The tests currently fail, unsure how reliably we can get this to work with introducing bugs\r\n- Pro: Intuitively it makes sense to me to rerun in this case\r\n\r\nIn general this looks like one of those general shortcomings / things we haven't quite thought through holistically for bindings. Personally I'd hold off from merging this and wait until Svelte 5 where we should have a deep conversation about the future direction of bindings.","updated_at":"2023-03-16T12:40:52Z","created_at":"2023-03-16T12:24:51Z","creator_user_login":"dummdidumm"}
{"number":5045,"comment_id":"1471875767","body":"@dummdidumm yes you are right, i think we can hold off or even close this one for now.","updated_at":"2023-03-16T12:33:34Z","created_at":"2023-03-16T12:33:34Z","creator_user_login":"tanhauhau"}
{"number":5143,"comment_id":"658201947","body":"Having the `<select>` and the `<option>`s exist in different components is not something that was ever officially supported, so I'm surprised this used to work with a `<slot>`. It looks like this changed in 3.23.0.","updated_at":"2020-07-14T14:08:53Z","created_at":"2020-07-14T14:08:53Z","creator_user_login":"Conduitry"}
{"number":5143,"comment_id":"658262445","body":"Thanks @Conduitry for the FYI.  It actually works well aside from having the `multiple` prop (which also used to work pre 3.23.0).  Would you be up for a PR that does a null check, etc?","updated_at":"2020-07-14T15:56:52Z","created_at":"2020-07-14T15:56:52Z","creator_user_login":"bestguy"}
{"number":5143,"comment_id":"1000889541","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:36Z","created_at":"2021-12-24T16:15:36Z","creator_user_login":"stale[bot]"}
{"number":5143,"comment_id":"1227633029","body":"I have exact the same issue: \r\nhttps://svelte.dev/repl/b1156db2f4304877848964581e4ac671?version=3.49.0\r\nIt does work with `$$props` instead of `$$restProps` and even with the options included in the select directly. ","updated_at":"2022-08-25T18:42:52Z","created_at":"2022-08-25T18:42:52Z","creator_user_login":"tkvw"}
{"number":5137,"comment_id":"746175432","body":"I have no idea how svelte does stuff internally, but some suggestions:\r\n\r\n- `bind:props={...props}` would make `props` reserved\r\n- `bind:{...props}` doesn't look like correct syntax\r\n- maybe `bind:$$props={...props}`?\r\n\r\nBasically, `bind:???={...props}`","updated_at":"2020-12-16T11:56:05Z","created_at":"2020-12-16T11:56:05Z","creator_user_login":"Florian-Schoenherr"}
{"number":5137,"comment_id":"748575625","body":"I don't think `props` being reserved should be a major issue, given that `this` is already reserved.\r\nAnother option may be `{...bind:props}`, based on the existing spread syntax? I don't think `:` is a valid character for variable names, so this shouldn't break anything.","updated_at":"2020-12-20T07:53:28Z","created_at":"2020-12-20T07:53:28Z","creator_user_login":"HamishWHC"}
{"number":5137,"comment_id":"748582936","body":"Both great, we just need someone to see this who knows more about internals / which one is easier to implement.\r\nOr a hero who implements it üòÑ ","updated_at":"2020-12-20T09:19:08Z","created_at":"2020-12-20T09:19:08Z","creator_user_login":"Florian-Schoenherr"}
{"number":5137,"comment_id":"749280661","body":"Took a poke around, and it seems this is where spread parsing occurs: https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts#L310 Given that `{...bind:props}` is just adding `bind:` after the spread operator, this part should be simple. Now to figure out compilation.","updated_at":"2020-12-22T01:06:51Z","created_at":"2020-12-22T01:06:51Z","creator_user_login":"HamishWHC"}
{"number":5137,"comment_id":"869066710","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:55Z","created_at":"2021-06-26T22:03:55Z","creator_user_login":"stale[bot]"}
{"number":5137,"comment_id":"890425311","body":"I've written an RFC at https://github.com/sveltejs/rfcs/pull/57 in an attempt to propose a solution for this. Anyone one looking at this problem should feel free to chime in.","updated_at":"2021-08-01T00:56:42Z","created_at":"2021-08-01T00:56:42Z","creator_user_login":"Sxxov"}
{"number":3965,"comment_id":"557162248","body":"I have an improved example that now works on both desktop and mobile:\r\n\r\nhttps://svelte.dev/repl/2cf25d5fd92b4163a356679c4315d386?version=3.15.0","updated_at":"2019-11-21T16:26:06Z","created_at":"2019-11-21T16:25:35Z","creator_user_login":"rlaferla"}
{"number":3965,"comment_id":"565914805","body":"I really like this but I was trying some things and the performance deteriorated quickly. \r\n\r\njust as a test I had 3 span elements in the item container and after dragging a few times the animations seem to start lagging and doms get stuck in weird places...\r\n\r\nhttps://svelte.dev/repl/f2bac9839a0e4646ba9d9caab38af47d?version=3.15.0","updated_at":"2019-12-16T05:46:38Z","created_at":"2019-12-16T05:46:38Z","creator_user_login":"zahachtah"}
{"number":3965,"comment_id":"1002533770","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T10:51:08Z","created_at":"2021-12-29T10:51:08Z","creator_user_login":"stale[bot]"}
{"number":3622,"comment_id":"535464991","body":"Heh this is an amusing bug.\r\n\r\nTo be compatible with HTML, we _should_ convert entities, but only when they properly end in a semicolon.","updated_at":"2019-09-26T11:41:04Z","created_at":"2019-09-26T11:41:04Z","creator_user_login":"Conduitry"}
{"number":3622,"comment_id":"537163489","body":"I would like to take this and make this my first contribution. I fixed the regex pattern to require a final semicolon, according to HTML Spec. PR will follow.\r\n\r\nIs a test required for this? Or a sample for test/parser/samples ?","updated_at":"2019-10-01T18:18:37Z","created_at":"2019-10-01T18:18:37Z","creator_user_login":"ba3r"}
{"number":3622,"comment_id":"545141341","body":"Replacing the `&copy` that's part of the `&copy=` in the regular text with the copyright symbol is apparently something that browsers actually do with ordinary HTML. They do _not_ replace the `&copy` that's part of a `&copy=` inside of the attribute value, however. I checked and `&copy` followed by a space gets replace in both situations.\r\n\r\nWe should probably be following standard lax HTML parsing rules for when entities are allowed to terminate without a semicolon, but I'm not sure what those are.\r\n\r\nThe safest thing for users to do for now would be to always escape `&`, as stricter spec adherence would require.","updated_at":"2019-10-22T20:34:22Z","created_at":"2019-10-22T20:32:58Z","creator_user_login":"Conduitry"}
{"number":3622,"comment_id":"545627266","body":"@mrkishi found https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state which sounds like a fun time to implement. There are indeed different rules depending on whether we're in an attribute, but I have not gotten my head around them at all.","updated_at":"2019-10-23T20:42:26Z","created_at":"2019-10-23T20:42:26Z","creator_user_login":"Conduitry"}
{"number":5274,"comment_id":"680818898","body":"This is a duplicate of #4978","updated_at":"2020-08-26T11:20:59Z","created_at":"2020-08-26T11:20:59Z","creator_user_login":"ehrencrona"}
{"number":5274,"comment_id":"680850521","body":"Thanks for pointing that out.\r\nMay be it would be nice to add remarks in https://svelte.dev/docs about that, or show warning, when there is dynamic code inside contenteditable.\r\nAt this time tutorial (https://svelte.dev/tutorial/contenteditable-bindings) and docs look like there will be no problems with using contenteditable in any way.","updated_at":"2020-08-26T12:32:33Z","created_at":"2020-08-26T12:32:33Z","creator_user_login":"boatincow"}
{"number":5274,"comment_id":"768930277","body":"Related: https://github.com/sveltejs/svelte/issues/5326\r\n\r\nI also second the idea of adding a warning in the docs.  It sounds like having nested tags inside a contenteditable is not supported by Svelte, but a user reading the docs seeing that `bind:innerHTML` is supported would never guess that.\r\n\r\nQuite separately, it's actually quite easy to support this use case with a bit of defensive code (see https://github.com/sveltejs/svelte/issues/5326).  I understand that there might be concerns about shipping this code to users that won't need it, but perhaps it's possible to do something clever when a contenteditable is involved specifically?\r\n\r\nSomeone with knowledge of Svelte internals might be able to shed more light on this.","updated_at":"2021-01-28T09:44:38Z","created_at":"2021-01-28T09:44:03Z","creator_user_login":"nicolodavis"}
{"number":5274,"comment_id":"869061441","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:38Z","created_at":"2021-06-26T21:03:38Z","creator_user_login":"stale[bot]"}
{"number":5274,"comment_id":"1000889548","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:39Z","created_at":"2021-12-24T16:15:39Z","creator_user_login":"stale[bot]"}
{"number":4854,"comment_id":"629905959","body":"Looks like they are just hashing the file path. I'll have a look as to how this may be implemented in svelte","updated_at":"2020-05-18T02:06:40Z","created_at":"2020-05-18T02:01:49Z","creator_user_login":"AlbertMarashi"}
{"number":4854,"comment_id":"629911874","body":"Using https://www.npmjs.com/package/hash-sum\r\n\r\nThey are using the loader/compiler `request` URL instead of the filepath\r\n\r\n```js\r\nconst hash = require('hash-sum')\r\n\r\nmodule.exports = function(source, map) { //svelte-loader\r\n   const { request } = this\r\n   const id = hash(request) // feed this to compiler options in SSR mode, then compiler can know the client hash (as they should be identical), and match to client manifest\r\n}\r\n```","updated_at":"2020-05-18T02:27:47Z","created_at":"2020-05-18T02:27:47Z","creator_user_login":"AlbertMarashi"}
{"number":4854,"comment_id":"630021359","body":"PR would solve this issue, and enable the feature, ~~but it must be integrated to svelte-loader too~~\r\n**EDIT**: PR solves the issue & does not need to be implemented in `svelte-loader`","updated_at":"2020-05-22T07:57:58Z","created_at":"2020-05-18T08:15:14Z","creator_user_login":"AlbertMarashi"}
{"number":4854,"comment_id":"650804941","body":"https://www.npmjs.com/package/rollup-plugin-extract-bundle-tree","updated_at":"2020-06-28T18:36:50Z","created_at":"2020-06-28T18:36:50Z","creator_user_login":"domingues"}
{"number":4854,"comment_id":"1000920104","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T19:24:50Z","created_at":"2021-12-24T19:24:50Z","creator_user_login":"stale[bot]"}
{"number":4854,"comment_id":"1573791278","body":"+1 for adding this. In the [vite docs](https://vitejs.dev/guide/ssr.html#generating-preload-directives)  something like this get's described.\r\nMaybe instead of adding it to svelte it could be added to the svelte vite plugin.\r\n\r\n<details><summary>For the meantime I'm using the following Plugin but that is not a fix</summary>\r\n\r\n```js\r\nexport function usedSsrComponents(dirname) {\r\n    return {\r\n        transform(code, id, options) {\r\n            if (!options?.ssr || !id.endsWith('.svelte'))\r\n                return;\r\n\r\n            const file = relative(dirname, id);\r\n\r\n            const initFnSign = 'create_ssr_component(($$result, $$props, $$bindings, slots) => {';\r\n\r\n            let idx = code.indexOf(initFnSign);\r\n            if (idx < 0)\r\n                return;\r\n            idx += initFnSign.length;\r\n\r\n            code = `\r\nimport { getContext as __modulesGetContext } from 'svelte';\r\n${ code.substr(0, idx) }\r\n(() => {\r\nconst ctx = __modulesGetContext('modules');\r\nif (ctx && ctx instanceof Set) {\r\n    ctx.add('${ file }');\r\n}\r\n})();\r\n${ code.substr(idx) }\r\n`;\r\n\r\n            return code;\r\n        }\r\n    };\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nThis then matches nicely to the ssr manifest that get's generated by vite.","updated_at":"2023-06-02T14:01:33Z","created_at":"2023-06-02T14:01:33Z","creator_user_login":"soerenmeier"}
{"number":8995,"comment_id":"1640875555","body":"###  ‚ö†Ô∏è  No Changeset found\n\nLatest commit: 392dbdbd78d72d566c1a87015d8822cd98f3325f\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/sveltejs/svelte/new/feat/copy-code-button?filename=.changeset/warm-coats-sin.md&value=---%0A%22svelte.dev%22%3A%20patch%0A---%0A%0Afeat%3A%20Copy%20code%20button%0A)\n\n","updated_at":"2023-08-09T11:11:41Z","created_at":"2023-07-18T19:27:25Z","creator_user_login":"changeset-bot[bot]"}
{"number":8995,"comment_id":"1658120541","body":"Is there a way to make this not apply to some code snippets? For example here \r\n![image](https://github.com/sveltejs/svelte/assets/5968653/ab121bf2-15f0-4eb8-b018-cb5675d9c157)\r\nit's kinda useless to have the copy button on the one-liners, and it also disrupts the reading flow a bit. In general many code snippets are kind of incomplete, so I'm wondering what exactly the value proposition is for having a copy button on them. I'm wondering if there should be some kind of pragma in the docs to mark a code snippet as being full fledged enough that a copy snippet is warranted, for example by giving them a file name, which means they get a heading like some snippets in the Kit docs, and then there's space already to the right where the copy code button can be placed.","updated_at":"2023-07-31T10:45:20Z","created_at":"2023-07-31T10:45:20Z","creator_user_login":"dummdidumm"}
{"number":8995,"comment_id":"1663591918","body":"I don't know why, but it seems the file logic isn't working for some snippets: https://svelte-gz1whcs22-svelte.vercel.app/docs/svelte-components#script . Could you investigate?","updated_at":"2023-08-03T09:11:23Z","created_at":"2023-08-03T09:11:23Z","creator_user_login":"dummdidumm"}
{"number":8995,"comment_id":"1664955462","body":"Happening cuz of cache on vercel. The script adds a class `copy-code-block` to copyable code snippets, which is stored in the cache and targeted on runtime. Redeploying without cache will fix it\r\n\r\nEDIT: Rebuilt without cache, check again https://svelte-dev-git-feat-copy-code-button-svelte.vercel.app/docs/svelte-components","updated_at":"2023-08-04T04:51:45Z","created_at":"2023-08-04T04:35:30Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1665139139","body":"Good to go from my side!","updated_at":"2023-08-04T07:29:16Z","created_at":"2023-08-04T07:29:16Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1667016506","body":"I feel like the file names add a lot of visual noise that I'm not sure is justified by this change. (To be honest I didn't realise how prevalent file names were in the docs already ‚Äî if it were up to me we'd get rid of them. Can we?)\r\n\r\nI also think we can make these buttons a bit more subtle ‚Äî smaller and less opaque. Something like this?\r\n\r\n<img width=\"728\" alt=\"image\" src=\"https://github.com/sveltejs/svelte/assets/1162160/fac7390e-0e34-429a-8010-b8d9cc693a9f\">\r\n","updated_at":"2023-08-07T00:16:25Z","created_at":"2023-08-07T00:16:25Z","creator_user_login":"Rich-Harris"}
{"number":8995,"comment_id":"1667371831","body":"The file names were my idea, as I felt that having copy buttons everywhere was adding visual clutter, and given we already have these in SvelteKit, we might aswell add it to th Svelte core docs and then add the copy button on the right.\r\n\r\nMore opaque copy code button would be good either way I think, I'd say visual clarity should outweigh accessibility concerns here, especially since this is not a critical part of the app.","updated_at":"2023-08-07T07:52:46Z","created_at":"2023-08-07T07:52:46Z","creator_user_login":"dummdidumm"}
{"number":8995,"comment_id":"1667479694","body":"We can always settle for just the `/// copy: true` pragma if file names feels like clutter","updated_at":"2023-08-07T09:04:53Z","created_at":"2023-08-07T09:04:53Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1667505358","body":"why are these comments inside the code in the first place, can't we just add this everywhere with the code fence renderer?\r\n\r\nIf we really wanted to, it could work with opt-in/opt-out via args on the fence itself\r\n````md\r\n```svelte {copy:true}\r\ncopy this code\r\n```\r\n````\r\n\r\nsli.dev has this with line highlights and line-number display https://sli.dev/guide/syntax.html#line-highlighting","updated_at":"2023-08-07T09:21:57Z","created_at":"2023-08-07T09:21:36Z","creator_user_login":"dominikg"}
{"number":8995,"comment_id":"1667508357","body":"> why are these comments inside the code in the first place, can't we just add this everywhere with the code fence renderer?\r\n\r\nBecause then it would be applied to one-liners or fractions of code snippets, too, where it doesn't make sense and just creates visual clutter. It was that way initially and it looked bad, see this comment: https://github.com/sveltejs/svelte/pull/8995#issuecomment-1658120541","updated_at":"2023-08-07T09:23:39Z","created_at":"2023-08-07T09:23:39Z","creator_user_login":"dummdidumm"}
{"number":8995,"comment_id":"1667525613","body":"I believe Dominik meant why it is: `/// copy: true` instead of being next to \\`\\`\\`svelte {copy}","updated_at":"2023-08-07T09:35:18Z","created_at":"2023-08-07T09:35:18Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1667527869","body":"full line fences add \"visual clutter\" already, the copy button in itself doesn't change that much, esp if it is the less dominant variation Rich suggested. \r\n\r\nAnd who are we to judge what the user wants to copy or not. having these copy buttons only in some places adds inconsistencies too, which isn't great for UX either.","updated_at":"2023-08-07T09:36:47Z","created_at":"2023-08-07T09:36:47Z","creator_user_login":"dominikg"}
{"number":8995,"comment_id":"1667609982","body":"The snippets in that picture are no real code snippets, they are part of the API definition. So they shouldn't look like code snippets which a copy button makes them look like more.","updated_at":"2023-08-07T10:33:59Z","created_at":"2023-08-07T10:33:59Z","creator_user_login":"dummdidumm"}
{"number":8995,"comment_id":"1667710487","body":"looking at https://svelte.dev/docs/svelte-transition  i can understand why you are afraid of adding more visual noise. \r\n\r\nThere are no less than 4 different visual appearances of code \r\n\r\n- inline\r\n- multi-line block for api definition (generated from a markdown quote, slighly different bg color)\r\n- single line block without color highlight \r\n- multi-line block for an example\r\n\r\nImportant links like the related tutorial section and the transition directive these are based off are not standing out against simple type definition links.\r\n\r\nSo i agree adding copy buttons on every block of that page would make the situation even worse. But the solution isn't littering the rest of the docs with opt-in syntax to show a copy button. You can either add an opt-out there - or - which would be my preferred approach, redo these sections to be more approachable, have less code blocks and then having a copy button on them suddenly isn't noise anymore but the helpful feature we want it to be...","updated_at":"2023-08-07T11:49:54Z","created_at":"2023-08-07T11:49:54Z","creator_user_login":"dominikg"}
{"number":8995,"comment_id":"1667771740","body":"We can set copy: true by default for every snippet and add `copy: false` to the definitions ones","updated_at":"2023-08-07T12:32:14Z","created_at":"2023-08-07T12:32:14Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1671130791","body":"Hey folks, what's the verdict on this? Do I move forward with reverting `file:` change, making `copy: true` globally and putting `copy: false` on these API snippets?","updated_at":"2023-08-09T11:13:27Z","created_at":"2023-08-09T11:13:27Z","creator_user_login":"PuruVJ"}
{"number":8995,"comment_id":"1693352881","body":"sounds like an initial plan to me\r\n\r\n> Hey folks, what's the verdict on this? Do I move forward with reverting `file:` change, making `copy: true` globally and putting `copy: false` on these API snippets?\r\n\r\nsounds like a plan, i'd add a slight update on the copy button style so it's a bit more mute/neutra\r\n\r\nhow much work would the pragma thing be though?\r\n\r\nslightly related for code block rendering: https://github.com/antfu/shikiji\r\n","updated_at":"2023-08-25T13:20:22Z","created_at":"2023-08-25T13:20:22Z","creator_user_login":"dominikg"}
{"number":8995,"comment_id":"1694350380","body":"> how much work would the pragma thing be though?\r\n\r\nWDYM? Changing it from `/// copy: true` to `{copy:true}`? Or setting it to true for all and specifying false for certain snippets?\r\n\r\n> slightly related for code block rendering: https://github.com/antfu/shikiji\r\n\r\nOhh this looks good. Although shiki-twoslash uses shiki internally. I wonder if there's a way to swap shiki with shikiji in that department ü§î","updated_at":"2023-08-26T14:16:04Z","created_at":"2023-08-26T14:15:03Z","creator_user_login":"PuruVJ"}
{"number":8465,"comment_id":"1500943489","body":"Rich's comment in that closed PR still is correct - why not just ignore the output? I also don't understand how this is related to bundle size in a web worker. Setting the option to `none` won't make the compiler smaller, and if you discard the css output the result won't be bigger.","updated_at":"2023-04-08T17:50:35Z","created_at":"2023-04-08T17:50:35Z","creator_user_login":"dummdidumm"}
{"number":8465,"comment_id":"1501028982","body":"I created a repository to demonstrate the issue since it's difficult to explain without code.\r\nhttps://github.com/dhcmrlchtdj/svelte-8465/tree/main/build\r\n\r\nMy workflow look like\r\n- at build time\r\n\t- compile with `{ generate: \"dom\", css: \"external\" }`, which generates `dom_external/output.{js,css}`\r\n\t- `dom_external/output.{js,css}` are added to app shell\r\n\t- compile with `{ generate: \"ssr\", css: \"external\" }`, which generates `ssr_external/output.{js,css}`\r\n\t- `ssr_external/output.js` is added to service worker\r\n\t- `ssr_external/output.css` is discarded\r\n- at render time\r\n\t- service worker will invoke `ssr_external/output.js` to generate `ssr_external/step2.{html,css}`\r\n\t- `ssr_external/step2.html` will be injected into app shell\r\n\t- `ssr_external/step2.css` will be discarded\r\n\r\nSince `ssr_external/output.js` is shipped to browser, I want to minimize the it's size as much as possible.\r\nAs can be seen in the [`ssr_external/output.js`](https://github.com/dhcmrlchtdj/svelte-8465/blob/main/build/ssr_external/output.js), all CSS is inclueded. But the generated `ssr_external/step2.css` is never used.\r\n\r\n---\r\n\r\nNow, let's talk about `{css: \"none\"}`. To reduce the size of `output.js`, I tried to compile with `none`.\r\n\r\n- at build time\r\n\t- `{ generate: \"ssr\", css: \"none\" }`, which generates `ssr_none/output.{js,css}`\r\n\t- `ssr_none/output.js` is much smaller than `ssr_external/output.js`, that is what I want\r\n\t- `ssr_none/output.css` is empty\r\n- at render time\r\n\t- `ssr_none/output.js` will generate `ssr_none/step2.{html,css}`\r\n\t- `ssr_none/step2.css` is empty, this is expected\r\n\t- _but `ssr_none/step2.html` doesn't work with `dom_external/output.css`, this is what the bug I want to report_\r\n\r\nCompare [ssr_none/step2.html](https://github.com/dhcmrlchtdj/svelte-8465/blob/main/build/ssr_none/step2.html) with [ssr_external/step2.html](https://github.com/dhcmrlchtdj/svelte-8465/blob/main/build/ssr_external/step2.html), the scoped class name is missed.\r\n\r\n---\r\n\r\nReturning to my proposal, it is just an optimization for my particular scenario.\r\nUsually, `ssr_external/output.js` would not be sent to the browser, so the bundle size is not a major concern.\r\nHowever, given that we have already specified `css: \"external\"`, there is no reason to retain the CSS within `ssr_external/output.js`.\r\nThat could benefic for edge cases like mine.\r\n","updated_at":"2023-04-09T03:20:35Z","created_at":"2023-04-09T03:20:35Z","creator_user_login":"dhcmrlchtdj"}
{"number":8465,"comment_id":"1536012930","body":"Normally, the generated CSS requires post-processing by a build system to rewrite all links to assets. However, when building with Vite with `ssr: true`, setting `css: \"external\"` in Svelte's compiler option will not output the CSS. The embedded CSS, although a static string for each component, is only available after a completed call to `render(...)`.\r\n\r\nI doubt the current usefulness of CSS in the SSR build result. I notice that SvelteKit does not use the content in `$$result.css` at all, and instead serves the CSR'ed CSS. Sure, we can ignore it, but maybe this design has its own purpose that I haven't realized?","updated_at":"2023-05-05T09:53:53Z","created_at":"2023-05-05T09:53:53Z","creator_user_login":"andy0130tw"}
{"number":8465,"comment_id":"1603589159","body":"The svelte playground has been upgraded, enabling us to illustrate the problem more conveniently now.\r\nLet's use https://svelte.dev/examples/styling as an example.\r\n\r\nThis is the matrix illustrating how the option affects the JS output.\r\n\r\n|          | dom                                               | ssr                       |\r\n|----------|---------------------------------------------------|---------------------------|\r\n| injected | generate css (`append_styles`) and class (`attr`) | generate css and class    |\r\n| external | generate class (`attr`)                           | generate css and class    |\r\n| none     | no css or class generated                         | no css or class generated |\r\n\r\nAs you can see, `css: injected/external` does not affect the JS output.\r\n\r\nMy proposal is to remove css from the JS output when we use `{generate:\"ssr\",css:\"external\"}`, similar to what we did with `{generate:\"dom\",css:\"external\"}`.\r\n\r\nThe goal is very similar to what we did with #7914, which introduced `css:none` to remove both css and class.\r\nHowever, I want to keep the class to avoid breaking the scoped CSS.\r\n\r\nFrom my perspective, I believe that this change is not a significant breaking change.\r\nPeople who want to generate both css and class could use `{generate:\"ssr\",css:\"injected\"}` to keep the original output.\r\n\r\ncc: @dummdidumm ","updated_at":"2023-06-23T02:02:57Z","created_at":"2023-06-23T02:02:57Z","creator_user_login":"dhcmrlchtdj"}
{"number":8465,"comment_id":"1607320201","body":"@bluwy / @dominikg / @Conduitry is anyone of you aware if any tooling uses the CSS code and map the SSR renderer appends to the `$$result` object? Should the logic here follow the same logic as the dom renderer and if it's `css: \"external\"` then omit that CSS string, or is this semantically different here?\r\n\r\nExample of what I'm talking about:\r\n\r\n```js\r\n// SSR compilation output:\r\n/* App.svelte generated by Svelte v4.0.0 */\r\nimport { create_ssr_component } from \"svelte/internal\";\r\n\r\n// do we need this css object?\r\nconst css = {\r\n\tcode: \"p.svelte-urs9w7{color:purple;font-family:'Comic Sans MS', cursive;font-size:2em}\",\r\n\tmap: \"{\\\"version\\\":3,\\\"file\\\":\\\"App.svelte\\\",\\\"sources\\\":[\\\"App.svelte\\\"],\\\"sourcesContent\\\":[\\\"<p>Styled!</p>\\\\n\\\\n<style>\\\\n\\\\tp {\\\\n\\\\t\\\\tcolor: purple;\\\\n\\\\t\\\\tfont-family: 'Comic Sans MS', cursive;\\\\n\\\\t\\\\tfont-size: 2em;\\\\n\\\\t}\\\\n</style>\\\\n\\\"],\\\"names\\\":[],\\\"mappings\\\":\\\"AAGC,eAAE,CACD,KAAK,CAAE,MAAM,CACb,WAAW,CAAE,eAAe,CAAC,CAAC,OAAO,CACrC,SAAS,CAAE,GACZ\\\"}\"\r\n};\r\n\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\t$$result.css.add(css); // can we omit this (and therefore the above object) if css: 'external' ? Who uses this?\r\n\treturn `<p class=\"svelte-urs9w7\">Styled!</p>`;\r\n});\r\n\r\nexport default App;\r\n```","updated_at":"2023-06-26T12:00:47Z","created_at":"2023-06-26T12:00:03Z","creator_user_login":"dummdidumm"}
{"number":8465,"comment_id":"1607840242","body":"I don't think any tooling is using that (the `map`). I remember wanting to remove that in Svelte 4 and totally forgot üòÖ The only breaking change would be if some tool trying to statically extract for some reason. Dug up some extra context:\r\n- https://github.com/sveltejs/svelte/pull/6744\r\n- https://github.com/sveltejs/svelte/pull/6835\r\n- https://github.com/sveltejs/vite-plugin-svelte/pull/201\r\n\r\nRe `$$result.css`, ~~I don't quite remember, but I believe that's not used too.~~ it seems to be used at https://github.com/sveltejs/svelte/blob/c0d92628ddd1f90e69e8e1598a3d04988b26b197/packages/svelte/src/runtime/internal/ssr.js#L168-L173","updated_at":"2023-06-26T16:45:45Z","created_at":"2023-06-26T16:39:25Z","creator_user_login":"bluwy"}
{"number":8465,"comment_id":"1608002653","body":"I'm tempted to make the change that when css is set to `external` that the css is not filled in 4.0.1 and mark it as bugfix with the extra leeway that we just did breaking changes so one that _could theoretically _ be seen as one is ok","updated_at":"2023-06-26T18:26:05Z","created_at":"2023-06-26T18:26:05Z","creator_user_login":"dummdidumm"}
{"number":8465,"comment_id":"1608929293","body":"I remember having that same thought for Vite 4.0.1, made the change, and made a few people unhappy üòÑ But since this is more internal stuff, and `injected` & `external` are (strangely) doing the same thing, I'd be fine by that.","updated_at":"2023-06-27T07:14:53Z","created_at":"2023-06-27T07:14:53Z","creator_user_login":"bluwy"}
{"number":8465,"comment_id":"1609238246","body":"I prefer a strict view on semver. Unless this is completely broken, has no usecase and changing it fixes a bug, it should wait for 5.0.\r\n\r\nAlso if you move ahead, check with ecosystem-ci and users who possibly enabled devSourcemaps in Vite. I remember at least one bugfix we made in vps to accomodate","updated_at":"2023-06-27T10:34:32Z","created_at":"2023-06-27T10:34:32Z","creator_user_login":"dominikg"}
{"number":8465,"comment_id":"1612187528","body":"So how about this: If SSR source maps are disabled AND the css is set to `external` then we can be sure that the returned CSS object is of no use so we can omit it.","updated_at":"2023-06-28T22:13:51Z","created_at":"2023-06-28T22:13:51Z","creator_user_login":"dummdidumm"}
{"number":8465,"comment_id":"1612407528","body":"@dummdidumm, thank you for your efforts to address this issue.\r\n\r\nCurrently, both `{generate,css}` affect JS output.\r\nThe problem we face is that the output of `{generate:\"ssr\",css:\"external\"}` is more complex than expected.\r\n\r\nIntroducing the `{enableSourcemap}` into the matrix would further increase the complexity.\r\nFrom my perspective, this approach is not preferable.\r\n\r\nI'm confused by the sourcemap concern, how could it be related to the `css:external/injected`. Since we are working on the js.code, it should be orthogonal to the sourcemap.\r\n@andy0130tw also mentioned that SvelteKit does not use the content in $$result.css at all.\r\n```\r\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\r\n‚îÇsvelte.compile(src,opts)‚îÇ\r\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\r\n            ‚ñº\r\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\r\n‚îÇ         ‚îÇ   code       ‚îÇ\r\n‚îÇ  js     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\r\n‚îÇ         ‚îÇ   map        ‚îÇ\r\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\r\n‚îÇ         ‚îÇ   code       ‚îÇ\r\n‚îÇ  css    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\r\n‚îÇ         ‚îÇ   map        ‚îÇ\r\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\r\n```\r\nI'm attempting to run tests with a patched svelte on svelte-kit and vite-svelte-plugin.\r\nSetting up the env has been quite challenging...","updated_at":"2023-06-29T04:16:22Z","created_at":"2023-06-29T04:16:22Z","creator_user_login":"dhcmrlchtdj"}
{"number":8465,"comment_id":"1612443471","body":"There are sourcemaps for CSS too, not just JS. If users enable these, they should work. Not emitting them in that case would break their usecase\r\n","updated_at":"2023-06-29T05:17:25Z","created_at":"2023-06-29T05:17:25Z","creator_user_login":"dominikg"}
{"number":8465,"comment_id":"1612550902","body":"But shouldn't these people use the `css: { code: string; map: string }` object returned by the Svelte compiler for this just like they do for the dom case? It makes zero sense for me that SSR also adds these. @Conduitry do you have any historical insight here why this was done?","updated_at":"2023-06-29T07:28:38Z","created_at":"2023-06-29T07:28:38Z","creator_user_login":"dummdidumm"}
{"number":8465,"comment_id":"1612588675","body":"I found this topic has been discussed before, #3604.\r\n\r\nRich Harris said that it's not designed to have any effect in SSR mode.\r\n\r\nBut I didn't find any strong objection to removing it from the generated js.code.","updated_at":"2023-06-29T07:59:05Z","created_at":"2023-06-29T07:59:05Z","creator_user_login":"dhcmrlchtdj"}
{"number":8356,"comment_id":"1456205429","body":"@adiguba is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%226ce3d2fe942f2266bf0fdb2736e75884c09758aa%22%7D%2C%22id%22%3A%22QmXTHLaiGKd8bhP2aYpSHSmZUz46iCroi1gKxv5jmbjJrj%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A8356%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-03-06T14:09:56Z","created_at":"2023-03-06T14:09:56Z","creator_user_login":"vercel[bot]"}
{"number":8356,"comment_id":"1456223908","body":"### on:event={handler} with null|undefined\r\n\r\nActually when the handler is null|undefined, it's still added to `addEventListener()` (who ignores it)\r\n\r\nBuf if we use some modifiers (preventDefault, trusted, self, stopPropagation) that wrap the handler, it will be executed and they raise an exception.\r\n\r\nREPL : https://svelte.dev/repl/2a222085ea2f4f25a2a04e1955608536?version=3.55.1\r\n\r\nActually, this code :\r\n```svelte\r\n<a on:click|preventDefault={handler} ...>\r\n```\r\n\r\nWill actually  generate a code like this :\r\n\r\n```javascript\r\n\tdispose = listen(a, \"click\", prevent_default(/*handler*/ ctx[0]));\r\n```\r\n\r\nIn order to fix that, I make two change.\r\n\r\n * `listen()` will receive a fourth optionnal parameter, which contains an array of wrapper functions.\r\n * `listen()` will ignore all falsy handler, before applying any wrapper functions...\r\n\r\nSo this code will compile to :\r\n```javascript\r\n\tdispose = listen(a, \"click\", /*handler*/ ctx[0], [prevent_default]);\r\n```","updated_at":"2023-03-06T14:19:42Z","created_at":"2023-03-06T14:19:42Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456228182","body":"### on:event={handler} with dynamic handler\r\n\r\nA similar problem can occur when the handler is dynamic, given that it is wrapped in a function that will do the null-check.\r\n\r\nSo when `handler` is dynamic, this line :\r\n```svelte\r\n<a on:click|preventDefault={handler} ...>\r\n```\r\n\r\nWill actually  generate a code like this :\r\n\r\n```javascript\r\n\tdispose = listen(a, \"click\", prevent_default(function () {\r\n\t\tif (is_function(/*handler*/ ctx[0])) /*handler*/ ctx[0].apply(this, arguments);\r\n\t}));\r\n```\r\n\r\nWith nothing on the `update` function of the component.\r\nEvent when the handler is invalid, it's still registered into the DOM node.\r\n\r\nI changed that with a new lifecycle function `listen_and_update` with 2 parameters :\r\n * A function that return the current handler\r\n * A function that listen the handler.\r\n\r\nWhen the component is mounted, the handler is registered like this :\r\n```javascript\r\n\tdispose = listen_and_update(\r\n\t\t() => /*handler*/ ctx[0],\r\n\t\t(h) => listen(a, \"click\", h, [prevent_default])\r\n\t);;\r\n```\r\n\r\nBut the `dispose` has a populate method in order to change his handler.\r\nSo the `#populate` function of the component can change the handler, adjusting \r\n\r\n```javascript\r\n\tif (dirty & /*handler*/ 1) {\r\n\t\tdispose.p(/*handler*/ ctx[0]);\r\n\t}\r\n```\r\n\r\n\r\nIn fact the listen_and_update() method is pretty simple :\r\n```javascript\r\nexport function listen_and_update(\r\n\tget_handler: ()=>EventListenerOrEventListenerObject | null | undefined | false,\r\n\tfactory: (handler:EventListenerOrEventListenerObject | null | undefined | false) => Function) {\r\n\r\n\tlet handler = get_handler();\r\n\tlet dispose_handle: Function = factory(handler);\r\n\tconst dispose = () => dispose_handle();\r\n\t// update :\r\n\tdispose.p = () => {\r\n\t\tconst new_handler = get_handler();\r\n\t\tif (new_handler !== handler) {\r\n\t\t\tdispose_handle();\r\n\t\t\thandler = new_handler;\r\n\t\t\tdispose_handle = factory(handler);\r\n\t\t}\r\n\t};\r\n\treturn dispose;\r\n}\r\n```","updated_at":"2023-03-06T14:21:57Z","created_at":"2023-03-06T14:21:57Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456237506","body":"\r\n### Event modifier on component's event\r\n\r\nActually the component's event only accept the `once` modifier.\r\nEven `preventDefault` is not allowed despite the fact that it can be handled by dispatch().\r\nAnd all the other modifiers cannot be passed, even for events that are forwarded to HTML nodes...\r\n\r\n\r\nI've modified that in two way :\r\n * By adding a third parameter `options` to SvelteComponent.$on(), to match `addEventListener()`\r\n * By adding a lifecycle function `listen_comp()`, similar to `listen()` but for component.\r\n \r\n \r\n The function `$on()` will ignore the `options` parameters and pass it to the addEventListener on the forwarded node.\r\n Except for 'once' which needs to be addressed specifically.","updated_at":"2023-03-06T14:26:46Z","created_at":"2023-03-06T14:26:46Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456249575","body":"### Forwarding (on:event)\r\n\r\nActually when we forward an event, it adds a listener on the node which will take care of bringing it up via the component's dispatcher.\r\n\r\nSo in fact the following code :\r\n```svelte\r\n<button on:click> click </button>\r\n\r\n```\r\n\r\nis compiled to this (like any other event handler) :\r\n```javascript\r\n\tdispose = listen(button, \"click\", /*click_handler*/ ctx[0]);\r\n```\r\nExcept that the handler is generated by the Svelte compiler :\r\n\r\n```javascript\r\n\tfunction click_handler(event) {\r\n\t\tbubble.call(this, $$self, event);\r\n\t}\r\n```\r\n\r\nWhere `bubble` is a function that dispatches the event to the handlers added to the component...\r\n\r\n\r\nThe major problem with this solution is that it adds a listener anyway, even if there is no handler on the component.\r\nIt is useless, but above all it prevents us from forwarding all the events of a node (we cannot add ALL the events !)\r\n\r\n\r\nI've completly rewrote that and now `bubble` is used in place of `listen` to register the event-forward, without adding any listener on the node as long as the event is not tracked in the parent component :\r\n\r\n```javascript\r\n\tdispose = bubble($$self, listen, button, \"click\");\r\n```\r\n\r\nThis method is mainly used to store info in the internal object `$$`, and the real listeners will be added/removed in partnership with the component's `.$on()` function.\r\n\r\nIt take 4 required arguments : \r\n * The current component.\r\n * The listen function to use for registering an handler.\r\n * The target of the handler.\r\n * The name of the event.\r\n\r\n\r\nFinally, `.$on()` and `bubble()` will work together to add the required handlers at the right time.\r\n\r\n\r\n\r\n\r\n\r\n","updated_at":"2023-03-06T14:33:41Z","created_at":"2023-03-06T14:33:41Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456261850","body":"### Forwarding all events (on:*)\r\n\r\nThe same principle will be applied to on:*, which will be compiled to : \r\n```javascript\r\n\tdispose = bubble($$self, listen, node, \"*\");\r\n```\r\n\r\nBut \"*\" will have a special meaning for `bubble()` and `$on()`.\r\nIt will be associated with all the events added to the component.\r\n\r\nSo any event handler added to the component will be registered to the node.\r\n\r\n\r\n","updated_at":"2023-03-06T14:39:30Z","created_at":"2023-03-06T14:39:30Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456269180","body":"### Alias\r\n\r\nIn fact this new `bubble()` method accepts a fifth parameter, allowing to use an alias for the forward.\r\n\r\nSo something like `on:click|clicked` will forward the event 'click' when the event 'clicked' is registered on the component, and will be compiled to : \r\n\r\n```javascript\r\n\tdispose = bubble($$self, listen, button, \"click\", \"clicked\");\r\n```\r\n\r\nThis require a special case for `on:*` where the alias name must start or end with '*' (ex `on:*|prefix-*` or `on:*|*-suffix`).\r\n\r\nThis may cause a breaking change as actually event's modifier can be use when forwarding (but I dont see real use-case for that, and I think it should be forbidden).\r\n","updated_at":"2023-03-06T14:44:02Z","created_at":"2023-03-06T14:44:02Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456277524","body":"### onEventListener()\r\n\r\nAll of this is managed via a new lifecycle method onEventListener(), with the following signature :\r\n\r\n```typescript\r\nfunction onEventListener(\r\n\ttype: string,\r\n\tfn: (\r\n\t\tcallback: EventListener,\r\n\t\toptions: boolean | AddEventListenerOptions | EventListenerOptions | undefined,\r\n\t\ttype: string\r\n\t) => Function | undefined\r\n) => void\r\n```\r\n\r\n * `type` is the event name we want to process (or \"*\" for all event).\r\n * `fn` is a factory function responsible for registering the listener.\r\n\r\nWhen a new valid handler is added to the component (via `.$on()` or a `on:event={handler}`) the `fn` function will be called in order to register the event or not : \r\n * if it handles the event, it must return an function to remove the listener.\r\n * otherwise it must return `undefined`\r\n\r\nThis is the heart of how on:* works, but could also be used to handle external events (like message from WebSocket...).\r\nSo I think it should be a public function available for final user.","updated_at":"2023-03-06T14:49:16Z","created_at":"2023-03-06T14:49:16Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1456284912","body":"## A few remarks...\r\n\r\n### Non-breaking change on internal (non-public) function.\r\n\r\n * `listen()` and `.on()` have be modified/enhanced, but their behavior should be similar when used with their old signature.\r\n\r\n * The new mecanism between `.$on()` and `bubble()` require to re-create the listeners when the code is hot-reloaded on Dev mode.\r\n   I actually use an internal API from svelte-hmr in order to do that - see https://github.com/sveltejs/svelte-hmr/issues/66\r\n\r\n### Breaking change\r\n\r\n * `bubble()` has a total different usage now.\r\n   This method should not be called by user (but maybe i should use another name).\r\n\r\n * The event on component use `listen_comp()` on the #mount() method instead of `.on()` just after the component creation.\r\n   It is possible that this has an impact on certain events. TO BE VERIFIED !\r\n\r\n * Actually some syntax like `on:click|preventDefault` or `on:click|preventDefault={null}` will block the event even if there is no handler. Same thing with `on:click|preventDefault={handler}` with a nullable dynamic handler.\r\n   This is not the case anymore here...\r\n\r\n * Event modifier on event forwarding (ex: `on:click|preventDefault`) will raise a warning/error, since modifier should be used for the alias name in this context.\r\n\r\n\r\n### TODO\r\n\r\n * There are still some type-checking error with Component, as event forward via `on:*` or `on:click|alias` are badly declared on the Component type.\r\n   I don't know how to fix that.\r\n\r\n * VS Code still produce a syntax error on `on:*` ...\r\n\r\n * Tests, docs, ...\r\n\r\n\r\n\r\nThanks for reading, and sorry for my poor english...","updated_at":"2023-03-06T14:53:44Z","created_at":"2023-03-06T14:53:44Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1676350201","body":"Hello,\r\n\r\nThere a lot of conflict with Svelte 4, so I just created another branch here : https://github.com/adiguba/svelte/tree/on-any-svelte4\r\n\r\n","updated_at":"2023-08-13T12:48:08Z","created_at":"2023-08-13T12:48:08Z","creator_user_login":"adiguba"}
{"number":8356,"comment_id":"1684349968","body":"Hello,\r\n\r\nI just created a little stackblitz.com with an inegrated svelte library that use `on:*`\r\n\r\nCan be tested here :\r\n\r\nhttps://stackblitz.com/edit/on-any-4-svelte?file=src%2FApp.svelte","updated_at":"2023-08-18T19:29:15Z","created_at":"2023-08-18T19:29:15Z","creator_user_login":"adiguba"}
{"number":8001,"comment_id":"1307223421","body":"This is not the only a11y warning where the text itself ironically is anything but accessible. This sounds almost like legal speak.  They are using words such as \"must be\" or \"cannot\", but technically that's not true at all. Of course I can have a positive tabIndex (#7953), but it makes it less accessible. And I surely don't _need_ to add any `on:key*` events when using `on:click` (e.g. for event bubbling the `click` events).\r\n\r\nEven just rewording the current text without adding _any_ new information makes it so much more accessible and friendly:\r\n\r\n> A11y: You've added an on:click event handler to a visible, non-interactive element. To make it accessible you should add on:keydown, on:keyup, or on:keypress events.\r\n\r\nNow this is still confusing as hell (see #7958), so let's add some more context:\r\n\r\n> A11y: You've added an on:click event handler to a visible, non-interactive element (such as `<div>` or `<span>`). It's recommend to use appropriate elements such as `<a>` or `<button>`. If you cannot change the element type, you should add on:keydown, on:keyup, or on:keypress events to make them accessible (e.g. so that pressing the Enter key clicks them).\r\n\r\nMuch better. But even this leaves question marks even in my own face. Is `Enter` actually the only key we care about (so that you can click the element with the keyboard)? I honestly don't know. And I'm sure the three keyboard events aren't equal either (e.g. `keydown` vs `keyup` have different semantics just like you wouldn't expect a click from just a `mousedown`). That means even recommending adding `on:key*` events without any further guidance leads to things like #7958 and people will literally just add a noop event handler because they don't know any better.\r\n","updated_at":"2022-11-08T13:29:51Z","created_at":"2022-11-08T13:28:06Z","creator_user_login":"Prinzhorn"}
{"number":8001,"comment_id":"1307230185","body":"Actually, `button` triggers on `Space` or `Enter`, while `a` only triggers on `Enter`. And as noted, the key events would not even do anything without adding `tabindex` to make the element focusable (which causes new warnings of its own).","updated_at":"2022-11-08T13:33:29Z","created_at":"2022-11-08T13:33:29Z","creator_user_login":"brunnerh"}
{"number":8001,"comment_id":"1368922819","body":"As well as key handlers and tabindex you also need to add an appropriate `role` attribute, because `<div>` and `<span>` [do not support naming](https://html5accessibility.com/stuff/2020/11/07/not-so-short-note-on-aria-label-usage-big-table-edition/) unless an appropriate semantic has been specified. \r\n\r\n**All** operable elements must have machine-readable accessible names, semantic roles and (if applicable) state values to conform with [WCAG SC 4.1.2 Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value).","updated_at":"2023-01-02T12:55:57Z","created_at":"2023-01-02T12:55:57Z","creator_user_login":"brennanyoung"}
{"number":8001,"comment_id":"1369771572","body":"Something I also discovered here, leaving in case useful for others.\r\n\r\nIf you change eg a `<div>` with an `on:click` event to a `<button>` to remove this warning, then you need to add a prop `type=button` too, or else the button can work unexpectedly!","updated_at":"2023-01-03T13:28:06Z","created_at":"2023-01-03T13:28:06Z","creator_user_login":"archiewood"}
{"number":8001,"comment_id":"1369781750","body":"@archiewood \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\r\n\r\n> `submit`: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a `<form>`, or if the attribute is an empty or invalid value.","updated_at":"2023-01-03T13:39:07Z","created_at":"2023-01-03T13:39:07Z","creator_user_login":"Prinzhorn"}
{"number":8001,"comment_id":"1371927031","body":"Good catch @archiewood . So, a warning about the submit functionality would only be appropriate if the button is a descendant of a form, right?\r\n\r\nBTW. The default behavior when pressing SPACE is to scroll the document **unless** an operable element (such as a button) is in focus, in which case, a click event should be sent to the element. This is handled automatically by user agents, without extra code if you use `<button>` rather than `<div>` or `<span>` or any other element with a non-operable semantic.\r\n\r\nIdeally, any warning should \"nudge\" developers towards best practices: i.e. the first choice should be to use an element that is operable and focusable by default, namely `<button>`, `<a>`, `<input>`, `<select>`/`<option>` or `<area>` if at all possible. This gives a solid baseline for accessibility without having to worry about extra event handlers, tabindex or role attributes.\r\n\r\nBTW: The reason `<a>` only responds to ENTER and not SPACE is because `<a>` was primarily imagined to be part of the text/content flow - i.e. hyperlink text is for primarily for browsing, rather than interaction - the navigation feature is secondary to the fact that a link contains (or should contain) actual **content**. (This is a subtle distinction which is very important for screen reader users). Therefore, pressing SPACE when `<a>` is in focus will (be expected to) scroll the document.","updated_at":"2023-01-05T08:40:39Z","created_at":"2023-01-05T08:40:39Z","creator_user_login":"brennanyoung"}
{"number":8001,"comment_id":"1375364923","body":"It seems that there is a lot of knowledge required to be able to fix this error.  Unfortunately that is something most developers will not have and even those who would love to comply will struggle, and the results may actually be worse than ignoring it.  The more I have searched for help the harder it seems to be to fix this.\r\n\r\nThe fundamental problem seems to be that html was invented as a publishing/reading medium and it is now being used as an interactive UI.  To only have two clickable elements \"A\" and \"BUTTON\" seems a bit lacking.  DIV is a block element that comes with no styling unlike P.  We need a DIV equivalent for BUTTON, ie something recognised as clickable but without the styling of buttons and then readers could handle it intelligently.  That is something for HTML standards to sort out.  \r\n\r\nBut in the meantime, it would be nice if Svelte could offer something like <svlelte:interactive class=\"listitem\" on:click={openitem}>Item text</svlelte:interactive> \r\n\r\nThe element would handle the boilerplate things that need to be done for an clickable element and ask the developer to provide attribute values if these are needed (things like alt text or role whatever cannot be determined generically).  This would be a win win win as it is good for accessibility, developers and svelte.\r\n\r\n","updated_at":"2023-01-09T10:03:15Z","created_at":"2023-01-09T10:03:15Z","creator_user_login":"tobylewis"}
{"number":8001,"comment_id":"1375428387","body":"I don't really see the problem. You can style buttons however you want, including the removal of all styling, and they can contain just about any content, including divs.","updated_at":"2023-01-09T10:54:58Z","created_at":"2023-01-09T10:54:58Z","creator_user_login":"brunnerh"}
{"number":8001,"comment_id":"1375432517","body":"That is how I have approached it; just use buttons and remove styling.  We could also get rid of DIVs out HTML and just use P and remove the styling too.  It's just a question of semantics and convenience.","updated_at":"2023-01-09T10:59:01Z","created_at":"2023-01-09T10:59:01Z","creator_user_login":"tobylewis"}
{"number":8001,"comment_id":"1375438503","body":"You cannot get rid of divs precisely because of the semantics. `p` has the semantics of \"paragraph\" and there is a need for an organizational element without any semantics. One could argue that there is some redundancy with `div` and `span`, i guess.\r\n\r\n(Sorry for being a bit off-topic here.)","updated_at":"2023-01-09T11:04:16Z","created_at":"2023-01-09T11:03:21Z","creator_user_login":"brunnerh"}
{"number":8001,"comment_id":"1377359382","body":"The non-semantics of div (and span) are a feature not a bug. \r\n\r\nThey allow content to be structured and ordered (important for meeting [WCAG's \"Meaningful Sequence\" criterion](https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence) ) without cluttering the accessibility tree, and of course they provide valuable hooks for **visual** presentation (especially for CSS selectors).\r\n\r\nUsing `<button>` and overriding user agent styles is compellingly The Right Thing to do for clickable elements that do something other than navigate or download. There are only special cases where alternative approaches are more appropriate.\r\n\r\nVarious articles and stack overflow posts cover the topic of overriding user agent style for `<button>`, so the information is available, but not as unambiguously recommended as it might be. An error message can really help here.\r\n\r\nUsing div or span as operable elements without providing cues (i.e. role, tabindex and event handlers) for assistive tech users is simply a developer mistake (or -dare I say- just developer ignorance). The error text should briefly capture the essence of this guidance.\r\n\r\n","updated_at":"2023-01-10T14:27:53Z","created_at":"2023-01-10T14:24:54Z","creator_user_login":"brennanyoung"}
{"number":6771,"comment_id":"927260401","body":"Why don't you do this:\r\n\r\n```svelte\r\n<WithShortcut shortcut=\"Control+C\" action={doThing} let:shortcutLabel>\r\n    <Button title={shortcutLabel} on:click={doThing}>Click me!</Button>\r\n</WithShortcut>\r\n```\r\n\r\nSure, it's a tiny bit of duplication, but it works and is easier to understand than the back and forth spaghettiing. Remove duplication by re-exposing the function to the button:\r\n\r\n```svelte\r\n<WithShortcut shortcut=\"Control+C\" action={doThing} let:shortcutLabel let:shortcutAction>\r\n    <Button title={shortcutLabel} on:click={shortcutAction}>Click me!</Button>\r\n</WithShortcut>\r\n```\r\n\r\nThis also allows `WithShortcut` to spice up the function before passing it to the button (e.g. add a confirmation modal or something like that). In both cases `<Button>` is completely unaware of shortcut and doesn't need anything special.\r\n\r\nI think https://github.com/sveltejs/svelte/issues/3617 could also solve this in a different way, e.g. by passing the component back via `<Button bind:this={shortcutComponent}>` and exposing a `click/trigger` method on the button component. No more need to have events.","updated_at":"2021-09-26T09:13:05Z","created_at":"2021-09-26T08:37:28Z","creator_user_login":"Prinzhorn"}
{"number":6771,"comment_id":"927343975","body":"The issue is that shortcut does not execute the function but rather it gets the element and simulates a click: `button.click()`. This way, the button can also be disabled:\r\n\r\n```\r\n<WithShortcut shortcut=\"Control+C\" let:createShortcut let:shortcutLabel>\r\n    <Button {disabled} title={shortcutLabel} on:click={doThing} on:mount={(event) => createShortcut(event.detail.button)}>Click me!</Button>\r\n</WithShortcut>\r\n```\r\n\r\nI guess I could also pass {disabled} to `WithShortcut`, but I also want the shortcut to notify the button that it has been pushed, so it can update its button state (e.g. a \"**Bold**\" formatting button in an editor will show that the editor is in \"**Bold**\" state now).\r\n\r\nThis is basically a perfect case for `use:` and it would work fine, if I just inlined button:\r\n\r\n```\r\n<WithShortcut shortcut=\"Control+C\" let:shortcutLabel let:createShortcut>\r\n    <button use:createShortcut [...] />\r\n</WithShortcut>\r\n```","updated_at":"2021-09-26T17:48:01Z","created_at":"2021-09-26T17:48:01Z","creator_user_login":"hgiesel"}
{"number":6771,"comment_id":"927347112","body":"> so it can update its button state (e.g. a \"**Bold**\" formatting button in an editor will show that the editor is in \"**Bold**\" state now).\r\n\r\nSounds a lot like manually and imperatively managing state and hoping it's consistent. Shouldn't this happen automatically, e.g. via some state in a store or something?\r\n\r\n> This is basically a perfect case for `use:` and it would work fine, if I just inlined button:\r\n\r\nWhat would you need `WithShortcut` for then? Why not have a single action that you can add to elements you want to react to shortcuts?\r\n\r\nI might not see the bigger picture yet, but this seems way more complicated than it should be.","updated_at":"2021-09-26T18:10:06Z","created_at":"2021-09-26T18:10:06Z","creator_user_login":"Prinzhorn"}
{"number":6771,"comment_id":"927355779","body":"> Sounds a lot like manually and imperatively managing state and hoping it's consistent. Shouldn't this happen automatically, e.g. via some state in a store or something?\r\n\r\nIn fact that's exactly what I am doing. Here's an actual example from our code:\r\n\r\n```svelte\r\n<WithShortcut {shortcut} let:createShortcut let:shortcutLabel>\r\n    <WithState\r\n        {key}\r\n        update={() => document.queryCommandState(key)}\r\n        let:state={active}\r\n        let:updateState\r\n    >\r\n        <IconButton\r\n            tooltip=\"{tooltip} ({shortcutLabel})\"\r\n            {active}\r\n            {disabled}\r\n            on:click={(event) => {\r\n                document.execCommand(key);\r\n                updateState(event);\r\n            }}\r\n            on:mount={(event) => createShortcut(event.detail.button)}\r\n        >\r\n            <slot />\r\n        </IconButton>\r\n    </WithState>\r\n</WithShortcut>\r\n```\r\n\r\n> What would you need WithShortcut for then? Why not have a single action that you can add to elements you want to react to shortcuts?\r\n\r\nBut I **don't** want to inline the button, because I want to bundle the HTML with styling and functionality. That's why I'm using `on:mount` (and `on:destroy`).","updated_at":"2021-09-26T19:14:23Z","created_at":"2021-09-26T19:14:23Z","creator_user_login":"hgiesel"}
{"number":6771,"comment_id":"927641975","body":"> In fact that's exactly what I am doing. Here's an actual example from our code:\r\n\r\nTo me this does not look like Svelte at all, but I guess people do things a lot different than I do (we had this discussion in #6255 already, I'd never use a context that way).\r\n\r\nFrom the top of my head I would:\r\n\r\n1. Abstract the whole `queryCommandState` / `execCommand` system into a store (or some wrapper that also holds a store) that has state like `isBold` and `canMakeBold` and a `makeBold()` function. It also observes the current cursor/selection and makes sure these things are up-to-date (probably what your `WithState.update` does). Since the document already is a global state object this would just neatly organize it into the Svelte world (I do that with a lot of things like `prefers-color-scheme` or `document.visibilityState`). Once you've done this your entire application is detached from this imperative and arguably ugly DOM interface.\r\n2. Remove `WithState`, see 1\r\n3. Potentially remove `WithShortcut`, I don't see a point tying it to a button. You could still have a `Shortcut` component to declaratively add/remove shortcuts. But to me these things are tightly coupled for no reason. What if you later also want a context-menu to make the current selection bold? Do you want to tie all three things to simulating a button click and magically relying on its `disabled` state?\r\n4. Now button and shortcut can both independently call `editor.makeBold()`. It's the job of `makeBold` to decide if you can make things bold (via `canMakeBold`), that's not the job of the button[disabled] state preventing the shortcuts `el.click()` call. That's super backwards to me.\r\n5. The button disabled state is just `disabled={$editor.canMakeBold}` and does the usual Svelte magic (calling `makeBold` makes things bold in the DOM, your store will react to the new document state and your button magically becomes disabled without doing all this manual work)\r\n\r\nI know that this has nothing to do with your feature request, but most feature requests I see can be solved by doing things differently. In my experience Svelte components can be very lightweight and independent if abstractions happen at the right place. I've never once had the need to use sth. like `WithState`, with the exception of maybe some router logic to highlight the current nav item (and I was in a rush and due to tailwind I couldn't just use a simple action with a `toggleClass`).\r\n\r\nI will refrain from hijacking your feature request any further, maybe this was helpful though.","updated_at":"2021-09-27T08:23:02Z","created_at":"2021-09-27T08:21:50Z","creator_user_login":"Prinzhorn"}
{"number":6771,"comment_id":"927890451","body":"Thanks a lot for your comments, @Prinzhorn, I think I might just have gotten a few good ideas out of this.\r\n\r\nHowever, I am still standing by this idea. This might have been a bad example to argue for it, so here's another go (actually my original motivation, but I thought it was too akward to explain):\r\n\r\nWe want our Svelte app to be **extensible**. Doing so is quite the challenge, and having `use:` actions on components would make it certainly easier.\r\n\r\n[Here's an example](https://svelte.dev/repl/1f55a00822054ae4945f8a84fd0f7c21?version=3.43.0). I have a simple `List` component displaying some `Item` components. So we (the app developer) might have our own reasons for showing or hiding some of the items, for which we would change the `visible` prop. But we also want to provide a way for add-on devs to dynamically show or hide other names, which is why we want to expose APIs alongside the components, that can be used from outside. In the REPL I put this code into `setTimeout`.\r\n\r\n(This would also require that you can define inline `:use` actions)","updated_at":"2021-09-27T14:02:56Z","created_at":"2021-09-27T13:45:41Z","creator_user_login":"hgiesel"}
{"number":6771,"comment_id":"927920314","body":"I think this sounds more like mixins than actions :thinking:, not sure what others are doing in this space (you can get pretty far with `<svelte:component>` and passing component constructors around and spicing up `props` along the way).\r\n\r\n> We want our Svelte app to be **extensible**. Doing so is quite the challenge, and having `use:` actions on components would make it certainly easier.\r\n> \r\n> [Here's an example](https://svelte.dev/repl/1f55a00822054ae4945f8a84fd0f7c21?version=3.43.0). I have a simple `List` component displaying some `Item` components. So we (the app developer) might have our own reasons for showing or hiding some of the items, for which we would change the `visible` prop. But we also want to provide a way for add-on devs to dynamically show or hide other names, which is why we want to expose APIs alongside the components, that can be used from outside. In the REPL I put this code into `setTimeout`.\r\n\r\nNow this is getting too complex for discussing this here and these type of architectural decisions require more in depth understanding than what I can provide here. I will say this: I personally would think of the extensions in terms of data, not in terms of UI elements. My UIs are data/store driven. The UI is just a way to visualize the data. Your data could flow through all of of the extensions and the extensions can make decisions (e.g. setting `visible` to `false`). Like middlewares in a Connect/Express/Polka app. And the UI doesn't even know about all this, it just updates with the current state and makes sure it's consistent.","updated_at":"2021-09-27T14:19:31Z","created_at":"2021-09-27T14:18:20Z","creator_user_login":"Prinzhorn"}
{"number":6771,"comment_id":"930227239","body":"> I think this sounds more like mixins than actions.\r\n\r\nI always thought of actions as mixins. Even the actions used [in the tutorial](https://svelte.dev/tutorial/actions) could be aptly described as `Pannable` and `LongPressable`.\r\n\r\n> you can get pretty far with <svelte:component> and passing component constructors around and spicing up props along the way\r\n\r\nYep, we experimented with this, but what we found is that you loose most of Svelte's niceness like slots, and instead you'll pass around deeply nested objects.","updated_at":"2021-09-29T14:24:11Z","created_at":"2021-09-29T14:24:11Z","creator_user_login":"hgiesel"}
{"number":6771,"comment_id":"1073242242","body":"Guess I'm late to the party, but I have another use case.\r\n\r\nI made an action that can be applied to _input_ and _textarea_ elements, and listens for _input_ events on them. The action basically just starts a _setTimeout_ when that happens, and when the timer fires, a method that the user submitted when making the action would be called. A very simplified demonstration of what it basically does:\r\n\r\n```javscript\r\n<script>\r\n  const { autosave } = make_autosaver(my_save_fn);\r\n\r\n  async function my_save_fn() {\r\n    console.log(\"autosaver told us to save now\");\r\n    // save to local/session storage, call an api, do whatever...\r\n  }\r\n</script>\r\n\r\n<input type=\"text\" use:autosave>\r\n```\r\n\r\nNow, I may want to use this on components that are wrapper- or custom built components that mimics native ones (Button wrappers, custom SVG checkboxes, or whatever). So how would my action know what to do with any given Component that I might use it on? In general it can't know what to do - but what it _could_ do, is say that the action requires _these and these_ behaviors of the Component. Maybe for the action to make sense to use on a component, it requires that the Component dispatches custom _input_ events (with the data set to whatever data makes sense - could be a boolean in the case of a checkbox, or a Date in the case of a date picker). I don't think it's any more work for the author of the action to define _the_ interface for Components, than it is to determine the type of and handle support for all the various kinds of native elements that the action could also be applied to.\r\n\r\nI envision just passing the _component_ (the object you get when you _bind:this_ to a component) as the first parameter to the action, instead of the dom element (which is the case for native DOM elements). But that's just an idea, of course.","updated_at":"2022-03-20T12:38:54Z","created_at":"2022-03-20T12:38:54Z","creator_user_login":"Phaqui"}
{"number":6706,"comment_id":"912961296","body":"Have you spent time trying to narrow down the reproduction, or find out which component the compiler is throwing the error for, or whether this is reproducible in the REPL?","updated_at":"2021-09-04T11:53:52Z","created_at":"2021-09-04T11:53:52Z","creator_user_login":"Conduitry"}
{"number":6706,"comment_id":"914247193","body":"I tried to track back into the source typescript to figure out where that `handle` function was coming from, but unfortunately wasn't able to (there were several instances of \"Not implemented {node.type}\" in the codebase, and I couldn't match up the generated code to any of them). I haven't tried deleting code to minimize the test case, yet.","updated_at":"2021-09-07T12:05:20Z","created_at":"2021-09-07T12:05:20Z","creator_user_login":"cale-at-reify"}
{"number":6706,"comment_id":"917306331","body":"I am getting a similar error and I suspect the root of the problem is the same. I think the stack trace may be incidental to whatever may be going on at a lower level.\r\n\r\nVersions of svelte <= 3.40.3 work fine.\r\n\r\nThe regression is introduced in version 3.41.0 and generates this error for all versions >=3.41.0\r\n\r\nI'm using rollup. I don't have any code that references anything specifically media related in the .svelte file to which the error is attributed so the involvement of the \"print/handlers\" code is of unknown origin to me.\r\n\r\nMy app is pretty complex so isolating the problem may take a fair amount of time for me.\r\n\r\nI'm on windows 10, node 16.7.0, npm 7.19.0\r\n\r\nI hope this helps somewhat.\r\n\r\n```\r\nError: Not implemented undefined\r\n     at handle (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:61:9)\r\n     at U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:586:19\r\n     at scoped_fn (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:265:10)\r\n     at handle (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:64:17)\r\n     at U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:297:18\r\n     at Array.map (<anonymous>)\r\n     at handle_body (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:296:21)\r\n     at U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:378:7\r\n     at scoped_fn (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:265:10)\r\n     at handle (U:\\sandbox\\apps\\oms\\npm\\node_modules\\svelte\\node_modules\\code-red\\src\\print\\handlers.js:64:17)\r\n```","updated_at":"2021-09-11T00:45:33Z","created_at":"2021-09-11T00:45:33Z","creator_user_login":"spiralmike"}
{"number":6706,"comment_id":"917311300","body":"Update- I just solved my issue. It may work for you.\r\n\r\nClued in by the code-red part that handled For loops, I've verified that the following code causes this error\r\n\r\n```\r\nfor (var i of set)\r\n{\r\n}\r\n```\r\n\r\nwhereas the following solves the problem.\r\n\r\n```\r\nfor (let i of set)\r\n{\r\n}\r\n```\r\n\r\nThe latter seems to be the appropriate form but ideally the for (var ... ) case would be handled informatively by code-red.","updated_at":"2021-09-11T01:12:41Z","created_at":"2021-09-11T01:12:41Z","creator_user_login":"spiralmike"}
{"number":6706,"comment_id":"917321411","body":"Simple repl to reproduce my issue and throw the \"Not implemented undefined\" error.\r\n\r\nhttps://svelte.dev/repl/88e9bef2e32544ad8ae8fb21c42dde2a?version=3.42.5","updated_at":"2021-09-11T02:20:38Z","created_at":"2021-09-11T02:20:38Z","creator_user_login":"spiralmike"}
{"number":6706,"comment_id":"931282704","body":"I've noticed a similar behavior and narrowed it down to this line of code:\r\n\r\n```js\r\nvar now = new Date();\r\n```\r\n\r\nThis code was working fine with Svelte 3.38.2. The very next version, the build broke down with the \"Not implemented undefined\" error.\r\n\r\nI went ahead and changed it to this:\r\n\r\n```js\r\nconst now = new Date();\r\n```\r\n\r\nAnd the problem went away.\r\n\r\nSo whatever is causing the issue seems to have been introduced in v3.38.3.","updated_at":"2021-09-30T12:37:33Z","created_at":"2021-09-30T12:37:33Z","creator_user_login":"Crono1981"}
{"number":6706,"comment_id":"931322509","body":"@Crono1981 Do you have a reproduction in the REPL? Having just\r\n\r\n```svelte\r\n<script>\r\n\tvar now = new Date();\r\n</script>\r\n```\r\n\r\nis working fine for me. I'm interested in this case because `code-red` (the dependency that error would presumably be coming from) wasn't updated between 3.38.2 and 3.28.3. (https://github.com/sveltejs/svelte/blame/716d54571ec868f33517cfb47a26b3f328f77232/package-lock.json)","updated_at":"2021-09-30T13:27:31Z","created_at":"2021-09-30T13:27:31Z","creator_user_login":"Conduitry"}
{"number":6706,"comment_id":"931332907","body":"@Conduitry here's the whole component:\r\n\r\nEDIT: My apologies, it was the corrected component's code ü§¶‚Äç‚ôÇÔ∏è I've put the `var` keyword back and added comments in code to clear things up.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let dayDate: Date;\r\n  export let yearToIgnore: number;\r\n\r\n  let datetimeAttrVal: string;\r\n  let weekdayDisplayVal: string;\r\n  let dayInMonthDisplayVal: number;\r\n  let dayInMonthDisplayValSup: string;\r\n  let monthDisplayVal: string;\r\n  let yearDisplayVal: number;\r\n\r\n  let isToday: boolean;\r\n  let isYesterday: boolean;\r\n  let isTomorrow: boolean;\r\n\r\n  $: {\r\n    const now = new Date();\r\n    const yesterday = new Date(now);\r\n    const tomorrow = new Date(now);\r\n\r\n    yesterday.setDate(now.getDate() - 1);\r\n    tomorrow.setDate(now.getDate() + 1);\r\n\r\n    isToday =\r\n      dayDate &&\r\n      dayDate.getDate() === now.getDate() &&\r\n      dayDate.getMonth() === now.getMonth() &&\r\n      dayDate.getFullYear() === now.getFullYear();\r\n\r\n    isYesterday =\r\n      dayDate &&\r\n      dayDate.getDate() === yesterday.getDate() &&\r\n      dayDate.getMonth() === yesterday.getMonth() &&\r\n      dayDate.getFullYear() === yesterday.getFullYear();\r\n\r\n    isTomorrow =\r\n      dayDate &&\r\n      dayDate.getDate() === tomorrow.getDate() &&\r\n      dayDate.getMonth() === tomorrow.getMonth() &&\r\n      dayDate.getFullYear() === tomorrow.getFullYear();\r\n  }\r\n  $: {\r\n    if (dayDate) {\r\n      const valueDay = dayDate.getDay();\r\n      const valueDate = dayDate.getDate();\r\n      const valueMonth = dayDate.getMonth();\r\n      const valueYear = dayDate.getFullYear();\r\n\r\n      datetimeAttrVal = \"(mocked short date)\";\r\n      weekdayDisplayVal = \"(mocked week day)\";\r\n      dayInMonthDisplayVal = valueDate;\r\n      dayInMonthDisplayValSup = valueDate === 1 ? \"er\" : undefined;\r\n      monthDisplayVal = \"(mocked month)\";\r\n\r\n      let yToIgnore = yearToIgnore;\r\n\r\n      if (!yToIgnore && yToIgnore !== 0) {\r\n        // The var keyword breaks the build with Svelte v3.38.3\r\n        var now = new Date();\r\n        // Using const instead works\r\n        // const now = new Date();\r\n\r\n        yToIgnore = now.getFullYear();\r\n      }\r\n\r\n      if (valueYear === yToIgnore) {\r\n        yearDisplayVal = undefined;\r\n      } else {\r\n        yearDisplayVal = valueYear;\r\n      }\r\n    } else {\r\n      datetimeAttrVal = undefined;\r\n      weekdayDisplayVal = undefined;\r\n      dayInMonthDisplayVal = undefined;\r\n      dayInMonthDisplayValSup = undefined;\r\n      monthDisplayVal = undefined;\r\n      yearDisplayVal = undefined;\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"day-header-content\">\r\n  <time class=\"day-description\" datetime={datetimeAttrVal}\r\n    >{#if isToday}\r\n      Aujourd'hui\r\n    {:else if isYesterday}\r\n      Hier\r\n    {:else if isTomorrow}\r\n      Demain\r\n    {:else}\r\n      {weekdayDisplayVal}\r\n      {dayInMonthDisplayVal}{#if dayInMonthDisplayValSup}<sup\r\n          >{dayInMonthDisplayValSup}</sup\r\n        >{/if}\r\n      {monthDisplayVal}{#if yearDisplayVal}{` ${yearDisplayVal}`}{/if}\r\n    {/if}\r\n  </time>\r\n</div>\r\n\r\n<style lang=\"scss\">\r\n  .day-header-content {\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    font-size: 1em;\r\n    clear: both;\r\n  }\r\n  .day-description {\r\n    float: left;\r\n  }\r\n</style>\r\n```\r\n\r\nTwo things to be aware of:\r\n\r\n- It's using TypeScript\r\n- I removed an import which was just a utility class providing names and formats for date and time values (I doubt it's relevant)","updated_at":"2021-09-30T13:44:48Z","created_at":"2021-09-30T13:40:08Z","creator_user_login":"Crono1981"}
{"number":6706,"comment_id":"931360913","body":"Thanks. I haven't narrowed that down to a minimal TypeScript-free repro for 3.38.3 yet, but one thing that is a problem in the latest version of Svelte is that there's a `var` inside a reactive block:\r\n\r\n```svelte\r\n<script>\r\n\t$: {\r\n\t\tvar now = new Date();\r\n\t}\r\n</script>\r\n```\r\n\r\nI'm actually not sure what this should do. `var`s aren't block scoped, and so this could lead to some fairly confusing behavior. Version 3.40.3 is the latest version that will compile the above component, but if you try to access `now` outside of the reactive block (which JS scope rules say you should be able to do), you get a runtime error, because in the compiled code the contents of the reactive block end up inside a function (which _does_ prevent the `var` scope from leaking out). I'm going to open a separate issue for this case. I think the compiler should explicitly disallow `var` inside a reactive block with a more helpful error message.","updated_at":"2021-09-30T14:12:37Z","created_at":"2021-09-30T14:12:37Z","creator_user_login":"Conduitry"}
{"number":6706,"comment_id":"954676494","body":"As noticed above this has been narrowed down to when using `var` instead of `let` in a for loop.\r\nThe `var` can either be the for loops counter or it can be in the for loop block itself.\r\n\r\n@Prinzhorn has done some digging and discovered that it:\r\n> Breaks between 3.40.3 and 3.41.0\r\n\r\nhttps://svelte.dev/repl/e07b60b9f5ad486888015171c8280c7f?version=3.40.3\r\nhttps://svelte.dev/repl/e07b60b9f5ad486888015171c8280c7f?version=3.41.0","updated_at":"2021-10-29T11:44:30Z","created_at":"2021-10-29T11:44:30Z","creator_user_login":"halfnelson"}
{"number":6706,"comment_id":"1004147904","body":"Adding I had this today but by using `var` in an if code block\r\n\r\n```\r\nif (true) {\r\n var foo=123\r\n}\r\n```\r\nCan the error be made more helpful?","updated_at":"2022-01-03T14:57:31Z","created_at":"2022-01-03T14:57:31Z","creator_user_login":"SteveALee"}
{"number":6706,"comment_id":"1307319709","body":"I could reproduce the same error message by using `let x = $y` inside a `case` of a switch statement:\r\n```js\r\nimport { writable } from \"svelte/store\";\r\nconst s = writable(42);\r\n\r\n$: switch (1) {\r\n  case 1:\r\n    let value = $s; // Not implemented undefined\r\n}\r\n```\r\n[REPL](https://svelte.dev/repl/bd926b7d4cae49d09af299ffb909bb1e?version=3.42.5).\r\n\r\nWrapping the case in a block makes the error disappear:\r\n```js\r\nimport { writable } from \"svelte/store\";\r\nconst s = writable(42);\r\n\r\n$: switch (1) {\r\n  case 1: {\r\n    let value = $s; // OK!\r\n  }\r\n}\r\n```","updated_at":"2022-11-08T14:35:58Z","created_at":"2022-11-08T14:35:58Z","creator_user_login":"m93a"}
{"number":6706,"comment_id":"1312360476","body":"An even simpler reproducer for this regression is simply:\r\n```\r\n<script>\r\n\t{\r\n\t\tvar foo = \"123\";\r\n\t}\r\n</script>\r\n{foo}\r\n```\r\n\r\nThe block doesn't even need to be reactive.","updated_at":"2022-11-12T04:33:23Z","created_at":"2022-11-12T04:33:23Z","creator_user_login":"abextm"}
{"number":6706,"comment_id":"1312387101","body":"This seems to be caused by this invalid cast from `Node[]` -> `Node` [in Component.ts](https://github.com/sveltejs/svelte/commit/b720f0e6202f57cc6e4a16106aa16c620db86dfa#diff-13989a8dced2c2012875b90fec11e7e46eb1881de35bb0e4a4ee30fa27306639R1069). `estree-walker` doesn't provide a way to replace a single node with multiple as far as I can see.","updated_at":"2022-11-12T06:39:09Z","created_at":"2022-11-12T06:39:09Z","creator_user_login":"abextm"}
{"number":6611,"comment_id":"892192457","body":"I'm worried about using a parser for this, because we have no idea what sort of syntax people will be using in the original (unpreprocessed) code. For example, we have no idea whether the language that they're trying to preprocess in `expression`s has any of the same features of matching braces or strings or comments as JS does.","updated_at":"2021-08-03T21:56:04Z","created_at":"2021-08-03T21:56:04Z","creator_user_login":"Conduitry"}
{"number":6611,"comment_id":"892258915","body":"hmm.. fair enough, would it make sense to have an option on the preprocessors to decide whether to use regex or parser?\r\n\r\nfor example:\r\n\r\n```js\r\nconst preprocessor = {\r\n  style() {},\r\n  markup() {},\r\n  script() {},\r\n  mode: 'parser' | 'regex' = 'regex',\r\n};\r\n```\r\n\r\nwith default as `regex`, which will make `preprocess()` backwards compatible, and preprocessors author can update on their own pace\r\n\r\nthough, i'm not sure to use the word `\"regex\"` and `\"parser\"`, it feels like leaking our implementation out\r\n\r\nand alternative maybe to specify as version number:\r\n\r\n```js\r\nconst preprocessor = {\r\n  style() {},\r\n  markup() {},\r\n  script() {},\r\n  version: 1,\r\n};\r\n```","updated_at":"2021-08-04T02:19:10Z","created_at":"2021-08-04T00:20:21Z","creator_user_login":"tanhauhau"}
{"number":6611,"comment_id":"899266234","body":"I like this parser very very much, because it could help us with all sorts of tooling. Preprocessing would get easier, but the ESLint and Prettier plugins could also benefit from this, and language-tools could possibly get rid of some custom top level script extractor logic. So it would be great if the parser could be available for direct use.\r\n\r\nRegarding the preprocessor enhancement: I propose to not enhance the existing API and instead try to make it part of the new API which is discussed in this RFC: https://github.com/sveltejs/rfcs/pull/56 \r\n\r\nI therefore propose to split this PR up into two pieces: One which simply makes this new parser available publicly (whether that's under `svelte/preprocess` or not is TBD), and once the new preprocessor API is finalized another PR where the parser is usable as part of that new API.\r\n\r\nAnother thing that would help tooling: Add a `isTopLevel` property to `script` / `style` entries to distinguish\r\n```svelte\r\n<script>\r\n   console.log('top level')\r\n</script>\r\n<div>\r\n  <script>console.log('not top')</script>\r\n</div>\r\n```","updated_at":"2021-08-16T12:57:49Z","created_at":"2021-08-16T06:49:46Z","creator_user_login":"dummdidumm"}
{"number":6611,"comment_id":"900040799","body":"@pngwn might have some thoughts about this, he wrote a language-agnostic parser, too, albeit with more sophisticated parsing mechanism for the contents of example `each` etc and producing a complete AST in the end (https://github.com/pngwn/MDsveX/tree/master/packages/svelte-parse).","updated_at":"2021-08-17T06:51:26Z","created_at":"2021-08-17T06:51:26Z","creator_user_login":"dummdidumm"}
{"number":6611,"comment_id":"936934012","body":"Regarding the ESLint plugin benefiting from this: I'm not sure what that would look like exactly, but unless it were a synchronous API (which the existing preprocessor API is not), it couldn't be used in ESLint, where all plugins need to run synchronously.","updated_at":"2021-10-06T19:10:10Z","created_at":"2021-10-06T19:10:10Z","creator_user_login":"Conduitry"}
{"number":6611,"comment_id":"937564843","body":"The parser itself is synchronous and could help ESLint etc to for example find out  where the top level script/style tags are - which is why I asked if we could split this PR into two, one for the parser itself because it would be immediately useful in itself, and the preprocessing changes independent of that.","updated_at":"2021-10-07T08:20:40Z","created_at":"2021-10-07T08:20:40Z","creator_user_login":"dummdidumm"}
{"number":6611,"comment_id":"982474208","body":"I may not understand something regarding this PR.\r\nHowever, I have a small idea for finding **top-level** `<script>` / `<style>` tag.\r\nSo I'm posting it.\r\nI'm sorry if I'm saying fundamentally wrong or any considerations were omitted.\r\n\r\nI think this process could be made easier by adding a rule that `<script>`/ `<style>` tags must always be at the beginning of a line.\r\nThis is breaking changes but I don't think it will affect most users.\r\nAnd I wrote about how to notice it to affected users at the bottom.\r\n\r\nThis way, perhaps only regular expressions, or a very simple parser that is completely language-independent, will be able to extract each part correctly.\r\n\r\nThe below (maybe only) case doesn't handle properly, but I think it's enough to put it in the documentation because this is a super edge case.\r\n\r\n```svelte\r\n<sctipt>.\r\n  const str = `\r\n<script>\r\n  const hoge = \"hoge\";\r\n</script>\r\n`;\r\n</script>\r\n```\r\n\r\nIt would be nice to have some kind of warning and a way to disable it (like `<!-- svelte-ignore invalid-script-tag -->`) in case a user unintentionally writes an invalid `<script>` / `<style>` tag.\r\n\r\nAnd to do this, we need to traverse an entire code before separating it for finding `<script>` / `<style>` tags that are not at the beginning of a line.\r\nIs there currently a mechanism for this?\r\n\r\n\r\n---\r\nBy the way,\r\nFor the part that extracts `expressions`, for example, if user use `pug`, the notation will be as follows.\r\n(Just I copied from web.)\r\n`if` statements doesn't have `{`, `}`.\r\nTherefore current parser may doesn't run as expected if my understand is correct.\r\n\r\n```pug\r\n ul\r\n   +if('posts && posts.length > 1')\r\n     +each('posts as post')\r\n       li\r\n         a(rel=\"prefetch\" href=\"blog/{post.slug}\") {post.title}\r\n     +else()\r\n       span No posts :boom:\r\n```","updated_at":"2021-11-30T09:59:19Z","created_at":"2021-11-30T09:59:19Z","creator_user_login":"baseballyama"}
{"number":6611,"comment_id":"985998555","body":"@baseballyama I'm not sure if checking for `<script>` at the first of line would be a robust solution. The format of the code shouldn't change its semantic meaning, so I think a simple parser would work better here.\r\n\r\nRe pug, it shouldn't be an issue since the parser would always run on pure Svelte code. Pug would be preprocessed into html before Svelte parses it.","updated_at":"2021-12-04T09:31:39Z","created_at":"2021-12-04T09:31:39Z","creator_user_login":"bluwy"}
{"number":6611,"comment_id":"986040949","body":"@bluwy \r\n\r\nThank you for your comment!\r\n\r\n> I'm not sure if checking for <script> at the first of line would be a robust solution. The format of the code shouldn't change its semantic meaning, so I think a simple parser would work better here.\r\n\r\nI add an additional explanation of my idea.\r\n\r\n### Point1\r\nThis is just IMO, but the parser doesn't know anything other than `<script>` / `</script>` and `<style>` / `</style>` strings before splitting them into script and style and markup parts.\r\nThis is because it doesn't know what language is used.\r\nThus, the parser needs to rely only on the `<script>` / `</script>` string and the `<style>` / `</style>` string for parsing.\r\n\r\nAccording to GitHub issues, Svelte users sometimes write `<script>` or `<style>` strings inside `<script>` or `<style>` or markup part.\r\nHowever, there doesn't seem to be a case for writing them at the beginning of a line.\r\nThis is because there is a context that it is a real `<script>` / `<style>` tag.\r\n\r\n### Point2\r\nFrom another perspective, I think we can recognize `<script>` and `<style>` not as HTML tags, but just separators that represent sections of a `.svelte` file.\r\nThen it is ergonomically natural to write the separator at the beginning of the line, like `#` in markdown.\r\n\r\nFor these two reasons, it may make sense to introduce the rule of my idea, \r\nBut anyway, if it is true that this rule can simplify the parsing process, I thought it would be a good idea to consider it.\r\nAnd if the maintainers think that a simple parser is better, of course, I will follow it!\r\n\r\n> Re pug, it shouldn't be an issue since the parser would always run on pure Svelte code. Pug would be preprocessed into html before Svelte parses it.\r\n\r\nFor instance, I had understood that there is a use case where [language-tools](https://github.com/sveltejs/language-tools/blob/b0d3f691e4c35f6fb2988983a3b3c83292264412/packages/svelte2tsx/src/utils/htmlxparser.ts#L35) want to use this before pre-processing.\r\nSorry if I'm wrong. (I need to learn more about it.üòÖ)\r\nAnd I totally agree with you about the Svelte compiler, I don't think it will be a problem since it is already pre-processed.\r\n","updated_at":"2021-12-04T15:02:45Z","created_at":"2021-12-04T14:58:38Z","creator_user_login":"baseballyama"}
{"number":6611,"comment_id":"986278402","body":"@baseballyama I'm still not sure if it's possible with the idea you suggested. I agree that we can find the start tag easily with this assumption, but the closing tag is still hard to match. Re point2, determining whether they are a separator is another tricky one to solve. Markdown's `#` works because it must start on a new line, Svelte however doesn't mind where the tag is at as long as it's proper HTML, for example a Svelte file written only in one line. But if I'm still misunderstanding your point, feel free to try out your idea üòÖ \r\n\r\nRe language tools, I'm not familiar with the code, but it looks like it's for stripping out the tags before `svelte.parse` so it doesn't error out. @dummdidumm may know more about that.\r\n\r\nIf you have anymore questions (that might be off-topic), It'd be great to have them in the Svelte discord contributing channel. Would be nice to see you there too!\r\n","updated_at":"2021-12-05T18:31:17Z","created_at":"2021-12-05T18:31:17Z","creator_user_login":"bluwy"}
{"number":6540,"comment_id":"882407732","body":"This would be a breaking change because right now there's no requirement to have a whitespace between the brackets and the code. This makes it ambigouus to the minus sign.","updated_at":"2021-07-19T09:45:15Z","created_at":"2021-07-19T09:45:15Z","creator_user_login":"dummdidumm"}
{"number":6540,"comment_id":"882409327","body":"What about `~ ` \r\n\r\nthe only use case i know is to invert Bits and I guess nearly no one would use it in template/html code and for these who need it could use `(~var)`\r\n\r\n`{~variable}`  trimmed before variable\r\n\r\n`{~variable~}`  trimmed before and after variable\r\n\r\n`{variable~}`  trimmed aftervariable","updated_at":"2021-07-19T09:52:38Z","created_at":"2021-07-19T09:47:56Z","creator_user_login":"Kapsonfire-DE"}
{"number":6540,"comment_id":"882451199","body":"> the only use case i know is to invert Bits and I guess nearly no one would use it in template/html code and for these who need it could use (~var)\r\n\r\nIt's still a breaking change.\r\n\r\nI like the idea. White space issues in Svelte come up frequently and there is no one-size-fits-all solution to make every use-case happy (I still have to fight inline-block with font-size: 0 because of that...). And this is a suggestion I like very much.\r\n\r\nLiquid does essentially the same https://shopify.github.io/liquid/basics/whitespace/\r\nBut for Twig and Liquid it's easier to find a syntax because they only have a single type of open/close tag.\r\n\r\nIf the Svelte team thinks this is a viable solution to the white space issues, then let's find a syntax. It also needs to work for `{-#if}` or `{-:else:}` etc. and the minus is ugli.\r\n\r\n```\r\n{expression}\r\n{#if}\r\n{:else}\r\n{/if}\r\n{#each}\r\n{/each}\r\n{#await}\r\n...\r\n```\r\n\r\n> This would be a breaking change\r\n\r\nI've seen this argument a number of times (e.g. in https://github.com/sveltejs/svelte/issues/6373), maybe it's time to plan for a v4? But I know absolutely zero about future plans for Svelte and if that's on the horizon. I think avoiding breaking changes at all cost slows innovation and might result in awkward APIs.\r\n\r\nI personally would even be fine with a `{@ltrim}` / `{@rtrim}` (self-closing) tag or similar. Like a control character you can place somewhere and have the leading or trailing white-space remove. But that's also kind of ugli and verbose.\r\n\r\nExample: currently my `Host.svelte` (that renders a host with different parts colored) looks like this (prettier is now smart enough to not introduce whitespace between the spans). I cannot use font-size:0  hack because the component needs to adjust to the inherited size depending on the context.\r\n\r\n```svelte\r\n<span class=\"host\"\r\n  >{#if subdomain}<span class=\"subdomain\">{subdomain}</span>.{/if}{#if sld}<span class=\"sld\">{sld}</span>.{/if}<span\r\n    class=\"tld\">{tld}</span\r\n  ></span\r\n>\r\n```\r\n\r\nIt could become this if both if-blocks would trim leading and trailing whitespace, with whatever syntax we end up.\r\n\r\n```svelte\r\n<span class=\"host\">\r\n  {#if subdomain}\r\n    <span class=\"subdomain\">{subdomain}</span>.\r\n  {/if}\r\n\r\n  {#if sld}\r\n    <span class=\"sld\">{sld}</span>.\r\n  {/if}\r\n\r\n  <span class=\"tld\">{tld}</span>\r\n</span>\r\n```\r\n\r\nBut I think there are enough examples of why this is needed in other issues already :sweat_smile: \r\n\r\n@Kapsonfire-DE do you have an example where trimming of an `{expression}` block is actually needed and cannot be done via nearby control blocks? The Liquid docs have one but it's completely made up and not necessary to even have that whitespace in the first place. Because for all other tags it should be easier to find a backwards compatible syntax.\r\n\r\nEdit: I was just thinking that if something like this is introduced it would make things even better than expected. Because then by default all white-space could be 100% preserved as they appear in the HTML without touching it at all. It could be treated like any other content. This would make everything much more explicit than what Svelte is currently doing. And the white space can also be trimmed in the compile step. But of course keeping white-space 100% in-tact would be breaking because `preserveWhitespace` would be completely removed.","updated_at":"2021-07-19T11:00:31Z","created_at":"2021-07-19T10:56:40Z","creator_user_login":"Prinzhorn"}
{"number":6540,"comment_id":"882490165","body":"In fact I dont have a example where a control block won't work - but this is a solution where it works against the concept of writing short code.\r\n\r\nTo make the code not breaking, this could be a flag-enabled feature, which are default off, in start template default on.\r\nSo it won't break current projects..... But i agree to your statement:\r\n`I think avoiding breaking changes at all cost slows innovation and might result in awkward APIs.`\r\n\r\nThe `~` gives a similiar feeling like a minus, its short and nearly no one will be affected by it, and if someone is - he can easily refactor in less than a minute... The control blocks for trimming will make the code more noisy and verbose.","updated_at":"2021-07-19T12:01:00Z","created_at":"2021-07-19T12:01:00Z","creator_user_login":"Kapsonfire-DE"}
{"number":6540,"comment_id":"882495427","body":"What would this give us that hugging open/close tags can't?\r\n\r\n```\r\n<span>{#if foo}\r\n  etc\r\n{/if}</span>\r\n```\r\n\r\nIf it's \"only\" about \"this looks ugly in certain cases\", then that sounds like a case for better formatting, which is the job of `prettier-plugin-svelte` .","updated_at":"2021-07-19T12:08:32Z","created_at":"2021-07-19T12:08:32Z","creator_user_login":"dummdidumm"}
{"number":6540,"comment_id":"882601478","body":"> What would this give us that hugging open/close tags can't?\r\n\r\nLike I said this discussion is not new, there are plenty of arguments to be made #3080, #189\r\n\r\nBut skimming through those the proposed solution here would put us in jsx territory where you need `{' '}` for an actual space. But jsx is also somewhat popular. Edit: I think `{' '}` would be even rarer than in jsx with this solution.\r\n\r\n> If it's \"only\" about \"this looks ugly in certain cases\"\r\n\r\nI think code readability and things like cyclomatic complexity are not about looks, but maintainability. Also consistency (see example below).\r\n\r\n> then that sounds like a case for better formatting, which is the job of `prettier-plugin-svelte` .\r\n\r\nThis is an interesting way to look at it. But prettier cannot offer a one-size-fits-all solution in the same way the compiler itself cannot. Because there are different problems. I'll post one more example to illustrate a point, but I think the other issues will contain much better and in depths examples.\r\n\r\nLet's take this as an example (formatted by prettier):\r\n\r\n```svelte\r\n<div>\r\n  {#each list as item}\r\n    {#if item.foo}\r\n      <div>{item.foo}</div>\r\n    {/if}\r\n\r\n    {#if item.bar}\r\n      <div>{item.bar}</div>\r\n    {/if}\r\n  {/each}\r\n</div>\r\n```\r\n\r\nWorks as expected. But once we're talking about inline-block prettier would have to (know to) turn this into:\r\n\r\n```svelte\r\n<div><!--\r\n-->{#each list as item}<!--\r\n---->{#if item.foo}<!--\r\n-----><div>{item.foo}</div><!--\r\n--->{/if}<!--\r\n\r\n--->{#if item.bar}<!--\r\n-----><div>{item.bar}</div><!--\r\n--->{/if}<!--\r\n-->{/each}\r\n</div>\r\n```\r\n\r\nwhich looks a lot like what I've been doing 10 years ago in PHP to render a inline-block list. The alternative would be to completely change the code to let it hug. But I'd rather have consistently formatted code and a way to also control white-space, which the proposal here would (kind of) give us.\r\n\r\nI think if there was an easy and straight forward solution it would have already happened :smile: ","updated_at":"2021-07-19T14:40:24Z","created_at":"2021-07-19T14:36:46Z","creator_user_login":"Prinzhorn"}
{"number":6540,"comment_id":"883977859","body":"What do you think about my opinion? (Maybe this is almost the same as @Kapsonfire-DE)\r\n>  this could be a flag-enabled feature, which are default off, in start template default on.\r\n\r\nMy opinion is that users can set the option to `compilerOptions` if they want to remove useless whitespace from output's HTML.\r\n\r\nIn my understanding, if a user wants to output whitespace, a user should mention `&nbsp` in HTML.\r\n(And at the same time, break line also should mention `<br>`)\r\n\r\nSo I think in many cases, whitespace is just noise. (or should be noise.)\r\nBut this idea also will be breaking changes.\r\nThat's why I thought that this feature should implement as a compiler option.\r\n(Default is disabled.)\r\n\r\nAnd the good point of this idea is that users can maintain readability.\r\nUsers can avoid from ugli and verbose.\r\n\r\nThank you for reading!üéâ\r\nAnd I hope someone will comment on this idea.üßê","updated_at":"2021-07-21T08:01:13Z","created_at":"2021-07-21T08:01:13Z","creator_user_login":"baseballyama"}
{"number":6540,"comment_id":"884063048","body":"whitespaces and &nbsp; are not the same\r\nthere are several cases where its handled differently\r\n\r\npre-tag\r\n:empty\r\nand many more","updated_at":"2021-07-21T10:04:03Z","created_at":"2021-07-21T10:03:47Z","creator_user_login":"Kapsonfire-DE"}
{"number":6540,"comment_id":"884082030","body":"Ahhh right... (I forgot to think about pre tag ...)\r\nThank you for sharing the information.\r\n\r\n","updated_at":"2021-07-21T10:31:30Z","created_at":"2021-07-21T10:31:30Z","creator_user_login":"baseballyama"}
{"number":5572,"comment_id":"727051732","body":"So, you're suggesting that `const` props could be set externally. What happens when `answer` changes value?\r\n\r\n```\r\n<Component { answer }/>\r\n<button on:click={() => answer += 1}>Increment</button>\r\n```\r\n","updated_at":"2020-11-13T21:48:38Z","created_at":"2020-11-13T21:48:38Z","creator_user_login":"rsdavis"}
{"number":5572,"comment_id":"727156647","body":"> So, you're suggesting that `const` props could be set externally. What happens when `answer` changes value?\r\n> \r\n> ```\r\n> <Component { answer }/>\r\n> <button on:click={() => answer += 1}>Increment</button>\r\n> ```\r\n\r\nMy suggestion would be that the original component is destroyed and a new one is created in its place with the new const value.\r\nThis would be similar to how the #key directive currently works.\r\n\r\nIn support of the proposal, i would suggest that the lack of   this feature is the cause of some bugs.\r\nWhere a component author has used an input with the assumption that it would not change, they likely will not have created reactive initialisation code.\r\nThen, when the input changes the component becomes only partially updated.\r\n\r\nIm on a phone so providing an example is hard right now. Let me know if I am being unclear and I will provide an example when I am at a computer.","updated_at":"2020-11-14T06:51:45Z","created_at":"2020-11-14T06:51:45Z","creator_user_login":"WHenderson"}
{"number":5572,"comment_id":"728636405","body":"> Im on a phone so providing an example is hard right now. Let me know if I am being unclear and I will provide an example when I am at a computer.\r\n\r\nHere is an example, with a workaround:\r\nhttps://svelte.dev/repl/693e994fa12248efbd8d2700db97727d?version=3.29.7\r\n\r\nIdeally we could come up with a way to automatically produce an equivalent of the workaround.","updated_at":"2020-11-17T02:00:21Z","created_at":"2020-11-17T02:00:21Z","creator_user_login":"intelcentre"}
{"number":5572,"comment_id":"833814879","body":"> My suggestion would be that the original component is destroyed and a new one is created in its place with the new const value.\r\n> This would be similar to how the #key directive currently works.\r\n\r\nThat behavior would be extremely surprising and unintuitive. \r\n\r\nI think `export const` is better reserved for exposing interfaces on components though `bind:this`.","updated_at":"2021-05-06T19:50:13Z","created_at":"2021-05-06T19:50:13Z","creator_user_login":"akiselev"}
{"number":5572,"comment_id":"955184674","body":"I think this is a great idea. Have had many similar cases myself, this would be really useful.","updated_at":"2021-10-30T10:07:16Z","created_at":"2021-10-30T10:07:01Z","creator_user_login":"aradalvand"}
{"number":5572,"comment_id":"1055926687","body":"As a newcomer to Svelte, not having a way to define constant props (with a supported default/fallback value) feels like a risk to the reliability of data passed between components. In situations where props are passed down a few layers, if one of those prop values changes along the way, the app may not operate as expected, and this would not be considered a bug with Svelte.\r\n\r\nThat said ‚Äî I think adding support for immutable props would be a huge advantage for all Svelte developers.\r\n\r\n```js\r\n      export const importedValue = 5;\r\n//    ‚îÇ      ‚îÇ     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îÇ\r\n//    prop   immutable  variable   default (fallback) value\r\n```","updated_at":"2022-03-01T22:34:48Z","created_at":"2022-03-01T22:34:48Z","creator_user_login":"brandonmcconnell"}
{"number":5572,"comment_id":"1057621199","body":"I'm also a newcomer to svelte.\r\n\r\nOne problem when doing this is that I also have to add a default value, so this is invalid syntax:\r\n\r\n```svelte\r\n<script>\r\n// ColorOption.svelte\r\nexport const name: StyleOption;\r\n</script>\r\n```\r\n\r\nHere's another workaround that seems less unintuitive than using `key`:\r\n\r\n```svelte\r\n<script>\r\n$: {\r\n   name\r\n   throw ReferenceError(\"name is immutable\")\r\n}\r\n</script>\r\n```","updated_at":"2022-03-03T03:08:42Z","created_at":"2022-03-03T03:08:42Z","creator_user_login":"icecream17"}
{"number":5572,"comment_id":"1095067901","body":"@pushkine what would be the use case for this? It seems like a workaround for user error - if you can change a `let` declaration to `const` in order to get the behaviour you want, you can also make any intermediate calculation reactive.\r\n\r\nIn @intelcentre 's example, the correct workaround is to simply move the intermediate calculation into the expression `$: output = JSON.stringify({ roInput, rwInput, intermediateCalculation: roInput * rwInput });`. There is no extra cost to that, and declaring the inputs as `const`, only to force a remount when it changes, takes the exact same though process.","updated_at":"2022-04-11T13:41:46Z","created_at":"2022-04-11T13:41:19Z","creator_user_login":"ricardobeat"}
{"number":5572,"comment_id":"1100138936","body":"Svelte currently supports input/output and output props (see `#1` and `#2`) , but does not support input only props which is what I believe is being discussed here.\r\n\r\n```svelte\r\n<script>\r\n\t// 1) input/output prop - supports input (a={...}) and input/output (bind:a={...}) syntax\r\n\texport let a;\r\n\r\n\t// 2) output props - can be accessed via bind:this={self}/self.b and input/output (bind:b={...}) syntax\r\n\texport const b = /* ... */ 0;\r\n\texport function c() { /* ... */ };\r\n\t\r\n\t// 3) non-reactive code - code may be based on input props, but this code will not be re-run when they are updated\r\n\t/* ... */\r\n\t\t\t\t\t\r\n\t// 4) reactive code - code here will be re-un if any of the referenced properties are updated\r\n\t$: { /* ... */ }\r\n</script>\r\n```\r\n\r\nI am finding that this missing feature leads to components being defined with syntax that suggests mutable props but whos implementations expect those inputs to remain constant.\r\n\r\nWhilst there are exotic cases where it makes sense for non-reactive code to reference the initial values of mutable props,\r\nin most situations this is almost always a source for bugs. It would be far better to be able to define these props as immutable.\r\nThis way, component users would get clear indication of which properties are designed to be reactive and which are not.\r\nIt may also be helpful for svelte to issue warnings when non-reactive code references mutable props.\r\n\r\n# syntax for an immutable prop\r\nIf immutable input props were to be added, what would the syntax be?\r\n\r\nSome suggestions:\r\n1) Change the semantics of `export const b = ...;` to allow the b={...} input syntax (this would be a breaking change for a few reasons ‚òπÔ∏è).\r\n2) Add an additional keyword. e.g. `export readonly let value` - would break so many things\r\n3) Use some sort of prefix to denote const-ness. e.g. `export let const_value` - just yuk\r\n4) Use some sort of comment. e.g. `export /* svelte:readonly */ let value` - still yuk\r\n5) Hopefully someone else can suggest something better - üôè \r\n\r\n# changing an immutable prop\r\nIf immutable input props were to be added, what would happen if a new value was assigned to them?\r\ne.g. `<Component immutable_value={changing_value} />`.\r\n\r\nPossible solutions:\r\n1) Issue a warning when attempting to update an immutable value. (I think this would have to be a runtime concern)\r\n2) Reconstruct the component with the new value as if the component were inside a `{#key {...imutable_props}}` block\r\n3) Offer multiple solutions based on a `<svelte:options />` flag\r\n4) Hopefully someone else can suggest something better\r\n\r\n\r\n\r\n","updated_at":"2022-04-15T14:22:37Z","created_at":"2022-04-15T14:22:37Z","creator_user_login":"WHenderson"}
{"number":5572,"comment_id":"1100145449","body":"> In @intelcentre 's example, the correct workaround is to simply move the intermediate calculation into the expression `$: output = JSON.stringify({ roInput, rwInput, intermediateCalculation: roInput * rwInput });`. There is no extra cost to that, and declaring the inputs as `const`, only to force a remount when it changes, takes the exact same though process.\r\n\r\n(FYI, I was @intelcentre - work account)\r\nYou are correct that the problem can be solved by making unreactive blocks reactive, but the example was a simple contrivance rather than real world code. \r\n\r\nIn my experience, writing complex components where all inputs are reactive can easily get quite complex. `const` inputs would be a way to cut down that complexity and allow a certain amount of natural compiler help. Just as `const` is not technically necessary for javascript to function, it sure is a nice bit of sugar.\r\n\r\nAnother parallel would be how languages such as C# allow classes to have [readonly](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly) member variables. If you think of components as class instances, readonly member variables would be a direct parallel to what is being discussed here.","updated_at":"2022-04-15T14:34:20Z","created_at":"2022-04-15T14:34:20Z","creator_user_login":"WHenderson"}
{"number":5572,"comment_id":"1332999191","body":"I also find that exported const variable, but still assigned by parents would be a really great addition to Svelte.\r\n\r\nThe only alternative is currently to add Typescript' `readonly` prop on input variable you plan to keep untouched, but it comes with the drawback that every function you'd like to pass those variable too must also declare them as `readonly`, which is rarely the case in existing codebases / library - and more importantly that this is only a syntactic declaration, that requires Typescript, but wouldn't actually prevent the forbidden behavior at runtime (since the variable would still be declared mutable).\r\n\r\n> > So, you're suggesting that `const` props could be set externally. What happens when `answer` changes value?\r\n> > ```\r\n> > <Component { answer }/>\r\n> > <button on:click={() => answer += 1}>Increment</button>\r\n> > ```\r\n> \r\n> My suggestion would be that the original component is destroyed and a new one is created in its place with the new const value. This would be similar to how the #key directive currently works.\r\n\r\nI think that a sensible implementation would rather fail compilation of the given example, and only allow constants to be passed to exported constants. So given: \r\n```js\r\n// Component.svelte\r\nexport const answer\r\n```\r\nOnly this would be possible:\r\n```svelte\r\n// OK\r\n<Component answer=42 />\r\n\r\n// OK\r\n<script> const answer = 42 </script>\r\n<Component { answer }/> \r\n```\r\nAnd this would fail:\r\n```svelte\r\n// Error: assigning mutable variable `answer` to const export\r\n<script> let answer = 42 </script>\r\n<Component { answer }/> \r\n```\r\n\r\nAs nice as it would be, it wouldn't even be a breaking change: `const export` already weren't mutable wether by the parent or the child component. Children initialized `const export` would just have to be overriden by the value passed by the parent, if any.","updated_at":"2022-12-01T01:18:06Z","created_at":"2022-12-01T01:07:45Z","creator_user_login":"Oreilles"}
{"number":5530,"comment_id":"709352629","body":"I don't think there's really a good way to do this without having each component also be responsible for tracking how many instances of it currently exist, so that once it drops back to zero the styles can be removed - which is extra overhead for something that almost everyone will not need.\r\n\r\nIt's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway. Any selectors that are even partially scoped to the current component won't have any effect if the styles hang around.\r\n\r\nMy personal vote on this behavior is that it should be documented somewhere rather than changed.","updated_at":"2020-10-15T14:11:07Z","created_at":"2020-10-15T14:11:07Z","creator_user_login":"Conduitry"}
{"number":5530,"comment_id":"709375002","body":"> I don't think there's really a good way to do this without having each component also be responsible for tracking how many instances of it currently exist, so that once it drops back to zero the styles can be removed - which is extra overhead for something that almost everyone will not need.\r\n> \r\n> It's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway. Any selectors that are even partially scoped to the current component won't have any effect if the styles hang around.\r\n> \r\n> My personal vote on this behavior is that it should be documented somewhere rather than changed.\r\n\r\nIs it at least possibile to pass an id/class to the appended style element in order to easily implements this behaviour manually?\r\n\r\nSomething like\r\n```\r\n<style id=\"my-style-with-globals\">...</style>\r\n```","updated_at":"2020-10-15T14:45:05Z","created_at":"2020-10-15T14:45:05Z","creator_user_login":"raythurnevoid"}
{"number":5530,"comment_id":"709542509","body":"> This only really matters with selectors that are purely :global() which generally is somewhat of an undesirable thing to be doing anyway.\r\n\r\nIt may occasionally be desirable to propagate styles upwards from certain components (think Sapper routes wishing to style the document/body), for which `:global()` in its purest would make sense (if not for the behaviour in question, that is).\r\n\r\nI believe this has already been considered (see https://github.com/sveltejs/svelte/issues/1281), but the current behaviour does make certain things annoying.","updated_at":"2020-10-15T19:26:18Z","created_at":"2020-10-15T19:26:18Z","creator_user_login":"intrikate"}
{"number":5530,"comment_id":"709671958","body":"> It may occasionally be desirable to propagate styles upwards from certain components (think Sapper routes wishing to style the document/body), for which `:global()` in its purest would make sense (if not for the behaviour in question, that is).\r\n\r\nThat's exactly my use case, we created some pages, and wanted to apply different css on body element on the basis of the viewed component. Actually we workarounded it by the use of a writable store on a top component which manage to remove and manually set classes with vanilla dom methods.\r\nI think this solution is dirty though.","updated_at":"2020-10-16T01:15:43Z","created_at":"2020-10-16T01:15:43Z","creator_user_login":"raythurnevoid"}
{"number":5530,"comment_id":"715010925","body":"Is it possible to make a compiler-flag \"removeStylesOnDestroy\" (or a better name). If the flag is set, additional code will be generated, that tracks the count of currently created instances of an component. When the last component was destroyed, the styles will be removed. \r\nThe code would look something like this:\r\n```\r\nlet counter = 0\r\n\r\ninit( /* options */ ) {\r\n\r\n   // code\r\n\r\n   counter++\r\n}\r\n```\r\n\r\nand\r\n\r\n```\r\ndestroy_component( /* options */)\r\n\r\n   // code   \r\n\r\n   counter--\r\n   if (counter === 0) {\r\n      // TODO: remove stylesheet\r\n   }\r\n```","updated_at":"2020-10-23T06:57:38Z","created_at":"2020-10-23T06:57:38Z","creator_user_login":"ivanhofer"}
{"number":5530,"comment_id":"731783146","body":"This weird issue just bit me too.\r\n\r\nIn my opinion, this is not only annoying, it is definitely a Svelte bug, since when a component is removed from the DOM, there shouldn't be any traces of it left that affect the rest of the app, that is neither visually nor functionally.\r\n\r\n> It's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway\r\n\r\nThat doesn't make sense to me. `:global()` is made for what it's named after, setting global styles. Whether this happens in a context that begins in the hierarchy above or below the reference component shouldn't make any difference as to how the app, the component or `:global()` works, because of the principle of least surprise alone. If that cannot be reasonably done without too much overhead, `:global()` shouldn't at least be renamed to `:childStyles()` or something similarly obvious.\r\n\r\nIf I can set global styles in a component that can be removed programmatically at any time, like all components do, I expect the styles that are part of said component to be removed as well, without any visual of functional traces left afterwards. Period.\r\n\r\nThis should either be fixed or `:global()` should be renamed.","updated_at":"2020-11-22T17:47:42Z","created_at":"2020-11-22T17:43:24Z","creator_user_login":"Odiumediae"}
{"number":5530,"comment_id":"731856358","body":"I don‚Äôt agree. Current behaviour seems very ressonable imo: If you use :global you‚Äôre setting styles using standard css behavoiur - affecting the whole document. Hence, those effects are not only ‚Äùfor‚Äù the injecting component but any element that the style targets, effectively ceasing to be tied to the injector comp the moment they are declared... Any other behaviour seems contrived and should (and could) be solved by writing your own specific css handling in onmount/destroy as needed. My 2 cents.","updated_at":"2020-11-22T22:18:58Z","created_at":"2020-11-22T22:18:58Z","creator_user_login":"xelius"}
{"number":5530,"comment_id":"743384065","body":"I am currently experiencing this, and believe it is unexpected. I have a component, while not a route, that is still basically guaranteed to exist just once on the page. Here's what I have:\r\n```html\r\n<div>\r\n  <body />\r\n</div>\r\n\r\n<style>\r\n  @import url(\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic\");\r\n\r\n  body {\r\n    font-family: Source Sans Pro, sans-serif;\r\n    overflow: hidden;\r\n  }\r\n\r\n  div body {\r\n    display: none;\r\n  }\r\n</style>\r\n```\r\nIf I use `:global(body)`, when the user navigates away from the route that has this component, `overflow: hidden;` stays on `body`, which breaks the app. It's not ideal to have a random `<body>` somewhere deep in the tree. Either way, as a compiler I expect Svelte to \"do the right thing\" every time, so if there's some extra tracking it needs to do to avoid duplicate styles then it should do that. \r\n\r\nMy point of view is that what the component brings in, it should bring out. Leaving non-scoped styles on the page after the component was destroyed is unexpected and feels like a leak. ","updated_at":"2020-12-11T19:28:33Z","created_at":"2020-12-11T19:28:33Z","creator_user_login":"yuriys-kentico"}
{"number":5530,"comment_id":"869066766","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:04:32Z","created_at":"2021-06-26T22:04:32Z","creator_user_login":"stale[bot]"}
{"number":5530,"comment_id":"908317145","body":"If this feature gets implemented, it gives us the flexibility to control, say, body styles, from within child components. Without it, child component styles apply once they are created, but no subsequent affect, since style tags gets injected in the head once, and don't get destroyed\r\n","updated_at":"2021-08-30T12:53:52Z","created_at":"2021-08-30T12:53:52Z","creator_user_login":"AsafAgranat"}
{"number":5530,"comment_id":"910964125","body":"This just bit me too in scenario very similar to what @yuriys-kentico described.\r\n\r\n> My point of view is that what the component brings in, it should bring out. Leaving non-scoped styles on the page after the component was destroyed is unexpected and feels like a leak.\r\n\r\nAgreed. My expectation (naive or otherwise) was that removing a component should also have removed its `:global` style entries.","updated_at":"2021-09-02T00:46:56Z","created_at":"2021-09-02T00:46:56Z","creator_user_login":"gblakeman"}
{"number":5530,"comment_id":"966199587","body":"+1","updated_at":"2021-11-11T10:48:43Z","created_at":"2021-11-11T10:48:43Z","creator_user_login":"bojanv55"}
{"number":5530,"comment_id":"1001595722","body":"I just ran into this bug. I was able to work around it by setting the style in `<svelte:head><style></style></svelte:head>` instead of using `:global()`. Works like a charm. The style is applied globally and it's removed when the component is destroyed.","updated_at":"2021-12-27T14:30:38Z","created_at":"2021-12-27T14:30:38Z","creator_user_login":"Fornax96"}
{"number":5530,"comment_id":"1153760447","body":"I ran into this issue recently when trying to use storybook.\r\nI wanted any global CSS from tailwind / daisyui to be auto removed when moving between storybook components\r\n\r\nI found the best way to do this as mentioned above is to use the svelte:head method in combination with the svelte-preprocess add-on\r\n\r\nSo for example\r\n\r\n`styles/tailwind.css`\r\n```css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n@tailwind screens;\r\n```\r\n\r\nsvelte component used by storybook\r\n```html\r\n<svelte:head>\r\n  <style src=\"./../../styles/tailwind.css\"></style>\r\n  <style src=\"./../../../node_modules/daisyui/dist/full.css\"></style>\r\n</svelte:head>\r\n```\r\n\r\nsvelte-preprocess will auto bundle in the css into the head of the storybook iframe with the above.\r\nThen it should be removed when the component is destroyed\r\n","updated_at":"2022-06-13T10:44:00Z","created_at":"2022-06-13T10:43:34Z","creator_user_login":"grbd"}
{"number":5530,"comment_id":"1279699994","body":"+1","updated_at":"2022-10-15T09:01:52Z","created_at":"2022-10-15T09:01:52Z","creator_user_login":"Crenshinibon"}
{"number":5476,"comment_id":"701943634","body":"@pngwn @Rich-Harris @antony @allofthenamesaretaken @benmccann @mindrones \r\n\r\nCan we get this added to the next release? Very essential feature for anyone who wants to speed up their application by being able be able to http/2 push or preload asychronous modules that have been rendered during SSR.","updated_at":"2020-10-01T07:24:01Z","created_at":"2020-10-01T07:24:01Z","creator_user_login":"AlbertMarashi"}
{"number":5476,"comment_id":"702340540","body":"What's the reason for opening a new PR? What changed between this and https://github.com/sveltejs/svelte/pull/4856?","updated_at":"2020-10-01T19:09:51Z","created_at":"2020-10-01T19:09:51Z","creator_user_login":"benmccann"}
{"number":5476,"comment_id":"702422708","body":"Added tests & docs @benmccann ","updated_at":"2020-10-01T22:07:42Z","created_at":"2020-10-01T22:06:38Z","creator_user_login":"AlbertMarashi"}
{"number":5476,"comment_id":"702482481","body":"Really need this feature ASAP for the current project I am working on in my startup. How soon before this is added to the next release?","updated_at":"2020-10-02T01:41:33Z","created_at":"2020-10-02T01:41:33Z","creator_user_login":"allofthenamesaretaken"}
{"number":5476,"comment_id":"702806589","body":"Ok, thanks for the clarification. And thanks for adding tests! Just FYI, you can update existing PRs with changes like that and don't have to open new ones","updated_at":"2020-10-02T15:41:01Z","created_at":"2020-10-02T15:41:01Z","creator_user_login":"benmccann"}
{"number":5476,"comment_id":"713154074","body":"I have to admit this feels a bit like 'scenario solving'. The way we've solved this elsewhere is by analysing the SSR bundle alongside the route manifest that informs SSR. This has a key advantage over the approach outlined here:\r\n\r\n```svelte\r\n<script>\r\n  // Foo is a dependency of this component, and will need to be loaded\r\n  // before this component can render...\r\n  import Foo from './Foo.svelte';\r\n\r\n  let condition = false;\r\n</script>\r\n\r\n<!-- ...but it isn't rendered during SSR, so won't show up in the list of necessary components -->\r\n{#if condition}\r\n  <Foo/>\r\n{/if}\r\n\r\n<button on:click={() => condition = true}>\r\n  show foo\r\n</button>\r\n```\r\n\r\nUsing a route manifest is more work but more reliable, and doesn't increase API surface area.","updated_at":"2020-10-20T21:36:23Z","created_at":"2020-10-20T21:36:23Z","creator_user_login":"Rich-Harris"}
{"number":5476,"comment_id":"713173741","body":"I think the way you'd write that code sample would probably look more like:\r\n\r\n```svelte\r\n<script>\r\n  export let Foo;\r\n\r\n  let condition = false;\r\n\r\n  // Foo is imported dynamically only when needed\r\n  if (condition) {\r\n    import('./Foo.svelte').then(mod => {\r\n      Foo = mod.default;\r\n    });\r\n  }\r\n</script>\r\n\r\n<!-- it likely will render Foo on the client only if it rendered on the server - though this is not guaranteed if the if statement checks for the presence of window or does something similar to specifically make the client-side rendering purposefully different -->\r\n{#if condition}\r\n  <svelte:component this={Foo}/>\r\n{/if}\r\n\r\n<button on:click={() => condition = true}>\r\n  show foo\r\n</button>\r\n```\r\n\r\nThat makes the case for this feature a bit more reasonable. Whether it meets the bar for being worth an API addition though I'm not sure of. I've personally never run into a case where the manifest approach is not sufficient\r\n\r\nWhat we want to do here may also be influenced by what we decide regarding browser vs server scripts (somewhat discussed in https://github.com/sveltejs/rfcs/pull/27). The more browser and server logic diverge probably the less useful it is to load client-side scripts based upon what happened on the server","updated_at":"2020-10-20T22:21:20Z","created_at":"2020-10-20T22:21:20Z","creator_user_login":"benmccann"}
{"number":5476,"comment_id":"713184815","body":"Thank you for your comment @Rich-Harris \r\n\r\nIn the example you gave above, `Foo.svelte` would be automatically included in the bundle for that component's module since it's a normal import (not async).\r\n\r\nIf we call that component `Page.svelte`, you would be able to find it's filename in the `renderedComponents`. You link the filename of `Page.svelte`  to an output module with your manifest file. This way you can know which specific module to load on the client-side (by knowing was rendered during SSR)\r\n\r\nIn an **actual async example**, (eg: `Foo.svelte` loaded asynchronously), it would result in a seperate module, and knowing which module to preload is practically impossible without having some sort of hint of what was rendered during SSR\r\n\r\nThe problem with a route-manifest is that it only works one layer deep (eg: Page level). If you try importing nested async components we won't have any idea of what to preload.\r\n\r\nThis would be especially useful for the `{#await}` syntax during SSR\r\nhttps://github.com/sveltejs/svelte/issues/958. \r\n\r\n---\r\n\r\nThere's also some scenarios where a route-manifest won't help you too much, consider you have a router that dynamically returns a different page component on the **same url**. Adding the logic to handle that stuff would be incredibly difficult, especially if there's lots of these types of routes\r\n\r\neg:\r\n\r\nImagine a news website that doesn't want to use subfolder prefixes for knowing what type of page to render. They may want to do this for SEO/UX purposes.  (eg: `/some-interesting-news` instead of  `/article/some-interesting-news` has some minor SEO benefits)\r\n\r\n```js\r\nlet pageTypes = {\r\n    article: () => import('@/templates/article'),\r\n    factcheck: () => import('@/templates/factcheck'),\r\n    category: () => import('@/templates/category'),\r\n}\r\n\r\nlet routes = [\r\n    //catch all path\r\n    new Path('/*', async ({slug}) => {\r\n        let pageType = await getPageType(slug) //contact backend to find page type of this URL\r\n        if(!pageType) return () => import('@/pages/404')\r\n\r\n        return pageTypes[pageType] // this could return 1 of 3 PageTypes\r\n    })\r\n]\r\n```\r\n\r\nYour route-manifest won't help much here, as the URLs are dynamic.\r\n\r\n---\r\n\r\nAnother use-case:\r\nImagine you have a dashboard app where you want to use SSR, the dashboard may be user-specific, meaning different widgets and components for different users. Imagine all of these dashboard components are asynchronously loaded (because as a user you don't want to load every dashboard component that you aren't using in your dashboard)\r\n\r\nIn this scenario, the dashboard components in this route are unknown until rendering, and you could only know which components to preload **if an API such as this was exposed**.\r\n\r\nI don't like to create additional API surface, but this is a pretty essential feature that exists in other frontend frameworks.","updated_at":"2020-10-21T22:14:46Z","created_at":"2020-10-20T22:52:39Z","creator_user_login":"AlbertMarashi"}
{"number":5476,"comment_id":"722911914","body":"> I have to admit this feels a bit like 'scenario solving'. The way we've solved this elsewhere is by analysing the SSR bundle alongside the route manifest that informs SSR. This has a key advantage over the approach outlined here:\r\n> \r\n> ```svelte\r\n> <script>\r\n>   // Foo is a dependency of this component, and will need to be loaded\r\n>   // before this component can render...\r\n>   import Foo from './Foo.svelte';\r\n> \r\n>   let condition = false;\r\n> </script>\r\n> \r\n> <!-- ...but it isn't rendered during SSR, so won't show up in the list of necessary components -->\r\n> {#if condition}\r\n>   <Foo/>\r\n> {/if}\r\n> \r\n> <button on:click={() => condition = true}>\r\n>   show foo\r\n> </button>\r\n> ```\r\n> \r\n> Using a route manifest is more work but more reliable, and doesn't increase API surface area.\r\n\r\n`Foo.svelte` would not be included in the renderedComponents array, however, **when using code-splitting, it would be included in the same chunk as the parent component**, as it's being statically imported. \r\n\r\nEven if it were asynchronously loaded (eg: `import('Foo.svelte')`) it's safe to assume that 95% of components rendered on the client-side would also be rendered during SSR. (Otherwise, there's not much point of using SSR) \r\n\r\nThe problem this is solving **Time-till-interactive** caused by loading async components on an already SSR'd page. In fact, what can happen is that the client hydration failure may cause the entire page to **_flash white_** until the async components load, this is of course bad UX.\r\n\r\nLike you said, using a route manifest will involve more work, and this solution would save time and cover over 90% of use cases.\r\n\r\nI am using this fork in 4 production builds because of it's loading speed & SEO benefits. I really love what Svelte is doing, and a feature like this will help mature it into a strong option for enterprises.\r\n\r\nI plan to publicly release the router we have created using this system, which would help contribute to the svelte ecosystem. It's based on Vue's `vue-router`, which would help a lot of Vue users feel comfortable migrating to Svelte with relatively little effort.\r\n\r\nWe are using this feature for a SaaS startup my team and I are building. We would love to see it make the core :)\r\n\r\n@Rich-Harris","updated_at":"2020-11-11T09:44:12Z","created_at":"2020-11-06T06:55:24Z","creator_user_login":"AlbertMarashi"}
{"number":5476,"comment_id":"743945228","body":"Bump\r\n\r\nI would love to see this merged so I can release my router I'm using across a few projects that does SSR & client-side routing module & supports HTTP2/Push.","updated_at":"2020-12-13T04:04:29Z","created_at":"2020-12-13T04:04:29Z","creator_user_login":"AlbertMarashi"}
{"number":5476,"comment_id":"744002932","body":"I don't think we're at the state where we'd be merging this as there is no consensus among maintainers that this feature is required. We'll circle back on this as time allows.","updated_at":"2020-12-13T12:48:09Z","created_at":"2020-12-13T12:48:09Z","creator_user_login":"pngwn"}
{"number":5476,"comment_id":"869047800","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:03:23Z","created_at":"2021-06-26T19:03:23Z","creator_user_login":"stale[bot]"}
{"number":5476,"comment_id":"1167835416","body":"SvelteKit handles preloading pretty well. If you had dynamic imports this might allow them to be preloaded, which we can't do today as we don't know which ones actually get used","updated_at":"2023-02-23T00:07:56Z","created_at":"2022-06-27T20:13:09Z","creator_user_login":"benmccann"}
{"number":4776,"comment_id":"623539742","body":"I'm not clear on the inner workings of the resize listener, but setting `position: relative` on it when its computed style is `position: static` is part of the mechanism implemented in #984/#1386. I don't know whether there's something that could be done about that.","updated_at":"2020-05-04T15:40:07Z","created_at":"2020-05-04T15:40:07Z","creator_user_login":"Conduitry"}
{"number":4776,"comment_id":"623635914","body":"It's so the injected `<iframe>` that is used to monitor for the element's size changing can use absolute positioning to be the exact same size as the element being measured.","updated_at":"2020-05-04T18:40:57Z","created_at":"2020-05-04T18:40:57Z","creator_user_login":"tivac"}
{"number":4776,"comment_id":"640818136","body":"Labeling this as `docs` because we should probably simply be documenting the expected gotchas [here](https://svelte.dev/docs#Block-level_element_bindings) with the technique Svelte uses for this.","updated_at":"2020-06-08T19:11:59Z","created_at":"2020-06-08T19:11:59Z","creator_user_login":"Conduitry"}
{"number":4776,"comment_id":"640823375","body":"Fine. Label it however you see fit, but please note that:\r\n\r\n* This only happens in Firefox, not in Chrome.\r\n* The behavior is intermittent and the problem only appears half of the time.\r\n\r\nThis makes me suspect a bug rather than an expected gotcha, but you guys are the experts. ","updated_at":"2020-06-08T19:20:34Z","created_at":"2020-06-08T19:20:34Z","creator_user_login":"niclasmattsson"}
{"number":4776,"comment_id":"774489396","body":"This also happens in the latest Edge version built on Chromium. The `position: relative` seems to happen every time, but the value that comes from the bound properties doesn't seem to update every time properly. If I then remove the `position: relative` using the Edge developer tools, the values of the bound properties update correctly.","updated_at":"2021-02-06T14:56:42Z","created_at":"2021-02-06T14:56:42Z","creator_user_login":"JakubBlaha"}
{"number":4776,"comment_id":"774494239","body":"Okay so...\r\nit seems like the `clientHeight` does update correctly when my mouse cursor is outside of the viewport and doesn't update when my mouse cursor is inside the viewport during the site load.\r\n\r\nWhat I have done as a workaround is that I have bound both, the `clientHeight` and the element's `this`.\r\n\r\n```html\r\n<div\r\n    class=\"w-full h-full overflow-scroll\"\r\n    bind:clientHeight={containerClientHeight}\r\n    bind:this={container}\r\n>\r\n```\r\n\r\nAnd then I have used `onMount` and `tick` to update the `containerClientHeight` variable to the correct value.\r\n\r\n```js\r\nonMount(async () => {\r\n    await tick();\r\n    containerClientHeight = container.clientHeight;\r\n})\r\n```\r\n\r\nNow the `containerClientHeight` variable seems to update correctly every time..","updated_at":"2021-02-06T15:29:30Z","created_at":"2021-02-06T15:29:30Z","creator_user_login":"JakubBlaha"}
{"number":4776,"comment_id":"855310326","body":"I have been chasing down an intermittent problem on Safari where a sticky header was rendering incorrectly. \r\n\r\nI found that the problem was caused by \"element.style {position: relative;}\" on the element that was supposed to be sticky. I could not see anything in our code that could be causing this. Finally, I looked at bundle.js and found it coming from svelte's generated code. A quick search then brought me to this issue thread. And, yes, the element in question is using the dimension binding feature (for offsetHeight). \r\n\r\nTo fix the problem I added an onMount handler for the parent component that just does element.style.position=\"\" to clear out whatever svelte might have put there. Now the element properly behaves using the position: sticky property set in css.\r\n\r\nThis seems to me to be a real bug. Imo, svelte should never be setting the position property of one of my elements under the covers. But if it's going to do that then it should at least do it in a predictable, consistent and well documented way. ","updated_at":"2021-06-05T23:34:11Z","created_at":"2021-06-05T23:34:11Z","creator_user_login":"gorsat"}
{"number":4776,"comment_id":"937445473","body":"+1 \r\nis there any solution on the horizon?","updated_at":"2021-10-07T04:56:55Z","created_at":"2021-10-07T04:56:55Z","creator_user_login":"isaacHagoel"}
{"number":4776,"comment_id":"937536485","body":"@isaacHagoel  The alternative is to use `ResizeObserver` instead of the `iframe` technique used. There are existing PRs: #5524 and #5963. But you can hack one quickly using actions, like:\r\n\r\n```js\r\n\r\nconst ro = new ResizeObserver((entries) => {\r\n\tfor (const entry of entries) {\r\n\t\tentry.target.dispatchEvent(new CustomEvent(\"elResize\"));\r\n\t}\r\n});\r\n\r\nexport function resize(node: HTMLElement) {\r\n\tro.observe(node);\r\n\treturn {\r\n\t\tdestroy() {\r\n\t\t\tro.unobserve(node);\r\n\t\t},\r\n\t};\r\n}\r\n```\r\n\r\n```html\r\n<div use:resize on:elResize={(e) => foo = e.target.offsetWidth} />\r\n```","updated_at":"2021-10-07T07:41:29Z","created_at":"2021-10-07T07:41:29Z","creator_user_login":"bluwy"}
{"number":4776,"comment_id":"937585122","body":"@bluwy great idea! thanks\r\n","updated_at":"2021-10-07T08:47:59Z","created_at":"2021-10-07T08:47:59Z","creator_user_login":"isaacHagoel"}
{"number":4776,"comment_id":"938415380","body":"FWIW, I've created a package to automatically use `ResizeObserver`s and preserve the `bind:clientWidth` syntax: https://github.com/bluwy/svelte-fast-dimension","updated_at":"2021-10-08T07:35:55Z","created_at":"2021-10-08T07:35:55Z","creator_user_login":"bluwy"}
{"number":4776,"comment_id":"938420622","body":"@bluwy you were able to preserve the `bind:` syntax?\r\nwhat kind of black magic is that?\r\nI will definitely have a look","updated_at":"2021-10-08T07:44:35Z","created_at":"2021-10-08T07:44:35Z","creator_user_login":"isaacHagoel"}
{"number":4776,"comment_id":"938430763","body":"@isaacHagoel anything is possible with preprocessors :wink: (PS: I'll opt-out of this conversation for a bit since it's a bit off topic, feel free to open a discussion in the repo though)","updated_at":"2021-10-08T08:01:28Z","created_at":"2021-10-08T08:01:28Z","creator_user_login":"bluwy"}
{"number":4776,"comment_id":"1081413176","body":"I ran into this issue today while building a `<Header />` component that swaps out **Tailwind** position classes `(absolute | fixed)` depending on the windows `scrollY` position and header's `clientHeight`. \r\n\r\n```html\r\n<header bind:clientHeight={header}>...</header>\r\n```\r\n\r\nI was super confused why my classes weren't applying and thought I had a bug somewhere..but I eventually opened up dev tools to find the inline ghost style `position: relative`. The simplest hack fix for my scenario was adding the position classes to the component styles.\r\n\r\n```css\r\n<style>\r\n  .absolute { position: absolute; }\r\n  .fixed { position: fixed; }\r\n</style>\r\n```\r\nWould be cool to see a fix for this in the future!","updated_at":"2022-03-29T05:16:53Z","created_at":"2022-03-29T05:16:06Z","creator_user_login":"oneezy"}
{"number":4776,"comment_id":"1295271780","body":"Agree that `position: relative` should definitely not be added, this is not what should be expected from the developer perspective. Are there plans to remove this weird and not desired behavior?","updated_at":"2022-10-28T17:36:19Z","created_at":"2022-10-28T17:36:19Z","creator_user_login":"searleser97"}
{"number":4776,"comment_id":"1403968613","body":"FWIW, this also happens to me intermittently on Chrome.\r\n\r\nCan't reproduce 100% reliably, but ``position: relative`` stays on when resizing the window from \"large\" to \"small\" such that it toggles my \"small\" and \"large\" breakpoints. It doesn't stay on when resizing from \"small\" to \"large\". It also doesn't stay on when resizing \"small\" ‚Üí \"large\" ‚Üí back to \"small\". I have a ``position: fixed`` rule at \"small\" sizes on the element that's giving me trouble.","updated_at":"2023-01-25T17:28:54Z","created_at":"2023-01-25T17:21:50Z","creator_user_login":"ddanielou"}
{"number":4776,"comment_id":"1544545428","body":"This is still an issue. Took me an entire day to figure out why a list of components I was creating was getting `position: relative` added magically and messing up the `position:absolute` element I was trying to get styled and positioned correctly on top of them.\r\nI don't think a javascript framework should be adjusting styles on the fly like this. This was really difficult to debug because there is no indication whatsoever in any documentation that if I add `bind:clientHeight` to a div I'm also getting `position:relative` as well.","updated_at":"2023-05-11T19:14:50Z","created_at":"2023-05-11T19:14:50Z","creator_user_login":"sandersrd33"}
{"number":6805,"comment_id":"933241823","body":"> This is problematic when using tools that rely on HTML comments as directives.\r\n\r\nI'm curious what tools you are referring to. Can you give an example?","updated_at":"2021-10-04T08:03:19Z","created_at":"2021-10-04T08:03:19Z","creator_user_login":"Prinzhorn"}
{"number":6805,"comment_id":"933247162","body":"Do the comments also get stripped away if you add `preserveComments: true` to the _compilerOptions_ in your configuration ?","updated_at":"2021-10-04T08:09:52Z","created_at":"2021-10-04T08:09:52Z","creator_user_login":"stephane-vanraes"}
{"number":6805,"comment_id":"933298973","body":"An common example would be Microsoft's conditional comments, but there are also CMS tools that make use of comments. I'm working on a project that needs access to comments in the output HTML.\r\n\r\nPersonally, I think a framework should leave your HTML intact where at all possible. You have to jump through some hoops with React too, which isn't much fun: https://stackoverflow.com/questions/40381851/insert-html-comments-in-react.","updated_at":"2021-10-04T09:16:21Z","created_at":"2021-10-04T09:16:21Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"933299307","body":"I'll try the setting, @stephane-vanraes. Thanks.","updated_at":"2021-10-04T09:16:45Z","created_at":"2021-10-04T09:16:45Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"933314728","body":"> An common example would be Microsoft's conditional comments\r\n\r\nThey probably belong hard coded to the `<head>` or something? Or why do you need to generate them dynamically using JavaScript? I also don't think Svelte supports IE 9\r\n\r\n> but there are also CMS tools that make use of comments\r\n\r\nI'm sill curious for an actual example and why this is a problem with Svelte?\r\n\r\n>  I'm working on a project that needs access to comments in the output HTML.\r\n\r\nSvelte is a compiler that turns the HTML-like components into JavaScript. Not sure what \"output HTML\" you are referring to.\r\n\r\n> You have to jump through some hoops with React too, which isn't much fun: https://stackoverflow.com/questions/40381851/insert-html-comments-in-react.\r\n\r\nWorks in Svelte identical:\r\n\r\n```svelte\r\n<script>\r\n\tlet name = 'world';\r\n</script>\r\n\r\n{@html '<!--Hello-->'}\r\n<h1>Hello {name}!</h1>\r\n```\r\n\r\nhttps://svelte.dev/repl/d6f3f01f53ec4c8bb7b1dd05291e3a16?version=3.43.1\r\n\r\n![Selection_987](https://user-images.githubusercontent.com/679144/135828884-7f7cd0ab-e6bb-4993-82b7-b04bf01b5360.png)\r\n\r\n> I'll try the setting, @stephane-vanraes. Thanks.\r\n\r\nThe setting is for SSR only according to the docs.","updated_at":"2021-10-04T09:44:38Z","created_at":"2021-10-04T09:37:58Z","creator_user_login":"Prinzhorn"}
{"number":6805,"comment_id":"933354608","body":"Aha, the `{@html '<!-- hello -->'} syntax looks like a reasonable workaround, thank you. It's a shame that this doesn't happen automatically when the parser encounters an html comment.","updated_at":"2021-10-04T10:32:33Z","created_at":"2021-10-04T10:32:33Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"933357996","body":"> It's a shame that this doesn't happen automatically when the parser encounters an html comment.\r\n\r\nIt reduces bundle size and improves performance and virtually nobody needs them.\r\n\r\nI'm still very curious if you can explain your use-case as I haven't encountered this ever. The last time I had to use comments was with Knockout and it's been a while.","updated_at":"2021-10-04T10:37:55Z","created_at":"2021-10-04T10:37:55Z","creator_user_login":"Prinzhorn"}
{"number":6805,"comment_id":"933370251","body":"I can't share my use case just yet as it's not ready for public consumption, but I believe CouchCMS used html comments to annotate documents.\r\n\r\nRegardless of my personal use case, from a user perspective, a Svelte file looks like HTML ‚Äî shouldn't it behave like HTML? HTML comments are a core part of writing HTML, so it's jarring as a user when they are stripped from he output. I agree that having an option to strip them from output is useful, but an alternative syntax for those would be preferred, much like how Sass ‚Äî and [soon Atsro](https://astro.build/play#eyJpbm1lbW9yeTovL21vZGVsL3NyYy9wYWdlcy9QYWdlLmFzdHJvIjoiLS0tXG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZGF0ZS1mbnMnOyBcblxuLy8gV2VsY29tZSB0byBBc3RybyFcbi8vIFdyaXRlIEphdmFTY3JpcHQgJiBUeXBlU2NyaXB0IGhlcmUsIGluIHRoZSBcImNvbXBvbmVudCBzY3JpcHQuXCJcbi8vIFRoaXMgd2lsbCBydW4gZHVyaW5nIHRoZSBidWlsZCwgYnV0IG5ldmVyIGluIHRoZSBmaW5hbCBvdXRwdXQuXG4vLyBVc2UgdGhlc2UgdmFyaWFibGVzIGluIHRoZSBIVE1MIHRlbXBsYXRlIGJlbG93LlxuLy9cbi8vIEZ1bGwgU3ludGF4OlxuLy8gaHR0cHM6Ly9kb2NzLmFzdHJvLmJ1aWxkL2NvcmUtY29uY2VwdHMvYXN0cm8tY29tcG9uZW50cy9cblxuY29uc3QgYnVpbHRBdDogRGF0ZSA9IG5ldyBEYXRlKCk7XG5jb25zdCBidWlsdEF0Rm9ybWF0dGVkID0gZm9ybWF0KGJ1aWx0QXQsICdNTU1NIGRkLCB5eXl5IC0tIEg6bW06c3MuU1NTJyk7XG4tLS1cbjxodG1sIGxhbmc9XCJlblwiPlxuICA8aGVhZD5cblxuICA8L2hlYWQ+XG4gIDxib2R5PlxuICAgIDxoZWFkZXI+XG4gICAgICA8IS0tIENvbW1lbnQgaGVyZS0tPlxuICAgICAgPGgxPkNvbW1lbnRzIGluY2x1ZGVkPC9oMT5cbiAgICA8L2hlYWRlcj5cbiAgPC9ib2R5PlxuPC9odG1sPlxuIn0=) ‚Äî use `//` for striped comments.","updated_at":"2021-10-04T10:57:52Z","created_at":"2021-10-04T10:57:52Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"937101036","body":"Just realised that the `{@html '<!-- comment -->'}` syntax also outputs `<!-- HTML_TAG_START -->` and `<!-- HTML_TAG_END -->` comments. Is there any way to disable this, as it can litter the DOM.","updated_at":"2021-10-06T20:46:20Z","created_at":"2021-10-06T20:45:38Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"937175633","body":"That was introduced in #4444 so unless you have a suggested way to handle hydration of `{@html}` expressions without that, no.","updated_at":"2021-10-06T21:30:16Z","created_at":"2021-10-06T21:30:16Z","creator_user_login":"Conduitry"}
{"number":6805,"comment_id":"937286987","body":"@Conduitry That makes sense. I would opt for making comments a first class citizen that get parsed, that way hydration could work as expected due to a comment nodes existence.","updated_at":"2021-10-06T22:42:07Z","created_at":"2021-10-06T22:42:07Z","creator_user_login":"thelucid"}
{"number":6805,"comment_id":"1006229952","body":"> I'm still very curious if you can explain your use-case as I haven't encountered this ever.\r\n\r\nI'm interested in adding HTML comments to Svelte output too. My use case is using SvelteKit to statically generate HTML emails. \r\n\r\n> Not sure what \"output HTML\" you are referring to.\r\n\r\nIn my case, the output HTML would be the HTML files added to the build folder with [`@sveltejs/adapter-static`](https://github.com/sveltejs/kit/tree/master/packages/adapter-static).\r\n\r\nSince some styles are Outlook-specific, it's necessary to nest those styles in comments like this:\r\n\r\n```html\r\n<!--[if mso]>\r\n  <style>\r\n    /* Outlook styles go here */\r\n  </style>\r\n<![endif]-->\r\n```\r\n\r\n(see [GitHub's email design system](https://stackoverflow.design/email/base/mso/))\r\n\r\nThe `{@html ''}` workaround works for me, in a component like this. Thank you!\r\n\r\n```svelte\r\n{@html '<!--[if mso]>'}\r\n<slot />\r\n{@html '<![endif]-->'}\r\n```","updated_at":"2022-01-06T02:16:31Z","created_at":"2022-01-06T02:16:31Z","creator_user_login":"aqandrew"}
{"number":6805,"comment_id":"1024911328","body":"I'd like to add that it can be helpful during development to keep comments when using CSS utility libraries (Tailwind, for example), the downside of such libraries is that when looking at complex markup there are no identifying class names.  It would be nice to retain comments during development but stripped for production. ","updated_at":"2022-01-29T13:24:44Z","created_at":"2022-01-29T13:24:44Z","creator_user_login":"ghost"}
{"number":6805,"comment_id":"1052047961","body":"We are also having a tooling integration (work-in-progress) that relies on comments during development (not production). Would be great to preserve comments like in Vue.js (where I came from, Vue.js preserves comments by default during development and not in production). \r\n\r\nIf comments are not preserved, I was wondering what `preserveComments: true` is for? Does it have a different purpose? Can anyone clarify please. ","updated_at":"2022-02-26T11:35:32Z","created_at":"2022-02-26T11:33:23Z","creator_user_login":"TechAkayy"}
{"number":6777,"comment_id":"927685982","body":"Like #6750, this would probably be a breaking change for anyone creating custom derived stores, because the Typescript definition of the callback passed to `derived` would end up changing. But existing code that actually uses derived stores would not be broken, because you can always accept fewer arguments in a callback than are actually passed to it (c.f. Array.map and so on).","updated_at":"2021-09-27T09:21:45Z","created_at":"2021-09-27T09:21:45Z","creator_user_login":"rmunn"}
{"number":6777,"comment_id":"927779600","body":"The answer is probably performance/gc (is it though?), but why not pass an array like `[true, false]` and check `changed[0]`? This also aligns with the array indices of `[$price, $discount]`, which could become useful if you dynamically create derived stores. To me using bit masks in JavaScript is incredibly rare and relying on falsyness also feels dirty to me (I remember when people, who presumably never heard of code quality, used to do `~a.indexOf(b)` and thought it was a good idea). In addition your example neatly conceals that the third check would be `changed & 4 ` and not `changed & 3`. So the ux of this API does not feel Svelte at all.","updated_at":"2021-09-27T11:23:00Z","created_at":"2021-09-27T11:23:00Z","creator_user_login":"Prinzhorn"}
{"number":6777,"comment_id":"928893631","body":"I thought of this while working on implementing #6750, when I saw that the code tracks a `pending` bitmap. The advantage of a bitmap over a boolean array is indeed size, but you're right that a boolean array would be more user-friendly. And the GC issues would be nullified if the array was re-used the way the `values` array gets re-used. It would need to be documented ‚Äî \"Treat the boolean array as read-only, and if you modify it, you have only yourself to blame if your store acts funny\" ‚Äî but it would work just fine to pass `[false, false, true]` instead of a bitmap equal to 4.\r\n\r\nThe only downside to a boolean array, then, is a performance cost that I think would be slight, but would be worth measuring. Every derived store would create an extra array of N booleans, where N is the number of stores the derived store is subscribing to. Would that extra array per store, and the work done to keep it up-to-date, be worth the performance cost? The performance cost of one extra int per store would be minimal, but I don't know the performance cost of an extra array. I suspect the better DX will make it worth it, though; I'll think about it.\r\n\r\n> In addition your example neatly conceals that the third check would be `changed & 4 ` and not `changed & 3`.\r\n\r\nI actually had a third store in my original example and then realized that the example was getting bigger than it needed to be. Missed the fact that it would hide the bitmap-ness of the check needed.","updated_at":"2021-09-28T06:26:56Z","created_at":"2021-09-28T06:26:56Z","creator_user_login":"rmunn"}
{"number":6777,"comment_id":"929007694","body":"Please take anything I say with a grain of salt, I've never needed a derived store and it's my first time looking at the store source.\r\n\r\n> when I saw that the code tracks a `pending` bitmap\r\n\r\nI figured that and on first sight it does seem like a viable idea. I don't know why the original code went with a bitmap, I assume nobody tried to use a derived store with more than 32 stores yet? Or maybe people do and don't know they run into undefined behavior? Or am I missing something and it doesn't break with 33 stores? And it's entirely plausible that there are situations (like in a game or simulation) where you automatically create derived stores of dynamic length > 32.\r\n\r\n> \"you have only yourself to blame if your store acts funny\"\r\n\r\nDoes it act funny? I thought the store would use this array write-only? Reset it using `changed.fill(false)` and then update it `changed[i] = true`. So if the user touches it, all that happens is that they might get their touched values back in the next call. Can this even happen, isn't the entire derived store code synchronous, so between `fill()` and `[i] = true` no user gets the chance to touch the thing? Also that's already the case right now with the `values` array, it _could_ be modified by a user, right?\r\n\r\n> The advantage of a bitmap over a boolean array is indeed size\r\n> The only downside to a boolean array, then, is a performance cost that I think would be slight, but would be worth measuring\r\n\r\nI'd be surprised if the difference can be measured, but I'm curious if you really want to set up a benchmark. But looking at the current implementation there is also a `values` array even if `single === true`, so I don't think these micro optimizations matter.\r\n\r\n> Every derived store would create an extra array of N booleans, where N is the number of stores the derived store is subscribing to\r\n\r\nOnly track it if `fn.length === 3`? https://github.com/sveltejs/svelte/blob/e45d1801621c587a08cb3f0961a9109c22e074ba/src/runtime/store/index.ts#L164","updated_at":"2021-09-28T09:14:20Z","created_at":"2021-09-28T09:14:20Z","creator_user_login":"Prinzhorn"}
{"number":6777,"comment_id":"929139052","body":"The bit that would break with more than 32 stores is the `pending` bitmap, which is only used to ensure that the \"diamond dependency\" problem doesn't cause undesired updates. It's hard to explain without an example, and the best example is probably the unit test in test/store/index.ts:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/e45d1801621c587a08cb3f0961a9109c22e074ba/test/store/index.ts#L234-L254\r\n\r\nSee how the `lastname` store updating causes a *single* update in the `fullname` store, where both `firstname` and `lastname` are updated at once? That's the purpose of the `pending` bitmap. Try removing the code that sets bits in the `pending` bitmap and you'll see that that test will fail. That's probably the best way to understand what that bitmap is doing.\r\n\r\nSo if derived store C were deriving from 33 or more stores, including store A in the 33rd or later position, and it *also* happens to be deriving from store B in the 33rd or later position, and store B derives from store A, then there would be a glitch where store A updating would cause store C to see store A's new value with store B's old value once, then a second update with store A's new value with store B's new value.\r\n\r\nWas that paragraph as clear as mud? :-) Then you'll see why nobody has run into this issue yet, because it's something that could almost never happen. Though perhaps it would be best to document this situation and say \"There's a practical limit of 32 stores\" or something.","updated_at":"2021-09-28T12:16:19Z","created_at":"2021-09-28T12:16:19Z","creator_user_login":"rmunn"}
{"number":6777,"comment_id":"929286482","body":"@rmunn thanks for the explanation! I also dug into the store code a bit. I was a little confused about the second argument to `subscribe`, which is not documented anywhere. But now the whole thing makes sense with invalidating the store to make derived stores work.\r\n\r\nAlso TIL the iteration order of `Set` is stable and matches insertion order.","updated_at":"2021-09-28T14:29:59Z","created_at":"2021-09-28T14:29:59Z","creator_user_login":"Prinzhorn"}
{"number":6777,"comment_id":"929784788","body":"Just realized that with a Boolean array, you can use array dereferencing just as you can with store values. So instead of writing `if (changed[0])` you can write `if (priceChanged)`. That's way better DX, and is a big enough win over bitmaps that my hesitation over Boolean arrays is just **gone**. I've updated the feature request to ask for Boolean arrays rather than bitmaps.","updated_at":"2021-09-29T03:00:20Z","created_at":"2021-09-29T03:00:20Z","creator_user_login":"rmunn"}
{"number":6777,"comment_id":"1122310651","body":"> The bit that would break with more than 32 stores is the `pending` bitmap, which is only used to ensure that the \"diamond dependency\" problem doesn't cause undesired updates. It's hard to explain without an example, and the best example is probably the unit test in test/store/index.ts:\r\n> \r\n> https://github.com/sveltejs/svelte/blob/e45d1801621c587a08cb3f0961a9109c22e074ba/test/store/index.ts#L234-L254\r\n> \r\n\r\nFYI, here is a diagram of a diamond dependency:\r\n\r\n* As soon as `a` changes, `b` and `c` are recalculated.\r\n* As soon as `b` or `c` changes, `d` is recalculated.\r\n\r\n```mermaid\r\ngraph TD\r\n    a --> b --> d\r\n    a --> c --> d\r\n```\r\n\r\nTracking \"pending\" and the undocumented second argument to subscribe is for ensuring `d` doesn't get calculated twice here.\r\n\r\nWorth noting that it doesn't handle what I call the \"diamond+ dependency\" problem:\r\n\r\n```mermaid\r\ngraph TD\r\n    a       --> d\r\n    a --> b --> d\r\n    a --> c --> d\r\n```\r\n\r\nin this case, when `a` changes, svelte stores will recalculate `d` more than necessary. I should probably raise a bug about this...\r\n\r\n_Pulled from the documentation of one of my store libraries. See: [@crikey/stores-base/README.md](https://github.com/WHenderson/stores-mono/blob/develop/packages/stores-base/README.md#premature-evaluation) for more dependency examples_\r\n","updated_at":"2022-05-10T12:13:53Z","created_at":"2022-05-10T12:13:53Z","creator_user_login":"WHenderson"}
{"number":6777,"comment_id":"1122325090","body":"I can see utility with this proposal.\r\n\r\nI would suggest some discussion around the callback signature though:\r\n\r\nWith the proposed signature `(values, set, update, changed)`, users are (almost<sup>1</sup>) forced to declare their callbacks as asynchronous. What if a user want's a simple synchronous derived value (one that returns the calculated result directly) but also wants to interrogate the _changed_ argument?\r\n\r\nFurthermore, I do wonder if this belongs in the basic implementation of `derived`. It's use cases are niche enough that it may be better suited to a separate library?\r\n\r\n_<sup>1</sup> a user _could_ access the provided argument via the arguments array. but.. yuck_\r\n","updated_at":"2022-05-10T12:27:35Z","created_at":"2022-05-10T12:27:35Z","creator_user_login":"WHenderson"}
{"number":6777,"comment_id":"1566690121","body":"PR #6786 implementing this change has been replaced with PR #8656.","updated_at":"2023-05-29T07:32:28Z","created_at":"2023-05-29T07:32:28Z","creator_user_login":"rmunn"}
{"number":6777,"comment_id":"1567595644","body":"> With the proposed signature `(values, set, update, changed)`, users are (almost1) forced to declare their callbacks as asynchronous. What if a user want's a simple synchronous derived value (one that returns the calculated result directly) but also wants to interrogate the _changed_ argument?\r\n\r\nI agree that discussion about the callback signature is useful. However, there's nothing wrong with not using a parameter, and calling it `_` as a standard convention to signal that this parameter is unused. In Javascript you can't have two parameters named `_`, but you could write something like this:\r\n\r\n```javascript\r\nvar d = derived([parent1, parent2], (values, _s, _u, changed) => \"some derived value\");\r\n```\r\n\r\nThis signals that you're not using the `set` or `update` parameters, while remaining quite readable. It's not quite as good as being able to write `(values, _, _, changed)` the way you can in some languages, but `(values, _s, _u, changed)` is still quite readable and signals the coder's intent nicely.","updated_at":"2023-05-29T23:33:10Z","created_at":"2023-05-29T23:33:10Z","creator_user_login":"rmunn"}
{"number":7129,"comment_id":"1011833668","body":"And in the meantime, what would be best/simplest/most concise way to work around this (get my REPL to work as intended)? I can't just _not_ export that prop. And simply throwing a `<svelte:options immutable={true}/>` at the top didn't seem to fix my particular issue. Thanks. I'm guessing somebody will say \"stores\". ","updated_at":"2022-01-13T07:09:28Z","created_at":"2022-01-13T06:24:37Z","creator_user_login":"TylerRick"}
{"number":7129,"comment_id":"1011946696","body":"[Here](https://svelte.dev/repl/67e081d62f044790a4da6acd935cf534?version=3.46.1) is _a_ workaround using stores, but I don't love it because it destroys the beautiful one-line simplicity that is supposed to be reactive statements. Does anyone have a cleaner solution?\r\n\r\nInstead of this 1-liner:\r\n```svelte\r\n  $: items = fetchItems(filters)\r\n```\r\n\r\n, we now have this boilerplate-y eyesore:\r\n```svelte\r\n  const filtersStore = storeChanges(deepclone(filters))\r\n  $: filtersStore.set(filters)\r\n  const unsubscribe = filtersStore.subscribe((filters) => {\r\n    console.log('re-fetched; filters changed:', filters)\r\n    items = fetchItems(filters)\r\n  })\r\n  onDestroy(unsubscribe);\t\r\n```\r\n\r\nIt seems like we ought to at least be able to make the _main_ statement a one-liner still using auto-subscribe:\r\n```svelte\r\n  $: items = fetchItems($filtersStore)\r\n```\r\nbut for reasons I don't understand, this exhibits the original bug, and gets re-run even when `$filterStore` _hasn't_ changed its value. Why???\r\n","updated_at":"2022-01-13T17:21:23Z","created_at":"2022-01-13T09:21:07Z","creator_user_login":"TylerRick"}
{"number":7129,"comment_id":"1012084166","body":"> And in the meantime, what would be best/simplest/most concise way to work around this (get my REPL to work as intended)? I can't just _not_ export that prop. And simply throwing a `<svelte:options immutable={true}/>` at the top didn't seem to fix my particular issue. Thanks. I'm guessing somebody will say \"stores\".\r\n\r\nThe immutable option isn't working as you intended, because you are mutating the array instead of creating a new one. Changing line 26 create a new array makes it work correctly.\r\n```javascript\r\nitems = [...items]\r\n```\r\n\r\nStrangely, that change also makes everything work correctly, even when immutable={false}.\r\n\r\nBack to the main issue. I think that it would be good if some of the svelte reactivity which is designed to handle more complex cases was made not the default behaviour, until it is made to work in a more predictable way (I think it is great that work is and has been done to handle more advanced types of reactive behaviour, but it isn't quite there yet and so I think it causes more problems than it solves for now)","updated_at":"2022-01-13T12:17:19Z","created_at":"2022-01-13T12:17:19Z","creator_user_login":"robertadamsonsmith"}
{"number":7129,"comment_id":"1012386734","body":"> The immutable option isn't working as you intended, because you are mutating the array instead of creating a new one. Changing line 26 create a new array makes it work correctly.\r\n> \r\n> ```js\r\n> items = [...items]\r\n> ```\r\n> \r\n> Strangely, that change also makes everything work correctly, even when immutable={false}.\r\n\r\nAh, thanks for pointing that out! I guess I don't understand the `immutable` option very well. (It would help if the [docs](https://svelte.dev/docs#template-syntax-svelte-options) explained some of these things. :smile:)\r\n\r\nI thought the [rule](https://svelte.dev/docs#component-format-script-2-assignments-are-reactive) was that `items = items` (_any_ assignment) was _always_ supposed to be enough to trigger reactive statements that use the variable as a dependency. So I sure wouldn't expect this to be treated any differently:\r\n\r\n> items = [...items]\r\n\r\nWhat about that makes it work? Is it specifically looking for assignments that would _change_ the LHS ‚Äî so any assignment with a RHS _other_ than the variable name by itself? If so, that seems wrong and breaks the [expectations](https://svelte.dev/docs#component-format-script-2-assignments-are-reactive) set by the docs.\r\n\r\n### this workaround with immutable={true}\r\n\r\n[REPL](https://svelte.dev/repl/18da31e5c91146ac806cbc7d6e49f230?version=3.46.1)\r\n\r\nWhile that change did fix the \"reactive statement called when it shouldn't be\", it also unfortunately made it so it _didn't_ get called when it should be (didn't re-fetch when `filters` was changed). (Press Sort, then change \"Sort by\". It should reset to \"B, A\")\r\n\r\n\r\n### this workaround with immutable={false}\r\n\r\n[REPL](https://svelte.dev/repl/5b81671ea29b43ff9e64652f3e72a725?version=3.46.1)\r\n\r\nThis variation works perfectly! Which, I agree, is strange, because I don't understand why.\r\n","updated_at":"2022-01-13T18:13:09Z","created_at":"2022-01-13T18:13:09Z","creator_user_login":"TylerRick"}
{"number":7129,"comment_id":"1012437099","body":"For some reason, Svelte thinks that `filters` get changed in the `handleSort` though it even isn't used in the function:\r\n```js\r\n// original\r\nfunction handleSort() {\r\n  items.sort((a,b) => -1)\r\n  console.log('items is now sorted:', items.map(el => el.name))\r\n  items = items\r\n}\r\n// compiled\r\nfunction handleSort() {\r\n  items.sort((a, b) => -1);\r\n  console.log('items is now sorted:', items.map(el => el.name));\r\n  ($$invalidate(0, items), $$invalidate(2, filters));\r\n}\r\n```\r\nAnd thus it triggers re-fetching.\r\n\r\nIt's definitely a bug.","updated_at":"2022-01-13T19:22:42Z","created_at":"2022-01-13T19:22:42Z","creator_user_login":"7nik"}
{"number":7129,"comment_id":"1012494532","body":"> Ah, thanks for pointing that out! I guess I don't understand the `immutable` option very well. (It would help if the [docs](https://svelte.dev/docs#template-syntax-svelte-options) explained some of these things. üòÑ)\r\n> \r\n> I thought the [rule](https://svelte.dev/docs#component-format-script-2-assignments-are-reactive) was that `items = items` (_any_ assignment) was _always_ supposed to be enough to trigger reactive statements that use the variable as a dependency. So I sure wouldn't expect this to be treated any differently:\r\n> \r\n> > items = [...items]\r\n> \r\n> What about that makes it work? Is it specifically looking for assignments that would _change_ the LHS ‚Äî so any assignment with a RHS _other_ than the variable name by itself? If so, that seems wrong and breaks the [expectations](https://svelte.dev/docs#component-format-script-2-assignments-are-reactive) set by the docs.\r\n\r\nImmutability, means that you are stating that no object (or array) will be altered. If you need part of an object/array to be altered, you will instead create a new object/array. The compiled code then only needs to check if an object's identity has changed to know if it has been altered (rather than having to check the object/arrays contents). This also means that if you do alter (mutate) part of an object or array, the code will act as though nothing has altered.\r\n \r\n> ### this workaround with immutable={true}\r\n> [REPL](https://svelte.dev/repl/18da31e5c91146ac806cbc7d6e49f230?version=3.46.1)\r\n> \r\n> While that change did fix the \"reactive statement called when it shouldn't be\", it also unfortunately made it so it _didn't_ get called when it should be (didn't re-fetch when `filters` was changed). (Press Sort, then change \"Sort by\". It should reset to \"B, A\")\r\n\r\nThis is because you are mutating the 'filters' object (via the bind:value={filters.sort} ), while passing the 'filters' object to your List component. Because the identity of the 'filters' object doesn't change, the List assumes that nothing has changed and no update is required.\r\n\r\n> ### this workaround with immutable={false}\r\n> [REPL](https://svelte.dev/repl/5b81671ea29b43ff9e64652f3e72a725?version=3.46.1)\r\n> \r\n> This variation works perfectly! Which, I agree, is strange, because I don't understand why.\r\n\r\nI think that is made more confusing by the misunderstanding over the immutable option. There _is_ a strange behaviour here over how reactivity is being handled, but it doesn't really have anything to do with the immutable option (I think!)","updated_at":"2022-01-13T20:33:49Z","created_at":"2022-01-13T20:33:49Z","creator_user_login":"robertadamsonsmith"}
{"number":7129,"comment_id":"1012533937","body":"I've simplified the example: https://svelte.dev/repl/c1855cfddccf42b288ae550a06f6eb81?version=3.46.1\r\nClicking the second button causes execution of the reactive block though it must not. ","updated_at":"2022-01-13T21:35:07Z","created_at":"2022-01-13T21:35:07Z","creator_user_login":"7nik"}
{"number":7129,"comment_id":"1012614879","body":"Obviously deleting line 14 makes it work fine, but changing it to this also works:\r\n```\r\nlet foo = arr2;\r\narr2 = foo;\r\n```\r\n\r\nAlternatively, you can fix it by changing:\r\n```\r\n$: {\r\n\tarr2 = arr1;\r\n\tconsole.log(\"arr1 assigned to arr2\");\r\n}\r\n```\r\nto:\r\n```\r\nfunction set_arr2(v){arr2 = v}\r\n$: {\r\n\tset_arr2(arr1);\r\n\tconsole.log(\"arr1 assigned to arr2\");\r\n}\r\n```\r\n\r\nPoking around in the compiler, I think that this is to do with how 'reactive_declarations' are determined and then used in '/compiler/compile/Component.ts' and '/compiler/compile/render_dom/index.ts' respectively. There is quite a lot of stuff going on in those files, so it might be worth putting in a load of console logging there to see exactly what is happening. I _think_ that \"$:{arr2=arr1}\" means that arr2 is dependent on arr1, and that \"arr2 = arr2\" is triggering some reactive logic that can cause a invalidated variable to have its dependencies invalidated in turn, the idea being that since we know that \"arr2=arr1\", when we invalidate arr2 we must really mean that something it is based on has changed, and so if we invalidate those dependencies instead, then arr2 will be recalculated correctly. I am far from certain that I understand what is going on correctly though, so I could well have this all back to front.\r\n\r\nHopefully this behaviour is clear to somebody else, and if not then I'll investigate further.","updated_at":"2022-01-13T23:34:03Z","created_at":"2022-01-13T23:34:03Z","creator_user_login":"robertadamsonsmith"}
{"number":7129,"comment_id":"1012629675","body":"Ok, this is strange. Commenting out line 10, so that reset1 does nothing, means that reset2 then works as expected. Even if the \"Reset arr1\" button is deleted, it seems that the mere existence of a function that could cause arr1 to be invalidated causes the unexpected behaviour. Note that this is only the case if arr1 and arr2 are arrays of objects - simple variables don't seem to be effected by this.","updated_at":"2022-01-14T00:07:18Z","created_at":"2022-01-14T00:07:18Z","creator_user_login":"robertadamsonsmith"}
{"number":7129,"comment_id":"1012845828","body":"Replacing a variable in the reactive block with its setter or getter fixes the problem.\r\nRemoving `reset1()` also fixes.\r\nReplacing self-assignment in the `reset2()` with almost anything also fixes. E.g. `arr2 = arr2 || arr2`,  `arr2 = (arr2, arr2)`, `arr2 = getArr2()`;\r\nRemoving `arr2` from outputting to the page also fixes it. \r\n\r\nFor primitive types, the problem remains but here Svelte checks that the value indeed was changed and if it didn't, Svelte doesn't execute reactive blocks and other stuff.","updated_at":"2022-01-14T07:33:22Z","created_at":"2022-01-14T07:33:22Z","creator_user_login":"7nik"}
{"number":7129,"comment_id":"1013980433","body":"Duplicate of https://github.com/sveltejs/svelte/issues/4933","updated_at":"2022-01-16T23:45:42Z","created_at":"2022-01-16T23:45:42Z","creator_user_login":"7nik"}
{"number":7253,"comment_id":"1037015367","body":"I think it is the user's responsibility to decide if sanitization is necessary because Svelte cannot decide if it is unintentional code for XSS attackable code.\r\n\r\nThe tutorial already mentioned XSS, and considering realistic use cases, `{@html}` is useful,\r\nso I think the current situation is ok for me.\r\n\r\n> Svelte doesn't perform any sanitization of the expression inside {@html ...} before it gets inserted into the DOM. In other words, if you use this feature it's critical that you manually escape HTML that comes from sources you don't trust, otherwise you risk exposing your users to XSS attacks.\r\n\r\nI think below 2 implementation are almost same so I don't think `{@html:sanitize} needed`.\r\n```sv\r\n<div>{@html:sanitize content}</div>\r\n<div>{content}</div>\r\n```\r\n\r\nSorry for dissenting opinion. This is just my personal opinion.","updated_at":"2022-02-12T06:23:49Z","created_at":"2022-02-12T06:23:49Z","creator_user_login":"baseballyama"}
{"number":7253,"comment_id":"1037016113","body":"Thank you for being honest. What about having it as one of the first pages in the tutorial? Don't you think it should move more to the end?","updated_at":"2022-02-12T06:26:41Z","created_at":"2022-02-12T06:26:41Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1037016300","body":"see #7254 ","updated_at":"2022-02-12T06:27:22Z","created_at":"2022-02-12T06:27:22Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1037017285","body":"> I think below 2 implementation are almost same so I don't think `{@html:sanitize} needed`.\r\n\r\nYeah I don't like this solution either. \r\n\r\nIt could be possible to sanitize by removing the `<script>` tags only, though. But it would be complex and probably dangerous too.","updated_at":"2022-02-12T06:31:46Z","created_at":"2022-02-12T06:31:09Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1037021047","body":"I agree with you throughout about thinking process.\r\n\r\nThis is warning message of Vue.js.\r\nThis warning is more explicit than Svelte's tutorial.\r\nShould we be more explicit about the dangers?\r\n\r\n<img width=\"705\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19153718/153700082-52b903bd-660f-4746-8710-900a4ccac314.png\">\r\n\r\nAnd regarding moving `{@html}` to the end of the tutorial.\r\nI think important point is that user can be able to recognize the risks when they learn about `{@html}`.\r\n(Tutorial order always should be frequency of use and understandability.)\r\nMoving it to the end of the tutorial is just hiding this problem.\r\n\r\n","updated_at":"2022-02-12T06:44:03Z","created_at":"2022-02-12T06:43:01Z","creator_user_login":"baseballyama"}
{"number":7253,"comment_id":"1037023545","body":"> (Tutorial order always should be frequency of use and understandability.)\r\n\r\nI don't think `@html` tags are particularly important to know first. Certainly not before reactive declarations and statements.","updated_at":"2022-02-12T06:50:49Z","created_at":"2022-02-12T06:50:49Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1037024586","body":"Indeed.\r\nI need to wait for more opinions from maintainers and users.","updated_at":"2022-02-12T06:54:59Z","created_at":"2022-02-12T06:54:06Z","creator_user_login":"baseballyama"}
{"number":7253,"comment_id":"1037108339","body":"I don't think we should move the html tutorial to last. As @baseballyama pointed out, it's a common use case so it would make sense to present it earlier. I think the warning shown in the tutorial is enough, and I don't get the same sentiment of it encouraging XSS attacks. ","updated_at":"2022-02-12T10:16:35Z","created_at":"2022-02-12T10:16:35Z","creator_user_login":"bluwy"}
{"number":7253,"comment_id":"1039642182","body":"One more thing to consider is that there is nothing \"encouraging\" the use of `@html`, because you write HTML directly as part of the component most of the time and can just insert whatever values you need using the regular, safe and concise `{ ... }` syntax. You are generally *not* building HTML strings in JS like in the olden days and then inserting that, there is no reason to.","updated_at":"2022-02-14T22:36:30Z","created_at":"2022-02-14T22:36:30Z","creator_user_login":"brunnerh"}
{"number":7253,"comment_id":"1048050431","body":"> it's a common use case so it would make sense to present it earlier\r\n\r\nWhat do you mean by \"a common use case\". I consider it as bad practice at least, dangerous at most.\r\n","updated_at":"2022-02-22T17:41:48Z","created_at":"2022-02-22T17:41:48Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1048058758","body":"ah i meant as more of \"a common question\". Beginners who learn a new framework or new to web dev in general would probably ask the question of \"how do i render a string of html?\". It's dangerous yes, but we've warned the user in the tutorial.","updated_at":"2022-02-22T17:51:32Z","created_at":"2022-02-22T17:51:32Z","creator_user_login":"bluwy"}
{"number":7253,"comment_id":"1048081712","body":"> I don't get the same sentiment of it encouraging XSS attacks.\r\n\r\nIt's not about encouraging XSS attacks, it's about preventing them. Nobody would ever want to provide XSS attacks.\r\n\r\nI think of it this way: \r\n1) Vue doesn't have it in the tutorial at all. You have to look at the docs specifically to find the information.\r\n2) React hides it behind `__dangerousInnerHTML`, and it is of course not described in the tutorial. Again you have to look at the docs.\r\n3) The only mention I could find for angular is on the [security page](https://angular.io/guide/security). Where they say: \r\n\r\n> For the HTML to be interpreted, bind it to an HTML property such as innerHTML. But binding a value that an attacker might control into innerHTML normally causes an XSS vulnerability.\r\n\r\nFor this reason, _every single `[innerHtml]` tag gets sanitized to remove potentially dangerous content_. The _only_ way to truly set innerHtml is to use `ElementRef` and set the innerHtml property.\r\n\r\n4) Django: The funny thing about searching online for \"django innerHtml\" is that the first official django page that appears is the [release notes for django 1.8.14](https://django.readthedocs.io/en/stable/releases/1.8.14.html).\r\n\r\n5) Elm [completely removed](https://github.com/elm/html/issues/172) the innerHtml property because of xss attacks.\r\n\r\nThese are just a few examples, but I believe that setting `innerHTML` should be avoided whenever possible. And this starts by not teaching new users its existence right at the beginning of the tutorial.\r\n\r\n","updated_at":"2022-02-22T18:19:10Z","created_at":"2022-02-22T18:19:10Z","creator_user_login":"ecstrema"}
{"number":7253,"comment_id":"1048097797","body":"> I don't think we should move the html tutorial to last. As @baseballyama pointed out, it's a common use case so it would make sense to present it earlier.\r\n\r\nLet's ignore if it's actually a common use case or not, this is debatable. Let's ask: is it really something that is unique to Svelte and needs a tutorial at all? Svelte has so many amazing concepts and things that people need to understand (reactivity, binding, stores, actions). Using `@html` is almost trivial and not really something that is super Svelte specific. It's also something that someone can easily find via Google or the docs once their project has that requirement. It's really simple to grasp and you \"gotcha\" in three seconds. Other concepts on the other hand are way more important to create a successful Svelte project than the existence of `@html`.\r\n\r\n> but we've warned the user in the tutorial.\r\n\r\nAssuming people actually read these things. I personally skim over texts at best, in the given case I'd just copy the code. In my case I know what I'm doing, but someone who doesn't just potentially added a security vulnerability.\r\n\r\nI agree with @Marr11317 that the current situation can be improved. I wouldn't go as far as adding sanitation into Svelte itself, since this is an entire project on its own and you don't always need or want sanitation or you need control over its specifics. But for example the tutorial and docs could include https://github.com/cure53/DOMPurify/ with a comment inside the code.\r\n\r\n```svelte\r\n<script>\r\n    import DOMPurify from 'dompurify';\r\n\r\n    let string = `this string contains some <strong>HTML!!!</strong>`;\r\n</script>\r\n\r\n<!-- Make sure to never use @html with untrusted input. If you have to, e.g. if you render user provided Markdown, make sure to sanitize the HTML for example using the DOMPurify library -->\r\n<p>{@html DOMPurify.sanitize(string)}</p>\r\n```\r\n\r\nI'd also be +1 on `@dangerousInnerHTML`. Security is not one dimensional and \"we mentioned it in the docs/tutorials\" is just one of many things.\r\n\r\nI'm -1 on removing `@html`. You could do `bind:this` + `innerHTML` but using raw DOM should only be an escape hatch and we lose control, e.g. by educating about the dangers of `@html`.\r\n\r\nI don't really care about the position of it in the tutorial. Other than markdown rendering I've never needed `@html` and I think many projects never need it at all.","updated_at":"2022-02-22T18:44:38Z","created_at":"2022-02-22T18:38:20Z","creator_user_login":"Prinzhorn"}
{"number":7253,"comment_id":"1541168038","body":"Heads up that down the road we'll have native [Sanitizer API](https://developer.mozilla.org/docs/Web/API/HTML_Sanitizer_API) to handle these kinds of things.","updated_at":"2023-05-10T01:43:04Z","created_at":"2023-05-10T01:43:04Z","creator_user_login":"thdoan"}
{"number":6360,"comment_id":"847325291","body":"How much faster is it implementing vitual scrolling with this technique ? If it is significantly faster then this might be worth pursuing IMO. ","updated_at":"2021-05-24T20:50:03Z","created_at":"2021-05-24T20:50:03Z","creator_user_login":"johnoscott"}
{"number":6360,"comment_id":"847434584","body":"@johnoscott Definitely a noticeable difference. I've found this effect in pretty much every virtual list I've seen, but never once in VSCode.","updated_at":"2021-05-25T00:06:29Z","created_at":"2021-05-25T00:06:29Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"850311059","body":"> I imagine the issue here is that whenever a new item becomes visible, all visible items are re-rendered.\r\n\r\nThat depends entirely on the implementation. I've been able to create incredibly smooth virtual scrolling for fixed height items. It's definitely possible with Svelte. Could you share an absolute minimal REPL?\r\n\r\n> It works by appending new elements to the view without being concerned about what order they're in, and positioning them using `position: absolute`:\r\n\r\nFrom the screenshot I don't think that description is accurate. The order very much matters. I think it never appends new elements. It intelligently re-uses items and put them back at the top/bottom when they leave the viewport. That's absolutely possible with Svelte and just a matter of intelligently shifting your array slice. If you look at the value of `top` it's sequential (increments of 18) but it simply wraps around.","updated_at":"2021-05-28T10:28:55Z","created_at":"2021-05-28T10:11:35Z","creator_user_login":"Prinzhorn"}
{"number":6360,"comment_id":"850416919","body":"> That depends entirely on the implementation. I've been able to create incredibly smooth virtual scrolling for fixed height items. It's definitely possible with Svelte. Could you share an absolute minimal REPL?\r\n\r\n@Prinzhorn Haven't seen a single Svelte virtual list without this. Here are the first 3 I found on Google:\r\n- https://svelte.dev/repl/f78ddd84a1a540a9a40512df39ef751b?version=3.38.2\r\n- https://svelte.dev/repl/1c36db7c1e7e4ef2bfb04874321412e5?version=3.38.2\r\n- https://svelte.dev/repl/41505d0e3d824da49cb4ba41af734fa0?version=3.38.2\r\n\r\n> From the screenshot I don't think that description is accurate. The order very much matters. I think it never appends new elements. It intelligently re-uses items and put them back at the top/bottom when they leave the viewport. That's absolutely possible with Svelte and just a matter of intelligently shifting your array slice. If you look at the value of top it's sequential (increments of 18) but it simply wraps around.\r\n\r\nHere's a screenrecording showing that it does add and remove elements when you scroll:\r\n\r\nhttps://user-images.githubusercontent.com/11315492/119990489-abb40c00-bfc8-11eb-81d9-911d2b5642d9.mp4\r\n\r\n","updated_at":"2021-05-28T13:24:37Z","created_at":"2021-05-28T13:24:37Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"850576278","body":"I'll take this back partially. It seems to depend on the browser and I don't know if manually mounting slots changes _anything_ about that. Updating things while scrolling has always had slight delays on certain browsers. The only thing you can do is have enough leeway (additional items at the top and bottom outside the viewport) so that it is not noticeable any longer.\r\n\r\nVSCode (or [monaco](https://github.com/Microsoft/monaco-editor) rather) does not count, because it's entirely virtual (the scrollbar is not native, so they can control the rendering 100%). You can see that the parent of those items is moved as well to achieve the actual scrolling. It's also stepped scrolling, not smooth scrolling. So way less updates.\r\n\r\nHere's a video of my implementation that re-uses items. In Firefox (video) there is slight delay of rendering new items. In Chromium it's super smooth.\r\n\r\nhttps://user-images.githubusercontent.com/679144/120022934-62c27e80-bfed-11eb-8ad8-6796cff26d47.mp4\r\n\r\n","updated_at":"2021-05-28T17:51:57Z","created_at":"2021-05-28T17:51:11Z","creator_user_login":"Prinzhorn"}
{"number":6360,"comment_id":"850660498","body":"@Prinzhorn Ah, I see that VSCode doesn't use normal scrolling, good observation. Adding a buffer does indeed help quite a bit, but only partially (had tried that before opening this issue). For simple lists, using a buffer should be fine.\r\n\r\nHow did you go about implementing that? I've only tested this on Chromium, so if you say it's super smooth then that's promising for sure.","updated_at":"2021-05-28T20:43:32Z","created_at":"2021-05-28T20:43:32Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"868334239","body":"@probablykasper I can't extract this from my code base rn, but the idea is to _not_ key your each so that the elements are re-used. And then you need to shift your array slice over and translate the items that are now in the \"wrong\" place. But I think this still doesn't solve your original issue, because my implementation also lags slightly in Firefox. That's something native scrolling will always suffer from in one way or another (I've done my fair share of scrolling animations). If you need full control then you need virtual scrolling which comes with it's own issues and usually worse UX.","updated_at":"2021-06-25T08:53:06Z","created_at":"2021-06-25T08:52:41Z","creator_user_login":"Prinzhorn"}
{"number":6360,"comment_id":"876818591","body":"@Prinzhorn Been trying to figure it out for a while, but really not sure how it would be done. The way I tried to do it is this:\r\n```svelte\r\n{#each Array(visibleCount) as _, i}\r\n  <slot\r\n    item={getItem(visibleIndexes[i])}\r\n    index={visibleIndexes[i]}\r\n    pos={visibleIndexes[i] * itemHeight} />\r\n{/each}\r\n```\r\n\r\nThen, I for example run `visibleIndexes[i] += visibleCount` when the user scrolls down. The elements themselves are reused, but it still reruns `getItem()` for every visible element. (Made a [REPL](https://svelte.dev/repl/92677f5ec0fa41f8b3edea0a1a8b5809?version=3.38.3), doesn't run for some reason but works fine locally)","updated_at":"2021-07-09T00:04:41Z","created_at":"2021-07-09T00:04:41Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"883979275","body":"@probablykasper I extracted it from my code base\r\n\r\nhttps://github.com/Prinzhorn/better-svelte-virtual-list\r\nhttps://svelte.dev/repl/cbf7977674654d048c4a0fa8fcc1024b?version=3.38.3\r\n\r\n> doesn't run for some reason but works fine locally\r\n\r\nREPL thinks it's an endless loop with 1 million rows","updated_at":"2021-07-21T08:03:45Z","created_at":"2021-07-21T08:03:12Z","creator_user_login":"Prinzhorn"}
{"number":6360,"comment_id":"886264407","body":"@Prinzhorn Thanks for sharing it. I tried it out, but that too seems to rerun `getItem()` for every visible row when you scroll ([modified REPL with logs](https://svelte.dev/repl/a2ed57b257594f4fa52afbd423345219?version=3.38.3)).\r\n\r\nFor now I'm caching the values in an array, that seems like the best that can be done currently","updated_at":"2021-07-25T22:08:57Z","created_at":"2021-07-25T22:08:46Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"886387164","body":"> Thanks for sharing it. I tried it out, but that too seems to rerun `getItem()` for every visible row when you scroll ([modified REPL with logs](https://svelte.dev/repl/a2ed57b257594f4fa52afbd423345219?version=3.38.3)).\r\n\r\nI don't see a problem with that. It's just a property lookup in my case (`item.title`) and Svelte will make a string comparison and then _not_ touch the DOM. We're talking nano seconds. In my application the `title` could actually change, so I want that comparison and caching will introduce bugs.\r\n\r\nEdit: The alternative (with keyed each) is that you get constant `appendChild`/`removeChild` _during_ scrolling, which is not acceptable. Look at it this way: Svelte's \"surgical updates\" _are_ caching. The DOM is sort of the cache and Svelte will only update it if the values change.","updated_at":"2021-07-26T05:31:26Z","created_at":"2021-07-26T05:25:25Z","creator_user_login":"Prinzhorn"}
{"number":6360,"comment_id":"886389585","body":"@Prinzhorn The problem is the extra code/complexity of having to manually implement a cache","updated_at":"2021-07-26T05:38:48Z","created_at":"2021-07-26T05:32:03Z","creator_user_login":"probablykasper"}
{"number":6360,"comment_id":"1273849691","body":"Here's a REPL showing the issue:\r\nhttps://svelte.dev/repl/8c5c02002863418792dcdf2911ea6ba9?version=3.51.0","updated_at":"2022-10-10T21:50:43Z","created_at":"2022-10-10T21:50:43Z","creator_user_login":"probablykasper"}
{"number":6325,"comment_id":"893216425","body":"@YamiOdymel it would be great if you could provide a repl (https://svelte.dev/repl) / github repo that could replicate this issue?","updated_at":"2021-08-05T07:00:33Z","created_at":"2021-08-05T07:00:33Z","creator_user_login":"tanhauhau"}
{"number":6325,"comment_id":"893218106","body":"> @YamiOdymel it would be great if you could provide a repl (https://svelte.dev/repl) / github repo that could replicate this issue?\r\n\r\nI think someone has [replied](https://github.com/sveltejs/svelte/issues/4546#issuecomment-884667564) with a command to reproduce the issue\r\n\r\n> @tanhauhau Sadly, the bug isn't fixed. I think this needs to be reopened.\r\n> \r\n> Simple reproduction: `npm init svelte@next slot-test && cd slot-test && npm i && npm run dev` + open the browser dev-console. You don't need to write a single char of code to trigger it :)","updated_at":"2021-08-05T07:03:17Z","created_at":"2021-08-05T07:03:17Z","creator_user_login":"YamiOdymel"}
{"number":6325,"comment_id":"893260021","body":"@tanhauhau just a new svelte-kit project!","updated_at":"2021-08-05T08:13:40Z","created_at":"2021-08-05T08:13:40Z","creator_user_login":"frederikhors"}
{"number":6325,"comment_id":"893285915","body":"@YamiOdymel @frederikhors yup.\r\n\r\n@YamiOdymel just want to confirm, whether the one you are reporting is the same root cause of the issue from svelte kit\r\n\r\n","updated_at":"2021-08-05T08:53:54Z","created_at":"2021-08-05T08:53:54Z","creator_user_login":"tanhauhau"}
{"number":6325,"comment_id":"898174814","body":"@tanhauhau shared some notes with me. Putting them here for reference\r\n\r\nfor kit issue, it's because of code like this:\r\n```\r\n<script>\r\n  let components = [Layout, Route];\r\n</script>\r\n\r\n<svelte:component this={components[0]} {...(props_0 || {})}>\r\n  {#if components[1]}\r\n    <svelte:component this={components[1]} {...(props_1 || {})}>\r\n      {#if components[2]}\r\n        <svelte:component this={components[2]} {...(props_2 || {})}/>\r\n      {/if}\r\n    </svelte:component>\r\n  {/if}\r\n</svelte:component>\r\n```\r\n\r\nthe Route component receives a default slot of\r\n\r\n```\r\n{#if components[2]}\r\n  <svelte:component this={components[2]} {...(props_2 || {})}/>\r\n{/if}\r\n```\r\n\r\neven if `components[2]` is falsy.\r\nbut `Route` isn't expecting any slot, therefore the warning.\r\n\r\nbecause of how slot is implemented right now, we pass the whole `\"{#if}\"` block into the default `<slot/>`, doesn't care whether the if block condition is true / false.\r\nand the runtime warning checks if something is passed into the slot, even when the \"something\" renders nothing.\r\n\r\nso, if we have a lot of `__layout.svelte` components, the generated code will be as many levels deep, thus when visiting a \"shallow\" route, you'll hit the `\"<Routes> received an unexpected slot \"default\"\"` warning\r\n\r\n2 approaches:\r\n- suppress the warning (there's no such option in svelte yet)\r\n- support passing {#if} into slot, as in able to know that there'll be no content, if the condition is false, therefore do not warn + render slot fallback (https://github.com/sveltejs/svelte/issues/6218)","updated_at":"2021-08-13T04:06:36Z","created_at":"2021-08-13T04:02:45Z","creator_user_login":"benmccann"}
{"number":6325,"comment_id":"898202245","body":"Hey @benmccann! Thank you for the explanation. \r\n\r\nWouldn't the following resolve the issue in kit?\r\n\r\n```svelte\r\n<svelte:component this={components[0]} {...(props_0 || {})}>\r\n  {#if components[1]}\r\n      {#if components[2]}\r\n       <svelte:component this={components[1]} {...(props_1 || {})}>\r\n          <svelte:component this={components[2]} {...(props_2 || {})}/>\r\n       </svelte:component>\r\n      {:else}\r\n       <svelte:component this={components[1]} {...(props_1 || {})} />\r\n      {/if}\r\n  {/if}\r\n</svelte:component>\r\n```\r\n\r\nIf so, then https://github.com/sveltejs/kit/issues/981 can be resolved on its own.","updated_at":"2021-08-13T05:32:10Z","created_at":"2021-08-13T05:32:10Z","creator_user_login":"ebeloded"}
{"number":6325,"comment_id":"898242816","body":"@ebeloded That's causes `component[1]` to unnecessarily remount if only `component[2]` changes, which is unexpected behaviour for end-users and could have side effects for transitions/animations. ","updated_at":"2021-08-13T07:13:50Z","created_at":"2021-08-13T07:13:50Z","creator_user_login":"bluwy"}
{"number":6325,"comment_id":"898396941","body":"@benmccann Approach #2 (passing #if into slot) might also resolve [$$slots with slot forwarding](https://github.com/sveltejs/svelte/issues/6059)","updated_at":"2021-08-13T11:39:47Z","created_at":"2021-08-13T11:39:47Z","creator_user_login":"techniq"}
{"number":6325,"comment_id":"1012066547","body":"For the records, This can also happen if one uses pug for writing the html, and accidentally calls the component like this: `MyComponent (... my attribs ...)`, aka, have a whitespace between the component name and the brackets. Remove the whitespace and the message will disappear.","updated_at":"2022-01-13T11:53:03Z","created_at":"2022-01-13T11:53:03Z","creator_user_login":"nilslindemann"}
{"number":6061,"comment_id":"792015019","body":"This is described here : https://github.com/sveltejs/rfcs/blob/4efcda208abe007e6a786c18fd38377e25707589/text/0000-slot-attribute.md#2-disallow-more-than-1-named-slot-of-the-same-name","updated_at":"2021-03-06T18:41:01Z","created_at":"2021-03-06T18:41:01Z","creator_user_login":"j3rem1e"}
{"number":6061,"comment_id":"792062469","body":"> Slots can be rendered zero or more times, and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.\r\n\r\nSvelte [docs](https://svelte.dev/docs#slot_let) say a slot can be rendered zero or more times. Should naming a slot change that behavior? I'd hope [this example](https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.34.0) is a use-case in favor of allowing multiple named slots.\r\n\r\n","updated_at":"2021-03-06T21:38:16Z","created_at":"2021-03-06T21:38:16Z","creator_user_login":"larryosborn"}
{"number":6061,"comment_id":"792348015","body":"With all the changes on slots I believe the docs are currently a bit outdated. It looks like there are breaking changes in v3.35.\r\n\r\nBut now it's possible to have components inside slots, using `svelte:fragment`. So maybe you can extract whatever logic you already have (with multiple slots) into a component. Examples here:\r\n\r\n- https://github.com/sveltejs/svelte/blob/master/test/runtime/samples/component-svelte-slot/main.svelte\r\n- https://github.com/sveltejs/svelte/blob/master/test/runtime/samples/component-svelte-slot-let-in-slot/main.svelte","updated_at":"2021-03-07T20:36:37Z","created_at":"2021-03-07T20:36:37Z","creator_user_login":"paulovieira"}
{"number":6061,"comment_id":"792952336","body":"Looks like the breaking change was mentioned in [RFC comments](https://github.com/sveltejs/rfcs/pull/18#issuecomment-650571104) about using duplicates. \r\n\r\n>Basically agree with this whole RFC but since some aspects are technically breaking changes we will probably need to just warn loudly for now, and continue with the current behaviour if someone does nest slots or have duplicates or whatever. Unless we choose to use the semver ju-jitsu of calling the changes a bugfix\r\n\r\n","updated_at":"2021-03-08T17:57:38Z","created_at":"2021-03-08T17:57:38Z","creator_user_login":"larryosborn"}
{"number":6061,"comment_id":"798875722","body":"In general the new `<svelte:fragment>` syntax is great and solves so many problems for me, thanks a lot for this improvement!\r\n\r\nHowever, I also have to say I find it less than ideal to push a breaking change in a **minor** version update (violating semver spec) and on top of that not reflecting the change in the docs (the docs don't even mention `<svelte:fragment>` and instead still say slots can be repeated). Only because I ran into this error, googled it and then followed the links here to the (also not so easily discoverable) RFC and RFC comments and read through those threads I was able to understand what the change is and how the new functionality works. (It's not enough to look at just one place because the RFC talks about `<svelte:slot>` while later it became `<svelte:fragment>`, and in the middle there is also some talk about `<svelte:template>`.)\r\n\r\nI by the way disagree with calling this a bugfix because it was documented before (\"Slots can be rendered zero or more times\" with no limitation for default slots). I understand the issue it caused with `let` conflicts, but due to the overall design of this feature there is just no way to fix that without breaking this, so it should have been left \"unfixed\" until the next major version upgrade (because this isn't really a fix in that shooting yourself in the foot will no longer harm your foot, but you are just taking the gun away so you can't shoot anything else either).\r\n\r\nIt would have been OK if the old syntax would still have worked and maybe just emitted a warning - then `<svelte:fragment>` would have been undocumented for the moment but no harm done because nothing broke, but with both disabling the old way in a minor version update _and_ not documenting the new way I think it causes some unnecessary headache for developers.\r\n\r\nMy system for example uses duplicate slots heavily, and it would be a much smoother transition if I could refactor components that use this over time, with having both the old and the new way working at the same time for a while.\r\n\r\nIn my opinion the best thing to do now would be to bring back the old way with a warning and release that as 3.35.1, turning it back to an error only in 4.0.0.","updated_at":"2021-03-14T09:38:32Z","created_at":"2021-03-14T09:28:08Z","creator_user_login":"CherryDT"}
{"number":6061,"comment_id":"866192627","body":"Just ran `npm update` and stumbled on this. I agree with @CherryDT. The change should have been only a warning.\r\n\r\nIn one of our older project we too use the previous duplicated slots behavior heavily and now we have to keep svelte to its last working version because we currently cannot dedicate the time to rewrite all our design system components at once with `<svelte:fragrament>`.","updated_at":"2021-06-22T17:38:44Z","created_at":"2021-06-22T17:38:44Z","creator_user_login":"ganigeorgiev"}
{"number":6061,"comment_id":"997437117","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-19T18:17:33Z","created_at":"2021-12-19T18:17:33Z","creator_user_login":"stale[bot]"}
{"number":6057,"comment_id":"791920963","body":"Duplicate of #5979","updated_at":"2021-03-06T11:41:06Z","created_at":"2021-03-06T11:41:06Z","creator_user_login":"PatrickG"}
{"number":6057,"comment_id":"791933775","body":"@PatrickG I don't think it's a duplicate. #5979 would like to be able to \"feed\" multiple slots from one component. I would only like to be able to move the slot name to the child itself when there is just a single top element. Of course they are related but i also think they need a different approach to be solved.","updated_at":"2021-03-06T12:57:24Z","created_at":"2021-03-06T12:57:24Z","creator_user_login":"firewave-remo"}
{"number":6057,"comment_id":"833318483","body":"The concept is great if you are making a UI library and user only need to use `<NavItem>` instead of `<div slot=\"item\">`. I've seen lots of React component libraries doing this with swapping children but this might be easier with JSX. ","updated_at":"2021-05-06T08:01:43Z","created_at":"2021-05-06T08:01:43Z","creator_user_login":"YamiOdymel"}
{"number":6057,"comment_id":"873416972","body":"you can just do slot ... https://svelte.dev/repl/8529d01291644a878ff2136660c88132?version=3.38.3 like this?\r\nelse you might have to do something like this. the other examples dont work any more but they where a awkward\r\n\r\n{#if $$slots.icon}\r\n   <slot />\r\n {/if}\r\n","updated_at":"2021-07-03T14:39:46Z","created_at":"2021-07-03T14:39:46Z","creator_user_login":"vospascal"}
{"number":6057,"comment_id":"878045918","body":"I'm not sure this is a good idea. It might look slick at first, especially for component libraries, but it might also be very confusing what's going on since you don't see the relationship between parent and child slots in the component itself anymore. Also if people swap out the components without applying the same logic to their new component it breaks and they would wonder why that is. Lastly, you now would have two ways to describe the slot relationship.","updated_at":"2021-07-12T07:35:54Z","created_at":"2021-07-12T07:35:54Z","creator_user_login":"dummdidumm"}
{"number":6057,"comment_id":"878065566","body":"Valid points. But some points you mentioned also apply to the current situation. If you swap out the components and you forget `slot=\"foo\"` then it breaks as well. And you already have to know that these 2 Components need to be in a hierarchy to know that you have to add the `slot=\"foo\"`. For me, this feels redundant. \r\n\r\nThe reason I brought this up, was because I have worked with Vuetify in Vue in the past and it was a nice DX. The relationship between parent and child is normally clear because of the naming of your components. `Navbar --> NavIcon`","updated_at":"2021-07-12T08:06:56Z","created_at":"2021-07-12T08:06:56Z","creator_user_login":"firewave-remo"}
{"number":6057,"comment_id":"901000265","body":"Well @vospascal offered a simple solution which just works (today!) with noname slots","updated_at":"2021-08-18T10:25:34Z","created_at":"2021-08-18T10:25:18Z","creator_user_login":"brgrz"}
{"number":6057,"comment_id":"901020192","body":"@brgrz  What if you have other markup between the 2 slots? This won't work, or do I miss something?","updated_at":"2021-08-18T11:00:38Z","created_at":"2021-08-18T11:00:38Z","creator_user_login":"firewave-remo"}
{"number":6057,"comment_id":"901031232","body":"@firewave-remo Other markup, for example?","updated_at":"2021-08-18T11:19:03Z","created_at":"2021-08-18T11:19:03Z","creator_user_login":"brgrz"}
{"number":6057,"comment_id":"901033007","body":"@brgrz \r\n```html\r\n<div>\r\n\t<li>\r\n\t\t<slot name=\"icon\" />\r\n\t\t<div>\r\n\t\t\tWhatever\r\n\t\t</div>\r\n\t\t<slot name=\"label\" />\r\n\t</li>\r\n</div>\r\n```","updated_at":"2021-08-18T11:22:13Z","created_at":"2021-08-18T11:22:13Z","creator_user_login":"firewave-remo"}
{"number":6057,"comment_id":"901037839","body":"The point of @vospascal solution is to have minimal components which only contain the default slot and no named slots and then you compose those minimal components using the component tag names removing the need for the `slot` attribute. Just as he shows in REPL. I'm actually using the same idea in a project of mine atm. \r\n\r\nOne issue I do see with this solution is that components have to be provided in the correct order (since there is only one big default slot) _unless_ you use somekind of flex/grid layout within the composing component to enable ordering/placement.\r\n","updated_at":"2021-08-18T11:33:02Z","created_at":"2021-08-18T11:30:54Z","creator_user_login":"brgrz"}
{"number":6336,"comment_id":"855260320","body":"An alternative here to what you suggested would be a new construct called `{#show}` that behaves like `v-show` in vue. That would support more use cases than just transitions/animations","updated_at":"2021-06-05T16:05:40Z","created_at":"2021-06-05T16:05:40Z","creator_user_login":"Zachiah"}
{"number":6336,"comment_id":"855262510","body":"I'm trying to create a fork with your solution...\r\n\r\nEdit:\r\nThere is a major problem with the way you suggested solving this isue. Transition values aren't reactive. Svelte just checks the current value whenever there is a new transition. If you look here https://svelte.dev/repl/b36219cc3d3f4f4b82fe60231aadf033?version=3.38.2 and try editing the value in the number box during a transition and then clicking the checkbox again without waiting for it to finish you will see it uses the old value. So until the current transition is finished it has the old value. What this means is that there isn't an easy way to reactively check when the transition value changes in the svelte compiler, as there isn't a need for that currently.\r\n\r\nSo, Implementing your solution would require a lot of code that checks reactively when transition values change with invalidation and other things like that from other parts of svelte.\r\n\r\nIs there something I'm misunderstanding?","updated_at":"2021-06-05T17:18:41Z","created_at":"2021-06-05T16:23:15Z","creator_user_login":"Zachiah"}
{"number":6336,"comment_id":"873846834","body":"Hi, thanks for your interest in the issue.\r\n\r\nI see. The only dynamic property is `visible`. How about using a store?\r\n\r\n```\r\n...\r\nimport { writable } from 'svelte/store';\r\nconst visible = writable(false);\r\n...\r\n<p transition:fly=\"{{ visible, show, hide, y: 200, duration: 2000,  }}\">\r\n...\r\n```\r\n\r\nCould this be relatively easy to make the transition module subscribe to changes of the visible property and allow to change visibility while the transition is in progress?","updated_at":"2021-07-05T06:41:07Z","created_at":"2021-07-05T06:41:07Z","creator_user_login":"mckravchyk"}
{"number":6336,"comment_id":"885094978","body":"@mckravchyk Sorry About my delayed reply I get way too many things in my inbox. I think that using a store might work","updated_at":"2021-07-22T17:42:42Z","created_at":"2021-07-22T17:42:42Z","creator_user_login":"Zachiah"}
{"number":6336,"comment_id":"968374158","body":"I'm in favor of this too, needed this a few times myself, opted for direct CSS animations instead.","updated_at":"2021-11-14T22:20:14Z","created_at":"2021-11-14T22:20:14Z","creator_user_login":"aradalvand"}
{"number":6336,"comment_id":"1275010369","body":"Hello,\r\n\r\nI'm trying to implement a solution to this problem, but I'm not sure of the most appropriate syntax.\r\n\r\nI don't think adding parameters to the transition is the most appropriate for some reasons (transitions are not reactive, and the params are passed to the transition method, with the risk of conflict)\r\n\r\n\r\nBut as alternative I don't know if I should opt for a block (ex **{#display}**) which would include the element(s), or for a directive on the element itself (ex: **svelte:display**).\r\n\r\n### {#display} block :\r\n\r\nBasically it's the same syntax as an {#if} or {#key}, except that the elements are not removed from the DOM.\r\n\r\n```\r\n<!--Supplying the `visible` property will make the element\r\n    appear / disappear using 'display: none' visibility -->\r\n{#display visible}\r\n\t<p transition:fly=\"{{ y: 200, duration: 2000 }}\">\r\n\t\tFlies in and out\r\n\t</p>\r\n{/display}\r\n```\r\n\r\nBy default it will add a `\"display:none!important\"` to hide the elements.\r\nBut we can imagine an alternative using class-names : `{#display visible (\"is-hidden\", \"is-visible\")}`\r\nHere, when the element must be hidden we will apply the \"is-hidden\" class, or \"is-visible\" in the opposite case.\r\n\r\n\r\n\r\n### {svelte:display} directive :\r\n\r\nOr we can use a simple directive :\r\n\r\n```\r\n<!--Supplying the `visible` property will make the element\r\n    appear / disappear using 'display: none' visibility -->\r\n<p transition:fly=\"{{ y: 200, duration: 2000 }}\" svelte:display={visible}>\r\n\tFlies in and out\r\n</p>\r\n```\r\n\r\nWe can use an objet to specify the class-names :  `svelte:display={{state=open, hidden:'is-hidden', visible:'is-visible'}}`\r\nOr an array as alternative syntax : `svelte:display={[open,'visible','hidden']}`\r\n\r\n\r\nWhat do you think ?\r\nWhat is the most appropriate syntax?\r\n","updated_at":"2022-10-11T17:07:10Z","created_at":"2022-10-11T17:07:10Z","creator_user_login":"adiguba"}
{"number":6336,"comment_id":"1275053970","body":"Hi! Thanks for giving this a shot! I think the latter approach with the display directive feels more natural - using a block would be cumbersome. I really like the idea with using class names by the way, that sounds like an obvious approach, but I missed it.","updated_at":"2022-10-11T17:41:55Z","created_at":"2022-10-11T17:41:55Z","creator_user_login":"mckravchyk"}
{"number":6336,"comment_id":"1276732758","body":"I coded a basic prototype (only with display:none for now) and submitted a PR.\r\nWait & see...","updated_at":"2022-10-12T21:00:56Z","created_at":"2022-10-12T21:00:56Z","creator_user_login":"adiguba"}
{"number":4910,"comment_id":"635642940","body":"You likely need to use deferred transitions [https://svelte.dev/tutorial/deferred-transitions](https://svelte.dev/tutorial/deferred-transitions).","updated_at":"2020-05-28T22:31:56Z","created_at":"2020-05-28T22:31:56Z","creator_user_login":"kuhlaid"}
{"number":4910,"comment_id":"690114468","body":"Any feedback on this?\r\n\r\nHere is a simpler example: https://svelte.dev/repl/9a81a545111b475f86639dafcd8f35a5?version=3.24.1\r\n\r\nJust double click the button.\r\n\r\nResult: elements overlapping, flip animation not pushing down the 2nd element.\r\n\r\nEdit: I changed the duration of the animations to 2 seconds, meaning it is not even necessary to click the button \"that fast\". The key is to click it the second time WHILE the first animations are running.\r\n\r\nThis is the result:\r\n<img width=\"258\" alt=\"Overlap\" src=\"https://user-images.githubusercontent.com/5912274/92716864-b0179680-f35f-11ea-9703-1e5e15d449fe.png\">\r\n","updated_at":"2020-09-10T10:20:11Z","created_at":"2020-09-10T09:35:55Z","creator_user_login":"Fygo"}
{"number":4910,"comment_id":"735434026","body":"I'm encountering the same issue. Is anyone aware of a workaround?\r\nIt seems that we should disable transitions while performing the \"flip\" layout calculation?\r\n\r\nEdit: Interestingly the issue only happen with the `out` transition. In my case removing the `out` and only keeping the `in` gives a good result, see the amended example from @Fygo https://svelte.dev/repl/76cdc13f5a5b462bba8d6a082edf367f?version=3.24.1","updated_at":"2020-11-29T19:20:40Z","created_at":"2020-11-29T18:16:23Z","creator_user_login":"mquandalle"}
{"number":4910,"comment_id":"753708164","body":"Possibly related to #5808.","updated_at":"2021-01-04T01:02:39Z","created_at":"2021-01-04T01:02:39Z","creator_user_login":"mquandalle"}
{"number":4910,"comment_id":"839934411","body":"This is still an issue. Any updates about this?\r\n\r\nMy workaround was to delay the animation until the previous one has fixed wherever it was buggy. I had a list that varied in size, and so when I decreased the list size and increased it too soon, I would get the overlap. I simply delayed the increase in list size until the animation had completed.","updated_at":"2021-05-12T17:48:52Z","created_at":"2021-05-12T16:47:56Z","creator_user_login":"ForrestFire0"}
{"number":4910,"comment_id":"957343510","body":"I'm also running into this bug. I have an `animation`, `in` and `out` directive on a node in a keyed each block.\r\nWhen the list changes quickly, the last element (all others seem to work fine, I think) sometimes gets stuck with some `style=position: absolute; transform: ...` css that makes it stay in the wrong position.\r\n\r\n![image](https://user-images.githubusercontent.com/1144597/139836394-ae32bd57-d9bc-438e-b06d-c6534bf895f0.png)\r\n","updated_at":"2021-11-02T11:14:18Z","created_at":"2021-11-02T11:14:18Z","creator_user_login":"HalfVoxel"}
{"number":4910,"comment_id":"959339988","body":"Same here, I made a workaround that I think is a bit better than delays (delays where not working for me , and are pretty random imo).\r\n\r\nHere it is : https://svelte.dev/repl/63bb44e18284450388bad41fc0df7c6c?version=3.44.1\r\n\r\nAnother problem is how transitions work. There is no way to dynamically modify the behaviour in the outro, if the animation is called with transition:fly. I think this is because svelte is using the css function for all outros instead of calling the transition function again. So you need to have in:customFlyIn and out:customFlyOut.\r\n\r\nIn the mean time, I hope this helps.\r\nCheers!\r\n\r\n\r\n","updated_at":"2021-11-03T14:57:05Z","created_at":"2021-11-03T14:57:05Z","creator_user_login":"legowhales"}
{"number":4030,"comment_id":"560114556","body":"This change has come up before in #3673, although in a different place in the docs. I don't think we want to make this change everywhere. I guess I'm ambivalent about adding a new section for this. If there isn't anywhere currently where we're showing `{#if}` swapping out text nodes, then it might make sense to have at least one example somewhere where that happens.","updated_at":"2019-12-01T14:27:34Z","created_at":"2019-12-01T14:27:34Z","creator_user_login":"Conduitry"}
{"number":4030,"comment_id":"560127628","body":"@Conduitry lol that pull-request is exactly what I was going to submit =D\r\n\r\n>I don't think we want to make this change everywhere. I guess I'm ambivalent about adding a new section for this.\r\n\r\nCompletely agree.\r\n\r\n> If there isn't anywhere currently where we're showing `{#if}` swapping out text nodes, then it might make sense to have at least one example somewhere where that happens.\r\n\r\nI've done this in #4032. I applied it to only a few of the if examples I found, and at least once in the Syntax docs =)","updated_at":"2019-12-01T16:27:17Z","created_at":"2019-12-01T16:26:26Z","creator_user_login":"henrahmagix"}
{"number":4030,"comment_id":"1002604046","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T13:51:09Z","created_at":"2021-12-29T13:51:09Z","creator_user_login":"stale[bot]"}
{"number":4030,"comment_id":"1002672181","body":"Rebased the closed #4032 and made #7070","updated_at":"2021-12-29T16:20:10Z","created_at":"2021-12-29T16:20:10Z","creator_user_login":"henrahmagix"}
{"number":3957,"comment_id":"557548734","body":"Would you be equally content with documentation that mount/unmount is not guaranteed to occur in predictable or consistent order?\r\n\r\nA few thoughts relevant to your situation:\r\n\r\n 1. Relying on the order of DOM operations is probably going to result in breakage when you upgrade svelte. Because svelte tries to optimize things it's fair to assume the order it ultimately does things could be different as long as the resultant DOM structure is consistent.\r\n 2. I think in general Svelte encourages self-contained components. As a rule parents give instructions and data to children, children can't really talk back...I wish real children worked this way.\r\n 3. If you can find a way to model the state in javascript and then render it with svelte you may wind up fighting the system less.","updated_at":"2019-11-22T14:18:41Z","created_at":"2019-11-22T14:18:41Z","creator_user_login":"Crisfole"}
{"number":3957,"comment_id":"557585116","body":"I think there should at least be a note in the documentation, yes.\r\n\r\nTo give a bit more information on my use case, I'm using context to register children during initialization with their parent, and then there is some key handlers to navigate between items. It's basically a menu with items having an \"active\" state and im using store/context to track the active item. So I'm using a feature specifically for child/parent communication haha. Also I can post a repl if this is still confusing.\r\n\r\nI can probably get around this issue by requiring the user to provide their own index when rendering out the children items, but seeing how my project is a UI library I was hoping to hide those implementation details. Not to mention only certain items are registered based on some criteria so that's additional logic the user has to be aware of.","updated_at":"2019-11-22T15:55:25Z","created_at":"2019-11-22T15:50:02Z","creator_user_login":"farism"}
{"number":3957,"comment_id":"1002409072","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T05:54:13Z","created_at":"2021-12-29T05:54:13Z","creator_user_login":"stale[bot]"}
{"number":4318,"comment_id":"578442026","body":"If I replace the `LoadMsg` with a `div` it works as intended.\r\n\r\nThis is the source code for LoadMsg :\r\n\r\n```\r\n<script>\r\n  export let center = true\r\n  export let inline = false\r\n</script>\r\n\r\n<style>\r\n  p.center {\r\n    text-align: center;\r\n  }\r\n</style>\r\n\r\n{#if inline}\r\n    <span class:text-center={center}>\r\n      <i class=\"icon-spin spin\"></i>\r\n      <slot />\r\n    </span>\r\n{:else}\r\n    <div class:text-center={center}>\r\n      <i class=\"icon-spin spin\"></i>\r\n      <slot />\r\n    </div>\r\n{/if}\r\n\r\n```","updated_at":"2020-01-25T20:51:52Z","created_at":"2020-01-25T20:51:52Z","creator_user_login":"lud"}
{"number":4318,"comment_id":"578442494","body":"Can you save a complete reproduction in the REPL and link to it?","updated_at":"2020-01-25T20:58:07Z","created_at":"2020-01-25T20:58:07Z","creator_user_login":"Conduitry"}
{"number":4318,"comment_id":"578443356","body":"Unfortunately not. It works as expected in [the repl](https://svelte.dev/repl/628fe5252b424738bebc293a4495c3c1?version=3.18.0).\r\n\r\nI wrote my code in another way, splitting the `:else` section in another if, and matching on another variable than `joined`, so I have a workaround, but still it should not be possible to display `false == true` !","updated_at":"2020-01-25T21:11:02Z","created_at":"2020-01-25T21:11:02Z","creator_user_login":"lud"}
{"number":4318,"comment_id":"578478363","body":"I believe this is the same behavior as seen in #4263 with perhaps a different repro.","updated_at":"2020-01-26T08:07:44Z","created_at":"2020-01-26T08:07:44Z","creator_user_login":"ghost"}
{"number":4318,"comment_id":"578488971","body":"Yes my store value has methods and it seems the tracking of values is lost when I add a custom component in the else section.","updated_at":"2020-01-26T10:35:18Z","created_at":"2020-01-26T10:35:18Z","creator_user_login":"lud"}
{"number":4318,"comment_id":"642570730","body":"I can confirm I've seen this, but am also unable to reproduce it. I've ended up just writing the code in a different way.\r\n\r\nI call it Schrodinger's variable. The store value is false outside an if, but if you log it inside the if, it is true. It's a tough one to track down.","updated_at":"2020-06-11T10:58:55Z","created_at":"2020-06-11T10:58:55Z","creator_user_login":"antony"}
{"number":3615,"comment_id":"534364366","body":"Yeah, this is because things are being built with different copies of Svelte's internal runtime. The parent-child relationship isn't correctly maintained between components that are compiled and bundled separately, and so the context is seen as undefined.\r\n\r\nThe proper way to go about this would be to use the `svelte` key in the child components' package.json files to point to the original .svelte source and specify `'svelte'` in your `mainFields` webpack config (see https://github.com/sveltejs/svelte-loader). This way all of the components are compiled and bundled together, with a single copy of the internals.\r\n\r\nIt's probably be possible to make this work even when bundling against different copies of the internals (by making the internals use special global variables to store this, rather than variables local to the module), but I don't think this is a use we want to cater to. There are a number of reasons to just have one copy of the Svelte internals. (Both bundle size concerns, and several features that simply won't work otherwise.) So I would consider this more of a gap in the docs (Questions related to this have come up several times.) than a bug in the code.","updated_at":"2019-09-24T02:45:19Z","created_at":"2019-09-24T02:45:19Z","creator_user_login":"Conduitry"}
{"number":3615,"comment_id":"534367133","body":"That makes sense, and thank you for the explanation. I had a feeling this would be the issue.\r\n\r\nUnfortunately in my use case I can't bundle all components up at the same time because I don't always know which components will exist on the site, so I will look for other ways around this if the `props` route becomes too unmaintainable.\r\n\r\nIn the case of the browser it's simple, because I can just attach the store to the `window` instead of using the context API. My only reason for trying to use the context API was because I needed a way to share a new store for each new request on the server-side for SSR.\r\n\r\nAt first I though that maybe there would be a way to explicitly pass a context to a child component, but if this is a use case you may not want to cater to then I suppose there would be no reason to allow for that to happen in the first place.","updated_at":"2019-09-24T02:59:53Z","created_at":"2019-09-24T02:59:53Z","creator_user_login":"ghost"}
{"number":3615,"comment_id":"541386441","body":"This is solved by https://github.com/sveltejs/svelte/issues/3671#issuecomment-541277465\r\n\r\nI'll leave this issue open since it's got the `docs` tag, but I just wanted to point out the comment that solved the problem for me as that's likely the best thing to document.","updated_at":"2019-10-13T04:56:48Z","created_at":"2019-10-13T04:56:48Z","creator_user_login":"ghost"}
{"number":3615,"comment_id":"1000776185","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:05Z","created_at":"2021-12-24T10:28:05Z","creator_user_login":"stale[bot]"}
{"number":5240,"comment_id":"669161774","body":"What issue is this related to? What is this intended to fix?","updated_at":"2020-08-05T12:23:03Z","created_at":"2020-08-05T12:23:03Z","creator_user_login":"Conduitry"}
{"number":5240,"comment_id":"669348990","body":"> What issue is this related to? What is this intended to fix?\r\n\r\n@Conduitry \r\nForgot to mention ! it is related to #4467 ","updated_at":"2020-08-06T15:47:14Z","created_at":"2020-08-05T18:08:32Z","creator_user_login":"asvsfs"}
{"number":5240,"comment_id":"701122112","body":"can you rebase against master and make sure `npm run lint` passes? we just updated our eslint config to allow only single quotes","updated_at":"2020-09-30T02:34:56Z","created_at":"2020-09-30T02:34:56Z","creator_user_login":"benmccann"}
{"number":5240,"comment_id":"869047854","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:03:38Z","created_at":"2021-06-26T19:03:38Z","creator_user_login":"stale[bot]"}
{"number":5240,"comment_id":"1441029782","body":"Just a reminder that this PR would need a rebase","updated_at":"2023-02-23T00:10:27Z","created_at":"2023-02-23T00:10:27Z","creator_user_login":"benmccann"}
{"number":5240,"comment_id":"1452433120","body":"@dummdidumm is attempting to deploy a commit to the **Svelte** Team on [Vercel](https://vercel.com).\n\nA member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=Svelte&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22e0bf1b26a9e874e6678fa51acc0e06e536707155%22%7D%2C%22id%22%3A%22QmNwHsir2CpnhKodMpL5xfaDRHBYWJYMTt5LTWdaxist8f%22%2C%22org%22%3A%22sveltejs%22%2C%22prId%22%3A5240%2C%22repo%22%3A%22svelte%22%7D).\n\n","updated_at":"2023-03-02T19:24:11Z","created_at":"2023-03-02T19:24:11Z","creator_user_login":"vercel[bot]"}
{"number":5240,"comment_id":"1470079732","body":"Looking at the compiler output, I think we should either remove the `input.value = ..` assignmed that happens in `c()` or adjust that one instead to use the `set_input_value` method. The way it's now is setting the value two times essentially.","updated_at":"2023-03-15T14:09:50Z","created_at":"2023-03-15T14:09:50Z","creator_user_login":"dummdidumm"}
{"number":3920,"comment_id":"555370246","body":"Having been introduced to terms `interpolate` and `interpolation` my understanding of how Svelte animation library works grew. Maybe they should be mentioned more often in documentation.","updated_at":"2019-11-19T07:23:42Z","created_at":"2019-11-19T07:23:42Z","creator_user_login":"beinoriusju"}
{"number":3920,"comment_id":"624985857","body":"Now that the REPL supports Markdown files, adding README.md to individual examples probably makes sense.","updated_at":"2020-05-07T02:04:28Z","created_at":"2020-05-07T02:04:28Z","creator_user_login":"Conduitry"}
{"number":3920,"comment_id":"1002344078","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T00:52:43Z","created_at":"2021-12-29T00:52:43Z","creator_user_login":"stale[bot]"}
{"number":3675,"comment_id":"540080206","body":"Compiling or changing the behavior of non-`.svelte` files is out of scope for the compiler. This is something that perhaps could be made more clear in the documentation though.","updated_at":"2019-10-09T16:29:28Z","created_at":"2019-10-09T16:29:28Z","creator_user_login":"Conduitry"}
{"number":3675,"comment_id":"627057196","body":"The suggestion is to use the .subscribe method as it use plain javascript and work like expected.","updated_at":"2020-05-12T01:50:05Z","created_at":"2020-05-12T01:40:26Z","creator_user_login":"sdotb"}
{"number":3675,"comment_id":"1001832403","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T02:11:25Z","created_at":"2021-12-28T02:11:25Z","creator_user_login":"stale[bot]"}
{"number":5365,"comment_id":"689786183","body":"Though:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\r\n\r\nThis appears to imply that Svelte will wait for the next process?","updated_at":"2020-09-09T19:56:46Z","created_at":"2020-09-09T19:56:46Z","creator_user_login":"lovetoast"}
{"number":5365,"comment_id":"703091316","body":"A more visual [REPL](https://svelte.dev/repl/d9a7700549f14e6b8f0712964a2585ba?version=3.29.0) demonstrating the issue","updated_at":"2020-10-03T11:52:03Z","created_at":"2020-10-03T11:52:03Z","creator_user_login":"bfanger"}
{"number":5365,"comment_id":"705231785","body":"The ordering inside the compiled `$$self.$$.update = () => {` function matters, a minimal example:\r\n\r\n```html\r\n<script>\r\n  let amount = 2\r\n  let price = 1.99;\r\n  let total = 0\r\n\r\n  $: formattedTotal = total.toFixed(2)\r\n  $: calculate(amount) // $: calculate doesn't work when placed below the $: formattedTotal\r\n\r\n  function calculate(n) {\r\n    total = price * n\r\n    console.log('calculated '+ total)\r\n  }\r\n </script>\r\n\r\n{price} x <input type=\"number\" bind:value={amount} /> = {formattedTotal}\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/cbd9a4bb8c5f43c89fa61ffc2ace2e20?version=3.29.0)\r\n\r\nThis makes the reactivity system unreliable, i'll see if I can fix the issue or provide a meaningful warning message.\r\nIt's quite tricky as I don't want to allow circular dependencies.","updated_at":"2020-10-07T22:43:50Z","created_at":"2020-10-07T22:43:50Z","creator_user_login":"bfanger"}
{"number":5365,"comment_id":"705616006","body":"> The ordering inside the compiled `$$self.$$.update = () => {` function matters, a minimal example:\r\n> \r\n> ```\r\n> <script>\r\n>   let amount = 2\r\n>   let price = 1.99;\r\n>   let total = 0\r\n> \r\n>   $: formattedTotal = total.toFixed(2)\r\n>   $: calculate(amount) // $: calculate doesn't work when placed below the $: formattedTotal\r\n> \r\n>   function calculate(n) {\r\n>     total = price * n\r\n>     console.log('calculated '+ total)\r\n>   }\r\n>  </script>\r\n> \r\n> {price} x <input type=\"number\" bind:value={amount} /> = {formattedTotal}\r\n> ```\r\n> \r\n> [REPL](https://svelte.dev/repl/cbd9a4bb8c5f43c89fa61ffc2ace2e20?version=3.29.0)\r\n> \r\n> This makes the reactivity system unreliable, i'll see if I can fix the issue or provide a meaningful warning message.\r\n> It's quite tricky as I don't want to allow circular dependencies.\r\n\r\nHi Monsieur Bob, thanks for your reply, but, I may have been mistaken, is this not a bug at all and instead how svelte handles the micro-processes?\r\n\r\nPS I was just reading a stack-overflow answer on Svelte, from last month regarding #key and I was thinking this sounds weird but awesome, I'm hoping it was written by an authority, and hey, it was you!\r\n","updated_at":"2020-10-08T14:38:44Z","created_at":"2020-10-08T14:38:44Z","creator_user_login":"lovetoast"}
{"number":5365,"comment_id":"705723737","body":"Definitely a bug. when you write:\r\n `$: formattedTotal = total.toFixed(2)`\r\nit shouldn't matter if it's at the start or at the bottom of the script tag, that should just work.\r\n\r\nI do expect resistance to a solution. That will need some iterations to get right.","updated_at":"2020-10-08T17:43:39Z","created_at":"2020-10-08T17:43:39Z","creator_user_login":"bfanger"}
{"number":5365,"comment_id":"758700910","body":"Another repro in the REPL:\r\nhttps://svelte.dev/repl/8180d687add34e76b57d5b98508154b0?version=3.31.2\r\n\r\nAs you can see, the moment a function is defined reactive with a parameter, it does not trigger any subsequent reactive updates. While executing the function the moment the initial reactive variable is changed does trickle down all subsequent changes.","updated_at":"2021-01-12T14:59:32Z","created_at":"2021-01-12T14:41:13Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"759337198","body":"@bfanger Maybe change the title of this issue to reflect the actual bug?","updated_at":"2021-01-13T09:54:06Z","created_at":"2021-01-13T09:54:06Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"759341882","body":"@guidobouman I did not report the issue, I did figure out why it happens and created an [RFC](https://github.com/sveltejs/rfcs/pull/40) which outlines a possible solution.","updated_at":"2021-01-13T10:01:59Z","created_at":"2021-01-13T10:01:59Z","creator_user_login":"bfanger"}
{"number":5365,"comment_id":"759357466","body":"Both the REPL by @guidobouman and the issue outlined in the RFC by @bfanger are actually expected behavior given how reactive statements currently work. The key is that the code is analyzed beforehand and only the values immediately part of the declaration are taken into account for ordering. This is explained in more detail in [this issue](https://github.com/sveltejs/svelte/issues/5848#issuecomment-753431840) and [this section of the community docs](https://svelte-recipes.netlify.app/language/#defining-dependencies). The latter also explains why this behavior actually is desirable for some people because you might want to hide specific values from reactivity tracking.","updated_at":"2021-01-13T10:29:43Z","created_at":"2021-01-13T10:29:43Z","creator_user_login":"dummdidumm"}
{"number":5365,"comment_id":"759483632","body":"@dummdidumm \r\nOkay, we can [shield a variable from reactive tracking with a function](https://svelte-recipes.netlify.app/language/#hiding-values-from-reactive-declarations). But what if, in a function, you edit a variable that is used by another reactive variable? Then the reactivity breaks when the order is not correct. The compiled code from my example showcases this: `$$invalidate()` is compiled into the function.\r\n\r\nThis does not seem like intended behavior. Especially when it starts working the moment you change the order of the reactive declarations.","updated_at":"2021-01-13T14:27:30Z","created_at":"2021-01-13T14:27:30Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"759501205","body":"This at the moment is the intended behavior, because as described in the issue linked above, you hide the variable from the ordering algorithm because it's inside the function. You need to make it a direct dependency of the `$`-statement like `$: activeVideoKey = switchToIdle(targetState);`. The reactive algorithm does not look into functions referenced in `$` to determine the order.","updated_at":"2021-01-13T14:55:27Z","created_at":"2021-01-13T14:55:27Z","creator_user_login":"dummdidumm"}
{"number":5365,"comment_id":"759503038","body":"For my understanding: Then where does the `$$invalidate` around the reactive var inside the function come from? ü§î \r\n\r\nIf the compiler adds the `$$invalidate` method, then I would expect this part of the linked comment to also become true:\r\n> For example, if one block updates foo and another uses foo, the block that updates foo will end up before the other one in the compiled code, even if it were second in the component definition.","updated_at":"2021-01-13T14:59:04Z","created_at":"2021-01-13T14:58:11Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"759507667","body":"The `$$invalidate` and the ordering of the reactive statements are not related to each other. The sentence in the linked issue explains it: \"In your component, the compiler cannot tell that the second reactive block might cause changes that should cause the first block to be re-run, because the updates to activated (in your case activeVideoKey) are hidden in the activate() (in your case switchToIdle) function. So it defaults to keeping them in the order you wrote them\"","updated_at":"2021-01-13T15:05:05Z","created_at":"2021-01-13T15:05:05Z","creator_user_login":"dummdidumm"}
{"number":5365,"comment_id":"762413288","body":"Okay, `$$invalidate` and the reactive statements sorting are different and unrelated. But can the dependencies not be tracked through the same mechanism that adds the `$$invalidate` calls? Maybe to influence the sorting or otherwise to improve the reactivity.\r\n\r\nI hoped that the `$$invalidate` call, that is wrapped around all reactive statements, could be used to make this work.\r\n\r\n---\r\n\r\nPS: The RFC explains the issue nicely:\r\n> Svelte reactivity system is invisible, even considered \"magic\", when it doesn't work as expected, it's very hard to debug.\r\n>\r\n> In the current implementation, reactive statements are not always run or are not run with the latest values, this depends on the ordering inside the generated code [...]","updated_at":"2021-01-18T18:36:17Z","created_at":"2021-01-18T18:36:07Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"762802272","body":"In issue #5905 the user wants to have the opposite, no reordering. If we would change the behavior as desired in this issue right here (also tracking stuff inside functions), the user in #5905 would have no possibility to write code in a way that does not get reordered.","updated_at":"2021-01-19T12:10:58Z","created_at":"2021-01-19T12:10:58Z","creator_user_login":"dummdidumm"}
{"number":5365,"comment_id":"763139989","body":"Uhmm... It gets reordered anyhow, right? This would not change that.\r\n\r\nActually, I kinda agree with the request from #5905. But combined with deeper dependency tracking from this issue.\r\n\r\nThe one thing I want for in every platform / framework / codebase is predictability. How easy is it to explain it to a newcomer without resorting to caveats. Magic sorting is quite a caveat. Especially when it goes against the line by line execution known to nearly all programming languages, including JavaScript. If you build invisible reactivity, it needs to work in every case.\r\n\r\nIt seems reasonable to want to shield code from reactivity but still react on some variables. A function could still provide that. Could this maybe be achieved if you only track variables in functions that are referenced in the actual reactive statements?","updated_at":"2021-01-19T21:03:58Z","created_at":"2021-01-19T21:03:58Z","creator_user_login":"guidobouman"}
{"number":5365,"comment_id":"866263263","body":"I also just ran in this \"bug\"... you can check an oversimplified REPL of my code (I use a custom  store in real code) :\r\n\r\n https://svelte.dev/repl/cb8853b5fe804b9a84417704ba85f6db?version=3.38.3\r\n \r\n I feel this is pretty unpredictable and create bugs that are hard to catch if the component is semi-complicated.\r\n \r\n In this case, I don't want to shield code from reactivity, I want to react when the value of a store changes, regardless of the order.","updated_at":"2021-06-22T19:16:39Z","created_at":"2021-06-22T19:16:39Z","creator_user_login":"madupuis90"}
{"number":5365,"comment_id":"866638164","body":"It works as expected if you replace `bar.set(!$foo);` with `$bar = !$foo` . Question is if that is consistent or not. On one hand it's consistent because the rule of reactive statements is \"every variable that is directly referenced is used to define the order, on the other hand it's confusing because the statements are semantically the same.","updated_at":"2021-06-23T08:26:27Z","created_at":"2021-06-23T08:26:27Z","creator_user_login":"dummdidumm"}
{"number":5365,"comment_id":"869009589","body":"I used .set in my example for simplicity sake but the real code has a custom store and I don't expose .set. I only expose some state changing functions. So in this case `$bar = !$foo` would not work","updated_at":"2021-06-26T14:14:38Z","created_at":"2021-06-26T14:14:38Z","creator_user_login":"madupuis90"}
{"number":5365,"comment_id":"1000355542","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T14:53:35Z","created_at":"2021-12-23T14:53:35Z","creator_user_login":"stale[bot]"}
{"number":5365,"comment_id":"1003054757","body":"I think this issue is still relevant. ","updated_at":"2021-12-30T14:32:21Z","created_at":"2021-12-30T14:32:21Z","creator_user_login":"guidobouman"}
{"number":7752,"comment_id":"1204891007","body":"Could you put this into a REPL (https://svelte.dev/repl/hello-world)? This is a great way to share small Svelte applications to demonstrate bugs like this. If it actually causes 100% CPU, maybe comment out the part you've identified as being the problem and give instructions in the REPL √† la \"Uncomment this part to cause 100% CPU\".\r\n\r\nEdit: fwiw, you entire `onMount` code can literally be:\r\n\r\n```svelte\r\n<nav-el bind:this={route.div} class:tab-active={path === window.location.pathname}>{route.name}</nav-el>\r\n```\r\n\r\nWhich would also later make it much easier to use a client side router. Because it would be reactive. Right now `onMount` happens once.\r\nIn Svelte it's extremely rare to manually touch the DOM like you do.","updated_at":"2022-08-04T07:51:31Z","created_at":"2022-08-04T07:46:52Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1204916422","body":"I, unfortunately, cannot put it into a REPL, because of #6900 which doesn't allow to declare TypeScript classes inside a <script> block. Thanks for the idea of squashing it into one line, I probably won't need the bind:this={route.div} at all, but it would still be nice to figure it out.\r\n\r\nEDIT: Your one-liner doesn't appear to work, because window is not defined.","updated_at":"2022-08-04T08:16:10Z","created_at":"2022-08-04T08:11:58Z","creator_user_login":"kyngs"}
{"number":7752,"comment_id":"1206199106","body":"> I, unfortunately, cannot put it into a REPL, because of #6900 which doesn't allow to declare TypeScript classes inside a <script> block.\r\n\r\nDoes it not repro with JavaScript? I'm sure you can turn 10 lines of TypeScript into JavaScript?\r\n\r\n> EDIT: Your one-liner doesn't appear to work, because window is not defined.\r\n\r\nPlease provide a REPL if possible. Works for me https://svelte.dev/repl/f400f9f6692e4193b81a0c6e7b6f5244?version=3.49.0","updated_at":"2022-08-05T08:42:03Z","created_at":"2022-08-05T08:42:03Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206261103","body":"> > I, unfortunately, cannot put it into a REPL, because of #6900 which doesn't allow to declare TypeScript classes inside a <script> block.\r\n> \r\n> Does it not repro with JavaScript? I'm sure you can turn 10 lines of TypeScript into JavaScript?\r\n> \r\n> > EDIT: Your one-liner doesn't appear to work, because window is not defined.\r\n> \r\n> Please provide a REPL if possible. Works for me https://svelte.dev/repl/f400f9f6692e4193b81a0c6e7b6f5244?version=3.49.0\r\n\r\nAfter some trial and error (I've never touched JavaScript, only TS) I've converted the original to this REPL:\r\nhttps://svelte.dev/repl/303c5db2eaae4350a5ee6534e9daaf4a?version=3\r\nYou can see, that the moment you attempt to open it, your browser window freezes.\r\n\r\nAs far as your one-liner goes, you are right that it works in REPL: https://svelte.dev/repl/7c3ac2ac4e4546be8e9d3a10f6d8f768?version=3\r\n\r\nHowever, it does not work in my SvelteKit application when I access it via npm run dev. It throws the following error:\r\n```\r\nwindow is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at async respond$1 (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3098:4)\r\n    at async resolve (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3456:11)\r\nwindow is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at async respond_with_error (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:2859:10)\r\n    at async respond$1 (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3115:4)\r\nwindow is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37window is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at async respond$1 (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3098:4)\r\n    at async resolve (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3456:11)\r\nwindow is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at async respond_with_error (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:2859:10)\r\n    at async respond$1 (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:3115:4)\r\nwindow is not defined\r\nReferenceError: window is not defined\r\n    at __layout.svelte:25:55\r\n    at Module.each (/node_modules/svelte/internal/index.mjs:1736:16)\r\n    at eval (/src/routes/__layout.svelte:26:82)\r\n    at Object.$$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at root.svelte:37:37\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async respond_with_error (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:2859:10)\r\n\r\n\r\n    at $$render (/node_modules/svelte/internal/index.mjs:1770:22)\r\n    at Object.render (/node_modules/svelte/internal/index.mjs:1778:26)\r\n    at render_response (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:1461:27)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async respond_with_error (file:///home/kyngs/Documents/Code/GitHub/ProjectZet-Plugins/Web-Frontend/.svelte-kit/runtime/server/index.js:2859:10)\r\n```","updated_at":"2022-08-05T09:47:41Z","created_at":"2022-08-05T09:47:41Z","creator_user_login":"kyngs"}
{"number":7752,"comment_id":"1206263631","body":"> After some trial and error (I've never touched JavaScript, only TS) I've converted the original to this REPL:\r\n> https://svelte.dev/repl/303c5db2eaae4350a5ee6534e9daaf4a?version=3\r\n> You can see, that the moment you attempt to open it, your browser window freezes.\r\n\r\nThanks! I'm sure someone can use that to further debug the issue.\r\n\r\n> However, it does not work in my SvelteKit application when I access it via npm run dev. It throws the following error:\r\n\r\nYou never mentioned SvelteKit,  `window` is not defined _on the server_, so this naturally cannot work.\r\n\r\n","updated_at":"2022-08-05T09:50:52Z","created_at":"2022-08-05T09:50:34Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206264320","body":"> > After some trial and error (I've never touched JavaScript, only TS) I've converted the original to this REPL:\r\n> > https://svelte.dev/repl/303c5db2eaae4350a5ee6534e9daaf4a?version=3\r\n> > You can see, that the moment you attempt to open it, your browser window freezes.\r\n> \r\n> Thanks! I'm sure someone can use that do further debug the issue.\r\n> \r\n> > However, it does not work in my SvelteKit application when I access it via npm run dev. It throws the following error:\r\n> \r\n> You never mentioned SvelteKit, `window` is not defined _on the server_, so this naturally cannot work.\r\n\r\nSorry, I thought that it was unrelated to the original issue, do you have any idea how to transform this one-liner to sveltekit?","updated_at":"2022-08-05T09:51:19Z","created_at":"2022-08-05T09:51:19Z","creator_user_login":"kyngs"}
{"number":7752,"comment_id":"1206267464","body":"> Sorry, I thought that it was unrelated to the original issue, do you have any idea how to transform this one-liner to sveltekit?\r\n\r\nSvelteKit offers a whole host of information for this precise purpose. E.g. https://kit.svelte.dev/docs/modules#$app-stores-page allows you to access the current URL on both server and client.\r\n\r\nIf you follow the Getting Started https://kit.svelte.dev/docs/introduction#getting-started you can see that in the demo app:\r\n\r\n```svelte\r\n\t<nav>\r\n\t\t<svg viewBox=\"0 0 2 3\" aria-hidden=\"true\">\r\n\t\t\t<path d=\"M0,0 L1,2 C1.5,3 1.5,3 2,3 L2,0 Z\" />\r\n\t\t</svg>\r\n\t\t<ul>\r\n\t\t\t<li class:active={$page.url.pathname === '/'}><a sveltekit:prefetch href=\"/\">Home</a></li>\r\n\t\t\t<li class:active={$page.url.pathname === '/about'}>\r\n\t\t\t\t<a sveltekit:prefetch href=\"/about\">About</a>\r\n\t\t\t</li>\r\n\t\t\t<li class:active={$page.url.pathname === '/todos'}>\r\n\t\t\t\t<a sveltekit:prefetch href=\"/todos\">Todos</a>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t<svg viewBox=\"0 0 2 3\" aria-hidden=\"true\">\r\n\t\t\t<path d=\"M0,0 L0,3 C0.5,3 0.5,3 1,2 L2,0 Z\" />\r\n\t\t</svg>\r\n\t</nav>\r\n```\r\n\r\nhttps://github.com/sveltejs/kit/blob/5cd8385391e30ecf525d11d24c268d3b08284dfb/packages/create-svelte/templates/default/src/lib/header/Header.svelte\r\n\r\nEdit: I recommend checking out the demo app before working with an empty project.","updated_at":"2022-08-05T09:56:46Z","created_at":"2022-08-05T09:55:11Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206502551","body":"I was able to track this down to the use of the spread operator. Or more specifically cloning the array, `slice` works too. Here's the absolute minimal REPL\r\n\r\nhttps://svelte.dev/repl/d8f6f4532ab04a1fa028d1835d55839e?version=3.49.0\r\n\r\nThe first two each cause infinite loops, the third does not.","updated_at":"2022-08-05T14:11:58Z","created_at":"2022-08-05T14:11:58Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206511411","body":"Here's the only difference between the generated Svelte code. This would be the time someone who knows about Svelte internals should take over.\r\n\r\n```diff\r\n--- good.js\t2022-08-05 16:16:24.071516677 +0200\r\n+++ bad.js\t2022-08-05 16:15:57.823234520 +0200\r\n@@ -20,7 +20,7 @@\r\n   return child_ctx;\r\n }\r\n \r\n-// (19:0) {#each bindings as binding}\r\n+// (7:0) {#each [...bindings] as binding}\r\n function create_each_block(ctx) {\r\n   let div;\r\n   let each_value = /*each_value*/ ctx[3];\r\n@@ -56,7 +56,7 @@\r\n \r\n function create_fragment(ctx) {\r\n   let each_1_anchor;\r\n-  let each_value = /*bindings*/ ctx[0];\r\n+  let each_value = [.../*bindings*/ ctx[0]];\r\n   let each_blocks = [];\r\n \r\n   for (let i = 0; i < each_value.length; i += 1) {\r\n@@ -80,7 +80,7 @@\r\n     },\r\n     p(ctx, [dirty]) {\r\n       if (dirty & /*bindings*/ 1) {\r\n-        each_value = /*bindings*/ ctx[0];\r\n+        each_value = [.../*bindings*/ ctx[0]];\r\n         let i;\r\n \r\n         for (i = 0; i < each_value.length; i += 1) {\r\n\r\n```","updated_at":"2022-08-05T14:19:36Z","created_at":"2022-08-05T14:19:36Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206530556","body":"I think this could potentially be _yet another_ version of https://github.com/sveltejs/svelte/issues/5689. Where the first iteration will correctly invalidate the entire `bindings` array, causing another each loop. However, there is no reason for Svelte to invalidate it again when you bind the same object to the same `div`. But due to https://github.com/sveltejs/svelte/issues/5689 the mere existence of `bind:this={binding.div}` causes the entire `binding` object and in turn the `bindings` array to be invalidated. I assume without copying the array Svelte already has some safeguard to prevent this from causing an endless loop by comparing references of the iterable.","updated_at":"2022-08-05T14:38:07Z","created_at":"2022-08-05T14:38:07Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1206664764","body":"> I think this could potentially be _yet another_ version of #5689. Where the first iteration will correctly invalidate the entire `bindings` array, causing another each loop. However, there is no reason for Svelte to invalidate it again when you bind the same object to the same `div`. But due to #5689 the mere existence of `bind:this={binding.div}` causes the entire `binding` object and in turn the `bindings` array to be invalidated. I assume without copying the array Svelte already has some safeguard to prevent this from causing an endless loop by comparing references of the iterable.\r\n\r\nHowever, if I understand correctly, #5689 is a duplicate to #4447, which should be fixed.","updated_at":"2022-08-05T17:03:29Z","created_at":"2022-08-05T17:03:29Z","creator_user_login":"kyngs"}
{"number":7752,"comment_id":"1206678108","body":"> However, if I understand correctly, #5689 is a duplicate to #4447, which should be fixed.\r\n\r\nI've been triaging Svelte issues for well over a year now and seen every single issue and this comes up regularly, it is definitely not fixed (at least not every variation of it). I even ran into it myself over year ago https://github.com/sveltejs/svelte/issues/6298\r\n\r\nTo make this very clear, here is a REPL https://svelte.dev/repl/5f436e05809346a38baf906184321761?version=3.49.0\r\nIt logs `obj` twice, for no reason.","updated_at":"2022-08-05T17:20:36Z","created_at":"2022-08-05T17:20:36Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1291819811","body":"Looked at this a bit closer and the cause for the loop is:\r\n1. loop starts with a fresh array\r\n2. bind this is called, which invalidates the bindings array because the div is added to it\r\n3. loop is iterated another time because of this\r\n4. check if the bind this logic should be called again is done by looking if the array instance has changed, which it has due to the spread/slice\r\n5. goto 2\r\n\r\nI'm not sure how this can be solved in a way that breaks the loop and at the same time plays it safe in other use cases.","updated_at":"2022-10-26T10:23:29Z","created_at":"2022-10-26T10:23:29Z","creator_user_login":"dummdidumm"}
{"number":7752,"comment_id":"1291882644","body":"> 4\\. check if the bind this logic should be called again is done by looking if the array instance has changed, which it has due to the spread/slice\r\n\r\nI don't know how this is implemented, but why is bind this involved with the array at all? (I assume some optimization?) It should only care about its expression, which for `bind:this={binding.div}` is `binding.div`. Why can't it compare to `binding.div` and become a noop if it's still the same reference? Why is it relevant if the array has changed?","updated_at":"2022-10-26T11:22:42Z","created_at":"2022-10-26T11:22:42Z","creator_user_login":"Prinzhorn"}
{"number":7752,"comment_id":"1291912107","body":"My assumption is that the array instance is checked because a different instance hints at needing to do the binding work again. I'm not sure what it would mean to check the array entry instead, i.e. if there would be missed updates people expect in other places.","updated_at":"2022-10-26T11:48:36Z","created_at":"2022-10-26T11:48:36Z","creator_user_login":"dummdidumm"}
{"number":6832,"comment_id":"939396682","body":"I cloned your repo and did a few tests. Here are my findings so far:\r\n\r\n* The HTML delivered by the SSR includes `<!-- HTML_TAG_START -->2<!-- HTML_TAG_END -->`. This looks correct.\r\n* There's a `claim_html_tag` function in the Svelte code that takes an array of HTML nodes (a mix of element nodes and comment nodes), and is supposed to find those HTML_TAG_START and HTML_TAG_END comment nodes and strip them off before taking the rest of the nodes between those comments (which should be elements) and \"claiming\" them for the Svelte code to handle.\r\n* I added a console.log call at the start of `claim_html_tag` and it showed `[ (comment node) \"HTML_TAG_START\", (comment node) \"HTML_TAG_END\", (text node) \" \" ]`. That is, the last text node contained whitespace. By that point in the code flow, the text node containing \"2\" that *should* have been between the START and END comments had already disappeared, and it had grabbed the whitespace node after the END comment because it was supposed to grab three nodes. That fact will probably lead to finding the bug location, as the \"2\" node probably disappeared *after* the nodes-to-grab were counted .\r\n\r\nI'm running out of time right now before I need to go do something else, but I'll come back to this. In the meantime, I'm posting these incomplete findings so that anyone else who wants to troubleshoot this will have a starting point to work from.","updated_at":"2021-10-10T02:57:38Z","created_at":"2021-10-10T02:57:38Z","creator_user_login":"rmunn"}
{"number":6832,"comment_id":"939511638","body":"Okay, I'm pretty sure I've identified the precise cause of the bug. I'm not familiar enough with the Svelte code to *fix* the bug, but I know *why* it's happening, which will hopefully give the Svelte maintainers a head start on writing a fix.\r\n\r\nWhen Svelte compiles your repro to Javascript code, it looks like this:\r\n\r\n```js\r\nfunction create_fragment(ctx) {\r\n\tlet t0;\r\n\tlet t1;\r\n\tlet html_tag;\r\n\tlet t2;\r\n\tlet t3;\r\n\r\n\tconst block = {\r\n\t\tc: function create() {\r\n\t\t\tt0 = text(/*a*/ ctx[1]);\r\n\t\t\tt1 = space();\r\n\t\t\thtml_tag = new HtmlTagHydration();\r\n\t\t\tt2 = space();\r\n\t\t\tt3 = text(/*c*/ ctx[0]);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\tl: function claim(nodes) {\r\n\t\t\tt0 = claim_text(nodes, /*a*/ ctx[1]);\r\n\t\t\tt1 = claim_space(nodes);\r\n\t\t\thtml_tag = claim_html_tag(nodes);\r\n\t\t\tt2 = claim_space(nodes);\r\n\t\t\tt3 = claim_text(nodes, /*c*/ ctx[0]);\r\n\t\t\tthis.h();\r\n\t\t},\r\n\t\th: function hydrate() {\r\n\t\t\thtml_tag.a = t2;\r\n\t\t}\r\n        // Rest of block omitted for space\r\n    }\r\n}\r\n```\r\n\r\nWhen the component is created by client-side Svelte code (for example, when you load a different page and navigate to the page with this component, or after HMR), the `create()` function is called. It creates an HTML structure like this: text node \"1\", whitespace node, `@html` node (which will contain the text node \"2\"), whitespace node, text node \"3\". When the component takes server-side rendered HTML, the `claim()` function is called. It expects an HTML structure of the same shape as the structure the `create()` function would produce: text 1, space, `@html` containing text 2, space, text 3.\r\n\r\nHere's the HTML that's produced by the server-side rendering, *exactly* as it was delivered to the browser (including the extra newlines and one line that's nothing but three tabs and a newline):\r\n\r\n```html\r\n\t\t<div id=\"svelte\">\r\n\r\n\r\n1 <!-- HTML_TAG_START -->2<!-- HTML_TAG_END --> 3\r\n\r\n\r\n\r\n\t\t\t\r\n\t\t</div>\r\n```\r\n\r\nThere's more HTML, of course, but that's the important part for understanding the cause of this bug. You'd think that this would produce the same node structure as `create()`, i.e. text 1, space, `@html`, space, text 3. But in fact, when I set a breakpoint at the start of `claim()` and inspected the `nodes` array in the Firefox debugger, this is what it contained:\r\n\r\n```plaintext\r\ntext node: \"\\n\\n\\n1 \"\r\ncomment node: \" HTML_TAG_START \"\r\ntext node: \"2\"\r\ncomment node: \" HTML_TAG_END \"\r\ntext node: \" 3\\n\\n\\n\\n\\t\\t\\t\\n\\t\\t\"\r\n```\r\n\r\nNotice how the first and last text nodes don't just contain \"1\" and \"3\", they contain \"(whitespace)1(whitespace)\" and \"(whitespace)3(whitespace)\". **That's the root cause of this bug.**\r\n\r\nThe way the rest of the bug plays out is that the line `t0 = claim_text(nodes, /*a*/ ctx[1])` **looks** at first glance to be doing exactly what it should. Before it runs, nodes = `[text 1, HTML_TAG_START, text 2, HTML_TAG_END, text 3]`. And after it runs, t0 = text 1 and nodes = `[HTML_TAG_START, text 2, HTML_TAG_END, text 3]`. It has claimed and removed the correct node. But in fact, `claim_text` has not done the right thing, because of the whitespace around the node. First let's look at the source of `claim_text`, and then we'll see how its implementation is failing in this case.\r\n\r\n```js\r\nfunction claim_text(nodes, data) {\r\n  return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\r\n    const dataStr = \"\" + data;\r\n    if (node.data.startsWith(dataStr)) {\r\n      if (node.data.length !== dataStr.length) {\r\n        return node.splitText(dataStr.length);\r\n      }\r\n    } else {\r\n      node.data = dataStr;\r\n    }\r\n  }, () => text(data), true);\r\n}\r\n```\r\n\r\nWhen `t0 = claim_text(nodes, ctx[1])` gets run, `ctx[1]` contains the value of `a` (the integer 1), so `dataStr` above becomes the string `\"1\"` with no space around it. The HTML node being claimed at that point is the text node `\"\\n\\n\\n1 \"`, so `node.data` contains `\"\\n\\n\\n1 \"`. Since that does not start with `\"1\"`, the `if` block is false and the contents of that text node are set to `\"1\"` instead, with no whitespace before **or after** it. The whitespace after it, though, was important, as we'll see in just a couple of paragraphs.\r\n\r\nWhat **should** have happened here was that the SSR should have returned a div with no extraneous whitespace around the contents. Instead of the HTML I linked above with several blank lines around the `<div id=\"svelte\">`, it **should** have contained exactly this: `<div id=\"svelte\">1 <!-- HTML_TAG_START -->2<!-- HTML_TAG_END --> 3</div>`. Because then, inside `claim_text`, the node would have been a text node containing exactly `\"1 \"` (a single trailing space after the 1). Then the `node.data.startsWith(dataStr)` test would have been true, the `node.data.length !== dataStr.length` test would have been true, and the `node.splitText(dataStr.length)` function would have run. **That would have done the right thing**, because then there would have been a text node containing \"1\" followed by a whitespace node. I.e., the nodes array after `claim_text` was finished should have contained `[text \" \", HTML_TAG_START, text 2, HTML_TAG_END, text 3]`.\r\n\r\nBut instead, because the `splitText` function never ran, the nodes array ended up containing `[HTML_TAG_START, text 2, HTML_TAG_END, text 3]`. And the next function call, `claim_space`, is where the bug's effects start to be visible. Because its implementation is just `claim_text(nodes, \" \")`. And `claim_text` calls `claim_node` looking for a node of nodeType 3 (a text node). I haven't shown you the `claim_node` implementation because it's long, but it moves forward through the node list looking for one that matches the predicate, which here is just \"a text node\". And therefore, when it finds the text node `\"2\"`, it says \"Okay, that's a text node, sot hat's the one I'm looking for\". It then checks whether `\"2\"` starts with `\" \"` and when the answer is no, it runs the `else` block, which sets `node.data` (which was `\"2\"`) to `dataStr` (which is `\" \"`). **This is the part where the \"2\" disappears from your HTML, because the claim_text function has incorrectly converted it to a space**.\r\n\r\nBut the root cause of the bug is the extraneous whitespace before the text node \"1\", because that made the `claim_text` function not split off the whitespace *after* the node \"1\". And therefore the whitespace node that *should* have been claimed by `claim_space` was missing, and so `claim_space` incorrectly claimed the text node \"2\".\r\n\r\n**To solve this bug, the SSR needs to not render extraneous whitespace around the contents of `<div id=\"svelte\">...</div>`.** Then this whole thing would have worked correctly.","updated_at":"2021-10-10T16:28:22Z","created_at":"2021-10-10T16:28:22Z","creator_user_login":"rmunn"}
{"number":6832,"comment_id":"939531952","body":"Thank you for the excellent investigation @rmunn !!\r\n\r\nCC @tanhauhau who has been tracking whitespace issues\r\nCC @hbirler who has made a number of hydration fixes","updated_at":"2021-10-10T18:40:19Z","created_at":"2021-10-10T18:40:19Z","creator_user_login":"benmccann"}
{"number":6832,"comment_id":"939547427","body":"Hey, I haven't looked at Svelte in a while and I have not analyzed this issue in detail, but I feel this issue might be connected to a `HTML_TAG_*` claim issue that was discussed earlier https://github.com/sveltejs/svelte/issues/6463 https://github.com/sveltejs/svelte/issues/6463#issuecomment-889430684 https://github.com/sveltejs/svelte/pull/6602#issuecomment-892212885 . Was that issue addressed?\r\n\r\n@rmunn if I remember correctly, the `claim_*` functions do not need to be precise. Actually, Svelte hydration (at least back when I worked on it a couple months ago) never assumes anything about the html page that it receives as input. Svelte should still work properly even if it is called to hydrate an entirely different html page of an entirely different website. So, claims not functioning properly due to extra spacing is likely something that could be improved upon, but not something that should cause correctness problems in page rendering. Thus, I believe a fix for this issue should likely target another part of Svelte that might be erroneously assuming that claims always do their job correctly.\r\n\r\nAdditionally, errors in claims generally don't result in correctness problems (but of course, this might not be the case with this particular issue). After the claim phase, all nodes that were originally on the page but were left unclaimed are deleted, and nodes that we want to claim but were unable to find on the page are newly created (and placed in the positions that we expected them to be). So whitespace issues as you describe generally only lead to performance problems (having to delete a node that we could have claimed, and creating a new node since we couldn't claim any node) rather than correctness problems (after nodes have been deleted, created, and repositioned, the page looks as we expect).\r\n\r\nYour description of wrong nodes getting claimed, erased, changed, reordered is actually expected behavior (even though it is weird and not that performant). It would, however, certainly be cool to have even better `claim` implementations that handle more edge-cases so that less deleted/reorders happen.\r\n\r\nWhat is weird here in this issue is that `2` is not filled back in after it has been deleted. Does `@html` not hydrate its content? Does it need the claims to function perfectly? If so, we may need to rewrite claims such that `HTML_TAG`s are claimed first so that no other claims touch nodes within `HTML_TAG`s. Or we should change `HTML_TAG`s to be proper nodes (maybe we can use `<meta itemprop>`?), where their contents become child nodes (not sure if this would break other things).","updated_at":"2021-10-10T20:26:36Z","created_at":"2021-10-10T20:26:36Z","creator_user_login":"hbirler"}
{"number":6832,"comment_id":"1633331998","body":"Is this issue fixes? I encountered a similar problem using svelte 4","updated_at":"2023-07-12T23:30:01Z","created_at":"2023-07-12T23:30:01Z","creator_user_login":"elron"}
{"number":6832,"comment_id":"1634047644","body":"Svelte 4.0.4 added some hydration fixes, so if you're using Svelte 4, please make sure you're testing with the latest version and let us know if it works with that specific version","updated_at":"2023-07-13T11:05:08Z","created_at":"2023-07-13T11:05:08Z","creator_user_login":"benmccann"}
{"number":6832,"comment_id":"1634188217","body":"I'm using the latest version: svelte 4.0.5\r\n\r\nHere's a replicate: https://www.sveltelab.dev/tfpbg025yxmqvpd\r\nCheck out +page.svelte\r\n\r\nis this svelte or the library @macfja/svelte-persistent-store?\r\n\r\n\r\n----\r\n\r\nUpdate: This seems to be a problem with svelte and not the library.\r\nHere's how to reproduce: https://www.sveltelab.dev/iziz4nvzfq2g6l9","updated_at":"2023-07-14T17:39:58Z","created_at":"2023-07-13T12:50:12Z","creator_user_login":"elron"}
{"number":6832,"comment_id":"1636176254","body":"Is this issue a duplicate of https://github.com/sveltejs/svelte/issues/8213 ?","updated_at":"2023-07-14T17:38:16Z","created_at":"2023-07-14T17:38:16Z","creator_user_login":"elron"}
{"number":6832,"comment_id":"1639387855","body":"> Svelte 4.0.4 added some hydration fixes, so if you're using Svelte 4, please make sure you're testing with the latest version and let us know if it works with that specific version\r\n\r\nHave updated the minimal reproduction   [https://github.com/kelvinsjk/sveltekitHTMLTag](https://github.com/kelvinsjk/sveltekitHTMLTag) to run on svelte 4.0.5 and the whitespace claiming hydration problem as described in the original issue ticket is still present ","updated_at":"2023-07-18T04:20:24Z","created_at":"2023-07-18T04:20:24Z","creator_user_login":"kelvinsjk"}
{"number":6832,"comment_id":"1640200241","body":"> > Svelte 4.0.4 added some hydration fixes, so if you're using Svelte 4, please make sure you're testing with the latest version and let us know if it works with that specific version\r\n> \r\n> Have updated the minimal reproduction https://github.com/kelvinsjk/sveltekitHTMLTag to run on svelte 4.0.5 and the whitespace claiming hydration problem as described in the original issue ticket is still present\r\n\r\nHere's a live demo of your repository: https://www.sveltelab.dev/0lxbt6lnamtzq1f","updated_at":"2023-07-18T13:09:00Z","created_at":"2023-07-18T13:09:00Z","creator_user_login":"elron"}
{"number":6832,"comment_id":"1687869567","body":"I also have this problem in combination with an i18n solution which returns HTML. Translations for normal elements are coming but HTML is missing often.\r\n\r\nHopefully this could be fixed, soon.","updated_at":"2023-08-22T09:57:46Z","created_at":"2023-08-22T09:57:15Z","creator_user_login":"alinex"}
{"number":4966,"comment_id":"642565698","body":"I can't really figure out what you're trying to do here, because it's not clear where `activeValue` and `active` come from. A REPL would be useful.\r\n\r\nHoweve, this isn't how you'd apply that class. You'd use the class directive:\r\n\r\n```jsx\r\n<ListboxOption value={item} class:i-am-active={active}>{item.name}</ListboxOption>\r\n```\r\n\r\nNot sure if this helps you or not.","updated_at":"2020-06-11T10:46:38Z","created_at":"2020-06-11T10:46:38Z","creator_user_login":"antony"}
{"number":4966,"comment_id":"642791847","body":"this seems entirely unrelated\r\n\r\nA component can provide a variable to back to the parent, as documented here: https://svelte.dev/docs#slot_let\r\n\r\nthis is how it is expected to work\r\n```svelte\r\n<!-- App.svelte -->\r\n<FancyList {items} let:prop={thing}>\r\n\t<div>{thing.text}</div>\r\n</FancyList>\r\n\r\n<!-- FancyList.svelte -->\r\n<ul>\r\n\t{#each items as item}\r\n\t\t<li class=\"fancy\">\r\n\t\t\t<slot prop={item}></slot>\r\n\t\t</li>\r\n\t{/each}\r\n</ul>\r\n```\r\n\r\nhowever if I wanted to use `prop` in the component definition (like for id, class, aria, etc...) it fails because the property/variable is not defined\r\n\r\n## THIS WORKS\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<FancyList {items} let:prop={thing}>\r\n\t<div>{thing.text}</div>\r\n</FancyList>\r\n```\r\n\r\n## DOES NOT WORK, BUT I WOULD LIKE IT TO\r\nnotice that the `{thing.text}` moved out of the content into, what I've referred to as, the definition of the component\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<FancyList {items} let:prop={thing} id={thing.text}>\r\n\t<div></div>\r\n</FancyList>\r\n```\r\n\r\nexample repl:\r\n\r\nhttps://svelte.dev/repl/2bb7298f885f403eb6cfe1decaa413de?version=3.23.2\r\n","updated_at":"2020-06-11T16:30:17Z","created_at":"2020-06-11T16:30:17Z","creator_user_login":"dasDaniel"}
{"number":4966,"comment_id":"642836911","body":"It will not going to work this way.\r\n\r\n1. the `prop={item}` you provided in the `<slot>` is for the content of the default slot, which is anything within `<FancyList></FancyList>` but not for `<FancyList>` itself.\r\n\r\n2. the behavior you want happen is actually a chicken and egg situation, you need to initialise `FancyList` in order to get the value for `let:prop` from the `FancyList`, however you can't initialise `FancyList` without the value of `id` which comes from within `FancyList`.\r\n\r\n3. Based on the example from the REPL\r\n```svelte\r\n<FancyListItem {item} let:className class={className}>\r\n    <div>{className}</div>\r\n</FancyListItem>\r\n```\r\n- className is computed within `FancyListItem`, there's no reason to need to pass in as props of `FancyListItem`","updated_at":"2020-06-11T17:51:30Z","created_at":"2020-06-11T17:51:30Z","creator_user_login":"tanhauhau"}
{"number":4966,"comment_id":"642845935","body":"I understand, and suspect that it will not be feasible.\r\n\r\nre: \r\n> * className is computed within FancyListItem, there's no reason to need to pass in as props of FancyListItem\r\n\r\njust want to note that this is an *example* of what is not working. In a RWA, I would be doing something like providing a boolean to the parent, so the parent may assign the class. \r\n\r\n```svelte\r\n<ListboxOption\r\n  value={item}\r\n  let:active\r\n  class:lb-active=\"{active}\"\r\n>{item.name}</ListboxOption>\r\n```\r\n\r\nthis would allow for easier creation of reusable components where the styling can be be determined by the parent component, without having to provide a huge list of potential parameters that the implementation may use.","updated_at":"2020-06-11T18:06:48Z","created_at":"2020-06-11T18:06:48Z","creator_user_login":"dasDaniel"}
{"number":4966,"comment_id":"1000889511","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:29Z","created_at":"2021-12-24T16:15:29Z","creator_user_login":"stale[bot]"}
{"number":4966,"comment_id":"1186190536","body":"the example in the tutorial of this subject does not work either!\r\n\r\nhttps://svelte.dev/tutorial/slot-props","updated_at":"2022-07-16T13:54:33Z","created_at":"2022-07-16T13:54:17Z","creator_user_login":"ali-garajian"}
{"number":3492,"comment_id":"583791379","body":"This workaround worked for me:\r\n```\r\n<script>\r\n  export let stream\r\n  let video\r\n\r\n  $: if (stream && video.srcObject !== stream) {\r\n    video.srcObject = stream\r\n  }\r\n</script>\r\n\r\n<video bind:this={video} autoplay playsinline></video>\r\n```","updated_at":"2020-02-09T18:51:54Z","created_at":"2020-02-09T00:32:58Z","creator_user_login":"stephanos"}
{"number":3492,"comment_id":"583794881","body":"@stephanos as for me there is more convinient option to get this done using actions (:use).\r\nYou could to reuse this function in any other component as well.\r\n\r\n```\r\n<script>\r\n  export let stream;\r\n\r\n  function srcObject(node, stream) {\r\n    node.srcObject = stream;\r\n    return {\r\n      update(nextStream) { node.srcObject = stream;  },\r\n      destroy() { /* stream revoking logic here */ },\r\n    },\r\n  }\r\n</script>\r\n\r\n<video use:srcObject={stream} autoplay playsinline></video>\r\n```","updated_at":"2020-02-09T01:38:47Z","created_at":"2020-02-09T01:38:47Z","creator_user_login":"qutran"}
{"number":3492,"comment_id":"583794947","body":"didn't know about that, nice!\r\n\r\n**UPDATE**: beware, the above approach might lead to flickering since at least for me the stream was updated by Svelte continuously. I had to change it to this:\r\n```\r\n  function srcObject(node, stream) {\r\n    node.srcObject = stream;\r\n    return {\r\n      update(newStream) {\r\n        if (node.srcObject != newStream) { // the important change\r\n          node.srcObject = newStream\r\n        }\r\n      }\r\n    }\r\n  }\r\n``` ","updated_at":"2020-02-09T23:43:35Z","created_at":"2020-02-09T01:39:54Z","creator_user_login":"stephanos"}
{"number":3492,"comment_id":"1001694688","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T18:38:07Z","created_at":"2021-12-27T18:38:07Z","creator_user_login":"stale[bot]"}
{"number":3492,"comment_id":"1646528240","body":"Any update on this?","updated_at":"2023-07-22T08:37:58Z","created_at":"2023-07-22T08:37:58Z","creator_user_login":"thanhdatvo"}
{"number":3398,"comment_id":"521412348","body":"Another example of strange crossfade behavior.\r\nI have two groups of lists. One under the <hr> and one above.\r\nThe elements seems to flow from the list from under the line, to the list above the line.\r\nThey should not cross the line.\r\n\r\nSo it looks like the crossfade function does not return a unique send/receive pair for each component.\r\n\r\nWhat's even stranger, is that the keys are not the same.\r\n\r\nhttps://svelte.dev/repl/30b4891e3a8d4d39bd4832e50dfdcc87?version=3.8.0\r\n\r\n- \r\nEdit: Maybe crossfade is not possible between components?\r\n\r\n","updated_at":"2019-08-14T21:01:47Z","created_at":"2019-08-14T20:47:14Z","creator_user_login":"knobo"}
{"number":3398,"comment_id":"1001643277","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T16:24:03Z","created_at":"2021-12-27T16:24:03Z","creator_user_login":"stale[bot]"}
{"number":3398,"comment_id":"1002138273","body":"The first works correctly when I remove `animation:flip` ","updated_at":"2021-12-28T14:43:58Z","created_at":"2021-12-28T14:43:58Z","creator_user_login":"dummdidumm"}
{"number":3398,"comment_id":"1002469344","body":"The flip thing is taken from this example: https://svelte.dev/examples/animate\r\nThese two animation directives are stepping on each others toes.","updated_at":"2021-12-29T09:03:05Z","created_at":"2021-12-29T09:00:59Z","creator_user_login":"knobo"}
{"number":3642,"comment_id":"869055013","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:55Z","created_at":"2021-06-26T20:03:55Z","creator_user_login":"stale[bot]"}
{"number":3642,"comment_id":"885777376","body":"I think this is a good idea. The vast majority of the comments on the linked issue support this change. The only possible hesitation was that text nodes are less cluttered when you open devtools - though I somewhat think the clutter is a good thin as it makes it clear what Svelte it doing and provides impetus for making it stop creating lots of empty text nodes. In the meantime, this is better performance","updated_at":"2021-07-23T17:06:08Z","created_at":"2021-07-23T17:06:08Z","creator_user_login":"benmccann"}
{"number":3642,"comment_id":"1468316934","body":"I think using comment nodes would spam the browser elements view quite a bit. I feel like we should investigate using fewer of those empty text nodes instead.","updated_at":"2023-03-14T15:26:41Z","created_at":"2023-03-14T15:26:41Z","creator_user_login":"dummdidumm"}
{"number":3642,"comment_id":"1469332493","body":"I would love to see this change land as part of a dev vs prod style flagging system where the output in prod mode is allowed to be a bit uglier for the sake of speed/size/etc. ","updated_at":"2023-03-15T04:52:58Z","created_at":"2023-03-15T04:52:58Z","creator_user_login":"tivac"}
{"number":4302,"comment_id":"577145122","body":"Basically the same as #1779, and I still have the same concerns about making Svelte responsible for decoding entities at runtime, especially in SSR.","updated_at":"2020-01-22T11:49:38Z","created_at":"2020-01-22T11:49:38Z","creator_user_login":"Conduitry"}
{"number":4302,"comment_id":"577191737","body":"Another perspective is that this opens up yet another opportunity for XSS/CSRF exploitation.\r\nI think the less places we support injection, the better.\r\n\r\nhttps://owasp.org/www-project-top-ten/","updated_at":"2020-01-22T13:53:56Z","created_at":"2020-01-22T13:53:56Z","creator_user_login":"ghost"}
{"number":4302,"comment_id":"577230436","body":"@Conduitry I'm not seeing how it should be able to decode html entities, as it just shouldn't encode them to begin with? \r\n\r\n@dkondrad It does, but thats why it would be in an explicit {@html } tag. ","updated_at":"2020-01-22T15:07:53Z","created_at":"2020-01-22T15:07:53Z","creator_user_login":"dxlbnl"}
{"number":4302,"comment_id":"577235018","body":"Oh that's true for SSR I suppose. If `{@html foo}` meant to literally insert that string at this point in the server rendered HTML, that would work. It's not really any more of a risk then `{@html}` elsewhere already is. You're taking your life in your hands either way, really.\r\n\r\nFor DOM mode, we'd still need some sort of hidden text area mechanism, because the APIs we have available to us expect literal strings.","updated_at":"2020-01-22T15:17:44Z","created_at":"2020-01-22T15:17:44Z","creator_user_login":"Conduitry"}
{"number":4302,"comment_id":"1039828270","body":"Here's an example from [Bootstrap 5.1 Documentation for Tooltips](https://getbootstrap.com/docs/5.1/components/tooltips/) that contain HTML...\r\n```html\r\n<button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-html=\"true\" title=\"<em>Tooltip</em> <u>with</u> <b>HTML</b>\">\r\n  Tooltip with HTML\r\n</button>\r\n```\r\n\r\nIn my case, I want this...\r\n```typescript\r\n   const title = `<em>Tooltip</em> <u>with</u> <b>HTML</b>`\r\n```\r\nand\r\n```html\r\n<button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-html=\"true\" title={@html title}>\r\n  Tooltip with HTML\r\n</button>\r\n```\r\nfor a website that is not public.","updated_at":"2022-02-15T03:58:14Z","created_at":"2022-02-15T03:58:14Z","creator_user_login":"nstuyvesant"}
{"number":4302,"comment_id":"1241428116","body":"Any tooltip library is going to have this need...as I just found this svelte limitation trying to use html with https://kazzkiq.github.io/balloon.css/","updated_at":"2022-09-09T02:29:52Z","created_at":"2022-09-09T02:29:52Z","creator_user_login":"Jojoshua"}
{"number":3257,"comment_id":"512202764","body":"Does this bring anything beyond what you can do now with `bind:this={elm}` and accessing `elm.validity.valid`? It doesn't look like your implementation exposes this in a reactive way. From what I recall when I was looking at this before, there didn't seem to really be a way to listen for validity changes, beyond listening for all changes to the input and then manually checking `validity.valid`.\r\n\r\nIf we were to accept something like `bind:validity`, we'd at least want it to be reactive, so other code can know when this has changed.","updated_at":"2019-07-17T10:46:06Z","created_at":"2019-07-17T10:46:06Z","creator_user_login":"Conduitry"}
{"number":3257,"comment_id":"512219052","body":"> Does this bring anything beyond what you can do now with `bind:this={elm}` and accessing `elm.validity.valid`? It doesn't look like your implementation exposes this in a reactive way. From what I recall when I was looking at this before, there didn't seem to really be a way to listen for validity changes, beyond listening for all changes to the input and then manually checking validity.valid.\r\n\r\nI tried this, but it is not updating the view on changes. So you additionally need to use `on:input`.\r\n\r\n> If we were to accept something like bind:validity, we'd at least want it to be reactive, so other code can know when this has changed.\r\n\r\nWith allowing to use `bind:validity` it will invalidate `validity` inside `input_input_handler`, I saw in the compiled bundle.\r\n\r\n```js\r\nfunction input_input_handler() {\r\n\tvalue = this.value;\r\n\tvalidity = this.validity;\r\n\t$$invalidate('value', value);\r\n\t$$invalidate('validity', validity);\r\n}\r\n```","updated_at":"2019-07-17T11:46:25Z","created_at":"2019-07-17T11:44:33Z","creator_user_login":"bbuhler"}
{"number":3257,"comment_id":"512220884","body":"Oh, sorry, I didn't realize that invalidating the `validity` binding was something that was already happening automatically with these changes. Interesting.","updated_at":"2019-07-17T11:50:37Z","created_at":"2019-07-17T11:50:37Z","creator_user_login":"Conduitry"}
{"number":3257,"comment_id":"1001539451","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T12:10:57Z","created_at":"2021-12-27T12:10:57Z","creator_user_login":"stale[bot]"}
{"number":3257,"comment_id":"1001544531","body":"Oh my. Nope, stale bot. I hate you.","updated_at":"2021-12-27T12:22:51Z","created_at":"2021-12-27T12:22:51Z","creator_user_login":"frederikhors"}
{"number":8099,"comment_id":"1344137631","body":"You need to provide a REPL.\r\n\r\nAnd GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).","updated_at":"2022-12-09T10:38:42Z","created_at":"2022-12-09T10:38:42Z","creator_user_login":"baseballyama"}
{"number":8099,"comment_id":"1379782804","body":"@baseballyama this isn't really a support question in that way.\r\n\r\n`fetchpriority` is a new attribute on [`<img>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority) and [`<link>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/fetchPriority) that should be recognized by Svelte. It is missing from the declaration here: https://github.com/sveltejs/svelte/blob/967e9f51ff649f776fa034db8aba23a5a1546294/elements/index.d.ts#L695\r\n\r\n```\r\nfetchpriority?: 'high' | 'low' | 'auto' | undefined | null;\r\n```\r\n\r\nI don't really know how to do a REPL for this because the svelte.dev/repl does not report any issue, but svelte-check does. Here is the svelte-check error from my SvelteKit project:\r\n\r\n```\r\nError: Argument of type '{ src: string; srcset: string; alt: string; loading: \"lazy\" | undefined; fetchpriority: string | undefined; }' is not assignable to parameter of type 'HTMLProps<\"img\", HTMLAttributes<any>>'.\r\n  Object literal may only specify known properties, and '\"fetchpriority\"' does not exist in type 'HTMLProps<\"img\", HTMLAttributes<any>>'. (ts)\r\n                                        loading={priority ? undefined : 'lazy'}\r\n                                        fetchpriority={priority ? 'high' : undefined}\r\n                                />\r\n```\r\n\r\nAll you need to do is add `<img src=\"https://svelte.dev/_app/immutable/assets/stopwar-947a4798.svg\" alt=\"Svelte\" fetchpriority=\"high\" />` somewhere.","updated_at":"2023-01-12T04:05:05Z","created_at":"2023-01-12T04:03:26Z","creator_user_login":"bdougherty"}
{"number":8099,"comment_id":"1636860581","body":"@bdougherty is correct. This isn't a \"tech support\" issue. `fetchpriority` is still experimental, but it does have pretty good browser support. I would expect to be able to use it in a Svelte app.\r\n\r\nReferences:\r\n\r\n* https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\r\n* https://web.dev/fetch-priority/\r\n\r\nThe excellent @KTibow put together a replication [here](https://www.sveltelab.dev/?t=typescript#code=N4IgdA5glgLlEDsD2AnApiAXKAZlANhtiAMZIIxoUDOWoA1lAgCZYjUBua%2Bl%2BAhgCMAtAFcoADj4gANCAEicONCiwBtACwA2aZvHTxAZmkBOAKz6jARkvbrl6dfUOADPcvOH7z2%2Bcf39sxdjbxc-SwB2Fz1-T3MvdUjjaIiXOOdo3xdpBOzbSzjLDJ9k21dstMj3AtLsyssAJhNE4PdEyucrMvjSty9rDNyXXrC9LWzGrwMjMZjrEcHrc2N2loaooaz%2B1M8eweNV4ZcJ5zTp0rzzGZtt9xau-J2moM9G9UvjzwzqjbH9kLmjjcOgtrosQaU0ndet9ls9rK93i4ALoAXzRsjAAAd0DA4MoUCQ6CA8IQiWQKFQYLRiIwWGxONxeIJRBIpLJ5IplGoGp0TNIDE5rHU0vZxE5YUlYvynKY9AYJqDLIKUjF1IKPMEBVKqp4-MD3EV9L06r1dlrZfyFXlle17GqsprldanjqDTc%2BsDNCa4c5grDzXLGlqAXZdRstfavI6Xp51QUwtpxO00gmXE4A5bssF1KNRuq%2BcG1m6hS5OvGpRn5SZ7IWFerTY9XfcnG8Y8WVfqTmHW2CtrN0o2ylrjNN89H4esS%2B4y2HDBtYY4THcnLp3crzJXGsYay3tMPRw7pf9ChtF2eu%2B49dCjxaq9uHPUjFXg85jmlDWDN0f1K8Lp9TwO1hmi26ZBsqvRWu6hyfjKgYPk%2BYExguSras2N5wYWBQfoBoJDqBD4bhM9RLLyDRpKi6IgJifAkPQfAQGgYAAFbUOQRIkkQoDkpQNBErSrCYOwXA8NwzJiJIMhyAoSgqJgqg8oehYais4awZmmH-v2JQAXoEqjN8DQQaeDx-OeBSQRGY5Hn2aG9he1hhl%2BEajNoOaDOo0aRhq1lFihronshwHSLekFnh2dpWYWtj1EZMROeqByhJ47SGpZinrkusbuqFDxfgpUYFuKyTJpOmTxZp9lmluxVAhkHhpQV46ZLMJ7lTZBlDscV7-g13njr59YVSKnjRiFPlfIONYKnWxkTS1nlWU1Cq9AlLrXG1A3GXkELGfhrY9kWOHtDOAIHcNyHisu5RJf5e17gi13WKscaTZmYy9Xy0amc4g3fZEG1YTpr09s4JVAZmvYxWGfzPnKcG9ieWnA0sV0xH9b2XAZJmJSGr5Agh7ntH%2BpkObjb6lgszh-qGAIvnyZHZJF6rdVsq4tcc0HNfcGp3MNMHBfDj6HtGmgZTZxSve4f45AumTIaFaGtshdR5DuAvqeKMoeGMbk63KIHC0eovaojXQ4bsUtSjkrTunuanPprWaDKY2sucFiFeZ9PkzS121Ait6EayYWvO65rn64zhu1llvuDnzKEHccNXTu62sFIDSPg3F9uIcYIc69mbsed%2Bi0%2BRnZvadn6sO8H7vuUXEee36ZcVRLWdlErqNlOj5V58FdraKYv79yXUdOqhE2Sr3%2BeD8Pxcfc3UUPrF9wozH9kWTnR596YZzZA3o%2BNeNtuqdXucysPpgD8F6ZWQzfTEciaIorI1AEkSzBQOgJAwKgACeRI%2BCYkxGAZgYAqTsQIJxUg5AeIQJpEwASQlGSiWEOJNkUlOSyQ0JEHIVY5z9immmRsioFTmAtDka2oMT5XHLm3XC19LyzVqDdByJNLgq2Xm2Ve-Ilh1GmlkSh-1jjLSylWfyepRHnj9Jw-yhw7yJGSMaR44jcKDTskQiRks-J4wlFCVCN1u53F0nUQa4jOxKJMCY9Y4ihYFQBLLfRCMtzNHDI0TQ5kYy2N5M3IREN7KphauqFxmU4ruOejHUmKFvEEUNn48x5Z24B3cCE76RDwiq0yrLZIhF4KxKPvE8mIYGHr1Sfo-BykKYxFXIFJ4MT759RYXgopfQSnnjKW4-QeprHtykTozURErCP3scMvwozNhdHqGEPp496mP1MHcCiL8QBAJAQACxgAAW3wJA0kxBuKUmpAwRB9JhJMjQaySSHIZJqE0PVIwq5wjBC9PoJw4hgjiA8JoAZxD27GJ0B8O5vzcL-PMT0j0Dy1YtXqiuD4zy9S-XaF8uFfIgW3C2nUrcV0LqoQbJoKFKpcIPVMHbN6kRNAovhaVRJ1DVHqIHPi6yXYSbyPwu4ZU9L3FqwMMKVuk42nUP8mHNa6cMWflwe0EJ7VQlRO1nkBUeonx7XJZSnQeonHXH9Aql0voNiMsLHNe4qwZkqPwiysMSSLXXH1cqXmrDSgrh8CzU2a9VQFDtUw9ut8yUAqjry8W-KLaCsqpTRFSUeWHiBVQsNTCKWRo1JYz1UNzGVPBrCM6fL2xBrBtcRO696EBCRY9OWnDYQ2uBb0D80TYWGzRVzQGqiDJQ2LGUctnr7KeLdAuKGY1zXFItq0v8Wo40RoRthSuZsc3CslDTZqybyXayLf5PQcaCpRsUf8Od9hV1fMXcC0o-yd1LNkPgKAAgP5fzQD-f%2BRIADCSARAUhQGABkIldnQIObxBBdJBKvvOSyCS7JpJcjkmi7G69O3rSTmtRVOgCVDprfYwC9x7oyuUf2zM%2BrXh6AWRMgsg94YXjxlWdQPNjx1FTFWONWGna600XYxp2TdqPFIyYbQfbCWUZabkphyFYNBPIxPLh5iXop3ZfyIwxhXL2Fw0fDjFGVFcszKYSIsnvINMPCk5K0NVg7RppMY44oFPtsNC8ltrrqGsfUPRnxn0caccU9kSFb1ghqfpuM9dUoSaid8toHdWQgUzsJX7fT9U%2BkeAtN9SedxyVuAY0Zi1XNTMpW2OjBm-nnkpZ1Gls2YW8nyatdFNI7nJP2eM1BuDlWaPz3cQTAwumgTlJ%2BWNerccfTXlaxpzzQXZGKkOEe5%2BlEUAPsoEckAn9v6-xQAA4gABqfgf8RsvrOdAjiZJYGHL4ic39K3%2BAXMA5gm5oGwiup0ZBvzKKmzGuPLMoM2ZXLHX5QEHpA5firFFa1tznmwTeeyo8fzXgwPvmPKhnIA3KKzeogxF9yguDPvgbgKB62KRfuOT%2B5BIk9sAYwdckD8lJnTJu455CcRm1Rh%2BVpqc5O2uhf8ZY2W2ttY2c0zohsVPlR5fyo0hxKkYgtY%2BYKMnHMLAyp8xZO47nyES4acekAkP6KMT-atpH%2ByNuo5APxU5KCsfoKucB7BdbIQU0bVlP4bafokPlVKChEqTboZQmkkE5XO0DhJ8Qt7m7syqddvvB8EWfe63JZ0To9PUpmqy9atW4QC1WNPuY4XabUabTkRBxsUNzeJssNGEjKrZcQHwEgAQfB8BgBINQMba3Vco4Rxr7bGP-266A1gtQFowq9AbPU7y%2B1RU2yVtY9GIMt4u196YGUEvsyY1QrgpY-eYvXSvsWsWA4xpuYn49B4veZ9PAH5cVzhGl%2BjAD3tOUuC9qF19xG6zwVx-XQzZv2PeiXDT%2BChF-fQmrN5jeifyOJHz9uUvzJjft3lPtdJKI-vfgvmNOJnZIfi-iPgbFWKPnXJfvhCpsFHuLgoAYeMAXZM-mAa4hAY0FARbjAdkP7vAT-kQVQfyKfspqpjWJgdftgZPrgaAbPk-vPkYMQQfmQXAW5EgfaIgT7igcpuHDQdkFgQVDgRvpZh1HFqmPtHvv4jwR-pQRfrQb-iPAAUwVISwTIc-pag0AoeQq-soe-kfl-uIYIUQRFhuIwavrfj3rIZLFMixuQjJm-qQaxsPkPL7tYegVYagdQdoQ4dIRUOvg6gBPoooWfMCsDlZq5geJobrN-v4bvMFE%2BPYUAXoeEQdJEf2NESYbEdATIbAT4dhmoSSoEcpsEVkcwevrkR1PSoUSPNweYXwThq8Gfn4akagTKAwRIToV3jkRwSDOFo8PztIE8pmn5GsG7p%2BNmHtHwm2IdIaHfmTnIc8P4ZoKUHNB6JEOEG0JlAQhsZLLquEGENBLmvhK1gQmbFYKTJ1PoOYOEE%2BIsZmOIKIkFmzg5P4dMUYVwmJtzGoeIFvlToEikE3KikcRhjipnK9jccEBcWuJiiLnxhWO8c%2BM8skOBECHlnOOiQsWoa1uEAnjhFWjtH8FqlMVWraPyJiWQjBlbE4ckkRkQdkQ0aMWkOMeDCDPZpcbESSXqAUAllWIcceAKa1v4eirTvpp4uAWUG5hplGImluhDAxp9OwTbGJrMfbnqGnGhk9llFAQFKYrwWEVyQ-gQc4Qvlfg4X2jhAHCaeCi2AaXfs4YYa4bybvoMQ4einCZ2OWGNLrIPOQp0D4K5jfpTrKm4YCI4rVFws6WtK6Y4SAWMRKSxpIX1K4o7hhp3JupnlvFsDilZiMffl6lET8D6XadLuMoDqtP2MKaiaxhOOeD4AnrMZPg6YWZyd9M0RsMQamjoowZ3nyK3rqSDuqbZmvu6XgVqc4cXG0V4RYSRr0S5uob6TfjOU4XOdvnPq2D4Z4aUeaZ-qudUZoVUSEVuamawX3nuZaZAUefESuRUSIReUGHUQUmWc4fgaEjaUQU%2BesKof4f-hoTYXAVeXEt%2BbuQqc-ukUucecBcfuedQaBZuVBZyeWW0l6bmj6Qhc%2BX4chW%2BUQbgqkVmV7BaVhRbDha5EUfhUBS%2BRuWkWIZBV%2BZhR6dhcYa0YBW6EhZYcRTfBkVYeRS0HWX1KqWMsznJjjI6VlBmn2ZWXzoRkOeqKplGWJZ9MInktJQWUTkmSWW6TuREb8mbC0baSJfknqJperNKnZJsUwqOc3N2XpTxa9uQUgaYJcN0SkShcFGGcJUMZLpsKMksoNq-CtqXuQHgBAMxBXirlxGrjXprjttrmJJck3kdvjkbq2VErdjqkOQrAHPHpEhGepM8mLKbPQkGtLDCSWisQOi2MsVTpkp9tLkRtdvpnlQpKonsbsJ8vmisbibmRvrlERDxnjG3s8FiToBVeOmcTVRwUKiwrZSUq1XhpQq8EGO4uPIZNwlJe1SsckrmvVOVSbHNYYVTFbO0FOvSYMWMGZjGZTkRkMrkj%2BMtWRrKSNahhxpIvjJhvtXyIUjoN6MUgUBHqhiUSFr5OQqMLbtqSGrQpmubD8KUM6rDawgEO9u9YkgKg8Qlu3AUFcRuJBuosnmwhqj3rlQYl7iwsVZ1f4vZmYi0r9fTf6bIvZPIqkpnpwqoj7PcD7OTcZJTUdcVh1azoNSEMNaKkmUtTEP1W2RLaGFLVbEzpHB6PTMGt8FARqb4rbgoklPLNoo1WtL1poo9YBMmoyVTgIqzYqDxiNaVWEsZPMLdBmTKcCVnA8NKTIT4JoiQYqFbmCDbu9TdYjQGlmijYYpWu9QKewiwgzmtIVXJU1cFiEHTVTfrWCu6N8DMI0kDa8YCLYu3tpouOYlcXsbibjBqlxtnRDK0h3lbYSjbVTRdZzhnURMXSWCbrHO3NhG3Zzaic4vOB6hNcyhTh7S6iVYltXSxmyiNR6pqldKovbhDWop0gnYbYYQnDULrbTY0Hcb7WYZ7YHQ8MHVQqHdTJVYGpHe2tHVQrHVjTLEWpvW0p2f4iauYozZ0lotGayTIjTjGfrd8SXRVhvfwkbVbDvdZbxuA1vVvGA-VcxlZj4EFQ-FLnhrMDhSauDCmgBFKh2NpHePyYCE2FwYss-LIFSOSNFbFWxMQJXgldXmNslfXqgtjnrs3nJFzoVKeDRc7awhuFvBGA9iCHQtfW6otQjb1qdpzEUsCLnZfaymrd5MODJR1URlWk4P8b5lBFaoI8UTrTw0xu2L0EiRlHlIqDaD8KXKoyZZjRweEOY0WZYyXR3DY6TS8SDc1AQxsAXRhgJvpohCac6FOG42PCQ1TY7g9UTbXVvamC8vMQEhTH414MiU2IaOEC9hTYHKoiE%2BFMo17IWB47pQGo43bmGOKbOmEFlnhMUS46ExFOE6wf5I0Bkqliuu0L9HPhY3k3SVCf1ITSA5dL4zCWsD05En0%2B4ybCE2PaanU70wBKg13nrfvUOZEfreZiKkLZmAGX7fjR6N0gBHljOpbfuiQoyWfddTQpfedSUrnWjTHZLY-QQebXIw8WabUinrTE1chinaLU0u0IDSs1MZ0FtYCVElpU9EyTgzlGbdHQE1nqnpagkjpvykujwlQvIX%2BcnFzNeNKbqrLHSd3YSkzSQkQhxh3XXfC2hLk3Y3XfSlWuCjXVolFq486hwrwx9UdFHdTQC%2B-VPeirS9AU8QrU9ayYcLmWVDlDI4lm85TIo45A9PgoLivKKKVkizo7g7Oh1tqvphDbqgE52GbfkaZf4jSpZbLhwLAIxNQ-AOAnFXsow3Asw3XkrjrulYdnjldodZEhDULMS7c9mifLYuNQLaVdNcbGOkDBdQtfDTnXUL1eGJGRMtlb5EdX6wTLfSQ0k9UiDR6HKyG-y5NYK3dkNK9GterZg4TrbfqyzLonUODf4nW8zXqnmyzc9bwdw%2BoziydK0jDTs9eOHcjf2KHarSOMFZcFmaFUAA\r\n).","updated_at":"2023-07-15T19:15:20Z","created_at":"2023-07-15T19:15:20Z","creator_user_login":"jamesarosen"}
{"number":8099,"comment_id":"1636861163","body":"The Svelte docs have a section on [Enhancing built-in DOM types](https://svelte.dev/docs/typescript#enhancing-built-in-dom-types). Based off that section, I would expect this workaround to work, but it does not:\r\n\r\n```ts\r\ndeclare namespace svelteHTML {\r\n\tinterface HTMLImgAttributes {\r\n\t\tfetchpriority: \"auto\" | \"low\" | \"high\" | null | undefined\r\n\t}\r\n}\r\n```","updated_at":"2023-07-15T19:18:24Z","created_at":"2023-07-15T19:18:24Z","creator_user_login":"jamesarosen"}
{"number":8099,"comment_id":"1636995829","body":" Only chromium support it in the stable release. I don't think it is \"have pretty good browser support\". Typescript also doesn't have it in their DOM definition.  We have an issue with it in the language tools repo. But I declined it because only chromium support it. Although it has been nearly a year since then, The situation is basically the same. ","updated_at":"2023-07-16T06:36:02Z","created_at":"2023-07-16T06:36:02Z","creator_user_login":"jasonlyu123"}
{"number":8099,"comment_id":"1637091245","body":"Around 67% of traffic can use it already, so it would still be useful in the cases where it works. Safari has it behind a flag too. On the other hand, this issue might be resolved by having better documentation on how to extend element types, as it seems most people fail while doing so.","updated_at":"2023-07-16T13:57:12Z","created_at":"2023-07-16T13:57:12Z","creator_user_login":"KTibow"}
{"number":8099,"comment_id":"1637137848","body":"> On the other hand, this issue might be resolved by having better documentation on how to extend element types\r\n\r\nAgreed. `fetchpriority` is only one experimental attribute. There are many others and there will be more over the years.\r\n\r\nhttps://www.sveltelab.dev/x81qkcafntbqgd5 shows that the [documented method](https://svelte.dev/docs/typescript#enhancing-built-in-dom-types) for extending built-in types does not work. (Or that the documentation is insufficiently clear for how to add attributes to one element type.)","updated_at":"2023-07-16T16:55:37Z","created_at":"2023-07-16T16:55:37Z","creator_user_login":"jamesarosen"}
{"number":8099,"comment_id":"1637240170","body":">Based off that section, I would expect this workaround to work, but it does not:\r\n\r\nMake sure you're putting the declaration in `.d.ts` that is not a module, i.e. has no import/export. If it's a module, you must wrap it inside a global block like the `App` namespace in the SvelteKit's `app.d.ts`. Otherwise, TypeScript will ignore those.","updated_at":"2023-07-17T00:46:47Z","created_at":"2023-07-17T00:46:04Z","creator_user_login":"jasonlyu123"}
{"number":8099,"comment_id":"1649856952","body":"Is this something that you guys want getting fixed? People in the discord are asking for first tasks so I was looking for issues with the \"good first issue\" tag and I found this, but based on the conversation it sounds like you want to wait so I'm unsure about recommending they work on it.","updated_at":"2023-07-25T13:33:23Z","created_at":"2023-07-25T13:33:23Z","creator_user_login":"Zachiah"}
{"number":6493,"comment_id":"873938982","body":"I made it work like this for now:\r\n```html\r\n...\r\n{:else if col.type === 'custom'}\r\n    <slot col={col} value={row.data[col.key]}></slot>\r\n{/if}\r\n...\r\n```\r\n\r\nAnd inside the component:\r\n```html\r\n<DataTable bind:cols bind:data\r\nlet:col\r\nlet:value>\r\n<!-- Could contain a button, icon div or anything we'd like -->\r\n      {#if col.key === 'custom1'}\r\n        <span>\r\n          <button\r\n          on:click={(e) => {\r\n            e.stopPropagation();\r\n            console.log('asdasd')\r\n          }}\r\n          >TEST</button>\r\n        </span>\r\n      {:else if col.key === 'custom2'}\r\n        {#each value as v}\r\n          <p>{v}</p>\r\n        {/each}\r\n      {:else if col.key === 'bool'}\r\n        {#if value}\r\n          TRUE - {value} - {col.title}\r\n        {:else}\r\n          FALSE - {value}\r\n        {/if}\r\n      {/if}\r\n</DataTable>\r\n```\r\n\r\nhttps://svelte.dev/docs#slot_let","updated_at":"2021-07-05T09:08:55Z","created_at":"2021-07-05T09:02:38Z","creator_user_login":"csangonzo"}
{"number":6493,"comment_id":"896497150","body":"I have this problem too, I build custom DataTable too ü§£ \r\n\r\nBtw thanks @csangonzo for the workaround, I like your idea. But it's still hard to use. Still far from ideal dynamic named slot. Hope this feature coming to svelte soon. This framework is awesome and very fast","updated_at":"2021-08-11T04:47:46Z","created_at":"2021-08-11T04:47:46Z","creator_user_login":"axmad386"}
{"number":6493,"comment_id":"900312159","body":"I have this problem too, I build custom DataTable too ü§£\r\n","updated_at":"2021-08-17T13:45:21Z","created_at":"2021-08-17T13:45:21Z","creator_user_login":"vnaki"}
{"number":6493,"comment_id":"917619315","body":"this problem is pretty common , if you build tab ui","updated_at":"2021-09-12T11:42:15Z","created_at":"2021-09-12T11:41:53Z","creator_user_login":"pradeep-mishra"}
{"number":6493,"comment_id":"942084716","body":"I wonder if there is a common way to deal with this case. Is this the reason at compile time? üò≠","updated_at":"2021-10-13T09:00:55Z","created_at":"2021-10-13T09:00:55Z","creator_user_login":"robin-shine"}
{"number":6493,"comment_id":"1049541375","body":"an another method maybe helps you https://github.com/yus-ham/blangko/blob/db7e475c704454d418e1f6e7331452932e6a5b6d/src_front/pages/posyandu/index.svelte#L13-L38","updated_at":"2022-04-08T14:50:36Z","created_at":"2022-02-24T06:38:43Z","creator_user_login":"yus-ham"}
{"number":6493,"comment_id":"1092454425","body":"In addition to the datatable example, I'd like to add another use case regarding advanced i18n interpolation.\r\n\r\nFor example, if we want to create something like this `User clicked <FancyLookingNumber>{2}</FancyLookingNumber> times`. It would be great if we can do this in svelte:\r\n\r\n```svelte\r\n<Trans message={t(\"user-click\")}>\r\n  <FancyLookingNumber slot=\"count\">{2}</FancyLookingNumber>\r\n</Trans>\r\n```\r\n\r\nIn English, `t(\"user-click\")` returns `User clicked {count} times`. The `Trans` component extracts `count` from the text and create a `count` named slot dynamically.\r\n","updated_at":"2022-04-08T05:26:04Z","created_at":"2022-04-08T05:26:04Z","creator_user_login":"crimx"}
{"number":6493,"comment_id":"1111179761","body":"> In addition to the datatable example, I'd like to add another use case regarding advanced i18n interpolation.\r\n> \r\n> For example, if we want to create something like this `User clicked <FancyLookingNumber>{2}</FancyLookingNumber> times`. It would be great if we can do this in svelte:\r\n> \r\n> ```svelte\r\n> <Trans message={t(\"user-click\")}>\r\n>   <FancyLookingNumber slot=\"count\">{2}</FancyLookingNumber>\r\n> </Trans>\r\n> ```\r\n> \r\n> In English, `t(\"user-click\")` returns `User clicked {count} times`. The `Trans` component extracts `count` from the text and create a `count` named slot dynamically.\r\n\r\nMy workaround involves passing an array prop that gives the names of the slots, pregenerating some named slots with numbers, binding the contents to a variable, and then just setting the children of the element once my translation is looked up.\r\n\r\n\r\nHere's what it looks like:\r\n`LocalizedText.svelte`\r\n```svelte\r\n<script>\r\n    import { onMount, onDestroy } from \"svelte\";\r\n    import App from \"../app.mjs\";\r\n    import translate from \"../translate.mjs\";\r\n\r\n    const unregister = [];\r\n\r\n    export let opts = {};\r\n    export let key;\r\n\r\n    export let slotMapping = [];\r\n    let slotContents = {};\r\n\r\n    let language;\r\n    let contentElement;\r\n\r\n    function render() {\r\n        if (language) {\r\n            const { result, usedFallback } = translate(\r\n                language,\r\n                key,\r\n                opts,\r\n                false\r\n            );\r\n\r\n            let newContents;\r\n\r\n            if (usedFallback) {\r\n                newContents = `<span style=\"background: red\" title=\"NO TRANSLATION KEY\">${result}</span>`;\r\n            } else {\r\n                newContents = result;\r\n            }\r\n\r\n            newContents = newContents.split(/(%\\w+%)/g);\r\n\r\n            for (const [index, value] of newContents.entries()) {\r\n                if (value.startsWith(\"%\")) {\r\n                    const slotName = value.slice(1, -1);\r\n                    const slotId = \"item\" + slotMapping.indexOf(slotName);\r\n\r\n                    newContents[index] = slotContents[slotId];\r\n                } else {\r\n                    const span = document.createElement(\"span\");\r\n                    span.innerHTML = value;\r\n                    newContents[index] = span;\r\n                }\r\n            }\r\n\r\n            if (slotMapping.length > 0) {\r\n                console.debug(\r\n                    \"[LocalizedText] localized with slots:\",\r\n                    key,\r\n                    slotMapping,\r\n                    result,\r\n                    newContents\r\n                );\r\n            }\r\n\r\n            contentElement?.replaceChildren(...newContents);\r\n        } else {\r\n            contentElement?.replaceChildren(...[key]);\r\n        }\r\n    }\r\n\r\n    onMount(() => {\r\n        unregister.push(\r\n            App.on(\"language\", (l) => {\r\n                language = l;\r\n                render();\r\n            })\r\n        );\r\n    });\r\n\r\n    onDestroy(() => {\r\n        for (const un of unregister) {\r\n            try {\r\n                App.off(un[0], un[1]);\r\n            } catch (ignored) {}\r\n        }\r\n    });\r\n\r\n    // Rerender on change\r\n    $: key, render();\r\n    $: opts, render();\r\n</script>\r\n\r\n<div style=\"display: none;\">\r\n    <!-- We need 10 of these -->\r\n    <span bind:this={slotContents.item0}><slot name=\"0\" /></span>\r\n    <span bind:this={slotContents.item1}><slot name=\"1\" /></span>\r\n    <span bind:this={slotContents.item2}><slot name=\"2\" /></span>\r\n    <span bind:this={slotContents.item3}><slot name=\"3\" /></span>\r\n    <span bind:this={slotContents.item4}><slot name=\"4\" /></span>\r\n    <span bind:this={slotContents.item5}><slot name=\"5\" /></span>\r\n    <span bind:this={slotContents.item6}><slot name=\"6\" /></span>\r\n    <span bind:this={slotContents.item7}><slot name=\"7\" /></span>\r\n    <span bind:this={slotContents.item8}><slot name=\"8\" /></span>\r\n    <span bind:this={slotContents.item9}><slot name=\"9\" /></span>\r\n</div>\r\n\r\n<span bind:this={contentElement} />\r\n```\r\n\r\nExample usage (abridged):\r\n```svelte\r\n                    <LocalizedText key=\"chatbot_manager.commands.format.{command.type}\" slotMapping={[\"platform\", \"action\", \"action_target\", \"message\"]}>\r\n                        <div class=\"select\" slot=\"0\">\r\n                            <select bind:value={command.platform}>\r\n                                {#each PLATFORMS as platform}\r\n                                    <option value={platform[0]}>{platform[1]}</option>\r\n                                {/each}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div class=\"select\" slot=\"1\">\r\n                            <select bind:value={command.type}>\r\n                                <option value=\"COMMAND\">\r\n                                    <LocalizedText key=\"chatbot_manager.commands.runs\" />\r\n                                </option>\r\n                                <option value=\"CONTAINS\">\r\n                                    <LocalizedText key=\"chatbot_manager.commands.mentions\" />\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <span slot=\"2\">\r\n                            <input class=\"input\" type=\"text\" bind:value={command.trigger} style=\"width: 200px\" />\r\n                        </span>\r\n\r\n                        <span slot=\"3\">\r\n                            <br />\r\n                            <textarea class=\"textarea\" bind:value={command.response} rows={2} />\r\n                        </span>\r\n                    </LocalizedText>\r\n```\r\n\r\nMy lang file: (`{...}` is a passed in prop, `[...]` is a lang key lookup prop, and `%...%` is an element prop)  \r\n```json\r\n{\r\n    \"chatbot_manager.commands.format.COMMAND\": \"When someone from %platform% %action% !%action_target%, send %message%\",\r\n    \"chatbot_manager.commands.format.CONTAINS\": \"When someone from %platform% %action% [generic.leftquote]%action_target%[generic.rightquote], reply with %message%\"\r\n}\r\n```\r\n\r\nObviously, this is pretty dirty but it works. My ideal would look like:\r\n\r\n```svelte\r\n<script>\r\n    // ... lookup translation, yada yada\r\n</script>\r\n\r\n{#if contents}\r\n    {#each contents as item}\r\n        {#if item.startsWith('%')}\r\n            <slot name={item.slice(1, -1) /* trim off the %'s */} />\r\n        {:else}\r\n            {@html item}\r\n        {/if}\r\n    {/each}\r\n{:else}\r\n    {key} <!-- Fallback -->\r\n{/if}\r\n```\r\n","updated_at":"2022-04-27T17:03:30Z","created_at":"2022-04-27T16:02:41Z","creator_user_login":"e3ndr"}
{"number":6493,"comment_id":"1173042223","body":"Would love to see this feature as well!","updated_at":"2022-07-03T09:03:32Z","created_at":"2022-07-03T09:03:32Z","creator_user_login":"winston0410"}
{"number":6493,"comment_id":"1179361539","body":"Yes, please. We absolutely need this!","updated_at":"2022-07-08T21:09:16Z","created_at":"2022-07-08T21:09:16Z","creator_user_login":"pejeio"}
{"number":6493,"comment_id":"1186527493","body":"@Conduitry \r\nIs there a fix for the dynamic slot name problem in the svelte developers plans?","updated_at":"2022-07-17T14:01:39Z","created_at":"2022-07-17T14:01:39Z","creator_user_login":"amirhossein-fzl"}
{"number":6493,"comment_id":"1200228156","body":"Is there any update on this feature?","updated_at":"2022-07-30T15:35:45Z","created_at":"2022-07-30T15:35:45Z","creator_user_login":"cdebadri"}
{"number":6493,"comment_id":"1207476473","body":"> In addition to the datatable example, I'd like to add another use case regarding advanced i18n interpolation.\r\n> \r\n> For example, if we want to create something like this `User clicked <FancyLookingNumber>{2}</FancyLookingNumber> times`. It would be great if we can do this in svelte:\r\n> \r\n> ```svelte\r\n> <Trans message={t(\"user-click\")}>\r\n>   <FancyLookingNumber slot=\"count\">{2}</FancyLookingNumber>\r\n> </Trans>\r\n> ```\r\n> \r\n> In English, `t(\"user-click\")` returns `User clicked {count} times`. The `Trans` component extracts `count` from the text and create a `count` named slot dynamically.\r\n\r\nJust coming here to add my voice to this, I was halfway through recreating this exact solution for my own translation project and ran into this limitation. I'll likely go with @e3nder's suggestion of having a number of \"dummy\" slots but it's a bit disappointing that this isn't possible!","updated_at":"2022-08-07T20:07:34Z","created_at":"2022-08-07T20:07:34Z","creator_user_login":"nornagon"}
{"number":6493,"comment_id":"1207579990","body":"My another solution is not using slot, but using `<svelte:component/>`\r\nThe ideas is just pass the custom component *(in my case is custom column, because I build DataTable)* into props. And inside the DataTable just check if there is custom component, render it using `<svelte:component/>`. Is not ideal, by it's dynamic and fit with my project.\r\nThis is the simplified version\r\nhttps://svelte.dev/repl/10d9d08f95d1496eb751b81f9e3271b3?version=3.49.0","updated_at":"2022-08-08T02:21:11Z","created_at":"2022-08-08T02:21:11Z","creator_user_login":"axmad386"}
{"number":6493,"comment_id":"1207584259","body":"> My another solution is not using slot, but using `<svelte:component/>` The ideas is just pass the custom component _(in my case is custom column, because I build DataTable)_ into props. And inside the DataTable just check if there is custom component, render it using `<svelte:component/>`. Is not ideal, by it's dynamic and fit with my project. This is the simplified version https://svelte.dev/repl/10d9d08f95d1496eb751b81f9e3271b3?version=3.49.0\r\n\r\nGood solution as well, though I personally prefer my data and text to be in the markup and not in the JS. Still, any solution is better than none :^)","updated_at":"2022-08-08T02:28:48Z","created_at":"2022-08-08T02:28:48Z","creator_user_login":"e3ndr"}
{"number":6493,"comment_id":"1364656876","body":"For those who are building custom datatable like what I did, my solution is as below:\r\n\r\n```\r\n<!-- Datatable.svelte -->\r\n{#each data as row}\r\n    ...\r\n    {#each columns as column}\r\n        <td>\r\n            {#if column.transform}\r\n                {column.transform(row)}\r\n            {:else}\r\n                {row[column.id]}\r\n            {/if}\r\n        </td>\r\n    {/each}\r\n    ...\r\n{/each}}\r\n\r\n<!-- Parent -->\r\n<script>\r\n    import Datatable from '@components/Datatable/Datatable.svelte';\r\n\r\n    const columns = [\r\n        {\r\n            id: 'column_1',\r\n            label: 'Column 1',\r\n            transform: (row) => row.tableRelation.targetColumn,\r\n        },\r\n        {\r\n            id: 'column_2',\r\n            label: 'Column 2',\r\n        }\r\n    ];\r\n\r\n    const data = [\r\n        {\r\n            id: 1,\r\n            foo: bar,\r\n            column_2: 'Column 2 Row Data'\r\n            tableRelation: [\r\n                {\r\n                    targetColumn: \"Table Relation Row 1\",\r\n                    foo: bar\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 1,\r\n            foo: bar,\r\n            column_2: 'Column 2 Row Data'\r\n            tableRelation: [\r\n                {\r\n                    targetColumn: \"Table Relation Row 2\",\r\n                    foo: bar\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n</script>\r\n\r\n<Datatable {columns} {data} />\r\n```\r\n\r\nThis works in my situation, hope it will be helpful.","updated_at":"2022-12-26T00:23:14Z","created_at":"2022-12-25T10:09:08Z","creator_user_login":"wilson-shen"}
{"number":6493,"comment_id":"1480108137","body":"Any updates on the issue?","updated_at":"2023-03-22T19:00:59Z","created_at":"2023-03-22T19:00:59Z","creator_user_login":"AngelCode-dev"}
{"number":6493,"comment_id":"1481369131","body":"> Any updates on the issue?\r\n\r\nI do not know","updated_at":"2023-03-23T15:09:29Z","created_at":"2023-03-23T15:09:29Z","creator_user_login":"amirhossein-fzl"}
{"number":6493,"comment_id":"1647327584","body":"Is there an update when will this be released?","updated_at":"2023-07-24T07:01:30Z","created_at":"2023-07-24T07:01:30Z","creator_user_login":"yourcharlie23"}
{"number":6493,"comment_id":"1667033991","body":"https://github.com/sveltejs/svelte/pull/8535 \r\nthis pull request seems successful, why don't they evaluate it?\r\n@Rich-Harris @Conduitry   @tanhauhau  @dummdidumm ","updated_at":"2023-08-07T00:55:19Z","created_at":"2023-08-07T00:55:19Z","creator_user_login":"ByEBA"}
{"number":7712,"comment_id":"1195203863","body":"I also want this feature in Svelte.\r\nCurrently, I think that the only \"Svelte way\" to do this is by firing an event whenever the value changes.\r\n\r\nAdditionally, there are some generic readonly \"props\" in Svelte component - those are the slot props.\r\nMaybe it should be possible to bind to slot props? E.g. if `Component` has an exported slot prop `p`, this code could be legal:\r\n```svelte\r\n<Component bind:let:p={var} />\r\n```\r\n\r\nI know that the code isn't the cleanest, but it is just an association.","updated_at":"2022-07-26T08:58:43Z","created_at":"2022-07-26T08:58:43Z","creator_user_login":"Tal500"}
{"number":7712,"comment_id":"1207385155","body":"Why is just passing props not enough?\r\nThis prevents to rewrite values of a parent component from a child component.\r\n\r\n**Foo.svelte**\r\n```sv\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n  export let foo = 0;\r\n\r\n  onMount(() => {\r\n    const t = setTimeout(() => {\r\n      foo++;\r\n    }, 100);\r\n    return () => {\r\n      clearTimeout(t);\r\n    };\r\n  });\r\n</script>\r\n\r\nFoo at Foo.svelte: {foo}\r\n```\r\n\r\n**App.svelte**\r\n```sv\r\n<script>\r\n  import Foo from \"./Foo.svelte\";\r\n  let foo;\r\n</script>\r\n\r\n<Foo foo=\"{foo}\" />\r\n<h1>{foo}</h1>\r\n\r\nFoo at App.svelte: {foo}\r\n```","updated_at":"2022-08-07T11:18:18Z","created_at":"2022-08-07T11:18:18Z","creator_user_login":"baseballyama"}
{"number":7712,"comment_id":"1207432187","body":"> This prevents to rewrite values of a parent component from a child component.\r\n\r\nThis issue is about the opposite, exporting a value from `Foo` that `Foo` is in control of, and `App` can read it but shouldn't be allowed to change it.","updated_at":"2022-08-07T15:32:57Z","created_at":"2022-08-07T15:32:10Z","creator_user_login":"SystemParadox"}
{"number":7712,"comment_id":"1207612543","body":"Ah got it. Thank you for your explanation!\r\nCould you please explain to us for more concrete use case?\r\n\r\nMy first impression is that the complexity of the bindings will make them more difficult to understand.\r\n- parent --> child\r\n- parent <--> child\r\n- parent <-- child\r\n\r\nAlso, at least in my experience, it seems that the timing of passing a child component's value to a parent component is often controlled by the code, rather than when the value is changed. (e.g. passing value to the parent when a button is clicked)\r\nIf this is true for most of the Svelte users, I thought we don't need to support it on the Svelte layer.\r\n\r\nThought?\r\n","updated_at":"2022-08-08T03:22:59Z","created_at":"2022-08-08T03:22:59Z","creator_user_login":"baseballyama"}
{"number":7712,"comment_id":"1211830690","body":"Quite simply, look at `input`, `video` and `audio`. The use case is the same. Some components want to expose state back to the parent, but the parent shouldn't be allowed to modify it.\r\n\r\nIf you don't see the need for this then I would argue the special case should also be removed from the builtin elements. If it can't be removed from the builtin elements then clearly this behaviour is desirable and necessary and we should make it available everywhere.\r\n\r\nThe issue with timing is actually most of the reason for this request. If you do this with a normal two-way binding then the parent is in charge, which means the initial value comes from the parent, and the only way to get the value from the child is to have the child do something like `$: { value = whatever }`. Since this doesn't happen immediately you get at least one render with the parent's value, which isn't desirable.","updated_at":"2022-08-11T11:22:53Z","created_at":"2022-08-11T10:53:20Z","creator_user_login":"SystemParadox"}
{"number":7712,"comment_id":"1298208783","body":"Hi,\r\n\r\nNice feature to have, but but I think the `$` syntax is confusing with stores, and could cause problems for code analysis on IDEs.\r\n\r\nI think it would be clearer to use a specific JS label to declare read-only variables :\r\n\r\n```\r\nexport let foo = 0;\r\nexport let bar = 0;\r\nexport let baz = 0;\r\n\r\n// With this syntax, we declare `foo` and `bar` as read-only :\r\n$readonly: foo, bar;\r\n```","updated_at":"2022-11-01T08:29:35Z","created_at":"2022-11-01T08:29:35Z","creator_user_login":"adiguba"}
{"number":7712,"comment_id":"1463331341","body":"I'm new to Svelte, and was shocked that this isn't already present.  Readable stores seems like a way to work around this limitation.  For e.g.:\r\n\r\n```\r\nlet internalBusyState: Writable<\"idle\" | \"loading\" | \"saving\"> = writable(\"idle\");\r\nexport const busyState: Readable<\"idle\" | \"loading\" | \"saving\"> = { subscribe: internalBusyState.subscribe };\r\n```\r\n\r\nSeems inferior to first class read-only properties though.\r\n\r\nUPDATE: this doesn't work, though I'm not sure why.  On the consuming end of the component the store values just come out undefined.  e.g. {dataset.$busyState} is always undefined","updated_at":"2023-03-18T00:27:08Z","created_at":"2023-03-10T06:20:20Z","creator_user_login":"n8allan"}
{"number":7712,"comment_id":"1463332495","body":"> I think it would be clearer to use a specific JS label to declare read-only variables :\r\n> \r\n> ```\r\n> $readonly: foo, bar;\r\n> ```\r\n\r\nWould it be more straight forward to have it be a modifier on the property itself?  This way the reader immediately knows without looking elsewhere.  Something like this:\r\n\r\n```\r\nexport readonly let foo = 0;\r\nexport let bar = 0;\r\n```","updated_at":"2023-03-10T06:22:12Z","created_at":"2023-03-10T06:22:12Z","creator_user_login":"n8allan"}
{"number":7712,"comment_id":"1463545443","body":"@n8allan as far as i know, svelte JS syntax has to be somewhat ESM compatible, `export let bar = 0` is valid ESM, but I don't think `export readonly let foo = 0` would be, the only reason the `$:` syntax works is because Svelte (ab)uses labels.","updated_at":"2023-03-10T09:50:02Z","created_at":"2023-03-10T09:50:02Z","creator_user_login":"benjamingwynn"}
{"number":7712,"comment_id":"1463548212","body":"> @n8allan as far as i know, svelte JS syntax has to be somewhat ESM compatible, `export let bar = 0` is valid ESM, but I don't think `export readonly let foo = 0` would be, the only reason the `$:` syntax works is because Svelte (ab)uses labels.\r\n\r\nWe can always have a JSDoc-style comment, though I agree with your suggestion as well.\r\n\r\nYou suggestion is actually good as we can have that these props will always be reactiveüôÇ","updated_at":"2023-03-10T09:54:07Z","created_at":"2023-03-10T09:52:17Z","creator_user_login":"Tal500"}
{"number":7712,"comment_id":"1608575211","body":"This might be a possible workaround using a store:\r\n\r\n1. create a writable store in the child component (e.g. Foo)\r\n2. export a read-only version of this store (store only has subscribe, no set/update function)\r\n3. have the parent component (e.g. App) bind a local variable to this read-only store\r\n\r\nThe writable store value could be changed at any point within the child component so better than using a readable store only. \r\n> Seems inferior to first class read-only properties though.\r\n\r\nIf the parent attempts to change the value of store, svelte generates this error message:\r\n`Error: readOnlyStore.set is not a function`\r\n\r\nHere is a code example:\r\nhttps://svelte.dev/repl/2a742620fce14ce5bd9f5e27af7825a5?version=4.0.0\r\n\r\n\r\n\r\n","updated_at":"2023-06-27T01:38:35Z","created_at":"2023-06-27T01:38:35Z","creator_user_login":"arnard76"}
{"number":7712,"comment_id":"1642470141","body":"This feature can be easily implemented:\r\n\r\n```html\r\n<script>\r\nexport let value = \"foo\"\r\nlet _value;\r\n// if you want to set init value from outside\r\n// uncomment this line:\r\n// _value = value;\r\n$: value = _value;\r\n</script>\r\n\r\n<input bind:value={_value} />\r\n```\r\n\r\nOutside component bind to `value` cannot affect the real `_value`, but inner `_value` change is always synced back to outside through `value`.\r\n\r\nSo I don‚Äôt think this feature needs language level support. I‚Äôd suggest a \"won‚Äôt do\" label for this one. \r\n","updated_at":"2023-07-19T17:24:02Z","created_at":"2023-07-19T17:22:01Z","creator_user_login":"hackape"}
{"number":7712,"comment_id":"1642817764","body":"Oh that is interesting and useful. Expanding your example a bit, I found a way to make it throw if you try to modify it from outside:\r\n\r\n```\r\n<script>\r\nexport let value = \"foo\"\r\nlet _value;\r\n$: value = _value;\r\nfunction checkValue(v) {\r\n    if (v !== _value) {\r\n        throw new Error('value is readonly');\r\n    }\r\n}\r\n$: checkValue(value)\r\n</script>\r\n```\r\n\r\nSo it is doable, but it is very clumsy without language support.","updated_at":"2023-07-19T22:04:48Z","created_at":"2023-07-19T22:04:48Z","creator_user_login":"SystemParadox"}
{"number":7712,"comment_id":"1643052692","body":"@SystemParadox My impl requires only two extra lines, I think it's pretty far away from clumsy, and to me that already covers all of this feature request. Enlighten me if I missed out something.\r\n\r\nI cannot possibly imagine that, if Svelte were to provide language support, it'd implement it the way you describe: to THROW AN ERROR when outside set to readonly prop??? I mean, who want that? Some strange use cases maybe, but definitely not the majority and not the way this feature would be handled.","updated_at":"2023-07-20T03:35:05Z","created_at":"2023-07-20T03:35:05Z","creator_user_login":"hackape"}
{"number":7712,"comment_id":"1651100612","body":"@hackape Very nice solution with the reactive shadow variable. \r\n\r\nWith your solution, I suppose the parent code would use the same syntax as a 2-way bind `<Child bind:value={parentValue}>` and therefore I suggest the shortcoming being that the dev has no compile time / lint feedback within the parent code that changing the bound value does not effect the child value.\r\n\r\n@SystemParadox hacked in a runtime feedback for the dev, which I certainly wouldn't want to have in my code, hence the request for language support...","updated_at":"2023-07-26T07:06:40Z","created_at":"2023-07-26T07:06:40Z","creator_user_login":"kenbankspeng"}
{"number":7712,"comment_id":"1651695275","body":"I noticed an earlier remark by @SystemParadox:\r\n\r\n> The issue with timing is actually most of the reason for this request. If you do this with a normal two-way binding then the parent is in charge, which means the initial value comes from the parent, and the only way to get the value from the child is to have the child do something like $: { value = whatever }. Since this doesn't happen immediately you get at least one render with the parent's value, which isn't desirable.\r\n\r\nJust wanna clarify, this is inacurate. If parent value is `undefined`, then parent value is automatically populated by child value, you don't have to mannually trigger `$: { value = whatever }` in child. So parent is not always in charge.","updated_at":"2023-07-26T12:18:18Z","created_at":"2023-07-26T12:18:18Z","creator_user_login":"hackape"}
{"number":7712,"comment_id":"1651696609","body":"@kenbankspeng Yeah if what's important is the \"readonly\" semantic, it can only be done with language support. Still I don't believe this feature deserves a dedicated language element, for following reasons:\r\n\r\n1. Things like `<div bind:clientWidth>` as readonly binding is well-known, and is a feature much loved. The fact that \"readonly binding exists on some special elements without any clue other than mentioned in the docs\" should not surprise any half-serious svelte users.\r\n2. You can always (and probably should) use custom event to express the \"readonly semantic\" on component API level, because it really is an *event*. So there's already an escape hatch. And if you don't care about semantic and only want the readonly runtime behavior, then you can use my [workaround](https://github.com/sveltejs/svelte/issues/7712#issuecomment-1642470141).\r\n3. Simplicity is king. This is the biggest reason why I don't like this proposal. Any new language feature also adds cognitive burden to language user. Before you know, Svelte could also grows into sth with a bunch of features that ppl hate, like every other practical prog-langs. 2nd law of thermodynamics will always find its way, but we can at least try resist it a bit longer.","updated_at":"2023-07-26T12:19:16Z","created_at":"2023-07-26T12:19:16Z","creator_user_login":"hackape"}
{"number":7712,"comment_id":"1651716478","body":"I‚Äôve switched from the shadow variable to a dispatcher event.\r\n\r\nOn Wed, Jul 26, 2023 at 8:19 AM hackape ***@***.***> wrote:\r\n\r\n> @kenbankspeng <https://github.com/kenbankspeng> Yeah if what's important\r\n> is the \"readonly\" semantic, it can only be done with language support.\r\n> Still I don't believe this feature deserves a dedicated language element,\r\n> for following reasons:\r\n>\r\n>    1. Things like <div bind:clientWidth> as readonly binding is\r\n>    well-known, and is a feature much loved. The fact that \"readonly binding\r\n>    exists on some special elements without any clue other than mentioned in\r\n>    the docs\" should not surprise any half-serious svelte users.\r\n>    2. You can always (and probably should) use custom event to express\r\n>    the \"readonly semantic\" on component API level, because it really is an\r\n>    *event*. So there's already an escape hatch. And if you don't care\r\n>    about semantic and only want the readonly runtime behavior, then you can\r\n>    use my workaround\r\n>    <https://github.com/sveltejs/svelte/issues/7712#issuecomment-1642470141>\r\n>    .\r\n>    3. Simplicity is king. This is the biggest reason why I don't like\r\n>    this proposal. Any new language feature also adds cognitive burden to\r\n>    language user. Before you know, Svelte could also grows into sth with a\r\n>    bunch of features that ppl hate, like every other practical prog-langs. 2nd\r\n>    law of thermodynamics will always find its way, but we can at least try\r\n>    resist it a bit longer.\r\n>\r\n> ‚Äî\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/sveltejs/svelte/issues/7712#issuecomment-1651696609>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AGNINCD2AYD6H6OSZS6ICLTXSEDNBANCNFSM54L2DHHQ>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n","updated_at":"2023-07-26T12:32:52Z","created_at":"2023-07-26T12:32:52Z","creator_user_login":"kenbankspeng"}
{"number":3633,"comment_id":"538753071","body":"I think the easiest way to do this is to use the `in` and `out` directives.\r\n\r\nLike this : \r\n```\r\n<div in:fly=\"{{x: 500, duration: variableSpeed}}\" out:fly=\"{{x: 500, duration: variableSpeed}}\" style=\"{css}\">\r\n\tMy Speed is {variableSpeed}\r\n</div>\r\n```\r\n\r\n\r\nHope this helps !","updated_at":"2019-10-06T14:35:18Z","created_at":"2019-10-06T14:35:18Z","creator_user_login":"remimi"}
{"number":3633,"comment_id":"544207716","body":"I don't see off the top of my head why this would have to work the way it does. If the (two-way) transition is currently underway, I can see why changes wouldn't take effect, because we need it to be reversible before completing. But I'm not sure why, once the transition-in is completely finished, those same params would need to be locked in for the later transition-out.","updated_at":"2019-10-20T00:09:20Z","created_at":"2019-10-20T00:09:20Z","creator_user_login":"Conduitry"}
{"number":3633,"comment_id":"544222940","body":"> I don't see off the top of my head why this would have to work the way it does. If the (two-way) transition is currently underway, I can see why changes wouldn't take effect, because we need it to be reversible before completing. But I'm not sure why, once the transition-in is completely finished, those same params would need to be locked in for the later transition-out.\r\n\r\nMy use case is page transitions in my application. Imagine an app with sapper routes, where each route can enter ( fly animation ) either from left or right, but will leave the view also either to the left, or to the right - depending on some internal logic. In other words, I don't know the direction of exit until some link is clicked - and then based on where I am heading next - THAN I decide the exit direction.\r\n\r\nHope it makes sense, thank you.","updated_at":"2019-10-20T05:46:30Z","created_at":"2019-10-20T05:46:30Z","creator_user_login":"gotys"}
{"number":3633,"comment_id":"583395647","body":"I agree that you should be able to use a single transition attribute and change it as needed but specifying both in and out transitions separately does the trick.  I've posted this [REPL](https://svelte.dev/repl/3abc7b3175e64cb9832f679e60854117?version=3.18.1) that I've worked out to help me solve a problem that I think may be similar to yours.  I hope it helps.\r\n","updated_at":"2020-02-07T13:46:51Z","created_at":"2020-02-07T13:46:51Z","creator_user_login":"thelowman"}
{"number":3633,"comment_id":"731336574","body":"I hit this when trying to dynamically set `animate:flip` params. This [REPL](https://svelte.dev/repl/c968d4b92bde4c548d5b66beaacd30a8?version=3.29.7) captures what I'm seeing. \r\n\r\nSvelte encourages reactive dynamism everywhere, so this feels like a counter-intuitive limitation. Barring a fix, perhaps the docs could mention the issue? Might save others time trying to figure out what's going on.","updated_at":"2020-11-20T18:26:36Z","created_at":"2020-11-20T18:26:36Z","creator_user_login":"jcarpenter"}
{"number":3633,"comment_id":"869070408","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:53Z","created_at":"2021-06-26T22:46:53Z","creator_user_login":"stale[bot]"}
{"number":3633,"comment_id":"1001806851","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-28T00:11:23Z","created_at":"2021-12-28T00:11:23Z","creator_user_login":"stale[bot]"}
{"number":4207,"comment_id":"571343640","body":"This is the behaviour I would expect from an un-keyed array in this scenario.\r\n\r\nI'm not sure how feasible it would be to auto-detect the need for a keyed each, or if it is even desirable, so this is more of a docs thing. The issue is I'm not even sure how we could document this without it being TMI for most users. The concept around keying is already documented.\r\n\r\nI'll have a look at docs for keying features on similar projects and see if there are any improvements to make.","updated_at":"2020-01-06T22:28:11Z","created_at":"2020-01-06T22:28:11Z","creator_user_login":"antony"}
{"number":4207,"comment_id":"571346069","body":"It seems like keyed each blocks should be used whenever possible then? Ideally svelte would warn though when in dev mode if it isn't going to be able to render the each body correctly.\r\n\r\nI've run into a few scenarios where each bodies aren't updated correctly. For instance, this issue shows one where it's in a slot: https://github.com/sveltejs/svelte/issues/4165. If a keyed each is used, it works, else it renders the incorrect image.","updated_at":"2020-01-06T22:36:08Z","created_at":"2020-01-06T22:36:08Z","creator_user_login":"JohnnyFun"}
{"number":4207,"comment_id":"571436406","body":"fwiw, I also noticed it renders correctly if I fully reset the value that the each loop is using:\r\n\r\n```\r\nlet peopleFiltered = []\r\n$: search, onSearchChanged()\r\nasync function onSearchChanged() {\r\n\tpeopleFiltered = [] // clear array totally\r\n\tawait tick() // render it empty...\r\n        // then render it with the search applied\r\n\tpeopleFiltered = search == null || search.trim() === '' ? \r\n\t\tpeople : \r\n\t        people.filter(p => p.name.indexOf(search) > -1)\r\n}\r\n```","updated_at":"2020-01-07T05:08:13Z","created_at":"2020-01-07T05:08:13Z","creator_user_login":"JohnnyFun"}
{"number":4207,"comment_id":"571515138","body":"@JohnnyFun that also makes sense. The keying is designed to track elements, so rewriting the entire list will create new tracking keys internally, and thus render correctly.\r\n\r\nThe other ticket has been marked as a bug by @Conduitry but I'm not sure that this is the same issue.","updated_at":"2020-01-07T09:51:46Z","created_at":"2020-01-07T09:51:46Z","creator_user_login":"antony"}
{"number":4207,"comment_id":"571692903","body":"@antony, yeah I don't think they're the exact same issue, but what seems similar between the two is that svelte _mostly_ updates the UI, but doesn't quite get _everything_.\r\n\r\nI also noticed if I use the object ref as the key in a keyed each, it works correctly (i.e. `{#each peopleFiltered as p (p)}`). I would've assumed that svelte would be using the object ref as the internal key in a non-keyed each loop, but that must not be the case. Do you know what it _does_ use? Otherwise, I'll look at svelte source later this week and see what it uses to track and update items in a non-keyed each.\r\n\r\nAnother thing I noticed that makes it render correctly is:\r\n- select \"bobby\"\r\n- filter \"bob\" (bobby only result, not selected)\r\n- add \"a\" to your filter so you have \"boba\" (no results)\r\n- back out the \"a\" so back to filtering \"bob\" (bobby only result, _is_ selected)\r\n\r\nI've been able to work around these not-quite-updated-UI scenarios by doing `await tick()` prior to setting the value. And if that doesn't work, nulling the value out, await tick, then setting it (as in this particular scenario). It would just be easy to miss this scenario, since at a glance it _appears_ to be working as I want it to.\r\n\r\nHere's hoping the fix for the other one either fixes this one too, or shakes something loose that makes it clear why this kind of thing can happen or how svelte might warn about it in dev mode.","updated_at":"2020-01-07T17:40:02Z","created_at":"2020-01-07T17:40:02Z","creator_user_login":"JohnnyFun"}
{"number":4207,"comment_id":"575998175","body":"> Another thing I noticed that makes it render correctly is:\r\n> - select \"bobby\"\r\n> - filter \"bob\" (bobby only result, not selected)\r\n> - add \"a\" to your filter so you have \"boba\" (no results)\r\n> - back out the \"a\" so back to filtering \"bob\" (bobby only result, is selected)\r\n\r\neven if the search box is cleared you will get `johnny` and` bobby` selected instead.","updated_at":"2020-01-19T12:08:09Z","created_at":"2020-01-19T12:08:09Z","creator_user_login":"yus-ham"}
{"number":4039,"comment_id":"643354210","body":"Hey @kwangure im faceing the same issue did you found a workaround ? .. ","updated_at":"2020-06-12T16:06:49Z","created_at":"2020-06-12T16:06:49Z","creator_user_login":"msaglietto"}
{"number":4039,"comment_id":"643509025","body":"The easiest way to do it is to take full control of your styles, and use them in JS. \r\n\r\nI found myself doing this: \r\n```html\r\n<script>\r\n    const style = `\r\n        color: black;\r\n        background-color: red;\r\n    `\r\n    function setStyles(node) {\r\n         node.setAttribute(\"style\",  style);\r\n    }\r\n</script>\r\n\r\n<!-- Use either `use:action` or `style` attribute -->\r\n<div use:setStyles {style}>My text</div>\r\n```\r\n\r\nHowever, I'm not a fan of this work around as far as scaling is concerned. Mixing styles and JS in the `<script>` tag becomes noisy as components become larger. \r\n\r\nWhat exactly is your usecase? That would make it easier to offer suggestions or help. \r\n\r\nIn my case for example, I later switched to using the [`exclude` and `include` options in rollup](https://github.com/sveltejs/svelte/issues/3594#issuecomment-626315650) and avoided custom components altogether for most of my components, which made the above a non-issue.","updated_at":"2020-06-12T22:34:59Z","created_at":"2020-06-12T22:34:59Z","creator_user_login":"milkbump"}
{"number":4039,"comment_id":"644073287","body":"I had a custom element with custom elements inside so the style where inline but I changed so there is only one custom element and the child are normal svelte components.. \r\nSince  I can not provide a css bundle with this component I end up writing the <style> inside of one of the svelte components .. \r\n```html\r\n<div>\r\n  <style>\r\n    .grid {}\r\n  </style>\r\n...\r\n```\r\nI lost the svelte scoping but since is a custom element it will not conflict with others styling\r\nIts not that nice since all the styles are defined in one place you lose the context of the component but I we have live with this many years before so I will not get picky =P","updated_at":"2020-06-15T11:31:58Z","created_at":"2020-06-15T11:31:58Z","creator_user_login":"msaglietto"}
{"number":4039,"comment_id":"648127470","body":"If your custom element is the wrapper component, it makes it easier to manage. I recently discovered that you use can a `<link rel=\"stylesheet\"/>` tag in web components [as per the spec](https://github.com/whatwg/html/pull/1572)! The styles are scoped to only the shadow DOM as expected.\r\n\r\n```html\r\n<svelte:options tag=\"custom-component\"/>\r\n<link rel=\"stylesheet\" href=\"path/to/exported/children/styles\"/>\r\n<Component>\r\n\t<OtherComponent/>\r\n</Component>\r\n```\r\nwill give you\r\n```html\r\n<custom-component>\r\n\t#shadow-root\r\n\t<!--Scoped styles for `Component` and `OtherCompoentent`-->\r\n\t<link rel=\"stylesheet\" href=\"path/to/exported/children/styles\"/> \r\n\t...\r\n</custom-component>\r\n```\r\n\r\nBrowser support is also pretty good. Scoped `<link/>` tags have been [supported since Chrome 55](https://codereview.chromium.org/2177163002/), and [in Safari since V18](https://developer.apple.com/safari/technology-preview/release-notes/#r18). Quickly googling didn't tell me how far back support in the other browsers goes, but all modern browsers support it now.","updated_at":"2020-06-23T12:56:38Z","created_at":"2020-06-23T12:56:38Z","creator_user_login":"milkbump"}
{"number":4039,"comment_id":"766896274","body":"I created a PR that makes it possible to use svelte inside a shadow dom. All styles and animations will work like in a normal svelte-application. You could install svelte from this branch to use it until it gets merged.","updated_at":"2021-01-25T15:28:43Z","created_at":"2021-01-25T15:28:43Z","creator_user_login":"ivanhofer"}
{"number":4039,"comment_id":"870222669","body":"> I created a PR that makes it possible to use svelte inside a shadow dom. All styles and animations will work like in a normal svelte-application. You could install svelte from this branch to use it until it gets merged.\r\n\r\nSvelte seems to have a bunch of technical teething troubles when it comes to web components üò¨...\r\nWas your PR successful and if not, how can I help? üôÇ","updated_at":"2021-06-29T04:29:59Z","created_at":"2021-06-29T04:29:59Z","creator_user_login":"sawden"}
{"number":4039,"comment_id":"870713101","body":"@sawden somehow the link to the PR got lost. Here is the PR: https://github.com/sveltejs/svelte/pull/5870.\r\nIt looks like it gets finally merged","updated_at":"2021-06-29T15:46:21Z","created_at":"2021-06-29T15:46:21Z","creator_user_login":"ivanhofer"}
{"number":4039,"comment_id":"1001204482","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T16:00:03Z","created_at":"2021-12-26T16:00:03Z","creator_user_login":"stale[bot]"}
{"number":5312,"comment_id":"792295636","body":"Hello everyone! \r\n\r\nI am writing a component library for mobile phones. This is an important function, is there any temporary solution at the moment?\r\n\r\nThis is my situation,the leader icon cannot be rendered correctly:\r\n```svelte\r\n<ListItem>\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" slot=\"leading\" />\r\n  {/if}\r\n  <h4>{ item.title }</h4>\r\n  <p>{ item.desc }</p>\r\n  <Icon slot=\"trailing\" name=\"more_vert\" />\r\n</ListItem>\r\n```\r\n\r\nThank you!\r\n\r\n----\r\n\r\nI currently convert the dom structure, but there is one more level of nesting:\r\n```svelte\r\n<div slot=\"leading\">\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" />\r\n  {/if}\r\n</div>\r\n```\r\n\r\n----\r\n\r\nUpdate, no extra nesting, but `$$slots.leading` not working\r\n```svelte\r\n<svelte:fragment slot=\"leading\">\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" />\r\n  {/if}\r\n</svelte:fragment>\r\n```","updated_at":"2021-03-08T02:58:06Z","created_at":"2021-03-07T15:20:53Z","creator_user_login":"hungtcs"}
{"number":5312,"comment_id":"824133383","body":"What about `$$slots`` containing the textContent of the slot?\r\n\r\nPros: \r\n - Ability to check precisely the content of a slot;\r\n - Ability to be reactive to to the content of a slot.\r\n - An empty slot can easily be checked with `$$slots.slotName === \"\"`\r\n\r\nCons:\r\n - Since the content of a slot can rapidly grow huge, it would have to be greatly optimized.\r\n - one-way binding: the `$$slots.slotName` would only be readable.","updated_at":"2021-04-21T15:02:51Z","created_at":"2021-04-21T15:02:51Z","creator_user_login":"ecstrema"}
{"number":5312,"comment_id":"826014819","body":"What about having references to the passed objects in the `$$slots` variable?. For example, in\r\n```svelte\r\n<MyComponent>\r\n  <div id=\"my-div\" slot=\"slot1\">Some content</div>\r\n</MyComponent>\r\n```\r\n\r\n`$$slots.slot1` would contain the div object. The same as typing `document.getElementById(\"my-div\")`","updated_at":"2021-04-24T01:44:08Z","created_at":"2021-04-24T01:44:08Z","creator_user_login":"ecstrema"}
{"number":5312,"comment_id":"917780228","body":"Just ran into this issue myself. Spent far too much time debugging this only to eventually come across this issue. Doesn't seem this issue is getting much (if any) attention. At the least, the [current documentation](https://svelte.dev/docs#slots_object) should be updated to call out that\r\n```svelte\r\n{#if $$slots.description}\r\n  <!-- This <hr> and slot will render only if a slot named \"description\" is provided. -->\r\n  <hr>\r\n  <slot name=\"description\"></slot>\r\n{/if}\r\n```\r\nwill only work if the element with `slot=\"description\"` doesn't contain any logic.\r\n\r\nCurrently, instead of being able to utilize `$$slots.default` I have to run some logic in the parent component to determine if there will be any content (result stored in `hasContent`), and then use that in an inner `if` and pass that as a prop to the component that has a default `slot`.","updated_at":"2021-09-13T02:11:14Z","created_at":"2021-09-13T02:11:14Z","creator_user_login":"the0neWhoKnocks"}
{"number":5312,"comment_id":"921981608","body":"Here's a simple spike demonstrating the problem: https://svelte.dev/repl/94f5623ac9e54ce4918362492c6e35f1?version=3.42.6\r\n\r\nI'm not sure if it would be possible to check the content length of the slot but that would solve my current situation.\r\n\r\nThis really limits the ability to have fallback content, especially at any sort depth beyond 1.\r\n","updated_at":"2021-09-17T18:01:36Z","created_at":"2021-09-17T18:01:36Z","creator_user_login":"chanced"}
{"number":5312,"comment_id":"974623090","body":"`$$slots` not conditionally & don't working in runtime, just 1 check in compiletime...\r\n@tanhauhau - any plans/ideas for rectivity $$slots ?\r\n\r\nin malinajs it's solved by #fragment - https://malinajs.github.io/repl/#/share/TJLjJATAvKX?version=0.6.39","updated_at":"2021-11-20T09:59:45Z","created_at":"2021-11-20T09:36:55Z","creator_user_login":"Valexr"}
{"number":5312,"comment_id":"1143367500","body":"I guess, this also has a side effect of a slot fallback not being shown for:\r\n```(svelte)\r\n<ComponentWithASlotFallback>{#if false}This prevents slot fallback{/if}</ComponentWithASlotFallback>\r\n```","updated_at":"2022-06-01T09:37:44Z","created_at":"2022-06-01T09:37:44Z","creator_user_login":"pooledge"}
{"number":5312,"comment_id":"1152961505","body":"Forwarding slots as empty with `<slot name=\"forward\" slot=\"forward\" />` is not possible either.\r\n\r\nhttps://svelte.dev/repl/cc6ab0a9bb714232b8b3af335db03792?version=3.48.0\r\n\r\nThis one of the details about svelte that severely limits the reuseability  and composeability of components because the `$$slots` prop does not provide any usable information with a forwarding depth > 1 as @chanced already mentioned.\r\n\r\n","updated_at":"2022-06-11T16:59:34Z","created_at":"2022-06-11T16:40:56Z","creator_user_login":"icalvin102"}
{"number":4225,"comment_id":"571691786","body":"Could you use `keydown` instead? \r\n\r\nOr just watch the `value` with a reactive statement instead of an event handler on the input like: `$: inputValue, onInput()`\r\n\r\nBoth of those approaches console logged the last empty value as expected for me.","updated_at":"2020-01-07T17:37:46Z","created_at":"2020-01-07T17:37:10Z","creator_user_login":"JohnnyFun"}
{"number":4225,"comment_id":"571692973","body":"On Firefox, the final empty log _does_ appear before the element is removed, if that means anything. It's unfortunate that the behavior differs between browsers, but it's really an edge case, and I can't really say which behavior I'd consider more correct.","updated_at":"2020-01-07T17:40:13Z","created_at":"2020-01-07T17:40:13Z","creator_user_login":"Conduitry"}
{"number":4225,"comment_id":"571693252","body":"> Could you use `keydown` instead?\r\n\r\nThat works, however with this approach an input change event is never fired if the user just cuts all the text with `Right Click -> Cut`.\r\n\r\n> Or just watch the `value` with a reactive statement instead of an event handler on the input like: `$: inputValue, onInput()`\r\n\r\nThis is a good solution and seems to work in all cases. üëç ","updated_at":"2020-01-07T17:41:02Z","created_at":"2020-01-07T17:40:53Z","creator_user_login":"pal03377"}
{"number":4225,"comment_id":"571821633","body":"This reminds me of https://github.com/sveltejs/svelte/issues/3249 - possibly related?","updated_at":"2020-01-07T23:28:15Z","created_at":"2020-01-07T23:28:15Z","creator_user_login":"antony"}
{"number":4225,"comment_id":"572347905","body":"> This reminds me of #3249 - possibly related?\r\n\r\n#3249 looks very similar to this issue. However, (if I understand that correctly) it is about a `bind:group` binding not being applied instead of an event not being fired - which may be very similar things under the hood in Svelte, I honestly don't know the internals as well as you.\r\n\r\nIn #3249, the problem seems to be that the `on:click` event is handled too fast (therefore toggling the menu before the radiobutton value is updated), while in this issue here, the `on:input` event is fired too slow (so it isn't fired because the value update already causes the element to disappear before that, at least on Chrome).\r\n\r\nAlso, if this comes down to the same underlying issue, I hope it is a bit easier to find with my more simple REPL. :-)\r\n\r\n(and I could reproduce #3249 in Firefox but as @Conduitry already discovered couldn't reproduce this issue in Firefox)","updated_at":"2020-01-09T02:09:05Z","created_at":"2020-01-09T02:09:05Z","creator_user_login":"pal03377"}
{"number":4225,"comment_id":"590225520","body":"putting the binding before the event listener causes the binding dependencies to update first\r\nyou can get wanted behavior simply by placing the event listener before the binding\r\nhttps://svelte.dev/repl/d5e1b886ee4c4bb88fbbe3deb72fd8f3?version=3.19.0\r\nthis issue suggests that svelte should wait a tick before unmouting components","updated_at":"2020-02-24T09:08:31Z","created_at":"2020-02-24T09:08:31Z","creator_user_login":"pushkine"}
{"number":3585,"comment_id":"532663108","body":"this will work\r\n![obraz](https://user-images.githubusercontent.com/25027696/65148729-1570ca00-da21-11e9-867f-42d9512de80a.png)\r\n\r\nhttps://svelte.dev/repl/c0f0d47ee3334b91a8952163d19dd94d?version=3.12.1","updated_at":"2019-10-01T01:14:18Z","created_at":"2019-09-18T12:32:54Z","creator_user_login":"neuronetio"}
{"number":3585,"comment_id":"533001980","body":"_Thank you for the answer._\r\n\r\nIt's more like another way of using it and it really works, but it's not right! For example, if you enter any character in the field, the list won't change (the list is one step late, which only adds problems).\r\n\r\nIn order for your solution to work properly, you must first update the filter and then update the list. In the `$:{...}` block, we need to [swap the lines]( https://svelte.dev/repl/a874c44eb81e43fda090792dc690f5e5?version=3.12.1). When we use `$:{...}` in this example, we see an unnecessary call of the filter function. I don't think that's good.\r\n\r\nIf I understand correctly how Svelte should work in this example, there should be no difference in the sequence of calling these strings:\r\n```javascript\r\n$: list = $items.filter(item => item.active)\r\n$: dispatcher.filter(searchQuery)\r\n```\r\nChanging `searchQuery` calls `dispatcher.filter`, then `dispatcher.filter` updates items, then the list should be updated because we are subscribed to changes in store (`$items`) in the reactive construct:\r\n\r\n```javascript\r\n$: list = $items.filter(item => item.active)\r\n```\r\n\r\nThat's exactly what I see the problem with.\r\n","updated_at":"2019-09-19T07:19:42Z","created_at":"2019-09-19T07:19:42Z","creator_user_login":"a3con"}
{"number":3585,"comment_id":"536815432","body":"Yeah, it looks like a bug :)\r\n\r\nwhen you change `$items` to `subscribe` - everything works - it should not be that way\r\nhttps://svelte.dev/repl/de27598623a84071a086caba70e572d3?version=3.12.1","updated_at":"2019-10-01T01:17:42Z","created_at":"2019-10-01T01:12:43Z","creator_user_login":"neuronetio"}
{"number":3585,"comment_id":"543549932","body":"Thank you for your participation. I hope this information will be useful for developers.","updated_at":"2019-10-18T06:51:26Z","created_at":"2019-10-18T06:51:26Z","creator_user_login":"a3con"}
{"number":3585,"comment_id":"555896146","body":"**Here is another example confirming that this is a bug!**\r\n\r\n[https://svelte.dev/repl/1d83e21a3cfe4833a20a898510444167?version=3.15.0](https://svelte.dev/repl/1d83e21a3cfe4833a20a898510444167?version=3.15.0)\r\n\r\nDifferent behavior of `store.subscribe` and `$store` once again causes inconvenience!","updated_at":"2019-11-20T08:30:00Z","created_at":"2019-11-20T08:30:00Z","creator_user_login":"a3con"}
{"number":3585,"comment_id":"1001793796","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T23:11:23Z","created_at":"2021-12-27T23:11:23Z","creator_user_login":"stale[bot]"}
{"number":4251,"comment_id":"573318527","body":"It'd be nice not to have another flag. Could we just generate them unless `process.env.CI` is set, or do they take long enough that we wouldn't want to generate them every time when running tests locally? What if we just generated them for failing tests?","updated_at":"2020-01-11T13:49:27Z","created_at":"2020-01-11T13:49:27Z","creator_user_login":"Conduitry"}
{"number":4251,"comment_id":"573319026","body":"Good suggestion for just generate it for failing test. \r\nProbably this can replace the existing console out of the compiled code when fail","updated_at":"2020-01-11T13:55:47Z","created_at":"2020-01-11T13:55:47Z","creator_user_login":"tanhauhau"}
{"number":4251,"comment_id":"573319352","body":"Right now it is compiled twice if we save the output to file. Wonder is it okay if I save to file during the require.extension?","updated_at":"2020-01-11T14:00:00Z","created_at":"2020-01-11T14:00:00Z","creator_user_login":"tanhauhau"}
{"number":4251,"comment_id":"573319697","body":"The require hook wouldn't know whether the test failed, would it?\r\n\r\nI think removing the existing console.log of the compiled code for failing tests makes sense.","updated_at":"2020-01-11T14:04:33Z","created_at":"2020-01-11T14:04:33Z","creator_user_login":"Conduitry"}
{"number":4251,"comment_id":"573319894","body":"Yea it wouldn't know","updated_at":"2020-01-11T14:06:53Z","created_at":"2020-01-11T14:06:53Z","creator_user_login":"tanhauhau"}
{"number":4251,"comment_id":"573319966","body":"The reason I added a flag, is that without the flag, it would compile the code twice, once for require extensions, once for saving to file, and probably thrice when console out for failing case","updated_at":"2020-01-11T14:07:45Z","created_at":"2020-01-11T14:07:45Z","creator_user_login":"tanhauhau"}
{"number":4251,"comment_id":"869054970","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:37Z","created_at":"2021-06-26T20:03:37Z","creator_user_login":"stale[bot]"}
{"number":4251,"comment_id":"1440395816","body":"With the idea of having ESM only for Svelte 4, I'm wondering how much long-livety this change this has. But all checks pass and changes seem to look good to me, so maybe it doesn't hurt. Will wait for other maintainers to chime before deciding.","updated_at":"2023-02-22T16:42:04Z","created_at":"2023-02-22T16:42:04Z","creator_user_login":"dummdidumm"}
{"number":5913,"comment_id":"869061453","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:46Z","created_at":"2021-06-26T21:03:46Z","creator_user_login":"stale[bot]"}
{"number":5913,"comment_id":"997227003","body":"I'm also encountering this issue!\r\n\r\nHere is an example:\r\n<img width=\"584\" alt=\"Screen Shot 2021-12-18 at 11 30 33\" src=\"https://user-images.githubusercontent.com/1843672/146648499-78c50e79-525a-400a-b0ab-d3560235319f.png\">\r\n\r\nThe bottom is correct, the top is rendering out of order. They are the exact same component, it's just that the top one had an extra update from being reactive.","updated_at":"2021-12-18T16:31:15Z","created_at":"2021-12-18T16:31:15Z","creator_user_login":"felixakiragreen"}
{"number":8964,"comment_id":"1633452645","body":"It's indeed a false positive for catching bubbled event. But the compiler won't know that there is a button inside the slot. That's why there is the `<!--svelte-ignore-->` comment that can be used to disable when you're sure it is a false positive. \r\nhttps://svelte.dev/docs/accessibility-warnings\r\n\r\nIt's way more common for people to use `on:event` on the exact element the event triggers. We're not going to give up most of the cases we can catch because of the false positives. \r\n\r\nAs for hints about using a button instead, there is already an issue in the svelte core https://github.com/sveltejs/svelte/issues/8001.\r\n\r\nThis is overall a svelte core issue, so I'll close this later in favour of the upstream issue. What we can do is add a code action quick fix to turn div into a button. And maybe even add styles to remove the border and background. But I'll prefer to add this after svelte core add the hint to the warning message.","updated_at":"2023-07-13T01:31:45Z","created_at":"2023-07-13T01:31:45Z","creator_user_login":"jasonlyu123"}
{"number":8964,"comment_id":"1633452651","body":"> It's way more common for people to use on:event on the exact element the event triggers. We're not going to give up most of the cases we can catch because of the false positives.\r\n\r\nI disagree. The salient case is listening for child events, where it would be inconvenient or impossible to attach the relevant listeners to each child.\r\n\r\nLeave this open, please.\r\n\r\n","updated_at":"2023-07-13T01:55:11Z","created_at":"2023-07-13T01:46:13Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1633467678","body":"Transferred to the svelte core for the bubble problem. But I think this is a false positive where you can use the ignore comment to hide it.  It's a comparatively rare case that is not justifiable for removing the rule entirely. Let's see what other maintainers think about it. ","updated_at":"2023-07-13T02:47:40Z","created_at":"2023-07-13T02:47:40Z","creator_user_login":"jasonlyu123"}
{"number":8964,"comment_id":"1633708898","body":"Agree that this is a less common use case so while it's a false positive we need to keep the current rule. We should find a way to make the description less \"oh I'm slapping this on there and be done with it\" and maybe point to the documentation where that should be explained in more details including when this is a false positive. We also should have some kind of option to silence specific warnings project-wide.","updated_at":"2023-07-13T07:25:32Z","created_at":"2023-07-13T07:25:32Z","creator_user_login":"dummdidumm"}
{"number":8964,"comment_id":"1634044029","body":"> We also should have some kind of option to silence specific warnings project-wide.\r\n\r\nWhen?","updated_at":"2023-07-13T11:02:20Z","created_at":"2023-07-13T11:02:20Z","creator_user_login":"205g0"}
{"number":8964,"comment_id":"1634528216","body":"https://github.com/sveltejs/svelte/issues/8001","updated_at":"2023-07-13T16:17:26Z","created_at":"2023-07-13T16:17:26Z","creator_user_login":"Prinzhorn"}
{"number":8964,"comment_id":"1634668938","body":"> Agree that this is a less common use case\r\n\r\nWhat's the common use case? Trying to game the semantics and turn a div into a link? `contenteditable`? \r\n\r\nI can give you many cases where one might legitimately listen for child mouse and keyboard events on `div`s.  Modals, dropdowns, etc. These cases are perhaps even more common in Svelte than other frameworks, since Svelte, nicely, is not officious about HTML (e.g., no `<Link/>` component, not everything is assumed to be a component, etc.)\r\n\r\n> false positive\r\n\r\nThese errors are not false positives. The methodology is wrong, making the results _universally_ suspect. Svelte tries to infer the a11y of an element from the presence of event listeners. The goodness or badness of this...\r\n\r\n```svelte\r\n<!-- obviously bad -->\r\n<div on:click={() => goto('/foo')}>Foo</div>\r\n```\r\n...and this...\r\n```svelte\r\n<!-- probably legit -->\r\n<div on:click={childListener}><slot/></div>\r\n```\r\n...cannot be inferred solely from the presence of `on:click`. The fact that the errors on the first guy are approximately correct does not make the methodology sound.\r\n\r\n> we need to keep the current rule\r\n\r\nA11y in general is hard. The ARIA API is, well, ahem (~70 `aria-` attributes plus lord knows how many roles.) The official documentation is not great. There's not much overlap among people proficient in modern javascript and people proficient in a11y. (I'm not claiming to be anywhere on that Venn diagram.) \r\n\r\nGiven that environment, developers would be better served by Svelte doing only what it can do. In this case it's pretending to do something it can't. The pretense is [demonstrably harmful](https://github.com/sveltejs/language-tools/issues/650). Folks are turning off the a11y linter entirely because certain errors, like the ones above, are unreliable. Other folks, like me in this case, get sent down rabbit holes -- \"Oh @$#^, do user agents actually infer the a11y role from the listener?\" -- and end up having to confirm, at great length, that the linter is talking nonsense. (Then writing lengthy GitHub issues.)\r\n\r\nIf the linter is key feature, rather than just being able to say \"yeah, sure, Svelte has one,\" then it should work as well as everything else in the framework does.\r\n\r\nIn the meantime, I'll use comments to suppress the errors that bother me. Thanks as always for your work.\r\n\r\n\r\n\r\n\r\n\r\n","updated_at":"2023-07-13T17:57:54Z","created_at":"2023-07-13T17:57:54Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1635037486","body":"I highly doubt the \"probably legit\" part.\r\n\r\nPeople adding click handlers on divs, unaware of any problems, is very common. And I would agree with the maintainers that valid cases are relatively rare. The most common thing should always be regular buttons with immediate handlers.\r\n\r\nI just wish that #8001 would be addressed, just about anything would be better than the current state of affairs. If the warning explains everything properly, there will be no rabbit holes and lengthy research necessary to determine what to do with the warning. Either the user will realise they made a mistake and correct it or can just confidently ignore it.","updated_at":"2023-07-13T23:04:37Z","created_at":"2023-07-13T23:04:37Z","creator_user_login":"brunnerh"}
{"number":8964,"comment_id":"1638771216","body":"User agents check for `tabindex` to determine whether a semantically non-interactive element (let's just say \"div\") is in the accessibility tree (\"the tree\".)  \r\n\r\nBy contrast, the Svelte a11y linter considers any div with an attached mouse or keyboard event to be in the tree. This is wrong in two ways. First, it doesn't match what user agents do. Second, it ignores the existence of event propagation in javascript. \r\n\r\nSuggestion: The linter should use `tabindex` as the marker that a div is in the tree, just like user agents. So...\r\n\r\n```svelte\r\n<!-- not in the tree, no a11y errors -->\r\n<div on:click={handler}>...</div>\r\n\r\n<!-- in the tree, a11y errors -->\r\n<div on:click={handler} tabindex=\"0\">...</div>\r\n```\r\nA likely objection: It doesn't automatically catch the delinquent poster child, the div masquerading as a link or button. (See the first example above and assume `handler` does something button- or link-like.) \r\n\r\nYep. _The case is and should be ignored_. Reasoning...\r\n\r\n1. There's plenty of documentation nowadays on how to remove user agent styles from buttons and links. Plus Tailwind. The temptation to game HTML semantics has largely gone away. (I'm not saying people won't do it, I'm just saying it's much harder in 2023 to be unaware of correct alternatives to the anti-pattern than it was, say, in 2010.)\r\n2. A piece of UI is not \"accessible\" just because there are no linter errors. [From WAI](https://www.w3.org/WAI/test-evaluate/): \"Knowledgeable human evaluation is required to determine if a site is accessible.\" In this case, the absence of `tabindex` on the div would prevent it from being focused via the keyboard. The problem would surface with a bare minimum of keyboard testing. And once `tabindex` is added, the linter can proceed, knowing for sure that the div is interactive. \r\n\r\nUsing `tabindex`  is a more correct, cleaner solution than either copy editing ([#8001](https://github.com/sveltejs/svelte/issues/8001)) or hiding errors behind flags ([comment](https://github.com/sveltejs/svelte/issues/8964#issuecomment-1633708898).) It seems doable in the `Element.validate_attributes_a11y` method...\r\n\r\nhttps://github.com/sveltejs/svelte/blob/d2d219f8ca0fd19dd7a076fa812d89596c69bae5/packages/svelte/src/compiler/compile/nodes/Element.js#L600-L887\r\n\r\n...just check early on for the presence of `tabindex` >= 0 and use that to decide whether to surface the existing mouse and keyboard event errors. \r\n\r\nHappy to post a pr if people think this is the right approach. Thanks!\r\n\r\n\r\n","updated_at":"2023-07-17T19:49:00Z","created_at":"2023-07-17T19:49:00Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1638790709","body":"> The problem would surface with a bare minimum of keyboard testing\r\n\r\nYou are just way too optimistic about this. This is assuming that there even is *any* keyboard testing to begin with.","updated_at":"2023-07-17T20:02:59Z","created_at":"2023-07-17T20:02:59Z","creator_user_login":"brunnerh"}
{"number":8964,"comment_id":"1638909712","body":"> You are just way too optimistic about this. This is assuming that there even is any keyboard testing to begin with.\r\n\r\nThat's as may be (I haven't been accused of optimism for a couple of decades, so I'll take it as a compliment.) \r\n\r\nSeriously -- there's only so much babysitting the linter can do. It can only be a reasonable starting point. If developers or their employers choose to ship software without adequate testing, then that's not Svelte's fault. \r\n\r\nOn the other hand, if developers turn off or ignore the linter because parts of it are unreliable, then that is Svelte's concern.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","updated_at":"2023-07-17T21:27:06Z","created_at":"2023-07-17T21:27:06Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1642055446","body":"I'd just use `patch-package`. It's more productive. :grin: ","updated_at":"2023-07-19T13:10:15Z","created_at":"2023-07-19T13:10:15Z","creator_user_login":"non25"}
{"number":8964,"comment_id":"1646495854","body":"@cdcarson I believe you are correct about `tabindex` being more informative just event listeners... see the [separator role](https://w3c.github.io/aria/#separator) - it derives from the abstract roles `widget` or `structure`  depending on whether the element is \"focusable\". But people generally write the `on:click` and forget the `tabindex`, so it won't do much to improve accessibility.\r\n\r\nWith regards to your example - the \"perfectly legit code\" may not be perfect, [because it's not just listening to bubbled events from child elements, it also listens to events from itself](https://svelte.dev/repl/00047dfff155430d9be9a14d9fe66855?version=4.1.1).\r\n\r\nAnd of course, you could resolve around that with a `bind:this={wrapperDiv}` and returning early in your event handler if `event.currentTarget === wrapperDiv`.\r\n\r\nFor example, if there was an [event modifier](https://svelte.dev/docs/element-directives#on-eventname) for `notself`  (it would be the opposite of the [`self modifier`](https://github.com/sveltejs/svelte/issues/3372)), that both guarded against the code smell and resolved the `non-interactive` warning, that would possibly be a better solution?","updated_at":"2023-07-22T06:52:51Z","created_at":"2023-07-22T05:36:09Z","creator_user_login":"oscarhermoso"}
{"number":8964,"comment_id":"1646681749","body":"@oscarhermoso Your [example](https://svelte.dev/repl/00047dfff155430d9be9a14d9fe66855?version=4.1.1) seems to prove my point. The `LogWrapper` component isn't doing  any harm. It's not masquerading as a button or a link or some other interactive thing that should be marked as part of the accessibility tree, i.e. that should be focusable and tabbable to. Its existence does not affect the accessibility of the buttons within it. They can still be tabbed to and receive focus from the keyboard. \r\n\r\nThe component and its markup have no accessibility to \"improve.\" Trying to improve it, as the Svelte linter now does based on incorrect (as I believe I've adequately shown in my comments above) assumptions, has the opposite effect. \r\n\r\n","updated_at":"2023-07-22T22:16:10Z","created_at":"2023-07-22T22:16:10Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1646720117","body":"@cdcarson - but accessibility is impacted, because there's an interaction that can be accessed by mouse but not keyboard (clicking on the wrapper itself)\r\n\r\nHence the proposal for a `notself` event modifier...\r\n\r\n* If the `LogWrapper` was intended to be \"clickable\", then it should have an interactive role, a tabindex, and also be \"keypressable\".\r\n\r\n* If the `LogWrapper` was not intended to be \"clickable\", then the `notself` modifier should be applied so it only listens to events bubbling from children, and resolves the warning","updated_at":"2023-07-23T01:49:18Z","created_at":"2023-07-23T01:47:21Z","creator_user_login":"oscarhermoso"}
{"number":8964,"comment_id":"1646761787","body":"I raised a PR for a new event modifier named `nonself` (so that `self`/`nonself` matches the existing `passive`/`nonpassive`)","updated_at":"2023-07-23T06:47:05Z","created_at":"2023-07-23T06:47:05Z","creator_user_login":"oscarhermoso"}
{"number":8964,"comment_id":"1646864167","body":"> but accessibility is impacted, because there's an interaction that can be accessed by mouse but not keyboard\r\n\r\n@oscarhermoso, fair enough. Your point might be better made / more easily understood with a real-world example. But I'll concede the point, and go with the assumption that the div in the example belongs in the accessibility tree.\r\n\r\nSo, let's compare the proposals,  [`tabindex` (comment above)](https://github.com/sveltejs/svelte/issues/8964#issuecomment-1638771216) vs. [`|nonself`](https://github.com/sveltejs/svelte/pull/9029):\r\n\r\n##### What gets fixed\r\n- `tabindex`: Primarily, does away with the wrong warnings that appear in the common case of listening for child events, where HTML/a11y semantics are not gamed. Secondarily, accounts for gaming HTML semantics (if that is indeed necessary in real life. )\r\n- `|nonself`: Primarily leaves things as they are, on the assumption that gaming semantics is the salient case. Secondarily, provides a hoop for developers to jump through to fix the event propagation problem.\r\n\r\n##### Alignment with reality\r\n- `tabindex`: Aligned. User agents and assistive tech use `tabindex` to determine inclusion in the tree.\r\n- `|nonself`: Not aligned. Assumes users agents use event attachment to determine inclusion.\r\n\r\n##### Svelte-ishness\r\n- `tabindex`:  Not Svelte-ish. Just add `tabindex=\"0\"`, which is table stakes for the gaming case with or without Svelte.\r\n- `|nonself`: Svelte-ish. Developers would have to know/remember one more special thing about Svelte. (For example, I didn't remember the existence of the `|self` modifier until it was brought up here.)\r\n\r\n\r\n##### Explanation in docs\r\n\r\n_(please assume some of the terms below are linked to WAI or MDN documentation)_\r\n\r\n- `tabindex`:  Heads up! The a11y linter does not assume a semantically non-interactive element (like a `div`) with a mouse or keyboard listener is meant to be in the accessibility tree. If you intend the element to be part of the tree, then add `tabindex=\"0\"`. User agents will include the element in the tree, and the linter suggest appropriate attributes to make the markup accessible.\r\n- `|nonself`: Heads up! The a11y linter assumes a semantically non-interactive element (like a `div`) with a mouse or keyboard listener is meant to be in the accessibility tree. This differs from the behavior of user agents and assistive technology, and ignores event propagation. If your non-interactive element isn't doing anything interactive, you must add the `|nonself` modifier to each `on:eventName` directive in order to suppress the incorrect linter warnings.\r\n\r\n\r\nIMO, it's pretty clear that `tabindex` is the way to go.","updated_at":"2023-07-23T15:03:56Z","created_at":"2023-07-23T15:03:56Z","creator_user_login":"cdcarson"}
{"number":8964,"comment_id":"1694025225","body":"> We also should have some kind of option to silence specific [`ally`] warnings project-wide.\r\n\r\n@dummdidumm A simple `on:click` is causing my entire Svelte code to be underlined in squiggly yellow. This is dizzying and makes me want to halt all development on Svelte until there's a simple way to disable all `ally` warnings\r\n\r\nIs making this option available to Svelte developers a priority?","updated_at":"2023-08-25T23:17:52Z","created_at":"2023-08-25T23:17:52Z","creator_user_login":"repulsio"}
{"number":3488,"comment_id":"526863834","body":"I feel like having a magical global variable would reduce the ability to reason about svelte code.\r\n\r\nIt's also important for code authors to understand that dispatch fires only from the components it is initialised in, and cannot be passed around.\r\n\r\nThis would be very hard to express with a global variable.","updated_at":"2019-08-31T20:42:19Z","created_at":"2019-08-31T20:42:19Z","creator_user_login":"antony"}
{"number":3488,"comment_id":"526864621","body":"We have `Number`, `Object`, `Array`, etc. in the global context. I think most people deal just fine with it.\r\n\r\nMy biggest point here is that Svelte is not quite realizing the full potential of a compiler. Svelte can diagnose passing `dispatch` to a nested element as an error.","updated_at":"2019-08-31T20:55:49Z","created_at":"2019-08-31T20:55:49Z","creator_user_login":"thejohnfreeman"}
{"number":3488,"comment_id":"526866589","body":"Number, Array and Object are builtins/language native, not globals.\r\n\r\nThe point of Svelte is to create a language to describe reactive user interfaces, not to eradicate all boilerplate.\r\n\r\nA goal of svelte code is to maintain the path of least surprise, make code easy to reason about, live within the bounds of the javascript language, and not require custom tooling to write, parse, or understand.\r\n\r\nA global dispatch variable would cause problems for most existing tooling without specific configuration / whitelisting.\r\n\r\n","updated_at":"2019-08-31T21:30:58Z","created_at":"2019-08-31T21:30:58Z","creator_user_login":"antony"}
{"number":3488,"comment_id":"526867828","body":"I'm not sold on this being a great idea, but technically I don't think this would be much of a hassle.\r\n\r\nThere's precedent for special `$$`-prefix variables (although currently it's a precedent of one, `$$props`). It'd be pretty easy to inject the appropriate `import` and call `createEventDispatcher()` and assign it to `$$dispatch` if that variable were used.\r\n\r\nI can't speak to other tooling, but there's a mechanism already in place that the compiler is using to tell eslint-plugin-svelte3 about variables that it's injecting (used for `$$props` as well as the `$`-prefixed store autosubscriptions), and this could be used to tell the plugin about `$$dispatch` without any more work needed in the plugin.\r\n\r\nBut, again, none of this is necessarily an endorsement of this being a good idea. Just that it's reasonable from a technical standpoint.","updated_at":"2019-08-31T21:52:52Z","created_at":"2019-08-31T21:52:52Z","creator_user_login":"Conduitry"}
{"number":3488,"comment_id":"641438388","body":"Just to add a voice to this proposal, and +1, Svelte's power is in it's lack of boilerplate. I can create a component without any imports and just start writing code.\r\n\r\nThe create event dispatcher call feels completely out of place in within the context of the rest of svelte, it also uses oddly object oriented language when the rest of svelte is quite functional and data oriented. \r\n\r\nI shouldn't need to bind a snippet in my editor just to fire an event, a basic task that 50%+ components need to do. It's a small thing, but most devs I've talked to about this also feel it's pretty out of place within the rest of Svelte.","updated_at":"2020-06-09T16:56:09Z","created_at":"2020-06-09T16:52:10Z","creator_user_login":"samdesota"}
{"number":3488,"comment_id":"641464487","body":"Just reading through the couple of threads on this issue, I'm not really able to agree with the arguments presented against this thus far. \r\n\r\nI don't really buy the magical variable being counter to Svelte's approach, as mentioned above svelte already has a global variable namespace with both `$$props` and `$$restProps`. Obviously tools would require updating, but svelte already has quite good centralized linting and language tools that could be updated quickly. For the rest, linting isn't really a great argument against making a non-breaking change.\r\n\r\nFurthermore, in terms of passing around, if I'm not mistaken you can pass around a svelte event dispatcher, not that I'd recommend it, but technically if you wanted a child component to dispatch events from a parent it would work.\r\n\r\nSource:\r\n```typescript\r\nexport function createEventDispatcher() {\r\n\tconst component = get_current_component();\r\n\r\n\treturn (type: string, detail?: any) => {\r\n\t\tconst callbacks = component.$$.callbacks[type];\r\n\r\n\t\tif (callbacks) {\r\n\t\t\t// TODO are there situations where events could be dispatched\r\n\t\t\t// in a server (non-DOM) environment?\r\n\t\t\tconst event = custom_event(type, detail);\r\n\t\t\tcallbacks.slice().forEach(fn => {\r\n\t\t\t\tfn.call(component, event);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}\r\n```\r\n\r\nBecause the current component is called outside the closure, fire is always bound to the component that created the event dispatcher. The same could apply for a global `$$dispatch`.\r\n\r\nIn terms of performance (the cost of creating an event dispatcher is obviously near zero from the source above, but perhaps it could add up), another point is that dispatch could default to a single global stub instead of dispatch logic if no event callbacks are passed from the calling component. That way, the variable would always be created, but for majority of components that don't dispatch events there would be no memory impact at all.\r\n","updated_at":"2020-06-09T17:36:01Z","created_at":"2020-06-09T17:31:47Z","creator_user_login":"samdesota"}
{"number":3488,"comment_id":"641475051","body":"just a quick one here:\r\n\r\n1. A goal of Svelte is to require zero tooling, this means zero magic variables. This doesn't preclude being able to simply `import { dispatch } from 'svelte'`.\r\n2. If somebody wants to open a PR for this I will happily test and review, because thanks to all the feedback on this issue, I am also changing my opinion on whether we need `createEventDispatcher`. I don't speak for everyone, but I think it's worth coding up and seeing the difference.","updated_at":"2020-06-09T17:52:25Z","created_at":"2020-06-09T17:52:25Z","creator_user_login":"antony"}
{"number":3488,"comment_id":"641478766","body":"Magic globals like `$$dispatch` would only be able to be used inside component definitions. So, as with letting `onMount`/etc stuff being wrapped up into a single function that can be used in multiple components, I don't think we'd be removing or deprecating `createEventDispatcher` anyway.\r\n\r\n`import { dispatch } from 'svelte'` is not an option, because that involves a magic _import_, which is way more magical than a magic global. We need something like `createEventDispatcher` (or an implicit call to it from a magic global) so that we can capture the value of the internal `current_component` variable during component initialization.","updated_at":"2020-06-09T17:59:41Z","created_at":"2020-06-09T17:59:41Z","creator_user_login":"Conduitry"}
{"number":3488,"comment_id":"641716841","body":"Interesting. I'm curious to learn more about the Zero Tooling goal of svelte. Is the idea that svelte should evolve towards a simple js library?\r\n\r\nIt seems like svelte needs some way of talking about the current component or \"module\" that doesn't rely on magic vars and sync current component logic. \r\n\r\nThe \"right\" way of doing that seems almost like `import.meta`? `import.meta.fire(event, detail)` isn't terribly pretty, but it's a bit nicer:\r\n\r\n```svelte\r\n<script>\r\nconst { fire } = import.meta\r\n</script>\r\n\r\n<div on:click={() => fire('event', 'test')}>\r\n</div>\r\n```\r\n\r\nGiven the import.meta.document proposal (https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md), this seems somewhat reasonable to me. However, I don't know how realistic it is to modify `import.meta` in the current state of the world or if this is an abuse of import.meta.","updated_at":"2020-06-10T04:45:51Z","created_at":"2020-06-10T04:42:53Z","creator_user_login":"samdesota"}
{"number":3488,"comment_id":"697214640","body":"It seems it would spite @antony, so I turned this feature into a preprocessor: https://github.com/rixo/svelte-preprocess-autoimport.\r\n\r\nThis way, everyone can try it and choose for themselves.\r\n\r\nI too have always been bothered by the boilerplaty syntax of `createEventDispatcher` and, increasingly, also by the micro management of lifecycle functions imports like `onMount` and `onDestroy`, that often come and go as a component evolves...\r\n\r\nOn the other hand, I've lived through the \"everything global\" and \"libraries attach to default prototypes\" era of JS, and so I'm pretty wary of magic imports and magic in general. And I guess that the lack of imports in the source code will surely trip up tooling like Typescript.\r\n\r\nYet, as long as it is limited to the framework's own helpers, I think the added magic vs reduced boilerplate & micro management trade off might be worth it. I'm personally going to try this in my code, and see if I encounter any major setbacks that would make me reverse course.","updated_at":"2020-09-23T08:26:15Z","created_at":"2020-09-23T08:26:15Z","creator_user_login":"rixo"}
{"number":3488,"comment_id":"703548389","body":"Event forwarding is enhanced by an equivalent shorthand such as `on:click`. Event dispatching would really benefit from that approach as well. It appears to me that Svelte is trying to get rid of boilerplate wherever possible (shorthand attributes etc), but somehow dispatching events is left outside of that pattern. Vue.js for example follows this simple approach of having events dispatched from tags in `<template>` or from `<script>` if more logic is needed. But no other boilerplate is necessary to initiate the dispatcher.","updated_at":"2020-10-05T10:36:46Z","created_at":"2020-10-05T10:36:46Z","creator_user_login":"jd0e"}
{"number":3488,"comment_id":"717325270","body":"I don't buy \"no magic\" as a reason because Svelte already uses magic where it's useful. \r\n\r\nIn Svelte magic generally starts with a \"$\" so using `$dispatch` or `$$dispatch` or `$$onXXX` isn't more magically than for example the store-access shortcut via `$`.\r\n\r\nOf course it's important to prevent proliferation of \"to much magic\", but I think event-dispatch is to common to leave it as boilerplaty as it's now.","updated_at":"2020-10-27T15:31:05Z","created_at":"2020-10-27T15:31:05Z","creator_user_login":"kay999"}
{"number":3488,"comment_id":"717356246","body":"the whole point of a compiler is to make magic to write something understandable instead of assembly","updated_at":"2020-10-27T16:16:22Z","created_at":"2020-10-27T16:16:22Z","creator_user_login":"Garito"}
{"number":3488,"comment_id":"850788558","body":"I utilize the store contract to reduce boilerplate:\r\n\r\n```javascript\r\n// dispatch.js\r\nexport const dispatch = {\r\n  subscribe(cb) {\r\n    const dispatcher = createEventDispatcher()\r\n    const fn = (...args) => { dispatcher(...args) }\r\n    cb(fn)\r\n    return () => {}\r\n  },\r\n}\r\n\r\n// Component.svelte\r\n<div on:click={() => { $dispatch('action') }} />\r\n\r\n<script>\r\nimport { dispatch } from './dispatch'\r\n</script>\r\n```\r\n\r\nOr, going even further:\r\n```javascript\r\n// dispatch.js\r\nexport const dispatch = {\r\n    ...\r\n    const fn = (...args) => () => { dispatcher(...args) }\r\n    ...\r\n}\r\n\r\n// Component.svelte\r\n<div on:click={$dispatch('action1')} />\r\n<div on:click={onClick} />\r\n\r\n<script>\r\nimport { dispatch } from './dispatch'\r\n\r\nconst onClick = () => { $dispatch('action2')() }\r\n</script>\r\n```\r\n\r\nCould it cause any unobvious side effects?","updated_at":"2021-05-29T07:39:47Z","created_at":"2021-05-29T07:38:17Z","creator_user_login":"red-meadow"}
{"number":3488,"comment_id":"1000568782","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:49Z","created_at":"2021-12-23T23:55:49Z","creator_user_login":"stale[bot]"}
{"number":3488,"comment_id":"1002753694","body":"Does anyone know if @red-meadow's proposal works without unintended consequences? Seems as though it shouldn't interfere with tooling.\r\n\r\nI do agree the current boilerplate of createEventDispatcher feels decidedly un-Sveltelike for something so common. It encourages the usage of callbacks over events to reduce boilerplate, which I don't feel should be encouraged as the default event handling mechanism.","updated_at":"2021-12-29T19:57:41Z","created_at":"2021-12-29T19:54:16Z","creator_user_login":"jmroon"}
{"number":3488,"comment_id":"1002849976","body":"Looks like @red-meadow came up with the idea before me üëÄ @jmroon I've [tweeted](https://twitter.com/bluwyoo/status/1468271171862884353) about this approach before and explain some of the drawbacks [here](https://twitter.com/bluwyoo/status/1468413624741814277):\r\n\r\n> Automatic event infers probably wouldn‚Äôt work so you have to use the $$Events interface to explicitly type them. Largely because the tooling is specifically built for the createEventDispatcher pattern. But if this becomes mainstream, auto infers could be supported too. \r\n\r\nSo it would interfere the tooling a little.","updated_at":"2021-12-30T02:51:41Z","created_at":"2021-12-30T02:51:41Z","creator_user_login":"bluwy"}
{"number":3488,"comment_id":"1065617774","body":"I agree, My proposal : https://github.com/sveltejs/svelte/issues/7360\r\n\r\nWhat solution in conclusion?","updated_at":"2022-03-11T23:01:31Z","created_at":"2022-03-11T22:59:04Z","creator_user_login":"MatrixFr"}
{"number":3488,"comment_id":"1085052112","body":"I'd be happy enough with :\r\n``` import { dispatch } from 'svelte' ``` \r\nCall me lazy but I don't use `createEventDispatcher` because it's too much boilerplate.","updated_at":"2022-03-31T20:09:14Z","created_at":"2022-03-31T20:09:14Z","creator_user_login":"weepy"}
{"number":3488,"comment_id":"1119467679","body":"My first thought when I used `createEventDispatcher` was:\r\n\r\n\"Why in the world is `dispatch` not a globally available function? What's the upside of that?\"","updated_at":"2022-05-06T10:19:24Z","created_at":"2022-05-06T10:19:24Z","creator_user_login":"Arturexe"}
{"number":3921,"comment_id":"553651625","body":"@soullivaneuh I've created an example with your component: https://svelte.dev/repl/b220a2c7855a47fcbb713648d33aba49?version=3.14.1\r\n\r\nYou can use a dynamic `type`, but you need to handle two-way data binding by yourself via setting a value `{value}` and listening to changes `on:input`.\r\nThis is exactly what @Rich-Harris proposed in an answer to your question on Stackoverflow.\r\n\r\nMoreover, you can write a component which handles all kind of input types: https://svelte.dev/repl/31ee5896ee5c4364bf6d73538c895bd5?version=3.14.1\r\nBut, again, handling two-way data binding will be on your side. Different types emit different events, so you will have to subscribe to all required events to properly retrieve the input's value.","updated_at":"2019-11-13T23:25:00Z","created_at":"2019-11-13T23:25:00Z","creator_user_login":"rise2semi"}
{"number":3921,"comment_id":"553958653","body":"The proposal here, I guess, is to allow dynamic `type` values on inputs with `bind:value`, and to assume that the `type` will always be set to a 'normal' text-like one. This is something I've definitely considered before, but I can't find an issue right now where it was discussed. I suppose the question is whether that gotcha (which would need to be documented) is better or worse than having to manually put a `on:input` event handler on your input. I don't know the answer to that.","updated_at":"2019-11-14T16:11:24Z","created_at":"2019-11-14T16:11:24Z","creator_user_login":"Conduitry"}
{"number":3921,"comment_id":"554281555","body":"Thanks for the samples @rise2semi, I indeed didn't understand that way.\r\n\r\nStill, it's kinda workaround to me. It would be great to have this natively managed by Svelte, this is why I opened this issue. :+1: \r\n\r\nAt least, the current possible implementation is a good candidate for the official documentation/tutorial/examples as this seems to be a quite common case.","updated_at":"2019-11-15T09:24:40Z","created_at":"2019-11-15T09:24:40Z","creator_user_login":"soullivaneuh"}
{"number":3921,"comment_id":"607813338","body":"I also encountered this problem, so I solved it:\r\n\r\nInput component:\r\n```\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n\t\r\n  export let inputType= \"text\";\r\n  export let value = \"\";\r\n\t\r\n  let inputElement;\r\n  onMount(() => {\r\n    inputElement.type = inputType;\r\n  });\r\n</script>\r\n\r\n<input\r\n  on:keyup\r\n  on:change\r\n  bind:value \r\n  bind:this={inputElement}/>\r\n```\r\nExternal call:\r\n```\r\n<script>\r\n\timport Input from \"./Input.svelte\";\r\n\tlet value = \"\";\r\n\tlet text = \"\";\r\n\tfunction foo(){\r\n\t\tif(value.length < 4){\r\n\t\t\ttext=\"Passwod too short\";\r\n\t\t}else{\r\n\t\t\ttext=\"\";\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<Input bind:value inputType='password' on:change={foo}/>\r\n<p>{text}</p>\r\n```\r\n\r\nI don't know if this is really correct,superficially works.","updated_at":"2020-04-02T12:23:59Z","created_at":"2020-04-02T12:23:59Z","creator_user_login":"TIOvOIT"}
{"number":3921,"comment_id":"703761202","body":"I would also like to see this, for all of the reasons @soullivaneuh listed.","updated_at":"2020-10-05T17:01:04Z","created_at":"2020-10-05T17:01:04Z","creator_user_login":"paulschreiber"}
{"number":3921,"comment_id":"723520660","body":"If the only issue is the difference between number-based inputs (range, number, etc.), text-based (text, email, password, etc.), and [insert type here]-based inputs, the API should make it possible to switch between all input types that all produce the same type for `value`. My use case is to create a `<TextInput/>` element that can either be a `text`, `email`, or `password` input.\r\n\r\nOne option would be to drop the compile-time dynamic-input-type check entirely and let the user run into an error if they end up changing the type to something incompatible. A warning about this could be added to the documentation.\r\n\r\nAnother option would be to generate slightly less efficient code i.e. change the automatically generated handler any time the type changes.\r\n\r\nAnother option (which I'm not sure is possible) is to make the `type` input never reactive, instead using the value provided at initialization.","updated_at":"2020-11-08T02:18:01Z","created_at":"2020-11-08T02:13:41Z","creator_user_login":"finnbear"}
{"number":3921,"comment_id":"731323673","body":"I want to thank the svelte team for making it so that numbers-typed inputs return numbers.\r\n\r\nBut in this particular instance, if it's causing an issue like this then I'm 100% for letting developers deal with the conversion of number-based types, which is what they would have to do using vanilla JS anyway, and I'm pretty sure even React just has you (the developer) handle the numbers yourself. \r\n\r\nI'm interested in checking out the code responsible, perhaps there's a way for the numbered returns and also a way to dynamically set the type on inputs without needing any of the above work arounds?\r\n","updated_at":"2020-11-20T18:03:04Z","created_at":"2020-11-20T18:03:04Z","creator_user_login":"jhechtf"}
{"number":3921,"comment_id":"731336004","body":"@jhechtf the dynamic thing might the perfect solution. If svelte detects that an input's type is two-way bound, it should simply generate an input handler that checks the type each time.","updated_at":"2020-11-20T18:25:19Z","created_at":"2020-11-20T18:25:19Z","creator_user_login":"finnbear"}
{"number":3921,"comment_id":"869070410","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:54Z","created_at":"2021-06-26T22:46:54Z","creator_user_login":"stale[bot]"}
{"number":3921,"comment_id":"880664654","body":"Solution found on youtube for this problem, and works correctly in 2021 :\r\n\r\n  ```\r\nexport let type = 'text';\r\n\r\nconst setType = (node) => {\r\n    node.type = type;\r\n  };\r\n\r\n <input\r\n    bind:value\r\n    use:setType\r\n />\r\n```","updated_at":"2021-07-15T12:46:49Z","created_at":"2021-07-15T12:46:10Z","creator_user_login":"vince83110"}
{"number":3921,"comment_id":"903327707","body":"I encountered this same problem yesterday and think I found a reasonable workaround pattern for those who want to implement their own \"Input\"/\"Field\" components.\r\n\r\nProblem: Having a `Field.svelte` component that accepts a `value` and also `type` to conditionally render different labels/buttons etc, you would need to pass the now \"dynamic\" `type` prop to a child `<input>` component and also attempt to `bind:value` to the input ‚Äî but this causes the error `'type' attribute cannot be dynamic if input uses two-way binding`.\r\n\r\nSolution: rather than have a component like `Field` receive all it's `input` props (like `value` and `type`) to be forwarded to an internally defined `input`:\r\n\r\n```svelte\r\n// parent.svelte\r\n\r\n// problem: dynamic type attribute error\r\n<Field id=\"email\" label=\"Email\" type=\"password\" bind:value={values.password} />\r\n```\r\n\r\nyou could instead move the declaration of the input (with all it's props) into the parent component as a slotted child component that renders into a `slot`:\r\n\r\n```svelte\r\n// parent.svelte\r\n\r\n// solution: no error, no forwarding of props needed etc.\r\n<Field id=\"password\" label=\"Password\">\r\n  <input id=\"password\" type=\"password\" bind:value={values.password} />\r\n</Field>\r\n\r\n// field.svelte\r\n\r\n<div class=\"flex flex-col space-y-1\">\r\n  {#if label || $$slots.label}\r\n    <div class=\"flex flex-row items-center justify-between\">\r\n      <label for={id}>\r\n        <slot name=\"label\">{label}</slot>\r\n      </label>\r\n      <slot name=\"aside\" />\r\n    </div>\r\n  {/if}\r\n  <slot />\r\n</div>\r\n```\r\n\r\nThis allows me to still standardise my fields and how they render, and avoid dealing with cumbersome management of input props and forwarding event handlers etc.\r\n\r\nWhen it comes to styles, rather than pass class names to given slotted `input` elements, define the styles as css in the `Field`/`Input` svelte component (or in the case of tailwindcss, as `@apply`ed styles targeting `input` for my whole app).\r\n\r\nIn the original case of wanting to render additional content based on `type` (such as in the case of adding a toggle visibility button for a password field), rather than relying on `type` to be based to your `Field`/`Input` component, substitute it with another slot, named similar to `aside` or `input-after` to target your desired button:\r\n\r\n```svelte\r\n// field.svelte\r\n<div> // flex row\r\n  <slot />\r\n  <slot name=\"input-after\" />\r\n</div>\r\n\r\n// parent.svelte\r\n<Field id=\"password\" label=\"Password\">\r\n  <input id=\"password\" type=\"password\" bind:value={values.password} />\r\n  <button slot=\"input-after\" on:click={...}>Show/Hide</button>\r\n</Field>\r\n```\r\n\r\nOr even wrap up such logic into another component like `FieldPassword` that accepts `hidden: boolean` prop to control the visibility of its own defined button into the `input-after` slot.\r\n\r\nThis has worked for me so far, however I'm still just learning about svelte (and love it so far) and would be open to seeing how others approach what I can presume is a fairly common `Input`/`Field` component problem. :)","updated_at":"2021-08-22T20:43:02Z","created_at":"2021-08-22T20:43:02Z","creator_user_login":"peterboyer"}
{"number":3921,"comment_id":"942632742","body":"@vince83110 [your answer](https://github.com/sveltejs/svelte/issues/3921#issuecomment-880664654) is a neat trick! \r\n\r\nJust one remark: Most likely you have custom stylings on your inputs based on type e.g for `type=\"checkbox\"` and another one for `radio` and `text` and so on. So not having a `type` on these elements causes a layout glitch with unstyled inputs until `setType` fires and styling gets applied. One way to solve that would be applying a dynamically created class to the input based on the type and style it accordingly. Like: `class:\"input--{type}\"` with the same styles as for`type={type}`","updated_at":"2021-10-13T19:09:50Z","created_at":"2021-10-13T19:09:31Z","creator_user_login":"kilianso"}
{"number":3921,"comment_id":"1030652153","body":"You can also get around this is just to do `<input {...{ type: 'text' }}>`.","updated_at":"2022-02-05T16:13:46Z","created_at":"2022-02-05T16:13:46Z","creator_user_login":"eden-omb"}
{"number":3921,"comment_id":"1083193418","body":"Export input to a standalone component, and then handle the input manually instead of binding, then you can set dynamic type.\r\nand then you can bind the value to the component.\r\n\r\nSee example here:\r\nhttps://svelte.dev/repl/77f694a1851d464b85b382f4f152cb8e?version=3.46.4","updated_at":"2022-03-30T14:13:43Z","created_at":"2022-03-30T14:13:43Z","creator_user_login":"lacherogwu"}
{"number":3921,"comment_id":"1264216192","body":"All the solution/workaround proposed above will always return a `string`. Is there any solution that can return `number` when type=number?\r\n\r\nBecause numeric inputs should return a number, like in [Svelte Tutorial](https://svelte.dev/tutorial/numeric-inputs)\r\n\r\nRelated issue:\r\nhttps://github.com/themesberg/flowbite-svelte/issues/344","updated_at":"2022-10-01T03:12:42Z","created_at":"2022-10-01T03:08:16Z","creator_user_login":"risalfajar"}
{"number":3921,"comment_id":"1542071744","body":"> You can also get around this is just to do `<input {...{ type: 'text' }}>`.\r\n\r\nWhat's the downside of using this approach?","updated_at":"2023-05-10T11:55:16Z","created_at":"2023-05-10T11:55:16Z","creator_user_login":"elitan"}
{"number":3921,"comment_id":"1546816685","body":"> > You can also get around this is just to do `<input {...{ type: 'text' }}>`.\r\n> \r\n> What's the downside of using this approach?\r\n\r\nIf you do `<input {...{ type: 'number' }} bind:value={foo} />` then `foo` will be a string instead of a number","updated_at":"2023-05-14T06:07:34Z","created_at":"2023-05-14T06:07:34Z","creator_user_login":"Skinner927"}
{"number":3921,"comment_id":"1685315385","body":"Is this creating any problems on the compilation side other than returning a string instead of number ? Specially on Svelte 4?\r\n\r\n`<input {...{ type }} {name} bind:value />`","updated_at":"2023-08-20T15:42:35Z","created_at":"2023-08-20T15:42:35Z","creator_user_login":"HappyLDE"}
{"number":6997,"comment_id":"987938282","body":"If I understand you correctly, your confusion came from thinking that you only have the possibility to do `bind:value` for inputs, and that you didn't know that you could use regular input+events combinations? If so, what about the wording in [this tutorial step](https://svelte.dev/tutorial/text-inputs) was unclear to you (or in a way so that you didn't think about it later)?","updated_at":"2021-12-07T13:45:02Z","created_at":"2021-12-07T13:43:28Z","creator_user_login":"dummdidumm"}
{"number":6997,"comment_id":"988002315","body":"Not quite. I knew about events. However, my confusion was centered on how to format inputs specifically.\r\n\r\nSo for instance, [using a credit card format](https://svelte.dev/repl/899d537c364f43fd8d3d0b92e56b7cd0?version=3.44.2). (That example uses an `action`, though. Alternatives involving  state + event handler also exist.) Or perhaps requiring a money format... Basically, something that requires a certain format for the `input`, that _might_ automatically format the input, and that prevents users from inputting invalid values.\r\n\r\nIn other frameworks like `React` or `Vue`, no explanation for this use case is necessary. Their implementation of one-way data binding (specifically, one-way binding from `state` to `element`) leaves the state _entirely_ in control and prevents DOM events from updating elements or state on their own. So for formatting inputs, a user would just listen for the DOM event and update the state variable accordingly in a function they made -- as normal.\r\n\r\nIn `Svelte`, DOM events _are not_ prevented from updating the DOM or state variable. Because of this, the order of `on:input` and `bind:value` matter significantly when it comes to formatting an input (as pointed out in #2446). But this nuance isn't readily apparent anywhere, making formatting a bit difficult for newcomers -- especially from other frameworks.\r\n\r\nDoes that answer your question?","updated_at":"2021-12-07T14:56:18Z","created_at":"2021-12-07T14:56:18Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"988035111","body":"Maybe we are talking past each other, but what you describe is possible with Svelte, too:\r\n\r\n```svelte\r\n<script>\r\n\tlet value = 'world';\r\n\tfunction handle(evt) {\r\n\t\tif (value.length > 10) {\r\n\t\t\tvalue = 'nope';\r\n\t\t} else {\r\n\t\t\tvalue = evt.target.value + 1;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<input type=\"text\" {value} on:input={handle} />\r\n```\r\n\r\nYou don't need to use `bind:value` to make an input accept a value. `bind:value` makes this a two way binding. What you want is to split this up into one-way + event. The above code does this and I'm able to adjust the value the way I want, without having to resort to `evt.target.value = ..`. That's why I asked if that tutorial chapter wasn't clear about this, but I guess it wasn't. Maybe that tutorial would benefit from having the initial code contain the code to synchronize the input with the variable using `on:input`.","updated_at":"2021-12-07T15:30:50Z","created_at":"2021-12-07T15:30:50Z","creator_user_login":"dummdidumm"}
{"number":6997,"comment_id":"988064861","body":"Yeah some additional expounding like what you mentioned could be useful.\r\n\r\nRegarding your example, my only concern is situations where a person wants to make sure that the value _doesn't_ change. That is, the input is \"blocked\".\r\n\r\nIn `React`/`Vue`, maybe you'd keep the first `if` block (or a few). But for the case of the `value` _not_ changing, you would just do nothing.\r\n\r\nIf I understand correctly (maybe I don't), if the developer does _nothing_ in `Svelte`, then the `value` is automatically set to `event.target.value`, right? So doing nothing is not an option. To prevent this default behavior, the developer would basically need a way to assign the value to itself, but that doesn't do anything because the value doesn't change.\r\n\r\nI've seen someone do `value = String(value)`, but it's very odd to do this, and it wastes space (though not much). And the reasoning will not be _readily_ apparent to a typical developer. (Force-updates are rarely ever apparent in code, as far as I've seen.) Mutating `event.target.value` _back_ to `value` avoids creating new values unnecessarily. But I suppose someone else could also consider it odd.","updated_at":"2021-12-07T16:07:10Z","created_at":"2021-12-07T16:04:48Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"993590424","body":"@dummdidumm Honestly, the discussion on #6998 and [the related Twitter thread](https://twitter.com/kevmodrome/status/1468248292853272579) make me a little more nervous about this kinda stuff... especially since this topic is even tricky for well-known `Svelte` supporters. (When it's that tricky, it's really clear that documentation is important.)\r\n\r\nTo be fair, the inconsistency that occurs when placing `bind:value` beforehand across browsers (in #6998) is worth addressing in its own right as a bug. But that aside, this is all a sign that people need to know the significance of placing a `bind:value` _after_ an event handler. And if I understand correctly, the need to mutate `event.target.value` _back_ to `value` when the desire is to keep the input \"frozen\"/unchanged for invalid inputs still remains.\r\n\r\nThe tutorials would greatly benefit from this, since the significance of #2446 is not immediately apparent, nor is it easily searchable in Google -- meaning people will start thinking there are bugs that don't really exist. Input masking/formatting is a _perfect_ candidate to explain this odd scenario, as it's a common use case that already seems to be tripping people up. And it could easily go in one of the sections I previously mentioned. Thoughts?","updated_at":"2021-12-14T14:21:37Z","created_at":"2021-12-14T14:21:37Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"1000242173","body":"What's wrong with using the reactive block to correct the value? https://svelte.dev/repl/282c70030a864507852a2769639d4043?version=3.44.2\r\n\r\nIf you don't want to overwrite the user's value, you can define two variables, e.g., `storedValue` and `displayedValue`, and use the reactive block to update `storedValue` with either valid value of `displayedValue` or `null`.","updated_at":"2021-12-23T11:32:50Z","created_at":"2021-12-23T11:32:50Z","creator_user_login":"7nik"}
{"number":6997,"comment_id":"1000847009","body":"@7nik Two Things\r\n\r\n1) The main problem is again intuition. Anyone coming from any frontend framework -- even perhaps plain HTML and JS -- would expect all the `value`-related changes to happen _within_ the event handler. Reactive blocks are not intuitive at all in this regard. And they split up the sections that a developer has to look across to understand what the code is doing.\r\n\r\n2) By the time the reactive block is reached, it may be impossible to attain the original value in order to prevent a change to an `input`'s value. In other words, the reactive block won't always work. As for managing 2 variables, I tried that once and that isn't very intuitive either.\r\n\r\nWhat confuses and surprises me so much is that in regular HTML + JS, the user would have to mutate `event.target.value`. And a similar approach to this is necessary as well if `action`s are used. `Svelte`, from what I can tell, tries to avoid diverging too much from plain HTML + JS. In that case, it makes the most sense to either use actions or take the approach I recommended: adjusting `event.target.value`.\r\n\r\nI may also have to clarify the problem statement. I tried to keep it shorter in order to reduce the amount of reading people have to do. But historically on the Discord, I've had to explain more specific details as the conversation has gone on. But no one has provided a greater solution for this use case than mutating `event.target.value` from what I've seen so far. Kev suggested `action`s, which was _really_ good. But as far as clear docs/tutorials are concerned, I think people will need something lower level.","updated_at":"2021-12-24T13:54:11Z","created_at":"2021-12-24T13:54:11Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"1000868583","body":"The binding is just a way to synchronize a variable and an element's property. It isn't designed for wedging in a logic \"to format the input or something\". Assigning to `element.value` doesn't produce any events, so no one will know that you've changed it until you dispatch an event. Thus you get weird and buggy behavior.\r\n\r\nIf you need more than just synchronize a variable and a property - don't use binding, do it yourself with whatever additional logic you need. And then wrap all the logic into a separate component so you'll have something like `<CardNumber bind:value />` where `value` will contain either a valid card number or nothing.\r\n\r\nAnother way I see is using `action` to validate and synchronize the field, but with storage passed as a parameter to the action.\r\n\r\nHowever, it'd be nice if `bind:` could accept additional parameters, e.g., data validation and conversion functions. Because recently, I have to deal with the datatime field and it returns a string while I want to work with a Date object. So I had to have two variables: one for string value and another for date object and use reactive blocks to synchronize them.","updated_at":"2021-12-24T15:04:43Z","created_at":"2021-12-24T15:04:43Z","creator_user_login":"7nik"}
{"number":6997,"comment_id":"1000887659","body":"> The binding is just a way to synchronize a variable and an element's property. It isn't designed for wedging in a logic \"to format the input or something\". \r\n\r\nI'm not sure this is 100% true. But it's fair to say that people shouldn't need to create state variables [that they aren't using elsewhere/otherwise] every time they want to format an input [in the context of a general page or section of a page].\r\n\r\nEven so, the issue isn't just trying to approach formatting strictly by using state variables. The issue is when an input _needs_ to be formatted _and_ the value _needs_ to be synchronized _and_ the input _needs_ to remain \"unchanged\" when something invalid was entered (whether \"unchanged\" means literally unchanged, as above, or it means the value was coerced via regex, etc. to a new value that we're hoping the regex, etc. properly determined to be the previous state of the input).\r\n\r\nTo be fair, even outside that use case, it's impossible to [easily] prevent an input from changing if the correct format is not adhered to because an event handler has no knowledge of what the previous state of the input was by itself. Things like regex are an option, but you have to be incredibly clever and specific with how you employ it as the use case gets more complex (like with money, which seems harder than card numbers). And even then, it's possible to run into bugs. With state variables, you're _guaranteed_ that the input's value did not change at all, and with minimal effort.\r\n\r\n> And then wrap all the logic into a separate component\r\n\r\nI'd rather avoid using components because it complicates/restricts styling due to scoping. An `action` (as was mentioned) would play more nicely I think.\r\n\r\n> Assigning to element.value doesn't produce any events, so no one will know that you've changed it until you dispatch an event. Thus you get weird and buggy behavior.\r\n\r\nFrom what I understand, the behavior I suggested isn't buggy at all. An event has already been produced in the scenario I gave, and that event is exactly what will cause the element to update. When `bind` is used, whatever comes out of `event.target.value` (from the event handler) will always update the state variable if the state variable itself wasn't already updated.\r\n\r\n> Another way I see is using action to validate and synchronize the field, but with storage passed as a parameter to the action.\r\n\r\nYes. Dig actions. I'm using them in my app. And from what I can tell, you don't need to pass in the second parameter for storage if you order directives properly (#2446). They're great for re-use, and they don't create the component issue I mentioned earlier. The problem again comes back to intuition, and how easily a user would find the help in a tutorial. I spent a _really_ long time trying to figure out how to format money inputs (inputs in generally, really). I did see a [public component](https://gist.github.com/lacikawiz/27f91d57e7a9267fe7d7d36aad850c7e). But personally it seems too convoluted. The main point of this issue is that people need a clear way to do validation + formatting.\r\n\r\nThough, if `action`s seem like a better place to put the approach, that's also fine.","updated_at":"2021-12-24T16:06:09Z","created_at":"2021-12-24T16:06:09Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"1029987059","body":"Mkay. Circling back around to this after exploring a few options in my own projects. I think this is still an option for sure... But I probably disagree with it now. There is a different \"purist\" option that can be used instead... though the easiest way to make it _re-usable_ is yet again through actions. (However, someone could just as will put this in the `<script>` tag without the wrapping action.)\r\n\r\n```ts\r\n// formatAction.ts\r\n\r\nfunction formatAction(input: HTMLInputElement) {\r\n  let lastValidValue: string;\r\n\r\n  function handleBeforeInput(event: InputEvent & { target: HTMLInputElement }) {\r\n    lastValidValue = event.target.value;\r\n  }\r\n\r\n  function handleInput(event: InputEvent & { target: HTMLInputElement }) {\r\n    const { value, selectionStart } = event.target;\r\n\r\n    if (/* Value does not match required formatting */) {\r\n      event.target.value = lastValidValue;\r\n      const cursorPlace = selectionStart - (value.length - event.target.value.length);\r\n      requestAnimationFrame(() => event.target.setSelectionRange(cursorPlace, cursorPlace));\r\n      return;\r\n    }\r\n\r\n    lastValidValue = value;\r\n  }\r\n\r\n  input.addEventListener(\"beforeinput\", handleBeforeInput as EventListener);\r\n  input.addEventListener(\"input\", handleInput as EventListener);\r\n\r\n  return {\r\n    destroy() {\r\n      input.removeEventListener(\"beforeinput\", handleBeforeInput as EventListener);\r\n      input.removeEventListener(\"input\", handleInput as EventListener);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\n```svelte\r\n<!-- Somewhere in a Svelte file -->\r\n<input type=\"text\" use:formatAction />\r\n```\r\n\r\nSurely there had to have been a way to format (and restrict) `input`s before frontend frameworks started popping off. And I imagine they looked something like this.\r\n\r\nThis approach seems a bit more verbose? But I'm _assuming_ (?) that since it doesn't involve `state`, this won't cause any unnecessary re-renders. Additionally, as @7nik was hinting at, it's more re-usable because it doesn't depend on state. This can be slapped directly into any `input` while allowing the consumer to customize the HTML element. Or both of the handlers can be placed on a single `input` element while the `lastValidValue` is managed internally in a `<script>` tag without ever being exposed to the `template`.\r\n\r\n---\r\n\r\nMaybe some explanation on formatting would be better handled in the `action`s section after all? But I'm also wondering if it's just a matter of knowing pure HTML and JS better at this point, since it _could_ be done without state. (Which would hopefully improve performance, re-usability, and readability?)","updated_at":"2022-02-04T13:31:08Z","created_at":"2022-02-04T13:29:49Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"1029991826","body":"I think it easily gets missed, so I just want to add the reminder that the key struggle here is how to _prevent_ invalid inputs from the user. Altering inputs is very easy. _Prevention_ (which has valid uses cases across several websites) requires more effort and can't be accomplished through [this method](https://github.com/sveltejs/svelte/issues/6997#issuecomment-988035111).\r\n\r\nSome mutation of `event.target.value` will inevitably be necessary for this use case. But it's very straightforward and isn't really a problem.","updated_at":"2022-02-04T13:36:48Z","created_at":"2022-02-04T13:36:04Z","creator_user_login":"ITenthusiasm"}
{"number":6997,"comment_id":"1030272287","body":"Using the `beforeinput` event can be an excellent way to validate and format inputs. The only headache is to get the next value.\r\nHere is what I got: https://svelte.dev/repl/f45d38ec017749ddbcb86310d1102f82?version=3.46.4","updated_at":"2022-02-04T19:09:00Z","created_at":"2022-02-04T19:09:00Z","creator_user_login":"7nik"}
{"number":6876,"comment_id":"950104107","body":"Could you explain what the use case for this feature is and give some examples?","updated_at":"2021-10-23T06:46:59Z","created_at":"2021-10-23T06:46:59Z","creator_user_login":"dummdidumm"}
{"number":6876,"comment_id":"950114441","body":"@dummdidumm yeah sure...\r\n\r\n# Overview\r\nAt the company I'm working for, we are developing a dynamic UI/UX system to read data from a meta data system and data engine. We also have data roles/permissions/policies which provides a map of what the user can do with the data. \r\n\r\nThis presents a few problems.\r\n- an unknown data structure, but a known map between data models and components.\r\n- an unknown set of data policies for a given view until we navigate into it.\r\n- can't assume to know what components we need to render until we navigate into the system\r\n- roles/permissions/data policies may swap versions of components and these components might broadcast different event's depending on their functionality.\r\n- components have different functionality imported dynamically\r\n\r\nTypically when you build anything dynamically the process of deriving the structure of the UI and the data and event flow means that everything is loaded just in time.  The link between the parent/child components is done using a container component which maps the props, events and loads and get's needed for the child component to load.\r\n\r\n# Senario/Example\r\nFor example an admin might use DataEditAdmin.svelte and a normal user might use DataEditStd.svelte.  DataEditAdmin.svelte has access to properties on the metadata system that the Std component does not.  If the Admin user modifies their layout, those admin components broadcast events which the standard components do not in order to capture the modified child layout.\r\n\r\nIf svelte can do `svelte:component this={instance}` we assume that the instance is dynamic, the props are dynamic, we must also match that with event bindings that are dynamic in order to allow complete separation of the dynamic instance from hard coded values inside the instantiation of the component.\r\n\r\n# Code example\r\nWe have a window...\r\n![image](https://user-images.githubusercontent.com/78358451/138549099-8e9aa32f-5cd5-4064-857c-62decca0f148.png)\r\n\r\nWhen we click the window, we want to show some options...\r\n![image](https://user-images.githubusercontent.com/78358451/138549119-3db86d74-19d5-4135-9199-ef6d2e6611ad.png)\r\n\r\nWe don't know what those options are or will do, we also don't know what component those options are built from...but when we click one of them, we need to be able to pass this event into the container component so we can handle it.\r\n\r\nreusableFunction.ts\r\n```\r\nexport type MyDataStructure = {\r\n    propertyA: string;\r\n    someFn: CallableFunction;\r\n}\r\n\r\nfunction dynamicFunction(event: CustomEvent) {\r\n    console.log('this is a dynamicFunctionA')\r\n}\r\n\r\nfunction dynamicFunctionHandlesData(event: CustomEvent, data: MyDataStructure) {\r\n    console.log('this is a dynamicFunctionWithData')\r\n    //in this example someFn is simply a dispatch object we created so we can dispatch the event but it could be anything\r\n    data.someFn(event);\r\n}\r\n\r\nexport {dynamicFunction, dynamicFunctionHandlesData}\r\n\r\n\r\n```\r\n\r\nAdjustmentsContainer.svelte\r\n```\r\n<script lang=\"ts\">\r\n    import {ComponentSchema} from \"@/lib/dynamicLoad\"\r\n    import {onMount} from \"svelte\";\r\n    import type {MyDataStructure} from \"./reusableFunction\"\r\n    import {dynamicFunctionHandlesData} from \"./reusableFunction\";\r\n\r\n    export let top\r\n    export let right\r\n    export let width = 100;\r\n\r\n    export let height = 50;\r\n    let order\r\n    let resizeWidth\r\n    let resizeHeight\r\n    const someData: MyDataStructure = {} as MyDataStructure;\r\n\r\n    function testFn() {\r\n        console.log('testing testFn');\r\n    }\r\n\r\n    function testFn2(event: CustomEvent) {\r\n        console.log('testing testFn2');\r\n    }\r\n\r\n    //assume this is imported dynamically\r\n    function listItemClickHandler(event: CustomEvent) {\r\n        console.log(event.detail);\r\n        console.log('this is a test binding');\r\n    }\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    const someData: MyDataStructure = {\r\n        someFn: dispatch\r\n    } as MyDataStructure;\r\n\r\n    //assume this is loaded from an api/json schema and the listItemClickHandler is resolved using a dynamic module import\r\n    export let properties: ComponentSchema[] = [\r\n        {\r\n            componentName: \"./InteractableListItem.svelte\",\r\n            dataSource: 'someurl.com/data.json',\r\n            resolvedComponent: undefined,\r\n            loaded: false,\r\n            props: {\r\n                content: 'hello',\r\n            },\r\n            events: {\r\n                'event:bindings': {\r\n                    'test': [testFn, {data: someData}],\r\n                    'testevent': [testFn2, {data: someData}],\r\n                    '*': [dynamicFunctionHandlesData, {data: someData}],\r\n                }\r\n            },\r\n        } as ComponentSchema\r\n    ] as ComponentSchema[]\r\n\r\n    onMount(async () => {\r\n        for (let view in properties) {\r\n            console.log('slowly loading component ' + properties[view].componentName);\r\n            if (properties[view].resolvedComponent === undefined && properties[view].componentName) {\r\n                let name = properties[view].componentName\r\n                properties[view].resolvedComponent = (await import('../' + name)).default\r\n                properties[view].loaded = true\r\n                console.log('done loading')\r\n                properties = properties;\r\n            }\r\n        }\r\n    });\r\n\r\n    $: cssWindowStyle = `--top-position:${top}px;--right-position:${right}px;--width:${resizeWidth}px;--height:${resizeHeight}px;`\r\n</script>\r\n\r\n<div class=\"adjustments-panel position\" style={cssWindowStyle}>\r\n    {#each properties as {componentName, dataSource, resolvedComponent, props, events},i}\r\n        <svelte:component this={resolvedComponent} {...props} {...events} />\r\n    {/each}\r\n</div>\r\n```\r\n\r\nInteractableListItem.svelte\r\n```\r\n<script lang=\"ts\">\r\n    export let content = '';\r\n    import {createEventDispatcher} from 'svelte';\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    function handleClick() {\r\n        dispatch('listItemClicked', {test: 1});\r\n    }\r\n</script>\r\n\r\n<div class=\"window-listitem selectable\" on:click={handleClick}>\r\n   {content}\r\n</div>\r\n```","updated_at":"2021-10-23T12:26:17Z","created_at":"2021-10-23T08:07:26Z","creator_user_login":"ghost"}
{"number":6876,"comment_id":"950129626","body":"Thanks for explanation! So this is kind of the other end of #4599 . I'm not sure about the API proposal but I definitely agree that this makes sense to be able to react to arbitrary events. If #4599 would be implemented as `on:*` or `bubble:*`, then a matching implementation could be `on:*={handleEvents}` where `handleEvents` would be handed the event which you can differentiate based on the `type` property which all DOM events and the custom events have in common.\r\nNote that this is just me thinking out loud for now. I'll discuss this with the other maintainers soon hopefully.","updated_at":"2021-10-23T10:19:32Z","created_at":"2021-10-23T10:19:32Z","creator_user_login":"dummdidumm"}
{"number":6876,"comment_id":"950134302","body":"Precisely :)\r\n\r\nDuring dev this morning tho, this method does present some problems.  If I want data inside my handled event, if the functionality is dynamically imported this presents some interesting architecture challenges.\r\n\r\nI would also assume that, passing a spread operator is always preferable to on:* - I can't really think of a time where I might want on:* if you could just pass config in.  This might be useful for dev, to see which events are being broadcast but if you want to handle all events, you can simply pass in a * into the event config.\r\n\r\nSo here I'm working on the basis that my itemListClick handler is imported dynamically, we don't want to pollute the CustomEvent.\r\n\r\nIve looked at the use cases for on:*\r\n\r\nPersonally, I feel on: is special and Id downvote the on:* because it has some checking and consistency.  CustomEvents however handled like this allow the dev to bypass the safety of sveltes event checking.\r\n\r\nIf you take this example...\r\n```\r\n<script lang=\"ts\">\r\n...\r\n    const dispatch = createEventDispatcher();\r\n\r\n    const someData: MyDataStructure = {\r\n        someFn: dispatch\r\n    } as MyDataStructure;\r\n\r\n    //assume this is loaded from an api/json schema\r\n    export let properties: SchemaViews = {\r\n        ListItemA: {\r\n            componentName: \"./dynamic/InteractableListItem.svelte\",\r\n            dataSource: 'someurl.com/data.json',\r\n            resolvedComponent: undefined,\r\n            loaded: false,\r\n            props: {\r\n                content: 'hello',\r\n            },\r\n            events: {\r\n                'event:bindings': {\r\n                    'listItemClicked': ['clickableInteractions', 'listItemClickHandler', {data: someData}]\r\n                }\r\n            },\r\n        } as ComponentSchema,\r\n        ListItemB: {\r\n            componentName: \"./dynamic/InteractableListItem.svelte\",\r\n            dataSource: 'someurl.com/data.json',\r\n            resolvedComponent: undefined,\r\n            loaded: false,\r\n            props: {\r\n                content: 'hello',\r\n            }\r\n            events:{}\r\n        } as ComponentSchema\r\n    }\r\n\r\n    //components are then resolved dynamically\r\n...\r\n```\r\nContainer.svelte\r\n```\r\n    {#each properties as {componentName, dataSource, resolvedComponent, props, events},i}\r\n        <svelte:component this={resolvedComponent} {...props} {...events}/>\r\n    {/each}\r\n```\r\n\r\nIf you were to add on:* this would then add in bubbling and event handling when there wasn't any for the second list item. I would argue an assumption that in most cases, svelte:component is being used in a similar manner to handle multiple items and in cases where you handle a list you end up hardcoding a value into a dynamic component. This is generally a bad idea AFAIC - for DOM components, maybe it's fine but Im concerned with svelte:component here not other types of use so I might be wrong.","updated_at":"2021-10-23T12:27:51Z","created_at":"2021-10-23T10:54:15Z","creator_user_login":"ghost"}
{"number":6876,"comment_id":"1052521506","body":"You can pass in data using this method, just provide it in the binding.","updated_at":"2022-02-26T19:48:18Z","created_at":"2022-02-26T19:48:18Z","creator_user_login":"flipkickmedia"}
{"number":6876,"comment_id":"1186503485","body":"@flipkickmedia thank you so much for your work on this! Do you have any clue on whether it will be accepted and/or released soon?","updated_at":"2022-07-17T12:32:57Z","created_at":"2022-07-17T12:32:47Z","creator_user_login":"matthieujabbour"}
{"number":6876,"comment_id":"1186575903","body":"@flipkickmedia Great work on this so far. As the author of one of the duplicate issues, [#7548](https://github.com/sveltejs/svelte/issues/7548), I just had one question‚Äî\n\nAllowing event keys to be included in JSON data as the string counterparts of their literal spelt notation, it certainly keeps the syntax familiar, but wouldn't is also open the door to some dangerous situations where 3rd parties could pass in \"event props\" and thus take control of your app to some capacity? To avoid this, a user would have to sanitize all JSON data being used for props.\n\nThe two options I see are‚Ä¶\n- going the route you suggested, but only evaluating event props if an additional flag is used on the element/component, something like `ALLOW_EVENT_PROPS`\n- similar to the first option, exposing a helper function from the `svelte` package like `evalEventProps` that wraps the props like this:\n  ```svelte\n  <MyComponent {evalEventProps(...propsWithEvents)} />\n  ```","updated_at":"2022-07-17T17:22:02Z","created_at":"2022-07-17T17:21:34Z","creator_user_login":"brandonmcconnell"}
{"number":6876,"comment_id":"1201951696","body":"In the example, the `<svelte:component this={test}` construct is used. Would this workaround also work when the component is used directly (as in `<Test ....>`)?","updated_at":"2022-08-02T02:44:33Z","created_at":"2022-08-02T02:44:33Z","creator_user_login":"ptrxyz"}
{"number":6876,"comment_id":"1208710388","body":"> Thanks for explanation! So this is kind of the other end of #4599 . I'm not sure about the API proposal but I definitely agree that this makes sense to be able to react to arbitrary events. If #4599 would be implemented as `on:*` or `bubble:*`, then a matching implementation could be `on:*={handleEvents}` where `handleEvents` would be handed the event which you can differentiate based on the `type` property which all DOM events and the custom events have in common. Note that this is just me thinking out loud for now. I'll discuss this with the other maintainers soon hopefully.\r\n\r\nAny update on the discussions @dummdidumm ?","updated_at":"2022-08-08T23:10:29Z","created_at":"2022-08-08T23:10:29Z","creator_user_login":"Jojoshua"}
{"number":6876,"comment_id":"1213018689","body":"> In the example, the `<svelte:component this={test}` construct is used. Would this workaround also work when the component is used directly (as in `<Test ....>`)?\r\n\r\nIf you import the component `import Test from Test.svelte` then you can use the imported component.\r\n\r\nThe only reason to use a the <sveltecomponent ...> method is so you can dynmically load the component at runtime to make use of the meta data.\r\n\r\nIf you want to pass spread props/events to a component <Test {...props} {...events}> I can't really see a good reason to do this since you are statically generating the component and therefore know what props/events you need.\r\n\r\n","updated_at":"2022-08-12T11:37:31Z","created_at":"2022-08-12T11:35:47Z","creator_user_login":"flipkickmedia"}
{"number":6876,"comment_id":"1214223601","body":"@flipkickmedia Believe me‚Äî I want a method for spreading event props into a component as much as anyone. It's why I created an issue quite like this one).\r\n\r\nHowever, allowing any arbitrary JSON to be spread into special event/transition props is too unsafe if always done. 3rd-party providers and packages could easily abuse this and include such props in their JSON export which would put your site at risk of an XSS-like attack. Even if you know the initial structure, there's no way to know that such props wouldn't be added later.","updated_at":"2022-08-13T21:16:06Z","created_at":"2022-08-13T21:16:06Z","creator_user_login":"brandonmcconnell"}
{"number":6876,"comment_id":"1326541684","body":"> @flipkickmedia Believe me‚Äî I want a method for spreading event props into a component as much as anyone. It's why I created an issue quite like this one).\r\n> \r\n> However, allowing any arbitrary JSON to be spread into special event/transition props is too unsafe if always done. 3rd-party providers and packages could easily abuse this and include such props in their JSON export which would put your site at risk of an XSS-like attack. Even if you know the initial structure, there's no way to know that such props wouldn't be added later.\r\n\r\nI think we possibly are thinking the same thing.  The checking in svelte means when you import a component using a name e.g. `<Test .....>` Svelte will check to make sure the props/events passed are valid at compile time.  If you use a spread operator, this needs to be done at runtime.\r\n\r\nThis process depends on validating the data at runtime to stop the things you mention.  The reason for my comment about not using a spread operator when statically defining the component name is because Svelte can then do its checks when it compiles. \r\n\r\nYou could use the `<svelte:component>` method and just load your component into `this` to get the same result with this PR.\r\n\r\nSvelte can then ignore the checks when compiling and the event/prop data can be (and should be) validated at runtime.\r\n","updated_at":"2022-11-24T14:41:50Z","created_at":"2022-11-24T14:41:50Z","creator_user_login":"flipkickmedia"}
{"number":5292,"comment_id":"676695350","body":"Preprocessing happens before any parsing of the component, and is entirely regex based. I guess I'm ambivalent about how I think something like this ought to be handled. Do we want to start searching for a `<script>` or a `<style>` (whichever comes first), and then find its matching `</script>`/`</style>` and then start the search again _after that closed tag_ for the next `<script>` or `<style>`?","updated_at":"2020-08-19T20:55:52Z","created_at":"2020-08-19T20:55:52Z","creator_user_login":"Conduitry"}
{"number":5292,"comment_id":"761278998","body":"I think I just ran into this obscure bug, here's the code:\r\n\r\n```svelte\r\n<script type=\"text/typescript\">\r\n  function renderUserStyles(suppliedPalette) {\r\n    if (!suppliedPalette)\r\n      return \"\";\r\n\r\n    let palette = \"<style>:root {\";\r\n    let paletteCount = 0;\r\n\r\n    suppliedPalette.map(color => {\r\n      palette += `--user-color-${paletteCount++}: ${color};`;\r\n    });\r\n\r\n    palette += \"}</style>\";\r\n  }\r\n</script>\r\n\r\n<!-- / stuff /-->\r\n\r\n<svelte:head>\r\n  {@html renderUserStyles(thisUser.palette)}\r\n</svelte:head>\r\n```\r\n\r\nThe error I get is `[!] (plugin svelte) CssSyntaxError: ~/project/src/pages/[username]/status/[slug].svelte:1:8: Unknown word`. Here is the error in full:\r\n\r\n```error\r\nCssSyntaxError: ~/project/src/pages/[username]/status/[slug].svelte:1:8: Unknown word\r\n    at Input.error (~/project/node_modules/postcss/lib/input.js:82:16)\r\n    at Parser.unknownWord (~/project/node_modules/postcss/lib/parser.js:518:22)\r\n    at Parser.other (~/project/node_modules/postcss/lib/parser.js:149:12)\r\n    at Parser.parse (~/project/node_modules/postcss/lib/parser.js:59:16)\r\n    at parse (~/project/node_modules/postcss/lib/parse.js:11:12)\r\n    at new LazyResult (~/project/node_modules/postcss/lib/lazy-result.js:99:16)\r\n    at Processor.process (~/project/node_modules/postcss/lib/processor.js:33:12)\r\n    at transformer (~/project/node_modules/svelte-preprocess/dist/transformers/globalStyle.js:56:67)\r\n    at Object.exports.transform (~/project/node_modules/svelte-preprocess/dist/autoProcess.js:37:12)\r\n    at style (~/project/node_modules/svelte-preprocess/dist/autoProcess.js:161:33)\r\n```\r\n","updated_at":"2021-01-16T00:58:09Z","created_at":"2021-01-16T00:58:09Z","creator_user_login":"NetOpWibby"}
{"number":5292,"comment_id":"787743573","body":"Spent the morning today trying to figure out what's going on here. As a note for other victims of this bug, you can work around it by fooling the regex:\r\n\r\n```javascript\r\nconst styles = `<${''}style>:root { ${css} }</${''}style>`;\r\n```","updated_at":"2021-03-01T08:05:06Z","created_at":"2021-03-01T08:05:06Z","creator_user_login":"arggh"}
{"number":5292,"comment_id":"869055105","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:38Z","created_at":"2021-06-26T20:04:38Z","creator_user_login":"stale[bot]"}
{"number":5292,"comment_id":"872790890","body":"This came up again in https://github.com/sveltejs/kit/issues/1796 with the slight variation that `style` was not nested in `script` but rather contained within `{@html ..}`.\r\n\r\nAn idea about how to approach this:\r\nFirst blank any script and style contents using the regex. Then try parsing the result with the Svelte parser. If that succeeds, pass on the results. If that fails, this means that the user uses markup preprocessors, too, at which point we can't do much more than falling back to the way it is now (purely regex based). This solution would be a little bit slower but more robust.","updated_at":"2021-07-02T07:45:57Z","created_at":"2021-07-02T07:41:57Z","creator_user_login":"dummdidumm"}
{"number":5292,"comment_id":"1002443376","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T07:54:14Z","created_at":"2021-12-29T07:54:14Z","creator_user_login":"stale[bot]"}
{"number":5292,"comment_id":"1109490135","body":"Had similar problems in prettier-plugin-svelte where I solved this by checking if a tag is inside another tag and remove the inner tag if so\r\nhttps://github.com/sveltejs/prettier-plugin-svelte/blob/master/src/lib/snipTagContent.ts","updated_at":"2022-04-26T08:13:10Z","created_at":"2022-04-26T08:13:10Z","creator_user_login":"dummdidumm"}
{"number":5292,"comment_id":"1109796636","body":"I created https://github.com/sveltejs/svelte-preprocess/issues/507 which seems to be a duplicate of this. Wanted to highlight that this bug even occurs if the `<style>` string exists _within a comment_.","updated_at":"2022-04-26T13:26:44Z","created_at":"2022-04-26T13:26:44Z","creator_user_login":"samijaber"}
{"number":5292,"comment_id":"1241369539","body":"Here is another one in the same vein: \r\n\r\n![image](https://user-images.githubusercontent.com/157695/189248763-0d8ba619-58e3-4de7-86ca-dc41cc1d6123.png)\r\n\r\nDiscovered this with a string I was passing to highlight.js","updated_at":"2022-09-09T00:38:07Z","created_at":"2022-09-09T00:36:58Z","creator_user_login":"danawoodman"}
{"number":5292,"comment_id":"1402218732","body":"Pasting svelte code into a template literal also causes some stuff to be added to the output string. I posted about it on Stackoverflow:\r\n\r\nhttps://stackoverflow.com/questions/75223639/strange-error-with-template-literal-adding-to-string","updated_at":"2023-01-24T16:19:42Z","created_at":"2023-01-24T16:19:42Z","creator_user_login":"bennymi"}
{"number":4948,"comment_id":"636688948","body":"Weirdly this is only with slide. Fade works as expected.","updated_at":"2020-06-01T08:17:24Z","created_at":"2020-06-01T08:17:24Z","creator_user_login":"antony"}
{"number":4948,"comment_id":"637088044","body":"The problem with this example specifically is that changing the height of a `tr` element doesn't do anything. You can set it to 0 and it'll still look the same. What does work is animating the `line-height`, but this has some problems:\r\n\r\n- The default value is `normal`, and it's pretty much up to the browser what this value is, so we have to guess. It's apparently around 1.2em ([MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)), so can estimate by just multiplying the font size by 1.2, but wouldn't necessarily be 100% accurate\r\n\r\n- Animating the line height looks weird because the text stays the same size until it's gone:\r\n\r\n![line-height animation demo](https://i.gyazo.com/47c396b01b19f3371d6f63f8665c79c1.gif)\r\n\r\n- If we animate the font size too, it solves the above problem, but it also looks weird because the text shrinks towards the top left rather than in the same direction as the transition:\r\n\r\n![font-size animation demo](https://i.gyazo.com/e95a285e1002e35ac5c16db72a01d13d.gif)\r\n\r\nSo yeah, unless someone else has a better solution, this seems pretty hacky and I would guess unwanted? Although, it could be justified if only being applied to this edge case with table elements. Let me know if worth sending in a PR","updated_at":"2020-06-01T20:35:23Z","created_at":"2020-06-01T20:35:23Z","creator_user_login":"BillyLevin"}
{"number":4948,"comment_id":"637304538","body":"Wow, ok that's pretty complicated. Great work on tracking that down @BillyLevin and very nice screenshots to explain it!\r\n\r\nMy guess is that since the work-around has it's own issues, we should just update the docs to warn that `slide` doesn't work on adding `<tr>` so choose another option.\r\n","updated_at":"2020-06-02T06:21:49Z","created_at":"2020-06-02T06:21:00Z","creator_user_login":"avimar"}
{"number":4948,"comment_id":"637480090","body":"@avimar I managed to come up with a slightly better version, but you can see on the reverse transition, there's a bit of a gap at the bottom being caused by the child `td` before it gets removed.\r\n\r\n![slightly better transition preview](https://i.gyazo.com/e02f71c1d95f8341f042fe920be7e4dd.gif)\r\n\r\n@antony do you think this is worth adding for `tr` elements only? or just a docs/compiler warning saying to use a different transition?","updated_at":"2020-06-02T11:33:43Z","created_at":"2020-06-02T11:33:43Z","creator_user_login":"BillyLevin"}
{"number":4948,"comment_id":"637489839","body":"@BillyLevin I see the issue, but it looks pretty good to me.","updated_at":"2020-06-02T11:52:46Z","created_at":"2020-06-02T11:52:46Z","creator_user_login":"avimar"}
{"number":4948,"comment_id":"637507448","body":"I'm by no means an expert on transitions, so this is a good catch.\r\n\r\nI'm wondering if there is something we can do to mask the fact that slide won't work on that element, maybe even as a developer warning, rather than adding loads of caveats to the documentation.","updated_at":"2020-06-02T12:24:53Z","created_at":"2020-06-02T12:24:53Z","creator_user_login":"antony"}
{"number":4948,"comment_id":"637515832","body":"Not in a reasonable way that I can think of that wouldn't add extra code to everyone's apps. We don't want the compiler to make any assumptions about the contents of any of the stock `svelte/...` imports, nor are we able to look into user-defined transitions - and there's not a mechanism to have dev-mode-only code in these .js imports - without requiring everyone to add a particular rollup-plugin-replace/etc plugin to their bundler configuration, which would be a breaking change.","updated_at":"2020-06-02T12:41:04Z","created_at":"2020-06-02T12:41:04Z","creator_user_login":"Conduitry"}
{"number":4948,"comment_id":"639667199","body":"This won't be limited to Table Rows, pretty confident this will be the case on any element that doesn't have a [Block Level](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout) display property... For instance, `span` and `img` elements are set to `display: inline` by default. \r\n\r\nYou can see the same behavior described above with the `tr` element happening with other inline-ish elements in [this REPL](https://svelte.dev/repl/5d82b0ead23e436aa7611c978b918c08?version=3.23.0). If (on line 43) you change the span element's display property to `block` `inline-block` or even `flex`, `grid`, or any other block-ish layout, the transition works as expected. \r\n\r\nA possible developer warning (I imagine) would only need to be something along the lines of: \"The slide transition animates the height of an element. That being said, it will only work properly with block-level elements: those that can accept a height within document flow.\"","updated_at":"2020-06-05T18:16:06Z","created_at":"2020-06-05T17:54:17Z","creator_user_login":"mattwolff"}
{"number":4948,"comment_id":"639676636","body":"Specifically with sliding a `<tr>` into view... I'd suggest the same: set it to `display: block` or even wrap it in a `<div>` and apply the slide transition to that wrapping element. [Like this REPL](https://svelte.dev/repl/bcd16e2646b84c17864d19c237bb32b8?version=3.23.0). ","updated_at":"2020-06-05T18:10:22Z","created_at":"2020-06-05T18:10:22Z","creator_user_login":"mattwolff"}
{"number":4948,"comment_id":"766286894","body":"I wrote up a quick proof-of-concept PR (https://github.com/sveltejs/svelte/pull/5922) to apply CSS throughout animation (`display: block`, in this case). \r\n\r\nWould appreciate thoughts on this approach. I get that it does add some complexity in the animation/transitions. However, I can also foresee it might be helpful for custom transitions that require custom non-animatable CSS.\r\n\r\nI'd like a quick sanity check on the PR.","updated_at":"2021-03-29T03:31:54Z","created_at":"2021-01-24T03:55:06Z","creator_user_login":"chrisirhc"}
{"number":4168,"comment_id":"612052865","body":"Why?  Inheriting from HTML elements doesn't get us any closer to using vanilla Svelte components inside the shadow dom.  Is there any other motivation?\r\n\r\nIn general, inheritance is bad.  We don't want to give people any encouragement to use it.  Prefer composition.","updated_at":"2020-04-10T14:27:47Z","created_at":"2020-04-10T14:27:47Z","creator_user_login":"TehShrike"}
{"number":4168,"comment_id":"630518863","body":"I think commandment  about composition vs inheritance more applied to business logic stuff, till there we have mostly technical question.\r\n\r\nSvelte may compiles to Web Component, by producing custom subclass of web browser HTMLElement. New Web Component specs includes [new form-associated base classes](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-face-example)  It is the only way to achieve native browser behavior with web component compiled svelte code.\r\n\r\nBeyond that, it solves other issues listed by me in the ticket description\r\n\r\nProbably, some more compositional approach, would be split svelte and svelte compiler, to allow just compile  shadow dom related js code, without other framework-related things\r\n\r\n","updated_at":"2020-05-19T01:24:23Z","created_at":"2020-05-19T01:18:59Z","creator_user_login":"kmmbvnr"}
{"number":4168,"comment_id":"955421727","body":"+1 to component inheritance (in *any* form)\r\n\r\nI'm currently building a component library and having to redeclare the same few lines of code for *every* component is going to get old fast and be a huge pain to maintain. The best part is that the result for my components is a pretty basic (but still important) feature.","updated_at":"2021-10-30T18:25:58Z","created_at":"2021-10-30T16:23:12Z","creator_user_login":"WillsterJohnson"}
{"number":4168,"comment_id":"1099659495","body":"+1 to component inheritance (in any form)","updated_at":"2022-04-14T21:52:41Z","created_at":"2022-04-14T21:52:41Z","creator_user_login":"pournasserian"}
{"number":4168,"comment_id":"1646662941","body":"Please forgive my JS inexperience. I see how the specified feature (#8991) allows one to extend the SvelteComponent-generated class and customize it, but I don't see how it allows one to specify that it inherits *from a particular class* (whether that be `HTMLElement` or some custom `BaseSvelteComponent`). Am I missing something? Is there some way to use the constructor argument in `<svelte:options>`'s new `extend` function to modify the inheritance hierarchy or mix in the members of another class or something? Without an example to demonstrate, I don't see how it implements this feature request.","updated_at":"2023-07-22T20:10:14Z","created_at":"2023-07-22T20:10:14Z","creator_user_login":"willnationsdev"}
{"number":4168,"comment_id":"1646663209","body":"Yes this was closed by accident, you're right that it only allows to extend, not set a new base class.","updated_at":"2023-07-22T20:11:56Z","created_at":"2023-07-22T20:11:56Z","creator_user_login":"dummdidumm"}
{"number":4168,"comment_id":"1657254075","body":"On a related note, I've been experimenting with using mixins as a workaround, and one issue I've run into is that, when I have a lot of properties added to a mixin that I intend to sync back to the DOM, I have to inline *all* property definitions in every `customElements.props` section where it's used because it requires a statically analyzable object literal. You can't just create a const object elsewhere that's imported by a `<script context=\"module\">` tag.\r\n\r\nFor example, I have a `ContentElementMixin(Base)` that adds a variety of properties intended to be reflected back to the DOM, including `displayType`, `contentType`, and `contentId`. If I then want to create a `<content-menu-item>` element that uses the mixin, I can't store the `props` definitions for those base properties in a single location; they must be inlined in the Svelte component options every time I use the mixin somewhere:\r\n\r\n```svelte\r\n<svelte:options customElement={{tag: \"content-menu-item\", extend: ContentElementMixin, props: {\r\n    displayType: { reflect: true, type: \"String\", attribute: \"display-type\" },\r\n    contentType: { reflect: true, type: \"String\", attribute: \"content-type\" },\r\n    contentId: { reflect: true, type: \"String\", attribute: \"content-id\" },\r\n}} />\r\n\r\n<script content=\"module\">\r\n  import { ContentElementMixin } from \"./mixins.js\";\r\n</script>\r\n\r\n```\r\n\r\nGiven that I'm able to import `ContentElementMixin`, might it be possible to *at least* be able to import an object literal expression from elsewhere as well? Not sure how viable that is given the synchronous & isolated nature of the JS parser, but it's worth mentioning as a pain point anyway.","updated_at":"2023-07-30T20:08:13Z","created_at":"2023-07-30T20:04:51Z","creator_user_login":"willnationsdev"}
{"number":6662,"comment_id":"908142336","body":"I had the same experience a while back, luckily creating a custom (fly in/out) transition for my purpose was trivial, thanks to the brilliantly simple but flexible API.\r\nInstead of setting/animating the style property, I used JS api to set element styles directly.\r\n\r\ne.g. a simple fly in animation (similar to slide which caused CSP errors):\r\nhttps://svelte.dev/repl/e177537996964518a97c27dd0bee2d43?version=3.42.4\r\n\r\n\r\n","updated_at":"2021-08-30T08:16:21Z","created_at":"2021-08-30T08:16:21Z","creator_user_login":"cor3000"}
{"number":6662,"comment_id":"917437405","body":"I think I actually have a lead on this!\r\n\r\nI've traced the error, and it turns out to be a single instance of appending an empty stylesheet to the `<head>` at the start of the first transition.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/c040f130b761a6aae64590999516adec5bb89680/src/runtime/internal/style_manager.ts#L34\r\n\r\n`append_empty_stylesheet` (via calling `append_stylesheet` and `append`) eventually calls `target.appendChild(node)`.\r\n\r\nThis act of inserting an inline CSS style sheet (empty or otherwise) is disallowed under CSP. As far as I can see, all subsequent operations are performed via the CSSOM which are allowed.\r\n\r\nExperimentally replacing ` append_empty_stylesheet(node).sheet` with `document.styleSheets[0]` (just using the first stylesheet that happened to be loaded by the page) did allow the transitions to work under CSP. This is of course not a stable solution.\r\n\r\nIdeally we would modify Svelte to in some way use an existing stylesheet at document load. It is then the responsibility of the application framework to ensure that said stylesheet is loaded in a CSP-friendly way (via a `<link>` to a whitelisted source, a nonce, etc).","updated_at":"2021-09-11T16:50:18Z","created_at":"2021-09-11T16:50:18Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"917478277","body":"Something like this:\r\n```typescript\r\nconst stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = (document.styleSheets.filter(s => s.title === 'svelte-stylesheet')[0] || append_empty_stylesheet(node)) as CSSStyleSheet);\r\n```\r\nis a little better. In theory we could use some method (like looking for a styleSheet with a specific title or from an element with a specific id) to use a application/framework-provided (hopefully) CSP-approved stylesheet, and fallback to doing the same as today in order to avoid breaking. The title/id would have to be passed to the runtime somehow? Or use a pre-defined value (like 'svelte-stylesheet')?","updated_at":"2021-09-11T20:53:03Z","created_at":"2021-09-11T20:53:03Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"917492365","body":"A workaround for this issue: adding `'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='` (the hash value for an empty string) to your CSP's `style-src` allows Svelte to insert the empty document which it can then modify without violating CSP.\r\n\r\nThis is not in my opinion a very good solution (it's a very weird and specific thing to require), but it does work.","updated_at":"2021-09-11T22:06:52Z","created_at":"2021-09-11T22:06:52Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"922172430","body":"> A workaround for this issue: adding `'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='` (the hash value for an empty string) to your CSP's `style-src` allows Svelte to insert the empty document which it can then modify without violating CSP.\r\n> \r\n\r\nThis is a cool trick, unfortunately it doesn't work in Safari (at least up to version 14.1) and breaks any code using transitions. This may be due to a charset issue in Safari:\r\n\r\nContent Security Policy hash not recognized by Safari 11.0.3:\r\nhttps://stackoverflow.com/questions/48938671/content-security-policy-hash-not-recognized-by-safari-11-0-3#comment110503861_49163882\r\n\r\nSee this answer in particular:\r\nhttps://stackoverflow.com/a/49163882\r\n\r\nSome were able to solve this by changing the output of the minimizer (Uglify JS) to ascii_only. I don't know how to do this in Rollup/Terser (any suggestions are welcome!).\r\n\r\nIn any case, I'll have to go with unsafe-inline for style-src for now. If the built-in Svelte transitions can be modified to allow strict CSP in the near future that would be awesome (sorry I can't help with that!).\r\n","updated_at":"2021-09-18T03:38:37Z","created_at":"2021-09-18T03:38:37Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"922405298","body":"> Experimentally replacing ` append_empty_stylesheet(node).sheet` with `document.styleSheets[0]` (just using the first stylesheet that happened to be loaded by the page) did allow the transitions to work under CSP. This is of course not a stable solution.\r\n\r\nA question: since by default the first stylesheet loaded by Svelte should be global.css, (opening a Svelte project/website in a web browser and typing 'document.styleSheets[0]' in the console shows the loaded global.css for me), might using the global.css here (instead of appending a blank stylesheet as is currently done which as you suggest is the problem) actually be the simplest solution? This may likely be what happened in your case and it did work (i.e. the transitions under a strict CSP).\r\n\r\nPerhaps there should be some way to verify that it is the correct file. Checking in the console, the title field for the global.css styleSheet object is null (the href field does contain the file url), perhaps at the very least it should be given one when it is loaded?\r\n\r\nIn any case, since global.css both needs to be loaded by Svelte in order to work at all, and therefore must be allowed under a strict CSP, this should fix the issue with the transitions without having to add any additional CSP directives (assuming the transitions don't actually require any inline styles as you suggest). Unless there is a good reason a blank or additional external stylesheet needs to be loaded? I'm new to all this so please forgive me if I'm missing something :)","updated_at":"2021-09-19T02:28:11Z","created_at":"2021-09-19T02:28:11Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"922416167","body":"Ok, so my initial idea above _definitely_ did not work; appending global.css messes up the styles, seems obvious in hindsight.\r\n\r\nHowever I did find another workaround that suits my needs. I added a 3rd blank style-sheet called 'svelte-style.css' to index.html of an a test Svelte project as follows (after global.css and bundle.css):\r\n\r\n`<link rel='stylesheet' href='/global.css'>`\r\n`<link rel='stylesheet' href='/build/bundle.css'>`\r\n`<link rel='stylesheet' href='/svelte-style.css'>`\r\n\r\nThen in line 34 of stylemanager.ts I simply replaced `append_empty_stylesheet(node).sheet` with `document.styleSheets[2]` (which is of course the 3rd style sheet loaded) and recompiled Svelte and then the test project. For the CSP I was simply able to remove the`style-src: unsafe-inline` directive (observatory.mozilla.org confirms that this works) and keep my transitions in Safari (and Chrome and Firefox).\r\n\r\nI might attempt a better implementation of this tomorrow, but at least this hack works for me. Props to Karlinator for finding the cause of this issue!","updated_at":"2021-09-19T05:34:21Z","created_at":"2021-09-19T05:05:59Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"922531948","body":"So I made a working version (see link below, which includes all the changes) that looks for a stylesheet which has the text 'svelte-style.css' (a blank file in the same directory/location as 'global.css') in the href field. If it finds this, then it uses this for the stylesheet object. If not, it uses `append_empty_stylesheet(node).sheet` as before. In the case of the former, the transitions work under a strict CSP without the `script-src unsafe-inline` directive, and the order in which the external stylesheets are loaded doesn't matter (this wouldn't work in the previous example). In the latter case, everything works the same as before including requiring `script-src unsafe-inline` for the transitions to work under a strict CSP.\r\n\r\nI might modify this to check that the script is from a <link> tag (i.e. external) as opposed to a <style> tag, and/or to confirm that the 'svelte-styles.css' file is empty as extra precautions. If anyone has any suggestions for a better/more appropriate name for the added stylesheet feel free to let me know. Cheers!\r\n\r\nhttps://github.com/DrCBeatz/svelte/blob/40a0e33d8dbf86ec5615aa66833f82813a89cff1/src/runtime/internal/style_manager.ts#L35-L47","updated_at":"2021-09-19T20:28:40Z","created_at":"2021-09-19T20:26:57Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"922568942","body":"This is great work! In general the solution being \"the framework/app needs to provide an empty stylesheet\" can be prone to errors (and is a bit of a hidden dependency), but I don't really think that can be avoided. CSP is a very app-level thing, and there's just no good way to get around it at this level. Grabbing a stylesheet deliberately prepared for the occasion and falling back to the old behaviour is probably the best we can do.\r\n\r\nI would caution against restricting the source of the sheet too much I think. I would filter them based on the title (which is passed in by the element's `title` attribute, so `<link rel=\"stylesheet\" title=\"svelte-stylesheet\" href=\"/svelte-stylesheet.css\"/>` or `<style title=\"svelte-stylesheet\"></style>`). There are conditions where you'd want all content to compile into a single html document (and set certain hash or nonce CSP values), in which case you could supply a script tag allowed by your CSP. Those are probably rare situations, but I would leave it to the app level to decide on that if possible.","updated_at":"2021-09-20T00:42:34Z","created_at":"2021-09-20T00:42:34Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"922640867","body":"Thanks Karl! I changed it to filter by title (you have to specify the title attribute as 'svelte-stylesheet' in the link/style tag in index.html) and  also check whether the css file is empty (using `document.styleSheets.cssRules.length`; note that I cast each stylesheet as a `<CSStyleSheet>` instance so Typescript knows the `cssRules` property is actually there). Otherwise it defaults to `append_empty_stylesheet(node).sheet` as before. I did some manual tests and everything seems to work as expected. Anything else you can think of to add or address?\r\n\r\nhttps://github.com/DrCBeatz/svelte/blob/0d21b0adcb11a5d19fe37579dcf2d9b2cebda963/src/runtime/internal/style_manager.ts#L35-L48","updated_at":"2021-09-20T05:08:25Z","created_at":"2021-09-20T05:08:25Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"922872668","body":"I would be really curious if there are actually any cases where that cast to CSSStyleSheet would be problematic. I mean, I guess there is, like, DSSSL and XSL? The MDN docs doesn't seem to mention any case where a `StyleSheet` isn't also a `CSSStyleSheet`. I suppose if it did even happen this would throw a `cannot read property 'length' of undefined`. You could maybe use conditional chaining there? Again, no idea if this would ever come up.\r\n\r\nOther than that I _think_ this should be good.","updated_at":"2021-09-20T12:13:05Z","created_at":"2021-09-20T12:13:05Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"923565480","body":"Following your suggestion, I removed the cast to `<CSSStyleSheet>` and evaluated whether the stylesheet is an `instanceof CSSStyleSheet`. Typescript now knows whether a style sheet is a `CSSStyleSheet` (in which case it evaluates the `cssRules.length`), otherwise it moves on to the next sheet. I think this is a good call, since the `StyleSheet` class was designed to be extendable to non-css style sheets, and using these needn't break our code.\r\n\r\nLater this week I'll do more thorough testing/write some tests and see how it goes. Cheers!\r\n\r\nhttps://github.com/DrCBeatz/svelte/blob/2b0ec4fd61709d1cd3b87c190c698c2cd5073b40/src/runtime/internal/style_manager.ts#L35-L52","updated_at":"2021-09-21T02:52:33Z","created_at":"2021-09-21T02:52:33Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"923669782","body":"Hmm, the above commit with `instanceof CSSStyleSheet` instead of casting to `<CSSStyleSheet>` failed 226 tests when I ran `npm run test` (without writing any additional tests, initial error message was `ReferenceError: CSSStyleSheet is not defined`), whereas the commit before with`<CSSStyleSheet>` passed all tests. I may have been on the wrong track, in any case I've gone back to the cast with added guardrails  (`.?` operator on `cssRules` property and moving on to next sheet if not present). Typescript/Svelte seem to like the casting, hopefully the guardrails would handle the edge-case of a non-css stylesheet lacking `cssRules`. \r\n\r\nhttps://github.com/DrCBeatz/svelte/blob/14f744756ffb3075f12fa781550325ae276dc189/src/runtime/internal/style_manager.ts#L35-L52\r\n\r\n\r\n","updated_at":"2021-09-21T06:15:08Z","created_at":"2021-09-21T06:15:08Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"923730511","body":"The casting happens purely at compile time, `instanceof` actually happens at runtime. I think the native JS might just not have the `CSSStyleSheet` name in scope? Or at least in the test runners it doesn't?\r\n\r\nI think the guard rails should be sufficient (in fact right now you're double checking the existence of `cssRules`). If it is a CSSStyleSheet it will have a `cssRules` with a `cssRules.length`. If it's a different kind of `StyleSheet` then `css.cssRules` should just be null or undefined.\r\n\r\nThere is also the `StyleSheet.type` property, which is `'text/css'` for a CSSStyleSheet. I think that's how the Web APIs expect you to check this?","updated_at":"2021-09-21T07:53:55Z","created_at":"2021-09-21T07:53:55Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"925505004","body":"> The casting happens purely at compile time, `instanceof` actually happens at runtime. I think the native JS might just not have the `CSSStyleSheet` name in scope? Or at least in the test runners it doesn't?\r\n\r\nInteresting, I guess this makes sense since the `instanceof` version compiled and all the transitions worked in the test project with strict CSP, but even after casting immediately following an `instanceof CSSStyleSheet` check, it failed big time during `npm run test`.\r\n\r\n> I think the guard rails should be sufficient (in fact right now you're double checking the existence of `cssRules`). If it is a CSSStyleSheet it will have a `cssRules` with a `cssRules.length`. If it's a different kind of `StyleSheet` then `css.cssRules` should just be null or undefined.\r\n\r\nI think it is worth keeping the check for `cssRules` since it is possible for this property to be null in a `CSSStyleSheet` in some browsers (e.g. if the stylesheet is from a non-local origin, or because of certain browser extensions).\r\n\r\nhttps://stackoverflow.com/questions/46356349/document-stylesheetsx-cssrules-are-null\r\n\r\n> There is also the `StyleSheet.type` property, which is `'text/css'` for a CSSStyleSheet. I think that's how the Web APIs expect you to check this?\r\n\r\nGood call, I did add a check for this in the latest version. I honestly couldn't find a way to add a style sheet without it being converted to type=\"text/css\" in the browser, but if there is a way for a web browser do this, the code won't blow up. This passes everything in `npm run test` which also helps. :)\r\n\r\nI'm off to write some tests, cheers!\r\n\r\nhttps://github.com/DrCBeatz/svelte/blob/5310005316aa4630fb2065891bc87fba25660348/src/runtime/internal/style_manager.ts#L35-L53","updated_at":"2021-09-23T04:48:16Z","created_at":"2021-09-23T04:48:16Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"1029391229","body":"Just adding a note here:\r\n\r\n> Re inline styles added by Svelte itself ‚Äî I'm hoping that we can transition (geddit?) to use the Web Animations API before too long, so that we no longer need to use `unsafe-inline`.\r\n\r\nhttps://github.com/sveltejs/kit/issues/93#issuecomment-1018126775","updated_at":"2022-02-03T20:53:18Z","created_at":"2022-02-03T20:53:18Z","creator_user_login":"Karlinator"}
{"number":6662,"comment_id":"1185894061","body":"Came here via https://github.com/sveltejs/kit/issues/5215 ‚Äî thanks for all the research everyone. Long term the solution is definitely to switch to the Web Animations API, but I wonder if we can't get this to behave in the meantime.\r\n\r\nAs noted above, apps can specify `style-src: 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='`, since that's the SHA-256 hash of the empty string, and things will work in Chrome and Firefox. Safari, characteristically, shits the bed. But I think this bug is specific to the empty string. If I modify the `append_empty_stylesheet` function thusly...\r\n\r\n```diff\r\nfunction append_empty_stylesheet(node) {\r\n    const style_element = element('style');\r\n    console.log('appending empty stylesheet');\r\n+    style_element.textContent = '/* empty */';\r\n    append_stylesheet(get_root_for_style(node), style_element);\r\n    return style_element.sheet;\r\n}\r\n```\r\n\r\n...and then use this hash instead...\r\n\r\n```\r\n'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc='\r\n```\r\n\r\n...things work in Chrome, Firefox and Safari. \r\n\r\nI don't know if this is a good solution. It definitely feels hacky, and app developers would have to add that hash to their CSP headers (though frameworks like SvelteKit could add it automatically), but maybe it's better than the alternatives?","updated_at":"2022-07-15T20:31:41Z","created_at":"2022-07-15T20:31:41Z","creator_user_login":"Rich-Harris"}
{"number":6662,"comment_id":"1186044314","body":"Hi Rich, I tried this out and it works in Safari for Mac/iOS and the other browsers like you said. Adding a hash to a CSP header isn't any trouble, so I think this 1 LOC solution is great until the Web Animations API  is implemented. Thanks for this and everything you do. Cheers!","updated_at":"2022-07-16T01:02:54Z","created_at":"2022-07-16T01:02:54Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"1194672983","body":"@Rich-Harris are you interested in opening a PR for the proposed fix? The instructions on using the hash could be added to the API documentation (maybe under runtime at the end of the transitions section?). All the best!","updated_at":"2022-07-25T21:47:39Z","created_at":"2022-07-25T21:47:39Z","creator_user_login":"DrCBeatz"}
{"number":6662,"comment_id":"1201572992","body":"It appears the proposed fix using the hash no longer works because #7662 removed the `append_empty_stylesheet `function. Any ideas on a workaround? Thanks!","updated_at":"2022-08-01T18:40:49Z","created_at":"2022-08-01T18:40:49Z","creator_user_login":"DrCBeatz"}
{"number":4838,"comment_id":"629112809","body":"The issue here is that Svelte can't tell at compile time which elements might be custom elements, and which might be regular elements. Allowing `bind:value` on custom elements is essentially asking for the compiler to disable its compile-time checks for what valid bindings are, and also to guess at what the appropriate event to listen to is (in your example, it's `input`, but it could well also be `change`), and finally also to assume that the new value is going to be available in `target.value`.","updated_at":"2020-05-15T08:45:16Z","created_at":"2020-05-15T08:45:16Z","creator_user_login":"Conduitry"}
{"number":4838,"comment_id":"634318439","body":"Thinking back on this, it might be fairly safe to distinguish custom elements depending on whether their name contains a hyphen. So theoretically that takes care of the question of how to handle the validation, but I still don't know what code ought to be generated for this. Do we assume the component class has the private Svelte APIs for handling component binding?","updated_at":"2020-05-26T22:41:15Z","created_at":"2020-05-26T22:41:15Z","creator_user_login":"Conduitry"}
{"number":4838,"comment_id":"638623235","body":"I think a hyphen will be good! \r\n\r\nAnother idea to distinguish custom elements:\r\nIs it possible to declare custom elements in config? \r\n\r\nLike Vue ist does: \r\nhttps://vuejs.org/v2/api/#ignoredElements\r\n```\r\nVue.config.ignoredElements = [/^ui5-/];\r\n```\r\nBut svelte should not ignore this elements completely. This should more a registration of custom elements?\r\n\r\n\r\nIs it possible to validate the binding with HTMLElement.hasAttribute?","updated_at":"2020-06-04T06:08:04Z","created_at":"2020-06-04T06:08:04Z","creator_user_login":"knuspertante"}
{"number":4838,"comment_id":"730309421","body":"I'm facing this same issue using Shoelace components, for example [https://shoelace.style/components/input](https://shoelace.style/components/input)\r\n\r\nfig. 1\r\n`\t<sl-input name=\"name\" type=\"text\" label=\"Name your tank\" bind:value={name}/>`\r\n\r\n_'value' is not a valid binding on <sl-input> elements svelte(invalid-binding)_\r\n\r\nShoelace does provide a `sl-submit` event on its `<sl-form>` custom element which serializes the entire form in `event.details` (fig. 2) but I'd rather have the ability to directly bind the values of Shoelace input to Svelte variables like in fig. 1.\r\n\r\nfig. 2\r\n`<sl-form class=\"form-overview\" on:sl-submit={submitNewTank}>` ","updated_at":"2020-11-19T11:30:08Z","created_at":"2020-11-19T11:25:32Z","creator_user_login":"brgrz"}
{"number":4838,"comment_id":"730500362","body":"> \r\n> \r\n> Thinking back on this, it might be fairly safe to distinguish custom elements depending on whether their name contains a hyphen. So theoretically that takes care of the question of how to handle the validation, but I still don't know what code ought to be generated for this. Do we assume the component class has the private Svelte APIs for handling component binding?\r\n\r\nI agree that it should be safe to distinguish custom elements based on the presence of a hyphen -- [per the spec](https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name), custom element names must contain a hyphen, and there are only a few (mostly SVG) native elements that have hyphens in them.\r\n\r\nAs for what code should be generated, here's what I have to do when using a custom input element that Svelte could potentially compile away ([REPL](https://svelte.dev/repl/c35d83479641423d866da7f6a1bce510?version=3.29.7)):\r\n\r\n```svelte\r\n<script>\r\n\tlet inputVal;\r\n\tfunction handleInput(e) {\r\n\t\tinputVal = e.target.value;\r\n\t}\r\n</script>\r\n\r\n<p>\r\n\tCurrent value: {inputVal}\r\n</p>\r\n<custom-input on:input={handleInput}></custom-input>\r\n```\r\nIt's not a ton of boilerplate, but it can get annoying with multiple custom elements on the page. A binding would simplify this to\r\n\r\n```svelte\r\n<script>\r\n\tlet inputVal;\r\n</script>\r\n\r\n<p>\r\n\tCurrent value: {inputVal}\r\n</p>\r\n<custom-input bind:value={inputVal}></custom-input>\r\n```\r\n\r\nIn this example, custom-input is a vanilla custom element, not one created with Svelte. I don't think we should expect the custom element to have the component APIs that come from being generated with Svelte. IMO, the majority of custom elements used in a Svelte app would come from external libraries.\r\n\r\nI'm not familiar with the inner workings of the Svelte compiler, but here's a simple approach I think could work:\r\n1. Allow `bind:value` on elements containing a hyphen\r\n2. Automatically attach an input event listener to the element that sets `value` to `e.target.value`.\r\n\r\nThere are some caveats here:\r\n- For this to work, we'd have to assume that the custom element emits an `input` event and updates `value` when it occurs. This is not guaranteed, but we should add documentation outlining the expectation. FWIW, I checked the text input components for two popular custom element libraries ([Spectrum](https://opensource.adobe.com/spectrum-web-components/components/textfield) and [Shoelace](https://shoelace.style/components/input)), and they both conform to this behavior.\r\n- Since we can't validate what attributes an external custom element has at compile time, we couldn't emit any warnings if the binding was invalid.\r\n- This would only work for input value bindings. Other bindings might require a different approach.","updated_at":"2020-11-19T16:47:59Z","created_at":"2020-11-19T16:47:59Z","creator_user_login":"geoffrich"}
{"number":4838,"comment_id":"731144737","body":"> For this to work, we'd have to assume that the custom element emits an input event and updates value when it occurs. This is not guaranteed, but we should add documentation outlining the expectation. FWIW, I checked the text input components for two popular custom element libraries (Spectrum and Shoelace), and they both conform to this behavior.\r\n\r\nShoelace components (and really any custom element containing an input inside a shadow root) will emit an `input` event by _coincidence_ because the native input's event is retargeted to the host element. However, this isn't the event you want to listen for, nor is it guaranteed that `input` will be emitted by all input-like components. In Shoelace, for example, the correct event to listen for is `sl-input`.\r\n\r\nThis is important because `sl-input` is emitted _by design_, ensuring the correct value is received and parsed from the correct source at the correct time. Contrast this to a retargeted `input` event, which gets emitted immediately by arbitrary internal elements whenever the user provides input. It's not uncommon for a single custom element to contain multiple inputs that each emit an `input` event, so this will quickly break two-way binding that uses such a convention.\r\n\r\nExample: a custom element date picker that has an internal `<select>` for the year and multiple `<button>` elements for month/day controls. Selecting a year would emit `input` even though the user hasn't necessarily finished providing input. Selecting a day won't emit `input` because it's just a button. The final value is determined by multiple user interactions, so it's the date picker's job to manage them and decide when an event should be emitted and with what value.\r\n\r\nSimilarly, not all custom elements make use of `value`. (Shoelace does by convention, but some libraries and singleton custom elements do not.) So to make this compatible with all custom elements, you'd really need to allow for a customizable prop and event name.","updated_at":"2020-11-20T12:34:35Z","created_at":"2020-11-20T12:34:35Z","creator_user_login":"claviska"}
{"number":4838,"comment_id":"731270987","body":"> \r\n> This is important because `sl-input` is emitted _by design_, ensuring the correct value is received and parsed from the correct source at the correct time. Contrast this to a retargeted `input` event, which gets emitted immediately by arbitrary internal elements whenever the user provides input. It's not uncommon for a single custom element to contain multiple inputs that each emit an `input` event, so this will quickly break two-way binding that uses such a convention.\r\n\r\nThis is a good point -- I didn't think about this. I'm not familiar with enough custom element libraries to know how many emit a custom event for a text input and how many only rely on the native input event -- any idea which approach is more common?\r\n\r\n> Similarly, not all custom elements make use of `value`. (Shoelace does by convention, but some libraries and singleton custom elements do not.) So to make this compatible with all custom elements, you'd really need to allow for a customizable prop and event name.\r\n\r\nIs the goal to make `bind:value` compatible with all custom elements? It seems like once you get to the point of needing to customize the event + prop, it's a similar amount of code to wire up the event listener yourself. Also, the syntax `bind:value` implies that we should be binding to `value`, imo.\r\n\r\nI'm hoping to find a solution that provides a good default case for handling custom elements, but there's always going to be more complex cases that require custom setup.\r\n","updated_at":"2020-11-20T16:31:37Z","created_at":"2020-11-20T16:31:37Z","creator_user_login":"geoffrich"}
{"number":4838,"comment_id":"731296830","body":"> I'm not familiar with enough custom element libraries to know how many emit a custom event for a text input and how many only rely on the native input event -- any idea which approach is more common?\r\n\r\nIt's a good practice to use [Custom Events](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) to differentiate an event emitted by a custom element, but it's by no means a requirement. Custom Events can even use the same name as a native event, e.g. `input` or `change`.\r\n\r\nI mostly see Custom Events in the wild, but the naming conventions tend to vary. In Shoelace, you have [`sl-input`](https://shoelace.style/components/input?id=events). In Ionic, you have [`ionInput`](https://ionicframework.com/docs/api/input#events). In Microsoft FAST, you have a Custom Event called simply [`change`](https://github.com/microsoft/fast/blob/master/packages/web-components/fast-foundation/src/text-field/text-field.spec.md). All of these events effectively do the same thing. üòï\r\n\r\n> Is the goal to make bind:value compatible with all custom elements? It seems like once you get to the point of needing to customize the event + prop, it's a similar amount of code to wire up the event listener yourself. Also, the syntax bind:value implies that we should be binding to value, imo.\r\n\r\nI agree. I was mostly pointing out that Custom Elements can be (and are) designed in different ways compared to standard form controls. Because of that, it's really not possible to support binding for _all_ custom elements without a more verbose syntax. The question of whether or not it's worth it depends on what that syntax looks like, I guess.\r\n\r\nMy biggest concern here is settling on \"custom elements that utilize a `value` prop and emit an `input` event will be capable of two-way binding.\" As I mentioned above, because of [event retargeting](https://polymer-library.polymer-project.org/2.0/docs/devguide/shadow-dom#event-retargeting), this will cause unexpected behaviors in many custom elements that won't be obvious to the end user.","updated_at":"2020-11-20T19:15:53Z","created_at":"2020-11-20T17:20:36Z","creator_user_login":"claviska"}
{"number":4838,"comment_id":"731300941","body":"What's interesting is that we've mostly said goodbye with two-way prop bindings when Angular (in contrast to AngularJS) and Vue were released and did just fine for more than 5 years not having them and having to default to using events from components.\r\n\r\nWhen I saw two-way bindings are back with Svelte I had mixed emotions about it and Svelte tutorial itself warns from overusing it BUT nevertheless I quickly embraced them. \r\n\r\nSo maybe we're just barking up the wrong tree here?","updated_at":"2020-11-20T17:29:13Z","created_at":"2020-11-20T17:28:14Z","creator_user_login":"brgrz"}
{"number":4838,"comment_id":"731304123","body":"Just tossing this out here as a possible syntax for fun, so don't take it too seriously. üòÜ \r\n\r\n```html\r\n<sl-input name=\"name\" value=\"foo\" bind:value[sl-input]={name} />\r\n\r\n<ion-input name=\"name\" value=\"foo\" bind:value[ionInput]={name} />\r\n\r\n<fast-text-field name=\"name\" value=\"name\" bind:value[change]={name} />\r\n```\r\n\r\nWith something like this, you could infer that it's a custom element by the presence of `[eventName]` and simply bind the value when a custom event of that name is emitted.\r\n\r\nThe only thing the custom element needs to commit to is that `value` will be updated when the event is emitted, which seems totally fair to me.","updated_at":"2020-11-20T17:35:51Z","created_at":"2020-11-20T17:34:39Z","creator_user_login":"claviska"}
{"number":4838,"comment_id":"869070407","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:52Z","created_at":"2021-06-26T22:46:52Z","creator_user_login":"stale[bot]"}
{"number":4838,"comment_id":"882914832","body":"I like the proposal from @claviska. (Also commenting to prevent staleness)","updated_at":"2021-07-19T22:59:37Z","created_at":"2021-07-19T22:59:37Z","creator_user_login":"vultix"}
{"number":4838,"comment_id":"911213190","body":"Any progress on this?","updated_at":"2021-09-02T05:41:57Z","created_at":"2021-09-02T05:41:57Z","creator_user_login":"sidharthramesh"}
{"number":4838,"comment_id":"966010549","body":"I too would love to see this (for Ionic).","updated_at":"2021-11-11T05:53:08Z","created_at":"2021-11-11T05:53:08Z","creator_user_login":"Pugio"}
{"number":4838,"comment_id":"974849197","body":"I am interested in this issue as well. I would love two-way binding with custom elements.","updated_at":"2021-11-21T16:26:43Z","created_at":"2021-11-21T16:26:43Z","creator_user_login":"rdytogokev"}
{"number":4838,"comment_id":"974853862","body":"@sidharthramesh @Pugio @rdytogokev please don't spam this thread. Svelte is a community-developed piece of software, that just recently got its first full-time maintainer. Aka instead of spamming, go ahead and make a pull request.","updated_at":"2021-11-21T16:52:07Z","created_at":"2021-11-21T16:52:07Z","creator_user_login":"samuelstroschein"}
{"number":4838,"comment_id":"974855092","body":"@samuelstroschein I never meant for my comment to be perceived as spam. In fact, I am shocked that you called what I did \"spamming\". I would love to make a pull request and help out with this effort. But, I don't know how to help. Or even know where to start. I have spent hours trying to figure out a workaround for this issue on my own. I feel like I am spinning wheels and getting nowhere. While I understand basic JavaScript, I don't view myself as an expert. I consume JavaScript to work on projects, not invent it for platforms.  I do appreciate the work you do, in fact, I depend on it. I want to respect you, not bring you down. So where could a user of the project go to have their voice be weighed in for consideration, if not here?","updated_at":"2021-11-21T17:00:58Z","created_at":"2021-11-21T17:00:58Z","creator_user_login":"rdytogokev"}
{"number":4838,"comment_id":"974859243","body":"@rdytogokev Sorry, didn't mean to be offensive. It's just that your comment provides no value which can't be expressed with a simple thumbs-up. I thought it's common etiquette by now. A simple thumbs-up won't notify everyone who is involved and \"silently\" express interest in (solving) this issue. While commenting \"i would love to see this\", \"i am interested in this too\" notifies everyone involved without any value. \r\n\r\n> But, I don't know how to help. Or even know where to start.\r\n\r\nFair point and same problem I have. But how would I know that from one of X \"I am interested\" comments? Just comment that directly and for sure someone will help out :)  ","updated_at":"2021-11-21T17:23:47Z","created_at":"2021-11-21T17:23:47Z","creator_user_login":"samuelstroschein"}
{"number":4838,"comment_id":"1284216015","body":"This library provide a simple solution for this issue might help \r\nhttps://www.npmjs.com/package/svelte-wc-bind","updated_at":"2022-10-19T15:40:57Z","created_at":"2022-10-19T15:40:57Z","creator_user_login":"MohamedElmdary"}
{"number":4838,"comment_id":"1324091414","body":"The solution for Ionic (and possibly all wc based UI frameworks) imho calls for svelte wrappers on each element. And these wrappers doing the capture of events to emit new values. Examples are already given here and easy to implement.\n\nWhile this may seem overkill there are other reasons wrapping web components in Svelte native elements - especially Ionic - type safety, type ahead support and tree shaking. So why not bridging this issue in the same go.\n\nIonic-svelte package (I am maintainer) in near future will provide these - already present in experimental stage. Easily generated from the Stencil source.","updated_at":"2022-11-22T18:35:43Z","created_at":"2022-11-22T18:34:08Z","creator_user_login":"Tommertom"}
{"number":4838,"comment_id":"1608835904","body":"Just to update, Vue handles this with the following option in its Vite plugin. Would be really great if we could do this in Svelte too:\r\n```js\r\n plugins: [\r\n    vue({\r\n      template: {\r\n        compilerOptions: {\r\n          isCustomElement: tag => tag.startsWith('sl-')\r\n        }\r\n      }\r\n    })\r\n  ],\r\n```","updated_at":"2023-06-27T05:46:20Z","created_at":"2023-06-27T05:46:20Z","creator_user_login":"karimfromjordan"}
{"number":5346,"comment_id":"686250239","body":"All animations/transitions in svelte are done through pure css, simply add the following to your global style sheet\r\n```css\r\n@media (prefers-reduced-motion: reduce) {\r\n  * {\r\n    animation-delay: 0ms !important;\r\n    animation-duration: 1ms !important;\r\n  }\r\n}\r\n```","updated_at":"2020-09-03T04:48:29Z","created_at":"2020-09-03T04:48:29Z","creator_user_login":"pushkine"}
{"number":5346,"comment_id":"703057182","body":"All animations/transitions in svelte are not done through pure css.\r\n\r\nTweening is VERY much not done though css. The entire motion package isn't CSS","updated_at":"2020-10-03T06:51:02Z","created_at":"2020-10-03T06:49:37Z","creator_user_login":"blairn"}
{"number":5346,"comment_id":"703076212","body":"`svelte/motion` is an extension of `svelte/store`, if you know for sure that setting your values instantly won't break your uses of `spring` and `tweened`, the apis are so similar you'll most likely be fine just re-exporting them as `writable`s\r\n\r\n```ts\r\nimport { spring as svelte_spring, tweened as svelte_tweened } from \"svelte/motion\";\r\nimport { writable } from \"svelte/store\";\r\n\r\nconst reduce_motion = matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\r\n\r\nexport const spring = reduce_motion ? writable : svelte_spring;\r\nexport const tweened = reduce_motion ? writable : svelte_tweened;\r\n```\r\n\r\nThat's honestly as far as you'll get in terms of support for that feature given the constrains set by the v3 design","updated_at":"2020-10-03T09:34:30Z","created_at":"2020-10-03T09:34:09Z","creator_user_login":"pushkine"}
{"number":5346,"comment_id":"863371790","body":"I'm glad this was here - I was drafting a separate issue. \r\n# Svelte Transitions don't respect `prefers-reduced-motion` preferences - A11y\r\n**Describe the bug**\r\nSvelte transitions don't seem to respect `[prefers-reduced-motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion)` settings which could be an accessibility concern for users that struggle with movement on the screen.\r\n\r\n**To Reproduce**\r\nNavigate to the tutorial for animations (or create an example locally in Svelte). \r\nhttps://svelte.dev/tutorial/adding-parameters-to-transitions\r\n\r\nOpen up the browser dev tools and set `prefers-reduced-motion` emulation to `reduce`. \r\nhttps://developer.chrome.com/blog/new-in-devtools-79/#userpreferences\r\nIn Chrome for example, this is done in the **Rendering** panel which needs to be enabled.\r\n![image](https://user-images.githubusercontent.com/17771229/122433081-be2bc080-cf4a-11eb-9de1-17398c085604.png)\r\n\r\n**Expected behavior**\r\nThis is a bit difficult. I can't imagine a way that would solve this with no developer input. Perhaps reducing the max duration? An a11y expert in this area might be consulted to understand what about motion triggers people (for nausea, disorientation etc). While reducing max duration might help, it would be best to actually be able to choose a different animation for users who have their preferences set as such. For example, `fly` would be inappropriate in many cases for users who prefer reduced motion, whereas `fade` would be much more comfortable.\r\n\r\nI think it's important to note that animation is still a useful tool for understanding state change and removing it entirely would be taking away an intuitive user signal to a portion of the population. \r\n\r\n**I wonder if we could just fall back to `fade` with a short duration time** for all transitions when this setting is on? What would be the implications of this? \r\n\r\nIdeally though, developers would be able to add transition directives for these cases. Something like `reduceTransition`, `reduceIn`, and `reduceOut` if they wish to override the default a11y behaviour.","updated_at":"2021-06-17T16:10:23Z","created_at":"2021-06-17T16:10:23Z","creator_user_login":"benaltair"}
{"number":5346,"comment_id":"863455512","body":"This blog post was suggested [on Discord](https://discord.com/channels/457912077277855764/457912077277855766/855121039268511755) by @geoffrich. It has strategies (some similar to above) and also discusses the reasoning behind doing this. I know @Rich-Harris has spoken about the importance of supporting developers to do that right thing when it comes to a11y and I wonder if this is within that scope?\r\n\r\n### Blog Post\r\nhttps://geoffrich.net/posts/accessible-svelte-transitions/","updated_at":"2021-06-17T18:13:41Z","created_at":"2021-06-17T18:12:35Z","creator_user_login":"benaltair"}
{"number":5346,"comment_id":"974920610","body":"Fresh off a [Svelte Summit talk](https://geoffrich.net/posts/svelte-summit-2021/) about this very topic, I have some thoughts! I agree that Svelte has a responsibility to do something here, since it includes animation as part of its core library. However, I don't think it should be prescriptive as to _how_ it respects a request for reduced motion. Svelte should _not_:\r\n\r\n- Include anything to disable all animation entirely when reduced motion is turned on. \r\n- Automatically change the transition when reduced motion is turned on (e.g. change fly to fade) or the transition parameters\r\n\r\nThere's too much nuance in designing animation to make the right choice for every app. How to handle reduced motion is a design question, and there won't be a hard rule the framework can implement that will work for everyone.\r\n\r\nInstead, I think the framework should document the need to respect reduced motion in the relevant tutorial sections and docs. While `prefers-reduced-motion` has been around for a couple years, many developers have no idea it exists. Presenting the need to think about these things would go a long way towards making the web more accessible.\r\n\r\nIn addition, I think we should include a built-in way to detect if reduced motion is enabled or not. Animation libraries like framer motion already do this with the [useReducedMotion](https://www.framer.com/docs/guide-accessibility/) hook. While the actual code to do this in Svelte via a custom store is [minimal](https://svelte.dev/repl/e9b0322383bd4922bed92056c106c643?version=3.34.0), making it part of the core library would reduce friction and make it easy for developers to do the right thing. \r\n\r\nIdeally, devs would be able to do something like this...\r\n\r\n```html\r\n<script>\r\n\timport { reducedMotion } from 'svelte/motion';\r\n\timport { fly } from 'svelte/transition';\r\n\t\r\n\tlet show = false;\r\n</script>\r\n\r\n<label><input type=\"checkbox\" bind:checked={show}> Show/hide</label>\r\n{#if show}\r\n<h1 transition:fly={{y: $reducedMotion ? 0 : 400}}>Hello world!</h1>\r\n{/if}\r\n```\r\n\r\nLet me know what you think of this approach. I think it's another way Svelte can show its commitment to a11y. I'd be happy to put together a PR if I get positive signals on this.","updated_at":"2021-11-22T03:26:20Z","created_at":"2021-11-21T23:36:45Z","creator_user_login":"geoffrich"}
{"number":5346,"comment_id":"975584543","body":"+1 to not switching fly to fade (or something else) by default if we detect reducedMotion. But i wonder if we can do more than providing tools people need to implement themselves.\r\n\r\nWild ideas, tear them apart if not feasible\r\n \r\n#### 1) add compile time warnings to motionful transitions without a fallback \r\n\r\nSo people are warned when they neglect reducedMotion (similar to some a11y warnings we already have)\r\n`Warning: in Foo.svelte you are using a motionful transition without respecting prefers-reduced-motion, read some-link why this is important.`\r\n\r\n#### 2) add a generic way to select a different transition on reduced-motion\r\n\r\nSo people have tools to add their own use-case aware fallback when needed\r\n```html\r\n<script>\r\n\timport { fly, fade, none } from 'svelte/transition';\r\n\t\r\n\tlet show = false;\r\n</script>\r\n\r\n<label><input type=\"checkbox\" bind:checked={show}> Show/hide</label>\r\n{#if show}\r\n<h1 transition:fly={{y:  400}} transitionReduced:fade={{opacity:1}} >Hello world!</h1>\r\n{/if}\r\n{#if show}\r\n<h1 transition:fly={{y: 400}} transitionReduced:none >Hello world!</h1>\r\n{/if}\r\n```\r\n#### 3) implement default transitions that fall back to fade or none on a separate \"reducedMotionAware\"  namespace \r\n\r\nAs a turn-key solution that fits most use-cases to make it as simple as possible to adopt. \r\n\r\n```html\r\n<script>\r\n\timport { flyOrFade as fly } from 'svelte/transition/reducedMotionAware';\r\n        // or import { flyOrNone as fly } from 'svelte/transition/reducedMotionAware';\r\n\r\n\tlet show = false;\r\n</script>\r\n\r\n<label><input type=\"checkbox\" bind:checked={show}> Show/hide</label>\r\n{#if show}\r\n<h1 transition:fly={{y:  400}}>Hello world!</h1>\r\n{/if}\r\n```\r\nThis would allow people to just swap out an import and be done, no other code changes needed.\r\nLess work => more adoption\r\n\r\n","updated_at":"2021-11-22T14:28:57Z","created_at":"2021-11-22T14:28:57Z","creator_user_login":"dominikg"}
{"number":5346,"comment_id":"980783145","body":"Fwiw, I like the 2nd approach the best.\r\n\r\nWarnings (# 1) become easier to ignore the more there are of them, and there are many circumstances which require no a11y attention (e.g., exploratory coding). Exposure in such circumstances is likely to desensitize us to such warnings, rather than prompting action. (Not saying that all warnings are bad‚Ä¶just that they're rarely an ideal solution.\r\n\r\nThe alternative motion library approach (# 3) seems too heavy-handed to meet real-world needs. As @geoffrich points out above, and in his [excellent Svelte Summit talk](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=4271s), simply turning off animations when `prefers-reduced-motion` lacks the nuance needed in real-world situations. To quote Geoff, \"it's prefers _reduced_ motion, not prefers _no_ motion.\" Among other, smaller concerns, this option also seems like a maintenance hassle as it would mean ensuring that _svelte/transition_ and _svelte/transition/reduceMotionAware_ remain swappable in perpetuity.\r\n\r\n`transitionReduced` (# 2) appeals on several levels. It's almost self-explanatory, so a brief paragraph in the tutorial and another in the docs should be all that's needed, documentation-wise. In using the same syntax and behavior as `transition`, it retains the full power of Svelte transitions, while squirreling away the boilerplate needed to detect- and react to the user's motion preferences. It should even play well with auto-formatting:\r\n\r\n```\r\n  <h1\r\n    transition:fly={{ y: 400 }}\r\n    transitionReduced:fade={{ opacity: 1 }}\r\n    style={$dark ? \"white\" : \"black\"}\r\n  >\r\n```\r\n\r\nI also like Geoff's `$reducedMotion` idea, but it feels less Svelty than `transitionReduced`. Of course, these two ideas aren't mutually exclusive, and something like `$reducedMotion` would be needed under the hood to implement `transitionReduced`, so this might just be a question of \"to expose or not to expose\" when it comes to the lower-level feature.","updated_at":"2021-11-27T18:42:44Z","created_at":"2021-11-27T18:41:47Z","creator_user_login":"clozach"}
{"number":5346,"comment_id":"981826830","body":"Thanks for your thoughts, @dominikg and @clozach.\r\n\r\nAdding warnings (option 1) is a good thought, though I'm a little hesitant since I don't think we could perfectly determine whether or not to show a warning. For example, using `fly` without a reduced motion fallback isn't always an issue -- if the element only flies a few pixels, it could be okay. And they could be accounting for reduced motion in a separate file entirely, e.g. in their base CSS. So I think a warning would be tricky to correctly implement -- there's too much subjectivity in what counts as a violation.\r\n\r\nAdd a /reducedMotionAware namespace is also interesting, though that still puts Svelte in the position in determining what the fallback should be. I do appreciate the desire to make this simple for users, but I think it makes too many decisions (what the fallback should be) that should be left to individual apps.\r\n\r\nI find the `transitionReduced` directive most compelling, since it makes it easy to provide a fallback without having to import a separate store. Though what would replace `in:` and `out:` -- `inReduced` and `outReduced`? Maybe instead of a separate directive, we could make it a modifier like `|local`, so it would become `transition|reduced`, `in|reduced`, and `out|reduced`. We'd also have to define which transition should apply when, since we want `|reduced` to take precedence over a non-modified transition directive. I haven't entirely thought through this, but I think it should be possible. \r\n\r\ne.g. consider this:\r\n```\r\ntransition:fly\r\nin|reduced:fade\r\n```\r\n\r\nEven if we did have a modifier for it, I still think there's value in exposing the underlying store to give the user even more control. For example, you could then tweak individual parameters on the transition based on the store instead of adding `transition|reduced`. This would also allow people to take reduced motion into account when using the `tweened` or `spring` stores for motion.\r\n\r\nIn summary, I'm now proposing the following:\r\n1. Expose reducedMotion store as part of `svelte/motion`\r\n2. Add new transition modifier `reduced` to make it easy to define a transition that should take precedence when reduced motion is enabled.\r\n\r\nI expect more discussion to be needed around adding a new modifier. I think these could land in separate PRs -- having the store would deliver value if the modifier behavior is still being worked out.\r\n","updated_at":"2021-11-29T17:00:12Z","created_at":"2021-11-29T17:00:12Z","creator_user_login":"geoffrich"}
{"number":5346,"comment_id":"1059410641","body":"> Ideally though, developers would be able to add transition directives for these cases. Something like `reduceTransition`, `reduceIn`, and `reduceOut` if they wish to override the default a11y behaviour.\r\n\r\n> ```svelte\r\n> <h1 transition:fly={{y:  400}} transitionReduced:fade={{opacity:1}} >Hello world!</h1>\r\n> ```\r\n\r\nI think having additional directives would have the added benefit of allowing for helpful tooling in the IDE. There could be some form of hint suggesting that a user add these directives in certain instances. \r\n\r\nNot sure if it muddies things, but this tip could show only when the transition met certain thresholds. This introduces other issues though, and likely a universal solution (not case/criteria-based) would be more elegant. Regardless, having the option to implement alternate transitions in-line like this is developer-friendly.","updated_at":"2022-03-04T18:24:06Z","created_at":"2022-03-04T18:24:06Z","creator_user_login":"benaltair"}
{"number":5346,"comment_id":"1504268352","body":"A simple implementation idea:\r\n\r\n`transition:fly={{y:  400, animteWithReducedMotion: false }}`\r\n\r\nwith something like `animteWithReducedMotion` that's perhaps better named and defaults to `true` in order to not break existing code.","updated_at":"2023-04-11T23:35:23Z","created_at":"2023-04-11T23:35:23Z","creator_user_login":"justingolden21"}
{"number":4998,"comment_id":"642659077","body":"@Conduitry so that's why nobody had thought of that \"excellent\" idea ü§¶ üòÖ \r\nI'll be right back with an updated solution üëç","updated_at":"2020-06-12T21:02:52Z","created_at":"2020-06-11T13:46:16Z","creator_user_login":"hontas"}
{"number":4998,"comment_id":"683700914","body":"This problem breaks svelte transitions whenever svelte component is injected into shadow dom. I'm not using custom-element option and transitions are still broken. I think it's a pretty common case to inject svelte components into shadow-dom. This PR would help my team a lot.","updated_at":"2020-08-31T10:36:25Z","created_at":"2020-08-31T10:36:25Z","creator_user_login":"Buk1m"}
{"number":4998,"comment_id":"714690227","body":"Is something blocking this PR to be merged after commit #5b5a934?","updated_at":"2020-10-22T18:48:27Z","created_at":"2020-10-22T18:48:27Z","creator_user_login":"brunoalano"}
{"number":4998,"comment_id":"717886448","body":"As long as the PR is still open you can use the build script in the custom-elements template that I created. It fixes the transition using .getRootNode().\r\n\r\nCustom element template: https://github.com/redradix/svelte-custom-element-template\r\nBuild script source: https://github.com/redradix/svelte-custom-element-template/blob/master/scripts/build.js","updated_at":"2020-10-28T11:59:54Z","created_at":"2020-10-28T11:59:54Z","creator_user_login":"MonkeyAndres"}
{"number":4998,"comment_id":"717957241","body":"Thanks @MonkeyAndres! Your solution is fixing all the most common problems with custom elements, but it's pretty hacky. I would advise anyone who want to use it, to read carefully through the build script. Just to be aware of what kind of hacks are there. Using regex to replace `.ownerDocument` with  `getRootNode()` from build output is definitely not ideal.","updated_at":"2020-10-28T14:07:31Z","created_at":"2020-10-28T14:07:31Z","creator_user_login":"Buk1m"}
{"number":4998,"comment_id":"717961115","body":"Totally agree with you @Buk1m as I say in the README this is my solution to these limitations, if you find out a less \"hacky\" way of fixing these problems feel free to open an issue or PR in the repo.\r\nWith these replace approach I was trying to change the less amount of code to make it work but yeah, isn't ideal üòÖ","updated_at":"2020-10-28T14:13:35Z","created_at":"2020-10-28T14:13:35Z","creator_user_login":"MonkeyAndres"}
{"number":4998,"comment_id":"718489738","body":"@Conduitry could you please have a look at this PR again?","updated_at":"2020-10-29T08:49:53Z","created_at":"2020-10-29T08:49:53Z","creator_user_login":"hontas"}
{"number":4998,"comment_id":"735301638","body":"Does anyone need help landing this? Really looking at svelte with custom elements but I‚Äôm really looking to help with getting PRs around it to land. I‚Äôm happy to help!","updated_at":"2020-11-28T23:00:37Z","created_at":"2020-11-28T23:00:37Z","creator_user_login":"ScottAwesome"}
{"number":4998,"comment_id":"848283863","body":"@hontas Is there anything preventing this from getting merged?","updated_at":"2021-05-25T21:38:28Z","created_at":"2021-05-25T21:38:28Z","creator_user_login":"vultix"}
{"number":4998,"comment_id":"849385846","body":"@vultix yes I‚Äôm still waiting for feedback / approval from the maintainers on this one. I asked for another review a while back but I‚Äôm not sure how to escalate this to get attention.\r\n@Conduitry could you please have another look on this one?","updated_at":"2021-05-27T07:02:07Z","created_at":"2021-05-27T07:02:07Z","creator_user_login":"hontas"}
{"number":4998,"comment_id":"849536675","body":"Isn't this PR a subset of the functionality of https://github.com/sveltejs/svelte/pull/5870?","updated_at":"2021-05-27T10:56:19Z","created_at":"2021-05-27T10:55:52Z","creator_user_login":"hgiesel"}
{"number":4998,"comment_id":"1000218431","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T11:00:40Z","created_at":"2021-12-23T11:00:40Z","creator_user_login":"stale[bot]"}
{"number":3586,"comment_id":"532702597","body":"For something like this you should consider using https://github.com/sveltejs/svelte-virtual-list . Virtual list of course will not work for this specific problem, but that should give an idea.","updated_at":"2019-09-18T14:11:02Z","created_at":"2019-09-18T14:11:02Z","creator_user_login":"daliusd"}
{"number":3586,"comment_id":"536808189","body":"Yeah, but I have a grid in my component with a lot of cells and those cells needs to be visible all the time - no scrollbar. REPL above is just simple example :) ","updated_at":"2019-10-01T00:38:34Z","created_at":"2019-10-01T00:38:34Z","creator_user_login":"neuronetio"}
{"number":3586,"comment_id":"540262019","body":"@neuronetio can you share any numbers on the performance before/after #3642? we actually used comment nodes previously, but changed it to empty text nodes because it's less cluttered when you open devtools. If there's a noticeable performance impact then I guess we probably do need to revert it, though this *does* seem like an extreme case üòÄ. Maybe it could even be an option...","updated_at":"2019-10-10T00:18:11Z","created_at":"2019-10-10T00:18:11Z","creator_user_login":"Rich-Harris"}
{"number":3586,"comment_id":"540391214","body":"@Rich-Harris comment nodes are way better for this usage.\r\nThere's a reason Angular is using them.","updated_at":"2019-10-10T06:38:07Z","created_at":"2019-10-10T06:04:05Z","creator_user_login":"marcus-sa"}
{"number":3586,"comment_id":"540392972","body":"I will give non performance reason why whitespace nodes is not good idea: https://codepen.io/daliusd/pen/rNNONVd","updated_at":"2019-10-10T10:37:44Z","created_at":"2019-10-10T06:07:58Z","creator_user_login":"daliusd"}
{"number":3586,"comment_id":"587114640","body":"+1 for comment nodes, also related https://github.com/sveltejs/svelte/issues/4423","updated_at":"2020-02-17T18:33:58Z","created_at":"2020-02-17T18:33:58Z","creator_user_login":"shirotech"}
{"number":3586,"comment_id":"587212394","body":"Does anyone have any benchmarks for empty text nodes vs comment nodes?","updated_at":"2020-02-18T00:20:18Z","created_at":"2020-02-18T00:20:18Z","creator_user_login":"Conduitry"}
{"number":3586,"comment_id":"587266501","body":"@Conduitry https://jsperf.com/empty-createtextnode-vs-createcomment/1\r\n\r\nComment nodes are slightly faster, but regardless of that comment nodes I think is more correct because it doesn't influence dom structure or styling/layout.","updated_at":"2020-02-18T03:56:07Z","created_at":"2020-02-18T03:56:07Z","creator_user_login":"shirotech"}
{"number":3586,"comment_id":"587533327","body":"I think the discussion about text vs comment nodes derails the main issue at hand here which is the large amount of superfluous nodes being created. \r\n\r\nAny slight difference between text vs comment nodes can shift around between browser engines or different versions of the same engine, but the creation of nodes that shouldn't be there is guaranteed to degrade performance in all environments.","updated_at":"2020-02-18T15:58:18Z","created_at":"2020-02-18T15:58:18Z","creator_user_login":"gonchuki"}
{"number":3586,"comment_id":"601473456","body":"@Conduitry what would it take for comment nodes to be considered? Right now I'm just using a fork, as the app actually crashes with text nodes in IE11 if it was used in a WordPress environment (their emoji replacing function).","updated_at":"2020-03-20T00:13:21Z","created_at":"2020-03-20T00:13:21Z","creator_user_login":"shirotech"}
{"number":3586,"comment_id":"611593598","body":"Strange that those nodes only appear in Firefox and not in Chrome.","updated_at":"2020-04-09T15:32:51Z","created_at":"2020-04-09T15:32:51Z","creator_user_login":"antony"}
{"number":3586,"comment_id":"611926021","body":"@antony They are in Chrome also, just hidden from the Elements tab of inspector tool. They still exist in the DOM.","updated_at":"2020-04-10T08:00:09Z","created_at":"2020-04-10T08:00:09Z","creator_user_login":"shirotech"}
{"number":3586,"comment_id":"622285245","body":"Even worse, the emtpy text nodes are styled by the browser (width and height) which leads to unpredictable effects.","updated_at":"2020-05-01T07:37:17Z","created_at":"2020-05-01T07:37:17Z","creator_user_login":"jcschmidig"}
{"number":3586,"comment_id":"812470031","body":"Even if there are improvements that could be made to the engine, it's probably a good idea to use comments.\r\n\r\nI could see this causing issues in page builders that merge/remove text blocks, and text nodes are styled by the browser which is probably why the performance issue is occurring in the first place.","updated_at":"2021-04-02T10:21:00Z","created_at":"2021-04-02T10:20:04Z","creator_user_login":"AlbertMarashi"}
{"number":3586,"comment_id":"1000568804","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:53Z","created_at":"2021-12-23T23:55:53Z","creator_user_login":"stale[bot]"}
{"number":4056,"comment_id":"562524784","body":"I suppose this would be a proposal for an `outro` boolean option to the method, analogous to the `intro` option in the constructor.","updated_at":"2019-12-06T10:45:11Z","created_at":"2019-12-06T10:45:11Z","creator_user_login":"Conduitry"}
{"number":4056,"comment_id":"562810976","body":"We should explain this feature in the documentation, otherwise more people may think this is a bug like me.","updated_at":"2019-12-07T03:53:41Z","created_at":"2019-12-07T03:53:41Z","creator_user_login":"dishuostec"}
{"number":4056,"comment_id":"565766380","body":"But if this component was used inside of another Svelte component itself, wouldn't you instantiate it differently? as in have Svelte deal with the lifecycle hooks for you, rather than manually calling them? Because Svelte will handle the transitions accordingly this way.\r\n\r\nhttps://svelte.dev/repl/767db42208ad40efa56976f645e28ab8?version=3.16.0","updated_at":"2019-12-15T00:45:56Z","created_at":"2019-12-15T00:45:56Z","creator_user_login":"silentworks"}
{"number":4056,"comment_id":"565766836","body":"I don't think you typically would be manually instantiating or destroying a component inside of another component - that's just what's required in the REPL. Having a way to play outro transitions while manually managing a component (the way you can have it play intro transitions) seems like a reasonable request.","updated_at":"2019-12-15T00:56:15Z","created_at":"2019-12-15T00:56:15Z","creator_user_login":"Conduitry"}
{"number":4056,"comment_id":"791317426","body":"For everyone who needs a workaround for this:\r\n\r\n```ts\r\nimport type { SvelteComponent } from 'svelte';\r\nimport { check_outros, group_outros, transition_out } from 'svelte/internal';\r\n\r\n// Workaround for https://github.com/sveltejs/svelte/issues/4056\r\nconst outroAndDestroy = (instance: SvelteComponent) => {\r\n  if (instance.$$.fragment && instance.$$.fragment.o) {\r\n    group_outros();\r\n    transition_out(instance.$$.fragment, 0, 0, () => {\r\n      instance.$destroy();\r\n    });\r\n    check_outros();\r\n  } else {\r\n    instance.$destroy();\r\n  }\r\n};\r\n```\r\n\r\nInstead of calling `instance.$destroy();` you can call `outroAndDestroy(instance);`.","updated_at":"2021-03-05T10:09:17Z","created_at":"2021-03-05T10:08:06Z","creator_user_login":"PatrickG"}
{"number":4056,"comment_id":"791443785","body":"@PatrickG could you provide a quick repl to show how you might use this?","updated_at":"2021-03-05T14:12:22Z","created_at":"2021-03-05T14:12:22Z","creator_user_login":"russellsamora"}
{"number":4056,"comment_id":"791842723","body":"@PatrickG Thanks, it's works pretty good.\r\n\r\n@russellgoldenberg You can try this one:\r\nhttps://svelte.dev/repl/c77471ac6a98495a84d402d106beddcc?version=3.16.0","updated_at":"2021-03-06T02:25:37Z","created_at":"2021-03-06T02:19:57Z","creator_user_login":"dishuostec"}
{"number":4056,"comment_id":"814466562","body":"Just bit by this (sveltekit v1.0.0-next.71). I have some transitions on a page, and the out transition is firing when navigating to a new page. This makes navigation feel slow, as there's an additional x00ms delay while the transition finishes.\r\n\r\nThis is somewhat unexpected - I did not expect component outro transitions to fire on nav. I can see how this is useful for top-level components (full page screen wipes and other effects), but it seems like the exceptional case rather than the default case.\r\n\r\nInterestingly, intro transitions don't seem to delay nav, only outros.","updated_at":"2021-04-06T22:07:58Z","created_at":"2021-04-06T22:03:36Z","creator_user_login":"pikeas"}
{"number":4056,"comment_id":"814549174","body":"> Just bit by this (sveltekit v1.0.0-next.71). I have some transitions on a page, and the out transition is firing when navigating to a new page. This makes navigation feel slow, as there's an additional x00ms delay while the transition finishes.\r\n> \r\n> This is somewhat unexpected - I did not expect component outro transitions to fire on nav. I can see how this is useful for top-level components (full page screen wipes and other effects), but it seems like the exceptional case rather than the default case.\r\n> \r\n> Interestingly, intro transitions don't seem to delay nav, only outros.\r\n\r\nThat is not related to this issue.","updated_at":"2021-04-07T02:10:09Z","created_at":"2021-04-07T02:10:09Z","creator_user_login":"PatrickG"}
{"number":4056,"comment_id":"1246067958","body":"I'd rather not dig around in the Svelte internals. My workaround is to take a \"destroyed\" property and not literally destroy it but wrap all its markup in an `{#if}`.\r\n\r\nSo it's like:\r\n\r\n```javascript\r\n    let toast = new Toast({\r\n      target: document.body,\r\n      props: {\r\n        text,\r\n      },\r\n      intro: true,\r\n    });\r\n    setTimeout(() => {\r\n      toast.$set({ destroyed: true });\r\n    }, 5000);\r\n```\r\n\r\nWould love to just have an \"outro\" option though.","updated_at":"2022-09-13T23:58:08Z","created_at":"2022-09-13T23:58:08Z","creator_user_login":"johnnysprinkles"}
{"number":5689,"comment_id":"729663601","body":"likely duplicate #4447","updated_at":"2020-11-18T13:04:41Z","created_at":"2020-11-18T13:04:41Z","creator_user_login":"pushkine"}
{"number":5689,"comment_id":"731504795","body":"similar problem reported here #5555, but this is much cleaner example.","updated_at":"2020-11-21T04:10:01Z","created_at":"2020-11-21T04:07:38Z","creator_user_login":"xpuu"}
{"number":5689,"comment_id":"869070401","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:46:50Z","created_at":"2021-06-26T22:46:50Z","creator_user_login":"stale[bot]"}
{"number":5689,"comment_id":"1015568278","body":"it is still actual!","updated_at":"2022-01-18T16:13:09Z","created_at":"2022-01-18T16:13:09Z","creator_user_login":"gyurielf"}
{"number":5689,"comment_id":"1116997692","body":"I ran into this as well.\r\n\r\nConditionally rendering the binding will refire the reactive statement.\r\n\r\nHere is a reproduction: https://svelte.dev/repl/ed4f4a3d1d694e92a03cd08a3b5ce0a0?version=3.48.0","updated_at":"2022-05-04T07:15:52Z","created_at":"2022-05-04T07:15:52Z","creator_user_login":"SarcevicAntonio"}
{"number":5689,"comment_id":"1117002474","body":"I went around the issue and found [Kevin Bridges](https://www.youtube.com/watch?v=fvY1TAKNPgY) awesome explanation about the entire reactivity.\r\nSo every non primitives are counts as \"dirty\". That's why we ran into this.\r\n\r\n","updated_at":"2022-05-04T07:23:17Z","created_at":"2022-05-04T07:23:00Z","creator_user_login":"gyurielf"}
{"number":5689,"comment_id":"1154951064","body":"I run into this as well.\r\nThanks @gyurielf for the link to Kevin's explanation, now it's clear why that happens.\r\n\r\nWhat isn't clear to me yet, is if that is desired... Should Svelte work like that with objects or is it a bug?\r\nI don't see any use case that requires the object to be invalidated entirely as soon as one single property is updated.\r\nI wouldn't expect that.\r\n\r\nFor example: I want reload something when the user name is updated\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let user: {name: string, age: number};// ‚Üê comes from the main component through \"bind:user\"\r\n\r\n  $: nameChanged(user.name);\r\n  function nameChanged(newName) {\r\n    reload(); // ‚Üê my logic\r\n  }\r\n\r\n</script>\r\n```\r\nThe code needs the following changes to work as expected:\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let user: {name: string, age: number};\r\n  \r\n  let oldName: string; // ‚Üê variable to store the old value\r\n  \r\n  $: nameChanged(user.name);\r\n  function nameChanged(newName) {\r\n    if(oldName == undefined || oldName !== newName) { // ‚Üê check value changed\r\n      oldName = newName; // ‚Üê update the old value\r\n      reload(); // ‚Üê my logic\r\n    }\r\n  }\r\n\r\n</script>\r\n```\r\nI think that is a strange workaround to make it all work.","updated_at":"2022-06-14T09:36:31Z","created_at":"2022-06-14T09:36:31Z","creator_user_login":"kevinleto-informaticon"}
{"number":5689,"comment_id":"1154995173","body":"> ```svelte\r\n> <script lang=\"ts\">\r\n>   export let user: {name: string, age: number};// ‚Üê comes from the main component through \"bind:user\"\r\n> \r\n>   $: nameChanged(user.name);\r\n>   function nameChanged(newName) {\r\n>     reload(); // ‚Üê my logic\r\n>   }\r\n> \r\n> </script>\r\n> ```\r\n\r\nThis will never work, even without this bug. `nameChanged` will be called at least once on initialization.\r\n","updated_at":"2022-06-14T10:18:56Z","created_at":"2022-06-14T10:18:56Z","creator_user_login":"PatrickG"}
{"number":5689,"comment_id":"1155010289","body":"> > ```svelte\r\n> > <script lang=\"ts\">\r\n> >   export let user: {name: string, age: number};// ‚Üê comes from the main component through \"bind:user\"\r\n> > \r\n> >   $: nameChanged(user.name);\r\n> >   function nameChanged(newName) {\r\n> >     reload(); // ‚Üê my logic\r\n> >   }\r\n> > \r\n> > </script>\r\n> > ```\r\n> \r\n> This will never work, even without this bug. `nameChanged` will be called at least once on initialization.\r\n\r\nI know. I've simplified the code to make it as simple as possible. A simple `if(user) { ... }` makes the trick.\r\nThe focus was on the workaround üòÑ ","updated_at":"2022-06-14T10:35:09Z","created_at":"2022-06-14T10:35:09Z","creator_user_login":"kevinleto-informaticon"}
{"number":5689,"comment_id":"1155019177","body":"> Should Svelte work like that with objects or is it a bug?\r\n\r\nIMO, in an ideal world, Svelte would be as smart and lazy as possible, only doing the work needed if something (even object properties) actually changed.\r\n\r\nI'm sure there is a good reason it's this way right now, but maybe that could change in the future? ","updated_at":"2022-06-14T10:46:59Z","created_at":"2022-06-14T10:45:21Z","creator_user_login":"SarcevicAntonio"}
{"number":5689,"comment_id":"1155213939","body":"> What isn't clear to me yet, is if that is desired... Should Svelte work like that with objects or is it a bug? I don't see any use case that requires the object to be invalidated entirely as soon as one single property is updated. I wouldn't expect that.\r\n\r\nIMHO a reasonable decision for the deeply nested objects. It's too expensive to get around all of the deeply nested props. So I guess that's why.","updated_at":"2022-06-14T13:50:16Z","created_at":"2022-06-14T13:50:16Z","creator_user_login":"gyurielf"}
{"number":5689,"comment_id":"1200295038","body":"I am facing exactly the same unexpected behavior.\r\nI made a [a very simple REPL](https://svelte.dev/repl/290b22538df046cfbf6c527676594d9f?version=3.49.0) to show the issue with the minimal setup.\r\n\r\nDoes anybody found a workaround to this ? (In my produsction case, this behavior leads to a double fetch...)\r\n","updated_at":"2022-07-30T21:12:30Z","created_at":"2022-07-30T21:12:17Z","creator_user_login":"infuzz"}
{"number":5689,"comment_id":"1202067082","body":"You probably need to work with boolean variables like:\r\n```svelte\r\n<script>\r\n  let alreadyLoaded = false;\r\n  if(!alreadyLoaded) {\r\n    data = fetch(...);\r\n    alreadyLoaded = true;\r\n  }\r\n</script>\r\n```\r\nThat is the only workaround I've found till now.","updated_at":"2022-08-02T06:22:10Z","created_at":"2022-08-02T06:22:10Z","creator_user_login":"kevinleto-informaticon"}
{"number":5689,"comment_id":"1206710667","body":"> I went around the issue and found [Kevin Bridges](https://www.youtube.com/watch?v=fvY1TAKNPgY) awesome explanation about the entire reactivity.\r\n> So every non primitives are counts as \"dirty\". That's why we ran into this.\r\n\r\nSvelte's reactivity is based on _assignments_. This issue is about the object being marked dirty _for no reason, without any assignment_. So I don't think this is relevant.\r\n\r\n> What isn't clear to me yet, is if that is desired... Should Svelte work like that with objects or is it a bug?\r\n\r\nWhat you are suggesting is that changing an object property should not invalidate the entire object and that's a fair point to make when first encountering this behavior. But think about this: the object might have getters or methods that depend on multiple properties, it's impossible for Svelte to know. If _you_ know, then look into the `immutable` option. Also what about `obj[key]`? Svelte cannot know what `key`s you use at runtime. By default the correct way is to invalidate the entire object. However, this is not related to this issue at all. This issue is about the object being invalidated _for no reason at all_.\r\n\r\n> I don't see any use case that requires the object to be invalidated entirely as soon as one single property is updated.\r\n\r\nIn addition to what I said above, there are countless of use-cases. Such as sending the object to a server, syncing it via `BroadcastChannel` or caching it in `sessionStorage`. All if which I do (abstracted via stores). For me this behavior is desired and absolutely vital. Usually you don't have to worry about it, because all the places the other properties of the object are used and passed around will eventually compare with a primitive and result in a NOOP (that's partially what \"surgically updates the DOM\" is about). But again, not related to this issue. Any discussion about it would probably be better of in a different place to not water down this bug.\r\n\r\n---\r\n\r\nAgain, here's a minimal REPL that this issue is about: https://svelte.dev/repl/5f436e05809346a38baf906184321761?version=3.49.0\r\nThis will log `obj` **twice**. For absolutely no reason. In complex applications this causes a lot of undesired and expensive side-effects such as #6298\r\n\r\nI re-iterate:\r\n\r\n1. Svelte's reactivity is based on assignment\r\n2. There is no assignment happening at all, the `obj` is not touched whatsoever\r\n3. Simply using `bind` with an object will cause the object to be invalidated _for no reason_\r\n4. This breaks assumptions about Svelte and is a bug causing performance issues and side-effects in real applications","updated_at":"2022-08-05T18:09:14Z","created_at":"2022-08-05T18:01:31Z","creator_user_login":"Prinzhorn"}
{"number":5689,"comment_id":"1216416531","body":"There is another related problem that I have. Reproduce here https://svelte.dev/repl/c6c7a555d8e24572ae00461bb989fee9?version=3.49.0\r\n\r\nBasically I want:\r\n1. Init form state from some input data\r\n2. Re-computed the form state if the input data change\r\n3. Bind the form state to the element value\r\n\r\nIf there is a line of code that reassign the input data (line 6 in the repl), even if that line isn't executed, the form state still gets re-computed every time. Commented out that line, then it's work.","updated_at":"2022-10-22T02:48:03Z","created_at":"2022-08-16T09:53:18Z","creator_user_login":"trungtin"}
{"number":5689,"comment_id":"1287548892","body":"In my use case, this is actually a pretty inconvenient problem. I have a big complex object that I subscribe to, and when it's updated I show an \"Unsaved changes\" indicator. Because of this issue, the \"Unsaved changes\" indicator can show up simply by mounting a component.","updated_at":"2022-10-22T00:13:43Z","created_at":"2022-10-22T00:13:43Z","creator_user_login":"probablykasper"}
{"number":5689,"comment_id":"1337513098","body":"Fixed by https://github.com/sveltejs/svelte/pull/7981","updated_at":"2022-12-05T14:48:34Z","created_at":"2022-12-05T14:48:34Z","creator_user_login":"baseballyama"}
{"number":5689,"comment_id":"1339909157","body":"This should be fixed in 3.54.0 - https://svelte.dev/repl/5e14759de70d4d39b6f3833f91db4542?version=3.54.0","updated_at":"2022-12-06T19:36:23Z","created_at":"2022-12-06T19:36:23Z","creator_user_login":"Conduitry"}
{"number":5689,"comment_id":"1368676518","body":"I reopen this issue and I removed the \"bug\" label.\r\nI described the reason at https://github.com/sveltejs/svelte/issues/6298#issuecomment-1368674996.","updated_at":"2023-01-02T06:03:38Z","created_at":"2023-01-02T06:03:38Z","creator_user_login":"baseballyama"}
{"number":5689,"comment_id":"1368776560","body":"I'm confused. Why re-open it then? Either it's a bug or not. Can you explain the purpose of the \"conservative reactivity\" label? Is this relevant for v4?\r\n\r\n>  A reactive statement is always executed whenever there is a possibility of a change in the object's properties.\r\n\r\nThere is no possibility, because there is no assignment. I pass a prop down and nothing should come back up.\r\n\r\nIf I understand #8114 correctly the changes were reverted because you couldn't find a solution (that doesn't break other things) and not because you concluded it's not a bug.\r\n\r\nI was luckily able to workaround #6298 by using clone + deep-equal, but that's not something that would work without stores. And you also first need to realize that something is going bad. In my case simply rendering a specific component would trigger dozens (depending on the number of items in the store) of network requests for no reason at all. And every change of a single item would again trigger a request for _all_ items because the binding keeps invalidating everything _for no reason_.","updated_at":"2023-01-02T09:30:59Z","created_at":"2023-01-02T09:30:59Z","creator_user_login":"Prinzhorn"}
{"number":5689,"comment_id":"1368811413","body":"Is it an answer to your question?\r\nhttps://github.com/sveltejs/svelte/pull/8114#issuecomment-1368788459\r\n\r\n> Can you explain the purpose of the \"conservative reactivity\" label? Is this relevant for v4?\r\n\r\nOf cause, such unnecessary processes should not be executed.\r\nBut this is an intentional trade-off between performance and this issue.\r\nFor example, if we use a Proxy, we can prevent executing such a process, but we need to pay for Proxy overhead.\r\nOur current consensus is that unnecessary event firing is better than such overhead because reactive things should have idempotence and we have some workaround for this.\r\n\r\n\"conservative reactivity\" means the downside of this trade-off.\r\nIn Svelte4, I'm not sure that we will improve this point.","updated_at":"2023-01-02T10:21:14Z","created_at":"2023-01-02T10:21:14Z","creator_user_login":"baseballyama"}
{"number":5689,"comment_id":"1450333049","body":"> But this is an intentional trade-off between performance and this issue.\r\n\r\nthis is not a trade-off ====> this is insane... behaviour of component should be predictive, not random, I was not aware of this issue, and wasted many hours trying to understand why I have these extra extra components updates\r\n\r\nI am using Svelte with Symfony + Inertia, and when props are passed to top level component, I already have double rendering, just by passing non primitive prop like object or array.\r\n\r\n","updated_at":"2023-03-01T15:23:24Z","created_at":"2023-03-01T15:23:24Z","creator_user_login":"aniolekx"}
{"number":5689,"comment_id":"1464939481","body":"This is so shame to know about this issue. and way we bind prop and also assign value to it as reactive prop is widely useful. but bcoz of this issue it can easily produce tons of bugs and performance issues. \r\nAnd in this many years, it still not solved.\r\nHardly we convinced to use svelte, and such basic stuff issue causes lot of negativity in team. bcoz we need to use dirty workarounds like _oldblahblah and checks.","updated_at":"2023-03-11T15:46:47Z","created_at":"2023-03-11T15:46:47Z","creator_user_login":"jaydeep987"}
{"number":5689,"comment_id":"1529057558","body":"I would love a github reaction with the semantic \"I also wasted a lot of time because of this unexpected behaviour, give it one more dev higher priority when rethinking reactivity\". Meanwhile, I'll just leave this comment. Thanks","updated_at":"2023-04-30T15:45:43Z","created_at":"2023-04-30T15:45:43Z","creator_user_login":"jsilveira"}
{"number":5689,"comment_id":"1541017884","body":"@Rich-Harris, we just had another bad discovery in a project that we got from others and that we can't fix rapidly (we can't think of any work-arounds to this problem other than rewriting everything differently).\r\n\r\nAs [@Prinzhorn well explained](https://github.com/sveltejs/svelte/issues/6298#issuecomment-1412298306) we are all a bit desperate at this point because we love Svelte a lot but when you start creating more complex projects you come across this issue and other issues that have been stuck for years now!\r\n\r\n**PLEASE, ONE QUESTION ONLY**: Could you tell us where in the future roadmap is the resolution of this issue?\r\n\r\nI'm not asking for an ETA, just where in the future program it is.\r\n\r\nI'm trying to keep the client and my team from switching to Vue! :pray:\r\n\r\n---\r\n\r\n@Prinzhorn did you found an alternative way?","updated_at":"2023-05-09T23:32:13Z","created_at":"2023-05-09T23:32:13Z","creator_user_login":"frederikhors"}
{"number":5689,"comment_id":"1647581641","body":"I was wondering why is my reactive function firing so many times and just discovered this... :-(","updated_at":"2023-07-24T09:48:58Z","created_at":"2023-07-24T09:48:47Z","creator_user_login":"gauel"}
{"number":4652,"comment_id":"610870494","body":"This is not something that's special to routers. It's a ¬¥dev¬¥ warning to make you aware that you have props passed to components that aren't defining them beforehand (`export let ...`). It can get a bit messy in the console sometimes but is not really a problem. This **won't** show up when you build your application for production.\r\n\r\n","updated_at":"2020-04-08T10:06:22Z","created_at":"2020-04-08T10:06:22Z","creator_user_login":"kevmodrome"}
{"number":4652,"comment_id":"610888927","body":"it is common to routers though, in the case of sapper you'll get the warning every time your component doesn't export `segment`\r\ndirty fix is for your router to read the file to see whether it includes `export let {prop}`","updated_at":"2020-04-08T14:01:47Z","created_at":"2020-04-08T10:51:18Z","creator_user_login":"pushkine"}
{"number":4652,"comment_id":"610961232","body":"As stated here: https://svelte.dev/docs#1_export_creates_a_component_prop\r\n\r\n> In development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined.\r\n\r\nI think it's wrong to use: `export let params = undefined` (or the same `export let params`) just for a warning at develop time.\r\n\r\nCan we add some option for some components (like routers) so they can use this option to avoid the warning?\r\n\r\nCode compiled with `export let params` is different from code compiled without.\r\n\r\nIf there are a lot of `<Components>` the code increases and I don't see the reason.\r\n\r\nWhat changes at the operating level?","updated_at":"2020-04-08T13:32:23Z","created_at":"2020-04-08T13:31:24Z","creator_user_login":"frederikhors"}
{"number":4652,"comment_id":"610968669","body":"And also then the warning appears in the IDE with `eslint-plugin-svelte3` active:\r\n\r\n`Component has unused export property 'params'. If it is for external reference only, please consider using `export const params`eslint(unused-export-let)`","updated_at":"2020-04-08T13:44:16Z","created_at":"2020-04-08T13:44:16Z","creator_user_login":"frederikhors"}
{"number":4652,"comment_id":"611014955","body":"I‚Äôm the creator of svelte-spa-router and I‚Äôm interested in seeing this fixed too.\n\nI proposed an a way to address this issue in #4649 but I‚Äôm open to anything else that would suppress the warning.\n\nEven though y‚Äôall are right that it‚Äôs just a warning and won‚Äôt cause any issue, it does not provide a good experience to users.\n\nThanks a lot @frederikhors for opening this.","updated_at":"2020-04-08T15:09:35Z","created_at":"2020-04-08T15:09:35Z","creator_user_login":"ItalyPaleAle"}
{"number":4652,"comment_id":"611685402","body":"> ‚ö†Ô∏è I like warnings as they remind me I could have something missing...\r\n\r\nIf we put this in our components both warnings vanishes:\r\n\r\n```html\r\n<script>\r\n  export const router = null;\r\n</script>\r\n```\r\n\r\nProbably is not the best way to _fix the issue_ but at least if you see this on any component you'll think for sure \"oh, it should be part of the routing system...\" ‚úåÔ∏è \r\n","updated_at":"2020-04-09T18:34:07Z","created_at":"2020-04-09T18:31:45Z","creator_user_login":"pateketrueke"}
{"number":4652,"comment_id":"611686772","body":"@pateketrueke yes, but I agree with @frederikhors that it's not an ideal solution, especially as it's just a fix for a warning at dev time only...\r\n\r\nAt least for me, my goal with svelte-spa-router was to keep it as simple as possible. I'd rather not ask my users to add a (really useless) statement in each component.\r\n\r\nAs mentioned above, I did find another workaround within the router (passing components only if the route definition contains any component), but that's not perfect and it has created some issues in edge cases.","updated_at":"2020-04-09T18:34:32Z","created_at":"2020-04-09T18:34:32Z","creator_user_login":"ItalyPaleAle"}
{"number":4652,"comment_id":"611688420","body":"Yeah, I understand the root-cause of the annoyance.\r\n\r\nInitially I found my self adding such \"fix\" on my applications, not fun but it was not painful, and since it's just a warning during development is fine to ignore them.\r\n\r\nMy proposal would be, in that case, a way for disabling those warnings during development?\r\n\r\nLogs are there for a reason, and if they don't help: just turn them off.","updated_at":"2020-04-09T18:38:00Z","created_at":"2020-04-09T18:38:00Z","creator_user_login":"pateketrueke"}
{"number":4652,"comment_id":"612494678","body":"> As stated here: sveltejs/svelte#4662 (comment) there is apparently no way ther then handle it in Rollup's onwarn function.\r\n\r\nSomething like this would work, isn't? ü§î \r\n\r\n```js\r\nonwarn(e, cb) {\r\n  if (e.message.includes(\"was created with unknown prop 'router'\")) return;\r\n  cb(e);\r\n}\r\n```\r\n\r\ncc: @frederikhors ","updated_at":"2020-04-11T19:19:08Z","created_at":"2020-04-11T19:17:53Z","creator_user_login":"pateketrueke"}
{"number":4652,"comment_id":"612495613","body":"The 'was created with unknown prop' is a runtime error, not a compile time error, and so is unaffected by the `onwarn` compiler option.","updated_at":"2020-04-11T19:22:20Z","created_at":"2020-04-11T19:22:20Z","creator_user_login":"Conduitry"}
{"number":4652,"comment_id":"638313903","body":"Just coming here to voice my agreement that these warnings are annoying and exist in other libraries as well. For me this happened with [svelma](https://github.com/c0bra/svelma/pull/57). I didn't write the library code, so I don't have complete control over it even though I agree there is an argument to be had around whether I should be notified anyway.\r\n\r\nIn either case, these warnings should be easily disabled since libraries don't always get updated over night.","updated_at":"2020-06-03T16:37:15Z","created_at":"2020-06-03T16:37:15Z","creator_user_login":"davidroeca"}
{"number":4652,"comment_id":"742071705","body":"In the case where we have:\r\n\r\n```\r\n// ChildComponent.svelte\r\nexport let mandatoryProp;\r\nexport let optionalProp = \"some-sane-default\";\r\n```\r\n\r\nI think it makes sense to print that warning if the parent component does not pass a value to `mandatoryProp`.\r\n\r\nI think It should be on the lib/ChildCoponent's side to provide sane defaults to props that are optional.","updated_at":"2020-12-09T21:23:49Z","created_at":"2020-12-09T21:23:49Z","creator_user_login":"Lindsay-Needs-Sleep"}
{"number":4652,"comment_id":"846456344","body":"+1 to this! One of the things I find so wonderful about Svelte is its lack of boilerplate (especially because I'm coming from the React world). I'm using [`svelte-spa-router`](https://github.com/ItalyPaleAle/svelte-spa-router), and pretty much the _only_ boilerplate I need is for silencing this warning on each page:\r\n\r\n```html\r\n<script>\r\n  // This also shows a warning in VS Code because `params` isn't being used.\r\n  export let params\r\n</script>\r\n\r\n<div>...page...</div>\r\n```\r\n\r\nIt looks like this problem isn't localized to routers, as [David said above](https://github.com/sveltejs/svelte/issues/4652#issuecomment-638313903). Is it possible to give module authors the option to silence these warnings on the component level? This is purposely verbose as an example, but:\r\n\r\n```html\r\n<Component may-have-unused-props />\r\n```\r\n\r\nUnderstandable if this isn't possible, but it might be a nice middle ground between the current behavior and disabling all warnings (which might be harmful for first-party code).","updated_at":"2021-05-22T19:57:06Z","created_at":"2021-05-22T19:57:06Z","creator_user_login":"markthomasmiller"}
{"number":4652,"comment_id":"888878723","body":"I only came across this issue now, but this has been a big massive rock in my shoe for a long time.\r\n\r\nIt's virtually impossible to work on some higher order components without getting flooded with warnings.\r\n\r\nThe console needs to be readable in development and to provide the best DX I have to design my libraries in ways that prevent these warnings. This results in design decisions that are detrimental to functionality and/or code readability/simplicity.\r\n\r\nFor Routify 2 I made a console.warn wrapper which would be enabled/disabled on/after component initiation. This isn't bullet proof as some unwanted warnings occasionally slips through while some wanted warnings got proxied and lost their native stack trace. I was hoping there would be a better option for Routify 3 as it neared completion, but it seems I'll have to use the wrapper approach again. üò¢","updated_at":"2021-07-29T07:41:55Z","created_at":"2021-07-29T07:41:55Z","creator_user_login":"jakobrosenberg"}
{"number":4652,"comment_id":"1046044574","body":"> +1 to this! One of the things I find so wonderful about Svelte is its lack of boilerplate (especially because I'm coming from the React world). I'm using [`svelte-spa-router`](https://github.com/ItalyPaleAle/svelte-spa-router), and pretty much the _only_ boilerplate I need is for silencing this warning on each page:\r\n> \r\n> ```\r\n> <script>\r\n>   // This also shows a warning in VS Code because `params` isn't being used.\r\n>   export let params\r\n> </script>\r\n> \r\n> <div>...page...</div>\r\n> ```\r\n> \r\n> It looks like this problem isn't localized to routers, as [David said above](https://github.com/sveltejs/svelte/issues/4652#issuecomment-638313903). Is it possible to give module authors the option to silence these warnings on the component level? This is purposely verbose as an example, but:\r\n> \r\n> ```\r\n> <Component may-have-unused-props />\r\n> ```\r\n> \r\n> Understandable if this isn't possible, but it might be a nice middle ground between the current behavior and disabling all warnings (which might be harmful for first-party code).\r\n\r\nAdding to @markthomasmiller 's suggestion. it can be more like below\r\n```\r\n<!-- svelte-ignore unused-props=[\"params\", \"router\", ...] -->\r\n<Component  />\r\n```","updated_at":"2022-02-19T15:36:51Z","created_at":"2022-02-19T15:35:55Z","creator_user_login":"RVenkatesh"}
{"number":4652,"comment_id":"1046050705","body":"patch versus svelte 3.46.4\r\n\r\n<details>\r\n\r\n```diff\r\n--- a/node_modules/svelte/compiler.js\r\n+++ b/node_modules/svelte/compiler.js\r\n@@ -27381,7 +27381,7 @@\r\n \t            return b `let ${$name};`;\r\n \t        });\r\n \t        let unknown_props_check;\r\n-\t        if (component.compile_options.dev && !(uses_props || uses_rest)) {\r\n+\t        if (component.compile_options.dev && !(uses_props || uses_rest) && component.component_options.strictprops) {\r\n \t            unknown_props_check = b `\r\n \t\t\t\tconst writable_props = [${writable_props.map(prop => x `'${prop.export_name}'`)}];\r\n \t\t\t\t@_Object.keys($$props).forEach(key => {\r\n@@ -31680,6 +31680,7 @@\r\n \t            ? component.compile_options.accessors\r\n \t            : !!component.compile_options.customElement,\r\n \t        preserveWhitespace: !!component.compile_options.preserveWhitespace,\r\n+\t        strictprops: 'strictprops' in component.compile_options ? component.compile_options.strictprops : true,\r\n \t        namespace: component.compile_options.namespace\r\n \t    };\r\n \t    const node = nodes.find(node => node.name === 'svelte:options');\r\n@@ -31731,6 +31732,7 @@\r\n \t                    }\r\n \t                    case 'accessors':\r\n \t                    case 'immutable':\r\n+\t                    case 'strictprops':\r\n \t                    case 'preserveWhitespace': {\r\n \t                        const value = get_value(attribute, compiler_errors.invalid_attribute_value(name));\r\n \t                        if (typeof value !== 'boolean') {\r\n@@ -31815,6 +31817,7 @@\r\n \t    'dev',\r\n \t    'accessors',\r\n \t    'immutable',\r\n+\t    'strictprops',\r\n \t    'hydratable',\r\n \t    'legacy',\r\n \t    'customElement',\r\n```\r\n\r\n</details>\r\n\r\n(if your project is type=module, you also must patch compiler.mjs)\r\n\r\nyou can add the patch to your project with https://github.com/ds300/patch-package\r\n\r\nusage\r\n\r\n```svelte\r\n<svelte:options strictprops={false}/><!-- false = hide the \"x was created with unknown prop y\" warning in dev mode -->\r\n```\r\n\r\nalso works with global settings, for example via rollup.config.js\r\n\r\n```js\r\n        plugins: [\r\n                svelte({\r\n                        compilerOptions: {\r\n                                dev: !production,\r\n                                strictprops: false, // false = hide the \"x was created with unknown prop y\" warning in dev mode\r\n                        }\r\n                }),\r\n```\r\n","updated_at":"2022-02-19T16:14:34Z","created_at":"2022-02-19T16:08:12Z","creator_user_login":"milahu"}
{"number":4652,"comment_id":"1205227294","body":"Had this problem with props that were received conditionally in an endpoint \r\n```js\r\n\tif (error) {\r\n\t\tmessage = error.message;\r\n\t\treturn {\r\n\t\t\tstatus: 400,\r\n\t\t\tbody: {\r\n\t\t\tmessage\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n```\r\n\r\nMy solution was to use this in the client:\r\n```js\r\n<script>\r\n\texport let message = null;\r\n</script>\r\n```","updated_at":"2022-08-04T13:15:42Z","created_at":"2022-08-04T13:03:08Z","creator_user_login":"kvetoslavnovak"}
{"number":4652,"comment_id":"1291831558","body":"I actually render hidden `<svelte:component>`s dynamically and bind the props to extract the value out from the component and I'm getting this warning when my variable to bind the values to actually contains a value.\r\n\r\nExample:\r\n```\r\n// Foo.svelte\r\n<script>\r\n...\r\n    export const value = 'I shall be extracted';\r\n...\r\n</script>\r\n```\r\n\r\n```\r\n// Bar.svelte\r\nmyObj = {\r\n    component: (await import('./Foo.svelte')).default\r\n    value: 'anything' // I won't get the warning if I make this undefined\r\n}\r\n\r\n<svelte:component this={myObj.component} bind:value={myObj.valueToExtract} />\r\n```\r\n\r\nThis allows me to get the value from `Foo.svelte`, but providing some default value in `myObj` results in the warnings.","updated_at":"2022-10-26T10:35:28Z","created_at":"2022-10-26T10:34:54Z","creator_user_login":"DoisKoh"}
{"number":4652,"comment_id":"1510921094","body":"Hi\r\nI forked svelte-routing > https://github.com/krishnaTORQUE/svelte-routing-next.\r\nI resolved this issue there.\r\nAnd I merged most of the PR from origin repo.\r\nPlease let me know if you have any query.\r\nThanks.","updated_at":"2023-04-17T08:27:46Z","created_at":"2023-04-17T08:27:46Z","creator_user_login":"krishnaTORQUE"}
{"number":4652,"comment_id":"1535792944","body":"Svelte Routing v1.8.0 released.\r\nThis issue has been fixed.\r\nView Changelog: https://github.com/EmilTholin/svelte-routing/blob/master/CHANGELOG.md","updated_at":"2023-05-05T06:45:42Z","created_at":"2023-05-05T06:45:42Z","creator_user_login":"krishnaTORQUE"}
{"number":4652,"comment_id":"1537180020","body":"@krishnaTORQUE can I ask how you fixed the issue?","updated_at":"2023-05-06T16:49:04Z","created_at":"2023-05-06T16:49:04Z","creator_user_login":"jakobrosenberg"}
{"number":4652,"comment_id":"1537181829","body":"> @krishnaTORQUE can I ask how you fixed the issue?\r\n\r\nBy using the new release of svelte-routing.\r\nIf you are having this issue with other router then I am not sure but this is a quick fix for this kind of warning.\r\n`export let propName; propName;`","updated_at":"2023-05-06T16:59:47Z","created_at":"2023-05-06T16:59:47Z","creator_user_login":"krishnaTORQUE"}
{"number":4652,"comment_id":"1537183532","body":"My bad. I mean how did you fix the code in the codebase? Did you find a way to provide props for the end-user of the library without requiring them to manually import the props with `export let prop`?","updated_at":"2023-05-06T17:07:58Z","created_at":"2023-05-06T17:07:58Z","creator_user_login":"jakobrosenberg"}
{"number":4652,"comment_id":"1537184407","body":"> My bad. I mean how did you fix the code in the codebase? Did you find a way to provide props for the end-user of the library without requiring them to manually import the props with `export let prop`?\r\n\r\nOkay, so if you are asking how I manage to fix this issue in svelte-routung library? Then \r\nI removed the prop & give the end user a hook. `useLocation`.","updated_at":"2023-05-06T17:12:45Z","created_at":"2023-05-06T17:12:45Z","creator_user_login":"krishnaTORQUE"}
{"number":4652,"comment_id":"1546752560","body":"Is there a way to programmatically check if a component that will be rendered is exporting the unused prop, so we can do an IF on it?\r\n\r\ne.g.\r\n```\r\n<script>\r\n    import MyComponent from \"./MyComponent.svelte\"\r\n    let used = \"a\"\r\n    let maybeUnused = \"b\"\r\n</script>\r\n\r\n{if MyComponent.???SomeLookup(\"maybeUnused\")???}\r\n  <svelte:component this={MyComponent} bind:used={used} bind:maybeUnused={maybeUnused} />\r\n{:else}\r\n  <svelte:component this={MyComponent} bind:used={used} />\r\n{/if}\r\n```\r\n\r\nIf so, what would the `SomeLookup` in this case be?\r\n","updated_at":"2023-05-13T21:27:56Z","created_at":"2023-05-13T21:27:56Z","creator_user_login":"codemwnci"}
{"number":4652,"comment_id":"1664096334","body":"I agree. It would be nice to be able to ignore these warnings, so that forwarding props through dynamically chosen components using `<svelte:component this={component} {...props}/>` doesn't flood the console.\r\n\r\nThe source of the log comes from here.\r\n\r\n```\r\nObject.keys($$props).forEach(key => {\r\n\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Index> was created with unknown prop '${key}'`);\r\n});\r\n```","updated_at":"2023-08-03T14:34:55Z","created_at":"2023-08-03T14:31:25Z","creator_user_login":"davidhaley"}
{"number":4652,"comment_id":"1666893821","body":"Workaround: Just put `$$restProps` somewhere in your code. By adding it, we can trick the Svelte runtime into thinking that we are using unknown props for something (even though we're not). I haven't checked yet, but I assume there is little to no performance impact although there might be some visual confusion.\r\n\r\n![image](https://github.com/sveltejs/svelte/assets/337728/1f54f435-69b3-42aa-a62d-f902f9fa46b4)\r\n\r\n","updated_at":"2023-08-06T15:20:41Z","created_at":"2023-08-06T15:19:21Z","creator_user_login":"devunt"}
{"number":4006,"comment_id":"559033512","body":"Just a little warning here, your workaround should not be used as it because it introduces xss vulnerabilities.","updated_at":"2019-11-27T10:44:06Z","created_at":"2019-11-27T10:44:06Z","creator_user_login":"j3rem1e"}
{"number":4006,"comment_id":"559798580","body":"(Another way of solving the above issue...)\r\n\r\nAnother thing I noticed (about simple stateless components) is that bundle size significantly increases when I extract portion of my svelte HTML into a component.\r\n\r\n### Initial Situation\r\n\r\nFor example, if I had the following fragment:\r\n\r\n**my-page.svelte:**\r\n```\r\n<div>\r\n    <i class=\"fas fa-{icon}\"></i>\r\n</div>\r\n```\r\n\r\nand I want to extract the `<i>` into its own component:\r\n\r\n**MyIcon.svelte:**\r\n```\r\n<script>\r\n    export let icon;\r\n</script>\r\n\r\n<i class=\"fas fa-{icon}\"></i>\r\n```\r\n\r\nand use it as:\r\n\r\n**my-page.svelte:**\r\n```\r\nimport MyIcon from \"./MyIcon.svelte\"\r\n...\r\n<div>\r\n    <MyIcon {icon} />\r\n</div>\r\n```\r\n\r\n### Problem\r\n\r\nthen the **bundle size increases significantly** only because I moved some HTML into a new component.\r\n\r\n### Probable Solution\r\n\r\nSo, I feel like if the Svelte compiler can figure out that `MyIcon` component is totally stateless, it can avoid generating an entire Svelte component for it. But rather make the component inline\r\n\r\nSo, after compilation (or transpilation?)\r\n\r\n**my-page.svelte:**\r\n```\r\nimport MyIcon from \"./MyIcon.svelte\"\r\n...\r\n<div>\r\n    <MyIcon {icon} />\r\n</div>\r\n```\r\n\r\ncould become\r\n\r\n**my-page.svelte:**\r\n```\r\n<div>\r\n    <i class=\"fas fa-{icon}\"></i>\r\n</div>\r\n```\r\n\r\nI have seen tremendous bundle size reductions when avoiding separate components (when used in lots of places in my project). But loose the benefits of making them in their own component files.","updated_at":"2019-12-03T12:17:49Z","created_at":"2019-11-29T13:58:38Z","creator_user_login":"lgirma"}
{"number":4006,"comment_id":"562171994","body":"Issue [#3898](https://github.com/sveltejs/svelte/issues/3898) directly relates to this.","updated_at":"2019-12-05T15:12:39Z","created_at":"2019-12-05T15:12:31Z","creator_user_login":"vipero07"}
{"number":4006,"comment_id":"562284401","body":"I'm not so sure your solution of not using components has the benefits you think it does. Consider this REPL https://svelte.dev/repl/5a97ad55d3834ab595fdd4996c7f6fd6?version=3.15.0\r\nIn that REPL (which is a slightly modified version of your original one) you can see RepeatComponent generates 314 lines of code and no component generates 345. So even though the fairly simple stateless component itself is 59 lines of code, the more it is reused, the less other lines are generated. \r\n\r\nThere is also the obvious downside of, if not using a component, making any changes to the uses will be a nightmare. Like needing to find all uses of class=\"fas fa- and replace that with some other icon class library.\r\n\r\nYou should also probably consider minification and gzipping, where repeat uses of the same functions are trivialized by gzip. That isn't to say it can't be handled differently, but I don't believe the bundle size is significantly increased by making components, especially the more they are reused.","updated_at":"2019-12-05T19:40:24Z","created_at":"2019-12-05T19:40:24Z","creator_user_login":"vipero07"}
{"number":4006,"comment_id":"562557490","body":"@vipero07 Run some tests using your unmodified code from the REPL you posted above\r\n\r\nI downloaded it into a zip file and modified **only `App.svelte`** then run `yarn build`. Results:\r\n\r\n* Using only `NoComponent` and removing `RepeatComponent`  bundle size: 5.68 KB\r\n* Using only `RepeatComponent` and removing `NoComponent` bundle size: 6.44 KB\r\n\r\nNote that the `build` command produces a minified bundle.","updated_at":"2019-12-06T12:45:21Z","created_at":"2019-12-06T12:44:46Z","creator_user_login":"lgirma"}
{"number":4006,"comment_id":"562743049","body":"Fair, however you are forgoing OOP principals like DRY in favor of 0.78 KB (in this case). I get that having a bunch of smaller components this may add up but I imagine the actual difference between many components and copy pasta is just as trivial. 1KB is nothing compared to something like the entire React library. I'm not railing against the idea of helping reduce the overall size. However personally I'd avoid copy pasta or any of the other solutions for that small a savings, and code with the expectation that a future release implements #3898 or something similar.\r\n\r\nConsider that change occurs in the next release and now you have to refactor everything.","updated_at":"2019-12-06T21:26:53Z","created_at":"2019-12-06T21:26:53Z","creator_user_login":"vipero07"}
{"number":4006,"comment_id":"693656267","body":"**Overview**\r\n\r\nSvelte generates classes that are able to reconcile changes to data. However, quite often I find myself knowing that the data will change completely when updated and that there is no UI that can store user state like form fields. In this case, the reconciliation may be largely unnecessary and we would do just as well to blast away what's there and start anew.\r\n\r\nAs an example, on the homepage of [hn.svelte.dev](https://hn.svelte.dev/), if I hit \"More...\" to go to the next page then there's probably not a need to compare the new data to the old data. I don't need to individually check if `item.domain`, `item.url`, `item.id`, `item.title`, `item.user`, `item.comments_count`, etc. changed. If I got a new item I'm fine assuming they all changed. That allows the component to be much smaller and dumber\r\n\r\n**Benefits**\r\n\r\nThis change would have two large benefits:\r\n* Smaller file size. E.g. 20% of lines in hn.svelte.dev's `[page].js` are the `p` methods and those could be removed. This would result in faster network transfer as well as reduced script parsing times.\r\n* Hydration could potentially be much cheaper. The main reason we do hydration is to make sure the client UI is in sync with the client's data state. However, if we don't store data state on the client for some components because we don't do reconciliation, then possibly we don't need to update the UI or even transfer the data to the client in the first place. This could be a cool way of doing incremental/partial hydration by allowing to basically skip hydration on a per component-basis. This might make the file size 10% smaller still not to mention the runtime improvements, which would be substantial\r\n\r\n**Drawback**\r\n\r\nIn terms of costs, there is likely some savings we get today by reusing the existing DOM structure that we would lose. However, most of any savings could be gained back by simply working on optimizing fragment creation (https://github.com/sveltejs/svelte/issues/3898). E.g. by creating a template and cloning it instead of recreating the DOM structure for each instance. \r\n\r\n**Implementation**\r\n\r\nI'm thinking this would be specified in `<svelte:options>`. Perhaps something like `<svelte:options reconcile=false />`. There may be cases where you would want to call a component in a reconciled fashion and non-reconciled fashion. In that case you would simply use the standard reconciled component everywhere. Once you are including that extra code in your app in one place, there's not much need to do something different elsewhere\r\n\r\nThough I wonder if there might be some other way to accomplish this as well. It almost feels like the combination of `immutable` and a keyed each block should give this to me\r\n\r\nI implemented this for the `page` component of the hn.svelte.dev example just by editing the output of the compiler as can be seen below. `create_fragment` initialized some values that I had to update in `p` by duplicating the initialization code and that could be refactored out into a separate function to reduce the duplication if desired.\r\n```\r\nm: function mount(target, anchor) {\r\n\tthis.target = target;\r\n\t...\r\n},\r\np: function update(ctx, [dirty]) {\r\n\tt0_value = /*item*/ ctx[0].title + \"\";\r\n\tif_block0 = /*item*/ ctx[0].domain && create_if_block_1(ctx);\r\n\tvar anchor = article.nextElementSibling;\r\n\tthis.d(true);\r\n\tthis.c();\r\n\tthis.m(this.target, anchor);\r\n},\r\n```\r\n\r\n**Unanswered questions**\r\n\r\n* What to call this?\r\n* I'm not that familiar with Svelte internals, so I'm sure there are things I'm overlooking that might be challenges. But this seems powerful enough that it'd be interesting to brainstorm if it can be made to work","updated_at":"2020-09-16T20:47:02Z","created_at":"2020-09-16T20:47:02Z","creator_user_login":"benmccann"}
{"number":4006,"comment_id":"966955682","body":"is there a better or more recent discussion about **island architecture** or **partial hydration** with svelte? I saw several issues opened about this (across different repos) but it doesn't seem like anything has been accepted as the plan?\r\n\r\nAs for myself, I think it would be cool to control what the default is, for mostly static sites, I would want to opt-into hydration and for mostly dynamic sites, I would want to be able to opt out.\r\n\r\nBut is this the right place to talk about this?","updated_at":"2021-11-12T09:32:30Z","created_at":"2021-11-12T09:32:30Z","creator_user_login":"Madd0g"}
{"number":3733,"comment_id":"543645320","body":"Good idea.\r\n\r\nMaybe something like this would benefit even more, depending on the error getting thrown.\r\nSo basically like a `switch` statement for catching errors.\r\n\r\n```svelte\r\n<script>\r\nimport { GraphQLError } from 'graphql';\r\n</script>\r\n\r\n\r\n{#try}\r\n   <Component />\r\n{:catch GraphQLError}\r\n\t<div></div>\r\n{:catch TypeError}\r\n   <div></div>\r\n{:catch}\r\n   <div>Default fallback ui </div>\r\n{/try}\r\n```","updated_at":"2019-10-18T10:49:23Z","created_at":"2019-10-18T09:59:11Z","creator_user_login":"marcus-sa"}
{"number":3733,"comment_id":"543681063","body":"Can see this being useful especially when including components from 3rd parties.","updated_at":"2019-10-18T11:15:17Z","created_at":"2019-10-18T11:15:17Z","creator_user_login":"MintyMods"}
{"number":3733,"comment_id":"543873753","body":"This has been brought up before, but I don't think there's a clear way that we could have this work. I don't think it would be _too_ difficult to have handlers for exceptions that synchronously occur as part of an operation on the child component (instantiating it, or updating props for example), but there's not a good way to handle other exceptions that happen during the life of the component. The component would have to emit events (or do something else equivalent to that), but only when it appears inside a `{#try}`. (In other cases, it should continue to throw exceptions as it currently does.) Every compiled component would have to support being run inside of a `{#try}`, regardless of whether it ever actually is, because at compile time we can't tell that. This would be a burden on every component whether this feature was being used or not.","updated_at":"2019-10-18T18:24:50Z","created_at":"2019-10-18T18:24:50Z","creator_user_login":"Conduitry"}
{"number":3733,"comment_id":"548632329","body":"Yup, I just realised there's a RFC https://github.com/sveltejs/rfcs/pull/11 that brought up the exact same issue.\r\n\r\n> Every compiled component would have to support being run inside of a {#try}\r\n\r\nThat's how context works as well. Every component has to know which context it is currently mounted into.\r\n\r\nI would like to propose a similar mechanism, where the error boundary of a component  is assignes when mounted, just like context, (or it could be a special context key ü§î)\r\nSo at the point of error, there's no bubbling up of errors, but rather catching it directly to the preassigned error boundaries ","updated_at":"2019-11-01T01:35:41Z","created_at":"2019-11-01T01:35:41Z","creator_user_login":"tanhauhau"}
{"number":3733,"comment_id":"626758197","body":"There was some discussion about this in the discord #future channel [the other day](https://discordapp.com/channels/457912077277855764/507200834837151754/706826420407631882), an I thought I'd jot down some notes here for posterity. \r\n\r\n@halfnelson had created this error boundary proof-of-concept: \r\nhttps://svelte.dev/repl/006facb65ece4f808cd733e838783228?version=3.22.2\r\n\r\nIf we imagine some sort of event based API, then maybe extending the slot syntax would make more sense?\r\n\r\n```svelte\r\n<script>\r\n  let error;\r\n</script>\r\n\r\n{#if error}\r\n  <p>Error: {error}</p>\r\n{:else}\r\n  <slot on:error={({ detail }) => {\r\n    error = detail.message;\r\n    logMyErrorSomewhere(detail);\r\n  }} />\r\n{/if}\r\n```","updated_at":"2020-09-16T08:54:07Z","created_at":"2020-05-11T14:59:12Z","creator_user_login":"jonatansberg"}
{"number":3733,"comment_id":"722397089","body":"I improved a bit on the REPL linked above, adding support for SSR and logging:\r\nhttps://svelte.dev/repl/9d44bbcf30444cd08cca6b85f07f2e2a?version=3.29.4","updated_at":"2020-11-05T14:02:27Z","created_at":"2020-11-05T14:02:27Z","creator_user_login":"jonatansberg"}
{"number":3733,"comment_id":"1003751435","body":"Has there been any progress on this? Or an alternate way to handle such errors?\r\nI have JSON files containing data for my HTML pages, which contain keys like `title`, `summary`, `blockquote` etc. This file is stored in a variable called `post` and added into the page as follows: \r\n```html\r\n<main>\r\n\t<div class=\"container max-w-5xl mt-6 px-6\">\r\n\t\t<div class=\"pb-5 mb-5 border-b border-gray-100\">\r\n\t\t\t<h1 class=\"font-bold text-5xl\">{post.title}</h1>\r\n\t\t\t<h2>{post.summary}</h2>\r\n\t\t</div>\r\n\t\t<article class=\"prose lg:prose-xl my-4 mx-auto\">\r\n\t\t{#each post.text as text}\r\n\t\t\t<p>{text.value}</p>\r\n\t\t{/each}\r\n\t\t</article>\r\n\t\t<div class=\"flex flex-wrap\">\r\n\t\t\t{#each post.images as image}\r\n\t\t\t\t<div class=\"w-full \">\r\n\t\t\t\t\t<img src=\"{image.value.src}\" alt=\"{image.value.alt}\" class=\"w-full h-auto\" />\r\n\t\t\t\t</div>\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t</div>\r\n</main>\r\n```\r\nNow some posts might have a key while others may not. Currently, Svelte throws an error which stops my build process if any file is missing any key.\r\n\r\nIt would be good to 'try to look for this key, if it exists then add it otherwise just move on' kind of logic. I could implement an if-else block for each key but is there a more elegant way to handle this?\r\n","updated_at":"2022-01-02T17:47:30Z","created_at":"2022-01-02T17:47:30Z","creator_user_login":"thedivtagguy"}
{"number":3733,"comment_id":"1004060171","body":"Solved my problem by using optional chaining. \r\n`{post?.title}` and so on.","updated_at":"2022-01-03T12:29:05Z","created_at":"2022-01-03T12:29:05Z","creator_user_login":"thedivtagguy"}
{"number":3733,"comment_id":"1041913949","body":"@YamiOdymel, this feature request goes beyond simple error handling is more along the lines of React's [Error Boundaries](https://reactjs.org/docs/error-boundaries.html).","updated_at":"2022-02-16T17:32:10Z","created_at":"2022-02-16T17:32:10Z","creator_user_login":"mrcasual"}
{"number":3733,"comment_id":"1312588970","body":"Hello, everyone. I am currently working on an RFC that can solve this issue.","updated_at":"2022-11-12T22:49:16Z","created_at":"2022-11-12T22:49:16Z","creator_user_login":"ghost"}
{"number":3733,"comment_id":"1312803175","body":"Here's the RFC: sveltejs/rfcs#69","updated_at":"2022-11-13T19:28:11Z","created_at":"2022-11-13T19:28:11Z","creator_user_login":"ghost"}
{"number":3733,"comment_id":"1353942315","body":"This seems like an RFC for tag extensions, which allows any kind of tags, but doesn't by itself add try/catch. I'd have to \"import\" that as custom syntax extension. If I understood correctly.\r\n\r\nI personally would prefer exception/error handling to be a fundamental part of Svelte.\r\n\r\nThis concerns\r\na) errors when creating the sub-components\r\nb) errors thrown from\r\nb.1.) event handlers\r\nb.2.) `$:` reactivity statements,\r\nb.3.) `{}` expressions in the markup\r\nb.4.) onMount()/onDestroy()\r\nb.5.) and similar entry points, and\r\nc) errors thrown up explicitly by JS code within the component.\r\n\r\nRight now, a naive app implementation that follows the code patterns in the tutorial will not handle any errors. And handling all error properly requires either a lot of try/catch/emit boiler plate, or a custom error handling infrastructure.","updated_at":"2022-12-16T00:25:57Z","created_at":"2022-12-16T00:25:57Z","creator_user_login":"benbucksch"}
{"number":5517,"comment_id":"706696244","body":"What would `$$self` facilitate that isn‚Äôt already possible with `svelte:self`? You didn‚Äôt make that clear. ","updated_at":"2020-10-11T12:16:43Z","created_at":"2020-10-11T12:16:43Z","creator_user_login":"pngwn"}
{"number":5517,"comment_id":"707654847","body":"There's been 4 times\r\nFirst was while using sapper pages, in order to implement native app-like transitions properly you need to keep all page components in a centralized array iterated by a `#each <svelte:component this={PageComponent} />` in root `_layout`, so all page components roughly looked like the following\r\n```svelte\r\n<script>\r\n    import { getContext } from \"svelte\";\r\n    import MyPageComponent from \"./Component.svelte\";\r\n    getContext(\"page-state\").push(MyPageComponent);\r\n</script>\r\n```\r\nNot being able to push the component itself directly meant I had to make a proxy and an actual component for each page, using `$$self` I would have been able to do the following :\r\n```svelte\r\n<script>\r\n    import { getContext } from \"svelte\";\r\n    getContext(\"page-state\").push($$self);\r\n    export let rendered = false;\r\n</script>\r\n{#if rendered}\r\n    <!-- MyPageComponent content -->\r\n{/if}\r\n```\r\nSecond situation is kind of meta, I needed to add every mounted component in a centralized Set, $$self would've come in handy ( had to either write a unique hash in `script` or an object in each component's `script module` )\r\nThird time I wanted to use a component as an action ( as described in op ) and would've liked exporting that action directly from the component's script module\r\nFourth time was while Iterating a  `#each <svelte:component />`, there were cases where the component could itself be part of the iterable and I needed to provide a different logic if `$$self === each_component`","updated_at":"2020-10-13T10:46:39Z","created_at":"2020-10-13T10:42:45Z","creator_user_login":"pushkine"}
{"number":5517,"comment_id":"844036908","body":"@pngwn Different use case that `svelte:self` doesn't solve - I'm finding myself needing this now as well, dependency injection kind of scenario for me. I have a grid component which I'm making extensions for, I want to pass extensions as a property to the grid, and have the grid set on each extension the 'grid' property so those models have a reference to the grid they're attached to.. but currently it looks like every component that uses the grid component will have to use `bind:this` then watch for that getting set, then have the code to pass that value into the extensions, would be much nicer to have a component self serve its instance. Hope this makes sense!\r\n\r\nWill try to clarify with some dummy code.\r\n\r\n### Current option (bind and watch the binding every time I use Grid):\r\n``` \r\n// SomePage.svelte\r\n<script>\r\n  const ext1 = new GridExt1();\r\n  const ext2 = new GridExt2();\r\n  const options = new GridOptions();\r\n  $: if (grid) {\r\n    ext1.grid = grid;\r\n    ext2.grid = grid;\r\n  }\r\n</script>\r\n<Grid bind:this={grid} {options} extensions=[ext1, ext2]>\r\n```\r\n\r\n### Like to have (just pass them in and let Grid manage itself):\r\n```\r\n// SomePage.svelte\r\n<script>\r\n  const ext1 = new GridExt1();\r\n  const ext2 = new GridExt2();\r\n  const options = new GridOptions();\r\n</script>\r\n<Grid {options} extensions=[ext1, ext2]>\r\n\r\n// Grid.svelte\r\n<script>\r\n  export let extensions: Array<GridExt> = [];\r\n  extensions.forEach(ext => ext.grid = $$self);\r\n</script>\r\n```\r\n\r\nUpdate: Have got it working using `current_component` from `svelte/internal` but haven't tested if this still works in production","updated_at":"2021-05-19T12:17:47Z","created_at":"2021-05-19T12:03:40Z","creator_user_login":"mbacon-edocs"}
{"number":5517,"comment_id":"963563553","body":"The svelte \"module context\" tutorials demonstrates a pattern for using a module context to manage components that should be controlled as a group. This is accomplished using `bind:this` to gain a reference to a child component. \r\nThis is a useful pattern. However there are some instances where it would be very useful to bind to the component that creates the module rather than to a child component.\r\nFor example\r\n```\r\n// Popover.svelte (simplified)\r\n<script context=\"module\"> \r\n  let openPopover;\r\n  function handleOpen() {\r\n    openPopover.close();\r\n    openPopover = thisPopover;\r\n  }\r\n</script>\r\n\r\n<script>\r\n  export let open = false;\r\n  $: if (open) {\r\n    handleOpen();\r\n  }\r\n  function close() {\r\n    open = false;\r\n  }\r\n  let thisPopover;\r\n</script>\r\n\r\n{#if open}\r\n  <some-content/>\r\n{/if}\r\n```\r\n\r\nCurrently there isn't a good way to get to set `thisPopover`. There are some existing workarounds but none of them are great. \r\n\r\n \r\n\r\n1. use `get_current_component` from 'svelte/internal'. As part of the internal api this is not intended for supporting this use, and could easily break in the future if changes are made to the internal implementation of svelte. An officially supported runtime function to accomplish this would also be a good solution.\r\n2. Add a wrapping component and then use bind:this to the component you want to control. This requires passing/binding all of the attributes intended for control through this wrapper component, which introduces a lot of duplicate code when dealing with more complex controls.\r\n3. Instead of passing the component to the module context, pass a callback function or object containing callback functions. This works well in simple instances, like stopping all audio players, but get convoluted very quickly when you want to allow for more complex control of a component. \r\n4. use bind:this with svelte:self/\r\n```\r\n{#if outer}\r\n<svelte:self bind:this={component} outer={false}/>\r\n{/if}\r\n\r\n{#if !outer}\r\n<h1>\r\n\tabc\r\n</h1>\r\n{/if}\r\n```\r\nThis is super janky and I'm not sure you end up with a reference to the correct component.\r\n\r\n\r\nSome potential solutions that may work well: \r\n1. Give access to `$$self` as discussed.\r\n2. Provide an officially supported version of `get_current_component`\r\n3. Provide a reference to the component to the onMount callback. (i.e. `onMount((SvelteComponent) => void)` )","updated_at":"2021-11-08T20:53:44Z","created_at":"2021-11-08T20:53:44Z","creator_user_login":"Akolyte01"}
{"number":5517,"comment_id":"1115876085","body":"We've run into this when trying to implement type safety for component callbacks. The only way to get the type of the current component is to import itself. `$$self` would be so much better.","updated_at":"2022-05-03T08:58:02Z","created_at":"2022-05-03T08:58:02Z","creator_user_login":"SystemParadox"}
{"number":5517,"comment_id":"1159446894","body":"Another use case:\r\n\r\n```svelte\r\n<!-- InfoPopup.svelte -->\r\n\r\n<script context=\"module\">\r\n    export function openInfoPopup() {\r\n        return new $$self({\r\n            target: document.body,\r\n        });\r\n    }\r\n</script>\r\n\r\n<div class=\"popup\">Hello World!</div>\r\n```\r\n\r\nThere's currently no portable way to do this, AFAICS. `<svelte:self>` cannot be used in JS, and the workaround with `arguments[0].__proto__.constructor` requires an already existing instance.\r\n\r\nI've found a workaround when using Webpack: `__WEBPACK_DEFAULT_EXPORT__` contains the desired class; but of course this only works with Webpack (and probably isn't even guaranteed to work there, either), and when using Typescript, it's untyped and apparently it's also impossible to refer to the type of the current component.\r\n\r\nA built-in keyword like `$$self` would be really nice here, maybe accompanied by a `$$Self` type (though the latter can be emulated using `typeof $$self`).","updated_at":"2022-06-18T11:18:15Z","created_at":"2022-06-18T11:18:15Z","creator_user_login":"schuetzm"}
{"number":5517,"comment_id":"1374799741","body":"I came here looking for an official solution to referencing the self component from the script block. \r\n\r\nOddly, $$self is the first argument of the instance. But results in illegal variable name validation error on server side.\r\n\r\nFor client only reference to self, this is what I do:\r\n\r\n`<script>\r\n  const self = !import.meta.env.SSR && arguments[0];\r\n  console.log(self);\r\n</script>`\r\n\r\noutput:\r\n\r\nclient: Pages (SvelteComponentDev)\r\nserver: false\r\n\r\n","updated_at":"2023-01-08T10:54:32Z","created_at":"2023-01-08T10:51:58Z","creator_user_login":"zacharygriffee"}
{"number":5517,"comment_id":"1436069927","body":"> I came here looking for an official solution to referencing the self component from the script block.\r\n> \r\n> Oddly, $$self is the first argument of the instance. But results in illegal variable name validation error on server side.\r\n> \r\n> For client only reference to self, this is what I do:\r\n> \r\n> `<script> const self = !import.meta.env.SSR && arguments[0]; console.log(self); </script>`\r\n> \r\n> output:\r\n> \r\n> client: Pages (SvelteComponentDev) server: false\r\n\r\nI'm curious, Is this legal? Will it change? I can't find a reference to it in the svelte docs; I'll use it anyway, but I'm hoping the svelte team doesn't patch it. Please let me know where you discovered the \"arguments\" variable.","updated_at":"2023-02-19T19:18:24Z","created_at":"2023-02-19T19:18:24Z","creator_user_login":"Eudritch"}
{"number":5517,"comment_id":"1441372167","body":"> I'm curious, Is this legal? Will it change? I can't find a reference to it in the svelte docs; I'll use it anyway, but I'm hoping the svelte team doesn't patch it. Please let me know where you discovered the \"arguments\" variable.\r\n\r\nI can't speak for legalities, and I certainly hope they don't patch it. In fact, I'd rather the team come up with something like $$self instead of me using hacky ways like 'arguments' or 'get_current_component'.\r\n\r\nHow I discovered the arguments is a combination of svelte/internal and the compiled version of the svelte component:\r\n\r\n**This line in svelte/internal calls the instance of the component:**\r\nhttps://github.com/sveltejs/svelte/blob/709264a94cbd29093349ac86e3edd0acc6af46b0/src/runtime/internal/Component.ts#L110\r\n\r\n**This is what the internal function calls on the compiled version of your svelte component:**\r\n![image](https://user-images.githubusercontent.com/5599507/220855187-74391635-e536-48c9-9ba3-c3130e6a2c9a.png)\r\n\r\nThe first argument is the component aka $$self we can't use/access in svelte land, second argument is the $$props which we can access in svelte land.  So svelte land scripts get put into this instance function, and you can access the arguments once svelte gets compiled to vanilla javascript.\r\n\r\nBut again this only works on client side, so you got to protect it with a client/browser check. I use !import.meta.env.SSR but could wrap it in onMount arrow function if immediate action/manipulation on the self component is not needed for your use-case.\r\n","updated_at":"2023-02-23T08:48:18Z","created_at":"2023-02-23T08:32:15Z","creator_user_login":"zacharygriffee"}
{"number":5517,"comment_id":"1596419115","body":"I've run in to a use case when using the modals in [@svelte-put](https://svelte-put.vnphanquang.com/docs/modal).\r\n\r\nI have a module scope function to open the dialog component from various places. But need to supply the svelte class component as a prop. To achieve this currently, i import the component to itself.\r\n\r\nExample\r\n![image](https://github.com/sveltejs/svelte/assets/112661861/a4c364b9-4a6e-4ef9-80de-734228b997bd)\r\n","updated_at":"2023-06-19T03:02:51Z","created_at":"2023-06-19T03:00:38Z","creator_user_login":"brandonp-ais"}
{"number":3964,"comment_id":"581349442","body":"~~I just opened an old project, updated it to `3.18.1` (latest) and bumped into this.~~\r\n\r\nA buggy version of npm is doing funky things and installing duplicate versions of Svelte all over the place. It had nothing to do with the Svelte version.\r\n\r\n<details>\r\n<summary>Stacktrace</summary>\r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read property 'c' of undefined\r\n    at transition_out (modules.js?hash=574e2833e0bc262823d4387523c68d3252981b3b:30598)\r\n    at Object.outro [as o] (modules.js?hash=574e2833e0bc262823d4387523c68d3252981b3b:7980)\r\n    at transition_out (index.mjs:717)\r\n    at Object.outro [as o] (PageCreateProfile.svelte:77)\r\n    at transition_out (index.mjs:717)\r\n    at Object.outro [as o] (Nav.svelte:10)\r\n    at transition_out (index.mjs:717)\r\n    at Object.outro [as o] (PageCreateProfile.svelte:77)\r\n    at transition_out (index.mjs:717)\r\n    at Object.update [as p] (PageSignup.svelte:9)\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Breaking code</summary>\r\n\r\n```js\r\nfunction transition_out(block, local, detach, callback) {\r\n    if (block && block.o) {\r\n        if (outroing.has(block))\r\n            return;\r\n        outroing.add(block);\r\n        outros.c.push(() => {  // <---- outros is undefined\r\n            outroing.delete(block);\r\n            if (callback) {\r\n                if (detach)\r\n                    block.d(1);\r\n                callback();\r\n            }\r\n        });\r\n        block.o(local);\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n~~In my case, the error is thrown if the Svelte component imported from a package uses another components from the same package internally.~~\r\n\r\nWell, it seems this pattern of including another component within the same package does bring out the bug, but it was still only caused by buggy `npm` installing duplicate versions of Svelte all over the place.\r\n\r\nNuking `node_modules`, downgrading npm and re-installing helped.","updated_at":"2020-02-03T12:18:43Z","created_at":"2020-02-03T10:42:20Z","creator_user_login":"arggh"}
{"number":3964,"comment_id":"595244491","body":"Just hit this problem after moving our shared components out into its own modules.  During development we're using npm link but webpack is getting two copies of svelte.\r\n\r\nFound this writeup\r\n\r\nhttps://medium.com/@penx/managing-dependencies-in-a-node-package-so-that-they-are-compatible-with-npm-link-61befa5aaca7\r\n\r\nThe TLDR; is, if you're using webpack and npm linking your components in, get them to resolve to the same version of svelte by adding this to your webpack config. This worked for me.\r\n\r\n```javascript\r\nconst path = require(\"path\");\r\n\r\n{\r\n// usual webpack config +\r\nresolve: { \r\n  alias:{\r\n    \"svelte\":path.resolve(__dirname, \"node_modules/svelte\"),\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn production we would just npm install the modules so they resolve svelte from the host project. The above change shouldn't break anything in the host project as that's where it'd look for svelte anyway.\r\n\r\n","updated_at":"2020-03-05T14:01:46Z","created_at":"2020-03-05T14:01:46Z","creator_user_login":"crisward"}
{"number":3964,"comment_id":"625283485","body":"I came across this issue, and I have been looking after it. I don't get the reason for the error yet.\r\n\r\nI have checked all the possibilities pointed here and none of them helped.\r\n- resolve alias\r\n- nuking node_modules\r\n- only have 1 svelte version installed\r\n\r\nI have wrote a lib [@daniloster/svelte-i18n](https://www.npmjs.com/package/@daniloster/svelte-i18n) which is getting this error when is being consumed inside an if block.\r\n\r\n```\r\n{#if isOpen}\r\n  <CustomComponent />\r\n{/if}\r\n```\r\n\r\n`CustomComponent.svelte`\r\n\r\n```\r\n<div>\r\n  <Literal {namespace} path=\"create\"/>\r\n</div>\r\n```\r\n\r\nWhen `isOpen` get value changed to `false`, the \"outros\"is undefined. No transitions (svelte/transition) have been added.\r\n\r\nMay I have some help with it, please?","updated_at":"2020-05-07T14:18:00Z","created_at":"2020-05-07T14:18:00Z","creator_user_login":"daniloster"}
{"number":3964,"comment_id":"625312833","body":"I have checked the thread comment https://github.com/sveltejs/svelte/issues/3448#issuecomment-541386356\r\n\r\nAnd I have changed the library to publish only babel transpilation + svelte file. This way, compilation will happen in the end-app.\r\n\r\nThanks everyone.","updated_at":"2020-05-07T15:07:21Z","created_at":"2020-05-07T15:07:21Z","creator_user_login":"daniloster"}
{"number":3964,"comment_id":"627083554","body":"I've made a tiny component to use into project. (https://github.com/lagden/svelte-btn)\r\nI found the same problems above, but I realized some interesting behavior.\r\n\r\nIn my case, the error only happens if I use a svelte component as child.\r\nhttps://svelte.dev/repl/be4907a42a3f491b92e577c42fb7fb3a?version=3.22.2\r\n\r\nREPL fragment code `BtnDyn.svelte`\r\n\r\n```svelte\r\n<script>\r\n  import Btn from '@tadashi/svelte-btn/dist/index.mjs'\r\n  //... code stuff\r\n</script>\r\n\r\n<Btn class=\"{cssTheme} {className}\" {...filtered} on:click>\r\n  {#if icoName}\r\n    <Icon name=\"ico_{icoName}\" class=\"{_icon} {value ? _icon_margin : ''}\" />\r\n  {/if}\r\n</Btn>\r\n```\r\n\r\nIf you replace by pure HTML, the component will work!\r\n\r\n```svelte\r\n<Btn class=\"{cssTheme} {className}\" {...filtered} on:click>\r\n  {#if icoName}\r\n    <svg class=\"{_icon} {value ? _icon_margin : ''}\">\r\n      <use xlink:href=\"#residencial_ico_{icoName}\" />\r\n    </svg>\r\n  {/if}\r\n</Btn>\r\n```\r\n\r\n---\r\n\r\nI think it's a bug, because the component and your children are render.\r\nThis should be analyzed. IMO.\r\n\r\n---\r\n\r\n**Obs.:**\r\n\r\nIf use `import Btn from '@tadashi/svelte-btn` will work because the main file in `package.json` is `src/index.svelte`\r\n\r\nhttps://github.com/lagden/svelte-btn/blob/master/package.json#L24-L25\r\n","updated_at":"2020-05-12T03:28:52Z","created_at":"2020-05-12T03:18:34Z","creator_user_login":"lagden"}
{"number":3964,"comment_id":"629651393","body":"I can also confirm that this issues happens, in my case is by using `svelte-routing` with if conditions. \r\nwith `Svelte 3.20.1` everything works but it fails with the changes added in `Svelte 3.21.0`.\r\n\r\nPossible duplicated from https://github.com/sveltejs/svelte/issues/3448","updated_at":"2020-05-16T14:07:00Z","created_at":"2020-05-16T14:07:00Z","creator_user_login":"Egnus"}
{"number":3964,"comment_id":"629853510","body":"@Egnus \r\n\r\nThe `svelte-routing` works fine and it's not a problem with `if-statements`!\r\nThis problem occurs when you use a `svelte component (compiled)` into `slot`.\r\n\r\nMake a simple test, replace the content of `if-statements` by simple one:\r\n\r\n```svelte\r\n{#if}\r\n  <p>test</p>\r\n{/if}\r\n```","updated_at":"2020-05-17T20:10:25Z","created_at":"2020-05-17T20:10:25Z","creator_user_login":"lagden"}
{"number":3964,"comment_id":"640821014","body":"Is there anything going on here that's different from the many other issues that have been opened about problems that happen when there are two copies of the Svelte internals bundled into an app? This sounds to me like just another occurrence of that. You need to make sure the published component has a `svelte` field in it, and you need to make sure that the bundler is deduping instances of the `svelte` package so that there's only one copy of `svelte/internals`.","updated_at":"2020-06-08T19:18:03Z","created_at":"2020-06-08T19:18:03Z","creator_user_login":"Conduitry"}
{"number":3964,"comment_id":"640874681","body":"_Just a late night idea_: would be sweet, if Svelte had (at least in dev mode) a mechanism to detect multiple instances of Svelte's internals.\r\n\r\nThat would:\r\n\r\n**a)** Reduce the amount of weird and non-existent bugs due to having two runtimes present \r\n**b)** Prevent apps from breaking when accidentally shipping two runtimes for whatever reason","updated_at":"2020-06-08T20:40:39Z","created_at":"2020-06-08T20:40:39Z","creator_user_login":"arggh"}
{"number":3964,"comment_id":"776529148","body":"As usual in these types of cases, forcing the version via `resolutions` in `package.json` to the version I currently had installed worked for me\r\n\r\n```json\r\n  \"resolutions\": {\r\n    \"svelte\": \"^3.32.1\"\r\n  }\r\n```","updated_at":"2021-02-10T08:19:40Z","created_at":"2021-02-10T08:19:40Z","creator_user_login":"Koleok"}
{"number":3964,"comment_id":"869055166","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:05:03Z","created_at":"2021-06-26T20:05:03Z","creator_user_login":"stale[bot]"}
{"number":3964,"comment_id":"1002423947","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T06:54:14Z","created_at":"2021-12-29T06:54:14Z","creator_user_login":"stale[bot]"}
{"number":6373,"comment_id":"850925700","body":"Interop with other ecosystems or no, this would be a breaking change.","updated_at":"2021-05-30T01:43:33Z","created_at":"2021-05-30T01:43:33Z","creator_user_login":"Conduitry"}
{"number":6373,"comment_id":"850927260","body":"I'm not aware of how this would be a breaking change but I'll take your word for it. Could you elaborate?\r\n\r\nMy primary concern is that the `$` prefix for values is not ergonomic when working with application-wide data flow, apis, helper functions, & when refactoring from a reactive value to a store. The interop would also be affected, in the case of RxJS, but since observable support `subscribe`, support as almost there. The `unsubscriber` behavior is different, but that could be smoothed over, perhaps with a compiler hook or preprocessor? I invoked RxJS into this github issue to show there is precedent to the `$` suffix. I know @Rich-Harris is interested in standards among different libraries from a tweet a couple of years ago. Perhaps people in the RxJS community can comment on the subtleties on why the `$` suffix was chosen for observables.\r\n\r\nAn example that just came up, when refactoring a reactive variable to a shared store:\r\n\r\nFrom:\r\n```svelte\r\n<script>\r\nlet amount = 0\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\nCurrently, one has to also change the reading of the value to `$amount`:\r\n```svelte\r\n<script>\r\nimport { amount } from './shared/amount'\r\n</script>\r\nYou have {$amount} comments.\r\n```\r\n\r\nWith the `$` suffix convention, no changes are necessary to read the value:\r\n```svelte\r\n<script>\r\nimport { amount$ } from './shared/amount$'\r\n</script>\r\nYou have {amount} comments.\r\n```","updated_at":"2021-05-30T02:12:51Z","created_at":"2021-05-30T02:02:49Z","creator_user_login":"btakita"}
{"number":6373,"comment_id":"850949054","body":"It's a breaking change because everyone using the `foo$` syntax and using `foo` in the same file would have different behavior. Also I guess it's way harder to to write the logic for that because you substract, not append a character.","updated_at":"2021-05-30T06:20:44Z","created_at":"2021-05-30T06:20:44Z","creator_user_login":"dummdidumm"}
{"number":6373,"comment_id":"851007439","body":"> It's a breaking change because everyone using the foo$ syntax and using foo in the same file would have different behavior.\r\n\r\nTo your point there is a breaking change with the current compiler rule, where `foo` would be assumed to be a value of `foo$` if `foo$` exists in the file. I wonder how common this is.\r\n\r\n> Also I guess it's way harder to to write the logic for that because you substract, not append a character.\r\n\r\nThat's a good consideration. The compiler would need to do look for variables using something like `variable.match(/([a-zA-Z_\\$][a-zA-Z0-9_\\$]*)\\$/)[1]` instead of basing the evaluation on existing variables beginning with `$` using something like `variable.match(/$([a-zA-Z_\\$][a-zA-Z0-9_\\$]*)/)[1]`.\r\n\r\nSo the difference would be not only the match, but what drives the match. For the `$` prefix on the value, the value drives the match. For the `$` suffix on the store, the store drives the match. Supporting both would mean the compiler would need to support both ways of matching. The suffix approach by itself seems to be about the same amount of difficulty, but supporting both would seem to add more difficulty.\r\n\r\nWould you agree with that assessment?\r\n\r\nI don't know if the ergonomics of the `$` value prefix is a common complaint, but after working with Svelte for a while on large codebases, using the `$` prefix in ts/js files is one of those slightly (pebble in a shoe) annoying anti-patterns that can pervade the entire codebase. Like a pebble in a shoe, it's such a seemingly small issue that one does not need to address it for short walks, but the issue grows as a hike gets longer.\r\n\r\nI'm playing around with different naming conventions & patterns. If anybody has suggestions or wants to continue the discussion, I would appreciate it.","updated_at":"2021-05-30T14:57:25Z","created_at":"2021-05-30T14:15:40Z","creator_user_login":"btakita"}
{"number":6373,"comment_id":"851059020","body":"Not gonna lie, this is a bit of a lightbulb moment. I just wish we'd had it two and a half years ago! \r\n\r\nThe more idiomatic RxJS interop is cool, but I'm much more persuaded by the refactoring argument. It's something I've run into on occasion, and it's a a legitimate criticism people have made of Svelte's reactivity model, wherein stores are perceived to be second-class citizens compared to component-local state (or props).\r\n\r\nI'm also persuaded by the thought that `foo$` communicates store-ness better than a `foo` that happens to be read in proximity to an occurrence of `$foo`. \r\n\r\nTwo points:\r\n\r\n* This _is_ a breaking change, however unlikely it is that someone would declare both `foo$` and `foo` in the same file (not a confusing break, since the compiler can disallow a `foo` declaration or import in a scope that already has `foo$` defined; it would fail in a straightforward and communicable way rather than a cryptic one. But a break nonetheless). If we claim to respect semver then realistically we're talking about Svelte 4 here\r\n* One of Svelte's unwritten tenets is that we should provide one way to do things. I don't think we'd ever support both `foo/$foo` _and_ `foo$/foo`, that would be hellaciously confusing and unnecessarily complex in terms of implementation.\r\n\r\nSo the question is 'is this change of sufficient value that it's worth the extreme disruption it would cause?' I suspect most people here would say 'no', but I also think there's at least a _possibility_ that it is, insofar as it would fix one of Svelte's (arguably) most noticeable warts.\r\n\r\n---\r\n\r\nHaving said all that, the main frustration _I_ encounter when dealing with stores is the requirement that they be free variables rather than (e.g.) object properties. Some code from a project I'm currently working on:\r\n\r\n```js\r\nexport let runner;\r\n\r\nconst weight_idle = spring();\r\nconst weight_running = spring();\r\nconst weight_celebrating = spring();\r\n\r\n$: weight_idle.set($runner.state === 'idle' ? 1 : 0);\r\n$: weight_running.set($runner.state === 'running' ? 1 : 0);\r\n$: weight_celebrating.set($runner.state === 'celebrating' ? 1 : 0);\r\n```\r\n\r\nHaving three variables for each of those weights, rather than a single object or map with `idle`, `running`, `celebrating` etc properties, makes me feel grubby. I already know that I'm going to need to add a bunch more different weights; it would be great if I could do something like this instead:\r\n\r\n```js\r\nexport let runner$;\r\n\r\nconst weights = {};\r\nstates.forEach(state => weights[state + '$'] = spring());\r\n\r\n$: states.forEach(state => {\r\n  weights[state + '$'].set(runner.state === state ? 1 : 0); \r\n});\r\n\r\n// later\r\n$: angle = weights.idle * angles.idle + weights.running * angles.running;\r\n```\r\n\r\nSince the compiler can't realistically know which properties of `weights` are stores (especially if that object is imported), the detection would have to happen at runtime, and at a cost.\r\n\r\nSo if we're discussing the possibility (however remote!) of changing store syntax, I'd love for us to see if we can come up with an approach that makes it possible to solve this problem at the same time.","updated_at":"2021-05-30T20:47:17Z","created_at":"2021-05-30T20:47:17Z","creator_user_login":"Rich-Harris"}
{"number":6373,"comment_id":"851069092","body":"@pngwn notes this related issue https://github.com/sveltejs/svelte/issues/2016","updated_at":"2021-05-30T22:12:16Z","created_at":"2021-05-30T22:12:16Z","creator_user_login":"Rich-Harris"}
{"number":6373,"comment_id":"851074577","body":"Conversation regarding object property store auto-subscriptions (sometimes dubbed 'contextual stores') should probably into #4079 as there is a bit more conversation there. I'll close #2016 but capture the example as it is a clear example.","updated_at":"2021-05-30T23:02:43Z","created_at":"2021-05-30T23:02:43Z","creator_user_login":"pngwn"}
{"number":6373,"comment_id":"851077674","body":"FWIW, I have deliberately written `foo$` in files because `$foo` is reserved for stores. I used the convention to show when a variable was a reference. Just a footnote of data for \"have people done this?\" At least one person. üòÜ","updated_at":"2021-05-30T23:24:31Z","created_at":"2021-05-30T23:24:31Z","creator_user_login":"arxpoetica"}
{"number":6373,"comment_id":"863801628","body":"Thank you for the discussion. I have some good news to report. I have been rolling out the `val$` naming convention & all of the naming conflicts around stores has been resolved, particularly in `*.ts` files. My projects tend to have the majority of the logic in stores & less logic in the components. I have also broken out `Controller` classes for logic-heavy templates, which includes functions, `writable` & `derived` stores. The naming conflicts resolved include:\r\n\r\n* Before: should a `$` prefix be applied to local variables? After: the value variable name has no `$` character\r\n* Before: props: should a `$` prefix be used on the prop name? After: The prop name has no `$` character\r\n* Before: In a sapper/svelte kit `preload` function, the `$` prefix cannot be used for local variables due to the Svelte Compiler. After: No `$` prefix necessary to distinguish between store & value.\r\n\r\nThe `$val$` component values are also not too bad to work with either. It conceptually makes sense in a certain way, as the `$` prefix & suffix cancel each other out, like a `+` & `-` cancel each other out in arithmetic. It is an extra character, but one could make the aesthetic argument that `$val$` is balanced. The `$` prefix can be thought of as a preprocessor operator on the `store$` object.\r\n\r\nWith that in mind, I'm not too concerned about changing the syntax, as long as `$` prefix & suffix (`$val$`) is not too much of an eyesore & burden for the programmer. I'm not opposed to changing the syntax either, but having gone through 2 migrations, I can see that it would be a sizable effort for large codebases. Less than 1 week in most cases, but still sizable. I think it's worth doing, but keeping the migration optional has it's merits.\r\n\r\nTo keep the `value` in the same form when refactoring from a Component variable to a `store`, perhaps another svelte preprocessor \"op\" and/or label could be added?\r\n\r\n```svelte\r\n<script>\r\nimport { value$ } from './value$'\r\nvalue: $value$\r\n</script>\r\n\r\n<input bind:value>\r\n```\r\n\r\nAnother reason to not change the syntax is that sometimes it's useful to have an `export val`, `val$`, & `$val$` used in the same component. I have used this pattern with a component with `export val` which also have a `val$` store in the Controller or shared store.\r\n\r\n```svelte\r\n<script lang=ts>\r\nimport { value$ } from './value$'\r\nexport value:string\r\nvalue: $value$\r\n</script>\r\n\r\n<input bind:value>\r\n```\r\n\r\n@Rich-Harris Correct me if I'm wrong but, would the bottom block not work in svelte 3 as long as `runner` is seen as an invalidatable variable?\r\n\r\n```ts\r\nexport let runner$;\r\n\r\nconst weights = {};\r\nstates.forEach(state => weights[state + '$'] = spring());\r\n\r\n$: $runner$, states.forEach(state => {\r\n  weights[state + '$'].set($runner$.state === state ? 1 : 0); \r\n});\r\n\r\n// later\r\n$: angle = weights.idle * angles.idle + weights.running * angles.running;\r\n```\r\n\r\nhttps://twitter.com/wycats/status/1380386140478271488\r\n\r\nYehuda Katz had an interesting insight into composing reactive cell primitives (i.e. svelte stores). I'm looking for ways to ergonomically compose svelte stores into objects as well. I have started to add the `_` get/set prop on the stores that I use. I'm currently using [writable$](https://github.com/ctx-core/store/blob/master/src/writable%24.ts), [readable$](https://github.com/ctx-core/store/blob/master/src/readable%24.ts), & [derived$](https://github.com/ctx-core/store/blob/master/src/derived%24.ts).\r\n\r\n```ts\r\nconst val$ = writable$('')\r\nval$._ = 'new value`\r\nconsole.info(val$._)\r\n```\r\n\r\nIt would be interesting to compose svelte stores into objects. For my purposes, mainly in Controller logic, having one of the above defined stores assigned to a prop works great. There's no need for decorators & reading/writing values from stores can occur inline. A decorator could be used on the Class as syntax sugar for the get/set proxy property to the store well. I'm not particularly interested in using decorators & proxy get/set props at this time, but Yehuda, Ember, MobX, Angular, & others use decorators & proxy get/set props. In Svelte components, there are also cases when calling the get/set props is necessary, such as in functions or reading the store value without using `$$invalidate`.","updated_at":"2021-06-18T19:20:27Z","created_at":"2021-06-18T06:49:46Z","creator_user_login":"btakita"}
{"number":6373,"comment_id":"866448668","body":"@ryansolid has astute commentary on stores as well. He addresses the trailing $ under the \"Compilation Shortcomings\" section.\r\n\r\nhttps://itnext.io/designing-solidjs-reactivity-75180a4c74b4\r\n\r\nI like using the trailing `$` indicator (as Ryan calls it) to identify store cells to differentiate between the store & the value. If Typescript provided a polymorphic way to reference the value, like the svelte compiler, then the indicator would be superfluous. Svelte does provide an opportunity to have SolidJS's state api via `Readable`. I have implemented something similar but rarely use this pattern. I prefer treating stores as a cell which have a get/set method, which I use `_` to minimize the syntax burden of referencing the value of the store (i.e. \"cell\"). It's not as seamless as a svelte reactive variable, but it's not too bad in practice & some naming convention patterns can be utilized.\r\n\r\nNonetheless, Solidjs is impressive & I share many of Ryan's sentiments including the observation that the local component scopes tend to not have as much of the app logic in more complex systems. I find that I'm using stores in components significantly more than reactive variables. His performance concerns are also interesting, since large apps have many components, so having a way to \"inline\" the components on compilation would be beneficial.","updated_at":"2021-06-23T01:29:52Z","created_at":"2021-06-23T01:19:05Z","creator_user_login":"btakita"}
{"number":6373,"comment_id":"869183912","body":"Leaving this here for possible later use, if this is implemented.\r\n\r\nThis is how to get the TS types:\r\n\r\n```typescript\r\ntype SvelteStore<T> = { subscribe: (run: (value: T) => any, invalidate?: any) => any }\r\ntype StoreValue<T> = T extends SvelteStore<infer Value> ? Value : never;\r\n\r\ntype WithStoreValues<Object> = Object & {\r\n  [Property in keyof Object as Property extends `${infer Key}$` ? Key : never]: StoreValue<Object[Property]>;\r\n};\r\n\r\ntype Works = WithStoreValues<{a: true; b$: { subscribe: (run: (value: boolean) => any, invalidate?: any) => any } }>;\r\n```\r\n\r\nhttps://www.typescriptlang.org/play?#code/C4TwDgpgBAygbhANsCNgHsBOEA8AVAPigF4oBvKAZwFcAjSgY0wEtaIAuKACk2oDtOXOAENE1DlDwBKEkWF8QAGijM+IxMwAmwlAH5O8kDOJyFUAL4BYAFChIsDNgBqo8fiKk8UCAA8UfTUpYBGRUR1xVADMITCgXMQgiXTjXaE4+CARMAG4bGztoAHVmYAALNCwIePFKHAB5WgArCAZgDygG5taoADJyGygoAG0ABUx0SExQFT4oAGsIEHRIjqaW4ChhILGJmOnff0CoAAMAEjIomKgAaUXzU+OoZNuQKHTMmIBdTgrnVPq1q1RuNJqBPgRctZzJD8uAilg5kFSMUyr8qqlamRhJxgLwINkoLRTpwKDR6ExWBIePxBOpxJxaOh0IgIPJjKYlDN1FodBB9JsFOyBa9zBYIUA","updated_at":"2021-06-27T15:46:00Z","created_at":"2021-06-27T15:46:00Z","creator_user_login":"dummdidumm"}
{"number":6373,"comment_id":"1000889606","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T16:15:51Z","created_at":"2021-12-24T16:15:51Z","creator_user_login":"stale[bot]"}
{"number":6373,"comment_id":"1000919530","body":"Further activity to prevent stale-bot from closing a proposal on which no decision has yet been made.","updated_at":"2021-12-24T19:19:59Z","created_at":"2021-12-24T19:19:59Z","creator_user_login":"rmunn"}
{"number":6373,"comment_id":"1402430777","body":"Not sure this adds more to the conversation but I've run across the problem in my own toy lib \r\n\r\nhttps://github.com/bradphelan/immer.loves.svelte\r\n\r\nThe simple example is\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n type Data {\r\n    readonly a:string\r\n    readonly b:string\r\n }\r\n  \r\n  // declare the root store\r\n  let store:Writable<Data>\r\n\r\n  // declare subStores as projections onto the root store\r\n  let aStore:Writable<string> = subStore(store,s=>s.a)\r\n  let bStore:Writable<string> = subStore(store,s=>s.b)\r\n</script>\r\n\r\n<input type=\"text\" bind:Value={$aStore}/>\r\n<input type=\"text\" bind:Value={$bStore}/>\r\n```\r\n\r\nrequires creating those pesky local variables ``aStore`` and ``bStore``. Would certainly be nice to be able to write the projections inline in the markup. \r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n type Data {\r\n    readonly a:string\r\n    readonly b:string\r\n }\r\n\r\n  let store:Writable<Data>\r\n\r\n</script>\r\n\r\n<input type=\"text\" bind:Value={subStore(store,s=>s.a)$}/>\r\n<input type=\"text\" bind:Value={subStore(store,s=>s.b)$}/>\r\n```","updated_at":"2023-01-24T18:49:41Z","created_at":"2023-01-24T18:49:41Z","creator_user_login":"bradphelan"}
{"number":8091,"comment_id":"1340187615","body":"Hey @lukepuplett, I believe you will get a good introduction here:\r\nhttps://svelte.dev/\r\nhttps://svelte.dev/tutorial/basics\r\nhttps://svelte.dev/docs\r\nhttps://svelte.dev/repl/hello-world\r\nhttps://kit.svelte.dev/\r\n\r\nI could try to answer each of these questions, but I think there are people here who could come up with better answers. For now I leave you with these links üòä","updated_at":"2022-12-07T00:44:54Z","created_at":"2022-12-07T00:13:50Z","creator_user_login":"524c"}
{"number":8091,"comment_id":"1340219386","body":"I sent a PR that hopefully answers most of these questions. If you'd like to use Deno, then the best way is probably https://github.com/pluvial/svelte-adapter-deno","updated_at":"2022-12-07T00:46:05Z","created_at":"2022-12-07T00:46:05Z","creator_user_login":"benmccann"}
{"number":8091,"comment_id":"1340851206","body":"Thanks @524c but these are the very docs I'm moaning about :) sorry, I didn't make that clear.\r\n\r\nUnless I'm mistaken they don't address the questions I have. These questions are fundamental from my perspective, as I need to know how it works to be able to reason about fitting Svelte into an existing project or a chosen toolchain or stack.\r\n\r\nThe docs at https://svelte.dev/docs only cover syntax, and the interactive tutorial https://svelte.dev/tutorial/basics seems to also be syntax.\r\n\r\nAlso, thanks @benmccann I'll take a look, but right now, without a clear mental model for how Svelte works, I can't reason about how this will help, only that it will somehow and it reassures me that people do use Deno and Svelte...Kit.\r\n\r\nMy feature suggestion is: explain how it works in the documentation.\r\n\r\n**Describe the proposed solution**\r\n\r\nI would like to see official written docs on how Svelte goes from source files a, b, c to output files x, y, z, and then how a browser requests and renders a page with Svelte markup, via whatever is serving that HTTP response.\r\n\r\nWhen you know how it works, you can't remember what it's like to not know. So these answers and the docs look helpful to you. But to me, it's just syntax.\r\n\r\nI don't expect answers here, I'll Google and read other blogs and watch YouTube tuts, but my point is that I'd expect this to be official written documentation.\r\n\r\nSorry to moan. Thanks for your time.","updated_at":"2022-12-07T11:46:51Z","created_at":"2022-12-07T11:46:51Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1340921682","body":"Come on, I'll try to answer some things in a simpler way, but there are many layers of abstraction and concepts involved about how Svelve works and what are the fundamental differences between it and other frameworks.\r\n\r\nA Svelte file is \"much like an HTML file\", but see them more like a template. In it there is a part dedicated to logic and you put it inside the `<script> </script>` tags.\r\n\r\nYou have the style part that you put between the `<style> </style>` tags.\r\n\r\nAnd the part of the structure itself of the page (html) you put loose in the file and don't use any additional tags.\r\n\r\nBehind the scenes, Svelte processes this template and delivers this already rendered material to the browser.\r\n\r\nAbout de compile:\r\nOlder frameworks use a sort of proxy to create a state relationship between the logic that exists in your code and the dynamic events that happen on what you see on a page in your browser (a virtual DOM). So this state maintenance comes at the cost of time and the size of the libraries needed to make this happen.\r\n\r\n[See this example:](https://svelte.dev/repl/d9d8fb88b8e9407689783ce72c178956?version=3.54.0)\r\n```svelte\r\n<script>\r\n  let count = 0;\r\n\t\r\n  function increment() {\r\n    count++;\r\n  }\r\n</script>\r\n\r\n<h1>count: {count}</h1>\r\n\r\n<button on:click={increment}>Increment</button>\r\n```\r\n\r\nExplaining what basically happens in the code above.\r\n\r\nSvelte needs to \"edit\" the DOM and adjust the displayed count value every time you click the button. It does this by understanding what your code is doing and adds (compiles) the extra code that does that for you. It keeps track of the count variable, and every time it changes, Svelte edits all references to the count object in the DOM. So if this variable count appears in more than one place, it will always be up to date.\r\n\r\nSvelte is who does what I tried to explain above. Svelte kit is a framework that uses Svelte and creates for you a bunch of extra facilities, like a powerful route management system, for example, and many other things.\r\n\r\nI recommend that you use the Svelte kit in your projects.\r\n\r\nHands-on works very well, you learn by doing, instead of wanting to understand how Svelte's compiler works before understanding basic contents. My recommendation for you is to take a step back and study more basic concepts, about how a template works, what is the DOM, among other primary things, and start studying Svelte. Try to take it easy and less anxiety üòÅ","updated_at":"2022-12-07T15:08:13Z","created_at":"2022-12-07T12:51:23Z","creator_user_login":"524c"}
{"number":8091,"comment_id":"1341022996","body":"Thank you so much for this, Roger. I really appreciate that I'm taking your precious time.\r\n\r\nThe thing is, it still focuses on syntax (what to put in the .svelte files) and on how it does the reactivity. But it doesn't answer any of the questions I listed.\r\n\r\nI don't understand what Svelte outputs (or even which tool compiles it) and how a HTTP request arrives at say, Deno or Node or even a .NET executable or perhaps some kind of server process that SvelteKit runs, and what is returned.\r\n\r\nWhat does the server return as a response? It must obviously be HTML, so how is that achieved?\r\n\r\nDoes Svelte compile everything to a single static `.html` file and a single big `.js` file that the HTML file references? And then maybe Deno (or whatever) needs coding to locate and serve these two static files?\r\n\r\nOr does it only make a giant `.js` file perhaps and I have to create my own outer HTML file and serve that with a reference to the `.js` file and perhaps a `<div>` with a special id for it to inject its elements into?\r\n\r\nDoes that make sense? I have no model of how it compiles, what gets output and how it gets served.\r\n\r\nAn explanation for this seems missing in the docs, and yet I need to know. Perhaps I'm the only person in the world to arrive at Svelte without coming from Vue, React or Angular and everyone just assumes it works the same way.\r\n\r\nThanks. It's obviously incredibly useful to get answers here, but my point is that this needs covering as \"learning step 1\" in the docs :)\r\n","updated_at":"2022-12-07T14:09:45Z","created_at":"2022-12-07T14:09:45Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1341064311","body":"I understand what you say, but it's a technical documentation, very good by the way, made for programmers. Some things are taken for obvious and that's normal. Otherwise, it would be tedious for the vast majority of the public.\r\n\r\nBut I believe that this is not the channel for this discussion. What I wanted was to give you some guidance. If you study the basics, you'll understand Svelte. Good luck  :)","updated_at":"2022-12-07T14:39:48Z","created_at":"2022-12-07T14:39:48Z","creator_user_login":"524c"}
{"number":8091,"comment_id":"1341247346","body":"I've found something aimed at new developers which is more like what I need.\r\n\r\nhttps://svelte.dev/blog/svelte-for-new-developers\r\n\r\nBut it starts off at \"computing ground zero\" and then makes a breathtaking leap into a set of concepts far beyond the target audience before abruptly ending, the author having looked up at the colossal mountain of knowledge they'd need to impart to explain how to build a website using a modern approach.","updated_at":"2022-12-07T16:36:04Z","created_at":"2022-12-07T16:36:04Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1341477958","body":"I've updated https://svelte.dev/docs#getting-started some more. I think it answers the majority of the questions you posed. It's hard to strike a balance between giving all the necessary details and not getting lost in the weeds up front, but hopefully there's enough info to help users get oriented more quickly. We want to abstract a lot of this away because some of what you're asking is basically how would you implement your own version of SvelteKit and the answer is that it's way too much work and not something 99.9% of users are going to want to do. I'll answer your questions individually below\r\n\r\n>Should I use Svelte, or SvelteKit?\r\n\r\nBoth. You probably want to use SvelteKit which means you will also be using Svelte. The docs recommend SvelteKit\r\n\r\n> What source files are used in compilation and what are the output files?\r\n\r\n`.svelte` in and `.js` and `.css` out. Covered in the updated docs\r\n\r\n> What is the compiler? Is it JS in an NPM package? How do I run it?\r\n\r\nIt's an npm package. Linked to in the updated docs. You run via a bundler - usually Vite. Covered in the updated docs\r\n\r\n> If it's using Node, should I stick to Node for my server or can I use Deno?\r\n\r\nSvelteKit handles this for you with adapters. There's too many runtimes to mention them all. E.g. there's also cloudflare workers, etc.\r\n\r\n> How does it find the source files to compile?\r\n\r\nIt's an input option to the bundler. This is a bit hard to document as it's bundler-specific, so you will need to consult the docs for your bundler\r\n\r\n> What doesn't it output or copy? What about static files like images? Paths to images?\r\n\r\nThis is another bundler-specific question. First you need to choose a bundler - we highly recommend Vite via SvelteKit - and then read their docs. Vite handle images for you\r\n\r\n> Am I likely to need Gulp, or is that not needed anymore? Can Gulp run the compiler?\r\n\r\nThe updated docs link to all the bundlers including a Gulp bundler which can run the compiler, but again we recommend Vite via SvelteKit\r\n\r\n> Does a browser visit an .html file to see the Sveltey part of my website?\r\n\r\nThe browser visits a URL which provides HTML. The URL doesn't necessarily have to end with `.html`\r\n\r\n> Does Svelte make that .html file?\r\n\r\nNo. I can't cover all the things Svelte doesn't do as there's an infinite number, but hopefully the docs make it clear the compiler outputs `.js` and `.css`\r\n\r\n> Or does my Deno app serve the layout HTML page and the Svelte part is \"injected\" into an element?\r\n\r\nYes\r\n\r\n>How will it work with Deno, or Node and the way that serves static files?\r\n\r\nI don't quite understand the question, but if you use SvelteKit this will be handled for you\r\n\r\n>How would I structure my source for an app with mixed Deno-served content and Svelte ...HTML?\r\n\r\nUse the Deno adapter for SvelteKit","updated_at":"2022-12-07T19:27:34Z","created_at":"2022-12-07T19:23:17Z","creator_user_login":"benmccann"}
{"number":8091,"comment_id":"1341523398","body":"Thanks so much for this. I muss confess, I saw that you'd closed the issue, and I thought you were just closing it to get rid of me!\r\n\r\nI was quite upset and posted a reply which triggered an update of the page showing your message above! So I immediately deleted my rant.\r\n\r\nAnyway, thank you again. The answers make sense, esp. knowing that the Svelte parts are \"injected\". I'll look at the docs in a mo, I need a rest. I've been down the Vite rabbit hole for hours.\r\n\r\nHow did Tim's beautiful invention get this complicated...","updated_at":"2022-12-07T20:04:05Z","created_at":"2022-12-07T20:04:05Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1343303374","body":"https://github.com/pluvial/svelte-adapter-deno/issues/33\r\n\r\nI have come to the conclusion that you can't use Svelte with a traditional web server or served alongside other HTTP resources.\r\n\r\nI've researched Remix, too. This suffers the same problem with people asking the same questions. No one can articulate concisely how to serve a Svelte app. Just... magic.\r\n\r\nThe absence of documentation around this is so glaring that I can only conclude that the idea with these frameworks is to drive adoption of serverless JS environments, hence Rich Harris works for Vercel.","updated_at":"2022-12-08T20:17:10Z","created_at":"2022-12-08T20:17:10Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1343306665","body":"That's not correct. https://github.com/sveltejs/kit/tree/master/packages/adapter-static lets you do exactly that, through prerendering and/or SPA mode","updated_at":"2022-12-08T20:20:49Z","created_at":"2022-12-08T20:20:49Z","creator_user_login":"dummdidumm"}
{"number":8091,"comment_id":"1343317461","body":"But it's not exactly that at all. It's a prerendered static site, or it's a SPA. It's not the same as you'd get if you deployed to Vercel.\r\n\r\nIt makes no sense. Why isn't there:\r\n\r\n1. A guide on what hypertext to return to the browser with the things necessary to load the initial Svelte app?\r\n1. A simple tutorial for writing code that handles Svelte's HTTP requests for popular traditional web servers?\r\n\r\nStandard since 1995.","updated_at":"2022-12-08T20:31:17Z","created_at":"2022-12-08T20:31:17Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1343389233","body":"I'm not sure what you mean \"handles Svelte's HTTP requests\". If you use Svelte (without Kit), you're probably creating an SPA, and then you can use `fetch` to call whatever API you want and use the returned data. If you don't want an SPA but instead prerendered HTML files or even SSR (on demand server side rendered HTML) then you need something different on your server. In case of prerendered HTML files you can use SvelteKit with adapter-static, and if you have more dynamic demands, you can use one of the other adapters to deploy to Vercel or whatever, or use your own Node server through adapter-node. You can't deploy to a static web server and expect it to magically have a server runtime that does these things for you.\r\n\r\nIn that linked issue you said you come from ASP.NET Core. Think of Svelte as the thing that you use to compose your UI. Think of SvelteKit as a lighter version of ASP.NET Core which can create different build outputs, one similar to ASP.NET Core where you get some artifact that you run on your server through setting it up in a certain way (yeah that's very broad, because I know nothing about how exactly ASP.NET Core is deployed).","updated_at":"2022-12-08T21:30:53Z","created_at":"2022-12-08T21:30:53Z","creator_user_login":"dummdidumm"}
{"number":8091,"comment_id":"1343417838","body":"I'm not 100% sure what you want to do, but maybe be able to give some better pointers with a bit more detail. Do you want your Svelte components to render on the server-side and client-side or on the client-side only? Is it okay to write your whole UI in SvelteKit (not necessarily your API layer though) or do you just want to insert a component into an existing UI? If the latter, you're going to have a lot more options on how to implement it, but will be giving up the benefits of server-side rendering (SSR) obviously.\r\n\r\nIf you want to do server-side rendering of Svelte components, it's relatively easy to compile a Svelte component and call it from an HTTP endpoint to deliver rendered HTML (like an import and one line of code). However, rendering a Svelte component on the server yourself is generally going to result in a terrible developer experience because you'll need to kill and restart the server for each change you make. There's a tremendous amount of complication around creating a development server that provides hot reloading and so we pretty strongly suggest that people use Vite / SvelteKit for the SSR case for that reason.\r\n\r\nIf you want to insert SvelteKit into an existing Node/Deno app as a middleware, see [this FAQ](https://kit.svelte.dev/faq#how-do-i-use-middleware). SvelteKit would serve your whole UI, but you can write API endpoints, etc. with your Node/Deno server if you wish. I've also seen people embed SvelteKit apps in their app (e.g. NYTimes), but don't have a good example of code like this to point to\r\n\r\nIf you just want to embed a Svelte component in an existing app, there's a couple choices. If you only care about the client-side, you can build a bundle with any web bundler (Vite, webpack, gulp, etc.) and load the bundle from your app with a script tag. If you want to insert it on the server-side and hydrate it on the client-side, that's a fair amount more difficult because you would probably want to call into Vite's APIs if you want hot reloading and you need to transmit the application state from the server to the client for hydration.\r\n\r\nI'm going to reopen this as we should probably better explain the SvelteKit vs embedded case in the docs","updated_at":"2022-12-08T21:50:09Z","created_at":"2022-12-08T21:50:09Z","creator_user_login":"benmccann"}
{"number":8091,"comment_id":"1343477511","body":"Thank you for reopening this issue and for your time, both of you.\r\n\r\nI am very simply looking to fully use Svelte's features (though SSR I can take or leave), with an existing Deno app. So I have a Deno app that serves static files and my own route handlers (I like to implement OAuth by hand, which I have done), as well as handling WebHooks from other services.\r\n\r\nThe idea was that I will serve my homepage the old-skool way with my own HTML via Deno and a templating engine, and I will handle OAuth and then redirect users into the Svelte SPA part which I'd imagine to be at `/app` or whatever.\r\n\r\nI originally assumed I'd need to write handlers in Deno to serve JSON for the front-end, like a BFF pattern, but I think Svelte might be the back-end for its own front-end, ...assuming SSR is enabled. I don't know. In fact, that raises another question of how the browser authenticates with its backend.\r\n\r\nThe docs are all about Node and it's like Deno was never invented. Now, because I'm new to this space, I wonder if I've accidentally picked up Deno thinking it was an improved Node and actually it's a flop and no one cares for it so there's no support. Remix docs also eshew Deno.\r\n\r\nBut while I have your attention, for my other ASP.NET Core project, I would be interested in just SPA functionality, to be able to stick something in an HTML page: like how Angular needs just `ng-controller` and a script tag with a bit of JS and off it goes!\r\n\r\nI assume that Svelte needs a server-side JS runtime to do its SSR+CSR hydration stuff, and so ASP.NET Core ain't gonna work (though there is `Microsoft.AspNetCore.NodeServices`).\r\n\r\nBut for Deno, we're cool, right? So long as the SSR bits are loaded by my Deno app and it knows where the Svelte files are? Or... is it all compiled into a single JS file and it just needs pointing at that? It's complex, and confusing.\r\n\r\nYou can see what I mean by needing a clear mental model of how it works, without which I can't even ask the right questions.\r\n\r\nWhich brings me onto that FAQ about middleware. The code example, unless I'm mistaken, is to write middleware for the Vite dev HTTP server, which is useful sure, but not what I need. The other thing it talks about is `adapter-node` but again, I'm using Deno.\r\n\r\nHere's how I made friends with everyone in the Deno community today: https://github.com/denoland/deno/discussions/16991\r\n\r\nIt's driving me mad. I've never found anything so difficult to contend with. And really it's all because no one wants to use Deno for reasons I didn't get the memo about!","updated_at":"2022-12-08T22:56:03Z","created_at":"2022-12-08T22:56:03Z","creator_user_login":"lukepuplett"}
{"number":8091,"comment_id":"1344107559","body":"> And really it's all because no one wants to use Deno for reasons I didn't get the memo about!\r\n\r\nThat one is easy to explain: Node came first and has a huge library of NPM modules backing it which are not necessarily compatible with Deno.\r\n\r\nIf people have an existing codebase that is hard or impossible to migrate, they are not going to do it. If they start a new project and would be unable to use most of the tools they are already familiar with/rely on in Deno, they are not going to switch. It just does not matter that Deno is superior to Node itself.","updated_at":"2022-12-09T10:08:39Z","created_at":"2022-12-09T10:08:39Z","creator_user_login":"brunnerh"}
{"number":8091,"comment_id":"1344124934","body":"> But while I have your attention, for my other ASP.NET Core project, I would be interested in just SPA functionality, to be able to stick something in an HTML page: like how Angular needs just ng-controller and a script tag with a bit of JS and off it goes!\r\n>\r\n> I assume that Svelte needs a server-side JS runtime to do its SSR+CSR hydration stuff, and so ASP.NET Core ain't gonna work (though there is Microsoft.AspNetCore.NodeServices).\r\n\r\nSvelteKit needs a server-side JS runtime if you're doing SSR etc, if you're doing SPA style, you don't. In your case, you just use Svelte (not SvelteKit) and stick the compiled JavaScript and CSS output into your static or whatever folder in your ASP.NET Core app and wire it up in the template where you need it. Similar to your Angular example, wherever you want your Svelte-thing to be mounted you add a JS snipped with `new NameOfYourEntryComponent({target: htmlElementWhereItShouldBeMounted})` and you're good to go. This Reddit thread may have some more useful information for you: https://www.reddit.com/r/sveltejs/comments/r4xug4/net_and_svelte/","updated_at":"2022-12-09T10:25:30Z","created_at":"2022-12-09T10:25:30Z","creator_user_login":"dummdidumm"}
{"number":8091,"comment_id":"1344371333","body":"@brunnerh \r\n\r\nThanks, I've since read this argument somewhere else. I read the Deno docs fully and the following pages made it sound like a non-issue, so I assumed people would now start new projects (with new frameworks) on Deno. It didn't occur to me that being able to use NPM packages could be brand new to Deno, or most developers simply have too much inertia with the original Node.\r\n\r\nhttps://deno.land/manual@v1.12.2/npm_nodejs/std_node\r\nhttps://deno.land/manual@v1.12.2/npm_nodejs/cdns\r\nhttps://deno.land/manual@v1.12.2/npm_nodejs/import_maps\r\n\r\nBare in mind that I've never used Node (aside from npm) and I work alone, so I don't know what people do. But to be honest, even having discovered all this, it would still make sense to have docs for Deno out the box because of the greenfield opportunity of starting today on Svelte and Deno.\r\n\r\n\r\n@dummdidumm \r\n\r\nThis is what I'll do for Deno for now, too. I'll rework it later to enable SSR as I desperately need to crack on now.\r\n\r\nAs for the documentation, I think it needs to:\r\n\r\n- Discuss support for non-Node servers, since it's not fair to have people on other tech waste all their time learning how to _use_ Svelte and then days later realise they can't use it because they have a CMS.\r\n\r\n- Include an official version of this blog post to explain how to use it in SPA mode if you don't have a Node backend: https://blog.logrocket.com/build-spa-svelte-svelte-spa-router/\r\n\r\n- Explain how the fully-featured CSR+SSR Svelte works from the view of an HTTP request coming from the browser of an end-user landing on your Svelte website. It needs a flow diagram like how OAuth is explained, showing the request coming from the browser, to Node, then into a router perhaps, then to a handler perhaps, and then into what I presume is a Svelte view engine, that produces a full HTML and explain what is inside that HTML, that response is streamed to the browser, the browser then renders the HTML and presumably some JS payload is in there somewhere which gets run and that writes the DOM (or not for SSR) and hooks up reactivity/data-bindings, loads a client-side router (or something that overrides browser nav), and then subsequent user interactions cause the client-side router to, I'm guessing, make an HTTP request to the server for further SSR'd HTML and inject that into the DOM and hook up data binding again and run any JS, (or perhaps only the initial page is SSR'd, I don't know).\r\n\r\nIt needs this so people grok what's happening so they can construct a mental model. I can use decades of knowledge (and having things explained to me) to dig around and make some guesses about how it all might work, and even then it's exhausting. My kids have no chance.\r\n\r\nIt needs to be done early on so people can hook the other concepts to the overall working model.\r\n\r\nThank you.","updated_at":"2022-12-09T14:45:36Z","created_at":"2022-12-09T14:24:34Z","creator_user_login":"lukepuplett"}
{"number":6440,"comment_id":"866821251","body":"> Let me know if this info is sufficient and reproducible with ... multiple selectors in a single :global \r\n\r\nThat sounds like you're trying to do something unsupported by Svelte because you're getting an error message that says it's not allowed:\r\n\r\n> ERR:: CompileError [ValidationError]: :global(...) must contain a single selector","updated_at":"2021-06-23T13:09:36Z","created_at":"2021-06-23T13:09:36Z","creator_user_login":"benmccann"}
{"number":6440,"comment_id":"866829968","body":"Yes, that is the root cause, but the calculation of the offset or source length is not correct from Svelte. This is the reason why you don't see the actual problem and therefore rather difficult to detect unless you dig into Vite's source code. So it's more of a general problem with source transpilation and calculating the correct positions and source length. \r\n\r\nEDIT:\r\nBtw, it would be nice if the language service would detect this, as it was not a problem with Svelte < v3.38.3 and was introduced with this version, but this is an additional feature request :) ","updated_at":"2021-06-23T13:25:37Z","created_at":"2021-06-23T13:20:19Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"866836580","body":"I'm not quite sure where offset and source length are coming from, but I don't think it's SvelteKit? Maybe this is a bug in Svelte, Vite, or `vite-plugin-svelte`?","updated_at":"2021-06-23T13:29:16Z","created_at":"2021-06-23T13:29:16Z","creator_user_login":"benmccann"}
{"number":6440,"comment_id":"866880783","body":"Ok, I think I found the problem: Svelte calculates the offset/pos based on the transpiled source:\r\n\r\n```js\r\n// props.source which is the component source https://github.com/sveltejs/svelte/blob/228832c9a3a6fdb8c11cdbb942444734686a04f6/src/compiler/utils/error.ts#L28\r\nstylesheet: Stylesheet {\r\n ...\r\n  source: '<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\n' +\r\n    '    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\\n' +\r\n    '    return new (P || (P = Promise))(function (resolve, reject) {\\n' +\r\n    '        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\n' +\r\n    '        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\\n' +\r\n    '        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\\n' +\r\n    '        step((generator = generator.apply(thisArg, _arguments || [])).next());\\n' +\r\n    '    });\\n' +\r\n    '};\\n' +\r\n    'import { onMount } from \"svelte\";\\n' +\r\n    ...\r\n      '\\n' +\r\n      '<style>\\n' +\r\n      ...\r\n      '  .slider :global(.noUi-handle:after, .noUi-handle:before) {\\n' +\r\n      '    left: 10px !important;\\n' +\r\n      '    top: 4px !important;\\n' +\r\n      '  }\\n' +\r\n      ...\r\n      ' *{}</style>\\n',\r\n      ...\r\n    },\r\n    ...\r\n```\r\n...and adds it to the error object (error.pos) that Vite uses.\r\nBut Vite uses the non-transpiled file for the source length:\r\n```js\r\n// source object https://github.com/vitejs/vite/blob/460d1cda317e4c4d03434f2b3d8de9152620005b/packages/vite/src/node/utils.ts#L257\r\n<script lang=\"ts\">\r\n  import { onMount } from \"svelte\"\r\n  ...\r\n</script>\r\n...  \r\n<style>\r\n   ...\r\n  .slider :global(.noUi-handle:after, .noUi-handle:before) {\r\n    left: 10px !important;\r\n    top: 4px !important;\r\n  }\r\n  ...\r\n</style>\r\n```\r\n...which, of course, does not match. This is a Svelte and not a SvelteKit issue.","updated_at":"2021-06-23T14:25:05Z","created_at":"2021-06-23T14:20:57Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"866929117","body":"Did you enable source maps for TS? I guess you use `svelte-preprocess`, there's a corresponding setting: https://github.com/sveltejs/svelte-preprocess/blob/main/docs/preprocessing.md#auto-preprocessing\r\n\r\nMaybe we should enable that by default in the starter template.","updated_at":"2021-06-23T15:18:15Z","created_at":"2021-06-23T15:18:15Z","creator_user_login":"dummdidumm"}
{"number":6440,"comment_id":"866956608","body":"@dummdidumm thanks! The problem was that I set `postcss` to `true` (I had thought that I needed it for Tailwind)\r\n```js\r\n    sveltePreprocess({\r\n      defaults: {\r\n        script: 'typescript',\r\n        style: 'postcss',\r\n      },\r\n      postcss: true,\r\n    }),\r\n```\r\nWhen I remove it the language service shows the error in VSC. ","updated_at":"2021-06-23T15:51:19Z","created_at":"2021-06-23T15:51:19Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"866961654","body":"Yes, it's a known problem that PostCSS does not produce source maps and therefore the chain of source maps breaks. Not sure if there are possibilities for `svelte-preprocess` to catch this and provide sane fallbacks. Either way, I'm going to close this since it's neither directly related to SvelteKit nor Svelte.","updated_at":"2021-06-23T15:55:37Z","created_at":"2021-06-23T15:55:37Z","creator_user_login":"dummdidumm"}
{"number":6440,"comment_id":"866963728","body":"@dummdidumm sorry, it's still a svelte problem that the offset is still passed to Vite incorrectly, although the language service shows the error in VSC. Yes, the error only occurs (for me) when I have used the :global incorrectly, but this could be a problem in other situations as well.","updated_at":"2021-06-23T16:01:20Z","created_at":"2021-06-23T15:58:28Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"866968254","body":"Ok I'll reopen until the culprit is found, but I still think this is a source map issue of third parties involved. Svelte can't magically know what the offsets are if there's no proper source map passed to it.\r\n\r\nAlso please try setting source maps to true explicitely:\r\n```javascript\r\n    sveltePreprocess({\r\n      defaults: {\r\n        script: 'typescript',\r\n        style: 'postcss',\r\n      },\r\n      sourceMap: true // <---------\r\n    }),\r\n```","updated_at":"2021-06-23T16:07:01Z","created_at":"2021-06-23T16:04:01Z","creator_user_login":"dummdidumm"}
{"number":6440,"comment_id":"866983180","body":"I did that but it does not prevent the error. I added the error.pos (offset) from Svelte (2845) and the source length from Vite (2515) to Vite's error message:\r\n\r\n```shell\r\noffset is longer than source length! 2845 2515\r\nError: offset is longer than source length! 2845 2515\r\n    at numberToPos (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:4234:15)\r\n    at formatError (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44612:24)\r\n    at TransformContext.error (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44591:19)\r\n    at Object.transform (/<path/to/the/project>/node_modules/vite/dist/node/chunks/dep-0ed4fbc0.js:44802:25)\r\n```\r\n\r\nThe offset is set from the transpiled file from Svelte and added to the error object (error.pos) which could be okay but Vite uses the non-transpiled file and checks if the length of it is greater than the offset (error.pos), which might be the case if the error occurs further up but then the offset is still not correct. \r\n\r\nI moved the wrong `:global` up as a test, so the offset (error.pos) is definitely lower than the source length and then I see the correct error:\r\n```shell\r\n:global(...) must contain a single selector\r\nValidationError: :global(...) must contain a single selector\r\n    at error (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:16752:19)\r\n    at Component.error (file:///<path/to/the/project>/node_modules/svelte/compiler.mjs:29038:9)\r\n```\r\n\r\ntl;dr: If an error occurred at the end of the Svelte file, the offset is higher than the source length (not transpiled) because the error position from Svelte is taken from the transpiled file. If an error occurs at a position where the offset is still within the range of the source length, then everything is fine, but if you were to compare the error position (offset) from Svelte and the error position from the Vite's file source, it would not match.\r\n\r\n\r\nEDIT: Either Vite should use the transpiled Svelte file as source (not sure where this is coming from) or the `error.pos` from Svelte should be set from the non-transpiled file.","updated_at":"2021-06-23T16:33:11Z","created_at":"2021-06-23T16:24:18Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"867660324","body":"I would guess the latter. You probably want to know the location in the original source since that's what the user sees. @milahu did quite a bit of work on getting our sourcemaps working earlier and might be interested in this","updated_at":"2021-06-24T14:00:20Z","created_at":"2021-06-24T14:00:20Z","creator_user_login":"benmccann"}
{"number":6440,"comment_id":"867841710","body":"@akaufmann can you help to reproduce the error? something like ...\r\n\r\n<details>\r\n<summary>reproduce.sh</summary>\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\n# reproduce bug in svelte-preprocess\r\n# Error: offset is longer than source length!\r\n\r\nset -o xtrace # print cmds\r\n\r\nexpect << EOF\r\n# generated by autoexpect\r\n\r\nset timeout -1\r\n\r\nspawn pnpx create-svelte@next my-app\r\n\r\nmatch_max 100000\r\n\r\nexpect -re \"Install the following package: create-svelte@next?\"\r\n# yes\r\nsend -- \"\\r\"\r\n\r\nexpect -re \"Which Svelte app template?\"\r\n# default (svelte kit)\r\nsend -- \"\\r\"\r\n\r\nexpect -re \"Use TypeScript?\"\r\n# right -> yes\r\nsend -- \"\\033\\[C\"\r\nsend -- \"\\r\"\r\n\r\nexpect -re \"Add ESLint for code linting?\"\r\n# no\r\nsend -- \"\\r\"\r\n\r\nexpect -re \"Add Prettier for code formatting?\"\r\n# no\r\nsend -- \"\\r\"\r\n\r\nexpect eof\r\n\r\nEOF\r\n\r\n\r\n\r\ncd my-app\r\n\r\n\r\n\r\ncat >src/routes/index.svelte << 'EOF'\r\n<script lang=\"ts\">\r\n  import { onMount } from 'svelte';\r\n\r\n  onMount(async () => {\r\n     const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n     await delay(3000);\r\n  });\r\n</script>\r\n\r\n<div>Hello world!</div>\r\n\r\n<style>\r\n  /* :global(...) must contain a single selector */\r\n\r\n  :global(.a, .b) { color: red; }\r\n\r\n</style>\r\n\r\nEOF\r\n\r\n\r\n\r\npnpm install\r\n\r\n# only in dev mode:\r\n# Error: offset is longer than source length!\r\nnpm run dev -- --open\r\n```\r\n\r\n</details>\r\n\r\nedit: async code + dev mode","updated_at":"2021-06-24T19:43:57Z","created_at":"2021-06-24T17:58:58Z","creator_user_login":"milahu"}
{"number":6440,"comment_id":"867875042","body":"@milahu you get the error with a Svelte file like this:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { onMount } from 'svelte';\r\n\r\n  onMount(async () => {\r\n     const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\n     await delay(3000);\r\n  });\r\n</script>\r\n\r\n<div>Hello world!</div>\r\n\r\n<style>\r\n  .foo :global(.bar, .baz) {\r\n    left: 10px;\r\n    top: 4px;\r\n  }\r\n</style>\r\n```\r\nJust create a SvelteKit demo app with `npm init svelte@next offset-bug`, add TS so that the async/await in the file is transpiled so we can trigger the offset bug more easily and add the file e.g. as `/src/routes/index.svelte`. Start the dev server and open the browser. The first request should trigger it.\r\n\r\n","updated_at":"2021-06-24T18:51:25Z","created_at":"2021-06-24T18:51:25Z","creator_user_login":"akaufmann"}
{"number":6440,"comment_id":"867927604","body":"thanks, i fixed my `reproduce.sh` script\r\n\r\ncurrently `class Component` has no original source\r\nwhich we need in [Component.error](https://github.com/sveltejs/svelte/blob/228832c9a3a6fdb8c11cdbb942444734686a04f6/src/compiler/compile/Component.ts#L405) and [Component.warn](https://github.com/sveltejs/svelte/blob/228832c9a3a6fdb8c11cdbb942444734686a04f6/src/compiler/compile/Component.ts#L425)\r\n\r\nproposed solution:\r\nadd the original source to `Component.compile_options.sourcemap.sourcesContent`\r\nif the original source is missing, return location in transformed source\r\n","updated_at":"2021-06-24T20:25:55Z","created_at":"2021-06-24T20:23:44Z","creator_user_login":"milahu"}
{"number":6440,"comment_id":"868256156","body":"Sounds related to #6089 , is that correct? Edit: No it's not directly related. What you mean is that when an error or warning is thrown, the positions are those of the final source that Svelte sees, positions are not mapped back, the map passed in is not used here. We have to map these positions oursleves in `language-tools` because of that: https://github.com/sveltejs/language-tools/blob/master/packages/language-server/src/plugins/svelte/features/getDiagnostics.ts . If this is implemented, beware of invalid mapping ranges, we had to add some extra logic for this: https://github.com/sveltejs/language-tools/pull/1035","updated_at":"2021-06-25T06:54:04Z","created_at":"2021-06-25T06:23:39Z","creator_user_login":"dummdidumm"}
{"number":6440,"comment_id":"868317522","body":"> when an error or warning is thrown, the positions are those of the final source that Svelte sees, positions are not mapped back, the map passed in is not used here.\r\n\r\nyes\r\n\r\n`Component.error` result is correct: `error.props.start` and `error.props.end`\r\nare relative to the preprocessed source `error.props.source` (result of svelte-preprocess)\r\nalso `error.start.line` etc. are correct\r\n\r\nbut somewhere between `server.pluginContainer.transform` and `vite utils numberToPos`\r\n`error.props.start` and `error.props.end` are used with the original source (input for svelte-preprocess)\r\n\r\none solution is to make `Component.error` return locations relative to the original source,\r\nbut then `error.props.source` also should be the original source\r\n\r\nor we fix the problem later in the toolchain","updated_at":"2021-06-25T08:23:08Z","created_at":"2021-06-25T08:23:08Z","creator_user_login":"milahu"}
{"number":6440,"comment_id":"868320594","body":"Good question, what would make semantically more sense? I'm split here .. more opinions would be good.","updated_at":"2021-06-25T08:28:11Z","created_at":"2021-06-25T08:28:11Z","creator_user_login":"dummdidumm"}
{"number":6440,"comment_id":"868757768","body":"> what would make semantically more sense?\r\n\r\nideally both:\r\nwe need the generated source to understand the error\r\nwe need the original source to find the source\r\n\r\n> one solution is to make `Component.error` return locations relative to the original source\r\n\r\nstarted [here](https://github.com/milahu/svelte/tree/preprocess-add-original-source-1)\r\n\r\nproblem: low-resolution sourcemaps\r\nthis means: of the generated source, only some lines are mapped\r\n\r\n```html\r\n<style>/* mapped: 19:6 -> original 13:6 */\r\n/* not mapped */\r\n  :global(.a, .b) { color: red; } /* location of error - not mapped */\r\n/* not mapped */\r\n</style><!-- mapped -->\r\n```\r\n\r\n-> backtracing `:global(.a, .b)` to its original source is non-trivial\r\n\r\nedit: at least in this case, i can backtrace the unmapped segment \r\nby calculating the `char_offset` of the first previous mapped segment\r\nsee [svelte/src/compiler/utils/error.ts](https://github.com/milahu/svelte/blob/preprocess-add-original-source-1/src/compiler/utils/error.ts)\r\n","updated_at":"2021-06-25T20:18:19Z","created_at":"2021-06-25T18:33:39Z","creator_user_login":"milahu"}
{"number":6440,"comment_id":"907778557","body":"related: https://github.com/vitejs/vite/pull/4782","updated_at":"2021-08-29T11:47:54Z","created_at":"2021-08-29T11:47:54Z","creator_user_login":"milahu"}
{"number":4036,"comment_id":"560751542","body":"For completeness I would like to point out that there is another pattern that can be used for portals. Initializing the component manually. Though I'm not sure how to pass slot content.\r\n\r\nhttps://svelte.dev/repl/3c73b9f9510b4ec383a9399046ab5858?version=3.16.0\r\n\r\nNeither of these solutions are elegant and are really a hack. I would love to see a language feature to handle portals.","updated_at":"2019-12-02T22:25:31Z","created_at":"2019-12-02T22:25:31Z","creator_user_login":"RedHatter"}
{"number":4036,"comment_id":"561307859","body":"If you include the onDestroy from the [link](https://github.com/sveltejs/svelte/issues/3088) it will work properly with the div.\r\n```\r\nonDestroy(() => {\r\n  document.body.removeChild(portalEl)\r\n});\r\n```\r\nhttps://svelte.dev/repl/331b576a6bfc4a3fb06bb791ae82a61e?version=3.16.0\r\n\r\n\r\nThis has to do with the if statement destroying the element directly when it becomes false. In reality though, you don't want the div around the portal as it doesn't make any sense (the portal is being pulled out of the dom tree and placed on the body). What this means is with your `<div><Portal /></div>` example when the portal is created there is also an empty div inside of the `div.stuff` I think the correct way to handle this is really to not wrap the portal.\r\nE.G.\r\nhttps://svelte.dev/repl/63b8ed3acb9544a0b77e38a2c0f92db3?version=3.16.0\r\n\r\nThis gets you the same result without the breaking issue.\r\n\r\nHowever, somewhat related wrapping something with an if seems to fire onDestroy after the element is removed from the dom.\r\nhttps://svelte.dev/repl/d1966ff4279c45158226cd83b5239e7d?version=3.16.0\r\n","updated_at":"2019-12-03T18:58:24Z","created_at":"2019-12-03T18:58:24Z","creator_user_login":"vipero07"}
{"number":4036,"comment_id":"562084454","body":"I would like to propose a new svelte component to handle portals.\r\n\r\n```\r\n<svelte:target this={document.body}>\r\n  <h1>Hello world</h1>\r\n</svelte:target>\r\n```","updated_at":"2019-12-05T11:11:50Z","created_at":"2019-12-05T11:11:50Z","creator_user_login":"RedHatter"}
{"number":4036,"comment_id":"562085797","body":"The primary issue with that - and with other related proposals that are very much tied to the DOM - is what to do in SSR. Just ignore it?","updated_at":"2019-12-05T11:15:29Z","created_at":"2019-12-05T11:15:29Z","creator_user_login":"Conduitry"}
{"number":4036,"comment_id":"562122592","body":"My gut feeling is, that 99% of portals are used for modals, popovers and similar overlaid elements in reaction to user events. For all our use cases, ignoring them in SSR would be the desired behavior.","updated_at":"2019-12-05T13:10:56Z","created_at":"2019-12-05T13:10:56Z","creator_user_login":"arggh"}
{"number":4036,"comment_id":"562163423","body":"I think it would make more sense to add a target attribute to the existing svelte:component e.g.\r\n\r\n`<svelte:component this={someComponent} target={document.body} />`\r\n\r\nI agree with @arggh though, in SSR it should be ignored. However needing to understand that would add unnecessary cognitive load (consider someone who expects it to be rendered SSR and cant figure out why it doesn't). That alone seems to go against most svelte design philosophy.\r\n\r\n\r\nPerhaps a **more** fitting solution is to just allow components placed inside of `<svelte:body>` and append them to the body similar to `<svelte:head>`. That shouldn't complicate SSR, it doesn't allow for specifying DOM targets but I think that would be sufficient for most use cases.","updated_at":"2019-12-05T14:54:11Z","created_at":"2019-12-05T14:53:52Z","creator_user_login":"vipero07"}
{"number":4036,"comment_id":"652495759","body":"I just want to add to this issue, that when making portals using the DOM API as seen here:\r\nhttps://github.com/sveltejs/svelte/issues/3088 (ThomasJuster's code),\r\nbinding to dimensions e.g. `bind:clientWidth` no longer works :'(\r\n\r\nNote that I can't demonstrate that using a REPL, because in a REPL sandbox the binding to dimensions don't work.\r\n\r\n```\r\n<script>\r\n  import {onMount} from 'svelte';\r\n\r\n  let dialogNode;\r\n  let clientWidth;\r\n  let portal;\r\n\r\n  $: {\r\n    console.log('clientWidth', clientWidth);\r\n  }\r\n\r\n  // Change the width of `dialogNode`. When using a portal, `clientWidth` will not change\r\n  $: if (dialogNode) {\r\n    dialogNode.style.width = '200px';\r\n  }\r\n\r\n  onMount(() => {\r\n    // COMMENT THE CODE BELOW TO SEE THE CORRECT LOG FOR CLIENT WIDTH\r\n    portal = document.createElement('div');\r\n    portal.className = 'portal';\r\n    document.body.appendChild(portal);\r\n    portal.appendChild(dialogNode);\r\n  });\r\n</script>\r\n\r\n<style>\r\n  /* alternative is to use a css solution such as position fixed */\r\n  /* .dialog { position: fixed } */\r\n</style>\r\n\r\n<div>\r\n  <dialog class=\"dialog\" open bind:this={dialogNode} bind:clientWidth={clientWidth}>\r\n    foo\r\n  </dialog>\r\n</div>\r\n```","updated_at":"2020-07-01T15:44:01Z","created_at":"2020-07-01T15:42:49Z","creator_user_login":"thojanssens"}
{"number":4036,"comment_id":"654459572","body":"Just dropping by to mention that all of the Svelte portal workarounds/hacks are very brittle and break easily and we won't have proper portals in Svelte until they are added as first-class citizens to the framework itself. I think this issue is a subset of this one https://github.com/sveltejs/svelte/issues/1133 and we should be working to provide this API in Svelte: https://github.com/sveltejs/svelte/issues/1133#issuecomment-654440756","updated_at":"2020-07-06T20:53:20Z","created_at":"2020-07-06T20:53:20Z","creator_user_login":"pretzelhammer"}
{"number":4036,"comment_id":"716164934","body":"https://github.com/romkor/svelte-portal does a very good job of providing portals to svelte.","updated_at":"2020-10-25T15:20:24Z","created_at":"2020-10-25T15:20:24Z","creator_user_login":"bfanger"}
{"number":4036,"comment_id":"716341739","body":"Here's a surprisingly simple solution using just actions \r\nhttps://svelte.dev/repl/8364bc976f0c4ff9b83adf6e7a3c19fd?version=3.29.4\r\n```svelte\r\n<div use:createPortal=\"portal-key\" />\r\n```\r\n```svelte\r\n<div use:portal=\"portal-key\"> Hello from Component ! </div>\r\n```","updated_at":"2020-10-26T06:45:59Z","created_at":"2020-10-26T06:45:59Z","creator_user_login":"pushkine"}
{"number":4036,"comment_id":"869074827","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:54Z","created_at":"2021-06-26T23:46:54Z","creator_user_login":"stale[bot]"}
{"number":5218,"comment_id":"667959080","body":"If I understand this correctly - if you control the markup of the child component, you can easily add an action to it which is passed as a prop, so this doesn't really change anything other than adding API surface for something which, should the author of the child/third-party component wish, they could expose an API for anyway.","updated_at":"2020-08-03T11:02:13Z","created_at":"2020-08-03T11:02:13Z","creator_user_login":"antony"}
{"number":5218,"comment_id":"668201225","body":"@antony Yes, I understand that. The point of the feature is to not rely on the third-party author of the child component to add a prop for every action under the sun. Rather, they could just mark a recipient for actions on the component (assuming there is a viable target element), and then consumers of the library could extend the component using whatever actions they desire.\r\n\r\nRelying on the component author to implement a prop for every desired action is not decentralized at all as it means they must bake every feature directly into the library. This has already forced me to forgo Svelte Material because I would like to add some actions to their components but I cannot and it does not make sense for them to cater to my specific use-case by baking random stuff into the library used by everyone.","updated_at":"2020-08-03T19:29:01Z","created_at":"2020-08-03T19:29:01Z","creator_user_login":"samclaus"}
{"number":5218,"comment_id":"668207770","body":"They don't need to add a prop for every action. The action itself can be passed in as a prop.\r\n\r\n```svelte\r\n<script>\r\n  export let action;\r\n</script>\r\n\r\n<div use:action>whatever</div>\r\n```\r\n\r\nThe argument for the action can be another prop or can be part of the same prop.","updated_at":"2020-08-03T19:44:33Z","created_at":"2020-08-03T19:44:33Z","creator_user_login":"Conduitry"}
{"number":5218,"comment_id":"668282800","body":"Okay, that is interesting. It makes sense since an action is just a function that could be passed as a value anywhere. So let's say I want to apply multiple actions. I could (presumably) write the following:\r\n\r\n**multi-action.action.ts**\r\n\r\n```TypeScript\r\ntype ActionFn = (target: HTMLElement, opts?: any) => undefined | ActionCallbacks;\r\n\r\ninterface ActionCallbacks {\r\n    update?: (opts?: any) => void;\r\n    destroy?: () => void;\r\n}\r\n\r\n/**\r\n * Simple action which runs multiple actions on an element.\r\n */\r\nexport default function multiAction(actions: [ActionFn, any][]): ActionFn {\r\n    return function(target: HTMLElement): ActionCallbacks {\r\n        const handles = actions.map(([fn, opts]) => fn(target, opts));\r\n\r\n        return {\r\n            destroy(): void {\r\n                for (const handle of handles) {\r\n                    handle?.destroy?.()\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n**MatButton.svelte** (from third-party library)\r\n\r\n```Svelte\r\n<script>\r\n    export let action;\r\n</script>\r\n\r\n<button use:action>\r\n    <slot/>\r\n</button>\r\n```\r\n\r\n**MyComponent.svelte**\r\n\r\n```Svelte\r\n<script>\r\n    import MatButton from \"@smui/button\";\r\n    import multiAction from \"../actions/multi-action.action.ts\";\r\n    import myTooltip from \"../actions/tooltip.action.ts\";\r\n    import readOnHover from \"../actions/read-on-hover.action.ts\";\r\n</script>\r\n\r\n<!-- Where readOnHoverOpts is some options object which might change reactively (not shown here) -->\r\n<MatButton action={multiAction([[myTooltip, \"Click me!\"], [readOnHover, readOnHoverOpts]])}>\r\n    I'm a cool looking button\r\n</MatButton>\r\n```\r\n\r\nI'm assuming the above would be less than ideal performance-wise. If my intuition is correct, whenever `readOnHoverOpts` changes in `MyComponent.svelte`, Svelte will re-evaluate the `multiAction(...)` call and pass the new result to the `action` prop of `MatButton.svelte`. This will cause the previous `multiAction` instance to be destroyed and the new one to be executed with the `<button>` element.\r\n\r\nI have read through the API docs and nowhere did I see a mention of a way to apply an array of actions to an element. Thus, `MatButton.svelte` _could_ provide `action1`, `action2`, etc. props but that is not really a solution. So with `MatButton.svelte` providing only an `action` prop, I am forced to use my `multiAction` function which does not support updating action parameters without destroying the existing set of actions and recreating them completely (once again, assuming my intuition is correct).\r\n\r\nI also don't like that this solution is not really visible to the Svelte compiler whatsoever and maybe misses out on some optimizations? Like if the Svelte compiler knew you were applying 3 particular actions it could generate code to apply and update each of those actions individually vs. just having a runtime loop over an array of actions and having to check if any of the actions in the array were changed to a different function entirely.\r\n\r\nThe more I think about it the more I recognize this is a hard problem. It just seems like a proper method to apply actions to a component's internal markup from another component's markup would be much more optimizable and hygienic from an app-developer standpoint. That said, I don't know much about the Svelte compiler implementation and my tingly feelings tell me this would be a lot of work to implement. I am very grateful for Svelte as it is now so I am really just looking for people's thoughts on this particular problem. Maybe forwarding an `action` prop (in combination with something like `multiAction` if multiple are needed) is by far the sanest approach. Please let me know your opinion given my concrete examples.","updated_at":"2020-08-03T23:07:44Z","created_at":"2020-08-03T23:05:43Z","creator_user_login":"samclaus"}
{"number":5218,"comment_id":"698731991","body":"I don't think we necessary _need_ to be able to specify a root element(s). I'm not necessarily opposed to the idea; just wanted to point out the possibility that it _could_ still be useful to have actions that work for components even if the action function only had a reference to the component and not to any root element(s) (see use case below).\r\n\r\n(The main reason I _would_ want the ability to specify root element(s) would be for easily applying CSS classes to the root element(s) of child components (this would address https://github.com/sveltejs/svelte/pull/2888#issuecomment-554681896, https://github.com/sveltejs/svelte/pull/2888#issuecomment-554758932, etc.) )\r\n\r\n1. If we _did_ add that ability, I'd want to be able to specify multiple \"root elements\" and have the specified actions automatically applied to _each_ of them.\r\n\r\n2. Don't forget that there could also be 0 root elements (like if the child component's template had nothing but a `<slot />`).\r\n\r\n3. **I really do wish there was a way to make actions that could apply to components.**\r\n\r\nI realize that the current definition of an [action](https://svelte.dev/docs#use_action) is in terms of an _element_, but I think it could be changed to work for components too.\r\n\r\nThis would let you do things like:\r\n- attach event handlers (`on:whatever`) to the _component_ (from the action function), and have it work exactly the same as if you had passed `on:whatever={handler}` directly to the component that is the _subject_ of this action/trait/enhancer/smoosher.\r\n- define other things to happen on component lifecycle events (`onMount`, `onUpdate`) (I don't have any examples of what I'd use this for; just brainstorming)\r\n\r\nIn particular, what I want to do is something like [this (a `use:attachEvents={eventProps}` action)](https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1) ‚Äî but for components. I just don't know if there's a programmatic way to attach event handlers to (there must be one internally, but probably not one that's exposed currently). In other words, if all we had a reference to is the component instance, how would you translate/adapt this:\r\n```js\r\nnode.addEventListener(e, f)\r\n```\r\nto programmatically (with JS rather than via the template syntax) add an event listener to a _component_?\r\n\r\n---\r\n\r\n> They don't need to add a prop for every action. The action itself can be passed in as a prop.\r\n\r\nThat's awesome that you can do that (I didn't realize that), but the main problem with that approach is that **_it only works if you own the component_** that you want to add your behavior/action to. How do you add an action to a component if you _don't_ own the component that you want to add a behavior/action to (that is, if you import it from a library)? (Attaching event handlers is the main use case I have for this.)\r\n\r\nThere needs to be a way to affect child components _without their cooperation_ (as @syntheticore aply [put it](https://github.com/sveltejs/rfcs/pull/13#issuecomment-590504295)). Well, you already _can_ attach those event handlers to a child component without their cooperation if you explicitly list them out every time (so it's not like I'm proposing some new way to break encapsulation and give you more control over something _inside_ your child component). This is more about bundling some behavior together into a reusable function, letting you create reusable behaviors/hooks/actions and _avoid duplicating the code_ that provides that behavior/pattern (by explicitly listing out the same list of event handlers every time you want to reuse this pattern).\r\n\r\nThis is an area where React really has an abundant supply of features/abstractions to allow reusability (HOCs, hooks, spreading props that may include event handlers (since they are simply props (`onChange`) like any other prop)) and Svelte feels like it is lacking... **I want  React hooks ‚Äî in Svelte.** (To clarify: React doesn't actually provide a way to apply hooks to _child_ components (you use hooks in your _own_ component), so that's kind of a bad example/analogy, but they do provide a nice way to bundle reusable behavior into a function, kind of like Svelte actions, so they're still the closest analogue I can think of to Svelte actions in React. My point is I do somehow feel like that powerful feeling that you can extract literally just about _anything_ from your specific component into some generic reusable construct ‚Äî be it a component (which is the main solution to reusability that Svelte provides), or a hook (this seems missing in Svelte), or a HOC (which _might_ eventually be possible in Svelte through [inline components](https://github.com/sveltejs/rfcs/blob/inline-components/text/0000-inline-components.md), though probably not since they will probably only be possible from within a .svelte template and not from within a function in any old .js file) ‚Äî is somehow missing, coming to Svelte from React...)\r\n\r\nSorry, I should probably start a new issue/proposal for this (since the OP's issue/proposal is specifically about applying actions to a component's root _element_(s))...","updated_at":"2020-09-25T07:11:30Z","created_at":"2020-09-25T05:42:26Z","creator_user_login":"TylerRick"}
{"number":5218,"comment_id":"729624711","body":"I could see that access to an elements attributes/properties etc could be considered a corollary to the notion of a slot.\r\nWhere a slot allows IOC for element contents, similar IOC systems could make sense for the elements attributes/properties/actions etc\r\n\r\nSimilar to slots, it would make sense to have both named and unnamed \"element\" slots.\r\n\r\nSome imagined use cases for this is in complex elements such as input's where there are myriad properties and implementing logic for all of them in a component would have a large overhead but little benefit.\r\nIf instead the components input control had an \"element\" slot, the component user could easily extend the functionality in a meaningful and relatively safe way.\r\n\r\n","updated_at":"2020-11-18T11:41:31Z","created_at":"2020-11-18T11:41:31Z","creator_user_login":"intelcentre"}
{"number":5218,"comment_id":"764965141","body":"@intelcentre I like the way you're putting it.\r\n\r\n@TylerRick I half-agree with what you're saying but I would also like the Svelte team to feature-gate very strictly because an influx of features is a surefire way to end up with another React or Angular and I am NOT saying that with a positive connotation.\r\n\r\n@Conduitry I have been working on a large Angular frontend for years now, and the more I work with component libraries like Angular Material and watch them try to add every feature under the sun to accommodate the myriad use cases developers, the less I like the library because I don't need any of that junk and it just adds overhead both in terms of bundle size and documentation. Thus, I have come to the conclusion that because user interfaces are so diverse, the best answer is often to just reinvent the wheel and make your own components from scratch which tailor to your own use case--and I believe Rich Harris mentioned the same belief in one of his talks. That said, rewriting components which are 90% similar all the time is a very pessimistic, conservative approach. Does the Svelte team have any ideas about how to make components more extensible without bloating Svelte?\r\n\r\nThe only way I could think of is a built-in method to expose the root elements of a component to library users, but I now realize I could already do this by binding internal component elements to exported variables and then component users can bind the component instance and access those variables.\r\n\r\nPlease offer your thoughts and close this issue if it is a dead-end. üòÉ ","updated_at":"2021-01-21T21:52:41Z","created_at":"2021-01-21T21:52:41Z","creator_user_login":"samclaus"}
{"number":5218,"comment_id":"869061449","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T21:03:42Z","created_at":"2021-06-26T21:03:42Z","creator_user_login":"stale[bot]"}
{"number":5218,"comment_id":"882741804","body":"I'd love to have this so I could add a class to a component, to for instance add some margin","updated_at":"2021-07-19T17:52:28Z","created_at":"2021-07-19T17:52:28Z","creator_user_login":"probablykasper"}
{"number":5218,"comment_id":"1108868133","body":"I've built a fair number of library components at this point and the `svelte:host` proposal would make things so much cleaner.\r\n\r\nFor instance, say I want to make a Form component that has a specific way of managing state and communicating with the server. I'd like it to go ahead and create the `<form>` element so that I can hook into its `on:submit` event and `bind:this` to attach a `MutationObserver`. I can reorganize this so that my user creates the `<form>`, but then they have to send me an onSubmit and an HTMLElement and on and on as I add features.\r\n\r\nSo if I'm a user of the `Form` component and I need to add an aria attribute to the `<form>`, or observe its size, or attach an action, I'm out of luck. I need to go back to the Form component and add support for all those possibilities. I try to make my components very re-usable, so I find myself passing through dozens of HTML attributes (including `class`) and actions and forwarding standard HTML events. Somebody might need one of those things. I avoid $$restProps because of the warning about performance optimization, but even if I used that it doesn't cover events, actions, bind:this and bind:width.\r\n\r\nAdding a `svelte:host` could allow the svelte compiler to automatically export all of the svelte:host's props and forward its events. All the possible exports would be known at compile time, so it should not suffer from the optimization caveat that $$restProps comes with.\r\n\r\nFor actions and bind:this, bind:width, etc, the compiler could automatically add `bind:this` to the `svelte:host` element and export it as `__svelteHostElement` or something. Then when compiling a parent component, the compiler would see `use:` or `bind:this` or `bind:width` on a component (NOT an HTML element) and check to see if that component provides a `__svelteHostElement`, then attach the action to that instead.","updated_at":"2022-04-25T17:56:01Z","created_at":"2022-04-25T17:56:01Z","creator_user_login":"wickning1"}
{"number":5218,"comment_id":"1110016022","body":"@wickning1 Yes! That's what I'm saying! I believe the Svelte tutorial even suggests patterns like always adding a \"klass\" field exported as \"class\" to support adding extra classes to a component, which seems like a very frequent symptom of a more general problem. Some components \"are\" a single element semantically--it's just been enhance and been given children. The fact that Svelte supports multiple root elements for components and you explicitly see all the root elements in the markup to avoid things like weird \":host\" CSS selectors (such as in Angular) and you can get away with more powerful DOM is critical imo, but they are missing out on all the cases where Angular's design decisions actually worked out. I feel like we could easily have the best of both worlds.","updated_at":"2022-04-26T16:41:29Z","created_at":"2022-04-26T16:41:29Z","creator_user_login":"samclaus"}
{"number":5218,"comment_id":"1196860108","body":"This is just a philosophy thing for me but, I think good Components should be indistinguishable from the default browser components. Frameworks, just give us the ability to extend the default components with our own. \r\n\r\nI agree with the sentiment in this issue. The fact that Svelte components have inherently different rules than default html components makes Svelte hard to scale. Since right now basically we have Svelte Components for everything and it makes actions completely unusable for us. I get that there is the workaround with the action prop but, I think that introduces a lot of frustrating cognitive load to the language since you need to now learn how to use actions on Svelte Components in a hacky non documented way. Whereas, if they just behaved consistently across the board it would be way easier to work with.\r\n\r\nAlso with this it would be nice if we could also use it for the `bind:this` directive. Since, right now I need to export an element prop for every component in my library. I think adding this would solve a lot of problems.","updated_at":"2022-07-27T14:49:01Z","created_at":"2022-07-27T14:49:01Z","creator_user_login":"bertybot"}
{"number":5218,"comment_id":"1353207513","body":"This is a pattern that I've become really reliant on in React and I was surprised to see there's no clear analogue in Svelte:\r\n\r\n```typescript\r\ntype MyButtonProps = React.ComponentProps<'button'> & {\r\n  theme: 'primary' | 'secondary';\r\n  size: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nexport default function MyButton(props: MyButtonProps) {\r\n  const { theme, size, children, ...buttonProps } = props;\r\n  // Not pictured: using theme and size to create classNames for the button\r\n  return <button {...buttonProps}>{children}</button>;\r\n}\r\n```\r\n\r\nThis gives the user a type-safe way to apply any event or attribute to the underlying button they want, and basically work with the `MyButton` component as if it were a `button`.  I start most of my projects by setting up these types of components so I agree having a similar pattern in Svelte would be very useful, especially for developers coming from a React background.","updated_at":"2022-12-15T14:47:09Z","created_at":"2022-12-15T14:47:09Z","creator_user_login":"SeanRoberts"}
{"number":5218,"comment_id":"1416733034","body":"If this is added, we could use style-directives on components.\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<Card style:padding=\".5em\">\r\n    Hello World!\r\n</Card>\r\n```\r\n\r\n```svelte\r\n<!-- Card.svelte -->\r\n<div svelte:host>\r\n    <slot />\r\n</div>\r\n```","updated_at":"2023-02-04T11:55:35Z","created_at":"2023-02-04T11:55:35Z","creator_user_login":"TheCymaera"}
{"number":5218,"comment_id":"1418239981","body":"> If this is added, we could use style-directives on components.\n\nYes, and any of the other directives you can apply to normal elements, including actions.\n\nThat does make me wonder if the feature would cause optimization headaches because Svelte might currently make a lot of assumptions about knowing all directives applied to an element just from the template it lives in. Whereas now it would need to expose API for parent components to dynamically add in more style/class/action/event/etc. directives.\n\nI do not know anything about Svelte internals and that may have been a reason the Svelte core contributors largely brushed off this feature request when I first made it.","updated_at":"2023-02-05T19:03:26Z","created_at":"2023-02-05T19:03:26Z","creator_user_login":"samclaus"}
{"number":3938,"comment_id":"554671476","body":"Awesome example thanks for posting, I was actually curious recently...where would be the best place to post these type of things ?... \r\n\r\nI recently put a few example together for myself, and others who would be interested.\r\n\r\nHere is a MathJax example I'm working on...\r\nhttps://svelte.dev/repl/ebd12dbf04574b2bb40003cc8a4299b0?version=3.14.1\r\n\r\nDesmos\r\nhttps://svelte.dev/repl/67d24ff99abc47a28bae0bcc5a4cbac1?version=3.14.1\r\n\r\nQR Code Generator\r\nhttps://svelte.dev/repl/72d3ca877047468db8bb3a68f25a8b92?version=3.14.1\r\n\r\nPrism Code Highlighter.\r\nhttps://svelte.dev/repl/3fef33867c47431b8f4edc99275640e8?version=3.14.1","updated_at":"2019-11-16T20:28:45Z","created_at":"2019-11-16T20:28:45Z","creator_user_login":"viper6277"}
{"number":3938,"comment_id":"555426786","body":"we have a to-be-done Recipes section in the Community site that may be a good home for this.. https://github.com/sveltejs/community/","updated_at":"2019-11-19T09:58:03Z","created_at":"2019-11-19T09:58:03Z","creator_user_login":"swyxio"}
{"number":3938,"comment_id":"1002357874","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-29T01:52:45Z","created_at":"2021-12-29T01:52:45Z","creator_user_login":"stale[bot]"}
{"number":3938,"comment_id":"1002373114","body":"Nope","updated_at":"2021-12-29T03:03:49Z","created_at":"2021-12-29T03:03:49Z","creator_user_login":"frederikhors"}
{"number":5052,"comment_id":"647766854","body":"Do you have a reproduction with fewer moving parts? Are the spreads an important part of this? Is the text input?","updated_at":"2020-06-22T21:00:09Z","created_at":"2020-06-22T21:00:09Z","creator_user_login":"Conduitry"}
{"number":5052,"comment_id":"647985647","body":"> Do you have a reproduction with fewer moving parts? Are the spreads an important part of this? Is the text input?\r\n\r\nThe text input is not important, you can just do the following:\r\n\r\n1. Click on \"Increment page\" a few times.\r\n2. Click on \"Filter\".\r\n\r\nThen, the result would be the same.\r\n\r\n**Update:**\r\nI updated my original post with a shorter REPL that's probably easier to understand. ","updated_at":"2020-06-23T08:42:47Z","created_at":"2020-06-23T08:14:21Z","creator_user_login":"yuliankarapetkov"}
{"number":5052,"comment_id":"648002879","body":"I'm going to disagree that it's a blocker because replacing line 12 with: `$count = 0` fixes the issue.\r\n\r\nHowever I'm going to agree that it looks like a bug, for the reason that:\r\n\r\n```\r\ncount.set(0)\r\n$count = 0 \r\n```\r\n\r\nshould have the same behaviour, I believe.","updated_at":"2020-06-23T08:47:53Z","created_at":"2020-06-23T08:47:53Z","creator_user_login":"antony"}
{"number":5052,"comment_id":"648007796","body":"> I'm going to disagree that it's a blocker because replacing line 12 with: `$count = 0` fixes the issue.\r\n> \r\n> However I'm going to agree that it looks like a bug, for the reason that:\r\n> \r\n> ```\r\n> count.set(0)\r\n> $count = 0 \r\n> ```\r\n> \r\n> should have the same behaviour, I believe.\r\n\r\nAnd it's also not working correctly for `count.update(v => 0)` as well, which means that for updates you have to use this syntax instead:\r\n\r\n```\r\n$store = { ...$store, page: 0 }\r\n```","updated_at":"2020-06-23T10:03:56Z","created_at":"2020-06-23T08:56:54Z","creator_user_login":"yuliankarapetkov"}
{"number":5052,"comment_id":"648039424","body":"AFAIK in the docs it says `store.set(value)` is the proper way to set a store's value, so I would say it's a bug that it doesn't work as described. \r\n\r\nAnd if `$count = 0` works, but `count.set(0)` doesn't, then why do we even have the function syntax? üòï  We should just use the assignment syntax everywhere instead.","updated_at":"2020-06-23T09:59:29Z","created_at":"2020-06-23T09:57:21Z","creator_user_login":"jhwheeler"}
{"number":5052,"comment_id":"648101153","body":"It does work, but it is async.\r\n\r\nI think `$count = 0;` has something like a \"auto await tick\", because if you change the `reset` function like this\r\n```js\r\nimport { tick } from 'svelte';\r\nasync function reset () {\r\n\tcount.set(0)\r\n\tawait tick\r\n\tconsole.log('count should be zero ', $count)\r\n}\r\n```\r\nit works.","updated_at":"2020-06-23T12:02:26Z","created_at":"2020-06-23T12:02:26Z","creator_user_login":"PatrickG"}
{"number":5052,"comment_id":"648108587","body":"svelte store sets are _always_ synchronous\r\n\r\nin your examples, the second store is not a store\r\nyou're only using the event dispatching feature of the store\r\n\r\nthe issue is that stores updated by other stores are assumed to be derived stores, so svelte treats them differently\r\n\r\n`$count = 0` does work because it's known \"for sure\" that `$count` will be set to `0`, so it sets the value locally at the same time as it calls `count.set`\r\n```js\r\nset_store_value(count, $count = 0);\r\n```\r\nthat however is willy-nilly compiler optimization that should be removed, as that causes stores such as `tweened` and `spring` to be temporally out of sync with the local component value and it only works locally as `$count` will still be out of sync in other components\r\n\r\nthe value should be set synchronously anyway so setting it locally at `set_store_value` before it gets set in `component_subscribe` is just unnecessary extra work that only hides bad uses of stores such as this one","updated_at":"2020-06-23T12:50:50Z","created_at":"2020-06-23T12:18:51Z","creator_user_login":"pushkine"}
{"number":5052,"comment_id":"648166417","body":"> `$count = 0` does work because it's known \"for sure\" that `$count` will be set to `0`, so it sets the value locally at the same time as it calls `count.set`\r\n\r\nOK, that's interesting. Why do we use `store.set(value)` at all, instead of just assigning stores to their new values like we do with component-scope variables?\r\n\r\n\r\n","updated_at":"2020-06-23T13:57:03Z","created_at":"2020-06-23T13:57:03Z","creator_user_login":"jhwheeler"}
{"number":5052,"comment_id":"648243821","body":"> in your examples, the second store is not a store\r\n> you're only using the event dispatching feature of the store\r\n\r\nIn fact, in my real-world example the second store _is a store_. \r\n\r\n>  that only hides bad uses of stores such as this one\r\n\r\nI need the `filter` to be a store because it is part of the app state. So, if `filter` is a store anyway and I need to perform an operation when its value changes, how is it a \"bad use\" to perform this operation in the subscribe function? ü§î \r\n\r\nAnyway, the point of this thread is to report an obvious bug and not to discuss code quality. ","updated_at":"2020-06-23T15:38:47Z","created_at":"2020-06-23T15:37:32Z","creator_user_login":"yuliankarapetkov"}
{"number":5052,"comment_id":"649606497","body":"what if we use a reactive block instead of subscription function, like this...\r\n\r\n$: if ($random) {\r\n    reset();\r\n}\r\n\r\nthis feels bit more svelte/reactive... \r\nisn't this same as the subscription function.. \r\nmixing sync and async is bad as usual, \r\neither it should just work out of box \"somehow\" \r\nOr there should be a lint and compiler error for calling sync functions (for those which have async ways using them) \r\nwithin async function flows... \r\njust a thought..\r\n(it's good i saw this, I'm pretty sure i will waste hours on something like this, try to debug)","updated_at":"2020-06-25T15:11:31Z","created_at":"2020-06-25T15:04:53Z","creator_user_login":"Dulanjala007"}
{"number":5052,"comment_id":"662530540","body":"@jhwheeler as pushkine said, when you use assignment Svelte assumes that assignment is what you want and sets the store value immediately, regardless of what then happens in `set()`.  Calling `set()` directly avoids this behavior (might be desirable for custom stores), though frankly I think you'd usually be better off naming the method something else and avoiding the confusion of it also being called _after_ assignment.\r\n\r\nI was confused enough by this to [ask about it on Stackoverflow](https://stackoverflow.com/questions/63027877/svelte-store-assignment-calls-default-writable-set-and-then-custom-set).  I agree with antony; I would have expected `set()` and assignment to have the same behavior by default.","updated_at":"2020-07-22T15:46:47Z","created_at":"2020-07-22T15:46:47Z","creator_user_login":"jwlarocque"}
{"number":5052,"comment_id":"691346543","body":"> @jhwheeler as pushkine said, when you use assignment Svelte assumes that assignment is what you want and sets the store value immediately, regardless of what then happens in `set()`. Calling `set()` directly avoids this behavior (might be desirable for custom stores), though frankly I think you'd usually be better off naming the method something else and avoiding the confusion of it also being called _after_ assignment.\r\n> \r\n> I was confused enough by this to [ask about it on Stackoverflow](https://stackoverflow.com/questions/63027877/svelte-store-assignment-calls-default-writable-set-and-then-custom-set). I agree with antony; I would have expected `set()` and assignment to have the same behavior by default.\r\n\r\nI've just stumbled upon this issue while experimenting with animations. I had my two client sizes (`clientWidth` and `clientHeight`) bound to an element and was using their value in a tweened store to animate a different component. \r\n\r\nMy setup and the assignment using the reactive operator caused the value to update immediately before tweening - like @jwlarocque noted. Here's an example with the red square jumping before animating:\r\nhttps://svelte.dev/repl/bcc79762e77443f5b9a5bff26c49a57e?version=3.25.0\r\n\r\nHere's an example with the store's set method, instead (no jumping):\r\nhttps://svelte.dev/repl/ce5c48faabec4a1aa771e2c65870d841?version=3.25.0\r\n\r\nIt would help a lot for beginners if the two behaviours were equivalent (I personally find the assignment's behaviour counter-intuitive) or if there was at least a note in the documentation highlighting this difference. ","updated_at":"2020-09-11T23:02:00Z","created_at":"2020-09-11T23:00:44Z","creator_user_login":"IgnusG"}
{"number":5052,"comment_id":"717661169","body":"I've read through this thread a few times, and while I'm not quite sure I understand everything, I'd like to note for the next person who sees this, that if you want to synchronously see the new value reflected, \r\n\r\n```js\r\nget(count)\r\n```\r\n\r\ndoes the trick\r\n\r\n```js\r\nconsole.log('count should be zero ', $count, get(count));\r\n```\r\n\r\nand prints \r\n\r\n> count should be zero  5 0\r\n\r\nhttps://svelte.dev/repl/be858d84e6364019855d4fb85e2e4c53?version=3.23.2","updated_at":"2020-10-28T15:01:44Z","created_at":"2020-10-28T02:49:56Z","creator_user_login":"arackaf"}
{"number":5052,"comment_id":"717663905","body":"What's especially encouraging is that derived stores do in fact synchronously reflect their new values when the source stores upstream are set with `set` no matter whether they're accessed via `$derivedStore` or via `get(derivedStore)`\r\n\r\nhttps://svelte.dev/repl/2dca058dd63d4ea39597bc0de6a9bc0e?version=3.23.2 ","updated_at":"2020-10-28T02:59:11Z","created_at":"2020-10-28T02:59:11Z","creator_user_login":"arackaf"}
{"number":5052,"comment_id":"865884850","body":"First of all, `store.set(value)` is synchronous.\r\n\r\nif you call `store.set(5)`, you should be able to read the value out of the store immediately, `get(store) === 5`.\r\n\r\nSecondly, the magic of `$store` is:\r\n\r\n```js\r\nlet $store;\r\nstore.subscribe(store, (value) => $store = value);\r\n```\r\n\r\n`$store` is another variable that stays in-sync with the store value by subscribing to it\r\n\r\nin most cases, the subscribe callback function is called synchronously, so you can do:\r\n\r\n```js\r\nstore.set(5);\r\nconsole.log($store); // 5\r\n```\r\n\r\nso what happened in the above code is that:\r\n1. `store.set(5)` will synchronously loop through the subscribers function and call them\r\n2. `(value) => $store = value)` is evaluated, therefore the value of `$store` updated to `5`\r\n3. after all the subscribers are looped through, the `store.set(...)` method returns, and ...\r\n4. `console.log($store)` prints out `5`\r\n\r\nallow me to break down what happen instead, if you write `$store = 5`, as some of you are confused and wonder what's the difference between `store.set(...)` and `$store = ...`\r\n\r\nwhen you write `$store = 5` in a `.svelte` component, it is compiled into:\r\n\r\n```js\r\nstore.set($store = 5);\r\n```\r\n\r\n1. `$store = 5` updates the variable `$store` to 5\r\n2. the expression `$store = 5` returns `5`, therefore `store.set(5)`\r\n3. `store.set(5)` will synchronously loop through the subscribers function and call them\r\n4. `(value) => $store = value)` is evaluated, therefore the value of `$store` updated to `5`, though at this point, it is already `5`\r\n5. after all the subscribers are looped through, the `store.set(...)` method returns\r\n\r\nstrictly speaking, in this case, the value of `$store` gets update, even before value of the `store` gets update, but it all happen within the same statement, it is unlikely to have a race condition.\r\n\r\n---\r\n\r\nNow, if we are all aligned with the fundamentals of `store`, here is what introduced this bug:\r\n\r\nhttps://github.com/sveltejs/svelte/pull/3219\r\n\r\nwhich introduced an optimisation to update store value via `breadth-first` approach, vs `depth-first` approach, as explained in https://github.com/sveltejs/svelte/pull/3219#issuecomment-515444121\r\n\r\nhow would that impact in our case? let's take a look at the following example:\r\n\r\n```js\r\nlet store = writable(5);\r\nstore.subscribe(() => {\r\n\tstore.set(10)\r\n\tconsole.log($store);\r\n});\r\nstore.set(30);\r\n```\r\n\r\n[repl](https://svelte.dev/repl/32af6f6055b14b2198760d2caa665c39?version=3.38.2)\r\n\r\nwe subscribe the store and call `store.set()` in the subscriber function to update the store value to `10`, (it wont lead to infinite loop, because internally, `writable` will not notify the subscribers if the value is set to the same value), so you set it to `30`, it will set it to `10` and then it will try to set it to `10` again, which will be a noop.\r\n\r\nguess what is the value of `$store` inside `store.subscribe(...)` ? you'll see the function being called a few times, but you'll find `30` is printed among them!\r\n\r\nso, if the store is updated in `depth-first` approach, whenever you call `store.set(...)` it will call the subscriber callback function immediately, and update the value of the `$store`:\r\n\r\n1. `store.set(30)`\r\n    1. calls `(value) => $store = value` to update the `$store` to `30`\r\n    2. calls `() => { ... }`\r\n    3. which calls `store.set(10)`\r\n        1.  calls `(value) => $store = value` to update the `$store` to `10`\r\n        2. calls `() => { ... }`\r\n        3. which calls `store.set(10)`\r\n            1. at this point of time, the value of the store is already `10`, so it is a noop.\r\n        4. `console.log($store)` prints out `10`\r\n    4. `console.log($store)` prints out `10`\r\n\r\nRun the above code in `v3.6.8` which was before the optimisation got introduced, and you'll see the above [REPL](https://svelte.dev/repl/32af6f6055b14b2198760d2caa665c39?version=3.6.8)\r\n\r\nHowever, now it is run in `breadth-first` approach:\r\n\r\n1. `store.set(30)`\r\n    1. calls `(value) => $store = value` to update the `$store` to `30`\r\n    2. calls `() => { ... }`\r\n    3. which calls `store.set(10)`\r\n        1.  schedules `(value) => $store = value`\r\n        2. schedules `() => { ... }`\r\n    4. `console.log($store)` prints out `30`\r\n    5. calls the scheduled `(value) => $store = value` to update the `$store` to `10`\r\n    6. calls the scheduled `() => {...}`\r\n        1. which calls `store.set(10)`\r\n            1. at this point of time, the value of the store is already `10`, so it is a noop.\r\n        2. `console.log($store)` prints out `10`\r\n\r\nnow see that the inner `store.set(10)` schedules the update of the variable `$store`, therefore you see `$store` = `30`?\r\n\r\nthat's exactly what happened in this issue:\r\n\r\n```js\r\nrandom.subscribe(v => reset())\r\n\r\nconst updateRandom = () => random.set(Date.now())\r\n\r\nfunction reset () {\r\n\tcount.set(0)\r\n\tconsole.log('count should be zero ', $count)\r\n}\r\n```\r\n\r\ncalling `random.set()`, which in the subscribe function calls `count.set(0)` -> causes the `(value) => $count = value` get scheduled, therefore printing the value out immediately still show the old `$count` value.\r\n\r\nbut if you do:\r\n\r\n```js\r\nconst updateRandom = () => {\r\n  random.set(Date.now())\r\n  console.log('count is zero', $count);\r\n};\r\n```\r\n\r\nyou'll see 0, since `random.set()` started the store update chain, when it finishes, the value of `$random` and `$count` should already been updated.\r\n\r\nso, what then?\r\n\r\n---\r\n\r\n## Workaround / Solution\r\n\r\nUse reactive declaration:\r\n\r\n```js\r\n$: $random, reset();\r\n```","updated_at":"2021-06-22T11:00:54Z","created_at":"2021-06-22T11:00:54Z","creator_user_login":"tanhauhau"}
{"number":5052,"comment_id":"1264728977","body":"I am running into this and having to unwind a ton of code to try and exactly identify where the problem(s) originates. I typically used $store over store.set but had to use store.set when using in my typescript portions. Was the optimization gain from https://github.com/sveltejs/svelte/pull/3219 worth the side-effect?","updated_at":"2022-10-02T20:41:27Z","created_at":"2022-10-02T20:41:27Z","creator_user_login":"Jojoshua"}
{"number":5052,"comment_id":"1333495427","body":"I was chasing down a component which wasn't updating, based on some store data being propagated down from parent components. I thought it was some sync/async problem with stores, or props not being changed properly, but it turns out this reactivity fix above was the way to solve it.\r\n\r\nI had an object passed in as a prop called `property` and a display `value` I was wanting to compute, so in my script block I changed it to:\r\n\r\n```\r\nlet value: string;\r\n\r\n$: (value = getValue()), property;\r\n```\r\n\r\nI assume this tells Svelte _\"any time that 'property' object changes, run this reactive function\"_ - which would update my display value.","updated_at":"2022-12-01T09:47:28Z","created_at":"2022-12-01T09:47:28Z","creator_user_login":"achamas-playco"}
{"number":4079,"comment_id":"563480389","body":"`#each store.values as item}` isn't really an option, because `store.values` isn't an array - it's a store containing an array.\r\n\r\n`$store.values` means the `.values` key in the object contained in the store `store`, which is not the situation you have.\r\n\r\nIf you expect `store.values` itself to change (and not just the value in it), then something like the reactive declaration `$: values = store.values;` is what is recommended. If it's not going to change, you can just do `const { values } = store;` and then use `$values`.\r\n\r\nAs the docs indicate, autosubscription to stores only works with top-level variables. There are some situations where it would be nice to be able to do more than this - but one of the things in the way of that is there not being a nice syntax for it, and I don't think this issue suggests one. Closing,","updated_at":"2019-12-09T23:03:15Z","created_at":"2019-12-09T23:03:15Z","creator_user_login":"Conduitry"}
{"number":4079,"comment_id":"563486245","body":"@Conduitry instead of closing immediately, could we discuss some syntaxes that might work?  I'm hardly an expert, so I'm not sure I can propose a syntax, but I can try to get the ball rolling:\r\n\r\n```\r\n{#each $(stores.values) as item} <!-- might not play well with jQuery / $ selectors -->\r\n// or\r\n{#each $stores.$values as item}\r\n// or\r\n{#each stores.$values as item}\r\n```\r\n\r\nwould all be in the realm of possibility for me.  Certainly nicer than requiring a const destructuring each time.  Proposed workarounds get particularly awkward for multiple stores\r\n\r\n```\r\n<script>\r\nimport { storeA, storeB, storeC } from './stores';\r\nconst { aKeys } = storeA;\r\nconst { bKeys } = storeB;\r\nconst { cKeys } = storeC;\r\n$: aCount = $aKeys.length;\r\n$: bCount = $bKeys.length;\r\n$: cCount = $cKeys.length;\r\n</script>\r\n<div># of As: {aCount}</div>\r\n<div># of Bs: {bCount}</div>\r\n<div># of Cs: {cCount}</div>\r\n```\r\n\r\nas opposed to \r\n\r\n```\r\n<script>\r\nimport { aStore, bStore, cStore } from './stores.js';\r\n</script>\r\n<!-- Each syntax shown -->\r\n<div># of As: {$(aStore.keys).length}</div>\r\n<div># of Bs: {$bStore.$keys.length}</div>\r\n<div># of Cs: {cStore.$keys.length}</div>\r\n```","updated_at":"2019-12-09T23:23:27Z","created_at":"2019-12-09T23:23:27Z","creator_user_login":"Quantumplation"}
{"number":4079,"comment_id":"570762378","body":"I had this problem and figured out how to make something like this work with the compiler quirks. In essence, the compiler will only make whatever is immediately attached to the `$` reactive. This means in `{#each $store.values as value}` only `$store` is reactive, and `$store` returns your JavaScript object (`initial`) which doesn't have a `values` property.\r\n\r\nYou can fix this by having a derived store off your backing store that returns an object with `keys`, `values`, and `entries` properties. I've quickly rigged an example of this working here: https://svelte.dev/repl/ccbc94cb1b4c493a9cf8f117badaeb31?version=3.16.7\r\n\r\nShameless plug: I've created a package called [Svue](https://github.com/freedmand/svue) to make complex store patterns more tractable with Svelte and play nicely with the `$` reactive syntax. It's admittedly early stages and could be cleaned up a bit with respect to nested properties, but here's an example of a structure like what you're doing above using Svue: https://svelte.dev/repl/2dd2ccc8ebd74e97a475db0b0da244d9?version=3","updated_at":"2020-01-04T06:53:53Z","created_at":"2020-01-04T06:53:53Z","creator_user_login":"freedmand"}
{"number":4079,"comment_id":"625175370","body":"I've worked around this by creating a `derived` store that's basically just creating a new object with the values of the other stores.\r\n\r\nI created a class to communicate with a Firestore collection that looks like this\r\n```js\r\nimport firebase from \"../firebase\"\r\nimport { writable, readable, derived } from \"svelte/store\"\r\n\r\nexport default class firestoreCollection {\r\n    constructor(name) {\r\n        this.name = name\r\n        this.ref = firebase.firestore().collection(name)\r\n        this.loading = writable(false)\r\n        this.loadingError = writable(null)\r\n        this.dict = readable([], (set) => {\r\n            console.log(\"subscribing to\", this.name)\r\n            this.loading.update((p) => true)\r\n            this.ref.onSnapshot(\r\n                (s) => {\r\n                    this.loading.update((p) => false)\r\n                    const entities = {}\r\n                    s.forEach((doc) => {\r\n                        entities[doc.id] = { id: doc.id, ...doc.data() }\r\n                    })\r\n                    this.loadingError.update((p) => null)\r\n                    console.log(\"onSnapshot\", this.name, \"entities:\", entities)\r\n                    set(entities)\r\n                },\r\n                (e) => {\r\n                    console.error(\"failed to load entities\", this.name, e)\r\n                    this.loading.update((p) => false)\r\n                    this.loadingError.update((p) => e)\r\n                }\r\n            )\r\n        })\r\n        this.entities = derived(this.dict, ($dict) => {\r\n            return $dict ? Object.values($dict) : []\r\n        })\r\n\r\n        this.adding = writable(false)\r\n        this.addError = writable(null)\r\n\r\n        this.updating = writable(false)\r\n        this.updateError = writable(null)\r\n\r\n        this.store = derived(\r\n            [\r\n                this.loading,\r\n                this.loadingError,\r\n                this.adding,\r\n                this.addError,\r\n                this.updating,\r\n                this.updateError,\r\n                this.entities,\r\n            ],\r\n            ([$loading, $loadingError, $adding, $addError, $updating, $updateError, $entities]) => {\r\n                return {\r\n                    loading: $loading,\r\n                    loadingError: $loadingError,\r\n                    adding: $adding,\r\n                    addError: $addError,\r\n                    updating: $updating,\r\n                    updateError: $updateError,\r\n                    entities: $entities,\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    async add(newEntity) {\r\n        try {\r\n            this.adding.update((p) => true)\r\n            await this.ref.add(newEntity)\r\n            this.adding.update((p) => false)\r\n            this.addError.update((p) => null)\r\n        } catch (e) {\r\n            console.error(\"add failed\", this.name, newEntity, e)\r\n            this.addError.update((p) => e)\r\n        }\r\n    }\r\n\r\n    async update({ id, ...updatedEntity }) {\r\n        try {\r\n            this.updating.update((p) => id)\r\n            await this.ref.doc(id).set(updatedEntity)\r\n            this.updating.update((p) => false)\r\n            this.updateError.update((p) => null)\r\n        } catch (e) {\r\n            console.error(\"failed to update\", this.name, id, e)\r\n            this.updating.update((p) => false)\r\n            this.updateError.update((p) => ({ id, error: e }))\r\n        }\r\n    }\r\n}\r\n```\r\nThen I'd do\r\n```js\r\nimport firestoreCollection from \"../firebase/firestoreCollection\"\r\n\r\nconst principleCollection = new firestoreCollection(\"principles\")\r\nexport default principleCollection\r\n```\r\nAnd import this into my component\r\n```js\r\nimport principleCollection from \"./store/principles\";\r\n$: principles = principleCollection.store;\r\n```\r\n\r\n```html\r\n  {#if $principles.loading}\r\n    <p>Loading principles...</p>\r\n  {:else}\r\n    {#if $principles.loadingError}\r\n      <p class=\"text-red-500\">{$principles.loadingError.message}</p>\r\n    {:else if $principles.entities && $principles.entities.length}\r\n      <div class=\"flex flex-row flex-wrap\">\r\n        {#each $principles.entities as principle (principle.id)}\r\n          <Principle {principle} on:save={savePrinciple(principle.id)} />\r\n        {/each}\r\n      </div>\r\n    {:else}\r\n      <p>No principles yet</p>\r\n    {/if}\r\n    <button\r\n      on:click={e => principleCollection.add({ content: 'My new principle' })}>\r\n      Add new\r\n    </button>\r\n  {/if}\r\n```\r\n\r\nWhile this works fine, I would have preferred to be able to directly access the instance stores like so\r\n```\r\n{#if $(principleCollection.loading)}\r\n```\r\nThis would avoid having to create a whole derived store that's basically just repeating three times every variable name.\r\nNot sure if there's a better way that allows not to have to use destructuring because, as pointed out previously, if I add a `tagCollection` then I can't just do `const { loading } = principleCollection` anymore or I have to repeat and rename everything by doing `$: principlesLoading = principleCollection.loading` and `$: tagsLoading = tagCollection.loading` which is definitely not what I want.\r\n\r\nI'd like to see if can implement this, I've started to look at the code for Svelte. I've noticed areas of interest seem to be in the `Component.ts` file of the compiler.\r\nAny pointers on what needs to be changed to accomplish this ?","updated_at":"2020-05-08T07:54:14Z","created_at":"2020-05-07T10:41:39Z","creator_user_login":"skflowne"}
{"number":4079,"comment_id":"625715199","body":"@skflowne yea, what you're describing is essentially the workaround I mentioned in my initial comment, I could never find a cleaner way to do it either.","updated_at":"2020-05-08T08:56:37Z","created_at":"2020-05-08T08:56:37Z","creator_user_login":"Quantumplation"}
{"number":4079,"comment_id":"627958525","body":"Can someone explain why it's not working this way right now ? \r\nIs there some major technical issue related to extracting nested variables in template expressions ? \r\nOr is it just about agreeing on syntax ?","updated_at":"2020-05-13T12:45:36Z","created_at":"2020-05-13T12:45:36Z","creator_user_login":"skflowne"}
{"number":4079,"comment_id":"676536834","body":"It would be great if there were some syntax for directly subscribing to stores in properties of objects.\r\nSo ideally just `regularObject.$childStore` and `$store.$childStore` or if that somehow is not an option maybe the `$` can be nested via parentheses like `$(regularObject.childStore)` and `$($store.childStore)`.\r\n\r\nCurrently the issue often comes up with for-each blocks because for singular instances one can just pull the property to the top level and then use that (it is still not intuitive). So for example:\r\n\r\n```svelte\r\n<script>\r\n     export let model;\r\n     $: isEnabled = model.isEnabled;\r\n</script>\r\n<button disabled={$isEnabled == false}>{model.label}</button>\r\n```\r\n\r\nThus, another workaround is to create a new top level scope for each item by wrapping the content of a for-each block in a new component. That is hardly ideal and i have been thinking that being able to add code to the for-each scope would be a useful capability in itself. (One can already destructure the loop variable but using a store obtained that way currently throws an error üôÅ - `Stores must be declared at the top level of the component (this may change in a future version of Svelte)`)\r\n\r\nExample with fantasy syntax:\r\n\r\n```svelte\r\n{#each buttonModels as buttonModel {\r\n\t// Code block with access to for-each item scope.\r\n\tconst isEnabled = buttonModel.isEnabled;\r\n}}\r\n\t<button disabled={$isEnabled == false}>{model.label}</button>\r\n{/each}\r\n```\r\n\r\nThis could also be used for getting some item-level data on the fly without the need to map over the source array or having overly long expressions in attribute bindings and slots.","updated_at":"2020-08-19T16:57:04Z","created_at":"2020-08-19T16:42:05Z","creator_user_login":"brunnerh"}
{"number":4079,"comment_id":"688487240","body":"Here's a proxy store I wrote to derive the value of a store nested within other stores, it plays nice with typescript and can go infinitely deep\r\n```ts\r\ntype Cleanup = () => void;\r\ntype Unsubscriber = () => void;\r\ntype CleanupSubscriber<T> = (value: T) => Cleanup | void;\r\n\r\ntype p<l, r> = (v: l) => Readable<r>;\r\n\r\nexport function proxy<A, B>(store: Readable<A>, ...arr: [p<A, B>]): Readable<B>;\r\nexport function proxy<A, B, C>(store: Readable<A>, ...arr: [p<A, B>, p<B, C>]): Readable<C>;\r\nexport function proxy<A, B, C, D>(store: Readable<A>, ...arr: [p<A, B>, p<B, C>, p<C, D>]): Readable<D>;\r\nexport function proxy<A, B, C, D, E>(store: Readable<A>, ...arr: [p<A, B>, p<B, C>, p<C, D>, p<D, E>]): Readable<E>;\r\nexport function proxy(store: Readable<any>, ...arr: p<any, any>[]) {\r\n\tconst max = arr.length - 1;\r\n\treturn readable(null, (set) => {\r\n\t\tconst l = (i: number) => (p) => {\r\n\t\t\tconst q = arr[i](p);\r\n\t\t\tif (!q) set(null);\r\n\t\t\telse return i === max ? q.subscribe(set) : subscribe_cleanup(q, l(i + 1));\r\n\t\t};\r\n\t\treturn subscribe_cleanup(store, l(0));\r\n\t});\r\n}\r\nfunction subscribe_cleanup<T>(store: Readable<T>, run: CleanupSubscriber<T>): Unsubscriber {\r\n\tlet cleanup = noop;\r\n\tconst unsub = store.subscribe((v) => {\r\n\t\tcleanup();\r\n\t\tcleanup = run(v) || noop;\r\n\t});\r\n\treturn () => {\r\n\t\tcleanup();\r\n\t\tunsub();\r\n\t};\r\n}\r\n```\r\nSimply supply your store followed by however many functions are needed to derive from the value of each nested store\r\nhttps://svelte.dev/repl/d2c8c1697c0f4ac3b248889ec329f512?version=3.24.1\r\n\r\n```ts\r\nconst deepest = readable(\"success!\");\r\nconst deeper = readable({ deepest });\r\nconst deep = readable({ deeper });\r\nconst store = readable({ deep });\r\nconst res = proxy(\r\n\tstore,\r\n\t($store) => $store.deep,\r\n\t($deep) => $deep.deeper,\r\n\t($deeper) => $deeper.deepest\r\n);\r\nconsole.log($res); // \"success!\"\r\n```","updated_at":"2020-09-07T19:40:00Z","created_at":"2020-09-07T19:40:00Z","creator_user_login":"pushkine"}
{"number":4079,"comment_id":"738614707","body":"A slightly different use case. I often use functions that return stores. Now I do something like this\r\n\r\n```js\r\n$: PRODUCT = watchProduct(product_id)\r\n$: product = $PRODUCT\r\n<h1>{product.title}</h1>\r\n{product.description}\r\n```\r\nor\r\n```js\r\n$: product$ = watchProduct(product_id)\r\n<h1>{$product$.title}</h1>\r\n{$product$.description}\r\n```\r\n\r\nbut I'd prefer instead a less noisy\r\n\r\n```js\r\n$: product = $(watchProduct(product_id))\r\n<h1>{product.title}</h1>\r\n{product.description}\r\n```\r\n\r\n(Actually maybe this could be done with a Babel Macro.)","updated_at":"2020-12-04T07:20:27Z","created_at":"2020-12-04T07:20:27Z","creator_user_login":"cie"}
{"number":4079,"comment_id":"779098501","body":"+1. Would really like syntax support for this, too!","updated_at":"2021-02-15T09:45:20Z","created_at":"2021-02-15T09:45:20Z","creator_user_login":"wagnerflo"}
{"number":4079,"comment_id":"779891979","body":"This issue even occurs when importing via namespaces, so I think it's quite important to resolve it.\r\n\r\n```js\r\nimport * as stores from './stores';\r\n...\r\n$stores.foo\r\n```\r\n\r\nThe issues I see with the the presented workarounds is that all of them wrap multiple stores into one, resulting in a multiplied performance impact on evaluation.\r\n\r\n`$` very much behaves like an operator in my opinion, so perhaps we should define *some* operator precedence, relative [to the existing ones](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence), to resolve this issue in a satisfying manner. Grouping (via braces) could then be applied naturally.","updated_at":"2021-02-16T15:01:11Z","created_at":"2021-02-16T14:58:46Z","creator_user_login":"lgrahl"}
{"number":4079,"comment_id":"782844469","body":"+1 - I'm adding a new API to svelte-formula called `beaker` that allows the creation of form groups.\r\n\r\nWhen creating a group object (e.g. `const contacts = beaker()`) the contacts variable contains an action and some stores.\r\n\r\nIn the temple the cleanest way to use this would be:\r\n\r\n```\r\n<div use:contacts.group>\r\n  {# each $contacts.formValues as contact, i}\r\n  {/each}\r\n</div>\r\n```\r\n\r\nBut like other examples above you need to create a reference earlier to it in another variable before using.\r\n\r\nI was wondering if somehow templates could handle an expression like this at least? (currently doesn't work as it treats `$` as a variable here)\r\n\r\n```\r\n<div use:contacts.group>\r\n  {# each $(contacts.formValues) as contact, i}\r\n  {/each}\r\n</div>\r\n```\r\n\r\n","updated_at":"2021-02-21T11:47:14Z","created_at":"2021-02-21T11:46:57Z","creator_user_login":"tanepiper"}
{"number":4079,"comment_id":"851080121","body":"This has come up again in #6373. [This comment](https://github.com/sveltejs/svelte/issues/6373#issuecomment-851059020) has some more commentary on this feature and potentially expands it somewhat.\r\n\r\nI have been trawling through GitHub and discord to see what has been said about this issue in the past. I will try to document what I could find as well as capturing a few core cases that this feature would need to cover. All example will be pseudocode to communicate the essence of the problem and are not indicative of any possible solution/ eventual syntax.\r\n\r\n## Examples\r\n\r\n**An object property containing a store:**\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  const my_store = {\r\n    one: writable(1),\r\n    two: writable(2)\r\n  };\r\n</script>\r\n\r\n{my_store.$one} - {my_store.$two}\r\n```\r\n\r\n**A computed object property containing a store (raised by @Rich-Harris  in [this comment](https://github.com/sveltejs/svelte/issues/6373#issuecomment-851059020)):**\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  const my_store = {\r\n    one: writable(1)\r\n  };\r\n  \r\n  const my_prop = 'one';\r\n</script>\r\n\r\n{my_store[`$${my_prop}`]}\r\n```\r\n\r\n**An array of stores (_very_ similar to the above if not identical):**\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  const my_store = [ writable(1) ];\r\n</script>\r\n\r\n<!-- this is a fucking monstrosity -->\r\n{my_store[$0]}\r\n```\r\n\r\n**Iterating an array of stores in an `#each` block (extension of above)**\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n  \r\n  const todos = [{\r\n    description: 'my todo',\r\n    done: false\r\n  }];\r\n</script>\r\n\r\n{#each todos as todo}\r\n  <div>\r\n    <input type=checkbox bind:checked={$todo.done}>\r\n    {$todo.description}\r\n  </div>\r\n{/each}\r\n```\r\n\r\n**All of the above but also in a store (recursive stores?)**\r\n\r\nI'm not entirely certain what the use-case for this is, but if we are considering adding some runtime to support dynamically computed contextual stores, we can probably support this too.\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  const my_store = writable({\r\n    one: writable(1),\r\n    two: writable(2)\r\n  });\r\n</script>\r\n\r\n{$my_store.$one} - {$my_store.$two}\r\n```\r\n\r\n## Comments\r\n\r\nI haven't been able to find much that is useful or relevant but I'm going to dump some fragments of conversations and discord links here so we stand a chance of finding them in the future.\r\n\r\n**Discord conversations about reserving contextual store accessor syntax (`foo.$bar`)**\r\n\r\nWe never actually did this and the conversation probably isn't very useful but I never want to do this again.\r\nhttps://discord.com/channels/457912077277855764/571775594002513921/848691193046892594\r\n\r\n**Discord conversation about stores in stores**\r\n\r\nhttps://discord.com/channels/457912077277855764/457912077277855766/683966382790148117\r\n\r\n**Discord conversation about maybe not needing this at all**\r\n\r\n[Conversation starts here](https://discord.com/channels/457912077277855764/653341885674553345/709687553669857311)\r\n\r\n@tanhauhau mentioned that the [`#with` syntax](sveltejs/svelte#4601) could actually be one way to address this. The `#with` syntax has probably been superseded by the [`@const` proposal](https://github.com/sveltejs/rfcs/pull/33#issuecomment-690278073) at this stage (although that is TBD). But they would both address some of these use-cases in one way or the other. \r\n\r\nWhile this could technically work, I don't really think it address the core issues:\r\n\r\n```svelte\r\n<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  const my_store = {\r\n    one: writable(1),\r\n    two: writable(2)\r\n  };\r\n</script>\r\n\r\n{@const one = my_store.one }\r\n{@const two = my_store.two }\r\n\r\n{$one} - {$two}\r\n```\r\n\r\nThis is almost exactly as much code as the current workaround (deconstructing the object in a reactive declaration) and doesn't address any of the other use-cases (stores in arrays, stores in stores, computed property names containing stores). There has also been some discussion about banning the use of `@const` at the top level (outside of template a sub-scope: `each`, etc).\r\n\r\n---\r\n\r\nI think this captures the commonly use-cases and a few of the more interesting conversations that have happened outside of this issue.\r\n\r\nWhat I found _plenty_ of in my search, was requests for this features and possible use-cases. If they would be helpful I could potentially dump them here as well.","updated_at":"2021-05-30T23:41:25Z","created_at":"2021-05-30T23:41:25Z","creator_user_login":"pngwn"}
{"number":4079,"comment_id":"864239047","body":"In https://github.com/sveltejs/svelte/issues/6373#issuecomment-863801628, an idea using labels came to me. Apologies if somebody already came up with this idea.\r\n\r\n```svelte\r\n<script lang=ts>\r\nimport { value$ } from './value$'\r\nexport value = $value$\r\nvalue: $value$\r\n</script>\r\n\r\n<input bind:value>\r\n```\r\n\r\nWhere the reactive variable `value` is a proxy for the reactive store value `$value$`. On the surface, it seems like the label proxy is a different use case (being in the `<script>`), but it seems like a use case which could be a factor in the design of contextual store proxies or even contextual reactive variables.\r\n\r\nWithin the template area, this could be extended to:\r\n\r\n```svelte\r\n{#each my_store_objs as my_store_obj}\r\n  {val_w_suffix: my_store_obj.$val_w_suffix$}\r\n  {val_wo_suffix: my_store_obj.$val_wo_suffix}\r\n  {$: sum = val_w_suffix + val_wo_suffix}\r\n  {alt_sum: val_w_suffix + val_wo_suffix}\r\n  <input type=number bind:value={val_w_suffix}> + <input type=number bind:value={val_wo_suffix}> = {sum} or {alt_sum}\r\n{/each}\r\n```","updated_at":"2021-06-18T20:27:56Z","created_at":"2021-06-18T19:41:38Z","creator_user_login":"btakita"}
{"number":4079,"comment_id":"1000620139","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:00Z","created_at":"2021-12-24T02:48:00Z","creator_user_login":"stale[bot]"}
{"number":4079,"comment_id":"1000626964","body":"Further activity to prevent stale bot from closing this. Also, does the stale bot contribute *any* value commensurate with the extra effort it takes to prevent it from closing valuable issues with lots of discussion? If it does not (and IMHO it does not), I suggest we stop using it.","updated_at":"2021-12-24T03:11:48Z","created_at":"2021-12-24T03:11:48Z","creator_user_login":"rmunn"}
{"number":4079,"comment_id":"1001018034","body":"It would be awsom if this would work out of the box.\r\n\r\nI had an store of an array of objects with store propertys...\r\n\r\nI tried some of the workarounds here, but the arrays made some problems.\r\n\r\nI worked around this by creating a store that subscribs to every update of any store reachable through object propertys, arrays etc. And used some Typescript sorcery to turn Readable propertys to a \"normal\" type. (I must say TypeScript's type system is awsome)\r\n\r\n\r\n<details>\r\n<summary>\r\n\r\n**Workaround that should work for arrays and nested proeprtys**\r\n </summary>\r\n\r\n```ts\r\nimport { get, readable, Readable, writable } from \"svelte/store\";\r\n\r\n\r\n\r\n\r\nexport type NoStore<T> = T extends Readable<infer T2>\r\n    ? NoStoreParameter<T2>\r\n    : NoStoreParameter<T>;\r\n\r\n\r\ntype NoStoreParameter<T> = {\r\n    [Property in keyof T]: T[Property] extends Readable<infer Args> ? NoStore<Args> : NoStore<T[Property]>\r\n}\r\n\r\n\r\nexport function flatStore<T>(source: T): Readable<NoStore<T>> {\r\n\r\n    return readable({} as NoStore<T>, function start(set) {\r\n        let destroyCallback: (() => void)[] = [];\r\n\r\n        const updated: () => void = () => {\r\n            destroyCallback.forEach(x => x());\r\n            const newDestroyCallback: (() => void)[] = [];\r\n            const newValue = mapStoreInternal(source, { update: updated, onDestroy: newDestroyCallback })\r\n            destroyCallback = newDestroyCallback;\r\n            set(newValue)\r\n        };\r\n        const startValue = mapStoreInternal(source, { update: updated, onDestroy: destroyCallback })\r\n        console.log(startValue);\r\n        set(startValue);\r\n        return function stop() {\r\n            destroyCallback.forEach(x => x());\r\n        }\r\n    });\r\n\r\n}\r\nfunction mapStoreInternal<T>(source: T, callbacks?: { update: () => void, onDestroy: (() => void)[] }): NoStore<T> {\r\n\r\n    if (isStore(source)) {\r\n        const value = get(source);\r\n        if (callbacks) {\r\n\r\n            const unsubscribe = source.subscribe(x => {\r\n                if (value !== x) {\r\n                    callbacks.update();\r\n                }\r\n            })\r\n            callbacks.onDestroy.push(unsubscribe);\r\n        }\r\n        return mapStoreInternal(value, callbacks) as NoStore<T>;\r\n\r\n    } else if (Array.isArray(source)) {\r\n        const result: any[] = []\r\n        for (let index = 0; index < source.length; index++) {\r\n            const element = source[index];\r\n            result.push(mapStoreInternal(element, callbacks));\r\n        }\r\n        return result as any;\r\n    } else if (typeof source === \"object\") {\r\n        const result: any = {}\r\n        for (const key in source) {\r\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                const element = source[key];\r\n                result[key] = mapStoreInternal(element, callbacks);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    else {\r\n        // only stuff like string and bigint\r\n        return source as any;\r\n    }\r\n}\r\n\r\n\r\nfunction isStore(value: any): value is Readable<any> {\r\n    if (value)\r\n        return typeof value.subscribe == \"function\";\r\n    return false;\r\n}\r\n\r\n```\r\n</details>","updated_at":"2021-12-25T13:27:27Z","created_at":"2021-12-25T13:27:27Z","creator_user_login":"LokiMidgard"}
{"number":4079,"comment_id":"1006033130","body":"@LokiMidgard ...FYI\r\nhttps://svelte.dev/repl/dc5b04b90d6e4f7181a55685afd9fab6?version=3.44.3","updated_at":"2022-01-05T19:56:51Z","created_at":"2022-01-05T19:56:51Z","creator_user_login":"iacore"}
{"number":4079,"comment_id":"1006034836","body":"@Quantumplation @Conduitry Can you change the title of this issue, since its scope is larger than the original problem? Change to something like \"Support for syntax for binding to arbitrary reactive store\".\r\n\r\n ","updated_at":"2022-01-05T19:59:26Z","created_at":"2022-01-05T19:59:26Z","creator_user_login":"iacore"}
{"number":4079,"comment_id":"1006037008","body":"So, about making `$` as an operator. The dot (`.`) always has the highest precedence, so the semantic of `$foo.bar` would change from `($foo).bar` to `$(foo.bar)`.\r\n\r\nThis change will make the use of `$` in line with `!` and other unary operators, but will break a lot of (speculation) code. And that can be solved by first making parenthesis recommended, then mandatory, then change the default behavior (like how new features introduced in D). We can also provide auto refactor tools for this change.","updated_at":"2022-01-05T20:06:52Z","created_at":"2022-01-05T20:02:30Z","creator_user_login":"iacore"}
{"number":4079,"comment_id":"1006054734","body":"> @Quantumplation @Conduitry Can you change the title of this issue, since its scope is larger than the original problem? Change to something like \"Support for syntax for binding to arbitrary reactive store\".\n> \n>  \n\nDone!","updated_at":"2022-01-05T20:29:38Z","created_at":"2022-01-05T20:29:38Z","creator_user_login":"Quantumplation"}
{"number":4079,"comment_id":"1007260879","body":"> So, about making `$` as an operator. The dot (`.`) always has the highest precedence, so the semantic of `$foo.bar` would change from `($foo).bar` to `$(foo.bar)`.\r\n> \r\n> This change will make the use of `$` in line with `!` and other unary operators, but will break a lot of (speculation) code. And that can be solved by first making parenthesis recommended, then mandatory, then change the default behavior (like how new features introduced in D). We can also provide auto refactor tools for this change.\r\n\r\nAn _in hindsight_ thought (and apologies for the slight slidetrack): At first, everyone was confused on why Rust put the `.await` keyword at the very end. I think we can learn from that. :slightly_smiling_face: ","updated_at":"2022-01-07T09:29:26Z","created_at":"2022-01-07T09:29:26Z","creator_user_login":"lgrahl"}
{"number":4079,"comment_id":"1020297976","body":"Just want to let my use case here. I like to use namespace imports so I have a single `import * as Lib from '$lib'` and then I can access whatever I need from there: `Lib.Firebase.User.get(id)`, `Lib.Image.preload(url)`, `<Lib.UI.Button />`, `Lib.Store.currentUser` (this one is a store), and so on. It helps me immediately identify from where a function/variable comes and whether it's declared in the current module or somewhere else. It also completely prevents me from wasting \"brain cycles\" with name collisions that would sometimes happen when importing things with the same name from different modules. I'm explaining here just for context, but, of course, it's a personal preference.\r\n\r\nIdeally, this is what I'd like to do:\r\n```svelte\r\n<script>\r\n  import * as Lib from '$lib'\r\n</script>\r\n{$(Lib.Store.currentUser).email}\r\n```\r\n\r\nAs it's not yet possible, the best I can do while preserving the namespace is this:\r\n```svelte\r\n<script>\r\n  import * as Lib from '$lib'\r\n  const Lib_Store_currentUser = Lib.Store.currentUser\r\n</script>\r\n{$Lib_Store_currentUser.email}\r\n```\r\n\r\nThe `$()` makes a lot of sense to me and would make my code cleaner. It's one of the few cases where Svelte doesn't yet make my code as clean as possible. I'm hoping `$()` gets added soon.","updated_at":"2022-01-24T16:39:24Z","created_at":"2022-01-24T16:39:24Z","creator_user_login":"gustavopch"}
{"number":4079,"comment_id":"1065992042","body":"`$()` syntax is the first thing I tried when I ran into this, but got an error, and landed here. This syntax would be great.","updated_at":"2022-03-13T00:30:39Z","created_at":"2022-03-13T00:30:39Z","creator_user_login":"jquesada2016"}
{"number":4079,"comment_id":"1066008712","body":"A related issue I've ran into is subscribing to a store value passed as a slot prop.  A solution/workaround I created is a simple [StoreSubscribe](https://github.com/techniq/svelte-ux/blob/master/src/lib/components/StoreSubscribe.svelte) wrapper component, such as:\r\n\r\n```svelte\r\n<Parent let:someStore>\r\n  <StoreSubscribe value={someStore} let:value>\r\n    <Child {value} />\r\n  </StoreSubscribe>\r\n</Parent>\r\n```\r\n\r\nLooking at it, it might make more sense if the props were\r\n\r\n```svelte\r\n<StoreSubscribe store={someStore} let:value>\r\n```\r\nor\r\n```svelte\r\n<StoreSubscribe store={someStore} let:$store>\r\n```\r\n\r\nAnyways, thought I'd share in case it helps anyone.","updated_at":"2022-03-13T02:33:10Z","created_at":"2022-03-13T02:33:10Z","creator_user_login":"techniq"}
{"number":4079,"comment_id":"1118387107","body":"> A related issue I've ran into is subscribing to a store value passed as a slot prop. A solution/workaround I created is a simple [StoreSubscribe](https://github.com/techniq/svelte-ux/blob/master/src/lib/components/StoreSubscribe.svelte) wrapper component, such as:\r\n> \r\n> ```svelte\r\n> <Parent let:someStore>\r\n>   <StoreSubscribe value={someStore} let:value>\r\n>     <Child {value} />\r\n>   </StoreSubscribe>\r\n> </Parent>\r\n> ```\r\n> \r\n> Looking at it, it might make more sense if the props were\r\n> \r\n> ```svelte\r\n> <StoreSubscribe store={someStore} let:value>\r\n> ```\r\n> \r\n> or\r\n> \r\n> ```svelte\r\n> <StoreSubscribe store={someStore} let:$store>\r\n> ```\r\n> \r\n> Anyways, thought I'd share in case it helps anyone.\r\n\r\nThis is a solution I've used in the past, but its a bit clunky and doesn't work for two way binding.","updated_at":"2022-05-05T10:12:23Z","created_at":"2022-05-05T10:12:23Z","creator_user_login":"WHenderson"}
{"number":4079,"comment_id":"1125014846","body":"> `$()` syntax is the first thing I tried when I ran into this, but got an error, and landed here. This syntax would be great.\r\n\r\nSame for me. I wanted to ergonomically reference a store contained in an object and intuitively reached for the `$(...)` syntax.\r\n\r\n+1 for supporting `$(some expression resulting in a store)` as the syntax for binding to an arbitrary store expression (alongside the existing syntax for simple stores).\r\n\r\nHaving this syntax would be such a quality of life improvement for my projects. I store state in immutable trees ([@crikey/stores-immer](https://www.npmjs.com/package/@crikey/stores-immer)) and generate reactive stores on the fly using selectors ([@crikey/stores-selectable](https://www.npmjs.com/package/@crikey/stores-selectable)).\r\nAt the moment I am forced to create a long ugly list of local variable references in each component and use sub-components for otherwise trivial tasks like iterating over loops with inner stores such as described in #2016\r\n","updated_at":"2022-05-12T13:44:41Z","created_at":"2022-05-12T13:44:41Z","creator_user_login":"WHenderson"}
{"number":4079,"comment_id":"1256147096","body":"It seems like [SolidJS signals](https://www.solidjs.com/tutorial/introduction_derived) has a nice API that works for composing stores, which permits ‚Äúderived stores of derived stores‚Äù like in the pseudo-code examples of https://github.com/sveltejs/svelte/issues/4079#issuecomment-851080121","updated_at":"2022-09-23T12:27:14Z","created_at":"2022-09-23T12:27:14Z","creator_user_login":"mquandalle"}
{"number":4079,"comment_id":"1256251106","body":"> It seems like [SolidJS signals](https://www.solidjs.com/tutorial/introduction_derived) has a nice API that works for composing stores, which permits ‚Äúderived stores of derived stores‚Äù like in the pseudo-code examples of https://github.com/sveltejs/svelte/issues/4079#issuecomment-851080121\r\n\r\nMy main complaint over solid-js signals is that they have global state & are primarily designed to run inside a component tree. Reactive domain data is not really supported. It's possible but kludgy to use a solid-js signal in middleware & components. However [nanostores](https://github.com/nanostores/nanostores) (a close fork of svelte stores) & svelte stores are designed to be executed outside of a component tree. Also, with a context, svelte stores & nanostores can be run concurrently.\r\n\r\nI have been using a concurrency-friendly pattern of injecting a `ctx` `Map` to hold lazily loaded stores for years now. It's not slick syntactic sugar, but it handles the concurrent (e.g. server-side) state outside of the component tree.\r\n\r\n```ts\r\nimport { be_, ctx_ } from '@ctx-core/object'\r\nimport { writable_ } from '@ctx-core/svelte'\r\nconst count__ = be_(()=>writable_(0))\r\nconst ctx = ctx_()\r\nmy_writable__(ctx).$ = 1\r\n```\r\n\r\nwrt solid-js & nanostores\r\n\r\n```tsx\r\nimport { be_, ctx_ } from '@ctx-core/object'\r\nimport { atom_ } from '@ctx-core/nanostores'\r\nimport { useMemo } from '@ctx-core/solid-nanostores'\r\nconst count__ = be_(()=>atom_(0))\r\nconst ctx = ctx_()\r\nfunction MyComponent() {\r\n  const count_ = useMemo(count__(ctx))\r\n  return [\r\n    <div>{count_()}</div>,\r\n    <button onClick={()=>count__increment(ctx)}>Increment</button>\r\n  ]\r\n}\r\n// Demonstrates function decomposition\r\nfunction count__increment(ctx:Ctx) {\r\n  count__(ctx).$ = count__(ctx).$ + 1\r\n}\r\n```\r\n\r\nIf something like solid signals supports being run outside of the component tree & not reliant on global state (i.e. concurrency friendly), then we can slim things down even more. @ryansolid has practical reasons for using global state for the needs of solid-js but I think there's a case for supporting general purpose domain reactive state not being run inside a component tree.\r\n\r\n```ts\r\nimport { createSignal } from 'new-library'\r\nconst [count_, count__set] = createSignal(0)\r\nconsole.info(count_()) // 0\r\ncount__set(1)\r\nconsole.info(count_()) // 1\r\n```","updated_at":"2022-09-23T14:29:52Z","created_at":"2022-09-23T13:57:22Z","creator_user_login":"btakita"}
{"number":4079,"comment_id":"1601924310","body":"Any more thinking on this? Would personally love to see a `$()` (or similar) syntax - it's the only pain point I've had using svelte so far. ","updated_at":"2023-06-22T02:16:22Z","created_at":"2023-06-22T02:16:22Z","creator_user_login":"emensch"}
{"number":3203,"comment_id":"516281652","body":"Perhaps my misunderstanding, but I understand the key benefit of Suspense to be the inversion of control (children control the loading/entering the suspense state). It isn't difficult today to conditionally render child content based on whether its loaded, to show previous state, or a loading indicator on a cancelable timer. You can always push that to the parent to achieve this effect. What makes Suspense interesting is the parent goes \"Here's a placeholder. Children do whatever you need to do, I don't even need to know what exactly. I'm here to support you and make sure you don't embarrass yourselves.\" We can probably avoid throwing Promises, but I think we need to at minimum execute the children without showing them if necessary. This makes everything more complicated like conditional rendering in between the Suspense placeholder and the asynchronous call. But that's the problem we need to solve.Thats what makes this interesting.","updated_at":"2019-07-30T06:25:56Z","created_at":"2019-07-30T06:25:56Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"516407816","body":"@ryansolid I would agree with most of that. Suspense in React is generic in the sense that its behaviour does not depend on its children. Children indeed signal (through promise sending) something to their parent, with the parent deciphering the meaning. For now it is just a 'not ready' signal but it could be anything, this is really a communication children - parent that is occurring here. I know only three ways of doing that: shared state, events, and passing continuations (callbacks, coroutines etc.), each with its own set of tradeoff.\r\n\r\nThe `<suspense>` component I propose is doing the same, except that the communication child - parent happens through callbacks (`done`, `failed`) which are injected by the parent. It could also happen through events (`dispatch` event emitter is also injected, and `done` is in fact sugar for `dispatch(DONE_EVENT)`). \r\n\r\nOne advantage of throwing a promise is that it seems to magically remove the necessity for a communication interface, e.g. there is no need to inject anything in the child as `throw` comes with JavaScript just like `window` comes with the browser (and the swallows with the spring? I digress). On the downside, you are producing an effect on the whole program execution (modifying the call stack etc.), and well you are changing however slightly the pragmatics of exceptions. Using `throw` as an event emitter, and *exception bubbling* on the call stack is an original albeit transgressive idea but I would wait and see what consequences that brings in the future. \r\n\r\n> We can probably avoid throwing Promises, but I think we need to at minimum execute the children without showing them if necessary. \r\n\r\nThat exactly what I do. Children are wrapped in a `display:none` styled `div` and set in the template, i.e. they are executed. The issue I describe in my OP is that adding the `div` to hide the slot content has side effects on the styling precisely so in some cases, the children will temporarily render poorly.\r\n\r\nHere is the displaying code:\r\n\r\n```html\r\n<style>\r\n.incognito {\r\n  display: none;\r\n  border: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n.cognito {\r\n  display: inherit;\r\n  border: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n</style>\r\n\r\n{#if stillLoading }\r\n  <slot name=\"fallback\" dispatch={next} intents={intents} ></slot>\r\n{:else if errorOccurred }\r\n  <slot name=\"error\" dispatch={next} intents={intents} data={data}></slot>\r\n{:else if done }\r\n  <slot dispatch={next} intents={intents} data={data}></slot>\r\n{/if}\r\n<div class=\"incognito\">\r\n  <slot dispatch={next} intents={intents} ></slot>\r\n </div>\r\n```\r\n\r\nThis behaviour is illustrated in the example I gave:\r\n\r\n```html\r\n<Suspense let:intents={{done, failed}} timeout=0>\r\n            <div slot=\"fallback\" class=\"album-img\">\r\n                <img alt=\"loading\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\r\n            </div>\r\n            <a href={link} target=\"blank\" class=\"link\">\r\n                <img class=\"album-img\"\r\n                     on:load={done}\r\n                     src={image}\r\n                     alt={'itunes' + Math.random()} />\r\n            </a>\r\n        </Suspense>\r\n```\r\n\r\nThe `<a href={link} >` links need to be displayed (executed) for the download of the image to start.\r\n\r\nThat brings me to the last point which is about another advantage of the `Suspense` I propose over React: \r\n\r\n- There may be a significant refactoring of components to become Suspense-ready (adding the thrown promise or adding `React Cache` to the equation).  Taking the previous example with `<a href={link} >` links, there is no need to do anything else than using the public API of the `<a>` html tag. In other words, the difference between a suspended image link and a regular image link is minimal (`on:load={done}`).\r\n- React Suspense seems specialized to data fetching (hence `React Cache`). The Svelte Suspense I propose is unrelated to data fetching. It accepts a task to run when mounting. That task can be anything. It can be a memoized fetch, as in React, or it can be a sending data to a logger or whatever makes sense to your use case.","updated_at":"2019-07-30T15:46:34Z","created_at":"2019-07-30T12:59:14Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"516482377","body":"@ryansolid After rereading your message, actually I think I do not understand that part:\r\n\r\n> I understand the key benefit of Suspense to be the inversion of control (children control the loading/entering the suspense state).\r\n\r\nIn most of the suspense example I have seen, the loading state is entered immediately (`fetch` happening when the component is mounted, or React Cache used immediately). It is of course possible to have a suspended component which throw its promise post rendering or mounting but I wonder how that would work. Did anybody try that. I am curious.\r\n\r\nAnyways, in the Suspense component I propose, a task if any is run on mounting the children, and the results (if any) of this task are passed to the children. A different logic is easy to implement by just changing the state machine. The whole control flow logic is embedded in the machine. In fact, if you remove the `Spinning` state from the machine, you have the machine for a `Promise`. So that `Suspense` machine is just `Promise` with a twist. You can add as many twists as you like.","updated_at":"2019-07-30T15:59:02Z","created_at":"2019-07-30T15:57:44Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"516572950","body":"It's entered immediately often (although not always), but the child is responsible for loading the data. So even if there is a cache etc, it's the execution of the child that actually does the async request etc. The Suspense element itself is above it in the hierarchy(usually a different component) and isn't aware of the specifics. So when the execution starts in the parent and you execute the Suspense element your aren't suspended, but when the downstream child is executed and does an async request that is the point at which it is realized. So from that perspective, the image loading example holds up, but the data loading one where the parent doing the fetch is too coupled I think.\r\n\r\nThe original example for React I believe was roughly the following. Pretend we have a Component on the page that has a navigation bar and a main content section. As I change the navigation the content changes and may or may not have different async data needs. On a change of navigation I want to show the existing content until the new navigation has fully loaded, and if it takes too long show a spinner.\r\n\r\nSo we implement this by wrapping the content section with our Suspense Component. Lets say after 300ms it shows a spinner until the section fully loads.  So say one child loads feeds, one loads albums. We start by rendering the feeds page. It realizes that we need to do a data load and triggers Suspense. When it is complete we see the feeds content.  When the user clicks \"Albums\" we update the navigation highlight (perhaps with a sliding animation that takes 300ms). It triggers the navigation change loading the Albums Component doing a different data load triggering the parent Suspense. However we still show the Feeds content. If it takes over 300ms we show we replace it with a spinner otherwise if less we replace the Feeds content with the Album content. At no point did we flash the page blank for 100s of ms or load an unnecessary spinner.\r\n\r\nI think your approach could handle this. But the key is that the child have different data needs (one loads feeds, one loads albums) so the handling of that belongs with the Child Components and not with the parent container.","updated_at":"2019-07-30T19:59:54Z","created_at":"2019-07-30T19:59:54Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"516637045","body":"What you describe is the following flow:\r\n- navigation event => fetch action, start timeout\r\n- timeout expires, fetch has not resolved => render spinner\r\n- timeout expires, fetch has resolved => ignore\r\n- fetch resolves ok => render some content\r\n- fetch resolves nok => render fallback content\r\n- **timeout has not expired && fetch has not resolved => DO NOT REMOVE STUFF FROM DOM**\r\n\r\nUp to the last part it is fairly easy to implement, this is the standard *event-action* paradigm which characterizes reactive systems. The last part however does not have the form `event => action`. For instance, *timeout has not expired* is not an event, it is a piece of state.\r\n\r\nInstead of routing let's consider a master-detail navigation. We have the following component tree rendered at `t0`:\r\n\r\n```html\r\n<A>\r\n  <B>\r\n</A>\r\n```\r\n\r\nUser clicks at `t1`:\r\n\r\n```html\r\n<A>\r\n  <B />               // Master\r\n  <C invisible /> // Detail\r\n</A>\r\n```\r\n\r\nFetch is successful:\r\n\r\n```html\r\n<A>\r\n  <B />\r\n  <C />\r\n</A>\r\n```\r\n\r\nIn this case, we are covered because we only add to the existing hierarchy. So the DO NOT REMOVE STUFF FROM DOM part is already the normal rendering behaviour. I mean by that what is displayed by `A` and `B` is not going anywhere.\r\n\r\nIf we talk about routing, from `url1`:\r\n\r\n```html\r\n<A />\r\n```\r\n\r\nUser clicks at `t1` (no rendering, but fetch is ran) and we go to `url2` (or later?):\r\n\r\n```html\r\n<A />\r\n```\r\n\r\nFetch Succeed event before Timer Expired event:\r\n\r\n```html\r\n<B />\r\n```\r\n\r\nTimer Expired before Fetch Succeed arrives:\r\n\r\n```html\r\n<Spinner />\r\n```\r\n\r\nI confess that I have no idea what is the behaviour of Svelte with respect to routing. Outside of Svelte, there are routing libraries which have asynchronous transitions, and that could probably implement the sought out functionality. But the functionality would be coupled to the router, so probably the fetch would have to be in the router, not in the component. In the same way, the Suspense functionality is integrated into React (because Error Boundaries are integrated into React), \r\n","updated_at":"2019-07-31T00:01:20Z","created_at":"2019-07-30T23:43:20Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"516641238","body":"Yeah, I was thinking as much. Any conditional(routing) in between the Suspense placeholder and Child Component Resolution would have to be Suspense aware. If this was solvable, I think pretty much any suspense case would be. If the Suspense API here was standardized for Svelte this could be something a Router provider could build in if they could observe the same state. Mind you they would need to run multiple paths at the same time. Without switching the display necessarily.\r\n\r\nReact's versions is absolute in that even changes to the current Component would not track during that period (since they interrupt rendering) but that might be unnecessary in practice. I also wonder React's Suspense is just a restrictive implementation of a subset of the use cases here and the real feature looks a little different. Especially when put against a different system (like Svelte).\r\n\r\nIn any case I think we understand each other. I think the Routing case can probably be a future consideration. The key part for me is is that any data fetching mechanism should be triggerable from below. Separating the display handling of fallbacks from the details of what goes on below.","updated_at":"2019-07-31T00:04:41Z","created_at":"2019-07-31T00:04:41Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"516644339","body":"If you would do client-side routing by hand, the behaviour you want is described by the following machine -- note how I reused the Suspense machine, by replacing the `START` triggering event by the route changed event:\r\n\r\n![Imgur](https://imgur.com/nYuMzqZ.jpg)\r\n\r\n","updated_at":"2019-07-31T00:20:27Z","created_at":"2019-07-31T00:20:27Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"516647192","body":"Actually I am thinking that maybe this could be solved if Svelte has a special NULL value for templates. e.g. when a template evaluates to empty, then don't update the DOM (I believe the current behaviour would be to detach the relevant pieces DOM).\r\n\r\nSo if from `<A/>` you should render `<B/>` but B after computation renders the special NULL value, then no op. Otherwise, detach A, attach B. So the action `DO NOT REMOVE STUFF FROM DOM` can be signaled to Svelte just like any other render actions. So the flow I mentioned above would become:\r\n\r\n- navigation event => fetch action, start timeout, **render special NULL value**\r\n- timeout expires, fetch has not resolved => render spinner\r\n- timeout expires, fetch has resolved => ignore\r\n- fetch resolves ok => render some content\r\n- fetch resolves nok => render fallback content\r\n\r\nIf I dare say, that would be analog to encoding exceptions in a return value instead of throwing.","updated_at":"2019-07-31T00:41:48Z","created_at":"2019-07-31T00:36:41Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"564816709","body":">  the key benefit of Suspense to be the inversion of control (children control the loading/entering the suspense state)\r\n\r\nExcellent point and it helped me think more clearly about a presentation I had to give on suspense and concurrent mode. \r\n\r\n> it's the execution of the child that actually does the async request etc.\r\n\r\n> The key part for me is is that any data fetching mechanism should be triggerable from below.\r\n\r\nWhat's interesting is that the inversion of control to children does not necessarily mean the children initiate the promise they are waiting on. That was emphasized more in their additional blog post:\r\n\r\nhttps://reactjs.org/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html \r\n\r\nIn the case of data fetching, they don't necessarily trigger the data fetch. They just check on the state of that request (such as calling `read()` on result returned by `wrapPromise` from the example code). Event handlers (route changes, tab clicks, button clicks, etc.) that trigger showing the view could initiate data fetches:\r\n\r\nhttps://reactjs.org/blog/2019/11/06/building-great-user-experiences-with-concurrent-mode-and-suspense.html#fetch-in-event-handlers\r\n\r\nSo how do they maintain this inversion of control then? How do parents stay agnostic of children data dependencies to maintain loose-coupling/maintainability/etc.? \r\n\r\nIn the case of Relay and GraphQL, the components declare the \"fragments\" of data they need and then Relay analyzes them at build time and aggregates the fragments into top level queries that are kicked off on routing changes, etc. The initiating of the data fetch promise(s) is built into the router.\r\n\r\nSo children's data dependencies are still colocated with the component, but not necessarily the fetching of that data.\r\n\r\nThey also have a REST proof of concept:\r\n\r\nhttps://github.com/gaearon/suspense-experimental-github-demo\r\n\r\nIn that example, the components have separate data files that allow them to colocate data dependencies. However, the top level aggregated parallel fetch on route change is not generated at build time and is instead written by hand. Example:\r\n\r\nhttps://github.com/gaearon/suspense-experimental-github-demo/blob/master/src/UserPage.data.js\r\n\r\nBut in theory, they could be generated as well. If not, then you lose some of that loosely-coupled inversion of control. But if you generate them at build time like the Relay case, maybe not? \r\n\r\n> We can probably avoid throwing Promises, but I think we need to at minimum execute the children without showing them if necessary. This makes everything more complicated like conditional rendering in between the Suspense placeholder and the asynchronous call.\r\n\r\nI haven't gone through the relay docs and example app yet to fully understand how it works. I'm also curious about things like conditionally rendered components inside suspense boundaries and how that would work with these generated aggregated queries for a tree of components. ","updated_at":"2019-12-12T02:06:40Z","created_at":"2019-12-12T02:05:04Z","creator_user_login":"sschottler"}
{"number":3203,"comment_id":"564840318","body":"> What's interesting is that the inversion of control to children does not necessarily mean the children initiate the promise they are waiting on.\r\n\r\nYeah I did not understand that at the time but they definitely do not need to do the async request themselves just trigger Suspense on read. This wasn't as clear before they released the more recent docs for data-loading.\r\n\r\n-----------------------------------\r\nSince last posting to this conversation, I've worked through designing a Suspense pattern that can be mimicked with a reactive library and I've implemented them in my reactive UI library([SolidJS](https://github.com/ryansolid/solid)).\r\n\r\nThe first piece comes down to understanding how rendering works in Svelte, as rendering has to be non-blocking. We need to ensure that Components are still able to go through initialization code without being visible. In Solid's case I do it before attaching to the DOM, but if we need to mount with Svelte it can still work by controlling visibility. \r\n\r\nThe next is having a means to setup reading of a Suspense state. I ended up using a Context API mechanism to do that making the Suspense Component essentially a Provider. From there specialized loading methods can read into that context to maintain suspense state. I am unsure of an easy way to handle `useTransition` equivalent with Svelte since it doesn't really match the DX experience, but there is probably another way to configure the timeout. \r\n\r\nFinally all control flow directives in Suspense boundaries need to be aware of this same context. From there it is fairly easy to hold changes. It might make sense for this behavior to be opt in (some syntax addition) to allow better tree shaking since Suspense boundaries can be cross Component meaning that the compiler probably will have difficulty predicting this completely from the compilation step.\r\n\r\nI assume the Svelte solution would need to be a little different but the fundamentals should be similar. If its any help the latter half of [my medium article](https://itnext.io/designing-solidjs-suspense-f4e92c625cb5?source=friends_link&sk=f06f93d28632daba59048ed3d6d6b0a5) might shed some clues I'm not thinking of at the moment. This conversation helped me take the first steps along this path and I'd love to help any way I can.","updated_at":"2019-12-12T04:03:36Z","created_at":"2019-12-12T04:03:36Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"564961109","body":"@sschottler While I understand the general principles behind React Concurrent Mode, I am not sure I understand in the details how it works. Splitting work into chunks, and giving back the hand to the browser for user event handling obviously improves the reactivity of the application. What I don't understand is how the back pressure issues that it creates are solved. Conceptually this is similar to a search-as-you-type field. Any field update triggers a new query, and then responses come at any time and in any order. So if you want to display responses in-order, in the worse case (the response for the first query comes last), you have to buffer as many responses as there were queries. In the real world, you would drop the responses that do not correspond to the current query - which correspond to lossy back-pressure. \r\n\r\nThe analogy with Concurrent Mode is that user interactions may generate new render queries. It is not clear to me whether React discards the vDOM it was computing (no longer current) to focus on the new vDom triggered by user interaction; or do both vDOM computation in parallel, and displays (commit phase) them individually in order when computation is finished; or display what it has computed so far on every requestAnimationFrame; or does a merge between vDOM version a-la git; or ... But that gets up away from the OP's topic.\r\n\r\nIndepedently of the specific techniques used, I think the API for Suspense is worth meditating on. As I said in a previous comment,  some form of communication children-parent will have to be involved, and I can think of three ways to do that: shared state, events, and callbacks. So @ryansolid seems to be using shared state (context). I used callbacks in my previous Svelte examples (callback which use events under the hood). The point is while the technique may differ, it will be possible to implement suspending functionalities no matter what the framework/library is. The issue for me is thus the API. My preferred component organization is to have component with a single concern. That means presentational component, render-less or logic component, layout components, etc. Suspense enters in the category of the logic component and ideally its children should be presentational component.\r\n\r\nNow, lets review the great examples of @ryansolid:\r\n\r\n1. Fallback Fundamentals\r\n```jsx\r\n    <Suspense fallback={<Loader />}>\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <LazyChild start={startTime} />\r\n      <LazyAsyncChild start={startTime} />\r\n    </Suspense>\r\n```\r\n\r\nThis is a good example, because the suspense logic resides in the Suspense component. However there is not a complete separation achieved here because the code for the children components would change (however little) if no suspense functionality was used, e.g.\r\n\r\n```jsx\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <AsyncChild start={startTime} />\r\n      <LazyChild start={startTime} />\r\n      <LazyAsyncChild start={startTime} />\r\n```\r\n\r\nBut on the surface of things, it looks good enough.\r\n\r\n2. Transitions\r\n```jsx\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch transform={awaitSuspense}>\r\n            <Match when={state.tab === 0}>\r\n              <AsyncChild page=\"Uno\" />\r\n            </Match>\r\n            <Match when={state.tab === 1}>\r\n              <AsyncChild page=\"Dos\" />\r\n            </Match>\r\n            <Match when={state.tab === 2}>\r\n              <AsyncChild page=\"Tres\" />\r\n            </Match>\r\n          </Switch>\r\n        </Suspense>\r\n```\r\n\r\nThis is also a terrific example, where `Suspense` does the suspensing, `Switch` and `Match` do the tab switching, and `AsyncChild` is concerned with presentation and asynchronous data fetching.\r\n\r\nThere again if I wanted to discard the suspense implementation detail, I can just remove the `Suspense` component (almost).\r\n\r\n3. Suspense List\r\n\r\n```jsx\r\nconst App = () => {\r\n  const resource = fetchProfileData(0);\r\n  return (\r\n    <Suspense fallback={<h1>Loading...</h1>}>\r\n      <ProfilePage resource={resource} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst ProfilePage = ({ resource }) => (\r\n  <SuspenseList revealOrder=\"forwards\" tail=\"collapsed\">\r\n    <ProfileDetails user={resource.user.value} />\r\n    <Suspense fallback={<h2>Loading posts...</h2>}>\r\n      <ProfileTimeline posts={resource.posts.value || []} />\r\n    </Suspense>\r\n    <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n      <ProfileTrivia trivia={resource.trivia.value || []} />\r\n    </Suspense>\r\n  </SuspenseList>\r\n);\r\n```\r\n\r\nSame comments, the difference is that the fetch is the at the top level `App`. \r\n\r\nSo the questions for me here are two:\r\n- how to remove completely the child component awareness of dealing with async data? i.e. not having resources and `resource.value` stuff in the child component code, but just directly the value. That would mean that child components would be ideally dumb presentational components. I think the `Suspense List` example is the closest to that: `ProfileTimeline` is a dumb component.\r\n- how to do this within svelte mechanism\r\n\r\n","updated_at":"2019-12-12T14:18:21Z","created_at":"2019-12-12T11:06:19Z","creator_user_login":"brucou"}
{"number":3203,"comment_id":"565162000","body":"Ok first on Concurrent Mode. React uses their own scheduler but essentially it's a play on `requestIdleCallback`. I implemented the Sierpinski demo and basically made my own version of this scheduling. The key to it is to use deadline based scheduling. `requestIdleCallback` has 2 really useful things that aren't as well known. First the second optional argument of timeout is key to ensure that at worst the call becomes a `setTimeout`. Second `requestIdleCallback` calls your callback with an object with 2 really useful things `didTimeout` and `timeRemaining`. Using these you can push work on to a queue and while time remains (browser based heuristic estimate of available idle time) you can pull work off the queue and process it in a loop. If you set a reasonably fast timeout and figure out default behavior like say pulling off atleast one item in the queue each time you can basically schedule all work off just repeatedly `requestingIdleCallback`. I mean that is just tip of the iceberg if you can estimate work effort you could probably do even better scheduling.\r\n\r\nThis repo helped me understand the potential of different scheduling mechanisms: https://github.com/justinfagnani/queue-scheduler\r\n\r\nThat being said this is no silver bullet and has tiny bit of overhead on normal operation even when able to use the idle time as now all updates are asynchronous. I implemented this mechanism in a demo by essentially by passing in reactive var and creating a new reactive var that basically acted like a buffer. Then I'd queue up reading the first reactive variable to set the 2nd in a computation if it wasn't already scheduled. It's a cool demo but I think it's really inconsistent thing to generalize. Quite often skipping this is just so much faster it doesn't matter. Without having to deal with Top Down reconciliation in a reactive library the gains aren't often as big. I see some uses for introducing this sort of scheduling but I think it probably needs to be opt in or deliberate unless you want performance across the board to take a bit of a hit. Sort of a self fulfilling prophecy if not done perfectly and I think that is an area that needs way more research.\r\n\r\nBut luckily for a reactive library we can do Suspense without Concurrent Mode since we already have that granularity at our disposal. To your questions. I'm not sure you can always make the child unaware. I set up solid so that the Suspense aware helpers like `loadResource` can work without Suspense since it's just a Context lookup that on failing to find can just skip. But if the child does loading they are aware. In React the children need to be aware even on read since they need to get passed down the resource and then read from it. The reason I don't in Solid is since every binding expression is wrapped in a function and then not ran until the property is accessed they can treat the read like any other prop access. Basically all props are lazy evaluated. This is a runtime trick. And honestly a happy accident, I wasn't aiming for it but once I wrote the example I had that moment that I realized how powerful that is.\r\n\r\nBut can you do similar with Svelte's compiler/reactive system? Probably, but not 100% sure. Even React requires the child component to be aware they are reading from a resource (special object). Svelte does have reactive props that can be passed down so if there is some way to hide it in there I believe it can work the same way.","updated_at":"2019-12-12T19:59:06Z","created_at":"2019-12-12T19:59:06Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"565170831","body":"> I see some uses for introducing this sort of scheduling but I think it probably needs to be opt in or deliberate unless you want performance across the board to take a bit of a hit.\r\n\r\nI asked Kent C Dodds about this:\r\n\r\nhttps://github.com/kentcdodds/ama/issues/766\r\n\r\nHis post made me think some of this scheduling happens automatically, but in my simple experiments, I've had to opt in by wrapping my state changes in `startTransition` or using the `useDeferred` hook. I'm curious if React has heuristics for knowing to automatically schedule some things, but if it does, they weren't triggered by my simple tests.","updated_at":"2019-12-12T20:22:24Z","created_at":"2019-12-12T20:22:24Z","creator_user_login":"sschottler"}
{"number":3203,"comment_id":"565182016","body":"Yeah I wonder too. They've built a queuing system if you look at the source code that they could apply anywhere. They basically polyfill `requestIdleCallback` by using the timestamp on `requestAnimationFrame` and couple other tricks to determine available time. But from there it works the same way. Their scheduler takes a priority argument and then prioritizes appropriately. So I imagine it's a question of whether they decide internally to apply this scheduling to certain types of actions. I forget where now, but I saw discussions where they were talking about how they'd classify priority of certain types of actions generally so they could be implementing that already. And if it's things like state updates are triggered from the network it might not be that noticeable. However `useDeferredValue` feels a lot like this as well.\r\n","updated_at":"2019-12-12T20:53:17Z","created_at":"2019-12-12T20:53:17Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"565682726","body":"React core team member responded regarding whether concurrent mode requires opt-in:\n\nhttps://twitter.com/acdlite/status/1205694631398137857?s=20\n","updated_at":"2019-12-14T04:46:09Z","created_at":"2019-12-14T04:44:35Z","creator_user_login":"sschottler"}
{"number":3203,"comment_id":"611560900","body":"Is it worth turning this into a RFC (https://github.com/sveltejs/rfcs)?","updated_at":"2020-04-09T14:32:47Z","created_at":"2020-04-09T14:32:47Z","creator_user_login":"antony"}
{"number":3203,"comment_id":"797153885","body":"Either I am dramatically misunderstanding the problem, or this conversation has gotten quite sidetracked from the original goal.\r\n\r\nIt looks like we can do a very good approximation of Suspense with existing infrastructure.\r\n* [REPL](https://svelte.dev/repl/68f214326ffd40848272422836caa1f5?version=3.35.0)\r\n* [GitHub](https://github.com/JamCart/suspense/tree/master/suspense)\r\n\r\nThis lets us write code like:\r\n\r\n```html\r\n// parent.svelte\r\n<Suspense>\r\n  <Loading slot=\"loading\" />\r\n\r\n  <Child />\r\n  <Child />\r\n</Suspense>\r\n\r\n// child.svelte\r\n<script>\r\nimport { createSuspense } from 'suspense'\r\nconst suspend = createSuspense()\r\n\r\nconst data = fetch('/something')\r\n</script>\r\n\r\n{#await suspend(data) then item}\r\n { item }\r\n{/await}\r\n```\r\nwithout the consumer passing data around.  The child component, or any of their children components, can dictate when loading is finished.\r\n\r\nThere are two limitations I've found so far that would require Svelte itself to makes changes to overcome:\r\n1. **Wrapping Container**  The above `<Suspense>` component has to wrap its default slot in a `div` in order to control visibility.  @brucou mentioned this as a issue in the opening post but I think it merits more focus than it's gotten lost in the subsequent discussion.\r\n\r\n2. **Intro Animations**  Because we're rendering inside of hidden container, any intro animations will play out before the container is shown.\r\n\r\nBoth of these could be solved by adding a `hidden` attribute to `<slot>`, mimicking the [hidden attribute in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden).  If set to `true`, the slot content could be rendered off screen into a DocumentFragment or equivalent and skip all transitions.  When the attribute changes to `false` (also the default), we could attach the fragment to the appropriate spot in the DOM and kick off those transitions that have been delayed.","updated_at":"2021-03-13T05:35:23Z","created_at":"2021-03-12T00:46:06Z","creator_user_login":"WaltzingPenguin"}
{"number":3203,"comment_id":"797281302","body":"On Thu, Mar 11, 2021 at 10:59 PM Mason DaBanks ***@***.***>\nwrote:\n\n>\n>\n> On Thu, Mar 11, 2021 at 4:46 PM Brian K ***@***.***> wrote:\n>\n>> Either I am dramatically misunderstanding the problem, or this\n>> conversation has gotten quite sidetracked from the original goal.\n>>\n>> It looks like we can do a very good approximation of Suspense with\n>> existing infrastructure.\n>>\n>>    - REPL\n>>    <https://svelte.dev/repl/68f214326ffd40848272422836caa1f5?version=3.35.0>\n>>    - GitHub <https://github.com/JamCart/suspense>\n>>\n>> This lets us write code like:\n>>\n>> // parent.svelte<Suspense>\n>>   <Loading slot=\"loading\" />\n>>\n>>   <Child />\n>>   <Child /></Suspense>\n>>\n>> // child.svelte<script>import { createSuspense } from 'suspense'const suspend = createSuspense()\n>> const data = fetch('/something')</script>\n>>\n>> {#await suspend(data) then item}\n>>  { item }\n>> {/await}\n>>\n>> without the consumer passing data around. The child component, or any of\n>> their children components, can dictate when loading is finished.\n>>\n>> There are two limitations I've found so far that would require Svelte\n>> itself to makes changes to overcome:\n>>\n>>    1.\n>>\n>>    *Wrapping Container* The above <Suspense> component has to wrap its\n>>    default slot in a div in order to control visibility. @brucou\n>>    <https://github.com/brucou> mentioned this as a issue in the opening\n>>    post but I think it merits more focus than it's gotten lost in the\n>>    subsequent discussion.\n>>    2.\n>>\n>>    *Intro Animations* Because we're rendering inside of hidden\n>>    container, any intro animations will play out before the container is shown.\n>>\n>> Both of these could be solved by adding a hidden attribute to <slot>,\n>> mimicking the hidden attribute in HTML\n>> <https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden>.\n>> If set to true, the slot content could be rendered off screen into a\n>> DocumentFragment or equivalent and skip all transitions. When the attribute\n>> changes to false (also the default), we could attach the fragment to the\n>> appropriate spot in the DOM and kick off those transitions that have been\n>> delayed.\n>>\n>> ‚Äî\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/sveltejs/svelte/issues/3203#issuecomment-797153885>,\n>> or unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/ARJ6A4OMMZK3CNSNZAPENVTTDFI6PANCNFSM4H7A363A>\n>> .\n>>\n>\n","updated_at":"2021-03-12T07:13:04Z","created_at":"2021-03-12T07:00:20Z","creator_user_login":"MrBigBanks"}
{"number":3203,"comment_id":"797281905","body":"Error.\n\nOn Thu, Mar 11, 2021, 11:00 PM MrBigBanks ***@***.***> wrote:\n\n> On Thu, Mar 11, 2021 at 10:59 PM Mason DaBanks ***@***.***>\n> wrote:\n>\n> >\n> >\n> > On Thu, Mar 11, 2021 at 4:46 PM Brian K ***@***.***> wrote:\n> >\n> >> Either I am dramatically misunderstanding the problem, or this\n> >> conversation has gotten quite sidetracked from the original goal.\n> >>\n> >> It looks like we can do a very good approximation of Suspense with\n> >> existing infrastructure.\n> >>\n> >> - REPL\n> >> <\n> https://svelte.dev/repl/68f214326ffd40848272422836caa1f5?version=3.35.0>\n> >> - GitHub <https://github.com/JamCart/suspense>\n> >>\n> >> This lets us write code like:\n> >>\n> >> // parent.svelte<Suspense>\n> >> <Loading slot=\"loading\" />\n> >>\n> >> <Child />\n> >> <Child /></Suspense>\n> >>\n> >> // child.svelte<script>import { createSuspense } from 'suspense'const\n> suspend = createSuspense()\n> >> const data = fetch('/something')</script>\n> >>\n> >> {#await suspend(data) then item}\n> >> { item }\n> >> {/await}\n> >>\n> >> without the consumer passing data around. The child component, or any of\n> >> their children components, can dictate when loading is finished.\n> >>\n> >> There are two limitations I've found so far that would require Svelte\n> >> itself to makes changes to overcome:\n> >>\n> >> 1.\n> >>\n> >> *Wrapping Container* The above <Suspense> component has to wrap its\n> >> default slot in a div in order to control visibility. @brucou\n> >> <https://github.com/brucou> mentioned this as a issue in the opening\n> >> post but I think it merits more focus than it's gotten lost in the\n> >> subsequent discussion.\n> >> 2.\n> >>\n> >> *Intro Animations* Because we're rendering inside of hidden\n> >> container, any intro animations will play out before the container is\n> shown.\n> >>\n> >> Both of these could be solved by adding a hidden attribute to <slot>,\n> >> mimicking the hidden attribute in HTML\n> >> <\n> https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden\n> >.\n> >> If set to true, the slot content could be rendered off screen into a\n> >> DocumentFragment or equivalent and skip all transitions. When the\n> attribute\n> >> changes to false (also the default), we could attach the fragment to the\n> >> appropriate spot in the DOM and kick off those transitions that have\n> been\n> >> delayed.\n> >>\n> >> ‚Äî\n> >> You are receiving this because you are subscribed to this thread.\n> >> Reply to this email directly, view it on GitHub\n> >> <https://github.com/sveltejs/svelte/issues/3203#issuecomment-797153885\n> >,\n> >> or unsubscribe\n> >> <\n> https://github.com/notifications/unsubscribe-auth/ARJ6A4OMMZK3CNSNZAPENVTTDFI6PANCNFSM4H7A363A\n> >\n> >> .\n> >>\n> >\n>\n> ‚Äî\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/3203#issuecomment-797281302>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARJ6A4NLP3UVC3UORQ2T74LTDG3ZLANCNFSM4H7A363A>\n> .\n>\n","updated_at":"2021-03-12T07:13:09Z","created_at":"2021-03-12T07:01:43Z","creator_user_login":"MrBigBanks"}
{"number":3203,"comment_id":"797346259","body":"Yeah a lot has changed in understanding (and even the React implementation) since the original post was made. I think things have been better defined now and Svelte should be able to better make a decision where to go here. \r\n\r\nVue/Preact decided to not follow React all the way down the concurrent mode rabbit hole. In fact, what originally was considered a single thing is now arguably a couple different but related features. \r\n\r\n---------------------------------------\r\n\r\n1. Suspense the placeholder. This is what those libraries implemented and more or less is what @ADantes is illustrating. In the case of a reactive library using context makes a ton of sense (as really the only way to connect the dots when we aren't doing full top down re-rendering) and one could just implement that and call it a day. This is all Vue or Preact is doing. One could implement this and get a similar experience.\r\n\r\n------------------------------\r\n\r\n2. Transitions. This is where the conversation went off a bit. Suspense the placeholder is great for initial loads but some of those early demos showed other behaviors without really defining them. Transitions in React are where a change set is isolated and not committed until all promises that are initiated due to that change that are read under a Suspense boundary completely resolve.  Ie.. if someone transitions to the next tab the actual state change of the tab change is held from the outside view until all the data is loaded for the new tab and we can update everything at the same time.\r\n\r\nThe idea here is that in order to maintain async consistency we can't let an in flight change be visible outside the scope of that change. A more concrete example might be picturing a \"Like\" button on a User information carousel, where you click next to load the next user. In the ideal world proposed here, one could click next starting the rendering and loading of the next user off screen, and then the enduser can click like button while this is happening and still have the current in view user record be the one that is liked as the updated user id won't have propagated yet. \r\n\r\nBasically both rendering the next possible state (to perform data loads), while showing the current state that is completely interactive without causing any inconsistencies both in data or in visual tearing. Ie.. the page number doesn't update until everything is completed. This is the benefit of transitions.\r\n\r\nNow React has refined this further stating that even under transitions it is only previously rendered Suspense boundaries that hold, and newly created ones instead fall to the fallback state (ie any async reads under them are not counted towards the transition). In so the enduser has the ability to create the boundaries and nested boundaries of where you want to hold or show placeholders while it frees up things like routers or design systems to just blindly implement transitions into their controls. If those transitions never trigger something async that is read under a Suspense boundary they are basically identity functions that do nothing. However if the application implements Suspense they tap into a much richer system for controlled orchestration of both placeholders and held(stale) states.\r\n\r\nThis seems complicated and it is, but the introduction of stale states save from excessive falling back to loading placeholders. You can picture with tab navigation if you are already looking at a tab and click the next one you don't need to replace the whole view with a placeholder.. a simple indicator of the stale state would be much less jarring. Browsers natively do this on page navigation. Even if a page is slow to load if it were server-rendered (ie the HTML all present when it does load) it skips ever showing the white screen. You see the current page, then some sort of loading indicator and then bam the new page. We are less accustomed to this these days because of all the client-side rendering going on and forced loading states. But the native browser handles this pretty seamlessly.\r\n\r\n-----------------------------------------\r\n\r\n3. Ok so clearly we can implement number 1 and call it a day like Vue or Preact. But the other discussion was interesting to see if it could be modeled in Svelte. It is probably unnecessary. But React had good reason to go this way as this same concurrent rendering in their case attached scheduling is what is going to be powering their HTML streaming and Async server rendering that is in their upcoming Server Components. Now I've talked with a few authors of other libraries and they are positive (as am I) that this is possible without concurrent rendering. Mostly that the scheduling piece can be viewed as a 3rd feature. We talked a bit about it above but that's the part that others have eluded to not really being necessary in a performant system like Svelte. If you aren't scheduling huge amounts of diffing work I mean why add this overhead, it's a solution asking for a problem.\r\n\r\nSo I know reactive frameworks like Svelte (and I've made the same wager with the reactive frameworks I am maintaining) don't need transitions to get this sort of rendering. I already have it working in both of mine without (even though I have implemented transitions in one and intend to in the other). So the 3rd feature I think is unneed here.\r\n\r\n--------------------------------------\r\nAnalysis:\r\n\r\nIf desirable it's probably fine to go ahead with 1 and forget about it. Mind you it is a lot less interesting for a library that already has an `await` control flow. Like just hoist the await, pretty easy way to get the placeholder in the right spot. Like if you not concerned with trying to mimic the transition behavior of stale states, you don't need to worry about preserving anything. Vue and Preact added this Suspense component because they didn't have `await`.\r\n\r\nSuspense is a bit slicker to be sure but most of that comes in actually burying the promise in a resource primitive when it comes to data loading. You can basically treat it like a typical Svelte store and not even write the clearly async `await` blocks in the child code. A subscription to that store under a Suspense boundary is sufficient and child components can trigger Suspense without even being the wiser they are dealing with async data. I mean it's powerful but is it worth adding a new primitive type.. a new sort of Svelte store if you may. It does have to be one since it needs to be able to persist cross component boundaries. This is a lot for only a portion of the story, a portion already mostly taken care of by Svelte.\r\n\r\nThe second feature is mind warping and really what people have been referring to when talking to this in the past. Rich in an issue a while back was talking about how to encode change sets as a way to achieve this. I've been down that road too but ultimately decided that forking the reactive primitives into transactions(while holding updating existing side effects) is probably the best way to achieve this in a reactive system. But let's face it, again this sort of quantum reactivity is a steep price for basically a navigation trick. It's a freaking cool navigation trick but you have to ensure large parts of your system are side-effect-free. This is all the grumbling you hear about the concurrent mode in React.\r\n\r\nThere are other challenges being a compiled language. It's doable with dedicated reactive primitives but for a language it is a bit trickier. You could reserve syntax for it. Like $: with await's in it could basically create the new primitives under the hood but would you really want to introduce the equivalent of the `useTransition` API. I mean you need it if you want this behavior to be opt in and I personally feel it needs to be opt-in as being on by default is nonsensical for end users since you'd in some cases always need to show them data in the past even after they thought they updated it. I will leave it up to the minds here to decide whether that is suitable for Svelte. But I suspect this whole thing brings with it a sort of weight that might be best left on the table. Not to say it isn't beneficial, but does it align with Svelte's goals?","updated_at":"2021-03-12T09:05:30Z","created_at":"2021-03-12T09:05:30Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"798733627","body":"I'm assuming #2 and #3 are referring to [React's page on Concurrent UI Patterns](https://reactjs.org/docs/concurrent-mode-patterns.html)?  I took a stab at implementing the main features from their demo there.  While it isn't production worthy, I did walk away with a very different idea of what Svelte's blocking issues are.\r\n\r\n* [REPL](https://svelte.dev/repl/19f5296ce8274dee9eb4b2f4f3e7d271?version=3.35.0)\r\n\r\nMy biggest take away is that Svelte already has a primitive to show two different versions of a DOM tree at the same time: [`{#key}`](https://svelte.dev/docs#key).  While the out transition is playing, we still have a tree that is reactive, displays animations, and is acting on a copy of the stale data.  That's the hardest part already done and finished.\r\n\r\n**Limitations**\r\n\r\nAs noted above, that demo isn't production worthy and I'm pretty sure Svelte would need new features to make it so.  Here's a few issues it has:\r\n\r\n*  **\"out-in\" transitions**: I really want a proper way to do \"out-and-then-in\" transitions, so that exactly one of the out states or the intro state is displayed at a time.  Something with the same functionality as [Vue's \"out-in\" transition mode](https://vuejs.org/v2/guide/transitions.html#Transition-Modes) would certainly work and be useful for wide number of cases, not just this.  Without that, rapidly clicking between links results in all sorts of rendering glitches in this demo.\r\n\r\n* **Cancellable Delay**: Navigating to \"Fast\" and \"Medium\" takes the same amount of time, even though \"Fast\" is ready much sooner.  This is because I used the animation's delay to keep the page on the screen while the new data loads, but that ends up acting as a minimum time for the page transition to occur. If there was a hook to cancel the delay of a transition already in progress, we could use `getContext` tricks similar to the `<Suspense />` demo above to call it when data loading was finished.\r\n\r\n* **Render Off Screen**: Intro animations don't play correctly.  This is because, like my previous demo above, we're rendering the new page into a hidden element and the animations trigger too soon.  We could render the new page in a DocumentFragment and skip out on animations until that fragment was attached to the DOM.\r\n\r\n  I would not be sad if this was the new default behaviour for *all* \"in\" transitions with a delay.  The element being added immediately to the DOM has always been something I've worked around.\r\n\r\n* **Wrapping Div**: There's still a wrapping div hanging out.  For a final implementation, we'd want to find a way around that being necessary.\r\n\r\nThis entire demo does feel like an abuse of the current transition system.  My point isn't that this should be a final API, merely that the underlying components needed to build a good API are mostly already present.  The new parts required, while not easy, don't look particularly ground breaking and have prior art.","updated_at":"2021-03-13T18:17:55Z","created_at":"2021-03-13T18:17:55Z","creator_user_login":"WaltzingPenguin"}
{"number":3203,"comment_id":"799749889","body":"A weekend of tinkering, and I have something that just more or less just straight up works:\r\n\r\n* [REPL](https://svelte.dev/repl/fbc26767c2e745e6813a70c6ae115b22?version=3.35.0)\r\n\r\n**Warts**\r\n\r\n- **Render Off Screen** and **Wrapping Div**: Like the previous two attempts, there's wrapping `<div>`s we'd prefer to do without and intro/outro transitions play at the incorrect times.\r\n- **Passing Values**: `<Transition bind:value let:store` is gross.  I had to pass down a store because `<slot bind:value>` isn't supported.  It's made even worse that subscriptions to the store can't be made in that block, so every component has to be aware a store is being passed to it.  Doubling up the declaration isn't great either.\r\n- **Ambiguity**: `bind:*` and `on:*` inside the `<Transition>`  block are probably going to have some really weird behaviours since they'd currently be bound to both the current and loading state.  I haven't tested this in any depth yet.\r\n- **Single Value**:  Only one value can be bound in this implementation.  It's pretty easy to extend it to cover other variables by hand, but getting Svelte components to do things based on dynamic variables names isn't an easy task.\r\n\r\n**Edit**: Now that I have this working, I can't find a good use case for the Transition component.  Every example I've found of React's useTransition, which is what it mimics, has effectively been just for routing purposes.  We could implement a router using just Suspense and without half of the weird edge cases this Transition component creates.  I'm still heavily in favor of a `<Suspense>` equivalent though.","updated_at":"2021-03-19T00:13:36Z","created_at":"2021-03-15T21:02:03Z","creator_user_login":"WaltzingPenguin"}
{"number":3203,"comment_id":"869048021","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:42Z","created_at":"2021-06-26T19:04:42Z","creator_user_login":"stale[bot]"}
{"number":3203,"comment_id":"1001513404","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-27T11:10:56Z","created_at":"2021-12-27T11:10:56Z","creator_user_login":"stale[bot]"}
{"number":3203,"comment_id":"1001529680","body":"Nope","updated_at":"2021-12-27T11:49:02Z","created_at":"2021-12-27T11:49:02Z","creator_user_login":"frederikhors"}
{"number":3203,"comment_id":"1001710829","body":"`<Suspense>` and `<SuspenseList>` can be mostly implemented in user land.  npm library here: https://www.npmjs.com/package/@svelte-drama/suspense  There are some limitations that cannot be worked around, to the best of my knowledge, without core changes.  Chiefly, orchestrating with intro/outro transitions and rendering during SSR.\r\n\r\nIncluding something like this in Svelte core would have the advantage of making it much easier to do async SSR in general; one of the current obstacles is determining when a page is \"complete\" and ready to be sent, but the `<Suspense>` components have a known loading and complete state.\r\n\r\n`useTransition` looks like it can also be implemented in userland with similar caveats.  My last stab at it is here: https://svelte.dev/repl/4517e0bcf9d5488a9db74fb38f3df218?version=3.44.3  I'm not convinced `useTransition` is a useful tool for Svelte though.  In every case I've looked at, `useTransition` is properly some form of routing and covered by frameworks like SvelteKit, or can be duplicated through RxJS inspired streams (see https://svelte.dev/repl/8ab0d78cc9c84582a693ef9d520f461f?version=3.44.3).","updated_at":"2021-12-27T19:23:21Z","created_at":"2021-12-27T19:23:21Z","creator_user_login":"WaltzingPenguin"}
{"number":3203,"comment_id":"1001749676","body":"> I'm not convinced useTransition is a useful tool for Svelte though. In every case I've looked at, useTransition is properly some form of routing and covered by frameworks like SvelteKit ....\r\n\r\nI think this is fair. The navigation story is like 90% page/tab navigation. So in those scenarios there are ways for the router to render offscreen. Transitions are are sort of like the academic solution for purity. I implemented them both ways in Solid over time. Originally just using Suspense and tapping into control flow and eventually moving to forked realities and merging. Since I had that I went the full way to doing interruptible concurrent rendering. The time-slicing element is interesting but I haven't had many applications for it yet.\r\n\r\nPeople will point to our performance as a reason not to bother with concurrent rendering and they aren't far off. This whole thing is about asynchronous consistency. So it is all in an effort to prevent glitches and tearing. Without framework intervention it is hard to do since scheduling will slice things the other way and not hold executing side effects. I don't think this would be easy to do with RxJS or any external driver in a generic way. It isn't about scheduling a slice of reactive updates. You really do need to basically clone things. But the problem might be too narrow to warrant a generic solution.\r\n\r\nIt also doesn't help the expense of side effects. It's funny it is always demo'd with like expensive visuals or 3d but it can't help you render faster. At some point you take the hit, and if you want to avoid tearing you take the full brunt of it. This whole mechanism is for expensive pure computations. Think `$: variable` in Svelte. You need to do some pretty heavy stuff for this to be your bottleneck. It turns out making 3D models is one which is why it is in 3D demos. Now you can build everything in the background without interrupting the animation, but if what you were drawing was too expensive in the first place you are out of luck.\r\n\r\nI love how cool it demos, but I think it takes a real specific sort of problem for this because, it isn't the DOM cost which is often the heaviest thing when doing large navigation. DOM creation and attachment doesn't get interrupted. It's if the user code is doing some really expensive stuff and blocking. Is that worthy of systematic solution? I don't know.","updated_at":"2021-12-27T20:59:14Z","created_at":"2021-12-27T20:59:14Z","creator_user_login":"ryansolid"}
{"number":3203,"comment_id":"1418134077","body":"Did anyone from the Svelte team every comment on this issue since 2018? Would be great to get something like this implemented natively.  üòÄ \r\n\r\nJ","updated_at":"2023-02-05T16:41:33Z","created_at":"2023-02-05T16:41:33Z","creator_user_login":"jdgamble555"}
{"number":3203,"comment_id":"1526384268","body":"Is there any plans for including `<Suspense>` in Svelte? This is a great (though still experimental) feature in Vue which would add a lot of value for rendering with async child components.","updated_at":"2023-04-27T20:28:25Z","created_at":"2023-04-27T20:28:04Z","creator_user_login":"distor-sil3nt"}
{"number":3780,"comment_id":"545608954","body":"What would these measure? Which DOM properties are you referring to?","updated_at":"2019-10-23T19:52:53Z","created_at":"2019-10-23T19:52:53Z","creator_user_login":"Conduitry"}
{"number":3780,"comment_id":"545612119","body":"`dom.scrollLeft` and `dom.scrollTop` \r\nSo e.g if I want to programmatically set scrollLeft of a dom element from a reactive property or tweenable store prop.\r\n","updated_at":"2019-10-23T20:01:42Z","created_at":"2019-10-23T20:01:42Z","creator_user_login":"weepy"}
{"number":3780,"comment_id":"552458647","body":"I like this, I've wanted it a couple of times myself. Opened #3895. It uses `scrollLeft` and `scrollTop` as the binding names, rather than making it consistent with `<svelte:window>` but inconsistent with the DOM","updated_at":"2019-11-11T14:05:33Z","created_at":"2019-11-11T14:05:33Z","creator_user_login":"Rich-Harris"}
{"number":3780,"comment_id":"643791333","body":"+1 for wanting `bind:scrollLeft`/`bind:scrollTop`.\r\n\r\n@Rich-Harris I saw that you identified some issues with your initial implementation approach. I could take a crack at fixing it, if you can point me in the right direction.","updated_at":"2020-06-14T16:40:51Z","created_at":"2020-06-14T16:40:51Z","creator_user_login":"scottjmaddox"}
{"number":3780,"comment_id":"700911838","body":"We've been wanting this feature as well, to implement a scroll carousel functionality using CSS scroll snapping on a PWA. But the app needs to know the current scroll position!\r\n\r\nWhat would you folks recommend as an interim solution? Would it be something like `element.addEventListener(\"scroll\", ...)`?","updated_at":"2020-09-29T18:49:54Z","created_at":"2020-09-29T18:49:54Z","creator_user_login":"mizzao"}
{"number":3780,"comment_id":"747678309","body":"Would love an interim solution if anyone worked one out!","updated_at":"2020-12-17T20:18:16Z","created_at":"2020-12-17T20:18:16Z","creator_user_login":"coleholyoake"}
{"number":3780,"comment_id":"791214852","body":"This would've been nice.\r\nI thought it's already implemented since we have it for `<svelte:window>`.","updated_at":"2021-03-05T07:25:40Z","created_at":"2021-03-05T07:24:29Z","creator_user_login":"aradalvand"}
{"number":3780,"comment_id":"830831090","body":"Requires a few lines, but falling back to EventListeners this is the best I could come up with, using `bind`:\r\n\r\n```svelte\r\n<script>\r\n  import { onMount } from 'svelte';\r\n\r\n  let elem;\r\n  let elemScrollTop = 0; // This will be reactive\r\n  \r\n  onMount(() => {\r\n    // Update elemScrollTop every time the user scrolls\r\n    elem.addEventListener('scroll', ({ target }) => (elemScrollTop = target.scrollTop));\r\n  });\r\n</script>\r\n\r\n<div bind:this={elem}></div>\r\n```\r\n\r\nI couldn't figure out a solution leveraging svelte's reactivity to update `scrollTop`/`scrollLeft`. If someone finds a better solution I'd love to know too.","updated_at":"2021-05-02T15:59:14Z","created_at":"2021-05-02T15:58:55Z","creator_user_login":"Emonadeo"}
{"number":3780,"comment_id":"844329252","body":"This would be a massive feature for my project. We have an in-house carousel that we've built, and it's extremely complex because we had to implement part of this ourselves. ","updated_at":"2021-05-19T17:46:34Z","created_at":"2021-05-19T17:46:34Z","creator_user_login":"Xylobol"}
{"number":3780,"comment_id":"962497602","body":"> I couldn't figure out a solution leveraging svelte's reactivity to update `scrollTop`/`scrollLeft`. If someone finds a better solution I'd love to know too.\r\n\r\nWhat about\r\n```svelte\r\n<script>\r\n  let elem;\r\n  let elemScrollTop = 0;\r\n</script>\r\n\r\n<div bind:this={elem} on:scroll={() => (elemScrollTop = elem.scrollTop)}></div>\r\n```\r\nor\r\n```svelte\r\n<script>\r\n  let elemScrollTop = 0;\r\n</script>\r\n\r\n<div on:scroll={(ev) => (elemScrollTop = ev.target.scrollTop)}></div>\r\n```\r\n?","updated_at":"2021-11-06T19:17:52Z","created_at":"2021-11-06T19:17:52Z","creator_user_login":"kwshi"}
{"number":3780,"comment_id":"1024517296","body":"In case you're trying to find out whether an element entered or left the viewport, I found the nice [svelte-inview](https://github.com/maciekgrzybek/svelte-inview) action. However support of `scrollX` / `scrollY` for any element would be greatly appreciated.","updated_at":"2022-01-28T18:59:10Z","created_at":"2022-01-28T18:59:10Z","creator_user_login":"svenjacobs"}
{"number":3780,"comment_id":"1064479336","body":"Here's my little action :\r\n```\r\n\tconst scrollLeft = writable(0)\r\n\r\n\texport function scrollX(node, store) {\r\n\t\r\n\t\tstore.subscribe(val => node.scrollLeft = val)\r\n\r\n\t\tnode.addEventListener('scroll', (e) => {\r\n\t\t\tstore.set(e.target.scrollLeft)\r\n\t\t})\r\n\t}\r\n```\r\n\r\nuse like:\r\n\r\n```\r\n<div use:scrollX={scrollLeft}> ...\r\n```\r\n\r\n","updated_at":"2022-03-10T20:34:34Z","created_at":"2022-03-10T20:34:34Z","creator_user_login":"weepy"}
{"number":3780,"comment_id":"1158667397","body":"guys, any updates on this?","updated_at":"2022-06-17T09:08:20Z","created_at":"2022-06-17T09:08:20Z","creator_user_login":"SoundAsleep192"}
{"number":3780,"comment_id":"1171584914","body":"This would be very useful for triggering an animation when a child element becomes visible!","updated_at":"2022-06-30T19:18:50Z","created_at":"2022-06-30T19:18:50Z","creator_user_login":"acarl005"}
{"number":5112,"comment_id":"656565545","body":"In cases like this I fire a single known event name such as `event` and then use the event's detail to hold the inner event name and properties.\r\n\r\nI'm pretty sure what you're suggesting isn't possible, since the expectation would be that events could be computed at runtime and appended to components, but I'm not 100% sure of that.","updated_at":"2020-07-10T08:52:48Z","created_at":"2020-07-10T08:52:48Z","creator_user_login":"antony"}
{"number":5112,"comment_id":"659196417","body":"Thanks for your answer @antony, and sorry for the late answer here !\r\n\r\nUsing a generic event is another way to do it, indeed. I didn't think about this solution. \r\n\r\nSo it's definitely not a blocking issue, but sure, if there is way to standardize the way dynamic components are used (compared to a static one), it would be a plus.\r\n\r\nThe `on:myevent` set as a prop seems the more natural way to do it, and it was my first try without reading the documentation, before defaulting to a workaround.","updated_at":"2020-07-16T06:50:42Z","created_at":"2020-07-16T06:50:42Z","creator_user_login":"fbasso"}
{"number":5112,"comment_id":"671015509","body":"This would be really useful to allow reusing behavior between multiple components, similar to React Hooks. For example, I'd like to try to port [React Aria](https://react-spectrum.adobe.com/react-aria/useButton.html) to Svelte. These hooks return DOM props that should be spread onto an element to provide some behavior. Part of the functionality that is returned are event handlers. I'd like to avoid needing to manually copy the events over one by one so the hook implementation details are hidden.\r\n\r\n```svelte\r\n<button {...$buttonProps} on:pointerdown={$buttonProps.onPointerDown} on:pointerup={$buttonProps.onPointerUp}>\r\n  Clicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\n\r\nIs there a good way to do this given the compiler won't know at build time what events are needed? Should I make a wrapper that does `addEventListener` myself with a `bind:this`? Would be nice if Svelte could handle dynamic events though.","updated_at":"2020-08-09T06:55:48Z","created_at":"2020-08-09T06:55:48Z","creator_user_login":"devongovett"}
{"number":5112,"comment_id":"671017159","body":"I think you could probably use an action and pass in the buttonProps there,then manually add event listeners for each of the handlers. ","updated_at":"2020-08-09T07:15:51Z","created_at":"2020-08-09T07:15:51Z","creator_user_login":"kevmodrome"}
{"number":5112,"comment_id":"671017469","body":"@devongovett I believe `use:` is something you are looking for","updated_at":"2020-08-09T07:19:19Z","created_at":"2020-08-09T07:19:19Z","creator_user_login":"tanhauhau"}
{"number":5112,"comment_id":"671017746","body":"Ooh nice. Thanks for the super quick responses. Heading to sleep now but will try in the morning! üòä","updated_at":"2020-08-09T07:22:28Z","created_at":"2020-08-09T07:22:28Z","creator_user_login":"devongovett"}
{"number":5112,"comment_id":"671019753","body":"@devongovett Here is a use action example:\r\n  - https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1","updated_at":"2020-08-09T07:44:29Z","created_at":"2020-08-09T07:44:29Z","creator_user_login":"afaur"}
{"number":5112,"comment_id":"671077311","body":"Update: it worked! üéâ  https://github.com/devongovett/svelte-hooks","updated_at":"2020-08-09T17:11:42Z","created_at":"2020-08-09T17:11:42Z","creator_user_login":"devongovett"}
{"number":5112,"comment_id":"698735176","body":"I was so excited to see that there was a decent workaround for this missing feature (using an action like `use:applyEvents={eventProps}`)... but then when I tried to use this action to attach some event handler props on my _component_, I discovered I actually _can't_ :disappointed: :\r\n```\r\nActions can only be applied to DOM elements, not components\r\n```\r\n\r\nDoes anyone know why actions (i.e., Svelte's closest equivalent to react hooks, which is the background where I'm coming from) _can't_ be applied to components? Okay, I mean, I understand that it would have to work a _little_ bit differently because we don't necessarily have a single root element (though #5218 could provide a way to mark which element(s) are considered the root), but I wish the `node` argument of an [action](https://svelte.dev/docs#use_action) could be polymorphic so you could easily apply some reusable pattern/concern/behavior/action to a component too (more thoughts in https://github.com/sveltejs/svelte/issues/5218#issuecomment-698731991...).\r\n\r\nAnd, does anyone have a good generic reusable solution for how to attach a bunch of event handlers (defined in an object in your component) to a child _component_ used inside of your component?\r\n\r\nNeedless to say, I would like to see this feature implemented, so that we could just spread (\"pass through\") an object containing `on:` keys and have them automatically attached as event handlers ‚Äî instead of having passed through as regular (\"inert\") props/attributes ‚Äî which is probably _never_ what you actually want to happen, so it's surprising when that's what actually happens instead.\r\n\r\nSince that current behavior is surprising/useless, could that be an argument in favor of making `on:` keys in a spread object semantically equivalent to explicitly listing out/hard-coding each of those like `<component on:something={handleSomething} on:else={handleElse}>`.\r\n\r\nOf course I know nothing about how hard this would be to implement; I'm speaking only in the context of developer experience as a Svelte user... But the fact that it's [pretty easy](https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1) to implement in a generic/reusable way for _elements_ means I am at least hopeful that it could be easy to make something like this available for components too... :crossed_fingers: ","updated_at":"2020-09-25T05:53:01Z","created_at":"2020-09-25T05:53:01Z","creator_user_login":"TylerRick"}
{"number":5112,"comment_id":"829594149","body":"I also looked into how to create renderless components such as React Aria and Headless UI in Svelte.\r\nSince actions only run in the browser, aria-attributes would not be present on the server-side rendered HTML, making actions a non-starter. I guess you could use a combination of spread props for aria-attributes and actions for event listeners, but that complicates the API quite a bit. Being able to spread event props would make it a lot easier to write renderless components.","updated_at":"2021-04-29T21:02:45Z","created_at":"2021-04-29T21:02:45Z","creator_user_login":"LeanderG"}
{"number":5112,"comment_id":"840239022","body":"Relevent Issue: https://github.com/sveltejs/svelte/issues/5218\r\n\r\n@TylerRick I put together something that works on a component at runtime, but it requires the component to provide access to its' owned elements. The component exposes references to the elements through `bind:this` in a `tagRefs` array (exposed via the `accessors` flag). This allows the `Adjust` component to spread `aria properties`, `on events`, and `component props`.\r\n\r\n@LeanderG This doesn't use actions, but probably won't work with SSR.\r\n\r\n**This does break component encapsulation.** However, there could be a case where someone created a component as part of an npm package, but they may have forgotten to support some `aria property`. \r\n\r\nTypically, you would submit a PR, let it merge, and then either set your `package.json` to the `SHA`, or wait for the next release. This example would allow someone to patch things without altering the original authors npm package. (As long as the author implemented the tagRefs and accessors flag.)\r\n  - https://svelte.dev/repl/eeed750f5aba4712ac9855a39501c444?version=3.38.2\r\n","updated_at":"2021-05-13T02:41:07Z","created_at":"2021-05-13T02:20:48Z","creator_user_login":"afaur"}
{"number":5112,"comment_id":"1000620143","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:01Z","created_at":"2021-12-24T02:48:01Z","creator_user_login":"stale[bot]"}
{"number":5112,"comment_id":"1000821991","body":"No stale.","updated_at":"2021-12-24T12:29:38Z","created_at":"2021-12-24T12:29:38Z","creator_user_login":"frederikhors"}
{"number":5112,"comment_id":"1006806444","body":"I also find this annoying & a source of clunkiness in the framework. The ergonomics of `on:` are lacking in just about every way & it's hard to work with programmatically. I wish these issues got a lot more attention as they're clear areas where Svelte's DX is worse than React's.","updated_at":"2022-01-06T18:11:58Z","created_at":"2022-01-06T18:11:58Z","creator_user_login":"rgossiaux"}
{"number":5112,"comment_id":"1126226616","body":"Is anyone currently working on the issue? It's a shame that a feature that is meant to improve DX actually breaks some powerful design patterns. Couple of cross-framework libraries depend on similar features in Vue and React to append features to components in a composable fashion. ","updated_at":"2022-05-13T16:15:25Z","created_at":"2022-05-13T16:15:25Z","creator_user_login":"bruno-maruszczak"}
{"number":5112,"comment_id":"1133046445","body":"**UPDATE 8/13/22:** Since originally posting this comment, I've come to think there must be some sort of flag set on the element/component tag itself granting such \"special\" props the ability to be dynamically assigned. Otherwise, you leave your app open to an XSS-like attack.\r\n\r\n---\r\n\r\nI'd like to revive this Feature Suggestion, as I don't think the `use:` directive actually solves the issue of not being able to spread event handlers onto elements and components.\r\n\r\nI opened another related issue‚Äîthat I'll close‚Äîthat duplicates this one. Here were the contents:\r\n\r\n## Describe the problem\r\n\r\nOn several occasions, I've found myself taking in the props for components in an array of objects and then building out the component instances by iterating over the array using an `{#each}` block.\r\n\r\nEach object in the array will have unique directives such as event handlers (`on:` directive) and transition (`transition:` directive), and others.\r\n\r\nIt would be great if there were a way to _naturally_ spread directive-props onto components as well.\r\n\r\n## Describe the proposed solution\r\n\r\nI propose adding a new convention when spreading props where Svelte will accept event handlers by their natural HTML name and convert them to their `on:` directive counterparts.\r\n\r\nFor example:\r\n```svelte\r\n<script>\r\n  import MyComponent from './MyComponent.svelte';\r\n  let data = [\r\n    {\r\n      id: 184638,\r\n      postCount: 17,\r\n      $$on_click: () => console.log('Hello world'),\r\n      $$transition_fade: true,\r\n    },\r\n    {\r\n      id: 473892,\r\n      postCount: 4,\r\n      $$on_click: doSomething,\r\n      $$transition_fade: {\r\n        y: 200,\r\n        duration: 2000,\r\n      },\r\n    },\r\n  ];\r\n</script>\r\n\r\n{#each data as child}\r\n  <MyComponent\r\n    {...child}\r\n  />\r\n{/each}\r\n```\r\n\r\nThis would automatically spread the `onclick` handlers onto the components'/elements' `on:click` directive. This is my proposal, but I'd be interested in any naming or syntax that would make spreading event handlers in this way possible. It could be something more inline with the other magic Svelte `$$` naming conventions, like the examples mentioned above, or just use strings (less preferable to me, like this):\r\n\r\n```svelte\r\n{\r\n  id: 184638,\r\n  postCount: 17,\r\n  'on:click': () => console.log('Hello world'),\r\n}\r\n```\r\n\r\nRegarding the naming, I also considered wrapping the Svelte convention in quotes as you did to keep it exactly the same. If this passes, I keep going back and forth on what would make more sense between these two‚Äî\r\n1. `'[[directive]]:[[value]]'` (e.g. `'on:click'`, `'transition:fade'`)\r\n  This option has the benefit of being pragmatic and sticking to the typical svelte naming conventions, just wrapped as a string because it contains the special character.\r\n\r\n2. `$$[[directive]]_[[value]]` (e.g. `$$on_click`, `$$transition_fade`)\r\n  This option has the benefit of being a reserved Svelte convention and it less likely to get mixed up with the standard HTML `onclick` attribute.\r\n\r\n## Alternatives considered\r\n\r\nCurrently, to work around this, I am spreading the other non-event-handler props into a separate variable using a `{@const}` block in an intermediary wrapper component, like this:\r\n\r\n```svelte\r\n<script>\r\n  import MyComponent from './MyComponent.svelte';\r\n  let data = [\r\n    {\r\n      id: 184638,\r\n      postCount: 17,\r\n      $$on_click: () => console.log('Hello world'),\r\n    },\r\n    {\r\n      id: 473892,\r\n      postCount: 4,\r\n      $$on_click: doSomething,\r\n    },\r\n  ];\r\n</script>\r\n\r\n{#each data as child}\r\n  {@const { $$on_click, ...props } = child}\r\n  <MyComponent\r\n    {...props}\r\n    on:click={$$on_click}\r\n  />\r\n{/each}\r\n```\r\n\r\nWhile I do value the explicit nature of this method, it does often require creating an intermediary wrapper component as the component(s) I'm feeding into often forward the `on:click` directive and do not expect an `onclick` prop.","updated_at":"2022-08-13T21:18:47Z","created_at":"2022-05-20T15:37:13Z","creator_user_login":"brandonmcconnell"}
{"number":5112,"comment_id":"1171663228","body":"There are a number of open issues asking for this. Can a mod plz close these down so we can keep the focus in a single thread?\r\n\r\nhttps://github.com/sveltejs/svelte/issues/7625\r\nhttps://github.com/sveltejs/svelte/issues/5265\r\n\r\nAlso some work has been done to make this happen. \r\nhttps://github.com/sveltejs/svelte/pull/6876\r\n\r\nIt need some work to make it pass tests but it should do what it being asked in this thread.","updated_at":"2022-06-30T20:49:59Z","created_at":"2022-06-30T20:49:59Z","creator_user_login":"flipkickmedia"}
{"number":5112,"comment_id":"1201950372","body":"This seems to also stop UI frameworks such as Chakra and Flowbite to port their stuff to Svelte.\r\n\r\nIs there any info to this wrt what needs to be done to move this feature forward?","updated_at":"2022-08-02T02:41:43Z","created_at":"2022-08-02T02:41:43Z","creator_user_login":"ptrxyz"}
{"number":5112,"comment_id":"1213035375","body":"Id suggest for the above example there is little point in using spread props for events.\r\n\r\nThe idea behind spreading the events is so you can pass the event handler into the component dynamically. If you need to specify the event name, then passing in a dynamic function can already be achieved without additional syntax, simply by handling the implementation inside the function which handles the click handler.\r\n\r\nIm not a fan of dumping logic into templates.\r\n\r\n```\r\nfunction clickHandlder() {\r\n  if some condition\r\n    run this\r\n else\r\n   etc\r\n}\r\n```\r\n\r\n\r\n","updated_at":"2022-08-12T11:57:50Z","created_at":"2022-08-12T11:57:50Z","creator_user_login":"flipkickmedia"}
{"number":3937,"comment_id":"554668063","body":"Might it be nice to add `|number` and `|string` to `type='number'` as well?","updated_at":"2019-11-16T19:43:48Z","created_at":"2019-11-16T19:43:48Z","creator_user_login":"Conduitry"}
{"number":3937,"comment_id":"554794664","body":"Would be good for `<select>` which doesn't have a `type` attribute.","updated_at":"2019-11-17T22:27:38Z","created_at":"2019-11-17T22:27:38Z","creator_user_login":"Deskbot"}
{"number":3937,"comment_id":"559241567","body":"I still would prefer `bind : valueAsDate/valueAsNumber`\r\n\r\nwith the reasoning being: \"Don't make me learn how to use another framework\" \r\nuse what the browser provides so that i can apply same knowledge in tomorrows new frameworks\r\n\r\nIt would just be easier to use the built tools then to write redundant wrappers around something that already exist and can do it for you","updated_at":"2021-02-20T21:43:29Z","created_at":"2019-11-27T20:31:56Z","creator_user_login":"jimmywarting"}
{"number":3937,"comment_id":"693358464","body":"I also like `bind:value|date` syntax, as I think it's a lot cleaner than the messy API exposed by browsers.","updated_at":"2020-09-16T11:59:46Z","created_at":"2020-09-16T11:59:46Z","creator_user_login":"antony"}
{"number":3937,"comment_id":"695118407","body":"Is there a workaround for now?","updated_at":"2020-09-18T22:49:53Z","created_at":"2020-09-18T22:49:53Z","creator_user_login":"cupcakearmy"}
{"number":3937,"comment_id":"695120257","body":"@cupcakearmy \r\n\r\n```\r\n<input type=\"date\" bind:value={date}>\r\n\r\n$: dateAsDate= date && new Date(...date.split('-'))\r\n```\r\n\r\n[Rendered](https://svelte.dev/repl/94db484ef4754147bbdfbe76a78cfa90?version=3.25.1)","updated_at":"2020-09-18T22:58:38Z","created_at":"2020-09-18T22:58:14Z","creator_user_login":"antony"}
{"number":3937,"comment_id":"695124194","body":"@antony Thanks for the answer, but I needed 2 way binding.\r\nGot it working though :)\r\nhttps://svelte.dev/repl/dc963bbead384b69aad17824149d6d27?version=3.25.1","updated_at":"2020-09-18T23:15:26Z","created_at":"2020-09-18T23:15:26Z","creator_user_login":"cupcakearmy"}
{"number":3937,"comment_id":"782749284","body":"Just an idea: Maybe this concept could work in a more general way: I'd imagine having a way to change the internal representation of an input would be very nice. This isn't very well thought out yet, but what about something like\r\n\r\n```\r\n<script>\r\n\t\r\n\tlet date = new Date();\r\n\t\r\n\tconst dateModifier = {\r\n            parse: (dateString) => new Date(Date.parse(dateString))\r\n        };\r\n\t\r\n</script>\r\n\r\n<input type=\"date\" bind:value|dateModifier={ date }>\r\n```\r\n\r\nThe nice thing about this would be that you could also use this with other kinds of inputs well. For example, you could automatically have [a localized input like this](https://svelte.dev/repl/ea1abf5847774e3eb4ef747a2e13bbf5?version=3) with less code, for example:\r\n\r\n```\r\n<script>\r\n\t\r\n\tlet number = 1234567;\r\n\t\r\n\tconst numberModifier = {\r\n            parse: (s) => parseInt(s.replace(/\\,/g, \"\")), \r\n            stringify: (n) => n.toLocaleString(\"en-US\")\r\n        };\r\n\t\r\n</script>\r\n\r\n<input type=\"text\" bind:value|numberModifier={ number }>\r\n```\r\n...and you would not need the temporary internal variable any more.\r\n\r\nI personally find my own code suggestion a bit ugly here, but would love the general idea of being able to have a variable contain something different than the exact input value given by HTML.","updated_at":"2021-02-20T22:29:12Z","created_at":"2021-02-20T21:04:57Z","creator_user_login":"pal03377"}
{"number":3937,"comment_id":"869055129","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:04:46Z","created_at":"2021-06-26T20:04:46Z","creator_user_login":"stale[bot]"}
{"number":3937,"comment_id":"869096238","body":"Is there any update on this issue? I have run into this problem with `<input type=\"date\"/>` multiple times in various apps I have written. What is the recommended workaround if this isn't going to be addressed anytime soon?","updated_at":"2021-06-27T03:57:36Z","created_at":"2021-06-27T03:57:36Z","creator_user_login":"CindyKee"}
{"number":3937,"comment_id":"1000651570","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T04:47:58Z","created_at":"2021-12-24T04:47:58Z","creator_user_login":"stale[bot]"}
{"number":3937,"comment_id":"1000710369","body":"Thought about the same recently, too, but in a more extendable way: what if the modifier is an object you can provide which has two methods transforming the value on the way in/out?","updated_at":"2021-12-24T08:01:04Z","created_at":"2021-12-24T08:01:04Z","creator_user_login":"dummdidumm"}
{"number":3937,"comment_id":"1028519742","body":"Similar to what dummdidumm proposed, I liked the [value converter](https://aurelia.io/docs/binding/value-converters#value-converters) approach Aurelia used for this problem.\r\n\r\n[E.g.:](https://aurelia.io/docs/binding/value-converters#bi-directional-value-converters)\r\n```\r\nexport class RgbToHexValueConverter {\r\n  toView(rgb) {\r\n    return \"#\" + (\r\n      (1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b\r\n    ).toString(16).slice(1);\r\n  }\r\n  \r\n  fromView(hex) {\r\n    let exp = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\r\n        result = exp.exec(hex);\r\n    return {\r\n      r: parseInt(result[1], 16),\r\n      g: parseInt(result[2], 16),\r\n      b: parseInt(result[3], 16)\r\n    };\r\n  }\r\n}\r\n  \r\nexport class Color {\r\n  rgb = { r: 146, g: 39, b: 143 };\r\n}\r\n\r\n<template>\r\n  <require from=\"./rgb-to-hex\"></require>\r\n  \r\n  <label for=\"color\">Select Color:</label>\r\n  <input id=\"color\" type=\"color\" value.bind=\"rgb | rgbToHex\">\r\n  <br> r: ${rgb.r}, g:${rgb.g}, b:${rgb.b}\r\n</template>\r\n```","updated_at":"2022-02-03T01:32:09Z","created_at":"2022-02-03T01:32:09Z","creator_user_login":"harvey-k"}
{"number":3937,"comment_id":"1057904438","body":"I think this is _way_ to specific and might be missing the big picture, as I've outlined here https://github.com/sveltejs/svelte/issues/7265#issuecomment-1046633268 . The two comments above mine don't go far enough to solve a greater problem.\r\n\r\nWhat I imagine is some sort of Proxy but for reactivity. Stores give us that level of control (hooking into declarative assignments with imperative code), regular reactivity does not.\r\n\r\nIn the most verbose way this would look like this:\r\n\r\n```html\r\n<script>\r\n  import proxy from 'svelte/proxy';\r\n  import { format } from 'date-fns';\r\n\r\n  let value = new Date();\r\n\r\n  $: console.log(value);\r\n\r\n  // The proxy specification.\r\n  const dateTimeAsString = {\r\n    get(d) {\r\n      return format(d, \"yyyy-MM-dd'T'HH:mm\");\r\n    },\r\n    set(s) {\r\n      return new Date(s);\r\n    },\r\n  };\r\n\r\n  // This reactively marries `value` and `proxiedValue`.\r\n  // Everytime `proxiedValue` is written, it is syncted with `value` through `set`.\r\n  // Everytime `value` is written, it is syncted with `proxiedValue` through `get`.\r\n  // Both `value` and `proxiedValue` can be used just like any variable.\r\n  // This gives us the $store declarative magic for any variable.\r\n  let proxiedValue = proxy(value, dateTimeAsString);\r\n</script>\r\n\r\n<input type=\"datetime-local\" bind:value=\"{proxiedValue}\" />\r\n```\r\n\r\nHowever, the pipe shorthand allows using a proxy implicitly:\r\n\r\n```html\r\n<script>\r\n  import { format } from 'date-fns';\r\n\r\n  let value = new Date();\r\n\r\n  $: console.log(value);\r\n\r\n  const dateTimeAsString = {\r\n    get(d) {\r\n      return format(d, \"yyyy-MM-dd'T'HH:mm\");\r\n    },\r\n    set(s) {\r\n      return new Date(s);\r\n    },\r\n  };\r\n</script>\r\n\r\n<input type=\"datetime-local\" bind:value|dateTimeAsString />\r\n```\r\n\r\nAnd of course Svelte comes with a set of build-in proxies:\r\n\r\n```html\r\n<script>\r\n  import { dateTimeAsString } from 'svelte/proxy';\r\n\r\n  let value = new Date();\r\n\r\n  $: console.log(value);\r\n</script>\r\n\r\n<input type=\"datetime-local\" bind:value|dateTimeAsString />\r\n```\r\n\r\n---\r\n\r\nEdit: a few words on what I mean by \"big picture\": This is not limited to `bind` at all. You can use it to hook into any reactive variable. In contrast to actual `Proxy` this is not limited to objects, because Svelte is a compiler. It _just works_ with every type of variable. If you use an identitiy-proxy (`{get(v){return v;}, set(v){return v;}}`) you essentially get an event/hook you can use to imperatively react to the change of a variable or binding. In the same way you can override `store.set` simply to do something with the value, e.g. writing it to `localStorage`.\r\n\r\nI also want to point out that my example above makes it look like `proxy` is a function you can use. But no, it's meant to be a compiler instruction so maybe an import is not the right way for that.\r\n\r\nI'm sure there is a solution to https://github.com/sveltejs/svelte/issues/4933 and related problems in there as well.","updated_at":"2022-03-04T09:36:53Z","created_at":"2022-03-03T10:33:10Z","creator_user_login":"Prinzhorn"}
{"number":3937,"comment_id":"1124985901","body":"I was playing around with store transforms to achieve a similar result (you can see here: https://svelte.dev/repl/8d60f27d3183493d8ee2264f535167f4?version=3.48.0).\r\nI think this is modeling what a lot of people are asking for, but it does require the use of stores.\r\nIt would be nice to hear what people think.\r\n\r\nSomething I noticed comes up which may not be immediately obvious, is that not all transformations are symmetrical. That is, not every mapping of A to B has a mapping from B to A. Sometimes a mapping may be ambiguous and sometimes there may just be no mapping.\r\n\r\nIf the suggestion is to have a fixed list of \"out of the box\" conversions than this issue may be avoidable, but if the list of conversions is to be extensible it would be worth discussing.\r\n\r\nFor the library I wrote, I chose to have the read and write transforms offer two forms:\r\n`(value: INPUT) => OUTPUT` and `(value: INPUT, set: ((value: OUTPUT) => void)) =>void`.\r\nThis supports the situation where a specific value may not have a valid conversion. The interface should also be familiar to anyone who is used to the `derived` interface.\r\n\r\nI'm very interested to hear these conversations so I can inform the design choices in my libraries: [npmjs @crikey/*](https://www.npmjs.com/search?q=%40crikey%2F)\r\n\r\n","updated_at":"2022-05-12T13:19:39Z","created_at":"2022-05-12T13:19:39Z","creator_user_login":"WHenderson"}
{"number":3937,"comment_id":"1140320643","body":"> @antony Thanks for the answer, but I needed 2 way binding. Got it working though :) https://svelte.dev/repl/dc963bbead384b69aad17824149d6d27?version=3.25.1\r\n\r\nThanks for this example! I was exploring which is the most idiomatic way of currently solving this pattern in Svelte (a two way bind using In and Out transformations, [I asked about it in stackoverflow](https://stackoverflow.com/questions/72407572/idiomatic-way-in-svelte-to-do-two-way-binding-with-an-intermediate-transformatio)) and I had completely missed the simplicity of your approach. ","updated_at":"2022-05-28T19:46:21Z","created_at":"2022-05-28T19:45:52Z","creator_user_login":"jsilveira"}
{"number":3937,"comment_id":"1594625939","body":"Maybe this is a feature for Svelte 4? Because this missing feature would mean to us, that we need to use handler functions to set a value, not a bind value.\r\n\r\nI'm saying it because this ticket is already older and could be forgotten in the backlog","updated_at":"2023-06-16T12:51:25Z","created_at":"2023-06-16T12:49:45Z","creator_user_login":"uvulpos"}
{"number":5268,"comment_id":"673558457","body":"It seems like the bug is not only triggered if the transition is on the parent; it's enough if the parent is waiting for some child to finish its exit transition.\r\nSee another REPL here: https://svelte.dev/repl/9ac8610241a643ec81432f72f3427baa?version=3.24.1\r\nAgain, if you remove the transition from the div it works.","updated_at":"2020-08-13T15:51:45Z","created_at":"2020-08-13T15:51:45Z","creator_user_login":"Tharit"}
{"number":5268,"comment_id":"674508941","body":"+1","updated_at":"2020-08-16T10:26:18Z","created_at":"2020-08-16T10:26:18Z","creator_user_login":"vsych"}
{"number":5268,"comment_id":"675195368","body":"I hvn't wrap my head around a fix on this, but from what I observe is that, if the parent starts to be unmount first, then the Inner onDestroy did not get called.\r\n\r\na workaround would be moving the `on:close` after `on:close={() => mode='B'}`\r\n\r\n```svelte\r\n<Inner on:close={() => mode='B'} on:close ></Inner>\r\n```\r\n\r\nhttps://svelte.dev/repl/808a7d0e9f704941abf1ba084b846d74?version=3.24.1","updated_at":"2020-08-18T01:20:47Z","created_at":"2020-08-18T01:20:47Z","creator_user_login":"tanhauhau"}
{"number":5268,"comment_id":"680729976","body":"think i've been fighting with this same bug for a few days now.  I'm including a screenshot that shows the hide variable being logged as true, then the action running (timer should've been destroyed on true), then the hide variable being set back to undefined, yet the carousel doesn't re-render. The last part doesn't happen consistently, but it happens enough to be troublesome.\r\n\r\n![Screenshot_2020-08-26 Svelte REPL](https://user-images.githubusercontent.com/52777069/91278369-c1e72000-e749-11ea-9164-115e2b8fa96c.png)\r\n\r\nhttps://svelte.dev/repl/ab82d572c40d482c92cc211affbc290d?version=3.24.1","updated_at":"2020-08-26T08:13:13Z","created_at":"2020-08-26T08:11:44Z","creator_user_login":"M1sf3t"}
{"number":5268,"comment_id":"681416516","body":"updated that repl so that the carousel actually worked after the first slide. when i moved the \"slide\" declaration outside of the set interval, the destroy method for the action broke it ü§¶‚Äç‚ôÇÔ∏è.  \r\n\r\nThe general problem is still not solved tho, neither the onDestroy method nor the actions destroy method seem to have any affect on the delay timer when the component is hidden with if.  To see the latter in the repl, remove comments, slide declr. & onDestroy method and  declare slide inside of interval.\r\n\r\nI think I've managed a workaround using svelte component instead of the if statement, so far it seems to be working, tho at the moment there's occasionally a jump when it renders.  you can see the workaround here --> https://svelte.dev/repl/40741fc76d52405688e8705ec26c254c?version=3.24.1","updated_at":"2020-08-27T04:46:29Z","created_at":"2020-08-27T04:39:19Z","creator_user_login":"M1sf3t"}
{"number":5268,"comment_id":"681693268","body":"duplicate of #4696 and #4064, kinda explained but not fixed in #4699\r\n\r\nThe internal function `transition_out` is used in two ways, one is to start outro, the other is to start outro _and_ schedule a destroy after the transition group has outroed\r\nhttps://github.com/sveltejs/svelte/blob/8adb47401e7f7b420ffabf9752a8236114aaecfc/src/runtime/internal/transitions.ts#L56-L62\r\n\r\nCalling `transition_out` on a block adds it to a Set, so further `transition_out` calls on the same block are ignored https://github.com/sveltejs/svelte/blob/8adb47401e7f7b420ffabf9752a8236114aaecfc/src/runtime/internal/transitions.ts#L51-L53\r\n\r\nFrom there you can deduce that any `transition_out` used in the first way makes it so that any destroy scheduled through the second way gets ignored, that is what happens in all of the above when an `if_block` is outroed by its parent's `.o()` then outro & destroy scheduled by its parent's `.p()`\r\n\r\n","updated_at":"2020-08-27T07:31:55Z","created_at":"2020-08-27T07:31:55Z","creator_user_login":"pushkine"}
{"number":5268,"comment_id":"682322996","body":"that makes sense but why does it work differently with keyed each and svelte:component?  in the last repl I posted, the transition continues to fade out but toggling the svelte component to rerender the carousel at the right moment doesn't break the carousel like it did with the if in the first repl.  At least I haven't been able to break it so far anyway.  \r\n\r\nSame with each, when i first started on the carousel I felt like keyed each would be too much for just one image so I went with if and found that when not timed correctly (using interval/onMount rather than use/timeout at that point, needed to be somewhat around one second after the out ended) the same image would just reappear over and over again.  \r\n\r\nThe latter may not be the exact situation, but it felt like it was a similar issue.  Easy enough to fix when it was just that, but as I got to playing with different ways to load the images and swap them out with my spinner, it created more and more problems so I finally just swapped the if out with the keyed each and moved on.","updated_at":"2020-08-28T04:56:31Z","created_at":"2020-08-28T04:49:24Z","creator_user_login":"M1sf3t"}
{"number":5268,"comment_id":"835863002","body":"Not sure if it's the same thing, but `onDestroy` isn't firing for me when I use custom `in`/`out` transitions. This may be by design, and if that's the case, it may be helpful if the example is updated to call that out.\r\n\r\nprops:\r\n```js\r\nin:toggleDialog=\"{{ dir: 'in', start: 70 }}\"\r\nout:toggleDialog=\"{{ start: 50 }}\"\r\n```\r\n\r\nWhat I ended up doing within `toggleDialog`\r\n```js\r\nif (dir !== 'in' && t === 0 && onClose) onClose();\r\n```\r\n\r\n---\r\n\r\n**Edit**: I discovered that while working with some stores, that the above didn't actually work. I didn't fully understand what was actually occurring when a custom transition function was called (it builds out a static CSS animation); I was thinking it was calling that method during the animation steps, lesson learned.\r\n\r\nHere's the current solution I'm using:\r\n\r\nprops\r\n```js\r\nin:toggleDialog=\"{{ dir: 'in', start: 70 }}\"\r\nout:toggleDialog=\"{{ start: 50 }}\"\r\non:outroend={handleCloseEnd}\r\n```\r\n\r\nhandler\r\n```js\r\nfunction handleCloseEnd() {\r\n  dialogOpen.set(false); // global store to ensure multiple dialogs aren't open\r\n}\r\n```","updated_at":"2021-05-16T17:51:22Z","created_at":"2021-05-09T18:52:43Z","creator_user_login":"the0neWhoKnocks"}
{"number":5268,"comment_id":"846231341","body":"<details><summary>old comment</summary>\r\nI currently have a project with lots of transitions and noticed this bug randomly occurs when navigating between pages.  There will randomly be invisible dom nodes stacking up on pages, pushing the current page content way down.  It more or less renders the website unusable.\r\n\r\nWhat is the recommended fix currently?  I noticed @tanhauhau and @the0neWhoKnocks's fixes might help.  Considering the amount of elements, it will be non-trivial to wrap every single component in it's own `{#if}` block and trigger it `on:outroend` (if I understand the fix correctly).  But if that's the best way, so be it.  Project deadline is coming up üòÖ\r\n\r\nI think this issue should get the `bug` label, because it's pretty devastating to large projects with transitions.\r\n\r\nPS:  I found myself in the situation when we had to introduce an extra store to handle state on page transitions- which I assume is what caused all elements with transitions in the project to start showing this bug.\r\n</details>\r\nEdit: It appears my issue was actually caused by the uncaught error mentioned in #6037.\r\n\r\nIt's a bit early to know for sure, but changing line 203 in `svelte/internal/index.js` as mentioned in that issue seems to have fixed things.\r\n```js\r\n- node.parentNode.removeChild(node);\r\n+ if (node.parentNode) node.parentNode.removeChild(node);\r\n```","updated_at":"2021-05-21T20:42:30Z","created_at":"2021-05-21T20:20:35Z","creator_user_login":"FractalHQ"}
{"number":5268,"comment_id":"972001992","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-11-17T20:52:00Z","created_at":"2021-11-17T20:52:00Z","creator_user_login":"stale[bot]"}
{"number":5268,"comment_id":"972049881","body":"This is still a big problem and should not be closed, imo.","updated_at":"2021-11-17T21:21:30Z","created_at":"2021-11-17T21:21:30Z","creator_user_login":"simonwiles"}
{"number":5268,"comment_id":"1039148672","body":"Please prioritize. This is a major pain in the ass.","updated_at":"2022-02-14T14:26:10Z","created_at":"2022-02-14T14:26:10Z","creator_user_login":"itay-grudev"}
{"number":5268,"comment_id":"1229228084","body":"Please fix this, it is incredibly frustrating to deal with","updated_at":"2022-08-27T17:03:03Z","created_at":"2022-08-27T17:03:03Z","creator_user_login":"JoaoCardoso193"}
{"number":5268,"comment_id":"1235067996","body":"Encountering this now myself...\r\n\r\nI have pages nested within a transitioning block, and they completely fail to trigger `onDestroy`... furthermore (or as a result), any `beforeNavigate` calls fail to get unsubscribed/removed, resulting in an ever-growing series of calls as these components continue to be loaded and never disposed of.\r\n\r\nNot quite sure how to tackle this issue...","updated_at":"2022-09-02T05:00:46Z","created_at":"2022-09-02T05:00:46Z","creator_user_login":"kwhitley"}
{"number":5268,"comment_id":"1287683018","body":"Any update about this? It's one of the most critical bug, and I couldn't find any solution to bypass it.","updated_at":"2022-10-22T08:39:58Z","created_at":"2022-10-22T08:39:58Z","creator_user_login":"seo-rii"}
{"number":5268,"comment_id":"1327767566","body":"This just cost me the whole day. \r\n\r\nI tried to create an example that that is as simple as possible, where you can see the problem, that a component does not get removed from the DOM even if the #if block should clear it:\r\n\r\nhttps://svelte.dev/repl/01e58ca1ea4241e6acadb3011f126008?version=3.53.1\r\n\r\nI can only hope that this 2 year old problem can be addressed. Or am I using Svelte here in a very strange way?\r\n\r\nThe solution for a simple setup could be something like this:\r\nhttps://svelte.dev/repl/6fcf04846d3b4596a5799580e8c467eb?version=3.53.1\r\n\r\nBUT the problem could be nested, that is, some nested component down the chain could have a transition and then it is hard to catch the problem.\r\n\r\n","updated_at":"2022-11-25T18:18:48Z","created_at":"2022-11-25T18:18:48Z","creator_user_login":"kuechlerm"}
{"number":5268,"comment_id":"1327775130","body":"This just cost me some hours.\r\nAm I using svelte wrong? This seems to be a very concerning problem.\r\n\r\nI tried to add another example that is hopefully even simpler:\r\nhttps://svelte.dev/repl/6fcf04846d3b4596a5799580e8c467eb?version=3.53.1\r\n\r\nFor very simple setups this might be a workaround:\r\nhttps://svelte.dev/repl/75bf4eaddc7e4b3ea0a24f184e8290b3?version=3.53.1\r\n\r\n","updated_at":"2022-11-25T18:31:43Z","created_at":"2022-11-25T18:31:43Z","creator_user_login":"kuechlerm"}
{"number":5268,"comment_id":"1336518220","body":"Solution, indicated @ https://svelte.dev/repl/6fcf04846d3b4596a5799580e8c467eb?version=3.53.1 is good for simple projects.\r\n\r\nImpossible _(read: Hard-to-manage)_ to use in a more complex projects where the **one** component, dynamically loaded into **another** dynamically loaded component. Svelte should definitely be able to sort out transition things on its level without any additional code due to support of such dynami—Å components loading.\r\n\r\nNow using an npm patch over Svelte simply to try-catch errors, not solved the problem.","updated_at":"2022-12-04T21:15:10Z","created_at":"2022-12-04T21:11:02Z","creator_user_login":"d-velopment"}
{"number":5268,"comment_id":"1416923893","body":"I'm having the same problem, and so many components fail to clean up after them because onDestroy is not being called, and causes the webapp to become slower as the end user navigates and uses the app. \n\nThis is extremely annoying. üòî\n\nHas anyone not yet figure out the issue that causes this to happen?","updated_at":"2023-02-05T05:03:19Z","created_at":"2023-02-05T05:03:19Z","creator_user_login":"ofeenee"}
{"number":5268,"comment_id":"1516999353","body":"Not sure if we were experiencing the same issue but we had nested child components in an if statement that weren't being destroyed but only in the case when a drop down menu with the fade transition was present on the DOM. By adding the |local attribute to the fade transition our problem went away. \r\n\r\n`transition:fade|local={{ duration: 140 }}`\r\n\r\nNote the transition was not on the nested child component but only the drop down menu that covered the nested child when open. Hope this applies to some of you!","updated_at":"2023-04-20T22:05:03Z","created_at":"2023-04-20T22:05:03Z","creator_user_login":"gmbeal"}
{"number":5268,"comment_id":"1567191245","body":"same issue I am also facing I remove the transition and add a custom transition it worked.","updated_at":"2023-05-29T14:11:10Z","created_at":"2023-05-29T14:11:10Z","creator_user_login":"Vibeesarma"}
{"number":5268,"comment_id":"1676251018","body":"Same issue what I've faced and solved.\r\n\r\n* svelte 3.59.2\r\n* not sveltekit\r\n\r\n# Situation\r\n\r\nI have two components, BottomSheet, and nested child component(dymamically nested into the BottomSheet)\r\n\r\n> bottom sheet: https://m3.material.io/components/bottom-sheets/overview\r\n\r\n```javascript\r\n// BottomSheet.svelte\r\n<section\r\n  style=\"--z-index: {zIndex}\"\r\n  transition:fly={bottom: { x: 0, y: 40, duration: 140 }}\r\n>\r\n <div class=\"inner\" bind:this={innerEl}>\r\n     <!-- slot for child component -->\r\n      <slot/>\r\n  </div>\r\n</section>\r\n```\r\n\r\n`BotomSheet` is registered globally at the root component\r\n\r\n```javascript\r\n// MainApp.svelte\r\n\r\n<main>\r\n  {#if $sheetStore.activeSheet}\r\n    <BottomSheet zIndex={$sheetStore.activeSheet.zIndex}>\r\n      <!-- any child component is dynamically bound -->\r\n      <svelte:component\r\n        this={$sheetStore.activeSheet?.component}\r\n        {...$sheetStore.activeSheet?.props}\r\n      />\r\n    </BottomSheet>\r\n  {/if}\r\n</main>\r\n```\r\nI found a child component instance of `WeatherWidget.svelte` was not destroyed when BottomSheet was destroyed, which was because of `transition` in `BottomSheet.svelte`(without transition in BottomSheet, WeatherWidget.onDestroy was called).\r\n\r\n# Workaround\r\n\r\ntwo fixes.\r\n\r\n1. removing`<slot/>` and injecting child component inside `BottomSheet.svelte`\r\n2. makes traition local(It is not necessarily required. Try it if the problem continues)\r\n\r\n```javascript\r\n// MainApp.svelte\r\n<main>\r\n  {#if $sheetStore.activeSheet}\r\n    <!-- don's inject child here-->\r\n    <BottomSheet sheetSpec={$sheetStore.activeSheet}></BottomSheet>\r\n  {/if}\r\n</main>\r\n```\r\n\r\n```javascript\r\n// BottomSheet.svelte\r\n<script lang=\"ts\">\r\n/**\r\n * holds dynamic child component and its props\r\n */\r\nexport let sheetSpec:SheetSpec\r\n</script>\r\n<!-- local transition(optional workaround) -->\r\n<section\r\n  style=\"--z-index: {zIndex}\"\r\n  transition:fly|local={{ x: 0, y: 40, duration: 140 }}\r\n>\r\n <div class=\"inner\">\r\n     <!-- removing slot and inject child here -->\r\n     <svelte:component this={sheetSpec.component} {...sheetSpec.props} />\r\n  </div>\r\n</section>\r\n```\r\n* BottomSheet and child component were destroyed as expected. (onDestroy(() => {..})","updated_at":"2023-08-13T06:45:39Z","created_at":"2023-08-13T06:35:40Z","creator_user_login":"yeori"}
{"number":4933,"comment_id":"662720658","body":"As an example of condition 3 I just encountered, this statement:\r\n\r\n```js\r\nproviderMarkers = providerMarkers; // trigger reactivity\r\n```\r\nat the end of a fairly complex reactive block generates this entire thing:\r\n\r\n```js\r\n(((((((((((((((((((((((((((((((((((((((((($$invalidate(117, providerMarkers), $$invalidate(107, map)), $$invalidate(119, hasLine)), $$invalidate(7, providers)), $$invalidate(115, activeProviders)), $$invalidate(101, showConnections)), $$invalidate(24, focalProvider)), $$invalidate(118, lines)), $$invalidate(100, highlightConnectionProviders)), $$invalidate(58, report)), $$invalidate(37, activeCompetitorCountFilters)), $$invalidate(36, activeReferrerCountFilters)), $$invalidate(17, showReferrerTypes)), $$invalidate(96, _b)), $$invalidate(97, _c)), $$invalidate(5, selectedProfiles)), $$invalidate(2, showAllConnections)), $$invalidate(116, activeProviderIds)), $$invalidate(99, showListProvidersSelected)), $$invalidate(98, hoverProvider)), $$invalidate(27, selectedProvider)), $$invalidate(123, providerListIds)), $$invalidate(102, showConnectionsSet)), $$invalidate(14, competitorCountFilters)), $$invalidate(13, referrerCountFilters)), $$invalidate(104, lastReferrerConfigName)), $$invalidate(25, usedReferrerConfigName)), $$invalidate(23, currentProviderList)), $$invalidate(31, worklist)), $$invalidate(3, viewingProviderInfo)), $$invalidate(42, topVolumeProviders)), $$invalidate(95, _a)), $$invalidate(129, initialWorklistObject)), $$invalidate(103, viewHoverProvider)), $$invalidate(35, activeListProfilesSet)), $$invalidate(22, listSortField)), $$invalidate(29, worklistObjects)), $$invalidate(124, tmConfig)), $$invalidate(21, activeListProfiles)), $$invalidate(30, $providerLists)), $$invalidate(39, activeProfilesInfo)), $$invalidate(122, oldActiveProfilesInfo)), $$invalidate(127, activeProfiles)), $$invalidate(26, $profilesStore); // Trigger reactivity.\r\n```\r\n \r\nSo it invalidates everything that the block references and ends up rerunning pretty much every reactive block in the component. If I change `providerMarkers = providerMarkers` to `providerMarkers = new Map(providerMarkers)`, then the output is just this:\r\n\r\n```js\r\n$$invalidate(117, providerMarkers = new Map(providerMarkers)); // Trigger reactivity.\r\n```\r\n\r\nThat's what I would expect. It's not a big deal in my case to recreate `providerMarkers` each time but this is definitely unintuitive and can possibly cause issues when dealing with imperatively controlled libraries such as Leaflet.\r\n\r\nI ended up using the above workaround and also added extra guards on the reactive block that clears and recreates the Leaflet map when new data arrives.\r\n\r\nHere's a simple REPL that demonstrates just this particular issue: https://svelte.dev/repl/3c532069bd8c4d1bb0cee46807843b63?version=3.24.0","updated_at":"2020-07-22T22:18:31Z","created_at":"2020-07-22T22:04:13Z","creator_user_login":"dimfeld"}
{"number":4933,"comment_id":"910435874","body":"A reproduction of undesirable invalidation when mutating a reactive declaration: https://svelte.dev/repl/785c7c419caa49dea1b8414e9c6916f2?version=3.42.1","updated_at":"2021-09-01T16:11:07Z","created_at":"2021-09-01T16:11:07Z","creator_user_login":"TehShrike"}
{"number":4933,"comment_id":"910449322","body":"Another simple reproduction of this issue when using an export, #each and bind: https://svelte.dev/repl/837df5671cc2442fbac4ebf7d4a07ffc?version=3.42.4","updated_at":"2021-09-01T16:27:08Z","created_at":"2021-09-01T16:27:08Z","creator_user_login":"micahswab"}
{"number":4933,"comment_id":"916973153","body":"Can https://github.com/sveltejs/svelte/issues/6507 be related? Can you help me understand if this is the case?","updated_at":"2021-09-10T15:03:03Z","created_at":"2021-09-10T15:03:03Z","creator_user_login":"frederikhors"}
{"number":4933,"comment_id":"917371729","body":"My mental model has always been that a reactive declaration like `$: b = a * 2` defines `b` in it's entirety (\"Here's my recipe for `b` and all the ingredients, please Svelte make `b` always up to date\"). And outside of this declaration `b` is immutable. I never had the use-case to touch `b` because that might cause my brain to melt when I manually need to think about what `b` could be at any given moment. If it's immutable and completely defined by the reactive declaration then it is easy to look at the code (yay code quality).\r\n\r\nI personally think the compiler should prevent any mutation of these reactively declared variables. That would get rid of all these edge cases at the root. If you need this behavior, you can always achieve it, see below.\r\n\r\nFor me there is a distinct difference between these two scripts:\r\n\r\n```js\r\nlet a = 1;\r\n$: b = a * 2;\r\n```\r\n\r\n```js\r\nlet a = 1;\r\nlet b;\r\n$: {\r\n    b = a * 2\r\n};\r\n```\r\n\r\nThe first example defines a \"recipe\" for how to create `b` and `b` is completely defined by that declaration. Outside of that it is immutable, data flows only into a single sink.\r\n\r\nThe second example declares a variable `b` and then uses a reactive statement to update it. But it also allows you to do with `b` whatever you want. If someone wants to go that route (definitely not me), they are free to do so at their own risk of ensuring consistency.\r\n\r\nTLDR: Introduce a compiler option that makes reactive declaration in the first example immutable. Remove the option in v4 and make it the default. Anyone in the same boat as me?","updated_at":"2021-09-11T09:03:41Z","created_at":"2021-09-11T09:03:41Z","creator_user_login":"Prinzhorn"}
{"number":4933,"comment_id":"917864218","body":"What would be a workaround for this issue at the moment? Is it even possible?\r\n\r\nI made another example here https://svelte.dev/repl/96e9f667343a492faee44a0fa8e0b36c?version=3.42.5","updated_at":"2021-09-13T05:56:10Z","created_at":"2021-09-13T05:56:10Z","creator_user_login":"joaopaulobdac"}
{"number":4933,"comment_id":"922272288","body":"When Rich introduced Svelte, he used spreadsheets like Excel as a model to explain reactivity. In Excel, you can only define a cell's value with a single formula. You can't have multiple things updating a cell's value. And I think that makes sense because I don't know how things would behave otherwise. So if we think about reactivity in those terms, then @Prinzhorn's suggestion that you not be able to mutate a reactive variable outside of its declaration makes a lot of sense. My initial reaction is that I don't think that would be limiting because you can express almost anything in Excel and it's a tool a lot of people were able to easily learn to use.\r\n\r\nI'm not sure by looking at the description of this issue that I totally understood at first how difficult some of these cases might be to model and think about. Going off the issue description, I'd probably just say that the value should end up as 42. But some of these cases can get more confusing. E.g. looking at https://github.com/sveltejs/svelte/issues/6720 you have to start doing more mental gymnastics to explain how things would work","updated_at":"2021-09-18T12:55:37Z","created_at":"2021-09-18T12:52:20Z","creator_user_login":"benmccann"}
{"number":4933,"comment_id":"922331413","body":"@benmccann My case is that I have a component which takes an object as a prop. As the user changes the object's values, they can either **Save** or **Cancel**. So in the component I have two variables: `value` and `valueUnsaved`. It's similar to the example on my comment above. To avoid mutating the original object directly, I assign `valueUnsaved` as a deep clone of `value`. If `value` is changed outside of the component, `valueUnsaved` should be updated. But unfortunately I couldn't get this to work.","updated_at":"2021-09-18T15:52:39Z","created_at":"2021-09-18T15:52:39Z","creator_user_login":"joaopaulobdac"}
{"number":4933,"comment_id":"922331648","body":"> @benmccann My case is that I have a component which takes an object as a prop. As the user changes the object's values, they can either **Save** or **Cancel**. So in the component I have two variables: `value` and `valueUnsaved`. It's similar to the example on my comment above. To avoid mutating the original object directly, I assign `valueUnsaved` as a deep clone of `value`. If `value` is changed outside of the component, `valueUnsaved` should be updated. But unfortunately I couldn't get this to work.\r\n\r\nSame here, and I think this is not correct. The more I think about it, the more I am convinced it's a wrong mental model.","updated_at":"2021-09-18T15:54:32Z","created_at":"2021-09-18T15:54:32Z","creator_user_login":"frederikhors"}
{"number":4933,"comment_id":"922506231","body":"> My case is that I have a component which takes an object as a prop. As the user changes the object's values, they can either **Save** or **Cancel**. So in the component I have two variables: `value` and `valueUnsaved`. It's similar to the example on my comment above. To avoid mutating the original object directly, I assign `valueUnsaved` as a deep clone of `value`. If `value` is changed outside of the component, `valueUnsaved` should be updated. But unfortunately I couldn't get this to work.\r\n\r\nI'm doing exactly the same in my app and just looked at how I implemented it. Turns out I'm using a store (since all these things are held in stores that are transparently synced with the server and across multiple Electron windows using `BroadcastChannel`). Here's the relevant code copied (and redacted) from my component with the original comment from my code base (MIT licensed for the sake of this comment):\r\n\r\n(the feature allows customizing the \"Copy as...\" context menu in the app, the `copyAsTemplates` holds all the context menu entries. All my stores also have a `defaultValue` property and `reset` method)\r\n\r\n```svelte\r\n<script>\r\n  import equal from 'fast-deep-equal';\r\n  import { onMount } from 'svelte';\r\n  import { copyAsTemplates } from '~/js/stores.js';\r\n  import deepClone from '~/js/lib/deepClone.js';\r\n\r\n  // Without cloning this will point to the same object and they'll always be the same.\r\n  // We'd basically change the object in the store without changing the store.\r\n  let tmpCopyAsTemplates = deepClone($copyAsTemplates);\r\n\r\n  onMount(() => {\r\n    // We cannot make the above statement reactive because we touch tmpCopyAsTemplates.\r\n    // But we need to make sure to sync this when a different window changes copyAsTemplates.\r\n    return copyAsTemplates.subscribe((value) => {\r\n      tmpCopyAsTemplates = deepClone(value);\r\n    });\r\n  });\r\n\r\n  $: isUntouched = equal(tmpCopyAsTemplates, $copyAsTemplates);\r\n  $: isDefault = equal(tmpCopyAsTemplates, copyAsTemplates.defaultValue);\r\n\r\n  function handleSaveClick() {\r\n    $copyAsTemplates = deepClone(tmpCopyAsTemplates);\r\n  }\r\n\r\n  function handleCancelClick() {\r\n    tmpCopyAsTemplates = deepClone($copyAsTemplates);\r\n  }\r\n\r\n  function handleResetClick() {\r\n    copyAsTemplates.reset();\r\n  }\r\n</script>\r\n\r\n<!--Redacted component stuff for actual editing-->\r\n\r\n<button disabled={isUntouched} on:click={handleSaveClick}> Save </button>\r\n<button disabled={isUntouched} on:click={handleCancelClick}> Cancel </button>\r\n<button disabled={isDefault} on:click={handleResetClick}> Reset to default </button>\r\n```\r\n\r\nI've said it multiples times and I say it again: in Svelte stores solve all your problems and I love them so much. In cases like this, when you run into limitations of reactivity, you can always resort to an imperative `subscribe` call (I usually avoid imperative code in Svelte like the plague).","updated_at":"2021-09-21T07:58:54Z","created_at":"2021-09-19T17:10:04Z","creator_user_login":"Prinzhorn"}
{"number":4933,"comment_id":"922507786","body":"That's a great solution! But wouldn't you need the prop to be a store so you can subscribe to updates? Or maybe the component could create a store and synchronize it's value using a reactive statement?","updated_at":"2021-09-19T17:22:15Z","created_at":"2021-09-19T17:22:15Z","creator_user_login":"joaopaulobdac"}
{"number":4933,"comment_id":"927284312","body":"@joaopaulobdac that depends on your architecture, I guess your parent component could wrap the value in a store and pass it down _without_ `bind`. At least that's a workaround for now, there might be some change coming following the discussion in #6730 ","updated_at":"2021-09-26T10:58:53Z","created_at":"2021-09-26T10:58:53Z","creator_user_login":"Prinzhorn"}
{"number":4933,"comment_id":"1011832112","body":"I ran into I think this same confusing (IMHO incorrect) behavior today.\r\n\r\nWould this be an example of **Condition 1 (any of the dependencies of the reactive declarations is mutated, reassigned, or exported)**?:\r\n\r\nhttps://svelte.dev/repl/ff6e69e975df44f3821cc4ed956881f8 (created as new issue #7129)\r\n","updated_at":"2022-01-13T06:21:36Z","created_at":"2022-01-13T06:21:36Z","creator_user_login":"TylerRick"}
{"number":4933,"comment_id":"1014030871","body":"Ran into the same thing as well. Thankfully, I'm already using stores and can sidestep the issue with manual subscriptions, but I'm a bit leery of overusing reactive statements now as it seems like some nasty bugs could pop up unintended.\r\n\r\nHere was my REPL, for what it's worth.\r\nhttps://svelte.dev/repl/6ffc787bb6fd42f1a2590b98ff8838cd?version=3.46.2\r\n\r\nYou can *kind of* sidestep the issue without stores by calling a separate function in your reactive statement, and assing to your left hand side variables in there. Seems as though the compiler won't generate any additional invalidates in that case.","updated_at":"2022-01-17T01:13:26Z","created_at":"2022-01-17T01:10:30Z","creator_user_login":"jmroon"}
{"number":4933,"comment_id":"1033631289","body":"Here is my simplified case https://svelte.dev/repl/715f7a4749264a0e88aac699a9641dc4?version=3.46.4\r\nIn reality, I made a visualization of algorithms work on a graph that users can enter. Apparently, I need to clean up data before the next run, but the reactivity was messing up with the first visualization step.","updated_at":"2022-02-09T10:57:23Z","created_at":"2022-02-09T10:57:23Z","creator_user_login":"7nik"}
{"number":4933,"comment_id":"1044316908","body":"i ran into the same issue, i think.\r\nhere is a simplified example repo: https://github.com/QuickMick/svelte-computed-with-object-bug ( i also made a bug report, because i have not seen this issue here - https://github.com/sveltejs/svelte/issues/7282)\r\nit seems, that also some events (in this case, the \"input\" event of the textarea) forces the reactive statement to reevaluate, even if there are no changes.","updated_at":"2022-02-18T10:44:57Z","created_at":"2022-02-18T10:44:57Z","creator_user_login":"QuickMick"}
{"number":4933,"comment_id":"1072607689","body":"To prevent a reactive assignment to climb up the dependency tree\r\n\r\n```js\r\n$: data = obj.data\r\n```\r\n\r\nbecomes\r\n\r\n```js\r\nlet data;\r\nconst getData = obj => obj.data\r\n$: getData(obj)\r\n\r\n// now you can set `data` externally without invalidating `obj`\r\n```\r\n\r\nHonestly I've spent all day and I still don't fully understand how **reactive declarations** are supposed to work. It's very unintuitive. And I feel like I can't get by with current behavior that climbs up the dependency tree","updated_at":"2022-03-20T14:09:16Z","created_at":"2022-03-18T17:01:01Z","creator_user_login":"madacol"}
{"number":4933,"comment_id":"1072613470","body":"Within my own ignorance, I feel like there should be 2 separate ways of \"reactive declarations\", depending on how the invalidate moves the dependency tree:\r\n1. _one-way (downward)_\r\n2. _two-way (downward/upward)_\r\n\r\nSomething like `$: variable = ...` for one-way, and `$bind: variable = ...` for two-way\r\n\r\nSimilar to how binding comes in 2 flavors too, one-way binding `<input {value}/>`, and two-way binding `<input bind:value/>`.","updated_at":"2022-03-20T14:11:47Z","created_at":"2022-03-18T17:08:21Z","creator_user_login":"madacol"}
{"number":4933,"comment_id":"1252379135","body":"I've come across this bug in the enterprise app I'm working on, and it's a serious pain in the ass for us. We need to fetch data from the backend every time a prop updates, but this bug invalidates the prop again and again leading to an infinite loop.\r\n\r\nPseudocode showing our use case:\r\n```typescript\r\nexport let url;\r\n$: content = url;\r\n$: fetchData(url);\r\n\r\nfunction fetchData(url) {\r\n  fetch(url).then(c => content = c); // invalidates url => runs in an infinite loop\r\n}\r\n```\r\n\r\n[Actual code from our application in the REPL.](https://svelte.dev/repl/ce35a5a9d4224ca8876617c40e0a4d49?version=3.50.1)\r\n\r\nI don't see any simple walkaround, and I couldn't find any version of Svelte where this works properly.\r\n\r\n\r\n-----\r\n\r\n\r\n**EDIT:** I _did_ find a walkaround, inspired by [madacol's comment](https://github.com/sveltejs/svelte/issues/4933#issuecomment-1072607689). The key is not letting Svelte know that the dependent variable relates to the prop in any way, wrapping the relation in a function. The pseudocode from before would look like this:\r\n```typescript\r\nexport let url;\r\nlet content;\r\n$: fetchContent(url);\r\n\r\nfunction fetchContent(url) {\r\n  content = url;\r\n  fetch(url).then(c => content = c); // only invalidates content, as Svelte doesn't know it's a dependency of url\r\n}\r\n```\r\n[Actual code in the REPL.](https://svelte.dev/repl/1d5371c7be774328a32228c777beae6b?version=3.50.1)\r\n\r\nI still maintain that this is a **bug**, as the behavior is very unintuitive and I don't see any good reason for Svelte behaving in this way.","updated_at":"2022-10-16T14:21:36Z","created_at":"2022-09-20T13:46:04Z","creator_user_login":"m93a"}
{"number":4933,"comment_id":"1267764732","body":"This is kinda crazy. I just spent hours thinking I was doing something dumb. So you push data to store from API and then you want to filter that data locally but it just doesn't work. ","updated_at":"2022-10-05T00:32:00Z","created_at":"2022-10-05T00:32:00Z","creator_user_login":"hartwm"}
{"number":4933,"comment_id":"1383940183","body":"I've also encountered this surprising behavior and dug a little bit into it. I'm probably repeating a lot of things that have already been said.\r\n\r\nI think regardless of whether assigning to a reactive variable should be allowed or not, the behavior overall should still be *correct* and *consistent* in itself. Take the following combined example:\r\n\r\n```svelte\r\n<script>\r\n\texport let user;\r\n\t$: name = user.name\r\n</script>\r\n\r\n<input bind:value={name} />\r\n<input value={name} on:change={event => name = event.target.value}>\r\n```\r\n\r\nThe reactive variable `name` is updated via binding and via \"manual\" assignment. In general I would expect both of these behaviors to be equivalent, but the generated code for both event handlers is different:\r\n\r\n```js\r\nlet name;\r\nlet { user } = $$props;\r\n\r\nfunction input0_input_handler() {\r\n  name = this.value;\r\n  ($$invalidate(0, name), $$invalidate(1, user));\r\n}\r\n\r\nconst change_handler = event => $$invalidate(0, name = event.target.value);\r\n```\r\n\r\nWhen using `bind:value` we also invalidate the dependencies of the reactive variable, but we don't do that in the assignment case...\r\n\r\nI now understand that invalidating dependencies was introduced by #2444, but I think the logic is not granular enough. In JavaScript, assigning to a variable can never have an impact on the values/variables from which this variable was initialized. I think the issue becomes even clearer in the following example:\r\n\r\n```svelte\r\n<script>\r\n\texport let user;\r\n\tlet name\r\n\t$: if ($someStore) {\r\n\t\tname = user.name\r\n\t}\r\n</script>\r\n\r\n<input bind:value={name} />\r\n```\r\n\r\nwhich generates\r\n\r\n\r\n```js\r\nlet $someStore;\r\ncomponent_subscribe($$self, someStore, $$value => $$invalidate(2, $someStore = $$value));\r\nlet { user } = $$props;\r\nlet name;\r\n\r\nfunction input_input_handler() {\r\n  name = this.value;\r\n  (($$invalidate(0, name), $$invalidate(2, $someStore)), $$invalidate(1, user));\r\n}\r\n```\r\n\r\n`$someStore` is only \"indirectly\" used for computing the value of `name`, yet it's invalidated too. I think that's conceptually wrong, regardless of whether assigning to a reactive variable should be allows or not.\r\n\r\nWhat makes the matter worse (and which has been mentioned already) is that sometimes invalidating the dependencies will have an effect (if the dependency is an object value) or not (if the dependency is a primitive). This behavior is not obvious to someone who just uses `bind:value`.\r\n\r\nTo me a possible solution seems to be that when binding to a reactive variable, dependencies should be invalidate **iff** the binding *target* is *not* a variable **and** the dependency is directly used in computing the variable's value (to prevent the `if` example above).\r\n\r\nI started to look into the implementation a bit. The \"problem\" is that the logic for generating the `$$invalidate` calls (in [`invalidate.ts`](https://github.com/sveltejs/svelte/blob/967e9f51ff649f776fa034db8aba23a5a1546294/src/compiler/compile/render_dom/invalidate.ts#L123-L143) doesn't know know anything about the nature of the passed in name. E.g. if we bind to an object property like `bind:value={user.name}` then this logic gets passed `user` and at this point the information that a property is bound is not available.","updated_at":"2023-01-16T11:55:27Z","created_at":"2023-01-16T11:55:27Z","creator_user_login":"fkling"}
{"number":4933,"comment_id":"1537497595","body":"I agree with @fkling here. I was struggling with these issues significantly while starting to actually use Svelte for a real project. I'm concerned that the unpredictability of the reactive behavior is going to be a major turn-off for others on my team who are less experienced with programming (designers that dip into code when they have to).\r\n\r\nRegardless of whether you divide up reactive declarations to account for one-way vs. two-way binding via syntax changes, before that, there needs to be a pristine, consistent, and intuitive clarity by which Svelte users can engage with reactive declarations/statements overall.","updated_at":"2023-05-07T17:17:22Z","created_at":"2023-05-07T17:17:22Z","creator_user_login":"willnationsdev"}
{"number":4933,"comment_id":"1618993003","body":"I'm running into similar issues in #8895.  \r\n\r\n> I was struggling with these issues significantly while starting to actually use Svelte for a real project. \r\n\r\nI've been using Svelte on/off for a few years and this continues to bite me in the ass, so it's not just newbies. The behavior can be as you expect until you modify some other part of your component, and then you have a regression that you need to debug, and debugging it is time-consuming.\r\n\r\n> I'm concerned that the unpredictability of the reactive behavior is going to be a major turn-off for others on my team who are less experienced with programming (designers that dip into code when they have to).\r\n\r\nUnpredictability is a \"major turn-off\" to seasoned developers too! üòä \r\n\r\n> there needs to be a pristine, consistent, and intuitive clarity by which Svelte users can engage with reactive declarations/statements overall.\r\n\r\nüëÜüíØ \r\n\r\nThe docs/tutorial talk about the fact that components will only get updated and reactivity will only fire when the *reference* of an object changes -- interior mutability doesn't count. But then there are undocumented exceptions like this that try to be \"conservative\" and do updates when objects references haven't changed, leading to unexpected behavior.\r\n\r\nI <3 Svelte's developer experience on the whole, but I've now spent enough time investigating issues like this that I'm investigating alternatives. üòû\r\n\r\nIMO, this bug can be boiled down to what @tanhauhau said:\r\n\r\n> I don't know what is the expected behavior of the Svelte should be\r\n\r\nDocumenting the intended behavior would be a great first step here. Simplifying it would be better. ü§û \r\n","updated_at":"2023-07-03T18:44:23Z","created_at":"2023-07-03T18:40:02Z","creator_user_login":"NfNitLoop"}
{"number":3448,"comment_id":"530331354","body":"I have the same issue using **[sveltestrap](https://github.com/bestguy/sveltestrap)** (bootstrap4) components which are imported. In this case `areas` is array which is dynamically updated via fetch, on user input.\r\n```html\r\n<Dropdown inNavbar=true {isOpen} toggle={() => (isOpen = !isOpen)}>\r\n    <DropdownMenu >\r\n        {#each areas as area}\r\n            <DropdownItem>{area.az_name}</DropdownItem>\r\n        {/each}\r\n    </DropdownMenu>\r\n</Dropdown>\r\n```\r\n\r\nThe first time it loads fine and the **dropdown** list is loaded properly any next update fails.\r\nStack trace\r\n```js\r\nindex.mjs:649 Uncaught (in promise) TypeError: Cannot read property 'c' of undefined\r\n    at is (index.mjs:649)\r\n    at Object.o (DropdownItem.svelte:52)\r\n    at transition_out (index.mjs:684)\r\n    at Object.o (App.svelte:60)\r\n    at transition_out (index.mjs:684)\r\n    at out (App.svelte:59)\r\n    at Object.p (App.svelte:59)\r\n    at Object.p (DropdownMenu.svelte:26)\r\n    at ls (index.mjs:604)\r\n    at es (index.mjs:578)\r\n```\r\nDebugging with source map it leads to here:\r\n```js\r\nfunction transition_out(block, local, detach, callback) {\r\n    if (block && block.o) {\r\n        if (outroing.has(block))\r\n            return;\r\n        outroing.add(block);\r\n//! outros is undefined below \r\n        outros.c.push(() => {\r\n            outroing.delete(block);\r\n            if (callback) {\r\n                if (detach)\r\n                    block.d(1);\r\n                callback();\r\n            }\r\n        });\r\n        block.o(local);\r\n    }\r\n}\r\n```","updated_at":"2019-09-11T11:01:45Z","created_at":"2019-09-11T11:01:45Z","creator_user_login":"telemmaite"}
{"number":3448,"comment_id":"530351377","body":"Simply adding guards before the `outros.c.push` (and a couple other places related to transitioning out) seems to fix the issue from an error standpoint, but I don't know what implications that has with regards to performance/GC.","updated_at":"2019-09-11T12:08:39Z","created_at":"2019-09-11T12:08:39Z","creator_user_login":"taylorzane"}
{"number":3448,"comment_id":"533144193","body":"Found similar (same?) bug while using https://github.com/c0bra/svelma\r\nDebugging leads to the same place as @telemmaite pasted.\r\nHere is link to repo with reproduced issue - https://github.com/kroshilin/svelma-transition-bug. \r\nNoticeable, that if I copy-paste bugged components code to my src, and use them instead of importing from library, bug disappears. Method, suggested by @taylorzane works.","updated_at":"2019-09-19T14:00:48Z","created_at":"2019-09-19T14:00:21Z","creator_user_login":"kroshilin"}
{"number":3448,"comment_id":"534304773","body":"I'm not using anything async and I'm getting this error.\r\n\r\nI wrote this patch:\r\n\r\n```diff\r\ndiff --git a/src/runtime/internal/transitions.ts b/src/runtime/internal/transitions.ts\r\nindex ed23d3c1..7098afbd 100644\r\n--- a/src/runtime/internal/transitions.ts\r\n+++ b/src/runtime/internal/transitions.ts\r\n@@ -53,13 +53,15 @@ export function transition_out(block, local: 0 | 1, detach: 0 | 1, callback) {\r\n \t\tif (outroing.has(block)) return;\r\n \t\toutroing.add(block);\r\n \r\n-\t\toutros.c.push(() => {\r\n-\t\t\toutroing.delete(block);\r\n-\t\t\tif (callback) {\r\n-\t\t\t\tif (detach) block.d(1);\r\n-\t\t\t\tcallback();\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\tif (outros !== undefined) {\r\n+\t\t\toutros.c.push(() => {\r\n+\t\t\t\toutroing.delete(block);\r\n+\t\t\t\tif (callback) {\r\n+\t\t\t\t\tif (detach) block.d(1);\r\n+\t\t\t\t\tcallback();\r\n+\t\t\t\t}\r\n+\t\t\t});\r\n+\t\t}\r\n \r\n \t\tblock.o(local);\r\n \t}\r\n```\r\n\r\nBefore accessing `outros.c` we first check if `outros` exists. By default it is `undefined`.\r\n\r\nAlternative solutions:\r\n+ call `group_outros` before `transition_out`\r\n+ call `check_outros` before `transition_out`\r\n\r\nBoth create the `outros` object.\r\n\r\nIf someone in the know wants to chime in with the appropriate solution. I will create the PR.","updated_at":"2019-09-23T22:13:21Z","created_at":"2019-09-23T22:09:29Z","creator_user_login":"tcrowe"}
{"number":3448,"comment_id":"535267489","body":"I'm having the same problem as well, but using the patch from @tcrowe fixes everything.\r\n\r\nUntil a fix is accepted for this I'm patching `node_modules` myself and using the `patch-package` package to apply the changes after `npm install`, but I was just wondering if someone more knowledgeable about the codebase can say if there are any downsides to this fix, or if there's a better alternative?","updated_at":"2019-09-25T23:44:08Z","created_at":"2019-09-25T23:44:08Z","creator_user_login":"ghost"}
{"number":3448,"comment_id":"537881644","body":"It's really critical... I can't use the components of svemla as overlays because of this error.","updated_at":"2019-10-03T10:13:30Z","created_at":"2019-10-03T10:13:30Z","creator_user_login":"hmmhmmhm"}
{"number":3448,"comment_id":"538625943","body":"same/similar issue\r\n\r\ncan be seen on link:\r\nhttps://github.com/dasDaniel/svelte-table/blob/master/example/App.svelte\r\nwhen using select>option to toggle child component\r\n\r\nchild component:\r\nhttps://github.com/dasDaniel/svelte-table/blob/master/src/SvelteTable.svelte\r\n\r\nthe onDestroy doesn't get called. just get the \r\n> Uncaught (in promise) TypeError: Cannot read property 'c' of undefined at transition_out$1\r\n\r\npointing to my each loop `{#each c_rows as row, n}`\r\n\r\nthere are no transitions","updated_at":"2019-10-05T07:32:57Z","created_at":"2019-10-05T07:32:36Z","creator_user_login":"dasDaniel"}
{"number":3448,"comment_id":"541385384","body":"does anyone have a solution to this?","updated_at":"2019-10-13T04:32:27Z","created_at":"2019-10-13T04:32:27Z","creator_user_login":"hmmhmmhm"}
{"number":3448,"comment_id":"541386356","body":"If I understand what everyone here means by \"dynamic components\" as \"components built from a separate Svelte project, of which the final JS file is dynamically loaded\" then the reason for these errors is because Svelte bundles with its own copy of the runtime internals (or rather, by default that's what bundlers do with Svelte).\r\n\r\nI'm making this assumption because otherwise you would just download the `.svelte` files and include them in your project like usual, in which case they would get bundled with the same internals as the rest of your project anyway, and the OP gave the example of `import()`ing a `.js` file.\r\n\r\nUnfortunately if this is the case then any suggested fixes relating to guards etc. only half-fix the problem because there are still incorrect state tracking variables lying around which could cause more problems later on, even if no errors are thrown.\r\n\r\nThe runtime internals use module level variables to track state, so when a component from one project calls a component from another project and both use their own copies of the internals things start going wrong due to the state tracking variables not being shared.\r\n\r\nI started an issue specifically about this here: https://github.com/sveltejs/svelte/issues/3671\r\n\r\nIn the end @halfnelson came up with a solution where the pre-built component should declare at least the `svelte/internal` imports as `globals` (rollup) or `externals` (webpack).\r\n\r\nYou can see that comment and my comment afterwards stating what I did here: https://github.com/sveltejs/svelte/issues/3671#issuecomment-541277465\r\n\r\nIf this is the problem that's being discussed here then it would seem that projects distributing pre-built Svelte components should set their bundles to be built expecting at least the `svelte/internal` import to be provided as a global somewhere.\r\n\r\nIn the case where they want both the option to be imported into an existing Svelte project or be used as a standalone component in a non-svelte project (in this case they would need their own internals) then they could set up the build to use globals if they exist or their own copy if they don't exist. I haven't looked into how to go about doing that myself though.\r\n\r\nIf that's not possible then a project distributing pre-built Svelte components could provide two builds quite easily; one that contains a copy of the internals and one that expects them to be available somewhere in the environment, like as a global. The one that expects the internals to be available somewhere in the environment is the one that would be used inside a Svelte component built as a separate project.\r\n\r\nThe only downside to this is that if the components were built using different versions of Svelte then it's possible that the expected functionality of each component will go out of sync due to API changes. This is one of the trade offs you have to make when you decide to include a pre-built component into your project anyway though.","updated_at":"2019-10-13T06:45:15Z","created_at":"2019-10-13T04:54:54Z","creator_user_login":"ghost"}
{"number":3448,"comment_id":"541388371","body":"Thanks for the thorough reply.\r\n\r\nTo clarify, in my comment, by _dynamic component_ I meant that I'm using a condition to determine whether to render/mount component.\r\n\r\nAlso I've tried using a local (uncompiled) and a svelte file from npm. The error happens in both cases. I believe, if I understand the comment and the referenced issue correctly, that should only be the case for the compiled component. So I don't think this solution would work for me.\r\n\r\n","updated_at":"2019-10-13T05:39:24Z","created_at":"2019-10-13T05:39:24Z","creator_user_login":"dasDaniel"}
{"number":3448,"comment_id":"541391289","body":"@dasDaniel I just downloaded your SvelteTable project and had a go with the `example` folder.\r\n\r\nYour example project is also bundling two different copies of the Svelte internals, so it's the same problem, but the source of the problem is different. That's why the error states that `outros$1` is `undefined`; because `outros` as a variable name has already been taken by the first copy of the internals.\r\n\r\nI don't know Rollup so I can't help you out with why it's happening, but if you copy the `SvelteTable.svelte` file into the `example` folder and then `import` from `./SvelteTable.svelte` it seems to work just fine because it only bundled one internals copy and both components use it.\r\n\r\nAn easy test to see if two components are using the same internals or not is to use the context API. In the parent component set any random key value pair. If the parent and child are using the same internals then you should be able to retrieve your value in the child using `getContext`. If they're using different copies of the internals then the child's `getContext` call will always return `undefined` because the context API relies on calling the same `svelte/internal` functions that close over module level state tracking variables.","updated_at":"2019-10-13T06:44:08Z","created_at":"2019-10-13T06:32:29Z","creator_user_login":"ghost"}
{"number":3448,"comment_id":"541463215","body":"thanks @jakelucas \r\n\r\nOK, so when I was testing it, I was toggling the way the component is included (relative vs package) I got the same error with both.\r\n\r\nI got the same error because I used `npm start`, which doesn't rebuild the bundle.js file. \r\n## ü§¶‚Äç‚ôÇ√óüíØ\r\n\r\nNow after using `npm install && npm run dev` the error has gone away, no matter which way I include the child component, and I can no longer reproduce.  ü§∑‚Äç‚ôÇ ","updated_at":"2019-10-13T21:50:59Z","created_at":"2019-10-13T21:50:59Z","creator_user_login":"dasDaniel"}
{"number":3448,"comment_id":"551878724","body":"I'm running Svelte in a Meteor app, which imports a single component from a local npm package that contains a bunch of Svelte components.\r\n\r\nWhenever that component is used on a route, and I navigate away from that route, I get the same error:\r\n<details>\r\n<summary>Stack</summary>\r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read property 'c' of undefined\r\n    at transition_out (index.mjs:649)\r\n    at Object.outro [as o] (TextField.svelte:26)\r\n    at transition_out (index.mjs:657)\r\n    at Object.outro [as o] (PageProfile.svelte:39)\r\n    at transition_out (index.mjs:657)\r\n    at Object.outro [as o] (PageSection.svelte:5)\r\n    at transition_out (index.mjs:657)\r\n    at Object.outro [as o] (PageProfile.svelte:32)\r\n    at transition_out (index.mjs:657)\r\n    at Object.outro [as o] (MainLayout.svelte:22)\r\n```\r\n</details>\r\n\r\nThe component in question uses another component internally from the same package. If I remove the sub-component, the error goes away:\r\n\r\n```svelte\r\n<script>\r\n   // mypackage/src/TextField/TextField.svelte\r\n\r\n   import Field from '../Field/Field.svelte'; // <-- Remove this line and errors go away\r\n   export let label;\r\n   export let value;\r\n</script>\r\n\r\n<Field {label}> <!-- Remove this line and errors go away -->\r\n  <input bind:value/>\r\n</Field> <!-- Remove this line and errors go away -->\r\n```","updated_at":"2019-11-08T15:46:16Z","created_at":"2019-11-08T15:46:16Z","creator_user_login":"arggh"}
{"number":3448,"comment_id":"551880243","body":"This happens also with `3.13.0-alpha.2`","updated_at":"2019-11-08T15:50:15Z","created_at":"2019-11-08T15:50:15Z","creator_user_login":"arggh"}
{"number":3448,"comment_id":"590856376","body":"This is definitely a bug. Here is how I ended up having this problem.\r\n\r\n1. I have compiled `Car` application that via props takes `Engine` component and renders this component using `<svelte:component this={engine} />` syntax.\r\n2. My friend makes `Engine` component bundle and I include this bundle via browser script tags and pass into `Car` application as prop.\r\n3. It works if `Engine` does not include any other svelte components, but throws errors described by others if `Engine` has at least one other component included.\r\n\r\nI use svelte 3.0.0 and bundle with rollup.\r\n\r\n```\r\n//My friends Engine.svelte that causes problems üëé\r\n<script>\r\n\timport EnginePart1 from './EnginePart1.svelte';\r\n\timport EnginePart2 from './EnginePart2.svelte';\r\n\timport EnginePart3 from './EnginePart3.svelte';\r\n</script>\r\n\r\n<EnginePart1 />\r\n```\r\n\r\n```\r\n//My friends Engine.svelte that works\r\n<script>\r\n\timport EnginePart1 from './EnginePart1.svelte';\r\n\timport EnginePart2 from './EnginePart2.svelte';\r\n\timport EnginePart3 from './EnginePart3.svelte';\r\n</script>\r\n\r\nI'm engine without parts. üëç\r\n```\r\n\r\nAnd here is an Engine app. Notice condition is part of an error scenario.\r\n\r\n```\r\n<script>\r\n    export let engine;\r\n\r\n    let status = 'engine';\r\n\r\n    const toggleInfo = () => {\r\n        if (status == 'engine') {\r\n            status = 'something else';\r\n        } else {\r\n            status = 'engine';\r\n        }\r\n    }\r\n</script>\r\n\r\n<button on:click|preventDefault={toggleInfo}>Toggle engine</button>\r\n\r\n{#if status == 'engine'}        \r\n    <svelte:component this={engine}></svelte:component>\r\n{:else}\r\n    something else\r\n{/if}\r\n```\r\nHere is how they meet:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Car App</title>\r\n    <link href=\"bundle.css\" rel=\"stylesheet\" />\r\n</head>\r\n<body>\r\n    <div id=\"parking-lot\"></div>\r\n \r\n    <script src=\"bundle.js\"></script>\r\n    <script src=\"Engine/bundle.js\"></script>\r\n    <script>\r\n        new Car({\r\n            target: document.querySelector('#parking-lot'),\r\n            props: {\r\n                engine: Engine\r\n            }\r\n        })\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\nThis time I get an error **TypeError: (void 0) is undefined**\r\n\r\nBut same structural configuration caused **TypeError: Cannot read property 'c' of undefined** error in other app I'm building.","updated_at":"2020-02-25T13:05:08Z","created_at":"2020-02-25T13:05:08Z","creator_user_login":"beinoriusju"}
{"number":3448,"comment_id":"629651704","body":"I can also confirm that this issue happens, in my case is by using `svelte-routing` with if conditions.\r\nwith Svelte _`3.20.1`_ everything works but it fails with the changes added in Svelte _`3.21.0`_.\r\n\r\nProbably fixes related to outros, so one of these 5: #3202, #3410, #3685, #4620, #4630\r\n","updated_at":"2020-05-16T14:12:57Z","created_at":"2020-05-16T14:09:13Z","creator_user_login":"Egnus"}
{"number":3448,"comment_id":"632369873","body":"@tcrowe could you create a PR with your patch? It's so frustrating to be blocked by this issue even if the solutions seems to be there.\r\n\r\n(downgrading to `3.20.1` didn't work for me)","updated_at":"2020-05-21T22:04:50Z","created_at":"2020-05-21T22:04:07Z","creator_user_login":"retog"}
{"number":3448,"comment_id":"637958068","body":"seeing the issue using a compiled component at https://svelte.dev/repl/3be030068a4646fc9c0ce71296cc9c48?version=3.23.0\r\n\r\nadded repo with error: https://github.com/dasDaniel/svelte-listbox","updated_at":"2020-06-03T15:09:15Z","created_at":"2020-06-03T05:14:44Z","creator_user_login":"dasDaniel"}
{"number":3448,"comment_id":"638071118","body":"Thanks for the example @dasDaniel, hope it gives a better idea of what happens.\r\n\r\n@retog delete the entire node__modules, force fixed version 3.20.1 and get rid of any .lock file before install all again.\r\nThen check that your Svelte in node_modules is that version in its package.json\r\n\r\nI wish I could know which is the specific trigger that breaks this because there are other fixes that I want to get from the updates of Svelte and I can't.","updated_at":"2020-06-03T09:13:36Z","created_at":"2020-06-03T09:13:36Z","creator_user_login":"Egnus"}
{"number":3448,"comment_id":"647017792","body":"@Egnus I did everything as you recommended, there's no version other than svelte@3.20.1 in node_modules, still ending up with `TypeError: outros is undefined` on switsching view.","updated_at":"2020-06-20T16:35:21Z","created_at":"2020-06-20T16:35:21Z","creator_user_login":"retog"}
{"number":3448,"comment_id":"693751621","body":"Hey guys, any update on that? I'm experiencing the same problem with simple components in an if-else block.","updated_at":"2020-09-17T01:23:09Z","created_at":"2020-09-17T01:23:09Z","creator_user_login":"sudomf"}
{"number":3448,"comment_id":"693756658","body":"@maykefreitas can help provide a repro for more context of what's happening for your case?","updated_at":"2020-09-17T01:41:39Z","created_at":"2020-09-17T01:41:39Z","creator_user_login":"tanhauhau"}
{"number":3617,"comment_id":"568156542","body":"Hi,\r\n\r\nThe part of the documentation you mention doesn't say what you interpreted. Binding values is different from exposing a property from the slot to the parent. It will be helpful to said what are slot are and use for.\r\n\r\n**Slots are just placeholder:**\r\n\r\n> The HTML <slot> element‚Äîpart of the Web Components technology suite‚Äîis a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.\r\n\r\nThe slot tag will be \"replace\" with the html markup that you put inside your Component tags. A use case can be... \r\n\r\nLet's said you want to create a DataTable component, on the DataTable component you create all your table html markup, style and javascript. So to use the component i just need to pass a dataset, where this dataset is an array of objects. \r\n\r\nHow you display each one of those items and in which order? You don't know, because when you created the component you din't have the data and you what to use this component for different type of objects. \r\n\r\nSo instead of creating complex configuration for the component you just expose each object (item) of the dataset to the parent. So here you will use a slot, so future developers and you can said how the markup of a row will be, and with the expose item you have the data of your dataset that you pass to your component available.\r\n\r\n**So svelte documentation saids:**\r\n\r\n> Slots can be rendered zero or more times, and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.\r\n\r\nContinuing the documentation after the previous line it saids:\r\n\r\n>The usual shorthand rules apply ‚Äî `let:item` is equivalent to `let:item={item}`, and `<slot {item}>` is equivalent to `<slot item={item}>`.\r\n\r\nThis means that to expose a property from the slot child to the parent you need to do:\r\n\r\n`<slot {item} />` or `<slot item={item}></slot>`\r\n\r\nAnd to use that property on the parent you need to do:\r\n\r\n`let:item` or `let:item={item}`\r\n\r\n[Check the svelte example on this part of the documentation for better understading](https://svelte.dev/docs#slot_let). If you don't do that, the item on the parent will be undefined. Thus not having access to the data you which.\r\n\r\n**On the other hand... Binding**\r\n\r\nIn a nutshell, the purpose of this is to update the variable programmatically or when the DOM element/components updates it. So if you have an input that his value is bind to a variable X when the input change it will change the value of the variable X but also if you change the value of X programmatically it will also change on the input and any place you reference the variable X.\r\n\r\nFrom svelte tutorials we can bind to components properties too:\r\n\r\n> Just as you can bind to properties of DOM elements, you can bind to component props. \r\n\r\nBut to components props, and to create a prop you need to use the export keyword. [More on component bidings](https://svelte.dev/tutorial/component-bindings).\r\n\r\nThe extended explanation is in case you miss something and for future devs that find this issue, have  a better understanding of slot and binding, and more if they're beginners to Svelte. \r\n\r\n[From your REPL I edit it a little, maybe this was what you were trying to do.](https://svelte.dev/repl/22cbfdcf614047cfa53945030c25b434?version=3.12.1). It binds to the components and also expose the value to which it binds. Making it posible to update the given value from inside the component but also from outside the component while also exposing the value from the slot to the parent.\r\n\r\nOr, are you asking for the functionality that one can specified future bidings to the slot?","updated_at":"2019-12-21T06:18:26Z","created_at":"2019-12-21T06:18:26Z","creator_user_login":"JazielGuerrero"}
{"number":3617,"comment_id":"568814650","body":"Thank you very much for the explanation: I though I knew slots but I didn't.\r\nNow that I got a clearer picture, I still don't understand **why** that error message (`cannot bind to variable declared with let:`) is there, in the sense that for me it would make a lot of sense to both bind (which connects bidirectionally the `App#item` variable with the `Component#item` variable) and also let (which connects the `slot#item` variable with the `Component#item` variable, allowing data to flow from `slot` to `Component`, and thus to the top-level `App` via the `bind` syntax.\r\n\r\nI have seen your example and it works, but I think that this ![new REPL better shows the problem](https://svelte.dev/repl/b8dfaf655903442b8c1417ec26a7963f?version=3.12.1), having multiple objects that I would like my internal template to bind to.\r\nI think this problem **cannot be solved, as of now**, in svelte.\r\n\r\nI definitely think that I'm asking for future bindings to the slot, if that means to bidirectionally bind the `slot#item` variable to the `Component#item` variable.\r\nI also add an image to better explain my understanding of the current situation:\r\n\r\n![svelte-flow-data](https://user-images.githubusercontent.com/10828817/71427308-93471000-26b7-11ea-84fd-b5b1a970fd5a.png)\r\n","updated_at":"2019-12-25T00:41:23Z","created_at":"2019-12-25T00:41:23Z","creator_user_login":"trenta3"}
{"number":3617,"comment_id":"600953997","body":"Hi,\r\n\r\nI came across a similar/relevant issue where I'm wanting to use slot props to pass a value to a parent component so that it can be bound to a specific element in the slot. This would allow the component containing the slot to access the DOM element in `onMount`.\r\n\r\nFor example,\r\n\r\n```svelte\r\n<Field let:input={input}>\r\n    <label>X</label>\r\n    <input bind:this={input}/> <!-- Cannot bind to a variable declared with the let: directive -->\r\n</Field>\r\n```\r\n\r\nHere's a REPL that illustrates the same issue: https://svelte.dev/repl/94dfa039dfd645ad8265609377873457?version=3.20.1\r\n\r\nMy intention is for the `Field` component to be able to access the `input` DOM element in `onMount`.\r\n\r\nI've tried passing a variable `input` into `Field` as a prop and also binding it to the `input`, however when `onMount` is called in `Field`, it appears that the reference to the `input` element is null.\r\n\r\nIs it possible for Svelte to support this type of binding?","updated_at":"2020-03-19T02:27:31Z","created_at":"2020-03-19T02:27:31Z","creator_user_login":"stefan-pdx"}
{"number":3617,"comment_id":"633732642","body":"I would love to see this features as well, since it makes component composition and reuse a lot easier.","updated_at":"2020-05-25T22:31:02Z","created_at":"2020-05-25T22:31:02Z","creator_user_login":"Stazer"}
{"number":3617,"comment_id":"659909614","body":"I also wanted to use this in a way to provide a context for child components, where the parent component contains a bunch of boilerplate that the child components shouldn't have to worry about, and the parent provides two-way bindable variables that children can take as props.\r\n\r\nSlots seem like these magical things that easily break when you play around with them too aggressively, I guess the benefits of a compiler don't matter when Svelte treats slots as though _literally anything_ might fill them.","updated_at":"2020-07-17T07:05:09Z","created_at":"2020-07-17T07:05:09Z","creator_user_login":"marcusnewton"}
{"number":3617,"comment_id":"692361671","body":"I happened upon this issue while investigating a slightly different usage. May I ask why it isn't possible to do the following. Am I misunderstanding the question? I get that the `let:item` directive is a nice shorthand, yet isn't this still possible?\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n\r\n<script>\r\n\timport Component from './Component.svelte';\r\n\t\r\n\tlet item = 'hello, world';\r\n</script>\r\n\r\n<Component {item}>\r\n\t<p>\r\n\t\tInside the item is {JSON.stringify(item)}\r\n\t</p>\r\n\t\r\n\t<input type=\"text\" name=\"name\" bind:value={item} />\r\n</Component>\r\n```\r\n\r\n```svelte\r\n<!-- Component.svelte -->\r\n\r\n<script>\r\n\texport let item;\r\n</script>\r\n\r\n<p>\r\n\tOutside the item is {JSON.stringify(item)}\r\n</p>\r\n\r\n<slot />\r\n```","updated_at":"2020-09-14T22:56:53Z","created_at":"2020-09-14T22:56:53Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"692675002","body":"@kjmph Seems to be working in the REPL: https://svelte.dev/repl/72d0ab2799a04343bc8054176ee4208d?version=3.25.0","updated_at":"2020-09-15T12:13:35Z","created_at":"2020-09-15T12:13:35Z","creator_user_login":"marcusnewton"}
{"number":3617,"comment_id":"692738878","body":"Thanks for placing it in the REPL. It seems that the `let:item` directive doesn't work, yet using it verbosely works? Unless I misunderstand the issue.","updated_at":"2020-09-15T14:07:30Z","created_at":"2020-09-15T14:07:30Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"693127925","body":"@kjmph Well that won't work since you can't redeclare `item`, but you can do this: https://svelte.dev/repl/0133298870654061a2fb8ed5b8a8f65e?version=3.25.0","updated_at":"2020-09-16T02:16:35Z","created_at":"2020-09-16T02:16:35Z","creator_user_login":"marcusnewton"}
{"number":3617,"comment_id":"693145703","body":"Ahah, I think you showed the problem. If we change Component.svelte to:\r\n\r\n```svelte\r\n<script>\r\n\texport let item;\r\n</script>\r\n\r\n<p>\r\n\tOutside the item is {JSON.stringify(item)}\r\n</p>\r\n\r\n<slot foo={item+\"nana\"} />\r\n```\r\n\r\nThen the output is:\r\n\r\n<img width=\"273\" alt=\"Screen Shot 2020-09-15 at 11 14 50 PM\" src=\"https://user-images.githubusercontent.com/1075649/93288171-4527ee80-f7a9-11ea-990e-fe5573751d1a.png\">\r\n\r\nInstead, if we really want two way mutation between parent and child, then it is best to represent it like this:\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n\r\n<script>\r\n\timport {item} from './stores.js';\r\n\timport Component from \"./Component.svelte\";\r\n\t$item = 'hello, worl';\r\n</script>\r\n\r\n<Component>\r\n\t<p>\r\n\t\tInside the item is {JSON.stringify($item)}\r\n\t</p>\r\n\t\r\n\t<input type=\"text\" name=\"name\" bind:value={$item} />\r\n</Component>\r\n```\r\n```svelte\r\n<!-- Component.svelte -->\r\n\r\n<script>\r\n\timport {item} from './stores.js';\r\n\t$: $item = $item.replace('world', 'cow');\r\n</script>\r\n\r\n<p>\r\n\tOutside the item is {JSON.stringify($item)}\r\n</p>\r\n\r\n<slot />\r\n```\r\n```javascript\r\n// stores.js\r\n\r\nimport {writable} from 'svelte/store';\r\n\r\nexport const item = writable('hello, world');\r\n```\r\n\r\nJust type the letter `d` in the input box, and watch the input value change.","updated_at":"2020-09-16T03:19:06Z","created_at":"2020-09-16T03:19:06Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"693693369","body":"This question subtly brought up a few points about Svelte I didn't understand. Which is why I have commented and looked into it at a greater depth. @trenta3, your link to show the problem results in a `Non-Image content-type returned` response; so it is hard to figure out what the issue is. I realize two things, using stores is a bit boilerplate. So, it seems people want to do things like this:\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n\r\n<script>\r\n  import Component from \"./Component.svelte\";\r\n  let items = [\"foo\", \"bar\", \"mung\"];\r\n</script>\r\n\r\n{#each items as item}\r\n  <Component bind:item>\r\n    <p>\r\n      Inside the item is {JSON.stringify(item)}\r\n    </p>\r\n\r\n    <input type=\"text\" name=\"name\" bind:value={item} />\r\n  </Component>\r\n{/each}\r\n```\r\n```svelte\r\n<!-- Component.svelte -->\r\n\r\n<script>\r\n  export let item;\r\n</script>\r\n\r\n<p>\r\n  Outside the item is {JSON.stringify(item)}\r\n</p>\r\n\r\n<slot {item} />\r\n```\r\n\r\nAs well, people also want to have references go back to the component. However, at the time the component is mounted, the slot isn't mounted. So, there would have to be a callback to the component when the slot is mounted. Something like this:\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n\r\n<script>\r\n  import Component from \"./Component.svelte\";\r\n  import { onMount } from \"svelte\";\r\n\r\n  let input;\r\n  let comp;\r\n\r\n  onMount(() => {\r\n      comp.onSlotMount(input);\r\n  });\r\n</script>\r\n\r\n<Component bind:input bind:this={comp}>\r\n  <input bind:this={input} />\r\n</Component>\r\n\r\n```\r\n```svelte\r\n<!-- Component.svelte -->\r\n\r\n<script>\r\n  export let input = undefined;\r\n\r\n  export function onSlotMount(input) {\r\n      input.value = 'insert value';\r\n  }\r\n</script>\r\n\r\n<slot {input} />\r\n```\r\n\r\nIt all has to do with how binding works. It is very non-intuitive, yet makes sense once grokked.","updated_at":"2020-09-16T22:14:34Z","created_at":"2020-09-16T22:13:12Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"695807921","body":"@kjmph I can see my image correctly when visualizing it in GitHub: https://user-images.githubusercontent.com/10828817/71427308-93471000-26b7-11ea-84fd-b5b1a970fd5a.png\r\nConcerning all the updates, I didn't have time to read them yet because of quite busy days.\r\nI will come back to it though in a few days.","updated_at":"2020-09-20T16:40:21Z","created_at":"2020-09-20T16:40:21Z","creator_user_login":"trenta3"}
{"number":3617,"comment_id":"696861480","body":"Ah, I was referencing the [REPL](https://camo.githubusercontent.com/0c09c28e6adac196ac9f60dfc73a7ead56354cc6/68747470733a2f2f7376656c74652e6465762f7265706c2f62386466616636353539303334343262386331343137656332366137393633663f76657273696f6e3d332e31322e31) link that was shared. If you would like to re-post that, maybe we could coerce a solution to your liking.\r\n\r\nI think the point I've been circling, and why I got involved on the issue thread is that the `let:item` is confusing, and also not needed. I'm going to mess up an explanation since I don't know Svelte internals. However, it appears the problem is that the slot's bind doesn't have a direct reference to the variable stored in the component itself. If we disable the warning message in Svelte, and allow us to bind to the `let:item` we find that we don't receive updates from the component. I'm guessing this is because `let:item` is a copy, which explains why the let directive can accept a different variable name in the slot. Thus, even if input is bound to the `let:item`, it is bound to a local copy in the slot, which isn't re-copied until the slot is re-hydrated.\r\n\r\nThus, with that understanding, it should be hopefully clearer that the item needs to have a location/variable that the compiler can see in the App for the slot to bind to, so that the data flows reactively. Thus, the storage should be somewhere the compiler can see it, either through a `writable` via `svelte/store` or through variables in the App `<script>` section. This means that you can bind the item, and pass it direct to the Component, e.g. `<Component bind:item>`. Also, the slot can bind item directly, since the storage is in a known location.\r\n\r\nTechnically, in my example above, this means that when mounting the slot in the Component, e.g. `<slot item={item} />`, the slot props do not require the item being passed back to the slot, since the slot can reference it directly. It could be written as `<slot />`.\r\n\r\nNow, I'm not a Svelte dev, so I'm sure I misused some of that terminology. Does this help?\r\n","updated_at":"2020-09-22T17:22:02Z","created_at":"2020-09-22T17:19:34Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"1005910277","body":"I did some experiments:\r\n\r\n1. Cannot bind to store (slot prop) value inside slot; only the initial value is used\r\n2. Can set to store (slot prop) with `store.set(...)`\r\n3. Compiler refuse to compile `bind:value={$store}`\r\n\r\nCode:\r\nhttps://svelte.dev/repl/d8122e3e66a24df6b14706c70fce5cd8?version=3.44.3\r\n\r\nSo, if I pass store (slot prop) as prop of an inner component, it works.\r\n\r\nI think the issue is that the compiler is unwilling to use store not defined at top level, despite it can compile the code successfully.","updated_at":"2022-01-06T11:11:32Z","created_at":"2022-01-05T17:07:57Z","creator_user_login":"iacore"}
{"number":3617,"comment_id":"1006200401","body":"Hello @locriacyber, Yes, as I attempted to address with my fumbling paragraph: `Thus, the storage should be somewhere the compiler can see it, either through a writable via svelte/store or through variables in the App <script> section. This means that you can bind the item, and pass it direct to the Component, e.g. <Component bind:item>. Also, the slot can bind item directly, since the storage is in a known location.`\r\n\r\nYour example is still passing a reference to the writable instance through to the slot, and out again to the Inner component. The Inner component needs to be written in a way that knows to subscribe to updates to the storable. i.e. with the dollar sign. Although, I will comment, the passing of the reference as a prop of an inner component gets around the \"Stores must be declared at the top level of the component (this may change in a future version of Svelte)\" error. So, that is pretty interesting.\r\n\r\nI never heard back from @trenta3, so I'm guessing what his usage is, but the fundamental problem that flows oddly for people is that slots get a copy of the variable when it is a discrete type. They can edit that copy, and would only see local changes. Thus, this is why the compiler won't allow us to bind variables that have been declared with a let. Now, if the compiler subtly noticed that someone wants to bind to a let, and added an instance of a storable behind the scenes, maybe that would work. Haha, silly.\r\n","updated_at":"2022-01-06T01:01:28Z","created_at":"2022-01-06T01:01:28Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"1006212747","body":"@locriacyber, if you want a laugh, change your App.svelte component to:\r\n\r\n```svelte\r\n<script>\r\n\timport DataContainer from './DataContainer.svelte'\r\n\timport Inner from './Inner.svelte'\r\n\texport let texty;\r\n</script>\r\n\r\n<div>\r\n\t<DataContainer let:text={text}>\r\n\t\t<Inner text={text}/>\r\n\t\t<p>App Truth: {text.subscribe(t => texty=t)&&texty}</p>\r\n\t</DataContainer>\r\n</div>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tborder: solid 2px black;\r\n\t}\r\n</style>\r\n```\r\n\r\nI think that goes a long way to show why slots behave contrary to developer expectations.","updated_at":"2022-01-06T01:35:29Z","created_at":"2022-01-06T01:32:11Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"1006489686","body":"Seems like we need slots to be compiled as anonymous components to fix slot-related issues like #5720, but then I don't know about which syntax to use.","updated_at":"2022-01-06T11:14:45Z","created_at":"2022-01-06T11:14:45Z","creator_user_login":"iacore"}
{"number":3617,"comment_id":"1006766006","body":"Can you explain how an anonymous component would fix this? The contents of the parent inside the slotted area is treated as a component that is passed to the child component, and the child component is responsible for copying the parent's slotted component into the slot. Thus, the compiler has restrictions on what it can do when generating the parent slotted component..","updated_at":"2022-01-06T17:21:52Z","created_at":"2022-01-06T17:21:52Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"1006969901","body":"The `bind:` directive can be used if slot content has the all features of normal components.","updated_at":"2022-02-27T14:10:22Z","created_at":"2022-01-06T22:07:59Z","creator_user_login":"iacore"}
{"number":3617,"comment_id":"1051233048","body":"I'm confused why this issue never went anywhere. This seems like a bug to me. If I make a component like this:\r\n```svelte\r\n<script>\r\n\tlet value = \"text\";\r\n</script>\r\n\r\n<input bind:value> {value}\r\n```\r\neverything works as expected. The input's value is bound to the value variable.\r\n\r\nHowever, if I do the exact same thing using a slot, it throws the error `Cannot bind to a variable declared with the let: directive`.\r\n```svelte\r\n<!-- Component.svelte -->\r\n<script>\r\n\texport let value = \"text\";\r\n</script>\r\n\r\n<slot {value}/> {value}\r\n```\r\n```svelte\r\n<script>\r\n\timport Component from \"./Component.svelte\";\r\n</script>\r\n\r\n<Component let:value>\r\n\t<input bind:value>\r\n</Component>\r\n```\r\nAnd it's not like this binding is impossible, because it can easily be solved by using some boilerplate to create an intermediary variable between the 2 components.\r\n```svelte\r\n<script>\r\n\timport Component from \"./Component.svelte\";\r\n\tlet value;\r\n</script>\r\n\r\n<Component bind:value>\r\n\t<input bind:value>\r\n</Component>\r\n```\r\n\r\nSo from my understanding, what's happening is something like this.\r\n![svelte let_value bind_value drawio](https://user-images.githubusercontent.com/59858341/155789369-ca320be9-2b53-4353-8a59-4c729c05d36f.svg)\r\nWhy is it that using a slot requires creating an intermediary variable? Is there something I'm missing?\r\n\r\nIf you only have 1 component, this isn't too bad, but if you have lots of components you have to create a variable for each one. `let value, value2, value3, value4 ...`\r\n\r\nIf I can be of any help in fixing this let me know. I would be happy to submit a PR if someone could point me in the right direction. This issue makes building composable components very impractical since in order to consume them you must define your own variable to bind to.\r\n\r\n","updated_at":"2022-02-25T20:28:37Z","created_at":"2022-02-25T20:28:37Z","creator_user_login":"JacobZwang"}
{"number":3617,"comment_id":"1077417546","body":"Now this is a real show stopper, we need to address this asap...\r\nit makes it very hard to reuse components :(","updated_at":"2022-03-24T09:29:41Z","created_at":"2022-03-24T09:29:41Z","creator_user_login":"sourcegr"}
{"number":3617,"comment_id":"1138890183","body":"@JacobZwang I agree, this feels more like a missing feature than an intentional limitation. Perhaps it's just an honest oversight üòÖ\r\n\r\nI was struggling with this for a while. I was trying to build a form component that abstracts things like loading state, error state, dirty state, submit & reset buttons, etc. Binding to a slot variable _felt_ like something that _should_ intuitively work for the inputs that end up being children of the form. The solution/workaround you posted worked perfectly for me.\r\n\r\nFor those curious, here's a working repl to demonstrate:\r\nhttps://svelte.dev/repl/f4d7f40f5f9b41d0b8a6218900b017ae?version=3.48.0","updated_at":"2022-05-26T18:35:58Z","created_at":"2022-05-26T18:33:49Z","creator_user_login":"crowdozer"}
{"number":3617,"comment_id":"1138941896","body":"Hello, I know I've clumsily tried explaining.. I'll try again. The let directive is a one way binding. See the corresponding Svelte code:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/b5aaa6641b7ce1a6c64f9593b5afe0c4ba457546/src/compiler/compile/nodes/Binding.ts#L51-L54\r\n\r\nThis is because when the component mounts, it doesn't see the slot until it is mounted later. In fact, the reason formState needs to be defined as an empty object, is otherwise the first time it executes it would be undefined and throw an error. Then, later when onMount is called in the Form component, it tries to rebind the formState. This will rewrite the formState variable in the App with the new formState, thus re-rendering the slot. This is why bind is required, the App's formState needs to be a variable that can be referenced/written. Let won't work because it is intentionally a one-way bind.\r\n\r\nDoes this help? What you wrote is precisely correct @crowdozer; that's the only way to pass back from slot to parent to grandparent.","updated_at":"2022-05-26T19:39:25Z","created_at":"2022-05-26T19:39:25Z","creator_user_login":"kjmph"}
{"number":3617,"comment_id":"1217966326","body":"Could the maintainers clarify, is the lack of support for two-way binding to variables declared with the let directive due to technical limitations in Svelte's current reactivity system, some design decision or something else?\r\n\r\nTo me this seems like it would be a very useful feature, especially when designing reusable containers for forms and input elements.","updated_at":"2022-08-17T12:49:17Z","created_at":"2022-08-17T12:49:17Z","creator_user_login":"FeldrinH"}
{"number":3617,"comment_id":"1467286851","body":"Please add this to new features list","updated_at":"2023-03-14T03:11:45Z","created_at":"2023-03-14T03:11:45Z","creator_user_login":"matheusbenedet"}
{"number":3617,"comment_id":"1468466983","body":"You can use a store","updated_at":"2023-03-14T16:51:15Z","created_at":"2023-03-14T16:51:15Z","creator_user_login":"iacore"}
{"number":3617,"comment_id":"1697655493","body":"Its not a bug and works exactly as described, however the more i am developing components the more it is starting to bother me. I have some workarounds in place, but they make the code far more confusing.\r\n\r\nI have added a REPL with a super simple example of how I would love it to work.\r\n\r\nThe REPL is of course broken\r\nhttps://svelte.dev/repl/b94918ce32bc4a5ba5c42f50020c3ee3?version=4.2.0","updated_at":"2023-08-29T15:20:29Z","created_at":"2023-08-29T15:20:29Z","creator_user_login":"whishkid"}
{"number":4495,"comment_id":"596735609","body":"related #4516\r\n`$: $inner = \"other new string\";` is a \"one time reactive statement\", those run before reactive statements, `$inner` was still undefined when you attempted to change its value\r\n\r\nanother fix could be to define your nested store within the static top level block : \r\n```js\r\nlet { inner } = $store\r\n$: ({ inner } = $store);\r\n```","updated_at":"2020-03-09T19:27:04Z","created_at":"2020-03-09T19:27:04Z","creator_user_login":"pushkine"}
{"number":4458,"comment_id":"591379608","body":"@Conduitry you are awaiting some clarifications from my side (seeing the tag ;)) ?\r\nThanks","updated_at":"2020-02-26T11:29:28Z","created_at":"2020-02-26T11:29:28Z","creator_user_login":"farfromrefug"}
{"number":4468,"comment_id":"612662595","body":"I ran into the same issue while making a draggable bottom sheet component where the spring used for snapping had a tendency to jump at start. Your fix inside the spring function resolved the issue so hope to see it merged. :thumbsup:","updated_at":"2020-04-12T19:23:14Z","created_at":"2020-04-12T19:12:37Z","creator_user_login":"johanbissemattsson"}
{"number":4320,"comment_id":"581020037","body":"Hi @1kindjune - any news on the repro for this?\r\n\r\nI've seen a similar issue myself, but it was definitely something that I had done, and not a problem with Svelte per-se. Where do the labels in your nav bar come from? Are they loaded dynamically, passed in, or hard-coded?","updated_at":"2020-02-01T11:18:10Z","created_at":"2020-02-01T11:18:10Z","creator_user_login":"antony"}
{"number":4320,"comment_id":"582971954","body":"I seem to have the same issue. After upgrading to the current version, some things broke. One was that each-blocks threw exceptions due to the unexpected passing of undefined as a value. And just as in @1kindjune 's case, logging to the console revealed that the value I was looping in fact did not contain any undefined values.\r\n\r\nA comparable error happened in another context: A component which was rendered inside of an each-block, created an empty component AHEAD of the correctly rendered ones. The cause was again that the value that was passed to the component was undefined (though not in the logs).\r\n\r\nAnyway, I have one special circumstance: In both of my cases the error only occures when I rerender the component using the dom-code generated by the svelte-compiler and replacing a component that was mounted in that place before. Rendering the component for the first time (and thereby replacing the serverside rendered version of this same component) worked.\r\n\r\nI also had another error in connection with the update and it may have the same cause:\r\n\r\nI had a variable which (when updated) didn't trigger an update of the dom when directly used within the template as text (like `{myVariable}`) or for html properties (like `hidden={myVariable}`) Anyhow it did trigger an update of a reactive function (`$: { if (myVariable) doSomething() }`) and it also did trigger an update of a if-block.\r\n\r\nI have no idea whether this is connected with the above error or not. But everything occured after updating the svelte version today and worked without problems before.\r\n\r\nI hope this might help finding the cause! Cheers, Chris","updated_at":"2020-02-06T15:55:14Z","created_at":"2020-02-06T15:55:14Z","creator_user_login":"2WeltenChris"}
{"number":4320,"comment_id":"582983918","body":"Sorry - just double checked: The issue does **not** only occur when rerendering a component but each time a component is replacing another component. Only the first time the component gets rendered it gets rendered correctly.\r\n\r\nThis is how my framework uses Svelte (the short version of it):\r\n\r\nFirst the components get compiled as follows:\r\n\r\n```\r\nsvelte.compile(code, {\r\n            filename: file,\r\n            name: tag,\r\n            generate: 'dom',\r\n            format: 'esm',\r\n            css: true\r\n})\r\n```\r\n\r\nEverything gets bundled (using rollup and iife format) and integrated into a small code snippet:\r\n\r\n```\r\nlet code = `\r\n                  document.head.innerHTML = ''\r\n                  document.body.innerHTML = ''\r\n                  ${domBundleCode}\r\n                  new SvelteComponent.default({\r\n                    target: document.body,\r\n                    props: {\r\n                      data: data\r\n                    }\r\n                  })\r\n                `\r\n```\r\n\r\nThis code then gets transferred to the client via websocket and instantiated like this:\r\n\r\n```\r\nnew Function('data', code)(data)\r\n```\r\n\r\nThe first time this happens, `document.body` contains the serverside rendered version of the page (components). In that case everything works just fine.\r\n\r\nThe second time it replaces another page. Then the error occurs.","updated_at":"2020-02-06T16:19:22Z","created_at":"2020-02-06T16:19:22Z","creator_user_login":"2WeltenChris"}
{"number":4471,"comment_id":"1250040679","body":"Shouldn't be marked stale by the way, the problem is still present.","updated_at":"2022-09-17T15:36:58Z","created_at":"2022-09-17T09:53:14Z","creator_user_login":"aradalvand"}
{"number":4400,"comment_id":"1000568787","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-23T23:55:50Z","created_at":"2021-12-23T23:55:50Z","creator_user_login":"stale[bot]"}
{"number":4459,"comment_id":"590898566","body":"REPL : https://svelte.dev/repl/344426264c4540da9f79a60ad8b02d89?version=3.19.1\r\n\r\n![chrome_2020-02-25_15-38-12](https://user-images.githubusercontent.com/30108880/75257207-e9821d80-57e4-11ea-822f-4b7a50d15554.png)\r\n\r\nthe REPL is on dev mode though\r\nmy guess is that it's from the svelte custom event dispatching","updated_at":"2020-02-25T14:43:43Z","created_at":"2020-02-25T14:39:02Z","creator_user_login":"pushkine"}
{"number":4484,"comment_id":"592682307","body":"If you're looking for general guidelines, I'd suggest taking a looking at the Contributing guide here https://github.com/sveltejs/svelte/blob/master/CONTRIBUTING.md","updated_at":"2020-02-28T19:14:59Z","created_at":"2020-02-28T19:14:59Z","creator_user_login":"StephenStrickland"}
{"number":4484,"comment_id":"593416087","body":"PR #4419 came with a blog post about the experience:\r\nhttps://www.swyx.io/writing/svelte-contributing/","updated_at":"2020-03-02T14:01:03Z","created_at":"2020-03-02T14:01:03Z","creator_user_login":"johnmuhl"}
{"number":4484,"comment_id":"1100523810","body":"@kanishk30 is there a particular guide you are looking for, that is not covered by the contributing guide? https://github.com/sveltejs/svelte/blob/master/CONTRIBUTING.md","updated_at":"2022-04-16T03:25:42Z","created_at":"2022-04-16T03:25:42Z","creator_user_login":"tanhauhau"}
{"number":4317,"comment_id":"581030838","body":"This isn't specific to generators. If `foo` were a function that simply returned an array and you did `{#each foo() as ...}`, this also occurs.\r\n\r\nI'm not sure yet how much of this is a bug. I think the `bind:this={things[f.name]}` invalidates `f` (perhaps erroneously?) which then invalidates `foo`, which causes the infinite loop.","updated_at":"2020-02-01T13:33:38Z","created_at":"2020-02-01T13:33:38Z","creator_user_login":"Conduitry"}
{"number":4317,"comment_id":"683442965","body":"Is this the same bug, just a different incarnation?\r\n\r\nExample (note, there's an infinite loop when you uncomment the breaking code):\r\nhttps://svelte.dev/repl/c0a3494b41f14ebd84a5f2f3f9747fa1?version=3.24.1\r\n\r\n### Works fine as destructured `{ id }`:\r\n\r\n```svelte\r\n<script>\r\n\tlet arr = []\r\n</script>\r\n{#each [{ id: 'working-0' }, { id: 'working-1' }] as { id }, index}\r\n\t<div bind:this={arr[id]}>all is fine, renders once</div>\r\n{/each}\r\n```\r\n\r\n### Breaks when `item.id` is not destructured:\r\n\r\n```svelte\r\n<script>\r\n\tlet arr = []\r\n</script>\r\n{#each [{ id: 'not-working-0' }, { id: 'not-working-1' }] as item, index}\r\n\t<div bind:this={arr[item.id]}>INFINITE LOOP!</div>\r\n{/each}\r\n```","updated_at":"2020-08-30T16:47:41Z","created_at":"2020-08-30T16:46:42Z","creator_user_login":"arxpoetica"}
{"number":4573,"comment_id":"875693835","body":"Have the same issue here.","updated_at":"2021-07-07T15:18:09Z","created_at":"2021-07-07T15:18:09Z","creator_user_login":"xiaohk"}
{"number":4573,"comment_id":"1666741398","body":"Is this going to be fixed at some point? I'm making a live leaderboard which might have a bunch of position changes, and the animation breaks because of this.","updated_at":"2023-08-06T06:33:37Z","created_at":"2023-08-06T06:33:37Z","creator_user_login":"longnguyen2004"}
{"number":4531,"comment_id":"869054986","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:43Z","created_at":"2021-06-26T20:03:43Z","creator_user_login":"stale[bot]"}
{"number":4516,"comment_id":"595748425","body":"I don't think either of these are bugs, but they're probably something we should document somewhere.\r\n\r\nThe second one definitely isn't a bug, because we need to topologically sort the reactive blocks according to what depends on what. The first reactive block depends on `value` and the second one assigns `value` so the second one happens first during each update loop.\r\n\r\nGiven that we're reordering the blocks, having them be 'inline' with the rest of rest of the static top-level statements doesn't really make sense (not to mention the question of whether it would be considered a breaking change).","updated_at":"2020-03-06T12:33:00Z","created_at":"2020-03-06T12:33:00Z","creator_user_login":"Conduitry"}
{"number":4516,"comment_id":"595768124","body":"What about adding a dev warning for reactive statements that aren't reactive ? \r\nI mean what do they do apart from relocating your code toward the end of the block ? You could do that yourself anyway so what's the point of even allowing them in the first place ?\r\n\r\nAnd yes that really should be highlighted in the docs since being able to pool together static top level and reactive statements heavily implies that they can interact with each other\r\n\r\nedit : another idea could be to have the officially supported formatter reorder the lines in the order they run in","updated_at":"2020-04-04T17:20:59Z","created_at":"2020-03-06T13:30:31Z","creator_user_login":"pushkine"}
{"number":4516,"comment_id":"596054148","body":"I wrote a custom lint rule that tries to identify static assignments in reactive blocks, it's not very smart but it helped us catch a couple instances of this sort of thing.","updated_at":"2020-03-07T06:46:22Z","created_at":"2020-03-07T06:46:22Z","creator_user_login":"tivac"}
{"number":3852,"comment_id":"549833086","body":"A component's 'unknown prop' warning is _supposed_ to be suppressed if the component uses `$$props` at all (#2881). Is this not what you're seeing? Do you have a repro?","updated_at":"2019-11-05T13:56:38Z","created_at":"2019-11-05T13:56:38Z","creator_user_login":"Conduitry"}
{"number":3852,"comment_id":"552977404","body":"Thanks for the response. I believe that I was still getting it, but I'll go back and post a snippet when I get back to a computer.","updated_at":"2019-11-12T16:41:48Z","created_at":"2019-11-12T16:41:48Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"552985659","body":"In this specific case, the property looks like HTML5 user-defined data.\r\n\r\nMaybe take hyphenated names and make the second word of the hyphen a key inside the first name?\r\n\r\nSuch as:\r\n```\r\n<Foo data-test=\"some data\">\r\n//... inside Foo\r\n<script>\r\nexport let data;\r\n</script>\r\n{data.test}\r\n```\r\n","updated_at":"2019-11-12T16:58:44Z","created_at":"2019-11-12T16:58:44Z","creator_user_login":"ghost"}
{"number":3852,"comment_id":"558039545","body":"True, but I am not sure that would be the only use case.","updated_at":"2019-11-25T08:09:02Z","created_at":"2019-11-25T08:09:02Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"558063041","body":"@dkondrad @ahopkins yeah I think this is a bad example. Ignoring `data-` prefixes, something as simple as:\r\n```\r\n<Profile avatarType=\"xxx\">\r\n```\r\n\r\nwhere I'd really prefer to declare it as:\r\n\r\n```\r\n<Profile avatar-type=\"xxx\">\r\n```","updated_at":"2019-11-25T09:17:26Z","created_at":"2019-11-25T09:17:26Z","creator_user_login":"antony"}
{"number":3852,"comment_id":"558625571","body":"@antony I agree. It just so happened that my example I was using something that required a `data-` property.\r\n\r\nI agree with your example.","updated_at":"2019-11-26T13:22:39Z","created_at":"2019-11-26T13:22:25Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"558743403","body":"@ahopkins Did you ever get a reproduction for the 'unknown prop' warning persisting despite the component referencing `$$props`?","updated_at":"2019-11-26T17:46:52Z","created_at":"2019-11-26T17:46:52Z","creator_user_login":"Conduitry"}
{"number":3852,"comment_id":"563366322","body":"Of course I cannot recreate it now ...\r\n\r\n```\r\nmyCredibility -= 1\r\n```\r\n\r\nAs stated, as soon as `$$props` is referenced, the warning goes away. Perhaps I had this on an older build of svelte?\r\n","updated_at":"2019-12-09T18:22:18Z","created_at":"2019-12-09T18:22:18Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"563891066","body":"@Conduitry I am not sure that this was ready to be closed. The warning was sort of a side matter.\r\n\r\nI think the issue (as displayed by @antony) is still a valid feature request. Unless you are saying this is not something that you would entertain?","updated_at":"2019-12-10T06:47:27Z","created_at":"2019-12-10T06:47:27Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"564817953","body":"Yeah, fair, we can re-open this.","updated_at":"2019-12-12T02:10:42Z","created_at":"2019-12-12T02:10:42Z","creator_user_login":"Conduitry"}
{"number":3852,"comment_id":"565115610","body":"This needs to be done before Rich comes along and does this:\r\n\r\n```jsx\r\n<Profile avatar_type=\"xxx\">\r\n```\r\n\r\nBut seriously... not sure what the behaviour should be if we did this:\r\n\r\n```jsx\r\n<Profile avatarType=\"xxx\"  avatar-type=\"xxx\">\r\n```\r\n\r\n```js\r\nexport let avatarType\r\n```\r\n\r\nI suppose we could consider `avatar-type` to be equivalent to `avatarType` and thus act as if the same prop had been declared twice, which is currently to throw an error saying \"Attributes need to be unique (5:18)\" - perhaps this message needs to say something like \"Attributes need to be unique, excluding hyphens\" or something far more meaningful than that.\r\n\r\nAnother weird edge case:\r\n\r\n```jsx\r\n<Profile avatar--type=\"xxx\">\r\n```\r\n\r\nI'd suggest that the above is left intact, thus ending up as the (un-addressable) prop `avatar--type`.","updated_at":"2019-12-12T17:59:26Z","created_at":"2019-12-12T17:56:36Z","creator_user_login":"antony"}
{"number":3852,"comment_id":"568196392","body":"Not knowing the feasibility of this... I like that suggestion. ","updated_at":"2019-12-21T17:08:10Z","created_at":"2019-12-21T17:08:10Z","creator_user_login":"ahopkins"}
{"number":3852,"comment_id":"582827705","body":"And what about when it's compiling to a custom element? When adopting Svelte, I tried to keep the hyphenated attribute names I'd previously had when writing CEs from scratch and couldn't figure it out in the time I had, so gave up. Do web components get access to `$$props` set via hyphenated attributes? I wasn't aware of `$$props` at all, so I didn't try it.","updated_at":"2020-02-06T10:05:01Z","created_at":"2020-02-06T10:05:01Z","creator_user_login":"morewry"}
{"number":3852,"comment_id":"637714431","body":"@morewry It looks like they don't. I just tried it.\r\n\r\nI'd really like to see this feature implemented. Without it, it seems the only option is to pass in attributes as snake_case, which is inconsistent with the rest of the DOM elements. I can't even seem to get camelCase to work.","updated_at":"2020-06-02T18:05:04Z","created_at":"2020-06-02T18:05:04Z","creator_user_login":"dkniffin"}
{"number":3852,"comment_id":"639479464","body":"The solution was already outlined by Mr @Rich-Harris in #875, just make the camelCase to kebab-case translation possibility.","updated_at":"2020-06-05T13:27:26Z","created_at":"2020-06-05T13:27:26Z","creator_user_login":"Ciantic"}
{"number":3852,"comment_id":"664407932","body":"We are making transition from using polymer web components and upgrading our existing component library to use svelte web components where applicable. Inability to define hyphenated props is a blocker for us. ","updated_at":"2020-07-27T13:49:00Z","created_at":"2020-07-27T13:49:00Z","creator_user_login":"osamamaruf"}
{"number":3852,"comment_id":"665037015","body":"@osamamaruf I've faced this problem too.\r\nAs temporary solution I've written my own wrapper for CustomElement, where all camelCased attributes are converted to dash-case:\r\n```js\r\nimport MyCustomComponent from './MyCustomComponent.svelte';\r\n\r\nclass MyCustomComponentWrapper extends MyCustomComponent {\r\n  static get observedAttributes() {\r\n    return (super.observedAttributes || []).map(attr => attr.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase());\r\n  }\r\n\r\n  attributeChangedCallback(attrName, oldValue, newValue) {\r\n    attrName = attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase());\r\n    super.attributeChangedCallback(attrName, oldValue, newValue);\r\n  }\r\n}\r\n\r\ncustomElements.define('my-custom-component', MyCustomComponentWrapper);\r\n```\r\n\r\nMyCustomComponent.svelte\r\n```svelte\r\n<script>\r\n  export let someDashProperty;\r\n</script>\r\n\r\n<svelte:options tag={null} />\r\n\r\n{someDashProperty}\r\n```\r\n\r\nThen you can use it in this way:\r\n```html\r\n<my-custom-component some-dash-property=\"hello\"></my-custom-component>\r\n```\r\n\r\nHope it helps until fix is coming","updated_at":"2020-07-30T09:48:11Z","created_at":"2020-07-28T13:22:41Z","creator_user_login":"oranmor"}
{"number":3852,"comment_id":"671113316","body":"Just wanted to say +1 for automatically converting `propLikeThis` to `attr-like-this`.\r\n\r\nI've been looking around for some \"best practices\" for publishing custom elements, and besides [this article](https://justinfagnani.com/2019/11/01/how-to-publish-web-components-to-npm/), I've also looked at the pattern used by the same author's [chessboard-element](https://unpkg.com/browse/chessboard-element@1.0.0-pre.10/custom-elements.json), and it considers lowercase-kebab attributes to be equivalent to camel-cased props.\r\n\r\n@oranmor's temporary solution works great in the meantime, though!","updated_at":"2020-08-09T23:22:27Z","created_at":"2020-08-09T23:22:27Z","creator_user_login":"nolanlawson"}
{"number":3852,"comment_id":"680840794","body":"@oranmor do you have a \"full\" example? I don't understand how you implement the `MyCustomComponent`.","updated_at":"2020-08-26T12:11:48Z","created_at":"2020-08-26T12:11:48Z","creator_user_login":"benkeil"}
{"number":3852,"comment_id":"680866239","body":"@benkeil in fact it is a full example.\r\nYou can see complete working repo here: https://github.com/oranmor/svelte-custom-element-dash-properties-example","updated_at":"2020-08-26T13:04:59Z","created_at":"2020-08-26T13:04:59Z","creator_user_login":"oranmor"}
{"number":3852,"comment_id":"753421333","body":"Here's one possible workaround for accessing hyphenated attributes sent into a Svelte wc. Have a `rootEl` variable, and bind it to the outermost container in your wc. Then\r\n\r\n```\r\n  onMount(() => {\r\n    tick().then(() => {\r\n      const host = rootEl.parentNode.host;\r\n      const x = host.getAttribute(\"some-attr\");\r\n```\r\n\r\nObviously that won't be reactive. But it might be good enough depending on use case. The tick() call is necessary because of this issue: https://github.com/sveltejs/svelte/issues/2227","updated_at":"2021-01-02T02:51:56Z","created_at":"2021-01-02T02:51:18Z","creator_user_login":"arackaf"}
{"number":3852,"comment_id":"827565862","body":"> But seriously... not sure what the behaviour should be if we did this:\r\n> \r\n> ```js\r\n> <Profile avatarType=\"xxx\"  avatar-type=\"xxx\">\r\n> ```\r\n> \r\n> ```js\r\n> export let avatarType\r\n> ```\r\n\r\nThis is problematic for some SVG elements which have camelcased attributes' name.\r\nThat would require a whitelist.\r\ne.g. `viewBox`","updated_at":"2021-04-27T12:26:38Z","created_at":"2021-04-27T12:26:38Z","creator_user_login":"Mouvedia"}
{"number":3852,"comment_id":"843098693","body":"Hi, I tweaked @oranmor awesome workaround a bit to inject a wrapper during build-time, leaving the original Svelte component untouched, and no corresponded wrapper component file needed. (Very useful if we have multiple WCs)\r\n\r\nFirst, I create a `customElements.define` mock with @oranmor workaround \r\n\r\n```js\r\n/* src/utils/custom-element.js */\r\n\r\nexport const customElements = {\r\n  define: (tagName, CustomElement) => {\r\n    class CustomElementWrapper extends CustomElement {\r\n      static get observedAttributes() {\r\n        return (super.observedAttributes || []).map((attr) =>\r\n          attr.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase(),\r\n        );\r\n      }\r\n\r\n      attributeChangedCallback(attrName, oldValue, newValue) {\r\n        super.attributeChangedCallback(\r\n          attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase()),\r\n          oldValue,\r\n          newValue === '' ? true : newValue, // [Tweaked] Value of omitted value attribute will be true\r\n        );\r\n      }\r\n    }\r\n\r\n    window.customElements.define(tagName, CustomElementWrapper); // <--- Call the actual customElements.define with our wrapper\r\n  },\r\n};\r\n```\r\n\r\nThen I used esbuild `inject` option to inject the above code to the top of the built file\r\n\r\n```js\r\n/* esbuild.js */\r\n\r\nimport { build } from 'esbuild';\r\nimport esbuildSvelte from 'esbuild-svelte';\r\nimport sveltePreprocess from 'svelte-preprocess';\r\n\r\n// ...\r\n    build({\r\n      entryPoints,\r\n      ourdir,\r\n      bundle: true,\r\n      inject: ['src/utils/custom-element.js'], // <--- Inject our custom elements mock\r\n      plugins: [\r\n        esbuildSvelte({\r\n          preprocess: [sveltePreprocess()],\r\n          compileOptions: { customElement: true },\r\n        }),\r\n      ],\r\n    })\r\n// ...\r\n\r\n```\r\n\r\nWhen build,  my original Svelte components like this:\r\n\r\n```svelte\r\n<!-- src/components/navbar/navbar.wc.svelte -->\r\n\r\n<svelte:options tag=\"elect-navbar\" />\r\n\r\n<!-- Svelte Component ... -->\r\n```\r\n\r\nWill have an output like this:\r\n\r\n```js\r\n// components/navbar.js\r\n\r\n(() => {\r\n  // src/utils/custom-element.js\r\n  var customElements = {\r\n    define: (tagName, CustomElement) => {\r\n      // Our mocked customElements.define logic ...\r\n    }\r\n  };\r\n\r\n  // Svelte compiled code ...\r\n\r\n  customElements.define(\"elect-navbar\", Navbar_wc); // <--- This code compiled by Svelte will called our mocked function instead of actual customElements.define\r\n  var navbar_wc_default = Navbar_wc;\r\n})();\r\n```\r\n\r\nThis idea should be adaptable with other bundlers as well. I want to share this since it's might be useful, or it might be a bad solution. So, please feel free to leave feedback. Here is [the Svelte WC collection project I'm working on](https://github.com/electinth/common) using the above technique (+ WindiCSS and Storybook).","updated_at":"2021-05-18T11:43:00Z","created_at":"2021-05-18T11:43:00Z","creator_user_login":"Th1nkK1D"}
{"number":3852,"comment_id":"869748128","body":"2 years and the workaround is still the best solution? üòï","updated_at":"2021-06-28T14:47:14Z","created_at":"2021-06-28T14:47:14Z","creator_user_login":"sawden"}
{"number":3852,"comment_id":"961156709","body":"It should also be noted that the workaround is for \"custom elements\" (=web components). A \"custom element\" is not the same thing as a Svelte component. \r\n\r\nI for one do not really care about web components, but would like to have all Svelte components support hyphenation in properties and component names.\r\n\r\n ","updated_at":"2021-11-04T15:29:57Z","created_at":"2021-11-04T15:29:57Z","creator_user_login":"Acmion"}
{"number":3852,"comment_id":"962444307","body":"For those who needs this so bad, I just created a vite plugin that adds kebab-case support for Svelte components  [vite-plugin-svelte-kebab-props](https://github.com/roonie007/vite-plugin-svelte-kebab-props)","updated_at":"2021-11-06T12:27:02Z","created_at":"2021-11-06T12:27:02Z","creator_user_login":"roonie007"}
{"number":3852,"comment_id":"1378950561","body":"If not using the Vite plugin, you can also watch $$props on the child component.  This does work, and you can reassign the $$props properties to internal component variables.\r\n\r\n```js\r\nlet myValue = null\r\n\r\n$: {\r\n    console.log($$props)\r\n    myValue = $$props['my-value']\r\n}\r\n```","updated_at":"2023-01-11T15:28:55Z","created_at":"2023-01-11T15:28:55Z","creator_user_login":"joelhickok"}
{"number":3852,"comment_id":"1381305231","body":"For me it's not about warnings; I've been trying to avoid using `$$props` because of the optimization problem but I'm forced to because of this. I can't create a standardized custom attribute that I can use with normal HTML elements (following the `data-*` convention) and also use it with my Svelte components.","updated_at":"2023-01-13T04:34:29Z","created_at":"2023-01-13T04:34:29Z","creator_user_login":"DoisKoh"}
{"number":3852,"comment_id":"1646884771","body":"Based on the current documentation, if you are defining a custom element, I would think that you're able to do this now by specifying an `attribute` name in the `props` section of the `customElement` part of `<svelte:options>`:\r\n\r\n```svelte\r\n<svelte:options customElement={{\r\n  tag: \"my-tag\",\r\n  props: {\r\n    myValue: { reflect: true, attribute: \"my-value\" }\r\n  }\r\n}} />\r\n\r\n<script>\r\n  export let myValue = \"\";\r\n</script>\r\n```\r\n\r\nI haven't actually tried this, and it obviously isn't an automatic solution for all properties matching up with all attributes, but it's at least *some* kind of proper solution to the problem with a direct binding, assuming you are using Svelte for custom elements. Still, an idiomatic and automatic solution that works with both custom elements and traditional Svelte components would be ideal.\r\n\r\nPerhaps there could be a `svelte:options` property for optionally mapping & syncing property names to attribute names using a lambda function, similar to `extend`, but have it also come with the option of just specifying a string instead of a lambda where the string tells the Svelte compiler to use a given strategy/implementation behind-the-scenes?\r\n\r\n```svelte\r\n<svelte:options attributes: (propName) => attributeName />\r\n<svelte:options attributes: \"kebab\" />\r\n```\r\n\r\nThen, if a value for `attributes` is set at all, it becomes implicit that all exported properties will generate corresponding attributes and be reflected back to the DOM's attributes, etc.","updated_at":"2023-07-23T16:43:10Z","created_at":"2023-07-23T16:36:16Z","creator_user_login":"willnationsdev"}
{"number":3852,"comment_id":"1687738756","body":"How do I use the `$$props` solution in conjunction with TypeScript?\r\n\r\nIf I have this in Thingy.svelte:\r\n\r\n```\r\n<script lang=\"ts\">\r\n  export let name: string\r\n  let myValue: string | undefined = undefined\r\n\r\n  $: myValue = $$props['my-value']\r\n</script>\r\n```\r\n\r\nand then invoke it with\r\n\r\n```\r\n<Thingy name=\"Bob\" my-value=\"Stuff\" />\r\n```\r\n\r\nTypeScript will complain that `my-value` isn't in the type signature.","updated_at":"2023-08-22T08:39:55Z","created_at":"2023-08-22T08:39:55Z","creator_user_login":"unikitty37"}
{"number":4371,"comment_id":"582524851","body":"```js\r\n$: console.log(\"gold\", gold);\r\n````\r\n\r\nwill do what you want.","updated_at":"2020-02-05T17:38:50Z","created_at":"2020-02-05T17:38:50Z","creator_user_login":"tivac"}
{"number":4371,"comment_id":"582546718","body":"Thanks. I figured as much. I still think that the current behaviour is unexpected and probably a bug. ","updated_at":"2020-02-05T18:29:08Z","created_at":"2020-02-05T18:29:08Z","creator_user_login":"milkbump"}
{"number":4371,"comment_id":"596805572","body":"I'm undecided about what to do here. One option would be to just put the auto declarations from reactive variables earlier, but that might not be too helpful, as I think the non-reactive references to them would just get `undefined`. Perhaps it should be a compiler error to refer to an auto declared reactive variable from the top level of the `<script>`? Are there other situations we need to worry about? What happens when someone synchronously calls a function from the top level, and _that_ refers to an auto declared variable?","updated_at":"2020-03-09T22:16:07Z","created_at":"2020-03-09T22:16:07Z","creator_user_login":"Conduitry"}
{"number":4371,"comment_id":"878333142","body":"This no longer breaks in the most recent version and instead prints `undefined`","updated_at":"2021-07-12T14:36:52Z","created_at":"2021-07-12T14:36:52Z","creator_user_login":"dummdidumm"}
{"number":4375,"comment_id":"713895091","body":"Sounded easy, but is complexer than I initially thought:\r\n\r\n1. Who is responsible for removing the properties?\r\nWhen running the action on the client does svelte's hydrate step remove the properties? Or should the action itself take into account that it could have properties from the ssr render.\r\n2. What if the property already exists?\r\nShould svelte know how to merge styles? Should hydrate unmerge properties?\r\n3. There is already an idiomatic way to set properties.\r\n`<div style=\"--color: {color}\">` works on both client and server  (Although performance with a lot of styles might be a problem) for the data-* example the [spread props](https://svelte.dev/tutorial/spread-props) could be a solution: [REPL](https://svelte.dev/repl/29ec81dd826d4f6bbf6c80d140bb88ae?version=3.29.0)\r\n (Ps. if an attribute already exists it is overwritten, [but which one depends](https://svelte.dev/repl/aaa268d3d32f40e783d2e68b48f3cc11?version=3.29.0))\r\n4. The main focus of actions is related to dom access, which you'll never have on the server. Maybe better solutions exists for the problems this tries to solve.","updated_at":"2020-10-21T22:21:43Z","created_at":"2020-10-21T21:44:46Z","creator_user_login":"bfanger"}
{"number":4375,"comment_id":"846558271","body":"Just wanted to chime in and say I think there is a strong use-case for setting SSR attributes in an action. I'm not sure that the main focus for users of actions is dom access, but rather abstractions of element logic that can be shared, and that can certainly apply on the server. I know a bunch of my most commonly used actions would really benefit from being able to render certain attributes in an SSR context, outside of dom access.\r\n\r\nFor me at least the answers to the questions raised (1. and 2.) are simple ‚Äî behave in the same way as if the attribute was written in markup. If some hydrated code clobbers the attribute the action set, so be it, that's up to both implementer and user to work around. I don't think it has to be very nuanced or complex in terms of behaviour.\r\n\r\nI'd just love a way to be able to do something like this\r\n\r\n```js\r\nfunction action(...) {\r\n  // clientside only stuff\r\n\r\n  return {\r\n    // SSR-able attribute map\r\n    attributes() {\r\n\t  return {\r\n\t    attr: val\r\n\t  }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd have those attributes rendered in an SSR context as well as clientside. ","updated_at":"2021-05-23T12:50:02Z","created_at":"2021-05-23T12:50:02Z","creator_user_login":"madeleineostoja"}
{"number":4375,"comment_id":"926380315","body":"Highly relevant use case mentioned in another issue on spreading events, where this feature would've helped with:\r\n\r\n> I also looked into how to create renderless components such as React Aria and Headless UI in Svelte.\r\n> Since actions only run in the browser, aria-attributes would not be present on the server-side rendered HTML, making actions a non-starter. I guess you could use a combination of spread props for aria-attributes and actions for event listeners, but that complicates the API quite a bit. Being able to spread event props would make it a lot easier to write renderless components.\r\n\r\n_Originally posted by @LeanderG in https://github.com/sveltejs/svelte/issues/5112#issuecomment-829594149_\r\n\r\nEvent spreading seems to be achieved through actions in Svelte. For this use case I believe it would be a good in-between until spreadable events + props and dynamic elements (`as`/`svelte:element`) become available.","updated_at":"2021-09-24T06:30:10Z","created_at":"2021-09-24T06:30:10Z","creator_user_login":"armchair-traveller"}
{"number":4375,"comment_id":"1454874663","body":"Hello,\r\n\r\n\r\n\r\n> I'd just love a way to be able to do something like this\r\n> \r\n> ```js\r\n> function action(...) {\r\n>   // clientside only stuff\r\n> \r\n>   return {\r\n>     // SSR-able attribute map\r\n>     attributes() {\r\n> \t  return {\r\n> \t    attr: val\r\n> \t  }\r\n>     }\r\n>   }\r\n> }\r\n> ```\r\n> \r\n\r\nI think it's not possible like that, because the function expects an DOM node as the first parameter.\r\n\r\n\r\nBut after some try, it seem possible to add a complementary SSR function in order to populate the attributes of the node.\r\nExample :\r\n```javascript\r\nfunction action(node, args) {\r\n  // clientside only stuff\r\n  \r\n}\r\n\r\naction.SRR = function(attrs, args) {\r\n   // serverside stuff here\r\n   // attrs is an object containing the tag attributes...\r\n}\r\n```\r\n\r\nThe only small problem is that I think the SSR function will be exported in the client code (even if it will not be used).\r\nBut I don't think it's very problematic.\r\n\r\nI tried a quick prototype and it's seem to work pretty well.\r\nExemple, this component : \r\n```svelte\r\n<script lang=\"ts\">\r\n    type ActionArgs = { title: string };\r\n\r\n    function close(node: HTMLButtonElement, args: ActionArgs) {\r\n        node.classList.add(\"close-button\");\r\n        node.setAttribute(\"aria-label\", args.title);\r\n        \r\n        // other Client side stuff\r\n    }\r\n\r\n    close.SSR = function(attrs: Record<string,any>, args: ActionArgs) {\r\n        attrs.class = (attrs.class||'') + ' close-button'\r\n        attrs['aria-label'] = args.title;\r\n    }\r\n\r\n</script>\r\n\r\n<button use:close={{title:\"Close\"}} class=\"btn\">X</button>\r\n```\r\n\r\nWill generate the following HTML on SSR/prerendering : \r\n```html\r\n<button class=\"btn close-button\" aria-label=\"Close\">X</button>\r\n```\r\n\r\n\r\nI think some things can still be improved : \r\n* `Record<string,any>`  for the type of the first arg is pretty poor. It could at least define some fields more precisely (like class/style which are strings)\r\n* Maybe some utility methods could be provided to simplify the modification of class/styles...\r\n* Maybe there is a way to not bundle the SSR function in client code\r\n\r\n\r\nMy prototype is available here : https://github.com/adiguba/svelte/tree/ssr-actions","updated_at":"2023-03-04T21:03:10Z","created_at":"2023-03-04T21:03:10Z","creator_user_login":"adiguba"}
{"number":4547,"comment_id":"620059164","body":"‚ù§Ô∏èVery much needed!","updated_at":"2020-04-27T15:30:12Z","created_at":"2020-04-27T15:30:12Z","creator_user_login":"multics"}
{"number":4547,"comment_id":"877763463","body":"Related to #6479 where the opposite is requested","updated_at":"2021-07-11T08:43:04Z","created_at":"2021-07-11T08:43:04Z","creator_user_login":"dummdidumm"}
{"number":4547,"comment_id":"1002389951","body":"+1\r\n\r\nThis is what I'm using to emulate this feature.\r\n\r\n```typescript\r\nexport function customAnimation(node: Element, ) {\r\n  /* function body */\r\n  return {\r\n    delay, duration, easing, css,\r\n    tick: (t, u) => {\r\n      if (t === 0) {\r\n        node.dispatchEvent(new CustomEvent(\"animationStart\"));\r\n      } else if (t === 1) {\r\n        node.dispatchEvent(new CustomEvent(\"animationEnd\"));\r\n      }\r\n    },\r\n  };\r\n}\r\n```","updated_at":"2021-12-29T04:16:36Z","created_at":"2021-12-29T04:16:36Z","creator_user_login":"BlueGreenMagick"}
{"number":4547,"comment_id":"1470984343","body":"good day,\r\n\r\nanyone have a solution for this..? as the above answer is not clear to me..\r\n\r\nhow can i use this with a flip animation..\r\n\r\nkind regards ","updated_at":"2023-03-15T23:39:42Z","created_at":"2023-03-15T23:39:42Z","creator_user_login":"cpt-n3mo"}
{"number":4570,"comment_id":"605390582","body":"If the expression inside the `bind:this={...}` isn't assumed to be directly usable as the left hand side of an assignment, I'm not sure that there's a clear way to handle this. How do we know what level to 'stop' at when evaluating this and to assume is to be treated as the LHS of an assignment? What would `bind:this={[a[x], a[y], a[z]][k]}` do? Bind to index `k` in this array literal? Bind to either `a[x]`, `a[y]`, or `a[z]` depending on the value of `k`?","updated_at":"2020-03-28T03:59:53Z","created_at":"2020-03-28T03:59:53Z","creator_user_login":"Conduitry"}
{"number":4570,"comment_id":"605496227","body":"As I said, the second option, that lets you swap target variables, can be vague. I have yet to find a feasible use case for this feature, tbh.\r\nThe first option is quite feasible to me though. `undefined` logic seams pretty straightforward.\r\n\r\n> What would `bind:this={[a[x], a[y], a[z]][k]}` do? (1) Bind to index `k` in this array literal? (2) Bind to either `a[x]`, `a[y]`, or `a[z]` depending on the value of `k`?\r\n\r\nThis example is a bit artificial, but I would say the second option should work.\r\nIt's just like how it works in all the vdom frameworks. I'm not aware of the internals of Svelte, so it might be pain to implement, but I would say it should be quite obvious for a developer.","updated_at":"2020-03-28T17:55:12Z","created_at":"2020-03-28T17:55:12Z","creator_user_login":"dkzlv"}
{"number":4570,"comment_id":"683312364","body":"I am trying to do the following, any ideas for other solutions?\r\n\r\n```\r\n<script>\r\n  const items = [...];\r\n  \r\n  let selectedIndex = 3;\r\n  let selectedElement;\r\n\r\n  $: selectedElement, (() => {\r\n    selectedElement.getClientBoundingRect().doSomeStuff();\r\n  })();\r\n</script>\r\n\r\n{#each items as item, i}\r\n  <div class=\"item\" class:selected={selectedIndex == i} bind:this={selectedIndex == i ? selectedElement : undefined}/>\r\n{/each}\r\n```","updated_at":"2020-08-29T16:30:02Z","created_at":"2020-08-29T16:30:02Z","creator_user_login":"davidcallanan"}
{"number":4570,"comment_id":"683778481","body":"@davidcallanan Simplest solution for now would be to store all the refs and only use the one you need.\r\n\r\n```html\r\n<script>\r\n  const items = [...];\r\n  \r\n  let selectedIndex = 3;\r\n  let refs = [];\r\n\r\n  $: refs[selectedIndex]?.getClientBoundingRect().doSomeStuff();\r\n</script>\r\n\r\n{#each items as item, i}\r\n  <div class=\"item\" class:selected={selectedIndex == i} bind:this={ref[i]}/>\r\n{/each}\r\n```","updated_at":"2020-08-31T13:29:07Z","created_at":"2020-08-31T13:29:07Z","creator_user_login":"dkzlv"}
{"number":4492,"comment_id":"869054963","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:35Z","created_at":"2021-06-26T20:03:35Z","creator_user_login":"stale[bot]"}
{"number":4492,"comment_id":"1440383010","body":"As @Conduitry mentioned in the related issue, this could lead us down a path we don't want to go (yet), so I'm in favor of closing this and revisit it later, if needed.","updated_at":"2023-02-22T16:35:42Z","created_at":"2023-02-22T16:35:42Z","creator_user_login":"dummdidumm"}
{"number":4529,"comment_id":"617533662","body":"Not sure if these two are related, but maybe also have a look at #4703","updated_at":"2020-04-22T03:54:00Z","created_at":"2020-04-22T03:54:00Z","creator_user_login":"christianheine"}
{"number":4529,"comment_id":"812950645","body":"Hopefully a fix for this would also help with wrapped components that have named slots. The wrapping component has to provide the same default content as the component being wrapped or else nothing is rendered.","updated_at":"2021-04-04T01:01:39Z","created_at":"2021-04-04T01:01:39Z","creator_user_login":"wickning1"}
{"number":4529,"comment_id":"1000620124","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:47:58Z","created_at":"2021-12-24T02:47:58Z","creator_user_login":"stale[bot]"}
{"number":4529,"comment_id":"1272517368","body":"Not stale","updated_at":"2022-10-09T11:07:03Z","created_at":"2022-10-09T11:07:03Z","creator_user_login":"madeleineostoja"}
{"number":4534,"comment_id":"629597338","body":"Is there a strong reason to restrict `$$host` to just custom elements? I admit the usecases for it outside custom elements may be few, but I have one: a wrapper component for testing components that rely on context. The test wrapper component will wrap a provided with a context, while also passing rest of the props/callbacks from the host to the wrapped component using the `$$host` reference. \r\n\r\nAccessing the host component is doable with `get_current_component`, but a stable non-internal API wouldn't hurt.","updated_at":"2020-05-16T06:36:16Z","created_at":"2020-05-16T06:35:58Z","creator_user_login":"wyozi"}
{"number":4534,"comment_id":"869054981","body":"This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T20:03:41Z","created_at":"2021-06-26T20:03:41Z","creator_user_login":"stale[bot]"}
{"number":4534,"comment_id":"1509391693","body":"This change is really cool! If I am correct it will give use access to `this` of the custom element eh?\n\nVery exciting and thank you for this! ","updated_at":"2023-04-14T23:34:10Z","created_at":"2023-04-14T23:34:10Z","creator_user_login":"tronicboy1"}
{"number":4467,"comment_id":"600461458","body":"Is this the same as #3569?","updated_at":"2020-03-18T07:14:15Z","created_at":"2020-03-18T07:14:15Z","creator_user_login":"Conduitry"}
{"number":4467,"comment_id":"600487071","body":"Not really. Its more about the inconsistency when *not* using two-way binding vs using two-way binding.","updated_at":"2020-03-18T08:24:04Z","created_at":"2020-03-18T08:24:04Z","creator_user_login":"PatrickG"}
{"number":4467,"comment_id":"717282220","body":"> You can get around it with <input value={value || ''} />\r\n\r\nThat doesn't work as expected when using `<input type=\"submit value={value || ''} />`. That results in a submit button with no text instead of the expected \"Submit\".\r\n\r\nEdit: it's a detail, just worth pointing out that this workaround has some unexpected effect.","updated_at":"2020-10-27T14:27:51Z","created_at":"2020-10-27T14:27:15Z","creator_user_login":"dgellow"}
{"number":4467,"comment_id":"869074824","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:46:52Z","created_at":"2021-06-26T23:46:52Z","creator_user_login":"stale[bot]"}
{"number":4580,"comment_id":"601505206","body":"This example is working fine for me outside of the REPL, on Firefox and Chrome. See #2147. Do you have have a minimal repro of this happening that doesn't involve the REPL?","updated_at":"2020-03-20T03:01:07Z","created_at":"2020-03-20T03:01:07Z","creator_user_login":"Conduitry"}
{"number":4580,"comment_id":"601619033","body":"Indeed, the original example does not repro outside the REPL. I have updated the issue with a [new example](https://svelte.dev/repl/85c6b7f1c87d4d19838294a23cadafe3?version=3.20.1) that does repro outside the REPL. The original example must be missing an interaction between component slots, {#await}, and bind:clientHeight.\r\n\r\n\r\n\r\nWhat would be the best/simplest work-around to manually force bind:clientHeight to update? (preferably without visibly affecting the page)\r\n \r\n\r\n","updated_at":"2020-03-20T10:02:35Z","created_at":"2020-03-20T10:02:35Z","creator_user_login":"Leftium"}
{"number":4580,"comment_id":"622532304","body":"I've spent some time looking at this issue, but can't seem to get to the crux of the problem. I'll write down some stuff I've looked at and hopefully someone smarter than me can figure it out (or point me in the right direction).\r\n\r\nHere's a minimal example, not using slots: https://svelte.dev/repl/47047698dd5740d2a854d367e9c5629d?version=3.21.0\r\n\r\nIt looks like it could be some kind of race condition between the promise resolving and the `div_elementresize_handler` listener being attached here:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/b3364424d7d454640045f352314eec63b73bf040/src/runtime/internal/dom.ts#L275-L285\r\n\r\n If the promise is changed to something like this:\r\n\r\n```js\r\nlet promise = new Promise(res => {\r\n    setTimeout(() => {\r\n        res();\r\n    }, 0)\r\n});\r\n```\r\n\r\nThen in the REPL, it'll sometimes work, and sometimes won't, pretty randomly. On a local project it seems to work all of the time (you can see a small flicker as the value updates from 74 -> 95)\r\n\r\nNot sure where to go from here","updated_at":"2020-05-01T19:37:24Z","created_at":"2020-05-01T19:37:24Z","creator_user_login":"BillyLevin"}
{"number":4580,"comment_id":"667161311","body":"I'm seeing similar issues with an {#if} block, using bind:clientHeight inside where it randomly updates with the correct height","updated_at":"2020-07-31T14:53:38Z","created_at":"2020-07-31T14:53:38Z","creator_user_login":"zwergius"}
{"number":4470,"comment_id":"591390098","body":"What I think is happening is that instantiating the component is immediately running the `$:` reactive code, which dispatches the event synchronously, before the parent component attaches the listener. I'm currently leaning towards this being something to document rather than being something to change.","updated_at":"2020-02-26T11:58:14Z","created_at":"2020-02-26T11:58:14Z","creator_user_login":"Conduitry"}
{"number":4470,"comment_id":"591407628","body":"Would it be possible to display console warning if dispatch was called before onMount or before parent attached listener to event?","updated_at":"2020-02-26T12:45:25Z","created_at":"2020-02-26T12:44:49Z","creator_user_login":"MrSrsen"}
{"number":4470,"comment_id":"638291733","body":"Hi, I've been struggling with issue for a while now and was wondering whether I'm doing anything wrong on my part. Is there a work-around for this, since the behaviour might not be changed.\r\n\r\nI've reproduced, in a very simple way, what I would like it to do: https://svelte.dev/repl/2b0b7837e3ba44b5aba8d7e774094bb4?version=3.19.1\r\n\r\n<!-- CC: @Conduitry -->","updated_at":"2020-06-03T16:04:57Z","created_at":"2020-06-03T16:00:56Z","creator_user_login":"plibither8"}
{"number":4470,"comment_id":"641893622","body":"I was thinking more about this issue and after reading and searching trough some use-cases in our app I think that current behaviours in more appropriate then behaviour that I was originally excepting.\r\n\r\nNow I think it's valid behaviour that reactive statements are not running until `onMount` is fired. Thanks to that I have chance and time to properly initialise all the properties without reactive calls and I do not have to ignore these \"initialising\" events before proper initialisation.\r\n\r\nTo sum it up... **Note in the docs will be fully appropriate.**\r\n\r\nMy case would be resolved by adding event call manually to the `onMount` function.","updated_at":"2020-06-10T09:56:19Z","created_at":"2020-06-10T09:56:19Z","creator_user_login":"MrSrsen"}
{"number":4470,"comment_id":"760651587","body":"@Conduitry wrote:\r\n> What I think is happening is that instantiating the component is immediately running the `$:` reactive code, which dispatches the event synchronously, before the parent component attaches the listener.\r\n\r\nI suspect that is correct. (Confirmed. See logs below.)\r\n\r\nShould we update the title (since \"event is not dispatched\" is not quite accurate)?: Events dispatched from child component get lost because dispatched before event listeners attached in parent component \r\n\r\nI would love to see a diagram in the docs that illustrates this sequence of events in detail (issue forthcoming!)...\r\n\r\n\r\n>  I'm currently leaning towards this being something to document rather than being something to change.\r\n\r\nI'm still not quite convinced. Wouldn't Svelte be better if users _didn't_  have to worry about events getting _lost_ (due to a lifecycle event / component tree initialization step order that they have absolutely no control over), and _didn't_ have to resort to kludges like `await tick()` (from #5405) in order to dispatch an event from a child (often, an initial value) in a way that the parent actually receives the event?\r\n\r\nOr at least provide an elegant/easy _option_ to synchronize/postpone the timing of these things for cases where that is preferred. Maybe something like:\r\n```svelte\r\n<Child on:fill|deferUntilSelfMounts={onFill} />\r\n```\r\n, which would instruct Svelte to queue up any `fill` events dispatched by `<Child>` until self (parent) has finished mounting (and therefore finished attaching all listeners)?\r\n\r\nOr something like:\r\n```svelte\r\n<Child on:fill={onFill} svelte:deferEventsUntilSelfMounts />\r\n```\r\nor\r\n```svelte\r\n<Child on:fill={onFill} on:*|queueUntilMounted />\r\n```\r\nto queue and defer _all_ events dispatched by `<Child>`. Pretty ugly, but just brainstorming...\r\n\r\nSeems like that should just be the default behavior...\r\n\r\nNote: I believe there may be related confusing race condition <sub>(not technically a race condition since it's deterministic, but what do you call it?)</sub> issues related to the use of `use:` and `bind:` in a parent component (issues for these _may_ be forthcoming...)...\r\n\r\n---\r\n@MrSrsen wrote:\r\n\r\n> I was thinking more about this issue and after reading and searching trough some use-cases in our app I think that current behaviours in more appropriate then behaviour that I was originally expecting.\r\n\r\n\r\n> Now I think it's valid behaviour that reactive statements are not running until `onMount` is fired.\r\n\r\nTechnically, that's incorrect (see @Conduitry's explanation for the _actual_ reason for the behavior): reactive statements are run _before_  `onMount` is fired, as this console output (from [my fork of your REPL](https://svelte.dev/repl/638993e9c75c443f9e1cbb8e2f1f16b8?version=3.19.1)) shows:\r\n\r\n```svelte\r\nInner: checking isFilled(Some text): true  [called from $: reactivate statement]\r\n\r\nAttached listener: ∆í onFill(e) {\r\n    \t\t$$invalidate(0, isFilled = e.detail);\r\n    \t}\r\n\r\nInner: onMount: NodeList¬†[input]\r\n```\r\n\r\nThis also seems to confirm @Conduitry's hypothesis that listener isn't attached in parent until _after_ `$: isFilled` is called in the child.\r\n\r\n> Thanks to that I have chance and time to properly initialise all the properties without reactive calls and I do not have to ignore these \"initialising\" events before proper initialisation.\r\n\r\nSo it sounds like you would be someone who would actually prefer that the current behavior _not_ change?\r\n\r\nI'd be curious to see a concrete example where the current behavior would actually be useful/desirable (and if so, whether the perceived problem might actually be a non-issue in those cases, or easily worked around).\r\n\r\nYour original REPL is actually a counterexample/the _opposite_ of what you described here ‚Äî a case where everything _has_ been sufficiently initialized (the correct values for `value` and `length` (\"Some text\" and 5, respectively) _have_ already been assigned via props by this point) and where it would be more useful to _have_ it always dispatch the `fill` event, even from the initial invocation of the child's `$:` statement.\r\n\r\n> My case would be resolved by adding event call manually to the `onMount` function.\r\n\r\nYou mean (in your initial example) calling `isFilled` from both `$: isFilled(value)` _and_ from an `onMount` callback?\r\n\r\nSure, that works, but seems unfortunate that one needs to have that duplication.\r\n\r\nAnother option (which I like even better) is to use the `tick()` workaround from #5405: see my [updated REPL](https://svelte.dev/repl/638993e9c75c443f9e1cbb8e2f1f16b8?version=3.19.1). Then you don't have to add an `onMount` callback.\r\n\r\n\r\n---\r\n\r\n@plibither8 \r\n\r\n> Hi, I've been struggling with issue for a while now and was wondering whether I'm doing anything wrong on my part. Is there a work-around for this, since the behaviour might not be changed.\r\n\r\nI'm still curious if there's a better workaround, but my personal favorite so far is the `await tick()` trick from #5405...\r\n\r\n> I've reproduced, in a very simple way, what I would like it to do: https://svelte.dev/repl/2b0b7837e3ba44b5aba8d7e774094bb4?version=3.19.1\r\n\r\nOops, looks like you linked to the same REPL as the OP. Did you start from their REPL, make some changes, but forget to save your changes (which would have created a new REPL URL)? Would be interested to see what you were trying to show, about what you would like it to do.\r\n","updated_at":"2021-01-15T08:18:45Z","created_at":"2021-01-15T05:16:35Z","creator_user_login":"TylerRick"}
{"number":4470,"comment_id":"760746427","body":"> @TylerRick wrote:\r\n> Your original REPL is actually a counterexample/the _opposite_ of what you described here\r\n\r\nYeah sorry. After some time I realised that my first Svelte codebase was not the best and I think I might wrote a lot of garbage code and a lot of weird workarounds. I just want easy and intuitive solution that will be consistent.\r\n\r\nI really like yours suggestion for optional synchronising:\r\n\r\n> @TylerRick wrote:\r\n> Or at least provide an elegant/easy option to synchronize/postpone the timing of these things for cases where that is preferred. Maybe something like:\r\n> \r\n>     <Child on:fill|deferUntilSelfMounts={onFill} />\r\n\r\nbecause it's expressive in what it will do.\r\n\r\nIn any case, I don't really well understand Svelte internals so I think I just leave solving of this issue to more experienced. :)\r\n","updated_at":"2021-01-15T08:20:57Z","created_at":"2021-01-15T08:20:57Z","creator_user_login":"MrSrsen"}
{"number":4470,"comment_id":"869066667","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T22:03:35Z","created_at":"2021-06-26T22:03:35Z","creator_user_login":"stale[bot]"}
{"number":4470,"comment_id":"1164589274","body":"I had a similar question, arising from an observation that using the Component API, it‚Äôs not possible to register an `component.$on(‚Ä¶)` callback which will be detect an event that‚Äôs dispatched during the synchronous component initialisation. \r\n\r\n```\r\nconst component = new Component({\r\n    target: renderTarget,\r\n    props: {\r\n        a_prop: 'a prop value'\r\n    }\r\n});\r\n\r\ncomponent.$on('my-event', event => {\r\n    alert(event.detail);\r\n});\r\n```\r\n\r\nUsing code like this, if `Component` dispatches an event in the initial tick that it's constructed in, the event listener callback doesn't get fired.\r\n\r\n I've put this in a REPL: https://svelte.dev/repl/b6704c77ec4047029658ecba1d97d027?version=3.48.0. You can see that the Component fires the same event twice, once in the initial constructor, and once after 1 second. Only the second one is seen by the callback. \r\n\r\nThe comments above suggest this is expected behaviour (both using the API and the declarative syntax). If so, I think a console error if `dispatch` is called during initialisation would be great, to make this easier to spot and debug. \r\n\r\nIdeally, however, the API would support adding event callbacks in the constructor. Could this ever work as a feature?","updated_at":"2022-06-23T15:54:15Z","created_at":"2022-06-23T15:54:15Z","creator_user_login":"georgecrawford"}
{"number":4470,"comment_id":"1234116822","body":"Any progress on this one? :\\ ","updated_at":"2022-09-01T11:04:48Z","created_at":"2022-09-01T11:04:48Z","creator_user_login":"yuliankarapetkov"}
{"number":5501,"comment_id":"709220377","body":"Top level await I believe is something which would be provided by acorn, not something we would try to implement ahead of it. Once acorn supports top level await then we will gain support for it.","updated_at":"2020-10-15T11:28:18Z","created_at":"2020-10-15T11:28:18Z","creator_user_login":"antony"}
{"number":5501,"comment_id":"709528751","body":"@antony What do you mean? Acorn already supports \"top-level await\" with `allowAwaitOutsideFunction: true`. And I'm not trying to have a real top-level await (top-level of module). I'm just trying to have await for component's script-tag (init script) that is actually wrapped in a function that can be changed to an async function just like I did in my fork.","updated_at":"2020-10-15T18:58:36Z","created_at":"2020-10-15T18:58:36Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"817859997","body":"@antony Any word on what Jesse said?\r\n\r\nMy use case: I have a module that loads some data synchronously, which is then used by a bunch of components. All those components are shown to the user only after the data is loaded. If I make the loading async, it requires me to make a lot of changes to make it work, whereas a top-level await would mean I just put a single `await` statement in the necessary components.","updated_at":"2021-04-12T14:28:24Z","created_at":"2021-04-12T14:28:24Z","creator_user_login":"probablykasper"}
{"number":5501,"comment_id":"817894173","body":"I opened this on kit. Same question: https://github.com/sveltejs/kit/issues/941.\r\n\r\nHow to use acorn options?","updated_at":"2021-04-12T15:12:15Z","created_at":"2021-04-12T15:12:15Z","creator_user_login":"frederikhors"}
{"number":5501,"comment_id":"818061236","body":"@frederikhors I think you cannot change how the Svelte compiler parses JavaScript without modifying the compiler. And the Acorn flag alone wouldn't do you any good. The component script must be wrapped inside an async function in the final output for await to work. And that function must be run asynchronously (eg. with async-await) etc... \n\nSo I might do the compiler option. But don't expect it too soon. It is a lot of work to do it properly.","updated_at":"2021-04-12T19:05:46Z","created_at":"2021-04-12T19:05:46Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"818291702","body":"@joas8211 Sorry for my noobness, could it be possible to add syntax for async instead of a compiler option?\r\nLike this:\r\n```\r\n<script async>\r\n\r\n</script>\r\n```","updated_at":"2021-04-12T22:54:23Z","created_at":"2021-04-12T22:46:08Z","creator_user_login":"98mux"}
{"number":5501,"comment_id":"818302855","body":"@filipot Probably not possible. Problem is with 1: the difference of how the components are initialized and with 2: mixing the different types of components.\n\n1: Asynchronous component is initialized with asynchronous static function on components class `const instance = await Component.init(options);` and synchronous aka. \"normal\" component is initialized with the class constructor `const instance = new Component(options);`.\n\n2: Synchronous components cannot contain asynchronous components since they must function synchronously.","updated_at":"2021-04-12T23:14:19Z","created_at":"2021-04-12T23:14:19Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"818343292","body":"@joas8211 Does the initialization of an async component have to be async? Would something like this be viable:\r\n\r\n```html\r\n<script>\r\n  data = await import('module.js')\r\n  export let name = ''\r\n  function handler() {\r\n    data.name = 'updated'\r\n  }\r\n</script>\r\n\r\n<p on:click={handler>{name}</p>\r\n```\r\ntransforms to\r\n```html\r\n<script>\r\n  data = await import('module.js')\r\n  export let name = ''\r\n  async function handler() {\r\n    data = await data\r\n    data.name = 'updated'\r\n  }\r\n</script>\r\n\r\n{#await}\r\n{:then data}\r\n  <p on:click={handler}>{data.name}</p>\r\n{/await}\r\n```","updated_at":"2021-04-13T00:47:14Z","created_at":"2021-04-13T00:46:57Z","creator_user_login":"probablykasper"}
{"number":5501,"comment_id":"818447546","body":"@probablykasper For my use case, yes. I wanted to load dynamic components defined by component's prop or eg. external resource before rendering on server-side / build-time (SSR). SSR only runs the initial script (top-level of script tag) and does not wait for await keyword in the template. Here's some code I just made up to demonstrate my use case:\r\n```html\r\n<!-- ContentArea.svelte -->\r\n<script>\r\n    export let id = 'main';\r\n    \r\n    const response = await fetch(`/areas/${id}`);\r\n    const blocks = await response.json();\r\n\r\n    for (const block of blocks) {\r\n        block.component = (await import(block.module)).default;\r\n    }\r\n</script>\r\n\r\n{#each block as blocks}\r\n    <svelte:component this={block.component} {...block.props} />\r\n{/each}\r\n```","updated_at":"2021-04-13T05:27:12Z","created_at":"2021-04-13T05:27:12Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"819121356","body":"@joas8211 Is the only issue that SSR wouldn't support it? Does SSR even support loading dynamic components currently?","updated_at":"2021-04-13T23:46:48Z","created_at":"2021-04-13T23:46:48Z","creator_user_login":"probablykasper"}
{"number":5501,"comment_id":"819214690","body":"@probablykasper Well, it does support dynamic components with static import, but not with dynamic import aka. code splitting if you use Rollup. Because dynamic import is asynchronous.","updated_at":"2021-04-14T04:13:08Z","created_at":"2021-04-14T04:13:08Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"819220138","body":"@joas8211 In that case I think it might be fair to consider special SSR handling of `await` as a separate issue, and then SSR could handle `await` like a normal promise for now. Besides, what would SSR do if the response you get in your `fetch` depends on a cookie, user agent or something like that?","updated_at":"2021-04-14T04:32:13Z","created_at":"2021-04-14T04:32:13Z","creator_user_login":"probablykasper"}
{"number":5501,"comment_id":"855362681","body":"> @probablykasper For my use case, yes. I wanted to load dynamic components defined by component's prop or eg. external resource before rendering on server-side / build-time (SSR). SSR only runs the initial script (top-level of script tag) and does not wait for await keyword in the template. Here's some code I just made up to demonstrate my use case:\r\n> \r\n> ```\r\n> <!-- ContentArea.svelte -->\r\n> <script>\r\n>     export let id = 'main';\r\n>     \r\n>     const response = await fetch(`/areas/${id}`);\r\n>     const blocks = await response.json();\r\n> \r\n>     for (const block of blocks) {\r\n>         block.component = (await import(block.module)).default;\r\n>     }\r\n> </script>\r\n> \r\n> {#each block as blocks}\r\n>     <svelte:component this={block.component} {...block.props} />\r\n> {/each}\r\n> ```\r\n\r\nI have the same issue and wanted to load dynamic components by an external list from sveltekit-load. In dev-mode everything is fine but when trying to load it in preview mode the components are not rendered.","updated_at":"2021-06-06T08:43:53Z","created_at":"2021-06-06T08:43:53Z","creator_user_login":"tonprince"}
{"number":5501,"comment_id":"877765342","body":"I gave up trying to make Svelte asynchronous and preserving all the existing features. I tried to make my own fork dropping all not supported features, but tests showed me how it's really hard to make stable. So I switch framework to Crank.js for my project. It's very different from Svelte, but it ticks all my requirements except reactivity which I can solve.","updated_at":"2021-07-11T08:58:13Z","created_at":"2021-07-11T08:58:13Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"877768290","body":"@joas8211 You might want to checkout solidjs if you like jsx. Don't know if it has async tho","updated_at":"2021-07-11T09:21:18Z","created_at":"2021-07-11T09:21:18Z","creator_user_login":"98mux"}
{"number":5501,"comment_id":"877771388","body":"@filipot Thank you for suggestion, but it seems Solid doesn't support asynchronous components / rendering.","updated_at":"2021-07-11T09:48:58Z","created_at":"2021-07-11T09:48:58Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"877771704","body":"> asynchronous components / rendering.\r\n\r\nWhat do you EXACTLY mean, @joas8211?","updated_at":"2021-07-11T09:51:40Z","created_at":"2021-07-11T09:51:40Z","creator_user_login":"frederikhors"}
{"number":5501,"comment_id":"877772493","body":"@frederikhors I mean an ability to halt rendering for the duration of an asynchronous task. Like for example loading data or subcomponents. Suspense type of solutions won't cut it for server-side rendering.","updated_at":"2021-07-11T09:58:59Z","created_at":"2021-07-11T09:58:59Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"877772811","body":"Yeah, I mean this can be achieved with Svelte, can you write an example?\r\n\r\nI opened both:\r\n\r\n1. https://github.com/sveltejs/svelte/issues/5017 and\r\n2. https://github.com/sveltejs/svelte/issues/2979","updated_at":"2021-07-11T10:01:47Z","created_at":"2021-07-11T10:01:47Z","creator_user_login":"frederikhors"}
{"number":5501,"comment_id":"877775347","body":"@frederikhors It seems your feature request #5017 has not been acted on. If it would be implemented then I would not have this issue. I wrote an example of my use-case in a previous comment: https://github.com/sveltejs/svelte/issues/5501#issuecomment-818447546","updated_at":"2021-07-11T10:21:54Z","created_at":"2021-07-11T10:21:54Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"880706710","body":"@joas8211 sapper and svelte-kit allows you to load data before you render the page https://kit.svelte.dev/docs#loading","updated_at":"2021-07-15T13:44:36Z","created_at":"2021-07-15T13:44:36Z","creator_user_login":"98mux"}
{"number":5501,"comment_id":"915833352","body":"> @filipot Thank you for suggestion, but it seems Solid doesn't support asynchronous components / rendering.\r\n\r\nTo clarify Solid supports async. It is granular though. Halting at a component level makes no sense for Solid. Cranks approach while interesting is too blocking for our needs. Having components halt reduces our ability to parallelize work within a single component and potential unrelated sub trees.\r\n\r\nWe use suspense on the server to do Async SSR and support out-of-order streaming where we send placeholders out synchronously and then load in the content as it completes over the stream.\r\n\r\nThe way we accomplish this is through the Resource API which handles automatic serialization of data and basically completes a promise in the browser that started on the server. Suspense boundaries know how to handle this by design and in so you get a universal system that just works.","updated_at":"2021-09-09T07:28:40Z","created_at":"2021-09-09T07:25:37Z","creator_user_login":"ryansolid"}
{"number":5501,"comment_id":"935110255","body":"This feature would be incredibly useful to enable the use of wasm by svelte modules, since wasm init functions are async.\r\nSee proof of concept using sveltekit pages: [https://github.com/cfac45/sveltekit-rust-ssr-template](sveltekit-rust-ssr-template)","updated_at":"2021-10-06T00:01:32Z","created_at":"2021-10-06T00:01:32Z","creator_user_login":"doomnoodles"}
{"number":5501,"comment_id":"1153023773","body":"I am trying to do the same thing as @joas8211 : I have a json template that describes which components are rendered and their content.\r\n\r\nIt works perfectly in CSR but in SSR there's seemingly no way to dynamically load components.\r\n\r\n```javascript\r\n{#await appImport(widgetPath) then component}\r\n  <svelte:component this={component.default} bind:data={data.data} />\r\n{/await}\r\n```\r\n","updated_at":"2022-06-12T00:01:31Z","created_at":"2022-06-12T00:01:31Z","creator_user_login":"kryptus36"}
{"number":5501,"comment_id":"1282135164","body":"It has been 2 years, React is implementing this now\r\nbecause they realized web is async\r\n\r\nBasically it should be like: Component `<script>` runs async and awaited before render, and being awaited all the way up to the Root\r\nthat way we can do async tasks such as fetching on SSR. for example we can fetch data from api and render result on SSR.\r\nand if we want to fetch stuff, do async stuff on CSR we can use `onMount()` for that","updated_at":"2022-10-18T09:57:18Z","created_at":"2022-10-18T09:57:18Z","creator_user_login":"DeepDoge"}
{"number":5501,"comment_id":"1282779000","body":"> It has been 2 years, React is implementing this now because they realized web is async\r\n> \r\n> Basically it should be like: Component `<script>` runs async and awaited before render, and being awaited all the way up to the Root that way we can do async tasks such as fetching on SSR. for example we can fetch data from api and render result on SSR. and if we want to fetch stuff, do async stuff on CSR we can use `onMount()` for that\r\n\r\nVue has it too ","updated_at":"2022-10-18T17:44:24Z","created_at":"2022-10-18T17:44:24Z","creator_user_login":"bugproof"}
{"number":5501,"comment_id":"1282806704","body":"I thought of this and #958 (which is from 2017) when I saw the React announcement. It would be nice to know if this is on the radar of the dev team. Sveltekit doesn't fit my needs, and as such I may be faced with using something else. ","updated_at":"2022-10-18T18:06:28Z","created_at":"2022-10-18T18:06:28Z","creator_user_login":"kryptus36"}
{"number":5501,"comment_id":"1364753731","body":"Vue 3 supports top level await. When Svelte gets this mega convenient feature?","updated_at":"2022-12-25T23:29:27Z","created_at":"2022-12-25T23:29:27Z","creator_user_login":"bomzj"}
{"number":5501,"comment_id":"1383038099","body":"Just saying that I think this will improve DX quite a lot. ","updated_at":"2023-01-15T02:54:54Z","created_at":"2023-01-15T02:54:54Z","creator_user_login":"axerivant"}
{"number":5501,"comment_id":"1383117033","body":"If I remember correctly I used async-await through-out Svelte codebase to allow await at top-level of component script. That wouldn't be possibe without major API changes because currently the execution starts from component's constructor (https://svelte.dev/docs#run-time-client-side-component-api-creating-a-component). Constructors in JavaScript are always synchronous. So if there's so willingness for breaking changes (eg. new major version), then component top-level await cannot be achieved.","updated_at":"2023-01-15T10:44:20Z","created_at":"2023-01-15T10:44:20Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"1383125773","body":"You could do it with an explicit `<script async>` tag, which becomes a promise that's called from the constructor. And defer rendering until it returns.","updated_at":"2023-01-15T11:31:49Z","created_at":"2023-01-15T11:31:49Z","creator_user_login":"akvadrako"}
{"number":5501,"comment_id":"1383140547","body":"@akvadrako The problem is how the function execution is expected to return. I incorrectly linked the client-side component API, but the problem really is the server side API. Client-side execution continues after calling the constructor until `Component.$destroy()` has taken effect. But in the server-side you call `Component.render()` that is expected to return HTML and CSS for that component synchronously. Aka. it returns them directly instead of returning a Promise. If at any point of the rendering component is allowed to run asynchronous code, the syncronous `Component.render()` API won't work. And don't even ask how web components are supposed to work afterwards :disappointed: ","updated_at":"2023-01-15T12:37:56Z","created_at":"2023-01-15T12:37:56Z","creator_user_login":"joas8211"}
{"number":5501,"comment_id":"1383304638","body":"Given that Rich himself posted #653 and superseded it with #958  he's aware of the utility of it. Given that react took the effort on (and it took them years to achieve) and Vue 3 included it,  I think there's a general consensus that it's useful. Without it you need to use tools like Puppeteer to pre-render for SEO for some render flows, a practice that was once recommended by Google, but is now seen as less favorable. All competing frameworks now have a similar function, and it makes some ideas much more difficult (or impossible) to achieve when page structure is dynamic.\r\n\r\nIt's not really a question of whether it should be done (you'd have a hard time arguing the contrary imo) but whether it's going to be made a priority. I am holding out hope, because to me this is the only thing Svelte doesn't do head and shoulders better than it's peers. The problem is this is a nearly non-optional feature for some projects.\r\n\r\nWithout this, your SSR will stop at any call that requires a dynamic import, which seriously hamstrings the usefulness of svelte:component among other things.\r\n\r\nI'm hoping this gets put on the backlog for SvelteKit 2. It would be a big win.","updated_at":"2023-01-16T00:36:55Z","created_at":"2023-01-16T00:36:55Z","creator_user_login":"kryptus36"}
{"number":5501,"comment_id":"1530300881","body":"Coming from Chrome extensions development here. We are used to having top-level awaits by adding `type=\"module\"`. I hoped I would be able to do the same in Svelte, but that wasn't the case. It would be super cool though!\r\n\r\nhttps://developer.chrome.com/docs/extensions/reference/storage/#synchronous-response-to-storage-updates","updated_at":"2023-05-01T21:19:14Z","created_at":"2023-05-01T21:19:14Z","creator_user_login":"thdoan"}
{"number":4535,"comment_id":"598105270","body":"I think you can try setting the `immutable` option to `true` which should disable the check for mutating objects.","updated_at":"2020-03-12T11:54:52Z","created_at":"2020-03-12T10:07:27Z","creator_user_login":"shirotech"}
{"number":4535,"comment_id":"598481630","body":"@shirotech I tried toying with that today and can't seem to get immutable to delivered the desired behavior either. It really seems like the reactivity is strictly at the object level. Change one thing, it re-fires it all.","updated_at":"2020-03-12T23:51:39Z","created_at":"2020-03-12T23:51:39Z","creator_user_login":"purebordem"}
{"number":4535,"comment_id":"774524236","body":"As a workaorund you can try this:\r\n\r\n```\r\n$: prop1 = obj.prop1;\r\n$: console.log(\"This will fire only on prop1 change\", prop1)\r\n```","updated_at":"2021-02-06T18:54:05Z","created_at":"2021-02-06T18:54:05Z","creator_user_login":"raythurnevoid"}
{"number":4535,"comment_id":"780833400","body":"> As a workaorund you can try this:\r\n> \r\n> ```\r\n> $: prop1 = obj.prop1;\r\n> $: console.log(\"This will fire only on prop1 change\", prop1)\r\n> ```\r\nNeat idea. I ultimately ended up creating a custom store using lodash that implemented the required functionality. Still would be nice for it to be native without need for a custom store. \r\n","updated_at":"2021-02-17T20:29:49Z","created_at":"2021-02-17T20:29:49Z","creator_user_login":"purebordem"}
{"number":4535,"comment_id":"782282941","body":"Hey @raythurnevoid I found a scenario where this doesn't work. Or if you could help me with the workaround I would appreciate it! If one of the object props is an array, the update refires for another prop being updated. See here:\r\n\r\nhttps://svelte.dev/repl/69a716924f37430ea28fafad92b2debe?version=3.32.3\r\n\r\nIn the console, you can see the event firing when the string prop is updated even though the array prop is the one being watched. Or is it expected that the workaround will only work for a flat object of simple properties? Google brought me here because I'm facing an issue like this now. \r\n\r\nedit: A little more testing info\r\n\r\nin that repl, you can change scales to a number or string to see the issue go away. If you make it an array or object the issue is present. ","updated_at":"2021-02-19T19:20:08Z","created_at":"2021-02-19T19:11:29Z","creator_user_login":"student020341"}
{"number":4535,"comment_id":"791238651","body":"@student020341 The behavior is correct, the fact is that Svelte (but also other frameworks) cannot know if a prop of an object or an item of an array is changed since it should perform a deep check that is bad for performance. As a workaround for this problem Svelte by default chose to assume that the variable has been changed even if it's not.\r\n\r\nTo prevent this you can use `<svelte:options immutable={true} />`.\r\nThis will tell Svelte to run reactive code only when the **instance** of a variable is changed. (To understand each other, an instance of a variable is updated when this check return false: `newVal == oldVal`).\r\nIn case of objects and arrays, to update the instance you must re-assign and re-create the variable. Eg: `tuna.scales = [...tuna.scales]`.","updated_at":"2021-03-05T08:06:07Z","created_at":"2021-03-05T08:04:43Z","creator_user_login":"raythurnevoid"}
{"number":4535,"comment_id":"869048058","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T19:04:53Z","created_at":"2021-06-26T19:04:53Z","creator_user_login":"stale[bot]"}
{"number":4535,"comment_id":"968179129","body":"> > As a workaorund you can try this:\r\n> > ```\r\n> > $: prop1 = obj.prop1;\r\n> > $: console.log(\"This will fire only on prop1 change\", prop1)\r\n> > ```\r\n> \r\n> Neat idea. I ultimately ended up creating a custom store using lodash that implemented the required functionality. Still would be nice for it to be native without need for a custom store.\r\n\r\nWhat did you do?","updated_at":"2021-11-14T00:11:14Z","created_at":"2021-11-14T00:11:14Z","creator_user_login":"derolf"}
{"number":4535,"comment_id":"1000504543","body":"Does anybody have any rough idea how tricky or complex this would be to actually implement?! I'm not familiar with Svelte's internals.\r\n\r\nFor a tool like Svelte that is known for being a highly-efficient UI framework that generally avoids causing \"mass reactivity\" and does everything \"surgically\" as much as possible, a promise which it actually does fulfill beautifully in most cases, this particular behavior is disappointing, I think.\r\n\r\nAlso, the reason why this issue doesn't have that many upvotes is generally because this behavior is not obvious, unless you dig a little deeper into things, not because it's trivial.","updated_at":"2021-12-23T20:44:56Z","created_at":"2021-12-23T20:11:15Z","creator_user_login":"aradalvand"}
{"number":6732,"comment_id":"920571671","body":"Note that your REPL example can be simplified even further: the same behavior is seen without needing an object property. In other words, when you write `let count = {a:1};`, you could demonstrate the same behavior even more simply with `let count = 1`, as follows:\r\n\r\n```js\r\nlet isSmallerThan10 = true;\r\nlet count = 1;\r\n$: if (count) {\r\n  if (count < 10) {\r\n    console.error(\"smaller\", count);\r\n    // this should trigger this reactive block again and enter the \"else\" but it doesn't\r\n    count = 11; \r\n  } else {\r\n    console.error(\"larger\", count);\r\n    isSmallerThan10 = false;\r\n  }\r\n}\r\n```\r\n","updated_at":"2021-09-16T04:46:04Z","created_at":"2021-09-16T04:46:04Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920574682","body":"Digging into this, I found the following statement in https://github.com/sveltejs/svelte/issues/4586#issuecomment-602034126:\r\n\r\n> For performance reasons, `$:` reactive blocks are batched up and run in the next microtask. This is the expected behavior. This is one of the things that we should talk about when we figure out how and where we want to have a section in the docs that goes into more details about reactivity.\r\n\r\nMore explanation in https://github.com/sveltejs/svelte/issues/4714#issuecomment-619002653:\r\n\r\n> The batching of synchronous changes before calling a component's reactive blocks is only really beneficial for performance if the intermediate values are *not* sent. The purpose of deferring (and, more importantly, combining) the calculations in reactive blocks is to avoid thrashing through a whole bunch of states that you're never going to actually notice in the app. If, for a particular use case, you do need to be informed of each one of those changes, reactive blocks aren't the tool you want to be using, and you should instead use subscriptions or derived stores or some other synchronous mechanism.\r\n\r\nNote that the workaround suggested in https://github.com/sveltejs/svelte/issues/4586#issuecomment-602034126 is to use a derived store. In your simplified example, one fix would have simply been to make `isSmallerThan10` a reactive declaration:\r\n\r\n```js\r\n$: isSmallerThan10 = count.a < 10;\r\n```\r\n\r\nBut I suspect that in your real code, there might be more going on and `isSmallerThan10` might not be able to be properly declared as a simple reactive declaration like that. In which case making it a derived store would solve your issue:\r\n\r\n```js\r\nlet count = writable(0);\r\nlet isSmallerThan10 = derived(count, $count => $count.a < 10);\r\n// Now use `$count` and `$isSmallerThan10` in the rest of your code\r\n```\r\n\r\nDerived stores are called synchronously whenever their dependencies are updated, rather than batched. Here's an alternate version of `isSmallerThan10` that proves that it receives *every* update of `count`:\r\n\r\n```js\r\nlet isSmallerThan10 = derived(count, $count => {\r\n  console.log('count updated to', $count.a);\r\n  return ($count.a < 10);\r\n});\r\n```\r\n\r\nPut that in your example and you'll see these three lines in the console log:\r\n\r\n```plaintext\r\ncount updated to 1\r\nsmaller 1\r\ncount updated to 11\r\n```\r\n\r\nYou can see that the `if ($count.a < 10)` branch ran and logged \"smaller\" with the current value, and then when the count store was updated to 11, `isSmallerThan10` received the update.","updated_at":"2021-09-16T04:55:20Z","created_at":"2021-09-16T04:55:20Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920591386","body":"You mentioned wanting guidance as to what to change to change this behavior. I think you might be able to change it with a one-line (well, two-line) fix: remove the `if (!update_scheduled) {` line in [scheduler.ts](https://github.com/sveltejs/svelte/blob/dad02847718084df495c7272c9e0d0f122d99c27/src/runtime/internal/scheduler.ts#L15) (and also the closing brace on line 18) and I bet this will cause the `$:` blocks to become re-entrant.\r\n\r\nIf that's not enough, then you'll want to look into [extract_reactive_declarations() in Component.ts](https://github.com/sveltejs/svelte/blob/dad02847718084df495c7272c9e0d0f122d99c27/src/compiler/compile/Component.ts#L1264), especially how it sets `assignees` and `dependencies`.\r\n\r\nI'm not going to make a PR removing `if (!update_scheduled)`, because not only do I prefer the existing behavior, there's already a solution (derived stores).\r\n\r\nHowever, I fully agree that there should be an update to documentation around `$:` reactive statements to help explain that they are not reentrant: assigning to `x` inside a reactive block that depends on `x` will *not* cause a second update to run. There are several open issues asking for docs updates about reactive blocks: #2778, #4305, #4516, #4586, #4811, and #5520 are some that I found. #5520 in particular is very similar to what confused you: it's caused by how `$:` will batch updates and \"throw away\" intermediate updates, whereas store subscriptions will trigger for all updates.","updated_at":"2021-09-16T05:32:38Z","created_at":"2021-09-16T05:32:38Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920594554","body":"@rmunn thanks a lot for the detailed responses.\r\n\r\nI know that having `isSmallerThan10` updated outside of the problematic reactive block avoids the issue (because it eliminates the need to run the same block twice in the same tick).  \r\n**I don't think it solves the problem though** or how it is different than extracting this logic to another reactive block as you've demonstrated, which effectively means the reactive block doesn't need to run more than once.    \r\nAs you said, in our real apps there is a bunch of logic going on when deciding what should happen next and it is not always possible to separate the updates out (or to constantly keep this limitation in mind), plus sometimes it would be a chain reaction in which more than one reactive block needs to run more than once in the same tick based on what other blocks did.\r\n\r\nCan you please explain further how derived stores solve this? What am I missing?\r\nAlso, is there a way for someone to know that their reactive block is going to fail them and they need to use something else?\r\n\r\n\r\n","updated_at":"2021-09-16T05:40:52Z","created_at":"2021-09-16T05:40:52Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"920594603","body":"Finally, here's a REPL showing how derived stores can safely update their \"parent\" store, causing the dependent store to run again. Go to https://svelte.dev/repl/59dc4577ca5a44688535e794b723d8df?version=3.42.6, click the Update button once, and check the console logs to see that the derived store was able to update its parent store and was re-run after the parent store updated. Note three things about this example:\r\n\r\n1. The `update()` call did not interrupt the execution of the derived store's callback. Instead, the derived store's callback ran to completion, and then the parent store's update triggered the derived store's callback a second time.\r\n2. There is no protection against infinite loops here. If you change `update(x => x+1)` to `update(x => x+2)` your browser tab will freeze up, as the derived store goes into an infinite loop of seeing an odd number, updating the parent store with another odd number, seeing an odd number, updating the parent store..\r\n3. If you change `count.update(x => x+1)` to `count.set(5)`, though, it will not cause an infinite loop. That's because when a store is set to the value it already contains, no updates are triggered. Beware, though: if the store contains a Javascript object, it compares by reference, not by deep equality. So if the store had `{a: 5}` and you run `count.set({a: 5})`, that will be assigning a new object each time and will enter an infinite loop.","updated_at":"2021-09-16T05:41:01Z","created_at":"2021-09-16T05:41:01Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920600886","body":"@rmunn thanks for the example. I greatly appreciate your effort.\r\nIf I understand you correctly, you are suggesting that I structure my application using chains of derived stores instead of reactive blocks. derived stores cannot depend on component local state only on other stores, which means my application shouldn't have local state at all either. It doesn't sound like a reasonable alternative to me.\r\nEven if it was a good alternative I would say that the existing behaviour is highly unexpected and incorrect for the reasons I have stated above.\r\nIf my team invests time in adding the ability to opt-out of this optimisation somehow (either via a compiler option or some other way), will the svelte core team be willing to accept this enhancement? \r\n\r\n","updated_at":"2021-09-16T05:56:19Z","created_at":"2021-09-16T05:56:19Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"920601498","body":"> I know that having `isSmallerThan10` updated outside of the problematic reactive block avoids the issue (because it eliminates the need to run the same block twice in the same tick).\r\n\r\nOne reason why having `isSmallerThan10` in its own reactive block works is because the Svelte compiler re-orders reactive blocks based on their dependencies. So even though the `$: isSmallerThan10 = count < 10` line is written *above* the place where `count` is reassigned, the Svelte compiler notices the fact that `count` is reassigned in the large block, and reorders the `isSmallerThan10 = count < 10` line *below* the large block when it compiles its update() function. (Check out the \"JS output\" tab of your REPL to see this for yourself). Therefore, when the component update runs (once), the `count` reassignment happens first, and *then* the `isSmallerThan10` check happens later.\r\n\r\n> sometimes it would be a chain reaction in which more than one reactive block needs to run more than once in the same tick based on what other blocks did.\r\n>\r\n> Can you please explain further how derived stores solve this? What am I missing?\r\n\r\nDerived stores solve this because they are not batched, but always run when the parent is updated, even if that's several times. See the example REPL I just posted: the derived store `even` updates its parent store `count`, which causes `even` to receive *another* update immediately. The \"losing changes\" effect that you are annoyed by does not happen with derived stores; they always\r\n\r\nNote that that does *not* mean that the derived store always has to update when the parent updates. There's a version of derived stores where the callback takes *two* parameters, not just one. Then the second parameter is a `set` function that Svelte will hand you, and it's up to your callback to call `set` if and when you want to update the derived store's value. Otherwise the derived store will *not* update. So if I wanted a derived store that *didn't* modify its parent, but just acted as a filter that only produced even values, I could have written it like this:\r\n\r\n```js\r\nlet even = derived(count, ($count, set) => {\r\n  if ($count % 2) {\r\n    console.log('Odd, not updating');\r\n  } else {\r\n    console.log('Even, good');\r\n    set($count);\r\n  }\r\n});\r\n```\r\n\r\nPlug that into my REPL in place of the `even` store that's already there, and you'll see that whenever you click the \"Update\" button, the callback runs and logs something to the console. But the `Even is {$even}` text in the HTML output only updates when there's an even value in there, and otherwise it keeps the old value.\r\n\r\n> Also, is there a way for someone to know that their reactive block is going to fail them and they need to use something else?\r\n\r\nI'd say a good rule of thumb would be:\r\n\r\n1. Do you need every update, or just the final value? If you need every update, then change `$:` into a derived store.\r\n2. Is there any chance that you'll need to assign to a dependency of the block inside the block? Then you need a derived store, and careful testing to make sure you can't get into an infinite loop.\r\n\r\nAlso, if your reactive block is calling any functions that update variables it's looking for, that's going to fail. This one is already mentioned in the docs: see the `$: total = yPlusAValue(x)` example.","updated_at":"2021-09-16T05:57:53Z","created_at":"2021-09-16T05:57:53Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920604472","body":"> derived stores cannot depend on component local state only on other stores\r\n\r\nYes, they can. Just use closures. Here's an example: https://svelte.dev/repl/149caba183d84ca8bfaf05ea4ca9d896?version=3.42.6\r\n\r\n> I would say that the existing behaviour is highly unexpected\r\n\r\nAgreed, which is why the documentation needs to be updated to clarify. But there is plenty of existing code that depends on the fact that `$:` will batch updates, so it would be a breaking change. So it's highly unlikely to change except in Svelte 4.x, if and when that (currently hypothetical) version comes out. Meanwhile, derived stores can do what you need.\r\n\r\n**Edit:** I missed this part of your question:\r\n\r\n> If my team invests time in adding the ability to opt-out of this optimisation somehow (either via a compiler option or some other way), will the svelte core team be willing to accept this enhancement?\r\n\r\nI don't know; I'm not part of the core team and can't speak to their state of mind.","updated_at":"2021-09-16T06:05:58Z","created_at":"2021-09-16T06:04:39Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920617423","body":"@rmunn Thanks for pointing out closures (although they bring stale closures into the mix as well, hurray üòÑ ). Maybe it is a valid way forward for us, even if verbose. Will need to think about it some more/ try it out with real code. I would hate to give up reactive blocks altogether.  \r\nYou are right about it being a breaking change if it is not optional (and default stays the current behaviour). I think it is too late to change the default, I agree with you.\r\n\r\nI think that even if the docs get updated people would still trip on it because it is hard to tell whether updates happen in the same tick or not unless you really analyse it and when this behaviour happens it can be quite hard to debug.\r\n\r\nIs there a way to ask someone from the core team whether they would be willing to accept such a change (option to avoid the optimisation that's causing this behaviour)?","updated_at":"2021-09-16T06:32:46Z","created_at":"2021-09-16T06:32:46Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"920632535","body":"P.S. On the other hand, derived stores can't depend *reactively* on component-local state, but you might be able to get around that by introducing a special-purpose store that updates itself whenever you need the derived store to fire an update. Something like this:\r\n\r\n```js\r\nconst updatePlease = writable(0);\r\nconst complexStore = derived([a, b, c, d, updatePlease], ($a, $b, $c, $d, _) => {\r\n  // ... code that uses stores a, b, c and d, and also some localStateA and localStateB\r\n  return 'Some value';\r\n});\r\nlet localStateA;\r\nlet localStateB;\r\n\r\n$: { let _a = localStateA; updatePlease.update(x => x+1); }\r\n$: { let _b = localStateB; updatePlease.update(x => x+1); }\r\n```\r\n\r\nThe `let _a = localStateA` line ensures that that block \"learns\" that localStateA is a dependency, so every time `localStateA` changes, the `$:` block re-runs. However, see https://svelte.dev/repl/da05d5f994d0454c8dc95ed8c7311146?version=3.42.6 for an example of where this trick might not always work as desired. The \"Update A\" and \"Update B\" buttons work as desired. But if you click the \"Update both\" button, notice that it doesn't work quite as you might wish. Although the derived store did fire twice, once for the A update and once for the B update, by the time the closure ran, both A and B had been updated so it fires twice with \"1 and 1\" instead of firing once with \"0 and 1\". This is kind of the opposite of a stale closure. (What would you call it, a \"too-fresh\" closure?) At any rate, the cause here is, yet again, the batching of `$:` statements. Both the `let _a` and `let _b` statements ran one after the other in the same tick, and the store updates got queued up for the next tick. So by the time the callback ran twice, both localStateA and localStateB were already updated to their new values.\r\n\r\nBasically, you'll have to convert to derived stores every time you need updates that cannot be batched, but you can safely use component-local variables and the `updatePlease` store trick if you want reactivity, as long as you're aware that the `$:` calls are batched and you will only get the latest value of those local variables.\r\n\r\nOh, and to answer this question that you posted while I was writing this:\r\n\r\n> Is there a way to ask someone from the core team whether they would be willing to accept such a change (option to avoid the optimisation that's causing this behaviour)?\r\n\r\nAccording to https://github.com/sveltejs/kit/issues/2100#issuecomment-895446285, the Svelte Discord at https://svelte.dev/chat is probably the right place, specifically in the \"contributing\" channel.\r\n\r\n","updated_at":"2021-09-16T07:02:56Z","created_at":"2021-09-16T07:02:56Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920662642","body":"Thanks. I will try my luck on Discord.\r\ntbh, your heroic efforts to make local state work with derived stores reactively makes me think that it would be easier and more robust to convert all local state to stores and use zero reactive blocks, but even that is going to be a whole lot of verbosity and weirdness.\r\n","updated_at":"2021-09-16T07:35:37Z","created_at":"2021-09-16T07:35:37Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"920669274","body":"You know, I think I've thought of a better rule of thumb for when to use `$:` and when to use stores. The key concept is to decide, for each bit of state, whether it's part of the presentation or part of the data model.\r\n\r\n* For presentation state, use `$:` and component-local variables.\r\n* For data-model state, use stores.\r\n\r\nFor presentation state, it doesn't matter if you miss an intermediate update, because the human eye isn't that fast anyway. So if you have, say, a live graph that updates its bar-chart columns according to the data in a store, it won't matter if some of the height updates get batched: if they're happening so close to each other, the human eye wouldn't notice the height transition from 3 to 5 if it's immediately followed by another transition from 5 to 8, so having the bar go directly from 3 to 8 will look just the same to the user. (Especially if you're animating the bar height with a tweened store).\r\n\r\nFor data-model state, it certainly does matter if you miss intermediate updates. Because if you're also calculating the average of all the bars and triggering something (say, writing to a log) when the average is above a certain threshhold, going from 3 to 5 and then from 5 to 8 can have very different effects than going from 3 straight to 8. If going to 5 was enough to pass the threshhold, then 3->5 and 5->8 would write to the log twice, while 3->8 would only write to the log once.\r\n\r\nSo if the piece of state you're looking at is intended to change the UI, then it's presentation state and you can use `$:` for it. But if it's intended to have knock-on effects on other pieces of state, then it's data-model state and should be in a store.","updated_at":"2021-09-16T07:46:29Z","created_at":"2021-09-16T07:46:29Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"920674071","body":"> For presentation state, it doesn't matter if you miss an intermediate update\r\n\r\nThe thing is it is not intermediate updates that are missed but all updates besides the first (in my original example)","updated_at":"2021-09-16T07:54:19Z","created_at":"2021-09-16T07:54:05Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"920916021","body":"Looking at [Clean example without a store](https://svelte.dev/repl/b417aec1edd94811ad87b9e0c039790d?version=3.42.6) REPL, I don't understand why we would want the reactive block to re-run again, it could easily lead to infinite loops during runtime since there's no robust way to check if the old and new values are equal, e.g. for `object`s.\r\n\r\nI think the current behaviour is feasible and could be documented in the docs for anyone who likes a deeper dive into Svelte's reactivity. But regarding workarounds, while the store technique works, it feels like it would open up risks for infinite loops as well.\r\n\r\nMaybe a better workaround is to refactor the code and inverse the control of reactive variables, so instead of `if a is foo, b = bar`, we change it to `b = (if a is foo ? bar : null)`. That way we can clearly define the dependency graph. I believe any usecases can be refactored this way.\r\n\r\nExtra context: We heavily use Svelte in my company project too and we rarely hit this issue much, so I don't think this is a big blocking issue within Svelte.","updated_at":"2021-09-16T13:44:50Z","created_at":"2021-09-16T13:44:50Z","creator_user_login":"bluwy"}
{"number":6732,"comment_id":"921289790","body":"@bluwy sure there are ways to deep compare objects, maybe not super cheap ways (and i wouldn't want them to apply automatically but could be a good idea for another opt in feature). This happens regardless of objects (see the first comment).\r\nWe would want the reactive block to run again because the contract of reactive/ declarative programming says that the block describes the app state and in this case it doesn't. The the program correctness (== the most important thing) is just quietly violated.\r\n\r\nInfinite loops are usually very easy to notice (because your browser gets stuck), debug and fix, and anyway this is a very partial and un-needed defence because real app stores tend to be connected to servers and then you have asynchrony in the mix and this protection stops protecting you (see my example with timeout), which adds to the confusion.\r\nI am glad it doesn't affect your apps, and agree that for normal apps that change once in a while in straight forward ways based on input from the user (== slowly) this won't be an issue. If you keep pushing the envelop I can almost guarantee that it will cause all sorts of subtle bugs in your apps.\r\nIn any case, it is okay if we disagree. All I am asking is to make this optional and backwards compatible.\r\n\r\n ","updated_at":"2021-09-16T22:11:37Z","created_at":"2021-09-16T22:11:37Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"922001525","body":"Thanks for the explanation @isaacHagoel. You're right about reactive programming should ensure program correctness, and there are many ways to achieve that. I think Svelte does ensure that, but in a different way by relying on IoC.\r\n\r\nIf you do insist on making an optional feature, there are some hurdles I can see:\r\n\r\n1. Deep compare won't work robustly in all cases, which could lead to either infinite loops or program incorrectness.\r\n2. Infinite loops needs to be detected in some way, we can't have the browser freezing as heuristic, that wouldn't be ideal for prod.\r\n3. Maybe `immutable: true` could help with the comparison, but that could be an undesirable side-effect.\r\n\r\nIMO this path would as well cause some subtle bugs, and is just one of the many ways to ensure program correctness. So from my POV, you could try that if you want, but it isn't a silver bullet too.\r\n\r\nAlso: The maintainers have not forgotten about this! We're still discussing asynchronously the best path forward.","updated_at":"2021-09-17T18:35:57Z","created_at":"2021-09-17T18:35:57Z","creator_user_login":"bluwy"}
{"number":6732,"comment_id":"922006965","body":"There's a related RFC from another community member about this: https://github.com/sveltejs/rfcs/pull/40","updated_at":"2021-09-17T18:45:50Z","created_at":"2021-09-17T18:45:50Z","creator_user_login":"dummdidumm"}
{"number":6732,"comment_id":"922076882","body":"thanks @dummdidumm . I will read it in details. \r\n@bluwy you are right that comparing objects comes with its own set of complexities. Just to clarify, that's not what I am suggesting/ requesting here. I want to be able to **opt out from infinite loops protection altogether** and take full responsibility for that in my code, while Svelte is responsible for correctness. ","updated_at":"2021-09-17T20:56:56Z","created_at":"2021-09-17T20:56:56Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"922548547","body":"I think of reactive variables like cells in a spreadsheet. In a spreadsheet, you can't have a cell reference itself. The example in this issue seems like problematic code to write because the reactive block is both reading and writing the same variable value and it's unclear to me exactly how that should work. You could write that code in a much clearer way with far fewer lines and without the use of any stores like this: https://svelte.dev/repl/909e0ee9b2484dc3b9618dea80f82c86?version=3.42.6","updated_at":"2021-09-19T22:43:24Z","created_at":"2021-09-19T22:43:24Z","creator_user_login":"benmccann"}
{"number":6732,"comment_id":"922549285","body":"@benmccann this is a toy example. I agree with you that in this case the code could have been different and better. Not so much in real life scenarios that we have. I could make an example that uses this kind of mechanism for a few reactive blocks to communicate with each other via state changes. The problem here is not the self referencing nature of the code (which is btw, legit - recursion is a very common pattern). The problem is that the block has only one chance to run per tick and that it does so silently without providing any warning or indication.","updated_at":"2021-09-19T22:50:16Z","created_at":"2021-09-19T22:50:16Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"922555409","body":"Yeah, I definitely get that it's a toy example. But I think what I suggested would apply to any more complex example as well.\r\n\r\nRecursion is fine in JavaScript, but not a spreadsheet. I'm not saying to avoid recursion, but that I personally wouldn't choose recursive reactivity, and code is clearer if recursion is done outside the reactive code.\r\n\r\nE.g. this code is far nicer:\r\n```\r\nlet y = 10;\r\n$: x = fibonacci(y);\r\n```\r\n\r\nWhereas this code is not as nice:\r\n```\r\nlet y = 10;\r\nlet x = y;\r\n$: = {\r\n  if (y > 1) {\r\n     y -= 1;\r\n     x = x * y;\r\n  }\r\n}\r\n```\r\n\r\nI agree with your point that it should at least be documented. But personally I'd try to avoid that code and think a lint rule warning it's ugly might be even more useful.","updated_at":"2021-09-19T23:28:57Z","created_at":"2021-09-19T23:28:57Z","creator_user_login":"benmccann"}
{"number":6732,"comment_id":"922556999","body":"I see your point but as i said the same issue occurs when the communication\nis across more than one reactive block through state.\nI can try make an example if it helps.\n\nOn Mon, Sep 20, 2021 at 9:29 AM Ben McCann ***@***.***> wrote:\n\n> Yeah, I definitely get that it's a toy example. But I think what I\n> suggested would apply to any more complex example as well.\n>\n> Recursion is fine in JavaScript, but not a spreadsheet. I'm not saying to\n> avoid recursion, but that I personally wouldn't choose recursive\n> reactivity, and code is clearer if recursion is done outside the reactive\n> code.\n>\n> E.g. this code is far nicer:\n>\n> let y = 10;\n> $: x = fibonacci(y);\n>\n> Whereas this code is not as nice:\n>\n> let y = 10;\n> let x = y;\n> $: = {\n>   if (y > 1) {\n>      y -= 1;\n>      x = x * y;\n>   }\n> }\n>\n> I agree with your point that it should at least be documented. But\n> personally I'd try to avoid that code and think a lint rule warning it's\n> ugly might be even more useful.\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/6732#issuecomment-922555409>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AE4OZC2WRKVUKE7EBMSQ4GDUCZW4HANCNFSM5EDNRPSA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>\n","updated_at":"2021-09-19T23:42:16Z","created_at":"2021-09-19T23:42:16Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"923435336","body":"Yeah, an example would help especially if it demonstrates a real use case","updated_at":"2021-09-20T23:35:23Z","created_at":"2021-09-20T23:35:23Z","creator_user_login":"benmccann"}
{"number":6732,"comment_id":"923662355","body":"@benmccann there is a discussion happening on #6730 so I am putting a new example there. I still used a single reactive block because I felt it is already getting too big even though I simplified it down as much as I could. At its core it represents a real use case that broke for us.","updated_at":"2021-09-21T06:10:29Z","created_at":"2021-09-21T06:10:29Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"925492722","body":"@rmunn based on your advice, I was playing with derived stores a bit.\r\nI noticed that svelte optimizes them away if the store value is not included in the markup (like it would with any state). It does it even when the internal block affects some other store that does get rendered.\r\nIf a derived store is supposed to replace a reactive block its own value should never be rendered üò¢ \r\nDo you know if there is a way to tell svelte not to do this optimisation and still keep the code? \r\n\r\nSee [this REPL](https://svelte.dev/repl/359180bc0cf34fb3b9076f12baf0d28e?version=3.42.6). Uncomment line 18 and it starts working.\r\nThanks","updated_at":"2021-09-23T04:07:32Z","created_at":"2021-09-23T04:07:32Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"926410063","body":"It's not that the store is optimized away if you don't include the store in the markup, it's that derived stores don't run their callback when nothing has subscribed to them. Actually, derived stores don't even set up their own subscriptions until someone subscribes to the derived store. This is so that derived stores work similarly to readable stores (in fact, derived stores are implemented as `return readable(initial_value, (set) => { /* do setup here */ }` with the \"do setup here\" code being what subscribes to stores and so on), and I don't think that optimization is ever going to change. That optimization is what allows you to set up a whole chain of derived stores without doing any work until it's actually needed.\r\n\r\nThe good news for you is that all you have to do is set up a whole chain of derived stores, and subscribing to the last store will cause the whole chain to activate. I.e.,\r\n\r\n```js\r\nimport { writable, derived } from 'svelte/store'\r\n\r\nconst a = writable(0);\r\nconst aPlus1 = derived(a, x => x+1);\r\nconst aPlus2 = derived(aPlus1, x => x+1);\r\nconst aPlus3 = derived(aPlus2, x => x+1);\r\nconst aPlus4 = derived(aPlus3, x => x+1);\r\nconst aPlus5 = derived(aPlus4, x => x+1);\r\naPlus5.subscribe(x => {\r\n  console.log('a+5 = ', x);  // Will log 'a + 5 = 5'\r\n});\r\n$a = 13;  // Will log 'a + 5 = 18'\r\n```\r\n\r\nHere's a REPL to prove that to you, along with some extra console logging at every step so you can see that each step is activating, not just the final step. https://svelte.dev/repl/7373bbf6d17a44d88676544ae3697aee?version=3.43.0\r\n","updated_at":"2021-09-24T07:31:18Z","created_at":"2021-09-24T07:30:48Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"926412782","body":"Also, looking at the Javascript code for your REPL, even without uncommenting line 18 the JS code for creating the `bla` store still existed. Which means that it wasn't optimized away, it just wasn't running until something subscribed to it.\r\n\r\nTherefore, you don't necessarily need to subscribe to a derived store in the same component that creates it. If the derived store is being exported from the component as a module export, or being saved in component context with `setContext`, or in some way accessible outside the component, then you can subscribe to it from somewhere else and the derived store will kick into action at the moment it's subscribed to.","updated_at":"2021-09-24T07:35:42Z","created_at":"2021-09-24T07:35:42Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"926423028","body":"Here's an updated version of your REPL that shows that simply subscribing to the derived store is enough to make it run, and you don't actually need it in the markup: https://svelte.dev/repl/66c6820032614a66be7d739abc70d7be?version=3.42.6\r\n\r\nBut look at the console log of that REPL and notice that the phrase \"Derived callback fired\" is only printed once no matter how many times you click the Update button. That's because of another optimization that you'll need to look out for if you're using derived stores to trigger side effects like writing to other stores: the value returned from a derived store's callback is used to set the value of the derived store, using `set()`. Remember that setting a store value to the value it already had *does not run subscriptions*; subscriptions are only run when a store's value *changes*. And as written, the `bla` store your REPL does not return anything, meaning the value stored in `bla` is `undefined`. The first time anyone subscribes to `bla`, their subscription will be called synchronously with the store's current value, which is `undefined`. But when `bla`'s callback runs again due to `count` updating, its callback returns `undefined`, so the `bla` store's value is getting set to `undefined` again and is therefore *not running subscriptions*.\r\n\r\nYou can see that in action by editing the REPL I just linked in this comment and adding `return $count;` to the end of the `bla` callback. Then click on the update button a few times and notice that now, `bla`'s subscription is running every time. I find that the simplest way to make sure that your derived store callback runs every time (and therefore triggers any side effects that you want to run) is to have it return the value of its parent store. Because that value will be different every time, otherwise the parent store would not have called its subscribers.\r\n\r\nHowever, for derived stores that derive from two or more parent stores, you'd have to do something like `return [value1, value2];` which is inefficient as it would create a new array each time, requiring the end user's browser to do a lot of garbage collection. Instead, if you want to return a value that changes every time but doesn't require garbage collection, I'd use a Boolean variable, something like this:\r\n\r\n```js\r\nlet complexStoreToggle = false;\r\nconst complexStore = derived([parentA, parentB, parentC, parentD], ([a, b, c, d] => {\r\n  console.log('Doing some side effect with a, b, c and/or d');\r\n  complexStoreToggle = ! complexStoreToggle;\r\n  return complexStoreToggle;\r\n});\r\n```\r\n\r\nNow the value of `complexStore` changes every time any of its parent stores are changed, and therefore anyone subscribing to `complexStore` will get their subscription fired every time.\r\n\r\nI hope that makes sense. If anything I've said doesn't make sense, please ask and I'll try to explain. It might take a few days as I have a busy weekend coming up, but I'll get back to you next week if I can't do so sooner.","updated_at":"2021-09-24T07:53:16Z","created_at":"2021-09-24T07:53:16Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"926427067","body":"@arackaf - You might be interested in the above comments as well, since it's likely that some of your issues with reactive statements might also be solved by converting them to derived stores.","updated_at":"2021-09-24T08:00:10Z","created_at":"2021-09-24T08:00:10Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"926459368","body":"@rmunn thanks. your insight about the need to subscribe in order to activate the store really helped!\r\nso i can make something like this:\r\nhttps://svelte.dev/repl/8b9cb147205f4f4bb29045ef2e99cd3c?version=3.43.0\r\nFor some reason in this case the lack of a return value doesn't seem to be an issue.\r\nI need to play with this idea and see if it can do everything i need it to do. If yes, i will make a library out of it.\r\n","updated_at":"2021-09-24T08:50:55Z","created_at":"2021-09-24T08:50:55Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"926596262","body":"The lack of a return value in `effect` isn't hurting you *now*, but it's going to hurt you later. Because once `effect()` returns, that `const s` you declare in `effect()` is not referenced by anything, so it becomes eligible to be garbage-collected. As does its subscription function. And so at some point, its side effect is going to just stop working, because both `s` and the side-effecting function subscribed to it were garbage collected.\r\n\r\nAnd if it *isn't* garbage collected, then you have the opposite problem, a memory leak, because you never saved the return value of the `subscribe` call so you have no way to unsubscribe. Better to turn `s.subscribe(() => {});` into `return s.subscribe(() => {});`, and then call the unsubscribe function at the appropriate time (in `$onDestroy()`, or in the cleanup of the `use:` action you're using, or whatever).","updated_at":"2021-09-24T12:45:17Z","created_at":"2021-09-24T12:45:17Z","creator_user_login":"rmunn"}
{"number":6732,"comment_id":"926608053","body":"This may got a little lost in the other thread, but here's another approach by Rich for a simulated `useEffect` which does not need to be used with stores: https://svelte.dev/repl/0c9cd8c29c5043eea89bd9c6eb4f279a?version=3.42.6","updated_at":"2021-09-24T13:03:59Z","created_at":"2021-09-24T13:03:40Z","creator_user_login":"dummdidumm"}
{"number":6732,"comment_id":"926938022","body":"@rmunn \r\ngarbage collection doesn't seem to be an issue. I verified it by initiating it manually from the dev tools and it doesn't break the app (luckily, otherwise there would have been something terribly wrong with the gc algorithm).\r\nRich suggested a [solution](https://svelte.dev/repl/c4ff925e552c4a7f88b88db702bcf2d0?version=3.43.0) to potential memory leaks using onDestroy within `effect`. It blows my mind a bit because I didn't know lifecycles can be used outside of components. I guess it works because after compilation there is only the component.\r\n\r\n@dummdidumm \r\nThanks. I did miss it somehow. I think the problem with using ticks everywhere (because `afterUpdate` won't run the second time in the same tick, right?) is that it introduces a lot of asynchrony which can get extremely confusing an hard to track. I might be wrong about this (please tell me if you disagree). I will give it more thought. But this is what intuition (== experience) tells me. With the derived stores everything has the most up to date value instantly. \r\nIt does make me wonder if I can use a similar approach so that the `effect` can get a mix of stores and non stores, track the non stores \"manually\" like Rich does in his example and the stores using the derived store like my example does. Is there any lifecycle that will run more than once in the same tick?\r\n\r\nThank you both for taking the time to interact with me. I do not take it for granted.\r\n","updated_at":"2021-09-24T21:50:12Z","created_at":"2021-09-24T21:50:12Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"926998695","body":"@rmunn @dummdidumm I take it back about ticks. I have been playing a bit and it doesn't seem like they cause discrepancies. It looks like `$: tick().then(() => {` is equivalent to both of these implementations of `effect` for all practical purposes. unless i am still missing something. Commenting on the other thread as well to keep it one conversation. ","updated_at":"2021-09-25T02:43:42Z","created_at":"2021-09-25T02:43:42Z","creator_user_login":"isaacHagoel"}
{"number":6732,"comment_id":"927002316","body":"> It blows my mind a bit because I didn't know lifecycles can be used outside of components. I guess it works because after compilation there is only the component.\r\n\r\nThe docs say that `onDestroy` \"Schedules a callback to run immediately before the component is unmounted.\" So you can put it inside a helper function and that's okay, because when that helper function is being *run*, it's always being run by a component, and it will add that callback to that component's `onDestroy` list.","updated_at":"2021-09-25T03:19:47Z","created_at":"2021-09-25T03:19:47Z","creator_user_login":"rmunn"}
{"number":4265,"comment_id":"583886937","body":"I ran onto this issue too, causing double fetch request at each change.\r\n\r\nYou see the implement here: https://gitlab.com/nexylan/svelty/-/merge_requests/9\r\n\r\nSeems related to #3075 and #3197. Is it a bug or a miss-usage? In that case, there is any documentation about this?\r\n\r\nDoes anybody have a workaround for this issue?","updated_at":"2020-02-09T20:04:23Z","created_at":"2020-02-09T20:04:23Z","creator_user_login":"soullivaneuh"}
{"number":4265,"comment_id":"590308362","body":"@soullivaneuh i ran into same. v3.16.4 works as expected for temporary solution","updated_at":"2020-02-24T13:00:18Z","created_at":"2020-02-24T13:00:18Z","creator_user_login":"damooo"}
{"number":4265,"comment_id":"629211332","body":"I encountered the same issue.","updated_at":"2020-05-15T12:36:26Z","created_at":"2020-05-15T12:36:26Z","creator_user_login":"silllli"}
{"number":4265,"comment_id":"631515139","body":"I have the same problem","updated_at":"2020-05-20T14:37:47Z","created_at":"2020-05-20T14:37:47Z","creator_user_login":"ruslan-khomiak"}
{"number":4265,"comment_id":"652294564","body":"I have the same problem at v3.23.0","updated_at":"2020-07-01T09:06:44Z","created_at":"2020-07-01T09:06:44Z","creator_user_login":"etnilo-indra"}
{"number":4265,"comment_id":"673247589","body":"This is seemingly solved at `v3.24.1`. But when that object/array is the argument of a function, the reactivity runs twice again:\r\n\r\nhttps://svelte.dev/repl/5b37ba40c8854d86a9dab9ace0b6b861?version=3.24.1","updated_at":"2020-08-13T04:25:45Z","created_at":"2020-08-13T04:25:45Z","creator_user_login":"pwwang"}
{"number":4265,"comment_id":"712714533","body":"@Conduitry Are you going to fix this?","updated_at":"2020-10-20T09:18:15Z","created_at":"2020-10-20T09:18:15Z","creator_user_login":"ruslan-khomiak"}
{"number":4265,"comment_id":"712735811","body":"> @Conduitry Are you going to fix this?\r\n\r\nThis works as expected in 3.29.0 - please try against the current released version before bumping issues.\r\n\r\nhttps://svelte.dev/repl/e4ef6be683d84ff4a84d8c2c04703806?version=3.29.0","updated_at":"2020-10-20T09:54:40Z","created_at":"2020-10-20T09:54:40Z","creator_user_login":"antony"}
{"number":4265,"comment_id":"712957085","body":"This is still an issue:\r\n\r\nhttps://svelte.dev/repl/5b37ba40c8854d86a9dab9ace0b6b861?version=3.29.0","updated_at":"2020-10-20T16:00:28Z","created_at":"2020-10-20T16:00:28Z","creator_user_login":"pwwang"}
{"number":4265,"comment_id":"715695165","body":"@antony  in your repl, make your testValue2 an object or make initial values as [] and you'll see 1 more count thanx expected.\r\n\r\nSeeing the pb on 3.29.4 still.","updated_at":"2020-10-24T05:18:47Z","created_at":"2020-10-24T05:00:35Z","creator_user_login":"superseby2"}
{"number":4265,"comment_id":"715913892","body":"@superseby2 I've taken the original REPL and changed the svelte version and it works as expected. I then made your suggested changes and it still seems to work as expected.Can you provide a simple REPL which demonstrates the problem please so that we can see it?\r\n\r\n@pwwang your REPL isn't a valid demonstration of the issues. You are getting two calls because you are initialising the variable `prop` with an empty array (call 1) and then binding it to a child component (call 2). If you correct your code to pass in the variable as you appear to have intended, it works fine. A REPL is only really useful if it doesn't contain any warnings or errors, and it is the simplest possible reproduction of the problem.","updated_at":"2020-10-24T13:17:31Z","created_at":"2020-10-24T13:17:31Z","creator_user_login":"antony"}
{"number":4265,"comment_id":"731517119","body":"I can confirm: 3.29.7 the problem is still there. If I set variable to simple value like: param = 100500 and then bind it - all works fine. Then change it to Array or Object - and it fires twice.\r\n\r\nApp.svelte\r\n------------------------------------------------------------\r\n```\r\n<script>\r\n\timport Component from './Component.svelte';\r\n\tlet param = [100500];\r\n\t$: console.log(param);\r\n</script>\r\n\r\n<Component bind:param/>\r\n```\r\n\r\nComponent.svelte\r\n------------------------------------------------------------\r\n```\r\n<script>\r\n\texport let param;\r\n</script>\r\n\r\n<span>just show param: {param}</span>\r\n```\r\n\r\nConsole output\r\n------------------------------------------------------------\r\n>[100500]\r\n>[100500]","updated_at":"2020-11-21T06:30:59Z","created_at":"2020-11-21T06:28:36Z","creator_user_login":"sourcecaster"}
{"number":4265,"comment_id":"731783590","body":"@MadSheogorath's example as a REPL: https://svelte.dev/repl/9b44ad8378f340cb87c1960a4b9b8caa?version=3.29.7\r\n\r\n~~Some similar behavior that is possibly related: https://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.29.7~~ Opened a new issue for this","updated_at":"2020-11-25T05:39:44Z","created_at":"2020-11-22T17:47:01Z","creator_user_login":"zqianem"}
{"number":4265,"comment_id":"733818883","body":"> @pwwang your REPL isn't a valid demonstration of the issues. You are getting two calls because you are initialising the variable `prop` with an empty array (call 1) and then binding it to a child component (call 2). If you correct your code to pass in the variable as you appear to have intended, it works fine. A REPL is only really useful if it doesn't contain any warnings or errors, and it is the simplest possible reproduction of the problem.\r\n\r\n@antony Maybe I just don't understand how reactivity in Svelte is supposed to work but that doesn't seem like an explanation to me. Why should binding trigger an update? The value didn't change, it just got bound to another component. It also doesn't get triggered when binding primitive data types.","updated_at":"2020-11-25T16:39:36Z","created_at":"2020-11-25T16:39:36Z","creator_user_login":"Fry98"}
{"number":4265,"comment_id":"734073906","body":"It's obvious from the latest example that behavior depends on variable type. Should we open a new bug? Looks like this one isn't tracked much since closed...","updated_at":"2020-11-26T04:56:51Z","created_at":"2020-11-26T04:56:51Z","creator_user_login":"sourcecaster"}
{"number":4265,"comment_id":"736390522","body":"@MadSheogorath I think it'd be duplicate of this https://github.com/sveltejs/svelte/issues/4447","updated_at":"2020-12-01T10:39:09Z","created_at":"2020-12-01T10:39:09Z","creator_user_login":"xpuu"}
{"number":4265,"comment_id":"784854135","body":"It's not a duplicate; it seems related, but [this example](https://svelte.dev/repl/043a3a30aa494064836478cf5e33ebe9?version=3.32.3) seems to show that it's still broken.","updated_at":"2021-02-24T07:22:04Z","created_at":"2021-02-24T07:22:04Z","creator_user_login":"yjp20"}
{"number":4265,"comment_id":"894913765","body":"I solve it use `onMount`:\r\nhttps://svelte.dev/repl/cc81c52dcf034a83ac5f61cf68611037?version=3.6.4","updated_at":"2021-08-09T02:24:10Z","created_at":"2021-08-09T02:24:10Z","creator_user_login":"AiziChen"}
{"number":4265,"comment_id":"895637759","body":"Looks like the bug isn't fixed still...\r\nhttps://svelte.dev/repl/9b44ad8378f340cb87c1960a4b9b8caa?version=3.42.1\r\n\r\n> I solve it use `onMount`\r\n\r\nNope, it is still there, just add $: console.log(prop); and you'll see it fires twice.","updated_at":"2021-08-10T00:22:23Z","created_at":"2021-08-10T00:22:02Z","creator_user_login":"sourcecaster"}
{"number":4265,"comment_id":"991631087","body":"@antony could you re-open this issue? It's still happening, with object bindings firing reactive statements twice (primitive values aren't affected).\r\n\r\n[Here's another REPL](https://svelte.dev/repl/05666bad33ed43b99dc1045264c1962d?version=3.44.2) showing the difference between types in the console, on Svelte version 3.44.2.","updated_at":"2021-12-11T12:45:20Z","created_at":"2021-12-11T12:45:20Z","creator_user_login":"nbgoodall"}
{"number":4265,"comment_id":"991857609","body":"It seems that the problem might be [here](https://github.com/sveltejs/svelte/blob/683c39adb7dd5acff9c6354b3d92ab0f8f430ad1/src/runtime/internal/Component.ts#L143). \r\n\r\n```javascript\r\n$$.ctx = instance\r\n  ? instance(component, options.props || {}, (i, ret, ...rest) => {\r\n      const value = rest.length ? rest[0] : ret\r\n      // If value is not primitive not_equal is always true and component is marked dirty\r\n      if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\r\n        if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value)\r\n        if (ready) make_dirty(component, i)\r\n      }\r\n      return ret\r\n    })\r\n  : []\r\n```","updated_at":"2021-12-12T08:53:11Z","created_at":"2021-12-12T08:53:11Z","creator_user_login":"xpuu"}
{"number":4265,"comment_id":"1088490049","body":"Unfortunately, this issue still exists in 3.46.6.\r\nMy workaround is to split the bind into a prop and an event to update the prop:\r\n```svelte\r\n<Child\r\n  value={complextObject}\r\n  on:update:value={(e) => (complextObject = e.detail)}\r\n/>\r\n```\r\n[REPL](https://svelte.dev/repl/ae23d2b5a1e9488ea3467671ffcbcce8)","updated_at":"2022-04-05T09:41:36Z","created_at":"2022-04-05T09:41:36Z","creator_user_login":"alimo"}
{"number":4265,"comment_id":"1104796594","body":"This is a super small example: \r\nhttps://svelte.dev/repl/37b572ef3fe44523a1bf1b8faddec66a?version=3.47.0\r\n\r\nBug still exists.\r\n\r\n```\r\n<script>\r\n\timport Child from \"./Child.svelte\"\r\n\tlet arr = [123];\r\n\tlet values = 123;\r\n</script>\r\n\r\n<Child bind:values bind:arr />\r\n```\r\n\r\n```\r\n//Child.svelte\r\n\r\n<script>\r\n\texport let arr;\r\n\texport let values;\r\n\t$: console.log(arr.length) //this will always run twice\r\n\t$: console.log(values) //this will run once\r\n</script>\r\n\r\n```\r\n","updated_at":"2022-04-21T07:05:07Z","created_at":"2022-04-21T07:05:07Z","creator_user_login":"lominming"}
{"number":4265,"comment_id":"1320461123","body":"This bug still exists","updated_at":"2022-11-18T19:51:56Z","created_at":"2022-11-18T19:51:56Z","creator_user_login":"Mrbeyond"}
{"number":4265,"comment_id":"1382310343","body":"Any update on this issue? I am still having this issue with version ``3.49.0``","updated_at":"2023-01-13T19:39:36Z","created_at":"2023-01-13T19:38:50Z","creator_user_login":"KiddoV"}
{"number":4265,"comment_id":"1435319619","body":"`3.55.1` and counting! ","updated_at":"2023-02-17T21:56:16Z","created_at":"2023-02-17T21:56:16Z","creator_user_login":"AgarwalPragy"}
{"number":4265,"comment_id":"1450028299","body":"https://svelte.dev/repl/37b572ef3fe44523a1bf1b8faddec66a?version=3.13.0   <--- works\r\n\r\nseems that this behaviour was introduced in 3.14.0\r\n\r\nhttps://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3140\r\n\r\nthis is really annoying because  have lost many hours trying to understand when I have made mistake, and then this is just a bug, not related to my code.... I come form Vue2 world where where this seems to be more predicable ","updated_at":"2023-03-01T12:05:42Z","created_at":"2023-03-01T12:05:42Z","creator_user_login":"aniolekx"}
{"number":4265,"comment_id":"1481685781","body":"> Unfortunately, this issue still exists in 3.46.6. My workaround is to split the bind into a prop and an event to update the prop:\r\n> \r\n> ```svelte\r\n> <Child\r\n>   value={complextObject}\r\n>   on:update:value={(e) => (complextObject = e.detail)}\r\n> />\r\n> ```\r\n> \r\n> [REPL](https://svelte.dev/repl/ae23d2b5a1e9488ea3467671ffcbcce8)\r\n\r\n@alimo do you mean by using https://svelte.dev/docs#template-syntax-component-directives-on-eventname and `createEventDispatcher`, right?\r\n\r\nI don't recognize the syntax: `on:update:value`...","updated_at":"2023-03-23T18:18:26Z","created_at":"2023-03-23T18:18:26Z","creator_user_login":"frederikhors"}
{"number":4265,"comment_id":"1481694397","body":"@Rich-Harris and others: I know you are working hard, guys!\r\n\r\nI love Svelte with all my heart and use it where I can and tell everyone about it as soon as possible. BUT!\r\n\r\nThis small (BUT VERY BIG) problem breaks down all the biggest marketing actions you can do.\r\n\r\nIn some components (written without care) this problem causes us to repeat duplicate (and often quadrupled) queries with all the consequences of the case.\r\n\r\nDon't abandon us on this.\r\n\r\nYour dear followers, lovers of beautiful things.","updated_at":"2023-03-23T18:23:59Z","created_at":"2023-03-23T18:23:59Z","creator_user_login":"frederikhors"}
{"number":4265,"comment_id":"1481701877","body":"> @alimo do you mean by using https://svelte.dev/docs#template-syntax-component-directives-on-eventname and `createEventDispatcher`, right?\r\n> \r\n> I don't recognize the syntax: `on:update:value`...\r\n\r\n@frederikhors\r\nYes, exactly.","updated_at":"2023-03-23T18:30:39Z","created_at":"2023-03-23T18:29:58Z","creator_user_login":"alimo"}
{"number":4265,"comment_id":"1598758782","body":"Wasted considerable amount of time tracking this down in `3.59.1`. Painful experience.","updated_at":"2023-06-20T13:14:38Z","created_at":"2023-06-20T13:14:38Z","creator_user_login":"Xazzzi"}
{"number":4265,"comment_id":"1606538640","body":"Just want to note down my investigation findings so far on this issue. \r\n\r\nPointed out by [aniolekx](https://github.com/sveltejs/svelte/issues/4265#issuecomment-1450028299):\r\n> https://svelte.dev/repl/37b572ef3fe44523a1bf1b8faddec66a?version=3.13.0 <--- works\r\n> \r\n> seems that this behaviour was introduced in 3.14.0\r\n\r\nThe change that introduces this behavior is this [patch][1] to file `InlineComponent/index.ts`\r\n\r\n[1]: https://github.com/sveltejs/svelte/compare/v3.13.0...v3.14.0#diff-58fabedcf609e5db4a4b0d17593a209ec1231ef33a878e20057a74496b796255\r\n\r\nUsing aniolekx's provided repl code as example,\r\n\r\n```svelte\r\n<script>\r\n\timport Child from \"./Child.svelte\"\r\n\tlet arr = [123];\r\n\tlet values = 123;\r\n</script>\r\n\r\n<Child bind:values bind:arr />\r\n<!-- \r\n\tINSIDE Child...\r\n\t$: console.log(arr.length) //this will always run twice\r\n\t$: console.log(values) //this will run once\r\n -->\r\n```\r\n\r\na comparison between compiled js by v3.13.0 vs v3.14.0 reveals below diff:\r\n\r\n```diff\r\nfunction create_fragment(ctx) {\r\n  let updating_values;\r\n  let updating_arr;\r\n  let current;\r\n\r\n  function child_values_binding(value) {\r\n    ctx.child_values_binding.call(null, value);\r\n-   updating_values = true;\r\n-   add_flush_callback(() => (updating_values = false));\r\n  }\r\n\r\n  function child_arr_binding(value_1) {\r\n    ctx.child_arr_binding.call(null, value_1);\r\n-   updating_arr = true;\r\n-   add_flush_callback(() => (updating_arr = false));\r\n  }\r\n\r\n  let child_props = {};\r\n\r\n  if (ctx.values !== void 0) {\r\n    child_props.values = ctx.values;\r\n  }\r\n\r\n  if (ctx.arr !== void 0) {\r\n    child_props.arr = ctx.arr;\r\n  }\r\n\r\n  const child = new Child({ props: child_props });\r\n  binding_callbacks.push(() => bind(child, \"values\", child_values_binding));\r\n  binding_callbacks.push(() => bind(child, \"arr\", child_arr_binding));\r\n\r\n  return {\r\n    c() {\r\n      create_component(child.$$.fragment);\r\n    },\r\n    m(target, anchor) {\r\n      mount_component(child, target, anchor);\r\n      current = true;\r\n    },\r\n    p(changed, ctx) {\r\n      const child_changes = {};\r\n\r\n      if (!updating_values && changed.values) {\r\n+       updating_values = true;\r\n        child_changes.values = ctx.values;\r\n+       add_flush_callback(() => (updating_values = false));\r\n      }\r\n\r\n      if (!updating_arr && changed.arr) {\r\n+       updating_arr = true;\r\n        child_changes.arr = ctx.arr;\r\n+       add_flush_callback(() => (updating_arr = false));\r\n      }\r\n\r\n      child.$set(child_changes);\r\n    },\r\n```\r\n\r\n---\r\n\r\nBelow is the compiled js code of Child.svelte:\r\n\r\n```js\r\nimport { SvelteComponent, init, safe_not_equal } from \"svelte/internal\";\r\n\r\nfunction instance($$self, $$props, $$invalidate) {\r\n  let { arr } = $$props;\r\n  let { values } = $$props;\r\n\r\n  $$self.$set = ($$props) => {\r\n    if (\"arr\" in $$props) $$invalidate(\"arr\", (arr = $$props.arr));\r\n    if (\"values\" in $$props) $$invalidate(\"values\", (values = $$props.values));\r\n  };\r\n\r\n  $$self.$$.update = (changed = { arr: 1, values: 1 }) => {\r\n    if (changed.arr) {\r\n      $: console.log(arr.length);\r\n    }\r\n\r\n    if (changed.values) {\r\n      $: console.log(values);\r\n    }\r\n  };\r\n\r\n  return { arr, values };\r\n}\r\n\r\nclass Child extends SvelteComponent {\r\n  constructor(options) {\r\n    super();\r\n    init(this, options, instance, null, safe_not_equal, { arr: 0, values: 0 });\r\n  }\r\n}\r\n\r\nexport default Child;\r\n```\r\n\r\nAll `$: statements` are compiled into code inside the `$$self.$$.update(changed)` wrapper function. `$$.update` is only called at two places:\r\n1. during the `init` phase of a component when it's first created\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/Component.ts#L139\r\n2. in the `flush()` internal phase which is an async batch updater that is scheduled to be called after any local state is modified and `make_dirty`'ed\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/scheduler.ts#L72-L81\r\n\r\nThere're plenty of dirty checks along the code path of `flush` to make sure it doesn't update thing that shouldn't be touched and only refresh those that are considered \"dirty\". `if (changed.arr)` inside Child's `$$.update` is one of those dirty checks.\r\n\r\n`init` phase of Child component will call `child.$$.update` once, which is the one that we desire. But then the `flush` phase, which is triggered by binding to Child's exports from Parent component, will call `child.$$.update` again. And unfortunatedly the dirty check failed to guard this second call, thus we see this behavior that everyone complains about in current issue.\r\n","updated_at":"2023-06-26T06:19:12Z","created_at":"2023-06-26T03:28:48Z","creator_user_login":"hackape"}
{"number":4265,"comment_id":"1606826489","body":"I'll focus on these three lines:\r\n\r\n```js\r\nconst child = new Child({ props: child_props });\r\nbinding_callbacks.push(() => bind(child, \"values\", child_values_binding));\r\nbinding_callbacks.push(() => bind(child, \"arr\", child_arr_binding));\r\n```\r\nread together with the source code of `flush`, we can understand what happens.\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/scheduler.ts#L34-L81\r\n\r\nIn chronological order, these things happen:\r\n\r\n1. `new Parent({ target: ... })` leads to `const child = new Child({ props: child_props });`\r\n2. `init` of Child calls `child.$$.update`, which is desired\r\n3. `init` of Parent calls `flush()`, we enter the `do ... while` loop in `flush`\r\n4. 1st check `dirty_components.length == 0`, so this inner loop is skipped\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/scheduler.ts#L40-L44\r\n5. `while (binding_callbacks.length) binding_callbacks.pop()()` calls `child_values_binding` and `child_arr_binding`\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/scheduler.ts#L46\r\n6. `child_arr_binding` -> `ctx.child_arr_binding.call(null, value_1);` -> `$$invalidate(\"arr\", value_1);` -> `make_dirty(parent, \"arr\")`.\r\n```diff\r\n  function child_arr_binding(value_1) {\r\n    ctx.child_arr_binding.call(null, value_1);\r\n-   updating_arr = true;\r\n-   add_flush_callback(() => (updating_arr = false));\r\n  }\r\n```\r\n7. Because step 6, by this point `dirty_components[0] === parent`, so we re-enter the `do ... while`. We're back to step 4, only this time inner loop is executed.\r\nhttps://github.com/sveltejs/svelte/blob/4c53eb6bda0d02f1f2cd3529791220eec4d8825c/src/runtime/internal/scheduler.ts#L40-L44\r\n8. Dive into `update($$)`, it calls `$$.fragment.p($$.dirty, $$.ctx)` which translates to Parent's compiled code:\r\n```diff\r\n    p(changed, ctx) {\r\n      const child_changes = {};\r\n\r\n      if (!updating_values && changed.values) {\r\n+       updating_values = true;\r\n        child_changes.values = ctx.values;\r\n+       add_flush_callback(() => (updating_values = false));\r\n      }\r\n\r\n      if (!updating_arr && changed.arr) {\r\n+       updating_arr = true;\r\n        child_changes.arr = ctx.arr;\r\n+       add_flush_callback(() => (updating_arr = false));\r\n      }\r\n\r\n      child.$set(child_changes);\r\n    },\r\n```\r\n\r\nThis is where v3.14.0 diverges from v3.13.0!\r\n\r\nIn v3.13.0, `updating_arr = true` is set in `child_arr_binding` which is called at step 6, so at step 8, `if (!updating_arr && changed.arr)` dirty check will **NOT** pass, thus `child_changes.arr = ctx.arr` is NOT set. So changes will NOT propagate to child component via `child.$set(child_changes)` call, in turns `child.$$.update()` will NOT be called a second time.\r\n\r\nIn v3.14.0, `updating_arr = true` is **NOT** set in `child_arr_binding`, so at step 8 `if (!updating_arr && changed.arr)` dirty check **WILL PASS**, and erronously mark `child_changes.arr = ctx.arr` as dirty. So changes WILL propagate to child component via `child.$set(child_changes)` call, in turns `child.$$.update()` WILL be called a second time.","updated_at":"2023-06-26T07:00:14Z","created_at":"2023-06-26T07:00:14Z","creator_user_login":"hackape"}
{"number":4265,"comment_id":"1606854528","body":"For those who just want a quick solution to the problem, add `<svelte:options immutable={true} />` to the parent component should fix it.\r\n\r\nNoted that this will also introduce unsatisfiying effect that forces you to create new object/array reference in order to notify the compiler about a change. See for defails: https://svelte.dev/docs/special-elements#svelte-options","updated_at":"2023-06-26T07:18:22Z","created_at":"2023-06-26T07:18:22Z","creator_user_login":"hackape"}
{"number":4265,"comment_id":"1606864062","body":"I dig out the PR that introduce this behavior: #3886. It's meant to fix #3382, but unfortunately it fixed one problem and created another. ü´† I don't know what is the correct way to proceed either. One thing is for sure: two way binding is tricky.\r\n\r\n@dummdidumm do you have time to do a triage on this issue?","updated_at":"2023-06-26T07:35:32Z","created_at":"2023-06-26T07:25:39Z","creator_user_login":"hackape"}
{"number":4265,"comment_id":"1636642874","body":"Adding my small contribution and testimonial here, facing this exact problem until finding this issue. \r\n\r\nAt least 6 hours banging my head against the wall !\r\n\r\nLoving this framework, but this causes a lot of side effects to manage.","updated_at":"2023-07-15T03:35:40Z","created_at":"2023-07-15T03:35:40Z","creator_user_login":"Borisstoy"}
{"number":4265,"comment_id":"1636708671","body":"I don't expect this bug or issue to persist till now, after years of complaints.\r\n\r\nThe update (of binded variable that is of type object) is many as number of binds and nested binds.\r\n\r\nThat's a very bad.\r\n\r\nIs it like the svelte team are not seeing this what?","updated_at":"2023-07-15T08:24:55Z","created_at":"2023-07-15T08:24:55Z","creator_user_login":"Mrbeyond"}
{"number":4265,"comment_id":"1636712194","body":"> I don't expect this bug or issue to persist till now, after years of complaints.\r\n> Is it like the svelte team are not seeing this what?\r\n\r\nPlease accept my apologies @Mrbeyond, I must have missed the PR you opened to fix this. Can you ping me a link when you have a minute?","updated_at":"2023-07-15T08:45:54Z","created_at":"2023-07-15T08:45:54Z","creator_user_login":"antony"}
{"number":4265,"comment_id":"1636727954","body":"Fixing this issue will most likely be a breaking change - I'm sure some cases depend on such behaviour.\r\n\r\nAlso, it makes sense to fix other reactivity-related issues altogether, but it's a really complicated thing. \r\n\r\nI hope it will be done in Svelte 5.","updated_at":"2023-07-15T10:12:03Z","created_at":"2023-07-15T10:12:03Z","creator_user_login":"7nik"}
{"number":4265,"comment_id":"1636745226","body":"I would argue that this should considered as a hotfix and not wait for Svelte 5.\r\n\r\nThe current behavior should be preserved, and the fix should be introduced somehow as experimental.","updated_at":"2023-07-15T11:52:01Z","created_at":"2023-07-15T11:52:01Z","creator_user_login":"Borisstoy"}
{"number":5604,"comment_id":"779824460","body":"I would enjoy this feature.\r\n\r\nIs there a workaround for now, to have conditional slots? (Except of copy paste..)","updated_at":"2021-02-16T13:08:04Z","created_at":"2021-02-16T13:07:01Z","creator_user_login":"s0me0ther"}
{"number":5604,"comment_id":"797587013","body":"+1. this would help make my code less verbose in some cases.","updated_at":"2021-03-12T16:05:20Z","created_at":"2021-03-12T16:05:20Z","creator_user_login":"ajschmidt8"}
{"number":5604,"comment_id":"842022363","body":"+1, Especially useful for slot forwarding!!!\r\nOtherwise there is no way to use the deepest slot fallbacks\r\n\r\nhttps://svelte.dev/repl/7941b94f6c6f42df93aba4d5ef543917?version=3.38.2","updated_at":"2021-05-17T06:08:51Z","created_at":"2021-05-17T06:08:51Z","creator_user_login":"ash0080"}
{"number":5604,"comment_id":"850895385","body":"I agree, this is a must-have for complex components. Code duplication is one of the largest sources of bugs, please don't make us do it.","updated_at":"2021-05-29T20:37:54Z","created_at":"2021-05-29T20:37:54Z","creator_user_login":"thislooksfun"}
{"number":5604,"comment_id":"856342402","body":"Here's the workaround I'm using:\r\n\r\n```html\r\n{#if $$slots.header}\r\n  <header>\r\n    <slot name=\"header\" />\r\n  </header>\r\n{/if}\r\n\r\n<style>\r\n  header {\r\n    padding: 16px;\r\n    /* ... */\r\n  }\r\n  header:empty {\r\n    display: none;\r\n  }\r\n</style>\r\n```\r\n\r\nThis means that when you have something like this:\r\n\r\n```html\r\n<Demo>\r\n  <svelte:fragment slot=\"header\">\r\n    {#if condition}\r\n      <p>HELLO</p>\r\n    {/if}\r\n  </svelte:fragment>\r\n</Demo>\r\n```\r\n\r\nYou will only see the `<header>` ‚Äì and its padding ‚Äì¬†when `condition` is true. ","updated_at":"2021-06-08T00:07:41Z","created_at":"2021-06-08T00:07:41Z","creator_user_login":"lukeed"}
{"number":5604,"comment_id":"983296626","body":"We just ran into the same thing -- trying to conditionally pass in a slot.  Being able to do this makes sense.... In our case, we are trying to conditionally render a slot named \"body\" within an expandableCard component.  If there's no body slot given to expandableCard, just render the header without expander body.\r\n\r\nI guess our workaround would be to pass in a Boolean prop to expandableCard called \"hasBody\", and then conditionally render the expander div that has the `<slot name=\"body\">`... clunky but doable.  \r\n","updated_at":"2021-12-01T05:15:05Z","created_at":"2021-12-01T05:13:33Z","creator_user_login":"gmanfredi"}
{"number":5604,"comment_id":"990904208","body":"Hey. It'd be great to get this as a feature.\r\n\r\nEven with `<svelte:fragment>` the `$$slots.name`  resolves to true","updated_at":"2021-12-10T11:47:47Z","created_at":"2021-12-10T11:47:05Z","creator_user_login":"harshmandan"}
{"number":5604,"comment_id":"1028325301","body":"Issues like this one, the lack of a `<svelte:element>` analogous to `<svelte:component>`, lack of a simple way to forward all events, impossibility of using actions on components, etc. are some of the rough edges that must be fixed so Svelte can actually be said to be a really mature framework. These things should just work.","updated_at":"2022-02-02T20:22:52Z","created_at":"2022-02-02T20:22:52Z","creator_user_login":"gustavopch"}
{"number":5604,"comment_id":"1059980711","body":"Appreciate the CSS tip @lukeed. For anyone using tailwindcss you can do this with the following:\r\n\r\n```html\r\n<header class=\"p-4 empty:p-0\">\r\n```","updated_at":"2022-03-06T15:13:42Z","created_at":"2022-03-06T15:13:42Z","creator_user_login":"e0"}
{"number":5604,"comment_id":"1075740315","body":"Well, I currently use this ugly workaround with CSS display instead of if:\r\n\r\n`\r\n        <header slot=\"header\" style=\"display: {data.header.length > 0 ? 'inline' : 'none'}\">\r\n` \r\n\r\n(use display depending on your element type, e.g. table-row for table rows etc.)","updated_at":"2022-03-22T23:13:55Z","created_at":"2022-03-22T23:13:55Z","creator_user_login":"zdenda-online"}
{"number":5604,"comment_id":"1136680233","body":"Also just ran into this, assumed it was a bug rather than a missing feature because it seems like a no brainer. Is there any input from the svelte team on this? Is it due to technical limitations of the compiler? Or do we need an RFC for it? Would love to move it forward.","updated_at":"2022-05-25T03:18:00Z","created_at":"2022-05-25T03:18:00Z","creator_user_login":"madeleineostoja"}
{"number":5604,"comment_id":"1158766733","body":"Is there any progress on getting this over the line? I really don't think that having workarounds is the best way.","updated_at":"2022-11-23T22:26:29Z","created_at":"2022-06-17T11:11:41Z","creator_user_login":"boian-ivanov"}
{"number":5604,"comment_id":"1183242119","body":"+1","updated_at":"2022-11-23T22:26:24Z","created_at":"2022-07-13T13:43:04Z","creator_user_login":"whatwhywhenandwho"}
{"number":5604,"comment_id":"1195291255","body":"This will be really helpful when creating custom component with predefined options and pass fragments to child component.\r\n\r\nFor example:\r\nI have `MyTableComponent` with some classes for `SvelteTable` component. To be able to fully use `SvelteTable` from my `MyTableComponent`, I need to pass 3 slots from `MyTableComponent` into `MyTableComponent`. Sometimes 0 or only 1 fragment will be overrides.","updated_at":"2022-07-26T10:19:34Z","created_at":"2022-07-26T10:16:03Z","creator_user_login":"Saibamen"}
{"number":5604,"comment_id":"1206362192","body":"+1","updated_at":"2022-11-23T22:26:38Z","created_at":"2022-08-05T11:53:45Z","creator_user_login":"bigonha"}
{"number":5604,"comment_id":"1246083799","body":"I think have a workaround.  I created a Svelte component that I named SlotFragment.svelte.  It conditionally renders a default slot.\r\n\r\n```svelte\r\n{#if $$slots.default}\r\n    <slot />\r\n{/if}\r\n```\r\n\r\nFor example when composing components, I have component A with a `header` slot.  The `header` slot has some HTML around it that is rendered conditionally on the slot being filled.  \r\n\r\nI have component B that that renders component A plus some other stuff.  Component B provides a `header` slot that should be forwarded to component A, plus its own `footer` slot. \r\n\r\nThis syntax in component B works, but causes component A to always think the slot is filled and it renders the additional HTML.\r\n\r\n```svelte\r\n<slot name=\"header\" slot=\"header\" />\r\n```\r\n\r\nSo you try to put an #if around it, but the slot must be filled within a component.\r\n\r\n```svelte\r\n{#if $$slots.header}\r\n  <slot name=\"header\" slot=\"header\" />\r\n{/if}\r\n```\r\nThen you try to wrap it in a svelte:fragment, but it can't be in the #if either:\r\n\r\n```svelte\r\n{#if $$slots.header}\r\n  <svelte:fragment>\r\n    <slot name=\"header\" slot=\"header\" />\r\n  <svelte:fragment>\r\n{/if}\r\n```\r\n\r\nHowever, using the SlotFragment component works:\r\n\r\n```svelte\r\n{#if $$slots.header}\r\n  <SlotFragment slot=\"header\">\r\n    <slot name=\"header\" />\r\n  <SlotFragment>\r\n{/if}\r\n```","updated_at":"2022-09-14T00:25:46Z","created_at":"2022-09-14T00:25:46Z","creator_user_login":"GeoffCox"}
{"number":5604,"comment_id":"1255851842","body":"Also ran into this issue. Conditional slots would be a very useful feature","updated_at":"2022-09-23T06:46:35Z","created_at":"2022-09-23T06:46:35Z","creator_user_login":"AlbertMarashi"}
{"number":5604,"comment_id":"1256141080","body":"I ran into this issue yesterday and spun up a repl to reproduce - https://svelte.dev/repl/b089c2c379e9404596445c16311bd1b9?version=3.50.1.","updated_at":"2022-09-23T15:02:26Z","created_at":"2022-09-23T12:20:37Z","creator_user_login":"N00nDay"}
{"number":5604,"comment_id":"1277594406","body":"Jup, just ran into this as well. Would love to see this work as the suggested feature. Please add this, Svelte team! üò≠üíï","updated_at":"2022-11-23T22:25:55Z","created_at":"2022-10-13T13:17:04Z","creator_user_login":"Rolands-Laucis"}
{"number":5604,"comment_id":"1304864125","body":"Please add this feature, it is deeply important for us to fully use the slot concept. I had to waive the slot feature and fully integrate the child component into the parent one, because of this, which goes against the concept of extracting logic into components.\r\n\r\nNow I have to duplicate code in case I would need a similar child component in the future. Which unfortunately is bad practice. \r\n\r\nIn my case the if and each tag are generating the error.\r\n\r\nThanks ","updated_at":"2022-11-06T18:29:27Z","created_at":"2022-11-06T18:29:27Z","creator_user_login":"LowArmour"}
{"number":5604,"comment_id":"1312629577","body":"I add my support for the svelte team to add this feature. It's a common problem that currently needs very elaborate workarounds.","updated_at":"2022-11-23T22:25:38Z","created_at":"2022-11-13T03:26:29Z","creator_user_login":"sebmor"}
{"number":5604,"comment_id":"1320366596","body":"+1","updated_at":"2022-11-23T22:25:23Z","created_at":"2022-11-18T18:11:25Z","creator_user_login":"mikerowe81"}
{"number":5604,"comment_id":"1320559540","body":"+1","updated_at":"2022-11-23T22:25:30Z","created_at":"2022-11-18T21:43:00Z","creator_user_login":"hinex"}
{"number":5604,"comment_id":"1321181146","body":"It has been more than 2 years that this feature request has been here, with quite a lot of community backing. Is there a timeline for it or is it even something planned to be implemented? I know that there's quite the push to get SvelteKit v1 out, but is there some hope at least of including this in Svelte at any point in the not too distant future @Conduitry @dummdidumm @benmccann ?","updated_at":"2022-11-23T22:25:15Z","created_at":"2022-11-20T16:49:00Z","creator_user_login":"boian-ivanov"}
{"number":5604,"comment_id":"1321841317","body":"I'm just another guy who ran into this issue. Please fix it.","updated_at":"2022-11-23T22:25:02Z","created_at":"2022-11-21T10:33:46Z","creator_user_login":"x4fingers"}
{"number":5604,"comment_id":"1325354178","body":"+1","updated_at":"2022-11-23T22:24:55Z","created_at":"2022-11-23T16:37:30Z","creator_user_login":"HeimMatthias"}
{"number":5604,"comment_id":"1325658471","body":"Please don't spam all subscribers to this issue with +1 or the equivelant","updated_at":"2022-11-23T22:24:48Z","created_at":"2022-11-23T21:08:30Z","creator_user_login":"madeleineostoja"}
{"number":5604,"comment_id":"1325695854","body":"> Please don't spam all subscribers to this issue with +1.\r\n\r\nI don't think this is spamming. It's upvoting, as it's a feature we really really need :)","updated_at":"2022-11-23T22:24:40Z","created_at":"2022-11-23T21:44:33Z","creator_user_login":"whatwhywhenandwho"}
{"number":5604,"comment_id":"1325725789","body":"It is spamming. Please use thumbs up to upvote the issue. I will be hiding your comment as it just adds noise and doesn't help figure out how to implement this","updated_at":"2022-11-23T22:24:32Z","created_at":"2022-11-23T22:24:20Z","creator_user_login":"benmccann"}
{"number":5604,"comment_id":"1332050823","body":"`<div  hidden={yourCondition} slot=\"slotName\">hide if yourCondition is true else show</div>`\r\n\r\nThis is only working with standard HTML-Elements out of the box. If the child is a custom Component, you could wrap it in a div or modify it to accept a hidden parameter.\r\n\r\nThe mentioned example would look like this:\r\n`<MyComponent>\r\n    <a hidden={something()} slot=\"right-container\">Hi</a>\r\n</MyComponent>`\r\n\r\nüôÉ","updated_at":"2022-11-30T12:16:43Z","created_at":"2022-11-30T12:08:47Z","creator_user_login":"fvjupiter"}
{"number":5604,"comment_id":"1360803736","body":"This limitation is particularly annoying when using transitions, since the simple workaround is to hide the element when the slot shouldn't be rendered, rather than removing it from the DOM entirely. Could a `key` block work for this?","updated_at":"2022-12-21T03:21:07Z","created_at":"2022-12-21T03:20:23Z","creator_user_login":"hugo-t-b"}
{"number":5604,"comment_id":"1369116986","body":"At the very least add an error message or something. I have just been debugging for two hours questioning everything I knew about Svelte bindings because I was trying to conditionally insert a component into a slot.\r\n\r\nFor people who are in a similar situation. You can wrap you component in a div and assign the slot there.\r\nSo while this unfortunately currently doesn't work:\r\n```\r\n\t{#if errorVisibility}\r\n\t\t<ErrorMessage slot=\"errorMessage\" value=\"Incorrect username or password\" />\r\n\t{/if}\r\n```\r\nThis does:\r\n```\r\n<div slot=\"errorMessage\">\r\n\t{#if errorVisibility}\r\n\t\t<ErrorMessage value=\"Incorrect username or password\" />\r\n\t{/if}\r\n</div>\r\n```\r\nAs you'll probably reckon it is a band-aid solution because empty divs are far from ideal.","updated_at":"2023-01-02T17:55:30Z","created_at":"2023-01-02T17:47:36Z","creator_user_login":"uranderu"}
{"number":5604,"comment_id":"1407588526","body":"@uranderu thanks for that tip, I just came across this issue when trying to do the same.\r\nThis solution does however not work with Fallback <em> in the slots since $$slots.NAME will be true.\r\n\r\nSo far I've been super impressed with Svelte since its amazing, this is the first trouble I run into tbh..\r\nConditional slots Would be amazing\r\n\r\nAs a work around for making Fallbacks work I added an else to pass In the EM , But id rather have the em in  the child comp tbh..\r\n\r\n```svelte\r\n\t\t<div slot=\"content\">\r\n\t\t\t{#if post.content !== undefined}\r\n\t\t\t\t<textarea>{post.content}</textarea>\r\n\t\t\t{:else}\r\n\t\t\t\t<em>No post content was found</em>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\r\n```","updated_at":"2023-01-29T07:41:57Z","created_at":"2023-01-29T07:39:10Z","creator_user_login":"percybolmer"}
{"number":5604,"comment_id":"1418606357","body":"For those who are running into this issue and require the element to actually be removed from the DOM rather than just hidden with CSS or wrapped in a slotted parent element, I came up with this action as a workaround.\r\n\r\n```typescript\r\nfunction hideOrRemove({\r\n\tnode,\r\n\tparent,\r\n\tnextSibling,\r\n\tshouldHide,\r\n}: {\r\n\tnode: HTMLElement;\r\n\tparent: HTMLElement | null;\r\n\tnextSibling: ChildNode | null;\r\n\tshouldHide: boolean;\r\n}) {\r\n\tif (shouldHide) {\r\n\t\tnode.remove();\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (parent?.contains(nextSibling)) {\r\n\t\tparent.insertBefore(node, nextSibling);\r\n\t\treturn;\r\n\t}\r\n\r\n\tparent?.appendChild(node);\r\n}\r\n\r\nexport function hideElement(node: HTMLElement, condition: boolean) {\r\n\tconst nodeParent = node.parentElement;\r\n\tconst nodeNextSibling = node.nextSibling;\r\n\r\n\thideOrRemove({\r\n\t\tnode,\r\n\t\tparent: nodeParent,\r\n\t\tnextSibling: nodeNextSibling,\r\n\t\tshouldHide: condition,\r\n\t});\r\n\r\n\treturn {\r\n\t\tupdate(newCondition: boolean) {\r\n\t\t\thideOrRemove({\r\n\t\t\t\tnode,\r\n\t\t\t\tparent: nodeParent,\r\n\t\t\t\tnextSibling: nodeNextSibling,\r\n\t\t\t\tshouldHide: newCondition,\r\n\t\t\t});\r\n\t\t},\r\n\t};\r\n}\r\n```\r\n\r\nWhich you can then use like so:\r\n```svelte\r\n<div slot=\"header\" use:hideElement={$shouldShowHeader} />\r\n```\r\n\r\nI would caution to consider this a dangerous approach and to use this at your own risk, as I've only used this for one specific use case, and have not given it much testing or investigation into how it might interact with svelte internals.","updated_at":"2023-02-06T07:11:45Z","created_at":"2023-02-06T07:03:38Z","creator_user_login":"Not-Jayden"}
{"number":5604,"comment_id":"1424833151","body":"This requires ugly hacks to work around when using slot forwarding to child components. Its a greatly needed feature.","updated_at":"2023-02-09T20:59:21Z","created_at":"2023-02-09T20:59:21Z","creator_user_login":"TristanBrotherton"}
{"number":5604,"comment_id":"1460156096","body":"A feature with this level of importance should have given more attention than this IMHO. ","updated_at":"2023-03-08T13:27:57Z","created_at":"2023-03-08T13:27:57Z","creator_user_login":"B-Esmaili"}
{"number":5604,"comment_id":"1497747208","body":"While this issue still exists, I do have a workaround to propose. Conditionnal slots work fine with default slots, but not with named ones. What I do is just pass an extra prop to the components declaring the named slot that will enable/disable its display from within. It's not as elegant, but it works fine. Here's a REPL representing the use case : https://svelte.dev/repl/dda911c0804c43bd8d6d035ed0660e22?version=3.58.0","updated_at":"2023-04-05T16:01:34Z","created_at":"2023-04-05T16:01:34Z","creator_user_login":"davidsavoie1"}
{"number":5604,"comment_id":"1605085308","body":"This feature is required. My use case is:\r\nI am making a game, and level has a tutorial with pause / overlay / help messages. One of messages must be in place of game element (score board) to explain it.\r\nMy solution is to create Tutorial component, which renders Level component, and to wrap elements from level in slots with fallbacks, and providing tutorial messages as content for this slots. \r\nBut there is a problem, I want at some point to see element from a game (fallback content), not a message from a tutorial, so I guess `if`-slot content or `null` in slot content will be sufficient to show a fallback, but it isn't.\r\n\r\nMy current solution to add extra prop with visibility flags, and show fallback if flag is true, and slot if flag is false. It is not a declarative way to solve this problem, sadly.","updated_at":"2023-06-24T13:37:23Z","created_at":"2023-06-23T22:56:22Z","creator_user_login":"alexamy"}
{"number":4374,"comment_id":"582639920","body":"I noticed this as well, and I think this is only since one of the lastest updates.\r\n\r\nJust checked, its like this since 3.16.6\r\nhttps://svelte.dev/repl/183ee758c6364a1daf24e456945e4dff?version=3.16.5\r\nhttps://svelte.dev/repl/183ee758c6364a1daf24e456945e4dff?version=3.16.6\r\n\r\n#4146 ","updated_at":"2020-02-05T22:23:56Z","created_at":"2020-02-05T22:16:42Z","creator_user_login":"PatrickG"}
{"number":4374,"comment_id":"582700805","body":"@tanhauhau would probably be the best person to confirm this, but this may be intended, to ensure specificity isn't messed up by the scoping class.","updated_at":"2020-02-06T02:01:54Z","created_at":"2020-02-06T02:01:54Z","creator_user_login":"Conduitry"}
{"number":4374,"comment_id":"582780856","body":"> @tanhauhau would probably be the best person to confirm this, but this may be intended, to ensure specificity isn't messed up by the scoping class.\r\n\r\nBut if this is intended then it cause the problem: when I generate css as a separate file my styles do not apply at all to component html.","updated_at":"2020-02-06T07:56:19Z","created_at":"2020-02-06T07:56:19Z","creator_user_login":"Dreaminsider"}
{"number":4374,"comment_id":"583183800","body":"I noticed same issue. \r\nIt's not a bug in sense of produced code, but it's not smart enough. The fix is too general, it did increase specificity in too many cases when is not necessary and did not change code correctness = pass testes. \r\n\r\nI hope, it will be fixed soon. Fixed CSS edge case (#4146) it's rare. But css it's bigger in all projects with ^3.16.6.","updated_at":"2020-02-07T00:55:41Z","created_at":"2020-02-07T00:55:41Z","creator_user_login":"cvlab"}
{"number":4374,"comment_id":"585789121","body":"yes it is intended.\r\n\r\nsee [this example](https://svelte.dev/repl/3aa2a95ecb464862abd391798e2bb4b4?version=3.18.2):\r\n\r\n```html\r\n<style>\r\n  .a { color: red }\r\n  .a .b .c .d .e .f .g { color: green }\r\n  .a .b .c .d { color: green }\r\n  .b .c .e { color: red }\r\n</style>\r\n```\r\n\r\nto make sure each css selector declaration is scoped within the component, we add hash to the first and the last selector:\r\n\r\n```css\r\n  .a.svelte-hash { color: red }\r\n  .a.svelte-hash .b .c .d .e .f .g.svelte-hash { color: green }\r\n  .a.svelte-hash .b .c .d.svelte-hash { color: green }\r\n  .b.svelte-hash .c .e.svelte-hash { color: red }\r\n```\r\n\r\nto make sure that the class `g`, `d` or `e` is still within the component, not any element outside the component.\r\n\r\nhowever if you noticed in the example, the specificity changed slightly, +1 and +2 in the class specificity.\r\n\r\nthis is okay in this example, but in the example https://github.com/sveltejs/svelte/issues/1277:\r\n\r\n```html\r\n<div>\r\n\t<span>red</span>\r\n\t<span class='foo'>green</span>\r\n</div>\r\n\r\n<style>\r\n  div span {\r\n    color: red;\r\n  }\r\n  .foo {\r\n    color: green;\r\n  }\r\n</style>\r\n```\r\n\r\nafter adding the svelte-hash class, the specificity order changed:\r\n\r\n```css\r\n  div.svelte-hash span.svelte-hash {\r\n    color: red;\r\n  }\r\n  .foo.svelte-hash {\r\n    color: green;\r\n  }\r\n```\r\n\r\nto restore the specificity order, we have to make sure that each declarations have the equal number of svelte hash class added:\r\n\r\n```css\r\n  div.svelte-hash span.svelte-hash {\r\n    color: red;\r\n  }\r\n  .foo.svelte-hash.svelte-hash {\r\n    color: green;\r\n  }\r\n```\r\n\r\nwhich causes some selectors to have double svelte hash class.","updated_at":"2020-02-13T14:42:42Z","created_at":"2020-02-13T14:42:42Z","creator_user_login":"tanhauhau"}
{"number":4374,"comment_id":"585802491","body":"@tanhauhau This is not smart, in **many many** cases with or without double/triple/... hash, specificity order is not changed. See first example (https://github.com/sveltejs/svelte/issues/4374#issue-560610725). With preprocessing you can check if it's needed or not. Right now css files are bigger in all projects.","updated_at":"2020-02-13T15:05:07Z","created_at":"2020-02-13T15:05:07Z","creator_user_login":"cvlab"}
{"number":4374,"comment_id":"585805650","body":"Yea i agree with you, it's not quite smart.","updated_at":"2020-02-13T15:11:03Z","created_at":"2020-02-13T15:11:03Z","creator_user_login":"tanhauhau"}
{"number":4374,"comment_id":"586045062","body":"My main problem with this is, that it is hard to overwrite specific things from a parent component.\r\nI know, the svelte guys think a parent component should not overwrite styles, but coming from web-components, that just feels normal.\r\n\r\nWhat i don't understand, when the component has one root element with a class, why does this root element needs a higher specificity?\r\n```html\r\n<div class=\"Child\">\r\n  ...\r\n</div>\r\n```\r\n\r\nSo, in the parent I have to use\r\n```css\r\n.Parent :global(.Child.Child.Child) {\r\n  my: styles;\r\n}\r\n// or make everything !important\r\n.Parent :global(.Child) {\r\n  my: styles !important;\r\n}\r\n```","updated_at":"2020-02-14T01:00:21Z","created_at":"2020-02-14T00:53:48Z","creator_user_login":"PatrickG"}
{"number":4374,"comment_id":"613992788","body":"It also looks weird in dev tools and increases css bundle size by duplicating classes. This intended behavior is highly questionable.","updated_at":"2020-04-15T11:55:23Z","created_at":"2020-04-15T11:55:23Z","creator_user_login":"vladshcherbin"}
{"number":4374,"comment_id":"625110029","body":"EDIT: Replaced my comment with a new ticket https://github.com/sveltejs/svelte/issues/4795\r\n\r\nSince in my case, the duplication of hashes doesn't apply consistently and introduces a bug.","updated_at":"2020-05-07T09:14:30Z","created_at":"2020-05-07T08:28:58Z","creator_user_login":"insidewhy"}
{"number":4374,"comment_id":"711368375","body":"![thats a feature](https://i.imgflip.com/4iybus.jpg)\r\n\r\nI spent far too much time revalidating my Webpack config and testing plugins, only to eventually end up here.\r\n\r\n- Applying the same scoped class to an element multiple times to seemingly patch another scoping issue is a huge code smell.\r\n- If this is something that is going to stick around, it should be called out in the docs. Anywhere calling out how CSS is generated, in `svelte-loader`, and maybe in the example configs.\r\n- If this was added to address some other concern, how about an option to opt in or out of it?\r\n- This is the first time I've come across a specificity pattern like this. Seeing as how CSS specificity can be a tricky thing at times, I propose that the class is only added once, and any further specificity that needs to be added, should be done so by the Dev. \r\n\r\nCurrently I'm having to use `!important` on global styles (due to the multiple levels of specificity) which leads to it's own pitfalls. Please reconsider this functionality for the reasons I and the other comments have called out.\r\n\r\nJust say no to `.modal-body.svelte-11musit.svelte-11musit.svelte-11musit`","updated_at":"2020-10-18T18:41:46Z","created_at":"2020-10-18T18:41:46Z","creator_user_login":"the0neWhoKnocks"}
{"number":4374,"comment_id":"869074843","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-06-26T23:47:01Z","created_at":"2021-06-26T23:47:01Z","creator_user_login":"stale[bot]"}
{"number":4374,"comment_id":"921976465","body":"Can I ask a probably very stupid question?\r\n\r\n**Why does svelte not use `:where()`-selector to avoid touching the specificity alltogether?**\r\n\r\nI mean, it could be built to be \"transparent\" on targetting the items without adding any specificity at all. It could be an option for users to choose (if old ie support is a must). This way the double class would become totally moot.\r\n\r\nFunny fact, I am not actually using svelte. I just read an article about these issues and wondered if this has been suggested as a possible solution.\r\n\r\nHere, I made a quick demo. https://codepen.io/Arkkimaagi/details/qBjxXwa","updated_at":"2021-09-17T17:52:29Z","created_at":"2021-09-17T17:52:29Z","creator_user_login":"Arkkimaagi"}
{"number":4374,"comment_id":"921988042","body":"A more relevant demonstration here solving the issue @tanhauhau described above :\r\nhttps://codepen.io/Arkkimaagi/pen/zYzRPJJ","updated_at":"2021-09-17T18:12:08Z","created_at":"2021-09-17T18:12:08Z","creator_user_login":"Arkkimaagi"}
{"number":4374,"comment_id":"922008491","body":"You might be referring to [my article](https://geoffrich.net/posts/svelte-scoped-styles/)? üòÅ  Using `:where` is a compelling suggestion -- I had a similar discussion with someone on [r/sveltejs](https://www.reddit.com/r/sveltejs/comments/pjpaz6/how_svelte_scopes_component_styles/hc1dbpu/?context=3) when I posted that article. \r\n\r\nThis would fix these specificity issues, but I also thought of a few downsides:\r\n\r\n- Browsers that don't support `:where` would get no CSS at all ([13% globally](https://caniuse.com/mdn-css_selectors_where)). This includes the basically-dead IE11, yes, but also the previous iOS version (13) and Samsung Internet (similar market share to Firefox, according to caniuse). You can't polyfill `:where` like you can with JS features, so anyone using these browsers would get no styling at all, and apps for those users could break entirely.\r\n- It would be a breaking change, since some global styles would start applying where they didn't before.\r\n- CSS size would increase in some cases, though this would probably be irrelevant with compression\r\n\r\nFor those reasons, if Svelte did implement CSS scoping this way, it should definitely be an opt-in flag as opposed to a new default.","updated_at":"2021-09-17T18:48:43Z","created_at":"2021-09-17T18:48:43Z","creator_user_login":"geoffrich"}
{"number":4374,"comment_id":"922207367","body":"> You might be referring to [my article](https://geoffrich.net/posts/svelte-scoped-styles/)? üòÅ \r\n\r\nYep üòÅ \r\n\r\nI agree, definitely opt-in and not an only option. The browser support and breaking change being the biggest issues.","updated_at":"2021-09-18T05:46:03Z","created_at":"2021-09-18T05:46:03Z","creator_user_login":"Arkkimaagi"}
{"number":4374,"comment_id":"974702764","body":"Just ran into this issue again on another project. This functionality is essentially Svelte adding it's own `!important` but via specificity, which is very frustrating.\r\n\r\nSvelte gets so many things right, it's disappointing that this issue isn't getting the proper attention it deserves.","updated_at":"2021-11-20T19:50:57Z","created_at":"2021-11-20T19:50:57Z","creator_user_login":"the0neWhoKnocks"}
{"number":4374,"comment_id":"974723529","body":"For anyone that doesn't need the duplicate classes, [here's a gist with a Webpack plugin](https://gist.github.com/the0neWhoKnocks/cb3e1e9f61cdba7f9f32501b66d29604) to strip out the duplicates. It's not optimized, may have some bugs, but at the moment, it's better than nothing.","updated_at":"2021-11-20T23:00:42Z","created_at":"2021-11-20T23:00:42Z","creator_user_login":"the0neWhoKnocks"}
{"number":4374,"comment_id":"974887669","body":"Proper solution would be to use [svelte-preprocess-cssmodules](https://github.com/micantoine/svelte-preprocess-cssmodules) and forget about non-class selectors.\r\nhttps://github.com/sveltejs/svelte/issues/2870#issuecomment-823836170","updated_at":"2021-11-21T20:12:53Z","created_at":"2021-11-21T20:12:53Z","creator_user_login":"non25"}
{"number":4374,"comment_id":"975693308","body":"@non25 I looked through that module's options, and it appears to mutate the original class name and append a hash. In my particular cases, the repos utilize BEM and I'm quite familiar with the cascade - so that wouldn't solve the issue for me (hence the plugin).\r\nThat module does look like a good solution if a Dev wants the styling isolated like with a shadowDOM. It still feels like whatever the solution, it should be opt-in, unless they switch over to `where`, which does seem like a nice solution allowing for specificity while also allowing overrides. ","updated_at":"2021-11-22T16:23:15Z","created_at":"2021-11-22T16:22:41Z","creator_user_login":"the0neWhoKnocks"}
{"number":4374,"comment_id":"1080566159","body":"I have just spent several hours with this issue.\r\n\r\n1. I didn't understand why this hash is added twice.\r\n\r\n2. [vite-svelte-plugin](https://github.com/sveltejs/vite-plugin-svelte/blob/92790908cf54a983750333c2db41a60552171692/packages/vite-plugin-svelte/src/utils/compile.ts#L24) uses a different `cssHash` (config value) function for dev.\r\n\r\nTogether, they took me several hours to just understand what is going on. I think if something does not work transparently, it should not be added to the core. I went over the changes in #4146 and I think it can be `revert`ed.","updated_at":"2022-03-28T12:06:04Z","created_at":"2022-03-28T12:05:02Z","creator_user_login":"manuganji"}
{"number":4374,"comment_id":"1290959427","body":"Browser support for `:where()` went from [86 % on 27 Sep 2021](https://geoffrich.net/posts/svelte-scoping-where/) to [92.3 % on Oct 25 2022](https://caniuse.com/mdn-css_selectors_where).","updated_at":"2023-08-28T01:31:24Z","created_at":"2022-10-25T18:12:39Z","creator_user_login":"janosh"}
{"number":4701,"comment_id":"617206182","body":"tagging @pngwn for any other comments, and maybe @Conduitry and @tanhauhau. happy to work on this if you think this is a good idea. main tradeoff i can think off is that it might make svelte template compilation a *tiny* bit slower, but i dont believe it will be noticeable.","updated_at":"2021-05-10T13:37:49Z","created_at":"2020-04-21T14:12:23Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"617209658","body":"I feel like running script preprocessors on every JS expression in the template would slow down compilation considerably but have no data to back that up. \n\nThe other option here would be to expose an api to parse the template without passing the JS expressions to acorn yet. At least then you could write a relatively simple markup preprocessor to handle this case. \n","updated_at":"2020-04-21T14:18:27Z","created_at":"2020-04-21T14:18:27Z","creator_user_login":"pngwn"}
{"number":4701,"comment_id":"617210826","body":"The main technical problem here is that it involves Svelte identifying template expressions written in a language that it cannot parse. The beginnings of template expressions are found via the `{` but the end is found by telling Acorn 'okay parse as much as you can here as an expression' and then Svelte makes sure there's a `}` after where Acorn says it parsed until.\r\n\r\nAs a sort-of solution, the preprocessor could just count opening an closing braces, but this would be thrown off by, say, expressions containing strings containing mismatched braces. A proper solution to this seems more to be to create a new callback that will be called, one at a time, with the start of each expression, and returns the preprocessed code and how many characters it ate, or else throws an exception. I don't have any opinions yet on what this API should look like or what it should be a part of.","updated_at":"2020-04-21T14:20:27Z","created_at":"2020-04-21T14:20:27Z","creator_user_login":"Conduitry"}
{"number":4701,"comment_id":"617216504","body":"If completely avoiding duplicating Svelte parser logic in a preprocessor is not a goal, this all could be fairly straightforwardly implemented in userland in a template preprocessor. The template preprocessor runs before the script or style preprocessors, and the initial intention was that it would do something like convert Pug to HTML, but there's nothing stopping it from transforming any part of the component that it wants. The script and style preprocessors are pretty much sugar on top of the template preprocessor, in that they extract the script or style tags and then operate only on that, leaving the rest of the component unchanged.","updated_at":"2020-04-21T14:30:02Z","created_at":"2020-04-21T14:30:02Z","creator_user_login":"Conduitry"}
{"number":4701,"comment_id":"617227720","body":"indeed we discussed a userland preprocessor solution - but it seemed less than ideal bc it would basically duplicate work that Svelte/Acorn is already doing, and involve wiring up babel twice (once for script, once for template)\r\n\r\nas a Svelte user, the mental model for script preprocessor is \"ok this thing works on everything inside the `<script>` tag\". but that's not the only place that Javascript appears in a Svelte component.\r\n\r\nre: the speed - the syntax transpiles here are going to be *very* light. will have to benchmark to know for sure ofc but we're definitely not going thru the whole es5 dance here.\r\n\r\nI dont know much about the Svelte-Acorn handoff, so this wrinkle with the parsing is interesting. happy to explore that new callback, but i wonder if it should just be the same callback that the preprocessor is","updated_at":"2020-04-21T14:48:33Z","created_at":"2020-04-21T14:48:33Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"619318591","body":"Wanted to chime in here as no googling found this issue (attributing this to the age of the issue) which lead to me creating the above duplicate.\r\n\r\nTo distill what I was trying to say in the above issue I think irrespective of the decision made here it would be good to have some formal documentation on this (also mentioned in #3388) to guide new users and help mitigate wasted effort in trying to set this up when it is currently not possible.","updated_at":"2020-04-25T04:29:25Z","created_at":"2020-04-25T04:29:06Z","creator_user_login":"chopfitzroy"}
{"number":4701,"comment_id":"619444955","body":"based on what conduitry said, it sounds like some R&D is needed on improving that svelte-acorn parsing. having different systems take care of the { and the } seems a little brittle? idk","updated_at":"2020-04-25T21:45:20Z","created_at":"2020-04-25T21:45:20Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"619906282","body":"just throwing some of my thoughts over here, the current preprocessor is more of a string based preprocessor, doing string replacements before letting svelte compiles it.\r\nthis has few implications:\r\n- we dont want to parse the code before parsing the code, therefore, we use regex to quickly match out the `<script>` and `<style>` tag. however matching `{ }` brackets and is hard.\r\n- we discard ast and sourcemap from the preprocessor, for example, if using a typescript preprocessor, we use the generated js code and discard away typescript ast, and reparse the js code in svelte. if typescript AST is estree compliant, why spend extra effort on parsing them again?\r\n   - and this could be make using sourcemap from preprocessor easier\r\n\r\nso i would like to propose that, maybe instead of preprocessor, we can have a parser plugin.\r\n\r\nwe can have a default acorn plugin to help parse JS, but also allow user to provide custom JS parser, as long as they are estree compliant.\r\nsame idea can go to css too.","updated_at":"2020-04-27T10:58:44Z","created_at":"2020-04-27T10:58:44Z","creator_user_login":"tanhauhau"}
{"number":4701,"comment_id":"620019735","body":"i didnt quite understand the difference between preprocessor or parser plugin, but i also didnt really understand the whole post haha. if this seems like the better idea, where is a good place to start?\r\n\r\nalso...what does \"same idea can go to css too\" mean? how would this help?","updated_at":"2020-04-27T14:22:58Z","created_at":"2020-04-27T14:22:58Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"620029850","body":"oh i think i didnt explain it clearly.. \r\n\r\ni think what i was trying to say is that currently it's hard to make its hard to run js expression in markup through preprocessor as it is run before the svelte parsing.\r\n\r\nso maybe an alternative is to provide a way to tap into the parsing, to allow user to provide custom callback to parse JS expression","updated_at":"2020-04-27T14:40:42Z","created_at":"2020-04-27T14:40:42Z","creator_user_login":"tanhauhau"}
{"number":4701,"comment_id":"620094224","body":"If we did integrate this into the parsing by making it an option to the compiler (rather than handling it in an earlier preprocessing step), we'd need to enforce that those plugins are synchronous. And then we'd have two different ways of doing what would seem to users to be very similar things, and each would have different limitations, which sounds confusing.","updated_at":"2020-04-27T16:30:02Z","created_at":"2020-04-27T16:30:02Z","creator_user_login":"Conduitry"}
{"number":4701,"comment_id":"620165113","body":"yeah we definitely dont want that ‚òùÔ∏è . ok so are we back to a preprocessor solution? how hard is matching `{ }` brackets? i have no experience with it but want to be sure this assumption is correct.\r\n\r\ngoing back to conduitry's initial thoughts:\r\n\r\n> The beginnings of template expressions are found via the { but the end is found by telling Acorn 'okay parse as much as you can here as an expression' and then Svelte makes sure there's a } after where Acorn says it parsed until.\r\n\r\ni just find this a little weird and wonder if it can be better? would there be side benefits of parsing the { and } in svelte, and then handing off the complete chunks to Acorn?\r\n\r\nand i'll be transparent, if it just seems not worth it, im happy to back off/close. just thought like itd be a good idea if it were easy.","updated_at":"2020-04-27T18:46:46Z","created_at":"2020-04-27T18:46:46Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"620191708","body":"Without some understanding of the underlying language used within the `{ }`, we can't determine where the expression stops. Consider `{\"}\"}`, a weird but perfectly valid expression to write in the template. Without knowing how quoted strings work in JS, Svelte can't parse this correctly. This is why we pass off `\"}\"}blahblah...` to Acorn, which says 'okay I can parse `\"}\"` as an expression', and then Svelte makes sure there's a `}` after the part that Acorn parsed, and then continues on its way with `blahblah...`.\r\n\r\nRunning preprocessors on the `<script>` tags doesn't pose this same challenge, because these _always_ end when `</script>` is found, which can be done without any understanding of the language used within the body of the tag.\r\n\r\nThere probably is still a reasonable way to handle this within Svelte using preprocessors (perhaps by running through the `{ }` bits in series as we parse the template), but I don't have an obvious suggestion for what the API for that would look like yet. Re-parsing the contents of the `{ }` expressions after preprocessing is probably unavoidable, but it might be possible to avoid doing a full parse of the rest of the component during preprocessing (e.g., it might work to just strip out the `<script>` and `<style>` tags, and look for `{`s in the rest of the file, without parsing anything, and call the callback, which returns the compiled-down JS as well as how many characters it consumed).","updated_at":"2020-04-27T19:38:35Z","created_at":"2020-04-27T19:38:35Z","creator_user_login":"Conduitry"}
{"number":4701,"comment_id":"622398761","body":"While looking at https://github.com/UnwrittenFun/prettier-plugin-svelte/issues/70 it occurred to me that things like the string `<style>` happening within the `<script>` tag is something that Svelte preprocessors also have trouble with. If we've found a `<script>` then _everything_ up until the `</script>` is part of that script, no matter what it might look like. And, similarly, we wouldn't want preprocessors to try to do anything with something like `{'<script>'}`.\r\n\r\nWhat I'm getting at is that I'm starting to look more positively on the idea of going through the input file in order and calling the preprocessors in series. Glossing over some details: In the general situation of a partially preprocessed file, we look for the next occurrence of `<script>` or `<style>` or `{`, whichever happens first. For `<script>` or `<style>` we find the next `</script>` or `</style>`, pass those contents off to the preprocessor, wait for it to respond, and then pick up again after the closing tag. For `{` we pass _the entire rest of the file_ to the preprocessor, wait for it to respond, and then pick up again where it's told us to, and ensure that we see optional whitespace followed by a `}`.\r\n\r\nAs I was writing this, I realized that one of the detail I glossed over was how to handle `{'<script>'}` if we weren't tasked with doing anything with template expressions. Do we use our own embedded copy of Acorn to parse it anyway so that we can skip over it and not try to improperly preprocess the `<script>` (knowing that it's going to be parsed again anyway during compilation)? Do we not worry about trying to nicely handle this unless the user has specified that they want to preprocess template expressions (this seems confusing)?","updated_at":"2020-05-01T13:56:39Z","created_at":"2020-05-01T13:56:39Z","creator_user_login":"Conduitry"}
{"number":4701,"comment_id":"622419843","body":"that's encouraging! altho i'm not sure i follow what the solution is. are we happy with the current behavior of `{'<script>'}`? is there a bug we are also trying to fix here?\r\n\r\ni feel like we make things a little harder for ourselves with the freewheeling order of script, style, and template. i thought for a while about proposing a fixed order to make life easier for ourselves, but decided against it bc we dont want to break the language (and personally, i enjoy doing script -> template -> style, i know its a little weird).","updated_at":"2020-05-01T14:53:12Z","created_at":"2020-05-01T14:53:12Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"622960506","body":"Fun thing i just found in the TS 3.9 RC: https://devblogs.microsoft.com/typescript/announcing-typescript-3-9-rc/#breaking-changes\r\n\r\n![image](https://user-images.githubusercontent.com/6764957/80866698-b8c9d300-8cc2-11ea-9656-f75a69f8c2d3.png)\r\n","updated_at":"2020-05-02T14:17:43Z","created_at":"2020-05-02T14:17:43Z","creator_user_login":"swyxio"}
{"number":4701,"comment_id":"644718362","body":"I was hoping the same, but it seems that vuejs can't achieve this either. \r\n\r\nIt is hard! Hope svelte can get rid of this problem, that would be awesome!!","updated_at":"2020-06-16T11:59:46Z","created_at":"2020-06-16T11:59:46Z","creator_user_login":"multics"}
{"number":4701,"comment_id":"662262757","body":"When thinking about a solution, please also take into consideration how to handle source maps. Right now this is already problematic because there may be a script and a module-script tag, each producing its own source maps. Ideally, only one big source map would be returned after transpiling everything, as part of the result of the preprocess function. Not sure how much of that is handled by #5015 ","updated_at":"2020-07-22T06:11:04Z","created_at":"2020-07-22T06:11:04Z","creator_user_login":"dummdidumm"}
{"number":4701,"comment_id":"663397385","body":"How about we treat all codes and templates are written in `typescript` with types or without types?  Svelte generates typescript code first, then compiles typescript to js. ","updated_at":"2020-07-24T08:00:50Z","created_at":"2020-07-24T07:59:55Z","creator_user_login":"gfreezy"}
{"number":4701,"comment_id":"736004730","body":"For anyone ending up here looking for a way to get optional chaining and other modern syntax to work, adding esbuild (or babel) to your rollup or webpack config is the quickest way to get this to work.\r\n\r\nAdding esbuild 0.8 to the Sapper rollup.config.js:\r\n```js\r\nimport esbuild from '@cush/rollup-plugin-esbuild';\r\n\r\n// Add this after the commonjs plugin\r\nesbuild({\r\n  target: 'es2015',\r\n  exclude: /inject_styles\\.js/, // Needed for sapper\r\n  loaders: {\r\n    '.js': 'js',\r\n    '.ts': 'ts',\r\n    '.svelte': 'js',\r\n  },\r\n}),\r\n```","updated_at":"2020-11-30T19:52:30Z","created_at":"2020-11-30T19:52:30Z","creator_user_login":"jonatansberg"}
{"number":4701,"comment_id":"927196755","body":"@multics Vue [supports it](https://twitter.com/youyuxi/status/1439304854028029953) now.","updated_at":"2021-09-25T23:12:45Z","created_at":"2021-09-25T23:12:45Z","creator_user_login":"wenfangdu"}
{"number":4701,"comment_id":"1106053840","body":"> For anyone ending up here looking for a way to get optional chaining and other modern syntax to work, adding esbuild (or babel) to your rollup or webpack config is the quickest way to get this to work.\r\n> \r\n> Adding esbuild 0.8 to the Sapper rollup.config.js:\r\n> \r\n> ```js\r\n> import esbuild from '@cush/rollup-plugin-esbuild';\r\n> \r\n> // Add this after the commonjs plugin\r\n> esbuild({\r\n>   target: 'es2015',\r\n>   exclude: /inject_styles\\.js/, // Needed for sapper\r\n>   loaders: {\r\n>     '.js': 'js',\r\n>     '.ts': 'ts',\r\n>     '.svelte': 'js',\r\n>   },\r\n> }),\r\n> ```\r\n\r\nhow would this work for sveltekit?","updated_at":"2022-04-22T06:24:00Z","created_at":"2022-04-22T06:24:00Z","creator_user_login":"jmsunseri"}
{"number":4701,"comment_id":"1169190530","body":"I wish this worked too, `{/* @ts-ignore */}` in markup template.","updated_at":"2022-06-28T20:17:57Z","created_at":"2022-06-28T20:17:57Z","creator_user_login":"omar2205"}
{"number":4701,"comment_id":"1170651095","body":"Ran into the \"no ts outside of script tags\" problem for the first time today: \r\n```svelte\r\n<BasicPresentation presentation={frame.presentation as Basic} />\r\n```\r\ntrying to do a type assertion. Just started learning svelte (using svelteKit) and it's been really great but this really bums me out.  Going back to nextjs for now, but I really hope support for this gets added","updated_at":"2022-06-30T01:26:26Z","created_at":"2022-06-30T01:26:26Z","creator_user_login":"jhuggett"}
{"number":4701,"comment_id":"1191827024","body":"@jhuggett You *might* be able to work around that:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\r\n\t// Do your type assertion inside the <script> area!\r\n\t$: presentation = frame.presentation as Basic;\r\n\r\n</script>\r\n\r\n<BasicPresentation {presentation} />\r\n```","updated_at":"2022-07-21T18:55:13Z","created_at":"2022-07-21T18:55:03Z","creator_user_login":"AverageHelper"}
{"number":4701,"comment_id":"1204480112","body":"I'm also getting this problem, which combined with [#1575 ](https://github.com/sveltejs/language-tools/issues/1575) gets very annoying to use typescript with svelte/sveltekit","updated_at":"2022-08-03T21:02:37Z","created_at":"2022-08-03T21:02:37Z","creator_user_login":"Alexandre-Fernandez"}
{"number":4701,"comment_id":"1298209084","body":"I don't think Svelte can honestly say it has TS support until TS works in templates too. Introducing additional type assertions into the script section to workaround this issue works but adds unneccessary cruft and makes code harder to understand.","updated_at":"2022-11-01T08:29:52Z","created_at":"2022-11-01T08:29:52Z","creator_user_login":"brgrz"}
{"number":4701,"comment_id":"1304898633","body":"> I don't think Svelte can honestly say it has TS support until TS works in templates too. Introducing additional type assertions into the script section to workaround this issue works but adds unneccessary cruft and makes code harder to understand.\r\n\r\nIt's also not really an option if you're doing any sort of loops inside of the template section and trying to use TS there","updated_at":"2022-11-06T21:30:42Z","created_at":"2022-11-06T21:30:42Z","creator_user_login":"letoast"}
{"number":4701,"comment_id":"1324103930","body":"I hope TypeScript syntax support in templates will come, too!\r\n\r\nOne thing which confuses me though: The typescript checking seems to work? So I am currently adding `//@ts-ignore` to some lines here and there (ugh).\r\n\r\nI am migrating a Sapper project to Sveltekit right now (also occurs on a fresh sverdle for me). Setting TS compiler option `checkJs` to false does not help. Just removing`lang=\"ts\"` from the script tag. VS Code Svelte and Typescript extionsions pretty default configured - a few changed settings should not affect this.\r\n\r\nIs it just me with a weird configuration I don't see or could this also be related to some Svelte Thing? VS Code extension, Langauge Server, ... !?","updated_at":"2022-11-22T18:47:06Z","created_at":"2022-11-22T18:47:06Z","creator_user_login":"blynx"}
{"number":4701,"comment_id":"1324517476","body":"I hope TypeScript syntax support in templates will come, too! (2)","updated_at":"2022-11-23T03:57:00Z","created_at":"2022-11-23T03:57:00Z","creator_user_login":"DLandDS"}
{"number":4701,"comment_id":"1324661901","body":"@blynx \r\n> Is it just me with a weird configuration I don't see or could this also be related to some Svelte Thing? VS Code extension, Langauge Server, ... !?\r\n\r\nyeah this is because the language server transpiles to a typescript file which can be type checked. The svelte compiler itself doesn't understand typescript though.","updated_at":"2022-11-23T07:43:22Z","created_at":"2022-11-23T07:43:22Z","creator_user_login":"RSWilli"}
{"number":4701,"comment_id":"1330953688","body":"As an alternative way to \"fixing\" that, do you know of any way to skip JSX entirely and use functions?\r\nFor example, inspired from Preact.\r\n```\r\nimport { h } from 'svelte';\r\n\r\nreturn h('div', { id: 'foo' }, 'Hello!');\r\n```\r\nI would use that if I could with Svelte.","updated_at":"2022-11-29T16:50:45Z","created_at":"2022-11-29T16:50:45Z","creator_user_login":"phcoliveira"}
{"number":4701,"comment_id":"1331328945","body":"@phcoliveira that's because JSX is just syntactical sugar for js function calls that gets transpiled away with babel etc. Svelte's compiler is completely different, and that kind of syntax would require writing another (much clunkier) DSL for it","updated_at":"2022-11-29T21:23:17Z","created_at":"2022-11-29T21:23:17Z","creator_user_login":"madeleineostoja"}
{"number":4701,"comment_id":"1331352498","body":"@madeleineostoja, thank you. I didn't know the specifics about how Svelte handles JSX, but I had the feeling that it wasn't possible. At least as a intended template.\nSomething tells me very few people would be interested in working exclusively with TS or JS, returning a render function. But who knows?\nHopefully it will be possible to use TS in expressions inside the template.","updated_at":"2022-11-29T21:39:53Z","created_at":"2022-11-29T21:39:53Z","creator_user_login":"phcoliveira"}
{"number":4701,"comment_id":"1346460300","body":"This is really troubling. In the following example, after doing type guards, I'd type cast, but in this case, it is impossible:\r\n```\r\n<script lang=\"ts\">\r\n    type Field = string | number | boolean;\r\n    type FieldArray = Array<Field>;\r\n\r\n    function isFieldArray(value: Field | FieldArray): value is FieldArray {\r\n        return Array.isArray(value);\r\n    }\r\n\r\n    type ExampleObject = {\r\n        document: Record<string, Field | FieldArray>;\r\n    };\r\n\r\n    const obj: ExampleObject = {\r\n        document: {\r\n            name: 'John',\r\n            age: 30,\r\n            isMarried: true,\r\n            hobbies: ['coding', 'reading', 'gaming']\r\n        }\r\n    };\r\n</script>\r\n\r\n{#each Object.keys(obj.document) as k}\r\n    {#if isFieldArray(obj.document[k])}\r\n        <!-- Type Error: -->\r\n        <!--   Argument of type 'Field | FieldArray' is not assignable to parameter of type 'ArrayLike<unknown>'. -->\r\n        <!--   Type 'number' is not assignable to type 'ArrayLike<unknown>' -->\r\n        {#each obj.document[k] as _, index}\r\n            <input bind:value={obj.document[k][index]} />\r\n        {/each}\r\n    {:else}\r\n        <!-- Attribute accepts string | number | boolean as a value. -->\r\n        <!-- Type Error: -->\r\n        <!--   Type 'Field | FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n        <!--   Type 'FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n        <Attribute bind:value={obj.document[k]} />\r\n    {/if}\r\n{/each}\r\n```","updated_at":"2022-12-12T13:06:15Z","created_at":"2022-12-12T13:06:15Z","creator_user_login":"TGlide"}
{"number":4701,"comment_id":"1412637105","body":"Disclaimer, I'm not familiar with the Svelte internals.  I do have a parser/compiler background though, so allow me to speculate.\r\n\r\nAs I understand it, Svelte presently uses Acorn to parse javascript in templates.  Given that typescript is a superset of javascript, couldn't Svelte use typescript's parsing layer exclusively, and kill two birds with one stone?  To address the problem of parsing within {} braces, couldn't a grammar that describes the entire scope of a .svelte file be defined, and the present TS syntax be embedded in the appropriate places within that outer grammar?  This might be less modular, but modularity is a secondary concern, and could in principle be addressed by using plugins within the grammar description.","updated_at":"2023-02-01T19:52:35Z","created_at":"2023-02-01T19:52:35Z","creator_user_login":"n8allan"}
{"number":4701,"comment_id":"1437040269","body":"> > For anyone ending up here looking for a way to get optional chaining and other modern syntax to work, adding esbuild (or babel) to your rollup or webpack config is the quickest way to get this to work.\r\n> > Adding esbuild 0.8 to the Sapper rollup.config.js:\r\n> > ```js\r\n> > import esbuild from '@cush/rollup-plugin-esbuild';\r\n> > \r\n> > // Add this after the commonjs plugin\r\n> > esbuild({\r\n> >   target: 'es2015',\r\n> >   exclude: /inject_styles\\.js/, // Needed for sapper\r\n> >   loaders: {\r\n> >     '.js': 'js',\r\n> >     '.ts': 'ts',\r\n> >     '.svelte': 'js',\r\n> >   },\r\n> > }),\r\n> > ```\r\n> \r\n> how would this work for sveltekit in february 2023?\r\n","updated_at":"2023-02-20T13:38:36Z","created_at":"2023-02-20T13:38:36Z","creator_user_login":"wvhulle"}
{"number":4701,"comment_id":"1475049733","body":"Not sure if anyone is still having this problem but I solve this using reactive statements. This also helps with typing stuff for component parameters and such.\r\n```\r\n<script lang=\"ts\">\r\n  let foo = {\r\n\t\tbar: {\r\n\t\t\tbaz: true\r\n\t\t}\r\n\t}\r\n  let sub: boolean = false\r\n  $: sub = foo?.ban?.baz\r\n</script>\r\n\r\n<main>\r\n  <h1>Hello {sub}!</h1>\r\n</main>\r\n```","updated_at":"2023-03-19T00:52:16Z","created_at":"2023-03-19T00:40:22Z","creator_user_login":"sandersrd33"}
{"number":4701,"comment_id":"1475058107","body":"> This is really troubling. In the following example, after doing type guards, I'd type cast, but in this case, it is impossible:\r\n> \r\n> ```\r\n> <script lang=\"ts\">\r\n>     type Field = string | number | boolean;\r\n>     type FieldArray = Array<Field>;\r\n> \r\n>     function isFieldArray(value: Field | FieldArray): value is FieldArray {\r\n>         return Array.isArray(value);\r\n>     }\r\n> \r\n>     type ExampleObject = {\r\n>         document: Record<string, Field | FieldArray>;\r\n>     };\r\n> \r\n>     const obj: ExampleObject = {\r\n>         document: {\r\n>             name: 'John',\r\n>             age: 30,\r\n>             isMarried: true,\r\n>             hobbies: ['coding', 'reading', 'gaming']\r\n>         }\r\n>     };\r\n> </script>\r\n> \r\n> {#each Object.keys(obj.document) as k}\r\n>     {#if isFieldArray(obj.document[k])}\r\n>         <!-- Type Error: -->\r\n>         <!--   Argument of type 'Field | FieldArray' is not assignable to parameter of type 'ArrayLike<unknown>'. -->\r\n>         <!--   Type 'number' is not assignable to type 'ArrayLike<unknown>' -->\r\n>         {#each obj.document[k] as _, index}\r\n>             <input bind:value={obj.document[k][index]} />\r\n>         {/each}\r\n>     {:else}\r\n>         <!-- Attribute accepts string | number | boolean as a value. -->\r\n>         <!-- Type Error: -->\r\n>         <!--   Type 'Field | FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n>         <!--   Type 'FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n>         <Attribute bind:value={obj.document[k]} />\r\n>     {/if}\r\n> {/each}\r\n> ```\r\n\r\nIt turns out type guards handle the values of the object better when parsed this way for some reason.\r\nThis implementation resolved all the errors for me.\r\n```\r\n{#each Object.values(obj.document) as v}\r\n      {#if isFieldArray(v)}\r\n          {#each v as _, index}\r\n              <input bind:value={v[index]} />\r\n          {/each}\r\n      {:else}\r\n          <Attribute bind:value={v} />\r\n      {/if}\r\n{/each}\r\n```","updated_at":"2023-03-19T01:14:50Z","created_at":"2023-03-19T01:14:23Z","creator_user_login":"sandersrd33"}
{"number":4701,"comment_id":"1475920962","body":"> > This is really troubling. In the following example, after doing type guards, I'd type cast, but in this case, it is impossible:\r\n> > ```\r\n> > <script lang=\"ts\">\r\n> >     type Field = string | number | boolean;\r\n> >     type FieldArray = Array<Field>;\r\n> > \r\n> >     function isFieldArray(value: Field | FieldArray): value is FieldArray {\r\n> >         return Array.isArray(value);\r\n> >     }\r\n> > \r\n> >     type ExampleObject = {\r\n> >         document: Record<string, Field | FieldArray>;\r\n> >     };\r\n> > \r\n> >     const obj: ExampleObject = {\r\n> >         document: {\r\n> >             name: 'John',\r\n> >             age: 30,\r\n> >             isMarried: true,\r\n> >             hobbies: ['coding', 'reading', 'gaming']\r\n> >         }\r\n> >     };\r\n> > </script>\r\n> > \r\n> > {#each Object.keys(obj.document) as k}\r\n> >     {#if isFieldArray(obj.document[k])}\r\n> >         <!-- Type Error: -->\r\n> >         <!--   Argument of type 'Field | FieldArray' is not assignable to parameter of type 'ArrayLike<unknown>'. -->\r\n> >         <!--   Type 'number' is not assignable to type 'ArrayLike<unknown>' -->\r\n> >         {#each obj.document[k] as _, index}\r\n> >             <input bind:value={obj.document[k][index]} />\r\n> >         {/each}\r\n> >     {:else}\r\n> >         <!-- Attribute accepts string | number | boolean as a value. -->\r\n> >         <!-- Type Error: -->\r\n> >         <!--   Type 'Field | FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n> >         <!--   Type 'FieldArray' is not assignable to type 'string | number | boolean'. -->\r\n> >         <Attribute bind:value={obj.document[k]} />\r\n> >     {/if}\r\n> > {/each}\r\n> > ```\r\n> \r\n> It turns out type guards handle the values of the object better when parsed this way for some reason. This implementation resolved all the errors for me.\r\n> \r\n> ```\r\n> {#each Object.values(obj.document) as v}\r\n>       {#if isFieldArray(v)}\r\n>           {#each v as _, index}\r\n>               <input bind:value={v[index]} />\r\n>           {/each}\r\n>       {:else}\r\n>           <Attribute bind:value={v} />\r\n>       {/if}\r\n> {/each}\r\n> ```\r\n\r\nHuh, that actually makes sense. Thank you!","updated_at":"2023-03-20T09:52:44Z","created_at":"2023-03-20T09:52:44Z","creator_user_login":"TGlide"}
{"number":4701,"comment_id":"1500770556","body":"This problem is made much worse by **svelte-check** with TypeScript throwing an **error** on this line:\r\n```\r\n<div on:keydown={(event) => showErrors(() => onKey(event))} tabindex={0} />\r\n```\r\nwhereas onKey is defined as `onKey(event: KeyboardEvent)`, yet:\r\nsvelte-check gives me: `Error: Parameter 'event' implicitly has an 'any' type. (ts)`\r\n\r\nWhen I add the type, as demanded by svelte-check:\r\n```\r\n<div on:keydown={(event: KeyboardEvent) => showErrors(() => onKey(event))} tabindex={0} />\r\n```\r\nthen Svelte barfs: `Unexpected token` and cannot parse it at all, due to this issue here.\r\n\r\n(This svelte-check error apparently happens only on generic HTML elements which don't have `on:keydown` specifically known to Svelte. `<svelte:window on:keydown={(event) => showErrors(() => onKey(event))} />` and similar work without type.)\r\n\r\nThe fact that TypeScript doesn't work in `{}` expressions in the HTML section, even though my `<script lang=\"ts\">` section is TypeScript, is highly surprising for me. But even if I accept that: Then why is svelte-check not aware of that and tries to enforce type checks in these expressions, causing the svelte-check \"any type\" error above? If TypeScript cannot work in expressions, then surely svelte-check should not try to enforce it?\r\n\r\nThe [only workaround](https://stackoverflow.com/questions/63337868/svelte-typescript-unexpected-tokensvelteparse-error-when-adding-type-to-an-ev) I know is to add another dummy wrapper function in the `<script>` section, but that is useless code and I don't want to do that everywhere.\r\n\r\nMost importantly, there doesn't seem to be any solution for the svelte-check error. I don't know how to make svelte-check happy, because it creates a hard error, which makes our CI pipeline fail, and Svelte has a parse error on the solution that svelte-check demands.","updated_at":"2023-04-08T03:28:01Z","created_at":"2023-04-08T02:47:02Z","creator_user_login":"benbucksch"}
{"number":4701,"comment_id":"1500774257","body":"There is something else going on with that `keydown` code, the event is known and should *not* cause errors (and does not for me either).\r\n![image](https://user-images.githubusercontent.com/834235/230700612-b41f8657-7178-4bf5-99b5-c055fc38163a.png)\r\n\r\nYou might want to create a minimal example that reproduces the issue.","updated_at":"2023-04-08T03:08:36Z","created_at":"2023-04-08T03:08:36Z","creator_user_login":"brunnerh"}
{"number":4701,"comment_id":"1500775693","body":"svelte-check throws the error, both locally and on CI (which is a hard block in our CI pipeline, so I cannot land). I'm not the only one, as [the Stack Overflow question shows](https://stackoverflow.com/questions/63337868/svelte-typescript-unexpected-tokensvelteparse-error-when-adding-type-to-an-ev).\r\n\r\nA simple function call might work, due to type inference. To reproduce, you need the function parameter as in my example.","updated_at":"2023-04-08T03:23:41Z","created_at":"2023-04-08T03:17:34Z","creator_user_login":"benbucksch"}
{"number":4701,"comment_id":"1500787303","body":"The editor tooling uses the same libraries as svelte-check (assuming everything is up to date) and I cannot produce any such error, neither in editor nor via svelte-check.\r\n\r\nI even tried to recreate the structure of the handler's code and it does nothing.\r\n```js\r\nfunction onKey(e: KeyboardEvent) {  }\r\nfunction showErrors(cb: () => any) {  }\r\n```\r\n```svelte\r\n<div on:keydown={event => showErrors(() => onKey(event))} tabindex={0}>\r\n```\r\n\r\nAs I said, please create a minimal example.\r\nIf this actually is an issue, it it something separate from this one.","updated_at":"2023-05-31T08:01:06Z","created_at":"2023-04-08T04:27:14Z","creator_user_login":"brunnerh"}
{"number":4701,"comment_id":"1562214145","body":"I found the Acorn parser TypeScript plugin today.\r\nhttps://github.com/TyrealHu/acorn-typescript\r\n\r\nI think using `acorn-typescript` inside the Svelte parser could be a step forward for Svelte to be able to use TypeScript in the template part.\r\nWe can use `parseExpressionAt()` to parse the end of an expression even if there is TypeScript inside the `{...}`.","updated_at":"2023-05-25T03:44:07Z","created_at":"2023-05-25T03:44:07Z","creator_user_login":"ota-meshi"}
{"number":4701,"comment_id":"1569434795","body":"Thanks for sharing @ota-meshi! We're pretty interested in this approach. If you have made any progress we'd love to see what you're working on. Or we'd be happy to chat about how we might integrate such an approach if you'd like to hop into the #contributing channel on the Svelte Discord and leave us a message","updated_at":"2023-05-31T03:13:53Z","created_at":"2023-05-31T03:13:53Z","creator_user_login":"benmccann"}
{"number":4701,"comment_id":"1689389681","body":"`svelte-check` really makes things crazy. As we have a TypeScript project, the `svelte-check` expects all JS in the file to be actually TS. In strict mode it errors out in this case:\r\n```\r\n<Button\r\n    ...\r\n    clickLogic={(ev) => {\r\n\t    doSomething(ev);\r\n    }}\r\n/>\r\n```\r\nthat the `Parameter 'ev' implicitly has an 'any' type.`\r\n\r\nNevertheless, as this is JS and TS, I cannot specify a type here. As a result, I cannot see any way to make svelte-check happy.\r\n\r\nThings get even worse when using enumerations. This:\r\n```\r\n<div>\r\n\t{SampleEnum[enumMemberKey]}\r\n</div>\r\n```\r\nerrors out that the type 'string' cannot be used to index type 'SampleEnum'. Again, this is not the case, so I cannot say something like: SampleEnum[enumMemberKey as SampleEnum].\r\n\r\nAt the same time we would love to have the `svelte-check` as part of our CI. Even if the code in the mustaches is not a TS, I find it useful how it works for disciplinary reasons. Therefore, I do not want to entirely disable it in the HTML templates. The perfect solution would be to allow TS in HTML templates of Svelte components. While this is still not the case, my question is: Can we disable `svelte-check` warnings case by case? \r\n","updated_at":"2023-08-23T06:59:42Z","created_at":"2023-08-23T06:59:42Z","creator_user_login":"veselints"}
{"number":4701,"comment_id":"1689478843","body":"- https://github.com/sveltejs/language-tools/issues/1026\r\n- https://github.com/sveltejs/language-tools/issues/1915","updated_at":"2023-08-23T08:02:36Z","created_at":"2023-08-23T08:02:36Z","creator_user_login":"brunnerh"}
{"number":4701,"comment_id":"1690138245","body":"> svelte-check expects all JS in the file to be actually TS\r\n> `<Button clickLogic={(ev) => { doSomething(ev); }} />`\r\n> `Parameter 'ev' implicitly has an 'any' type.`\r\n\r\nExactly that. I reported that [4 months ago above](https://github.com/sveltejs/svelte/issues/4701#issuecomment-1500770556) and elsewhere.\r\n\r\nUntil a proper fix (like this feature here) is in place, could svelte-check at least be configured *by default* to not check such expressions at all, or (if possible) to not expect TypeScript in them? At least that would avoid that all developers try to \"fix\" their own code, just to find that this is a bug in svelte-check (or svelte).","updated_at":"2023-08-23T15:07:47Z","created_at":"2023-08-23T15:07:47Z","creator_user_login":"benbucksch"}
{"number":3898,"comment_id":"552625285","body":"This might upset svelte-native unless it is only run on html namespace (and not svg or TNS), otherwise I guess I could add a runtime html parser","updated_at":"2019-11-11T21:31:14Z","created_at":"2019-11-11T21:31:14Z","creator_user_login":"halfnelson"}
{"number":3898,"comment_id":"556284792","body":"This could possibly be further optimized using a [tagged template](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates).","updated_at":"2019-11-20T19:29:40Z","created_at":"2019-11-20T19:29:40Z","creator_user_login":"vipero07"}
{"number":3898,"comment_id":"562293182","body":"I experimented with benchmarking a simple example.\r\n\r\nhttp://jsben.ch/Tg1Yx\r\n\r\nFeel free to point out anywhere I got this wrong, or if there's a better JS/DOM benchmarking site you prefer. \r\n\r\nMy desktop running Chrome shows that the current imperative code may be faster?\r\n\r\n![image](https://user-images.githubusercontent.com/49545/70269256-e08a2e80-1756-11ea-9b55-60c0884f029c.png)\r\n\r\n\r\n<details>\r\n<summary>Modified version of Rich's proposal so it worked</summary>\r\n\r\n```diff\r\n const render = make_renderer(\r\n-  `<section bind><h1 bind>Hello <sveltetext/>!</h1> <p bind></p></section>`\r\n+  `<section bind><h1 bind>Hello <sveltetext/>!</h1> <p bind><sveltetext/></p></section>`\r\n );\r\n \r\n function create_fragment(ctx) {\r\n   let section;\r\n   let t0;\r\n   let t1;\r\n \r\n   return {\r\n     c() {\r\n       [section, { childNodes: [, t0] }, { childNodes: [t1] }] = render();\r\n-      t0 = text(ctx.name);\r\n-      t1 = text(ctx.description);\r\n+      set_data(t0, ctx.name);\r\n+      set_data(t1, ctx.description);\r\n     },\r\n     m(target, anchor) {\r\n       insert(target, section, anchor);\r\n     },\r\n     p:(changed, ctx) {\r\n       if (changed.name) set_data(t0, ctx.name);\r\n       if (changed.description) set_data(t1, ctx.description);\r\n     },\r\n     i: noop,\r\n     o: noop,\r\n     d(detaching) {\r\n       if (detaching) detach(section);\r\n     }\r\n   };\r\n }\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Benchmark Setup JS</summary>\r\n\r\n```js\r\n// SVELTE INTERNALS\r\nfunction noop() { }\r\nfunction append(target, node) {\r\n    target.appendChild(node);\r\n}\r\nfunction insert(target, node, anchor) {\r\n    target.insertBefore(node, anchor || null);\r\n}\r\nfunction detach(node) {\r\n    node.parentNode.removeChild(node);\r\n}\r\nfunction element(name) {\r\n    return document.createElement(name);\r\n}\r\nfunction text(data) {\r\n    return document.createTextNode(data);\r\n}\r\nfunction space() {\r\n    return text(' ');\r\n}\r\nfunction set_data(text, data) {\r\n    data = '' + data;\r\n    if(text.data !== data)\r\n        text.data = data;\r\n}\r\n\r\n// END SVELTE INTERNALS\r\n\r\nfunction create_fragment_imperative(ctx) {\r\n    let section;\r\n    let h1;\r\n    let t3;\r\n    let p;\r\n\r\n    return {\r\n        c() {\r\n            section = element(\"section\");\r\n            h1 = element(\"h1\");\r\n            h1.textContent = `Hello ${ctx.name}!`;\r\n            t3 = space();\r\n            p = element(\"p\");\r\n            p.textContent = `${ctx.description}`;\r\n        },\r\n        m(target, anchor) {\r\n            insert(target, section, anchor);\r\n            append(section, h1);\r\n            append(section, t3);\r\n            append(section, p);\r\n        },\r\n        p: noop,\r\n        i: noop,\r\n        o: noop,\r\n        d(detaching) {\r\n            if(detaching) detach(section);\r\n        }\r\n    };\r\n}\r\n\r\nfunction make_renderer(html) {\r\n    const template = document.createElement('template');\r\n    template.innerHTML = html;\r\n\r\n    const text = template.content.querySelectorAll('sveltetext');\r\n    for(let i = 0; i < text.length; i += 1) {\r\n        text[ i ].replaceWith(document.createTextNode(\"\"));\r\n    }\r\n\r\n    return () => {\r\n        const fragment = template.content.cloneNode(true);\r\n        return fragment.querySelectorAll('[bind]');\r\n    };\r\n}\r\n\r\n\r\nconst render = make_renderer(\r\n    `<section bind><h1 bind>Hello <sveltetext/>!</h1> <p bind><sveltetext/></p></section>`\r\n);\r\n\r\nfunction create_fragment_template(ctx) {\r\n    let section;\r\n    let t0;\r\n    let t1;\r\n\r\n    return {\r\n        c() {\r\n            [ section, { childNodes: [ , t0 ] }, { childNodes: [ t1 ] } ] = render();\r\n\r\n            t0 = set_data(t0, ctx.name);\r\n            t1 = set_data(t1, ctx.description);\r\n        },\r\n        m(target, anchor) {\r\n            insert(target, section, anchor);\r\n        },\r\n        i: noop,\r\n        o: noop,\r\n        d(detaching) {\r\n            if(detaching) detach(section);\r\n        }\r\n    };\r\n}\r\n\r\n// IMPERATIVE TEST CASE\r\nfunction imperative() {\r\n    let name = \"world\";\r\n    let description = \"gogogo\";\r\n\r\n    const frag = create_fragment_imperative({ name, description });\r\n\r\n    frag.c();\r\n    frag.m(document.body);\r\n}\r\n\r\n// TEMPLATE TEST CASE\r\nfunction template() {\r\n    let name = \"world\";\r\n    let description = \"gogogo\";\r\n\r\n    const frag = create_fragment_template({ name, description });\r\n\r\n    frag.c();\r\n    frag.m(document.body);\r\n}\r\n```\r\n</details>","updated_at":"2019-12-05T20:00:58Z","created_at":"2019-12-05T20:00:58Z","creator_user_login":"tivac"}
{"number":3898,"comment_id":"625010585","body":"[domc](https://github.com/Freak613/domc) is one of the fastest libraries in the [js-frameworks-benchmark](https://stefankrause.net/js-frameworks-benchmark8/table.html) (the benchmark is mentioned in https://github.com/sveltejs/svelte/issues/1260). It clones elements rather than using `createElement` and says it's much faster. There's a [full explanation on their readme of what they do](https://github.com/Freak613/domc#how-it-works).\r\n\r\n[stage0](https://github.com/Freak613/stage0), by the same author, is also much faster than Svelte. [It looks to primarily use `template` with `innerHTML`](https://github.com/Freak613/stage0/blob/e863cc35e11fabed7fc7da1fd379e21597c6c92f/index.js#L70). Though the author suggests you may be able to just use a string with `innerHTML` for IE11 support.\r\n\r\nAlso interesting is that they said they got some ideas from morphdom. [On the morphdom readme it says that they render to HTML string when doing SSR and perform 10x faster than React as a result](https://github.com/patrick-steele-idem/morphdom#which-is-better-rendering-to-an-html-string-or-rendering-virtual-dom-nodes), so that might be another idea worth pursuing.","updated_at":"2020-06-07T04:45:48Z","created_at":"2020-05-07T03:37:45Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"640372279","body":"@tivac thanks for running this benchmark. It was a really helpful starting point. I've been playing around with it quite a bit and think I've discovered a number of issues:\r\n* jsben.ch seems to give very different results from other benchmarking solutions in at least some cases according to posts I've seen online [1](https://stackoverflow.com/questions/44612083/which-js-benchmark-site-is-correct) [2](https://github.com/alshakero/perf.zone/issues/8)\r\n* The results are very highly variable. jsben.ch does not print the standard deviation, but I've tried running numerous times on other sites and the standard deviation can sometimes be extremely high\r\n* The benchmark appends a new element to the dom, but never removes it. This makes the test get slower over time. On many of the sites I tested on, this means that the second test that runs is at a disadvantage. This is usually the template test since it was entered second\r\n\r\nI got a really significant speedup on [js-framework-benchmark](https://github.com/krausest/js-framework-benchmark) using both the approach suggested here as well as using stage0 to implement a similar approach https://github.com/sveltejs/svelte/issues/1260#issuecomment-640220248. It was about 15% faster on my machine in both cases. I tend to trust `js-framework-benchmark` more than jsben.ch because I know some people that are highly experienced with JS benchmarking are looking at it, it tests script load and parse times as well, and it returns more consistent results for me.\r\n\r\nThe solution from the original post here creates extra `bind` attributes. Because Svelte is a compiler, I feel like that's probably not necessary. E.g. consider [what domc does](https://github.com/Freak613/domc#how-it-works).","updated_at":"2020-06-08T05:14:14Z","created_at":"2020-06-08T05:14:14Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"640374041","body":"Both the benchmark included above as well as `js-framework-benchmark` create the same fragment numerous times, which seems to be where template + `cloneNode` approaches like the one Rich posted above and the stage0 solution (https://github.com/sveltejs/svelte/issues/1260#issuecomment-640220248) would shine. It'd be interesting to test on a real-world example which creates a whole HTML page with a mix of fragments being created just once, fragments being created in an `each`, etc. but I'm not sure anyone has the time to create such tooling. @krausest, @leeoniya, and @ryansolid do you guys have any thoughts from your experience on whether template + `cloneNode` might still perform better than naive js dom creation if you're creating a fragment only once or in an overall real world example?","updated_at":"2020-06-08T05:18:56Z","created_at":"2020-06-08T05:18:56Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"640389992","body":"I've spent a decent amount of time here.\r\n\r\nThe problem is you need to get the nodes to clone in the first place. This means generally innerHTML it at some point. Usually on file load. I haven't found that too problematic but it's something. Once you have the nodes cloning is generally more performant once you are creating more than a couple at once. I use the same cloning technique in Solid, as does Mikado, Sinuous. I converted the Vanilla implementations to do it too. Basically the whole top tier of JS Frameworks benchmark use this cloning technique as it improves creation time and actually lowers memory usage. That being said Surplus does not, nor does Fidan and they are still up there. I like using these as a baseline since they very similar internals o Solid. We are talking about 5ms on 1000 rows and maybe like 50ms on 10k. \r\n\r\nBut some important details. We can't discount the cost of traversing the nodes to attach bindings or the method of doing so. I don't know what that querySelector is doing in the jsbench example but depending a simple directed walk can be more performant. Also Document Fragments are intrinsically more expensive to attach to the DOM than single elements. I don't know exactly how under the hood, but it's like there is an internal traversal. With a single child fragment probably unnoticeable anyway. Again small gains but I generally clone the element rather than the `template.content` if possible.\r\n\r\nAll that being said. Realworld I doubt it makes a big difference. But I like the hydration story. What you find is now the creation code resembles the hydration code. In one case the server-rendered the template and the other you cloned it. Your work then is more or less the same.","updated_at":"2020-06-08T06:08:40Z","created_at":"2020-06-08T06:08:01Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"641004082","body":"Thanks for taking the time to provide such a detailed response Ryan!","updated_at":"2020-06-09T03:20:46Z","created_at":"2020-06-09T03:20:46Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"641331459","body":"@ryansolid: \r\n\r\n> The problem is you need to get the nodes to clone in the first place. This means generally innerHTML it at some point\r\n\r\nThe goal is to move the html creation out of js land and into the browser load. No innerHTML, no JS to parse and evaluate. Just let them browser load html in template tags. I think this is the part of the approach people are missing here. No JavaScript will always be faster than some JavaScript.\r\n\r\n> We can't discount the cost of traversing the nodes to attach bindings or the method of doing so. I don't know what that querySelector is doing in the jsbench example but depending a simple directed walk can be more performant\r\n\r\nTurns out querySelector is 3-5 times faster. I did my benchmarks a few years ago, but I doubt that has changed. I tried using childNode indexes, firstChild, etc., but no contest. I suspect the browser does some indexing on creation to support css. It may even make the process linear, but I haven't tested that. And this doesn't even take into account that there is no js to parse and evaluate\r\n\r\n> Also Document Fragments are intrinsically more expensive to attach to the DOM than single elements\r\n\r\nIf you know your template fragment only has one child (which you would in a pre-processed framework) you can always optimize by acting on the firstChild in lieu of the fragment. I'd like to see some more benchmarks on this though.\r\n\r\n\r\n","updated_at":"2020-06-09T14:23:52Z","created_at":"2020-06-09T14:23:52Z","creator_user_login":"martypdx"}
{"number":3898,"comment_id":"641413620","body":"For the HTML creation I was thinking about that with SSR techniques. I imagine for pure clientside Svelte that still isn't an option unless we are talking HTML imports. That would be interesting.\r\n\r\nYou've convinced me to revisit QuerySelector. I use QuerySelector to grab templates out for hydration since it is much faster than TreeWalker etc, but I am interested to test whether adding an extra attribute on each element and query selecting versus having a pre-calculated traversal path from compilation using firstChild/nextSibling has differences. That would be interesting because all those libraries use the firstChild approach and I'm always looking for an edge.\r\n\r\nAs for fragments. I was testing an idea of batch creation,. https://jsperf.com/scaling-clonenode A little bit different but the idea was if you knew you were going generally make 100 rows per page couldn't we just do all 100 in one clone operations. In this test I try creating rows 1, 10, 100, and 1000 at a time. In the process I noticed some interesting results. Compare biggestDiv with biggestBlock, this is 1000 rows in a fragment vs 1000 in a div. Second compare oneBlock and oneTr which comes a single row cloning the fragment and a single row cloning the Tr. I use oneTr effectively in Solid but I was looking at different ways to optimize.\r\n\r\nFinally I should mention, which I missed in my first response. We can't forget with cloning in general there is the overhead of markers for text that wraps dynamic expressions. They will be joined as a single text node which will screw up insertion points. I use comment blocks in Solid that I don't remove. I just insert before them. In this example they are \"sveltetext\" text being replaced at creation time. I imagine this might even save a little initial creation time. But it's worth pointing out that there are gotcha's like this more prevalent in the hydration story when you go this way versus per element creation.\r\n\r\n","updated_at":"2020-06-09T16:29:09Z","created_at":"2020-06-09T16:24:09Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"641429682","body":"At least in the Svelte js-framework-benchmark, I didn't see a big difference between query selector vs referencing the node via `children`. The really big difference was in adopting `cloneNode` to avoid rebuilding the rows from scratch","updated_at":"2020-06-09T16:44:44Z","created_at":"2020-06-09T16:44:44Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"641453800","body":"`children` is super expensive as is `childNodes` they basically convert something that is a link list in the underlying implementation into an array. The second you access it you take a hit. If you want to compare use `firstChild` or `nextSibling`","updated_at":"2020-06-09T17:10:19Z","created_at":"2020-06-09T17:10:19Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"642452449","body":"You guys had me testing my sanity but turns out the methods I've been using are still the fastest. Here's the improved benchmark:\r\n\r\nhttps://jsben.ch/16Wsq\r\n\r\nTemplate should be much faster now.\r\n\r\nEDIT:\r\nAnd here is the version that leaves the QuerySelector which is slightly slower:\r\nhttps://jsben.ch/8oVCY\r\n\r\nAs you can see in this case walking the tree manually is faster.","updated_at":"2020-06-11T07:32:32Z","created_at":"2020-06-11T07:00:00Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"642454539","body":"I see template only being 65-80% as fast as imperative in that benchmark, depending on whether I use Firefox (65.34%) or Chrome (82.56%). Multiple test runs flopped results around, but imperative was always faster?","updated_at":"2020-06-11T07:05:58Z","created_at":"2020-06-11T07:04:52Z","creator_user_login":"tivac"}
{"number":3898,"comment_id":"642460976","body":"I ran it multiple times. I see the opposite in Chrome 83. Imperative being around 50% of Template. But Chrome 85 does flip it again although it's much closer. Interesting. I wonder how much this varies version to version.","updated_at":"2020-06-11T07:18:26Z","created_at":"2020-06-11T07:18:26Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"642463812","body":"![image](https://user-images.githubusercontent.com/551284/84357168-92c01880-ac08-11ea-9444-323bd85fa196.png)\r\n\r\nFirefox 78","updated_at":"2020-06-11T07:25:53Z","created_at":"2020-06-11T07:24:19Z","creator_user_login":"halfnelson"}
{"number":3898,"comment_id":"642465064","body":"I would love this as a renderer toggle, otherwise poor old svelte-native is going to need a heck of a lot of work to adapt","updated_at":"2020-06-11T07:26:51Z","created_at":"2020-06-11T07:26:51Z","creator_user_login":"halfnelson"}
{"number":3898,"comment_id":"642468039","body":"I don't know how much I trust this test runner, the more I run it the more all over the place the results seem. I tried in Firefox 78.0b5 and every other run seems to switch.\r\n\r\nTo be fair JS Frameworks Benchmark is only ran in Chrome so that could explain it favoring certain methods. Templates were definitely faster at the time I changed the vanilla implementation of the JS Framework Benchmark.\r\n\r\nI tried porting the test to other test runners which confirm imperative still seems to be faster for this test although it's closer. Not sure if I'm still just missing something, but this deserves closer examination.\r\n\r\nEDIT: Compared both methods with VanillaJS version of JS Framework Benchmark and template is still faster. There might be something around this example/implementation that leads to different results. I guess the next thing to try is different variations of handling textnodes.","updated_at":"2020-06-11T14:25:48Z","created_at":"2020-06-11T07:33:28Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"642610965","body":"I do not trust jsben.ch at all. See my comment above: https://github.com/sveltejs/svelte/issues/3898#issuecomment-640372279\r\n\r\n@halfnelson I'm not that familiar with svelte-native. How would it be impacted?","updated_at":"2020-06-11T12:27:00Z","created_at":"2020-06-11T12:27:00Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"689016020","body":"I realized that the SSR code already uses template strings. It might be interesting to test and see if that's faster on the client-side. It could potentially reduce the amount of code to maintain if that were the only code that was necessary and we no longer needed a lot of the DOM code","updated_at":"2020-09-08T17:08:03Z","created_at":"2020-09-08T17:08:03Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"689138386","body":"I mean the templates still become DOM nodes that get traversed and bindings added. You do get to save a number of create/appends calls, but the server/client code ends up being still very different. However where the real advantage comes in is unifying hydration. It isn't hard to write the node traversal code to be identical for the render and hydration case since they walk over the same nodes either created from cloneNode or rendered from the server. This means that Svelte which I believe currently ships 2 separate paths could ship a single path potentially reducing code size considerably in this case, even more than the reductions from the pure render case as you'd have those reductions as well.\r\n\r\nThe best way to handle this though is the way Solid currently does I think which is still generate separate code for the hydratable case so that the client only render case can be the most optimal still. Hydration still requires walking over dynamic parts to gather nodes which can be completely avoided in the optimal client render approach. \r\n\r\nAs to transfering the Templates in the SSR rendered code.. it depends. On first render I think this has a lot of merit but I wonder if the cacheability of the JavaScript might trump having to send the templates each time. Assuming dynamic content the HTML is not cached but the JS is. But to be fair there are a lot of things that could affect this once you start comparing cache behavior. If our goal is just to prove the smallest JS bundles this is definitely the way to go without much contest.","updated_at":"2020-09-08T21:10:35Z","created_at":"2020-09-08T21:10:35Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"912924098","body":"I was interested in this issue, so I created an experimental implementation using `<template>` and `cloneNode`. \r\n\r\nhttps://github.com/tomoam/svelte/tree/efficient-fragment-creation\r\n\r\nThe implementation is only makeshift, but passes the tests. The tests have not been changed except for the test cases in the `test/js` directory and a very few test cases.\r\nThe implementation of `hydration` and `namespace` is quite messy.\r\n\r\nHere is the keyed result of running [krausest/js-framework-benchmark](https://github.com/krausest/js-framework-benchmark) with this implementation. `svelte-experimental` is the benchmark score using this implementation.\r\n\r\n<img alt=\"js-framework-benchmark keyed results\" src=\"https://user-images.githubusercontent.com/29677552/132085773-59486fe5-9024-45a5-8b45-60a5eaff66d7.png\" width=\"50%\">\r\n\r\n> Note: The scores for `partial update`, `select row`, `swap rows`, and `clear rows` are not helpful. This is because in my environment (M1 MacBook Air, 16GB Memory), the scores for these four test cases are random and vary widely each time these are run, no matter which framework.\r\n\r\nIt is worth noting that the scores for `create rows`, `replace all rows`, `create many rows`, and `append rows to large table` are much improved.\r\n\r\nIf we are going to improve the performance of Svelte in the future, the use of `<template>` and `cloneNode` is worth considering.","updated_at":"2021-09-05T23:51:52Z","created_at":"2021-09-04T07:07:08Z","creator_user_login":"tomoam"}
{"number":3898,"comment_id":"912931267","body":"@tomoam this is impressive! Thanks! Svelte is getting better, day after day! üòÑ","updated_at":"2021-09-04T08:05:34Z","created_at":"2021-09-04T08:05:34Z","creator_user_login":"frederikhors"}
{"number":3898,"comment_id":"913037004","body":"@tomoam if you remove cpu throttle from the benchmark(there is a line setting it you can comment out) you can get more stable results. M1 has some issue with cpu throttling. Those results are all over due to that.\r\n\r\nBut yeah as I said a year ago this is definitely good for about 7% improvement on the official setup. If Svelte implements this it won't be in Solid range but it should be in Inferno range in the benchmark. But that isn't even the biggest benefit. Id expect considerable code reduction in the hydration case.","updated_at":"2021-09-04T20:34:17Z","created_at":"2021-09-04T20:34:17Z","creator_user_login":"ryansolid"}
{"number":3898,"comment_id":"915751932","body":"@ryansolid  Thanks for the advice. I ran the benchmark in a different environment (Macbook Pro 2016, 32GB Memory) and got the following results. As you said, the score is in `Inferno` range.\r\n\r\n### Keyed results\r\n\r\n<img width=\"634\" alt=\"keyed results\" src=\"https://user-images.githubusercontent.com/29677552/132620488-960b578a-5707-415e-849a-08f54c9b19fd.png\">\r\n\r\n### Startup Metrics\r\n\r\nFor `Startup Metrics`, the score of this implementation remained as good as the current Svelte.\r\n\r\n<img width=\"632\" alt=\"Startup metrics\" src=\"https://user-images.githubusercontent.com/29677552/132622033-6a3f8e10-99fe-415e-9d7d-0feb80acfb40.png\">\r\n\r\n### Memory allocation\r\n\r\nFor `Memory allocation`, there was a slight improvement.\r\n\r\n<img width=\"633\" alt=\"Memory allocation\" src=\"https://user-images.githubusercontent.com/29677552/132622047-ad3a1d3f-6c60-4026-89e6-798a1aa7ae28.png\">\r\n","updated_at":"2021-09-09T04:25:12Z","created_at":"2021-09-09T04:25:12Z","creator_user_login":"tomoam"}
{"number":3898,"comment_id":"953746407","body":"after the previous experiment(https://github.com/sveltejs/svelte/issues/3898#issuecomment-912924098, https://github.com/sveltejs/svelte/issues/3898#issuecomment-915751932), I came up with an idea to reduce the bundle size by extending this implementation.\r\n\r\nThe implementation is here.\r\n- https://github.com/tomoam/svelte/tree/efficient-fragment-creation2\r\n\r\nI tried to build `site` to test it, and the bundle size was reduced.\r\nI compared the total size of the files in the `site/build/assets/_app` directory, excluding the `css` files and `codemirror`.\r\n\r\n- v3.44.0\r\n\r\nminified(KiB) | gzip(KiB) |\r\n--: | --: |\r\n303.64 | 104.05 |\r\n\r\n- this impl\r\n\r\nminified(KiB) | gzip(KiB) |\r\n--: | --: |\r\n276.71 | 96.89 |\r\n\r\nminified size is **8.87%** smaller, and gzip compressed size is **6.88%** smaller.\r\n\r\ncomparing only the files in the `site/build/assets/_app/pages` directory, minified size is **13.67%** smaller and gzip compressed size is **8.13%** smaller.\r\n\r\n<details>\r\n<summary>details</summary>\r\n\r\nfile | v3.44.0 (KiB) | v3.44.0 gzip(KiB) | this impl (KiB) | this impl gzip(KiB) | diff (%) | diff gzip(%)\r\n-- | --: | --: | --: | --: | --: | --:\r\n_app/chunks/config-n.js | 0.29 | 0.24 | 0.29 | 0.24 | 0.00% | 0.00%\r\n_app/chunks/examples-n.js | 0.32 | 0.18 | 0.32 | 0.18 | 0.00% | 0.00%\r\n_app/chunks/InputOutputToggle-n.js | 1.20 | 0.65 | 0.93 | 0.52 | -22.50% | -20.00%\r\n_app/chunks/ReplWidget-n.js | 3.24 | 1.66 | 3.17 | 1.64 | -2.16% | -1.20%\r\n_app/chunks/ScreenToggle-n.js | 1.42 | 0.75 | 1.41 | 0.75 | -0.70% | 0.00%\r\n_app/chunks/singletons-n.js | 0.05 | 0.06 | 0.05 | 0.06 | 0.00% | 0.00%\r\n_app/chunks/stores-n.js | 0.64 | 0.33 | 0.64 | 0.33 | 0.00% | 0.00%\r\n_app/chunks/vendor-n.js | 179.3 | 54.83 | 165.64 | 50.84 | -7.62% | -7.28%\r\n_app/pages/__error.svelte-n.js | 3.87 | 1.55 | 2.96 | 1.36 | -23.51% | -12.26%\r\n_app/pages/__layout.svelte-n.js | 7.16 | 2.41 | 7.06 | 2.48 | -1.40% | 2.90%\r\n_app/pages/apps/index.svelte-n.js | 4.96 | 2.21 | 3.90 | 1.81 | -21.37% | -18.10%\r\n_app/pages/blog/[slug].svelte-n.js | 2.70 | 1.21 | 2.24 | 1.00 | -17.04% | -17.36%\r\n_app/pages/blog/index.svelte-n.js | 3.03 | 1.38 | 2.46 | 1.18 | -18.81% | -14.49%\r\n_app/pages/docs/index.svelte-n.js | 1.83 | 0.96 | 1.64 | 0.90 | -10.38% | -6.25%\r\n_app/pages/examples/index.svelte-n.js | 7.78 | 3.22 | 7.21 | 3.08 | -7.33% | -4.35%\r\n_app/pages/faq/index.svelte-n.js | 2.85 | 1.31 | 2.31 | 1.13 | -18.95% | -13.74%\r\n_app/pages/index.svelte-n.js | 30.70 | 11.46 | 24.66 | 10.29 | -19.67% | -10.21%\r\n_app/pages/repl/[id]/index.svelte-n.js | 14.63 | 5.70 | 13.58 | 5.51 | -7.18% | -3.33%\r\n_app/pages/repl/embed.svelte-n.js | 1.91 | 0.98 | 1.78 | 0.96 | -6.81% | -2.04%\r\n_app/pages/repl/index.svelte-n.js | 0.46 | 0.35 | 0.46 | 0.34 | 0.00% | -2.86%\r\n_app/pages/tutorial/__layout.svelte-n.js | 0.74 | 0.45 | 0.73 | 0.45 | -1.35% | 0.00%\r\n_app/pages/tutorial/[slug]/index.svelte-n.js | 10.91 | 4.36 | 9.72 | 3.99 | -10.91% | -8.49%\r\n_app/pages/tutorial/index.svelte-n.js | 0.22 | 0.19 | 0.22 | 0.19 | 0.00% | 0.00%\r\n_app/start-n.js | 23.43 | 7.61 | 23.33 | 7.66 | -0.43% | 0.66%\r\n**sum** | **303.64** | **104.05** | **276.71** | **96.89** | **-8.87%** | **-6.88%**\r\n\r\n</details>\r\n\r\nmy implementation code is a messy, so I don't think I should submit a PR right now.\r\n\r\nif the core team is interested, I will try to write a detailed description (maybe, to svelte/rfcs?).\r\n","updated_at":"2021-10-28T11:14:47Z","created_at":"2021-10-28T11:14:06Z","creator_user_login":"tomoam"}
{"number":3898,"comment_id":"1008061031","body":"@tomoam thank you so much for this work! The team talked about your efforts today and we're definitely interested and see the value in this. That being said, it looks like a rather large change with a bit more chance of introducing issues than a usual change. We'll at some point in the (possibly distant) future be doing a compiler overhaul and the feeling was that it'd be best to try to make this change then. So let's definitely keep this code around and we welcome experiments to find these performance improvements and edge cases, but maybe wait until Svelte 4 to PR it.","updated_at":"2022-01-08T16:56:09Z","created_at":"2022-01-08T16:56:09Z","creator_user_login":"benmccann"}
{"number":3898,"comment_id":"1008241264","body":"@benmccann Thank you for replying and for bringing up this topic at the maintainer's meeting.\r\n\r\n> That being said, it looks like a rather large change with a bit more chance of introducing issues than a usual change. We'll at some point in the (possibly distant) future be doing a compiler overhaul and the feeling was that it'd be best to try to make this change then.\r\n\r\nI agree with you. The code generated by this experimental compiler is quite different from that of the current Svelte, and has some problems (for example, it may work in `production` mode, but not in `development` mode. Also, the code is not maintainable ). If the results of this experiment could be of any help in making Svelte better, I would be happy.\r\n\r\nI listened to the [JS Party Podcast](https://changelog.com/jsparty/205) (to be exact, I translated and read [the transcript](https://github.com/thechangelog/transcripts/blob/master/jsparty/js-party-205.md)), where Rich mentioned error boundaries, along with a solution to bundle size. That's not included in my experimental implementation, so perhaps Rich has some other great idea. I'm looking forward to seeing it come to fruition.","updated_at":"2022-01-09T06:52:48Z","created_at":"2022-01-09T06:52:48Z","creator_user_login":"tomoam"}
{"number":3898,"comment_id":"1283380698","body":"I hope I can help out here. I've been dissecting Svelte's generated JS output for a while, and I have been thinking if the functionality of `create_fragment` could be moved to helpers (e.g. `text()`, `element()`, etc.), the compiler could be simplified at the cost of bundling the helpers. I have a miniature version of that concept as a private and experimental library; however, the current attribute and event listener diffing is not as efficient as in Svelte or Solid, and my library does not even have conditional or list rendering yet. I can make my repository public if anyone wants to dissect my library or take it for a test run. :)","updated_at":"2022-10-19T03:47:00Z","created_at":"2022-10-19T03:47:00Z","creator_user_login":"ghost"}
{"number":3898,"comment_id":"1676445461","body":"> You guys had me testing my sanity but turns out the methods I've been using are still the fastest. Here's the improved benchmark:\r\n> \r\n> https://jsben.ch/16Wsq\r\n> \r\n> Template should be much faster now.\r\n> \r\n> EDIT: And here is the version that leaves the QuerySelector which is slightly slower: https://jsben.ch/8oVCY\r\n> \r\n> As you can see in this case walking the tree manually is faster.\r\n\r\nI am sorry to reply here, and this is probably kinda offtopic: but i clicked one of the jsbench links and it forwarded me to a mac notification center scam website. is this \"jsben.ch\" website legit in any way?  ","updated_at":"2023-08-13T19:39:44Z","created_at":"2023-08-13T19:39:44Z","creator_user_login":"thet0ast3r"}
{"number":3898,"comment_id":"1676460001","body":"This will be addressed as part of Svelte 5: https://twitter.com/Rich_Harris/status/1688581184018583558","updated_at":"2023-08-13T20:53:40Z","created_at":"2023-08-13T20:53:40Z","creator_user_login":"benmccann"}
{"number":6972,"comment_id":"984906997","body":"How would this compare to using the `:global` selector?","updated_at":"2021-12-02T18:55:19Z","created_at":"2021-12-02T18:55:19Z","creator_user_login":"TheOnlyTails"}
{"number":6972,"comment_id":"984938942","body":"So the goal is to have this:\r\n```html\r\n<!-- Child.svelte -->\r\n<div class=\"text-white\">I'm the <span>child</span></div>\r\n<style>\r\n    .text-white {\r\n        color: white\r\n    }\r\n</style>\r\n```\r\n```html\r\n<!-- Parent.svelte -->\r\n<script>\r\n    import Child from './Child.svelte';\r\n</script>\r\n\r\n<div>\r\n    <Child class={$$styles.my-identifier} />\r\n</div>\r\n\r\n<style module>\r\n    div {\r\n        background: green\r\n    }\r\n    .my-identifier {\r\n        background: red\r\n    }\r\n</style>\r\n```\r\n```html\r\n<!-- rendered output -->\r\n<div class=\"svelte-1\">\r\n    <div class=\"svelte-2 my-identifier text-white\">I'm the <span>child</span></div>\r\n</div>\r\n<style>\r\n    div.svelte-1 {\r\n        background: green\r\n    }\r\n\r\n    .my-identifier.svelte-2 {\r\n        background: red\r\n    }\r\n    \r\n    .text-white.svelte-2 {\r\n        color: white\r\n    }\r\n</style>\r\n```\r\n\r\n----\r\n\r\n- What happen if `Child.svelte` don't have root element ? (wrap with a div like with `--css-variable` ?)\r\n- What if I want conditional class in `<Child />` ? (`<Child class={condition ? '$$style.my-class' : ''} />` ?)\r\n- What if I want several _down scoped_ classes ? (`<Child class=\"$$style.my-class $$style.my-class2\" />` ?)\r\n- What if the `<Child />` already have `class` props ?\r\n- What if I want to _down scope_ a class for a child of `<Child />` component ?\r\n\r\n----\r\n\r\nI thinks that they are still too many cases that need to be check.\r\n(And many of them, IMO, are bad component design)\r\n\r\n----\r\n\r\nThe `--css-variable` is for me the best solution have it allow to pass variable to down to a component and all it's children.\r\nIt the job of the Component designer/creator to define a set of css variable to use.\r\n\r\nIMO it allow better control of the visual behavior of the component, as what should be configurable is defined, instead of opening everthing to modifications\r\n(Kinda following the SOLID principle)","updated_at":"2021-12-02T19:33:42Z","created_at":"2021-12-02T19:33:42Z","creator_user_login":"MacFJA"}
{"number":6972,"comment_id":"984958661","body":"@MacFJA None of the problems you mentioned is actually a problem. I'll try to explain below:\r\nFirst of all, as I mentioned in my original comment, `class` isn't treated specially, it isn't magically added to the root element, the component author has to decide on that. In other words, you'll have to *do something* with the passed `class` in the child component. It is like this because Svelte maintainers have always been against special treatment for `class`.\r\nFor example, imagine a real-world scenario where you have a `Button` component that renders a button, and also a `Modal` component, that has two buttons inside it, a submit button and a cancel button. So like:\r\n```svelte\r\n<!-- Button.svelte -->\r\n<button type=\"button\" class=\"button {$$restProps.class}\">\r\n    <slot />\r\n</button>\r\n\r\n<style>\r\n    .button {\r\n        /* styles... */\r\n    }\r\n</style>\r\n```\r\n```svelte\r\n<!-- Modal.svelte -->\r\n<script>\r\n    import Button from './Button.svelte';\r\n</script>\r\n\r\n<div class=\"modal {$$restProps.class}\">\r\n    <!-- Other stuff... -->\r\n\r\n    <Button class={$$styles.submitButton}>Submit</Button>\r\n    <Button class={$$styles.cancelButton}>Cancel</Button>\r\n</div>\r\n\r\n<style>\r\n    .modal {\r\n        /* styles... */\r\n    }\r\n\r\n    .submitButton {\r\n        /* styles... */\r\n    }\r\n    \r\n    .cancelButton {\r\n        /* styles... */\r\n    }\r\n</style>\r\n```\r\nThe resulting class names with be **hashed**, that's how [CSS Modules](https://github.com/css-modules/css-modules) works,  this is unlike Svelte's default scoping mechanism where it adds a special class to elements and then uses compound selectors. So in this case the resulting HTML will look like:\r\n```html\r\n<div class=\"modal-jdj20d9\">\r\n    <!-- Other stuff... -->\r\n\r\n    <button type=\"button\" class=\"button-4h72jd0 submitButton-jdj20d9\">Submit</button>\r\n    <button type=\"button\" class=\"button-4h72jd0 cancelButton-jdj20d9\">Cancel</button>\r\n</div>\r\n```\r\n\r\nNow, to answer your questions:\r\n> What happen if Child.svelte don't have root element ? (wrap with a div like with --css-variable ?)\r\n\r\nAs I mentioned multiple times, `class` isn't treated specially, if you have multiple root elements you can decide what you want to do with the passed `class`, you can add it to all of them, or only one.\r\n\r\n> What if I want conditional class in <Child /> ? (<Child class={condition ? '$$style.my-class' : ''} /> ?)\r\n\r\nThat's not relevant here, this proposal doesn't change anything in that regard. Yes you could do `<Child class={condition ? '$$style.my-class' : ''} />` as you said.\r\n\r\n> What if I want several down scoped classes ? (<Child class=\"$$style.my-class $$style.my-class2\" /> ?)\r\n\r\nNo problem, you can do that. Again, there's nothing magical about `$$styles`, it's just an object whose properties are hashed class names, so they're just strings you can pass anywhere.\r\n\r\n> What if the <Child /> already have class props ?\r\n\r\nNot sure I understand this one?! Well, once again, there's NOTHING magical about `class`, you can call the prop anything you want, like `containerClass`, `classClassClassHahaha`, anything...\r\n\r\n> What if I want to down scope a class for a child of <Child /> component ?\r\n\r\nYou can have another prop. So imagine the example I showed above again, the `Button` and the `Modal`, imagine your `Button` also renders an SVG element acting as the icon, `Button` can receive an extra prop called `iconClass`. Although I wouldn't necessarily recommend doing this, it's certainly possible.\r\n\r\n> I thinks that they are still too many cases that need to be check.\r\n(And many of them, IMO, are bad component design)\r\n\r\nI disagree. This proposal is as lightweight and as side-effect-free as it possibly gets.\r\nAnd regarding the claim that this is \"bad component design\", absolutely NOT true. Look at the example I just wrote above, how is that \"bad component design\" exactly?! You have a modal, and in that modal you have two buttons, you need to have access to those buttons in your CSS  in the modal component to be able to position them correctly in the modal. This is as clean and as easy-to-reason-about of a component structure as it gets.","updated_at":"2021-12-07T13:31:48Z","created_at":"2021-12-02T20:02:28Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"984962699","body":"@TheOnlyTails Well, with the `:global` selector you're making all the selectors (including classnames) global, which means you'll have to deal with name collisions, this is exactly what any CSS scoping mechanism (such as [CSS Modules](https://github.com/css-modules/css-modules) and also Svelte's current CSS scoping approach) is meant to avoid.\r\nWith this approach, a random (not exactly random but you can think of it as random) string will be attached to the end of all classnames within a component to make them unique across the whole app. Kind of similar to what Svelte currently does, the key difference is the `$$styles` object here, which gives you (the developer) access to the hashed class names and allows to pass them around.","updated_at":"2021-12-02T21:07:09Z","created_at":"2021-12-02T20:08:16Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"985231098","body":"Probably it's not a problem, you can use global if you actually need to style child component. But after css variables arrival it looks like we actually stoped using global selector at all in new components...\r\nScoped styles allows to avoid adopting BEM and mostly stick to elements rather then classes inside scope, which is at least less verbose.","updated_at":"2021-12-03T05:36:39Z","created_at":"2021-12-03T05:36:39Z","creator_user_login":"nosovk"}
{"number":6972,"comment_id":"985495340","body":"@nosovk\r\n> use global if you actually need to style child component\r\n\r\nThe whole point of this proposal (and scoped styles in general) is that you won't have to use global styling, as making styles global would open the door to countless issues and headaches down the road, unless you rely on a strict naming system like BEM.","updated_at":"2021-12-03T12:53:56Z","created_at":"2021-12-03T12:53:56Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"985497216","body":"I totally sympathize with this proposal, this is a problem that's long been solved by Vue, it's strange that Svelte still has no real solution to this. (I'm talking about solutions, not workarounds like \"use global styles\", that's not a solution, it's an ugly workaround for something that I would argue should already be possible to natively do in Svelte.)","updated_at":"2021-12-03T12:57:38Z","created_at":"2021-12-03T12:57:07Z","creator_user_login":"araxemy"}
{"number":6972,"comment_id":"985530018","body":"actually i've been seeing people demanding a feature like this for a long time now, especially in svelte's discord people ask about this on regular basis, i agree that this would be a nice (necessary ? long overdue ?) addition to svelte.\r\nI mean , just look at [what people are currently doing](https://stackoverflow.com/a/63005070/7734384) to hack around this:\r\n\r\n![image](https://user-images.githubusercontent.com/26527405/144610969-e8816fc4-b78a-45e7-b125-23a07a83b211.png)\r\n\r\n`* :global([selector])` haha! clever!  üòÖ","updated_at":"2021-12-03T13:41:10Z","created_at":"2021-12-03T13:41:10Z","creator_user_login":"aahmadi458"}
{"number":6972,"comment_id":"986020216","body":"> @nosovk\r\n> \r\n> > use global if you actually need to style child component\r\n> \r\n> The whole point of this proposal (and scoped styles in general) is that you won't have to use global styling, as making styles global would open the door to countless issues and headaches down the road, unless you rely on a strict naming system like BEM.\r\n\r\nbut global selector works only to nested elements\r\nhttps://svelte.dev/docs#style\r\n\r\n```css\r\ndiv :global(strong) {\r\n\t\t/* this will apply to all <strong> elements, in any\r\n\t\t\t component, that are inside <div> elements belonging\r\n\t\t\t to this component */\r\n\t\tcolor: goldenrod;\r\n\t}\r\n```\r\n[repl with demo](https://svelte.dev/repl/be432b377c7549e8b60ed10452065f52?version=3.8.1)","updated_at":"2021-12-04T14:31:22Z","created_at":"2021-12-04T12:33:46Z","creator_user_login":"nosovk"}
{"number":6972,"comment_id":"986042685","body":"@nosovk In that example you're selecting ALL `strong` elements in the scoped `div`, if there's a `strong` element ten levels deeper in the component hierarchy this will select it. That's not what we want, we want to have specific control over which, in this case `strong` elements, are selected.\r\nWe all know that doing it this way is already possible, but it's a hacky workaround that introduces new problems and it's irrelevant.","updated_at":"2021-12-04T15:13:06Z","created_at":"2021-12-04T15:09:48Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"986187396","body":"> @nosovk In that example you're selecting ALL `strong` elements in the scoped `div`, if there's a `strong` element ten levels deeper in the component hierarchy this will select it. That's not what we want, we want to have specific control over which, in this case `strong` elements, are selected. We all know that doing it this way is already possible, but it's a hacky workaround that introduces new problems and it's irrelevant.\r\n\r\nBut you can create class if needed? It will be uniq. It will allow selecting exact 'strong'.\r\nI can't understand why that use case requires special treatment. When you need to broke style isolation (which is bad) you have instruments to do that. But in common, doing that is bad practice. Making it easier wouldn't do our code better, if you really require to broke style isolation - use global.","updated_at":"2021-12-05T08:29:52Z","created_at":"2021-12-05T08:29:52Z","creator_user_login":"nosovk"}
{"number":6972,"comment_id":"986223542","body":"> But in common, doing that is bad practice. Making it easier wouldn't do our code better, if you really require to broke style isolation - use global.\r\n\r\nThat is simply not true as I (and [others](https://github.com/sveltejs/svelte/pull/2888#issuecomment-554782656)) have explained numerous times. There are lots of CSS properties (`margin`, `top/left/right/bottom`, `flex`, etc.) that should only be set by the parent, it doesn't make sense to set them from within the component itself.\r\nThe rationale is perfectly clear, I don't really know what it is that you're struggling to understand here.\r\n\r\nYou can ignore this issue if you don't like this proposal. There are, however, many people who are in line with it.","updated_at":"2023-01-05T03:01:03Z","created_at":"2021-12-05T12:42:36Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"987711868","body":"Svelte does have this problem, but that is not a solution imo.\r\nThat's a procedular patch in that we would drag along for a long time if it's introduced.\r\n\r\nPlease don't add this.\r\n\r\n- Code like that will pop up all over the codebases of everything Svelte related.\r\n\r\n- This goes completely against inversion of control.\r\n\r\n- The fact it would be \"opt-in\" won't minimize the damage it can do, we would drag this along for years.\r\n   Those words \"it's just opt-in\" should always raise a flag.\r\n   It doesn't matter it's \"opt-in\", if it's faster in the short run, and really bad design in the long run, people under pressure at work will still adopt that and it will spiral.\r\n\r\n- This would make debugging harder.\r\n\r\n\r\nThe fact it barely works in Vue doesn't make it a good solution in Svelte, it's just bad imo.\r\n\r\nHow do you even deal with media queries and container queries?\r\nIs the runtime supposed to parse the css?\r\n\r\nThe creator of the component should provide the api, you shouldn't hack your way into a component to change its appearance or behaviour, I mean for the love of god it's the reason we do this:\r\n\r\n```svelte\r\n<Component on:click={()=>{ ... }}/>\r\n```\r\nand not this:\r\n\r\n```svelte\r\n<script>\r\nconst c1 = document.getElementById(\"c1\")\r\nc1.addEventListener(...)\r\n</script>\r\n<Component id=\"c1\"/>\r\n```\r\n\r\nComponents should be closed for changes and open for extensions.\r\n<u>I would also add that this problem should be solved using css instead of using js props.</u>\r\n\r\nThe issue of course is that the way of writing these apis from the point of view of the \"creator\" of the component is pretty slow and sloppy right now.\r\n\r\nSomething like this would make more sense imo:\r\n\r\n`Component.svelte`\r\n```svelte\r\n<style>\r\n  h1 {\r\n    color: #f45;\r\n  }\r\n\r\n  :export(.extra) {} /* The compiler can already detect this empty class declaration */\r\n</style>\r\n\r\n<h1 class=\"extra\">hello world</h1>\r\n```\r\nand then in `Parent.svelte`\r\n```svelte\r\n<style of Component>\r\n    .extra{\r\n        color: #000\r\n    }\r\n</style>\r\n\r\n<Component />\r\n```\r\n\r\n---\r\n\r\nAt an implementation level, everything inside `<style of Component>` would be provided the hashed class of `Component` in order to reference the component plus a second hash identifying the context in which Component.svelte is used.\r\n\r\nSo the output would look like this:\r\n\r\n```html\r\n<style>\r\n    .s-123.si-aaa.extra{\r\n        color: #000\r\n    }\r\n</style>\r\n    <!-- \r\n        \"s-123\" would be the usual hash of Component.svelte \r\n        \"si-aaa\" would be the context hash\r\n    -->\r\n<h1 class=\"s-123 si-aaa extra\">hello world</h1>\r\n```\r\n\r\nThe context hash would depend on both parent and child, so it would be as simple has hashing the parent and adding the child as salt.\r\n\r\nThis means if you're to call `Component.svelte` in a different component called `Parent2` for example, the context hash would be different, allowing you different implementations.\r\n\r\nThis way you're not bound to the individual instances of the component and you're free to extend whatever extensions the author provides.\r\n\r\nIf we really want to manipulate individual instances, then simply change the context hashing, it would have to be executed on the actual instance of the component, and in the syntax we could reference these by variable names:\r\n\r\n```svelte\r\n<style of i1>\r\n    .extra{\r\n        color: #000\r\n    }\r\n</style>\r\n\r\n<script>\r\nlet i1\r\n</script>\r\n\r\n<Component bind:this={i1} />\r\n```\r\n\r\nNote that there's no js reference inside the actual css code, it would still remain plain css.\r\n\r\n---\r\n\r\nOn top of that we could get intellisense aswell.","updated_at":"2021-12-07T09:56:02Z","created_at":"2021-12-07T09:03:33Z","creator_user_login":"tncrazvan"}
{"number":6972,"comment_id":"987897449","body":"@tncrazvan I don't like the approach you're proposing at all. I find the OP's suggestion more sensible and here are my responses to your criticisms:\r\n> This goes completely against inversion of control.\r\n\r\nHow?\r\n\r\n> This would make debugging harder.\r\n\r\nHow?\r\n\r\n> It doesn't matter it's \"opt-in\", if it's faster in the short run, and really bad design in the long run, people under pressure at work will still adopt that and it will spiral.\r\n\r\nIt's not bad design, that's a statement of utter ignorance. For the thousandth time: There are countless CSS properties that should be declared by the parent and not the component itself, things like margin etc. and the most reasonable way to do that is to give the child component a class and style the class in the parent. The claim that it's \"bad design\" is a completely empty claim.\r\n\r\n> The fact it barely works in Vue doesn't make it a good solution in Svelte, it's just bad IMO.\r\n\r\nIt \"barely\" works?! What does that mean?! It's been working without issue for years. You're just sneaking in the word \"barely\" as though it's been a pain point for Vue devs, it hasn't.\r\n\r\n> How do you even deal with media queries and container queries?\r\n\r\nWell! You deal with media queries the way you deal with media queries anywhere, what is the problem?! What's special here?\r\n\r\n> On top of that we could get intellisense aswell.\r\n\r\nWe could get intellisense with this approach as well.\r\n\r\nThe alternative solution you're providing is not ergonomic at all, I mean, ffs why would you have to get a reference to the component to be able to style it individually?! That makes no sense in my opinion. That's what classes are for, you're needlessly reinventing the wheel, and the new wheel you're inventing is much worse than the old one.","updated_at":"2021-12-07T12:57:06Z","created_at":"2021-12-07T12:51:44Z","creator_user_login":"araxemy"}
{"number":6972,"comment_id":"987903813","body":"This most likely will not happen. It has been discussed to death already. I don't see why you expect this to change. I know you have already read it but here is a comment by @pngwn that goes into the reasoning for anyone else reading this: https://github.com/sveltejs/rfcs/pull/22#issuecomment-664047806","updated_at":"2021-12-07T13:00:25Z","created_at":"2021-12-07T13:00:25Z","creator_user_login":"kevmodrome"}
{"number":6972,"comment_id":"987907486","body":"@kevmodrome None of the arguments made by @pngwn justifies the inability to style a component from the parent for layout purposes. Just tell me how you'd do that currently?! Svelte just doesn't have any way of doing that at the moment. Yet this is of one the most common things you'd want to do in CSS.\r\n\r\nYou guys' continual refusal to even take this issue seriously, quite honestly baffles me. This is a major shortcoming in Svelte, and I don't understand how anyone could deny that; and I absolutely don't understand why it's always been hand-waved away so dismissively.\r\n\r\nWe should seriously stop pretending like this has been resolved, it hasn't, closing issues that talk about it does not \"resolve\" anything. This is the biggest pain point when it comes to CSS in Svelte, and it needs a proper solution. \r\n\r\nBesides, @pngwn's points were largely responded to multiple times, take a look at some of the comments I linked above, [this one](https://github.com/sveltejs/rfcs/pull/22#issuecomment-663986082) succinctly sums up how the criticisms of @pngwn and the like along the lines of \"it's dangerous\" make no sense.\r\n\r\nQuoting @pretzelhammer [here](https://github.com/sveltejs/rfcs/pull/22#issuecomment-655511166):\r\n> Yes. Both React and Vue solved this problem years ago. Devs need to be to access the hashed classnames in JS as it enables useful patterns like passing scoped styles from a parent to a child without leaking anything into the global scope.\r\n\r\nIt's as though Svelte is waiting for \"the perfect solution\", while also failing to provide an adequate workaround in the meantime.\r\nSvelte should just give this ability to developers who want to use it and know what they're doing, it shouldn't want to police everything, because it utlimately can't, that's just not how web development works. I don't understand why Svelte so desperately wants to be different from React and Vue in this particular respect, when they have provided a solution to this for a long time, and I've seen very few people ever complain about the way they're doing this.","updated_at":"2023-07-01T13:53:59Z","created_at":"2021-12-07T13:05:02Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"987920097","body":"This needs an RFC. There is zero chance that this will be agreed upon in an issue. ","updated_at":"2021-12-07T13:20:36Z","created_at":"2021-12-07T13:20:36Z","creator_user_login":"pngwn"}
{"number":6972,"comment_id":"987922432","body":"Also I don‚Äôt really think anyone has debunked any ‚Äòmyths‚Äô. They have just restated the problem, which I have never denied.  But you clearly have a different definition of debunked than I do. \r\n\r\nYour adversarial tone isn‚Äôt going to increase your chances of convincing us, btw, quite the opposite. ","updated_at":"2021-12-07T13:23:54Z","created_at":"2021-12-07T13:23:30Z","creator_user_login":"pngwn"}
{"number":6972,"comment_id":"987931385","body":"I do plan to revisit this issue properly at some point, but won't have time until the new year. \r\n\r\nI've worked on component libraries and design systems (large and small) pretty extensively over the past few years and would like to revisit my thoughts.","updated_at":"2021-12-07T13:34:48Z","created_at":"2021-12-07T13:34:48Z","creator_user_login":"pngwn"}
{"number":6972,"comment_id":"987944757","body":"@pngwn Oh here's the antagonist himself! (just kidding! :P)\r\nWhat I was referring to by the \"myth\" was the notion, frequently restated either implicitly or explicitly, that Svelte should avoid giving the developer more control in this regard because people \"could\" screw things up if they don't use the feature mindfully, and I would argue that **is** a myth, as I think saying \"it could be abused\" is almost never a great argument against any feature WHEN refusing to provide that feature is likely to produce more frustration, and especially when we're talking about CSS, as CSS almost **always** gives the developer the opportunity to screw things up, regardless of how much tooling you utilize. So it's ultimately the developer that has to be mindful, and not the tooling, the tooling should, of course, minimize those possibilities as much as is **reasonable**, but from some point on, it's none of its business anymore, and it should just trust the developer's judgment. And all I'm arguing is that this is certainly one of those cases.\r\n\r\nAnd my tone shouldn't really determine the outcome here, although I'm sorry if it sounds adversarial, it's the underlying reasoning that ultimately matters.\r\nI hope you revisit this as you said and let us know.","updated_at":"2022-08-14T10:47:10Z","created_at":"2021-12-07T13:51:18Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"987950008","body":"@araxemy \r\n\r\n> > This goes completely against inversion of control.\r\n> \r\n>  How?\r\n\r\nThe suggestion says that you're supposed to pass in a class to the component through a prop and, quoting, \"adds the classes to the root element\".\r\n\r\nBesides the fact there's no guarantee a component has a root element in svelte, op does mention it would be an actual prop the author would decide where to place.\r\nLet's say the author decides where that class goes all the time, be it in the root or somewhere else, you're still injecting a variable class name into the component.\r\nYou're setting the dependency yourself, which should never be the case.\r\n\r\nTake for example @MacFJA 's question:\r\n\r\n> What if I want conditional class in <Child /> ? (<Child class={condition ? '$$style.my-class' : ''} /> ?)\r\n\r\nand the answer\r\n\r\n> That's not relevant here, this proposal doesn't change anything in that regard. Yes you could do <Child class={condition ? '$$style.my-class' : ''} /> as you said.\r\n\r\nExcept it is relevant, it's not clear exactly what that will imply at scale - will people fill their markup with conditionals like that?\r\nWell I certainly don't wanna read and manage that type of code, scares the shit out of me and brings me back to php templating times.\r\n\r\n> > This would make debugging harder.\r\n> \r\n> How?\r\n\r\nYou would always have to track down the parent component in order to find out where a class name came from.\r\n\r\n> > It doesn't matter it's \"opt-in\", if it's faster in the short run, and really bad design in the long run, people under pressure at work will still adopt that and it will spiral.\r\n> \r\n> It's not bad design,\r\n\r\nI'll just stop there, you got me.\r\n\r\n> > The fact it barely works in Vue doesn't make it a good solution in Svelte, it's just bad IMO.\r\n> \r\n> It \"barely\" works?! What does that mean?! It's been working without issue for years. You're just sneaking in the word \"barely\" as though it's been a pain point for Vue devs, it hasn't.\r\n\r\nIf you wanna argue semantics be my guest, if you're so in love with Vue that much that you want everything to be Vue go use Vue in all fairness.\r\nI'm trying to point out it's not a good solution for Svelte because of inversion of control and encapsulation\r\n\r\n> > How do you even deal with media queries and container queries?\r\n> \r\n> Well! You deal with media queries the way you deal with media queries anywhere, what is the problem?! What's special here?\r\n\r\nI am geniunly asking what the edge cases are.\r\n\r\n\r\n> I mean, ffs why would you have to get a reference to the component to be able to style it individually?!\r\n\r\nI'm not trying to be rude, sorry if I come accross like that - if you can't put the effort to read everything I wrote and process it there's no point.\r\n\r\n---\r\n\r\nEither way, I completely agree with @pngwn https://github.com/sveltejs/svelte/issues/6972#issuecomment-987920097\r\nBut also this is discouraging https://github.com/sveltejs/svelte/issues/6972#issuecomment-987903813","updated_at":"2021-12-07T14:02:17Z","created_at":"2021-12-07T13:57:47Z","creator_user_login":"tncrazvan"}
{"number":6972,"comment_id":"988116135","body":"After talking with some other people in the community, we thought it'd be better to move this discussion to a Discord thread.\n\nThis isn't specifically for this solution, but generally for solutions to this problem. \n\nThe thread is \"Styling the kids\" under the society-chat channel. ","updated_at":"2021-12-07T17:10:39Z","created_at":"2021-12-07T17:10:39Z","creator_user_login":"TheOnlyTails"}
{"number":6972,"comment_id":"1005505436","body":"@AradAral Please take a look: https://www.npmjs.com/package/svelte-preprocess-cssmodules\r\n\r\nMaybe it will solve your problems without a changes in core. The main idea of preprocessors was to give ability do such things in user-land.","updated_at":"2022-01-05T09:10:39Z","created_at":"2022-01-05T09:10:39Z","creator_user_login":"PaulMaly"}
{"number":6972,"comment_id":"1010970122","body":"Related my issue (just that it's closed for now):\r\n**[<style bind:styles={styles}> and <style styles={styles}> - CSS Binding and Passing scoped styles between components and scoped svelte CSS import](https://github.com/sveltejs/svelte/issues/6422)** - https://github.com/sveltejs/svelte/issues/6422","updated_at":"2022-01-12T11:56:28Z","created_at":"2022-01-12T11:56:28Z","creator_user_login":"lukaszpolowczyk"}
{"number":6972,"comment_id":"1013813060","body":"> @AradAral Please take a look: https://www.npmjs.com/package/svelte-preprocess-cssmodules\n> \n> \n> \n> Maybe it will solve your problems without a changes in core. The main idea of preprocessors was to give ability do such things in user-land.\n\nUnfortunately that doesn't quite help with utility frameworks such as tailwind. \n\nTypically, I want my parent to decide how my child component is laid out. The child might have a preferred width for example, but I might want it to change depending on its parent. \n\nAt the moment, the only solutions I've found are either have a wrapper div around all of my components and merge classes and styles, or set the width/height to 100% and wrap it in the parent. Both solutions feel less than ideal. \n\nVue has the right approach IMO. Inherit parent attributes if the component has a single root (its by default, but I wouldn't mind if it were opt in in the config). If there are multiple roots, then the attributes aren't inherited. This would solve my issues and greatly reduce the amount of boilerplate needed to style components. Global css selectors simply aren't a good fit for utility css frameworks.","updated_at":"2022-01-16T05:14:59Z","created_at":"2022-01-16T05:14:59Z","creator_user_login":"jmroon"}
{"number":6972,"comment_id":"1077043078","body":"I think that the svelte team should clarify his philosophy about this in the official documentation or at least in a FAQ section. \r\n\r\nI mean, there is no roadmap or intentions to fix this. Only a strong although vague opinion on how we should do things or how bad we are doing things. The React team has also strong opinions but they make those very clear in the official documentation. Although I'm tired of those already that's why i'm here...  \r\n\r\nWait.. What I'm going to do when all the smart engineers that I'm trying to convince that svelte is the best framework ever created period, discover that in the documentation??\r\n\r\nI'll be toast! Game over man!\r\n\r\nI'll better go back to my toy projects, that's a lot of fun indeed!","updated_at":"2022-03-24T03:58:52Z","created_at":"2022-03-24T03:58:52Z","creator_user_login":"juanmait"}
{"number":6972,"comment_id":"1100806223","body":"My simplified proposal for **passing a chunk of styles** (not classes or variables, just whole chunks of blocks):\r\nhttps://github.com/sveltejs/svelte/issues/7465\r\nBased a bit on the `set`/`getContext` idea.","updated_at":"2022-04-17T05:17:29Z","created_at":"2022-04-17T05:17:11Z","creator_user_login":"lukaszpolowczyk"}
{"number":6972,"comment_id":"1214334655","body":"Just wanted to say I've found this strange about Svelte too, probably one of those rare cases where I've raised an eyebrow when dealing with Svelte. React and Vue have had official solutions to this problem for long long time while Svelte still has none. I don't find the arguments against this (by pngwn and others) convincing at all, not even momentarily destabilizing, if I'm being honest.\r\n\r\nThis needs more attention from the maintainers, I don't it's being given any at the moment, this issue is among the most upvoted issues in the repo.","updated_at":"2022-08-14T10:44:34Z","created_at":"2022-08-14T10:43:39Z","creator_user_login":"AaronFlynn1989"}
{"number":6972,"comment_id":"1277463898","body":"*EDIT: Changed my mind, I don't like this approach anymore üòÖ*\r\n\r\nTried skimming through all \"style child component\"-discussions, and didn't see a proposal like the following. There are already sooo many discussions/proposals, so I'm just gonna throw it here and let it get buried üòÖ. Maybe somebody will find it interesting.\r\n\r\n`Child.svelte`\r\n\r\n```html\r\n<h1>Child component!</h1>\r\n\r\n<style>\r\n  :export {\r\n    default: h1;\r\n  }\r\n</style>\r\n```\r\n\r\n`Parent.svelte`\r\n\r\n```html\r\n<script>\r\n  import Child from \"./Child.svelte\";\r\n</script>\r\n\r\n<Child />\r\n\r\n<style>\r\n  Child {\r\n    color: red;\r\n  }\r\n</style>\r\n```\r\n\r\nI even built a POC svelte-preprocessor that allows you to try it out: https://github.com/valterkraemer/svelte-preprocess-style-child-component","updated_at":"2022-10-14T19:28:10Z","created_at":"2022-10-13T11:32:36Z","creator_user_login":"valterkraemer"}
{"number":6972,"comment_id":"1277542211","body":"@valterkraemer What if you have multiple `Child` instances and want to style each one differently?","updated_at":"2022-10-13T12:36:35Z","created_at":"2022-10-13T12:36:35Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"1277563469","body":"> @valterkraemer What if you have multiple `Child` instances and want to style each one differently?\r\n\r\n@aradalvand Could be done in different ways, and I don't have a firm stance on it, but personally I would like to reserve the `class` attribute (and possibly `id`) for components.\r\n\r\nThis means you wouldn't be able to pass down a `class` or `id` prop to the child if the component has a `:export` pseudo selector.\r\n\r\nThis means it would be possible to do:\r\n\r\n```html\r\n<Child class=\"item\" />\r\n<p class=\"item\">P</p>\r\n\r\n<style>\r\n  .item {\r\n    color: red;\r\n  }\r\n</style>\r\n```\r\n\r\nI don't see why it couldn't be supported in the preprocessor either, just would require more work.","updated_at":"2022-10-13T12:54:20Z","created_at":"2022-10-13T12:53:53Z","creator_user_login":"valterkraemer"}
{"number":6972,"comment_id":"1279033216","body":"i think one solution we have atm is just using `svelte` with `custom-elements` next time\r\ntho this might have its own downsides \r\nbut css itself has lots of selector for shadowtrees and custom-elements, such as the `:part()` selector\r\nwhich makes it a fun experience to work with css and components\r\nand i think i can accepts its downsides for this","updated_at":"2022-10-14T13:46:35Z","created_at":"2022-10-14T13:46:35Z","creator_user_login":"DeepDoge"}
{"number":6972,"comment_id":"1279377356","body":"I now totally changed how the [preprocessor](https://github.com/valterkraemer/svelte-preprocess-style-child-component) works. Using more of a [CSS Shadow Parts](https://developer.mozilla.org/en-US/docs/Web/CSS/::part) approach. I like it a lot!\r\n\r\n`Child.svelte`\r\n\r\n```html\r\n<div part>\r\n  <h1 part=\"heading\">Child component!</h1>\r\n</div>\r\n```\r\n\r\n`Parent.svelte`\r\n\r\n```html\r\n<script>\r\n  import Child from \"./Child.svelte\";\r\n</script>\r\n\r\n<Child />\r\n<Child class=\"second\" />\r\n\r\n<style>\r\n  Child {\r\n    padding: 8px;\r\n  }\r\n\r\n  Child::part(heading) {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  Child.second {\r\n    margin-top: 1rem;\r\n  }\r\n</style>\r\n```","updated_at":"2022-10-14T20:34:16Z","created_at":"2022-10-14T19:26:22Z","creator_user_login":"valterkraemer"}
{"number":6972,"comment_id":"1279461894","body":"@valterkraemer looks cool!\r\ni assume that this wouldn't have any conflicts if i wanna select a real shadow-tree. Since Svelte components are starting with uppercase letters it should be easy to distinguish.\r\n\r\nidk what others think but this solves the issue for me.\r\na solution that is using already existing CSS/HTML syntax for the job.","updated_at":"2022-10-14T21:12:33Z","created_at":"2022-10-14T21:02:15Z","creator_user_login":"DeepDoge"}
{"number":6972,"comment_id":"1279679551","body":"@DeepDoge, as long as you don't try to target a shadow-tree inside a Svelte component it should work just fine! üòÑ","updated_at":"2022-10-15T07:02:36Z","created_at":"2022-10-15T07:02:36Z","creator_user_login":"valterkraemer"}
{"number":6972,"comment_id":"1371679372","body":"## Important Update:\r\nOkay, it's now been a little over a year since I created this issue and it's currently among the top 10 most upvoted open issues in the repository; which is a testament to the fact that many people share the sentiment about Svelte's styling mechanism not currently being sufficiently flexible and powerful, and hence in need of substantial improvement.\r\n\r\nThe problem that was described here ‚Äî which is specifically **the inability to pass down scoped class names to child components** ‚Äî is still as big and severe of a pain point as ever; and we're obviously all waiting for the maintainers to give it a little more attention, though they've been very busy with SvelteKit, so the core Svelte project getting a little left out is perfectly understandable ‚Äî hopefully now that [SvelteKit 1.0 has been released](https://svelte.dev/blog/announcing-sveltekit-1.0) (hooray!), Svelte itself and its most pressing issues will get a bit more love!\r\n\r\nNow, I have actually changed my mind when it comes to what the best **solution** to this problem would be.\r\n\r\nI initially suggested that we should add a new type of `<style>` tag denoted with the `module` attribute, that works in a similar fashion to CSS Modules, namely it hashes class names (to make them unique across the entire application), and the developer would then be able to access those hashed class names via a new special (ambient) variable called `$$classes` or whatever; and they can just pass those anywhere they want (including to child components) ‚Äî see [original comment](https://github.com/sveltejs/svelte/issues/6972#:~:text=the%20aforementioned%20shortcomings.-,Describe%20the%20proposed%20solution,-I%20would%20propose).\r\n\r\nDespite the fact that the `<style module>` proposal would actually work and would solve this problem, I've come to the conclusion that there's a considerably better approach that doesn't actually require the introduction of an entirely new styling mechanism, and instead builds on top of the current implementation, and thus solves this problem more elegantly.\r\n\r\n### Say hello to the `forward` directive:\r\nThis idea doesn't originate with me, the credit must go to @Tropix126 with his [\"Implement forward directive\" RFC](https://github.com/sveltejs/rfcs/pull/60). I suggest you go and read that RFC (it's not that long!). What I'm proposing here is an **extension** of that proposal.\r\n\r\nThe RFC basically outlines the idea of a new special directive called `forward:[something]` which you'd use on HTML elements inside your component, where `[something]` is a specific keyword like `use`. So for instance, what `forward:use` does is it enables the user of the component to apply Svelte actions on the component with the `use:` directive, and the actions will be applied on the element inside the component that has the `forward:use` directive on it.\r\n\r\nExample:\r\n\r\n`Button.svelte:`\r\n```svelte\r\n<button forward:use>\r\n    <slot />\r\n</button>\r\n```\r\n\r\n`Modal.svelte:`\r\n```svelte\r\n<script>\r\n    import Button from './Button.svelte';\r\n</script>\r\n\r\n<Button use:someAction>\r\n    Submit\r\n</Button>\r\n```\r\nIn this example, the `someAction` action will be applied to the `<button>` element inside the `<Button>` component.\r\n\r\nNow you might ask how this is relevant to the issue of passing down scoped classes to child components.\r\nWell, I'd like to extend the `forward:` directive proposal to include classes as well, something like `forward:class`, which allows the user of the component to pass down scoped classes, and it would also allow us to use [the `class:` directive](https://svelte.dev/docs#template-syntax-element-directives-class-name) on the component:\r\n\r\n`Button.svelte:`\r\n```svelte\r\n<button\r\n    class=\"button\"\r\n    forward:class\r\n>\r\n    <slot />\r\n</button>\r\n\r\n<style>\r\n    .button {\r\n        /* ... */\r\n    }\r\n</style>\r\n```\r\n\r\n`Modal.svelte:`\r\n```svelte\r\n<script>\r\n    import Button from './Button.svelte';\r\n</script>\r\n\r\n<Button\r\n    class=\"submit-button\"\r\n    class:inactive={someCondition}\r\n>\r\n    Submit\r\n</Button>\r\n\r\n<style>\r\n    .submit-button {\r\n        margin-right: 15px;\r\n    }\r\n    .cancel-button {\r\n        margin-left: 15px;\r\n    }\r\n    .inactive {\r\n        opacity: 0.5;\r\n    }\r\n</style>\r\n```\r\nHere, since `forward:class` has been used on the root element of the `Button` component, Svelte understands that when the `class` attribute (or the `class` **directive**, for that matter) is then specified on an instance of the component, it should treat it as though it was directly specified on the inner element, and thereby it also knows that it should pass down the **scoped** class name, by virtue of the `class` attribute now being a special, known thing in this context, if you will, thanks to the `forward:class` directive used inside the component.\r\n\r\nThis proposal entirely solves all the problems described in this issue **in addition** to a number of other shortcomings that Svelte currently has (such as using actions on components, or forwarding all events, and the rest of the use cases outlined in [the original RFC](https://github.com/Tropix126/rfcs/blob/master/text/0000-forward-directive.md)); which has convinced me that it's actually a superior solution to the one I originally suggested; and it would truly elevate Svelte to a greater level of awesomeness if it got implemented, it would make possible many things that currently either need clunky workarounds or simply can't be done.\r\n\r\nI believe this is, in fact, the \"[perfect solution](https://github.com/sveltejs/svelte/issues/6972#:~:text=It%27s%20as%20though%20Svelte%20is%20waiting%20for%20%22the%20perfect%20solution%22)\".\r\n\r\nLet me know what you think.","updated_at":"2023-09-03T10:30:54Z","created_at":"2023-01-05T02:18:02Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"1379607318","body":"One shortcoming of the above proposal is that the parent component can only style elements within the child component (`<Button>`) if the author of the child component chose to allow it. When using 3rd-party components from component libraries, there are occasional cases where I need to adjust/tweak the inner styles. If the author didn't choose to `forward:class` the proper element(s), I wouldn't be able to customize anything in the child component.\r\n\r\nI know this is probably not possible in the Svelte architecture, but in Angular, they have `::ng-deep .someClass` which, causes `.someClass` to become global, but then they have the `:host` pseudo-class selector which can be used in a parent component to scope styles to itself and all descendants. Combine it with `::ng-deep` like `:host ::ng-deep .someClass` to affect all elements with the `class=\"someClass\"` at the host level and all descendants.","updated_at":"2023-01-11T23:21:57Z","created_at":"2023-01-11T23:21:30Z","creator_user_login":"JWess"}
{"number":6972,"comment_id":"1379781005","body":"@JWess that‚Äôs no different than component authors choosing not to consume `className` in React and et al, and should be seen as a feature rather than a downside. You can already delve into the tree of components with :global if you really want, but it‚Äôs generally seen as an anti pattern. ","updated_at":"2023-01-12T04:00:33Z","created_at":"2023-01-12T04:00:33Z","creator_user_login":"madeleineostoja"}
{"number":6972,"comment_id":"1379798993","body":"> This proposal entirely solves all the problems described in this issue\r\n\r\n@aradalvand what if you have more than one element in the component?","updated_at":"2023-01-12T04:27:42Z","created_at":"2023-01-12T04:27:42Z","creator_user_login":"tontonsb"}
{"number":6972,"comment_id":"1379806978","body":"> @JWess that‚Äôs no different than component authors choosing not to consume `className` in React and et al, and should be seen as a feature rather than a downside. You can already delve into the tree of components with :global if you really want, but it‚Äôs generally seen as an anti pattern. \r\n\r\nI agree it's something that should be used/needed sparingly, but it's not realistic to imagine a world where it's never necessary to tweak a component's styles in some way that the original author didn't intend/expose. It shouldn't be a first-class citizen, but it should be supported by the framework, with caution flags in the documentation.\r\n\r\nAs far as using `:global`, in order to accomplish the behavior I described with `:host ::ng-deep .someClass` (where the style is not leaked app-wide), the parent component has to wrap the child component with an extra element and put a wrapper class on there like this:\r\n\r\n```\r\n// Parent.svelte\r\n\r\n<script>\r\n  import Child from './Child.svelte';\r\n</script>\r\n\r\n<div class=\"wrapper\"> <!-- I wish I didn't have to wrap this component just to override styles -->\r\n  <Child />\r\n</div>\r\n\r\n<style>\r\n  .wrapper :global .someClass {\r\n    display: contents;\r\n    /* some style overrides */\r\n  }\r\n</style>\r\n```\r\n\r\n```\r\n// Child.svelte\r\n\r\n<button class=\"someClass\">\r\n  ...\r\n</button>\r\n\r\n<style>\r\n    .someClass {\r\n        /* ... */\r\n    }\r\n</style>\r\n```","updated_at":"2023-01-12T04:45:01Z","created_at":"2023-01-12T04:43:43Z","creator_user_login":"JWess"}
{"number":6972,"comment_id":"1380797796","body":"@JWess one thing worth noting is that ng-deep has been deprecated for a few releases now. It's also really not that different than :global. The only difference is you'll use your parent component's top level element as the root of your selector, whereas you'd use host in angular. With ng-deep deprecated, the accepted solutions now are either to just write in your global stylesheet, or disable view encapsulation for that component.","updated_at":"2023-01-12T18:07:08Z","created_at":"2023-01-12T18:04:43Z","creator_user_login":"jmroon"}
{"number":6972,"comment_id":"1380992467","body":"actually `:global` should be enough to style child components, if you really know what you are actually doing. But if you have to add styling support - probably CSS Vars is a better option. Actually Angular also insists on CSS Vars instead of ng-deep hack.","updated_at":"2023-01-12T21:05:16Z","created_at":"2023-01-12T21:05:16Z","creator_user_login":"nosovk"}
{"number":6972,"comment_id":"1381004471","body":"There's a reason why tree diving mechanisms like `::ng-deep` in angular, `:global` in svelte, and `/deep` and `::shadow` in web components are either deprecated or seen as hacks ‚Äî poking into the internals of components to override styles makes them brittle and open to breaking without warning. The mechanism to do exactly that exists in Svelte (`:global`), it's not pretty but it is supported.\r\n\r\nWhat we're asking for in this issue is simply a way to forward a single scoped class to a component, explicitly to _avoid_ leaky hacks like `:global`. All other frameworks support this in some way, and the fact this issue comes up again and again and again shows that it's something that users need and constantly run up against, ideological reasoning either way aside. The current situation is the equivalent of not being able to use the `className` prop in a React component or add a class to the `:host` of a web component.\r\n\r\nAs I understand it the main technical issue here is that Svelte components don't require a single root node like React et al. @aradalvand's proposal seems like a great solution to this.\r\n\r\nIs it time for a proper RFC finally? Anyone from the svelte team want to weigh in and/or veto before someone goes to the trouble of an RFC? Don't want to ping names but it would be great to get a little momentum on this again after a few years of going in circles.","updated_at":"2023-01-12T21:27:27Z","created_at":"2023-01-12T21:18:31Z","creator_user_login":"madeleineostoja"}
{"number":6972,"comment_id":"1383063855","body":"I was certainly of the opinion early on (as evidenced by my comments above) that I would *like* to be able to do this. But I don't know anymore. I understand why it's seen as hacky, and why it shouldn't be encouraged, but when you're using component libraries or third party components in general, this is essential. For every single component library I've used, I've always run into a case where I had to override its styling. It's unavoidable.\r\n\r\n:global is *almost* good enough. The main issue is that its a bit hard to use global safely. You can scope your global selectors to your root element in your component, but that relies on you defining a unique class name for your element. What about a :deep selector that would auto-generate a unique class name for the root(s) of your svelte component and automatically prepended it to the selectors you defined? I want a safe and sanctioned way to ensure that my global selectors only select descendants of this component.\r\n\r\ne.g.\r\n\r\n```js\r\n\r\n<div>\r\n  someStuff\r\n</div>\r\n<div>\r\n  someMoreStuff\r\n</div>\r\n\r\n<style>\r\n  :deep(button) {\r\n    color: white; // make buttons white\r\n   }\r\n</style>\r\n```\r\n\r\nThrough the compiler some autogenerated root classes would be applied to transform it into:\r\n\r\n```js\r\n<div class=\"<autoGenerated>\">\r\n  someStuff\r\n</div>\r\n<div class=\"<autoGenerated>\">\r\n  someMoreStuff\r\n</div>\r\n\r\n<style>\r\n  :global(<autoGenerated> button) {\r\n    color: white;\r\n   }\r\n</style>\r\n```\r\n\r\nMaybe it's not super feasible if each Svelte compiled is compiled in isolation, therefore it may be hard to avoid class name collisions.\r\n\r\nEssentially, it would be nice to say \"I want to target all buttons in this component's tree\" instead of \"I want to target all buttons in the entire app\".","updated_at":"2023-01-15T06:05:36Z","created_at":"2023-01-15T05:52:08Z","creator_user_login":"jmroon"}
{"number":6972,"comment_id":"1396855156","body":"I still can't get my head around why we can't just have have something like this:\r\n*Foo.svelte*\r\n```svelte\r\n<div class=\"a\">A</div>\r\n<div class=\"b\">B</div>\r\n```\r\n\r\n*App.svelte*\r\n```svelte\r\n<Foo />\r\n<div />\r\n<Foo />\r\n\r\n<style>\r\n  :Foo(*) { /* A and B in all Foo(s) under this component */ }\r\n  :Foo(.b) { /* B only in all Foo(s) under this component */ }\r\n  div + :Foo(.a) { /* A only in last Foo under this component */ }\r\n</style>\r\n```\r\nThat way IDE can give warnings. its basically like `:global` but with warnings.\r\nSomething like `forward` has no use if you are trying to add styles on Components from other libraries, doesn't mean it wouldn't have any use, of course it would be a nice addition.\r\n\r\nBut we are asking for `:global` with IDE warnings when the thing we are selecting doesn't exists.\r\nIf we are gonna go with \"leaky hacks\" why do we have to go full \"leaky\" with `:global`","updated_at":"2023-01-19T11:53:07Z","created_at":"2023-01-19T11:53:07Z","creator_user_login":"DeepDoge"}
{"number":6972,"comment_id":"1649509208","body":"Ever see a non-Svelte product become brittle through large amounts of global css, such that for every css bug a dev team fixes will inadvertently creates two new css bugs? \r\n\r\nDue to the inevitable emotional damage this causes, I now constrain css selectors to typically go no further than the module (ie. css modules) and at most, reaching no further than to an immediate child module.\r\n\r\nHaving now moved on to use Svelte/Tailwind, I don't use selectors at all. In the few cases where I do need to effect the styling of the child from the parent, I just add class=\"...\" to the child instance within the parent, and use cva/twMerge/$$props.class within the child to realize the styling from the parent. The cva variants cover most needs, $$props.class supports the remaining bespoke custom needs, and twMerge ties it all together appropriately for Tailwind.\r\n\r\nI know not everyone has entered into this new Tailwind world view, but for many who have, not only would we not use <style module> if it is added, we'd also be just fine with <style> itself being removed...","updated_at":"2023-07-25T09:58:41Z","created_at":"2023-07-25T09:58:41Z","creator_user_login":"kenbankspeng"}
{"number":6972,"comment_id":"1650830359","body":"Move to either:\r\n\r\n1. ~~Close this in favor the `forward` directive RFC (https://github.com/sveltejs/rfcs/pull/60) to solve the issue of passing styles directly to child components.~~\r\n2. Rephrase the title of this issue to better capture the intent of the issue (instead of including a solution direction in the title, which that proposed solution is one of many possible approaches)\r\n\r\n**Reason:** Reduces confusion, since [that RFC](https://github.com/sveltejs/rfcs/pull/60) is a very different but elegant approach which solves the problem outlined in the original description _without_ leveraging the _implementation_ suggested in the title (i.e. `<style module>`). This is important because `<style module>` could actually be useful for other completely different use cases but might have a totally different implementation and feature set. \r\n\r\n_**Edit:** Sorry folks for the weird notification; I pressed `alt-enter` way too early before I was actually ready to post my comment._ üò¨ ","updated_at":"2023-07-26T03:18:04Z","created_at":"2023-07-26T01:31:50Z","creator_user_login":"patricknelson"}
{"number":6972,"comment_id":"1650890991","body":"> Close this in favor the forward directive RFC (https://github.com/sveltejs/rfcs/pull/60) to solve the issue of passing styles directly to child components.\r\n\r\nNo, even if we consider this issue to be specific to the `forward` directive, it's still useful to have an actual **issue** tracking the feature (especially considering the fact that this issue is now one of the most upvoted open issues in the repo and that will presumably be a factor when it comes what the maintainers decide to spend time on), what you linked to is the RFC; not the same thing.\r\nI could potentially change the title of this issue to just \"Introduce `forward` directive\" though.\r\n\r\n> This is important because <style module> could actually be useful for other completely different use cases but might have a totally different implementation and feature set.\r\n\r\nI don't think so. What would `<style module>` be useful for that the `forward` directive won't cover?","updated_at":"2023-07-26T02:53:01Z","created_at":"2023-07-26T02:46:08Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"1650911508","body":"> No, even if we consider this issue to be specific to the forward directive,  it's still useful to have an actual issue tracking the feature \r\n\r\nSorry, just to clarify: After much reading and confusion on my part, I eventually interpreted ticket to being specific to need to pass down scoped classes to child components (which could be implemented _either_ via `<style module>` or via `forward` directive).\r\n\r\n> I could potentially change the title of this issue to just \"Introduce forward directive\" though.\r\n\r\nI accidentally submitted my comment too early and notified a bunch of folks and likely would have refined it even further to that one suggestion. üò¨ \r\n\r\n> I don't think so. What would <style module> be useful for that the forward directive won't cover?\r\n\r\nSee this module https://github.com/micantoine/svelte-preprocess-cssmodules, the source of my confusion. üòÖ The reason why is because I'm new to Svelte, never used Vue nor React but I did see `svelte-preprocess-cssmodules` before I found this issue (which mentioned the `module` in the `<style>` tag, which was why it stood out to me). As it turns out, that plugin actually uses a similar syntax to accomplish something very similar but the _use case_ I'm referring to specifically is this one (`scoped`): https://github.com/micantoine/svelte-preprocess-cssmodules#scoped -- i.e. you can use `<style module=\"scoped\">` which _explicitly_ has the con of not being able to pass styles to child components.\r\n\r\nHope this clarifies my perspective! ","updated_at":"2023-07-26T03:15:48Z","created_at":"2023-07-26T03:13:37Z","creator_user_login":"patricknelson"}
{"number":6972,"comment_id":"1653059437","body":"Would like to leave my opinion here aswell. Another approach to solve the issue of passing styles could be a `:let` modifier:\r\n```html\r\n<style>\r\n:let(myClassName) {/* styles */}\r\n</style>\r\n```\r\nSvelte will do these things:\r\n1. create a global class and and generate a hashed name for it\r\n2. create a component scoped javascript variable named `myClassName`\r\n3. append the generated class name to the variable `myClassName`\r\n\r\nFrom there on we have the class name stored in a variable and therefore can do with it whatever we want. Either pass it to a component to style the child from the parent, put it in a context to release the style to all children or anything else. This is what it would look like in a real-world example:\r\nhttps://svelte.dev/repl/cb117170fdc54a4c969e0a56ab71a225?version=4.1.1","updated_at":"2023-07-27T07:32:55Z","created_at":"2023-07-27T07:32:55Z","creator_user_login":"KevsRepos"}
{"number":6972,"comment_id":"1703835988","body":"@aradalvand is there an RFC for `forward:class`? As far as I can see the original `forward` directive RFC doesn't touch on forwarding classes. I think it would be useful to have the `forward:class` as a separate RFC so that it can act as a rallying point for the proposal.\r\n\r\nAlso, I think the [`part` preprocessor](https://github.com/valterkraemer/svelte-preprocess-style-child-component) by @valterkraemer is great implementation of the same general idea and is even more flexible and powerful than the proposed `forward:class`. If that was merged directly into Svelte then I think the problem would be more-or-less fully solved.","updated_at":"2023-09-02T13:38:16Z","created_at":"2023-09-02T13:38:16Z","creator_user_login":"FeldrinH"}
{"number":6972,"comment_id":"1703837057","body":"> @aradalvand is there an RFC for forward:class? As far as I can see the original forward directive RFC doesn't touch on forwarding classes. I think it would be useful to have the forward:class as a separate RFC so that it can act as a rallying point for the proposal.\r\n\r\n`forward:class` is an _addition_ to the `forward` RFC, so I'm not sure if it makes sense to create a separate RFC for it specifically. But no, the [current `forward` RFC](https://github.com/sveltejs/rfcs/pull/60) doesn't mention `forward:class`. Maybe @Tropix126 could update it? That would be appreciated.","updated_at":"2023-09-03T10:19:21Z","created_at":"2023-09-02T13:44:23Z","creator_user_login":"aradalvand"}
{"number":6972,"comment_id":"1703843292","body":"I think a separate RFC would be a good idea, because the other `forward` directives are largely syntax sugar for things that are already possible, but `forward:class` adds fundamentally new functionality that cannot be easily emulated otherwise.\r\n\r\nEDIT: Also, the idea that `forward:class` is an addition to the `forward` directive is just a framing choice. The core idea of `forward:class` could be implemented on its own even if the other `forward` directives never make it into Svelte.","updated_at":"2023-09-02T14:07:44Z","created_at":"2023-09-02T14:05:18Z","creator_user_login":"FeldrinH"}
{"number":6972,"comment_id":"1703926880","body":"> I think a separate RFC would be a good idea, because the other `forward` directives are largely syntax sugar for things that are already possible, but `forward:class` adds fundamentally new functionality that cannot be easily emulated otherwise.\n\nI tend to agree. I like the idea, although keeping the scope of this RFC down is something that i've tried to maintain as much as possible, and it likens the chance that it'll be eventually considered (paving the way for future additions).","updated_at":"2023-09-02T20:07:52Z","created_at":"2023-09-02T20:07:52Z","creator_user_login":"Tropix126"}
{"number":5579,"comment_id":"716078329","body":"`requireAnimationFrame` callbacks are called _before_ the next frame is drawn using the same timestamp for each callback\r\n\r\nGetting a negative delta on the first frame is a common issue for raf loops, I think #4999 overwrites raf timestamps by an actual `performance.now()` call, but optimally animations should not rely on time origin timestamps and only work based on deltas \r\n\r\n`dt` should be the time elapsed since last tick, looking at the code I see it multiplies time between frames in ms (`=16.6` at 60hz) by the inverse at a hardcoded 60hz (`60/1000` or `1/16.6`), so `dt` here is the amount of 60hz frames passed since last tick\r\n\r\nGiven that css transitions keyframes are precomputed based on another hardcoded 60hz you are right to assume that `dt` should optimally always be equal to `1` ( and duration scaled accordingly ofc )\r\n\r\nOverall it makes for a cool snippet, but it also feels like a workaround an underlying issue (#3847), and I fear that exporting a \"spring\" easing for transitions that does not preserve velocity in case of a transition reversal or account for changes in target values would create a lot of confusion and misunderstanding\r\n\r\nThis is very much related to the conclusion I reached a few months ago that [the transition directive needs to be reworked](https://twitter.com/pushkine_/status/1270071564260737028) with springs and interoperability of motion sources in mind","updated_at":"2020-10-25T06:12:32Z","created_at":"2020-10-25T01:18:26Z","creator_user_login":"pushkine"}
{"number":5579,"comment_id":"716078821","body":"@pushkine good info, thanks. This is definitely a workaround, but pending the more fundamental changes that would need to happen to enable spring-based transitions (an essential feature imo) I hope this could be merged, and documented carefully, and hopefully deprecated in the future when someone smarter than I could get the necessary re-work done on transitions. \r\n\r\nAlso, were you ever able to get that PR of yours broken down, and split into more bite-sized pieces for review? I hate working without Prettier too, but it looked like there were some important fixes in there ... ","updated_at":"2020-10-25T01:26:10Z","created_at":"2020-10-25T01:25:54Z","creator_user_login":"arackaf"}
{"number":5579,"comment_id":"716093466","body":"@arackaf I included every non-breaking fix in #4999, it fixes many edge case bugs, completely rewrites internals for correct handling of delay in bidirectional transitions and adds the batching of DOM read/writes to components flushing lifecycle. It should be split further but I no longer have interest in presenting it better or enhancing it further\r\n\r\nThose PRs were basically laying foundations for `framer/motion` like features, I did not realize until way later that it simply couldn't be done [through runtime](https://twitter.com/pushkine_/status/1270071564260737028), and there isn't much to be done through the compiler either as each component is blind to whatever happens beyond its own file\r\n \r\nI pretty much came to the conclusion that _by design_ neither svelte's v3 runtime or its compiler can be further extended to achieve any kind of serious advancements in this field, there is thus no reason to work on a solution at the source more than in userland, but userland Svelte does allow for incredible things however, I've had my own \"magic motion\" with native-like app layouts for a while, I just wish it wasn't so hard to maintain, not to mention all the hoops I had to jump through. [cf. Some Sapper App Prototype](https://streamable.com/ie7uq8)","updated_at":"2020-10-25T06:11:44Z","created_at":"2020-10-25T04:45:18Z","creator_user_login":"pushkine"}
{"number":5579,"comment_id":"716161119","body":"In chatting with @Rich-Harris I do realize some of my changes are named horribly. The springEnter and springLeave functions absolutely don't belong in easing since ... they're not easing functions. They're helpers you'd feed the easing value *to*, in order to use in the `css` function of a transition.\r\n\r\nI'm happy to rename and reorganize as desired, or if this is too narrow to include in core, just let me know and I'll put it in userland. \r\n\r\nBut I do hope we can keep the `springFrames` function - I'd hate to copy paste a big chunk of the Svelte core spring code to use in a library - that seems overly fragile. ","updated_at":"2020-10-25T15:13:57Z","created_at":"2020-10-25T14:54:56Z","creator_user_login":"arackaf"}
{"number":5579,"comment_id":"716571950","body":"If a change is really necessary I think it'd be a better idea to support promises in custom transitions, so spring stores can be used directly. I recall #4272 working but you'd have to look more closely into the details","updated_at":"2020-10-26T14:11:15Z","created_at":"2020-10-26T14:11:15Z","creator_user_login":"pushkine"}
{"number":5579,"comment_id":"716585484","body":"That would be the best of all worlds. I hope that original promise-based PR of yours can be merged! ","updated_at":"2020-10-26T14:31:38Z","created_at":"2020-10-26T14:31:38Z","creator_user_login":"arackaf"}
{"number":5579,"comment_id":"716651722","body":"I may be missing something, but I *think* one advantage of converting the spring to an easing function that Svelte already understands is that Svelte can compile it into a CSS animation. Of course that's not an argument against allowing out:transitions to return a promise to allow devs to do whatever they want, but I'd love to be able to keep the css animation behavior where possible. ","updated_at":"2020-10-26T16:08:23Z","created_at":"2020-10-26T16:08:23Z","creator_user_login":"arackaf"}
{"number":5720,"comment_id":"733562725","body":"This is known complex types binding behavior.\r\nNothing to do with slotting.\r\nChange to primitive like number and it will work once.\r\n\r\n**Workarounds**\r\n\r\nBinding arrays: use immutable in child component like this.\r\nhttps://svelte.dev/repl/e4bd72b1ad5c4a4da4a76a32241ba180\r\n\r\nBinding objects fields:\r\n\r\n```javascript\r\n$: doSomething(obj.foo);\r\n\r\nlet prevFoo;\r\n$: if (obj.foo !== prevFoo ) {\r\n  prevFoo = obj.foo;\r\n  doSomething(obj.foo);\r\n}\r\n```\r\n\r\nor:\r\n\r\n```javascript\r\n$: foo = obj.foo;\r\n$: doSomething(foo);\r\n```","updated_at":"2020-11-25T08:54:45Z","created_at":"2020-11-25T08:54:45Z","creator_user_login":"non25"}
{"number":5720,"comment_id":"733757286","body":"> This is known complex types binding behavior.\r\n> Nothing to do with slotting.\r\n> Change to primitive like number and it will work once.\r\n\r\nI don't think this is true in this case. In the original repl, not using the slot by removing `<Wrapper>` changes the behavior from two `console.log` calls per \"Update x\" button press to one. Changing `x` to a primitive actually causes no `console.log` calls. (I suspect Svelte checks if the value has changed if it is a primitive, since the assignment in the original repl is just `x = x`.)","updated_at":"2020-11-25T14:57:47Z","created_at":"2020-11-25T14:57:47Z","creator_user_login":"zqianem"}
{"number":5720,"comment_id":"863365609","body":"This Stack Overflow Question [Why Svelte component updated variable, where in reality it didn't changed?\r\n](https://stackoverflow.com/questions/67995263/why-svelte-component-updated-variable-where-in-reality-it-didnt-changed) could be related.","updated_at":"2021-06-17T16:03:18Z","created_at":"2021-06-17T16:02:39Z","creator_user_login":"al6x"}
{"number":5720,"comment_id":"969798434","body":"It is VERY much a slot thing, replicated in https://svelte.dev/repl/2634d07aefa9465ea4ea7ec4bf810e8c?version=3.44.1\r\n\r\nremove the slot and the behaviour vanishes. \r\nremove the bind and the behaviour vanishes.\r\nchange the variable to a primitive and the behaviour vanishes.","updated_at":"2021-11-16T03:30:20Z","created_at":"2021-11-16T03:28:34Z","creator_user_login":"blairn"}
{"number":5720,"comment_id":"969831983","body":"> > This is known complex types binding behavior.\r\n> > Nothing to do with slotting.\r\n> > Change to primitive like number and it will work once.\r\n> \r\n> I don't think this is true in this case. In the original repl, not using the slot by removing `<Wrapper>` changes the behavior from two `console.log` calls per \"Update x\" button press to one. Changing `x` to a primitive actually causes no `console.log` calls. (I suspect Svelte checks if the value has changed if it is a primitive, since the assignment in the original repl is just `x = x`.)\r\n\r\nYou are seeing this behavior because reactivity for objects (arrays) works fundamentally different for objects than for primitive types. \r\nSee [this REPL](https://svelte.dev/repl/70f08a4e515c497e89df74931c0b6621?version=3.44.1) for a demonstration of this.\r\nTherefore as @blairn and @non25 pointed out, this seems to be indeed a problem with the reactivity of non-primitive types inside components that are embedded into a slot. ","updated_at":"2021-11-16T03:51:29Z","created_at":"2021-11-16T03:50:42Z","creator_user_login":"Theo-Steiner"}
{"number":5720,"comment_id":"1005985294","body":"~~@zqianem This issue apparently fixed now. Seems like properties are cached and compared to previous value using `===`. The example in the first comment of this issue only outputs `0` once (or never) inside REPL.~~","updated_at":"2022-01-06T10:50:41Z","created_at":"2022-01-05T18:43:56Z","creator_user_login":"iacore"}
{"number":5720,"comment_id":"1006289885","body":"> @zqianem This issue apparently fixed now. Seems like properties are cached and compared to previous value using `===`. The example in the first comment of this issue only outputs `0` once (or never) inside REPL.\r\n\r\nTesting the original REPL with the latest of version of Svelte and the issue remains:\r\nhttps://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.44.3\r\n\r\nI'm not seeing `0` as an output anywhere (nor should it be?)","updated_at":"2022-01-06T05:11:14Z","created_at":"2022-01-06T05:11:14Z","creator_user_login":"zqianem"}
{"number":5720,"comment_id":"1006472366","body":"@zqianem Sorry, I changed x to a number, and it worked. It seems like only arrays and objects trigger double update, while numbers like `0` or `NaN` works correctly.\r\n\r\nHere's with `let x = x + 1`:\r\nhttps://svelte.dev/repl/ae1d64a4ac874b619671937f86950b82?version=3.44.3\r\n","updated_at":"2022-01-06T11:03:11Z","created_at":"2022-01-06T10:51:56Z","creator_user_login":"iacore"}
{"number":5720,"comment_id":"1006484682","body":"Related issuue: #3617 ","updated_at":"2022-01-06T11:08:14Z","created_at":"2022-01-06T11:08:14Z","creator_user_login":"iacore"}
{"number":5720,"comment_id":"1006670902","body":"The current architecture of Svelte propagates redraw through components without checking if has been updated. So if you have two path in the dependency graph.\r\n\r\n`main -> wrapper -> slot`\r\nand\r\n`main -> slot`\r\n\r\nOne way to solve this is to send the origin component id and component event id together, like `main-frame-0` for one value update.","updated_at":"2022-01-06T15:16:37Z","created_at":"2022-01-06T15:16:37Z","creator_user_login":"iacore"}
{"number":5720,"comment_id":"1347605464","body":"This issue seems to have been partially fixed by https://github.com/sveltejs/svelte/pull/7981.\r\n\r\nNow, the initial page load in the reproduction only prints \"{}\" once instead of twice. However, button presses still cause two prints. Compare the following:\r\n\r\nOriginal: https://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.30.0\r\nNew: https://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.54.0","updated_at":"2022-12-13T01:12:00Z","created_at":"2022-12-13T01:12:00Z","creator_user_login":"zqianem"}
{"number":1678,"comment_id":"415456930","body":"> Aside from all the speculative VR stuff, I think this would probably make the codebase less intimidating for new contributors, and it would be good discipline.\r\n\r\nYes please :)","updated_at":"2018-08-23T15:20:32Z","created_at":"2018-08-23T15:20:32Z","creator_user_login":"acstll"}
{"number":1678,"comment_id":"433136831","body":"You have my full blessing. I love the heck out of this.","updated_at":"2018-10-25T17:25:19Z","created_at":"2018-10-25T17:25:19Z","creator_user_login":"arxpoetica"}
{"number":1678,"comment_id":"933727043","body":"üëçüèΩ yes, please! üéâ \r\nI would love to see a `@sveltejs/compile-tty` be Svelte's [vadimdemedes/ink](vadimdemedes/ink).","updated_at":"2021-10-04T18:06:59Z","created_at":"2021-10-04T18:06:59Z","creator_user_login":"schneiderfelipe"}
{"number":1678,"comment_id":"1042473285","body":"@benmccann what exactly remains? As I can see Rich has already done the main things. ","updated_at":"2022-02-17T01:20:25Z","created_at":"2022-02-17T01:20:25Z","creator_user_login":"stalkerg"}
{"number":1678,"comment_id":"1327283900","body":"What would we expect the API to look like?  From what I can see we can pass in a new compiler in [src/compiler/compile/index.js](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/index.ts).  Could we make the `generate`option also to take a function that is the compiler, receiving the same options as [this line of code](https://github.com/sveltejs/svelte/blob/91f8764145f2c2b3c30bfec5a3b409df8e0ddcc9/src/compiler/compile/index.ts#L139) (I can PR this + add typings).\r\n\r\nI am also interested in using svelte for pixi or three js so I'm pretty curious about how you'd mix and match components so that some are compiled to DOM nodes and some are compiled to three.js objects.  Would it be preferred to make a threejs compiler fallback to the default compiler and if so are the correct functions exported?","updated_at":"2022-11-25T10:12:50Z","created_at":"2022-11-25T10:12:50Z","creator_user_login":"connorgmeehan"}
{"number":4586,"comment_id":"601849033","body":"I too have been confused by behavior like this. Perhaps a clearly defined way to isolate atomic units with synchronous reactivity would help those of us still working through the idiosyncrasies of reactivity.   ","updated_at":"2020-03-20T18:27:38Z","created_at":"2020-03-20T18:27:11Z","creator_user_login":"jdevine"}
{"number":4586,"comment_id":"601849258","body":"We have discussed this on Discord I believe. Personally I think this is the expected behavior. It follows from how Javascript and the browser works, I think. Having it the other way could lead to strange bugs.\r\n\r\nWhat could be good is a clarifying statement in the documentation.","updated_at":"2020-03-20T18:27:43Z","created_at":"2020-03-20T18:27:43Z","creator_user_login":"kevmodrome"}
{"number":4586,"comment_id":"601850500","body":"@kevmodrome Yes, we have discussed it but I still don't think that this should be the behavior. ","updated_at":"2020-03-20T18:30:27Z","created_at":"2020-03-20T18:30:27Z","creator_user_login":"yuliankarapetkov"}
{"number":4586,"comment_id":"602034126","body":"For performance reasons, `$:` reactive blocks are batched up and run in the next microtask. This is the expected behavior. This is one of the things that we should talk about when we figure out how and where we want to have a section in the docs that goes into more details about reactivity.\r\n\r\nIf you want something that updates synchronously and depends on another value, you can use a derived store:\r\n\r\n```svelte\r\n<script>\r\n\timport { writable, derived } from 'svelte/store';\r\n\tconst foo = writable(0);\r\n\tconst even = derived(foo, $foo => $foo % 2 === 0);\r\n\tconsole.log($foo, $even);\r\n\t$foo = 1;\r\n\tconsole.log($foo, $even);\r\n</script>\r\n```","updated_at":"2020-03-21T11:58:28Z","created_at":"2020-03-21T11:58:28Z","creator_user_login":"Conduitry"}
{"number":4586,"comment_id":"602473544","body":"@Conduitry  Oh, wow, it works like a charm! \r\n\r\nBtw, I didn't know that you can directly assign values to stores like this.\r\n\r\n```\r\n$foo = 1;\r\n```\r\n\r\nI thought that you should always use `set()` or `update()`. I couldn't find it in the [docs](https://svelte.dev/docs#writable), is this official syntax and is it going to work in all cases? ","updated_at":"2020-03-23T09:15:09Z","created_at":"2020-03-23T09:15:09Z","creator_user_login":"yuliankarapetkov"}
{"number":4586,"comment_id":"603557908","body":"Easy to miss, but yes it's official syntax and documented at https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values","updated_at":"2020-03-24T23:31:01Z","created_at":"2020-03-24T23:31:01Z","creator_user_login":"dimfeld"}
{"number":4586,"comment_id":"1000776197","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T10:28:07Z","created_at":"2021-12-24T10:28:07Z","creator_user_login":"stale[bot]"}
{"number":6730,"comment_id":"919728656","body":"We've hit this one as well. I was about to create an issue and then I saw this.\r\nHere is a very simple [REPL](https://svelte.dev/repl/4a4ad0e819f54eb987f986d29c285e22?version=3.42.5) reproducing the issue (might be a bit simpler than the one provided). \r\nThe variable `isSmallerThan10` should be false but it is true.\r\n\r\n**This seems to exist in older versions of Svelte down to 3.0.0 as far as I can tell. So severity should be higher than \"blocking an upgrade\".**\r\n@arackaf I downgraded your example to v3.0.0 and it seems to produce the same result. See [here](https://svelte.dev/repl/acdaf14c1df54bd9bd2db7d3a3b97f1e?version=3.0.0) and if so please increase the priority.\r\n","updated_at":"2021-09-15T06:09:56Z","created_at":"2021-09-15T06:09:56Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"919766116","body":"Regarding @isaacHagoel's REPL example, which does `$count.a = 11` inside the reactive block, I've recently seen code that specifically depended on the fact that store assignment inside a reactive block does *not* trigger the block again. I'll post a link if I can remember where I found it, but it was something along the lines of:\r\n\r\n```js\r\n$: {\r\n  if (typeof $cleanup === 'function') {\r\n    $cleanup();\r\n  }\r\n  // ... code that needs cleanup ...\r\n  $cleanup = () => { console.log(\"Cleaning up...\"); };\r\n  // Assignment above does not trigger an infinite loop\r\n}\r\n```\r\n\r\nSo what you're seeing in that example, where `$count.a = 11` doesn't re-trigger the reactive block that uses `$count`, may be deliberate and just needs to be documented better. However, the more complex example from @arackaf's REPL is not the same thing, as it's entirely dependent on the order in which various `$:` blocks are called.","updated_at":"2021-09-15T07:21:45Z","created_at":"2021-09-15T07:21:45Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"919810701","body":"@rmunn looks like my issue happens regardless of stores. It is an issue with the reactivity itself. \r\nSee [this REPL](https://svelte.dev/repl/b417aec1edd94811ad87b9e0c039790d?version=3.42.5)\r\n\r\nI wonder if it is possible to reproduce the original issue without store. I would bet it is.\r\n\r\nI agree that when there is a bug that there has been around for a long time there would be existing code relying on the buggy behaviour. \r\nI wonder how I can work around this issue...","updated_at":"2021-09-15T08:28:20Z","created_at":"2021-09-15T08:28:20Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"919811928","body":"@isaacHagoel Isn't this a feature to prevent endless \"reactive\" loops/recursions? This is basically the halting problem, Svelte cannot determine (at compile time) if it's save to keep running the same reactive block again when the dependency that triggers it changes within the same block.\r\n\r\nEdit: Basically what @rmunn said, I think that's different from the issue that @arackaf describes (which seems like a valid bug, changing the order of the blocks shouldn't matter, but I didn't dig into that REPL)","updated_at":"2021-09-15T08:40:29Z","created_at":"2021-09-15T08:30:00Z","creator_user_login":"Prinzhorn"}
{"number":6730,"comment_id":"919821233","body":"@Prinzhorn I can easily defend from infinite loop within my reactive block. I cannot workaround the current issue (maybe I can but haven't come up with a way yet). \r\n[Notice that if I add setTimeout it \"works\"](https://svelte.dev/repl/f6eaee13453e440fad094201858fa358?version=3.42.5) which makes it even more confusing and still susceptible to infinite loops.\r\nIf it is different I am happy to submit a new issue but I suspect the original issue would reproduce without a store (I will try to find time to try it out later or tomorrow).\r\n","updated_at":"2021-09-15T08:43:13Z","created_at":"2021-09-15T08:43:13Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"919845499","body":"> I can easily defend from infinite loop within my reactive block\r\n\r\nI'm sure you can, in the same way you can determine if a trivial turing machine will halt. But you can't do that for a non-trivial application. Your REPL is basically constant and the entire `<script>` block could be removed. If you can provide a more real world example I'm happy to show you a solution.\r\n\r\n> [Notice that if I add setTimeout it \"works\"](https://svelte.dev/repl/f6eaee13453e440fad094201858fa358?version=3.42.5) which makes it even more confusing and still susceptible to infinite loops.\r\n\r\nThere's a difference between a tight infinite loop and using a timer that happens on an entirely different event loop tick. The timer is no different from any other event (e.g. a click) and invalidates the variable as one would expect.\r\n\r\n> If it is different I am happy to submit a new issue\r\n\r\nI think that would be better, because we shouldn't hijack this issue (unless you can show that it's actually the same issue).\r\n\r\nI personally rely on the behavior you describe and to me this is not a bug at all but absolutely required. Here's a simple example from my code base (simplified code). It implements a \"LazyTab\" component that will only render when the `visible` property is `true`. However, it will from then on keep rendering it even if `visible` becomes `false` again (this is from an intelligent tab component that will lazily render tabs but then keep them rendered to retain state like scroll position etc., it will only hide them via CSS)\r\n\r\n```svelte\r\n<script>\r\n  export let visible;\r\n\r\n  let render = false;\r\n\r\n  // Once render becomes true (via visible) it will stay true forever.\r\n  $: render = render || visible;\r\n</script>\r\n\r\n{#if render}\r\n  <slot />\r\n{/if}\r\n```\r\n\r\nIf Svelte wouldn't do what it does, then `$: render = render || visible;` would infinitely keep setting `render` because it depends on `render` and so on. I'm sure I have more complex examples in my code base, some I might not even realize that Svelte saves me.","updated_at":"2021-09-15T09:15:13Z","created_at":"2021-09-15T09:15:13Z","creator_user_login":"Prinzhorn"}
{"number":6730,"comment_id":"919859421","body":"To hep with debugging @arackaf's issue, I took the compiled JS code of his two REPL examples and diffed it. After removing the few line-number comments whose line numbers had changed, the core of the diff was as follows:\r\n\r\n```diff\r\n--- example-1.js\t2021-09-15 04:27:40.729899632 -0500\r\n+++ example-2.js\t2021-09-15 04:28:38.715858076 -0500\r\n@@ -259,6 +259,15 @@\r\n \tconst click_handler = () => $$invalidate(0, currentNextPageKey = nextNextPageKey);\r\n \r\n \t$$self.$$.update = () => {\r\n+\t\tif ($$self.$$.dirty & /*currentNextPageKey*/ 1) {\r\n+\t\t\t$: sync({\r\n+\t\t\t\tloading: true,\r\n+\t\t\t\tdata: null,\r\n+\t\t\t\tloaded: false,\r\n+\t\t\t\tk: currentNextPageKey\r\n+\t\t\t});\r\n+\t\t}\r\n+\r\n \t\tif ($$self.$$.dirty & /*$queryState*/ 128) {\r\n \t\t\t$: console.log(\"XXX \", $queryState);\r\n \t\t}\r\n@@ -278,15 +287,6 @@\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\r\n-\t\tif ($$self.$$.dirty & /*currentNextPageKey*/ 1) {\r\n-\t\t\t$: sync({\r\n-\t\t\t\tloading: true,\r\n-\t\t\t\tdata: null,\r\n-\t\t\t\tloaded: false,\r\n-\t\t\t\tk: currentNextPageKey\r\n-\t\t\t});\r\n-\t\t}\r\n \t};\r\n \r\n \treturn [\r\n```\r\n\r\nIt seems that the `$:` statements are compiled in the same order they're encountered, so that moving the `$: sync(...)` call up also moved it up in the compiled JS. I won't have time to dig into this further today, but I bet there's something about the order of subscriptions that is causing this behavior.","updated_at":"2021-09-15T09:34:05Z","created_at":"2021-09-15T09:34:05Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"919877036","body":"I _think_ this is the expected behavior.\r\n\r\nThe order of reactive statements is defined, and when triggered they run once. A reactive statement triggering another reactive statement will not make that statement rerun in the same tick in order to prevent endless loops (@Conduitry please correct me if I'm wrong).\r\n\r\nIn the example, there's no connection between `$: ({ loaded, loading, data } = $queryState);` and `$: sync({ loading: true, data: null, loaded: false, k: currentNextPageKey })`, which means Svelte will not reorder them. This means `$: .. = $queryState);` runs first, and `$: sync ...` runs afterwards. Because of the \"only run once\"-behavior, `sync`'s update to `$queryState` will not make that reactive assignment run again.","updated_at":"2021-09-15T09:59:31Z","created_at":"2021-09-15T09:59:31Z","creator_user_login":"dummdidumm"}
{"number":6730,"comment_id":"919981936","body":"@isaacHagoel - thanks a TON for simplifying my example. I knew there were simpler repro's, but it took me a few hours to get that one perfect, and I needed to move on.","updated_at":"2021-09-15T12:39:08Z","created_at":"2021-09-15T12:39:08Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"919982974","body":"@dummdidumm oh yikes - that seems really familiar, and I fear you might be right about this being expected, but I certainly hope not :(  I thought for sure updating the store anywhere, anytime would re-trigger the reactive block, completely apart from compile-time analysis.\r\n\r\nThis is an extremely dangerous use case for non-demo, more realistic code. ","updated_at":"2021-09-15T12:42:03Z","created_at":"2021-09-15T12:40:40Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"920008403","body":"I haven't read the whole thread, but from @dummdidumm's comment, this sounds like the same question as came up in #5848.","updated_at":"2021-09-15T13:15:21Z","created_at":"2021-09-15T13:15:21Z","creator_user_login":"Conduitry"}
{"number":6730,"comment_id":"920028909","body":"Yes, I believe this is essentially a duplicate of #5848, though it wouldn't have been obvious right away that it was a duplicate. The docs say \"Only values which directly appear within the `$:` block will become dependencies of the reactive statement,\" but that short sentence doesn't seem to be enough to help people grasp all the subtle implications. A couple examples, like the REPL examples in this issue and #5848, would probably be good for showing all the different ways you can get muddled with `$:` statements that have \"hidden\" dependencies (dependencies in a function called from the `$:` block but not visible directly in the `$:` block itself).","updated_at":"2021-09-15T13:40:57Z","created_at":"2021-09-15T13:40:57Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"920056290","body":"@Conduitry I fear it is. SO sorry to waste your time on this potential duplicate. This felt different, since I figured updating a store would break through that issue, but it seems not? I'd love to see a special case added to make this work with stores - dunno how feasible that is, though. ","updated_at":"2021-09-15T14:12:26Z","created_at":"2021-09-15T14:12:26Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"920057469","body":"@rmunn solid points - yeah, this definitely didn't seem like the same issue. I'm still hoping there's a potential patch for this specific issue. ","updated_at":"2021-09-15T14:13:42Z","created_at":"2021-09-15T14:13:42Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"920430407","body":"Thanks for the enlightening discussion above. I've created a separate issue and included my REPL examples there and what I am complaining about has nothing to do with the order of evaluation of reactive blocks and is reproduced with a single one. ","updated_at":"2021-09-15T22:29:10Z","created_at":"2021-09-15T22:29:10Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"923252141","body":"Without weighing into the issue at hand right now (it's honestly not clear to me what the correct solution is here ‚Äî the points about infinite loops are well made, the current behaviour _is_ intentional but unfortunate in the case here where there isn't actually an infinite loop, merely a hidden dependency that prevents Svelte from finding the correct topological ordering), it took me a long time of staring at Adam's frankly bonkers repro before I could make sense of it, so here's a simpler version:\r\n\r\nhttps://svelte.dev/repl/80a3e35ee61f42c0930b0a6d3f7115b1?version=3.42.5\r\n\r\n```svelte\r\n<script>\r\n  // exported so that `foo` is reactive\r\n  export let foo = true;\r\n\r\n  const obj = { loaded: true };\r\n  \r\n  function go() {\r\n    obj.loaded = false; \r\n    setTimeout(() => {\r\n      obj.loaded = false;\r\n    }, 1000);\r\n  }\r\n  \r\n  // (1) runs first, because it doesn't _look_ like it depends on (2)\r\n  $: ({ loaded } = obj);\r\n  \r\n  // (2) runs second, invalidates obj, but Svelte doesn't run\r\n  // reactive statements more than once per tick\r\n  $: if (foo) go();\r\n</script>\r\n\r\n{#if loaded} \r\n  <h1>this text should never be visible</h1>\r\n{:else}\r\n  <h1>this text should be visible immediately</h1>\r\n{/if}\r\n```","updated_at":"2021-09-20T20:15:02Z","created_at":"2021-09-20T20:01:34Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923268648","body":"I will just add one thing that came out of a conversation with Adam ‚Äî this might not be the best place for it but it's also not the worst ‚Äî we occasionally run into situations where you want explicit control over the dependency list for reactive statements.\r\n\r\nFor example you might have something like this...\r\n\r\n```svelte\r\n<Canvas>\r\n  <Shape fill=\"red\" path={...}/>\r\n</Canvas>\r\n```\r\n\r\n```svelte\r\n<!-- Shape.svelte -->\r\n<script>\r\n  import { getContext } from 'svelte';\r\n\r\n  export let path;\r\n  export let fill;\r\n\r\n  const { invalidate, add_command } = getContext('canvas');\r\n\r\n  add_command((ctx) => {\r\n    ctx.beginPath();\r\n    // some drawing happens\r\n    ctx.fillStyle = fill;\r\n    ctx.fill();\r\n  });\r\n\r\n  // when `fill` or `path` change, we need to invalidate the canvas,\r\n  // but `invalidate` doesn't need to know anything about `fill` or `path`\r\n  $: (fill, path, invalidate());\r\n</script>\r\n```\r\n\r\nThat `$: (fill, path, invalidate())` line is a bit weird. Conversely, if you want to _ignore_ some dependency, you need to 'mask' it by hiding it inside a closure. If you want to log `frequently_changing_thing` whenever `infrequently_changing_thing` changes, but you _don't_ want to log frequently, then you can't do this...\r\n\r\n```js\r\n$: console.log({ infrequently_changing_thing, frequently_changing_thing });\r\n```\r\n\r\n...you have to do this:\r\n\r\n```js\r\nfunction log_stuff(infrequently_changing_thing) {\r\n  console.log({ infrequently_changing_thing, frequently_changing_thing });\r\n}\r\n\r\n$: log_stuff(infrequently_changing_thing);\r\n```\r\n\r\nThis is all tangentially related to the issue in this thread because Adam suggested that if we _did_ have a mechanism for expressing those dependencies, it could be treated as a signal to Svelte that reactive declarations should always re-run when those explicit dependencies change, infinite loop potential be damned. I actually don't think that's necessary ‚Äî I reckon we could probably figure out a way to re-run `(1)` in the example above as a result of `(2)` changing _without_ altering the behaviour that the `cleanup` example above depends on ‚Äî but it's worth noting in any case.\r\n\r\nSo. Here's my idea for a way to (optionally, for those rare cases where you really do need to give explicit instructions to the compiler) declare dependencies for a reactive statement:\r\n\r\n```js\r\n$: { fill, path } invalidate();\r\n```\r\n\r\n```js\r\n$: { infrequently_changing_thing } console.log({ infrequently_changing_thing, frequently_changing_thing });\r\n```\r\n\r\nThe rule here is that if the `$` labeled statement's `body` is a `BlockStatement` whose `body` is an `ExpressionStatement` whose `expression` is a `SequenceExpression` whose `expressions` is an array of `Identifier` nodes, it is treated as a dependency list, and the next node in the AST takes its place as the reactive statement.\r\n\r\nSince `$: { a, b, c }` is meaningless code, I think you could even make the case that it's a non-breaking change.\r\n\r\nThe one gotcha is Prettier...\r\n\r\n```js\r\n// before\r\n$: { a, b, c } { console.log({ a, b }) }\r\n\r\n// after\r\n$: {\r\n  a, b, c;\r\n}\r\n{\r\n  console.log({ a, b });\r\n}\r\n```\r\n\r\n...but I'm fairly sure the plugin could solve that.","updated_at":"2021-09-20T20:23:43Z","created_at":"2021-09-20T20:23:43Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923292191","body":"Some other gotchas:\r\n\r\n- We're currently encouraging `break $;` if people want to bail out of a particular reactive block, which just automatically works because we leave the `$:` label on the surrounding block in the generated JS. However, Acorn will complain if there's a `break` statement referring to a label it can't see on a containing block - and the label will now be on the previous block.\r\n- What happens with auto-declaring reactive declarations? Are there special syntax or behavior considerations to be made there? Do we want to just disallow that?\r\n\r\nIs there some other syntax where the explicit list of dependencies can occur within the reactive block, but do so in a way we can sneak in in an effectively non-breaking way?","updated_at":"2021-09-20T20:52:27Z","created_at":"2021-09-20T20:52:27Z","creator_user_login":"Conduitry"}
{"number":6730,"comment_id":"923297627","body":"Reactive blocks don‚Äôt currently return anything, do they? Could a reactive block return the dependency array? \r\n\r\n```js\r\n$: { \r\n  foo(a, b, c);\r\n  return [a, b]\r\n}\r\n```","updated_at":"2021-09-20T20:56:58Z","created_at":"2021-09-20T20:56:30Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923300693","body":"Good point re `break`. I guess you could solve it by swapping the order:\r\n\r\n```js\r\n$: {\r\n  if (x) break $;\r\n  console.log(y);\r\n} { y }\r\n```\r\n\r\nIt's definitely less aesthetically appealing (to me at least) though. I guess this monstrosity could work for the cases where you need `break`:\r\n\r\n```js\r\n$: { y } $: {\r\n  if (x) break $;\r\n  console.log(y);\r\n}\r\n\r\n// or if you didn't want to reuse $\r\n$: { y } fast: {\r\n  if (x) break fast;\r\n  console.log(y);\r\n}\r\n```\r\n\r\n> What happens with auto-declaring reactive declarations?\r\n\r\nI was imagining they'd continue to work the same way ‚Äî no change in syntactic validity.\r\n\r\n> Is there some other syntax where the explicit list of dependencies can occur within the reactive block, but do so in a way we can sneak in in an effectively non-breaking way?\r\n\r\nYou could certainly do this sort of thing...\r\n\r\n```js\r\n$: {\r\n  [fill, path];\r\n  invalidate();\r\n}\r\n```\r\n\r\n...but it's arguably less clear (hard to tell that you could _shorten_ the dependency list rather than lengthening it that way) and only works with block statements.\r\n\r\n> Could a reactive block return the dependency array?\r\n\r\nNo, that's an invalid `return` statement because you're not inside a function body.","updated_at":"2021-09-20T20:58:48Z","created_at":"2021-09-20T20:58:48Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923318571","body":"@Rich-Harris I think your last example is on to something. Have the dep array be the *last* expression in the block, and I think that would look pretty good. ","updated_at":"2021-09-20T21:17:00Z","created_at":"2021-09-20T21:17:00Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923319691","body":"@Rich-Harris come to think of it, your *first* example is really, really good too. If the dev list is last that‚Äôs closer to what React currently does ‚Ä¶ ","updated_at":"2021-09-20T21:18:17Z","created_at":"2021-09-20T21:18:17Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923321374","body":"As long as we'll carry over whatever label the user may have put on the next block into the compiled JS, I think requiring folks to explicitly add another label makes the most sense. I agree it's more confusing to put the dependencies after the main block, and I don't think we should inconvenience typical use for the sake of `break`.\r\n\r\nReturning from syntax back to functionality: Is your idea that we would keep the current \"only run once, runs can't synchronously trigger additional runs\" behavior, but that we would now take into account the overridden dependencies when topographically sorting the reactive blocks? That sounds sufficient to me, I think. I'm not a fan of the idea of cycling through the reactive blocks until everything settles.","updated_at":"2021-09-20T21:20:12Z","created_at":"2021-09-20T21:20:12Z","creator_user_login":"Conduitry"}
{"number":6730,"comment_id":"923325715","body":"@Conduitry Rich did explicitly say that this would allow for potentially infinite reevaluations of the reactive blocks, which I think is absolutely essential (though he can speak for himself if I misunderstood).\r\n\r\nReact (and other frameworks to my knowledge) do not give you ONE opportunity for your side effects to run, requiring careful ordering of them. ","updated_at":"2021-09-20T21:25:40Z","created_at":"2021-09-20T21:25:15Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923346294","body":"> Returning from syntax back to functionality: Is your idea that we would keep the current \"only run once, runs can't synchronously trigger additional runs\" behavior, but that we would now take into account the overridden dependencies when topographically sorting the reactive blocks\r\n\r\nIdeally yes ‚Äî I reckon it's better that we settle on one rule for when reactive statements evaluate, and for this to be a non-breaking change it would have to be the current rule (which I think makes sense in any case). The wrinkle is that if we _did_ want to later change the behaviour for blocks with explicit dependency lists, that _would_ be a breaking change. So we probably want to be sure.\r\n\r\nBut it's worth noting that explicit dependency lists wouldn't be a tool for solving the problem in @arackaf's example. The issue isn't that statement `(1)` doesn't know that it _reads_ `obj`, it's that statement `(2)` doesn't know that it _writes_ `obj`. The fundamental problem is one of ordering ‚Äî Svelte can't sort the statements topologically if reads or writes are hidden from view ‚Äî and there are two potential solutions that spring to mind:\r\n\r\n1. Track which reactive statements caused which bits to get dirty. Re-run all reactive declarations until there are no more changes, but skip any statements that caused _themselves_ to become dirty\r\n2. Detect any 'hidden writes' and warn that the ordering is incorrect as a result, probably only in dev mode\r\n\r\n(The third solution is to have a Sufficiently Smart Compiler that identifies that the call to `go` writes to `obj`, but that's a non-starter.)\r\n\r\nOf those, I prefer the second. The actual solution to the problem is very simple ‚Äî `(1)` and `(2)` should be swapped ‚Äî and guiding the developer towards that solution is almost certainly better than the considerable book-keeping and wasted computation that the first would involve.","updated_at":"2021-09-20T21:48:01Z","created_at":"2021-09-20T21:48:01Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923390071","body":"For clarity, would `$: { (a, b, c) } { console.log({ a, b }) }` also be allowed? Depending on the length of the identifiers, some people might want to split it onto multiple lines, in which case the parentheses would be useful. If `(a, b, c)` turns into the same SequenceExpression in the AST that `a, b, c` does, then of course the answer is yes and this would come for free.\r\n\r\n> @Rich-Harris I think your last example is on to something. Have the dep array be the _last_ expression in the block, and I think that would look pretty good.\r\n\r\nUgh, no, please. Putting the dependency array last is one of React's ugly bits. It's pretty much necessary if the dependency array is a function parameter, because it's hard (and in some cases impossible) to deal with optional parameters in non-final positions, so I understand why React did it that way. But putting the dependency list last makes you read the code block twice to ensure that you've fully understood it (\"wait, let me double-check: when `x` changes, the block re-runs. Is that the logic I want?\"), whereas putting the dependency list first means you only have to read the code block once, and the dependency list ends up working a little bit like a list of function parameters so you already have a mental framework in place to understand it.\r\n\r\nCount me as a solid vote for the dependency list coming first, not last.","updated_at":"2021-09-20T22:27:27Z","created_at":"2021-09-20T22:27:27Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"923392481","body":"Ah. Yes, this new syntax would just let you override the dependencies for a given reactive block, but it wouldn't let you specify which ones it's writing to. I guess that logic would continue to work as it is now - whichever variables are assigned to within the reactive block? Does it make sense to try to come up with a syntax that lets component authors specify that as well?\r\n\r\nIf we're detecting hidden writes in dev mode and issuing a warning, are you worried about that warning irritating people who already explicitly wrote their reactive blocks in such a way as to hide an assignment from the compiler? It's not officially documented anywhere, but we've already been pushing people towards writing code like `$: foo, bar, baz, do_something();`. Would that start emitting warnings for code we've already been telling people to use?","updated_at":"2021-09-20T22:28:48Z","created_at":"2021-09-20T22:28:48Z","creator_user_login":"Conduitry"}
{"number":6730,"comment_id":"923420488","body":"I‚Äôm disappointed to hear the preference for (2) over (1). Having to keep track of the ordering of reactive blocks, and manually move them around would be a somewhat unique burden among JS frameworks. It‚Äôs worth noting that React will never, ever care which order your useEffect calls are listed in.\r\n\r\nInterestingly I had assumed the explicit dep lists would trigger behavior (1) for the explicitly listed deps. But if you‚Äôre even thinking of extending that to the general case, I hope you‚Äôll reconsider whether that would be wasteful work. Pulling that off would make Svelte as simple to use at scale as it is in fun little demos. ","updated_at":"2021-09-20T23:09:33Z","created_at":"2021-09-20T23:08:48Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923422971","body":"+1 for dependencies first.","updated_at":"2021-09-20T23:12:58Z","created_at":"2021-09-20T23:12:58Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923426645","body":"But really, if solving dep tracking at runtime is prohibitively hard in the general case, having it be a feature unique to explicit dep lists could be a decent middle ground.\r\n\r\nIt wouldn‚Äôt be a breaking change since it doesn‚Äôt exist yet. It would allow devs to both explicitly declare that foo is a dep of a reactive block, and also have that block explicitly re-run as needed if foo changes in ways unexpected to the Svelte compiler. ","updated_at":"2021-09-20T23:19:25Z","created_at":"2021-09-20T23:19:25Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923427696","body":"What about:\r\n\r\n```\r\n$: {\r\n  $$: [fill, path];\r\n  invalidate();\r\n}\r\n```\r\nor\r\n```\r\n$: { $$: [fill, path]; invalidate(); }\r\n```\r\n\r\nThat `$$` could give one a clue as a new developer that there's something here related to the original `$`.\r\n\r\nI suppose you could use curlies too...","updated_at":"2021-09-20T23:24:36Z","created_at":"2021-09-20T23:21:32Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923428731","body":"And to have it be non-breaking, we can search for the absence of `$$` and then fallback to the implicit find-and-react-to-all-vars approach.","updated_at":"2021-09-20T23:23:18Z","created_at":"2021-09-20T23:23:18Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923429549","body":"> Does it make sense to try to come up with a syntax that lets component authors specify that as well?\r\n\r\nI'm definitely not suggesting any of these, but they're all valid...\r\n\r\n```js\r\n$: { a, b, c => d, e, f } {...}\r\n$: { a, b, c > d, e, f } {...}\r\n$: { a, b, c | d, e, f } {...}\r\n```\r\n\r\n(The first one isn't really workable, since `c` will show up as an unused parameter in the `c => d` arrow function.)\r\n\r\nThis would introduce an interesting new problem though, which is that you presumably need a way to distinguish between 'I haven't explicitly stated which variables are written to' and 'assume this statement doesn't write to any variables'. If we don't provide a way to explicitly state which variables are written to, then we don't have to solve that problem. \r\n\r\n> are you worried about that warning irritating people who already explicitly wrote their reactive blocks in such a way as to hide an assignment from the compiler?\r\n\r\nHmm. That could happen. Though it would only happen if the hidden assignment was to a variable that was _also_ used in a separate reactive statement, which would consequently be executing with stale values. That feels like a very weird situation ‚Äî is it a thing that happens in real code? Possibly, though I'm struggling to think of a use case.\r\n\r\n> Having to keep track of the ordering of reactive blocks, and manually move them around would be a somewhat unique burden among JS frameworks. It‚Äôs worth noting that React will never, ever care which order your useEffect calls are listed in.\r\n\r\n> Pulling that off would make Svelte as simple to use at scale as it is in fun little demos.\r\n\r\nPart of building a scalable system is providing developers with as few footguns as possible. What you're asking for is the ability to write this...\r\n\r\n```js\r\n({ loaded } = obj);\r\nif (foo) go();\r\n```\r\n\r\n...and run this...\r\n\r\n```js\r\n({ loaded } = obj);\r\nif (foo) go();\r\n({ loaded } = obj);\r\n```\r\n\r\n...when what you meant was this:\r\n\r\n```js\r\nif (foo) go();\r\n({ loaded } = obj);\r\n```\r\n\r\nIt's not terrible if `({ loaded } = obj)` runs twice. But if that line was `({ loaded = expensive_function(obj) })` then it becomes a footgun. Running that code twice is _absolutely pointless_, and you shouldn't be disappointed if a framework has your back by steering you towards better outcomes.\r\n\r\nAppeals to 'this is how `useEffect` behaves' won't work here: `useEffect` cascades are a terrible outcome, and what we're _really_ talking about here is dependencies between statements, which are dealt with in React (as in any code that isn't topologically ordered) by... manually ordering those statements.","updated_at":"2021-09-20T23:24:54Z","created_at":"2021-09-20T23:24:54Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923433954","body":"> For clarity, would `$: { (a, b, c) } { console.log({ a, b }) }` also be allowed?\r\n\r\n@rmunn Not sure I understand why the parens are useful? You can already split a sequence expression into multiple lines if needed:\r\n\r\n```js\r\n$: {\r\n  a,\r\n  b,\r\n  c\r\n} {\r\n  console.log({ a, b });\r\n}\r\n```","updated_at":"2021-09-20T23:32:48Z","created_at":"2021-09-20T23:32:48Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923439906","body":"There is actually an explicit reason why `$: {}` followed by `{}` is bad, as in this example:\r\n\r\n```\r\n$: {\r\n  a,\r\n  b,\r\n  c\r\n} {\r\n  console.log({ a, b });\r\n}\r\n```\r\n\r\nLet's say it actually looked like the following:\r\n\r\n```\r\n$: {\r\n  a,\r\n  b,\r\n  c\r\n}\r\n{\r\n  console.log({ a, b });\r\n}\r\n```\r\n\r\nIt's a slippery slope between same line and next line, and blocks are an ECMA5+ standard for creating new scope...someone could arguably want to use that for `let` and `const` statements that have their own scope but have nothing to do with the prior reactive block declaration statement.","updated_at":"2021-09-20T23:45:57Z","created_at":"2021-09-20T23:45:57Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923440630","body":"I‚Äôm ok with a framework steering me away from bad code, but not if the price is that I might have correct code that simply doesn‚Äôt work, because there‚Äôs an order the Svelte compiler is expecting my side effects to be listed in. Surely Svelte could warn me in the console if it detects weirdness like that? \r\n\r\nEvery react dev has seen the infinite loop error message. It‚Äôs not a big deal. Much better to see that once in awhile, and never, ever have to manually order lines of code to make the framework work correctly. ","updated_at":"2021-09-20T23:47:46Z","created_at":"2021-09-20T23:47:46Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923442436","body":"To put a finer emphasis on this, I've not written code even 1/10th as complex in Svelte, compared to some of the React projects I've worked on over the years. Swyx once said that React was for apps, and Svelte for sites. If that's also the position of the Svelte team, then I think this behavior is acceptable. But if this framework is intended to tackle richly interactive web applications, the likes of which React has been handling for years, then I think hiding these topological ordering dependencies from the developer is essential. ","updated_at":"2021-09-20T23:52:18Z","created_at":"2021-09-20T23:52:18Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923445389","body":"I don't think Svelte needs to shy away from the possibility of being used for complicated apps in order to require that users think about what order the code they're writing will be run in, if that's what's being implied.","updated_at":"2021-09-20T23:59:33Z","created_at":"2021-09-20T23:59:33Z","creator_user_login":"Conduitry"}
{"number":6730,"comment_id":"923449933","body":"After bikeshedding ruthlessly on this for at least an hour, lol, I'm leaning more into @Rich-Harris's proposal toward `$: { x, y, z } { foo() }`, with the weird caveat around `break $`.","updated_at":"2021-09-21T00:07:20Z","created_at":"2021-09-21T00:07:20Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923473931","body":"@Conduitry that‚Äôs stretching what I wrote a bit, no? *Of course* devs need to think about the order of their code. The question is, should devs need to think about the order of their seemingly unrelated reactive blocks, in order to satisfy the hidden rules of the compiler. As far as I can tell, Svelte is the only framework with such a requirement, and I think it will hurt its ability to be used on software at scale, with teams of (often junior) devs. ","updated_at":"2021-09-21T00:24:25Z","created_at":"2021-09-21T00:24:25Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923474191","body":"> It's a slippery slope between same line and next line\r\n\r\nNot really. There's no situation in which someone would write\r\n\r\n```js\r\n$: { a, b, c }\r\n```\r\n\r\nas a standalone statement; it's meaningless. By extension, there's no ambiguity about whether the subsequent block 'belongs' to the label.\r\n\r\n> Surely Svelte could warn me in the console if it detects weirdness like that?\r\n\r\nYou mean like this ‚Äî the proposal that you were 'disappointed' by an hour ago? üòâ\r\n\r\n> 2. Detect any 'hidden writes' and warn that the ordering is incorrect as a result, probably only in dev mode","updated_at":"2021-09-21T00:24:34Z","created_at":"2021-09-21T00:24:34Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923477365","body":"@Rich-Harris to be clear, the best case scenario would be to warn *after* it executes the updates. Halt an infinite loop and error, perform weird update loops, and also warn. But I think the first priority should be correctness without devs needing to manually track references and writes, and re-order reactive blocks.","updated_at":"2021-09-21T00:27:43Z","created_at":"2021-09-21T00:27:43Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923488613","body":"> As far as I can tell, Svelte is the only framework with such a requirement\r\n\r\nSvelte lets you write code like this...\r\n\r\n```js\r\n$: d = a * 2;\r\n$: a = b + c;\r\n```\r\n\r\n...because reactive statements are ordered topologically. In that regard it's inspired by things like Observable ‚Äî you're freed from the requirement to author statements in a particular order. If you translate that directly to React, you end up with this:\r\n\r\n```js\r\nconst d = useMemo(() => a * 2, [a]);\r\nconst a = useMemo(() => b + c, [b, c]);\r\n```\r\n\r\nThis is, of course, invalid code. How do we make it valid? _By manually ordering those statements._ It's not correct to say 'Svelte is the only framework with this requirement' ‚Äî it's the only framework where topological ordering is even a possibility.\r\n\r\nNow you might say that a more accurate comparison is `useEffect`:\r\n\r\n```js\r\nconst [d, setD] = useState(null);\r\nconst [a, setA] = useState(null);\r\n\r\nuseEffect(() => {\r\n  setD(a * 2);\r\n}, [a]);\r\n\r\nuseEffect(() => {\r\n  setA(b + c);\r\n}, [b, c]);\r\n```\r\n\r\nBut you're not freed from having to think about the order in which code happens here either. You need to consider the initial state where `a` and `d` are both `null`, which could cause a rendering error in your template, or could cause an effect to fail. A component containing that code will render three times ‚Äî once initially, when `a` and `d` are both `null`, once after both effects have run the first time, when `d` will confusingly be equal to `0` (because `null * n === 0`), and once with correct values. Per the React docs...\r\n\r\n> effects scheduled with useEffect don‚Äôt block the browser from updating the screen. This makes your app feel more responsive\r\n\r\n...that's not guaranteed to all happen in the same tick, so it's possible that the user will see these incorrect and inconsistent values.\r\n\r\nIn short, while I appreciate that the React model is the one you're familiar with, it's in no way something we aspire to emulate. Making insulting comments about Svelte's scalability (it scales just fine, thanks) isn't going to persuade us to add footguns to the framework, and doesn't motivate people to go further out of their way to help you. The correct response to this issue is to make it easier for developers to manually order their statements ‚Äî yes, just like you have to do in every other framework ‚Äî in cases where dependencies are hidden from the compiler.","updated_at":"2021-09-21T00:52:49Z","created_at":"2021-09-21T00:52:49Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923494678","body":"No insult intended toward Svelte. Saying it's not as capable of working on software at scale, with a team (consisting of juniors) behind it, is not an insult if that's not what it's designed for.\r\n\r\nThe useEffect code is indeed the correct comparison, but I'm not sure why you think needing to specify an initial state is some sort of problem. You just ... specify initial state. And I'm pretty sure all effects do indeed run within the same tick. Do you have a source saying otherwise? The page you quoted merely noted that useEffect does not run in the same tick *as the antecedent state update*, with useLayoutEffect existing if you do need that (ie, if you need to run effects that affect ... layout, without jank).\r\n\r\nhttps://reactjs.org/docs/hooks-effect.html \r\n\r\nBut whatever neat parlor tricks Svelte can do, ie \r\n\r\n```js\r\n$: d = a * 2;\r\n$: a = b + c;\r\n```\r\n\r\nmight save a line or two of code, but that'll mean little when a mid-level dev is spending hours trying to figure out why a shared data-fetching library isn't updating exactly as expected.","updated_at":"2021-09-21T01:07:52Z","created_at":"2021-09-21T01:07:52Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923496865","body":"> if that's not what it's designed for\r\n\r\nI respect him deeply when I say, Swyx was just wrong about this one.","updated_at":"2021-09-21T01:13:40Z","created_at":"2021-09-21T01:13:05Z","creator_user_login":"arxpoetica"}
{"number":6730,"comment_id":"923498400","body":"@arxpoetica I want him to be wrong about this, but it's hard to imagine a serious web app: FinTech dashboard, a healthcare software suite, etc being written with a reactivity model that had this kind of fragility, requiring manual intervention to help the compiler out. That's just a non-starter.   \r\n\r\nSvelte is still a joy to work with for silly little side projects \r\n\r\nhttps://github.com/arackaf/booklist \r\n\r\nit's legit fun. Even after bumping into *this very problem* on **THAT** tiny, insignificant little app. Even in spite of that I still enjoy using it more than React. I just want it to be something I can use at work. That would be *amazing*","updated_at":"2021-09-21T01:17:48Z","created_at":"2021-09-21T01:16:47Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923501978","body":"> This would introduce an interesting new problem though, which is that you presumably need a way to distinguish between 'I haven't explicitly stated which variables are written to' and 'assume this statement doesn't write to any variables'. If we don't provide a way to explicitly state which variables are written to, then we don't have to solve that problem.\r\n\r\nWhatever syntax is chosen, perhaps putting a literal `null` in the part where you list the variables written to could mean \"assume this statement doesn't write to any variables\". A literal `undefined` might mean the same as `null`, but if for some reason there's a need to explicitly say \"don't assume anything about writes, and instead analyze the code block\", then I suppose putting `undefined` in place of a written-to list could have that meaning.\r\n\r\n> @rmunn Not sure I understand why the parens are useful?\r\n\r\nFor people coming from other languages, it might be comforting to have parens around a comma-separated list. They're not needed in Javascript, but I could see some devs wanting them if they're used to a different language's syntax. That's all I was thinking about.","updated_at":"2021-09-21T01:25:11Z","created_at":"2021-09-21T01:25:11Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"923505435","body":"> I want him to be wrong about this, but it's hard to imagine a serious web app: FinTech dashboard, a healthcare software suite, etc being written with a reactivity model that had this kind of fragility, requiring manually intervention to help the compiler out. That's just a non-starter.\r\n\r\nThis. So much this.\r\nPlease guys, (partial) protection infinite loops is nice and all but it cannot be prioritised over program correctness and predictability. Devs deal with the risk of infinite loops routinely. They are usually very easy to detect and fix.\r\nIf the new behaviour (perform all updates) is opt-in via some kind of configuration (compiler flag or whatever) than it won't be a breaking change. ","updated_at":"2021-09-21T01:33:37Z","created_at":"2021-09-21T01:33:37Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"923507258","body":"All of what @isaacHagoel and @arackaf want is available in stores, by the way. The issue is that the documentation led them (and presumably other devs who haven't spoken up about it) to believe that `$:` would work exactly the same way as stores do, and it has subtle differences.","updated_at":"2021-09-21T01:38:34Z","created_at":"2021-09-21T01:38:34Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"923513893","body":"> You just ... specify initial state\r\n\r\nI mean, sure, but...\r\n\r\n```js\r\nconst [d, setD] = useState(a * 2);\r\nconst [a, setA] = useState(b + c);\r\n\r\nuseEffect(() => {\r\n  setD(a * 2);\r\n}, [a]);\r\n\r\nuseEffect(() => {\r\n  setA(b + c);\r\n}, [b, c]);\r\n```\r\n\r\n...then you create a maintenance burden by repeating the expression (you have to be careful to keep it synced between init and update, contra the principles of declarative programming). And if it involves any expensive computation (or allocates stuff) then you need to be careful about putting it inside the function form of `useState`, so the computation/allocation doesn't happen on unrelated renders, which not everyone remembers to do. More footguns.\r\n\r\n> Do you have a source saying otherwise?\r\n\r\nI'm saying that the three renders (where Svelte needs one) are not guaranteed to run in the same tick, not that the effects themselves run in separate ticks if they belong to the same commit.\r\n\r\n@isaacHagoel it's not just about infinite loops, it's about the expected behaviour in other situations (see the `render = render || visible` or `cleanup` examples above). Adam's problem isn't that his code is only running once when it should run multiple times; it should only run once. The problem is that his code is running in the wrong order, and Svelte wasn't able to tell him as much. If he'd been given a console warning that said something like this...\r\n\r\n```\r\nThe reactive declaration on line 15...\r\n\r\n  $: ({ loaded } = obj);\r\n\r\n...references `obj`, which is assigned indirectly by line 19:\r\n\r\n  $: if (foo) go();\r\n\r\nIf the first statement should run after the second statement, you will need to swap them, as Svelte cannot \r\norder them topologically at compile time. See https://svelte.dev/blah for an explanation.\r\n```\r\n\r\n...then there would have been no problem. Do you have an example of a situation where being guided towards the correct order _wouldn't_ solve the issues you've encountered?","updated_at":"2021-09-21T01:53:28Z","created_at":"2021-09-21T01:53:28Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923523982","body":"The multiple renders thing is turning into a red herring. It's fine. React has much, much bigger perf problems than that, yet is STILL more than fast enough to power a whole host of extremely profitable pieces of software. \r\n\r\nThe idea that Svelte shouldn't automatically re-run reactive blocks *if needed* because of (likely rare) hidden writes that the compiler can't detect because of perf concerns is just silly. This would be a rare thing, and would almost certainly have no observable effect on end users (except for infinite loops, which, as has been mentioned, are easily fixed). \r\n\r\nAnd if it's *really* a concern, you could always spit out a warning that \"hey bro we had to re-run the reactive block on line X - if you move it up we can avoid it.\" But I hope I can convince folks that being correct by default, out of the box, without needing to help the compiler out should be a higher priority than being terrified of a few extra cycles being spent on re-renders. ","updated_at":"2021-09-21T02:07:46Z","created_at":"2021-09-21T02:06:42Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923535250","body":"@Rich-Harris unfortunately I do. I created #6732 because of it.\r\nMy team at Pearson is creating pretty sophisticated interactive experiences, for example the recently launched [virtual labs](https://www.pearson.com/us/higher-education/products-services-teaching/learning-engagement-tools/PearsonInteractiveLabs.html). We've went all in on Svelte for the most complex parts of the experience (because it is awesome in general) but were encountering puzzling behaviours because of this issue.\r\nSome of our stores are connected to the server so they are async which exposes us to infinite loops and all (in those cases). Then, for example when we added optimistic updates to one of those stores to keep up with the rapid rate of changes, suddenly things would not update and we found ourselves having to add ticks in \"random\" places and getting all sorts of hard to debug, silent failures and inconsistencies. \r\n\r\n\r\nWhen the app is complex and \"fast\" (as in can do multiple things in the same tick) - it is very natural to have Reactive blocks implicitly communicating via state changes.    \r\n ","updated_at":"2021-09-21T02:17:34Z","created_at":"2021-09-21T02:17:34Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"923541667","body":"@isaacHagoel thanks ‚Äî per Ben's comment on the other thread, if you are able to create a repro it would be very helpful","updated_at":"2021-09-21T02:27:26Z","created_at":"2021-09-21T02:27:26Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"923545316","body":"@Rich-Harris are you sure you need a (another) repro? That sounds like the exact same issue as this one.","updated_at":"2021-09-21T02:33:23Z","created_at":"2021-09-21T02:33:23Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923565131","body":"@Rich-Harris I'll try to make something reasonably small and easy to follow yet more realistic today.\r\n","updated_at":"2021-09-21T02:51:52Z","created_at":"2021-09-21T02:51:52Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"923658865","body":"@Rich-Harris @benmccann @arackaf \r\nIncluding the new and more fleshed out example here rather than on the other ticket to keep a single thread of discussion going.\r\nPlease see [this REPL](https://svelte.dev/repl/3d05137145f94a6cbef3ae0741650ce1?version=3.42.6)\r\nI included instructions and some hopefully helpful comments. \r\n\r\nI tried to simplify it to its core and still demo a real world scenario that broke for us once the store was modified to use optimistic updates (as I was describing above). We were staring at it and couldn't figure out why it suddenly wouldn't render correctly (until we refresh the page, lol). We thought that the store was broken or something elsewhere in the our code. \r\nI don't think there was any way for us to anticipate that the beautifully declarative reactive block would \"betray\" us ü•≤ \r\n\r\nThis isn't the only place we were bitten. I chose this because it was the most straightforward I could remember. Hopefully it helps.\r\n","updated_at":"2021-09-21T06:08:45Z","created_at":"2021-09-21T06:08:13Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"923714936","body":"> @Rich-Harris @benmccann @arackaf\r\n> Including the new and more fleshed out example here rather than on the other ticket to keep a single thread of discussion going.\r\n> Please see [this REPL](https://svelte.dev/repl/3d05137145f94a6cbef3ae0741650ce1?version=3.42.6)\r\n> I included instructions and some hopefully helpful comments.\r\n\r\nTo me this REPL still feels kind of backwards. I would've written it differently probably, avoiding the need for a rerun.\r\n\r\nStill, I think having a possibility to opt _in_ (not out) of reruns would be a good addition to the framework. We can't expect people to write code like we want them to at all times, and when they realize they coded themselves into a situation where they need that rerun, it should be available.\r\n\r\nRegarding syntax: I don't like `$: { deps } { doStuff() }`. Reasons:\r\n1. To me it reads like two distinct things because they are both closed in itself. To me, this doesn't read like \"the first one defines behavior of the second\"\r\n2. \"Prettier will print this in a less \"is connected\"-way, but that shouln't be a problem because we can update `prettier-plugin-svelte`\" -> not true, it would be a huge undertaking to change this print. `prettier-plugin-svelte` delegates formatting of script tags to the core Prettier formatters, so we either need to fork that (impossible to maintain), or inspect the resulting docs array (highly discouraged by the Prettier team, could break frequently if inner doc structure changes). The \"Prettier prints it in a less connected way\" also is a hint towards point 1.\r\n3. As @Conduitry noted, this could produce syntactically invalid code if people use break statements, which I think was one of Svelte's non-goals and which we should keep from doing as long as possible\r\n\r\nI actually really like @arxpoetica's solution to make this a inner label, although I would maybe name it to make it more clear:\r\n```javascript\r\n$: {\r\n  $rerunOn: [foo, bar];\r\n  // actual logic\r\n}\r\n```\r\nThis would also make it possible to add more labels for more fine-tuned behavior later on. For example this could mean \"these are my deps, but don't rerun when one of them change while calculating this\":\r\n```javascript\r\n$: {\r\n  $deps: [foo, bar];\r\n  // actual logic\r\n}\r\n```\r\nWhereas `$rerunOn` means \"rerun this block when any of the listed variables are invalidated, even if this block already ran\". There _could_ be situations where you want both `$deps` and `$rerunOn` to be defined, and that would be possible now. \r\n\r\nRegardless of how this discussion turns out, we _really_ should have an \"advanced docs\" section going into more details for things like this and for providing best practices.","updated_at":"2021-09-21T07:29:23Z","created_at":"2021-09-21T07:29:23Z","creator_user_login":"dummdidumm"}
{"number":6730,"comment_id":"923771659","body":"This discussion is also related to #4933 (and my comments https://github.com/sveltejs/svelte/issues/4933#issuecomment-917371729 and https://github.com/sveltejs/svelte/issues/4933#issuecomment-922506231) and I was about to suggest different approach to solve this and now I think this fits in here perfectly. I skimmed over most of the comments and I hate the suggested syntax a lot :smile: . None of them feel Svelte to me and like a step back.\r\n\r\nUltimately we are trying to mix reactive/declarative code with imperative code (with recursion being natural to imperative code). Stores have an imperative API but they can be used entirely reactive/declarative in a component, because the compiler abstracts all of this away. Stores can be used like any variable, which is amazing. _But_ if you ever run into a situation where you need more control (e.g. some sort of asymmetric bidirectional binding where you need more control than just a 1:1 mapping) you can always resort to `subscribe` and do things by hand. Also amazing. But you can't do that with regular variables. Why don't we close that gap and introduce a new compiler instruction that looks imperative and behaves as expected, without endless loop protection?\r\n\r\n```js\r\nexport let foo;\r\n\r\n// Not a breaking change because you import it, but you can alias it to $ to make it feel natural and aligned with reactivity.\r\n// Alternatively as a breaking change have a $() function. Or call the import $ right away but remove it in v4 because it doesn't need an import anylonger.\r\nimport {subscribe: $} from 'svelte';\r\nimport {myStore} from './stores.js';\r\n\r\nlet bar;\r\n\r\n$(foo, bar, $myStore, () => {\r\n  // Executed every time foo, bar or myStore change and once immediately, like a store or reactive block.\r\n  // If you touch foo or bar inside here it will re-run on your own risk of endless loops.\r\n  // It is compiled away and there is no unsubscibe.\r\n});\r\n```\r\n\r\nThis would also get rid of this pattern, that I hate a lot: `$: dep, fn(); // Call fn when dep changes`. It would make the interface to the imperative world look imperative.\r\n\r\nMy wish list:\r\n\r\n1. Introduce such an import/instruction as an interface to the imperative world with all of it's power, responsibility and recursion\r\n2. Keep the current behavior of reactive blocks (Excel spreadsheet semantics), make it even stricter and with better ux\r\n   1. Make the compiler not compile mutations of bound variables (#4933)\r\n   2. (Maybe add a lint rule that warns you that a reactive block will not re-run when you touch a dependency inside of it)","updated_at":"2021-09-21T08:53:50Z","created_at":"2021-09-21T08:50:13Z","creator_user_login":"Prinzhorn"}
{"number":6730,"comment_id":"923794242","body":"Making this a function is interesting, but it introduces the notion that it might be possible to nest `$` calls or move it out of the Svelte file, which I guess it wouldn't. This then is a \"React's rules of hooks\"-situation which I'd like to avoid.","updated_at":"2021-09-21T09:19:17Z","created_at":"2021-09-21T09:19:17Z","creator_user_login":"dummdidumm"}
{"number":6730,"comment_id":"923800756","body":"@dummdidumm you are right, but I think this is only a problem when it would be an import, right? The compiler can prevent nesting and outside of a Svelte component the import could just throw (inside the component the compiler won't actually leave a function there). If it wouldn't be an import (but a breaking change) then these problem wouldn't exist (just like you don't expect a `$:` label to be reactive outside of a component or `$store` to work outside of a component)-","updated_at":"2021-09-21T09:27:38Z","created_at":"2021-09-21T09:27:38Z","creator_user_login":"Prinzhorn"}
{"number":6730,"comment_id":"923943861","body":"@dummdidumm \r\n\r\n> To me this REPL still feels kind of backwards. I would've written it differently probably, avoiding the need for a rerun.\r\n\r\nRespectfully, that's an incredibly unhelpful comment. Code might be written for a number of reasons, especially in a REPL reproducing a bug encountered in production. Isaac seems like he's on a fairly decent team, writing some ambitious software. It sounds like some real-world code encountered multiple problems with Svelte's reactivity, and his REPL reproduces that in a simpler environment. Of course looking at the repl in isolation might give the impression that there's some needless complexity there. ","updated_at":"2021-09-21T12:35:55Z","created_at":"2021-09-21T12:35:55Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"923950936","body":"I'm sorry that this came of as rude, I wanted to express my feeling that many of these problem categories can be avoided by writing code differently. That said, I appreciate that there's not one true way to writing code and real world code is far more nuanced than these simple examples, which is why I think there's value in providing more possibilities to the `$` statements.","updated_at":"2021-09-21T12:44:20Z","created_at":"2021-09-21T12:44:20Z","creator_user_login":"dummdidumm"}
{"number":6730,"comment_id":"923955021","body":"@dummdidumm to be clear, I don't think it was rude, just unhelpful. Frameworks should \"just work,\" especially when it comes to reactivity. Pinpointing one place / manner in which they don't work is incredibly helpful in pinpointing bugs in said framework. There's of course some *other* way the code could have been written, but that shouldn't matter; the framework should work either way. ","updated_at":"2021-09-21T12:49:14Z","created_at":"2021-09-21T12:49:14Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924109174","body":"@isaacHagoel Thank you, this repro is very helpful. I whittled it down to the bare essentials [here](https://svelte.dev/repl/66ad4ed4e03c4dd7a7e9ffdf1401dc1d?version=3.42.6). It's true that unlike Adam's repro this couldn't be fixed by reordering reactive statements, since there's only one.\r\n\r\nIn this case I could imagine us printing a console warning like this:\r\n\r\n```\r\nThe reactive statement beginning on line 7...\r\n\r\n  $: if ($state.items) {\r\n\r\n...indirectly assigns to its own dependencies. This will NOT cause the statement to be re-executed, which\r\nmay cause unexpected behaviour. See https://svelte.dev/blah for a detailed explanation of possible solutions.\r\n```\r\n\r\nI'm absolutely sympathetic to the view that it should 'just work'. Viewed from one's individual perspective, of _course_ things should just work! But the semantics that cause one person's code to just work can make another person's code fail ‚Äî take the `cleanup` example above, or [something like this](https://svelte.dev/repl/64113960752d4a7eb302497273ac5627?version=3.42.6), in which re-running statements until they 'settle' would cause the temperature to always be reported as getting 'cooler':\r\n\r\n```svelte\r\n<script>\r\n  let temperature = 50;\r\n  let previous;\r\n  \r\n  let direction = null;\r\n  \r\n  $: {\r\n    if (previous !== undefined) {\r\n      direction = temperature > previous\r\n        ? 'warmer'\r\n        : 'cooler';\r\n    }\r\n    \r\n    previous = temperature;\r\n  }\r\n</script>\r\n\r\n<input type=\"range\" bind:value={temperature}>\r\n\r\n{#if direction}\r\n  <p>the temperature is getting {direction}</p>\r\n{/if}\r\n```\r\n\r\nSo a framework has to take a position on semantics that may cause some code to _not_ just work. (Before Adam chimes in with 'but React', if you truly want React's semantics in Svelte then [go nuts](https://svelte.dev/repl/0c9cd8c29c5043eea89bd9c6eb4f279a?version=3.42.6). To anticipate another response: yes, we could make these things configurable, but that has compounding costs that really are best avoided.) And this is where I have to offer some perspective that informs my thinking on this issue, and it may seem tone-deaf or paternalistic or annoying, but I think it will help elucidate the different positions in this thread:\r\n\r\n**The purpose of a framework is to guide you towards the best outcomes.**\r\n\r\nThat's because we serve users first and developers second. Viewed through this lens, the problem here isn't that Svelte isn't doing what you expect, it's that Svelte isn't offering useful guidance. That's why I'm advocating for warnings rather than semantic changes.\r\n\r\nNow, a reasonable response might be 'screw you, my code is perfectly fine'. I would understand that! But let's consider the relevant part of the simplified repro I linked above:\r\n\r\n```js\r\nlet items = [];\r\n\r\n$: if ($state.items) {\r\n  const was_ok = add_ids();\r\n  if (was_ok) items = $state.items;\r\n}\r\n\r\nfunction add_ids() {\r\n  const is_ok = !$state.items.find(item => !item.id);\r\n\r\n  if (!is_ok) {\r\n    $state.items = $state.items.map((item, i) => (item.id ? item : {...item, id: `item_${i + 1}`}));\r\n  }\r\n\r\n  return is_ok;\r\n}\r\n```\r\n\r\nIf the block _did_ execute repeatedly, then we'd be running that `.find(...)` twice (the second time, it has to search the entire array) when once would do. Maybe that's fine _in this case_ (it's not hot code, the array will be small enough, it's a cheap operation, etc) but in the general case it's obviously suboptimal. [Here's a fixed version](https://svelte.dev/repl/a86ff56b03fa42748e4c9e8f02383467?version=3.42.6):\r\n\r\n```js\r\nlet items;\r\n\t\r\n$: if (!items || $state.items.find(item => !item.id)) {\r\n  $state.items = $state.items.map((item, i) => (item.id ? item : {...item, id: `item_${i + 1}`}));\r\n  items = $state.items;\r\n}\r\n```\r\n\r\nPerhaps this feels like cheating since I'm operating on a simplified repro, so let's take the original version:\r\n\r\n```js\r\n$: if ($state.items) {\r\n  // THIS IS WHERE THE ISSUE IS. WITHOUT THE TICK THE DISPLAY GROUPS WON'T BE GENERATED, UNCOMMENT LINES 12 and 18 TO \"FIX\" \r\n  //tick().then(() => {\r\n    const wasStateKosher = makeStateKosherIfNeeded();\r\n    if (wasStateKosher) {\r\n      // if the ids are not there our keyed each block would fail so we want to wait for the \"next pass\"\r\n      buildDisplayGroups();\r\n    }\r\n  //});  \r\n}\r\n\r\n function makeStateKosherIfNeeded() {\r\n  const isStateKosher = !$state.items.find(item => !item.id);\r\n  if (!isStateKosher) {\r\n    const itemsWithIds = $state.items.map(item => (item.id ? item : {...item, id: `item_${Math.round(Math.random() * 1000000)}`}));\r\n    $state.items = itemsWithIds;\r\n  }\r\n  return isStateKosher;\r\n}\r\nfunction buildDisplayGroups() {\r\n  displayGroups = $state.groups.map(g => ({...g, items: $state.items.filter(i => i.groupId === g.id)}));\r\n}\r\n```\r\n\r\nAgain, if this block ran repeatedly the `.find(...)` would happen more times than needed, but there's actually a much worse problem: `buildDisplayGroups` runs whenever things are kosher, rather than whenever they _become_ kosher. So a `$state.foo = 42` in some distant part of the app would cause `buildDisplayGroups` to re-run even though `displayGroups` is totally fine. Probably doesn't matter in this case, but again, in the _general_ case that's an undesirable outcome.\r\n\r\n[Fixed version](https://svelte.dev/repl/83bff2b0cfbe4a158ee86aac2efb657e?version=3.42.6):\r\n\r\n```js\r\nlet displayGroups;\r\n\t\r\n$: if (!displayGroups || $state.items.find(item => !item.id)) {\r\n  $state.items = $state.items.map(item => (item.id ? item : {...item, id: `item_${Math.round(Math.random() * 1000000)}`}));\r\n  displayGroups = $state.groups.map(g => ({...g, items: $state.items.filter(i => i.groupId === g.id)}));\r\n}\r\n```\r\n\r\n(I should note here that if we implemented the console warnings we've been talking about, they would happen for this code as much as for the previous code, which perhaps we wouldn't want. My thinking on all this stuff is evolving as we discuss it, please don't take any of what I'm saying as a final word.)\r\n\r\nI hope this doesn't come across as 'just write different code', which is unhelpful advice. (I also realise that fixing a repro isn't the same as fixing a real app, though I _do_ think that the principles shown above are generally applicable.) Rather, I'm trying to illustrate that writing code on Svelte's terms will yield better outcomes than trying to bend Svelte to the terms of each of its users. In that way it's arguably a bit like TypeScript ‚Äî I often have the experience (and see others have the experience) of getting mad at TypeScript because it doesn't like the JavaScript that I'm adding types to, but when I eventually capitulate and rewrite the code on TypeScript's terms, it's almost invariably better than what I had before. The big difference is that TypeScript is very helpful at guiding you towards that outcome; Svelte is not.","updated_at":"2021-09-21T16:18:35Z","created_at":"2021-09-21T15:38:06Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924144061","body":"@Rich-Harris It's unfortunate I've become the \"react guy\" here - sadly that's just the only other framework I know. I plan on checking our Vue here soon so maybe my bubble can expand :D \r\n\r\nI think it's perfectly valid for there to be a \"Svelte way\" to write code. There's a way React wants you to code (damnit I brought up React again), as you noted there's a way TypeScript wants you to code, etc. The relevant question though is what happens when you *don't*. \r\n\r\nWith React you *might, sometimes* have noticeably slow code (extremely rare even in Dev mode). In TypeScript you'll get some red squigglies that you can silence with an `any`. In either case things will continue to work, just sub-optimally. With Svelte, things simply stop working, relying on the developer (of any skill level) to write extremely clever code, like you just did, above. Isaac seems no slouch, and I think it's telling that even he couldn't figure this out.\r\n\r\nFrom my reading of this thread, it seems like there's an app complexity threshold above which Svelte's reactivity model breaks down. I don't know exactly where that threshold is, or even how to describe it. I barely brushed up against it with my small Booklist app, and Isaac seems to have run head-first into it. I think it would be extremely helpful for Svelte to try to define where this threshold is. It's just not feasible for a general team of software developers to be expected to learn the kinds of tricks you employed above to achieve functionality. Most dev teams usually have 1 or 2 deep framework SME's who are there to tune hot paths in this manner to improve perf, not get features to just work.","updated_at":"2021-09-21T16:18:56Z","created_at":"2021-09-21T16:18:56Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924147909","body":"I don't know how many times I can reiterate: I am proposing a solution to the problem you've described, and the solution is to help developers understand why the code isn't behaving as they expect.\r\n\r\nSvelte's equivalent of `any` (in the context of reactive statements) is `tick().then(work)`.","updated_at":"2021-09-21T16:23:03Z","created_at":"2021-09-21T16:23:03Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924153818","body":"@Rich-Harris I understand well that you think these warnings will solve this problem; I simply disagree. My reading of the original sister thread to this one https://github.com/sveltejs/svelte/issues/6732 leaves me extremely skeptical that a warning message, ie \"wrap this code in tick()\" will solves these problems at scale, for these types of apps. *Especially if* the offending line is deep within some shared code the develop who's dealing with this didn't even write.\r\n\r\n","updated_at":"2021-09-21T16:29:57Z","created_at":"2021-09-21T16:29:57Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924168994","body":"@Rich-Harris to piggyback, I still think Svelte is amazing and an incredible achievement. **If** there's a category of apps it's not suitable for, that's **ok**. Svelte doesn't need to be the right choice for every project. Being up front about that benefits literally everyone. ","updated_at":"2021-09-21T16:48:47Z","created_at":"2021-09-21T16:48:47Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924185720","body":"Adam, again: this is insulting. Svelte can handle complex apps just fine: the reactivity model doesn't 'break down' above some 'complexity threshold'; we've yet to see a repro that shows an _actual flaw_ in the reactivity model beyond 'I didn't fully grok how it works'.\r\n\r\nIn the past I've shown this code to React developers and asked them why it doesn't work:\r\n\r\n```js\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCount(count + 1);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, []);\r\n\r\n  return <p>count: {count}</p>;\r\n}\r\n```\r\n\r\nYou already know the answer ‚Äî it's because the closure gets stale. But anecdotally, _fewer than one in twenty React developers_ see that, even after they've been prompted. Do we consider that a flaw in React's reactivity model? No, we don't ‚Äî we add a lint rule that, in development, warns you that you need to include `count` in the dependency array. (Of course at that point you'd be better off with a `setTimeout` than a `setInterval`, but that's irrelevant for now.)\r\n\r\nTwo observations:\r\n\r\n* You need to understand how the tool works. We might say that closures are confusing, and you need to learn how to use them correctly, but we don't say that React isn't the right choice for apps involving counters\r\n* Dev mode warnings work\r\n\r\nTo apply it to your case: if you, having been presented with this console warning (or an improved version)...\r\n\r\n```\r\nThe reactive declaration on line 15...\r\n\r\n  $: ({ loaded } = obj);\r\n\r\n...references `obj`, which is assigned indirectly by line 19:\r\n\r\n  $: if (foo) go();\r\n\r\nIf the first statement should run after the second statement, you will need to swap them, as Svelte cannot \r\norder them topologically at compile time. See https://svelte.dev/blah for an explanation.\r\n```\r\n\r\n...still weren't able to get the code to work as you expect, that's not on the framework, that's on you.","updated_at":"2021-09-21T17:08:24Z","created_at":"2021-09-21T17:08:24Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924192414","body":"@Rich-Harris now point that warning to a line in a shared library, which itself is buried inside of a shared library, which itself is buried inside of a shared library I pulled down from npm. And assume I'm not a senior engineer. \r\n\r\nThat's a routine occurrence for large apps. \r\n\r\nThe React lint rule proves the point. This classic (if rare) example is a pain in the ass, but it's solvable by anyone, easily, once you know that one rule.  Maybe a well placed warning will solve these problems for Isaac's team, and put them on a productive happy path. I'm skeptical but I can't rule that out. Only time will tell, but I do think you're minimizing the severity of this problem quite a bit. Re-read his issue's original text - maybe I'm the one misreading, but it seems like his team spent a LOT of time and cycles fighting this, and again it's far from assured that some console warnings would make this better. ","updated_at":"2021-09-21T17:16:55Z","created_at":"2021-09-21T17:16:55Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924203730","body":"Are bugs in Svelte libraries somehow qualitatively different from bugs in React libraries? This is a truly bizarre line of reasoning!","updated_at":"2021-09-21T17:30:42Z","created_at":"2021-09-21T17:30:42Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924216637","body":"Rich. Deep breath. This isn't a bug at this point. From what I've read from you, this is **expected behavior** from Svelte. From what I'm hearing, it's entirely possible that library code **might**, need to be wrapped in tick(), depending on how it's **used** by the developer importing the lib. \r\n\r\nThat seems like a big deal, and hard for library authors to predict. I could be wrong, time will tell. Again, Isaac is the one with the relevant experience here. It sounds like he's the one who's been pushing Svelte to its absolutely limit. I'll be eager to hear if he thinks some console warnings will solve all of these problems - I hope they will! ","updated_at":"2021-09-21T17:46:23Z","created_at":"2021-09-21T17:46:23Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924223774","body":"That's why I said 'bugs in Svelte libraries' rather than 'bugs in Svelte'.","updated_at":"2021-09-21T17:55:21Z","created_at":"2021-09-21T17:55:21Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924228195","body":"What I'm trying to work through though is whether they would be bugs in Svelte libraries at all. From what I'm seeing, sometimes state updates need to be wrapped in tick(), and sometimes they don't, depending on what code ran previously. \r\n\r\nIs it not possible that a library's code will *sometimes* need to wrap in tick, and sometimes not? Should it be a requirement for all libraries to always use tick() when updating state?  ","updated_at":"2021-09-21T18:01:06Z","created_at":"2021-09-21T18:01:06Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924231490","body":"No, not at all. `tick` is an absolute last resort.","updated_at":"2021-09-21T18:05:25Z","created_at":"2021-09-21T18:05:25Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924234001","body":"@Rich-Harris is it possible that last resort tick() might someday be necessary inside of an external library, **depending on how it's used**? That's only the most acute thing I'd worry about, here, but a good thing to nail down either way. ","updated_at":"2021-09-21T18:08:41Z","created_at":"2021-09-21T18:08:41Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924238898","body":"You're asking me to entertain hypotheticals upon hypotheticals! Forget about `tick` ‚Äî if you're using it inside a reactive statement it's almost certainly because your code should be refactored. It's vanishingly rare to have a legitimate need for it, and under no circumstances should you add it 'defensively'.","updated_at":"2021-09-21T18:14:59Z","created_at":"2021-09-21T18:14:59Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"924247339","body":"Look this is starting to go in circles, and you're starting to get defensive. I don't think a reactivity model that occasionally, based on prior circumstances requires a re-ordering of code, is scalable to truly large apps. The problems described in https://github.com/sveltejs/svelte/issues/6732 make me feel more strongly about that. I could be wrong. I respect that you disagree.\r\n\r\nI'm skeptical dev warnings will solve this. I also wonder how this will interact with dev libraries, if Svelte were to mature and get to the point where libraries like Apollo, Relay, Urql, etc were to exist. I don't know. I hope it all works out, but I don't think it's an inherently bad or insulting thing to express skepticism.\r\n\r\nApologies to Isaac for blowing up this thread. Maybe he'll roll up and say \"of course some dev warnings would have made all this fine\" :)","updated_at":"2021-09-21T18:32:38Z","created_at":"2021-09-21T18:24:33Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"924447481","body":"@Rich-Harris @arackaf \r\nFirst of all thank you.\r\nHere is a summary of my current thoughts:\r\nReactive blocks seem too good to be true and maybe they are. The \"cooler\" example (although this code looks very contrived to me given what it is trying to achieve, it doesn't matter) as well as Rich's suggested solutions to the example I have provided make me realise that. Splitting my example into two reactive blocks (one would run the find in it's condition) but putting them in the wrong order also doesn't work (like in Adam's original example).\r\n\r\nIf the rules were clear and consistent (and/or the control mechanisms could be made explicit) then I would have no issue, even if the rules weren't to my liking, but currently they don't allow one to build a coherent mental model of how reactivity would behave, even if you are an expert, without always being on the guard, worrying and testing.\r\nThe fact that #4933 and [this](https://github.com/sveltejs/rfcs/pull/40) are from last year and were basically ignored (I hope I am not being unfair) concerns me a lot. They show many other inconsistencies that contribute to why it is so hard to make a solid mental model.\r\n\r\nAs much as I love and enjoy Svelte, I do think that this is of a non-starter for new complex projects, if things stay as they are, not only for me but for any technical decision maker who would realise that these issues exist. \r\nBeyond some threshold of complexity (that is not that high) you need control and consistency maybe more than anything else. \r\nI am willing to invest resources from my team (and my own time) in helping drive this to a better place if that helps, as I have stated before, because I truely believe in Svelte and do not want to go back to React. \r\n_________________\r\nA side: I think there is a big difference between implicit dependencies in reactive blocks vs. dependencies that are stated explicitly at the top, usually using a gating $:if statement (but could also be a one line ternary assignment etc.).  We always use the later as implicit dependencies are very hard to reason about (you need to read the whole block of code) and they also stop working if the block gets big and you decide to extract some of it to a function (very common). I would be totally fine with a solution that means that I cannot use implicit dependencies at all. Not sure it helps.\r\n\r\n\r\n\r\n","updated_at":"2021-09-21T22:56:06Z","created_at":"2021-09-21T22:56:06Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"924468367","body":"Obviously I agree with Isaac's thoughts here. I'd only add that I, too, am willing to invest some of my own time toward a solution here, where \"solution\" is defined as some mechanism to make reactive blocks behave consistently and reliably, without ever needing to think about ordering. \r\n\r\nIf that means explicit dependency lists which opt devs into automatic re-runs, cool. If that means Rich's incredibly ambitious idea above, where reactive blocks automatically re-run as needed (and ignore situations where they trigger updates of their own dependencies from within the block) even better.\r\n\r\nEither way I still love Svelte, and I'd still use it for any side project I start. I do agree there is a complexity threshold above which these problems make it a non-starter, but that wouldn't stop me from using it in my own projects one bit. ","updated_at":"2021-09-21T23:47:56Z","created_at":"2021-09-21T23:47:56Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926427699","body":"This discussion has reached 80 comments (81 now counting this one), and I'm a bit worried that @dummdidumm's excellent suggestion in https://github.com/sveltejs/svelte/issues/6730#issuecomment-923714936 will go unnoticed because people will skim the comments rather than reading something that lengthy. @dummdidumm, would you like to create a new issue to track that feature suggestion? I don't know that it needs to be an RFC yet, though of course the Svelte maintainers are ultimately the ones to make that call.","updated_at":"2021-09-24T08:01:12Z","created_at":"2021-09-24T08:01:12Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"926545665","body":"Alright, so looks like a potential path forward for us (== my team and others facing similar issues) would be to **give up reactive statements altogether** and replace them with \"effects\" that use derived stores under the hood. Credits to @rmunn for the idea.\r\nFirst, some proof of concept (look at `effect.js`):\r\n- [Simple example](https://svelte.dev/repl/8b9cb147205f4f4bb29045ef2e99cd3c?version=3.43.0)\r\n- [My broken REPL from the sister issue not broken anymore](https://svelte.dev/repl/baccba5b5e4049d6a167fa9a3c9cad7f?version=3.42.6)\r\n- [My \"production like\" example not broken anymore](https://svelte.dev/repl/65097c259ea64434964b50fd793ab130?version=3.42.6)\r\n- [Adam's REPL not broken anymore](https://svelte.dev/repl/8f2d7f32c9a24bad9f8b490a8e73d5fb?version=3.42.5)\r\n\r\nThis solutions has some pros and cons over reactive blocks:\r\n**Cons:**\r\n- Anything that is a dependency for an effect has to be a store. This most likely means more stores and the need to remember to use the $ prefix for var names in the right places and not use it in other places. In my real world example the dependency was already a store anyway so maybe it won't be too bad.\r\n- No clue how it would affect performance but I guess it will have a cost\r\n- It is pure abuse of derived stores, not using them as intended (throwing away the value, fake subscription to make it start...).\r\n**Pros:**\r\n- It can be a library, doesn't require any changes in Svelte while still proving a solution for the community\r\n- It behaves the way I need reactivity to behave as far as I can tell (need to test in more scenarios). \r\n- As a bonus, everything is synchronous - meaning when an update happen the effects seem to run before the code proceeds to the next line (which also have the up to date values). \r\n- It can include all sorts of interesting options: being able deep compare object, memoize results, do cleanups and whatnot. In other words, it (potentially) gives us (the devs) much more control and the ability to iterate on it cheaply.\r\n- All the dependencies have to be explicit. There is no magic.\r\nCurious to hear your opinions and insights.\r\n\r\ncc @arackaf ","updated_at":"2021-09-24T11:18:36Z","created_at":"2021-09-24T11:15:54Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"926561358","body":"Notice that I edited the first REPL link above (was the wrong link) potentially after you got the email notification (with the wrong link). All the links above should be correct now.  ","updated_at":"2021-09-24T11:45:17Z","created_at":"2021-09-24T11:45:17Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"926595272","body":"@isaacHagoel This seems like a solid middleground to unblock you and your team. The main downside, to me, is that it requires all reactive dependencies to be stores, which might not be a feasible restriction for production apps. I doubt the perf concerns matter one bit - this is likely still far, far faster than the React equivalent‚Äîexcept it'll work reliably. \r\n\r\nI'd prefer any of the syntactic forms of manual dependency tracking @Rich-Harris was talking about earlier in the thread, assuming it came with arbitrary re-runs. I continue to believe that manually inspecting one's code, and changing the order of ostensibly time-independent reactive side effects to get things to work is simply not feasible for application development at scale (as you found first hand).\r\n\r\nI'm still willing to help land some form of this if it's desired in core.","updated_at":"2021-09-24T12:43:45Z","created_at":"2021-09-24T12:43:45Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926630490","body":"Just want to drop a note to let you know that we haven't forgotten this issue, we've been discussing it in the team Discord but won't have a concrete plan of action immediately.\r\n\r\nEven if they wouldn't have prevented @isaacHagoel's team from eventually running into issues, I definitely do think that console warnings would go a long way towards clarifying the mental model and guiding developers towards the best outcomes, so I consider that low-hanging fruit.\r\n\r\nI expect there are also some straightforward bugs that we could fix. For example if you look at [this repro](https://svelte.dev/repl/80a3e35ee61f42c0930b0a6d3f7115b1?version=3.42.5) you'll notice that removing the `export` from `export let foo` makes things 'work', because the update block goes from this...\r\n\r\n```js\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*obj*/ 4) {\r\n\t\t\t// (1) runs first, because it doesn't _look_ like it depends on (2)\r\n\t\t\t$: $$invalidate(0, { loaded } = obj, loaded);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*foo*/ 2) {\r\n\t\t\t// (2) runs second, invalidates obj, but Svelte doesn't run\r\n\t\t\t// reactive statements more than once per tick\r\n\t\t\t$: if (foo) go();\r\n\t\t}\r\n\t};\r\n```\r\n\r\n...to this:\r\n\r\n```js\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*obj*/ 2) {\r\n\t\t\t// (1) runs first, because it doesn't _look_ like it depends on (2)\r\n\t\t\t$: $$invalidate(0, { loaded } = obj, loaded);\r\n\t\t}\r\n\t};\r\n\r\n\t$: if (foo) go();\r\n```\r\n\r\nThat's because the compiler recognises that the value of `foo` is now fixed, so there's never a reason to re-run that statement. But because `go()` has a hidden assignment, hoisting it out of the update block and running it at initialisation accidentally 'fixes' the order. What _should_ happen is that the statement should run after the first update. (This does make the compiled code slightly less efficient, but we could claw back that efficiency by only applying that logic to statements with function calls.)\r\n\r\nOne thing I should point out: `effect` risks memory leaks. You're subscribing to the derived store but never unsubscribing. I highly recommend combining store subscriptions with lifecycle functions if you go down that road: https://svelte.dev/repl/c4ff925e552c4a7f88b88db702bcf2d0?version=3.43.0","updated_at":"2021-09-24T13:36:15Z","created_at":"2021-09-24T13:36:15Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"926636556","body":"@Rich-Harris hahaha - someone in the other thread *just* pointed out the risk to memory leaks from effect :) \r\n\r\nI like console warnings, and I think it might be a path toward a sort of best of all worlds. From my (simplistic, uninformed) view, if you know enough to issue a console warning, you probably (I think?) know enough to just re-run the block, right?\r\n\r\nMaybe in a perfect world the console warning could say \"reactive block at line X was just re-run because .... If you move that block up before the reactive block on line Y Svelte won't have to re-run it, and your perf will improve\" ","updated_at":"2021-09-24T13:44:54Z","created_at":"2021-09-24T13:44:54Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926645613","body":"> you probably (I think?) know enough to just re-run the block, right?\r\n\r\nKnowing the path and walking the path are different. Tracking invalidations is one thing (relatively straightforward, we just need to blank out the `dirty` bitmask before running each statement, and inspect it afterwards), but re-running statements is a different kettle of fish.\r\n\r\nAll of this stuff adds overhead. A warning by itself is a dev-mode-only thing; we can ditch that tracking for production builds. But if we also change the behaviour then _every single production Svelte app that uses reactive statements_ becomes marginally less efficient, just so that developers are freed from needing to fully understand the reactivity model. I still don't view that as a good tradeoff.\r\n\r\n","updated_at":"2021-09-24T13:56:07Z","created_at":"2021-09-24T13:56:07Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"926656063","body":"I think \"freed from needing to fully understand the reactivity model\" isn't quite right. Isaac's comment from before is worth repeating in part \r\n\r\n> but currently [the rules] don't allow one to build a coherent mental model of how reactivity would behave, even if you are an expert, without always being on the guard, worrying and testing\r\n\r\n\"Understanding\" the reactive model isn't the problem. It's getting it to *behave* in a *consistent* way.  Currently the reactivity model allows for weird actions at a distance. Add a reactive block here, and another one stops working, for ostensibly baffling reasons. A warning might help, usually, but I still think for complex apps that warning would be insufficient (third party libraries like Apollo, etc could easily pollute those line numbers making it difficult for the app developer to know what the hell to do).\r\n\r\nI also think the perf risks are low. This problem happens rarely. Svelte is already massively faster than React, and React is already more than fast enough to be incredibly popular, and effective at building profitable software. I'd be shocked if some additional tracking bits affected this in any meaningful way, and would (imo) be a pretty good tradeoff to gain consistency in how the reactivity works. \r\n\r\nTrading a small amount of perf for better consistency is a good tradeoff. ","updated_at":"2021-09-24T14:09:31Z","created_at":"2021-09-24T14:09:31Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926662896","body":"> It's getting it to _behave_ in a _consistent_ way\r\n\r\nWhich is why I addressed the bugs that cause inconsistencies\r\n\r\n> I also think the perf risks are low. This problem happens rarely. Svelte is already massively faster than React\r\n\r\nOne of the reasons for that is that the Svelte team is disciplined about design questions just like this one. Each tradeoff seems fine by itself, at the time, but these effects accumulate. We're talking about penalizing every single user of Svelte apps in order to duct tape over a problem that a tiny minority of Svelte developers have encountered. I know it seems like a huge thing _to you_, but we have a larger constituency to take care of.\r\n\r\nAnyway, we're back making the same points in a loop, so I'm going to bow out of this thread.","updated_at":"2021-09-24T14:18:13Z","created_at":"2021-09-24T14:18:13Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"926672797","body":"> a problem that a tiny minority of Svelte developers have encountered\r\n\r\nIt's worth noting that this is a tiny minority of Svelte users **right now**. If Svelte continues to gain marketshare, and get used more often in the larger, more complex apps that React is currently the de facto choice for, this will come up more and more.\r\n\r\nThis is exactly why I asked if Svelte should not be considered for apps like that. If Svelte is not designed for those sorts of complex apps, then that's fine. But if Svelte is in theory designed to handle the same serious apps that React handles today, it is absolutely imperative that it behave consistently. This is what Isaac was trying to get across when he said \"As much as I love and enjoy Svelte, I do think that this is of a non-starter for new complex projects.\" I agree with that, and I imagine most engineers who've maintained these sorts of apps at scale would, too.","updated_at":"2021-09-24T14:28:46Z","created_at":"2021-09-24T14:28:46Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926690476","body":"Just to leave on a positive note, I only care because I love Svelte. A lot. I'd love to see it get to a place where it could be used on complex apps at scale. That's why I'm pushing for this sort of change. \r\n\r\nIf that's not what Svelte is striving for, then I'll keep loving Svelte for smaller, personal projects. \r\n\r\nReact is a pain but getting paid üíµ üí¥ üí∂ üí∑üí∞ to use it has a nice way of numbing that pain üòÇ","updated_at":"2021-09-24T15:04:59Z","created_at":"2021-09-24T14:52:32Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926820939","body":"Going to share some current thinking. I think what this all boils down to is the fact that Svelte conflates two things, which are actually quite different:\r\n\r\n* reactive _declarations_, which _calculate something_ and\r\n* reactive _statements_, which _do something_\r\n\r\nIn [CommandQuerySeparation](https://martinfowler.com/bliki/CommandQuerySeparation.html) Martin Fowler writes:\r\n\r\n> It would be nice if the language itself would support this notion\r\n\r\nI think we can alleviate a lot of confusion by separating the two things at the level of syntax. And I think we can even do it in a backwards-compatible way, that would provide an escape hatch for stuff that you really do want to run until it 'settles' while still steering people towards better outcomes:\r\n\r\n```js\r\n$: a = b + c;\r\n$: d = a * 2;\r\n\r\nrun: if (a > 10) {\r\n  console.log('resetting');\r\n  b = c = 0;\r\n}\r\n\r\nrun: console.log({ a, b, c, d });\r\n```\r\n\r\nHere, `$:` retains its existing meaning. (In Svelte 4 we could arguably make a breaking change by insisting that it always be followed by an assignment, but there are some scenarios where that would be annoying.) As long as you don't violate command-query separation, things will work exactly as you expect.\r\n\r\n`run:`, on the other hand, would happen _after_ those updates (even if `$:` and `run:` are interleaved in your source code). It would loosely be equivalent to this:\r\n\r\n```js\r\n$: a = b + c;\r\n$: d = a * 2;\r\n\r\n$: tick().then(() => {\r\n  if (a > 10) {\r\n    console.log('resetting');\r\n    b = c = 0;\r\n  }\r\n});\r\n\r\n$: tick().then(() => {\r\n  console.log({ a, b, c, d });\r\n});\r\n```\r\n\r\nIn the [original repro](https://svelte.dev/repl/57dbee8266d840d09611daebee226b91?version=3.42.5), the only thing that would change is this:\r\n\r\n```diff\r\n-$: sync({ loading: true, data: null, loaded: false, k: currentNextPageKey });\r\n+run: sync({ loading: true, data: null, loaded: false, k: currentNextPageKey });\r\n```\r\n\r\nAll other `$:` lines are _calculate something_ statements and would therefore be unchanged.\r\n\r\nSimilarly, @isaacHagoel's [repro](https://svelte.dev/repl/3d05137145f94a6cbef3ae0741650ce1?version=3.42.6) could be updated thusly:\r\n\r\n```diff\r\n-$: if ($state.items) {\r\n+run: if ($state.items) {\r\n```\r\n\r\nI haven't considered the full details of this proposal yet, but it seems like something that would give developers the ability to write code that needs to run in a loop without compromising on performance for everyone else.","updated_at":"2021-09-24T18:00:27Z","created_at":"2021-09-24T18:00:27Z","creator_user_login":"Rich-Harris"}
{"number":6730,"comment_id":"926824331","body":"Can't we just add:\r\n\r\n`$: tick().then(() =>¬†{});`\r\n\r\nexample to docs? I think having two so similiar features would be confusing when to use which one. Mainly for begginers.","updated_at":"2021-09-24T18:07:10Z","created_at":"2021-09-24T18:05:51Z","creator_user_login":"Mlocik97"}
{"number":6730,"comment_id":"926825075","body":"@Rich-Harris that's fucking brilliant. I love it. Solves all of the problems here. It's *exactly* the sort of feature / escape hatch a framework should have. \r\n\r\nI'm sorry this took such a painful thread to get here, but I'm incredibly excited to see this thinking :) \r\n\r\nBike shed, should it maybe be\r\n\r\n`$run: if (a > 10) {`\r\n\r\nto be more consistent???\r\n\r\nOr, since this seems to be sugar for \r\n\r\n```js\r\n$: tick().then(() => { \r\n  code \r\n});\r\n```\r\n\r\nmaybe\r\n\r\n```js\r\n$tick: { \r\n  code \r\n}\r\n```\r\n\r\nmight be another option. \r\n\r\nReally though I don't care. Seriously stoked to see this being considered. ","updated_at":"2021-09-24T21:20:02Z","created_at":"2021-09-24T18:06:58Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926826735","body":"@Mlocik97 it's one more feature for beginners to learn, eventually, maybe (you can get **extremely** far without it), but it unlocks a lot, and simplifies a lot. ","updated_at":"2021-09-24T18:09:40Z","created_at":"2021-09-24T18:09:40Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926828077","body":"@Rich-Harris I *think* your example works even today, without `:run`. Would I be correct in assuming (hopefully) that it would still work if you changed it to this:\r\n\r\n```js\r\n$: a = b + c;\r\n$: d = a * 2;\r\n\r\nconst reset = () => b = c = 0;\r\n\r\nrun: if (a > 10) {\r\n  console.log('resetting');\r\n  reset();\r\n}\r\n\r\nrun: console.log({ a, b, c, d });\r\n```","updated_at":"2021-09-24T18:11:42Z","created_at":"2021-09-24T18:11:42Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926829270","body":"@Mlocik97 on the one hand that's funny, but on the other hand ewwwwww ","updated_at":"2021-09-24T19:08:35Z","created_at":"2021-09-24T18:13:33Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"926833384","body":"> it's one more feature for beginners to learn\r\n\r\nI agree, but those two features would in a lot of case produce same result, and that would make junior devs (begginers) confused. I can already feel, how they would ask about difference between these two five times every day on Discord.","updated_at":"2021-09-24T18:20:33Z","created_at":"2021-09-24T18:20:33Z","creator_user_login":"Mlocik97"}
{"number":6730,"comment_id":"926844435","body":"@Mlocik97 I'm sure a good section in the docs would make that clear. Ie, for super advanced use cases, that you probably won't even need, ever, etc etc etc. I don't think good features should be left off because some juniors might have a bit of confusion around it. \r\n\r\nEDIT - actually, it looks like Rich is more or less saying \r\n\r\nrun: would be a replacement for $: { \r\n\r\nblocks, which would leave $: mostly for assignment. Seems he's lightly considering having run: be a replacement for $: {\r\n\r\nFine with me either way - I suspect that'd be a tough breaking change to make happen. Really I'm just ecstatic to see features being contemplated that would add the sort of consistency Isaac and myself have been talking about.","updated_at":"2021-09-24T18:44:56Z","created_at":"2021-09-24T18:39:57Z","creator_user_login":"arackaf"}
{"number":6730,"comment_id":"927006931","body":"@Rich-Harris @Mlocik97 @arackaf  \r\nmmm.. I spent some hours playing with `$: tick().then(() =>` vs. `watch` (derived stores) vs. Rich's `useEffect` and I think I am starting to go a bit insane üò∫ \r\n**Point 1:**\r\nWhen I try Rich's example code (for `run`) with these 3 mechanisms, here is what I get: \r\n1. `$: tick().then(() =>` doesn't compile, **complains about a cyclical dependency**. See [here](https://svelte.dev/repl/4526eb5156ef462aa186e4e24b2f7475?version=3.43.0)\r\n2. Rich's `useEffect` doesn't console the final result, so it's **not running all the way through**. Changing the order of the blocks doesn't seem to fix it. See [here](https://svelte.dev/repl/02d62e67f0a648bfbc9b7619c4117236?version=3.43.0). Changing the order of the blocks changes the output so no good.\r\n3. `watch` **prints the correct output** but changing the order of the block has a pretty drastic effect on the amount of printouts. This is because every state change causes it to start again from the top. See [here](https://svelte.dev/repl/1a2aadab6c9c42249e54ff4e1f98bd2b?version=3.43.0)\r\n\r\n**Point 2:**\r\nI tried other examples and `$: tick().then(() =>`  seems to be behaving correctly for everything I tried. Even though it doesn't \"start from the top\" every time like `watch` does, it seems to always get to the correct end result (more efficiently that `watch`), which makes me wonder whether always using it instead of `$:` would solve the problem in practice. Maybe there is a subtle issue I haven't tested for but is going to bite in reality (?).\r\n**If this pattern makes everything run to resolution, no matter the order or anything ( == it is consistent and predictable), then I am okay with documenting it and going back to our lives as @Mlocik97 proposed.**\r\n\r\n**Point 3:**\r\nNot sure I fully wrapped my head around the implications of combining normal `$:` blocks (for assignment only) with `$: tick().then(() =>` (or `run`) blocks. Could the \"one per tick\" nature of the normal `$:` blocks get things out of sync somehow even if all they do is assignments? Does it make the mental model simpler or more complicated? easier or harder to reason about? I am not sure... I tend to want everything to be the same.\r\n\r\n**Point 4:**\r\nI think I would personally prefer just one keyword/syntax but being able to provide options to it. So `$:` stays the entry point to reactivity but maybe it take an options object somehow, something like what @dummdidumm said [here](https://github.com/sveltejs/svelte/issues/6730#issuecomment-923714936) and @rmunn  seems to also support. This approach also makes it more easily extensible. The defaults for all of the options would be the current behaviour so it is all nice and backwards compatible.  \r\n\r\n ","updated_at":"2021-09-25T04:09:16Z","created_at":"2021-09-25T04:09:16Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"927022597","body":"I can offer an explanation for one of your issues:\r\n\r\n> **Point 1:**\r\n>     2. Rich's `useEffect` doesn't console the final result, so it's **not running all the way through**. Changing the order of the blocks doesn't seem to fix it. See [here](https://svelte.dev/repl/02d62e67f0a648bfbc9b7619c4117236?version=3.43.0). Changing the order of the blocks changes the output so no good.\r\n\r\nThat's because `useEffect` in that REPL is using `afterUpdate`, which is designed to run after the component's visible fields are updated. With no HTML in that component, nothing happens. If I add `{a}` to the HTML, so that an update is triggered every time the value of `a` changes, then the final result is logged to the console.","updated_at":"2021-09-25T07:00:48Z","created_at":"2021-09-25T07:00:48Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"927105207","body":"@rmunn adding {a} makes `useEffect` work only sometimes. It seems that it is still sensitive to the order of the calls and doesn't always run all the way through. For example see [here](https://svelte.dev/repl/1f0476723069416bbc1ebc1473ec1337?version=3.43.0)","updated_at":"2021-09-25T11:10:15Z","created_at":"2021-09-25T11:06:21Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"927105617","body":"@rmunn (continued) only rendering {a}{b}{c}{d} seem to make it run to its conclusion in any order of blocks but this still means it is not something that can be used in reality (we don't render every variable).","updated_at":"2021-09-25T11:09:58Z","created_at":"2021-09-25T11:09:58Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"927206346","body":"I would add that I was curious how other frameworks would deal with this test case.\r\nFirst I tried **Solid** because it has a reputation for having one of the most, well, solid reactive systems (that self infers the dependencies like Svelte does). \r\nSeem to be behaving as expected with no surprises and very consistently. See [here](https://playground.solidjs.com/?hash=-31791585&version=1.1.1). It is not sensitive to the order of the effects and always logs 6 times. \r\n\r\n**React** also resolves correctly although it has some sensitivity (number of operations) to the order of the effects. See [here](https://codesandbox.io/s/effects-graph-qm2ro?file=/src/App.js)\r\n\r\nHow can we get svelte (which, generally speaking, has far superior DX relative to both of the above) to the same level of predictability and robustness?\r\n","updated_at":"2021-09-26T01:02:54Z","created_at":"2021-09-26T01:02:54Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"927283473","body":"I want to point out that `run:` would _technically_ be a breaking change, this is valid JavaScript right now https://svelte.dev/repl/c33e6f476f5546c9937846ba14296a81?version=3.43.0 . But it could be a compiler option that, if disabled (by default) will warn that you are using the `run` label?\r\n\r\nHowever, I do like the separation, because it solves https://github.com/sveltejs/svelte/issues/4933 + https://github.com/sveltejs/svelte/issues/4933#issuecomment-917371729 by making it clear that these are reactive declarations and hence immutable (?)","updated_at":"2021-09-26T10:57:27Z","created_at":"2021-09-26T10:54:12Z","creator_user_login":"Prinzhorn"}
{"number":6730,"comment_id":"927298747","body":"I mean, there is already a lot of stuff that use `run` as name of variable, function or anything else, in a lot of libs... I would consider to name it for example `@:` instead, or maybe there is even better name? `$$:` is too ugly. I have no other idea now. Still I'm not sure about this at all.","updated_at":"2021-09-26T12:34:15Z","created_at":"2021-09-26T12:33:27Z","creator_user_login":"Mlocik97"}
{"number":6730,"comment_id":"927499042","body":"> I mean, there is already a lot of stuff that use `run` as name of variable, function or anything else, in a lot of libs...\r\n\r\nLabel names are a separate namespace from variable/function/etc names, so there would be no conflict: https://svelte.dev/repl/eb2a4726339840ea90a7d421cbb29355?version=3.43.0\r\n\r\nHaving said that, I would prefer something prefixed with `$` like `$run`, or even `$runUntilSettled` to be more explicit about what it does.","updated_at":"2021-09-27T03:28:51Z","created_at":"2021-09-27T03:28:51Z","creator_user_login":"rmunn"}
{"number":6730,"comment_id":"927720805","body":"oh I didn't know this,... I always was naming labels differently, if I used them (that was already rarely). Thanks for info, I learned something new again.","updated_at":"2021-09-27T10:09:29Z","created_at":"2021-09-27T10:09:29Z","creator_user_login":"Mlocik97"}
{"number":6730,"comment_id":"934036681","body":"Not sure if this is still on people's mind or if everyone moved on to other issues.\r\nIn the meanwhile, I wrote [this post on dev.to](https://dev.to/isaachagoel/svelte-reactivity-gotchas-solutions-if-you-re-using-svelte-in-production-you-should-read-this-3oj3). Dev.to articles have good presence in search engines so folks googling around would hopefully bump into it until the official docs cover these issues (or until they are addressed otherwise).\r\nCheers.\r\ncc @arackaf  ","updated_at":"2021-10-05T03:55:59Z","created_at":"2021-10-05T03:55:28Z","creator_user_login":"isaacHagoel"}
{"number":6730,"comment_id":"934472689","body":"@isaacHagoel This looks like a great write-up - thanks! \r\n\r\nI know Rich is on vacation right now, but it sounds like he's open to improving the reactivity system to get it to a place where it'll scale to apps at your level, so I'm looking forward to seeing what comes of this.","updated_at":"2021-10-05T14:38:12Z","created_at":"2021-10-05T14:38:12Z","creator_user_login":"arackaf"}
{"number":6584,"comment_id":"887581518","body":"Experiencing the same issue. I had svelte app, which includes npm svelte component and it throws this error:\r\n![image](https://user-images.githubusercontent.com/25513620/127176097-afc316df-8e12-456e-893e-434ae1b729d1.png)\r\n\r\nThis is my simplified code snippet:\r\n\r\n```svelte\r\n/** app.js */\r\n<script>\r\nimport Example from './example.svelte';\r\n\r\nnew Example({ target: document.body });\r\n</script>\r\n\r\n/** example.svelte **/\r\n<script>\r\nimport Svelecte from 'svelecte';\r\n</script>\r\n\r\n<Svelecte></Svelecte> <!-- when I add component, it breaks -->\r\n```","updated_at":"2021-07-27T14:54:04Z","created_at":"2021-07-27T14:54:04Z","creator_user_login":"mskocik"}
{"number":6584,"comment_id":"887859080","body":"It's strange that `context` property will check for existence of `parent_component` but the new `root` property won't.\r\n@mskocik I had the exact same error from plugins that had bundles using latest svelte version.","updated_at":"2021-07-27T21:52:54Z","created_at":"2021-07-27T21:52:54Z","creator_user_login":"CatchABus"}
{"number":6584,"comment_id":"889032213","body":"This also occurs when sharing components with webpacks module federation. (In the current version of svelte, older versions work).\r\nAn example is here: https://github.com/micschwarz/svelte-module-federation","updated_at":"2021-07-29T11:17:45Z","created_at":"2021-07-29T11:17:28Z","creator_user_login":"micschwarz"}
{"number":6584,"comment_id":"889783745","body":"I've been racking my brain for the last 3 hours trying to figure out why my app suddenly started exploding... Eventually managed to find this issue. Is there a simple fix to reverting this bug so I can continue development until it's patched? I'm using esbuild-svelte which is pulling in a broken version I guess, so I can't just define an older version of svelte in my package.json as far as I'm aware?\r\n\r\nFor others trying to Google this issue, the console output for Chrome is:\r\n\r\n`Uncaught (in promise) TypeError: Cannot read property '$$' of null`\r\n\r\nAnd for Firefox:\r\n\r\n`Uncaught (in promise) TypeError: parent_component is null`","updated_at":"2021-07-30T10:04:15Z","created_at":"2021-07-30T10:01:09Z","creator_user_login":"nullbio"}
{"number":6584,"comment_id":"889787757","body":"Try downgrading svelte version until it works again. Version `3.39.0` worked fine for me.\r\n\r\nOn 30. 7. 2021 12:01, nullbio wrote:\r\n>\r\n> I've been racking my brain for the last 3 hours trying to figure out \r\n> why my app suddenly started exploding... Is there a simple fix to \r\n> reverting this bug so I can continue development until it's patched?\r\n>\r\n> ‚Äî\r\n> You are receiving this because you were mentioned.\r\n> Reply to this email directly, view it on GitHub \r\n> <https://github.com/sveltejs/svelte/issues/6584#issuecomment-889783745>, \r\n> or unsubscribe \r\n> <https://github.com/notifications/unsubscribe-auth/AGCU5FABFDMDYYYU3OTM6PTT2JZ7BANCNFSM5BCL6OBQ>.\r\n>\r\n\r\n","updated_at":"2021-07-30T10:08:25Z","created_at":"2021-07-30T10:07:33Z","creator_user_login":"mskocik"}
{"number":6584,"comment_id":"889795159","body":"> Try downgrading svelte version until it works again. Version `3.39.0` worked fine for me.\r\n> [‚Ä¶](#)\r\n> On 30. 7. 2021 12:01, nullbio wrote: I've been racking my brain for the last 3 hours trying to figure out why my app suddenly started exploding... Is there a simple fix to reverting this bug so I can continue development until it's patched? ‚Äî You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#6584 (comment)](https://github.com/sveltejs/svelte/issues/6584#issuecomment-889783745)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AGCU5FABFDMDYYYU3OTM6PTT2JZ7BANCNFSM5BCL6OBQ>.\r\n\r\nThanks. Clearing my package-lock.json, node_modules, and adding `\"svelte\": \"3.39.0\",` to my package.json seems to have worked. Didn't think it would because in my build svelte is a dependency of esbuild-svelte, but I suppose in the land of node it enforces a version for sub-dependencies if you declare one explicitly. News to me. Just leaving this here for anyone else who needs it and is new to all of this like I am.","updated_at":"2021-07-30T10:20:01Z","created_at":"2021-07-30T10:20:01Z","creator_user_login":"nullbio"}
{"number":6584,"comment_id":"903206986","body":"This breaks on Snowpack's streaming imports where you don't have the `svelte/compiler` available and it just downloads ESM modules... so, for componentes that were already generated this way then there's no solution.\r\n\r\nSticking to `v3.39.0` is fine if you're bundling all way long, but CDN-based approaches are failing due this.\r\n\r\nUntil #6646 gets merged CDN users are just blocked.\r\n\r\nThank you!","updated_at":"2021-08-22T03:15:01Z","created_at":"2021-08-22T03:15:01Z","creator_user_login":"pateketrueke"}
{"number":6584,"comment_id":"903714752","body":"does this issue solved? the same error occurs to me.","updated_at":"2021-08-23T12:20:45Z","created_at":"2021-08-23T12:20:45Z","creator_user_login":"robin-shine"}
{"number":6584,"comment_id":"907429921","body":"Why is this code ever getting called with neither a `target` passed in to the constructor nor `current_component`/`parent_component` being set?\r\n\r\nIf it's one Svelte component trying to use another pre-compiled pre-bundled Svelte component, there are already other known issues with that (problems with the transitions scheduler, `context` not inheriting, probably others), and it's not something that's supported.\r\n\r\nWhat's the use case here? Would the change in #6646 prevent this immediate crash, but still leave the other less-visible issues with apps being bundled with multiple copies of Svelte's internals?","updated_at":"2021-08-27T19:32:19Z","created_at":"2021-08-27T19:32:19Z","creator_user_login":"Conduitry"}
{"number":6584,"comment_id":"908261952","body":"@Conduitry \r\n> What's the use case here?\r\n\r\nMicrofrontends are the use case :)\r\n\r\n> Would the change in #6646 prevent this immediate crash, but still leave the other less-visible issues with apps being bundled with multiple copies of Svelte's internals?\r\n\r\nThe change in #6646 would prevent this, yes.\r\n![image](https://user-images.githubusercontent.com/20029553/131331776-c67482a7-8963-41fd-a71c-aceae5adf240.png)\r\nOf course the other issues would still exist, but if you use svelte this way, you might be aware of them.\r\n","updated_at":"2021-08-30T11:23:05Z","created_at":"2021-08-30T11:23:05Z","creator_user_login":"micschwarz"}
{"number":6584,"comment_id":"914581616","body":"A possibly related post on Reddit: https://www.reddit.com/r/sveltejs/comments/pjo902/svelte_microfrontend_module_federation_bug/?utm_medium=android_app&utm_source=share","updated_at":"2021-09-07T19:52:46Z","created_at":"2021-09-07T19:52:46Z","creator_user_login":"dummdidumm"}
{"number":6584,"comment_id":"926948913","body":"I'm getting same error and I've tried downgrading to `3.39.0` and using `3.43.0` latest but still get it:\r\n\r\n![image](https://user-images.githubusercontent.com/142403/134744654-c76e5fc5-d4ae-48c1-ac04-2b49d4be6ed0.png)\r\n\r\nMy use case is I have a ui component library I'm attempting to prepare for publishing -- I've npm linked to a ui library which I've built out a `dist/index.js` via `rollup -c` and when I try to use it with following I get said error:\r\n\r\n```svelte\r\n<script>\r\n\timport { Button } from 'agnosticui-svelte';\r\n</script>\r\n\r\n<main>\r\n\t<Button mode=\"primary\" isBordered>Testing 1234</Button>\r\n</main>\r\n<style></style>\r\n```\r\n\r\nI've used https://github.com/joeattardi/svelte-tabs and built it out a similar way and it doesn't have the issue but it's locked back at 3.7.1:\r\n\r\n```\r\n    \"svelte\": {\r\n      \"version\": \"3.7.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/svelte/-/svelte-3.7.1.tgz\",\r\n      \"integrity\": \"sha512-MKjFy3YZ2pNUVPTwLNQ9JAVx6KVwfYnm/vbUF/pKLrfDDZiCBKfWPwnffpwGlnIAn7aS+aJoKV0soj464DOs4Q==\",\r\n      \"dev\": true\r\n    },\r\n```\r\n\r\nI tried rolling all the way back to `3.7.1` in my project, and I still have same exact error. So that tells me perhaps there's something different (and wrong) between what I'm doing and what `svelte-tabs`. \r\n\r\nUPDATE:\r\nI just deleted all my components and copied over the very simple svelte-tabs components and updated my example app to look exactly like his. I can reproduce same exact error with svelte `v3.43.0`. \r\n\r\nThen, I backed down my package.json for the library and for the example app the was `npm link`ed to ` `\"svelte\": \"3.39.0\"`, removed both lock files and reinstalled. I was able to run the example. So, there's something specific in my components that still was causing the error even after downgrading; so I'll have to just add my components back one at a time to figure that out. However, it looks like this is definitely a bug on the latest version.\r\n\r\nThis seems like a blocker for anyone trying to develop a component library.","updated_at":"2021-09-25T11:51:18Z","created_at":"2021-09-24T22:19:55Z","creator_user_login":"roblevintennis"}
{"number":6584,"comment_id":"927108799","body":"Hello,\r\n\r\nI do have the same issue in my app while trying to test a component which contains an \"if\" statement and a mock module. I did not have the issue back when I was using Svelte 3.35.0. I tried to upgrade yesterday to 3.43.0, but did not succeed. I had to rollback to 3.39.0.\r\n\r\nTo ease a bit the debug, here's a simplified repo to reproduce the issue: https://github.com/gcruchon/tests/tree/main/svelte-null-parent-component\r\n\r\nI'm using last version of all libraries (svelte, jest, svelte-jester, babel, testing-library, ...). I used the svelte template and just added the bug (i.e. testing a mocked \"Link\" within an \"if\" statement)\r\n\r\nFeel free to comment if I missed something.","updated_at":"2021-09-25T11:41:39Z","created_at":"2021-09-25T11:40:01Z","creator_user_login":"gcruchon"}
{"number":6584,"comment_id":"948798173","body":"[Re](https://github.com/sveltejs/svelte/issues/6584#issuecomment-887581518) @mskocik I tested your example in [a REPL](https://svelte.dev/repl/be90f7b578c24a039961f1ac4a5cac7d?version=3.44.0) and I don't see any errors.\r\n\r\n[Re streaming imports](https://github.com/sveltejs/svelte/issues/6584#issuecomment-903206986) @pateketrueke I'm not familiar with it, but usually using CDN or pre-bundled code for Svelte components, they should always be instantiated with a `target` to mount to. Svelte doesn't guarantee components to work cross version AFAIK, so `target` would help \"isolate\" it.\r\n\r\n[Re jest mocks](https://github.com/sveltejs/svelte/issues/6584#issuecomment-927108799) @gcruchon that seems like a bug of how Svelte components are mocked and interacting with the component initialization phase. I'm not familiar with how it works under-the-hood, but probably somewhere multiple svelte instances are created when being bundled (?).\r\n\r\nI agree with Conduitry here. While the PR that fixes this works, I don't see any reason why the error would happen in the first place. Either `options.target` is defined for the component to mount to, or it has a parent_component. It shouldn't be dangling around without a reference. If anything, versions above 3.39.0 have surfaced many implementation bugs around the ecosystem, and we should fix them instead. And they largely seem to be components not being compiled/bundled correctly.","updated_at":"2021-10-21T16:51:33Z","created_at":"2021-10-21T16:51:33Z","creator_user_login":"bluwy"}
{"number":6584,"comment_id":"948881902","body":"@bluwy Cannot duplicate in the REPL neither. But it was happening. It was quite hard to replicate back then. But since when I tried `3.43.1` it **_worked_** for me since then.\r\n","updated_at":"2021-10-21T18:14:18Z","created_at":"2021-10-21T18:14:18Z","creator_user_login":"mskocik"}
{"number":6584,"comment_id":"950309826","body":"> [Re](https://github.com/sveltejs/svelte/issues/6584#issuecomment-887581518) @mskocik that seems like a bug of how Svelte components are mocked and interacting with the component initialization phase. I'm not familiar with how it works under-the-hood, but probably somewhere multiple svelte instances are created when being bundled (?).\r\n\r\nThanks for acknowledging this bug.\r\n\r\nIf I‚Äôm not mocking svelte component in the right way, how would you recommend to mock a svelte component? Using an `import` of a much simpler .svelte file seems to me pretty simple and straightforward‚Ä¶ how come this works without `if` statement  and suddenly fails with an `if`?\r\n\r\nI‚Äôm not a specialist of the svelte compiler, so I need more info to investigate. Can someone help me understand and improve the maturity of Svelte to embrace such software craftsmanship practices?\r\n\r\nDo you have all what is necessary to reproduce the bug? (I see a label ‚Äúneed repro‚Äù)","updated_at":"2021-10-24T11:48:57Z","created_at":"2021-10-24T11:48:57Z","creator_user_login":"gcruchon"}
{"number":6584,"comment_id":"950470320","body":"> If I‚Äôm not mocking svelte component in the right way, how would you recommend to mock a svelte component?\r\n\r\nThe way you mock it now is correct, but I'm guessing there's a bug when transforming svelte files in jest. Might be an issue in https://github.com/mihar-22/svelte-jester.\r\n\r\n\r\n\r\n> Do you have all what is necessary to reproduce the bug? (I see a label ‚Äúneed repro‚Äù)\r\n\r\nI'd say a no since the repros given so far are Svelte + [third-party integration] repros. Maybe it's fair as it only happens in these very specific scenarios, but it makes it hard to nail down what actually is the bug in Svelte. Or the real bug resides in that third-party integration.","updated_at":"2021-10-25T02:23:03Z","created_at":"2021-10-25T02:23:03Z","creator_user_login":"bluwy"}
{"number":6584,"comment_id":"981088107","body":"@nullbio I was also getting this error with Esbuild and it seemed to happen when I linked other libraries that also included svelte. Esbuild wasn't de-duping the svelte import, so I was getting multiple copies inside my bundle. I couldn't find a plugin to de-dupe svelte so added this inline one. \r\n\r\n```javascript\r\n// part of esbuild config\r\nplugins: [\r\n    {\r\n      name: 'dedupe-svelte',\r\n      setup({ onResolve }) {\r\n        const svelte = require.resolve('svelte')\r\n        onResolve({ filter: /^svelte/ }, args => {\r\n          let path = svelte.replace(/svelte\\/[^\\.]+.js$/,args.path+\"/index.mjs\")// .mjs for browser path\r\n          return { path }\r\n        })\r\n      }\r\n    },\r\n    sveltePlugin({compileOptions: {css: true}})\r\n  ],\r\n```\r\nHope that helps.","updated_at":"2021-12-03T20:29:44Z","created_at":"2021-11-28T13:44:19Z","creator_user_login":"crisward"}
{"number":6584,"comment_id":"985139790","body":"Just adding another data point for why this error occurred for me ‚Äî I was consuming an internal design system where `svelte` was listed as a `dependency` rather than `peerDependency`, resulting in multiple instances existing in my app (verified by running `yarn why svelte`). Fixing that so only one svelte instance (regardless of version) was installed fixed the issue for me.\r\n\r\nI agree with the sentiment that if anything recent versions of Svelte have just surfaced ecosystem issues. Could svelte throw a more useful error? From reading this thread seems it's often due to mismatching/several versions of svelte existing at once.\r\n\r\nEDIT: This also happened when I `yarn link`ed said design system for local development, presumably for the same reason, which is frustrating. I got around it by also linking the svelte instance in the design system, which feels hacky.","updated_at":"2021-12-04T02:07:45Z","created_at":"2021-12-03T01:33:30Z","creator_user_login":"madeleineostoja"}
{"number":6584,"comment_id":"985991815","body":"> Could svelte throw a more useful error? \r\n\r\nYes, we could do that as it's detectable.\r\n\r\n> This also happened when I `yarn link`ed said design system for local development, presumably for the same reason, which is frustrating. I got around it by also linking the svelte instance in the design system, which feels hacky.\r\n\r\nI have a design system component library as well and have not encountered this issue. Are you compiling the library into JS? Make sure to export raw Svelte files instead so that the consumer of that library can share the Svelte instance.","updated_at":"2021-12-04T08:36:49Z","created_at":"2021-12-04T08:36:49Z","creator_user_login":"bluwy"}
{"number":6584,"comment_id":"986013303","body":"For what it's worth, I'm going to add my boring story of how I came across this error ü§∑ In a progressively-enhanced PHP app, I used to create svelte components regardless of whether the `target` existed or not, because one `main.js` file creates components on different pages that don't always use all of them. Svelte used to handle this gracefully, skipping those components that didn't have a valid target element. After I updated svelte from 3.38.3 to 3.44.2, I came across this error. Either I missed it while browsing through or this ‚Äúchange‚Äù in behavior wasn't mentioned in the changelog. ü§≠ \r\n\r\nI added a conditional checking for the element to exist before creating a component, which seems more reasonable anyways.\r\n\r\nHaving gone through the debugging process, I can however confirm that catching the error and printing a more specific error message could be nice if both, `target` and `parent` are undefined for one or another reason.","updated_at":"2021-12-04T11:35:55Z","created_at":"2021-12-04T11:35:55Z","creator_user_login":"te-online"}
{"number":6584,"comment_id":"997225614","body":"I've been having issues with this recently, such as when using svelte-loader + svelte with electron-forge\r\n![image](https://user-images.githubusercontent.com/67440879/146648108-748f0da4-8925-4a5f-bf77-e74de65f4775.png)\r\n","updated_at":"2021-12-18T16:20:18Z","created_at":"2021-12-18T16:20:18Z","creator_user_login":"FunctionalMetatable"}
{"number":6584,"comment_id":"1013037279","body":"https://github.com/sveltejs/svelte/pull/6646 \r\nWhat about this pr? Its open for month now","updated_at":"2022-01-14T11:26:23Z","created_at":"2022-01-14T11:26:08Z","creator_user_login":"micschwarz"}
{"number":6584,"comment_id":"1019553949","body":"So this was breaking components that couldn‚Äôt be server-side rendered and so had to be instantiated using `<svelte:component>` in NodeKit.\r\n\r\n<strike>In case anyone else comes across this Svelte bug while using their Svelte plugin with esbuild, you can apply the patch in #6646 in your plugin‚Äôs build `onEnd()` handler:\r\n\r\n```js\r\nawait esbuild.build({\r\n  //‚Ä¶\r\n  plugins: [\r\n    sveltePlugin(route),\r\n    {\r\n      name: 'Apply patches',\r\n      setup(build) {\r\n        build.onEnd(result => {\r\n          // Apply PR: https://github.com/sveltejs/svelte/pull/6646/files\r\n          // by https://github.com/hgiesel\r\n          if (result.outputFiles) {\r\n            result.outputFiles.forEach((outputFile, index) => {\r\n              // Note $$ is escaped as $$$$.\r\n              const patchedResult = outputFile.text.replace(/root: options\\.target \\|\\| parent_component\\.\\$\\$\\.root/g, 'root: options.target || (parent_component ? parent_component.$$$$.root : document)')\r\n              result.outputFiles[index].contents = Buffer.from(patchedResult, 'utf-8')\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n  ]\r\n})\r\n``` \r\n\r\nThis does, however, slow down the esbuild build so I do hope that #6646 will be accepted.</strike>\r\n\r\nIn case it helps, I was testing with the [svelte-boring-avatars](https://github.com/paolotiu/svelte-boring-avatars) and  [tsParticles](https://github.com/matteobruni/tsparticles) components. Both break without the patch.\r\n\r\nWith the patch, svelte-boring-avatars works but, since the distribution build for tsParticles is minified, the patch doesn‚Äôt apply and that‚Äôs still failing.\r\n\r\nSo I guess the only option left is to patch Svelte itself.","updated_at":"2022-01-23T20:03:48Z","created_at":"2022-01-23T19:45:22Z","creator_user_login":"aral"}
{"number":6584,"comment_id":"1019558004","body":"> Esbuild wasn't de-duping the svelte import, so I was getting multiple copies inside my bundle.\r\n\r\nIt‚Äôs odd because I‚Äôm using a custom resolver in my esbuild to ensure that all Svelte references get mapped to the single instance of Svelte that‚Äôs in my app. And I‚Äôm still seeing this error (see above).","updated_at":"2022-01-23T20:11:09Z","created_at":"2022-01-23T20:10:53Z","creator_user_login":"aral"}
{"number":6584,"comment_id":"1019578529","body":"The problem here is instantiating a component compiled with Svelte version X inside an app compiled with Svelte version Y in a declarative way.\r\n\r\nThe following is not guaranteed to work:\r\n```\r\n<CompiledComponent />\r\n<svelte:element this={CompiledComponent} />\r\n```\r\nThe following will work:\r\n```\r\n<script>\r\n   //..import\r\n   let el;\r\n   onMount(() => new CompiledComponent({target: el, props: {..}));\r\n</script>\r\n<div bind:this={el} />\r\n```\r\nIf using a component from a library, ensure that an uncompiled version exists and is used by your build tool. SvelteKit's `package` command ensures this for example.","updated_at":"2022-01-23T22:16:32Z","created_at":"2022-01-23T22:16:32Z","creator_user_login":"dummdidumm"}
{"number":6584,"comment_id":"1019967090","body":"@dummdidumm Hey Simon, thank you, that does indeed work. I‚Äôm going to see how I can incorporate checking if the source exists for a component and using that in my loader‚Äôs resolution. I‚Äôm assuming that‚Äôs what the `svelte` entries in the _package.json_ files are for. Appreciate your help.","updated_at":"2022-01-24T10:53:44Z","created_at":"2022-01-24T10:53:36Z","creator_user_login":"aral"}
{"number":6584,"comment_id":"1085832096","body":"> If it's one Svelte component trying to use another pre-compiled pre-bundled Svelte component, there are already other known issues with that (problems with the transitions scheduler, `context` not inheriting, probably others), and it's not something that's supported.\r\n\r\n@Conduitry There should be a big warning in the Svelte doc that using pre-bundled Svelte components is not supported.\r\nIt's a blocker for our project and probably for some others too.\r\n","updated_at":"2022-04-01T12:23:33Z","created_at":"2022-04-01T12:23:33Z","creator_user_login":"jindrahm"}
{"number":6584,"comment_id":"1135345032","body":"@jindrahm Agreed; @Conduitry this could also be mentioned in the Svelte FAQ, or Svelte Society. I'm trying to downgrade as well; I'm just trying to re-spin up `nodemon` real quick.","updated_at":"2022-05-24T02:55:56Z","created_at":"2022-05-24T02:55:56Z","creator_user_login":"ghost"}
{"number":6584,"comment_id":"1135356940","body":":heavy_check_mark: Got it on my end; make sure to run:\r\n```shell\r\n> npm i -s svelte@^3.39.0\r\n# for yarn:\r\n> yarn add svelte@^3.39.0\r\n```\r\nSo npm/yarn knows to downgrade.\r\n\r\nHowever, I can see this tripping other newbies up as there's nothing mentioned in the Svelte docs/FAQ/Society; I think this is very essential for the Svelte ecosystem/community to be aware of as an error like this can hinder the modularity of a Svelte app.","updated_at":"2022-05-24T03:46:22Z","created_at":"2022-05-24T03:18:09Z","creator_user_login":"ghost"}
{"number":6584,"comment_id":"1141225225","body":"To add another use case to this discussion:\r\nI have encountered this error when dynamically importing a component in the markup like so:\r\n\r\n```svelte\r\n{#await import('./AsyncComponent.svelte')}\r\n    <LoadingIndicatator />\r\n{:then { default: AsyncComponent }}\r\n    <AsyncComponent />\r\n{/await}\r\n```","updated_at":"2022-05-30T14:30:05Z","created_at":"2022-05-30T14:30:05Z","creator_user_login":"wobedi"}
{"number":6584,"comment_id":"1143058652","body":"Same error.\r\nAnd it will reproduce in a pre-build component with `esm/cjs` module ?\r\n\r\n\r\n```js\r\n// rollup.config.js\r\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\r\nimport commonjs from '@rollup/plugin-commonjs';\r\nimport svelte from 'rollup-plugin-svelte';\r\nimport sveltePreprocess from 'svelte-preprocess';\r\nimport typescript from '@rollup/plugin-typescript';\r\nimport pkg from './package.json';\r\n\r\nexport default [\r\n  {\r\n    input: 'src/index.ts',\r\n    output: [\r\n      {\r\n        sourcemap: true,\r\n        file: pkg.module,\r\n        format: 'es',\r\n      },\r\n      {\r\n        sourcemap: true,\r\n        file: pkg.main,\r\n        format: 'umd',\r\n        name: 'XXX',\r\n      },\r\n    ],\r\n    plugins: [\r\n      svelte({\r\n        preprocess: sveltePreprocess(),\r\n        compilerOptions: {\r\n          dev: false,\r\n        },\r\n      }),\r\n      nodeResolve(),\r\n      typescript({\r\n        sourceMap: true,\r\n        inlineSourceMap: true,\r\n      }),\r\n      commonjs(),\r\n    ],\r\n  },\r\n];\r\n```\r\n\r\nAnd other project use this package and then it will reproduce.\r\nAdd `svelte` field in `package.json` will resolve it,but i don't want to do this.","updated_at":"2022-06-01T02:45:12Z","created_at":"2022-06-01T02:45:12Z","creator_user_login":"southorange0929"}
{"number":6584,"comment_id":"1143276400","body":"I think there are two different `current_component`  with pre-build which makes `init` get wrong parent_component And then get this error","updated_at":"2022-06-01T08:23:37Z","created_at":"2022-06-01T08:23:37Z","creator_user_login":"southorange0929"}
{"number":6584,"comment_id":"1144914139","body":"I am experiencing a similar situation when using [svelte-forms-lib](https://github.com/tjinauyeung/svelte-forms-lib): the error I get is similar to the one described in https://github.com/sveltejs/svelte/issues/6584#issuecomment-887581518. However, downgrading svelte to `3.39.0` in my `package.json`, as suggested above, won't fix this case, because the error originates in the third-party package, which [has been built with svelte 3.40](https://github.com/tjinauyeung/svelte-forms-lib/blob/7df1b1df4f02c5ff512e2542c879056ac2d8138d/package.json#L77).\r\n\r\nI now [reported the problem upstream](https://github.com/tjinauyeung/svelte-forms-lib/issues/169), but I would like to add the following info to this thread:\r\n* applying [this patch](https://github.com/sveltejs/svelte/pull/6646/files) to the built files of `svelte-forms-lib` seems to solve the problem;\r\n* maintainers of svelte might want to prioritize a fix because, as demonstrated by this case, it will start affecting more and more npm packages as their maintainers proceed to upgrade svelte.","updated_at":"2022-06-02T14:11:26Z","created_at":"2022-06-02T14:11:26Z","creator_user_login":"matpen"}
{"number":6584,"comment_id":"1145215516","body":"> Add svelte field in package.json will resolve it,but i don't want to do this.\r\n\r\nActually that's the solution, the svelte compiler should consume all the `.svelte` sources to produce correct builds.\r\n\r\nIf you don't _want to_ follow that rule then it is your fault, not svelte's fault.\r\n\r\nBundlers should be aware of that, and MUST load `\"svelte\": \"./path/to/sources\"` to properly work.\r\n\r\nIf your bundler does not resolve from the `svelte` field then it'll fail, and that's not your fault... just pick another bundler that will do his job correctly!","updated_at":"2022-06-02T19:06:37Z","created_at":"2022-06-02T19:06:37Z","creator_user_login":"pateketrueke"}
{"number":6584,"comment_id":"1145736992","body":"I second @pateketrueke's opinion. See https://github.com/tjinauyeung/svelte-forms-lib/issues/169#issuecomment-1145736546 for a discussion.","updated_at":"2022-06-03T08:41:38Z","created_at":"2022-06-03T08:41:38Z","creator_user_login":"matpen"}
{"number":6584,"comment_id":"1146940928","body":"> Actually that's the solution, the svelte compiler should consume all the .svelte sources to produce correct builds.\r\n\r\nIt's an amazing rule, and i can't find it in the docs. \r\n\r\nSo i must provide all of the source files to avoid this problem? If it is, `esm/cjs` module may be useless? ","updated_at":"2022-06-06T01:32:33Z","created_at":"2022-06-06T01:25:47Z","creator_user_login":"southorange0929"}
{"number":6584,"comment_id":"1146961850","body":"> So i must provide all of the source files to avoid this problem?\r\n\r\nyes, definitely\r\n\r\n> If it is, esm/cjs module may be useless?\r\n\r\nnot really, because you can still consume compiled components manually, using the `new Component()` syntax\r\n\r\nit is very useful to have, i.e. a well-crafted component that can operate standalone","updated_at":"2022-06-06T02:10:51Z","created_at":"2022-06-06T02:10:51Z","creator_user_login":"pateketrueke"}
{"number":6584,"comment_id":"1181646533","body":"I finally have a solution.. building svelte/internal as a separate module and treating `svelte` and `svelte/internal` dependencies as external and pointing them to the module.\r\nThat makes the internal svelte logic to be shared for all the components.\r\nI updated [the repo](https://github.com/jindrahm/svelte-component-dynamic-import) I created for reproduction of one of the issues I had with the pre-bundled components ..so you can have a look.","updated_at":"2022-07-12T11:31:47Z","created_at":"2022-07-12T11:31:47Z","creator_user_login":"jindrahm"}
{"number":6584,"comment_id":"1189699112","body":"@pateketrueke What if someone uses a svelte component written in typescript, but the project is using pure JS? Then one would have to add typescript just because of the component used? Feels like an overhead definetely.","updated_at":"2022-07-20T01:15:36Z","created_at":"2022-07-20T01:15:36Z","creator_user_login":"atomcat1978"}
{"number":6584,"comment_id":"1193100225","body":"> What if someone uses a svelte component written in typescript, but the project is using pure JS\r\n\r\nThat's why there exists the [`sveltekit package` feature](https://kit.svelte.dev/docs/packaging).\r\n\r\nLibrary authors should ideally use this feature to create the package. Authors can use SCSS, TypeScript and other language variants and in the end normal JavaScript and CSS components will be generated that can be consumed by any other Svelte project.\r\n\r\nHere is an example of a TypesScript demo package: https://github.com/ivanhofer/svienna-meetup-package-demo.\r\nYou can run `npm run package` and see the exported files in the `package` folder. All files are beeing converted to normal JavaScript versions.\r\n\r\nIf you are using a library that doesn't get published in the right way, you could open an issue and let the authors know that this feature exists.","updated_at":"2022-07-23T10:10:16Z","created_at":"2022-07-23T10:10:16Z","creator_user_login":"ivanhofer"}
{"number":6584,"comment_id":"1197310332","body":"Actually, I could resolve this issue with a correct rollup config in my library project. I defined all svelte related stuff as external and excluded from resolve, so it is fetched from within the project that is using my components fro the library. My rollup config looks as follows:\r\n\r\n```\r\nimport svelte from 'rollup-plugin-svelte'\r\nimport autoPreprocess from 'svelte-preprocess'\r\nimport pkg from './package.json'\r\nimport typescript from '@rollup/plugin-typescript';\r\nimport {terser} from 'rollup-plugin-terser'\r\nimport resolve from '@rollup/plugin-node-resolve';\r\n\r\nconst globals = {\r\n  'svelte/internal': 'svelte/internal',\r\n  'svelte': 'svelte',\r\n};\r\n\r\nexport default\r\n  {\r\n    external: /^svelte.*$/,\r\n    input: 'src/index.ts',\r\n    output: [\r\n      {\r\n        file: pkg.module,\r\n        format: 'es',\r\n        sourcemap: true,\r\n        globals\r\n      },\r\n      {\r\n        file: pkg.main,\r\n        format: 'umd',\r\n        name: 'Autocomplete',\r\n        sourcemap: true,\r\n        globals\r\n      },\r\n    ],\r\n    plugins: [\r\n      svelte({\r\n          preprocess: [\r\n            autoPreprocess()\r\n          ],\r\n          emitCss: false,\r\n        },\r\n      ),\r\n      resolve({\r\n        // Exclude all svelte related stuff\r\n        resolveOnly: [/^(?!svelte.*$)/]\r\n      }),\r\n      typescript({sourceMap: true}),\r\n      terser(),\r\n    ],\r\n  };\r\n```\r\n\r\nApparently works fine, since all svelte stuff gets provided by the build system of the application using the component.","updated_at":"2022-07-27T20:05:50Z","created_at":"2022-07-27T20:05:50Z","creator_user_login":"atomcat1978"}
{"number":6584,"comment_id":"1217682919","body":"Thanks @atomcat1978, set svelte (and svelte/internal) as a external librairie fix the build issue on client side :)\r\nPotatoes for everyone ! ü•î ","updated_at":"2022-08-17T08:32:28Z","created_at":"2022-08-17T08:32:28Z","creator_user_login":"Tlahey"}
{"number":6584,"comment_id":"1372705624","body":"Having this same issue:\r\n1. Built a library with Svelte components and packaged it using `svelte-package`;\r\n2. Importing the library in a TypeScript project which uses Rollup to compile the end result.\r\n\r\nIn this setup, I could instruct Rollup (second project) to use it's own version of Svelte (including for the components inside the library) by using the `dedupe` option of the `@rollup/plugin-node-resolve` plugin:\r\n\r\n```js\r\n// rollup.config.js\r\nimport { visualizer } from \"rollup-plugin-visualizer\";\r\n\r\nimport commonjs from \"@rollup/plugin-commonjs\";\r\nimport esbuild from \"rollup-plugin-esbuild\";\r\nimport json from \"@rollup/plugin-json\";\r\nimport polyfills from \"rollup-plugin-polyfill-node\";\r\nimport resolve from \"@rollup/plugin-node-resolve\";\r\nimport svelte from \"rollup-plugin-svelte\";\r\nimport sveltePreprocess from \"svelte-preprocess\";\r\n\r\nexport default {\r\n    input: \"./src/index.ts\",\r\n    output: [\r\n        {\r\n            name: \"TPScript\",\r\n            file: \"dist/script.js\",\r\n            format: \"umd\",\r\n            sourcemap: true,\r\n        },\r\n    ],\r\n\r\n    plugins: [\r\n        svelte({\r\n            preprocess: sveltePreprocess({\r\n                sourceMap: true,\r\n            }),\r\n            emitCss: false,\r\n            compilerOptions: {\r\n                sourcemap: true,\r\n            },\r\n        }),\r\n\r\n        json(),\r\n        commonjs(),\r\n        polyfills(),\r\n        resolve({\r\n            browser: true,\r\n            dedupe: [\"svelte\"],\r\n        }),\r\n\r\n        esbuild({\r\n            minify: process.env.NODE_ENV === \"production\",\r\n        }),\r\n\r\n        visualizer(),\r\n    ],\r\n};\r\n```\r\nPosted the whole thing in case it helps anyone, but the relevant bit is just the `dedupe: [\"svelte\"]` part.","updated_at":"2023-01-05T20:27:33Z","created_at":"2023-01-05T20:26:20Z","creator_user_login":"vpalos"}
{"number":6584,"comment_id":"1475294598","body":"I am still getting this error, even though I made sure the components were precompiled with the same version of svelte as the one the app uses (`3.53.1`). The components were compiled using `esbuild` via the `esbuild-svelte` & `svelte-preprocess`. AFAIK, `esbuild-svelte` declares `svelte` as `peerDependency` since `0.7.0`, and I am using `0.7.3`, so it is definitely using the correct svelte version to compile the components.\r\n\r\nFor context, I am trying to develop a desktop application that has a plugin system that can extend the application's functionality, and one part of it is that plugins can export svelte components that can then be used in the application itself. The application imports the compiled svelte files via the `import()` syntax. The imported component is then consumed via `<svelte:component>`. Each `<svelte:component>` is rendered inside of a `div`, so I would expect svelte to be able to pick up the `parent_component` correctly.","updated_at":"2023-03-19T15:38:07Z","created_at":"2023-03-19T15:31:25Z","creator_user_login":"kennethnym"}
{"number":6584,"comment_id":"1475958132","body":"@kennethnym It's not that much about the svelte version as it is about having the same context of `svelte/internal`. Make sure you don't have `svelte/internal` bundled in each module.\r\n\r\nI'm not familiar with `esbuild` (I use `rollup`) so I cannot give you a concrete tip to set it up. But I have `svelte/internal` like separate module which I import into the other modules. In `rollup` I set to threat `svelte/internal` as extrenal module and override the default path to it.","updated_at":"2023-03-20T10:14:13Z","created_at":"2023-03-20T10:14:13Z","creator_user_login":"jindrahm"}
{"number":6584,"comment_id":"1480139160","body":"I suspected that was the issue. Thanks for the pointer, I have managed to fix the issue by making sure the plugin and the application is loading the same instance of svelte.","updated_at":"2023-03-22T19:28:37Z","created_at":"2023-03-22T19:28:37Z","creator_user_login":"kennethnym"}
{"number":6584,"comment_id":"1517002458","body":"@kennethnym How did you manage to do that?\r\n\r\nI'm having the same use case with svelte components as plugins, and trying to make the plugins load `svelte/internal` stuff from the host application.\r\nI'm looking into Import maps option for the browser, but not sure that will work good enough.\r\n\r\nI'm wondering what was your solution. Any hint will be much appreciated üôèüèª\r\n","updated_at":"2023-04-20T22:08:10Z","created_at":"2023-04-20T22:08:10Z","creator_user_login":"vitmsrk"}
{"number":6584,"comment_id":"1517644642","body":"> The problem here is instantiating a component compiled with Svelte version X inside an app compiled with Svelte version Y in a declarative way.\r\n> \r\n> The following is not guaranteed to work:\r\n> \r\n> ```\r\n> <CompiledComponent />\r\n> <svelte:element this={CompiledComponent} />\r\n> ```\r\n> \r\n> The following will work:\r\n> \r\n> ```\r\n> <script>\r\n>    //..import\r\n>    let el;\r\n>    onMount(() => new CompiledComponent({target: el, props: {..}));\r\n> </script>\r\n> <div bind:this={el} />\r\n> ```\r\n> \r\n> If using a component from a library, ensure that an uncompiled version exists and is used by your build tool. SvelteKit's `package` command ensures this for example.\r\n\r\nThanks for this!\r\nI'm trying to use shared components, with webpack module federation. Tried with <svelte:component />, but I also get error like others (parent_component).\r\n\r\nThis is my working RemoteButton component (should add some error handling):\r\n\r\n```\r\n<script>\r\n    import {onMount} from \"svelte\";\r\n\r\n    let el;\r\n    let Component\r\n    let Module\r\n\r\n    onMount(async () => {\r\n        Module = (await import('components/Button')).default;\r\n        Component = new Module({target: el, props: $$props});\r\n    });\r\n\r\n    $: {\r\n        if (Component) {\r\n            Component.$set($$props)\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n<div bind:this={el}></div>\r\n```\r\n\r\n\r\n","updated_at":"2023-04-21T10:53:08Z","created_at":"2023-04-21T10:52:02Z","creator_user_login":"jare25"}
{"number":6584,"comment_id":"1518718082","body":"> @kennethnym How did you manage to do that?\r\n> \r\n> I'm having the same use case with svelte components as plugins, and trying to make the plugins load `svelte/internal` stuff from the host application. I'm looking into Import maps option for the browser, but not sure that will work good enough.\r\n> \r\n> I'm wondering what was your solution. Any hint will be much appreciated üôèüèª\r\n\r\n@vitmsrk In my case I am using Svelte in a Tauri app, so the way I make it work will probably not be applicable to you. Anyways, this is how I made it work. Hopefully it will be helpful to you.\r\n\r\nBasically, you need to make sure that both the internal code and the plugin code uses the same import URL to import svelte. I use Vite to bundle the internal code. Since it doesn't support import rewriting OOTB, I wrote this simple Vite plugin to do exactly that:\r\n\r\n```js\r\n/**\r\n * This vite plugin prevents vite from rewriting import paths,\r\n * because some libraries are imported through the lib:// protocol\r\n * instead of being bundled directly into the application.\r\n *\r\n * https://github.com/vitejs/vite/issues/6393\r\n */\r\nfunction libProtocol() {\r\n  return {\r\n    name: \"lib-protocol\",\r\n    enforce: \"pre\",\r\n    configResolved(resolvedConfig) {\r\n      const VALID_ID_PREFIX = \"/@id/\"\r\n      const reg = new RegExp(`${VALID_ID_PREFIX}(lib:\\/.+)`, \"g\")\r\n      resolvedConfig.plugins.push({\r\n        name: \"vite-plugin-ignore-static-import-replace-idprefix\",\r\n        transform: (code) => reg.test(code)\r\n          ? code.replace(reg, (m, s1) => s1)\r\n          : code\r\n      })\r\n    },\r\n    resolveId(id, importer) {\r\n      if (id === \"svelte\" || id === \"svelte/internal\") {\r\n        return {id: `lib://localhost/svelte_internal.js`, external: true}\r\n      }\r\n      if (id === \"@twind/core\") {\r\n        return {id: \"lib://localhost/twind_core.js\", external: true}\r\n      }\r\n      if (id.startsWith(\"svelte/\")) {\r\n        // `svelte/store` gets flattened to `svelte_store.js`\r\n        return {id: `lib://localhost/${\r\n            id.replace(\"/\", \"_\")\r\n          }.js`, external: true}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = libProtocol\r\n```\r\n\r\nThe `lib://` is a special protocol that triggers a custom protocol handler that I registered with Tauri. The handler then reads the compiled Svelte code and responds with the content of the compiled source code.\r\n\r\nFor the plugins, I use esbuild to compile the plugins. When compiling the plugins, I used [esbuild-plugin-import-map](https://github.com/trygve-lie/esbuild-plugin-import-map)] to re-write all svelte imports to the same URL that the internal code of the app uses to import svelte:\r\n\r\n```js\r\nfunction rewriteSvelteImport() {\r\n  importMap.load({\r\n    imports: {\r\n      \"@powermacro/api\": \"lib:/localhost/powermacro-api.js\",\r\n      \"@powermacro/block-api\": \"lib:/localhost/powermacro-block-api.js\",\r\n      \"@twind/core\": \"lib:/localhost/twind_core.js\",\r\n      svelte: \"lib:/localhost/svelte_internal.js\",\r\n      \"svelte/internal\": \"lib:/localhost/svelte_internal.js\",\r\n      \"svelte/action\": \"lib:/localhost/svelte_action.js\",\r\n      \"svelte/animate\": \"lib:/localhost/svelte_animate.js\",\r\n      \"svelte/easing\": \"lib:/localhost/svelte_easing.js\",\r\n      \"svelte/motion\": \"lib:/localhost/svelte_motion.js\",\r\n      \"svelte/store\": \"lib:/localhost/svelte_store.js\",\r\n      \"svelte/transition\": \"lib:/localhost/svelte_transition.js\"\r\n    }\r\n  }, [\"lib:/\"])\r\n  return importMap.plugin()\r\n}\r\n```\r\n\r\nYou can safely ignore the single slash `lib:/` vs `lib://` - it is a weird workaround for a strange quirk of Tauri that I couldn't quite figure out.\r\n\r\nSince both the internal code and the plugin code use the same URL to import svelte libraries, the browser will use the same instance of svelte for the import.\r\n\r\nI am assuming that your app is run in a browser instead of Tauri. I can see a potential solution here, which is to import svelte through a CDN, then use the same technique that I used to rewrite imports for internal and plugin code. \r\n\r\nEdit: note that the esbuild plugin I linked only supports https protocol and nothing else. I forked the plugin to allow for `lib://` protocol.","updated_at":"2023-04-22T18:03:30Z","created_at":"2023-04-22T18:01:12Z","creator_user_login":"kennethnym"}
{"number":6584,"comment_id":"1520089491","body":"@kennethnym Thanks very much for the detailed answer.\r\n\r\nIt looks like I need to make the plugins know where or how they will be used, what I'm actually try to avoid.\r\nWhat I have tried is mark svelte as external dependency in the plugin code, so it would import from `svelte/internal`. Then in the browser try to map `svelte/internal` to the svelte chunk generated by the main app bundler using import maps.\r\nThat worked, but import maps aren't yet well supported in all browsers.\r\n\r\nI'll try the CDN option with your custom vite plugin.\r\n\r\nFeels like I'm close to it, but missing some final pieces of the puzzle.","updated_at":"2023-04-24T12:45:37Z","created_at":"2023-04-24T12:45:37Z","creator_user_login":"vitmsrk"}
{"number":6584,"comment_id":"1569187851","body":"For us the bug was that we needed to wrap our Sapper instance with `DOMContentLoaded` <https://github.com/upptime/status-page/pull/538/commits/9104d0697f09a156e368fa63eabb7b86f9f4f43e>.","updated_at":"2023-05-30T22:10:41Z","created_at":"2023-05-30T22:10:41Z","creator_user_login":"titanism"}
{"number":6584,"comment_id":"1701990924","body":"You may also encounter this error if your index.html is missing `id=\"app\"` on the intended DOM element (or whatver ID you used in main.js).","updated_at":"2023-09-01T01:36:50Z","created_at":"2023-09-01T01:36:50Z","creator_user_login":"chrisws"}
{"number":1686,"comment_id":"1000620170","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:48:07Z","created_at":"2021-12-24T02:48:07Z","creator_user_login":"stale[bot]"}
{"number":1528,"comment_id":"490956634","body":"It might improve the performance of http://rethinking-reactivity.surge.sh/svelte-svg/, which would be fun","updated_at":"2019-05-09T15:40:29Z","created_at":"2019-05-09T15:40:29Z","creator_user_login":"Rich-Harris"}
{"number":1528,"comment_id":"674518024","body":"Is anyone working on this? I can pick it up if not. ","updated_at":"2020-08-16T12:10:34Z","created_at":"2020-08-16T12:01:15Z","creator_user_login":"NazimHAli"}
{"number":1528,"comment_id":"674543044","body":"@NazimAli2017 I doubt very much anyone is working on this - it's more than 2 years old with no comments. We'd welcome your contributions :)","updated_at":"2020-08-16T15:49:52Z","created_at":"2020-08-16T15:49:52Z","creator_user_login":"antony"}
{"number":1528,"comment_id":"675820690","body":"@antony awesome, going to start on this! Will do some research to setup a baseline/benchmark for comparison :tada: ","updated_at":"2020-08-19T02:51:56Z","created_at":"2020-08-19T02:51:56Z","creator_user_login":"NazimHAli"}
{"number":1528,"comment_id":"1001100623","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T03:09:54Z","created_at":"2021-12-26T03:09:54Z","creator_user_login":"stale[bot]"}
{"number":1754,"comment_id":"493378200","body":"Reversed transition content doesn‚Äôt seem to update if there is an else branch. [REPL](https://svelte.dev/repl/f99b4fde6df34e96b2df86f9748b57e9?version=3.4.1)\r\n\r\nThe content is properly changed if the `{:else}` branch is removed or if the timeout it bumped to 1000 so that it completes before reversing.","updated_at":"2019-05-17T08:57:49Z","created_at":"2019-05-17T08:57:49Z","creator_user_login":"hampusharling"}
{"number":1754,"comment_id":"509224693","body":"This is because the if-block is still outroing when the setTimeout callback is executed, so it's transitioned in without getting re-created or updated. I managed to solve this issue in this commit https://github.com/unlocomqx/svelte/commit/2c83992ae94170e67711d6d0a866acd6520c8769\r\n\r\nWhat it does is update the outroing if-block before it gets transitioned in. Here's what the compiled code looks like\r\n\r\n```\r\nif_block = if_blocks[current_block_type_index];\r\n\r\n// condition is false as the if-block is still outroing and not deleted\r\nif (!if_block) {\r\n  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);\r\n  if_block.c();\r\n}\r\n\r\n// -> added code\r\n// if still outroing, update if-block\r\nif (if_block && is_outroing(if_block)) {\r\n  if_block.p(changed, ctx);\r\n}\t\r\n\t\t\t\r\n// transition the if-block as usual\r\ntransition_in(if_block, 1);\r\nif_block.m(div1, null);\r\n```\r\n","updated_at":"2019-07-08T13:27:38Z","created_at":"2019-07-08T13:27:38Z","creator_user_login":"unlocomqx"}
{"number":1689,"comment_id":"417035980","body":"I am also experiencing this issue, Svelte is highjacking slots from HTML custom elements.","updated_at":"2018-08-29T17:24:51Z","created_at":"2018-08-29T17:24:51Z","creator_user_login":"alindsay55661"}
{"number":1689,"comment_id":"569422047","body":"Also affected. In my company, we are actually thinking of migrating big parts of our infrastructure in svelte.\r\nBut without a solution on that issue, we will not be able to use our (already developed) custom elements.\r\nThis would be a pity because svelte is a really awesome framework.\r\nPlease consider giving a proper solution, or at least a workaround on that.\r\n\r\nThanks in advance!\r\n\r\nEdit:\r\nI found a workaround using the \"use:\" directive and add the slot attribute manually.\r\nThis way, I can use slots within if blocks and everything. Svelte does not try to interpret it:\r\n```\r\n  <my-web-component>\r\n    {#if showSlots}\r\n      <div use:addNamedSlot={\"subtitle\"}>My subtitle</div>\r\n      <div use:addNamedSlot={\"footer\"}>My footer</div>\r\n    {/if}\r\n  </my-web-component>\r\n\r\n//... and my fucntion addNamedSlot:\r\nexport function addNamedSlot(node: HTMLElement, name: string) { //if you don't use ts, just remove the :Type from the params\r\n  node.setAttribute(\"slot\", name);\r\n}\r\n```\r\n\r\nI actually implemented the addNamedSlot in an other file so that I can import it and re-use it.\r\n\r\nStill, it would be very nice to have a way saying to svelte:\r\n**hey, do not try to interpret my slot tags and slot attributes, just render them as you would with any other attribute/tagname.**","updated_at":"2019-12-28T15:36:34Z","created_at":"2019-12-28T14:32:41Z","creator_user_login":"alkismavridis"}
{"number":1689,"comment_id":"571660549","body":"A simple workaround is to put your custom component into an html element. Then the html element will target the appropriate slot. e.g.\r\n```\r\n<div slot=\"footer\"> <!-- html element which targets the appropriate slot -->\r\n    <Button caption=\"Save\" /> <!-- Custom svelte component -->\r\n</div>\r\n```","updated_at":"2020-01-07T16:24:33Z","created_at":"2020-01-07T16:23:26Z","creator_user_login":"E01T"}
{"number":1689,"comment_id":"596463905","body":"@nsaunders your repro is not found https://github.com/therealnicksaunders/svelte/tree/issue/slotted-content, would it be possible to help recreate the repro so i can take a look at it?","updated_at":"2020-03-09T11:09:10Z","created_at":"2020-03-09T11:09:10Z","creator_user_login":"tanhauhau"}
{"number":1689,"comment_id":"611557102","body":"Closing due to inactivity, will re-open if a repro appears.","updated_at":"2020-04-09T14:25:48Z","created_at":"2020-04-09T14:25:48Z","creator_user_login":"antony"}
{"number":1689,"comment_id":"870633977","body":"I tried to make a CodeSandBox to demonstrate this issue. I am using custom elements from Ionic. \r\n\r\nUsing an html element like span does work. However for certain other Custom Element components having this extra span tag breaks the display of the Custom Element.\r\n\r\nUsing svelte:fragment would be great but I have not found a way to get it to forward to the correct Custom Element slot.\r\n\r\nThe Ionic Toolbar component has these slots defined...\r\n![image](https://user-images.githubusercontent.com/6476560/123810604-1f796980-d925-11eb-9513-c0c5562a1527.png)\r\n\r\n[Ionic Toolbar Source](https://github.com/ionic-team/ionic-framework/tree/master/core/src/components/toolbar#slots)\r\n\r\nI have the Svelte Toolbar component configured as\r\n![image](https://user-images.githubusercontent.com/6476560/123810883-59e30680-d925-11eb-9989-9feb08b17e9a.png)\r\n\r\nHere is the result of my testing in the CodeSandBox. Hopefully I didn't make too many mistakes üòÖ \r\n\r\n![image](https://user-images.githubusercontent.com/6476560/123809967-a1b55e00-d924-11eb-86a9-fdbdb26fd1cc.png)\r\n\r\n[CodeSandBox](https://codesandbox.io/s/svelte-issue-1689-ivt8g?file=/App.svelte) üë®‚Äçüíª ","updated_at":"2021-06-29T14:08:59Z","created_at":"2021-06-29T14:08:59Z","creator_user_login":"RobertWeaver"}
{"number":1689,"comment_id":"876207891","body":"Hey @tanhauhau I added an [example](https://github.com/sveltejs/svelte/issues/1689#issuecomment-870633977) in the above comment. \r\n\r\nDo you think we can take a look and see if the issue can be reopened? ‚ò∫Ô∏è ","updated_at":"2021-07-08T07:38:46Z","created_at":"2021-07-08T07:38:46Z","creator_user_login":"RobertWeaver"}
{"number":1689,"comment_id":"876222738","body":"copied the code sandbox into https://svelte.dev/repl/cfe22283aa194419887fd45f9775a245?version=3.38.3","updated_at":"2021-07-08T08:01:47Z","created_at":"2021-07-08T08:01:47Z","creator_user_login":"tanhauhau"}
{"number":1689,"comment_id":"1328194677","body":"Hi\r\n\r\nusing the UI5 REPL available through the mentioned link I managed to implement slot content projection (is that the proper word?) into the svelte component for Ionic components (as @RobertWeaver & @tanhauhau tried). With a few amendments. I did not use `$$restProps` nor `svelte:fragment`\r\n\r\nThis as part of the project to have all Ionic elements have Svelte wrappers (90 components).\r\n\r\nSo my understanding (and this is working in practice for me) that there are two steps here needed to realise this - \r\n\r\nStep 1. adding the slot definitions within the `<slot name=\"slotname\">` in the component. This tells the Svelte compiler these slots are OK - but does not yet project to content into it.\r\n\r\nStep 2. using `$$props` to spread the slot definition into the webcomponent.\r\n \r\nThe Svelte wrapper `IonItem.svelte` for webcomponent `ion-item` would then look like this:\r\n\r\n```sv\r\n<script lang=\"ts\">\r\n  import type { Color, AnimationBuilder, RouterDirection } from \"@ionic/core\";\r\n  import { IonItem } from \"@ionic/core/components/ion-item\";\r\n  import { defineComponent } from \"ionic-svelte\";  // code that registers the webcomponent\r\n\r\n  //@ts-ignore\r\n  export let color: Color = undefined;\r\n  //@ts-ignore\r\n  export let button = false;\r\n ...all sorts of props\r\n\r\n  defineComponent(\"ion-item\", IonItem);\r\n</script>\r\n\r\n<ion-item\r\n  {color}\r\n ....other props\r\n  {lines}\r\n  {counter}\r\n  {routerAnimation}\r\n  {routerDirection}\r\n  {target}\r\n  {type}\r\n  {counterFormatter}\r\n  {...$$props}            // this propagates the slot names and the content\r\n  on:focus\r\n  on:blur\r\n  ..... other events\r\n  on:click\r\n  ><slot /><slot name=\"start\" /><slot name=\"end\" /><slot name=\"error\" /><slot name=\"helper\"  />\r\n</ion-item>\r\n``` \r\n\r\nNow I don't have any issues getting the content in the right slot and no typescript issues. Here the full code for this wrapper - https://github.com/Tommertom/svelte-ionic-npm/blob/main/experimental/components/IonItem.svelte\r\n\r\nBut now there are other issues now arising, getting webcomponents to work with Svelte wrappers, as internal stuff in the webcomponent library cannot target elements properly anymore...... not sure if this is because the setup I have choosen.\r\n\r\n\r\nps.\r\nThe alternative I had going on earlier was using a shim property called `ionSlot` that would use `{#if ionSlot=...` blocks to hardcode slot content in the webcomponent. And then I also had to use an `Empty` svelte component with all slot definitions to avoid complaints from the Svelte compiler. I felt this was not the best way to go.","updated_at":"2022-11-27T08:28:58Z","created_at":"2022-11-27T08:23:03Z","creator_user_login":"Tommertom"}
{"number":1689,"comment_id":"1534094612","body":"Potentially relates to #8457 and #3128.","updated_at":"2023-05-04T04:58:16Z","created_at":"2023-05-04T04:58:16Z","creator_user_login":"patricknelson"}
{"number":1824,"comment_id":"473732001","body":"I _think_ this idea got absorbed into the other composition improvements.","updated_at":"2019-03-18T00:31:44Z","created_at":"2019-03-18T00:31:44Z","creator_user_login":"Conduitry"}
{"number":1824,"comment_id":"545464070","body":"This issue can be closed","updated_at":"2019-10-23T14:13:12Z","created_at":"2019-10-23T14:13:12Z","creator_user_login":"dxlbnl"}
{"number":1824,"comment_id":"648898999","body":"Is there today a workaround/hack to implement this kind of forwarding ?\r\n\r\nI am trying to implements this usecase (a generic lazy loader component which  forwards slots/events to the \"real\" component).","updated_at":"2020-06-24T15:40:15Z","created_at":"2020-06-24T15:40:15Z","creator_user_login":"j3rem1e"}
{"number":1824,"comment_id":"860285620","body":"i think this is still not precisely working as of svelte 3 https://svelte.dev/repl/d329e911978c4d7f89fc991b66fe9a91?version=3.38.2","updated_at":"2021-06-13T23:28:55Z","created_at":"2021-06-13T23:28:55Z","creator_user_login":"swyxio"}
{"number":1824,"comment_id":"1000620130","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-24T02:47:59Z","created_at":"2021-12-24T02:47:59Z","creator_user_login":"stale[bot]"}
{"number":1825,"comment_id":"499898329","body":"Still not working in sveltev3.\r\nTo replicate this issue you can use this repo: https://github.com/dylanblokhuis/svelte-transition-issue","updated_at":"2019-06-07T14:06:32Z","created_at":"2019-06-07T14:06:32Z","creator_user_login":"dylanblokhuis"}
{"number":1825,"comment_id":"522219665","body":"this is a big big big bug,not only Transitions but also <style></style> not work","updated_at":"2019-08-17T09:06:57Z","created_at":"2019-08-17T09:06:57Z","creator_user_login":"hongmomanu"}
{"number":1825,"comment_id":"538869255","body":"The reason is that the `create_rule` function in the [style-manager](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/style_manager.ts) appends styles to document head and not inside the shadow root as described [here](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM).\r\n\r\nSo, line 32, which is `document.head.appendChild(style);` should actually be something like `closestShadowRootOrDocumentHead.appendChild(style);`.\r\n\r\nHowever, currently, the function doesn't have a `closestShadowRootOrDocumentHead`. It gets called after a series of other functions and passing `customElement` context through those 5 or 6 other functions seems to be necessary to achieve that.\r\n\r\nAlthough **performance-wise not the best solution**, there is a cleaner alternative:\r\n\r\n```javascript\r\nfunction find_root(element) {\r\n  const parent = element.parentNode;\r\n\r\n  return parent\r\n    ? parent.head\r\n      ? parent.head\r\n      : find_root(parent)\r\n    : element;\r\n}\r\n```\r\n\r\nIf a function like the one above is added to the style-manager, then line 32 can be changed into this:\r\n\r\n```javascript\r\nfind_root(node).appendChild(style);\r\n```\r\n\r\nAnother alternative might be **replacement of line 32 at compile time by the compiler**. Performance would then be OK.\r\n\r\nAn final option I could think of is **doing the same replacement via a custom element transition loader for module bundlers** like Rollup and Webpack, but that means additional and repetitive work for something that should already be present within the compiled output. ü§∑‚Äç‚ôÇÔ∏è","updated_at":"2019-10-07T22:25:40Z","created_at":"2019-10-07T07:15:22Z","creator_user_login":"armanozak"}
{"number":1825,"comment_id":"717885496","body":"As long as the PR https://github.com/sveltejs/svelte/pull/4998 is still open you can use the build script in the custom-elements template that I created. It fixes the transition using `.getRootNode()`.\r\n\r\nCustom element template: https://github.com/redradix/svelte-custom-element-template\r\nBuild script source: https://github.com/redradix/svelte-custom-element-template/blob/master/scripts/build.js ","updated_at":"2020-10-28T11:59:10Z","created_at":"2020-10-28T11:57:48Z","creator_user_login":"MonkeyAndres"}
{"number":1825,"comment_id":"761116595","body":"I spent some time today with this, and made a work-around using `tick`. If anyone is interested:\r\n\r\nhttps://github.com/akauppi/sv-keys/blob/master/src/tools/slideFixed.js#L32-L40\r\n\r\nTL;DR It's a custom transition and while `css:` fails quietly (as stated), `tick:` does the work.\r\n\r\n```\r\ntick: t => {  // jer..ky\r\n      node.style.right = f(t)   // üëçü•¥\r\n    }\r\n```","updated_at":"2021-01-15T18:44:28Z","created_at":"2021-01-15T18:44:28Z","creator_user_login":"akauppi"}
{"number":1825,"comment_id":"826224616","body":"Until a PR fixing this becomes merged, I've made a tiny workaround that allows transitions to work with custom elements in at least simple cases, available here: https://github.com/Auroratide/svelte-custom-element-transitions\r\n\r\nSharing here in case anyone else finds it useful!","updated_at":"2021-04-25T02:34:40Z","created_at":"2021-04-25T02:34:40Z","creator_user_login":"Auroratide"}
{"number":1805,"comment_id":"1001104101","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T04:09:55Z","created_at":"2021-12-26T04:09:55Z","creator_user_login":"stale[bot]"}
{"number":1805,"comment_id":"1133863880","body":"This is a Svelte v2 issue. Is this still relevant since v2 is not supported anymore or should this be closed?","updated_at":"2022-05-22T10:18:25Z","created_at":"2022-05-22T10:18:25Z","creator_user_login":"mcmxcdev"}
{"number":1755,"comment_id":"425428451","body":"To be fair, this is caused by an excessively large file, but where is that cutoff and what will be the demands of user apps?","updated_at":"2018-09-28T13:02:00Z","created_at":"2018-09-28T13:02:00Z","creator_user_login":"ispyinternet"}
{"number":1755,"comment_id":"860335848","body":"Closing as a duplicate of https://github.com/sveltejs/svelte/issues/4308. This issue isn't specific to form input, but multiple elements that are negatively affected by being destroyed and recreated such as videos and animations","updated_at":"2021-06-14T03:14:06Z","created_at":"2021-06-14T03:14:06Z","creator_user_login":"benmccann"}
{"number":1755,"comment_id":"861758805","body":"I feel that it might make sense to keep this as an separate open issue. I don't believe the cause is only destroying/recreating nodes but also calling `set_input_value` when mounting the elements. So even if we never destroy & recreate, form inputs will likely reset.","updated_at":"2021-06-15T19:04:30Z","created_at":"2021-06-15T19:04:30Z","creator_user_login":"hbirler"}
{"number":1755,"comment_id":"1153865821","body":"Ticket #4308 is solved but the problem persists, where hydration removes the input that has been done up to this point.","updated_at":"2022-06-15T08:05:45Z","created_at":"2022-06-13T12:41:23Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1153867443","body":"> You can disable the inputs until the page hydrates,\r\n\r\n@ispyinternet do you have a nice way of doing this? Or just some boolean variable that gets changed on \"onMount\"?","updated_at":"2022-06-13T12:43:29Z","created_at":"2022-06-13T12:43:12Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1160849220","body":"@benmccann  pinging you directly as you were the one closing this ticket. I still the problem described in this ticket still exists. Could you revive this ticket? :)\r\n\r\nCheers","updated_at":"2022-06-20T21:09:38Z","created_at":"2022-06-20T21:09:38Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1160990208","body":"@andreasnuesslein could you provide a minimal reproduction? Assuming the original case was addressed we will not have a way to reproduce otherwise","updated_at":"2022-06-21T00:33:58Z","created_at":"2022-06-21T00:33:58Z","creator_user_login":"benmccann"}
{"number":1755,"comment_id":"1169994664","body":"> @andreasnuesslein could you provide a minimal reproduction? Assuming the original case was addressed we will not have a way to reproduce otherwise\r\n\r\nI still mean to create an example. I've only been out of business with the flu for the last 10 days :\\  Slowly gettin' better.","updated_at":"2022-06-29T13:39:57Z","created_at":"2022-06-29T13:39:57Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1200941301","body":"I finally made an example @benmccann \r\n\r\nhttps://github.com/andreasnuesslein/svelte-ssr-issue\r\n\r\nBasically I created a new `sveltekit` project (`npm init svelte svelte-ssr-reset-example`) and modified the `index.svelte` and created the `sleep.svelte`. No other changes. The README.md contains the steps to reproduce.\r\n\r\n","updated_at":"2022-08-01T09:19:02Z","created_at":"2022-08-01T09:19:02Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1208297573","body":"Second this, prepared a nearly identical repro: https://github.com/thoughtspile/svelte-hydration-repro","updated_at":"2022-08-08T15:46:54Z","created_at":"2022-08-08T15:46:54Z","creator_user_login":"thoughtspile"}
{"number":1755,"comment_id":"1259549526","body":"Reproduced for me with latest svelte. Also it resets focus on input element too during hydration.","updated_at":"2022-09-27T13:56:39Z","created_at":"2022-09-27T13:56:39Z","creator_user_login":"istarkov"}
{"number":1755,"comment_id":"1307221829","body":"One way or another @benmccann , I understand it's not on the top of the list at the moment, but could you please re-open this issue? It's just not solved yet.\r\n\r\nCheers","updated_at":"2022-11-08T13:26:51Z","created_at":"2022-11-08T13:26:51Z","creator_user_login":"andreasnuesslein"}
{"number":1755,"comment_id":"1439023393","body":"This has been very frustrating experience for me as well, and should certainly be reopened. However, I'd like to share a workaround in the meantime.\r\n\r\nDuring initialization, it is possible to set the bound variable to the browsers current element's value. Like so:\r\n\r\n```svelte\r\n<script>\r\n  let value\r\n  if (document) {\r\n   value = document.querySelector('input[name=\"x\"]').value\r\n  }\r\n</script>\r\n\r\n<input name=\"x\" bind:value />\r\n```\r\n\r\nN.B.: I'm using this with `bind:group` in a sveltekit app and guard it with `browser` from `$app/environment`","updated_at":"2023-02-21T20:06:56Z","created_at":"2023-02-21T20:01:48Z","creator_user_login":"janvogt"}
{"number":1755,"comment_id":"1628023608","body":"In https://github.com/sveltejs/svelte/issues/8266#issuecomment-1456411585 there was a suggestion for claiming `<input>` nodes during hydration that seems good to me; copying it here so that it won't get lost if #8266 is closed as a duplicate.\r\n\r\n```js\r\n\tinput = claim_element(nodes, \"INPUT\", {});\r\n\t\r\n\t// When input is different from the context value\r\n\tif (input.value !== /*a*/ ctx[0]) {\r\n\t\t// We use the binding handler to update it's value\r\n\t\t/*input_input_handler*/ ctx[1].call(input).\r\n\t}\r\n```","updated_at":"2023-07-10T03:15:32Z","created_at":"2023-07-10T03:15:32Z","creator_user_login":"rmunn"}
{"number":1755,"comment_id":"1633119381","body":"We run this userland workaround in production, seems to do the trick with the caveat of not triggeing `on:input`:\r\n\r\n```js\r\n<script context=\"module\">\r\n\tconst preHydrationValues = new WeakMap();\r\n\t// client-side only\r\n\ttypeof document !== 'undefined' &&\r\n\t\tdocument.querySelectorAll('input').forEach((input) => {\r\n\t\t\t// only for changed inputs\r\n\t\t\tif (input.value !== input.getAttribute('value')) {\r\n\t\t\t\tpreHydrationValues.set(input, input.value);\r\n\t\t\t}\r\n\t\t});\r\n</script>\r\n\r\n<script>\r\n\texport let value;\r\n\tfunction restorePreHydrationValue(node) {\r\n\t\tconst savedValue = preHydrationValues.get(node);\r\n\t\tif (savedValue) {\r\n\t\t\tnode.value = savedValue;\r\n\t\t\tvalue = savedValue;\r\n\t\t\tpreHydrationValues.delete(node);\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<input\r\n\tuse:restorePreHydrationValue\r\n\tbind:value\r\n\t{...$$restProps}\r\n/>\r\n```","updated_at":"2023-07-12T19:51:42Z","created_at":"2023-07-12T19:51:42Z","creator_user_login":"thoughtspile"}
{"number":1831,"comment_id":"1001110205","body":"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n","updated_at":"2021-12-26T05:52:49Z","created_at":"2021-12-26T05:52:49Z","creator_user_login":"stale[bot]"}
